{
  "timestamp": "2025-09-14T16:38:40.149633",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 68,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return []\n\n    arr_sorted = sorted(arr)\n    smalest_value = arr_sorted[0]\n\n    return [smalest_value, arr_sorted.index(smalest_value)]\n\n\ndef main():\n    arr = [4, 2, 3]\n    print(pluck(arr))\n    arr = [1, 2, 3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))\n    arr = [1, 2, 3, 4, 5]\n    print(pluck(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(pluck(arr))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    mid = len(arr) / 2\n    left = [arr[0], 0]\n    right = [arr[0], 0]\n    for i in range(1, mid + 1):\n        left[1] = arr[i]\n        right[1] = arr[i]\n        if left[1] % 2!= 0:\n            left[0] = arr[i]\n        if right[1] % 2!= 0:\n            right[0] = arr[i]\n    if left[1] % 2 == 0:\n        return [left[0], mid]\n    elif right[1] % 2 == 0:\n        return [right[0], mid]\n    else:\n        return [right[0], mid]\n\n\ndef main():\n    # These \"asserts\" will be removed after the submission to the\n    # assignment when the submission is up.\n    assert 1 == 1\n    assert len(str(100 ** 3)) == str(100 ** 3).__len__() == 4\n    assert 1 == 1\n    assert 1 == 1\n    assert 2 == 2\n    assert 3 == 3\n    assert 4 == 4\n    assert 5 == 5\n    assert 6 == 6\n    assert 7 == 7\n    assert 8 == 8\n    assert 9 == 9\n    assert 10 == 10\n    assert 11 == 11\n    assert 12 == 12\n    assert 13 == 13\n    assert 14 == 14\n    assert 15 == 15\n    assert 16 == 16\n    assert 17 == 17\n    assert 18 == 18\n    assert 19 == 19\n    assert 20 == 20\n    assert 21 == 21\n    assert 22 == 22\n    assert 23 == 23\n    assert 24 == 24\n    assert 25 == 25\n    assert 26 == 26\n    assert 27 == 27\n    assert 28 == 28\n    assert 29 == 29\n    assert 30 == 30\n    assert 31 == 31\n    assert 32 == 32\n    assert 33 == 33\n    assert 34 == 34\n    assert 35 == 35\n    assert 36 == 36\n    assert 37 == 37\n    assert 38 == 38\n    assert 39 == 39\n    assert 40 == 40"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "nodes = sorted(arr, key=lambda x: x)\n    if len(nodes) == 0:\n        return []\n    if len(nodes) == 1:\n        return [nodes[0], 0]\n    if nodes[0] > nodes[1]:\n        return [nodes[0], 0]\n    if nodes[len(nodes) - 1] > nodes[len(nodes) - 2]:\n        return [nodes[len(nodes) - 1], len(nodes) - 1]\n    return [nodes[nodes.index(min(nodes))], nodes.index(min(nodes))]\n\n\ndef main():\n    for _ in range(input()):\n        nodes = list(map(int, input().split()))\n        print(*pluck(nodes))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return pluck_rec(arr, 0, len(arr) - 1)\n\ndef pluck_rec(arr, start, end):\n    if start == end:\n        return []\n    mid = (start + end) / 2\n    if arr[mid].value % 2 == 1:\n        return pluck_rec(arr, start, mid)\n    else:\n        return pluck_rec(arr, mid + 1, end)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return [node for node in arr if node % 2 == 0]\n\n\ndef main():\n    # These \"asserts\" will be removed after the submission to the OJ.\n    assert isinstance(pluck([4, 2, 3]), list), \"Error: Input must be a list of numbers.\"\n    assert isinstance(pluck([]), list), \"Error: Input must be a list of numbers.\"\n    assert isinstance(pluck([5, 0, 3, 0, 4, 2]), list), \"Error: Input must be a list of numbers.\"\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([1, 2, 3, 4, 5]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "nodes = list(map(int, arr))\n    result = []\n    if len(nodes) == 0:\n        return result\n    min_index = 0\n    min_value = nodes[0]\n    for i in range(1, len(nodes)):\n        if nodes[i] % 2 == 0:\n            if nodes[i] < min_value:\n                min_value = nodes[i]\n                min_index = i\n    result.append(min_value)\n    result.append(min_index)\n    return result"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return []\n    else:\n        arr = sorted(arr, key=lambda x: x % 2)\n        return arr"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return []\n\n    nums = sorted(arr)\n    if len(nums) == 0:\n        return []\n    \n    smallest = nums[0]\n    smallest_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] % 2 == 0:\n            if nums[i] < smallest:\n                smallest = nums[i]\n                smallest_index = i\n        else:\n            break\n\n    return [smallest, smallest_index]\n\n\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n\nif __name__ == '__main__':\n    test_pluck()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return sorted(arr, key=lambda x: x%2, reverse=True)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if not arr: return []\n    arr.sort()\n    even_count = 0\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            even_count += 1\n    return arr[even_count * 2 - 1] if even_count >= 2 else arr[-1]"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# TODO\n    pass"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "arr = sorted(arr)\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i]%2 == 0 and arr[i+1]%2 == 0:\n            if arr[i+1] < arr[i]:\n                arr[i] = arr[i+1]\n                arr[i+1] = arr[i]\n    for i in range(n):\n        if arr[i]%2 == 0:\n            arr[i] = arr[i]/2\n    return arr"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return _solution(arr)\n\n\ndef _solution(arr):\n    if arr:\n        # find the smallest even value\n        smalest_value = arr[0]\n        for node in arr:\n            if node % 2 == 0:\n                smalest_value = node\n                break\n        # find the smallest even value index\n        for i, node in enumerate(arr):\n            if node % 2 == 0:\n                if i < smalest_value:\n                    smalest_value = i\n                elif i == smalest_value:\n                    return [smalest_value, i]\n        return [smalest_value, 0]\n    return []"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return []\n    \n    # find the smallest even value\n    # use a map to store the map of smallest even value to its index\n    # and get the smallest even value index\n    result = {}\n    for i, node in enumerate(arr):\n        if i % 2 == 1:\n            result[node] = i + 1\n    \n    # find the smallest even value index\n    # if there are no even values, return []\n    if len(result) == 0:\n        return []\n    \n    min_even_value_index = min(result.values())\n    \n    # find the smallest even value\n    # if there are no even values, return []\n    if min_even_value_index == 0:\n        return []\n    \n    # return the smallest even value\n    return [result[min_even_value_index], min_even_value_index]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "n = len(arr)\n    if n == 0:\n        return []\n\n    # find the smallest even value\n    nodes = [n for n in arr if n % 2 == 0]\n    if nodes:\n        smalest = min(nodes)\n        return [smalest, nodes.index(smalest)]\n    else:\n        return [n for n in arr if n % 2 == 0]\n\n\n# TESTS\ntests = [\n    (([4,2,3],), [2, 1]),\n    (([1,2,3],), [2, 1]),\n    (([1,2,3,4],), [1, 0]),\n    (([],), []),\n    (([5, 0, 3, 0, 4, 2],), [0, 1]),\n]\nfor t in tests:\n    res = pluck(t[0])\n    assert res == t[1]"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return [min(arr), min(arr)] if len(arr) > 0 else []\n\nclass Solution(object):\n    def pluck(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [min(arr), min(arr)] if len(arr) > 0 else []"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return [smallest_even_value(arr, i) for i in range(len(arr))]\n\ndef smallest_even_value(arr, index):\n    if len(arr) == 0:\n        return []\n    if index >= len(arr):\n        return arr[-1]\n    if arr[index] % 2 == 0:\n        return arr[index]\n    return smallest_even_value(arr, index + 1)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def helper(nodes):\n        if nodes:\n            nodes = sorted(nodes)\n            if len(nodes) == 1:\n                return [nodes[0], 0]\n            if len(nodes) % 2:\n                return [nodes[len(nodes) // 2], 0]\n            return [nodes[len(nodes) // 2], 1]\n        return []\n\n    return helper(arr)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# TODO\n    pass"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "res = []\n    if len(arr) == 0:\n        return res\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            res.append([arr[i], i])\n    res.sort()\n    if len(res) == 0:\n        return res\n    return res[0][0]"
    },
    {
      "rank": 21,
      "score": 9.993386359878413,
      "candidate": "return [x for x in arr if x % 2 == 0]\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 9.982445240836125,
      "candidate": "if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0], 0]\n\n    smallest_even_value = None\n    smallest_even_index = None\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            smallest_even_value = arr[i]\n            smallest_even_index = i\n    if smallest_even_value is None:\n        return [arr[0], 0]\n\n    if smallest_even_value == arr[smallest_even_index]:\n        return [arr[smallest_even_index], smallest_even_index]\n    else:\n        return [arr[smallest_even_value], smallest_even_index]\n\n\n# Your Pluck object will be instantiated and called as such:\n# obj = Pluck(nodes)\n# param_1 = obj.pluck(nodes)\n\n# print(param_1)"
    },
    {
      "rank": 23,
      "score": 9.964715040425636,
      "candidate": "if not arr:\n        return []\n\n    # Sort the array by ascending order.\n    arr = sorted(arr)\n\n    # Find the smallest even value and its index.\n    start = 0\n    end = len(arr)\n    while start < end:\n        mid = start + (end - start) / 2\n        if arr[mid] % 2 == 0:\n            start = mid + 1\n        else:\n            end = mid\n\n    # Return the smallest even value if there are no even values.\n    if start == end:\n        return []\n\n    # Find the smallest even value and its index.\n    start = 0\n    end = len(arr)\n    while start < end:\n        mid = start + (end - start) / 2\n        if arr[mid] % 2 == 0:\n            start = mid + 1\n        else:\n            end = mid\n\n    # Return the smallest even value if there are no even values.\n    if start == end:\n        return []\n\n    # Find the smallest even value and its index.\n    start = 0\n    end = len(arr)\n    while start < end:\n        mid = start + (end - start) / 2\n        if arr[mid] % 2 == 0:\n            start = mid + 1\n        else:\n            end = mid\n\n    # Return the smallest even value if there are no even values.\n    if start == end:\n        return []\n\n    # Return the smallest even value and its index.\n    return [arr[start], start]"
    },
    {
      "rank": 24,
      "score": 9.93225049242612,
      "candidate": "if not arr:\n        return []\n    arr = sorted(arr)\n    if len(arr) == 0:\n        return []\n    low = arr[0]\n    high = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < low:\n                low = arr[i]\n            elif arr[i] > high:\n                high = arr[i]\n    if low == high:\n        return []\n    return [low, low - (low - high) % 2]\n\nif __name__ == '__main__':\n    sol = Solution()\n    arr = [4,2,3]\n    print(sol.pluck(arr))\n    arr = [1,2,3]\n    print(sol.pluck(arr))\n    arr = []\n    print(sol.pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(sol.pluck(arr))"
    },
    {
      "rank": 25,
      "score": 9.885264846385565,
      "candidate": "res = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            res.append([arr[i], i])\n    return res if len(res) > 0 else []"
    },
    {
      "rank": 26,
      "score": 9.853486398271725,
      "candidate": "# print(arr)\n    # return [min(arr), arr.index(min(arr))]\n    if not arr:\n        return []\n    # print(arr)\n    # print(min(arr))\n    # print(arr.index(min(arr)))\n    return arr.index(min(arr))\n\n\nif __name__ == '__main__':\n    arr = [4, 2, 3]\n    print(pluck(arr))\n\n    arr = [1, 2, 3]\n    print(pluck(arr))\n\n    arr = []\n    print(pluck(arr))\n\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))"
    },
    {
      "rank": 27,
      "score": 9.852459189161248,
      "candidate": "return sorted(arr, key=lambda n: n % 2)"
    },
    {
      "rank": 28,
      "score": 9.848485935832905,
      "candidate": "ret = []\n    if len(arr) == 0:\n        return ret\n    arr = sorted(arr)\n    arr = arr[::2]\n    if len(arr) == 0:\n        return ret\n    ret.append(arr[0])\n    return ret\n\n\nif __name__ == '__main__':\n    arr = [4, 2, 3]\n    print(pluck(arr))\n    arr = [1, 2, 3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))"
    },
    {
      "rank": 29,
      "score": 9.807867004965242,
      "candidate": "if not arr:\n        return []\n\n    min_value = arr[0]\n    min_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i]!= min_value:\n            min_value = arr[i]\n            min_index = i\n            break\n\n    return [min_value, min_index]\n\n\nclass Solution(object):\n    def pluck(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return pluck(arr)\n\n\ndef main():\n    sol = Solution()\n    arr = [4, 2, 3]\n    print(sol.pluck(arr))\n    arr = [1, 2, 3]\n    print(sol.pluck(arr))\n    arr = []\n    print(sol.pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(sol.pluck(arr))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 9.774287002229704,
      "candidate": "nodes = [int(x) for x in arr]\n    if len(nodes) == 0:\n        return []\n    elif len(nodes) == 1:\n        return [nodes[0], 0]\n    else:\n        heap = [(node, i) for i, node in enumerate(nodes)]\n        heapq.heapify(heap)\n        while len(heap)!= 1:\n            node, i = heapq.heappop(heap)\n            if i % 2:\n                heapq.heappush(heap, (node, i+1))\n                return [node, i+1]\n            else:\n                heapq.heappush(heap, (node, i))\n        return [nodes[0], 0]\n\n\n# Your Pluck object will be instantiated and called as such:\n# obj = Pluck(nodes)\n# param_1 = obj.pluck(nodes)"
    },
    {
      "rank": 31,
      "score": 9.772925330521893,
      "candidate": "if arr:\n        arr.sort()\n        return [arr[0], arr[0]]\n    return []\n\n\nif __name__ == '__main__':\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
    },
    {
      "rank": 32,
      "score": 9.771792420750574,
      "candidate": "def find_min(arr):\n        if len(arr) == 0:\n            return []\n        min_idx = 0\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                if arr[i] < arr[min_idx]:\n                    min_idx = i\n        return [arr[min_idx], min_idx]\n\n    return find_min(arr)"
    },
    {
      "rank": 33,
      "score": 9.765204623455809,
      "candidate": "if not arr:\n        return []\n\n    evens = []\n    for node in arr:\n        if node % 2 == 0:\n            evens.append(node)\n\n    if not evens:\n        return []\n\n    # Sort the evens, the smaller even is the first one\n    evens.sort(key=lambda x: x[0])\n\n    # If there is only one even, return it\n    if len(evens) == 1:\n        return [evens[0], 0]\n\n    # If there are multiple evens, return the smallest even one\n    return [evens[0], 0]"
    },
    {
      "rank": 34,
      "score": 9.73325246498266,
      "candidate": "return [node for node in arr if node % 2 == 0]"
    },
    {
      "rank": 35,
      "score": 9.724479110671924,
      "candidate": "if arr:\n        return min(arr)\n    else:\n        return []\n\nif __name__ == \"__main__\":\n    print(pluck([4,2,3]))\n    print(pluck([1,2,3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n    print(pluck([0, 1]))\n    print(pluck([0, 0]))"
    },
    {
      "rank": 36,
      "score": 9.705687041939786,
      "candidate": "res = []\n    if len(arr) == 0:\n        return res\n    # TODO: Optimize the code\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            res.append([arr[i], i])\n    return res\n\n# @include\ndef pluck(arr):\n    \"\"\"\n    >>> pluck([4, 2, 3])\n    [2, 1]\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    >>> pluck([])\n    []\n    >>> pluck([5, 0, 3, 0, 4, 2])\n    [0, 1]\n    \"\"\"\n    res = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            res.append([arr[i], i])\n    return res\n# @exclude"
    },
    {
      "rank": 37,
      "score": 9.68389132024349,
      "candidate": "def get_min_even(arr):\n        if arr == []:\n            return []\n\n        return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n\n    return [get_min_even(arr)] if arr else []\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.668308219850081,
      "candidate": "arr = sorted(arr)\n    if not arr:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0], 0]\n\n    if len(arr) == 2:\n        return [arr[0], 1]\n\n    i = 0\n    j = 0\n    while i < len(arr) - 1:\n        if arr[i] % 2 == 0:\n            j += 1\n        i += 1\n    return [arr[j], j]"
    },
    {
      "rank": 39,
      "score": 9.655993984000098,
      "candidate": "# If the array is empty, return empty list.\n    if len(arr) == 0:\n        return []\n\n    # If the array is not empty, sort the array.\n    arr.sort()\n\n    # If the array is empty, return empty list.\n    if len(arr) == 0:\n        return []\n\n    # If the array is not empty, start from the last element,\n    # and return the smallest value and its index.\n    # If the array is empty, return empty list.\n    return [arr[len(arr) - 1], len(arr) - 1]\n\n\nif __name__ == '__main__':\n    arr = [4, 2, 3]\n    print(pluck(arr))\n    arr = [1, 2, 3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2, 6, 7, 8]\n    print(pluck(arr))"
    },
    {
      "rank": 40,
      "score": 9.555068202994606,
      "candidate": "# O(n) time and O(n) space\n    def find_smallest_even(arr):\n        return arr[0] if arr else None\n    \n    def find_smallest_index(arr):\n        return arr[0] if arr else None\n\n    smallest_even = find_smallest_even(arr)\n    smallest_index = find_smallest_index(arr)\n    return [smallest_even, smallest_index] if smallest_even else [smallest_index]"
    },
    {
      "rank": 41,
      "score": 9.503712751036133,
      "candidate": "# return a list of [smallest_value, smallest_index]\n    # if there are no even values, return []\n    evens = [x for x in arr if x % 2 == 0]\n    if len(evens) == 0:\n        return []\n    # return the smallest even value and the index of the smallest even value\n    return min(evens)\n\n\ndef main():\n    # test cases\n    cases = [\n        # [(nodes, expected),...]\n        # [(nodes, expected),...]\n        [([0, 1, 2, 3, 4, 5], [0, 1]),\n         ([1, 2, 3, 4, 5, 6], [1, 2]),\n         ([7, 8, 9, 10, 11, 12], [7, 8]),\n         ([13, 14, 15, 16, 17, 18], [13, 14]),\n         ([19, 20, 21, 22, 23, 24], [19, 20]),\n         ([25, 26, 27, 28, 29, 30], [25, 26]),\n         ([31, 32, 33, 34, 35, 36], [31, 32]),\n         ([37, 38, 39, 40, 41, 42], [37, 38]),\n         ([43, 44, 45, 46, 47, 48], [43, 44]),\n         ([49, 50, 51, 52, 53, 54], [49, 50]),\n         ([55, 56, 57, 58, 59, 60], [55, 56]),\n         ([61, 62, 63, 64, 65, 66], [61, 62]),\n         ([67, 68, 69, 70, 71, 72], [67, 68]),\n         ([73, 74, 75, 76, 77, 78], [73, 74]),\n         ([79, 80, 81, 82, 83, 84], [79, 80]),\n         ([85, 86, 87, 88, 89, 90], [85, 86]),\n         ([91, 92, 93, 94, 95, 96], [91, 92]),\n         ([97, 98, 99, 100, 101, 102], [97, 98]),\n         ([103, 104, 105, 106, 107, 108], [103, 104]),\n         ([109, 110, 111,"
    },
    {
      "rank": 42,
      "score": 9.481721644811609,
      "candidate": "# Your code here\n\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return [0, arr[0]]\n    res = [0, arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if res[1] < arr[i]:\n                res = [arr[i], i]\n            elif res[1] == arr[i]:\n                res = [arr[i], i]\n    return res\n\n\nif __name__ == \"__main__\":\n    arr = [4, 2, 3]\n    res = pluck(arr)\n    print(res)\n\n    arr = [1, 2, 3]\n    res = pluck(arr)\n    print(res)\n\n    arr = []\n    res = pluck(arr)\n    print(res)\n\n    arr = [5, 0, 3, 0, 4, 2]\n    res = pluck(arr)\n    print(res)"
    },
    {
      "rank": 43,
      "score": 9.457895862737047,
      "candidate": "def find_smallest_even_value(arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        arr = sorted(arr)\n        return arr[0]\n\n    def find_smallest_index(arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        arr = sorted(arr)\n        return arr[0]\n\n    smallest_even_value = find_smallest_even_value(arr)\n    smallest_index = find_smallest_index(arr)\n    return [smallest_even_value, smallest_index]"
    },
    {
      "rank": 44,
      "score": 9.413858754200472,
      "candidate": "nodes = list(arr)\n    if not nodes:\n        return []\n\n    result = []\n    min_even_value = 0\n    min_index = -1\n    for i in range(len(nodes)):\n        if nodes[i] % 2 == 0:\n            if nodes[i] < min_even_value:\n                min_even_value = nodes[i]\n                min_index = i\n        elif nodes[i] % 2 == 1:\n            if nodes[i] < min_even_value:\n                min_even_value = nodes[i]\n                min_index = i\n            else:\n                result.append([min_even_value, min_index])\n                min_even_value = nodes[i]\n                min_index = i\n    if min_even_value < min_even_value:\n        result.append([min_even_value, min_index])\n    return result"
    },
    {
      "rank": 45,
      "score": 9.349188836039769,
      "candidate": "#  The idea is to find the smallest even value and the smallest even index.\n    #  Then, we can pick the smallest even value and the smallest even index,\n    #  and return them in a list.\n    #  We can also return the smallest even value and the smallest even index,\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index,\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index,\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  and the smallest even value and the smallest even index,\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index.\n    #  or the smallest even value and the smallest index, or the smallest even value and the smallest index"
    },
    {
      "rank": 46,
      "score": 9.315015191163646,
      "candidate": "if not arr:\n        return []\n    return min(arr, key=lambda node: node[1])"
    },
    {
      "rank": 47,
      "score": 9.301873388755407,
      "candidate": "# TODO:\n    # 1. handle the case where the array is empty\n    # 2. handle the case where the array is a single node\n    if len(arr) == 0:\n        return []\n    # TODO:\n    # 1. handle the case where the array is a single node\n    # 2. handle the case where the array is a single node\n    # 3. handle the case where the array is a single node\n    # 4. handle the case where the array is a single node\n    # 5. handle the case where the array is a single node\n    # 6. handle the case where the array is a single node\n    # 7. handle the case where the array is a single node\n    # 8. handle the case where the array is a single node\n    # 9. handle the case where the array is a single node\n    # 10. handle the case where the array is a single node\n    # 11. handle the case where the array is a single node\n    # 12. handle the case where the array is a single node\n    # 13. handle the case where the array is a single node\n    # 14. handle the case where the array is a single node\n    # 15. handle the case where the array is a single node\n    # 16. handle the case where the array is a single node\n    # 17. handle the case where the array is a single node\n    # 18. handle the case where the array is a single node\n    # 19. handle the case where the array is a single node\n    # 20. handle the case where the array is a single node\n    # 21. handle the case where the array is a single node\n    # 22. handle the case where the array is a single node\n    # 23. handle the case where the array is a single node\n    # 24. handle the case where the array is a single node\n    # 25. handle the case where the array is a single node\n    # 26. handle the case where the array is a single node\n    # 27. handle the case where the array is a single node\n    # 28. handle the case where the array is a single node\n    # 29. handle the case where the array is a single node\n    # 30. handle the case where the array is a single node\n    # 31. handle the case where"
    },
    {
      "rank": 48,
      "score": 9.282877675415262,
      "candidate": "if arr == []:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    if len(arr) == 2:\n        return [arr[0], arr[1]]\n    if arr[0] < arr[1]:\n        return [arr[0], 0]\n    else:\n        return [arr[1], arr[0]]\n\n\nif __name__ == '__main__':\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))"
    },
    {
      "rank": 49,
      "score": 9.186674467732919,
      "candidate": "if len(arr) == 0:\n        return []\n    return sorted(arr, key=lambda n: (n // 2) % 2)"
    },
    {
      "rank": 50,
      "score": 9.179826962677028,
      "candidate": "if not arr:\n        return []\n    \n    res = []\n    res.append(arr[0])\n    arr.pop(0)\n    \n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 1:\n            res.append(arr[i])\n        else:\n            res.append(arr[i-1])\n            arr.pop(i-1)\n    \n    return res\n\n\nif __name__ == \"__main__\":\n    print(pluck([4,2,3]))\n    print(pluck([1,2,3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))"
    },
    {
      "rank": 51,
      "score": 9.16732163068345,
      "candidate": "nodes = sorted(arr, reverse=True)\n    if len(nodes) == 0:\n        return []\n    if len(nodes) == 1:\n        return [nodes[0], 0]\n    last_even = nodes[0]\n    for node in nodes[1:]:\n        if node % 2 == 0:\n            last_even = node\n        else:\n            break\n    return [last_even, nodes.index(last_even)]"
    },
    {
      "rank": 52,
      "score": 9.139054645472957,
      "candidate": "if len(arr) == 0:\n        return []\n\n    # Sort the array in increasing order\n    arr = sorted(arr)\n    # Find the first index with even value\n    first_even_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            first_even_index = i\n            break\n\n    # Find the first index with odd value\n    first_odd_index = first_even_index + 1\n    for i in range(first_even_index + 1, len(arr)):\n        if arr[i] % 2 == 1:\n            first_odd_index = i\n            break\n\n    # Find the index with the smallest even value\n    smalest_even_index = first_odd_index\n    for i in range(first_odd_index, first_even_index):\n        if arr[i] % 2 == 0:\n            smalest_even_index = i\n            break\n\n    # Return the index with the smallest even value\n    if arr[smalest_even_index] % 2 == 0:\n        return [arr[smalest_even_index], smalest_even_index]\n    else:\n        return [arr[smalest_even_index], smalest_even_index + 1]"
    },
    {
      "rank": 53,
      "score": 9.136110323872261,
      "candidate": "n = len(arr)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [arr[0], 0]\n\n    def even(arr):\n        return sum(map(lambda x: x % 2, arr))\n\n    if even(arr) == 0:\n        return [arr[0], 0]\n\n    return sorted(arr, key=lambda x: x % 2, reverse=True)[:1]\n\n\nclass Solution(object):\n    def pluck(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if len(arr) == 0:\n            return []\n        elif len(arr) == 1:\n            return [arr[0], 0]\n        else:\n            return sorted(arr, reverse=True)[:1]"
    },
    {
      "rank": 54,
      "score": 9.026091231845562,
      "candidate": "n = len(arr)\n    if n == 0:\n        return []\n\n    s = []\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            if s and arr[i] < s[-1]:\n                s.pop()\n            s.append(arr[i])\n    return s"
    },
    {
      "rank": 55,
      "score": 8.902950654191953,
      "candidate": "if len(arr) == 0:\n        return []\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 1:\n            result.append(arr[i])\n        else:\n            result.append(arr[i-1])\n    return result"
    },
    {
      "rank": 56,
      "score": 8.899707589994902,
      "candidate": "if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    # sort the array, and use the index of the first value\n    # as the index of the plucked node.\n    sorted_arr = sorted(arr)\n    return [sorted_arr[0]] if arr[0] % 2 == 0 else [sorted_arr[1]]\n\n\nif __name__ == '__main__':\n    arr = [4, 2, 3]\n    print(pluck(arr))\n    arr = [1, 2, 3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))"
    },
    {
      "rank": 57,
      "score": 8.882146100429058,
      "candidate": "nodes = sorted(arr, key=lambda x: x/2)\n    if nodes:\n        return [nodes[0], nodes[0]/2]\n    return []\n\n\nif __name__ == '__main__':\n    arr = [4,2,3]\n    print(pluck(arr))\n    arr = [1,2,3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))"
    },
    {
      "rank": 58,
      "score": 8.87468343976442,
      "candidate": "if not arr or not arr:\n        return []\n    res = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if res[-1] > arr[i]:\n                res.append(arr[i])\n            else:\n                res[-1] = arr[i]\n    return res\n\n\nif __name__ == \"__main__\":\n    arr = [4, 2, 3]\n    print(pluck(arr))\n    arr = [1, 2, 3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))"
    },
    {
      "rank": 59,
      "score": 8.826331580969718,
      "candidate": "if len(arr) == 0:\n        return []\n    min_index = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] == min_value:\n                min_value = arr[i]\n                min_index = i\n        else:\n            if arr[i] < min_value:\n                min_value = arr[i]\n                min_index = i\n    return [min_value, min_index]\n\n\nif __name__ == \"__main__\":\n    print(pluck([4,2,3]))\n    print(pluck([1,2,3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))"
    },
    {
      "rank": 60,
      "score": 8.74885805735177,
      "candidate": "if len(arr) == 0:\n        return []\n\n    arr.sort()\n\n    # find the smallest even value\n    idx = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            idx = i\n            break\n\n    # return the index of the smallest even value\n    if idx == 0:\n        return [arr[0], 0]\n    else:\n        return [arr[idx], idx]\n\n\nif __name__ == '__main__':\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))"
    },
    {
      "rank": 61,
      "score": 8.731932300199652,
      "candidate": "def _find_smallest_even_value(arr):\n        smallest_even_value = arr[0]\n        smallest_index = 0\n        for i in range(1, len(arr)):\n            if arr[i] % 2!= 0:\n                smallest_even_value += arr[i]\n            else:\n                smallest_even_value -= arr[i]\n                if smallest_even_value < 0:\n                    smallest_even_value += arr[i]\n                if smallest_even_value == 0:\n                    smallest_index = i\n        return smallest_even_value, smallest_index\n\n    return _find_smallest_even_value(arr)"
    },
    {
      "rank": 62,
      "score": 8.699447664929847,
      "candidate": "nodes = [arr[i] for i in range(len(arr))]\n    return pluck_recursive(nodes)\n\ndef pluck_recursive(nodes):\n    if not nodes:\n        return []\n\n    smallest_even = -1\n    smallest_even_index = -1\n    for i, node in enumerate(nodes):\n        if node % 2 == 0:\n            if node == smallest_even:\n                smallest_even_index = i\n            else:\n                smallest_even = node\n                smallest_even_index = i\n    if smallest_even_index >= 0:\n        return [smallest_even, smallest_even_index]\n    else:\n        return pluck_recursive(nodes[1:])\n\n\nif __name__ == \"__main__\":\n    arr = [4,2,3]\n    print(pluck(arr))\n    arr = [1,2,3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))\n    arr = [4, 2, 3]\n    print(pluck(arr))"
    },
    {
      "rank": 63,
      "score": 8.685680138007722,
      "candidate": "return _pluck(arr)\n\n\ndef _pluck(arr):\n    if not arr:\n        return []\n\n    # get the smallest value\n    smallest = arr[0]\n\n    # get the index of the smallest value\n    smallest_index = arr.index(smallest)\n\n    # get the indices of the values with the same smallest even value\n    indices = [i for i, val in enumerate(arr) if val % 2 == 0 and val == smallest]\n\n    # get the indices of the values with the same largest even value\n    indices = [i for i, val in enumerate(arr) if val % 2 == 0 and val!= smallest]\n\n    if indices:\n        return [smallest, indices[smallest_index]]\n    else:\n        return [smallest, smallest_index]"
    },
    {
      "rank": 64,
      "score": 8.677900096359725,
      "candidate": "if not nodes or len(nodes) == 0:\n        return []\n    ret = []\n    for i in range(len(nodes)):\n        if nodes[i] % 2 == 0:\n            ret.append([nodes[i], i])\n    if len(ret) == 0:\n        return ret\n    else:\n        return ret[0]"
    },
    {
      "rank": 65,
      "score": 8.614300379033399,
      "candidate": "arr = sorted(arr)\n    result = []\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            result.append([arr[i], i])\n    return result[0] if result else []\n\nif __name__ == '__main__':\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([5, 1, 2, 3, 4, 5]) == [5, 1]\n    assert pluck([5, 2, 4, 6, 7, 8]) == [5, 1]"
    },
    {
      "rank": 66,
      "score": 8.605945040541622,
      "candidate": "if not arr:\n        return []\n    l = []\n    for i, v in enumerate(arr):\n        if not v:\n            l.append((i, i))\n        else:\n            if i%2 == 0:\n                l.append((i, i))\n            else:\n                l.append((i, i+1))\n    return l\n\n\nif __name__ == '__main__':\n    arr = [4, 2, 3]\n    print(pluck(arr))\n    arr = [1, 2, 3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))"
    },
    {
      "rank": 67,
      "score": 8.60013825720412,
      "candidate": "return [n for n, i in sorted(enumerate(arr), key=lambda x: x[1]) if i % 2 == 0]\n\nif __name__ == '__main__':\n    arr = [4, 2, 3]\n    print(pluck(arr))\n    arr = [1, 2, 3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))"
    },
    {
      "rank": 68,
      "score": 8.596763910059998,
      "candidate": "nodes = arr\n\n    even_nodes = [n for n in nodes if n % 2 == 0]\n    smallest_even = min(even_nodes)\n    smallest_even_index = [i for i, n in enumerate(even_nodes) if n == smallest_even][0]\n\n    if len(even_nodes) == 0:\n        return []\n    elif len(even_nodes) == 1:\n        return [smallest_even, smallest_even_index]\n    else:\n        smallest_odd = min(even_nodes)\n        smallest_odd_index = [i for i, n in enumerate(even_nodes) if n == smallest_odd][0]\n        if smallest_odd_index < smallest_even_index:\n            return [smallest_odd, smallest_odd_index]\n        else:\n            return [smallest_even, smallest_even_index]\n\n\nif __name__ == '__main__':\n    arr = [4, 2, 3]\n    print(pluck(arr))\n    arr = [1, 2, 3]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))"
    },
    {
      "rank": 69,
      "score": 8.496578061608082,
      "candidate": "nodes = list(arr)\n    return pluck_helper(nodes)\n\ndef pluck_helper(nodes):\n    if not nodes:\n        return []\n    smalest = nodes[0]\n    for node in nodes:\n        if node % 2 == 0:\n            if node > smalest:\n                smalest = node\n            elif node < smalest:\n                smalest = node\n    return [smalest, nodes.index(smalest)]"
    },
    {
      "rank": 70,
      "score": 8.490070892638023,
      "candidate": "nodes = arr\n    # Find the first even number\n    # print(\"nodes:\", nodes)\n    even = 0\n    for i in range(0, len(nodes)):\n        if nodes[i] % 2 == 0:\n            even = nodes[i]\n            break\n    # print(\"even:\", even)\n\n    # Find the smallest even number in the array\n    # print(\"nodes:\", nodes)\n    smallest_even = 0\n    for i in range(0, len(nodes)):\n        if nodes[i] % 2 == 0:\n            if nodes[i] < smallest_even:\n                smallest_even = nodes[i]\n                # print(\"smallest_even:\", smallest_even)\n    # print(\"smallest_even:\", smallest_even)\n\n    # If there are no even numbers, return []\n    if smallest_even == 0:\n        return []\n\n    # Find the smallest even number in the array\n    # print(\"nodes:\", nodes)\n    smallest_even_index = 0\n    for i in range(0, len(nodes)):\n        if nodes[i] % 2 == 0:\n            if nodes[i] < smallest_even:\n                smallest_even_index = i\n                # print(\"smallest_even_index:\", smallest_even_index)\n    # print(\"smallest_even_index:\", smallest_even_index)\n\n    # If there are no even numbers, return []\n    if smallest_even_index == 0:\n        return []\n\n    # If there are no even numbers, return []\n    if smallest_even_index == len(nodes) - 1:\n        return []\n\n    # Find the smallest even number in the array\n    # print(\"nodes:\", nodes)\n    smallest_even_index = 0\n    for i in range(0, len(nodes)):\n        if nodes[i] % 2 == 0:\n            if nodes[i] < smallest_even:\n                smallest_even_index = i\n                # print(\"smallest_even_index:\", smallest_even_index)\n    # print(\"smallest_even_index:\", smallest_even_index)"
    },
    {
      "rank": 71,
      "score": 8.48757200941613,
      "candidate": "if arr == []:\n        return []\n\n    min_index = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < min_value:\n                min_value = arr[i]\n                min_index = i\n\n    return [min_value, min_index]"
    },
    {
      "rank": 72,
      "score": 8.476182700647769,
      "candidate": "if not arr or not arr:\n        return []\n\n    # Sort the array\n    arr = sorted(arr)\n\n    # Search for the first even value\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            return [arr[i], i]\n\n    # Search for the smallest even value\n    for i in range(len(arr) - 1):\n        if arr[i] % 2 == 0 and arr[i + 1] % 2 == 0:\n            return [arr[i + 1], i + 1]\n\n    # No even value\n    return []\n\n\nif __name__ == \"__main__\":\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert pluck([5, 0, 3, 0, 4, 2, 7, 0, 1]) == [0, 1]"
    },
    {
      "rank": 73,
      "score": 8.390089751721971,
      "candidate": "# Note: \n    #   1. all node.value is even\n    #   2. the first node.value is zero\n    #   3. all node.value >= 0\n\n    # sort the nodes by value\n    nodes = sorted(arr, key=lambda x: x.value, reverse=True)\n\n    # no even value, return []\n    if len(nodes) == 0:\n        return []\n\n    # get the smallest even value\n    smallest = nodes[0].value\n\n    # get the smallest index\n    smallest_index = nodes[0].index\n\n    # get the smallest even value\n    for i in range(1, len(nodes)):\n        if nodes[i].value % 2!= 0:\n            smallest = nodes[i].value\n            smallest_index = nodes[i].index\n\n    # return the smallest even value and its index\n    return [smallest, smallest_index]\n\n\nif __name__ == '__main__':\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([5, 0, 3, 0, 4, 2]))"
    },
    {
      "rank": 74,
      "score": 8.35718472541245,
      "candidate": "if not arr: return []\n\n    # base case\n    if len(arr) == 1: return [arr[0], 0]\n\n    # base case\n    if len(arr) == 2: return [arr[0], arr[1]]\n\n    # sort by value\n    arr = sorted(arr, key=lambda x: x)\n\n    # find the even value\n    even = [x for x in arr if x % 2 == 0]\n    if not even: return [arr[0], 0]\n\n    # find the smallest even value\n    smallest_even = min(even)\n    smallest_index = [i for i in range(len(arr)) if arr[i] == smallest_even][0]\n\n    # return the smallest even value\n    return [smallest_even, smallest_index]\n\n\nif __name__ == \"__main__\":\n    assert pluck([4,2,3]) == [2, 1]\n    assert pluck([1,2,3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
    },
    {
      "rank": 75,
      "score": 8.341198657160813,
      "candidate": "if len(arr) == 0:\n        return []\n    arr.sort()\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n    return [arr[0], arr.index(arr[0])]"
    },
    {
      "rank": 76,
      "score": 8.338329583215772,
      "candidate": "if len(arr) == 0:\n        return []\n\n    res = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if len(res) == 0:\n                res.append(arr[i])\n            else:\n                res = [arr[i]] + res\n    return res"
    },
    {
      "rank": 77,
      "score": 8.33440007467833,
      "candidate": "return [arr[0]] if arr else []\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    arr = [4,2,3]\n    print(sol.pluck(arr))\n    arr = [1,2,3]\n    print(sol.pluck(arr))\n    arr = []\n    print(sol.pluck(arr))"
    },
    {
      "rank": 78,
      "score": 8.307348382041605,
      "candidate": "return [i for i, v in enumerate(arr) if v % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    assert pluck([4,2,3]) == [2, 1]\n    assert pluck([1,2,3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
    },
    {
      "rank": 79,
      "score": 8.290443235543494,
      "candidate": "if len(arr) == 0:\n        return []\n    res = []\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            if i == 0 or node < arr[i - 1]:\n                res.append([node, i])\n    return res"
    },
    {
      "rank": 80,
      "score": 8.263455772648776,
      "candidate": "if not arr: return []\n    \n    min_index = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == min_value:\n            min_index = i\n    \n    if min_value % 2 == 0:\n        return [min_value, min_index]\n    else:\n        return [min_value, min_index]\n\nif __name__ == '__main__':\n    arr = [4,2,3]\n    print(pluck(arr))"
    },
    {
      "rank": 81,
      "score": 8.223791483055017,
      "candidate": "if not arr:\n        return []\n    min_even = min(map(lambda n: n % 2, arr))\n    return [(min_even, i) for i, n in enumerate(arr) if n % 2 == min_even]"
    },
    {
      "rank": 82,
      "score": 8.208618633959713,
      "candidate": "return [min([x for x in arr if x % 2 == 0]), min([x for x in arr if x % 2 == 1])]"
    },
    {
      "rank": 83,
      "score": 8.200857441855831,
      "candidate": "# Your code here\n    if arr == [] or arr == None:\n        return []\n    arr = sorted(arr, key=lambda x: x)\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i] - 1\n    \n    return arr"
    },
    {
      "rank": 84,
      "score": 8.195457148673936,
      "candidate": "# https://www.codewars.com/kata/plucking-a-node-in-a-binary-tree/train/python\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 1:\n            smallest = arr[i]\n        if arr[i] % 2 == 0 and arr[i] < smallest:\n            smallest = arr[i]\n    return [smallest, len(arr) - 1]"
    },
    {
      "rank": 85,
      "score": 8.161642336696628,
      "candidate": "if len(arr) == 0:\n        return []\n\n    result = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] == arr[i-1]:\n                result.append([arr[i], i])\n            else:\n                result.append([arr[i], i-1])\n    return result\n\n\nif __name__ == '__main__':\n    print(pluck([4,2,3]))\n    print(pluck([1,2,3]))\n    print(pluck([5,0,3,0,4,2]))"
    },
    {
      "rank": 86,
      "score": 8.106117666498932,
      "candidate": "if not arr: return []\n    nodes = list(arr)\n    nodes.sort()\n    for i in range(len(nodes)):\n        if nodes[i] % 2:\n            return nodes[:i+1]\n    return nodes\n\n\nif __name__ == \"__main__\":\n    assert pluck([4,2,3]) == [2, 1]\n    assert pluck([1,2,3]) == [2, 1]\n    assert pluck([1,2,3,4]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
    },
    {
      "rank": 87,
      "score": 8.064452451084646,
      "candidate": "if arr == []:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    \n    index_min = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2!= 0:\n            min_value = arr[i]\n            index_min = i\n    \n    return [min_value, index_min]"
    },
    {
      "rank": 88,
      "score": 8.050012208529804,
      "candidate": "nodes = list(arr)\n    if not nodes:\n        return []\n    nodes.sort(key = lambda node: node if node % 2 == 0 else -node)\n    return [nodes[0], nodes[0]] if len(nodes) % 2 == 1 else nodes[:-1]\n\n\nif __name__ == '__main__':\n    arr = [4,2,3]\n    assert pluck(arr) == [2, 1]\n    arr = [1,2,3]\n    assert pluck(arr) == [2, 1]\n    arr = []\n    assert pluck(arr) == []\n    arr = [5, 0, 3, 0, 4, 2]\n    assert pluck(arr) == [0, 1]"
    },
    {
      "rank": 89,
      "score": 7.903477463055962,
      "candidate": "nodes = list(arr)\n    if not nodes:\n        return []\n    if len(nodes) == 1:\n        return [nodes[0], 0]\n    return [min(nodes), min(enumerate(nodes))]"
    },
    {
      "rank": 90,
      "score": 7.870647928958064,
      "candidate": "if not arr:\n        return []\n\n    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n                min_even = arr[i]\n                min_index = i\n    return [min_even, min_index]"
    },
    {
      "rank": 91,
      "score": 7.780661704816858,
      "candidate": "return sorted(arr, key=lambda x: x % 2, reverse=True)[:1]\n\n\nclass Solution(object):\n    def pluck(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not arr:\n            return []\n\n        plucked = [arr[0]]\n        for i in range(1, len(arr)):\n            if arr[i] % 2!= plucked[-1]:\n                plucked.append(arr[i])\n        return plucked"
    },
    {
      "rank": 92,
      "score": 7.749539108971754,
      "candidate": "if arr == None or len(arr) == 0:\n        return []\n    \n    # sort the array by value\n    sorted_arr = sorted(arr, key = lambda x: x.value)\n    \n    # remove the smallest node\n    sorted_arr.pop(0)\n    \n    # get the index of the smallest value\n    smallest_index = 0\n    for i in range(len(arr)):\n        if arr[i].value % 2 == 0:\n            smallest_index = i\n            break\n    \n    # return the node with smallest index\n    return sorted_arr[smallest_index]\n\nif __name__ == '__main__':\n    arr = [4,2,3]\n    print pluck(arr)\n    \n    arr = [1,2,3]\n    print pluck(arr)\n    \n    arr = []\n    print pluck(arr)\n    \n    arr = [5, 0, 3, 0, 4, 2]\n    print pluck(arr)"
    },
    {
      "rank": 93,
      "score": 7.633733063163319,
      "candidate": "if not arr:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0], 0]\n\n    return sorted(arr, key=lambda x: x % 2, reverse=True)[0:2]\n\n\nif __name__ == '__main__':\n    assert pluck([4, 2, 3]) == [2, 1]\n    assert pluck([1, 2, 3]) == [2, 1]\n    assert pluck([]) == []\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
    },
    {
      "rank": 94,
      "score": 7.54520272945528,
      "candidate": "return sorted(arr, key=lambda x: x % 2)\n\n\ndef main():\n    nums = [4, 2, 3]\n    print(pluck(nums))\n\n    nums = [1, 2, 3]\n    print(pluck(nums))\n\n    nums = []\n    print(pluck(nums))\n\n    nums = [5, 0, 3, 0, 4, 2]\n    print(pluck(nums))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 95,
      "score": 7.52339948622095,
      "candidate": "if not arr:\n        return []\n    arr = sorted(arr)\n    if len(arr) == 1:\n        return arr\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n    return [arr[0], 1]"
    },
    {
      "rank": 96,
      "score": 7.213164245522265,
      "candidate": "if not arr:\n        return []\n    # sort arr\n    arr = sorted(arr)\n    # find the first even value\n    even = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            even = arr[i]\n            break\n    # return all even values\n    return [even, i]"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# time:O(n)\n    # space:O(n)\n    nodes = arr\n    ret = []\n    if len(nodes) == 0:\n        return ret\n\n    for i, node in enumerate(nodes):\n        if node % 2 == 0:\n            ret.append([node, i])\n    ret.sort(key=lambda x: x[0], reverse=True)\n    return ret\n\n\ndef test_cases():\n    for arr, expected in tests:\n        print(pluck(arr))\n        assert expected == pluck(arr)\n    return\n\n\nif __name__ == '__main__':\n    test_cases()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if not nodes:\n        return []\n\n    heap = [nodes[0]]\n    for i in range(1, len(nodes)):\n        heap.append(heap[i-1]+nodes[i])\n    heap.sort()\n    return [heap[0], heap[1]]\n\n\nif __name__ == '__main__':\n    arr = [4,2,3]\n    arr = [1,2,3]\n    arr = [5, 0, 3, 0, 4, 2]\n    arr = []\n    arr = [1,2,3]\n    arr = [1,2,3,4]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    arr = [1,2"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return []"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if not arr:\n        return []\n\n    sorted_nodes = sorted(arr, key=lambda x: x[0])\n    sorted_nodes = [x[1] for x in sorted_nodes]\n    if len(sorted_nodes) == 1:\n        return sorted_nodes\n    elif len(sorted_nodes) == 0:\n        return []\n\n    smallest_even_value = sorted_nodes[0]\n    smallest_index = 0\n\n    for i in range(1, len(sorted_nodes)):\n        if sorted_nodes[i] % 2 == 0:\n            smallest_even_value = sorted_nodes[i]\n            smallest_index = i\n\n    if smallest_even_value % 2 == 0:\n        return [smallest_even_value, smallest_index]\n    else:\n        return [smallest_even_value, smallest_index + 1]\n\n\nif __name__ == \"__main__\":\n    arr = [4,2,3]\n    print(pluck(arr))\n\n    arr = [1,2,3]\n    print(pluck(arr))\n\n    arr = []\n    print(pluck(arr))\n\n    arr = [5, 0, 3, 0, 4, 2]\n    print(pluck(arr))\n\n    arr = [1,2,3]\n    print(pluck(arr))"
    }
  ]
}