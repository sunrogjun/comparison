{
  "timestamp": "2025-09-14T17:20:27.934241",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 161,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# return the reversed string\n    if not s:\n        return s\n\n    # reverse the first letter\n    if s[0].isalpha():\n        s = s[0].lower() + s[1:]\n\n    # reverse the rest\n    for i in range(1, len(s)):\n        if s[i].isalpha():\n            s = s[:i] + s[i].upper() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n\n    # reverse the last letter\n    if s[-1].isalpha():\n        s = s[:-1] + s[-1].upper()\n\n    return s\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    print(solve(s))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return \"\".join(sorted(s.lower()))\n\nif __name__ == \"__main__\":\n    # test cases\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n\n    # more tests\n    assert solve(\"\") == \"\"\n    assert solve(\"abc\") == \"abc\"\n    assert solve(\"123\") == \"123\"\n    assert solve(\"123456789\") == \"123456789\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"abcdefg\") == \"abcdefg\""
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "res = []\n    for c in s:\n        if c.isalpha():\n            res.append(c.lower() if c.isupper() else c.upper())\n        else:\n            res.append(c)\n    if len(res) == 0:\n        res = s[::-1]\n    return \"\".join(res)\n\n\n# Your solve function here\ndef test():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    assert solve(\"a\") == \"a\"\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return \"\".join(reversed(s) if c.isalpha() else s for c in s)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if len(s) == 0:\n        return s\n\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            elif s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i]\n    return ''.join(s)\n\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        import doctest\n        doctest.testmod()\n    else:\n        s = ''.join(sys.argv[1:])\n        print(solve(s))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if not s:\n        return s\n    if len(s) <= 1:\n        return s.upper() if s[0].islower() else s\n    reverse = []\n    for c in s:\n        if c.isalpha():\n            reverse.append(c.lower())\n        else:\n            reverse.append(c.upper())\n    return ''.join(reverse)\n\n\ndef main():\n    test_cases = [(\"1234\", \"4321\"), (\"ab\", \"AB\"), (\"#a@C\", \"#A@c\")]\n    for case in test_cases:\n        assert solve(case[0]) == case[1]\n        print(\"passed test case {}: {}\".format(case[0], case[1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    if not result:\n        result = s[::-1]\n    return result\n\n\nif __name__ == \"__main__\":\n    s = \"1234\"\n    print(solve(s))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# s = \"1234\"\n    # s = \"ab\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\"\n    # s = \"abcd\""
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if not s:\n        return s\n\n    l = len(s)\n    res = s[:]\n    i = 0\n    while i < l:\n        if s[i] in ['a', 'A']:\n            res[i] = 'A' + res[i]\n            res[i] = res[i][::-1]\n        else:\n            res[i] = res[i][::-1]\n        i += 1\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(s) == 0:\n        return s\n    s = s.upper()\n    s = s.lower()\n    s = s.strip()\n    if len(s) == 0:\n        return s\n    for i in range(0, len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            s = s[:i] + s[i].upper() + s[i+1:]\n            break\n    return s\n\nif __name__ == \"__main__\":\n    print solve(\"ab\")\n    print solve(\"1234\")\n    print solve(\"#a@C\")\n    print solve(\"\")\n    print solve(\"#a@C\")\n    print solve(\"#a@c\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")\n    print solve(\"abcd\")"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# s = s.lower()\n    # s = s.upper()\n    s = s.replace(\"a\", \"A\")\n    s = s.replace(\"b\", \"B\")\n    s = s.replace(\"c\", \"C\")\n    s = s.replace(\"d\", \"D\")\n    s = s.replace(\"e\", \"E\")\n    s = s.replace(\"f\", \"F\")\n    s = s.replace(\"g\", \"G\")\n    s = s.replace(\"h\", \"H\")\n    s = s.replace(\"i\", \"I\")\n    s = s.replace(\"j\", \"J\")\n    s = s.replace(\"k\", \"K\")\n    s = s.replace(\"l\", \"L\")\n    s = s.replace(\"m\", \"M\")\n    s = s.replace(\"n\", \"N\")\n    s = s.replace(\"o\", \"O\")\n    s = s.replace(\"p\", \"P\")\n    s = s.replace(\"q\", \"Q\")\n    s = s.replace(\"r\", \"R\")\n    s = s.replace(\"s\", \"S\")\n    s = s.replace(\"t\", \"T\")\n    s = s.replace(\"u\", \"U\")\n    s = s.replace(\"v\", \"V\")\n    s = s.replace(\"w\", \"W\")\n    s = s.replace(\"x\", \"X\")\n    s = s.replace(\"y\", \"Y\")\n    s = s.replace(\"z\", \"Z\")\n    return s\n\nif __name__ == \"__main__\":\n    s = \"aabbccddeeffgghhhhijkkllmnopqrstuvwwxyz\"\n    print(solve(s))\n    print(solve(\"\"))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "s = \"\".join(s.split())\n    s = s[::-1]\n    s = s.upper()\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\" \", \"\")\n    return s\n\ndef main():\n    s = \"1234\"\n    s = \"ab\"\n    s = \"a@C\"\n    s = \"123\"\n    print solve(s)\n    s = \"1234\"\n    s = \"ab\"\n    s = \"a@C\"\n    s = \"123\"\n    print solve(s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "s = \"\".join(s.lower()).replace(\"a\", \"A\").replace(\"b\", \"B\").replace(\"c\", \"C\")\n    if s:\n        s = \"\".join(reversed(s))\n        return s\n    else:\n        return \"\".join(reversed(s))\n\n\nif __name__ == \"__main__\":\n    s = \"a\"\n    print(solve(s))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if not s:\n        return s\n\n    if len(s) == 1:\n        return s\n\n    if s[0] in \"abcdefghijklmnopqrstuvwxyz\":\n        return s[0] + solve(s[1:])\n    else:\n        return solve(s[1:]) + solve(s[0:1])\n\nif __name__ == \"__main__\":\n    s = solve(\"abcd\")\n    print(s)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return ''.join(sorted(s, key=lambda x: x.lower() if x.isalpha() else x.upper()))\n\n\nif __name__ == \"__main__\":\n    for test in range(1, int(input()) + 1):\n        s = input()\n        print(\"Case #{}: {}\".format(test, solve(s)))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "ret = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            ret += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            ret += s[i]\n    return ret\n\nif __name__ == '__main__':\n    s = solve(\"1234\")\n    print s"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "result = \"\"\n    if s == \"\":\n        return result\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper()\n            result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n\ndef test_solve():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n\nif __name__ == \"__main__\":\n    test_solve()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "s = s.lower()\n    if not s:\n        return s\n\n    s = \"\".join(sorted(s))\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n\n\nif __name__ == \"__main__\":\n    s = \"1234\"\n    print solve(s)"
    },
    {
      "rank": 19,
      "score": 9.370583536698913,
      "candidate": "return ''.join(map(lambda x: x[::-1] if x.isalpha() else x, s))\n\nif __name__ == '__main__':\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"Hello, world!\") == \"HelLo, wrld!\""
    },
    {
      "rank": 20,
      "score": 9.234050852198141,
      "candidate": "def reverse(s):\n        s = s[::-1]\n        for i in range(len(s)):\n            if s[i] in string.ascii_lowercase:\n                s[i] = s[i].upper()\n            elif s[i] in string.ascii_uppercase:\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i]\n        return s\n    s = reverse(s)\n    if not s:\n        s = reverse(s)\n    return s\n\nif __name__ == \"__main__\":\n    test_cases = [(\"1234\", \"4321\"), (\"ab\", \"AB\"), (\"#a@C\", \"#A@c\")]\n    for s, r in test_cases:\n        print(\"The result of s = %s should be r = %s\" % (s, r))\n        print(\"The result of solve(s) is %s\" % solve(s))\n        print()"
    },
    {
      "rank": 21,
      "score": 9.205959372648458,
      "candidate": "l = len(s)\n    if l == 0:\n        return s[::-1]\n    ret = \"\"\n    for i in range(0, l):\n        c = s[i]\n        if c.isalpha():\n            if i == 0:\n                ret += s[::-1][i]\n            else:\n                ret += s[::-1][i] + s[::-1][i-1]\n        else:\n            ret += s[::-1][i]\n    return ret\n\nif __name__ == '__main__':\n    import time\n\n    start = time.time()\n    print(solve(\"a\"))\n    print(\"time elapsed:\", time.time() - start)"
    },
    {
      "rank": 22,
      "score": 9.177268828905222,
      "candidate": "result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n\nif __name__ == \"__main__\":\n    s = \"aBCdEFGHIjKlMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz\"\n    print solve(s)"
    },
    {
      "rank": 23,
      "score": 9.122564458729856,
      "candidate": "if not s:\n        return s\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.upper() if c.isupper() else c.lower()\n        else:\n            result += c\n    return result\n\n\nif __name__ == \"__main__\":\n    s = \"aabbcc\"\n    print(solve(s))\n\n    s = \"abcc\"\n    print(solve(s))\n\n    s = \"aBcC\"\n    print(solve(s))\n\n    s = \"aBCc\"\n    print(solve(s))\n\n    s = \"ABcC\"\n    print(solve(s))"
    },
    {
      "rank": 24,
      "score": 8.973005557553902,
      "candidate": "if not s:\n        return s\n    l = list(s)\n    for i in range(len(s)):\n        if l[i].isalpha():\n            if l[i].islower():\n                l[i] = l[i].upper()\n            elif l[i].isupper():\n                l[i] = l[i].lower()\n            else:\n                l[i] = l[i]\n    return ''.join(l)\n\nif __name__ == \"__main__\":\n    s = \"a\"\n    print(solve(s))"
    },
    {
      "rank": 25,
      "score": 8.95994420569242,
      "candidate": "result = \"\"\n    for i in range(len(s)):\n        if s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n\nif __name__ == \"__main__\":\n    s = input()\n    print(solve(s))"
    },
    {
      "rank": 26,
      "score": 8.946210893390457,
      "candidate": "return \"\".join(map(lambda x: \"\".join(reversed(x)) if x[0] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" else x, s))\n\nif __name__ == \"__main__\":\n    s = solve(input())\n    print(s)"
    },
    {
      "rank": 27,
      "score": 8.932217008005624,
      "candidate": "res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i].lower()\n        else:\n            res += s[i]\n    return res\n\nif __name__ == \"__main__\":\n    s = solve(\"abcd\")\n    print s"
    },
    {
      "rank": 28,
      "score": 8.910084504002544,
      "candidate": "#print s\n    s = s.lower()\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('.', '')\n    s = s.replace(' ', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace(':', '')\n    s = s.replace('-', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('=', '')\n    s = s.replace('$', '')\n    s = s.replace('%', '')\n    s = s.replace('^', '')\n    s = s.replace('&', '')\n    s = s.replace('|', '')\n    s = s.replace('-', '')\n    s = s.replace('*', '')\n    s = s.replace('+', '')\n    s = s.replace('_', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('$', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace(';', '')\n    s = s.replace('.', '')\n    s = s.replace(':', '')\n    s = s.replace('@', '')\n    s = s.replace('#', '')\n    s = s.replace(')', '')\n    s = s.replace('("
    },
    {
      "rank": 29,
      "score": 8.85571690049604,
      "candidate": "if not s:\n        return s\n    s = ''.join(sorted(s))\n    if s.isalpha():\n        return s[::-1]\n    else:\n        return s[::-1] + s[::-1]"
    },
    {
      "rank": 30,
      "score": 8.850707355641543,
      "candidate": "return s[::-1] if s else s[::-1]\n\nif __name__ == '__main__':\n    for i in range(1, 10):\n        print solve(str(i))"
    },
    {
      "rank": 31,
      "score": 8.8281618090209,
      "candidate": "if not s:\n        return s\n\n    s = s.upper()\n    for i in range(len(s) - 1):\n        if s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            s[i], s[i + 1] = s[i + 1], s[i]\n        elif s[i] in '@ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            s[i], s[i + 1] = s[i + 1], s[i]\n    return s\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.81367773444215,
      "candidate": "ans = []\n    for i in range(len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            ans.append(s[i].lower())\n            ans.append(s[i].upper())\n        else:\n            ans.append(s[i])\n    ans = ''.join(ans)\n    return ans\n\nif __name__ == '__main__':\n    s = input()\n    print(solve(s))\n    s = input()\n    print(solve(s))"
    },
    {
      "rank": 33,
      "score": 8.76828871349479,
      "candidate": "s = s.lower()\n    s = s.strip()\n    if not s:\n        return s\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if s[i].isupper():\n                s = s[i:] + s[:i] + c.lower()\n            elif s[i].islower():\n                s = s[i:] + s[:i] + c.upper()\n        elif c =='':\n            s = s[i:] + s[:i] +''\n    return s"
    },
    {
      "rank": 34,
      "score": 8.750282588864879,
      "candidate": "reverse = False\n    res = \"\"\n    for i in range(len(s)):\n        if s[i] in string.lowercase:\n            if reverse:\n                res = res[::-1]\n            else:\n                res = res + s[i]\n            reverse = not reverse\n        else:\n            res = res + s[i]\n    if reverse:\n        res = res[::-1]\n    return res\n\nprint(solve(\"ab\"))\nprint(solve(\"1234\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"aB\"))\nprint(solve(\"aA\"))"
    },
    {
      "rank": 35,
      "score": 8.715724466237427,
      "candidate": "return ''.join(reversed(s) if c.isalpha() else s for c in s)\n\nif __name__ == '__main__':\n    print(solve(\"1234\"))\n    print(solve(\"ab\"))\n    print(solve(\"#a@C\"))"
    },
    {
      "rank": 36,
      "score": 8.692801520950061,
      "candidate": "if len(s) == 0:\n        return s.lower()\n    result = \"\"\n    for i in range(0, len(s)):\n        if s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n\nif __name__ == \"__main__\":\n    s = \"ab\"\n    print solve(s)"
    },
    {
      "rank": 37,
      "score": 8.632293453617281,
      "candidate": "res = \"\"\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase:\n            res += s[i].lower()\n        elif s[i] in string.ascii_uppercase:\n            res += s[i].upper()\n        elif s[i] in string.digits:\n            res += s[i]\n        else:\n            res += s[i]\n    return res\n\n\nif __name__ == \"__main__\":\n    s = \"aBcD\"\n    s = \"1234\"\n    s = \"ab\"\n    s = \"abc\"\n    s = \"a\"\n    s = \"123\"\n    s = \"1234\"\n    s = \"1234\"\n    s = \"1234\"\n    s = \"1234\"\n    print(solve(s))"
    },
    {
      "rank": 38,
      "score": 8.625262456968262,
      "candidate": "# O(n)\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])\n    # dp[i] = min(dp[i-1], dp[i-2])"
    },
    {
      "rank": 39,
      "score": 8.625142247198651,
      "candidate": "if not s:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].upper() if s[i].islower() else s[i].lower()\n        elif s[i].isdigit():\n            s[i] = '0' if s[i] == '9' else s[i]\n    return ''.join(s)\n\nif __name__ == '__main__':\n    for i in range(1, 100):\n        print(i, solve(str(i)))"
    },
    {
      "rank": 40,
      "score": 8.616253589228675,
      "candidate": "return \"\".join(reversed(s) if isalpha(s[i]) else s[i] for i in range(len(s)))\n\n\nif __name__ == \"__main__\":\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    assert solve(\"a\") == \"a\"\n    assert solve(\"A\") == \"a\"\n    assert solve(\"Aa\") == \"AA\"\n    assert solve(\"abc\") == \"cba\"\n    assert solve(\"ABC\") == \"CBA\""
    },
    {
      "rank": 41,
      "score": 8.610076160146226,
      "candidate": "if not s:\n        return s\n    s = s.upper()\n    s = s.strip()\n    s = s[::-1] if s else s\n    return s\n\nif __name__ == \"__main__\":\n    print(solve(\"1234\"))\n    print(solve(\"ab\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"\"))\n    print(solve(\"a\"))\n    print(solve(\"a1234\"))\n    print(solve(\"a1b2\"))"
    },
    {
      "rank": 42,
      "score": 8.606486429141842,
      "candidate": "result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n\nif __name__ == \"__main__\":\n    s = input().strip()\n    print(solve(s))"
    },
    {
      "rank": 43,
      "score": 8.60156811074208,
      "candidate": "if not s:\n        return s\n    res = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            res += s[i].lower() if s[i].islower() else s[i].upper()\n        else:\n            res += s[i]\n    return res\n\nif __name__ == '__main__':\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"hello\") == \"helo\"\n    assert solve(\"hello\") == \"hello\""
    },
    {
      "rank": 44,
      "score": 8.565425580227462,
      "candidate": "if not s:\n        return s\n    \n    l = len(s)\n    \n    # reverse the letters\n    for i in range(l):\n        if s[i].isalpha():\n            s[i] = s[i].lower()\n            s[i] = s[i].upper()\n    \n    # reverse the string\n    s = ''.join(reversed(s))\n    \n    # reverse the letters\n    for i in range(l):\n        if s[i].isalpha():\n            s[i] = s[i].upper()\n            s[i] = s[i].lower()\n    \n    return s"
    },
    {
      "rank": 45,
      "score": 8.548876241946822,
      "candidate": "s = s.lower()\n    s = s.strip()\n    if not s:\n        s = s.upper()\n    return s\n\nif __name__ == \"__main__\":\n    for s in [\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n    ]:\n        print(solve(s))"
    },
    {
      "rank": 46,
      "score": 8.542875062379007,
      "candidate": "if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s.upper() if s[0].isalpha() else s\n    return \"\".join([solve(s[i]) if s[i].isalpha() else s[i].upper() \n                    for i in range(len(s))])\n\ndef main():\n    s = solve(\"1234\")\n    print s\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.53012858503943,
      "candidate": "if len(s) == 0:\n        return s\n    result = s[:]\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] in string.ascii_lowercase:\n            result = result[::-1] + s[i]\n        else:\n            result = result[::-1] + s[i]\n    return result\n\nif __name__ == \"__main__\":\n    s = solve(\"#a@C\")\n    print s"
    },
    {
      "rank": 48,
      "score": 8.499905739299377,
      "candidate": "if not s:\n        return s\n    \n    # make a copy of the string\n    s = s[::-1]\n    \n    # convert letters to lower case\n    for i, c in enumerate(s):\n        if c.isalpha():\n            s[i] = c.lower()\n    \n    # convert letters to upper case\n    for i, c in enumerate(s):\n        if c.isalpha():\n            s[i] = c.upper()\n    \n    # reverse the string\n    return s[::-1]\n\n# test\nif __name__ == \"__main__\":\n    print solve(\"1234\")\n    print solve(\"ab\")\n    print solve(\"#a@C\")"
    },
    {
      "rank": 49,
      "score": 8.478208546788407,
      "candidate": "if len(s) == 0:\n        return s\n    result = []\n    for i in range(len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            result.append(s[i].upper())\n        else:\n            result.append(s[i].lower())\n    return \"\".join(result)\n\nif __name__ == \"__main__\":\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"aA\") == \"AA\"\n    assert solve(\"\") == \"\"\n    assert solve(\"A\") == \"A\""
    },
    {
      "rank": 50,
      "score": 8.437695832075478,
      "candidate": "if not s:\n        return s\n    if len(s) == 1:\n        return s\n    return \"\".join([solve(x) for x in s])\n\ns = solve(\"#a@C\")\nprint s\n\n# Your Solution"
    },
    {
      "rank": 51,
      "score": 8.408439383654278,
      "candidate": "if len(s) == 0:\n        return s\n    r = \"\"\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase:\n            r += s[i].lower()\n        else:\n            r += s[i].upper()\n    return r\n\nif __name__ == '__main__':\n    for i in range(1, 1001):\n        r = solve(str(i))\n        print i, \": \", r\n        if r == str(i):\n            print \"Passed\"\n        else:\n            print \"Failed\""
    },
    {
      "rank": 52,
      "score": 8.386620303250325,
      "candidate": "if s == '':\n        return s\n    if s[0] in 'abcdefghijklmnopqrstuvwxyz':\n        return s[::-1]\n    else:\n        return s[::-1] + s[0]\n\nif __name__ == '__main__':\n    print solve('ab')\n    print solve('a')\n    print solve('c')\n    print solve('1')\n    print solve('12')\n    print solve('123')\n    print solve('12345')\n    print solve('123456789')\n    print solve('12345678901')"
    },
    {
      "rank": 53,
      "score": 8.375312293858853,
      "candidate": "if not s:\n        return s\n    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                res += s[i].lower()\n            else:\n                res += s[i].upper()\n        else:\n            res += s[i]\n    return res\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.351614956112536,
      "candidate": "if not s:\n        return s\n    \n    l = len(s)\n    r = l-1\n    \n    while r > 0:\n        if s[r] in \"abcdefghijklmnopqrstuvwxyz\":\n            s = s[:r] + s[r][::-1] + s[r+1:]\n            r -= 1\n        else:\n            r -= 1\n    \n    return s"
    },
    {
      "rank": 55,
      "score": 8.331556294201176,
      "candidate": "ret = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                ret += s[i].lower()\n            elif s[i].islower():\n                ret += s[i].upper()\n            else:\n                ret += s[i]\n        else:\n            ret += s[i]\n    return ret\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(solve(s))"
    },
    {
      "rank": 56,
      "score": 8.327375965969855,
      "candidate": "return \"\".join(s.lower() if c.isalpha() else c for c in s)\n\n\nif __name__ == \"__main__\":\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"abcd\") == \"dcba\""
    },
    {
      "rank": 57,
      "score": 8.327367757082776,
      "candidate": "if len(s) == 0:\n        return s\n    if s[0] in \"abcdefghijklmnopqrstuvwxyz\":\n        return solve(s[1:] + s[0] + solve(s[2:]))\n    else:\n        return s[::-1] + solve(s[1:] + s[0] + solve(s[2:]))\n\nif __name__ == \"__main__\":\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    print solve(s)"
    },
    {
      "rank": 58,
      "score": 8.298597569547805,
      "candidate": "if not s:\n        return s\n    s = s.upper()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].lower()\n            s[i] = s[i].upper()\n        elif s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            s[i] = s[i].lower()\n    return s\n\nif __name__ == \"__main__\":\n    s = solve(input())\n    print(s)\n    print(s.lower())\n    print(s.upper())\n    print(s.count(\"A\"))\n    print(s.count(\"a\"))\n    print(s.count(\"b\"))"
    },
    {
      "rank": 59,
      "score": 8.2938925966498,
      "candidate": "if not s:\n        return s\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] in string.lowercase:\n            s[i] = s[i].upper()\n        elif s[i] in string.uppercase:\n            s[i] = s[i].lower()\n        elif s[i] in string.digits:\n            s[i] = s[i].lower()\n        elif s[i] in string.punctuation:\n            s[i] = s[i].upper()\n        else:\n            s[i] = s[i]\n        i -= 1\n    return s\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.289838256518838,
      "candidate": "#print s\n    if not s:\n        return s\n    \n    result = \"\"\n    for i in xrange(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n\nif __name__ == \"__main__\":\n    #s = \"1234\"\n    s = \"ab\"\n    print solve(s)"
    },
    {
      "rank": 61,
      "score": 8.251903304236286,
      "candidate": "#print(s)\n    s = s[::-1]\n    s = s.upper()\n    s = s.lower()\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"@\", \"\")\n    return s\n\nif __name__ == \"__main__\":\n    #print(solve(\"ab\"))\n    print(solve(\"ab\"))\n    print(solve(\"1234\"))\n    print(solve(\"abcd\"))\n    print(solve(\"aB\"))\n    print(solve(\"@a@C\"))\n    print(solve(\"abcd\"))\n    print(solve(\"a@C\"))\n    print(solve(\"@a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@C\"))\n    print(solve(\"#a@"
    },
    {
      "rank": 62,
      "score": 8.214125058964552,
      "candidate": "l = list(s)\n    l.reverse()\n    r = []\n    for i in range(len(l)):\n        if l[i].isalpha():\n            r.append(l[i].lower())\n        else:\n            r.append(l[i])\n    return ''.join(r)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.212735598038213,
      "candidate": "s = s.lower()\n    s = s.upper()\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"-\", \"\")\n    return s\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(solve(s))"
    },
    {
      "rank": 64,
      "score": 8.211579567659316,
      "candidate": "s = s.lower()\n    s = s[::-1] if s else s\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"a\", \"\")\n    s = s.replace(\"A\", \"\")\n    s = s.replace(\"c\", \"\")\n    return s\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(solve(s))"
    },
    {
      "rank": 65,
      "score": 8.209707251476969,
      "candidate": "result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += chr(ord(c) - ord('a') + ord('A'))\n        else:\n            result += c\n    return result\n\ndef main():\n    s = input().split()\n    print(solve(s[0]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 8.2048573255218,
      "candidate": "result = \"\"\n    for i in range(len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            result += s[i].upper()\n        elif s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))"
    },
    {
      "rank": 67,
      "score": 8.172253082181854,
      "candidate": "if not s:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] in 'aA':\n        return solve(s[1:] + s[0])\n    return s[::-1] + solve(s[1:] + s[0])\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) == 2:\n        s = sys.argv[1]\n    else:\n        s = input()\n    print(solve(s))"
    },
    {
      "rank": 68,
      "score": 8.163300679823958,
      "candidate": "result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            result += s[i]\n    if len(result) == 0:\n        result = s[::-1]\n    return result\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print(solve(\"hello\" * i))\n    print(solve(\"Hello\"))\n    print(solve(\"\"))"
    },
    {
      "rank": 69,
      "score": 8.144125099485041,
      "candidate": "return \"\".join(reversed(s) if c.isalpha() else s for c in s)\n\nif __name__ == \"__main__\":\n    s = solve(input())\n    print(s)"
    },
    {
      "rank": 70,
      "score": 8.143591138329747,
      "candidate": "s = s.upper()\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase:\n            s[i] = s[i].upper()\n        elif s[i] in string.ascii_uppercase:\n            s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s\n\nif __name__ == '__main__':\n    s = '1234'\n    print solve(s)"
    },
    {
      "rank": 71,
      "score": 8.121884567141883,
      "candidate": "if not s:\n        return s\n    res = \"\"\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i].lower()\n        else:\n            res += s[i]\n    return res\n\n\nif __name__ == \"__main__\":\n    print solve(\"1234\")\n    print solve(\"ab\")\n    print solve(\"#a@C\")"
    },
    {
      "rank": 72,
      "score": 8.105983444291466,
      "candidate": "s = s[::-1] if s else s\n    r = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            r += s[i].lower() if s[i] is \"A\" else s[i].upper()\n        else:\n            r += s[i]\n    return r\n\nif __name__ == '__main__':\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    print(solve(s))"
    },
    {
      "rank": 73,
      "score": 8.08452234024709,
      "candidate": "return \"\".join(reversed(s))\n\nif __name__ == \"__main__\":\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"A\") == \"a\"\n    assert solve(\"abc\") == \"abc\"\n    assert solve(\"AaA\") == \"AA\"\n    assert solve(\"aa\") == \"aa\"\n    assert solve(\"aA\") == \"AA\"\n    assert solve(\"AaAa\") == \"aAA\"\n    assert solve(\"AaAaA\") == \"aAA\""
    },
    {
      "rank": 74,
      "score": 8.024835682833125,
      "candidate": "reversed_s = \"\".join(reversed(s))\n    return reversed_s if s!= \"a\" and s!= \"A\" else s\n\nif __name__ == '__main__':\n    s = solve(input())\n    print(s)\n    print(\"Time:\", timeit.timeit(\"solve(input())\", setup=\"from __main__ import solve\", number=1))"
    },
    {
      "rank": 75,
      "score": 7.990432406683839,
      "candidate": "return \"\".join(reversed(s) if c in string.ascii_lowercase + string.ascii_uppercase else s for c in s)"
    },
    {
      "rank": 76,
      "score": 7.938028884277233,
      "candidate": "if s == \"\":\n        return \"\"\n    l = s.lower()\n    r = s.upper()\n    for i in range(len(s)):\n        if s[i] in l:\n            if l[i] == r[i]:\n                r = r[:i] + r[i+1:]\n            else:\n                r = r[:i] + r[i+1:].upper() + r[i+1:]\n        else:\n            r = r[:i] + r[i+1:].lower() + r[i+1:]\n    return r"
    },
    {
      "rank": 77,
      "score": 7.915588979966494,
      "candidate": "res = \"\"\n    for i in range(len(s)):\n        if s[i] in string.lowercase:\n            res += s[i].upper()\n        elif s[i] in string.uppercase:\n            res += s[i].lower()\n        else:\n            res += s[i]\n    return res\n\nif __name__ == \"__main__\":\n    print solve(\"1234\")\n    print solve(\"ab\")\n    print solve(\"#a@C\")"
    },
    {
      "rank": 78,
      "score": 7.8912769574414305,
      "candidate": "s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('#', 'A')\n    s = s.replace('@', 'a')\n    s = s.replace('^', 'A')\n    s = s.replace('&', 'a')\n    s = s.replace('-', 'A')\n    s = s.replace('_', 'a')\n    s = s.replace('(', 'A')\n    s = s.replace(')', 'a')\n    s = s.replace('[', 'A')\n    s = s.replace(']', 'a')\n    s = s.replace('{', 'A')\n    s = s.replace('}', 'a')\n    s = s.replace('/', 'A')\n    s = s.replace('\\\\', 'a')\n    s = s.replace(';', 'A')\n    s = s.replace(',', 'A')\n    s = s.replace('<', 'A')\n    s = s.replace('>', 'a')\n    s = s.replace('=', 'A')\n    s = s.replace(')', 'A')\n    s = s.replace('(', 'a')\n    s = s.replace('&', 'A')\n    s = s.replace('+', 'A')\n    s = s.replace('*', 'A')\n    s = s.replace('%', 'A')\n    s = s.replace('$', 'A')\n    s = s.replace('.', 'A')\n    s = s.replace('@', 'a')\n    s = s.replace('^', 'A')\n    s = s.replace('_', 'a')\n    s = s.replace('{', 'A')\n    s = s.replace('}', 'a')\n    s = s.replace('(', 'a')\n    s = s.replace(')', 'A')\n    s = s.replace('/', 'a')\n    s = s.replace('\\\\', 'a')\n    s = s.replace(';', 'a')\n    s = s.replace(',', 'a')"
    },
    {
      "rank": 79,
      "score": 7.868947655733293,
      "candidate": "if not s:\n        return s\n    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                res += s[i].lower()\n            elif s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i]\n        else:\n            res += s[i]\n    return res\n\nif __name__ == \"__main__\":\n    s = \"abcd\"\n    print(solve(s))"
    },
    {
      "rank": 80,
      "score": 7.84634113240411,
      "candidate": "#s = s.lower()\n    #s = s.upper()\n    #print s\n    \n    letters = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            letters.append(s[i])\n    letters = \"\".join(letters)\n    letters = letters.lower()\n    letters = letters.upper()\n    \n    new_s = \"\"\n    for i in range(len(letters)):\n        if letters[i].isalpha():\n            new_s += letters[i].lower()\n        else:\n            new_s += letters[i].upper()\n    \n    return new_s\n\nif __name__ == \"__main__\":\n    #test\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"abcd\") == \"ABCD\"\n    assert solve(\"aab\") == \"AAB\""
    },
    {
      "rank": 81,
      "score": 7.834022619458933,
      "candidate": "if s is None or len(s) == 0:\n        return s\n    if s[0] in \"abcdefghijklmnopqrstuvwxyz\":\n        return \"\".join(reversed(s))\n    else:\n        return s"
    },
    {
      "rank": 82,
      "score": 7.780351419995229,
      "candidate": "ret = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                ret += s[i].lower()\n            else:\n                ret += s[i].upper()\n        else:\n            ret += s[i]\n    return ret\n\nif __name__ == '__main__':\n    s = '1234'\n    print(solve(s))\n    s = 'ab'\n    print(solve(s))\n    s = '#a@C'\n    print(solve(s))\n    s = 'aBc'\n    print(solve(s))"
    },
    {
      "rank": 83,
      "score": 7.738292593776799,
      "candidate": "res = []\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase:\n            res.append(s[i].lower())\n        elif s[i] in string.ascii_uppercase:\n            res.append(s[i].upper())\n        else:\n            res.append(s[i])\n    return ''.join(res)\n\nif __name__ == \"__main__\":\n    s = solve(input())\n    print s\n    s = solve(input())\n    print s\n    s = solve(input())\n    print s"
    },
    {
      "rank": 84,
      "score": 7.7320703513377165,
      "candidate": "result = \"\"\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if c.lower() == c:\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not result:\n        result = s[::-1]\n    return result\n\nif __name__ == \"__main__\":\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\""
    },
    {
      "rank": 85,
      "score": 7.705183449260731,
      "candidate": "return \"\".join(reversed(s) if c.islower() else s for c in s)\n\nif __name__ == \"__main__\":\n    s = input()\n    print(solve(s))"
    },
    {
      "rank": 86,
      "score": 7.5819855281879285,
      "candidate": "# TODO: Implement this function\n    s = s.upper()\n    s = s[::-1]\n    s = s[::-1]\n    return s\n\nif __name__ == \"__main__\":\n    print solve(\"1234\")\n    print solve(\"ab\")\n    print solve(\"#a@C\")"
    },
    {
      "rank": 87,
      "score": 7.562924366763077,
      "candidate": "result = \"\"\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase:\n            result += s[i].lower()\n        elif s[i] in string.ascii_uppercase:\n            result += s[i].upper()\n        elif s[i] in string.punctuation:\n            result += s[i]\n        else:\n            result += s[i]\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 7.4878043221155455,
      "candidate": "return ''.join(reversed(s))\n\nif __name__ == '__main__':\n    print solve(\"1234\")\n    print solve(\"ab\")\n    print solve(\"#a@C\")\n    print solve(\"\")\n    print solve(\"a\")\n    print solve(\"a\" * 100)"
    },
    {
      "rank": 89,
      "score": 7.464609382504557,
      "candidate": "return \"\".join(reversed(s) if c.islower() else s for c in s)\n\nif __name__ == '__main__':\n    with open(os.path.join(os.path.dirname(__file__), 'input.txt')) as f:\n        s = f.read().strip()\n        print(solve(s))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "if not s:\n        return s\n    if s[0] in \"abcdefghijklmnopqrstuvwxyz\":\n        return s[::-1]\n    else:\n        return s[::-1] + s[::-1]\n\n# test cases\ns = \"ab\"\nprint solve(s)\ns = \"1234\"\nprint solve(s)\ns = \"1234\"\nprint solve(s)\ns = \"abcd\"\nprint solve(s)\ns = \"a\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abc\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abcd\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abcd\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abc\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abc\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abcd\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abc\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abc\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abcd\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abc\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abc\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abcd\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abc\"\nprint solve(s)\ns = \"123\"\nprint solve(s)\ns = \"abc\"\nprint solve(s)\ns = \"123"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "return ''.join([s[i] if is_letter(s[i]) else s[i].upper() for i in range(len(s))])\n\n\ndef is_letter(c):\n    \"\"\"Is the character a letter?\n    Examples\n    is_letter('a') = True\n    is_letter('A') = True\n    is_letter(' ') = False\n    is_letter('-') = False\n    \"\"\"\n    return c.isalpha()\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    assert solve(\"A\") == \"A\"\n    assert solve(\"A B\") == \"A B\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"A B C\") == \"A B C\"\n    assert solve(\"B A C\") == \"B A C\"\n    assert solve
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "# TODO: Complete the function\n    if not s:\n        return s\n\n    # Convert the string to lower case\n    s = s.lower()\n\n    # Remove all the spaces\n    s = ''.join(s.split())\n\n    # Iterate through the string and reverse the letters\n    for i in range(len(s)):\n        if s[i] == 'a':\n            s[i] = 'A'\n        elif s[i] == 'b':\n            s[i] = 'B'\n        elif s[i] == 'c':\n            s[i] = 'C'\n        elif s[i] == 'd':\n            s[i] = 'D'\n        elif s[i] == 'e':\n            s[i] = 'E'\n        elif s[i] == 'f':\n            s[i] = 'F'\n        elif s[i] == 'g':\n            s[i] = 'G'\n        elif s[i] == 'h':\n            s[i] = 'H'\n        elif s[i] == 'i':\n            s[i] = 'I'\n        elif s[i] == 'j':\n            s[i] = 'J'\n        elif s[i] == 'k':\n            s[i] = 'K'\n        elif s[i] == 'l':\n            s[i] = 'L'\n        elif s[i] =='m':\n            s[i] = 'M'\n        elif s[i] == 'n':\n            s[i] = 'N'\n        elif s[i] == 'o':\n            s[i] = 'O'\n        elif s[i] == 'p':\n            s[i] = 'P'\n        elif s[i] == 'q':\n            s[i] = 'Q'\n        elif s[i] == 'r':\n            s[i] = 'R'\n        elif s[i] =='s':\n            s[i] = 'S'\n        elif s[i] == 't':\n            s[i"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "reverse_case = lambda c: \"\".join(reversed(c))\n    reverse_case_lower = lambda c: c.lower()\n    reverse_case_upper = lambda c: c.upper()\n    reverse_case_lower_upper = lambda c: reverse_case_lower(reverse_case_upper(c))\n    reverse_case_lower_upper_upper = lambda c: reverse_case_lower(reverse_case_upper(reverse_case_upper(c)))\n    reverse_case_lower_upper_upper_upper = lambda c: reverse_case_lower(reverse_case_upper(reverse_case_upper(reverse_case_upper(c))))\n\n    if not s:\n        return s\n    elif s[0] in string.ascii_lowercase:\n        return reverse_case(s)\n    elif s[0] in string.ascii_uppercase:\n        return reverse_case_upper(s)\n    elif s[0] in string.ascii_uppercase + string.digits:\n        return reverse_case_upper_upper_upper_upper(s)\n    else:\n        return reverse_case_lower_upper_upper_upper(s)\n\n\ndef solve_recur(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve_recur(\"1234\") = \"4321\"\n    solve_recur(\"ab\") = \"AB\"\n    solve_recur(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    reverse_case = lambda c: \"\".join(reversed(c))\n    reverse_case_lower = lambda c: c.lower()\n    reverse_case_upper = lambda c: c.upper()\n    reverse_case_lower_upper = lambda c: reverse_case_lower(reverse_case_upper(c))\n    reverse_case_lower_upper_upper = lambda c: reverse_case_lower(reverse"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "if not s:\n        return s\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase:\n            result += string.ascii_uppercase[string.ascii_lowercase.index(s[i])]\n        elif s[i] in string.ascii_uppercase:\n            result += string.ascii_lowercase[string.ascii_uppercase.index(s[i])]\n        else:\n            result += s[i]\n    if not result:\n        result = s[::-1]\n    return result\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert solve(\"abc\") == \"ABC\", \"abc\"\n    assert solve(\"AABBCCDD\") == \"ABCD\", \"ABCD\"\n    assert solve(\"AaBcCdD\") == \"ABCD\", \"ABCD\"\n    assert solve(\"abccd\") == \"ABCD\", \"ABCD\"\n    assert solve(\"#a@C\") == \"#A@c\", \"@#A@C\"\n    assert solve(\"#a@c\") == \"#A@c\", \"@#A@c\"\n    assert solve(\"ab\") == \"AB\", \"AB\"\n    assert solve(\"a\") == \"A\", \"A\"\n    assert solve(\"a\") == \"A\", \"A\"\n    assert solve(\"AaBcCdD\") == \"ABCD\", \"ABCD\"\n    assert solve(\"aAaBcCdD\") == \"ABCD\", \"ABCD\"\n    assert solve(\"abcd\") == \"ABCD\", \"ABCD\""
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "res = ''\n    for i in xrange(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                res += s[i].lower()\n            else:\n                res += s[i].upper()\n        else:\n            res += s[i]\n    return res\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert solve(\"1234\") == \"4321\", \"1-2-3-4\"\n    assert solve(\"ab\") == \"AB\", \"a-b\"\n    assert solve(\"#a@C\") == \"#A@c\", \"#a@c\""
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if not s:\n        return s\n\n    s = s.upper()\n    result = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result.append(s[i].lower())\n        else:\n            result.append(s[i])\n\n    return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    assert solve(\"A\") == \"A\"\n    assert solve(\"ABCD\") == \"CBA\"\n    assert solve(\"ABCD\") == \"CBA\"\n    assert solve(\"ABCD\") == \"CBA\""
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += str(c.lower())\n        else:\n            result += str(c.upper())\n    return result if s.isalpha() else result[::-1]\n\nif __name__ == \"__main__\":\n    for s in [\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a@C\",\n        \"1234\",\n        \"ab\",\n        \"#a"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if s:\n        return \"\".join(map(lambda x: x if x.isalpha() else x[::-1], s))\n    else:\n        return s[::-1]\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \"A\"\n    assert solve(\"a\") == \""
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if not s:\n        return s\n    res = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower() == s[i]:\n                res.append(s[i].upper())\n            else:\n                res.append(s[i].lower())\n        else:\n            res.append(s[i])\n    if not res:\n        res.append(s[0])\n    return ''.join(res)\n\nif __name__ == \"__main__\":\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    assert solve(\"a\") == \"A\""
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                res += s[i].lower()\n            else:\n                res += s[i].upper()\n        else:\n            res += s[i]\n    return res\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert solve(\"\") == \"\", \"Empty string\"\n    assert solve(\"123\") == \"321\", \"Simple\"\n    assert solve(\"Aa\") == \"AA\", \"A\"\n    assert solve(\"ab\") == \"ba\", \"B\"\n    assert solve(\"#a@C\") == \"#a@c\", \"C\"\n    assert solve(\"aa#a@C\") == \"aa#a@c\", \"D\""
    }
  ]
}