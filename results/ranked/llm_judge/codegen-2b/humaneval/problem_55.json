{
  "timestamp": "2025-09-14T16:32:49.573482",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 55,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef main():\n    from timeit import timeit\n    for i in range(100):\n        print(fib(i))\n    print(\"time: {}\".format(timeit(\"fib(100)\", setup=\"from __main__ import fib\")))\n    print(\"time: {}\".format(timeit(\"fib(100)\", setup=\"from __main__ import fib\")))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef main():\n    import time\n    start = time.time()\n    print(fib(100))\n    print(\"time elapsed: {}\".format(time.time() - start))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib_rec(n-1) + fib_rec(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(3, n+1):\n            a, b = b, a+b\n        return b\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib_recursive(n-1) + fib_recursive(n-2)\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(3, n+1):\n        a, b = b, a+b\n    return b\n\ndef main():\n    import timeit\n\n    setup = '''\nimport sys\nsys.path.append('..')\nfrom fibonacci import fib, fib_recursive, fib_iterative\n'''\n\n    print('Timeit')\n    print(timeit.timeit('fib(10)', setup=setup, number=10))\n    print(timeit.timeit('fib_recursive(10)', setup=setup, number=10))\n    print(timeit.timeit('fib_iterative(10)', setup=setup, number=10))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\ndef fib_recur(n: int):\n    \"\"\"Recursive Fibonacci number.\n    >>> fib_recur(10)\n    55\n    >>> fib_recur(1)\n    1\n    >>> fib_recur(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib_recur(n-1) + fib_recur(n-2)\n\ndef fib_iter(n: int):\n    \"\"\"Iterative Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    while a < n:\n        a, b = b, a+b\n    return b\n\ndef fib_gen(n: int):\n    \"\"\"Generate Fibonacci number.\n    >>> fib_gen(10)\n    55\n    >>> fib_gen(1)\n    1\n    >>> fib_gen(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    yield 1\n    yield 2\n    for i in range(3, n+1):\n        yield i\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    while a < n:\n        a, b = b, a+b\n    return b\n\ndef fib_recur(n: int):\n    \"\"\"Return n-th Fibonacci number using recursive calls.\n    >>> fib_recur(10)\n    55\n    >>> fib_recur(1)\n    1\n    >>> fib_recur(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_recur(n-1) + fib_recur(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n < 5:\n        return fib(n-1) + fib(n-2)\n    else:\n        return fib(n-5) + fib(n-4)\n\ndef memoize(f):\n    \"\"\"Return a memoized version of function f.\n    >>> @memoize\n   ... def fib(n):\n   ...     if n < 0:\n   ...         return 0\n   ...     if n == 0:\n   ...         return 0\n   ...     if n == 1:\n   ...         return 1\n   ...     if n == 2:\n   ...         return 1\n   ...     if n == 3:\n   ...         return 2\n   ...     if n < 5:\n   ...         return fib(n-1) + fib(n-2)\n   ...     else:\n   ...         return fib(n-5) + fib(n-4)\n   ...\n   ...     return None\n   ...\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    cache = {}\n    def memoized_fib(n):\n        if n in cache:\n            return cache[n]\n        cache[n] = f(n)\n        return cache[n]\n    return memoized_fib\n\ndef memoize2(f):\n    \"\"\"Return a memoized version of function f.\n    >>> @memoize2\n   ... def fib(n):\n   ...     if n < 0:\n   ...         return 0\n   ...     if n == 0:\n   ...         return 0\n   ...     if n == 1:\n   ...         return 1\n   ...     if n == 2:\n   ...         return 1\n   ...     if n == 3:\n   ...         return 2\n   ...     if n < 5:\n   ...         return fib(n-1) + fib(n-2)\n   ..."
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef main():\n    \"\"\"Main\"\"\"\n    import doctest\n\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    elif n >= 4:\n        return fib(n - 1) + fib(n - 2)\n    else:\n        return 0\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    while b < n:\n        a, b = b, a+b\n    return b\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a+b\n    return b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    try:\n        while True:\n            x = input(\"x:\")\n            if not x: break\n            y = input(\"y:\")\n            if not y: break\n            print(fib(int(x)))\n            print(fib(int(y)))\n    except EOFError:\n        print(\"\\nBye!\")"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\ndef main():\n    \"\"\"Main function\"\"\"\n    import timeit\n\n    setup = '''\nfrom __future__ import print_function\nimport sys\nimport fib\n\ndef main():\n    print('fib(10):', fib(10))\n    print('fib(1):', fib(1))\n    print('fib(8):', fib(8))\n    sys.exit(0)\n'''\n    print('Setup:\\t', timeit.timeit(setup, number=1))\n\n    print('Fibonacci numbers:')\n    for i in range(10):\n        print('fib({}):'.format(i), fib(i))\n    print()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError('fibonacci number of a negative number')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return b\n\ndef fib_mod(n: int):\n    \"\"\"Return n-th Fibonacci number modulo 10.\n    >>> fib_mod(10)\n    55\n    >>> fib_mod(1)\n    1\n    >>> fib_mod(8)\n    21\n    \"\"\"\n    if n < 0:\n        raise ValueError('fibonacci number of a negative number')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return b % 10\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib_prime(n: int):\n    \"\"\"Return n-th Fibonacci number, prime number.\n    >>> fib_prime(10)\n    55\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return fib_prime(n//2)\n    else:\n        return fib_prime(n-1) + fib_prime(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef main():\n    \"\"\"Simple test program.\"\"\"\n    for i in range(10):\n        print(fib(i))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef main():\n    \"\"\"Main program\"\"\"\n    import argparse\n\n    # create the parser\n    parser = argparse.ArgumentParser(description=__doc__)\n\n    # parser.add_argument()\n\n    # parser.add_argument(\"-v\", \"--verbose\",\n    #                     action=\"store_true\",\n    #                     help=\"be verbose\")\n\n    args = parser.parse_args()\n\n    # print(\"Hello, I'm the main function!\")\n\n    # print(args)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)\n    # print(args.verbose)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef test_fib(n: int):\n    assert fib(n) == n-1\n    assert fib(n+1) == fib(n) + fib(n-1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    return fib(n-1) + fib(n-2)\n\ndef main():\n    import timeit\n    setup = 'from __main__ import fib'\n    print('fib(1000) = %s' % timeit.timeit(fib, setup=setup, number=1000))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        while a < n:\n            a, b = b, a + b\n        return b\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if a > n:\n            break\n    return a\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if s is a palindrome.\n    >>> is_palindrome(\"aab\")\n    True\n    >>> is_palindrome(\"zoo\")\n    False\n    \"\"\"\n    return str.upper(s) == s[::-1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number using recursive function.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib_recursive(n-1) + fib_recursive(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\ndef is_fib(n: int):\n    \"\"\"Return True if n is a Fibonacci number, False otherwise.\n    >>> is_fib(55)\n    True\n    >>> is_fib(4)\n    False\n    >>> is_fib(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    return True if fib(n) == n else is_fib(n-1) or is_fib(n-2)\n\ndef fib_iter(n: int):\n    \"\"\"Return an iterator that generates n-th Fibonacci number.\n    >>> next(fib_iter(10))\n    55\n    >>> next(fib_iter(1))\n    1\n    >>> next(fib_iter(8))\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib_iter(n-1) + fib_iter(n-2)\n\ndef fib_iter_2(n: int):\n    \"\"\"Return an iterator that generates n-th Fibonacci number.\n    >>> next(fib_iter_2(10))\n    55\n    >>> next(fib_iter_2(1))\n    1\n    >>> next(fib_iter_2(8))\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib_iter_2(n-1) + fib_iter_2(n-2)\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number using recursion.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib_recursive(n-1) + fib_recursive(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if n < 1:\n        return n\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number using recursive function.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib_recursive(n-1) + fib_recursive(n-2)\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number using iterative function.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 1, 1\n    for i in range(2, n+1):\n        a, b = b, a+b\n    return b\n\ndef fib_recursive_memo(n: int):\n    \"\"\"Return n-th Fibonacci number using recursive function and memoization.\n    >>> fib_recursive_memo(10)\n    55\n    >>> fib_recursive_memo(1)\n    1\n    >>> fib_recursive_memo(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        if n in memo:\n            return memo[n]\n        else:\n            a, b = 1, 1\n            for i in range(2, n+1):\n                a, b = b, a+b\n            memo[n] = b\n            return b\n\ndef fib_iterative_memo(n: int):\n    \"\"\"Return n-th Fibonacci number using iterative function and memoization."
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> list(fib_iter(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    if n < 2:\n        return 1\n    return fib_iter(n-1) + fib_iter(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef main():\n    \"\"\"Main program.\"\"\"\n    import timeit\n\n    setup = 'from __main__ import fib'\n    print('Fibonacci numbers, Python, {}'.format(setup))\n    print('{:>15}'.format('timeit:') + ','.join(\n        '{:.3f}'.format(timeit.timeit(setup=setup, number=100000))\n        for _ in range(3)\n    ))\n\n    print('Fibonacci numbers, Python, {}'.format(setup))\n    print('{:>15}'.format('timeit:') + ','.join(\n        '{:.3f}'.format(timeit.timeit(setup=setup, number=100000))\n        for _ in range(3)\n    ))\n\n    print('Fibonacci numbers, C, {}'.format(setup))\n    print('{:>15}'.format('clock:') + ','.join(\n        '{:.3f}'.format(clock())\n        for _ in range(3)\n    ))\n\n    print('Fibonacci numbers, C, {}'.format(setup))\n    print('{:>15}'.format('clock:') + ','.join(\n        '{:.3f}'.format(clock())\n        for _ in range(3)\n    ))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "if n <= 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\ndef main():\n    if len(sys.argv) == 2:\n        n = int(sys.argv[1])\n        print(fib(n))\n    else:\n        print('Usage: {} n'.format(sys.argv[0]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        while a < n:\n            a, b = b, a + b\n        return b\n\n\ndef main():\n    import time\n\n    start = time.time()\n    for i in range(10000):\n        fib(i)\n    print(\"Time elapsed: {}\".format(time.time() - start))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\ndef f(n):\n    \"\"\"\n    >>> f(0)\n    0\n    >>> f(1)\n    1\n    >>> f(2)\n    1\n    >>> f(3)\n    2\n    >>> f(4)\n    3\n    >>> f(5)\n    5\n    >>> f(6)\n    8\n    >>> f(7)\n    13\n    >>> f(8)\n    21\n    >>> f(9)\n    34\n    >>> f(10)\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n == 6:\n        return 8\n    if n == 7:\n        return 13\n    if n == 8:\n        return 21\n    if n == 9:\n        return 34\n    if n == 10:\n        return 55\n    return f(n-1) + f(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 1\n    return fib(n-1) + fib(n-2)"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "if n == 1 or n == 0:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError(\"Invalid number.\")\n    return fib_cache[n]\n\ndef fib_cache_size(n):\n    \"\"\"Return number of Fibonacci numbers in the Fibonacci cache.\n    >>> fib_cache_size(10)\n    10\n    >>> fib_cache_size(1)\n    1\n    >>> fib_cache_size(8)\n    3\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Invalid number.\")\n    return fib_cache_size_cache[n]\n\ndef main():\n    \"\"\"Main program.\"\"\"\n    import timeit\n    setup = \"\"\"\nfrom __main__ import fib, fib_cache_size, fib_cache\nfib_cache_size(10)\nfib_cache_size(1)\nfib_cache_size(8)\n\"\"\"\n    print(\"fib_cache_size(10)\")\n    print(timeit.timeit(stmt=setup, setup=setup, number=1))\n    print(\"fib_cache_size(1)\")\n    print(timeit.timeit(stmt=setup, setup=setup, number=1))\n    print(\"fib_cache_size(8)\")\n    print(timeit.timeit(stmt=setup, setup=setup, number=1))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number using recursive function.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib_recursive(n - 1) + fib_recursive(n - 2)\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number using iterative function.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\ndef fib_recursive_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number using recursive and iterative functions.\n    >>> fib_recursive_iterative(10)\n    55\n    >>> fib_recursive_iterative(1)\n    1\n    >>> fib_recursive_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return a\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a+b\n    return a\n\n\ndef solve(n: int):\n    \"\"\"Solve n-th Fibonacci number.\n    >>> solve(10)\n    55\n    >>> solve(1)\n    1\n    >>> solve(8)\n    21\n    \"\"\"\n    return fib(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef solve():\n    \"\"\"Return the n-th Fibonacci number.\n    >>> solve(10)\n    55\n    >>> solve(1)\n    1\n    >>> solve(8)\n    21\n    \"\"\"\n    return fib(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "a, b = 1, 1\n    for i in range(2, n+1):\n        a, b = b, a+b\n    return b\n\ndef fib_recursive(n: int):\n    \"\"\"Recursive version of Fibonacci number.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib_recursive(n-1) + fib_recursive(n-2)\n\ndef fib_iterative(n: int):\n    \"\"\"Iterative version of Fibonacci number.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 1, 1\n    for i in range(2, n+1):\n        a, b = b, a+b\n    return b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number using a generator.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    if n < 2:\n        yield 1\n    else:\n        yield from fib_iter(n-1) + fib_iter(n-2)\n\ndef fib_recur(n: int):\n    \"\"\"Return n-th Fibonacci number using recursion.\n    >>> fib_recur(10)\n    55\n    >>> fib_recur(1)\n    1\n    >>> fib_recur(8)\n    21\n    \"\"\"\n    if n < 2:\n        return 1\n    return fib_recur(n-1) + fib_recur(n-2)\n\ndef fib_recur_iter(n: int):\n    \"\"\"Return n-th Fibonacci number using recursion.\n    >>> fib_recur_iter(10)\n    55\n    >>> fib_recur_iter(1)\n    1\n    >>> fib_recur_iter(8)\n    21\n    \"\"\"\n    if n < 2:\n        yield 1\n    else:\n        for i in range(2, n):\n            yield from fib_recur_iter(i-1) + fib_recur_iter(i-2)\n\ndef fib_naive(n: int):\n    \"\"\"Return n-th Fibonacci number using a naive Python implementation.\n    >>> fib_naive(10)\n    55\n    >>> fib_naive(1)\n    1\n    >>> fib_naive(8)\n    21\n    \"\"\"\n    if n < 2:\n        return 1\n    return n*(n-1)//2\n\ndef fib_naive_iter(n: int):\n    \"\"\"Return n-th Fibonacci number using a naive Python implementation.\n    >>> fib_naive_iter(10)\n    55\n    >>> fib_naive_iter"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError\n    if n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef main():\n    import time\n\n    start = time.time()\n    print(fib(50))\n    print(\"time:\", time.time() - start)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    from argparse import ArgumentParser\n    parser = ArgumentParser(description=__doc__)\n    parser.add_argument('n', type=int, help='Fibonacci number to compute')\n    args = parser.parse_args()\n    print(fib(args.n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number using iteration.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        x, y = 1, 1\n        for i in range(2, n + 1):\n            x, y = y, x + y\n        return y\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number using recursion.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_rec(n - 1) + fib_rec(n - 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    return fib(n-1) + fib(n-2)\n\ndef main():\n    n = int(input())\n    print(fib(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a\n\ndef fib_recur(n: int):\n    \"\"\"Return n-th Fibonacci number using recursive definition.\n    >>> fib_recur(10)\n    55\n    >>> fib_recur(1)\n    1\n    >>> fib_recur(8)\n    21\n    \"\"\"\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return fib_recur(n-1) + fib_recur(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return a\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        while b < n:\n            a, b = b, a + b\n        return a\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 1, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return a\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\ndef fib3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    1\n    >>> fib3(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib2(n-1) + fib2(n-2)\n\ndef fib4(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib4(10)\n    55\n    >>> fib4(1)\n    1\n    >>> fib4(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib3(n-1) + fib3(n-2)\n\ndef fib5(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib5(10)\n    55\n    >>> fib5(1)\n    1\n    >>> fib5(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib4(n-1) + fib4(n-2)\n\ndef fib6(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib6(10)\n    55\n    >>> fib6(1)\n    1\n    >>> fib6(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib5(n-1) + fib5(n-2)\n\ndef fib7(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib7(10)\n    55\n    >>> fib7(1)\n    1\n    >>> fib7(8)"
    },
    {
      "rank": 59,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError\n    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number using recursive function.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError\n    if n == 1 or n == 2:\n        return 1\n    return fib_recursive(n - 1) + fib_recursive(n - 2)\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number using iterative function.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError\n    if n == 1 or n == 2:\n        return 1\n    x, y = 0, 1\n    for i in range(n - 2):\n        x, y = y, x + y\n    return y\n\ndef fib_generator(n: int):\n    \"\"\"Return n-th Fibonacci number using generator function.\n    >>> fib_generator(10)\n    55\n    >>> fib_generator(1)\n    1\n    >>> fib_generator(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError\n    if n == 1 or n == 2:\n        yield 1\n    yield 2\n    for i in range(n - 2):\n        yield yield x + y\n\ndef main():\n    \"\"\"Test functions.\"\"\"\n    assert fib(10) == 55\n    assert fib_recursive(10) == 55\n    assert fib_iterative(10) == 55\n    assert fib_generator(10) == 55\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_recursive(n-1) + fib_recursive(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return b\n\ndef fib(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return fib_recursive(n-1) + fib_recursive(n-2)\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\ndef fib_recursive_v2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recursive_v2(10)\n    55\n    >>> fib_recursive_v2(1)\n    1\n    >>> fib_recursive_v2(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return fib_recursive_v2(n-1) + fib_recursive_v2(n-2)\n\ndef fib_iterative_v2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iterative_v2(10)\n    55\n    >>> fib_iterative_v2(1)\n    1\n    >>> fib_iterative_v2(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError('fibonacci number is negative')\n    if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)"
    },
    {
      "rank": 65,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\ndef is_fib(n):\n    \"\"\"Return True if n is a Fibonacci number.\n    >>> is_fib(55)\n    True\n    >>> is_fib(11)\n    False\n    >>> is_fib(8)\n    False\n    \"\"\"\n    return fib(n) == n\n\ndef main():\n    import timeit\n    N = 100000\n    setup = '''\nimport timeit\n\ndef fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\ndef is_fib(n):\n    return fib(n) == n'''\n    print(timeit.timeit(stmt=setup, number=N, setup=setup))\n    print(timeit.timeit(stmt='fib(%s)' % N, setup=setup))\n    print(timeit.timeit(stmt='is_fib(%s)' % N, setup=setup))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError(\"Negative Fibonacci numbers not allowed\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(n-1):\n            a, b = b, a+b\n        return a\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number using an iterator.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    return a\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number using recursion.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_rec(n-1) + fib_rec(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number using a recursive function.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib2(n-1) + fib2(n-2)\n\ndef fib3(n: int):\n    \"\"\"Return n-th Fibonacci number using a generator expression.\n    >>> list(fib3(10))\n    [55, 56, 57, 58, 59, 60, 61, 62, 63, 64]\n    >>> list(fib3(1))\n    [1, 2]\n    >>> list(fib3(8))\n    [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    \"\"\"\n    return chain.from_iterable([fib(n-1), fib(n-2)])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 10.0,
      "candidate": "if n < 1:\n        return 1\n    if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 10.0,
      "candidate": "if n == 0: return 0\n    if n == 1: return 1\n    return fib(n-1) + fib(n-2)\n\ndef test_fib(n):\n    \"\"\"Test fib(n)\n    >>> test_fib(10)\n    55\n    >>> test_fib(1)\n    1\n    >>> test_fib(8)\n    21\n    \"\"\"\n    assert fib(n) == n-1 + n-2\n\ndef main():\n    test_fib(10)\n    test_fib(1)\n    test_fib(8)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 10.0,
      "candidate": "if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number using recursion.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib2(n-1) + fib2(n-2)\n\ndef fib3(n: int):\n    \"\"\"Return n-th Fibonacci number using dynamic programming.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    1\n    >>> fib3(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        dp = [0 for i in range(n+1)]\n        dp[0] = dp[1] = 1\n        for i in range(2, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]\n\ndef fib4(n: int):\n    \"\"\"Return n-th Fibonacci number using dynamic programming.\n    >>> fib4(10)\n    55\n    >>> fib4(1)\n    1\n    >>> fib4(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        dp = [0 for i in range(n+1)]\n        dp[0] = dp[1] = 1\n        for i in range(2, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 10.0,
      "candidate": "if n <= 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\ndef factorial(n: int):\n    \"\"\"Return n-th factorial.\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    return reduce(lambda x, y: x*y, range(1, n+1), 1)\n\ndef factorial_iter(n: int):\n    \"\"\"Return n-th factorial in an iterator.\n    >>> list(factorial_iter(10))\n    [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n    \"\"\"\n    return chain.from_iterable(repeat(n, i) for i in range(1, n+1))\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number in an iterator.\n    >>> list(fib_iter(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    return chain.from_iterable(repeat(fib(n-1), i) for i in range(2, n+1))\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number using recursion.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n    return reduce(lambda x, y: x+y, range(1, n+1), 0)\n\ndef factorial_rec(n: int):\n    \"\"\"Return n-th factorial using recursion.\n    >>> factorial_rec(10)\n    3628800\n    \"\"\"\n    return reduce(lambda x, y: x*y, range(1, n+1), 1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 10.0,
      "candidate": "if n <= 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 9.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 9.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 9.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 9.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib2(n - 1) + fib2(n - 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 9.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 9.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 9.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 9.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 9.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be non-negative.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if a > n:\n            break\n    return a\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 9.0,
      "candidate": "if n < 0:\n        return -fib(-n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        while b < n:\n            a, b = b, a + b\n        return a\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number as an iterable.\n    >>> list(fib_iter(10))\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    >>> list(fib_iter(1))\n    [1]\n    >>> list(fib_iter(8))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34]\n    \"\"\"\n    if n < 0:\n        return fib_iter(-n)\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        a, b = 0, 1\n        while b < n:\n            a, b = b, a + b\n        return [a] + fib_iter(n - 1)\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number using recursion.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n < 0:\n        return -fib_recursive(-n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_recursive(n - 1) + fib_recursive(n - 2)\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number using iterative method.\n    >>> list(fib_iterative(10))\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    >>> list(fib_iterative(1))\n    [1]\n    >>> list(fib_iterative(8))\n    ["
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef test():\n    assert fib(5) == 55\n    assert fib(7) == 21\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\ndef fib_recur(n: int):\n    \"\"\"Recursive Fibonacci number calculation.\n    >>> fib_recur(10)\n    55\n    >>> fib_recur(1)\n    1\n    >>> fib_recur(8)\n    21\n    \"\"\"\n    if n < 2:\n        return 1\n    return fib_recur(n-1) + fib_recur(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\ndef main():\n    import timeit\n    print(\"fibonacci\")\n    print(\"n = 1\")\n    t = timeit.timeit(stmt=\"fib(1)\", setup=\"from __main__ import fib\")\n    print(t)\n    print()\n\n    print(\"fibonacci\")\n    print(\"n = 10\")\n    t = timeit.timeit(stmt=\"fib(10)\", setup=\"from __main__ import fib\")\n    print(t)\n    print()\n\n    print(\"fibonacci\")\n    print(\"n = 100000\")\n    t = timeit.timeit(stmt=\"fib(100000)\", setup=\"from __main__ import fib\")\n    print(t)\n    print()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "if n == 0 or n == 1:\n        return n\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if b > n:\n            return a"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef f(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> f(10)\n    55\n    >>> f(1)\n    1\n    >>> f(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return f(n - 1) + f(n - 2)\n\n\ndef fib2(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib2(n - 1) + fib2(n - 2)\n\n\ndef fib3(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    1\n    >>> fib3(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib3(n - 1) + fib3(n - 2)\n\n\ndef fib4(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib4(10)\n    55\n    >>> fib4(1)\n    1\n    >>> fib4(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib4(n - 1) + fib4(n - 2)\n\n\ndef fib5(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib5(10)\n    55\n    >>> fib5(1)\n    1\n    >>> fib5(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib5(n - 1) + fib5(n - 2)\n\n\ndef fib6(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib6(10)\n    55\n    >>> fib6(1)\n    1\n    >>> fib6(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "a, b = 0, 1\n    while a < n:\n        a, b = b, a + b\n    return a\n\ndef fib_gen(n: int):\n    \"\"\"Generate n-th Fibonacci number.\n    >>> list(fib_gen(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    a, b = 0, 1\n    while a < n:\n        yield b\n        a, b = b, a + b\n\ndef fib_iter(n: int):\n    \"\"\"Generate n-th Fibonacci number using an iterator.\n    >>> list(fib_iter(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    a, b = 0, 1\n    while a < n:\n        yield b\n        a, b = b, a + b\n\ndef fib_generator(n: int):\n    \"\"\"Generate n-th Fibonacci number using a generator.\n    >>> list(fib_generator(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    a, b = 0, 1\n    while a < n:\n        yield b\n        a, b = b, a + b\n\ndef fib_generator_iter(n: int):\n    \"\"\"Generate n-th Fibonacci number using an iterator.\n    >>> list(fib_generator_iter(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    a, b = 0, 1\n    while a < n:\n        yield b\n        a, b = b, a + b\n\ndef fib_generator_recur(n: int):\n    \"\"\"Generate n-th Fibonacci number using a generator.\n    >>> list(fib_generator_recur(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\n    a, b = 0, 1\n    while a < n:"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\ndef test_fibonacci():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_recursive():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_iterative():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_recursive_print():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_iterative_print():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_recursive_print_iterative():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_recursive_print_iterative_print():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_recursive_print_iterative_print_print():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_iterative_print_iterative_print():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_iterative_print_iterative_print_print():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_iterative_print_iterative_print_print_print():\n    for i in range(10):\n        assert fib(i) == i+1\n\ndef test_fibonacci_iterative_print_iterative_print_print_print_print():\n    for i in range(10):\n        assert fib(i) == i+1"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fibonacci_sequence(n: int) -> List[int]:\n    \"\"\"Return n-th Fibonacci sequence.\n    >>> fibonacci_sequence(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    >>> fibonacci_sequence(1)\n    [1]\n    >>> fibonacci_sequence(8)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return fibonacci_sequence(n-1) + fibonacci_sequence(n-2)\n\n\ndef fibonacci_sequence_reverse(n: int) -> List[int]:\n    \"\"\"Return n-th Fibonacci sequence in reverse.\n    >>> fibonacci_sequence_reverse(10)\n    [34, 21, 13, 8, 5, 3, 2, 1, 0, 1]\n    >>> fibonacci_sequence_reverse(1)\n    [1]\n    >>> fibonacci_sequence_reverse(8)\n    [34, 21, 13, 8, 5, 3, 2, 1, 0, 1]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return fibonacci_sequence_reverse(n-1) + fibonacci_sequence_reverse(n-2)\n\n\ndef fibonacci_sequence_reverse_reverse(n: int) -> List[int]:\n    \"\"\"Return n-th Fibonacci sequence in reverse reverse.\n    >>> fibonacci_sequence_reverse_reverse(10)\n    [34, 21, 13, 8, 5, 3, 2, 1, 0, 1]\n    >>> fibonacci_sequence_reverse_reverse(1)\n    [1]\n    >>> fibonacci_sequence_"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "if n == 1 or n == 0:\n        return 1\n    if n == 2:\n        return 2\n    a = 0\n    b = 1\n    for i in range(3, n+1):\n        a, b = b, a + b\n    return a\n\n\ndef fibonacci(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fibonacci(10)\n    55\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(8)\n    21\n    \"\"\"\n    if n == 1 or n == 0:\n        return 1\n    if n == 2:\n        return 2\n    a = 0\n    b = 1\n    for i in range(3, n+1):\n        a, b = b, a + b\n    return a\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    if n == 1 or n == 0:\n        return 1\n    if n == 2:\n        return 2\n    a = 1\n    b = 1\n    for i in range(3, n+1):\n        a, b = b, a + b\n    return a\n\n\ndef fib_iter_recur(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter_recur(10)\n    55\n    >>> fib_iter_recur(1)\n    1\n    >>> fib_iter_recur(8)\n    21\n    \"\"\"\n    if n == 1 or n == 0:\n        return 1\n    if n == 2:\n        return 2\n    a, b = 1, 1\n    for i in range(3, n+1):\n        a, b = b, a + b\n    return a\n\n\ndef fib_iter_recur_2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter_recur_2(10)\n    55\n    >>> fib_iter_recur_2(1)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef is_fib(n):\n    \"\"\"Check if n is a Fibonacci number.\n    >>> is_fib(10)\n    True\n    >>> is_fib(1)\n    False\n    >>> is_fib(8)\n    True\n    \"\"\"\n    return n > 0 and fib(n) == n\n\ndef fib_iter(n: int):\n    \"\"\"Iterate n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib_iter(n - 1) + fib_iter(n - 2)\n\ndef fib_recur(n):\n    \"\"\"Recursive Fibonacci number.\n    >>> fib_recur(10)\n    55\n    >>> fib_recur(1)\n    1\n    >>> fib_recur(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_recur(n - 1) + fib_recur(n - 2)\n\ndef fib_recur_iter(n: int):\n    \"\"\"Iterate n-th Fibonacci number.\n    >>> fib_recur_iter(10)\n    55\n    >>> fib_recur_iter(1)\n    1\n    >>> fib_recur_iter(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib_recur_iter(n - 1) + fib_recur_iter(n - 2)\n\nif __name__ =="
    }
  ]
}