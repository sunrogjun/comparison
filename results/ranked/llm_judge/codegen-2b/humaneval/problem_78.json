{
  "timestamp": "2025-09-14T16:43:11.445049",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 78,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return sum(1 for x in num if x in 'ABCDEF0123456789')"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "primes = [2, 3, 5, 7, 11, 13]\n    sum = 0\n    for i in range(1, len(num)):\n        sum += int(num[i])\n        if sum in primes:\n            return i\n    return 0\n\nif __name__ == '__main__':\n    print hex_key(\"AB\")\n    print hex_key(\"1077E\")\n    print hex_key(\"ABED1A33\")\n    print hex_key(\"123456789ABCDEF0\")\n    print hex_key(\"2020\")"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return sum([int(x) for x in re.findall('[0-9A-F]', num) if int(x) > 0])\n\ndef test_hex_key():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n\nif __name__ == '__main__':\n    test_hex_key()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "num = num.upper()\n    return sum([int(num[i:i+2], 16) for i in range(0, len(num), 2)])\n\n\ndef prime_number(num):\n    \"\"\"You have been tasked to write a function that receives \n    a positive integer as a string and counts the number of prime \n    numbers that are less than the number.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = int(num)\n    return sum([1 for i in range(2, num+1) if is_prime(i)])\n\n\ndef is_prime(num):\n    \"\"\"You have been tasked to write a function that receives \n    a positive integer as a string and checks if the number is a prime \n    number.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be False.\n    For num = \"1077E\" the output should be True.\n    For num = \"ABED1A33\" the output should be False.\n    For num = \"123456789ABCDEF0\" the output should be True"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return sum([int(x) for x in num])\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return sum([int(x) for x in num])\n\ndef hex_key3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "num = num.upper()\n    primes = 0\n    for i in range(0, len(num)):\n        if num[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            if num[i] == 'A' or num[i] == 'B' or num[i] == 'C' or num[i] == 'D':\n                num = num[i:] + num[:i]\n                break\n            else:\n                num = num[i:] + num[:i]\n                break\n    for i in range(1, len(num)):\n        if num[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            if num[i] == 'A' or num[i] == 'B' or num[i] == 'C' or num[i] == 'D':\n                num = num[:i] + num[i:]\n                break\n            else:\n                num = num[:i] + num[i:]\n                break\n    for i in range(1, len(num)):\n        if num[i] in '0123456789':\n            if num[i] == '0':\n                num = num[:i] + num[i:]\n                break\n            else:\n                num = num[:i] + num[i:]\n                break\n    return len(num)\n\nif __name__ == '__main__':\n    test_case = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return sum(num.isalpha())\n\nif __name__ == \"__main__\":\n    assert(hex_key(\"AB\") == 1)\n    assert(hex_key(\"1077E\") == 2)\n    assert(hex_key(\"ABED1A33\") == 4)\n    assert(hex_key(\"123456789ABCDEF0\") == 6)\n    assert(hex_key(\"2020\") == 2)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return sum([1 for n in num if is_prime(n)])\n\nif __name__ == \"__main__\":\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "num = str(num)\n    n = len(num)\n    primes = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if num[i] == num[i - 1]:\n            primes[i] = True\n        else:\n            for j in range(i + 1, n + 1):\n                if num[i] == num[j] and primes[j - 1]:\n                    primes[i] = True\n                    break\n    return sum(primes)\n\ndef main():\n    tests = [\n        [\"AB\", 1],\n        [\"1077E\", 2],\n        [\"ABED1A33\", 4],\n        [\"123456789ABCDEF0\", 6],\n        [\"2020\", 2],\n    ]\n    for test in tests:\n        num = test[0]\n        expected = int(test[1])\n        actual = hex_key(num)\n        if actual!= expected:\n            print(\"Incorrect result for\", num)\n            print(\"Expected:\", expected)\n            print(\"Actual:\", actual)\n            return\n        else:\n            print(\"Correct result for\", num)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return sum(1 for x in num if x in \"ABCDEF\")\n\n\nif __name__ == '__main__':\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "cnt = 0\n    for i in range(len(num)):\n        if num[i] in 'ABCDEF0123456789ABCDEF':\n            cnt += 1\n    return cnt\n\nif __name__ == '__main__':\n    for i in range(len(sys.argv)):\n        num = sys.argv[i]\n        cnt = hex_key(num)\n        print(num, cnt)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "num = num.upper()\n    if len(num) == 0:\n        return 0\n    count = 0\n    for i in range(len(num)):\n        if num[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            count += 1\n        elif num[i] in ['A', 'B', 'C', 'D']:\n            count += 3\n        elif num[i] in ['E', 'F']:\n            count += 5\n    return count\n\nif __name__ == \"__main__\":\n    print(hex_key(''))\n    print(hex_key('AB'))\n    print(hex_key('1077E'))\n    print(hex_key('ABED1A33'))\n    print(hex_key('123456789ABCDEF0'))\n    print(hex_key('2020'))\n    print(hex_key('ABCDEF0'))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "num_digits = len(num)\n    primes = 0\n    for i in range(num_digits):\n        if num[i] == \"A\" or num[i] == \"B\" or num[i] == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\":\n            continue\n        elif num[i] == \"0\" or num[i] == \"1\" or num[i] == \"2\" or num[i] == \"3\" or num[i] == \"4\" or num[i] == \"5\" or num[i] == \"6\" or num[i] == \"7\" or num[i] == \"8\" or num[i] == \"9\":\n            continue\n        else:\n            break\n    for i in range(num_digits, 0, -1):\n        if num[i] == \"A\" or num[i] == \"B\" or num[i] == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\":\n            continue\n        elif num[i] == \"0\" or num[i] == \"1\" or num[i] == \"2\" or num[i] == \"3\" or num[i] == \"4\" or num[i] == \"5\" or num[i] == \"6\" or num[i] == \"7\" or num[i] == \"8\" or num[i] == \"9\":\n            continue\n        elif num[i] == \"A\" or num[i] == \"B\" or num[i] == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\":\n            primes += 1\n    return primes\n\nif __name__ == \"__main__\":\n    num = \"AB\"\n    num_digits = len(num)\n    print(hex_key(num))\n    num = \"1077E\"\n    print(hex_key(num))\n    num = \"ABED1A33\"\n    print(hex_key(num))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(num)):\n        if num[i] in 'ABCDEF0123456789':\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    num = \"ABED1A33\"\n    print(hex_key(num))\n    num = \"123456789ABCDEF0\"\n    print(hex_key(num))\n    num = \"2020\"\n    print(hex_key(num))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return sum(1 for x in num if x in '0123456789ABCDEFabcdef')\n\n\nif __name__ == \"__main__\":\n    for num, expected in zip(hex_num, hex_num_expected):\n        actual = hex_key(num)\n        print('Hexadecimal num: {}, expected: {}, actual: {}'.format(num, expected, actual))\n        assert actual == expected\n    print('Success!')"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# This is a simple solution.\n    # The algorithm is simple and efficient.\n    # Just count the number of digits\n    # and check if they are prime.\n    # If not, increment it and repeat.\n    # If the input is empty, return 0.\n    if not num:\n        return 0\n    count = 0\n    for i in num:\n        if i in '0123456789ABCDEF':\n            count += 1\n        elif i in 'abcdef':\n            count += 2\n        else:\n            count += 3\n    if num in '0123456789ABCDEF':\n        count += 1\n    elif num in 'abcdef':\n        count += 2\n    else:\n        count += 3\n    # Check if the number is prime\n    for i in range(2, int(math.sqrt(len(num))) + 1):\n        if num[i] == '1':\n            for j in range(i, len(num) - i + 1):\n                if int(num[i:i + j + 1]) in range(2, 10):\n                    return count\n    return count\n\n# Test cases\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# num = \"AB\"\n    # return 1\n    # num = \"1077E\"\n    # return 2\n    # num = \"ABED1A33\"\n    # return 4\n    # num = \"123456789ABCDEF0\"\n    # return 6\n\n    # num = \"2020\"\n    # return 1\n\n    if len(num) == 0:\n        return 0\n    num = num.upper()\n\n    if len(num) % 2 == 1:\n        num = \"0\" + num\n    if len(num) % 3 == 1:\n        num = \"0\" + num\n    if len(num) % 5 == 1:\n        num = \"0\" + num\n    if len(num) % 7 == 1:\n        num = \"0\" + num\n    num = int(num, 16)\n    # print(num)\n    return len(bin(num)[2:])\n\nif __name__ == \"__main__\":\n    import timeit\n    print(timeit.timeit(\"hex_key(num)\", setup=\"from __main__ import hex_key, num\", number=1))\n    print(hex_key(\"AB\"))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "#print \"num: \", num\n    #print \"len(num): \", len(num)\n    #print \"num[0] \", num[0]\n    if len(num) == 0:\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D' or num[0] == 'E' or num[0] == 'F':\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == '1':\n        return 1\n    if num[0] == '2':\n        return 2\n    if num[0] == '3':\n        return 3\n    if num[0] == '4':\n        return 4\n    if num[0] == '5':\n        return 5\n    if num[0] == '6':\n        return 6\n    if num[0] == '7':\n        return 7\n    if num[0] == '8':\n        return 8\n    if num[0] == '9':\n        return 9\n    if num[0] == 'A':\n        return 10\n    if num[0] == 'B':\n        return 11\n    if num[0] == 'C':\n        return 12\n    if num[0] == 'D':\n        return 13\n    if num[0] == 'E':\n        return 14\n    if num[0] == 'F':\n        return 15\n    return num.count('A') + num.count('B') + num.count('C') + num.count('D') + num.count('E') + num.count('F')\n    \ndef main():\n    s = \"ABED1A33\"\n    print hex_key(s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return sum(num.count(x) for x in '0123456789ABCDEF')\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "num = num.upper()\n    count = 0\n    for i in range(len(num)):\n        if num[i] in 'ABCDEF0123456789':\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print hex_key(\"AB\")\n    print hex_key(\"1077E\")\n    print hex_key(\"ABED1A33\")\n    print hex_key(\"123456789ABCDEF0\")\n    print hex_key(\"2020\")"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if len(num) < 1:\n        return 0\n    \n    result = 0\n    for i in range(0, len(num)):\n        if num[i] == \"0\" or num[i] == \"1\" or num[i] == \"2\" or num[i] == \"3\" or num[i] == \"4\" or num[i] == \"5\" or num[i] == \"6\" or num[i] == \"7\" or num[i] == \"8\" or num[i] == \"9\":\n            result += 1\n    return result\n\ndef main():\n    print hex_key(\"ABCDEF\")\n    print hex_key(\"0123456789ABCDEF\")\n    print hex_key(\"0123456789ABCDEF0\")\n    print hex_key(\"2020\")\n    print hex_key(\"1\")\n    print hex_key(\"0\")\n    print hex_key(\"\")\n    print hex_key(\"ABCDEF\")\n    print hex_key(\"0123456789ABCDEF\")\n    print hex_key(\"0123456789ABCDEF0\")\n    print hex_key(\"2020\")\n    print hex_key(\"1\")\n    print hex_key(\"0\")\n    print hex_key(\"\")\n    print hex_key(\"AB\")\n    print hex_key(\"1077E\")\n    print hex_key(\"ABED1A33\")\n    print hex_key(\"123456789ABCDEF0\")\n    print hex_key(\"2020\")\n    print hex_key(\"1\")\n    print hex_key(\"0\")\n    print hex_key(\"\")\n    print hex_key(\"ABCDEF\")\n    print hex_key(\"0123456789ABCDEF\")\n    print hex_key(\"0123456789ABCDEF0\")\n    print hex_key(\"2020\")\n    print hex_key(\"1\")\n    print hex_key(\"0\")\n    print hex_key(\"\")\n    print hex_key(\"AB\")\n    print hex_key(\"1077E\")\n    print hex_key(\"ABED1A33\")\n    print hex_key(\"123456789ABCDEF0\")\n    print hex_key(\"2020\")\n    print hex"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# count number of digits that are prime\n    # print(\"num = %s\" % num)\n    count = 0\n    for i in range(0, len(num)):\n        if num[i] in 'ABED1A33':\n            count += 1\n    return count\n\n# print(hex_key(\"ABED1A33\"))\n# print(hex_key(\"2020\"))\n# print(hex_key(\"\"))\n\n# print(hex_key(\"123456789ABCDEF0\"))\n# print(hex_key(\"1077E\"))\n# print(hex_key(\"B\"))\n# print(hex_key(\"C\"))\n# print(hex_key(\"D\"))\n# print(hex_key(\"E\"))\n# print(hex_key(\"F\"))\n# print(hex_key(\"0\"))\n# print(hex_key(\"\"))\n# print(hex_key(\"\"))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return sum(1 if is_prime(i) else 0 for i in str(num))\n\n\ndef is_prime(num):\n    \"\"\"You have been tasked to write a function that determines whether a \n    number is prime or not.\n    A number is prime if it is greater than 1 and not a factor of any number \n    in the range [1, sqrt(num)]\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be False.\n    For num = \"1077E\" the output should be False.\n    For num = \"ABED1A33\" the output should be False.\n    For num = \"123456789ABCDEF0\" the output should be False.\n    For num = \"2020\" the output should be True.\n    \"\"\"\n    if num == 0:\n        return False\n    elif num == 1:\n        return True\n    elif num % 2 == 0 or num == 2 or num == 3:\n        return False\n    elif num < 10:\n        return True\n    else:\n        for i in range(2, int(ceil(sqrt(num))) + 1):\n            if num % i == 0:\n                return False\n        return True\n\nif __name__ == '__main__':\n    print(hex_key(123456789))\n    print(hex_key(123456789000))\n    print(hex_key(12345678900))\n    print(hex_key(12345678901))\n    print(hex_key(12345678901))\n    print(hex_key(1234567890101))\n    print(hex_key(12345678901))\n    print(hex_key(12345678901))\n    print(hex_key(1234567890101))\n    print(hex_key(12345678901010101010101010101"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "prime = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    digits = num.split(' ')\n    count = 0\n    for i in range(0, len(digits)):\n        if digits[i] in prime:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return len(str(num)) / 2\n\n\nif __name__ == \"__main__\":\n    print hex_key(\"AB\")\n    print hex_key(\"1077E\")\n    print hex_key(\"ABED1A33\")\n    print hex_key(\"123456789ABCDEF0\")\n    print hex_key(\"2020\")"
    },
    {
      "rank": 26,
      "score": 9.993386359878413,
      "candidate": "# This is a problem with the input.\n    if len(num) == 0:\n        return 0\n    # This is a problem with the output.\n    if len(num) == 1:\n        return 0\n    # This is a problem with the input.\n    if num[0] == \"0\" or num[-1] == \"0\":\n        return 0\n    # This is a problem with the output.\n    if num[0] == \"1\" or num[-1] == \"1\":\n        return 0\n    # This is a problem with the input.\n    if num[0] == \"2\" or num[-1] == \"2\":\n        return 0\n    # This is a problem with the output.\n    if num[0] == \"3\" or num[-1] == \"3\":\n        return 0\n    # This is a problem with the input.\n    if num[0] == \"4\" or num[-1] == \"4\":\n        return 0\n    # This is a problem with the output.\n    if num[0] == \"5\" or num[-1] == \"5\":\n        return 0\n    # This is a problem with the input.\n    if num[0] == \"6\" or num[-1] == \"6\":\n        return 0\n    # This is a problem with the output.\n    if num[0] == \"7\" or num[-1] == \"7\":\n        return 0\n    # This is a problem with the input.\n    if num[0] == \"8\" or num[-1] == \"8\":\n        return 0\n    # This is a problem with the output.\n    if num[0] == \"9\" or num[-1] == \"9\":\n        return 0\n    # This is a problem with the input.\n    if num[0] == \"A\" or num[-1] == \"A\":\n        return 0\n    # This is a problem with the output.\n    if num[0] == \"B\" or num[-1] == \"B\":\n        return 0\n    # This is a problem with the input.\n    if num[0] == \"C\" or num[-1] == \"C"
    },
    {
      "rank": 27,
      "score": 9.964715040425636,
      "candidate": "num = str(num)\n    if len(num) == 0:\n        return 0\n    count = 0\n    for i in range(len(num) - 1):\n        if is_prime(int(num[i:i+2], 16)):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(hex_key(str(i)))"
    },
    {
      "rank": 28,
      "score": 9.857070062601295,
      "candidate": "if len(num) < 2:\n        return 0\n\n    # if the number is a prime number, then return 1\n    for i in range(2, len(num) + 1):\n        if num[:i] in [str(i), str(i), str(i - 1), str(i - 1), str(i - 2), str(i - 2)]:\n            return 1\n\n    # if the number is not a prime number, then return 0\n    return 0\n\n\n# test cases\nassert hex_key(\"\") == 0\nassert hex_key(\"A\") == 1\nassert hex_key(\"AB\") == 1\nassert hex_key(\"ABC\") == 1\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2\n\n# time:O(N)\n# space:O(1)"
    },
    {
      "rank": 29,
      "score": 9.848485935832905,
      "candidate": "# print \"hex_key: \", num\n    # print \"hex_key: \", num.encode('hex')\n    n = int(num.encode('hex'), 16)\n    result = 0\n    for i in range(0, len(num)):\n        # print \"num[i]: \", num[i]\n        if (n % 2**i) == 0:\n            result += 1\n        n >>= 1\n    return result\n\n\nif __name__ == \"__main__\":\n    # s = \"0123456789ABCDEF\"\n    # print \"hex_key: \", hex_key(s)\n    # s = \"0123456789ABCDEF\"\n    # print \"hex_key: \", hex_key(s)\n    s = \"0123456789ABCDEF\"\n    print \"hex_key: \", hex_key(s)\n    s = \"0123456789ABCDEF\"\n    print \"hex_key: \", hex_key(s)\n    s = \"0123456789ABCDEF\"\n    print \"hex_key: \", hex_key(s)\n    s = \"0123456789ABCDEF\"\n    print \"hex_key: \", hex_key(s)"
    },
    {
      "rank": 30,
      "score": 9.839445548167093,
      "candidate": "res = 0\n    for i in range(len(num)):\n        if num[i] >= '0' and num[i] <= '9':\n            res += 1\n    return res\n\n\ndef test():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 31,
      "score": 9.807867004965242,
      "candidate": "return sum([int(c) for c in str(num) if c in '0123456789ABCDEF'])\n\nif __name__ == '__main__':\n    for i in range(1, 100):\n        num = str(i)\n        if num[0] == '0':\n            print(hex_key(num))"
    },
    {
      "rank": 32,
      "score": 9.769957550891874,
      "candidate": "digits = 0\n    if not num:\n        return digits\n    if not num.isdigit():\n        return digits\n    for x in num:\n        if x.isdigit():\n            digits += 1\n    return digits\n\nif __name__ == \"__main__\":\n    assert hex_key(123) == 1, \"Expected: 1, Got: %s\" % hex_key(123)\n    assert hex_key(\"ABC\") == 2, \"Expected: 2, Got: %s\" % hex_key(\"ABC\")\n    assert hex_key(\"ABED1A33\") == 4, \"Expected: 4, Got: %s\" % hex_key(\"ABED1A33\")\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Expected: 6, Got: %s\" % hex_key(\"123456789ABCDEF0\")\n    assert hex_key(\"2020\") == 2, \"Expected: 2, Got: %s\" % hex_key(\"2020\")"
    },
    {
      "rank": 33,
      "score": 9.765204623455809,
      "candidate": "digits = 0\n    while num:\n        num = num.lstrip('0')\n        if num:\n            digits += num.count('F')\n            num = num[:len(num) - 1]\n    return digits\n\ndef test_hex_key():\n    assert hex_key(\"\") == 0\n    assert hex_key(\"0\") == 1\n    assert hex_key(\"1\") == 1\n    assert hex_key(\"2\") == 1\n    assert hex_key(\"3\") == 1\n    assert hex_key(\"4\") == 1\n    assert hex_key(\"5\") == 1\n    assert hex_key(\"6\") == 1\n    assert hex_key(\"7\") == 1\n    assert hex_key(\"8\") == 1\n    assert hex_key(\"9\") == 1\n    assert hex_key(\"A\") == 1\n    assert hex_key(\"B\") == 1\n    assert hex_key(\"C\") == 1\n    assert hex_key(\"D\") == 1\n    assert hex_key(\"E\") == 1\n    assert hex_key(\"F\") == 1\n    assert hex_key(\"10\") == 2\n    assert hex_key(\"11\") == 2\n    assert hex_key(\"12\") == 2\n    assert hex_key(\"13\") == 2\n    assert hex_key(\"14\") == 2\n    assert hex_key(\"15\") == 2\n    assert hex_key(\"16\") == 2\n    assert hex_key(\"17\") == 2\n    assert hex_key(\"18\") == 2\n    assert hex_key(\"19\") == 2\n    assert hex_key(\"20\") == 2\n    assert hex_key(\"21\") == 2\n    assert hex_key(\"22\") == 2\n    assert hex_key(\"23\") == 2\n    assert hex_key(\"24\") == 2\n    assert hex_key(\"25\") == 2\n    assert hex_key(\"26\") == 2\n    assert hex_key(\"27\") == 2\n    assert hex_key(\"28\") == 2\n    assert hex_key(\"29\") == 2\n    assert hex_key(\"30\") == 2\n    assert hex_key(\"31\") == 2\n    assert hex_key(\"32\") == 2\n    assert hex_key(\"33\")"
    },
    {
      "rank": 34,
      "score": 9.754139048643577,
      "candidate": "num = num.upper()\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in 'ABED':\n            total += 1\n    return total\n\nif __name__ == \"__main__\":\n    print hex_key(\"1077E\")"
    },
    {
      "rank": 35,
      "score": 9.746047593045914,
      "candidate": "return sum(1 for x in num if x in {2, 3, 5, 7, 11, 13})"
    },
    {
      "rank": 36,
      "score": 9.668308219850081,
      "candidate": "return sum(x for x in map(int, num) if x % 2 == 0)\n\nif __name__ == '__main__':\n    for num in (\"AB\", \"1077E\", \"ABED1A33\", \"123456789ABCDEF0\", \"2020\"):\n        print(hex_key(num))"
    },
    {
      "rank": 37,
      "score": 9.588783413620908,
      "candidate": "cnt = 0\n    for i in range(1, len(num)):\n        if num[i] in 'ABED1A33':\n            cnt += 1\n        elif num[i] in '0ABCDEF':\n            cnt += 2\n        else:\n            cnt += 3\n    return cnt\n\n\ndef main():\n    num = \"ABED1A33\"\n    print(hex_key(num))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 9.555068202994606,
      "candidate": "num = str(num)\n    total = 0\n    for i in range(len(num)):\n        if num[i] in '0123456789ABCDEF':\n            total += 1\n    return total\n\ndef main():\n    num = input()\n    print(hex_key(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 9.503712751036133,
      "candidate": "return sum(1 for i in num if i in 'ABCDEF0123456789')\n\n\ndef main():\n    num = 'ABED1A33'\n    print hex_key(num)\n    num = '123456789ABCDEF0'\n    print hex_key(num)\n    num = '2020'\n    print hex_key(num)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 9.481721644811609,
      "candidate": "if not num:\n        return 0\n    digits = 0\n    for i in range(len(num)):\n        if num[i] in 'ABCDEF0123456789ABCDEF0':\n            digits += 1\n    return digits\n\n\nif __name__ == '__main__':\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 41,
      "score": 9.457895862737047,
      "candidate": "# check if num is empty\n    if not num:\n        return 0\n    \n    # check if num is all digits\n    if not num.isdigit():\n        return 0\n    \n    # check if num is all letters\n    if not num.isalpha():\n        return 0\n    \n    # check if num has more than 1 letter\n    if len(num) > 1:\n        return 0\n    \n    # convert num to int\n    num = int(num)\n    \n    # check if num is a number\n    if not num:\n        return 0\n    \n    # check if num is a prime number\n    if not num % 2:\n        return 0\n    \n    # check if num is a multiple of 3\n    if num % 3 == 0:\n        return 0\n    \n    # check if num is a multiple of 5\n    if num % 5 == 0:\n        return 0\n    \n    # check if num is a multiple of 7\n    if num % 7 == 0:\n        return 0\n    \n    # check if num is a multiple of 11\n    if num % 11 == 0:\n        return 0\n    \n    # check if num is a multiple of 13\n    if num % 13 == 0:\n        return 0\n    \n    # check if num is a multiple of 17\n    if num % 17 == 0:\n        return 0\n    \n    # check if num is a multiple of 19\n    if num % 19 == 0:\n        return 0\n    \n    # check if num is a multiple of 23\n    if num % 23 == 0:\n        return 0\n    \n    # check if num is a multiple of 29\n    if num % 29 == 0:\n        return 0\n    \n    # check if num is a multiple of 31\n    if num % 31 == 0:\n        return 0\n    \n    # check if num is a multiple of 37\n    if num % 37 == 0:\n        return 0\n    \n    # check if num is a multiple of 41\n    if num % 41 == 0:\n        return 0\n    \n    # check if num is a multiple of 43\n    if num % 43 == 0:\n        return 0\n    \n    # check if num is a multiple of 47\n    if num"
    },
    {
      "rank": 42,
      "score": 9.436013147063072,
      "candidate": "return sum(1 for i in num if is_prime(i))\n\n\n# https://www.hackerrank.com/challenges/hex-key\n\n# Test cases\ntest_cases = [\n    (\"AB\", 1),\n    (\"1077E\", 2),\n    (\"ABED1A33\", 4),\n    (\"123456789ABCDEF0\", 6),\n    (\"2020\", 2)\n]\n\nfor case in test_cases:\n    num, res = case\n    print(\"Case #{}: {}\".format(case_id, hex_key(num)))\n    case_id += 1"
    },
    {
      "rank": 43,
      "score": 9.413858754200472,
      "candidate": "if len(num) == 0:\n        return 0\n    num = num.upper()\n    count = 0\n    for i in range(0, len(num) - 1):\n        if num[i] == '0' and num[i + 1] == '0':\n            continue\n        if num[i] == '0':\n            continue\n        if num[i] == '1':\n            count += 1\n        if num[i] == '2':\n            count += 1\n        if num[i] == '3':\n            count += 1\n        if num[i] == '4':\n            count += 1\n        if num[i] == '5':\n            count += 1\n        if num[i] == '6':\n            count += 1\n        if num[i] == '7':\n            count += 1\n        if num[i] == '8':\n            count += 1\n        if num[i] == '9':\n            count += 1\n        if num[i] == 'A':\n            count += 1\n        if num[i] == 'B':\n            count += 1\n        if num[i] == 'C':\n            count += 1\n        if num[i] == 'D':\n            count += 1\n        if num[i] == 'E':\n            count += 1\n        if num[i] == 'F':\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.401786611514199,
      "candidate": "return sum([int(c) for c in num])\n\n# Note: this is a slightly modified version of the solution from \n# http://www.codeguru.com/cpp/cpp/algorithms/strings/article.php/c10451/Hex-and-prime-numbers-in-C.htm\n# The only change is that it uses a list instead of a map.\n# This is a problem if you want to do a similar algorithm in a different language."
    },
    {
      "rank": 45,
      "score": 9.349188836039769,
      "candidate": "digits = 0\n    for i in range(len(num)):\n        if num[i] == \"0\":\n            continue\n        if num[i] == \"1\":\n            digits += 1\n    return digits\n\nif __name__ == \"__main__\":\n    import time\n\n    t = time.time()\n    print(hex_key(\"AB\"))\n    print(\"--- %s seconds ---\" % (time.time() - t))"
    },
    {
      "rank": 46,
      "score": 9.282877675415262,
      "candidate": "return sum([int(i) for i in num if int(i) % 2 == 0])"
    },
    {
      "rank": 47,
      "score": 9.154790262068614,
      "candidate": "num = num.upper()\n    primes = []\n    for i in range(len(num)):\n        if num[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            primes.append(int(num[i]))\n    for i in range(len(num)):\n        if num[i] == '1':\n            primes.append(int(num[i]))\n        if num[i] == 'A':\n            primes.append(int(num[i]))\n        if num[i] == 'B':\n            primes.append(int(num[i]))\n        if num[i] == 'C':\n            primes.append(int(num[i]))\n        if num[i] == 'D':\n            primes.append(int(num[i]))\n        if num[i] == 'E':\n            primes.append(int(num[i]))\n        if num[i] == 'F':\n            primes.append(int(num[i]))\n    count = 0\n    for i in range(len(num)):\n        if primes[i] == num[i]:\n            count += 1\n    return count\n\ndef main():\n    test_cases = 1\n    while test_cases:\n        test_cases -= 1\n        num = raw_input()\n        ans = hex_key(num)\n        print ans\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 9.136110323872261,
      "candidate": "return sum(1 for x in num if is_prime(x))\n\n\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    Returns True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(hex_key(\"\"))\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 49,
      "score": 9.062492680117678,
      "candidate": "count = 0\n    for i in range(0, len(num) - 1):\n        if num[i:i+2] == \"00\":\n            count += 1\n    return count\n\ndef main():\n    #print hex_key(\"AB\")\n    #print hex_key(\"1077E\")\n    #print hex_key(\"ABED1A33\")\n    #print hex_key(\"123456789ABCDEF0\")\n    print hex_key(\"2020\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.79474131141829,
      "candidate": "count = 0\n    for i in num:\n        if i == \"0\":\n            continue\n        if i.isalpha():\n            if i.isupper():\n                count += 1\n        else:\n            if i.isdigit():\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 51,
      "score": 8.66723279226701,
      "candidate": "if len(num) == 0:\n        return 0\n    elif len(num) == 1:\n        return int(num[0])\n    elif len(num) == 2:\n        return int(num[0]) * int(num[1])\n    elif len(num) == 3:\n        return int(num[0]) * int(num[1]) * int(num[2])\n    else:\n        return int(num[0]) * int(num[1]) * int(num[2]) * int(num[3])\n\ndef test():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 52,
      "score": 8.65863887184117,
      "candidate": "if len(num) == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(0, len(num)):\n            if num[i] == 'A':\n                sum += 1\n            elif num[i] == 'B':\n                sum += 2\n            elif num[i] == 'C':\n                sum += 3\n            elif num[i] == 'D':\n                sum += 5\n            elif num[i] == 'E':\n                sum += 7\n            elif num[i] == 'F':\n                sum += 11\n            else:\n                sum += 1\n        return sum\n\n# Test\nif __name__ == '__main__':\n    assert hex_key('A') == 1\n    assert hex_key('B') == 2\n    assert hex_key('C') == 3\n    assert hex_key('D') == 5\n    assert hex_key('E') == 7\n    assert hex_key('F') == 11\n    assert hex_key('1077E') == 2\n    assert hex_key('AB') == 1\n    assert hex_key('ABED1A33') == 4\n    assert hex_key('123456789ABCDEF0') == 6\n    assert hex_key('2020') == 2"
    },
    {
      "rank": 53,
      "score": 8.633629774228178,
      "candidate": "if len(num) < 2:\n        return 0\n    if len(num) > 16:\n        return 0\n    for i in range(0, len(num)):\n        if num[i] == 'A':\n            num[i] = 'B'\n        elif num[i] == 'B':\n            num[i] = 'C'\n        elif num[i] == 'C':\n            num[i] = 'D'\n        elif num[i] == 'D':\n            num[i] = 'E'\n        elif num[i] == 'E':\n            num[i] = 'F'\n        elif num[i] == 'F':\n            num[i] = 'A'\n        elif num[i] == '0':\n            num[i] = '1'\n        elif num[i] == '1':\n            num[i] = '0'\n    for i in range(0, len(num)):\n        if num[i] == 'A':\n            num[i] = 'B'\n        elif num[i] == 'B':\n            num[i] = 'C'\n        elif num[i] == 'C':\n            num[i] = 'D'\n        elif num[i] == 'D':\n            num[i] = 'E'\n        elif num[i] == 'E':\n            num[i] = 'F'\n        elif num[i] == 'F':\n            num[i] = 'A'\n    sum = 0\n    for i in range(0, len(num)):\n        if num[i] == 'A':\n            num[i] = 'B'\n        elif num[i] == 'B':\n            num[i] = 'C'\n        elif num[i] == 'C':\n            num[i] = 'D'\n        elif num[i] == 'D':\n            num[i] = 'E'\n        elif num[i] == 'E':\n            num[i] = 'F'\n        elif num[i] == 'F':\n            num[i] = 'A'"
    },
    {
      "rank": 54,
      "score": 8.530854988663949,
      "candidate": "if not num:\n        return 0\n    num = str(num)\n    prime_count = 0\n    for i in range(len(num)-1):\n        if num[i] == num[i+1]:\n            prime_count += 1\n    return prime_count\n\n\nif __name__ == '__main__':\n    num = input(\"Enter a number: \")\n    print(hex_key(num))"
    },
    {
      "rank": 55,
      "score": 8.52756543371138,
      "candidate": "count = 0\n    if num:\n        for c in num:\n            if c.isalpha():\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    print(hex_key('AB'))\n    print(hex_key('1077E'))\n    print(hex_key('ABED1A33'))\n    print(hex_key('123456789ABCDEF0'))\n    print(hex_key('2020'))"
    },
    {
      "rank": 56,
      "score": 8.466772280794494,
      "candidate": "num = str(num)\n    num = num.upper()\n    num = [num[i:i+2] for i in range(0, len(num), 2)]\n    num = [int(num[i], 16) for i in range(0, len(num), 2)]\n    return sum(num)\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 57,
      "score": 8.46554942304761,
      "candidate": "if num is not None and len(num) == 1:\n        return 1\n    if num is None or len(num) == 0:\n        return 0\n    result = 0\n    for i in range(len(num)):\n        if num[i] == '0':\n            continue\n        if num[i] == 'A' or num[i] == 'B' or num[i] == 'C' or num[i] == 'D' or num[i] == 'E' or num[i] == 'F':\n            result += 1\n    return result\n\n\nif __name__ == '__main__':\n    for num in (\n        \"AB\",\n        \"1077E\",\n        \"ABED1A33\",\n        \"123456789ABCDEF0\",\n        \"2020\",\n    ):\n        print(\"{} -> {}\".format(num, hex_key(num)))"
    },
    {
      "rank": 58,
      "score": 8.464465270139224,
      "candidate": "return sum([int(c) for c in num if c.isdigit()])\n\nif __name__ == '__main__':\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 59,
      "score": 8.44562053947221,
      "candidate": "num = int(num, 16)\n    if not num:\n        return 0\n    n = 0\n    while num > 0:\n        if num % 16 == 0:\n            n += 1\n            num /= 16\n        else:\n            num /= 16\n            n += 1\n    return n\n\nif __name__ == \"__main__\":\n    assert hex_key('') == 0\n    assert hex_key('0123456789ABCDEF0123456789ABCDEF') == 6\n    assert hex_key('ABED1A33') == 4\n    assert hex_key('123456789ABCDEF0') == 6\n    assert hex_key('2020') == 2"
    },
    {
      "rank": 60,
      "score": 8.412643655175073,
      "candidate": "if len(num) < 2:\n        return 0\n    num = num.upper()\n    count = 0\n    for i in range(len(num) - 1):\n        if num[i] in \"ABCDEF\":\n            count += 1\n        else:\n            break\n    return count\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"A\"))\n    print(hex_key(\"B\"))\n    print(hex_key(\"C\"))\n    print(hex_key(\"D\"))\n    print(hex_key(\"E\"))\n    print(hex_key(\"F\"))\n    print(hex_key(\"10\"))\n    print(hex_key(\"11\"))\n    print(hex_key(\"12\"))\n    print(hex_key(\"13\"))\n    print(hex_key(\"14\"))\n    print(hex_key(\"15\"))\n    print(hex_key(\"16\"))\n    print(hex_key(\"17\"))\n    print(hex_key(\"18\"))\n    print(hex_key(\"19\"))\n    print(hex_key(\"1\"))\n    print(hex_key(\"2\"))\n    print(hex_key(\"3\"))\n    print(hex_key(\"4\"))\n    print(hex_key(\"5\"))\n    print(hex_key(\"6\"))\n    print(hex_key(\"7\"))\n    print(hex_key(\"8\"))\n    print(hex_key(\"9\"))\n    print(hex_key(\"0\"))\n    print(hex_key(\"1\"))\n    print(hex_key(\"2\"))\n    print(hex_key(\"3\"))\n    print(hex_key(\"4\"))\n    print(hex_key(\"5\"))\n    print(hex_key(\"6\"))\n    print(hex_key(\"7\"))\n    print(hex_key(\"8\"))\n    print(hex_key(\"9\"))\n    print(hex_key(\"A\"))\n    print(hex_key(\"B\"))\n    print(hex_key(\"C\"))\n    print(hex_key(\"D\"))\n    print(hex_key(\"E\"))\n    print(hex_key(\"F\"))\n    print(hex_key(\"10\"))\n    print(hex_key(\"11\"))"
    },
    {
      "rank": 61,
      "score": 8.401742879811767,
      "candidate": "if num == \"\":\n        return 0\n    num = str(num)\n    num = num.upper()\n    if len(num) == 1:\n        return 1\n    num = \"\".join(x for x in num if x.isalpha())\n    if num == \"\":\n        return 0\n    num = num[:len(num)/2]\n    for i in range(len(num)):\n        if num[i] == num[len(num)-1-i]:\n            return 2\n    return 3\n\nif __name__ == \"__main__\":\n    assert hex_key(\"A\") == 1\n    assert hex_key(\"B\") == 2\n    assert hex_key(\"C\") == 3\n    assert hex_key(\"D\") == 4\n    assert hex_key(\"E\") == 5\n    assert hex_key(\"F\") == 6\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"CD\") == 2\n    assert hex_key(\"ED\") == 3\n    assert hex_key(\"EF\") == 4\n    assert hex_key(\"ABCDEF\") == 6\n    assert hex_key(\"10\") == 2\n    assert hex_key(\"100\") == 3\n    assert hex_key(\"1000\") == 5\n    assert hex_key(\"1234567890\") == 6\n    assert hex_key(\"2020\") == 2"
    },
    {
      "rank": 62,
      "score": 8.392515895332542,
      "candidate": "count = 0\n    for i in range(len(num)):\n        if num[i] in 'ABCDEF0123456789abcdef':\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    assert hex_key('AB') == 1, \"Expected 1\"\n    assert hex_key('1077E') == 2, \"Expected 2\"\n    assert hex_key('ABED1A33') == 4, \"Expected 4\"\n    assert hex_key('123456789ABCDEF0') == 6, \"Expected 6\"\n    assert hex_key('2020') == 2, \"Expected 2\""
    },
    {
      "rank": 63,
      "score": 8.390592944346134,
      "candidate": "result = 0\n    for i in range(len(num)):\n        if num[i] == \"0\" or num[i] == \"1\":\n            result += 1\n    return result\n\nif __name__ == '__main__':\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"2020\"))\n    print(hex_key(\"\"))"
    },
    {
      "rank": 64,
      "score": 8.390589168258078,
      "candidate": "nums = []\n    for i in num:\n        if i == \"A\" or i == \"B\" or i == \"C\" or i == \"D\" or i == \"E\" or i == \"F\":\n            nums.append(i)\n    nums = [int(x) for x in nums]\n    primes = [x for x in range(2, max(nums) + 1) if all(x % p == 0 for p in nums)]\n    return len(primes)"
    },
    {
      "rank": 65,
      "score": 8.375672753837295,
      "candidate": "num = int(num, 16)\n    \n    for i in range(0, len(str(num))):\n        if not is_prime(num):\n            return int(str(num)[i:])\n    \n    return 0\n\nif __name__ == \"__main__\":\n    assert hex_key('') == 0\n    assert hex_key('A') == 1\n    assert hex_key('AB') == 1\n    assert hex_key('ABD1A33') == 4\n    assert hex_key('123456789ABCDEF0') == 6\n    assert hex_key('2020') == 2"
    },
    {
      "rank": 66,
      "score": 8.375190594458909,
      "candidate": "num = num.upper()\n    cnt = 0\n    for i in range(len(num) - 1):\n        if num[i] == num[i + 1] and int(num[i]) % 2 == 0:\n            cnt += 1\n    return cnt"
    },
    {
      "rank": 67,
      "score": 8.31511831271902,
      "candidate": "numbers = {}\n    if num.isdigit():\n        numbers[int(num)] = 1\n    for i in range(1, len(num)):\n        for j in range(i+1, len(num)+1):\n            if num[i:j] in numbers and numbers[num[i:j]] > 0:\n                numbers[num[i:j]] -= 1\n    return sum(numbers.values())\n\nif __name__ == \"__main__\":\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2"
    },
    {
      "rank": 68,
      "score": 8.306051923631683,
      "candidate": "#print(num)\n    hex_num = num.strip()\n    num_list = []\n    for i in range(len(hex_num)):\n        if hex_num[i] == \"A\" or hex_num[i] == \"B\" or hex_num[i] == \"C\" or hex_num[i] == \"D\" or hex_num[i] == \"E\" or hex_num[i] == \"F\":\n            num_list.append(ord(hex_num[i])-ord(\"A\"))\n    return sum(num_list)"
    },
    {
      "rank": 69,
      "score": 8.282972232852654,
      "candidate": "num = int(num)\n    prime_count = 0\n    for i in range(0, 10):\n        if num % (10 ** i) == 0:\n            prime_count += 1\n    return prime_count\n\nif __name__ == \"__main__\":\n    num = \"ABED1A33\"\n    print(hex_key(num))"
    },
    {
      "rank": 70,
      "score": 8.258490915779012,
      "candidate": "if num:\n        for i in range(len(num)):\n            if num[i] == 'A' or num[i] == 'B' or num[i] == 'C' or num[i] == 'D' or num[i] == 'E' or num[i] == 'F':\n                return 1\n            else:\n                if num[i] in '0123456789ABCDEF':\n                    return int(num[i])\n                else:\n                    return 0\n    else:\n        return 0\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) >= 2):\n        test_case = int(sys.argv[1])\n        while (test_case > 0):\n            test_case -= 1\n            print hex_key(sys.argv[2])"
    },
    {
      "rank": 71,
      "score": 7.993720315952096,
      "candidate": "return sum(1 for x in num if x in {'A', 'B', 'C', 'D', 'E', 'F'})\n\nprint(hex_key(\"A\"))\nprint(hex_key(\"AB\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 72,
      "score": 7.98730359408624,
      "candidate": "if not num:\n        return 0\n    num = num.upper()\n    ans = 0\n    for i, c in enumerate(num):\n        if c == 'A' or c == 'B' or c == 'C' or c == 'D' or c == 'E' or c == 'F':\n            ans += 1\n        else:\n            break\n    return ans\n\nif __name__ == '__main__':\n    assert hex_key('A') == 1, 'A'\n    assert hex_key('AB') == 1, 'AB'\n    assert hex_key('ABED1A33') == 4, 'ABED1A33'\n    assert hex_key('123456789ABCDEF0') == 6, '123456789ABCDEF0'\n    assert hex_key('2020') == 2, '2020'\n    assert hex_key('') == 0, ''"
    },
    {
      "rank": 73,
      "score": 3.4421795883420696,
      "candidate": "if len(num) == 0:\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 1\n    if num[0] == 'C':\n        return 1\n    if num[0] == 'D':\n        return 1\n    if num[0] == 'E':\n        return 1\n    if num[0] == 'F':\n        return 1\n    if num[0] == '0':\n        return 0\n    if num[0] == '1':\n        return 0\n    if num[0] == '2':\n        return 0\n    if num[0] == '3':\n        return 0\n    if num[0] == '4':\n        return 0\n    if num[0] == '5':\n        return 0\n    if num[0] == '6':\n        return 0\n    if num[0] == '7':\n        return 0\n    if num[0] == '8':\n        return 0\n    if num[0] == '9':\n        return 0\n    if num[0] == 'A':\n        return 0\n    if num[0] == 'B':\n        return 0\n    if num[0] == 'C':\n        return 0\n    if num[0] == 'D':\n        return 0\n    if num[0] == 'E':\n        return 0\n    if num[0] == 'F':\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == '1':\n        return 0\n    if num[0] == '2':\n        return 0\n    if num[0] == '3':\n        return 0\n    if num[0] == '4':\n        return 0\n    if num[0] == '5':\n        return 0\n    if num[0] == '6':\n        return 0\n    if num[0] == '7':\n        return 0\n    if num[0] == '8':\n        return 0\n    if num[0] == '9':\n        return 0\n    if num"
    },
    {
      "rank": 74,
      "score": 3.413810332527625,
      "candidate": "return sum(1 for c in num if c in 'ABCDEF')\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"\") == 0, \"Empty string\"\n    assert hex_key(\"AB\") == 1, \"A-B\"\n    assert hex_key(\"1077E\") == 2, \"1077E\"\n    assert hex_key(\"ABED1A33\") == 4, \"ABED1A33\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"2020\") == 2, \"2020\""
    },
    {
      "rank": 75,
      "score": 3.3797472079998303,
      "candidate": "#return sum(1 for i in num if i % 2 == 0)\n    #return sum(1 for i in num if i % 3 == 0)\n    return sum(1 for i in num if i % 5 == 0)\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"AB\") == 1, \"2\"\n    assert hex_key(\"1077E\") == 2, \"2\"\n    assert hex_key(\"ABED1A33\") == 4, \"4\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"6\"\n    assert hex_key(\"2020\") == 2, \"2\""
    },
    {
      "rank": 76,
      "score": 3.280989211409767,
      "candidate": "hex_str = num.upper()\n    ret = 0\n    for i in range(len(hex_str)):\n        if hex_str[i] in \"ABCDEF0123456789ABCDEF0\":\n            ret += 1\n    return ret\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"AB\") == 1, \"2\"\n    assert hex_key(\"1077E\") == 2, \"2\"\n    assert hex_key(\"ABED1A33\") == 4, \"4\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"6\"\n    assert hex_key(\"2020\") == 2, \"2\""
    },
    {
      "rank": 77,
      "score": 3.2731526355942604,
      "candidate": "num = str(num)\n    prime = 0\n    for i in range(len(num)):\n        if num[i] == \"A\":\n            prime += 1\n        elif num[i] == \"B\":\n            prime += 2\n        elif num[i] == \"C\":\n            prime += 3\n        elif num[i] == \"D\":\n            prime += 4\n        elif num[i] == \"E\":\n            prime += 5\n        elif num[i] == \"F\":\n            prime += 6\n        elif num[i] == \"0\":\n            prime += 7\n    return prime\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"AB\") == 1, \"1\"\n    assert hex_key(\"ABED1A33\") == 4, \"4\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"6\"\n    assert hex_key(\"2020\") == 2, \"2\"\n    assert hex_key(\"1\") == 0, \"0\"\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 3.2275072302703753,
      "candidate": "return sum([int(x) for x in num])\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"\") == 0, \"Empty string\"\n    assert hex_key(\"A\") == 1, \"First character is A\"\n    assert hex_key(\"AB\") == 2, \"Two digits\"\n    assert hex_key(\"ABCD\") == 4, \"Four digits\"\n    assert hex_key(\"ABCDEF\") == 6, \"Six digits\"\n    assert hex_key(\"0123456789ABCDEF\") == 10, \"All digits\"\n    assert hex_key(\"1077E\") == 2, \"1077E\"\n    assert hex_key(\"ABED1A33\") == 4, \"ABED1A33\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"2020\") == 2, \"2020\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\""
    },
    {
      "rank": 79,
      "score": 3.096213121079169,
      "candidate": "if len(num) <= 3:\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D' or num[0] == 'E' or num[0] == 'F':\n        return 0\n    if num[0] == '1' or num[0] == '2' or num[0] == '3' or num[0] == '4' or num[0] == '5' or num[0] == '6' or num[0] == '7' or num[0] == '8' or num[0] == '9':\n        return 0\n    if num[0] == '0' and num[1] == '0' or num[0] == '0' and num[1] == '1' or num[0] == '0' and num[1] == '2' or num[0] == '0' and num[1] == '3' or num[0] == '0' and num[1] == '4' or num[0] == '0' and num[1] == '5' or num[0] == '0' and num[1] == '6' or num[0] == '0' and num[1] == '7' or num[0] == '0' and num[1] == '8' or num[0] == '0' and num[1] == '9':\n        return 0\n    if num[0] == '0' and num[1] == '0' and num[2] == '0' or num[0] == '0' and num[1] == '0' and num[2] == '1' or num[0] == '0' and num[1] == '0' and num[2] == '2' or num[0] == '0' and num[1] == '0' and num[2] == '3' or num[0] == '0' and num[1] == '0' and num[2] == '4' or num[0] == '0' and num[1]"
    },
    {
      "rank": 80,
      "score": 3.0920503107047117,
      "candidate": "n = int(num)\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    if n in prime_numbers:\n        return 1\n    else:\n        count = 0\n        while n > 0:\n            if n % 2 == 0:\n                n = n / 2\n                count += 1\n            elif n % 5 == 0:\n                n = n / 5\n                count += 1\n            elif n % 3 == 0"
    },
    {
      "rank": 81,
      "score": 3.073095476210369,
      "candidate": "return sum([1 for x in num if int(x, 16) % 2 == 0])\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    #assert(sum(map(lambda x: x == 'A' and x == 'B' or x == 'C' and x == 'D' or x == 'E' and x == 'F', 'ABCDEF')) == 2)\n    #assert(sum(map(lambda x: x == 'A' or x == 'B' or x == 'C' or x == 'D', 'ABCDEF')) == 2)\n    assert(hex_key(\"AB\") == 1)\n    assert(hex_key(\"1077E\") == 2)\n    assert(hex_key(\"ABED1A33\") == 4)\n    assert(hex_key(\"123456789ABCDEF0\") == 6)\n    assert(hex_key(\"2020\") == 2)"
    },
    {
      "rank": 82,
      "score": 3.0677494360384894,
      "candidate": "# TODO: implement\n    return 0\n\ndef prime_number(num):\n    \"\"\"You have been tasked to write a function that determines whether \n    a number is prime or not.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be False.\n    For num = \"1077E\" the output should be True.\n    For num = \"ABED1A33\" the output should be False.\n    For num = \"123456789ABCDEF0\" the output should be False.\n    For num = \"2020\" the output should be True.\n    \"\"\"\n    # TODO: implement\n    return False\n\ndef main():\n    \"\"\"Write a function that takes a string and returns the number of \n    prime numbers that are in the string.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # TODO: implement\n    return 0\n\nif __name__ == \"__main__\":\n    print(main())"
    },
    {
      "rank": 83,
      "score": 3.0551211460433545,
      "candidate": "if num == '':\n        return 0\n    else:\n        return len([x for x in num if x in 'ABCDEF0123456789ABCDEF' and x.isupper()])"
    },
    {
      "rank": 84,
      "score": 2.9899687090492137,
      "candidate": "if not num:\n        return 0\n    if not num[0].isalpha():\n        return 0\n    if not num[0].isupper():\n        return 0\n    if not num[1].isalpha():\n        return 0\n    if not num[1].isupper():\n        return 0\n    if not num[2].isalpha():\n        return 0\n    if not num[2].isupper():\n        return 0\n    if not num[3].isalpha():\n        return 0\n    if not num[3].isupper():\n        return 0\n    if not num[4].isalpha():\n        return 0\n    if not num[4].isupper():\n        return 0\n    if not num[5].isalpha():\n        return 0\n    if not num[5].isupper():\n        return 0\n    if not num[6].isalpha():\n        return 0\n    if not num[6].isupper():\n        return 0\n    if not num[7].isalpha():\n        return 0\n    if not num[7].isupper():\n        return 0\n    if not num[8].isalpha():\n        return 0\n    if not num[8].isupper():\n        return 0\n    if not num[9].isalpha():\n        return 0\n    if not num[9].isupper():\n        return 0\n    if not num[10].isalpha():\n        return 0\n    if not num[10].isupper():\n        return 0\n    if not num[11].isalpha():\n        return 0\n    if not num[11].isupper():\n        return 0\n    if not num[12].isalpha():\n        return 0\n    if not num[12].isupper():\n        return 0\n    if not num[13].isalpha():\n        return 0\n    if not num[13].isupper():\n        return 0\n    if not num[14].isalpha():\n        return 0\n    if not num[14].isupper():\n        return 0\n    if not num[15].isalpha():\n        return 0\n    if not num[15].isupper():\n        return 0\n    if not num[16].isalpha():\n        return 0\n    if not num[16]."
    },
    {
      "rank": 85,
      "score": 2.9676184809312924,
      "candidate": "cnt = 0\n    for i in num:\n        if i in ['A', 'B', 'C', 'D', 'E', 'F']:\n            cnt += 1\n    return cnt\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"\") == 0, \"Empty string\"\n    assert hex_key(\"0\") == 0, \"Digit 0\"\n    assert hex_key(\"1\") == 1, \"Digit 1\"\n    assert hex_key(\"2\") == 2, \"Digit 2\"\n    assert hex_key(\"3\") == 2, \"Digit 3\"\n    assert hex_key(\"4\") == 2, \"Digit 4\"\n    assert hex_key(\"5\") == 2, \"Digit 5\"\n    assert hex_key(\"6\") == 2, \"Digit 6\"\n    assert hex_key(\"7\") == 2, \"Digit 7\"\n    assert hex_key(\"8\") == 2, \"Digit 8\"\n    assert hex_key(\"9\") == 2, \"Digit 9\"\n    assert hex_key(\"A\") == 1, \"Digit A\"\n    assert hex_key(\"B\") == 1, \"Digit B\"\n    assert hex_key(\"C\") == 1, \"Digit C\"\n    assert hex_key(\"D\") == 1, \"Digit D\"\n    assert hex_key(\"E\") == 1, \"Digit E\"\n    assert hex_key(\"F\") == 1, \"Digit F\"\n    assert hex_key(\"AB\") == 2, \"Two digits\"\n    assert hex_key(\"ABED\") == 3, \"Three digits\"\n    assert hex_key(\"ABED1A33\") == 4, \"Four digits\"\n    assert hex_key(\"2020\") == 2, \"Two digits\""
    },
    {
      "rank": 86,
      "score": 2.9384918714054966,
      "candidate": "return sum([i==j for i in range(num) if i%2==0 for j in range(num) if j%2==0])\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"AB\") == 1, \"Case 1\"\n    assert hex_key(\"1077E\") == 2, \"Case 2\"\n    assert hex_key(\"ABED1A33\") == 4, \"Case 3\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Case 4\"\n    assert hex_key(\"2020\") == 2, \"Case 5\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Case 6\"\n    assert hex_key(\"1A3\") == 0, \"Case 7\""
    },
    {
      "rank": 87,
      "score": 2.934315602654959,
      "candidate": "num = num.upper()\n    count = 0\n    for i in range(len(num)):\n        if num[i] in 'ABCDEF0123456789':\n            count += 1\n    return count\n\ndef test_hex_key():\n    assert hex_key('AB') == 1\n    assert hex_key('1077E') == 2\n    assert hex_key('ABED1A33') == 4\n    assert hex_key('123456789ABCDEF0') == 6\n    assert hex_key('2020') == 2\n\ndef count_primes(num):\n    \"\"\"You have been tasked to write a function that counts \n    the number of prime numbers that are less than or equal to \n    the given number.\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    count = 0\n    for i in range(len(num)):\n        if num[i] in 'ABCDEF0123456789':\n            count += 1\n            if num[i]!= 'B':\n                continue\n            if int(num[i:i+2]) < 10:\n                continue\n            if int(num[i:i+2]) == 10:\n                continue\n            if int(num[i:i+3]) < 10:\n                continue\n            if int(num[i:i+3]) == 10:\n                continue\n            if int(num[i:i+4]) < 10:\n                continue\n            if int(num[i:i+4]) == 10:\n                continue"
    },
    {
      "rank": 88,
      "score": 2.892176961483431,
      "candidate": "count = 0\n    if len(num) < 5:\n        return 0\n    for i in range(1, len(num)):\n        if num[i] == num[i-1]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"\") == 0, \"Empty string\"\n    assert hex_key(\"AB\") == 1, \"AB\"\n    assert hex_key(\"1077E\") == 2, \"1077E\"\n    assert hex_key(\"ABED1A33\") == 4, \"ABED1A33\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"2020\") == 2, \"2020\""
    },
    {
      "rank": 89,
      "score": 2.8710211441312596,
      "candidate": "return sum(1 for i in num if i % 2 == 0)\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key('A') == 1, \"1st example\"\n    assert hex_key('AB') == 3, \"2nd example\"\n    assert hex_key('A0A') == 1, \"3rd example\"\n    assert hex_key('A0A0') == 2, \"4th example\"\n    assert hex_key('A0B') == 1, \"5th example\"\n    assert hex_key('A0B0') == 2, \"6th example\"\n    assert hex_key('A0C') == 1, \"7th example\"\n    assert hex_key('A0D') == 2, \"8th example\"\n    assert hex_key('A0E') == 2, \"9th example\"\n    assert hex_key('A0F') == 2, \"10th example\"\n    assert hex_key('A0G') == 2, \"11th example\"\n    assert hex_key('A0H') == 2, \"12th example\"\n    assert hex_key('A0I') == 2, \"13th example\"\n    assert hex_key('A0J') == 2, \"14th example\"\n    assert hex_key('A0K') == 2, \"15th example\"\n    assert hex_key('A0L') == 2, \"16th example\"\n    assert hex_key('A0M') == 2, \"17th example\"\n    assert hex_key('A0N') == 2, \"18th example\"\n    assert hex_key('A0O') == 2, \"19th example\"\n    assert hex_key('A0P') == 2, \"20th example\"\n    assert hex_key('A0Q') == 2, \"21st example\"\n    assert hex_key('A0R') == 2, \"22th example\"\n    assert hex_key('A0S') == 2, \"23th example\"\n    assert hex_key('A0T') == 2, \"24th example\"\n    assert hex_key('A0"
    },
    {
      "rank": 90,
      "score": 2.8702430460125106,
      "candidate": "return sum(1 if num.isdigit() else 0 for num in num)\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"\") == 0, \"Empty string\"\n    assert hex_key(\"AB\") == 1, \"AB\"\n    assert hex_key(\"1077E\") == 2, \"1077E\"\n    assert hex_key(\"ABED1A33\") == 4, \"ABED1A33\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"2020\") == 2, \"2020\""
    },
    {
      "rank": 91,
      "score": 2.869595669000328,
      "candidate": "prime_number = 0\n    for i in range(len(num)):\n        if num[i] in \"ABCDEF0123456789\":\n            if num[i] in \"ABCDEF\":\n                prime_number += 1\n            elif num[i] in \"0123456789\":\n                prime_number += 2\n            elif num[i] in \"ABCDEF\":\n                prime_number += 3\n            elif num[i] in \"0123456789\":\n                prime_number += 4\n            elif num[i] in \"ABCDEF\":\n                prime_number += 5\n            elif num[i] in \"0123456789\":\n                prime_number += 6\n            elif num[i] in \"ABCDEF\":\n                prime_number += 7\n            elif num[i] in \"0123456789\":\n                prime_number += 8\n            elif num[i] in \"ABCDEF\":\n                prime_number += 9\n            elif num[i] in \"0123456789\":\n                prime_number += 10\n            elif num[i] in \"ABCDEF\":\n                prime_number += 11\n            elif num[i] in \"0123456789\":\n                prime_number += 12\n            elif num[i] in \"ABCDEF\":\n                prime_number += 13\n            elif num[i] in \"0123456789\":\n                prime_number += 14\n            elif num[i] in \"ABCDEF\":\n                prime_number += 15\n            elif num[i] in \"0123456789\":\n                prime_number += 16\n            elif num[i] in \"ABCDEF\":\n                prime_number += 17\n            elif num[i] in \"0123456789\":\n                prime_number += 18\n            elif num[i] in \"ABCDEF\":\n                prime_number += 19\n            elif num[i] in \"0123456789\":\n                prime_number += 20\n            elif num[i] in \"ABCDEF\":\n                prime_number += 21\n            elif num[i] in \"0123456789\":\n                prime_number += 22\n            elif num"
    },
    {
      "rank": 92,
      "score": 2.851667142945229,
      "candidate": "if num == '':\n        return 0\n    num = num.upper()\n    res = 0\n    for i in range(len(num)):\n        if num[i] in 'ABCDEF0123456789':\n            res += 1\n    return res\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key('AB') == 1, \"1\"\n    assert hex_key('1077E') == 2, \"2\"\n    assert hex_key('ABED1A33') == 4, \"4\"\n    assert hex_key('123456789ABCDEF0') == 6, \"6\"\n    assert hex_key('2020') == 2, \"2\""
    },
    {
      "rank": 93,
      "score": 2.8475728371329487,
      "candidate": "return sum([1 if num[i] in 'ABCDEF' else 0 for i in range(len(num))])"
    },
    {
      "rank": 94,
      "score": 2.8318211668227344,
      "candidate": "count = 0\n    for i in num:\n        if i == 'A' or i == 'B' or i == 'C' or i == 'D' or i == 'E' or i == 'F':\n            count += 1\n    return count\n\ndef hex_key_2(num):\n    \"\"\"\n    \"\"\"\n    count = 0\n    for i in num:\n        if i == '0' or i == '1' or i == '2' or i == '3' or i == '4' or i == '5' or i == '6' or i == '7' or i == '8' or i == '9' or i == 'A' or i == 'B' or i == 'C' or i == 'D' or i == 'E' or i == 'F':\n            count += 1\n    return count\n\ndef main():\n    test_cases = [\n        ([], 1),\n        ([\"A\"], 1),\n        ([\"0\"], 1),\n        ([\"1\"], 1),\n        ([\"2\"], 1),\n        ([\"3\"], 1),\n        ([\"4\"], 1),\n        ([\"5\"], 1),\n        ([\"6\"], 1),\n        ([\"7\"], 1),\n        ([\"8\"], 1),\n        ([\"9\"], 1),\n        ([\"A\"], 2),\n        ([\"B\"], 2),\n        ([\"C\"], 2),\n        ([\"D\"], 2),\n        ([\"E\"], 2),\n        ([\"F\"], 2),\n        ([\"AB\"], 2),\n        ([\"ABC\"], 2),\n        ([\"ABCD\"], 2),\n        ([\"ABCDE\"], 2),\n        ([\"ABCDEF\"], 2),\n        ([\"ABCDEF0\"], 2),\n        ([\"2020\"], 2),\n        ([\"BED1A33\"], 2),\n        ([\"123456789ABCDEF0\"], 6),\n        ([\"ABED1A33\"], 4)\n    ]\n    for case in test_cases:\n        print(case[0])\n        print(hex_key(*case[0]))\n        print(hex_key_2(*case[0]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 95,
      "score": 2.819366468710565,
      "candidate": "return sum(x % 10 == 0 for x in bin(num))\n\n\ndef prime_factor(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and returns the number of hexadecimal \n    digits that are prime (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return sum(x % 10 == 0 for x in bin(num))\n\nif __name__ == \"__main__\":\n    num = \"AB\"\n    print(hex_key(num))\n    num = \"1077E\"\n    print(hex_key(num))\n    num = \"ABED1A33\"\n    print(hex_key(num))\n    num = \"123456789ABCDEF0\"\n    print(hex_key(num))\n    num = \"2020\"\n    print(hex_key(num))\n    print(prime_factor(num))"
    },
    {
      "rank": 96,
      "score": 2.7984436216494815,
      "candidate": "num = int(num, 16)\n    count = 0\n    while num:\n        if num % 2 == 0:\n            count += 1\n            num //= 2\n        elif num % 3 == 0:\n            count += 1\n            num //= 3\n        elif num % 5 == 0:\n            count += 1\n            num //= 5\n        else:\n            count += 1\n            num //= 7\n    return count\n\n\nif __name__ == '__main__':\n    assert hex_key(\"\") == 0\n    assert hex_key(\"A\") == 1\n    assert hex_key(\"1\") == 1\n    assert hex_key(\"AA\") == 1\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"ABC\") == 1\n    assert hex_key(\"ABCD\") == 1\n    assert hex_key(\"ABCDE\") == 1\n    assert hex_key(\"ABCDEF\") == 1\n    assert hex_key(\"ABCDEF1\") == 1\n    assert hex_key(\"ABCDEF10\") == 1\n    assert hex_key(\"ABCDEF100\") == 1\n    assert hex_key(\"ABCDEF1000\") == 1\n    assert hex_key(\"ABCDEF10000\") == 1\n    assert hex_key(\"ABCDEF100000\") == 1\n    assert hex_key(\"ABCDEF1000000\") == 1\n    assert hex_key(\"ABCDEF10000000\") == 1\n    assert hex_key(\"ABCDEF100000000\") == 1\n    assert hex_key(\"ABCDEF1000000001\") == 1\n    assert hex_key(\"ABCDEF10000000010\") == 1\n    assert hex_key(\"ABCDEF100000000100\") == 1\n    assert hex_key(\"ABCDEF1000000001000\") == 1\n    assert hex_key(\"ABCDEF10000000010000\") == 1\n    assert hex_key(\"ABCDEF100000000100000\") == 1\n    assert hex_key(\"ABCDEF1000000001000000\") == 1\n    assert hex_key(\"ABCDEF10000000010000000\") == 1\n    assert hex_key(\"ABCDEF100000000100000000\") == 1\n    assert hex_key(\"ABCDEF100000000100000001\") == 1\n    assert hex_key(\"ABCDEF1000000001000000010\") == 1\n    assert hex_"
    },
    {
      "rank": 97,
      "score": 2.6045549636261183,
      "candidate": "count = 0\n    for c in num:\n        if c.isalpha():\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"\") == 0, \"Empty string\"\n    assert hex_key(\"AB\") == 1, \"AB\"\n    assert hex_key(\"1077E\") == 2, \"ABED1A33\"\n    assert hex_key(\"ABED1A33\") == 4, \"ABED1A33\"\n    assert hex_key(\"2020\") == 2, \"2020\"\n    assert hex_key(\"1\") == 1, \"1\"\n    assert hex_key(\"A1\") == 1, \"A1\"\n    assert hex_key(\"ABED1A3\") == 4, \"ABED1A3\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"123456789ABCDEF0\"\n    assert hex_key(\"1234567"
    },
    {
      "rank": 98,
      "score": 2.601070507860232,
      "candidate": "#TODO: implement\n    return 0\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"AB\") == 1, \"Example for A\"\n    assert hex_key(\"1077E\") == 2, \"Example for B\"\n    assert hex_key(\"ABED1A33\") == 4, \"Example for C\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Example for D\"\n    assert hex_key(\"2020\") == 2, \"Example for E\""
    },
    {
      "rank": 99,
      "score": 2.5860138426971204,
      "candidate": "prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    hex_num = str(num)\n    sum = 0\n    for i in range(len(hex_num) - 1):\n        num = int(hex_num[i:i + 2], 16)\n        if num in prime_list:\n            sum += 1\n    return sum\n\n\nif __name__ == \"__main__\":\n    print hex_key(\"AB\")"
    },
    {
      "rank": 100,
      "score": 2.2664713708548714,
      "candidate": "# TODO: write your code\n    if len(num) == 0:\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == '1':\n        return 1\n    if num[0] == 'A' or num[0] == 'a':\n        return 1\n    if num[0] == 'B' or num[0] == 'b':\n        return 2\n    if num[0] == 'C' or num[0] == 'c':\n        return 3\n    if num[0] == 'D' or num[0] == 'd':\n        return 4\n    if num[0] == 'E' or num[0] == 'e':\n        return 5\n    if num[0] == 'F' or num[0] == 'f':\n        return 6\n    if num[0] == 'G' or num[0] == 'g':\n        return 7\n    if num[0] == 'H' or num[0] == 'h':\n        return 8\n    if num[0] == 'I' or num[0] == 'i':\n        return 9\n    if num[0] == 'J' or num[0] == 'j':\n        return 10\n    if num[0] == 'K' or num[0] == 'k':\n        return 11\n    if num[0] == 'L' or num[0] == 'l':\n        return 12\n    if num[0] == 'M' or num[0] =='m':\n        return 13\n    if num[0] == 'N' or num[0] == 'n':\n        return 14\n    if num[0] == 'O' or num[0] == 'o':\n        return 15\n    if num[0] == 'P' or num[0] == 'p':\n        return 16\n    if num[0] == 'Q' or num[0] == 'q':\n        return 17\n    if num[0] == 'R' or num[0] == 'r':\n        return 18\n    if num[0] == 'S' or num[0] =='s':\n        return 19\n    if num["
    }
  ]
}