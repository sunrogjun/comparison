{
  "timestamp": "2025-09-14T16:16:29.638596",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 19,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "numbers = numbers.split()\n    return''.join(sorted(numbers))\n\nif __name__ == '__main__':\n    print(sort_numbers('three one five'))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return sorted(numbers.split(' '))\n\n\ndef sort_words(words: List[str]) -> List[str]:\n    \"\"\" Input is a space-delimited string of words, with no spaces.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with words sorted from smallest to largest\n    >>> sort_words(['zero', 'one', 'three', 'five'])\n    ['three', 'four', 'one', 'five', 'zero']\n    \"\"\"\n    return sorted(words)\n\n\ndef sort_nums_and_words(numbers: str, words: List[str]) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine' and words, with no spaces.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest, and words sorted from smallest to largest\n    >>> sort_nums_and_words('three one five', ['zero', 'one', 'three', 'five'])\n    'one three five zero'\n    \"\"\"\n    return''.join(sorted(numbers.split(' ') + words))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "sorted_numbers = sorted(numbers.split())\n    return \" \".join(sorted_numbers)\n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Valid words are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with words sorted from smallest to largest\n    >>> sort_words('three one five')\n    'one three five'\n    \"\"\"\n    sorted_words = sorted(words.split())\n    return \" \".join(sorted_words)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"three one five\"))\n    print(sort_words(\"three one five\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\ndef solve(numbers: str) -> List[str]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return a list of strings where each string is the sum of the first two digits of the input\n    >>> solve('three one five')\n    ['3', '6']\n    \"\"\"\n    return [str(sum(int(i) for i in str(n))) for n in numbers.split()]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return''.join(str(n) for n in numbers)\n\n\ndef sort_letters(letters: str) -> str:\n    \"\"\" Input is a space-delimited string of letters from 'a' to 'z'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with letters sorted from smallest to largest\n    >>> sort_letters('j k h i l')\n    'i j k h l'\n    \"\"\"\n    letters = letters.split()\n    letters = [chr(n) for n in letters]\n    letters.sort()\n    return''.join(letters)\n\n\ndef main() -> None:\n    \"\"\" Sort the numbers in the string, and then sort the letters in the string\n    >>> sort_numbers('three one five')\n    'one three five'\n    >>> sort_letters('j k h i l')\n    'i j k h l'\n    \"\"\"\n    print(sort_numbers('three one five'))\n    print(sort_letters('j k h i l'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "numbers = numbers.split()\n    sorted_numbers = []\n    for number in numbers:\n        if number == 'zero':\n            sorted_numbers.append(0)\n        elif number == 'one':\n            sorted_numbers.append(1)\n        elif number == 'two':\n            sorted_numbers.append(2)\n        elif number == 'three':\n            sorted_numbers.append(3)\n        elif number == 'four':\n            sorted_numbers.append(4)\n        elif number == 'five':\n            sorted_numbers.append(5)\n        elif number =='six':\n            sorted_numbers.append(6)\n        elif number =='seven':\n            sorted_numbers.append(7)\n        elif number == 'eight':\n            sorted_numbers.append(8)\n        elif number == 'nine':\n            sorted_numbers.append(9)\n        else:\n            raise ValueError('Invalid number: {}'.format(number))\n    return''.join(sorted_numbers)\n\n\nif __name__ == '__main__':\n    with open('data/inputs/test_inputs.txt', 'r') as f:\n        inputs = f.read().split('\\n')\n\n    for input_ in inputs:\n        if input_:\n            print(sort_numbers(input_))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "numbers = numbers.split()\n    sorted_numbers = []\n    for num in numbers:\n        if num not in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']:\n            raise ValueError(\"Invalid number '{}'\".format(num))\n        sorted_numbers.append(num)\n    sorted_numbers = sorted(sorted_numbers)\n    return''.join(sorted_numbers)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# TODO: Use a list of numbers to sort it and do a reverse sort\n    # TODO: Use a dictionary to map the input to the corresponding number\n    # TODO: Use a regular expression to check for numbers\n    sorted_numbers = []\n    for number in numbers.split():\n        try:\n            # Try to convert the number to an integer\n            int_number = int(number)\n            sorted_numbers.append(int_number)\n        except ValueError:\n            # If we can't convert the number, then it's not a valid number\n            print('ERROR: Invalid number:', number)\n            return 'ERROR'\n    sorted_numbers.sort()\n    sorted_numbers.reverse()\n    return''.join(str(n) for n in sorted_numbers)\n\nif __name__ == '__main__':\n    # Test the program\n    print('Test:', sort_numbers('three one five'))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "numbers = numbers.split(' ')\n    return''.join(sorted(numbers))\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_numbers('zero one two three') == 'one three two zero', \"Example\"\n    assert sort_numbers('nine one two three four') == 'one two three four nine', \"Example\"\n    assert sort_numbers('seven six five four') == 'five four six seven', \"Example\"\n    assert sort_numbers('four five six seven') =='six seven five four', \"Example\"\n    assert sort_numbers('one two three') == 'one two three one', \"Example\"\n    assert sort_numbers('four five six') =='six four five', \"Example\""
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return sorted(numbers.split(' '))\n\n\ndef get_input(prompt: str) -> str:\n    \"\"\" Prompt the user for input and return it.\n    >>> get_input('Enter number: ')\n    '1'\n    \"\"\"\n    return input(prompt)\n\n\ndef get_input_list(prompt: str) -> List[str]:\n    \"\"\" Prompt the user for input and return it as a list of strings.\n    >>> get_input_list('Enter numbers separated by a space: ')\n    ['1', '2', '3']\n    \"\"\"\n    return [x.strip() for x in input(prompt).split(' ')]\n\n\ndef get_int_input(prompt: str) -> int:\n    \"\"\" Prompt the user for input and return it as an integer.\n    >>> get_int_input('Enter an integer: ')\n    1\n    \"\"\"\n    return int(get_input(prompt))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "numbers = numbers.split()\n    return''.join([str(i) for i in sorted(numbers)])\n\n\ndef main() -> None:\n    \"\"\"\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    assert sort_numbers('three one five') == 'one three five'\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "numbers_list = [int(n) for n in numbers.split()]\n    return''.join([str(n) for n in sorted(numbers_list)])\n\n\ndef sort_numbers_by_value(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return a list of sorted values from smallest to largest\n    >>> sort_numbers_by_value('three one five')\n    [3, 1, 5, 5, 1, 5, 5, 1, 5, 3]\n    \"\"\"\n    numbers_list = [int(n) for n in numbers.split()]\n    return [n for n in numbers_list if n!= 0]\n\n\ndef sort_numbers_by_frequency(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return a list of sorted values from smallest to largest\n    >>> sort_numbers_by_frequency('three one five')\n    [3, 1, 5, 5, 1, 5, 5, 1, 5, 3]\n    \"\"\"\n    numbers_list = [int(n) for n in numbers.split()]\n    return [n for n in numbers_list if n!= 0]\n\n\ndef sort_numbers_by_frequency_and_value(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return a list of sorted values from smallest to largest\n    >>> sort_numbers_by_frequency_and_value('three one five')\n    [3, 1, 5, 5, 1"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "sorted_numbers = []\n    for number in numbers.split():\n        sorted_numbers.append(int(number))\n    sorted_numbers.sort()\n    return''.join(str(num) for num in sorted_numbers)\n\n\ndef sort_numbers_with_key(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest, using the key\n    >>> sort_numbers_with_key('three one five')\n    'one three five'\n    \"\"\"\n    sorted_numbers = []\n    for number in numbers.split():\n        sorted_numbers.append(int(number))\n    sorted_numbers.sort(key=lambda x: x)\n    return''.join(str(num) for num in sorted_numbers)\n\n\ndef sort_numbers_with_key_reverse(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest, using the key, reversed\n    >>> sort_numbers_with_key_reverse('three one five')\n    'one three five'\n    \"\"\"\n    sorted_numbers = []\n    for number in numbers.split():\n        sorted_numbers.append(int(number))\n    sorted_numbers.sort(key=lambda x: x, reverse=True)\n    return''.join(str(num) for num in sorted_numbers)\n\n\ndef sort_numbers_with_key_reverse_with_key(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', '"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return sorted(numbers.split(), reverse=True)\n\n\ndef sort_numbers_and_decimals(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Also allow a decimal point.\n    Return the string with numbers sorted from smallest to largest and the decimal point sorted from largest to smallest\n    >>> sort_numbers_and_decimals('three one five.1')\n    'one three five 1'\n    \"\"\"\n    return sort_numbers(numbers) + \".\" + sort_numbers(numbers)[-1]\n\n\ndef sort_numbers_and_decimals_with_thousands(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Also allow a decimal point.\n    Also allow a thousand separator.\n    Return the string with numbers sorted from smallest to largest and the decimal point sorted from largest to smallest\n    >>> sort_numbers_and_decimals_with_thousands('three one five.1,000')\n    'one three five 1000'\n    \"\"\"\n    return sort_numbers_and_decimals(numbers) + \",\" + sort_numbers_and_decimals(numbers)[-1]\n\n\ndef sort_numbers_with_thousand_separator(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Also allow a decimal point.\n    Also allow a thousand separator.\n    Return the string with numbers sorted from smallest to largest and the decimal point sorted from largest to smallest\n    >>> sort_numbers_with_th"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "sorted_numbers = []\n    for number in numbers.split():\n        try:\n            number = int(number)\n        except ValueError:\n            continue\n        sorted_numbers.append(number)\n    return''.join(sorted(sorted_numbers))\n\n\ndef sort_numbers_and_print(numbers: str) -> None:\n    print(sort_numbers(numbers))\n\n\nif __name__ == '__main__':\n    sort_numbers_and_print('three one five')"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return''.join(sorted(numbers.split()))\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    if len(numbers) == 0:\n        return ''\n    if len(numbers) == 1:\n        return numbers\n    return''.join(sorted(numbers.split()))\n\ndef sort_numbers_recursive_with_index(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive_with_index('three one five')\n    'one three five'\n    \"\"\"\n    if len(numbers) == 0:\n        return ''\n    if len(numbers) == 1:\n        return numbers\n    return''.join(sorted(numbers.split()))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    print(sort_numbers('three one five'))\n    print(sort_numbers_recursive('three one five'))\n    print(sort_numbers_recursive_with_index('three one five'))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\ndef sort_integers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of integers.\n    Return the string with integers sorted from smallest to largest\n    >>> sort_integers('three one five')\n    'one three five'\n    \"\"\"\n    return''.join(sorted(numbers.split()))\n\n\ndef sort_strings(strings: str) -> str:\n    \"\"\" Input is a space-delimited string of strings.\n    Return the string with strings sorted from smallest to largest\n    >>> sort_strings('three one five')\n    'three one five'\n    \"\"\"\n    return''.join(sorted(strings.split()))\n\n\ndef sort_lists(lists: List[str]) -> List[str]:\n    \"\"\" Input is a list of space-delimited strings.\n    Return the list with strings sorted from smallest to largest\n    >>> sort_lists(['three one five', 'one two three'])\n    ['one two three', 'one three five']\n    \"\"\"\n    return [sorted(list(item.split())) for item in lists]\n\n\ndef sort_dictionaries(dictionaries: List[Dict[str, str]]) -> List[Dict[str, str]]:\n    \"\"\" Input is a list of dictionaries.\n    Return the list with dictionaries sorted from smallest to largest\n    >>> sort_dictionaries([{'three one five': 'three two one'}, {'one two three': 'one three five'}])\n    [{'one two three': 'one three five'}, {'three one five': 'three two one'}]\n    \"\"\"\n    return [sorted(list(item.items())) for item in dictionaries]\n\n\ndef sort_tuples(tuples: List[Tuple[str, str]]) -> List[Tuple[str, str]]:\n    \"\"\" Input is a list of tuples.\n    Return the list with tuples sorted from smallest to largest\n    >>> sort_tuples([('three one five', 'three two one'), ('one two three', 'one three five')])\n    [('one two three', 'one three five'),"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "sorted_numbers = []\n    for n in numbers.split():\n        try:\n            n = int(n)\n            sorted_numbers.append(n)\n        except ValueError:\n            pass\n    return''.join(sorted(sorted_numbers))\n\n\ndef sort_numbers_input(input_string: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_input('three one five')\n    'one three five'\n    \"\"\"\n    sorted_numbers = []\n    for n in input_string.split():\n        try:\n            n = int(n)\n            sorted_numbers.append(n)\n        except ValueError:\n            pass\n    return''.join(sorted(sorted_numbers))\n\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    if not numbers:\n        return ''\n    if len(numbers) == 1:\n        return str(numbers[0])\n    else:\n        return sort_numbers_recursive(numbers[1:]) +'' + str(numbers[0])\n\n\ndef sort_numbers_recursive_input(input_string: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\ndef sort_numbers_2(numbers: List[str]) -> str:\n    \"\"\" Input is a list of numbers from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2([2, 0, 1, 3, 4, 5, 6, 7, 8, 9])\n    'zero one two three four five six seven eight nine'\n    \"\"\"\n    return''.join(sorted(numbers))\n\n\nif __name__ == '__main__':\n    print(sort_numbers('three one five'))\n    print(sort_numbers_2([2, 0, 1, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return''.join([x for x in numbers.split() if x.isdigit()])\n\n\ndef sort_numbers_with_prefix(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_with_prefix('three one five')\n    'zero three five one'\n    \"\"\"\n    return''.join([x for x in numbers.split() if x.isdigit()])\n\n\ndef sort_numbers_with_suffix(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_with_suffix('three one five')\n    'one three five zero'\n    \"\"\"\n    return''.join([x for x in numbers.split() if x.isdigit()])\n\n\ndef sort_numbers_with_prefix_and_suffix(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_with_prefix_and_suffix('three one five')\n    'one three five zero'\n    \"\"\"\n    return''.join([x for x in numbers.split() if x.isdigit()])\n\n\ndef sort_numbers_with_prefix_and_suffix_with_delimiter(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'."
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "numbers = [int(n) for n in numbers.split(' ')]\n    sorted_numbers = sorted(numbers)\n    return''.join(str(n) for n in sorted_numbers)\n\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    numbers = [int(n) for n in numbers.split(' ')]\n    if not numbers:\n        return ''\n    left = numbers[0]\n    right = numbers[-1]\n    if left > right:\n        left, right = right, left\n    if left == right:\n        return str(left)\n    else:\n        return sort_numbers_recursive(str(left) +'' + str(right))\n\n\ndef sort_numbers_iterative(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_iterative('three one five')\n    'one three five'\n    \"\"\"\n    numbers = [int(n) for n in numbers.split(' ')]\n    if not numbers:\n        return ''\n    while True:\n        new_numbers = []\n        for number in numbers:\n            new_numbers.append(number + 1)\n        if new_numbers == numbers:\n            return str(new_numbers[0])\n        else:\n            numbers = new_numbers\n            break\n\n\ndef sort_numbers_recursive_iterative(numbers: str) -> str:\n    \"\"\" Input is a space"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "numbers = numbers.split(' ')\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers =''.join(str(x) for x in numbers)\n    return numbers\n\n\nif __name__ == '__main__':\n    numbers = sort_numbers(input())\n    print(numbers)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return''.join(map(str, numbers))\n\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome, False otherwise\n    >>> is_palindrome(5)\n    False\n    >>> is_palindrome(5)\n    False\n    >>> is_palindrome(5)\n    False\n    >>> is_palindrome(5)\n    False\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(5)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef is_palindrome_list(numbers: List[int]) -> bool:\n    \"\"\" Return True if the list is a palindrome, False otherwise\n    >>> is_palindrome_list([5, 4, 3, 2, 1])\n    False\n    >>> is_palindrome_list([5, 4, 3, 2, 1])\n    False\n    >>> is_palindrome_list([5, 4, 3, 2, 1])\n    False\n    >>> is_palindrome_list([5, 4, 3, 2, 1])\n    False\n    >>> is_palindrome_list([5, 4, 3, 2, 1])\n    False\n    >>> is_palindrome_list([5, 4, 3, 2, 1])\n    False\n    >>> is_palindrome_list([5, 4, 3, 2, 1])\n    False\n    >>> is_palindrome_list([5, 4, 3, 2, 1])\n    True\n    >>> is_palindrome_list([5, 4, 3, 2, 1])"
    },
    {
      "rank": 24,
      "score": 9.982086980445024,
      "candidate": "return \" \".join(sorted(numbers.split()))\n\n\ndef sort_numbers_list(numbers: List[str]) -> List[str]:\n    \"\"\" Input is a list of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the list with numbers sorted from smallest to largest\n    >>> sort_numbers_list(['three', 'one', 'five'])\n    ['one', 'three', 'five']\n    \"\"\"\n    return [number for number in numbers if number in sort_numbers_list_set]\n\n\ndef sort_numbers_list_set(numbers: Set[str]) -> Set[str]:\n    \"\"\" Input is a list of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the set with numbers sorted from smallest to largest\n    >>> sort_numbers_list_set(['three', 'one', 'five'])\n    set(['one', 'three', 'five'])\n    \"\"\"\n    return set(sort_numbers_list(numbers))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.94217585880588,
      "candidate": "numbers = numbers.split()\n    numbers = [int(num) for num in numbers]\n    numbers.sort()\n    numbers = ''.join(map(str, numbers))\n    return numbers\n\n\ndef main() -> None:\n    \"\"\"\n    Add your code below this function.\n    Do not write to stdout.\n    \"\"\"\n    numbers = sort_numbers('three one five')\n    print(numbers)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 9.930867849414408,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\ndef sort_numbers_by_length(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_by_length('three one five')\n    'one three five'\n    \"\"\"\n    return''.join(sorted(numbers.split(), key=len))\n\n\ndef sort_numbers_by_value(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_by_value('three one five')\n    'one three five'\n    \"\"\"\n    return''.join(sorted(numbers.split(), key=int))\n\n\nif __name__ == '__main__':\n    assert sort_numbers('three one five') == 'one three five'\n    assert sort_numbers_by_length('three one five') == 'one three five'\n    assert sort_numbers_by_value('three one five') == 'one three five'"
    },
    {
      "rank": 27,
      "score": 9.907170511668092,
      "candidate": "numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return''.join(str(number) for number in numbers)\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    if not numbers:\n        return ''\n    # Recursive case\n    if len(numbers) == 1:\n        return numbers[0] + sort_numbers_recursive(numbers[0])\n    # Iterative case\n    return sort_numbers_recursive(numbers[0]) + sort_numbers_recursive(numbers[1:])\n\ndef sort_numbers_recursive_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive_2('three one five')\n    'one three five'\n    \"\"\"\n    if not numbers:\n        return ''\n    # Recursive case\n    if len(numbers) == 1:\n        return numbers[0] + sort_numbers_recursive_2(numbers[0])\n    # Iterative case\n    return sort_numbers_recursive_2(numbers[0]) + sort_numbers_recursive_2(numbers[1:])\n\ndef sort_numbers_recursive_3(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', '"
    },
    {
      "rank": 28,
      "score": 9.890164056081243,
      "candidate": "return''.join(sorted([int(num) for num in numbers.split()]))\n\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    if len(numbers) == 0:\n        return ''\n\n    # sort left half of numbers\n    left_numbers = sort_numbers(numbers[:-1])\n    left_numbers = sort_numbers_recursive(left_numbers)\n\n    # sort right half of numbers\n    right_numbers = sort_numbers(numbers[1:])\n    right_numbers = sort_numbers_recursive(right_numbers)\n\n    return left_numbers +'' + right_numbers"
    },
    {
      "rank": 29,
      "score": 9.887111849756732,
      "candidate": "return''.join(sorted(numbers.split()))\n\n# https://stackoverflow.com/questions/27671565/how-to-sort-a-list-of-numbers-in-python\ndef sort_numbers_in_reverse(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_in_reverse('three one five')\n    'one three five'\n    \"\"\"\n    return''.join(sorted(numbers.split(), reverse=True))\n\n# https://stackoverflow.com/questions/32784865/sort-numbers-with-python-using-list-comprehension\ndef sort_numbers_using_list_comprehension(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_using_list_comprehension('three one five')\n    'one three five'\n    \"\"\"\n    return''.join([numbers[i] for i in range(len(numbers)) if numbers[i] > '0'])\n\n# https://stackoverflow.com/questions/17856908/sort-a-list-of-numbers-in-python-with-python-3-7\ndef sort_numbers_using_list_comprehension_3_7(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return"
    },
    {
      "rank": 30,
      "score": 9.88293152152541,
      "candidate": "return sorted(numbers.split())\n\n\ndef sum_numbers(numbers: str) -> int:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the sum of all the numbers in the string\n    >>> sum_numbers('three one five')\n    9\n    \"\"\"\n    return sum(int(n) for n in numbers.split())\n\n\ndef average_numbers(numbers: str) -> float:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the average of all the numbers in the string\n    >>> average_numbers('three one five')\n    1.5\n    \"\"\"\n    return float(sum_numbers(numbers)) / len(numbers.split())\n\n\ndef median_numbers(numbers: str) -> float:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the median of all the numbers in the string\n    >>> median_numbers('three one five')\n    3.5\n    \"\"\"\n    numbers = sort_numbers(numbers)\n    n = len(numbers)\n    if n % 2 == 1:\n        return numbers[n/2]\n    else:\n        return (numbers[n/2 - 1] + numbers[n/2]) / 2\n\n\ndef largest_numbers(numbers: str) -> int:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the largest of"
    },
    {
      "rank": 31,
      "score": 9.854153125103362,
      "candidate": "# sort by the first character, then the second\n    return''.join(sorted(numbers.split(' '), key=lambda x: x[0]))\n\n\ndef sort_numbers_with_comparator(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_with_comparator('three one five')\n    'one three five'\n    \"\"\"\n    # sort by the first character, then the second\n    return''.join(sorted(numbers.split(' '), key=lambda x: (x[0], x[1])))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.850496324767066,
      "candidate": "numbers = numbers.split()\n    sorted_numbers = []\n    for number in numbers:\n        if number in [str(i) for i in range(0,10)]:\n            sorted_numbers.append(number)\n    return''.join(sorted_numbers)\n\n\ndef solve(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> solve('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    sorted_numbers = []\n    for number in numbers:\n        if number in [str(i) for i in range(0,10)]:\n            sorted_numbers.append(number)\n    return''.join(sorted_numbers)\n\n\nif __name__ == '__main__':\n    print(sort_numbers('three one five'))\n    print(solve('three one five'))"
    },
    {
      "rank": 33,
      "score": 9.849448152205355,
      "candidate": "return''.join(sorted(list(numbers)))\n\n\ndef sort_numbers_and_add_commas(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest and commas added between them\n    >>> sort_numbers_and_add_commas('three one five')\n    '3,1,5'\n    \"\"\"\n    return ','.join(sorted(list(numbers)))\n\n\ndef sort_numbers_and_add_spaces(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest and commas added between them\n    >>> sort_numbers_and_add_spaces('three one five')\n   '  3   1   5  '\n    \"\"\"\n    return''.join(sorted(list(numbers)))\n\n\ndef sort_numbers_and_add_spaces_and_commas(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest and commas added between them\n    >>> sort_numbers_and_add_spaces_and_commas('three one five')\n   '  3,1,5  '\n    \"\"\"\n    return''.join(sorted(list(numbers)))\n\n\ndef sort_numbers_and_add_spaces_and_commas_and_new_lines(numbers: str) -> str:\n    \"\"\" Input is a space-delimited"
    },
    {
      "rank": 34,
      "score": 9.845393812074393,
      "candidate": "if numbers:\n        numbers = numbers.split(' ')\n        return''.join(sorted(numbers))\n    else:\n        return ''\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_numbers('one two three four five six seven eight nine') == 'one three five nine eight two four seven six', \"Example\"\n    assert sort_numbers('two three four five six seven eight nine') == 'two three nine seven eight five four', \"Example\"\n    assert sort_numbers('three four five six seven eight nine') == 'three five nine eight seven four six', \"Example\"\n    assert sort_numbers('one two three four five six seven eight nine') == 'one three five nine seven two four six', \"Example\"\n    assert sort_numbers('one two three four five six seven eight nine') == 'one three nine seven eight five six', \"Example\"\n    assert sort_numbers('one two three four five six seven eight nine') == 'one three five nine seven eight six', \"Example\""
    },
    {
      "rank": 35,
      "score": 9.769680614520107,
      "candidate": "numbers = numbers.split()\n    return''.join(sorted(numbers))\n\n\ndef main():\n    print(sort_numbers(input()))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 9.768291153593768,
      "candidate": "numbers = numbers.split()\n    numbers = [int(i) for i in numbers]\n    sorted_numbers = sorted(numbers)\n    return''.join([str(i) for i in sorted_numbers])\n\n\ndef sort_numbers_in_list(numbers: List[int]) -> str:\n    \"\"\" Input is a list of numbers from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the list with numbers sorted from smallest to largest\n    >>> sort_numbers_in_list([3, 2, 1])\n    [1, 2, 3]\n    \"\"\"\n    sorted_numbers = [int(i) for i in numbers]\n    sorted_numbers = sorted(sorted_numbers)\n    return''.join([str(i) for i in sorted_numbers])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.760412881077356,
      "candidate": "return sorted(numbers.split(' '))\n\n\ndef sort_numbers_by_int(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_by_int('three one five')\n    'one three five'\n    \"\"\"\n    return sorted(map(int, numbers.split(' ')))\n\n\ndef sort_numbers_by_str(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_by_str('three one five')\n    'one three five'\n    \"\"\"\n    return sorted(map(str, numbers.split(' ')))\n\n\ndef sort_numbers_by_int_and_str(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_by_int_and_str('three one five')\n    'one three five'\n    \"\"\"\n    return sorted(map(lambda x: int(x), numbers.split(' ')), key=lambda x: x)\n\n\ndef sort_numbers_by_int_and_str_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'."
    },
    {
      "rank": 38,
      "score": 9.740864890863175,
      "candidate": "sorted_numbers = []\n    for number in numbers.split():\n        try:\n            sorted_numbers.append(int(number))\n        except ValueError:\n            sorted_numbers.append(number)\n    return''.join(sorted_numbers)\n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words from 'a' to 'z'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with words sorted from smallest to largest\n    >>> sort_words('c a')\n    'a c'\n    \"\"\"\n    sorted_words = []\n    for word in words.split():\n        try:\n            sorted_words.append(word.lower())\n        except AttributeError:\n            sorted_words.append(word)\n    return''.join(sorted_words)\n\n\ndef sort_words_with_counts(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words from 'a' to 'z'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with words sorted from smallest to largest and with counts\n    >>> sort_words_with_counts('c a')\n    'a (2) c'\n    \"\"\"\n    sorted_words = []\n    counts = []\n    for word in words.split():\n        try:\n            sorted_words.append(word.lower())\n            counts.append(1)\n        except AttributeError:\n            sorted_words.append(word"
    },
    {
      "rank": 39,
      "score": 9.718856235379514,
      "candidate": "# TODO: implement\n    pass\n\n\ndef sort_numbers_with_lists(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_with_lists('three one five')\n    'one three five'\n    \"\"\"\n    # TODO: implement\n    pass\n\n\ndef sort_numbers_with_lists_using_lambda(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_with_lists_using_lambda('three one five')\n    'one three five'\n    \"\"\"\n    # TODO: implement\n    pass\n\n\ndef sort_numbers_with_lists_using_lambda_and_lists(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_with_lists_using_lambda_and_lists('three one five')\n    'one three five'\n    \"\"\"\n    # TODO: implement\n    pass\n\n\ndef sort_numbers_with_lists_using_lambda_and_lists_with_lists(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers"
    },
    {
      "rank": 40,
      "score": 9.699680655040597,
      "candidate": "return sorted(numbers.split(' '))\n\n\ndef get_numbers(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return a list of the numbers in the string\n    >>> get_numbers('three one five')\n    [3, 1, 5]\n    \"\"\"\n    return [int(n) for n in numbers.split(' ')]\n\n\ndef get_first_n(numbers: str, n: int) -> int:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the first n numberals in the string\n    >>> get_first_n('three one five', 2)\n    3\n    \"\"\"\n    return numbers[:n]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.661538999847021,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names from 'john' to 'tom'.\n    Valid choices are 'john', 'james', 'johannes', 'johnson' and 'tom'.\n    Return the string with names sorted from smallest to largest\n    >>> sort_names('john james tom')\n    'john tom james'\n    \"\"\"\n    return''.join(sorted(names.split()))\n\n\ndef sort_numbers_and_names(numbers: str, names: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals and names from 'zero' to 'nine' and 'john' to 'tom'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'\n    and 'john', 'james', 'johannes', 'johnson' and 'tom'.\n    Return the string with names sorted from smallest to largest, then numbers sorted from smallest to largest\n    >>> sort_numbers_and_names('three one five', 'john james tom')\n    'john james tom three one five'\n    \"\"\"\n    return''.join(sorted(names.split())) +''.join(sorted(numbers.split()))\n\n\ndef sort_numbers_and_names_with_quotes(numbers: str, names: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals and names from 'zero' to 'nine' and 'john' to 'tom'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'\n    and 'john', 'james', 'johannes', 'johnson' and 'tom'.\n    Return the string with names sorted from smallest to largest, then numbers sorted from smallest to largest\n    with quotes around names and numbers\n    >>> sort_numbers_and_names_with_quotes('three one five', 'john james tom')\n    '\"john james"
    },
    {
      "rank": 42,
      "score": 9.58039123838868,
      "candidate": "numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)\n\n\ndef get_numbers(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the list of numbers sorted from smallest to largest\n    >>> get_numbers('three one five')\n    [3, 1, 5]\n    \"\"\"\n    numbers = numbers.split(' ')\n    numbers.sort()\n    return numbers\n\n\ndef get_numbers_range(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the list of numbers sorted from smallest to largest\n    >>> get_numbers_range('three one five')\n    [3, 1, 5]\n    \"\"\"\n    numbers = get_numbers(numbers)\n    return range(0, len(numbers))"
    },
    {
      "rank": 43,
      "score": 9.493584439832787,
      "candidate": "numbers = numbers.split()\n    return''.join([str(int(n)) for n in numbers])\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.47114453552205,
      "candidate": "numbers = numbers.split(' ')\n    return''.join(sorted(numbers))\n\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    if len(numbers) == 0:\n        return numbers\n\n    if len(numbers) == 1:\n        return sort_numbers_recursive(numbers[0])\n\n    return sort_numbers_recursive(sort_numbers_recursive(numbers[0]))\n\n\ndef sort_numbers_recursive_with_stack(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive_with_stack('three one five')\n    'one three five'\n    \"\"\"\n    if len(numbers) == 0:\n        return numbers\n\n    if len(numbers) == 1:\n        return sort_numbers_recursive_with_stack(numbers[0])\n\n    stack = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] == '0':\n            stack.append(numbers[i])\n        else:\n            stack.append(sort_numbers_recursive_with_stack(numbers[i]))\n\n    return''.join(stack)\n\n\ndef sort_numbers_recursive_with_stack_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are '"
    },
    {
      "rank": 45,
      "score": 9.42450321128885,
      "candidate": "numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.389578175014488,
      "candidate": "numbers_list = [int(n) for n in numbers.split()]\n    numbers_list.sort()\n    return''.join(str(n) for n in numbers_list)\n\n\ndef sort_numbers_with_comparator(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_with_comparator('three one five')\n    'one three five'\n    \"\"\"\n    numbers_list = [int(n) for n in numbers.split()]\n    numbers_list.sort(key=lambda x: x, reverse=True)\n    return''.join(str(n) for n in numbers_list)\n\n\ndef sort_numbers_with_comparator_reverse(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_with_comparator_reverse('three one five')\n    'one three five'\n    \"\"\"\n    numbers_list = [int(n) for n in numbers.split()]\n    numbers_list.sort(key=lambda x: x, reverse=True)\n    return''.join(str(n) for n in numbers_list)\n\n\ndef sort_numbers_with_comparator_reverse_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers"
    },
    {
      "rank": 47,
      "score": 9.335906975550785,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\ndef sort_numbers_back(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_back('one three five')\n    'three one five'\n    \"\"\"\n    return''.join(sorted(numbers.split(), reverse=True))\n\n\ndef sort_numbers_back_to_front(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_back_to_front('one three five')\n    'three one five'\n    \"\"\"\n    return''.join(sorted(numbers.split(), reverse=False))\n\n\ndef sort_numbers_back_to_front_back(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_back_to_front_back('one three five')\n    'three one five'\n    \"\"\"\n    return''.join(sorted(numbers.split(), reverse=True, reverse=True))\n\n\ndef sort_numbers_back_to_front_back_to_front(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', '"
    },
    {
      "rank": 48,
      "score": 9.137541083743484,
      "candidate": "numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]\n    return''.join(numbers)\n\n\ndef sort_numbers_iterative(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_iterative('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]\n    return''.join(numbers)\n\n\ndef sort_numbers_recursive_iterative(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive_iterative('three one five')"
    },
    {
      "rank": 49,
      "score": 9.118479922318633,
      "candidate": "numbers = numbers.split(' ')\n    sorted_numbers = []\n    for number in numbers:\n        if number.isdigit():\n            sorted_numbers.append(int(number))\n        else:\n            sorted_numbers.append(number)\n    sorted_numbers.sort()\n    return''.join(str(i) for i in sorted_numbers)\n\n\ndef sort_numbers_reverse(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_reverse('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split(' ')\n    sorted_numbers = []\n    for number in numbers:\n        if number.isdigit():\n            sorted_numbers.append(int(number))\n        else:\n            sorted_numbers.append(number)\n    sorted_numbers.sort()\n    sorted_numbers.reverse()\n    return''.join(str(i) for i in sorted_numbers)\n\n\ndef sort_numbers_with_reverse_order(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_with_reverse_order('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split(' ')\n    sorted_numbers = []\n    for number in numbers:\n        if number.isdigit():\n            sorted_numbers.append(int(number))\n        else:\n            sorted_numbers.append(number)\n    sorted_numbers.sort()\n    s"
    },
    {
      "rank": 50,
      "score": 9.070301906770048,
      "candidate": "return sorted(numbers.split())\n\n\ndef find_numbers(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the list of all numbers in the string\n    >>> find_numbers('three one five')\n    [3, 1, 5]\n    \"\"\"\n    return [int(n) for n in numbers.split()]\n\n\ndef main():\n    print(sort_numbers('three one five'))\n    print(find_numbers('three one five'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 9.059659071030833,
      "candidate": "numbers = numbers.split()\n    sorted_numbers = []\n    for number in numbers:\n        if number in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']:\n            sorted_numbers.append(number)\n    return''.join(sorted_numbers)\n\n\nif __name__ == '__main__':\n    assert sort_numbers('three one five') == 'one three five','sort_numbers() failed'"
    },
    {
      "rank": 52,
      "score": 9.053656387007655,
      "candidate": "return''.join(sorted(numbers.split()))\n\nif __name__ == \"__main__\":\n    numbers = input().strip()\n    print(sort_numbers(numbers))"
    },
    {
      "rank": 53,
      "score": 9.0433598776711,
      "candidate": "return \" \".join(sorted(numbers.split()))\n\n\ndef sort_characters(characters: str) -> str:\n    \"\"\" Input is a space-delimited string of characters from 'a' to 'z'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with characters sorted from smallest to largest\n    >>> sort_characters('j o')\n    'o j'\n    \"\"\"\n    return \" \".join(sorted(characters.split()))\n\n\ndef sort_characters_and_numbers(characters: str, numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of characters and numbers from 'a' to 'z' and '0' to '9'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0' to '9'.\n    Return the string with characters and numbers sorted from smallest to largest\n    >>> sort_characters_and_numbers('a c', '2 3 4 5 6 7 8 9')\n    'a c 2 3 4 5 6 7 8 9'\n    \"\"\"\n    return \" \".join(sorted(sorted(characters.split()) + sorted(numbers.split())))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.030703952013067,
      "candidate": "return sorted(numbers.split(' '))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.020164938060113,
      "candidate": "numbers = numbers.split()\n    return \" \".join(sorted(numbers))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.006215542699554,
      "candidate": "return ''.join(sorted(numbers.split()))\n\ndef main():\n    print(sort_numbers(\"three one five\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.986940455872773,
      "candidate": "sorted_numbers = []\n    for number in numbers.split(' '):\n        if number == 'zero':\n            sorted_numbers.append(0)\n        elif number == 'one':\n            sorted_numbers.append(1)\n        elif number == 'two':\n            sorted_numbers.append(2)\n        elif number == 'three':\n            sorted_numbers.append(3)\n        elif number == 'four':\n            sorted_numbers.append(4)\n        elif number == 'five':\n            sorted_numbers.append(5)\n        elif number =='six':\n            sorted_numbers.append(6)\n        elif number =='seven':\n            sorted_numbers.append(7)\n        elif number == 'eight':\n            sorted_numbers.append(8)\n        elif number == 'nine':\n            sorted_numbers.append(9)\n        else:\n            raise ValueError('Invalid number:'+ number)\n    sorted_numbers.sort()\n    return''.join(str(i) for i in sorted_numbers)\n\n\nif __name__ == '__main__':\n    print(sort_numbers('zero one two three four five six seven eight nine'))"
    },
    {
      "rank": 58,
      "score": 8.867293334932011,
      "candidate": "sorted_numbers = sorted(numbers.split(' '))\n    return''.join(sorted_numbers)\n\n\nif __name__ == '__main__':\n    print(sort_numbers('one two three four five six seven eight nine'))"
    },
    {
      "rank": 59,
      "score": 8.834662495293388,
      "candidate": "numbers = numbers.split()\n    return''.join([n for n in numbers if n.isdigit()])\n\n\nif __name__ == '__main__':\n    print(sort_numbers('zero one two three four five six seven eight nine'))"
    },
    {
      "rank": 60,
      "score": 8.810605291525274,
      "candidate": "numbers = numbers.split()\n    return \" \".join(sorted(numbers))\n\n\ndef main() -> None:\n    \"\"\"\n    \"\"\"\n    print(sort_numbers(\"three one five\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.77346240928572,
      "candidate": "return''.join(sorted(numbers.split(' ')))\n\n\ndef main():\n    # Complete this function\n    numbers = 'zero one two three four five six seven eight nine'\n    print(sort_numbers(numbers))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.773205446194535,
      "candidate": "numbers = numbers.split()\n    return \" \".join([str(int(n)) for n in sorted(numbers)])\n\n\ndef test_sort_numbers():\n    assert sort_numbers('three one five') == 'one three five'\n    assert sort_numbers('six one two') == 'one two six'\n    assert sort_numbers('three two one') == 'two three one'\n    assert sort_numbers('three four one') == 'one three four'\n    assert sort_numbers('zero three one') == 'one zero three'\n    assert sort_numbers('three zero one') == 'zero three one'\n    assert sort_numbers('three two zero') == 'zero two three'\n    assert sort_numbers('three four zero') == 'zero three four'\n    assert sort_numbers('three zero four') == 'zero three zero four'\n    assert sort_numbers('three two zero') == 'zero two three'\n    assert sort_numbers('three four two') == 'two three four'\n    assert sort_numbers('zero three two') == 'two zero three'\n    assert sort_numbers('three four zero') == 'zero three four'\n    assert sort_numbers('zero three four') == 'zero three zero four'\n    assert sort_numbers('three zero four') == 'zero three zero four'\n    assert sort_numbers('three four zero') == 'zero three four'\n    assert sort_numbers('zero three four') == 'zero three zero four'\n    assert sort_numbers('three zero four') == 'zero three zero four'\n    assert sort_numbers('three two zero') == 'zero two three'\n    assert sort_numbers('three four two') == 'two three four'\n    assert sort_numbers('zero three two') == 'two zero three'\n    assert sort_numbers('three four zero') == 'zero three four'\n    assert sort_numbers('zero three four') == 'zero three zero four'\n    assert sort_numbers('three zero four') == 'zero three zero four'\n    assert sort_numbers('three two zero') == 'zero two three'\n    assert sort_numbers('three four two') == 'two"
    },
    {
      "rank": 63,
      "score": 8.769454773402124,
      "candidate": "# Split the string into a list of numbers\n    numbers_list = [int(x) for x in numbers.split(' ')]\n    # Sort the list\n    sorted_numbers = sorted(numbers_list)\n    # Join the sorted list back into a single string\n    return''.join(str(x) for x in sorted_numbers)\n\n\ndef sort_letters(letters: str) -> str:\n    \"\"\" Input is a space-delimited string of letters from 'a' to 'z'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    Return the string with letters sorted from smallest to largest\n    >>> sort_letters('c ae')\n    'ae c'\n    \"\"\"\n    # Split the string into a list of letters\n    letters_list = [x for x in letters.split(' ')]\n    # Sort the list\n    sorted_letters = sorted(letters_list)\n    # Join the sorted list back into a single string\n    return''.join(str(x) for x in sorted_letters)\n\n\ndef main():\n    # Test case 1:\n    assert sort_numbers('one zero nine') == 'one zero nine'\n    assert sort_letters('a b c') == 'c a b'\n\n    # Test case 2:\n    assert sort_numbers('one two three') == 'three one two'\n    assert sort_letters('a b c') == 'c b a'\n\n    # Test case 3:\n    assert sort_numbers('one two three four') == 'four three two one'\n    assert sort_letters('a b c d') == 'd c b a'\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.751418336105608,
      "candidate": "numbers = numbers.split()\n    return \" \".join(sorted(numbers))\n\n\nif __name__ == \"__main__\":\n    numbers = \"three one five\".split()\n    print(sort_numbers(numbers))"
    },
    {
      "rank": 65,
      "score": 8.73983107644261,
      "candidate": "return''.join(sorted(numbers.split()))\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_numbers(\"zero one two three four five six seven eight nine\") == \"one two three four five six seven eight nine\", \"Sorting\"\n    assert sort_numbers(\"zero two three four five six seven eight nine\") == \"two three four five six seven eight nine\", \"Sorting\"\n    assert sort_numbers(\"zero one three four five six seven eight nine\") == \"one three four five six seven eight nine\", \"Sorting\"\n    assert sort_numbers(\"zero one two four five six seven eight nine\") == \"one two four five six seven eight nine\", \"Sorting\"\n    assert sort_numbers(\"zero one two three four five six seven eight nine\") == \"one two three four five six seven eight nine\", \"Sorting\""
    },
    {
      "rank": 66,
      "score": 8.689114959980792,
      "candidate": "numbers = numbers.split(' ')\n    sorted_numbers = []\n    for number in numbers:\n        if number == 'zero':\n            sorted_numbers.append(0)\n        elif number == 'one':\n            sorted_numbers.append(1)\n        elif number == 'two':\n            sorted_numbers.append(2)\n        elif number == 'three':\n            sorted_numbers.append(3)\n        elif number == 'four':\n            sorted_numbers.append(4)\n        elif number == 'five':\n            sorted_numbers.append(5)\n        elif number =='six':\n            sorted_numbers.append(6)\n        elif number =='seven':\n            sorted_numbers.append(7)\n        elif number == 'eight':\n            sorted_numbers.append(8)\n        elif number == 'nine':\n            sorted_numbers.append(9)\n    return''.join(sorted(sorted_numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.594723651782713,
      "candidate": "numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n\ndef sort_numbers_in_reverse(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_in_reverse('three one five')\n    'five one three'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort()\n    numbers.reverse()\n    return''.join(numbers)\n\ndef sort_numbers_in_reverse_by_case(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_in_reverse_by_case('three one five')\n    'five one three'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=str.lower)\n    numbers.reverse()\n    return''.join(numbers)\n\nif __name__ == '__main__':\n    print(sort_numbers('three one five'))\n    print(sort_numbers_in_reverse('three one five'))\n    print(sort_numbers_in_reverse_by_case('three one five'))"
    },
    {
      "rank": 68,
      "score": 8.589098854463499,
      "candidate": "return''.join([str(int(x)) for x in numbers.split()])\n\n\ndef sort_numbers_and_print(numbers: str) -> None:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_and_print('three one five')\n    >>> sort_numbers_and_print('three one five')\n    >>> sort_numbers_and_print('three one five')\n    \"\"\"\n    print(sort_numbers(numbers))\n\n\ndef sort_numbers_and_print_2(numbers: str) -> None:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_and_print_2('three one five')\n    >>> sort_numbers_and_print_2('three one five')\n    >>> sort_numbers_and_print_2('three one five')\n    \"\"\"\n    print(sorted(numbers.split()))\n\n\ndef main():\n    # tests\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')\n    sort_numbers_and_print('three one five')"
    },
    {
      "rank": 69,
      "score": 8.58900268664781,
      "candidate": "# Convert the list to a string\n    numbers_str = ''.join(numbers)\n\n    # Split the string into a list of numberals\n    numbers_list = numbers_str.split()\n\n    # Sort the list of numberals\n    sorted_numbers = sorted(numbers_list)\n\n    # Join the sorted list back into a string\n    return''.join(sorted_numbers)\n\n\ndef main() -> None:\n    print(sort_numbers('zero two three four five six seven eight nine'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 70,
      "score": 8.58189176027183,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\nif __name__ == '__main__':\n    print(sort_numbers('three one five'))"
    },
    {
      "rank": 71,
      "score": 8.512991756920433,
      "candidate": "numbers_list = [int(number) for number in numbers.split()]\n    sorted_list = sorted(numbers_list)\n    return''.join([str(n) for n in sorted_list])\n\n\ndef main() -> None:\n    \"\"\"\n    >>> main()\n    'zero three one five two six four seven eight nine'\n    \"\"\"\n    numbers = input()\n    print(sort_numbers(numbers))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 8.471455726319615,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\nif __name__ == '__main__':\n    print(sort_numbers('three one five'))"
    },
    {
      "rank": 73,
      "score": 8.43904555454927,
      "candidate": "numbers = numbers.split(' ')\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    numbers =''.join(str(n) for n in numbers)\n    return numbers\n\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split(' ')\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    numbers =''.join(str(n) for n in numbers)\n    return numbers\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers('three one five'))\n    print(sort_numbers_recursive('three one five'))"
    },
    {
      "rank": 74,
      "score": 8.41564039581231,
      "candidate": "sorted_numbers = []\n    for number in numbers.split():\n        if number.isdigit():\n            sorted_numbers.append(int(number))\n    sorted_numbers.sort()\n    return''.join(str(n) for n in sorted_numbers)\n\n\nif __name__ == '__main__':\n    assert sort_numbers('three one five') == 'one three five'"
    },
    {
      "rank": 75,
      "score": 8.35078309455511,
      "candidate": "numbers = numbers.split()\n    return''.join(sorted(numbers))\n\n\nif __name__ == '__main__':\n    numbers = sort_numbers(input())\n    print(numbers)"
    },
    {
      "rank": 76,
      "score": 8.290411532277918,
      "candidate": "return sorted(numbers.split())\n\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    if not numbers:\n        return ''\n\n    n = int(numbers[0])\n    if n == 0:\n        return sort_numbers_recursive(numbers[1:])\n    else:\n        return sort_numbers_recursive(numbers[1:]) +'' + str(n)\n\n\ndef sort_numbers_recursive_list(numbers: List[str]) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive_list(['three one five'])\n    'one three five'\n    \"\"\"\n    if not numbers:\n        return ''\n\n    n = int(numbers[0])\n    if n == 0:\n        return sort_numbers_recursive_list(numbers[1:])\n    else:\n        return sort_numbers_recursive_list(numbers[1:]) +'' + str(n)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.258152543016342,
      "candidate": "return sorted(numbers.split(), key=int, reverse=True)\n\n\ndef sort_numbers_iter(numbers: List[str]) -> List[str]:\n    \"\"\" Input is a list of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the list of numbers sorted from smallest to largest\n    >>> sort_numbers_iter(['three', 'one', 'five'])\n    ['five', 'one', 'three']\n    \"\"\"\n    return sorted(numbers, key=int, reverse=True)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.256654690070464,
      "candidate": "# Convert the string to a list of ints\n    numbers = [int(n) for n in numbers.split()]\n\n    # Sort the list\n    numbers.sort()\n\n    # Convert the sorted list back to a string\n    return \" \".join(str(n) for n in numbers)\n\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    # Convert the string to a list of ints\n    numbers = [int(n) for n in numbers.split()]\n\n    # Sort the list\n    numbers.sort()\n\n    # Convert the sorted list back to a string\n    return \" \".join(str(n) for n in numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.24374162701063,
      "candidate": "numbers = numbers.split(' ')\n    sorted_numbers = []\n    for number in numbers:\n        if number == 'zero':\n            sorted_numbers.append('zero')\n        elif number == 'one':\n            sorted_numbers.append('one')\n        elif number == 'two':\n            sorted_numbers.append('two')\n        elif number == 'three':\n            sorted_numbers.append('three')\n        elif number == 'four':\n            sorted_numbers.append('four')\n        elif number == 'five':\n            sorted_numbers.append('five')\n        elif number =='six':\n            sorted_numbers.append('six')\n        elif number =='seven':\n            sorted_numbers.append('seven')\n        elif number == 'eight':\n            sorted_numbers.append('eight')\n        elif number == 'nine':\n            sorted_numbers.append('nine')\n        else:\n            sorted_numbers.append(number)\n    return''.join(sorted_numbers)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.232540362937629,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\ndef sort_numbers_v2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_v2('three one five')\n    'one three five'\n    \"\"\"\n    return''.join(sorted(numbers.split(), key=int))\n\n\nif __name__ == '__main__':\n    assert sort_numbers('zero two three one four') == 'two three one four zero'\n    assert sort_numbers_v2('zero two three one four') == 'one three two four zero'\n    assert sort_numbers('zero two three one four') == 'two three one four zero'\n    assert sort_numbers_v2('zero two three one four') == 'one three two four zero'\n    assert sort_numbers('zero two three one four') == 'two three one four zero'"
    },
    {
      "rank": 81,
      "score": 8.226691354634372,
      "candidate": "sorted_numbers = []\n    for number in numbers.split():\n        if number.isnumeric():\n            sorted_numbers.append(int(number))\n    sorted_numbers.sort()\n    return''.join(str(number) for number in sorted_numbers)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.203761799552685,
      "candidate": "# TODO: replace this with a list of strings\n    # TODO: add a test case\n    sorted_numbers = ''\n    for number in numbers.split():\n        sorted_numbers += str(int(number) - 1) +''\n    return sorted_numbers.rstrip()\n\n\nif __name__ == '__main__':\n    # TODO: add a test case\n    print(sort_numbers('three one five'))"
    },
    {
      "rank": 83,
      "score": 8.186396542602395,
      "candidate": "sorted_numbers = list(numbers)\n    sorted_numbers.sort()\n    return''.join(sorted_numbers)\n\n\nif __name__ == '__main__':\n    print(sort_numbers('three one five'))"
    },
    {
      "rank": 84,
      "score": 8.156506761086561,
      "candidate": "return ''.join(sorted(numbers.split()))\n\n\ndef sort_integers(integers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of integers from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return a list of integers sorted from smallest to largest\n    >>> sort_integers('three one five')\n    [3, 1, 5, 0, 6, 9]\n    \"\"\"\n    return list(map(int, sort_numbers(integers).split()))"
    },
    {
      "rank": 85,
      "score": 8.12104700328717,
      "candidate": "numbers = numbers.strip().split(' ')\n    numbers = [n for n in numbers if n]\n    numbers.sort()\n    return''.join(numbers)\n\n\ndef main():\n    numbers = sort_numbers('three one five')\n    print(numbers)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 8.08123481423596,
      "candidate": "return''.join(sorted(numbers.split()))\n\n\ndef sort_numbers_by_length(numbers: List[str]) -> List[str]:\n    \"\"\" Input is a list of numbers from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the list of numbers sorted by length from shortest to longest\n    >>> sort_numbers_by_length(['three', 'one', 'five','six'])\n    ['three', 'one', 'five','six']\n    \"\"\"\n    return sorted(numbers, key=len)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers('one three five'))\n    print(sort_numbers_by_length(['three', 'one', 'five','six']))"
    },
    {
      "rank": 87,
      "score": 8.001910454842033,
      "candidate": "return ''.join(sorted(numbers.split(' ')))\n\n\ndef main():\n    \"\"\"\n    >>> sort_numbers('three one five')\n    'one three five'\n    >>> sort_numbers('one three five')\n    'one three five'\n    >>> sort_numbers('three one five zero')\n    'one three five zero'\n    >>> sort_numbers('three one five zero zero')\n    'one three five zero'\n    >>> sort_numbers('three one five zero zero zero')\n    'one three five zero'\n    >>> sort_numbers('three one five zero zero zero zero')\n    'one three five zero'\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n    doctest.testfile(\"README.md\", optionflags=doctest.ELLIPSIS)"
    },
    {
      "rank": 88,
      "score": 7.965961794812176,
      "candidate": "numbers = numbers.split()\n    numbers = list(map(int, numbers))\n    sorted_numbers = sorted(numbers)\n    return''.join(map(str, sorted_numbers))\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_numbers('one three one') == 'one three one', \"Basic\"\n    assert sort_numbers('one one one') == 'one one one', \"Basic\"\n    assert sort_numbers('one two three') == 'three one two', \"Basic\"\n    assert sort_numbers('three two one') == 'one three two', \"Basic\"\n    assert sort_numbers('three two three') == 'three two three', \"Basic\"\n    assert sort_numbers('two three one') == 'one two three', \"Basic\"\n    assert sort_numbers('two three two') == 'two three two', \"Basic\"\n    assert sort_numbers('one three three') == 'three one three', \"Basic\"\n    assert sort_numbers('two three one') == 'one two three', \"Basic\"\n    assert sort_numbers('one two two') == 'two one two', \"Basic\"\n    assert sort_numbers('one two three') == 'three one two', \"Basic\"\n    assert sort_numbers('two two one') == 'one two two', \"Basic\"\n    assert sort_numbers('two two two') == 'two two two', \"Basic\"\n    assert sort_numbers('one one one') == 'one one one', \"Basic\"\n    assert sort_numbers('one one two') == 'two one one', \"Basic\"\n    assert sort_numbers('one two one') == 'one two one', \"Basic\"\n    assert sort_numbers('one two two') == 'two one two', \"Basic\""
    },
    {
      "rank": 89,
      "score": 7.879522963910328,
      "candidate": "numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n\n\ndef sort_numbers_recursive(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive('three one five')\n    'one three five'\n    \"\"\"\n    if not numbers:\n        return ''\n    first = numbers.pop(0)\n    if numbers:\n        return sort_numbers_recursive(numbers) + first\n    else:\n        return first\n\n\ndef sort_numbers_recursive_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_recursive_2('three one five')\n    'one three five'\n    \"\"\"\n    if not numbers:\n        return ''\n    first = numbers.pop(0)\n    if numbers:\n        return sort_numbers_recursive_2(numbers) + first\n    else:\n        return first\n\n\nif __name__ == '__main__':\n    numbers = 'three one five'\n    print(sort_numbers(numbers))\n    print(sort_numbers_recursive(numbers))\n    print(sort_numbers_recursive_2(numbers))"
    },
    {
      "rank": 90,
      "score": 7.874545169959062,
      "candidate": "numbers = [int(x) for x in numbers.split(' ')]\n    numbers.sort()\n    return''.join([str(x) for x in numbers])\n\n\ndef sort_words(words: List[str]) -> List[str]:\n    \"\"\" Input is a space-delimited string of words from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with words sorted from smallest to largest\n    >>> sort_words(['three', 'one', 'five'])\n    ['one', 'three', 'five']\n    \"\"\"\n    words = [x.strip() for x in words]\n    words.sort()\n    return words"
    },
    {
      "rank": 91,
      "score": 7.853035648297474,
      "candidate": "numbers = numbers.split(' ')\n    numbers = [int(n) for n in numbers]\n    sorted_numbers = sorted(numbers)\n    return''.join(str(n) for n in sorted_numbers)\n\n\nif __name__ == '__main__':\n    assert sort_numbers('three one five') == 'one three five'\n    assert sort_numbers('two one two') == 'one two one'"
    },
    {
      "rank": 92,
      "score": 7.396546402808546,
      "candidate": "numbers = numbers.split()\n    sorted_numbers = sorted(numbers)\n    return''.join(sorted_numbers)\n\n\ndef main():\n    \"\"\" Sample usage of sort_numbers() function \"\"\"\n    print(sort_numbers('three one five'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "sorted_numbers = list()\n    for number in numbers.split():\n        if number.isdigit():\n            sorted_numbers.append(int(number))\n    sorted_numbers = sorted(sorted_numbers)\n    return''.join(map(str, sorted_numbers))\n\n\ndef sort_letters(letters: str) -> str:\n    \"\"\" Input is a space-delimited string of letters from 'a' to 'z'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', and 'z'.\n    Return the string with letters sorted from smallest to largest\n    >>> sort_letters('z a b c d e f g h i j k l m n o p q r s t u v w x y z')\n    'z a b c d e f g h i j k l m n o p q r s t u v w x y z'\n    \"\"\"\n    sorted_letters = list()\n    for letter in letters.split():\n        if letter.isalpha():\n            sorted_letters.append(letter)\n    sorted_letters = sorted(sorted_letters)\n    return''.join(map(str, sorted_letters))\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_numbers(\"three one five\") == \"one three five\", \"sort_numbers\"\n    assert sort_letters(\"z a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"z a b c d e f g h i j k l m n o p q r s t u v w x y z\", \"sort_letters\""
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "sorted_numbers = []\n    for number in numbers.split():\n        if number.isalpha():\n            sorted_numbers.append(number)\n        else:\n            sorted_numbers.append(int(number))\n    return''.join(sorted_numbers)\n\n\ndef sort_numbers_by_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_by_numbers('one three five')\n    'one three five'\n    \"\"\"\n    sorted_numbers = []\n    for number in numbers.split():\n        if number.isalpha():\n            sorted_numbers.append(number)\n        else:\n            sorted_numbers.append(int(number))\n    sorted_numbers.sort()\n    return''.join(sorted_numbers)\n\n\ndef sort_numbers_by_numbers_and_names(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_by_numbers_and_names('one three five')\n    'one three five'\n    \"\"\"\n    sorted_numbers = []\n    for number in numbers.split():\n        if number.isalpha():\n            sorted_numbers.append(number)\n        else:\n            sorted_numbers.append(int(number))\n    sorted_numbers.sort()\n    sorted_numbers.insert(0, sorted_numbers.pop())\n    return''.join(sorted_numbers)\n\n\ndef sort_numbers_by_names(numbers: str) -> str:"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "sorted_numbers = [int(x) for x in numbers.split(' ')]\n    sorted_numbers.sort()\n    return''.join([str(x) for x in sorted_numbers])\n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words from 'a' to 'z'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with words sorted from smallest to largest\n    >>> sort_words('b c d e f g h i j k l m n o p q r s t u v w x y z')\n    'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n    \"\"\"\n    sorted_words = [x.upper() for x in words.split(' ')]\n    sorted_words.sort()\n    return''.join([x for x in sorted_words])\n\n\ndef sort_list(lst: List[str]) -> List[str]:\n    \"\"\" Input is a space-delimited string of numbers from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the list with numbers sorted from smallest to largest\n    >>> sort_list(['three one five', 'three one five', 'three one five'])\n    ['three one five', 'three one five', 'three one five']\n    \"\"\"\n    sorted_list = [int(x) for x in lst]\n    sorted_list.sort()\n    return sorted_list\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_numbers('one two three four five six seven eight nine') == 'eight five"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "numbers = numbers.split()\n    sorted_numbers = []\n    for number in numbers:\n        if number.isdigit():\n            sorted_numbers.append(int(number))\n        else:\n            sorted_numbers.append(number)\n    sorted_numbers.sort()\n    return \" \".join(sorted_numbers)\n\n\ndef sort_alphabet(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of letters from 'a' to 'z'.\n    Valid choices are 'a' through 'z'.\n    Return the string with letters sorted from smallest to largest\n    >>> sort_alphabet('c a d f g h i j k l m n o p q r s t u v w x y z')\n    'a d f i j m n o q r u y w z'\n    \"\"\"\n    numbers = numbers.split()\n    sorted_numbers = []\n    for number in numbers:\n        if number.isalpha():\n            sorted_numbers.append(number.lower())\n        else:\n            sorted_numbers.append(number)\n    sorted_numbers.sort()\n    return \" \".join(sorted_numbers)\n\n\ndef sort_numbers_and_letters(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of letters and numbers from 'a' to 'z'.\n    Valid choices are 'a' through 'z' and 'zero' through 'nine'.\n    Return the string with letters and numbers sorted from smallest to largest\n    >>> sort_numbers_and_letters('a 1 0 3 2 5 4 6 7 8 9 c a d f g h i j k l m n o p q r s t u v w x y z')\n    'a d f i j m n o q r u y w z c a 1 0 3 2 5 4 6 7 8 9'\n    \"\"\"\n    numbers = numbers.split()\n    sorted_numbers = []\n    sorted_letters = []\n    for number in numbers:\n        if number.isdigit():\n            sorted_numbers.append(int(number))\n        elif number.isalpha():"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "numbers = [int(x) for x in numbers.split()]\n    numbers.sort()\n    return \" \".join(str(x) for x in numbers)\n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_words('zero one two three')\n    'zero one two three'\n    \"\"\"\n    words = [x.lower() for x in words.split()]\n    words.sort()\n    return \" \".join(words)\n\n\ndef sort_words_with_numbers(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_words_with_numbers('zero one two three')\n    'zero one two three'\n    \"\"\"\n    words = [x.lower() for x in words.split()]\n    words.sort()\n    return \" \".join(str(x) for x in words)\n\n\ndef sort_words_with_numbers_and_spaces(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_words_with_numbers_and_spaces('zero one two three')\n    'zero one two three'\n    \"\"\"\n    words = [x.lower() for x in words.split()]\n    words.sort()\n    return \" \".join(str(x) for x in words)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"zero one two three\"))\n    print(sort_"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "return sorted(numbers.split(' '), reverse=True)\n\n\ndef sort_numbers_n(n: int) -> List[int]:\n    \"\"\" Input is an integer n.\n    Returns a list of all the numbers 0 to n-1\n    >>> sort_numbers_n(4)\n    [0, 1, 2, 3]\n    \"\"\"\n    return range(0, n)\n\n\ndef sort_numbers_n_2(n: int) -> List[int]:\n    \"\"\" Input is an integer n.\n    Returns a list of all the numbers 0 to n-1\n    >>> sort_numbers_n_2(4)\n    [0, 1, 2, 3]\n    \"\"\"\n    return range(0, n)\n\n\ndef sort_numbers_n_3(n: int) -> List[int]:\n    \"\"\" Input is an integer n.\n    Returns a list of all the numbers 0 to n-1\n    >>> sort_numbers_n_3(4)\n    [0, 1, 2, 3]\n    \"\"\"\n    return range(0, n)\n\n\ndef sort_numbers_n_4(n: int) -> List[int]:\n    \"\"\" Input is an integer n.\n    Returns a list of all the numbers 0 to n-1\n    >>> sort_numbers_n_4(4)\n    [0, 1, 2, 3]\n    \"\"\"\n    return range(0, n)\n\n\ndef sort_numbers_n_5(n: int) -> List[int]:\n    \"\"\" Input is an integer n.\n    Returns a list of all the numbers 0 to n-1\n    >>> sort_numbers_n_5(4)\n    [0, 1, 2, 3]\n    \"\"\"\n    return range(0, n)\n\n\ndef sort_numbers_n_6(n: int) -> List[int]:\n    \"\"\" Input is an integer n.\n    Returns a list of all the numbers 0 to n-1\n    >>> sort_numbers_n_6(4)\n    [0, 1, 2, 3]\n    \"\"\"\n    return range(0, n)\n\n\ndef sort_numbers_n_7(n: int"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "numbers = numbers.split()\n    sorted_numbers = []\n    for number in numbers:\n        if number in ('zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'):\n            sorted_numbers.append(number)\n        else:\n            sorted_numbers.append('')\n    return''.join(sorted_numbers)\n\n\ndef sort_numbers_with_zero(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_with_zero('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    sorted_numbers = []\n    for number in numbers:\n        if number in ('zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'):\n            sorted_numbers.append(number)\n        else:\n            sorted_numbers.append('')\n    return''.join(sorted_numbers)\n\n\ndef sort_numbers_with_zero_and_commas(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_with_zero_and_commas('three one five')\n    'one three, five'\n    \"\"\"\n    numbers = numbers.split()\n    sorted_numbers = []\n    for number in numbers:\n        if number in ('zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'):\n            s"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "numbers = numbers.split(' ')\n    return''.join(sorted(numbers))\n\n\ndef is_sorted(numbers: str) -> bool:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return true if the numbers are sorted, false otherwise\n    >>> is_sorted('three one five')\n    True\n    >>> is_sorted('one two three four five six seven eight nine')\n    True\n    \"\"\"\n    numbers = numbers.split(' ')\n    return numbers == sorted(numbers)\n\n\ndef sort_words(words: List[str]) -> List[str]:\n    \"\"\" Input is a list of words.\n    Each word is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the list of words sorted from smallest to largest\n    >>> sort_words(['three one five', 'two three four five six seven eight nine'])\n    ['one three five', 'two three four five six seven eight nine']\n    \"\"\"\n    return sorted(words)\n\n\ndef is_sorted_words(words: List[str]) -> bool:\n    \"\"\" Input is a list of words.\n    Each word is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return true if the words are sorted, false otherwise\n    >>> is_sorted_words(['three one five', 'two three four five six seven eight nine'])\n    True\n    \"\"\"\n    return words == sort_words(words)"
    }
  ]
}