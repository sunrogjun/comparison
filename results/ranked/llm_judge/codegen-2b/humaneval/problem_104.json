{
  "timestamp": "2025-09-14T16:54:57.404808",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 104,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# This is the same algorithm as in the book \"Algorithms and Data Structures\n    # in C++\" by Cormen et al.\n    result = []\n    for i in x:\n        while i > 0:\n            if i % 10 == 0:\n                result.append(i)\n                i /= 10\n            else:\n                i /= 10\n                result.append(i)\n    return result\n\ndef is_palindrome(x):\n    \"\"\"Return True if x is a palindrome, otherwise False.\n\n    For example:\n    >>> is_palindrome(1)\n    True\n    >>> is_palindrome(123)\n    True\n    >>> is_palindrome(0)\n    False\n    >>> is_palindrome(9)\n    False\n    \"\"\"\n    return str(x) == str(x)[::-1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "digits = [int(x) for x in x]\n    digits.sort()\n    return [x for x in digits if x % 2 == 0]\n\ndef unique_even_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any odd digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_even_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_even_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(x) for x in x]\n    digits.sort()\n    return [x for x in digits if x % 2 == 0]\n\ndef unique_odd_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_odd_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_odd_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(x) for x in x]\n    digits.sort()\n    return [x for x in digits if x % 2!= 0]\n\ndef main():\n    \"\"\"Main function\"\"\"\n    # tests\n    assert unique_digits([1, 15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_even_digits([1, 15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_odd_digits([1, 15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n    assert unique_even_digits([152, 323, 1422, 10]) == []\n    assert unique_odd_digits([152, 323, 1422, 10]) == [10]\n    assert unique_dig"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "digits = []\n    for i in x:\n        for j in range(10):\n            if i % j == 0:\n                break\n            else:\n                digits.append(i % j)\n    return digits\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n    return digits\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n    digits.sort()\n    return digits\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n        else:\n            digits.append(0)\n    return digits\n\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n        else:\n            digits.append(0)\n    return digits\n\n\ndef unique_digits_3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_3([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n        else:\n            digits.append(0)\n    return digits\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return [x for x in range(10) if x not in x[::-1]]\n\n\ndef is_palindrome(x):\n    \"\"\"Given a list x of digits, return True if x is a palindrome, \n    False otherwise.\n\n    For example:\n    >>> is_palindrome([1, 1, 1, 2])\n    True\n    >>> is_palindrome([3, 4, 5])\n    False\n    \"\"\"\n    # Note: This implementation is O(n)\n    return str(x) == str(x[::-1])\n\n\ndef main():\n    import time\n\n    start = time.time()\n    print(unique_digits([15, 33, 1422, 1]))\n    print(is_palindrome([15, 33, 1422, 1]))\n    print(time.time() - start)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "res = []\n    for i in x:\n        if i % 2 == 0:\n            res.append(i)\n    return res\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if not x:\n        return []\n\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        result.append(i)\n\n    return sorted(result)\n\ndef sum_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has the sum of all digits.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> sum_digits([15, 33, 1422, 1])\n    [15, 33, 1422]\n    >>> sum_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    result = []\n    for i in x:\n        sum = 0\n        for j in str(i):\n            sum += int(j)\n        result.append(sum)\n\n    return sorted(result)\n\ndef get_max_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has the sum of all digits.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> get_max_digits([15, 33, 1422, 1])\n    [15, 33, 1422]\n    >>> get_max_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n\n    result = []\n    for i in x:\n        sum = 0\n        for j in str(i):\n            sum += int(j)\n        result.append(sum)\n\n    return sorted(result)[-1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "digits = [int(x) for x in x if int(x) > 0]\n    return sorted(set(digits))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "digits = set()\n    for i in range(1, int(math.sqrt(x)) + 1):\n        for j in range(i, len(x), i):\n            digits.add(x[j])\n    return sorted(list(digits))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return [x for x in x if x % 2 == 0]\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [15, 1, 1422, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(unique_digits(x))\n\ndef is_prime(n):\n    \"\"\"Given a positive integer n, return True if n is a prime number.\n    \n    For example:\n    >>> is_prime(11)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(10)\n    True\n    >>> is_prime(13)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_sorted(n):\n    \"\"\"Given a positive integer n, return True if n is a prime number.\n    \n    For example:\n    >>> is_prime_sorted(11)\n    False\n    >>> is_prime_sorted(7)\n    True\n    >>> is_prime_sorted(10)\n    True\n    >>> is_prime_sorted(13)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    i = 3\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    #assert is_prime(13)\n    #assert is_prime(10)\n    #assert is"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n    return digits\n\n\ndef is_palindrome(x):\n    \"\"\"Given a positive integer x. return true if x is a palindrome.\n    \n    Note: x should be in range [0, 9999].\n    \n    For example:\n    >>> is_palindrome(1422)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(0)\n    False\n    >>> is_palindrome(1)\n    False\n    \"\"\"\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    s = str(x)\n    s = s.replace(\"0\", \"\")\n    return s == s[::-1]\n    \n\ndef main():\n    \"\"\"Main function.\"\"\"\n    print(unique_digits(range(1, 1001)))\n    print(is_palindrome(1422))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "digits = []\n    for x in x:\n        if x % 2 == 0:\n            digits.append(x)\n    digits.sort()\n    return digits\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return [digit for digit in x if digit % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Test 1:\n    assert unique_digits([2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6]\n    assert unique_digits([2, 4, 6, 7, 8]) == [2, 4, 6, 7, 8]\n    assert unique_digits([1, 2, 4, 5, 6]) == [1, 2, 4, 5, 6]\n    assert unique_digits([1, 2, 4, 5, 7]) == [1, 2, 4, 5, 7]\n    assert unique_digits([1, 2, 4, 5, 7, 8]) == [1, 2, 4, 5, 7, 8]\n    assert unique_digits([1, 2, 4, 5, 7, 8, 9]) == [1, 2, 4, 5, 7, 8, 9]\n\n    # Test 2:\n    assert unique_digits([1, 1, 1, 1, 1]) == [1]\n    assert unique_digits([1, 1, 1, 1, 2]) == [1, 2]\n    assert unique_digits([1, 1, 1, 1, 3]) == [1, 2, 3]\n    assert unique_digits([1, 1, 1, 1, 4]) == [1, 2, 3, 4]\n    assert unique_digits([1, 1, 1, 1, 5]) == [1, 2, 3, 4, 5]\n    assert unique_digits([1, 1, 1, 1, 6]) == [1, 2, 3, 4, 5, 6]\n    assert unique_digits([1, 1, 1, 1, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert unique_digits([1, 1, 1, 1, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "y = []\n    for i in x:\n        if i % 10 == 0:\n            y.append(i)\n    return sorted(y)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "digits = [str(x)]\n    for i in range(1, 10):\n        digits.append(str(x % i))\n        x //= i\n    return digits\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [str(x)]\n    for i in range(1, 10):\n        digits.append(str(x % i))\n        x //= i\n    digits.sort()\n    digits.reverse()\n    return digits\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "digits = [int(digit) for digit in str(x)]\n    return digits[digits.index(0):-1]\n\ndef digits_to_string(digits):\n    \"\"\"Given a list of digits, return a string representation of the list.\n\n    >>> digits_to_string([1, 15, 33])\n    '1, 15, 33'\n    >>> digits_to_string([15, 33, 1422, 1])\n    '1, 15, 33'\n    >>> digits_to_string([])\n    ''\n    \"\"\"\n    return ','.join(str(digit) for digit in digits)\n\ndef main():\n    \"\"\"Main function\"\"\"\n    print('Digits to string')\n    digits = [1, 15, 33]\n    print(digits_to_string(digits))\n    print('Unique digits')\n    print(unique_digits(digits))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "numbers = []\n    for n in x:\n        if n % 2 == 0:\n            numbers.append(n)\n    return sorted(numbers)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return [x for x in x if not any(x % i for i in range(1, 10))]\n\n\ndef test():\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 20,
      "score": 9.994196193362688,
      "candidate": "# TODO: Refactor this function.\n    return [x for x in x if x % 2 == 0]\n\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # TODO: Refactor this function.\n    return [x for x in x if x % 2!= 0]\n\n\ndef digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has an even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> digits_sorted([15, 33, 1422, 1])\n    [15, 33]\n    >>> digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # TODO: Refactor this function.\n    return [x for x in x if x % 2 == 0]\n\n\ndef digits_sorted_reverse(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has an even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> digits_sorted_reverse([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> digits_sorted_reverse([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # TODO: Refactor this function.\n    return [x for x in x if x % 2 == 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.94054635049639,
      "candidate": "return [i for i in x if not any(i % i2 == 0 for i2 in x[1:])]\n\n\ndef find_odds(x):\n    \"\"\"Given a list of positive integers x. return a list of all odds digits\n    in x.\n    \n    For example:\n    >>> find_odds([15, 33, 1422, 1])\n    [15, 33]\n    >>> find_odds([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if any(i % i2 == 0 for i2 in x[1:])]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.90554108822987,
      "candidate": "digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n    return digits\n\ndef digit_sum(x):\n    \"\"\"Given a list of positive integers x. return the sum of all digits.\n\n    For example:\n    >>> digit_sum([15, 33, 1422, 1])\n    22\n    >>> digit_sum([152, 323, 1422, 10])\n    0\n    \"\"\"\n    sum = 0\n    for i in x:\n        sum += i\n    return sum\n\ndef main():\n    \"\"\"The main function.\n    \"\"\"\n    # Create a list of positive integers.\n    n = int(input(\"Please enter a positive integer: \"))\n    x = range(1, n + 1)\n    # Create a sorted list of all digits.\n    digits = unique_digits(x)\n    # Create a sorted list of all digits.\n    sum = digit_sum(digits)\n    print(\"The sum of all digits is:\", sum)\n    # Let's see how many digits are even.\n    even_digits = 0\n    for i in digits:\n        if i % 2 == 0:\n            even_digits += 1\n    print(\"The number of even digits is:\", even_digits)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 9.899321108511852,
      "candidate": "return [x for x in x if x % 2 == 0]\n\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any odd digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if x % 2 == 0]\n\ndef unique_digits3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that doesn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits3([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if x % 2!= 0]\n\n\ndef unique_digits4(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that doesn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits4([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits4([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if x % 2!= 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.871426839299676,
      "candidate": "return sorted([int(d) for d in str(x) if d % 2 == 0])\n\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return sorted(unique_digits(x))\n\n\ndef unique_digits_sorted_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted_2([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_sorted_2([152, 323, 1422, 10])\n    [152, 323]\n    \"\"\"\n    return sorted(unique_digits_sorted(x))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.870525410896606,
      "candidate": "digits = [d for d in x if not (d % 2)]\n    return sorted(digits)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.867038678383977,
      "candidate": "result = []\n    for i in x:\n        if i % 2!= 0:\n            result.append(i)\n    return sorted(result)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.834414619420984,
      "candidate": "n = len(x)\n    if n == 0:\n        return []\n    odd = [i for i in x if i % 2 == 1]\n    even = [i for i in x if i % 2 == 0]\n    if n == 1:\n        return even\n    if n == 2:\n        return odd\n    return unique_digits(even) + unique_digits(odd)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.801925328487291,
      "candidate": "# Sort in decreasing order of x\n    x.sort(reverse=True)\n    # Remove all even numbers\n    digits = [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n    return digits\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.80073039209064,
      "candidate": "return [i for i in x if i % 2 == 0]\n\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(unique_digits(x), reverse=True)\n\n\ndef unique_digits_sorted_reverse(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted_reverse([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted_reverse([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(unique_digits(x), reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.79973620596479,
      "candidate": "sorted_x = sorted(x)\n    sorted_x = [i for i in sorted_x if i % 2 == 1]\n    return sorted_x\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    For example:\n    >>> unique_digits2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if i % 2 == 1]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.78424447125865,
      "candidate": "s = []\n    for i in x:\n        if i % 2 == 0:\n            s.append(i)\n    return sorted(s)\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    s = []\n    for i in x:\n        if i % 2 == 0:\n            s.append(i)\n    return s\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.777143806142332,
      "candidate": "return sorted(set(x) - set(map(int, x)))\n\n\ndef unique_digits_from_a_to_b(a, b):\n    \"\"\"Given two positive integers a and b, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_from_a_to_b(15, 33)\n    [15, 33]\n    >>> unique_digits_from_a_to_b(152, 323)\n    []\n    \"\"\"\n    return sorted(set(x) - set(map(int, x)))\n\n\ndef get_digits_from_a_to_b(a, b):\n    \"\"\"Given two positive integers a and b, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> get_digits_from_a_to_b(15, 33)\n    [15, 33]\n    >>> get_digits_from_a_to_b(152, 323)\n    []\n    \"\"\"\n    return sorted(set(x) - set(map(int, x)))\n\n\ndef get_digits_from_a_to_b_unique(a, b):\n    \"\"\"Given two positive integers a and b, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> get_digits_from_a_to_b_unique(15, 33)\n    [15, 33]\n    >>> get_digits_from_a_to_b_unique(152, 323)\n    []\n    \"\"\"\n    return sorted(set(x) - set(map(int, x)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.765915428454171,
      "candidate": "return [i for i in x if not i % 2]\n\ndef main():\n    \"\"\"\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    >>> unique_digits([15, 33, 1422, 1, 5])\n    [1, 15, 33, 5]\n    >>> unique_digits([152, 323, 1422, 10, 5])\n    [5]\n    >>> unique_digits([152, 323, 1422, 10, 5, 2])\n    [2, 5]\n    >>> unique_digits([152, 323, 1422, 10, 5, 2, 3])\n    [2, 3]\n    >>> unique_digits([152, 323, 1422, 10, 5, 2, 3, 1])\n    [2, 3, 1]\n    >>> unique_digits([152, 323, 1422, 10, 5, 2, 3, 1, 4])\n    [2, 3, 4]\n    >>> unique_digits([152, 323, 1422, 10, 5, 2, 3, 1, 4, 1])\n    [1, 4]\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import sys\n    import doctest\n\n    if not sys.argv[2:]:\n        doctest.testmod()\n    else:\n        sys.argv = sys.argv[:2]\n        doctest.testmod(optionflags=doctest.ELLIPSIS)"
    },
    {
      "rank": 34,
      "score": 9.758216362426381,
      "candidate": "return [i for i in x if not i % 2]\n\n\ndef main():\n    \"\"\"Main program.\"\"\"\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    x = unique_digits(x)\n    print(len(x))\n    for i in x:\n        print(i, end='')\n    print()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 9.741266156741359,
      "candidate": "digits = [int(digit) for digit in str(x)]\n    digits.sort()\n    digits = [digit for digit in digits if digit % 2 == 0]\n    return digits\n\ndef sum_even_digits(x):\n    \"\"\"Given a list of positive integers x. return the sum of all even digits.\n\n    For example:\n    >>> sum_even_digits([15, 33, 1422, 1])\n    42\n    >>> sum_even_digits([152, 323, 1422, 10])\n    0\n    \"\"\"\n    return sum([int(digit) for digit in str(x) if int(digit) % 2 == 0])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.65234775075593,
      "candidate": "if x == None:\n        return []\n    \n    digits = []\n    for i in x:\n        if i % 10 == 0:\n            digits.append(i)\n        else:\n            digits.append(i)\n    return digits\n\ndef main():\n    print unique_digits([15, 33, 1422, 1])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 9.545184300548962,
      "candidate": "# sort the numbers\n    x.sort()\n    # iterate over the sorted list\n    res = []\n    for i in x:\n        # take the digits of i and keep only those that are even\n        # so we have only even digits\n        digits = [int(digit) for digit in str(i)]\n        # remove the even digits\n        digits = [digit for digit in digits if digit % 2 == 0]\n        # add the digits to the result\n        res.extend(digits)\n    # sort the digits\n    res.sort()\n    return res\n\ndef main():\n    \"\"\"Main program.\"\"\"\n    # read the input\n    n = int(input())\n    # sort the numbers\n    nums = sorted(unique_digits(nums))\n    # print the result\n    print(\" \".join(str(num) for num in nums))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 9.428879998973676,
      "candidate": "return [x for x in xrange(1, 10) if not x % x]\n\ndef unique_digits_with_remainder(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a remainder of 1 or more.\n    \n    For example:\n    >>> unique_digits_with_remainder([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_with_remainder([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in xrange(1, 10) if x % x]\n\ndef unique_digits_with_remainder_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a remainder of 1 or more.\n    \n    For example:\n    >>> unique_digits_with_remainder_sorted([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_with_remainder_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(unique_digits_with_remainder(x))\n\ndef unique_digits_with_remainder_sorted_reverse(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a remainder of 1 or more.\n    \n    For example:\n    >>> unique_digits_with_remainder_sorted_reverse([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_with_remainder_sorted_reverse([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(unique_digits_with_remainder_sorted(x), reverse=True)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.392709408425825,
      "candidate": "return [x for x in xrange(10) if x not in set(map(int, str(x))) and x!= 0]\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return [x for x in xrange(10) if x not in set(map(int, str(x))) and x!= 0]\n\ndef unique_digits_3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_3([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return [x for x in xrange(10) if x not in set(map(int, str(x))) and x!= 0]\n\ndef unique_digits_4(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_4([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_4([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return [x for x in xrange(10) if x not in set(map(int, str(x))) and x!= 0]\n\ndef unique_digits_5(x):\n    \"\"\"Given a list of"
    },
    {
      "rank": 40,
      "score": 9.364235544142007,
      "candidate": "return [d for d in x if not any(i % 10 == 0 for i in d)]\n\n\ndef is_prime(n):\n    \"\"\"Return True if n is a prime number.\n\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    True\n    >>> is_prime(19)\n    False\n    >>> is_prime(20)\n    True\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    True\n    >>> is_prime(23)\n    False\n    >>> is_prime(24)\n    True\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    True\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    True\n    >>> is_prime(29)\n    False\n    >>> is_prime(30)\n    True\n    >>> is_prime(31)\n    False\n    >>> is_prime(32)\n    True\n    >>> is_prime(33)\n    False\n    >>> is_prime(34)\n    True\n    >>> is_prime(35)\n    False\n    >>> is_prime(36)\n    True\n    >>> is_prime(37)\n    False\n    >>> is_prime(38)\n    True\n    >>> is_prime(39)\n    False\n    >>> is_prime(40)\n    True"
    },
    {
      "rank": 41,
      "score": 9.241892733194025,
      "candidate": "y = []\n    for i in x:\n        if i % 2 == 0:\n            y.append(i)\n    return sorted(y)\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        import doctest\n        doctest.testmod()\n    else:\n        s =''.join(sys.argv[1:])\n        print unique_digits(eval(s))"
    },
    {
      "rank": 42,
      "score": 9.177289494797147,
      "candidate": "if len(x) == 0:\n        return []\n    # Find the unique digits\n    result = []\n    for i in x:\n        if i % 10 == 0:\n            result.append(i)\n    # Sort\n    result.sort()\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.145345366721616,
      "candidate": "return [i for i in range(10) if not any(i % j for j in x)]\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    [152, 323]\n    \"\"\"\n    return sorted(unique_digits(x))\n\ndef sum_evens(x):\n    \"\"\"Given a list of positive integers x. return a list of all \n    elements that is sum of even digits.\n\n    For example:\n    >>> sum_evens([3, 4, 6, 5, 8, 9, 7, 2, 1])\n    [3, 6, 9]\n    >>> sum_evens([2, 3, 4, 6, 7, 8])\n    [2, 6, 7, 8]\n    \"\"\"\n    return [i for i in range(10) if i % 2 == 0 and i % 10 == 0]\n\ndef sum_evens_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that is sum of even digits.\n\n    For example:\n    >>> sum_evens_sorted([3, 4, 6, 5, 8, 9, 7, 2, 1])\n    [3, 6, 9]\n    >>> sum_evens_sorted([2, 3, 4, 6, 7, 8])\n    [2, 6, 7, 8]\n    \"\"\"\n    return sorted(sum_evens(x))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.444444444444445,
      "candidate": "return sorted(set(x), key=lambda x: int(x) % 2)\n\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    _test()"
    },
    {
      "rank": 45,
      "score": 8.444444444444445,
      "candidate": "n = len(x)\n    digits = [int(d) for d in str(x[0])]\n    # return empty list if there are no digits\n    if not digits:\n        return []\n    # find all even digits\n    even_digits = [digits[i] for i in range(n) if digits[i] % 2 == 0]\n    # return all digits that aren't even digits\n    return [d for d in digits if d not in even_digits]"
    },
    {
      "rank": 46,
      "score": 8.444444444444445,
      "candidate": "if not x:\n        return []\n    res = []\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            res.append(x[i])\n    return res\n\nif __name__ == '__main__':\n    # Test cases\n    print('unique_digits([15, 33, 1422, 1]) ->', unique_digits([15, 33, 1422, 1]))\n    print('unique_digits([152, 323, 1422, 10]) ->', unique_digits([152, 323, 1422, 10]))\n    print('unique_digits([15, 33, 1422, 10]) ->', unique_digits([15, 33, 1422, 10]))\n    print('unique_digits([15, 33, 1422, 10]) ->', unique_digits([15, 33, 1422, 10]))"
    },
    {
      "rank": 47,
      "score": 8.444444444444445,
      "candidate": "s = list(str(x))\n    s.sort()\n    return [int(i) for i in s if i % 2 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.444444444444445,
      "candidate": "digits = [int(i) for i in str(x)]\n    return [i for i in digits if i % 2 == 0]"
    },
    {
      "rank": 49,
      "score": 8.444444444444445,
      "candidate": "def is_even(x):\n        return not (x % 2)\n    \n    return [x for x in x if is_even(x) and not (x % 10)]\n\ndef unique_evens(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has an even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_evens([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_evens([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if x % 2 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.444444444444445,
      "candidate": "res = []\n    for i in x:\n        if i % 2 == 0:\n            res.append(i)\n    return res"
    },
    {
      "rank": 51,
      "score": 8.444444444444445,
      "candidate": "return [x for x in xrange(10) if x not in xrange(10, x+2)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.444444444444445,
      "candidate": "return [digit for digit in x if digit % 2 == 0]\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [15, 33, 1422, 1]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(unique_digits(x))\n\ndef main():\n    \"\"\"Main function for unit tests.\"\"\"\n    assert unique_digits([1, 2, 3]) == [1, 2, 3]\n    assert unique_digits([1, 3, 2]) == [1, 3, 2]\n    assert unique_digits([1, 3, 2, 5]) == [1, 3, 2, 5]\n    assert unique_digits([1, 3, 2, 5]) == [1, 3, 2, 5]\n    assert unique_digits([2, 3, 4, 5]) == [2, 3, 4, 5]\n    assert unique_digits([2, 3, 4, 5]) == [2, 3, 4, 5]\n    assert unique_digits([2, 3, 4, 5]) == [2, 3, 4, 5]\n    assert unique_digits([1, 2, 3, 5]) == [1, 2, 3, 5]\n    assert unique_digits([2, 3, 4, 5]) == [2, 3, 4, 5]\n    assert unique_digits([2, 3, 4, 5]) == [2, 3, 4, 5]\n    assert unique_digits([2, 3, 4, 5]) == [2, 3, 4, 5]\n    assert unique_digits([2, 3, 4, 5]) == [2, 3, 4, 5]\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.444444444444445,
      "candidate": "return [x for x in xrange(10) if not any(x % i == 0 for i in xrange(10))]\n\n\nif __name__ == '__main__':\n    print unique_digits([15, 33, 1422, 1])"
    },
    {
      "rank": 54,
      "score": 8.444444444444445,
      "candidate": "digits = [int(i) for i in x]\n    # Remove all even digits\n    digits = [i for i in digits if i % 2!= 0]\n    # Sort digits\n    digits.sort()\n    return digits\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.444444444444445,
      "candidate": "return [x for x in x if x % 2 == 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 3.710645766978326,
      "candidate": "return sorted([int(x) for x in str(x) if int(x) % 2 == 0])\n\n\ndef unique_digits_in_row(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that doesn't any even digit in a row.\n\n    For example:\n    >>> unique_digits_in_row([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_in_row([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([int(x) for x in str(x) if int(x) % 2 == 0 and int(x) % 10 == 0])\n\n\ndef unique_digits_in_col(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that doesn't any even digit in a column.\n\n    For example:\n    >>> unique_digits_in_col([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_in_col([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([int(x) for x in str(x) if int(x) % 2 == 0 and int(x) % 10 == 0])\n\n\ndef unique_digits_in_grid(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that doesn't any even digit in a grid.\n\n    For example:\n    >>> unique_digits_in_grid([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_in_grid([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([int(x) for x in str(x) if int(x) % 2 == 0 and int(x) % 9 == 0])\n\n\ndef unique_digits_in_grid_from_row_col(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that doesn't any even digit in a grid.\n\n    For example:\n    >>> unique_digits"
    },
    {
      "rank": 57,
      "score": 3.6853634353836116,
      "candidate": "result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)\n\ndef main():\n    # Test Cases\n    test_cases = [\n        ([2, 1, 5, 4, 3], [1, 2, 3, 4, 5]),\n        ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]),\n        ([2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6]),\n        ([1, 1, 1, 1, 1, 1], [1]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),\n        ([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,"
    },
    {
      "rank": 58,
      "score": 3.6595419460146994,
      "candidate": "# sort x by decreasing length\n    x.sort(reverse=True)\n    \n    # get only even digits\n    return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n\n\ndef unique_digits_array(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_array([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_array([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # sort x by decreasing length\n    x.sort(reverse=True)\n    \n    # get only even digits\n    return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n\n\ndef unique_digits_reversed(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_reversed([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_reversed([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # sort x by decreasing length\n    x.sort()\n    \n    # get only even digits\n    return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n\n\ndef unique_digits_reversed_array(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_reversed_array([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_reversed_array([152"
    },
    {
      "rank": 59,
      "score": 3.475705001798512,
      "candidate": "digits = list(map(int, str(x)))\n    result = []\n    for i in range(len(digits)):\n        if digits[i] % 2 == 0:\n            result.append(digits[i])\n    return sorted(result)\n\ndef unique_digits_in_range(start, end):\n    \"\"\"Given a list of positive integers start and end return a sorted list of \n    all elements that hasn't any even digit between start and end.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_in_range(1, 5)\n    [1, 3, 4]\n    >>> unique_digits_in_range(1, 5)\n    []\n    \"\"\"\n    digits = list(map(int, str(start)))\n    result = []\n    for i in range(len(digits)):\n        if digits[i] < end and digits[i] % 2 == 0:\n            result.append(digits[i])\n    return sorted(result)\n\ndef unique_digits_in_range_2(start, end):\n    \"\"\"Given a list of positive integers start and end return a sorted list of \n    all elements that hasn't any even digit between start and end.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_in_range_2(1, 5)\n    [1, 3, 4]\n    >>> unique_digits_in_range_2(1, 5)\n    []\n    \"\"\"\n    digits = list(map(int, str(start)))\n    result = []\n    for i in range(len(digits)):\n        if digits[i] >= end and digits[i] % 2 == 0:\n            result.append(digits[i])\n    return sorted(result)\n\ndef unique_digits_in_range_3(start, end):\n    \"\"\"Given a list of positive integers start and end return a sorted list of \n    all elements that hasn't any even digit between start and end.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For"
    },
    {
      "rank": 60,
      "score": 3.4190760536022893,
      "candidate": "return sorted(set(map(int, x)))\n\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return sorted(set(x), key=lambda x: x // 10)\n\n\ndef unique_digits_sorted_max(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted_max([15, 33, 1422, 1])\n    [15, 33, 1422]\n    >>> unique_digits_sorted_max([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return sorted(set(x), key=lambda x: x // 10, reverse=True)\n\n\ndef is_palindrome(x):\n    \"\"\"Given a positive integer x. return True if x is a palindrome. Otherwise \n    return False.\n    \n    For example:\n    >>> is_palindrome(12)\n    True\n    >>> is_palindrome(3)\n    True\n    >>> is_palindrome(1)\n    False\n    \"\"\"\n    if x <= 0:\n        return False\n    if x % 10 == 0:\n        return True\n    return is_palindrome(x // 10)\n\n\ndef is_palindrome_sorted(x):\n    \"\"\"Given a positive integer x. return True if x is a palindrome. Otherwise \n    return False.\n    \n    For example:\n    >>> is_palindrome_sorted(12)\n    True\n    >>> is_palindrome_sorted(3"
    },
    {
      "rank": 61,
      "score": 3.411930952965933,
      "candidate": "return sorted(filter(lambda x: x % 10 == 0, x))\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return sorted(filter(lambda x: x % 10 == 0, x))\n\ndef unique_digits_sorted_reverse(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted_reverse([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted_reverse([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return sorted(filter(lambda x: x % 10 == 0, x), reverse=True)\n\ndef unique_digits_reverse_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_reverse_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_reverse_sorted([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return sorted(filter(lambda x: x % 10 == 0, x), reverse=True)\n\ndef unique_digits_reverse_sorted_reverse(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit."
    },
    {
      "rank": 62,
      "score": 3.369856126968851,
      "candidate": "return [i for i in x if not i % 2]\n\ndef unique_digits_and_odds(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_and_odds([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_and_odds([152, 323, 1422, 10])\n    [10, 1422, 15, 152, 323]\n    \"\"\"\n    return [i for i in x if not i % 2]\n\ndef sum_evens(x):\n    \"\"\"Given a list of positive integers x. return a list of all elements\n    that has an even sum.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> sum_evens([15, 33, 1422, 1])\n    [15, 33, 1422]\n    >>> sum_evens([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return [i for i in x if i % 2 == 0]\n\ndef sum_odds(x):\n    \"\"\"Given a list of positive integers x. return a list of all elements\n    that has an odd sum.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> sum_odds([15, 33, 1422, 1])\n    [15, 33, 1422]\n    >>> sum_odds([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return [i for i in x if i % 2!= 0]\n\ndef sum_evens_and_odds(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has an even sum.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> sum_evens_and_odds([15, 33, 1422, 1])\n    [15"
    },
    {
      "rank": 63,
      "score": 3.3656366200773893,
      "candidate": "digits = [int(d) for d in str(x)]\n    result = []\n    for d in digits:\n        if d % 2 == 0:\n            result.append(d)\n    return sorted(result)\n\n\ndef main():\n    \"\"\"Main function for testing\"\"\"\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(len(unique_digits(n)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 3.345345628118809,
      "candidate": "s = [x]\n    for i in range(1, len(x)):\n        if x[i] % 2 == 0:\n            x[i] += x[i - 1]\n        else:\n            s.append(x[i])\n    return s\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    s = [x]\n    for i in range(1, len(x)):\n        if x[i] % 2 == 0:\n            x[i] += x[i - 1]\n        else:\n            s.append(x[i])\n    return s\n\ndef is_prime(x):\n    \"\"\"Given a positive integer x. return True if x is a prime number.\n    \n    For example:\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(17)\n    True\n    \"\"\"\n    if x == 2 or x == 3:\n        return True\n    elif x < 2:\n        return False\n    elif x % 2 == 0:\n        return False\n    for i in range(3, int(x**0.5) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_prime_sorted(x):\n    \"\"\"Given a positive integer x. return True if x is a prime number.\n    \n    For example:\n    >>> is_prime_sorted(3)\n    True\n    >>> is_prime_sorted(5)\n    True\n    >>> is_prime_sorted(7)\n    False\n    >>> is_prime_sorted(17)\n    True\n    \"\"\""
    },
    {
      "rank": 65,
      "score": 3.3323099609979345,
      "candidate": "# First make sure x is sorted\n    x = sorted(x)\n    # Find all even digits\n    even_digits = []\n    for i in x:\n        if i % 2 == 0:\n            even_digits.append(i)\n    # Remove all even digits\n    return [x[i] for i in range(len(x)) if x[i] not in even_digits]\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any odd digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # First make sure x is sorted\n    x = sorted(x)\n    # Find all odd digits\n    odd_digits = []\n    for i in x:\n        if i % 2 == 1:\n            odd_digits.append(i)\n    # Remove all odd digits\n    return [x[i] for i in range(len(x)) if x[i] not in odd_digits]\n\ndef unique_digits3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even or odd digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits3([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # First make sure x is sorted\n    x = sorted(x)\n    # Find all even digits\n    even_digits = []\n    for i in x:\n        if i % 2 == 0:\n            even_digits.append(i)\n    # Find all odd digits\n    odd_digits = []\n    for i in x:\n        if i % 2 == 1:\n            odd_digits."
    },
    {
      "rank": 66,
      "score": 3.244152019613684,
      "candidate": "digits = []\n    while x > 0:\n        x, r = divmod(x, 10)\n        digits.append(r)\n    digits.sort()\n    return digits\n\ndef is_prime(x):\n    \"\"\"Return True if x is prime, otherwise False.\n\n    Note: x should be a positive integer.\n    \"\"\"\n    if x == 2 or x == 3:\n        return True\n    if x < 2:\n        return False\n    if x % 2 == 0 or x % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(x)) + 1, 6):\n        if x % i == 0 or x % (i + 2) == 0:\n            return False\n    return True\n\ndef generate_prime(n):\n    \"\"\"Return a list of prime numbers in the range [2, n]\n    \n    Note: n should be a positive integer.\n    \"\"\"\n    s = [2]\n    while len(s) < n:\n        x = random.randint(3, n - 1)\n        if is_prime(x):\n            s.append(x)\n    return s\n\ndef generate_prime_list(n):\n    \"\"\"Return a list of prime numbers in the range [2, n].\n    \n    Note: n should be a positive integer.\n    \"\"\"\n    s = [2]\n    while len(s) < n:\n        x = random.randint(3, n - 1)\n        if is_prime(x):\n            s.append(x)\n    return s\n\ndef generate_prime_sets(n):\n    \"\"\"Return a list of all prime numbers in the range [2, n].\n    \n    Note: n should be a positive integer.\n    \"\"\"\n    s = [set()]\n    while len(s) < n:\n        x = random.randint(3, n - 1)\n        if is_prime(x):\n            s[-1].add(x)\n    return s\n\ndef generate_prime_sets_with_duplicates(n):\n    \"\"\"Return a list of all prime numbers in the range [2, n].\n    \n    Note: n"
    },
    {
      "rank": 67,
      "score": 3.223521368855055,
      "candidate": "s = set()\n    for x in x:\n        s.add(x % 10)\n    return sorted(list(s))\n\n\n# ------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    if False:\n        import sys\n        sys.exit(0)\n\n    test_cases = [\n        (15, [1, 15]),\n        (33, [33, 1]),\n        (1422, [1, 1422]),\n        (10, [10]),\n        (0, [0]),\n        ([15, 33, 1422, 1], [1, 15, 33, 1422]),\n        ([15, 33, 1422, 1], [1, 15, 33, 1422]),\n        ([15, 33, 1422, 1], [1, 15, 33, 1422]),\n        ([15, 33, 1422, 1], [1, 15, 33, 1422]),\n    ]\n\n    for x, y in test_cases:\n        print(x, unique_digits(x))\n        assert unique_digits(x) == y"
    },
    {
      "rank": 68,
      "score": 3.1627362112714352,
      "candidate": "sorted_x = sorted(x)\n    digits = [int(y) for y in str(sorted_x)]\n    return digits[::2]\n\ndef get_digits(n):\n    \"\"\"Given a positive integer n return a sorted list of all digits that \n    are present in n.\n    \n    For example:\n    >>> get_digits(7)\n    [1, 2, 3]\n    >>> get_digits(15)\n    [1, 2, 5]\n    >>> get_digits(152)\n    []\n    >>> get_digits(100)\n    []\n    \"\"\"\n    sorted_x = sorted(n)\n    digits = [int(y) for y in str(sorted_x)]\n    return digits[::2]\n\ndef get_digits_of_sublist(n, l):\n    \"\"\"Given a positive integer n and a list l of digits return a sorted list\n    of all digits that are present in l and in n.\n    \n    For example:\n    >>> get_digits_of_sublist(7, [1, 2, 3])\n    [1, 2, 3]\n    >>> get_digits_of_sublist(7, [1, 3, 5])\n    []\n    >>> get_digits_of_sublist(152, [1, 2, 5])\n    [1, 2, 5]\n    >>> get_digits_of_sublist(152, [1, 2, 5, 7, 10])\n    []\n    >>> get_digits_of_sublist(152, [1, 2, 5, 7, 10, 13])\n    []\n    \"\"\"\n    sorted_x = sorted(l)\n    digits = [int(y) for y in str(sorted_x)]\n    return digits[::2]\n\ndef get_sublist_digits(n, l):\n    \"\"\"Given a positive integer n and a list l of digits return a sorted list\n    of all digits that are present in l but not in n.\n    \n    For example:\n    >>> get_sublist_digits(7, [1, 2, 3])\n    [2, 3]"
    },
    {
      "rank": 69,
      "score": 3.160700657180286,
      "candidate": "y = []\n    for i in x:\n        if i % 2 == 0:\n            y.append(i)\n    y.sort()\n    return y\n\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has no odd digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    y = []\n    for i in x:\n        if i % 2 == 0:\n            y.append(i)\n    y.sort()\n    return y\n\n\ndef is_palindrome(x):\n    \"\"\"Given a positive integer x. return True if it is a palindrome, \n    False otherwise.\n\n    For example:\n    >>> is_palindrome(23)\n    False\n    >>> is_palindrome(123)\n    True\n    >>> is_palindrome(2)\n    False\n    >>> is_palindrome(2147483647)\n    False\n    >>> is_palindrome(2147483648)\n    True\n    \"\"\"\n    return str(x) == str(x)[::-1]\n\n\ndef find_odd_digits(x):\n    \"\"\"Given a positive integer x. return a list of all odd digits of x.\n\n    For example:\n    >>> find_odd_digits(23)\n    [2, 3]\n    >>> find_odd_digits(123)\n    [2, 3, 1]\n    >>> find_odd_digits(2)\n    []\n    >>> find_odd_digits(2147483647)\n    []\n    >>> find_odd_digits(2147483648)\n    [1, 2, 3]\n    \"\"\"\n    y = []\n    for i in x:\n        if i % 2 == 1:\n            y.append(i)\n    y.sort()\n    return y\n\n\ndef find_even_dig"
    },
    {
      "rank": 70,
      "score": 3.1546282303058075,
      "candidate": "numbers = []\n    for number in x:\n        numbers.append(int(number) % 10)\n    return sorted(numbers)\n\ndef get_even_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has even digits.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> get_even_digits([15, 33, 1422, 1])\n    [15, 33]\n    >>> get_even_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    numbers = []\n    for number in x:\n        numbers.append(int(number) % 10)\n        if (numbers.count(0) % 2) == 0:\n            numbers.remove(0)\n    return sorted(numbers)\n\ndef find_max_sum_of_even_digits(x):\n    \"\"\"Given a list of positive integers x. return the sum of all elements\n    that has even digits.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> find_max_sum_of_even_digits([15, 33, 1422, 1])\n    11\n    >>> find_max_sum_of_even_digits([152, 323, 1422, 10])\n    0\n    \"\"\"\n    max_sum = 0\n    for number in x:\n        if (number % 10) % 2 == 0:\n            max_sum += number\n    return max_sum\n\ndef find_max_sum_of_even_digits_2(x):\n    \"\"\"Given a list of positive integers x. return the sum of all elements\n    that has even digits.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> find_max_sum_of_even_digits_2([15, 33, 1422, 1])\n    11\n    >>> find_max_sum_of_even_digits_2([152, 323, 1422, 10])\n    0\n    \"\"\"\n    max_sum = 0\n    for number in x:"
    },
    {
      "rank": 71,
      "score": 3.149068544131604,
      "candidate": "digits = [int(d) for d in x]\n    digits.sort()\n    digits.remove(0)\n    return digits\n\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    [152, 323, 1422, 10]\n    \"\"\"\n    digits = [int(d) for d in x]\n    digits.sort()\n    digits.remove(0)\n    return digits"
    },
    {
      "rank": 72,
      "score": 3.145837786227658,
      "candidate": "if not x:\n        return []\n    digits = [str(i) for i in x]\n    return [int(i) for i in digits if not i.isdigit()]\n\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(unique_digits(x))\n\n\ndef unique_digits_reversed(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_reversed([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_reversed([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(unique_digits_reversed(x), reverse=True)\n\n\ndef unique_digits_sorted_reversed(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted_reversed([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted_reversed([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(unique_digits_reversed(x), reverse=True)\n\n\ndef is_prime(n):\n    \"\"\"Given a positive integer n return True if n is prime else False.\n\n    For example:\n    >>> is_prime(11)\n    False\n    >>>"
    },
    {
      "rank": 73,
      "score": 3.0885875561411056,
      "candidate": "digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n    return digits\n\n\ndef get_unique_digits_sum(x):\n    \"\"\"Given a list of positive integers x. return the sum of all even digits.\n\n    For example:\n    >>> get_unique_digits_sum([15, 33, 1422, 1])\n    42\n    >>> get_unique_digits_sum([152, 323, 1422, 10])\n    0\n    \"\"\"\n    sum = 0\n    for i in x:\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n\ndef get_digits_sum(x):\n    \"\"\"Given a list of positive integers x. return the sum of all digits.\n\n    For example:\n    >>> get_digits_sum([15, 33, 1422, 1])\n    42\n    >>> get_digits_sum([152, 323, 1422, 10])\n    10\n    \"\"\"\n    sum = 0\n    for i in x:\n        sum += i\n    return sum\n\n\ndef is_palindrome(x):\n    \"\"\"Given a list of positive integers x. return True if x is a palindrome.\n\n    For example:\n    >>> is_palindrome([15, 33, 1422, 1])\n    True\n    >>> is_palindrome([152, 323, 1422, 10])\n    False\n    \"\"\"\n    x.sort()\n    return x == x[::-1]\n\n\ndef is_palindrome_2(x):\n    \"\"\"Given a list of positive integers x. return True if x is a palindrome.\n\n    For example:\n    >>> is_palindrome_2([15, 33, 1422, 1])\n    True\n    >>> is_palindrome_2([152, 323, 1422, 10])\n    False\n    \"\"\"\n    x.sort()\n    return x[::-1] == x\n\n\ndef is_palindrome_3(x):\n    \"\"\"Given a list of positive integers x. return True if x is a palindrome.\n\n    For example:\n    >>> is_palindrome_3([15,"
    },
    {
      "rank": 74,
      "score": 3.077115726535487,
      "candidate": "return sorted([i for i in x if i % 2 == 0])\n\n\ndef unique_odds(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that isn't a multiple of 2.\n\n    For example:\n    >>> unique_odds([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_odds([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if i % 2!= 0])\n\n\ndef unique_evens(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that isn't a multiple of 2.\n\n    For example:\n    >>> unique_evens([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_evens([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if i % 2 == 0])\n\n\ndef unique_odds_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that isn't a multiple of 2.\n\n    For example:\n    >>> unique_odds_digits([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_odds_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if i % 2 == 0 and i % 10 == 0])\n\n\ndef unique_evens_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that isn't a multiple of 2.\n\n    For example:\n    >>> unique_evens_digits([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_evens_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if i % 2 == 0 and i % 10!= 0])\n\n\ndef unique_evens_digits_odds(x):\n    \"\"\"Given a list of positive integers x. return a sorted"
    },
    {
      "rank": 75,
      "score": 3.041292349440976,
      "candidate": "# convert to a list of ints\n    x = [int(i) for i in x]\n    # convert to a list of list of ints\n    x = [[i for i in range(10)] for i in x]\n    # sort by length\n    x.sort(key=len)\n    # return list of digits\n    return [i[0] for i in x if i[0] % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Output:\n    # [1, 3, 5, 7, 9]\n    # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]\n    # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255]\n    # [1, 3"
    },
    {
      "rank": 76,
      "score": 3.039171180707177,
      "candidate": "res = []\n    for i in x:\n        if i % 2 == 0:\n            res.append(i)\n    return sorted(res)\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any odd digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for i in x:\n        if i % 2 == 0:\n            res.append(i)\n    return sorted(res)\n\ndef is_palindrome(x):\n    \"\"\"Given a positive integer x. Return True if x is a palindrome, \n    False otherwise.\n\n    For example:\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(12345)\n    True\n    >>> is_palindrome(1234567)\n    False\n    \"\"\"\n    return str(x) == str(x)[::-1]\n\ndef is_palindrome_2(x):\n    \"\"\"Given a positive integer x. Return True if x is a palindrome, \n    False otherwise.\n\n    For example:\n    >>> is_palindrome_2(123)\n    False\n    >>> is_palindrome_2(12345)\n    True\n    >>> is_palindrome_2(1234567)\n    False\n    \"\"\"\n    return str(x) == str(x)[::-1]\n\ndef is_palindrome_3(x):\n    \"\"\"Given a positive integer x. Return True if x is a palindrome, \n    False otherwise.\n\n    For example:\n    >>> is_palindrome_3(123)\n    False\n    >>> is_palindrome_3(12345)\n    True\n    >>> is_palindrome_3(1234567)\n    False\n    \"\"\"\n    return str(x) == str(x"
    },
    {
      "rank": 77,
      "score": 2.983878282400522,
      "candidate": "digits = []\n    for i in range(1, 10):\n        for j in range(10 ** i):\n            if j % i == 0:\n                continue\n            digits.append(j)\n    return digits\n\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for i in range(1, 10):\n        for j in range(10 ** i):\n            if j % i == 0:\n                continue\n            digits.append(j)\n    digits = sorted(digits)\n    return digits\n\n\ndef find_prime_factor(x):\n    \"\"\"Given a positive integer x. return the prime factor of x.\n\n    Note: Returned factor should be prime.\n    \n    For example:\n    >>> find_prime_factor(15)\n    5\n    >>> find_prime_factor(152)\n    5\n    >>> find_prime_factor(123)\n    3\n    \"\"\"\n    # for small numbers, use a prime factorization\n    if x < 2:\n        return x\n    if x < 10:\n        return x\n    if x < 100:\n        return x\n    if x < 1000:\n        return x\n    if x < 10000:\n        return x\n    if x < 100000:\n        return x\n    if x < 1000000:\n        return x\n    if x < 10000000:\n        return x\n    if x < 100000000:\n        return x\n    if x < 1000000000:\n        return x\n    if x < 10000000000:\n        return x\n    if x < 100000000000:\n        return x\n    if x < 1000000000000:\n        return x\n    if x < 10000000000000:\n        return x\n    if x < 100000000000000:"
    },
    {
      "rank": 78,
      "score": 2.9675954452888496,
      "candidate": "return sorted([i for i in x if i % 2 == 0])\n\ndef is_palindrome(x):\n    \"\"\"Given a string x, return True if x is a palindrome, and False otherwise.\n\n    Note: The palindrome is defined as a string x such that x is the same\n    reverse of x.\n\n    For example:\n    >>> is_palindrome('abcd')\n    False\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    False\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    False\n    >>> is_palindrome('abcd')\n    False\n    >>> is_palindrome('abcd')\n    False\n    \"\"\"\n    return str(x) == str(x[::-1])\n\ndef is_palindrome_even(x):\n    \"\"\"Given a string x, return True if x is a palindrome, and False otherwise.\n\n    Note: The palindrome is defined as a string x such that x is the same\n    reverse of x.\n\n    For example:\n    >>> is_palindrome_even('abcd')\n    True\n    >>> is_palindrome_even('abcd')\n    True\n    >>> is_palindrome_even('abcd')\n    True\n    >>> is_palindrome_even('abcd')\n    True\n    >>> is_palindrome_even('abcd')\n    False\n    >>> is_palindrome_even('abcd')\n    False\n    >>> is_palindrome_even('abcd')\n    False\n    \"\"\"\n    return str(x) == str(x[::-1]) and x % 2 == 0\n\ndef palindrome_even_odd(x):\n    \"\"\"Given a string x, return True if x is a palindrome, and False otherwise.\n\n    Note: The palindrome is defined as a string x such that x is the same\n    reverse of x.\n\n    For example:\n    >>> palindrome_even_odd('abcd')\n    False"
    },
    {
      "rank": 79,
      "score": 2.9479582729252916,
      "candidate": "digits = [int(x) % 10 for x in x]\n    digits.sort()\n    return digits\n\ndef even_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> even_digits([15, 33, 1422, 1])\n    [15, 33]\n    >>> even_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = [int(x) % 10 for x in x]\n    digits.sort()\n    return digits\n\ndef print_digits(x):\n    \"\"\"Given a list of positive integers x. print all digits of x.\n\n    For example:\n    >>> print_digits([15, 33, 1422, 1])\n    1 3 5 7 9\n    >>> print_digits([152, 323, 1422, 10])\n    10\n    \"\"\"\n    for i in x:\n        print(i, end=' ')\n    print()\n\ndef digits_in_range(x, y):\n    \"\"\"Given two positive integers x and y. return a list of all digits \n    that are in range [x, y).\n\n    For example:\n    >>> digits_in_range(1, 100)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n    >>> digits_in_range(2, 100)\n    []\n    \"\"\"\n    digits = [int(x) % 10 for x in xrange(y)]\n    digits.sort()\n    return digits\n\ndef all_digits_in_range(x, y):\n    \"\"\"Given two positive integers x and y. return a list of all digits \n    that are in range [x, y).\n\n    For example:\n    >>> all_digits_in_range(1, 100)\n    [1, 2, 3,"
    },
    {
      "rank": 80,
      "score": 2.916453460501282,
      "candidate": "y = []\n    for i in x:\n        if i % 2 == 0:\n            y.append(i)\n    return sorted(y)\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    [152, 323, 1422, 10]\n    \"\"\"\n    y = []\n    for i in x:\n        if i % 2 == 0:\n            y.append(i)\n    return sorted(y)\n\ndef unique_digits_sorted2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted2([152, 323, 1422, 10])\n    [152, 323, 1422, 10]\n    \"\"\"\n    y = []\n    for i in x:\n        if i % 2 == 0:\n            y.append(i)\n    return sorted(y)\n\ndef unique_digits_sorted3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_sorted3([152, 323, 1422, 10])\n    [152, 323, 1422, 10]\n    \"\"\"\n    y = []\n    for i in x:\n        if i % 2"
    },
    {
      "rank": 81,
      "score": 2.898400664781059,
      "candidate": "return sorted(list(filter(lambda x: x % 2 == 0, x)))\n\ndef unique_digits_with_remainder(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a even digit.\n\n    For example:\n    >>> unique_digits_with_remainder([152, 323, 1422, 10])\n    [152, 323, 1422, 10]\n    >>> unique_digits_with_remainder([152, 323, 1422, 1])\n    []\n    \"\"\"\n    return sorted(list(filter(lambda x: x % 2!= 0, x)))\n\ndef unique_digits_with_remainder_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a even digit.\n\n    For example:\n    >>> unique_digits_with_remainder_sorted([152, 323, 1422, 10])\n    [152, 323, 1422, 10]\n    >>> unique_digits_with_remainder_sorted([152, 323, 1422, 1])\n    []\n    \"\"\"\n    return sorted(list(filter(lambda x: x % 2!= 0, x)))\n\ndef is_palindrome(x):\n    \"\"\"Given a positive integer x. return true if x is a palindrome.\n    \n    For example:\n    >>> is_palindrome(123)\n    True\n    >>> is_palindrome(1234)\n    False\n    >>> is_palindrome(1234)\n    False\n    >>> is_palindrome(12345)\n    False\n    >>> is_palindrome(12345)\n    True\n    \"\"\"\n    return str(x) == str(x)[::-1]\n\ndef is_palindrome_with_remainder(x):\n    \"\"\"Given a positive integer x. return true if x is a palindrome.\n    \n    For example:\n    >>> is_palindrome_with_remainder(123)\n    True\n    >>> is_palindrome_with_remainder(1234)\n    False\n    >>> is"
    },
    {
      "rank": 82,
      "score": 2.894630981374499,
      "candidate": "return sorted(set(map(int, x)))\n\n\ndef unique_numbers(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has no even digit and no odd digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_numbers([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_numbers([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set(map(int, x)).difference(set(map(lambda x: x % 2, x))))\n\n\ndef get_nth_prime(n):\n    \"\"\"Given an integer n, return the nth prime number.\n    \n    For example:\n    >>> get_nth_prime(5)\n    7\n    >>> get_nth_prime(10)\n    29\n    >>> get_nth_prime(100)\n    97\n    \"\"\"\n    return next_prime(prime_count(n))\n\n\ndef next_prime(n):\n    \"\"\"Given an integer n, return the nth prime number.\n    \n    For example:\n    >>> next_prime(5)\n    7\n    >>> next_prime(10)\n    29\n    >>> next_prime(100)\n    97\n    \"\"\"\n    while True:\n        prime_num = get_prime_num(n)\n        if prime_num > n:\n            return prime_num\n        n += 1\n\n\ndef prime_count(n):\n    \"\"\"Given an integer n, return the number of prime numbers between 1 and n.\n    \n    For example:\n    >>> prime_count(5)\n    4\n    >>> prime_count(10)\n    9\n    >>> prime_count(100)\n    100\n    \"\"\"\n    prime_num = get_prime_num(n)\n    return (prime_num - 1) // 2\n\n\ndef get_prime_num(n):\n    \"\"\"Given an integer n, return the number of prime numbers between 1 and n.\n    \n    For example:\n    >>> get_prime_num(5)\n    7\n    >>> get"
    },
    {
      "rank": 83,
      "score": 2.8687378125930256,
      "candidate": "return [x for x in x if x % 2 == 0]\n\n\ndef unique_even_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that doesn't any odd digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_even_digits([15, 33, 1422, 1])\n    [15, 33, 1422]\n    >>> unique_even_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if x % 2 == 0]\n\n\ndef is_prime(n):\n    \"\"\"Given a positive integer n, return True if n is prime, False otherwise.\n\n    For example:\n    >>> is_prime(13)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(0)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(2.0)\n    False\n    >>> is_prime('13')\n    False\n    >>> is_prime('5')\n    True\n    >>> is_prime('6')\n    True\n    >>> is_prime('10')\n    False\n    \"\"\"\n    if n == 0:\n        return False\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n < 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n    return True\n\n\ndef is_prime_list(nums):\n    \"\"\"Given a list of positive integers nums, return True if the list contains\n    all prime numbers, False otherwise.\n\n    For example:\n    >>> is_prime_list([13, 15, 17])\n    True\n    >>> is_prime_list([1, 2, 3])\n    True\n    >>> is_prime_list([0, 1, 2, 3])\n    False"
    },
    {
      "rank": 84,
      "score": 2.7887365263292714,
      "candidate": "return sorted(x)\n\ndef all_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a even digit.\n\n    For example:\n    >>> all_digits([15, 33, 1422, 1])\n    [15, 33, 1422]\n    >>> all_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x)\n\ndef all_digits_with_comma(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> all_digits_with_comma([15, 33, 1422, 1])\n    [15, 33, 1422]\n    >>> all_digits_with_comma([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return sorted(x)\n\ndef all_digits_with_comma_with_unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> all_digits_with_comma_with_unique_digits([15, 33, 1422, 1])\n    [15, 33, 1422]\n    >>> all_digits_with_comma_with_unique_digits([152, 323, 1422, 10])\n    [152, 323, 1422]\n    \"\"\"\n    return sorted(x)\n\ndef all_digits_with_comma_with_unique_digits_with_even_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> all_digits_with_comma_with_unique_digits_with_even_dig"
    },
    {
      "rank": 85,
      "score": 2.7843715929696193,
      "candidate": "return [x for x in range(10) if all(x % i == 0 for i in xrange(10))]\n\ndef is_palindrome(x):\n    \"\"\"Given a positive integer x. return True if x is a palindrome and False \n    otherwise.\n    \n    For example:\n    >>> is_palindrome(1234)\n    True\n    >>> is_palindrome(1234)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(12)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n    return str(x) == str(x)[::-1]\n\ndef palindrome_partitioning(x):\n    \"\"\"Given a positive integer x. return a list of all palindrome partitions \n    of x.\n    \n    For example:\n    >>> palindrome_partitioning(1234)\n    [[1234], [1234]]\n    >>> palindrome_partitioning(1234)\n    [[1234], [1234]]\n    >>> palindrome_partitioning(123)\n    [[12, 3, 1], [3, 1]]\n    >>> palindrome_partitioning(12)\n    [[1, 2]]\n    >>> palindrome_partitioning(12345)\n    [[12, 34, 5], [45, 5]]\n    \"\"\"\n    if x == 1:\n        return [[1]]\n    if x == 2:\n        return [[1, 1]]\n    partitions = [palindrome_partitioning(x - 1) + [[x]]]\n    for i in xrange(2, x):\n        partitions.append(palindrome_partitioning(x - 1) + [[x]])\n        partitions.append(palindrome_partitioning(x - 1) + [[x]])\n    return partitions\n\ndef palindrome_partitioning_recursive(x):\n    \"\"\"Given a positive integer x. return a list of all palindrome partitions \n    of x.\n    \n    For example:\n    >>> palindrome_partitioning_recursive(1234"
    },
    {
      "rank": 86,
      "score": 2.729712589536538,
      "candidate": "ret = []\n    while x:\n        ret.append(x[0])\n        x = x[1:]\n    return ret\n\ndef unique_digits_in_sorted_list(x):\n    \"\"\"Given a sorted list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_in_sorted_list([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_in_sorted_list([152, 323, 1422, 10])\n    []\n    \"\"\"\n    ret = []\n    while x:\n        ret.append(x[0])\n        x = x[1:]\n    return ret\n\ndef even_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has an even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> even_digits([15, 33, 1422, 1])\n    [15, 33]\n    >>> even_digits([152, 323, 1422, 10])\n    [152, 323]\n    \"\"\"\n    ret = []\n    while x:\n        if x[0] % 2 == 0:\n            ret.append(x[0])\n        x = x[1:]\n    return ret\n\ndef even_digits_in_sorted_list(x):\n    \"\"\"Given a sorted list of positive integers x. return a sorted list of all \n    elements that has an even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> even_digits_in_sorted_list([15, 33, 1422, 1])\n    [15, 33]\n    >>> even_digits_in_sorted_list([152, 323, 1422, 10])\n    [152, 323]\n    \"\"\"\n    ret = []\n    while x:\n        if x[0] % 2 == 0:\n            ret.append(x[0])"
    },
    {
      "rank": 87,
      "score": 2.709696110427694,
      "candidate": "result = []\n    for x in x:\n        if x % 2 == 0:\n            result.append(x)\n    return sorted(result)\n\ndef find_max(x):\n    \"\"\"Given a list of positive integers x. Return the maximum element in \n    x.\n    \n    For example:\n    >>> find_max([1, 3, 2])\n    3\n    >>> find_max([1, 3, 2, 4])\n    4\n    \"\"\"\n    return max(x)\n\ndef find_min(x):\n    \"\"\"Given a list of positive integers x. Return the minimum element in \n    x.\n    \n    For example:\n    >>> find_min([1, 3, 2])\n    1\n    >>> find_min([1, 3, 2, 4])\n    2\n    \"\"\"\n    return min(x)\n\ndef find_sum(x):\n    \"\"\"Given a list of positive integers x. Return the sum of all elements \n    in x.\n    \n    For example:\n    >>> find_sum([1, 3, 2])\n    7\n    >>> find_sum([1, 3, 2, 4])\n    12\n    \"\"\"\n    return sum(x)\n\ndef find_average(x):\n    \"\"\"Given a list of positive integers x. Return the average of all elements \n    in x.\n    \n    For example:\n    >>> find_average([1, 3, 2])\n    2.5\n    >>> find_average([1, 3, 2, 4])\n    3.5\n    \"\"\"\n    return find_sum(x) / len(x)\n\ndef find_product(x):\n    \"\"\"Given a list of positive integers x. Return the product of all elements \n    in x.\n    \n    For example:\n    >>> find_product([1, 3, 2])\n    6\n    >>> find_product([1, 3, 2, 4])\n    24\n    \"\"\"\n    return reduce(lambda x, y: x * y, x)\n\ndef find_square(x):\n    \"\"\"Given a list of positive integers x. Return the square of all elements \n    in x.\n    \n    For example:\n    >>> find_square(["
    },
    {
      "rank": 88,
      "score": 2.6953850998623183,
      "candidate": "if not x:\n        return []\n    digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n    return sorted(digits)\n\ndef unique_digits_in_reverse(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_in_reverse([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_in_reverse([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if not x:\n        return []\n    digits = []\n    for i in x:\n        if i % 2 == 0:\n            digits.append(i)\n    return sorted(digits, reverse=True)\n\ndef is_palindrome(x):\n    \"\"\"Given a positive integer x, return True if x is a palindrome, False otherwise.\n    \n    For example:\n    >>> is_palindrome(12)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(12345)\n    False\n    >>> is_palindrome(123456789)\n    True\n    >>> is_palindrome(1234567890)\n    True\n    >>> is_palindrome(1234567890123)\n    False\n    >>> is_palindrome(123456789012345)\n    True\n    >>> is_palindrome(1234567890123456)\n    False\n    >>> is_palindrome(12345678901234567)\n    False\n    >>> is_palindrome(123456789012345678)\n    True\n    >>> is_palindrome(1234567890123456789)\n    True\n    >>> is_palindrome(12345678901234567891)\n    False\n    >>> is_palindrome(123456789012345678912)\n    False\n    \"\"\""
    },
    {
      "rank": 89,
      "score": 2.6760701062223813,
      "candidate": "numbers = []\n    for number in x:\n        if not number % 10:\n            numbers.append(number)\n    return numbers\n\ndef is_palindrome(x):\n    \"\"\"Given a positive integer x, return True if it is a palindrome.\n    \n    For example:\n    >>> is_palindrome(1422)\n    True\n    >>> is_palindrome(1234)\n    False\n    \"\"\"\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    return is_palindrome(int(x / 10) * 10) and is_palindrome(x % 10)\n\ndef is_palindrome_number(x):\n    \"\"\"Given a positive integer x, return True if it is a palindrome.\n    \n    For example:\n    >>> is_palindrome_number(1422)\n    False\n    >>> is_palindrome_number(1234)\n    True\n    \"\"\"\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    return is_palindrome(x / 10) and is_palindrome_number(x % 10)\n\ndef is_palindrome_number_recursive(x):\n    \"\"\"Given a positive integer x, return True if it is a palindrome.\n    \n    For example:\n    >>> is_palindrome_number_recursive(1422)\n    True\n    >>> is_palindrome_number_recursive(1234)\n    False\n    \"\"\"\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 10 == 0:\n        return is_palindrome_number_recursive(x / 10)\n    return is_palindrome_number_recursive(x / 10) and is_palindrome_number_recursive(x % 10)\n\ndef is_palindrome_recursive(x):\n    \"\"\"Given a positive integer x, return True if it is a palindrome.\n    \n    For example:\n    >>> is_palindrome_recursive(1422)\n    False\n    >>> is_palindrome"
    },
    {
      "rank": 90,
      "score": 2.6223521145498125,
      "candidate": "digits = [int(x) for x in str(x)]\n    digits.sort()\n    # Remove all even numbers\n    return [x for x in digits if x % 2 == 0]\n\n\ndef sum_digits(x):\n    \"\"\"Given a list of positive integers x. return the sum of all even digits.\n\n    For example:\n    >>> sum_digits([15, 33, 1422, 1])\n    38\n    >>> sum_digits([152, 323, 1422, 10])\n    0\n    \"\"\"\n    return sum(int(x) % 2 == 0 for x in str(x))\n\n\ndef sum_digits_pow_2(x):\n    \"\"\"Given a list of positive integers x. return the sum of all even digits\n    pow 2.\n\n    For example:\n    >>> sum_digits_pow_2([15, 33, 1422, 1])\n    38\n    >>> sum_digits_pow_2([152, 323, 1422, 10])\n    0\n    \"\"\"\n    return sum(int(x) % 2 == 0 for x in str(x)) * 2\n\n\ndef sum_digits_pow_4(x):\n    \"\"\"Given a list of positive integers x. return the sum of all even digits\n    pow 4.\n\n    For example:\n    >>> sum_digits_pow_4([15, 33, 1422, 1])\n    38\n    >>> sum_digits_pow_4([152, 323, 1422, 10])\n    0\n    \"\"\"\n    return sum(int(x) % 2 == 0 for x in str(x)) * 4\n\n\ndef sum_digits_pow_8(x):\n    \"\"\"Given a list of positive integers x. return the sum of all even digits\n    pow 8.\n\n    For example:\n    >>> sum_digits_pow_8([15, 33, 1422, 1])\n    38\n    >>> sum_digits_pow_8([152, 323, 1422, 10])\n    0\n    \"\"\"\n    return sum(int(x) % 2 == 0 for x in str(x)) * 8\n\n\ndef sum_digits_pow_16"
    },
    {
      "rank": 91,
      "score": 2.591389166015455,
      "candidate": "return [i for i in x if i % 2 == 0]\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for \n    # auto-testing\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33],\\\n        \"Unique digits\"\n    assert unique_digits([152, 323, 1422, 10]) == [],\\\n        \"Unique digits\"\n    assert unique_digits([152, 323, 1422, 13]) == [13],\\\n        \"Unique digits\""
    },
    {
      "rank": 92,
      "score": 2.5442259958495095,
      "candidate": "n = len(x)\n    if n == 0:\n        return []\n    res = [0]*(n+1)\n    for i in xrange(1, n+1):\n        if x[i-1] % 2 == 0:\n            res[i] = res[i-1] + 1\n    return [x[i-1] for i in xrange(1, n+1) if res[i] == i]\n\n\ndef is_prime(n):\n    \"\"\"Check if n is a prime number.\n\n    >>> is_prime(5)\n    False\n    >>> is_prime(13)\n    True\n    \"\"\"\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_factors(n):\n    \"\"\"Return a list of prime factors of n.\n\n    >>> prime_factors(12)\n    [2, 3]\n    >>> prime_factors(13)\n    [2, 5]\n    \"\"\"\n    if n == 1:\n        return []\n    res = [n]\n    for i in xrange(2, int(n**0.5)+1, 2):\n        if n % i == 0:\n            res.append(i)\n            res += prime_factors(n/i)\n    return res\n\n\ndef factorial(n):\n    \"\"\"Return factorial of n.\n\n    >>> factorial(10)\n    3628800\n    >>> factorial(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return n*(n-1)*(n-2)/2\n\n\ndef fibonacci(n):\n    \"\"\"Return n-th fibonacci number.\n\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5"
    },
    {
      "rank": 93,
      "score": 2.502149261697287,
      "candidate": "return [x for x in sorted(set(x)) if x % 2 == 0]\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any odd digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in sorted(set(x)) if x % 2 == 0]\n\ndef find_sum_of_even_digits(x):\n    \"\"\"Given a list of positive integers x. return a list of all sum of \n    even digits.\n    \n    For example:\n    >>> find_sum_of_even_digits([15, 33, 1422, 1])\n    [15, 33]\n    >>> find_sum_of_even_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [sum(x) for x in unique_digits(x) if x % 2 == 0]\n\ndef find_sum_of_odd_digits(x):\n    \"\"\"Given a list of positive integers x. return a list of all sum of \n    odd digits.\n    \n    For example:\n    >>> find_sum_of_odd_digits([15, 33, 1422, 1])\n    [15, 33]\n    >>> find_sum_of_odd_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [sum(x) for x in unique_digits_2(x) if x % 2 == 0]\n\ndef find_sum_of_odd_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a list of all sum of \n    odd digits.\n    \n    For example:\n    >>> find_sum_of_odd_digits_2([15, 33, 1422, 1])\n    [15, 33]\n    >>> find_sum_of_odd_"
    },
    {
      "rank": 94,
      "score": 2.482052890159964,
      "candidate": "return [i for i in x if i % 2 == 0]\n\ndef unique_odd_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any odd digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_odd_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_odd_digits([152, 323, 1422, 10])\n    [10]\n    \"\"\"\n    \n    return [i for i in x if i % 2!= 0]\n\ndef is_palindrome(x):\n    \"\"\"Given a positive integer x, return True if x is a palindrome.\n    \n    For example:\n    >>> is_palindrome(1)\n    False\n    >>> is_palindrome(2)\n    True\n    >>> is_palindrome(10)\n    True\n    >>> is_palindrome(12)\n    False\n    >>> is_palindrome(123)\n    True\n    \"\"\"\n    \n    return str(x) == str(x)[::-1]\n\ndef unique_palindromes(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that isn't a palindrome.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_palindromes([1, 2, 3])\n    [3, 1, 2]\n    >>> unique_palindromes([1, 2, 3, 10])\n    []\n    \"\"\"\n    \n    return [i for i in x if not is_palindrome(i)]\n\ndef is_monotonic(x):\n    \"\"\"Given a list of positive integers x. return True if x is monotonic.\n    \n    For example:\n    >>> is_monotonic([1, 2, 3])\n    True\n    >>> is_monotonic([1, 2, 4])\n    True\n    >>> is_monotonic([1, 2, 3, 4, 5])\n    True"
    },
    {
      "rank": 95,
      "score": 2.4617070191636983,
      "candidate": "digits = [int(i) for i in x]\n    digits.sort()\n    return digits[digits.index(0):]\n\n\ndef is_prime(x):\n    \"\"\"Return True if x is a prime number, False otherwise.\n    \n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    \"\"\"\n    if x <= 1:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(x**0.5)+1, 2):\n        if x % i == 0:\n            return False\n    return True\n\n\ndef is_prime_list(x):\n    \"\"\"Return True if x is a prime list, False otherwise.\n    \n    >>> is_prime_list([3, 4, 5])\n    True\n    >>> is_prime_list([3, 4, 6])\n    False\n    >>> is_prime_list([3, 4, 7])\n    False\n    >>> is_prime_list([3, 4, 8])\n    False\n    >>> is_prime_list([3, 4, 9])\n    False\n    >>> is_prime_list([3, 4, 10])\n    False\n    >>> is_prime_list([3, 4, 11])\n    False\n    >>> is_prime_list([3, 4, 12])\n    False\n    >>> is_prime_list([3, 4, 13])\n    False\n    >>> is_prime_list([3, 4, 14])\n    False\n    >>> is_prime_list([3, 4"
    },
    {
      "rank": 96,
      "score": 2.45062035751304,
      "candidate": "digits = [int(x) for x in x]\n    return sorted(set(digits) - set([0]))\n\ndef main():\n    # read the input\n    n = int(input())\n    for _ in range(n):\n        # read the number\n        x = int(input())\n        # print the unique digits\n        print(unique_digits(x))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 97,
      "score": 2.3588633162039443,
      "candidate": "return sorted([x for x in xrange(1, 10) if x not in xrange(1, int(math.floor(math.log(x, 10))))])\n\n\ndef unique_digits_reversed(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_reversed([152, 323, 1422, 10])\n    [10, 1422, 323, 152]\n    >>> unique_digits_reversed([152, 323, 1422, 1])\n    []\n    \"\"\"\n    return sorted([x for x in xrange(1, 10) if x not in xrange(1, int(math.floor(math.log(x, 10))))])[::-1]\n\n\ndef unique_digits_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_sorted([152, 323, 1422, 1])\n    [1, 1422, 323, 152]\n    >>> unique_digits_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([x for x in xrange(1, 10) if x not in xrange(1, int(math.floor(math.log(x, 10))))])\n\n\ndef unique_digits_reversed_sorted(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_reversed_sorted([152, 323, 1422, 1])\n    [1, 1422, 323, 152]\n    >>> unique_digits_reversed_sorted([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([x for x in x"
    },
    {
      "rank": 98,
      "score": 2.2237869753691353,
      "candidate": "return [x for x in x if not (x % 2)]\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for\n    # auto-testing\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n    assert unique_digits([5, 7, 9, 11, 13]) == [5, 7, 9, 11, 13]\n    assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    assert unique_digits([1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8]) == [1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8]\n    assert unique_digits([1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8"
    },
    {
      "rank": 99,
      "score": 2.1181484442541008,
      "candidate": "if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return [x[0]]\n    odds = [x[i] for i in range(len(x)) if x[i] % 2]\n    return [x[i] for i in range(len(x)) if x[i] not in odds]\n\ndef unique_digits_and_odds(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit and odds.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_and_odds([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_and_odds([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return [x[0]]\n    odds = [x[i] for i in range(len(x)) if x[i] % 2]\n    return [x[i] for i in range(len(x)) if x[i] not in odds]\n\ndef unique_digits_and_odds_with_invalid(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit and odds.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_and_odds_with_invalid([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_and_odds_with_invalid([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return [x[0]]\n    odds = [x[i] for i in range(len(x)) if x[i] % 2]\n    return [x[i] for i in range(len(x))"
    },
    {
      "rank": 100,
      "score": 1.821114703159615,
      "candidate": "# Note: this is O(n)\n    digits = [int(i) for i in str(x)]\n    # Remove all even digits from the list\n    digits = [d for d in digits if d % 2 == 0]\n    # Sort the digits list in increasing order\n    digits = sorted(digits)\n    return digits\n\ndef unique_digits_from_list(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_from_list([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_from_list([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Note: this is O(n)\n    digits = [int(i) for i in str(x)]\n    # Remove all even digits from the list\n    digits = [d for d in digits if d % 2 == 0]\n    # Sort the digits list in increasing order\n    digits = sorted(digits)\n    return digits\n\nif __name__ == '__main__':\n    #test_unique_digits()\n    #test_unique_digits_from_list()\n    test_unique_digits_from_list_2()"
    }
  ]
}