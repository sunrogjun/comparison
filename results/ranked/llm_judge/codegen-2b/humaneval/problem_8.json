{
  "timestamp": "2025-09-14T16:11:26.957240",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 8,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if not numbers:\n        return (0, 1)\n\n    s = sum(numbers)\n    p = 1\n    for n in numbers:\n        p *= n\n    return (s, p)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "numbers_sum = sum(numbers)\n    numbers_product = 1\n    for number in numbers:\n        numbers_product *= number\n    return numbers_sum, numbers_product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "s = 0\n    p = 1\n    for x in numbers:\n        s += x\n        p *= x\n    return s, p"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if len(numbers) == 0:\n        return 0, 1\n\n    n, prod = numbers[0], 1\n    for n in numbers[1:]:\n        prod *= n\n        n += 1\n    return sum(numbers), prod"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "sum_product = 0\n    product = 1\n\n    for number in numbers:\n        sum_product += number\n        product *= number\n\n    return sum_product, product\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]\n    sum_product, product = sum_product(numbers)\n    print(\"sum:\", sum_product)\n    print(\"product:\", product)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s, p)\n\n\ndef sum_product_iter(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iter([])\n    (0, 1)\n    >>> sum_product_iter([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s, p)\n\n\ndef sum_product_recursive(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s, p)\n\n\ndef sum_product_recursive_iter(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive_iter([])\n    (0, 1)\n    >>> sum_product_recursive_iter([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s, p)\n\n\nif __name__ == '__main__':\n    import doctest"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "n = len(numbers)\n    if n == 0:\n        return (0, 1)\n    s = 0\n    p = 1\n    for i in range(n):\n        s += numbers[i]\n        p *= numbers[i]\n    return (s, p)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "sum = 0\n    product = 1\n\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "sums = [0] * (n + 1)\n    products = [1] * (n + 1)\n    for i in range(1, n + 1):\n        sums[i] = sums[i - 1] + numbers[i - 1]\n        products[i] = products[i - 1] * numbers[i - 1]\n    return (sum(sums), products[n])"
    },
    {
      "rank": 14,
      "score": 8.444444444444445,
      "candidate": "return sum(numbers), reduce(lambda a, b: a * b, numbers)\n\n\nif __name__ == \"__main__\":\n    print(sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 15,
      "score": 8.444444444444445,
      "candidate": "if not numbers:\n        return 0, 1\n    sum, prod = 0, 1\n    for num in numbers:\n        sum += num\n        prod *= num\n    return sum, prod\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 8.444444444444445,
      "candidate": "if not numbers:\n        return 0, 1\n    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return s, p"
    },
    {
      "rank": 17,
      "score": 8.444444444444445,
      "candidate": "if not numbers:\n        return (0, 1)\n\n    s, p = 0, 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)"
    },
    {
      "rank": 18,
      "score": 8.444444444444445,
      "candidate": "if not numbers:\n        return 0, 1\n    s, p = 0, 1\n    for n in numbers:\n        s, p = s + n, p * n\n    return s, p\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 19,
      "score": 8.444444444444445,
      "candidate": "sum = 0\n    product = 1\n    for i in numbers:\n        sum += i\n        product *= i\n\n    return sum, product\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 8.444444444444445,
      "candidate": "s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return s, p"
    },
    {
      "rank": 21,
      "score": 8.444444444444445,
      "candidate": "if len(numbers) == 0:\n        return (0, 1)\n    else:\n        sum_product_a = sum_product(numbers[:len(numbers) - 1])\n        sum_product_b = sum_product(numbers[1:])\n        return sum_product_a, sum_product_b\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]\n    print(sum_product(numbers))"
    },
    {
      "rank": 22,
      "score": 8.444444444444445,
      "candidate": "sum_product_product = 0\n    sum_product_sum = 0\n    for number in numbers:\n        sum_product_product *= number\n        sum_product_sum += number\n    return sum_product_sum, sum_product_product"
    },
    {
      "rank": 23,
      "score": 8.444444444444445,
      "candidate": "if len(numbers) == 0:\n        return (0, 1)\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)"
    },
    {
      "rank": 24,
      "score": 8.444444444444445,
      "candidate": "sum_product_product = 0\n    sum_product_sum = 0\n    for number in numbers:\n        sum_product_product += number\n        sum_product_sum += number * number\n    return sum_product_sum, sum_product_product\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4]\n    sum_product = sum_product(numbers)\n    print(sum_product)"
    },
    {
      "rank": 25,
      "score": 8.444444444444445,
      "candidate": "if not numbers:\n        return (0, 1)\n\n    return sum_product(numbers[1:]) + numbers[0], sum(numbers) * numbers[0]\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 26,
      "score": 8.444444444444445,
      "candidate": "s, p = 0, 1\n    for n in numbers:\n        s, p = s + n, p * n\n    return s, p"
    },
    {
      "rank": 27,
      "score": 8.444444444444445,
      "candidate": "if not numbers:\n        return 0, 1\n    s = 0\n    p = 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p"
    },
    {
      "rank": 28,
      "score": 8.444444444444445,
      "candidate": "s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return s, p"
    },
    {
      "rank": 29,
      "score": 8.444444444444445,
      "candidate": "s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n    assert sum_product([1, 2, 3, 4, 5, 6]) == (15, 120)"
    },
    {
      "rank": 30,
      "score": 8.444444444444445,
      "candidate": "sums = 0\n    products = 1\n    for num in numbers:\n        sums += num\n        products *= num\n    return (sums, products)\n\n\ndef main():\n    numbers = [1, 2, 3, 4]\n    print(sum_product(numbers))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 8.444444444444445,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product"
    },
    {
      "rank": 32,
      "score": 8.444444444444445,
      "candidate": "s, p = 0, 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p"
    },
    {
      "rank": 33,
      "score": 8.444444444444445,
      "candidate": "s, p = 0, 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 3.926139092254469,
      "candidate": "# We can optimize this by using the sum and product of the first and second elements of the list\n    # to compute the sum and product of the rest of the list.\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return sum, product"
    },
    {
      "rank": 35,
      "score": 3.7896064077536957,
      "candidate": "return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n\ndef sum_product_recursive(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return sum_product_recursive(numbers[1:]) + numbers[0] * sum_product_recursive(numbers[:-1])\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n    assert sum_product_recursive([]) == (0, 1)\n    assert sum_product_recursive([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 36,
      "score": 3.761514928204013,
      "candidate": "# sum of the numbers\n    sum_numbers = 0\n    # product of the numbers\n    product_numbers = 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return sum_numbers, product_numbers"
    },
    {
      "rank": 37,
      "score": 3.732824384460777,
      "candidate": "if not numbers:\n        return (0, 1)\n\n    s, p = 0, 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 3.6781200142854114,
      "candidate": "if not numbers:\n        return (0, 1)\n\n    sum_product = 0\n    product = 1\n    for number in numbers:\n        sum_product += number\n        product *= number\n\n    return (sum_product, product)\n\n\ndef sum_product_recursive(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    sum_product, product = 0, 1\n    for number in numbers:\n        sum_product += number\n        product *= number\n\n    return (sum_product, product)\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n\n    assert sum_product_recursive([]) == (0, 1)\n    assert sum_product_recursive([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 39,
      "score": 3.5285611131094576,
      "candidate": "if len(numbers) == 0:\n        return (0, 1)\n\n    sum_product = 0\n    product = 1\n    for number in numbers:\n        sum_product += number\n        product *= number\n\n    return (sum_product, product)\n\n\ndef sum_product_recursive(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Same as sum_product, but recursively.\n    >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n\n    sum_product = 0\n    product = 1\n    for number in numbers:\n        sum_product += number\n        product *= number\n        if len(numbers) > 1:\n            sum_product_recursive(numbers[1:])\n\n    return (sum_product, product)\n\n\ndef sum_product_recursive2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Same as sum_product, but recursively.\n    >>> sum_product_recursive2([])\n    (0, 1)\n    >>> sum_product_recursive2([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n\n    sum_product = 0\n    product = 1\n    for number in numbers:\n        sum_product += number\n        product *= number\n        if len(numbers) > 1:\n            sum_product_recursive2(numbers[1:])\n\n    return (sum_product, product)\n\n\ndef sum_product_iterative(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Same as sum_product, but using an iterative approach.\n    >>> sum_product_iterative([])\n    (0, 1)\n    >>> sum_product_iterative([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0,"
    },
    {
      "rank": 40,
      "score": 3.5154997612479755,
      "candidate": "s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s, p)\n\n\ndef test_sum_product():\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n\n\nif __name__ == \"__main__\":\n    test_sum_product()"
    },
    {
      "rank": 41,
      "score": 3.4877725635611796,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product"
    },
    {
      "rank": 42,
      "score": 3.4656400595580994,
      "candidate": "if not numbers:\n        return (0, 1)\n\n    sums = [0] * len(numbers)\n    products = [1] * len(numbers)\n\n    for i in range(1, len(numbers)):\n        sums[i] = numbers[i-1] + sums[i-1]\n        products[i] = numbers[i-1] * products[i-1]\n\n    return (sums[-1], products[-1])\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 43,
      "score": 3.4112724560515946,
      "candidate": "s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4]\n    s, p = sum_product(numbers)\n    print(s, p)"
    },
    {
      "rank": 44,
      "score": 3.406262911197099,
      "candidate": "s, p = 0, 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5]\n    s, p = sum_product(numbers)\n    print(f'Sum: {s}, Product: {p}')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 3.3837173645764542,
      "candidate": "s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n\n    return s, p\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 3.3692332899977053,
      "candidate": "n = len(numbers)\n    if n == 0:\n        return (0, 1)\n    if n == 1:\n        return (numbers[0], 1)\n    if n == 2:\n        return (numbers[0] * numbers[1], numbers[0] * numbers[1])\n    if n == 3:\n        return (numbers[0] * numbers[1] * numbers[2], numbers[0] * numbers[1] * numbers[2])\n    if n == 4:\n        return (numbers[0] * numbers[1] * numbers[2] * numbers[3], numbers[0] * numbers[1] * numbers[2] * numbers[3])\n    if n == 5:\n        return (numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4], numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4])\n    if n == 6:\n        return (numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5], numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5])\n    if n == 7:\n        return (numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6], numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6])\n    if n == 8:\n        return (numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7], numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7])\n    if n == 9:\n        return (numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5] * numbers[6] * numbers[7]"
    },
    {
      "rank": 47,
      "score": 3.3238442690503462,
      "candidate": "if not numbers:\n        return 0, 1\n\n    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n\n\ndef sum_product_2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_2([])\n    (0, 1)\n    >>> sum_product_2([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n\n    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n    assert sum_product_2([]) == (0, 1)\n    assert sum_product_2([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 48,
      "score": 3.305838144420434,
      "candidate": "s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 49,
      "score": 3.2712800217929825,
      "candidate": "sum, product = 0, 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product"
    },
    {
      "rank": 50,
      "score": 3.2483570765056164,
      "candidate": "if not numbers:\n        return (0, 1)\n    sums = [0] * len(numbers)\n    products = [1] * len(numbers)\n    for i, number in enumerate(numbers):\n        sums[i] += number\n        products[i] *= number\n    return tuple(sums), tuple(products)\n\n\nif __name__ == \"__main__\":\n    print(sum_product([1, 2, 3, 4]))"
    },
    {
      "rank": 51,
      "score": 3.1878490091728358,
      "candidate": "s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p"
    },
    {
      "rank": 52,
      "score": 3.1718091447842305,
      "candidate": "n = len(numbers)\n    if n == 0:\n        return (0, 1)\n    elif n == 1:\n        return (numbers[0], 1)\n    else:\n        s, p = 0, 1\n        for i in range(n - 1):\n            s += numbers[i]\n            p *= numbers[i]\n        return (s, p)\n\n\nif __name__ == \"__main__\":\n    print(sum_product([1, 2, 3, 4]))"
    },
    {
      "rank": 53,
      "score": 3.165631715701782,
      "candidate": "numbers = sorted(numbers)\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 54,
      "score": 3.1620419846973977,
      "candidate": "if not numbers:\n        return (0, 1)\n    s = 0\n    p = 1\n    for number in numbers:\n        s += number\n        p *= number\n    return (s, p)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 3.157123666297637,
      "candidate": "if not numbers:\n        return (0, 1)\n    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n\n\ndef test_sum_product() -> None:\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n\n\nif __name__ == \"__main__\":\n    test_sum_product()"
    },
    {
      "rank": 56,
      "score": 3.1209811357830173,
      "candidate": "n = len(numbers)\n    if n == 0:\n        return (0, 1)\n    s = 0\n    p = 1\n    for i in range(n):\n        s += numbers[i]\n        p *= numbers[i]\n    return (s, p)\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n    assert sum_product([1, 2, 3]) == (6, 9)"
    },
    {
      "rank": 57,
      "score": 3.104431797502378,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\ndef main():\n    \"\"\"\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    print(sum_product([1, 2, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 3.0984306179345618,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n\ndef sum_product_recursive(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Recursive version of sum_product.\n    >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n\ndef sum_product_iterative(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Iterative version of sum_product.\n    >>> sum_product_iterative([])\n    (0, 1)\n    >>> sum_product_iterative([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 3.085684140594985,
      "candidate": "s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n\nif __name__ == '__main__':\n    print(*sum_product([1, 2, 3, 4]))"
    },
    {
      "rank": 60,
      "score": 3.055461294854933,
      "candidate": "sum_product = 0\n    product = 1\n    for number in numbers:\n        sum_product += number\n        product *= number\n    return sum_product, product\n\n\ndef main():\n    print(sum_product([1, 2, 3, 4]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 3.033764102343962,
      "candidate": "if not numbers:\n        return 0, 1\n    sum_product = numbers[0]\n    product = 1\n    for number in numbers:\n        sum_product += number\n        product *= number\n    return sum_product, product"
    },
    {
      "rank": 62,
      "score": 2.993251387631033,
      "candidate": "s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return s, p\n\n\nif __name__ == \"__main__\":\n    print(sum_product([1, 2, 3, 4]))"
    },
    {
      "rank": 63,
      "score": 2.963994939209833,
      "candidate": "if not numbers:\n        return (0, 1)\n    return sum_product(numbers[1:]) + (sum(numbers),)\n\n\ndef sum_product_2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_2([])\n    (0, 1)\n    >>> sum_product_2([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return sum_product_2(numbers[1:]) + (sum(numbers),)\n\n\ndef sum_product_3(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_3([])\n    (0, 1)\n    >>> sum_product_3([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return sum_product_3(numbers[1:]) + (sum(numbers),)\n\n\ndef sum_product_4(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_4([])\n    (0, 1)\n    >>> sum_product_4([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return sum_product_4(numbers[1:]) + (sum(numbers),)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod"
    },
    {
      "rank": 64,
      "score": 2.94217585880588,
      "candidate": "s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n\n\nif __name__ == \"__main__\":\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n    assert sum_product([]) == (0, 1)"
    },
    {
      "rank": 65,
      "score": 2.930867849414408,
      "candidate": "total = 0\n    product = 1\n    for n in numbers:\n        total += n\n        product *= n\n    return (total, product)\n\n\ndef test_sum_product():\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n\n\nif __name__ == \"__main__\":\n    print(sum_product([1, 2, 3, 4]))\n    print(sum_product([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 66,
      "score": 2.9071705116680913,
      "candidate": "n = len(numbers)\n    if n == 0:\n        return (0, 1)\n    if n == 1:\n        return (numbers[0], 1)\n    s = numbers[0]\n    p = 1\n    for i in range(1, n):\n        s += numbers[i]\n        p *= numbers[i]\n    return (s, p)\n\n\ndef sum_product_recursive(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    if len(numbers) == 1:\n        return (numbers[0], 1)\n    n = len(numbers)\n    s = numbers[0]\n    p = 1\n    for i in range(1, n):\n        s += numbers[i]\n        p *= numbers[i]\n    return (s, p)\n\n\ndef sum_product_iterative(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative([])\n    (0, 1)\n    >>> sum_product_iterative([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    n = len(numbers)\n    if n == 0:\n        return (0, 1)\n    if n == 1:\n        return (numbers[0], 1)\n    s = numbers[0]\n    p = 1\n    for i in range(1, n):\n        s += numbers[i]\n        p *= numbers[i]\n    return (s,"
    },
    {
      "rank": 67,
      "score": 2.887111849756732,
      "candidate": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n\n\ndef main():\n    \"\"\" Solution to LeetCode problem\n        Sum of Product\n\n    \"\"\"\n    # Note:\n    # The problem asks for a list of integers.\n    # You should return a tuple consisting of a sum and a product of all the integers in a list.\n    # Empty sum and product should be equal to 0 and 1.\n    # The sum should be equal to the sum of products of all the elements in the list.\n    # The product should be equal to the product of all the elements in the list.\n    # Example\n    # Given [1,2,3,4],\n    # Return (12,24).\n    numbers = [1, 2, 3, 4]\n    sum, product = sum_product(numbers)\n    print(sum, product)\n    # Output\n    # 12 24\n    # 12 24\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 2.8829315215254097,
      "candidate": "n = len(numbers)\n    if n == 0:\n        return 0, 1\n    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return s, p\n\n\ndef sum_product_2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_2([])\n    (0, 1)\n    >>> sum_product_2([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return s, p\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 2.882923312638332,
      "candidate": "s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n\n\ndef check_if_sum_is_equal_to_n(n: int) -> bool:\n    \"\"\" Checks if the sum of all integers in a list is equal to n.\n    >>> check_if_sum_is_equal_to_n(0)\n    True\n    >>> check_if_sum_is_equal_to_n(1)\n    True\n    >>> check_if_sum_is_equal_to_n(2)\n    False\n    >>> check_if_sum_is_equal_to_n(3)\n    True\n    >>> check_if_sum_is_equal_to_n(4)\n    False\n    \"\"\"\n    return sum_product(range(n))[0] == n\n\n\ndef check_if_product_is_equal_to_n(n: int) -> bool:\n    \"\"\" Checks if the product of all integers in a list is equal to n.\n    >>> check_if_product_is_equal_to_n(1)\n    True\n    >>> check_if_product_is_equal_to_n(2)\n    False\n    >>> check_if_product_is_equal_to_n(3)\n    True\n    >>> check_if_product_is_equal_to_n(4)\n    False\n    \"\"\"\n    return sum_product(range(n))[1] == n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 2.8541531251033616,
      "candidate": "if not numbers:\n        return (0, 1)\n    s, p = 0, 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n\ndef test_sum_product() -> None:\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n\nif __name__ == \"__main__\":\n    test_sum_product()"
    },
    {
      "rank": 71,
      "score": 2.8494481522053556,
      "candidate": "sum_ = 0\n    product = 1\n    for n in numbers:\n        sum_ += n\n        product *= n\n    return sum_, product\n\n\ndef sum_product_2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Same as sum_product but using a for loop instead of list comprehensions.\n    >>> sum_product_2([])\n    (0, 1)\n    >>> sum_product_2([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_ = 0\n    product = 1\n    for n in numbers:\n        sum_ += n\n        product *= n\n    return sum_, product\n\n\nif __name__ == '__main__':\n    print(sum_product([1, 2, 3, 4]))\n    print(sum_product_2([1, 2, 3, 4]))"
    },
    {
      "rank": 72,
      "score": 2.8453938120743927,
      "candidate": "s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return s, p\n\n\ndef sum_product_iter(numbers: List[int]) -> Iterator[Tuple[int, int]]:\n    \"\"\" For a given list of integers, return an iterator consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iter([])\n    (0, 1)\n    >>> sum_product_iter([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    yield s, p\n\n\ndef sum_product_generator(numbers: List[int]) -> Generator[Tuple[int, int], None, None]:\n    \"\"\" For a given list of integers, return a generator consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_generator([])\n    (0, 1)\n    >>> sum_product_generator([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    yield s, p\n\n\ndef sum_product_list(numbers: List[int]) -> List[Tuple[int, int]]:\n    \"\"\" For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_list([])\n    [(0, 1)]\n    >>> sum_product_list([1, 2, 3, 4])\n    [(10, 24)]\n    \"\"\"\n    s = 0\n    p = 1\n    l = []\n    for i in numbers:\n        s += i\n        p *= i\n        l.append((s, p))\n    return l"
    },
    {
      "rank": 73,
      "score": 2.8074588597918417,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4]\n    sum, product = sum_product(numbers)\n    print(sum, product)"
    },
    {
      "rank": 74,
      "score": 2.769680614520106,
      "candidate": "n = len(numbers)\n    if n == 0:\n        return 0, 1\n    s = 0\n    p = 1\n    for i in range(n):\n        s += numbers[i]\n        p *= numbers[i]\n    return s, p\n\n\ndef sum_product2(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return sum of products of all the integers in a list.\n    Empty sum should be equal to 0.\n    >>> sum_product2([])\n    0\n    >>> sum_product2([1, 2, 3, 4])\n    24\n    \"\"\"\n    n = len(numbers)\n    if n == 0:\n        return 0\n    s = 0\n    for i in range(n):\n        s += numbers[i] * i\n    return s"
    },
    {
      "rank": 75,
      "score": 2.768291153593769,
      "candidate": "sum = 0\n    product = 1\n    for n in numbers:\n        sum += n\n        product *= n\n    return sum, product\n\ndef sum_product_recursive(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum_product_recursive(numbers[1:]) + numbers[0], numbers[0]\n\ndef sum_product_iterative(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative([])\n    (0, 1)\n    >>> sum_product_iterative([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    sum, product = numbers[0], numbers[0]\n    for n in numbers[1:]:\n        sum += n\n        product *= n\n    return sum, product\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n    assert sum_product_recursive([]) == (0, 1)\n    assert sum_product_recursive([1, 2, 3, 4]) == (10, 24)\n    assert sum_product_iterative([]) == (0, 1)\n    assert sum_product_iterative([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 76,
      "score": 2.7671351232148718,
      "candidate": "if not numbers:\n        return (0, 1)\n\n    product = 1\n    sum = 0\n    for number in numbers:\n        product *= number\n        sum += number\n\n    return (sum, product)"
    },
    {
      "rank": 77,
      "score": 2.765262807032524,
      "candidate": "sum, product = 0, 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product"
    },
    {
      "rank": 78,
      "score": 2.760412881077355,
      "candidate": "if not numbers:\n        return 0, 1\n    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p"
    },
    {
      "rank": 79,
      "score": 2.7278086377374087,
      "candidate": "numbers = [int(n) for n in numbers]\n    sum_product = 0\n    product = 1\n    for n in numbers:\n        sum_product += n\n        product *= n\n    return sum_product, product\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]\n    print(sum_product(numbers))"
    },
    {
      "rank": 80,
      "score": 2.718856235379514,
      "candidate": "sum = 0\n    product = 1\n    for i in numbers:\n        sum += i\n        product *= i\n    return sum, product"
    },
    {
      "rank": 81,
      "score": 2.6996806550405976,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\ndef solve(numbers: List[int]) -> int:\n    \"\"\" Return the sum of all the integers in the list, and the product of all the integers in the list.\n    >>> solve([1, 2, 3, 4])\n    10\n    >>> solve([])\n    0\n    \"\"\"\n    sum, product = sum_product(numbers)\n    return sum\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4]\n    print(\"sum:\", solve(numbers))\n    numbers = []\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4, 5]\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4, 5, 6]\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7]\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(\"sum:\", solve(numbers))\n    numbers = [1, 2, 3, 4,"
    },
    {
      "rank": 82,
      "score": 2.6991466938853015,
      "candidate": "sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n\n    return sum, product\n\n\ndef find_minimum(numbers: List[int]) -> int:\n    \"\"\" Find the minimum value in a given list of integers.\n    >>> find_minimum([])\n    0\n    >>> find_minimum([1, 2, 3, 4])\n    1\n    >>> find_minimum([10, 20, 30, 40])\n    10\n    \"\"\"\n    return min(numbers)\n\n\ndef find_maximum(numbers: List[int]) -> int:\n    \"\"\" Find the maximum value in a given list of integers.\n    >>> find_maximum([])\n    0\n    >>> find_maximum([1, 2, 3, 4])\n    4\n    >>> find_maximum([10, 20, 30, 40])\n    40\n    \"\"\"\n    return max(numbers)\n\n\ndef find_median(numbers: List[int]) -> int:\n    \"\"\" Find the median value in a given list of integers.\n    >>> find_median([])\n    0\n    >>> find_median([1, 2, 3, 4])\n    2\n    >>> find_median([10, 20, 30, 40])\n    25\n    \"\"\"\n    return (find_minimum(numbers) + find_maximum(numbers)) // 2"
    },
    {
      "rank": 83,
      "score": 2.6615389998470205,
      "candidate": "if not numbers:\n        return (0, 1)\n    n = len(numbers)\n    s = sum(numbers)\n    p = 1\n    for i in range(n):\n        p *= numbers[i]\n        s += numbers[i]\n    return (s, p)\n\n\nif __name__ == \"__main__\":\n    print(sum_product([1, 2, 3, 4]))"
    },
    {
      "rank": 84,
      "score": 2.6400778958026456,
      "candidate": "# Initialize sum and product\n    sum_product = 0\n    product = 1\n\n    for number in numbers:\n        # Add the number to the sum\n        sum_product += number\n\n        # Multiply the product by the number\n        product *= number\n\n    return sum_product, product"
    },
    {
      "rank": 85,
      "score": 2.580391238388681,
      "candidate": "sum_ = 0\n    product_ = 1\n\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n\n    return sum_, product_\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4]\n    sum_, product_ = sum_product(numbers)\n    print(\"Sum:\", sum_)\n    print(\"Product:\", product_)"
    },
    {
      "rank": 86,
      "score": 2.5459879622393946,
      "candidate": "s = 0\n    p = 1\n\n    for n in numbers:\n        s += n\n        p *= n\n\n    return s, p\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n    assert sum_product([1, 1, 1, 1]) == (1, 4)"
    },
    {
      "rank": 87,
      "score": 2.493584439832788,
      "candidate": "numbers_sum = 0\n    numbers_product = 1\n    for number in numbers:\n        numbers_sum += number\n        numbers_product *= number\n    return numbers_sum, numbers_product\n\n\ndef test_sum_product(numbers: List[int]) -> None:\n    \"\"\" Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    >>> test_sum_product([])\n    (0, 1)\n    >>> test_sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    assert sum_product(numbers) == (10, 24)"
    },
    {
      "rank": 88,
      "score": 2.4711445355220496,
      "candidate": "if not numbers:\n        return (0, 1)\n\n    # Sum of all the numbers in the list\n    sum = sum(numbers)\n\n    # Product of all the numbers in the list\n    product = 1\n    for number in numbers:\n        product *= number\n\n    return (sum, product)"
    },
    {
      "rank": 89,
      "score": 2.446832512996986,
      "candidate": "sum = 0\n    product = 1\n\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return sum, product\n\n\ndef sum_product_recursive(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return sum_product_recursive(numbers[1:]) + (numbers[0] * sum_product_recursive(numbers[1:])[1],)\n\n\nif __name__ == \"__main__\":\n    print(sum_product([1, 2, 3, 4]))\n    print(sum_product_recursive([1, 2, 3, 4]))"
    },
    {
      "rank": 90,
      "score": 2.4245032112888487,
      "candidate": "sum, product = 0, 1\n    for n in numbers:\n        sum, product = sum + n, product * n\n    return sum, product"
    },
    {
      "rank": 91,
      "score": 2.4018966879596646,
      "candidate": "s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 92,
      "score": 2.389578175014489,
      "candidate": "# TODO: write a recursive implementation.\n    # TODO: handle the case when the input is an empty list.\n    if not numbers:\n        return 0, 1\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p"
    },
    {
      "rank": 93,
      "score": 2.3359069755507846,
      "candidate": "if not numbers:\n        return 0, 1\n\n    s = sum(numbers)\n    p = 1\n    for n in numbers:\n        p *= n\n    return s, p\n\n\nif __name__ == \"__main__\":\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
      "rank": 94,
      "score": 2.293848149332354,
      "candidate": "sum_product = 0\n    product = 1\n\n    for number in numbers:\n        sum_product += number\n        product *= number\n\n    return (sum_product, product)"
    },
    {
      "rank": 95,
      "score": 2.287625906893272,
      "candidate": "s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return s, p"
    },
    {
      "rank": 96,
      "score": 2.260739004816286,
      "candidate": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return sum_, product"
    },
    {
      "rank": 97,
      "score": 2.137541083743484,
      "candidate": "if not numbers:\n        return 0, 1\n\n    sums = [0] * len(numbers)\n    products = [1] * len(numbers)\n    for i in range(len(numbers)):\n        sums[i] = numbers[i] + sums[i - 1]\n        products[i] = numbers[i] * products[i - 1]\n\n    return sum(sums), sum(products)\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5]\n    sum, product = sum_product(numbers)\n    print(\"sum\", sum)\n    print(\"product\", product)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 98,
      "score": 2.118479922318633,
      "candidate": "# This is a simple solution using a set and a for loop.\n    sums = set()\n    products = set()\n    for number in numbers:\n        sums.add(number)\n        products.add(number ** 2)\n    return sum(sums), sum(products)\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4]\n    sums, products = sum_product(numbers)\n    print(f'Sums: {sums}')\n    print(f'Products: {products}')"
    },
    {
      "rank": 99,
      "score": 2.043359877671101,
      "candidate": "sum = 0\n    product = 1\n\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return sum, product"
    },
    {
      "rank": 100,
      "score": 2.020164938060112,
      "candidate": "# type: (List[int]) -> Tuple[int, int]\n    # type: (List[int]) -> Tuple[int, int]\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}