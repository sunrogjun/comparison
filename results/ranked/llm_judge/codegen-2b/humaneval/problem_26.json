{
  "timestamp": "2025-09-14T16:19:40.037464",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 26,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# TODO: implement\n    return numbers"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "seen: Set[int] = set()\n    new_numbers: List[int] = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            new_numbers.append(number)\n    return new_numbers"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# This is a list of unique integers.\n    unique_numbers = []\n    # We keep track of the current index of the last number that we have seen.\n    # We use this index to get the next number from the list.\n    index = 0\n    # We keep track of the current number that we are looking at.\n    # We use this number to determine if a duplicate number has already\n    # been seen.\n    current_number = 0\n    for number in numbers:\n        # If the current number is different from the last number that we\n        # have seen, then we add the number to the list of unique numbers.\n        if current_number!= number:\n            unique_numbers.append(number)\n            current_number = number\n            index = index + 1\n        # If the current number is the same as the last number that we have\n        # seen, then we do not add it to the list.\n        else:\n            current_number = number\n    return unique_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "seen: Set[int] = set()\n    result: List[int] = []\n    for number in numbers:\n        if number in seen:\n            continue\n        result.append(number)\n        seen.add(number)\n    return result\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            yield num\n    return\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "result = []\n    for i in range(len(numbers)):\n        if i > 0 and numbers[i] == numbers[i - 1]:\n            continue\n        result.append(numbers[i])\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Keep track of the number of times each value occurs\n    counts = collections.Counter(numbers)\n    # Return a list of the unique values\n    return list(counts.keys())\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "seen = set()\n    for i in numbers:\n        if i not in seen:\n            seen.add(i)\n            yield i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 9.370583536698913,
      "candidate": "counts = {x: 0 for x in numbers}\n    return [x for x in numbers if counts[x] == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 9.234050852198141,
      "candidate": "seen = set()\n    for x in numbers:\n        if x not in seen:\n            seen.add(x)\n            yield x"
    },
    {
      "rank": 12,
      "score": 9.226766272351448,
      "candidate": "if not numbers:\n        return numbers\n    s = set(numbers)\n    return [x for x in numbers if x not in s]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.21346272767743,
      "candidate": "seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n    return result"
    },
    {
      "rank": 14,
      "score": 9.205959372648458,
      "candidate": "duplicates = set(numbers)\n    return [x for x in numbers if x not in duplicates]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.177268828905222,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]"
    },
    {
      "rank": 16,
      "score": 9.122564458729856,
      "candidate": "# TODO: Implement.\n    return numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 8.973005557553902,
      "candidate": "return [x for x in numbers if x not in numbers]"
    },
    {
      "rank": 18,
      "score": 8.95994420569242,
      "candidate": "result = []\n    for i in numbers:\n        if i not in result:\n            result.append(i)\n    return result\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n    assert remove_duplicates([2, 3, 2, 1, 3]) == [2, 3, 1]"
    },
    {
      "rank": 19,
      "score": 8.946210893390457,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 20,
      "score": 8.932217008005624,
      "candidate": "res = []\n    for n in numbers:\n        if n not in res:\n            res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 21,
      "score": 8.910084504002544,
      "candidate": "# Assume that numbers is a list of integers.\n    # Remove duplicate elements from the list.\n    # Return the list without duplicates.\n    numbers_copy = list(numbers)\n    for i in range(len(numbers)):\n        if i > 0 and numbers[i] == numbers[i - 1]:\n            numbers_copy.remove(numbers[i])\n    return numbers_copy"
    },
    {
      "rank": 22,
      "score": 8.85571690049604,
      "candidate": "new_numbers = []\n    for number in numbers:\n        if number not in new_numbers:\n            new_numbers.append(number)\n    return new_numbers"
    },
    {
      "rank": 23,
      "score": 8.850707355641543,
      "candidate": "return [x for x in numbers if x not in set(numbers)]\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))"
    },
    {
      "rank": 24,
      "score": 8.8281618090209,
      "candidate": "seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            yield num"
    },
    {
      "rank": 25,
      "score": 8.81367773444215,
      "candidate": "# Note: This is a Python implementation of the following code:\n    # for i in range(len(numbers)):\n    #     for j in range(i + 1, len(numbers)):\n    #         if numbers[i] == numbers[j]:\n    #             del numbers[j]\n    # return numbers\n\n    new_numbers = []\n    for number in numbers:\n        if number not in new_numbers:\n            new_numbers.append(number)\n    return new_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.76828871349479,
      "candidate": "if not numbers:\n        return []\n    res = []\n    for i in numbers:\n        if i not in res:\n            res.append(i)\n    return res"
    },
    {
      "rank": 27,
      "score": 8.750282588864879,
      "candidate": "res = []\n    for n in numbers:\n        if n not in res:\n            res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n    assert remove_duplicates([1, 2, 3, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([2, 2, 3, 3, 4]) == [2, 3, 4]"
    },
    {
      "rank": 28,
      "score": 8.715724466237427,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]"
    },
    {
      "rank": 29,
      "score": 8.692801520950061,
      "candidate": "# TODO: find a way to do this without using a copy\n    # TODO: find a way to do this without using a copy\n    # TODO: find a way to do this without using a copy\n    return [x for x in set(numbers)]"
    },
    {
      "rank": 30,
      "score": 8.632293453617281,
      "candidate": "return [x for x in set(numbers) if x not in numbers]"
    },
    {
      "rank": 31,
      "score": 8.625262456968262,
      "candidate": "result = []\n    for i, number in enumerate(numbers):\n        if i == 0 or numbers[i - 1]!= number:\n            result.append(number)\n    return result\n\nif __name__ == '__main__':\n    print(remove_duplicates([1, 2, 2, 3, 4]))\n    print(remove_duplicates([1, 1, 2, 2, 3, 4]))"
    },
    {
      "rank": 32,
      "score": 8.625142247198651,
      "candidate": "seen: Set[int] = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]"
    },
    {
      "rank": 33,
      "score": 8.616253589228675,
      "candidate": "seen = set()\n    result = []\n    for element in numbers:\n        if element in seen:\n            continue\n        seen.add(element)\n        result.append(element)\n    return result\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]"
    },
    {
      "rank": 34,
      "score": 8.610076160146226,
      "candidate": "seen = set()\n    result = []\n    for x in numbers:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.606486429141842,
      "candidate": "output = []\n    for i, number in enumerate(numbers):\n        if i > 0 and number == numbers[i - 1]:\n            continue\n        output.append(number)\n    return output\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))"
    },
    {
      "rank": 36,
      "score": 8.60156811074208,
      "candidate": "result = []\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i]!= numbers[i-1]:\n            result.append(numbers[i])\n    return result"
    },
    {
      "rank": 37,
      "score": 8.565425580227462,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]"
    },
    {
      "rank": 38,
      "score": 8.548876241946822,
      "candidate": "# sort, then remove duplicates\n    sorted_numbers = sorted(numbers)\n    return list(set(sorted_numbers))"
    },
    {
      "rank": 39,
      "score": 8.542875062379007,
      "candidate": "seen: Set[int] = set()\n    result: List[int] = []\n    for x in numbers:\n        if x not in seen:\n            result.append(x)\n            seen.add(x)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.53012858503943,
      "candidate": "output = []\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i]!= numbers[i - 1]:\n            output.append(numbers[i])\n    return output\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.499905739299377,
      "candidate": "seen: Set[int] = set()\n    for i in numbers:\n        if i not in seen:\n            seen.add(i)\n            yield i"
    },
    {
      "rank": 42,
      "score": 8.478208546788407,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.437695832075478,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]"
    },
    {
      "rank": 44,
      "score": 8.426531424889468,
      "candidate": "result = []\n    seen = set()\n    for item in numbers:\n        if item in seen:\n            continue\n        seen.add(item)\n        result.append(item)\n    return result"
    },
    {
      "rank": 45,
      "score": 8.408439383654278,
      "candidate": "return [x for x in numbers if not x in numbers[:]]"
    },
    {
      "rank": 46,
      "score": 8.386620303250325,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.375312293858853,
      "candidate": "numbers = sorted(numbers)\n    seen = set()\n    result = []\n    for x in numbers:\n        if x not in seen:\n            result.append(x)\n            seen.add(x)\n    return result\n\nif __name__ == '__main__':\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]"
    },
    {
      "rank": 48,
      "score": 8.351614956112536,
      "candidate": "seen = set()\n    for n in numbers:\n        if n in seen:\n            continue\n        seen.add(n)\n    return [n for n in numbers if n not in seen]"
    },
    {
      "rank": 49,
      "score": 8.331556294201176,
      "candidate": "counts = collections.Counter(numbers)\n    return [n for n, c in counts.items() if c == 1]\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))"
    },
    {
      "rank": 50,
      "score": 8.327375965969855,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.327367757082776,
      "candidate": "return [n for i, n in enumerate(numbers) if i == numbers.index(n)]\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 1, 1, 2, 2, 3]) == [1, 2, 3]\n    assert remove_duplicates([2, 2, 3, 4, 4, 4]) == [2, 3, 4]\n    assert remove_duplicates([1, 1, 2, 2, 3]) == [1, 2, 3]"
    },
    {
      "rank": 52,
      "score": 8.298597569547805,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"
    },
    {
      "rank": 53,
      "score": 8.2938925966498,
      "candidate": "seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            yield num\n    return"
    },
    {
      "rank": 54,
      "score": 8.289838256518838,
      "candidate": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.251903304236286,
      "candidate": "result = []\n    for i in numbers:\n        if i not in result:\n            result.append(i)\n    return result"
    },
    {
      "rank": 56,
      "score": 8.214125058964552,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]"
    },
    {
      "rank": 57,
      "score": 8.212735598038213,
      "candidate": "# Sort the list to remove duplicates\n    numbers = sorted(numbers)\n    # Keep the first element, and remove the rest\n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i - 1]:\n            numbers.pop(i)\n    return numbers"
    },
    {
      "rank": 58,
      "score": 8.211579567659316,
      "candidate": "# Remove duplicates from the input\n    # Using set to remove duplicates from the list\n    return [x for x in set(numbers) if x not in numbers]"
    },
    {
      "rank": 59,
      "score": 8.209707251476969,
      "candidate": "duplicates = []\n    for i in range(len(numbers)):\n        if i > 0 and numbers[i] == numbers[i - 1]:\n            duplicates.append(numbers[i])\n    return duplicates\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 2, 4]\n    print('Original: {}'.format(numbers))\n    print('Duplicates: {}'.format(remove_duplicates(numbers)))"
    },
    {
      "rank": 60,
      "score": 8.2048573255218,
      "candidate": "unique_elements = [numbers[0]]\n    for element in numbers[1:]:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return unique_elements"
    },
    {
      "rank": 61,
      "score": 8.172253082181854,
      "candidate": "seen: Set[int] = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 62,
      "score": 8.163300679823958,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.144125099485041,
      "candidate": "seen = set()\n    output = []\n    for number in numbers:\n        if number not in seen:\n            output.append(number)\n            seen.add(number)\n    return output\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 2, 2, 3]) == [1, 2, 3]\n    assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 64,
      "score": 8.143591138329747,
      "candidate": "return [x for x in numbers if x not in set(numbers)]"
    },
    {
      "rank": 65,
      "score": 8.121884567141883,
      "candidate": "seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result"
    },
    {
      "rank": 66,
      "score": 8.105983444291466,
      "candidate": "return [x for x in numbers if x not in set(numbers)]"
    },
    {
      "rank": 67,
      "score": 8.08452234024709,
      "candidate": "# TODO: Refactor code with type annotations\n    # TODO: Use a better solution\n    unique_numbers = []  # type: List[int]\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n    assert remove_duplicates([1, 2, 3, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 2, 3, 2, 4, 4]) == [1, 2, 3, 4]"
    },
    {
      "rank": 68,
      "score": 8.024835682833125,
      "candidate": "seen: Set[int] = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]"
    },
    {
      "rank": 69,
      "score": 7.990432406683839,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]"
    },
    {
      "rank": 70,
      "score": 7.938028884277233,
      "candidate": "return [x for x, y in collections.Counter(numbers).items() if y == 1]"
    },
    {
      "rank": 71,
      "score": 7.915588979966494,
      "candidate": "new_numbers = []\n    for n in numbers:\n        if n not in new_numbers:\n            new_numbers.append(n)\n    return new_numbers"
    },
    {
      "rank": 72,
      "score": 7.8912769574414305,
      "candidate": "seen = set()\n    result = []\n    for i in numbers:\n        if i in seen:\n            continue\n        else:\n            seen.add(i)\n            result.append(i)\n    return result"
    },
    {
      "rank": 73,
      "score": 7.868947655733293,
      "candidate": "# Sort numbers\n    numbers.sort()\n    # Remove duplicates\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 7.84634113240411,
      "candidate": "return list(set(numbers))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 7.834022619458933,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\nif __name__ == '__main__':\n    numbers = [1, 2, 2, 3, 4, 2, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 76,
      "score": 7.780351419995229,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 7.738292593776799,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]"
    },
    {
      "rank": 78,
      "score": 7.7320703513377165,
      "candidate": "seen = set()\n    for i in numbers:\n        if i in seen:\n            continue\n        seen.add(i)\n    return list(seen)"
    },
    {
      "rank": 79,
      "score": 7.705183449260731,
      "candidate": "seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            yield num\n    return\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 7.5819855281879285,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]"
    },
    {
      "rank": 81,
      "score": 7.562924366763077,
      "candidate": "seen = set()\n    output = []\n    for i in numbers:\n        if i not in seen:\n            seen.add(i)\n            output.append(i)\n    return output\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 2, 2, 3]) == [1, 2, 3]"
    },
    {
      "rank": 82,
      "score": 7.4878043221155455,
      "candidate": "seen = set()\n    for item in numbers:\n        if item not in seen:\n            seen.add(item)\n            yield item\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 7.464609382504557,
      "candidate": "d = collections.defaultdict(list)\n    for n in numbers:\n        d[n].append(n)\n    return [x for x in d.values() if len(x) == 1]"
    },
    {
      "rank": 84,
      "score": 7.134571892399572,
      "candidate": "res = []\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i]!= numbers[i-1]:\n            res.append(numbers[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n    assert remove_duplicates([1, 1, 1, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "unique_numbers = []\n    for n in numbers:\n        if n not in unique_numbers:\n            unique_numbers.append(n)\n    return unique_numbers\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "result = []\n    seen = set()\n    for i in numbers:\n        if i not in seen:\n            result.append(i)\n            seen.add(i)\n    return result\n\n\ndef main():\n    import time\n\n    start = time.perf_counter()\n    print(remove_duplicates([1, 2, 2, 3, 3, 2, 4, 4]))\n    print(time.perf_counter() - start)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "# return list(set(numbers))\n    res = []\n    for i in range(len(numbers)):\n        if i == 0:\n            res.append(numbers[0])\n        elif numbers[i]!= numbers[i - 1]:\n            res.append(numbers[i])\n    return res\n\n\ndef remove_duplicates_iter(numbers: List[int]) -> List[int]:\n    \"\"\" Iterate over the input list and remove duplicates.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_iter([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # return list(set(numbers))\n    res = []\n    for i in range(len(numbers)):\n        if i == 0:\n            res.append(numbers[0])\n        elif numbers[i]!= numbers[i - 1]:\n            res.append(numbers[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))\n    print(remove_duplicates_iter([1, 2, 3, 2, 4]))"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "return [x for x, i in enumerate(numbers) if numbers[i]!= x]\n\n\ndef main() -> None:\n    \"\"\"\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    print(remove_duplicates([1, 2, 3, 2, 4]))\n\n\nif __name__ == '__main__':\n    raise SystemExit(pytest.main([__file__] + sys.argv[1:]))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_2([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen]"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# TODO: Implement this function\n    pass"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_2([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    new_list = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            new_list.append(num)\n    return new_list\n\n\ndef remove_duplicates_3(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_3([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    new_list = []\n    for num in numbers:\n        if num not in seen:\n            new_list.append(num)\n            seen.add(num)\n    return new_list\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))\n    print(remove_duplicates_2(numbers))\n    print(remove_duplicates_3(numbers))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "res = []\n    for x in numbers:\n        if x not in res:\n            res.append(x)\n    return res\n\n\ndef remove_duplicates_recursive(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_recursive([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    res = []\n    for x in numbers:\n        if x not in res:\n            res.append(x)\n    return res"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "return [n for n in numbers if n not in set(numbers)]\n\n\ndef find_all_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, find all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> find_all_duplicates([1, 2, 3, 2, 4])\n    [2, 3, 4]\n    \"\"\"\n    return [n for n in numbers if n in set(numbers)]\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_all_duplicates([1, 2, 3, 2, 4]) == [2, 3, 4], \"1\"\n    assert find_all_duplicates([2, 2, 3, 2, 3, 4]) == [2, 3, 4], \"2\"\n    assert find_all_duplicates([2, 2, 3, 2, 4, 5]) == [2, 3, 4, 5], \"3\"\n    assert find_all_duplicates([2, 2, 3, 2, 4, 5, 6]) == [2, 3, 4, 5, 6], \"4\"\n    assert find_all_duplicates([2, 2, 3, 2, 4, 5, 6, 7]) == [2, 3, 4, 5, 6, 7], \"5\"\n    assert find_all_duplicates([2, 2, 3, 2, 4, 5, 6, 7, 8]) == [2, 3, 4, 5, 6, 7, 8], \"6\""
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result\n\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_2([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result\n\n\nif __name__ == '__main__':\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n    assert remove_duplicates_2([1, 2, 3, 2, 4]) == [1, 3, 4]"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "seen = set()\n    output = []\n    for item in numbers:\n        if item not in seen:\n            seen.add(item)\n            output.append(item)\n    return output\n\n\ndef remove_duplicates_from_list_of_lists(numbers: List[List[int]]) -> List[List[int]]:\n    \"\"\" From a list of lists of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_from_list_of_lists([[1, 2, 3], [2, 4], [3, 5, 3], [1, 2, 3]])\n    [[1, 3, 5], [1, 2, 3]]\n    \"\"\"\n    seen = set()\n    output = []\n    for item in numbers:\n        if item not in seen:\n            seen.add(item)\n            output.append(item)\n    return output\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))\n    print(remove_duplicates_from_list_of_lists([[1, 2, 3], [2, 4], [3, 5, 3], [1, 2, 3]]))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "res = []\n    for n in numbers:\n        if n not in res:\n            res.append(n)\n    return res\n\n\ndef get_max_len(numbers: List[int]) -> int:\n    \"\"\" Get the maximum length of a list of numbers.\n    >>> get_max_len([1, 2, 3, 4])\n    4\n    \"\"\"\n    return max(map(len, numbers))\n\n\nif __name__ == \"__main__\":\n    assert get_max_len([1, 2, 3, 4]) == 4\n    assert get_max_len([1, 2, 3, 2]) == 3\n    assert get_max_len([1, 2, 3, 4, 5]) == 5\n    assert get_max_len([1, 2, 3, 4, 5, 6]) == 6"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "seen = set()\n    for i in numbers:\n        if i in seen:\n            continue\n        seen.add(i)\n        yield i\n    return\n\n\ndef main():\n    \"\"\"\n    Remove duplicates from a list of integers.\n    \"\"\"\n    numbers = [1, 2, 3, 2, 4, 5]\n    print(\"remove_duplicates({})\".format(numbers))\n    print(remove_duplicates(numbers))\n    return\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_2([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [x for x in numbers if x not in numbers]"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return [x for x in numbers if x not in set(numbers)]\n\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_2([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [x for x in numbers if x not in set(numbers)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "unique_numbers = []\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i]!= numbers[i-1]:\n            unique_numbers.append(numbers[i])\n    return unique_numbers\n\n\ndef remove_duplicates_from_list(numbers: List[int]) -> List[int]:\n    \"\"\" Remove all elements that occur more than once from the input list.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_from_list([1, 2, 3, 2, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i]!= numbers[i-1]:\n            unique_numbers.append(numbers[i])\n    return unique_numbers"
    }
  ]
}