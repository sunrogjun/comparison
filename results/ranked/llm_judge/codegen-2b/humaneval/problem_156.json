{
  "timestamp": "2025-09-14T17:18:13.546276",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 156,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "roman = []\n    for i in range(1, number+1):\n        if i % 10 == 0:\n            roman.append('M')\n            i /= 10\n        elif i % 100 == 0:\n            roman.append('CM')\n            i /= 100\n        elif i % 1000 == 0:\n            roman.append('CD')\n            i /= 1000\n        else:\n            roman.append(str(i))\n    return ''.join(roman)\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral in lowercase, obtain its integer equivalent.\n    Restrictions: 1 <= roman_numeral <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    roman_numeral = roman_numeral.lower()\n    number = 0\n    for i in range(len(roman_numeral)):\n        if roman_numeral[i] == 'M':\n            number += 1000\n        elif roman_numeral[i] == 'CM':\n            number += 900\n        elif roman_numeral[i] == 'CD':\n            number += 500\n        elif roman_numeral[i] == 'XC':\n            number += 400\n        elif roman_numeral[i] == 'L':\n            number += 100\n        elif roman_numeral[i] == 'XL':\n            number += 90\n        elif roman_numeral[i] == 'X':\n            number += 10\n        elif roman_numeral[i] == 'IX':\n            number += 9\n        elif roman_numeral[i] == 'V':\n            number += 5\n        elif roman_numeral[i] == 'IV':\n            number += 4\n        elif roman_numeral[i] == 'I':\n            number += 1\n        else:\n            return None\n    return number\n\nif __name__ == '__main__':\n    import doct"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n    if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == 21:\n        return 'XXI'\n    if number == 22:\n        return 'XXII'\n    if number == 23:\n        return 'XXIII'\n    if number == 24:\n        return 'XXIV'\n    if number == 25:\n        return 'XXV'\n    if number == 26:\n        return 'XXVI'\n    if number == 27:\n        return 'XXVII'\n    if number == 28:\n        return 'XXVIII'\n    if number == 29:\n        return 'XXIX'\n    if number == 30:\n        return 'XXX'\n    if number == 31:\n        return 'XXXI'\n    if number == 32:\n        return 'XXXII'\n    if number == 33:\n        return 'XXXIII'\n    if number == 34:\n        return 'XXX"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if not 0 <= number <= 1000:\n        raise ValueError(\"Invalid input\")\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        if number % i == 0:\n            roman_numeral += roman_numerals[i] * int(number/i)\n    return roman_numeral.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n    if number == 1:\n        return \"I\"\n    elif number == 2:\n        return \"II\"\n    elif number == 3:\n        return \"III\"\n    elif number == 4:\n        return \"IV\"\n    elif number == 5:\n        return \"V\"\n    elif number == 6:\n        return \"VI\"\n    elif number == 7:\n        return \"VII\"\n    elif number == 8:\n        return \"VIII\"\n    elif number == 9:\n        return \"IX\"\n    elif number == 10:\n        return \"X\"\n    elif number == 11:\n        return \"XI\"\n    elif number == 12:\n        return \"XII\"\n    elif number == 13:\n        return \"XIII\"\n    elif number == 14:\n        return \"XIV\"\n    elif number == 15:\n        return \"XV\"\n    elif number == 16:\n        return \"XVI\"\n    elif number == 17:\n        return \"XVII\"\n    elif number == 18:\n        return \"XVIII\"\n    elif number == 19:\n        return \"XIX\"\n    elif number == 20:\n        return \"XX\"\n    elif number == 21:\n        return \"XXI\"\n    elif number == 22:\n        return \"XXII\"\n    elif number == 23:\n        return \"XXIII\"\n    elif number == 24:\n        return \"XXIV\"\n    elif number == 25:\n        return \"XXV\"\n    elif number == 26:\n        return \"XXVI\"\n    elif number == 27:\n        return \"XXVII\"\n    elif number == 28:\n        return \"XXVIII\"\n    elif number == 29:\n        return \"XXIX\"\n    elif number == 30:\n        return \"XXX\"\n    elif number == 31:\n        return \"XXXI\"\n    elif number == 32:\n        return \"XXXII\"\n    elif number == 33:\n        return \"XXXIII\"\n    el"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "result = ''\n    for i in range(1, number + 1):\n        for j in range(0, len(MINI_ROMANS)):\n            if i == j:\n                result = result + MINI_ROMANS[j]\n                continue\n            if i % j == 0:\n                result = result + MINI_ROMANS[i/j] + 'iv'\n                break\n    return result\n\ndef mini_roman_to_int(mini_roman):\n    \"\"\"\n    Given a string containing only roman numeral symbols, return its integer equivalent.\n    Restrictions: 1 <= len(mini_roman) <= 1000\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    result = 0\n    for i in range(1, len(mini_roman)):\n        for j in range(0, len(MINI_ROMANS)):\n            if mini_roman[i-1] == MINI_ROMANS[j]:\n                result = result + j\n                break\n    return result\n\ndef mini_roman_to_roman(mini_roman):\n    \"\"\"\n    Given a string containing only roman numeral symbols, return its roman numeral equivalent.\n    Restrictions: 1 <= len(mini_roman) <= 1000\n    Examples:\n    >>> mini_roman_to_roman('xix') == 'IX'\n    >>> mini_roman_to_roman('clii') == 'CL II'\n    >>> mini_roman_to_roman('cdxxvi') == 'CD XXV III'\n    \"\"\"\n    result = ''\n    for i in range(1, len(mini_roman)):\n        for j in range(0, len(MINI_ROMANS)):\n            if mini_roman[i-1] == MINI_ROMANS[j]:\n                result = result + MINI_ROMANS[j]\n                break\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "roman_numeral = 'MMCMXCIX'\n    numeral = ''\n    for index in range(1, len(roman_numeral)):\n        if number >= roman_numeral[index]:\n            numeral += roman_numeral[index]\n            number -= roman_numeral[index]\n    return numeral\n\ndef mini_roman_to_int(string):\n    \"\"\"\n    Given a roman numeral, obtain its equivalent integer value.\n    Restrictions: 1 <= string <= 1000\n    \"\"\"\n    number = 0\n    for index, value in enumerate(string):\n        if value == 'I':\n            number += 1\n        else:\n            number += 10 ** index\n    return number\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "roman = ''\n    for num in range(1, number+1):\n        roman = roman + roman_numeral[num]\n    return roman\n\n\n# Tests\ndef test_int_to_mini_roman():\n    assert int_to_mini_roman(19) == 'xix'\n    assert int_to_mini_roman(152) == 'clii'\n    assert int_to_mini_roman(426) == 'cdxxvi'\n\n\ndef test_int_to_mini_roman_raises_error():\n    with pytest.raises(ValueError):\n        int_to_mini_roman(0)\n    with pytest.raises(ValueError):\n        int_to_mini_roman(1000)\n\n\ndef test_int_to_mini_roman_with_error():\n    with pytest.raises(ValueError):\n        int_to_mini_roman(-1)\n\n\ndef test_int_to_mini_roman_with_error_raises_error():\n    with pytest.raises(ValueError):\n        int_to_mini_roman(1000)\n\n\n# Variables\nroman_numeral = [\n    '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX',\n    'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX',\n    'XX', 'XXI', 'XXII', 'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII',\n    'XXIX', 'XXX', 'XXXI', 'XXXII', 'XXXIII', 'XXXIV', 'XXXV', 'XXXVI',\n    'XXXVII', 'XXXVIII', 'XXXIX', 'XL', 'XLI', 'XLII', 'XLIII', 'XLIV',\n    'XLV', 'XLVI', 'XLVII', 'XLVIII', 'XLIX', 'L', 'LI', 'LII', 'LIII',\n    'LIV', 'LV', 'LVI', 'LVII', 'LV"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if not 1 <= number <= 1000:\n        raise ValueError('number must be 1 <= num <= 1000')\n\n    def is_valid(num):\n        \"\"\"\n        Check if num is a valid roman numeral.\n        \"\"\"\n        if not 1 <= num <= 4000:\n            return False\n        if num < 10:\n            return True\n        return sum(int(num // 10) == 3 and 10 ** (num - 10) or 10 ** (num - 9) for num in range(1, 10)) == 1\n\n    result = ''\n    for i in range(1, number + 1):\n        if is_valid(i):\n            result = result + chr(i + ord('a') - 1)\n        elif i == number:\n            result = result + str(i)\n        else:\n            break\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "roman_numeral = \"\"\n    for numeral in range(number, 0, -1):\n        roman_numeral += roman_numeral_to_int[numeral]\n    return roman_numeral[::-1]\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a string representing a roman numeral, return its integer equivalent\n    as a positive integer.\n    Restrictions: roman_numeral is a valid roman numeral (lowercase)\n    Examples: mini_roman_to_int('v') == 5\n    >>> mini_roman_to_int('vii') == 52\n    >>> mini_roman_to_int('iv') == 4\n    >>> mini_roman_to_int('iv') == 4\n    >>> mini_roman_to_int('vii') == 52\n    >>> mini_roman_to_int('iv') == 4\n    >>> mini_roman_to_int('d') == 4\n    >>> mini_roman_to_int('x') == 0\n    >>> mini_roman_to_int('xii') == 52\n    >>> mini_roman_to_int('d') == 4\n    \"\"\"\n    roman_numeral = roman_numeral.upper()\n    roman_numeral = roman_numeral.replace('I', '1')\n    roman_numeral = roman_numeral.replace('V', '5')\n    roman_numeral = roman_numeral.replace('X', '10')\n    roman_numeral = roman_numeral.replace('L', '50')\n    roman_numeral = roman_numeral.replace('C', '100')\n    roman_numeral = roman_numeral.replace('D', '500')\n    roman_numeral = roman_numeral.replace('M', '1000')\n    roman_numeral = roman_numeral.replace('CM', '900')\n    roman_numeral = roman_numeral.replace('CD', '500')\n    roman_numeral = roman_numeral.replace('MD', '400')\n    roman_numeral = roman_numeral.replace('DCC', '300')"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError(\"Invalid input: {}\".format(number))\n\n    roman_numerals = ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxix', 'xxx', 'xxxx']\n    numeral = []\n    for i in range(1, number + 1):\n        numeral.append(roman_numerals[number % 10 - 1])\n        number //= 10\n\n    return ''.join(numeral)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Number must be in range [1, 1000]')\n\n    # http://en.wikipedia.org/wiki/Roman_numerals\n    # http://en.wikipedia.org/wiki/List_of_numerals_from_1_to_3\n    roman_numeral = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n\n    result = ''\n\n    while number > 0:\n        value = number % 10\n        result = roman_numeral[value] + result\n        number //= 10\n\n    return result\n\n\ndef mini_roman_to_int(number):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent, and return it.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> mini_roman_to_int('I') == 1\n    >>> mini_roman_to_int('V') == 5\n    >>> mini_roman_to_int('XXV') == 99\n    >>> mini_roman_to_int('XC') == 40\n    >>> mini_roman_to_int('CM') == 900\n    \"\"\"\n    if number not in roman_numeral:\n        raise ValueError('Invalid roman numeral: %s' % number)\n\n    # http://en.wikipedia.org/wiki/List_of_numerals_from_1_to_3\n    roman_numeral = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 40,\n        'C': 90,\n        'D': 500,\n        'M': 900\n    }\n\n    result = 0\n\n    for letter in number:\n        result += roman_numeral[letter]\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if number == 0:\n        return '0'\n    if number < 0:\n        raise ValueError('Negative numbers not supported')\n\n    result = []\n    while number > 0:\n        if number % 100 < 10:\n            result.append('i')\n        elif number % 100 < 20:\n            result.append('ii')\n        elif number % 100 < 30:\n            result.append('iii')\n        elif number % 100 < 40:\n            result.append('iv')\n        elif number % 100 < 50:\n            result.append('v')\n        elif number % 100 < 60:\n            result.append('vi')\n        elif number % 100 < 70:\n            result.append('vii')\n        elif number % 100 < 80:\n            result.append('viii')\n        elif number % 100 < 90:\n            result.append('ix')\n        elif number % 100 < 100:\n            result.append('x')\n        number /= 100\n\n    return ''.join(result)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError(\"Invalid number\")\n    if number < 20:\n        return chr(number + 48)\n    number = int(number / 20)\n    if number == 1:\n        return chr(number + 9) + 'X'\n    elif number == 2:\n        return chr(number + 6) + 'L'\n    elif number < 100:\n        return chr(number + 4) + 'C'\n    elif number < 1000:\n        return chr(number + 4) + 'X'\n    else:\n        raise ValueError(\"Invalid number\")"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if number < 1 or number > 1000:\n        return ''\n    roman_numeral = ''\n    for numeral in range(1, number + 1):\n        if numeral % 10 == 0:\n            roman_numeral += 'M'\n        elif numeral % 100 == 0:\n            roman_numeral += 'CM'\n        elif numeral % 1000 == 0:\n            roman_numeral += 'CD'\n        else:\n            roman_numeral += 'C'\n    return roman_numeral[::-1]\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral in lowercase, obtain its integer equivalent as a\n    positive integer, and return it in a tuple.\n    Restrictions: roman_numeral is a valid roman numeral, 1 <= len(roman_numeral) <= 1000\n    Examples:\n    >>> mini_roman_to_int('M') == (1000, 0)\n    >>> mini_roman_to_int('CM') == (900, 0)\n    >>> mini_roman_to_int('CD') == (400, 0)\n    >>> mini_roman_to_int('D') == (400, 1)\n    >>> mini_roman_to_int('C') == (100, 1)\n    >>> mini_roman_to_int('L') == (50, 1)\n    >>> mini_roman_to_int('X') == (10, 1)\n    >>> mini_roman_to_int('IX') == (9, 0)\n    >>> mini_roman_to_int('V') == (5, 0)\n    >>> mini_roman_to_int('IV') == (4, 0)\n    >>> mini_roman_to_int('I') == (1, 0)\n    >>> mini_roman_to_int('CX') == (10, 1)\n    >>> mini_roman_to_int('CL') == (50, 1)\n    >>> mini_roman_to_int('CDL') == (400, 1)\n    >>> mini_roman_to_int('CDV') == (400, 2)\n    >>> mini_roman_to_int('CDX') == ("
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Invalid number: {}'.format(number))\n\n    result = []\n    for i in range(1, number + 1):\n        for j in range(1, i):\n            result.append(str(i * j))\n\n    return ''.join(result).lower()\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if number == 0:\n        return \"0\"\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if number == 1:\n        return \"I\"\n    if number % 10 == 1:\n        return str(number % 10) + \"M\"\n    if number % 10 == 2:\n        return str(number % 10) + \"CM\"\n    if number % 10 == 3:\n        return str(number % 10) + \"D\"\n    if number % 10 == 4:\n        return str(number % 10) + \"CD\"\n    if number % 10 == 5:\n        return str(number % 10) + \"C\"\n    if number % 10 == 6:\n        return str(number % 10) + \"XC\"\n    if number % 10 == 7:\n        return str(number % 10) + \"L\"\n    if number % 10 == 8:\n        return str(number % 10) + \"XL\"\n    if number % 10 == 9:\n        return str(number % 10) + \"X\"\n    raise ValueError(\"Number too large\")\n\n#\n# Test code\n#\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I',\n    }\n\n    roman_numeral = ''\n    while number > 0:\n        roman_numeral += roman_numerals[number % 10]\n        number //= 10\n\n    return roman_numeral[::-1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if not 1 <= number <= 1000:\n        raise ValueError('Number {} is out of range [1, 1000].'.format(number))\n\n    num = number\n    roman = ''\n    while num > 0:\n        num, last_num = divmod(num, 10)\n        roman = str(last_num) + roman\n\n    return roman.lower()\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a string, and return it.\n    Restrictions: roman_numeral is in lowercase.\n\n    Examples:\n    >>> mini_roman_to_int('v') == 15\n    >>> mini_roman_to_int('cxxvi') == 426\n    >>> mini_roman_to_int('l') == 50\n    \"\"\"\n    if roman_numeral.lower() not in ['v', 'x', 'l', 'c', 'd','m']:\n        raise ValueError('Invalid roman numeral.')\n\n    numeral = roman_numeral.lower()\n    numeral = numeral[::-1]\n    num = 0\n    for i in range(len(numeral)):\n        if numeral[i] == 'v':\n            num += 5\n        elif numeral[i] == 'x':\n            num += 10\n        elif numeral[i] == 'c':\n            num += 100\n        elif numeral[i] == 'd':\n            num += 500\n        elif numeral[i] =='m':\n            num += 1000\n        elif numeral[i] == 'l':\n            num += 5000\n        else:\n            raise ValueError('Invalid roman numeral.')\n\n    return num\n\n\ndef main():\n    \"\"\"\n    Simple script to test the functions.\n    \"\"\"\n    # Test int_to_mini_roman()\n    print('Test int_to_mini_roman()')\n    for i in range(1, 1000):\n        print('int_to_mini_roman({}) = {}'.format(i, int_to_mini_roman(i)))\n\n    # Test mini_roman_to_int()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "roman_numeral = []\n    for integer in range(1, number + 1):\n        roman_numeral.append(MINI_ROMAN_NUMERALS[number - integer])\n    return ''.join(roman_numeral).lower()\n\n\ndef mini_roman_to_int(numeral):\n    \"\"\"\n    Given a string of roman numeral, obtain its corresponding integer value.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('c') == 3\n    >>> mini_roman_to_int('iv') == 4\n    >>> mini_roman_to_int('dix') == 50\n    >>> mini_roman_to_int('iii') == 3\n    \"\"\"\n    return sum(MINI_ROMAN_NUMERALS[int(numeral[i:i + 1])] for i in range(len(numeral) - 1, -1, -1))\n\n\ndef print_mini_roman_numerals(number):\n    \"\"\"\n    Print a string representation of a given integer in roman numeral format.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> print_mini_roman_numerals(19)\n    XIX\n    >>> print_mini_roman_numerals(152)\n    CLII\n    >>> print_mini_roman_numerals(426)\n    CDXXVI\n    \"\"\"\n    for integer in range(1, number + 1):\n        print(int_to_mini_roman(integer), end='')\n    print()\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "result = \"\"\n    if number < 0:\n        raise ValueError(\"number must be a positive integer\")\n    elif number == 0:\n        return \"nulla\"\n    elif number < 20:\n        result = \"d\"\n        number = number * 10\n    elif number < 100:\n        result = \"c\"\n        number = number * 100\n    elif number < 900:\n        result = \"b\"\n        number = number * 900\n    elif number < 1000:\n        result = \"a\"\n        number = number * 1000\n    else:\n        raise ValueError(\"number too large\")\n\n    for i in range(len(result) - 1, -1, -1):\n        if number % 10 == 0:\n            result = result[:i] + \"m\"\n            number = number / 10\n        elif number % 100 == 0:\n            result = result[:i] + \"cm\"\n            number = number / 100\n        elif number % 900 == 0:\n            result = result[:i] + \"cd\"\n            number = number / 900\n        elif number % 1000 == 0:\n            result = result[:i] + \"d\"\n            number = number / 1000\n        else:\n            break\n    return result"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "roman = []\n    n = 0\n    while number > 0:\n        while number >= 1000:\n            number, r = divmod(number, 1000)\n            roman.append('M')\n        while number >= 900:\n            number, r = divmod(number, 900)\n            roman.append('CM')\n        while number >= 500:\n            number, r = divmod(number, 500)\n            roman.append('D')\n        while number >= 400:\n            number, r = divmod(number, 400)\n            roman.append('CD')\n        while number >= 100:\n            number, r = divmod(number, 100)\n            roman.append('C')\n        while number >= 90:\n            number, r = divmod(number, 90)\n            roman.append('XC')\n        while number >= 50:\n            number, r = divmod(number, 50)\n            roman.append('L')\n        while number >= 40:\n            number, r = divmod(number, 40)\n            roman.append('XL')\n        while number >= 10:\n            number, r = divmod(number, 10)\n            roman.append('X')\n        while number >= 9:\n            number, r = divmod(number, 9)\n            roman.append('IX')\n        while number >= 5:\n            number, r = divmod(number, 5)\n            roman.append('V')\n        while number >= 4:\n            number, r = divmod(number, 4)\n            roman.append('IV')\n        while number >= 1:\n            number, r = divmod(number, 1)\n            roman.append('I')\n    roman.reverse()\n    return ''.join(roman)\n\ndef get_chars(text):\n    \"\"\"\n    Given a string, return a string of all letters in it.\n    \"\"\"\n    return ''.join(c for c in text if c.isalpha())\n\ndef get_words(text):\n    \"\"\"\n    Given a string, return a list of all words in it.\n    \"\"\"\n    words = text.split()\n    return words\n\ndef get_words_in_chars(text):\n    \"\"\"\n    Given a string, return a"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Input must be a positive integer between 1 and 1000')\n\n    result = ''\n\n    for i in range(1, number + 1):\n        if i % 100 < 10:\n            result += chr(ord('a') + i % 100)\n        elif i % 100 < 40:\n            result += chr(ord('a') + i % 100 - 10)\n        elif i % 100 < 50:\n            result += chr(ord('a') + i % 100 - 40)\n        elif i % 100 < 60:\n            result += chr(ord('a') + i % 100 - 50)\n        else:\n            result += chr(ord('a') + i % 100 - 60)\n\n    return result\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral (e.g. 'II'), return its corresponding integer value.\n\n    Examples:\n    >>> mini_roman_to_int('I') == 1\n    >>> mini_roman_to_int('V') == 5\n    >>> mini_roman_to_int('XIX') == 19\n    >>> mini_roman_to_int('CLII') == 152\n    >>> mini_roman_to_int('CDXXVI') == 426\n    \"\"\"\n    if roman_numeral not in 'IVXLV':\n        raise ValueError('Input must be a roman numeral')\n\n    result = 0\n\n    for i in range(len(roman_numeral)):\n        if roman_numeral[i] == 'I':\n            result += 1\n        elif roman_numeral[i] == 'V':\n            result += 5\n        elif roman_numeral[i] == 'X':\n            result += 10\n        elif roman_numeral[i] == 'L':\n            result += 50\n        elif roman_numeral[i] == 'C':\n            result += 100\n        elif roman_numeral[i] == 'D':\n            result += 500\n        elif roman_numeral[i] == 'M':\n            result += 1000\n\n    return result\n\n\ndef main():"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return ''.join(mini_roman(number))\n\n\ndef mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a list of\n    strings, and return it.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman(19) == ['IX', 'XIX']\n    >>> mini_roman(152) == ['CLII', 'CLIII']\n    >>> mini_roman(426) == ['CDXXVI']\n    \"\"\"\n    roman = []\n    num = number\n    while num > 0:\n        roman.append(mini_numeral[num % 10])\n        num = int(num / 10)\n    roman.reverse()\n    return roman\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.982086980445024,
      "candidate": "if number < 1:\n        raise ValueError('Number should be 1 or greater')\n\n    if number == 1:\n        return 'I'\n    elif number == 2:\n        return 'II'\n    elif number == 3:\n        return 'III'\n    elif number == 4:\n        return 'IV'\n    elif number == 5:\n        return 'V'\n    elif number == 6:\n        return 'VI'\n    elif number == 7:\n        return 'VII'\n    elif number == 8:\n        return 'VIII'\n    elif number == 9:\n        return 'IX'\n    elif number == 10:\n        return 'X'\n    elif number == 11:\n        return 'XI'\n    elif number == 12:\n        return 'XII'\n    elif number == 13:\n        return 'XIII'\n    elif number == 14:\n        return 'XIV'\n    elif number == 15:\n        return 'XV'\n    elif number == 16:\n        return 'XVI'\n    elif number == 17:\n        return 'XVII'\n    elif number == 18:\n        return 'XVIII'\n    elif number == 19:\n        return 'XIX'\n    elif number == 20:\n        return 'XX'\n    elif number == 21:\n        return 'XXI'\n    elif number == 22:\n        return 'XXII'\n    elif number == 23:\n        return 'XXIII'\n    elif number == 24:\n        return 'XXIV'\n    elif number == 25:\n        return 'XXV'\n    elif number == 26:\n        return 'XXVI'\n    elif number == 27:\n        return 'XXVII'\n    elif number == 28:\n        return 'XXVIII'\n    elif number == 29:\n        return 'XXIX'\n    elif number == 30:\n        return 'XXX'\n    elif number == 31:\n        return 'XXXI'\n    elif number == 32:\n        return 'XXXII'\n    elif number == 33:\n        return 'XXXIII'\n    elif number == 34:"
    },
    {
      "rank": 25,
      "score": 9.963994939209833,
      "candidate": "roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    if number > 999:\n        return '{}'.format(roman_numerals.get(number % 1000, '?'))\n    else:\n        return '{}{}'.format(roman_numerals.get(number, '?'),\n                             int_to_mini_roman(number // 1000))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.94217585880588,
      "candidate": "if number <= 0:\n        raise ValueError(\"Number should be a positive integer.\")\n    if number >= 1000:\n        raise ValueError(\"Number should be less than 1000.\")\n    if number == 1:\n        return \"I\"\n    if number == 2:\n        return \"II\"\n    if number == 3:\n        return \"III\"\n    if number == 4:\n        return \"IV\"\n    if number == 5:\n        return \"V\"\n    if number == 6:\n        return \"VI\"\n    if number == 7:\n        return \"VII\"\n    if number == 8:\n        return \"VIII\"\n    if number == 9:\n        return \"IX\"\n    if number == 10:\n        return \"X\"\n    if number == 11:\n        return \"XI\"\n    if number == 12:\n        return \"XII\"\n    if number == 13:\n        return \"XIII\"\n    if number == 14:\n        return \"XIV\"\n    if number == 15:\n        return \"XV\"\n    if number == 16:\n        return \"XVI\"\n    if number == 17:\n        return \"XVII\"\n    if number == 18:\n        return \"XVIII\"\n    if number == 19:\n        return \"XIX\"\n    if number == 20:\n        return \"XX\"\n    if number == 21:\n        return \"XXI\"\n    if number == 22:\n        return \"XXII\"\n    if number == 23:\n        return \"XXIII\"\n    if number == 24:\n        return \"XXIV\"\n    if number == 25:\n        return \"XXV\"\n    if number == 26:\n        return \"XXVI\"\n    if number == 27:\n        return \"XXVII\"\n    if number == 28:\n        return \"XXVIII\"\n    if number == 29:\n        return \"XXIX\"\n    if number == 30:\n        return \"XXX\"\n    if number == 31:\n        return \"XXXI\"\n    if number == 32:\n        return \"XXXII\"\n    if number == 33:\n        return \"XXXIII\"\n    if number == 34:\n        return \"XXXIV\"\n    if number == 35"
    },
    {
      "rank": 27,
      "score": 9.907170511668092,
      "candidate": "roman = ['', '', 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX',\n             'V', 'IV', 'I']\n    if number < 0:\n        raise ValueError('Invalid input')\n    if number == 0:\n        return '0'\n    if number == 1:\n        return 'I'\n    result = ''\n    for i in range(0, len(roman) - 1):\n        if number >= roman[i+1]:\n            result = roman[i] + result\n            number -= roman[i+1]\n    result = roman[i] + result\n    return result\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLII'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    roman = ['', '', 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX',\n             'V', 'IV', 'I']\n    if number < 0:\n        raise ValueError('Invalid input')\n    if number == 0:\n        return '0'\n    if number == 1:\n        return 'I'\n    result = ''\n    for i in range(0, len(roman) - 1):\n        if number >= roman[i+1]:\n            result = roman[i] + result\n            number -= roman[i+1]\n    result = roman[i] + result\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.887111849756732,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Number {} is not between 1 and 1000'.format(number))\n    roman_numeral = ''\n    for i in range(number):\n        roman_numeral += roman_numerals[number % 10]\n        number /= 10\n    return roman_numeral.lower()\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral (lowercase), obtain its integer equivalent as a\n    positive integer, and return it.\n    Restrictions: roman_numeral is a roman numeral\n    Examples:\n    >>> mini_roman_to_int('iv') == 4\n    >>> mini_roman_to_int('d') == 4\n    >>> mini_roman_to_int('iii') == 3\n    >>> mini_roman_to_int('x') == 0\n    \"\"\"\n    number = 0\n    for i in range(len(roman_numeral)):\n        if roman_numeral[i] == 'I':\n            number += 1\n        elif roman_numeral[i] == 'V':\n            number += 5\n        elif roman_numeral[i] == 'X':\n            number += 10\n        elif roman_numeral[i] == 'L':\n            number += 50\n        elif roman_numeral[i] == 'C':\n            number += 100\n        elif roman_numeral[i] == 'D':\n            number += 500\n        elif roman_numeral[i] == 'M':\n            number += 1000\n    return number\n\n\ndef main():\n    \"\"\"\n    Use input from stdin to print the integer value of the roman numeral\n    \"\"\"\n    for line in sys.stdin:\n        number = mini_roman_to_int(line.strip())\n        print(number)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 9.88293152152541,
      "candidate": "roman_numeral = ''\n    if number <= 0:\n        raise ValueError('number must be positive')\n    if number < 10:\n        roman_numeral += '0'\n    if number < 20:\n        roman_numeral += 'i'\n    if number < 30:\n        roman_numeral += 'v'\n    if number < 40:\n        roman_numeral += 'x'\n    if number < 50:\n        roman_numeral += 'l'\n    if number < 60:\n        roman_numeral += 'c'\n    if number < 70:\n        roman_numeral += 'd'\n    if number < 80:\n        roman_numeral +='m'\n    if number < 90:\n        roman_numeral +=''\n    if number < 100:\n        roman_numeral +=''\n    if number < 200:\n        roman_numeral += 'i'\n    if number < 300:\n        roman_numeral += 'v'\n    if number < 400:\n        roman_numeral += 'x'\n    if number < 500:\n        roman_numeral += 'l'\n    if number < 600:\n        roman_numeral += 'c'\n    if number < 700:\n        roman_numeral += 'd'\n    if number < 800:\n        roman_numeral +='m'\n    if number < 900:\n        roman_numeral +=''\n    if number < 1000:\n        roman_numeral +='m'\n    return roman_numeral\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in upper-case.\n    Restrictions: 1 <= roman_numeral <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('v') == 19\n    >>> mini_roman_to_int('xl') == 426\n    >>> mini_roman_to_int('cdxxvi') == 426\n    >>> mini_roman_to_int('xv') == 426\n    >>> mini_roman_to_int('c') == 0\n    >>> mini_roman_to_int('i') =="
    },
    {
      "rank": 30,
      "score": 9.882923312638333,
      "candidate": "number = abs(number)\n    roman_numeral = ''\n    for integer, roman_numeral_letters in roman_numerals_dict.items():\n        while number >= integer:\n            number -= integer\n            roman_numeral += roman_numeral_letters\n    return roman_numeral.lower()\n\n\ndef main():\n    \"\"\"\n    Simple tests for the function.\n    \"\"\"\n    assert int_to_mini_roman(19) == 'xix'\n    assert int_to_mini_roman(152) == 'clii'\n    assert int_to_mini_roman(426) == 'cdxxvi'\n    assert int_to_mini_roman(1234) == 'xlxxvii'\n    assert int_to_mini_roman(12345) == 'cdxxvii'\n    assert int_to_mini_roman(123456) == 'cdxxvi'\n    assert int_to_mini_roman(1234567) == 'cdxxvii'\n    assert int_to_mini_roman(12345678) == 'cdxxviii'\n    assert int_to_mini_roman(123456789) == 'cdxxix'\n    assert int_to_mini_roman(1234567890) == 'cdxxl'\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 9.850496324767066,
      "candidate": "if number == 0:\n        return '0'\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number >= 10 and number <= 99:\n        return 'X' + str(number)\n    if number >= 100 and number <= 999:\n        return 'L' + str(number)\n    if number >= 1000:\n        return 'M' + str(number)\n    return ''"
    },
    {
      "rank": 32,
      "score": 9.849448152205355,
      "candidate": "result = []\n    for i in range(number, 0, -1):\n        for j in range(i, 0, -1):\n            if i == j:\n                result.append(str(i))\n            elif i > j:\n                result.append(str(i) + 'i')\n                break\n            else:\n                result.append(str(i) + 'x')\n                break\n    return ''.join(result)\n\n\ndef mini_roman_to_int(numeral):\n    \"\"\"\n    Given a roman numeral, return its integer equivalent.\n    Restrictions: 1 <= numeral <= 1000\n    \"\"\"\n    result = 0\n    for i in range(len(numeral) - 1, -1, -1):\n        if numeral[i] == 'i':\n            result += len(numeral[:i])\n        elif numeral[i] == 'x':\n            result += len(numeral[:i]) * 2\n        elif numeral[i] == 'v':\n            result += len(numeral[:i]) * 3\n    return result\n\n\ndef mini_roman_to_int_and_numeral(numeral):\n    \"\"\"\n    Given a roman numeral, return its integer equivalent and its roman numeral.\n    Restrictions: 1 <= numeral <= 1000\n    \"\"\"\n    result = mini_roman_to_int(numeral)\n    result_numeral = []\n    for i in range(len(numeral) - 1, -1, -1):\n        if numeral[i] == 'i':\n            result_numeral.append(numeral[:i])\n            result += len(numeral[:i])\n        elif numeral[i] == 'x':\n            result_numeral.append(numeral[:i])\n            result += len(numeral[:i]) * 2\n        elif numeral[i] == 'v':\n            result_numeral.append(numeral[:i])\n            result += len(numeral[:i]) * 3\n    return result, ''.join(result_numeral)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\""
    },
    {
      "rank": 33,
      "score": 9.845393812074393,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError(\"Number out of range: {}\".format(number))\n\n    roman_numeral = \"\"\n    for numeral in range(number, -1, -1):\n        roman_numeral += roman_numerals[numeral]\n\n    return roman_numeral[::-1]\n\n\ndef mini_roman_to_int(number):\n    \"\"\"\n    Given a string in lowercase, obtain its integer equivalent as a positive\n    integer, and return it.\n    Restrictions: 1 <= str <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('cdxxvi') == 426\n    >>> mini_roman_to_int('c') == 3\n    >>> mini_roman_to_int('xix') == 19\n    \"\"\"\n    if number[::-1] not in roman_numerals:\n        raise ValueError(\"Invalid string: {}\".format(number))\n\n    return sum(roman_numerals.index(char) for char in number[::-1])\n\n\ndef main():\n    \"\"\"\n    Run the main function.\n    \"\"\"\n    print(\"Enter a number between 1 and 1000: \")\n    number = int(input())\n    print(\"The roman numeral equivalent of {} is {}\".format(number,\n                                                            int_to_mini_roman(number)))\n    print(\"The integer equivalent of {} is {}\".format(int_to_mini_roman(number),\n                                                      mini_roman_to_int(int_to_mini_roman(number))))\n    print()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 9.807458859791842,
      "candidate": "n = str(number)\n    roman_numeral = \"\"\n    for i in range(len(n)):\n        if n[i]!= '0':\n            roman_numeral += chr(ord('i') - 1 + i)\n    return roman_numeral\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a string roman numeral in lowercase, obtain its integer equivalent\n    and return it.\n    Restrictions: 1 <= roman_numeral <= 1000\n    \"\"\"\n    n = 0\n    for i in range(len(roman_numeral)):\n        n = n * 10 + ord(roman_numeral[i]) - ord('i') + 1\n    return n\n\n\ndef main():\n    \"\"\"\n    Unit tests:\n    >>> mini_roman_to_int('c')\n    403\n    >>> mini_roman_to_int('cc')\n    403\n    >>> mini_roman_to_int('cd')\n    403\n    >>> mini_roman_to_int('cdx')\n    403\n    >>> mini_roman_to_int('cdxxvi')\n    403\n    >>> mini_roman_to_int('x')\n    0\n    >>> mini_roman_to_int('xix')\n    19\n    >>> mini_roman_to_int('clii')\n    152\n    >>> mini_roman_to_int('cdxxvi')\n    426\n    >>> mini_roman_to_int('cdxxvi')\n    426\n    >>> mini_roman_to_int('d')\n    0\n    >>> mini_roman_to_int('cix')\n    403\n    >>> mini_roman_to_int('ccii')\n    403\n    >>> mini_roman_to_int('cix')\n    403\n    >>> mini_roman_to_int('cdxxvi')\n    403\n    >>> mini_roman_to_int('cdxxvi')\n    403\n    >>> mini_roman_to_int('d')\n    0\n    >>> mini_roman_to_int('cix')\n    403\n    >>> mini_roman_to_int('ccii')\n    403\n    >>> mini"
    },
    {
      "rank": 35,
      "score": 9.769680614520107,
      "candidate": "if not 0 < number < 1000:\n        raise ValueError(\"Number should be between 1 and 999\")\n\n    roman_numeral_list = [\n        '', 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV',\n        'I'\n    ]\n\n    roman_numeral_list.reverse()\n\n    roman_numeral = 0\n    while number > 0:\n        while number >= 10:\n            roman_numeral += 1\n            number -= 10\n        roman_numeral += number / 100\n        number = number % 100\n\n    roman_numeral += number\n\n    return roman_numeral_list[roman_numeral]"
    },
    {
      "rank": 36,
      "score": 9.76713512321487,
      "candidate": "roman = ''\n    for i in range(1, number + 1):\n        roman += roman_numeral(i)\n    return roman.lower()\n\n\ndef roman_numeral(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> roman_numeral(19) == 'IX'\n    >>> roman_numeral(152) == 'CLII'\n    >>> roman_numeral(426) == 'CDXXVI'\n    \"\"\"\n    roman = ''\n    for i in range(1, number + 1):\n        roman += roman_numeral_step(i)\n    return roman.upper()\n\n\ndef roman_numeral_step(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> roman_numeral_step(19) == 'IX'\n    >>> roman_numeral_step(152) == 'CLII'\n    >>> roman_numeral_step(426) == 'CDXXVI'\n    \"\"\"\n    roman = ''\n    for i in range(1, number + 1):\n        if i % 10 == 1 and i % 100!= 11:\n            roman += 'I'\n        elif i % 100 == 11:\n            roman += 'X'\n        elif i % 10 > 1 and i % 10 < 4 and i % 100!= 12:\n            roman += 'IV'\n        elif i % 100 == 12:\n            roman += 'L'\n        elif i % 10 > 4 and i % 10 < 9 and i % 100!= 13:\n            roman += 'IX'\n        elif i % 100 == 13:\n            roman += 'X'\n        else:\n            roman += 'V'\n    return roman\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.765262807032524,
      "candidate": "roman_numeral = []\n    for numeral in range(1, number + 1):\n        for (numeral_val, numeral_name) in enumerate(mini_roman_numeral):\n            if numeral <= numeral_val:\n                roman_numeral.append(numeral_name)\n                break\n    return ''.join(roman_numeral)\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    try:\n        args = get_args()\n        print(int_to_mini_roman(args.number))\n    except (ValueError, IndexError) as err:\n        print(err)\n        sys.exit(1)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 9.718856235379514,
      "candidate": "if number < 1:\n        return ''\n    else:\n        return roman_numerals[number - 1]\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral (upper or lowercase), return its integer equivalent.\n    Restrictions: 1 <= roman_numeral <= 4000\n    \"\"\"\n    if roman_numeral.isdigit():\n        return int(roman_numeral)\n    else:\n        roman_numeral = roman_numeral.upper()\n        roman_numeral = roman_numeral.replace('I', '1').replace('V', '5')\n        roman_numeral = roman_numeral.replace('X', '10').replace('L', '50')\n        roman_numeral = roman_numeral.replace('C', '100').replace('D', '500')\n        roman_numeral = roman_numeral.replace('M', '1000')\n        return sum(int(roman_numeral[i:i+2]) for i in range(0, len(roman_numeral), 2))"
    },
    {
      "rank": 39,
      "score": 9.699680655040597,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000')\n\n    roman_numerals ='mcmcdxxiv'\n    roman_numeral = 0\n    for index, digit in enumerate(str(number)):\n        roman_numeral += int(digit) * roman_numerals[index]\n    return roman_numerals[-1] * roman_numeral\n\n#----------------------------------------------------------------------\n# Functions for converting between Roman and integer\n#----------------------------------------------------------------------\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 3000\n    \"\"\"\n    if number < 1 or number > 3000:\n        raise ValueError('number must be between 1 and 3000')\n\n    roman_numerals = 'MMCMXCIX'\n    roman_numeral = 0\n    for index, digit in enumerate(str(number)):\n        roman_numeral += int(digit) * roman_numerals[index]\n    return roman_numerals[-1] * roman_numeral\n\n#----------------------------------------------------------------------\n# Functions for converting between Roman and integer\n#----------------------------------------------------------------------\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral (e.g.,'m'), obtain its integer equivalent as a\n    positive integer, and return it.\n    Restrictions: 1 <= roman_numeral <= 4000\n    \"\"\"\n    if roman_numeral < 1 or roman_numeral > 4000:\n        raise ValueError('roman_numeral must be between 1 and 4000')\n\n    roman_numerals = 'MMCMXCIX'\n    roman_numeral = 0\n    for index, digit in enumerate(roman_numeral):\n        roman_numeral += int(digit) * roman_numerals[index]\n    return roman_numeral\n\n#----------------------------------------------------------------------\n# Functions for converting between Roman and integer\n#----------------------------------------------------------------------\ndef roman_to_int_mini(roman_numeral):\n    \"\"\"\n    Given a roman numeral (e"
    },
    {
      "rank": 40,
      "score": 9.699146693885302,
      "candidate": "n = str(number)\n    if len(n) < 3:\n        return n\n    i = len(n) - 1\n    while i > 0:\n        i -= 1\n        if int(n[i]) < int(n[i-1]):\n            n = n[:i] + 'i' + n[i+1:]\n    return n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a string,\n    and return it.\n    Restrictions: 1 <= roman_numeral <= 1000\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if not roman_numeral.isdigit():\n        raise ValueError('Not a valid roman numeral:'+ roman_numeral)\n    if len(roman_numeral) < 3:\n        raise ValueError('Not a valid roman numeral:'+ roman_numeral)\n    n = 0\n    for i in range(len(roman_numeral)):\n        if roman_numeral[i] == 'i':\n            n += 1\n        else:\n            n += int(roman_numeral[i])\n    return n\n\ndef main():\n    \"\"\"\n    Command line interface for the mini_roman_to_int and int_to_mini_roman\n    functions.\n    \"\"\"\n    import argparse\n    parser = argparse.ArgumentParser(description='Convert roman numeral to '\n                                                 'integer and vice versa.')\n    parser.add_argument('roman_numeral', metavar='Roman Numeral', type=str,\n                        help='A roman numeral.')\n    parser.add_argument('--verbose', dest='verbose', action='store_true',\n                        help='Print verbose output.')\n    parser.add_argument('--debug', dest='debug', action='store_true',\n                        help='Print debug output.')\n    args = parser.parse"
    },
    {
      "rank": 41,
      "score": 9.640077895802646,
      "candidate": "if number < 1:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n    roman_numerals = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n    roman_numerals_len = len(roman_numerals)\n    roman_numerals_num = int(number)\n    roman_numeral = roman_numerals[roman_numerals_num - 1]\n    if roman_numeral[-1] == 'I':\n        roman_numeral = roman_numeral[:-1]\n    if roman_numeral[-1] == 'X':\n        roman_numeral = roman_numeral[:-1]\n    return roman_numeral\n\ndef mini_roman_to_int(mini_roman):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> mini_roman_to_int('i') == 3\n    >>> mini_roman_to_int('x') == 4\n    >>> mini_roman_to_int('v') == 9\n    >>> mini_roman_to_int('vii') == 91\n    >>> mini_roman_to_int('vi') == 92\n    >>> mini_roman_to_int('iv') == 94\n    \"\"\"\n    if mini_roman == 'I':\n        return 1\n    if mini_roman == 'V':\n        return 5\n    if mini_roman == 'X':\n        return 10\n    roman_numerals = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n    roman_numerals_len = len(roman_numerals)\n    roman_numerals_num = roman_numerals.index(mini_roman) + 1\n    roman_numeral = str(roman_numerals_num)\n    roman_numeral = roman_numeral[:-1]"
    },
    {
      "rank": 42,
      "score": 9.545987962239394,
      "candidate": "if number == 0:\n        return '0'\n    if number < 0:\n        raise ValueError('Negative number')\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == 21:\n        return 'XXI'\n    if number == 22:\n        return 'XXII'\n    if number == 23:\n        return 'XXIII'\n    if number == 24:\n        return 'XXIV'\n    if number == 25:\n        return 'XXV'\n    if number == 26:\n        return 'XXVI'\n    if number == 27:\n        return 'XXVII'\n    if number == 28:\n        return 'XXVIII'\n    if number == 29:\n        return 'XXIX'\n    if number == 30:\n        return 'XXX'\n    if number == 31:\n        return 'XXXI'\n    if number == 32:\n        return 'XXXII'\n    if number == 33:\n        return 'XXXIII'\n    if number == 34:\n        return 'XXXIV'\n    if number == 35:\n        return 'XXXV'"
    },
    {
      "rank": 43,
      "score": 9.47114453552205,
      "candidate": "if not 0 < number < 1000:\n        raise ValueError('Invalid number: {}'.format(number))\n    roman = []\n    while number!= 0:\n        number, roman_numeral = divmod(number, 10)\n        roman.append(roman_numeral)\n    return ''.join(roman[::-1])\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral in lowercase, return the equivalent integer.\n    Restrictions: roman_numeral is a valid roman numeral\n    Examples:\n    >>> mini_roman_to_int('ii') == 2\n    >>> mini_roman_to_int('vii') == 5\n    >>> mini_roman_to_int('cxx') == 426\n    \"\"\"\n    if not roman_numeral.isalpha():\n        raise ValueError('Invalid roman numeral: {}'.format(roman_numeral))\n    if roman_numeral[-1] == 'x':\n        return int('0' + roman_numeral[:-1]) * 10\n    elif roman_numeral[-1] == 'l':\n        return int(roman_numeral[:-1])\n    else:\n        return int(roman_numeral)\n\n\ndef get_numeral(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> get_numeral(19) == 'xix'\n    >>> get_numeral(152) == 'clii'\n    >>> get_numeral(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = int_to_mini_roman(number)\n    return mini_roman_to_int(roman_numeral)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.446832512996986,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Invalid number {}.'.format(number))\n\n    roman_numeral = ''\n    for i in range(number):\n        roman_numeral += _ROMAN_NUMERALS[i]\n\n    return roman_numeral.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.42450321128885,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Number must be between 1 and 1000')\n\n    roman_numeral = ''\n    for numeral, integer in mini_roman_numeral_map.items():\n        while number >= integer:\n            roman_numeral += numeral\n            number -= integer\n\n    return roman_numeral.lower()\n\n\ndef mini_roman_numeral_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its corresponding integer equivalent as a\n    positive integer, and return it.\n    Restrictions: roman_numeral is a valid roman numeral\n    \"\"\"\n    if not roman_numeral:\n        raise ValueError('Number cannot be empty')\n\n    roman_numeral = roman_numeral.upper()\n    integer = 0\n    for numeral, integer in mini_roman_numeral_map.items():\n        if numeral.lower() == roman_numeral:\n            return integer\n\n    raise ValueError('Invalid roman numeral:'+ roman_numeral)\n\n\ndef main():\n    \"\"\"\n    Given an integer, print the roman numeral for that integer.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    with open('input.txt') as f:\n        num = int(f.readline().strip())\n\n    print(int_to_mini_roman(num))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 9.401896687959665,
      "candidate": "roman_numeral = ''\n    for numeral in range(1, number + 1):\n        for i in range(number, 0, -1):\n            if i % 10 == 0 and i > 0:\n                roman_numeral = roman_numeral[:-1] + 'iv'\n            elif i % 100 == 0 and i > 10:\n                roman_numeral = roman_numeral[:-1] + 'v'\n            elif i % 1000 == 0 and i > 100:\n                roman_numeral = roman_numeral[:-1] + 'vi'\n            else:\n                roman_numeral = roman_numeral[:-1] + 'vii'\n        roman_numeral = roman_numeral[:-1] + ','\n    return roman_numeral.replace('viii', 'xx')"
    },
    {
      "rank": 47,
      "score": 9.389578175014488,
      "candidate": "if number > 1000:\n        raise ValueError('number must be less than or equal to 1000')\n    if number == 0:\n        return '0'\n    num_string = ''\n    num_string += chr(ord('i') + int(number % 10) - 1)\n    number /= 10\n    while number > 0:\n        num_string += chr(ord('v') + int(number % 10) - 1)\n        number /= 10\n    return num_string\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.260739004816287,
      "candidate": "if number < 0 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    if number == 0:\n        return 'zeros'\n\n    roman = ''\n    for i in range(1, number + 1):\n        roman += _ROMAN_NUMERALS[i - 1]\n    return roman.lower()\n\n\ndef mini_roman_to_int(string):\n    \"\"\"\n    Given a roman numeral string, obtain its integer equivalent as a positive\n    integer, and return it.\n    Restrictions: string is a valid roman numeral\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if string not in _ROMAN_NUMERALS:\n        raise ValueError(\"String must be a valid roman numeral\")\n\n    numeral = _ROMAN_NUMERALS.index(string) + 1\n    return numeral\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it.\n    Restrictions: 1 <= num <= 3999\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0 or number > 3999:\n        raise ValueError(\"Number must be between 1 and 3999\")\n\n    roman = ''\n    for i in range(1, number + 1):\n        roman += _ROMAN_NUMERALS[number - i]\n    return roman.lower()\n\n\ndef roman_to_int(string):\n    \"\"\"\n    Given a roman numeral string, obtain its integer equivalent as a positive\n    integer, and return it.\n    Restrictions: string is a valid roman numeral\n    Examples:\n    >>> roman_to_int('xix') == 19\n    >>> roman_to_int('clii') == 152\n    >>> r"
    },
    {
      "rank": 49,
      "score": 9.0433598776711,
      "candidate": "if number < 1 or number > 1000:\n        return ''\n    result = ''\n    for i in range(1, int(math.sqrt(number)) + 1):\n        while number >= (i ** 2):\n            result +='m' + str(i)\n            number -= (i ** 2)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.020164938060113,
      "candidate": "if number < 1:\n        return \"\"\n    if number == 1:\n        return \"i\"\n    if number < 4:\n        return \"i\" + mini_roman_map[number]\n    if number < 8:\n        return \"ii\" + mini_roman_map[number]\n    if number < 12:\n        return \"iii\" + mini_roman_map[number]\n    if number < 16:\n        return \"iv\" + mini_roman_map[number]\n    if number < 20:\n        return \"v\" + mini_roman_map[number]\n    if number < 24:\n        return \"vi\" + mini_roman_map[number]\n    if number < 28:\n        return \"vii\" + mini_roman_map[number]\n    if number < 32:\n        return \"viii\" + mini_roman_map[number]\n    if number < 36:\n        return \"ix\" + mini_roman_map[number]\n    if number < 40:\n        return \"x\" + mini_roman_map[number]\n    if number < 44:\n        return \"xi\" + mini_roman_map[number]\n    if number < 48:\n        return \"xii\" + mini_roman_map[number]\n    if number < 52:\n        return \"xiii\" + mini_roman_map[number]\n    if number < 56:\n        return \"xiv\" + mini_roman_map[number]\n    if number < 60:\n        return \"xv\" + mini_roman_map[number]\n    if number < 64:\n        return \"xvi\" + mini_roman_map[number]\n    if number < 68:\n        return \"xvii\" + mini_roman_map[number]\n    if number < 72:\n        return \"xviii\" + mini_roman_map[number]\n    if number < 76:\n        return \"xix\" + mini_roman_map[number]\n    if number < 80:\n        return \"xx\" + mini_roman_map[number]\n    if number < 84:\n        return \"xxi\" + mini_roman_map[number]\n    if number < 88:\n        return \"xxii\""
    },
    {
      "rank": 51,
      "score": 9.006215542699554,
      "candidate": "if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('number is not an int and/or out of range')\n    numeral = []\n    for i in range(1, number + 1):\n        numeral.append(roman_numerals[i][0])\n    return ''.join(numeral)\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral string, return the equivalent integer.\n    Restrictions: roman is in lowercase.\n    Examples:\n    >>> mini_roman_to_int('v') == 19\n    >>> mini_roman_to_int('vii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    >>> mini_roman_to_int('c') == 0\n    >>> mini_roman_to_int('d') == 0\n    \"\"\"\n    if not isinstance(roman, str):\n        raise ValueError('roman is not a string')\n    if roman.isupper():\n        raise ValueError('roman is upper-case')\n    if not roman:\n        raise ValueError('roman is empty')\n    if roman[0] == 'c':\n        return 0\n    for i in range(len(roman) - 1, -1, -1):\n        if roman[i] not in roman_numerals:\n            raise ValueError('roman contains invalid character')\n        if roman[i] == roman_numerals[roman[i]][0]:\n            return roman[i]\n    raise ValueError('roman is not a valid roman numeral')"
    },
    {
      "rank": 52,
      "score": 8.444444444444445,
      "candidate": "number = abs(number)\n    if number <= 20:\n        return roman_numerals[number]\n    else:\n        return roman_numerals[20] + int_to_mini_roman(number - 20)"
    },
    {
      "rank": 53,
      "score": 8.444444444444445,
      "candidate": "if number == 0:\n        return \"zer\"\n    if number < 0:\n        raise ValueError(\"Number can't be negative.\")\n    if number > 1000:\n        raise ValueError(\"Number can't be greater than 1000.\")\n\n    mini_roman_numeral_list = [\n        '', '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX',\n        'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX',\n        'XX', 'XXI', 'XXII', 'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII',\n        'XXIX', 'XXX', 'XXXI', 'XXXII', 'XXXIII', 'XXXIV', 'XXXV', 'XXXVI',\n        'XXXVII', 'XXXVIII', 'XXXIX', 'XL', 'XLI', 'XLII', 'XLIII', 'XLIV',\n        'XLV', 'XLVI', 'XLVII', 'XLVIII', 'XLIX', 'L', 'LI', 'LII', 'LIII',\n        'LIV', 'LV', 'LVI', 'LVII', 'LVIII', 'LIX', 'XC', 'XCI', 'XCII',\n        'XCIII', 'XCIV', 'XCV', 'XCVII', 'XCVIII', 'XCVIX', 'C', 'CI', 'CII',\n        'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII', 'CVIII', 'CIX', 'D',\n        'DI', 'DII', 'DIII', 'DIV', 'DV', 'DIIV', 'DIVII', 'DIVIII', 'DIVIV',\n        'DIVIX', 'M', 'MI', 'MII', 'MIII', 'MIV', 'MV', 'MIIV', 'MIIV', 'MIVI',\n        'MVIII', 'MIX', 'MX', 'LX', 'LIX', 'LIXX', 'LXXX', 'XCX"
    },
    {
      "rank": 54,
      "score": 8.444444444444445,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Invalid input')\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral += str(i)\n        if i % 10 == 9:\n            roman_numeral += 'c'\n        elif i % 100!= 0 and i % 100!= 9:\n            roman_numeral += 'ix'\n        elif i % 100 == 9:\n            roman_numeral += 'x'\n    return roman_numeral.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.444444444444445,
      "candidate": "roman_numerals = ['', '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n    roman_numerals_rev = [\n        '', '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC',\n        'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', 'M'\n    ]\n    roman_numerals_rev.reverse()\n    roman_numerals_rev = [roman_numerals_rev[num-1] for num in range(10, 1000, 10)]\n    roman_numerals = [roman_numerals[num-1] for num in range(10, 1000, 10)]\n    result = ''\n    for i in range(len(roman_numerals_rev)):\n        if number >= roman_numerals_rev[i]:\n            result += roman_numerals[i]\n            number -= roman_numerals_rev[i]\n    return result"
    },
    {
      "rank": 56,
      "score": 8.444444444444445,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Invalid number')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number >= 4 and number < 9:\n        return 'iv'\n    if number == 9:\n        return 'v'\n    if number >= 10 and number < 19:\n        return 'vi'\n    if number >= 19 and number < 100:\n        return 'vii'\n    if number >= 100 and number < 400:\n        return 'viii'\n    if number >= 400 and number < 900:\n        return 'ix'\n    if number >= 900 and number < 1000:\n        return 'x'"
    },
    {
      "rank": 57,
      "score": 8.444444444444445,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError(\"Not a valid number.\")\n    if number % 10 == 0:\n        return \"{}\".format(number)\n    else:\n        result = \"\"\n        for i in range(1, number+1):\n            if number % i == 0:\n                result += \"{}\".format(i)\n                number = number // i\n        result += \"{}\".format(number)\n        return result.lower()"
    },
    {
      "rank": 58,
      "score": 8.444444444444445,
      "candidate": "if number == 0:\n        return 'zer'\n    if number < 0:\n        raise ValueError('Negative number not allowed')\n    minroman = 'i'\n    maxroman = 'xzzv'\n    for i in range(0, len(minroman)):\n        if number < minroman[i]:\n            return minroman[0:i] + str(number) + maxroman[i:]\n    return minroman[0:1] + str(number) + maxroman[1:]"
    },
    {
      "rank": 59,
      "score": 8.444444444444445,
      "candidate": "def digits(number):\n        return ''.join(str(i) for i in range(1, number+1))\n\n    def get_numeral(number, numeral):\n        for i in range(1, numeral+1):\n            if number < i*10:\n                return ''.join(str(i) for i in range(1, numeral+1))\n            elif number < i*100:\n                return ''.join(str(i) for i in range(2, numeral+1))\n            elif number < i*1000:\n                return ''.join(str(i) for i in range(3, numeral+1))\n            else:\n                return ''.join(str(i) for i in range(4, numeral+1))\n\n    if number <= 0:\n        return '0'\n\n    if number <= 20:\n        return get_numeral(number, 3)\n\n    if number <= 100:\n        return get_numeral(number, 4)\n\n    if number <= 1000:\n        return get_numeral(number, 5)\n\n    raise ValueError(\"The number is too large\")"
    },
    {
      "rank": 60,
      "score": 8.444444444444445,
      "candidate": "if number <= 0:\n        return ''\n    if number < 10:\n        return str(number)\n    if number < 100:\n        return 'x' + str(number)\n    if number < 1000:\n        return 'l' + str(number)\n    if number < 1000000:\n        return 'c' + str(number)\n    if number < 1000000000:\n        return'm' + str(number)\n    return 'd' + str(number)\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, return its integer equivalent as a positive integer.\n    Restrictions: roman is lowercase and has at most four digits\n    Examples:\n    >>> mini_roman_to_int('x') == 19\n    >>> mini_roman_to_int('l') == 152\n    >>> mini_roman_to_int('cd') == 426\n    >>> mini_roman_to_int('xiv') == 403\n    >>> mini_roman_to_int('cxx') == 4\n    >>> mini_roman_to_int('cxxiv') == 402\n    >>> mini_roman_to_int('cxxvii') == 401\n    >>> mini_roman_to_int('cxxiii') == 400\n    >>> mini_roman_to_int('dix') == 9\n    >>> mini_roman_to_int('dix') == 9\n    >>> mini_roman_to_int('d') == 9\n    >>> mini_roman_to_int('d') == 9\n    >>> mini_roman_to_int('i') == 9\n    >>> mini_roman_to_int('i') == 9\n    >>> mini_roman_to_int('x') == 0\n    >>> mini_roman_to_int('x') == 0\n    >>> mini_roman_to_int('l') == 0\n    >>> mini_roman_to_int('l') == 0\n    >>> mini_roman_to_int('c') == 0\n    >>> mini_roman_to_int('c') == 0\n    >>> mini_roman_to_int('m') == 0\n    >>> mini_roman_to_int('m') == 0\n    >>> mini_roman_"
    },
    {
      "rank": 61,
      "score": 8.444444444444445,
      "candidate": "num_digits = len(str(number))\n    result = ''\n    for i in range(num_digits):\n        if number >= 1000:\n            result += chr(ord('M') + int(num_digits - i) - 1)\n            number -= 1000\n        else:\n            result += chr(ord('M') + int(num_digits - i) - 1)\n            number /= 100\n    return result"
    },
    {
      "rank": 62,
      "score": 8.444444444444445,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Number out of range')\n\n    roman_numeral = ''\n    for integer, roman_numeral_value in _ROMAN_NUMERALS_DICT.items():\n        while number >= integer:\n            roman_numeral += roman_numeral_value\n            number -= integer\n\n    return roman_numeral"
    },
    {
      "rank": 63,
      "score": 8.444444444444445,
      "candidate": "if number == 0:\n        return '0'\n    if number < 0:\n        return '-' + int_to_mini_roman(abs(number))\n    digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_numeral = ''\n    for index in range(len(digits)):\n        while number >= digits[index]:\n            number -= digits[index]\n            roman_numeral += 'M'\n    return roman_numeral"
    },
    {
      "rank": 64,
      "score": 8.444444444444445,
      "candidate": "if not isinstance(number, int) or number <= 0:\n        raise ValueError('number must be a positive integer')\n    if number > 1000:\n        raise ValueError('number must be less than 1000')\n    if number == 100:\n        return 'c'\n    if number == 10:\n        return 'x'\n    if number == 1:\n        return 'i'\n    res = []\n    for i in range(number + 1):\n        if i == 9:\n            res.append('ix')\n        elif i == 4:\n            res.append('iv')\n        elif i == 4:\n            res.append('iv')\n        elif i == 9:\n            res.append('ix')\n        elif i >= 5:\n            res.append('v')\n        elif i == 1:\n            res.append('i')\n        else:\n            res.append('x')\n    return ''.join(res)"
    },
    {
      "rank": 65,
      "score": 8.444444444444445,
      "candidate": "result = ''\n    for numeral in range(1, number + 1):\n        for (num, name) in _ROMAN_NUMERALS:\n            if num <= number and num > 0:\n                if num == number:\n                    result += name\n                else:\n                    result += '{0}'.format(name)\n                number -= num\n                break\n    return result.lower()"
    },
    {
      "rank": 66,
      "score": 8.444444444444445,
      "candidate": "# http://en.wikipedia.org/wiki/Roman_numerals\n    roman_numerals = ''.join([chr(i) for i in range(1000, 0, -1)])\n    return roman_numerals[number]"
    },
    {
      "rank": 67,
      "score": 8.444444444444445,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Invalid input.')\n\n    roman_numerals = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix',\n                      'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii',\n                      'xviii', 'xix', 'xx', 'xxx', 'xl', 'xxi', 'xxii',\n                      'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii',\n                      'xxix']\n    return roman_numerals[number - 1]"
    },
    {
      "rank": 68,
      "score": 8.444444444444445,
      "candidate": "if number == 0:\n        return '0'\n    if number < 0:\n        raise ValueError('number must be positive')\n\n    roman_numeral = ''\n    for i in range(len(mini_roman_numerals)):\n        while number >= mini_roman_numerals[i]:\n            roman_numeral += mini_roman_numerals[i]\n            number -= mini_roman_numerals[i]\n    return roman_numeral\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.444444444444445,
      "candidate": "n = str(number)\n    min_roman = 'i'\n    min_roman_length = len(min_roman)\n    for i in range(min_roman_length, 0, -1):\n        if n[:i] == n[::-1][:i]:\n            min_roman = min_roman[:i]\n            break\n    return min_roman"
    },
    {
      "rank": 70,
      "score": 3.4895559728072914,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError(\"Invalid number: \" + str(number))\n    result = []\n    for i in range(1, number+1):\n        result.append(mini_roman_to_int(int_to_mini_roman(i)))\n    return ''.join(str(x) for x in result)\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a string, and return\n    it in lowercase.\n    Restrictions: 1 <= roman <= 1000\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if roman < 'I' or roman > 'XIX':\n        raise ValueError(\"Invalid roman numeral: \" + roman)\n    result = []\n    for i in range(1, len(roman)):\n        if roman[i] == 'M':\n            result.append(roman[i:i+2])\n        elif roman[i] == 'D':\n            result.append(roman[i:i+3])\n        else:\n            raise ValueError(\"Invalid roman numeral: \" + roman)\n    return ''.join(str(x) for x in result)\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLII'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"Invalid number: \" + str(number))\n    result = []\n    for i in range(1, number+1):\n        result.append(roman_to_int(int_to_roman(i)))\n    return"
    },
    {
      "rank": 71,
      "score": 3.485039533302342,
      "candidate": "number = str(number)\n    if len(number) < 3:\n        return number\n    if len(number) == 3:\n        return number[0] + 'ix' + number[2]\n    if len(number) == 4:\n        return number[0] + 'vii' + number[3]\n    if len(number) == 5:\n        return number[0] + 'viii' + number[4]\n    if len(number) == 6:\n        return number[0] + 'ix' + number[5]\n    if len(number) == 7:\n        return number[0] + 'x' + number[6]\n    if len(number) == 8:\n        return number[0] + 'xx' + number[7]\n    if len(number) == 9:\n        return number[0] + 'l' + number[8]\n    if len(number) == 10:\n        return number[0] + 'c' + number[9]\n    if len(number) == 11:\n        return number[0] + 'd' + number[10]\n    if len(number) == 12:\n        return number[0] +'m' + number[11]\n    if len(number) == 13:\n        return number[0] + 'cm' + number[12]\n    if len(number) == 14:\n        return number[0] + 'dxx' + number[13]\n    if len(number) == 15:\n        return number[0] +'mdc' + number[14]\n    if len(number) == 16:\n        return number[0] + 'cdc' + number[15]\n    if len(number) == 17:\n        return number[0] +'mcd' + number[16]\n    if len(number) == 18:\n        return number[0] + 'cmc' + number[17]\n    if len(number) == 19:\n        return number[0] +'mcc' + number[18]\n    if len(number) == 20:\n        return number[0] + 'ccc' + number[19]\n    if len(number) == 21:\n        return number"
    },
    {
      "rank": 72,
      "score": 3.4767913356044504,
      "candidate": "if number == 0:\n        return '0'\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == 21:\n        return 'XXI'\n    if number == 22:\n        return 'XXII'\n    if number == 23:\n        return 'XXIII'\n    if number == 24:\n        return 'XXIV'\n    if number == 25:\n        return 'XXV'\n    if number == 26:\n        return 'XXVI'\n    if number == 27:\n        return 'XXVII'\n    if number == 28:\n        return 'XXVIII'\n    if number == 29:\n        return 'XXIX'\n    if number == 30:\n        return 'XXX'\n    if number == 31:\n        return 'XXXI'\n    if number == 32:\n        return 'XXXII'\n    if number == 33:\n        return 'XXXIII'\n    if number == 34:\n        return 'XXXIV'\n    if number == 35:\n        return 'XXXV'\n    if number == 36:\n        return 'XXXVI'\n    if number =="
    },
    {
      "rank": 73,
      "score": 3.472139255486488,
      "candidate": "assert 1 <= number <= 1000, '1 <= num <= 1000'\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral = roman_numeral + int_to_roman(i)\n    return roman_numeral[::-1]\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 4000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLII'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    assert 1 <= number <= 4000, '1 <= num <= 4000'\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral = roman_numeral + int_to_roman_numeral(i)\n    return roman_numeral[::-1]\n\n\ndef int_to_roman_numeral(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 4000\n\n    Examples:\n    >>> int_to_roman_numeral(19) == 'IX'\n    >>> int_to_roman_numeral(152) == 'CL'\n    >>> int_to_roman_numeral(426) == 'LXXVI'\n    \"\"\"\n    assert 1 <= number <= 4000, '1 <= num <= 4000'\n    roman_numeral = ''\n    for i in range(1, number + 1):\n        roman_numeral = roman_numeral + int_to_roman_numeral(i)\n    return roman_numeral[::-1]\n\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 4000\n\n    Examples:\n    >>> roman_to"
    },
    {
      "rank": 74,
      "score": 3.2518830049422016,
      "candidate": "if not 1 <= number <= 1000:\n        raise ValueError(\"Argument must be between 1 and 1000\")\n    if number == 1:\n        return \"I\"\n    if number == 2:\n        return \"II\"\n    if number == 3:\n        return \"III\"\n    if number == 4:\n        return \"IV\"\n    if number == 5:\n        return \"V\"\n    if number == 6:\n        return \"VI\"\n    if number == 7:\n        return \"VII\"\n    if number == 8:\n        return \"VIII\"\n    if number == 9:\n        return \"IX\"\n    if number == 10:\n        return \"X\"\n    if number == 11:\n        return \"XI\"\n    if number == 12:\n        return \"XII\"\n    if number == 13:\n        return \"L\"\n    if number == 14:\n        return \"XLVIII\"\n    if number == 15:\n        return \"LXXX\"\n    if number == 16:\n        return \"XCIII\"\n    if number == 17:\n        return \"C\"\n    if number == 18:\n        return \"CX\"\n    if number == 19:\n        return \"CXI\"\n    if number == 20:\n        return \"CXX\"\n    if number == 21:\n        return \"CXXX\"\n    if number == 22:\n        return \"D\"\n    if number == 23:\n        return \"DCCLXXXII\"\n    if number == 24:\n        return \"CCCLXXXVIII\"\n    if number == 25:\n        return \"M\"\n    if number == 26:\n        return \"MCMLXXXIX\"\n    if number == 27:\n        return \"MMM\"\n    if number == 28:\n        return \"MMMMXXXII\"\n    if number == 29:\n        return \"MCMXCIX\"\n    if number == 30:\n        return \"P\"\n    if number == 40:\n        return \"XXIV\"\n    if number == 50:\n        return \"LXXV\"\n    if number == 60:\n        return \"LXXVI\"\n    if number == 70:\n        return \"LXXVII\"\n    if number == 80:"
    },
    {
      "rank": 75,
      "score": 3.237904766037402,
      "candidate": "if number == 0:\n        return '0'\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == 21:\n        return 'XXI'\n    if number == 22:\n        return 'XXII'\n    if number == 23:\n        return 'XXIII'\n    if number == 24:\n        return 'XXIV'\n    if number == 25:\n        return 'XXV'\n    if number == 26:\n        return 'XXVI'\n    if number == 27:\n        return 'XXVII'\n    if number == 28:\n        return 'XXVIII'\n    if number == 29:\n        return 'XXIX'\n    if number == 30:\n        return 'XXX'\n    if number == 31:\n        return 'XXXI'\n    if number == 32:\n        return 'XXXII'\n    if number == 33:\n        return 'XXXIII'\n    if number == 34:\n        return 'XXXIV'\n    if number == 35:\n        return 'XXXV'\n    if number == 36:\n        return 'XXXVI'\n    if number =="
    },
    {
      "rank": 76,
      "score": 3.1896196495406692,
      "candidate": "if number <= 0:\n        raise ValueError(\"Invalid input\")\n\n    if number < 10:\n        return str(number)\n\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd','m']\n    numerals = [str(number % 10), str(number % 5), str(number % 4)]\n    roman_numeral = ''\n    for i in range(len(numerals)):\n        for j in range(len(numerals[i])):\n            if i == 0 and j == 0:\n                roman_numeral += numerals[i][j]\n                continue\n            if numerals[i][j] == '9':\n                roman_numeral += roman_numerals[i]\n                break\n            if numerals[i][j] == '0':\n                if j == 0:\n                    roman_numeral += roman_numerals[i]\n                elif j == 1:\n                    roman_numeral += 'ix'\n                elif j == 2:\n                    roman_numeral += 'xl'\n                elif j == 3:\n                    roman_numeral += 'xc'\n                elif j == 4:\n                    roman_numeral += 'cd'\n                elif j == 5:\n                    roman_numeral += 'd'\n                elif j == 6:\n                    roman_numeral +='m'\n                elif j == 7:\n                    roman_numeral += 'l'\n            elif numerals[i][j] == '4':\n                if j == 0:\n                    roman_numeral += roman_numerals[i] + 'ix'\n                elif j == 1:\n                    roman_numeral += roman_numerals[i] + 'v'\n                elif j == 2:\n                    roman_numeral += roman_numerals[i] + 'x'\n                elif j == 3:\n                    roman_numeral += roman_numerals[i] + 'l'\n                elif j == 4:\n                    roman_numeral += roman_numerals[i] + 'c'\n            elif numerals[i][j] =="
    },
    {
      "rank": 77,
      "score": 3.153981387433482,
      "candidate": "if number < 1:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n\n    n = number\n    roman = ''\n    while n >= 1000:\n        roman += 'M'\n        n -= 1000\n\n    for i in range(9):\n        roman +='m'\n        if n >= 900:\n            roman += 'CM'\n            n -= 900\n        elif n >= 500:\n            roman += 'D'\n            n -= 500\n        elif n >= 100:\n            roman += 'C'\n            n -= 100\n        elif n >= 90:\n            roman += 'L'\n            n -= 90\n        elif n >= 50:\n            roman += 'X'\n            n -= 50\n        elif n >= 40:\n            roman += 'XC'\n            n -= 40\n        elif n >= 30:\n            roman += 'LX'\n            n -= 30\n        elif n >= 20:\n            roman += 'XCIX'\n            n -= 20\n        elif n >= 10:\n            roman += 'LI'\n            n -= 10\n        elif n >= 9:\n            roman += 'XCIX'\n            n -= 9\n        elif n >= 5:\n            roman += 'V'\n            n -= 5\n        elif n >= 4:\n            roman += 'IV'\n            n -= 4\n        elif n >= 1:\n            roman += 'I'\n            n -= 1\n\n    return roman\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a string in lowercase roman numeral, return its integer equivalent.\n    Restrictions: 1 <= string <= 'ZZZZZZZZ'\n\n    Examples:\n    >>> mini_roman_to_int('iii') == 3\n    >>> mini_roman_to_int('xviii') == 49\n    >>> mini_roman_to_int('clxxvi') == 426\n    \"\"\"\n    if roman[0]!= 'M':\n        raise ValueError('String must start with M')\n    if roman[-1]!= 'M':\n        raise ValueError('String must end with M')\n\n    n = 0"
    },
    {
      "rank": 78,
      "score": 3.116466385687158,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000.\")\n    numeral = \"\"\n    for index in range(1, number + 1):\n        numeral += mini_roman[number - index]\n    return numeral.lower()\n\n\ndef mini_roman_to_int(number):\n    \"\"\"\n    Given a string of roman numeral, obtain its integer equivalent as a\n    positive integer, and return it.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> mini_roman_to_int('vii') == 19\n    >>> mini_roman_to_int('dxxvi') == 426\n    >>> mini_roman_to_int('dix') == 0\n    \"\"\"\n    if number == '':\n        raise ValueError(\"Number cannot be empty.\")\n    if not isinstance(number, str):\n        raise TypeError(\"Number must be a string.\")\n    if number.isupper():\n        raise ValueError(\"Number cannot be capitalized.\")\n    if number.lower() == number:\n        raise ValueError(\"Number cannot be all-lowercase.\")\n    if number[0] not in \"ivx\":\n        raise ValueError(\"First character must be 'i' or 'v'.\")\n    if number[-1] not in \"xlm\":\n        raise ValueError(\"Last character must be 'i' or 'x'.\")\n    if len(number) < 4:\n        raise ValueError(\"String must be at least four characters.\")\n    if len(number) > 4:\n        raise ValueError(\"String must be at most four characters.\")\n    roman_numerals = {\n        'i': 1,\n        'v': 5,\n        'x': 10,\n        'l': 50,\n       'm': 100\n    }\n    roman_numeral = roman_numerals[number[0]]\n    for index in range(1, len(number)):\n        if number[index] == 'i':\n            roman_numeral += roman_numerals[number[index]]\n        elif number[index] == 'x':\n            roman_numeral += roman_numerals[number[index]] * 5\n        elif"
    },
    {
      "rank": 79,
      "score": 3.1065216697662232,
      "candidate": "if not isinstance(number, int):\n        raise TypeError(\"'number' must be an integer.\")\n    if not 1 <= number <= 1000:\n        raise ValueError(\"'number' must be between 1 and 1000.\")\n    result = []\n    for digit in range(1, number + 1):\n        for (i, v) in enumerate(range(1000, 0, -1)):\n            if v >= digit:\n                if (v - digit) < (i + 1):\n                    result.append(v - digit)\n                    break\n                result.append(v - digit)\n                break\n    return ''.join(result).lower()\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a string, and return\n    it in the original form.\n    Restrictions: roman can only contain lowercase letters, and can only\n    contain at most 1000 digits.\n    Examples:\n    >>> mini_roman_to_int('ii') == 2\n    >>> mini_roman_to_int('d') == 4\n    >>> mini_roman_to_int('cxxv') == 426\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if not isinstance(roman, str):\n        raise TypeError(\"'roman' must be a string.\")\n    if not roman:\n        raise ValueError(\"'roman' can not be the empty string.\")\n    if not roman.isalpha():\n        raise ValueError(\"'roman' can only contain lowercase letters.\")\n    if not roman.isnumeric():\n        raise ValueError(\"'roman' can only contain at most 1000 digits.\")\n    result = 0\n    for digit in roman:\n        result += int(digit)\n        result *= 1000\n        result += 1\n    return result\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) =="
    },
    {
      "rank": 80,
      "score": 3.1026916637351047,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError(\"Invalid value for number: {}\".format(number))\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd','m']\n    roman_numeral_tokens = [int(number / 10), number % 10]\n    roman_numeral_tokens.reverse()\n    return ''.join(roman_numerals[n] for n in roman_numeral_tokens)\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral in lowercase, obtain its integer equivalent.\n    Restrictions: 1 <= roman_numeral <= 1000\n    Examples:\n    >>> mini_roman_to_int('vii') == 19\n    >>> mini_roman_to_int('ccc') == 426\n    >>> mini_roman_to_int('xix') == 152\n    \"\"\"\n    if roman_numeral not in ('i', 'v', 'x', 'l', 'c', 'd','m'):\n        raise ValueError(\"Invalid value for roman_numeral: {}\".format(roman_numeral))\n    roman_numeral_tokens = roman_numeral.split()\n    roman_numeral_tokens.reverse()\n    return sum(10 ** (n - 1) * (n % 10) for n in roman_numeral_tokens)\n\n\ndef mini_roman_to_roman(roman_numeral):\n    \"\"\"\n    Given a roman numeral in lowercase, obtain its roman numeral equivalent.\n    Restrictions: 1 <= roman_numeral <= 1000\n    Examples:\n    >>> mini_roman_to_roman('vii') == 'vii'\n    >>> mini_roman_to_roman('ccc') == 'ccc'\n    >>> mini_roman_to_roman('xix') == 'xix'\n    \"\"\"\n    if roman_numeral not in ('i', 'v', 'x', 'l', 'c', 'd','m'):\n        raise ValueError(\"Invalid value for roman_numeral: {}\".format"
    },
    {
      "rank": 81,
      "score": 3.1004660305123863,
      "candidate": "roman_numeral = \"\"\n    for numeral in range(1, number+1):\n        roman_numeral += int_to_roman(numeral).lower()\n    return roman_numeral\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'IX'\n    >>> int_to_roman(152) == 'CLII'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    roman_numeral = \"\"\n    for numeral in range(1, number+1):\n        roman_numeral += int_to_roman_numeral(numeral)\n    return roman_numeral\n\n\ndef int_to_roman_numeral(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 4000\n\n    Examples:\n    >>> int_to_roman_numeral(19) == 'IX'\n    >>> int_to_roman_numeral(152) == 'CLII'\n    >>> int_to_roman_numeral(426) == 'CDXXVI'\n    \"\"\"\n    roman_numeral = \"\"\n    for numeral in range(1, number+1):\n        roman_numeral += int_to_roman_numeral_numeral(numeral)\n    return roman_numeral\n\n\ndef int_to_roman_numeral_numeral(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 4000\n\n    Examples:\n    >>> int_to_roman_numeral_numeral(19) == 'IX'\n    >>> int_to_roman_numeral_numeral(152) == 'CLII'\n    >>> int_to_roman_numeral_numeral(426) == 'CDXXVI'\n    \"\"\"\n    roman_num"
    },
    {
      "rank": 82,
      "score": 3.061026983119428,
      "candidate": "# This is a simple implementation.\n    # See https://en.wikipedia.org/wiki/Roman_numerals for more information\n    if number < 1 or number > 1000:\n        raise ValueError('The number {} is out of range.'.format(number))\n    roman = \"\"\n    for i in range(1, number + 1):\n        roman += roman_numerals[number % 10]\n        number //= 10\n    return roman[::-1]\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral (string), obtain its integer equivalent.\n    Restrictions: 1 <= roman_numeral <= 1000\n    Examples:\n    >>> mini_roman_to_int('x') == 19\n    >>> mini_roman_to_int('c') == 152\n    >>> mini_roman_to_int('d') == 426\n    \"\"\"\n    # This is a simple implementation.\n    # See https://en.wikipedia.org/wiki/Roman_numerals for more information\n    if roman_numeral[0] not in roman_numerals:\n        raise ValueError('The roman numeral {} is not valid.'.format(roman_numeral))\n    return sum([roman_numerals.index(x) * 10**(len(x) - 1) for x in roman_numeral[::-1]])"
    },
    {
      "rank": 83,
      "score": 3.0531241671688907,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Invalid value')\n    result = \"\"\n    for i in range(1, int(number) + 1):\n        result += _int_to_roman_map[i]\n    return result.lower()\n\n\ndef roman_to_int(num):\n    \"\"\"\n    Given a string of roman numerals, return the integer equivalent.\n    Restrictions: 1 <= num <= 4000\n\n    Examples:\n    >>> roman_to_int('vii') == 19\n    >>> roman_to_int('iii') == 152\n    >>> roman_to_int('dix') == 426\n    >>> roman_to_int('d') == 0\n    >>> roman_to_int('d') == 0\n    >>> roman_to_int('d') == 0\n    >>> roman_to_int('d') == 0\n    \"\"\"\n    if len(num) > 4:\n        raise ValueError('Invalid value')\n    result = 0\n    for i in range(len(num) - 1, -1, -1):\n        if _roman_to_int_map[num[i]] < _roman_to_int_map[num[i + 1]]:\n            result += _roman_to_int_map[num[i]]\n        else:\n            result += _roman_to_int_map[num[i + 1]]\n    return result\n\n\ndef main():\n    \"\"\"\n    Simple tests of roman_to_int and int_to_roman\n    \"\"\"\n    print('roman_to_int('') == 0')\n    print('roman_to_int(\"\") == 0')\n    print('roman_to_int(\"a\") == 1')\n    print('roman_to_int(\"i\") == 1')\n    print('roman_to_int(\"ii\") == 2')\n    print('roman_to_int(\"iii\") == 3')\n    print('roman_to_int(\"iv\") == 4')\n    print('roman_to_int(\"v\") == 5')\n    print('roman_to_int(\"vi\") == 5')\n    print('roman_to_int(\"vii\") == 6')"
    },
    {
      "rank": 84,
      "score": 2.9958158603312404,
      "candidate": "if not isinstance(number, int):\n        raise TypeError('Expected an integer, got %s' % type(number))\n    if number < 1 or number > 1000:\n        raise ValueError('Expected a positive integer in range [1, 1000], '\n                         'got %d' % number)\n\n    if number < 50:\n        return str(number)\n\n    if number < 100:\n        return str(number) + 'cm'\n    if number < 1000:\n        return str(number) + 'cmx'\n\n    if number < 900:\n        return str(number) + 'cmc'\n    if number < 1000:\n        return str(number) + 'ccc'\n    if number < 1100:\n        return str(number) + 'cd'\n    if number < 1200:\n        return str(number) + 'd'\n    if number < 1300:\n        return str(number) + 'dcc'\n    if number < 1400:\n        return str(number) + 'dc'\n    if number < 1500:\n        return str(number) + 'ccc'\n    if number < 1600:\n        return str(number) + 'c'\n    if number < 1700:\n        return str(number) + 'x'\n    if number < 1800:\n        return str(number) + 'lx'\n    if number < 1900:\n        return str(number) + 'xx'\n    if number < 2000:\n        return str(number) + 'cxx'\n    if number < 2100:\n        return str(number) + 'c'\n    if number < 2200:\n        return str(number) +'m'\n    if number < 2300:\n        return str(number) + 'cm'\n    if number < 2400:\n        return str(number) +'mcc'\n    if number < 2500:\n        return str(number) +'mcd'\n    if number < 2600:\n        return str(number) +'md'\n    if number < 2700:\n        return str(number) + 'ccd'\n    if number < 2800:\n        return str(number) + 'ccc'\n    if number < 2900:\n        return str(number) + '"
    },
    {
      "rank": 85,
      "score": 2.957138066636933,
      "candidate": "if number <= 0:\n        return '-'\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == 21:\n        return 'XXI'\n    if number == 22:\n        return 'XXII'\n    if number == 23:\n        return 'XXIII'\n    if number == 24:\n        return 'XXIV'\n    if number == 25:\n        return 'XXV'\n    if number == 26:\n        return 'XXVI'\n    if number == 27:\n        return 'XXVII'\n    if number == 28:\n        return 'XXVIII'\n    if number == 29:\n        return 'XXIX'\n    if number == 30:\n        return 'XXX'\n    if number == 31:\n        return 'XXXI'\n    if number == 32:\n        return 'XXXII'\n    if number == 33:\n        return 'XXXIII'\n    if number == 34:\n        return 'XXXIV'\n    if number == 35:\n        return 'XXXV'\n    if number == 36:\n        return 'XXXVI'\n    if number == 37"
    },
    {
      "rank": 86,
      "score": 2.931901714770371,
      "candidate": "if number <= 0:\n        raise ValueError('Invalid input')\n    if number < 10:\n        return str(number)\n    if number < 100:\n        return str(number) + 'c'\n    if number < 1000:\n        return str(number) + 'd'\n    if number < 2000:\n        return str(number) + 'cc'\n    if number < 3000:\n        return str(number) + 'ccc'\n    if number < 4000:\n        return str(number) + 'cccc'\n    if number < 5000:\n        return str(number) + 'cd'\n    if number < 6000:\n        return str(number) + 'cdc'\n    if number < 7000:\n        return str(number) + 'cdd'\n    if number < 8000:\n        return str(number) + 'cddc'\n    if number < 9000:\n        return str(number) + 'cdddd'\n    if number < 10000:\n        return str(number) +'m'\n    if number < 20000:\n        return str(number) +'mm'\n    if number < 30000:\n        return str(number) +'mmm'\n    if number < 40000:\n        return str(number) +'mmmmm'\n    if number < 50000:\n        return str(number) +'mmmmmm'\n    if number < 60000:\n        return str(number) + 'nn'\n    if number < 70000:\n        return str(number) + 'nnn'\n    if number < 80000:\n        return str(number) + 'oooooooo'\n    if number < 90000:\n        return str(number) + 'ooooooo'\n    if number < 100000:\n        return str(number) + 'ooo'\n    if number < 110000:\n        return str(number) + 'oooo'\n    if number < 120000:\n        return str(number) + 'ooo'\n    if number < 130000:\n        return str(number) + 'ooo'\n    if number < 140000:\n        return str(number) + 'ooo'\n    if number < 150000:\n        return str(number) + 'ooo'\n    if number < 160000"
    },
    {
      "rank": 87,
      "score": 2.9095749375640843,
      "candidate": "if number <= 0:\n        return ''\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == 21:\n        return 'XXI'\n    if number == 22:\n        return 'XXII'\n    if number == 23:\n        return 'XXIII'\n    if number == 24:\n        return 'XXIV'\n    if number == 25:\n        return 'XXV'\n    if number == 26:\n        return 'XXVI'\n    if number == 27:\n        return 'XXVII'\n    if number == 28:\n        return 'XXVIII'\n    if number == 29:\n        return 'XXIX'\n    if number == 30:\n        return 'XXX'\n    if number == 31:\n        return 'XXXI'\n    if number == 32:\n        return 'XXXII'\n    if number == 33:\n        return 'XXXIII'\n    if number == 34:\n        return 'XXXIV'\n    if number == 35:\n        return 'XXXV'\n    if number == 36:\n        return 'XXXVI'\n    if number == 37:"
    },
    {
      "rank": 88,
      "score": 2.856340515228137,
      "candidate": "roman = ''\n    for numeral in range(1, number + 1):\n        roman += roman_numeral_to_int(numeral)\n    return roman.lower()\n\n\ndef roman_numeral_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, return its equivalent integer value.\n    Restrictions: 1 <= roman_numeral <= 4000\n    \"\"\"\n    if roman_numeral < 1:\n        raise ValueError('Value must be greater than 0.')\n    roman_numeral = roman_numeral.upper()\n    roman_numeral = roman_numeral.replace('I', '1')\n    roman_numeral = roman_numeral.replace('V', '5')\n    roman_numeral = roman_numeral.replace('X', '10')\n    roman_numeral = roman_numeral.replace('L', '50')\n    roman_numeral = roman_numeral.replace('C', '100')\n    roman_numeral = roman_numeral.replace('D', '500')\n    roman_numeral = roman_numeral.replace('M', '1000')\n    return int(roman_numeral)\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 4000\n\n    Examples:\n    >>> int_to_roman(19) == 'XXIX'\n    >>> int_to_roman(152) == 'CLXXXII'\n    >>> int_to_roman(426) == 'CDLXXXIV'\n    \"\"\"\n    roman = ''\n    for numeral in range(1, number + 1):\n        roman += roman_numeral_to_int(numeral)\n    return roman.upper()\n\n\ndef roman_numeral_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, return its equivalent integer value.\n    Restrictions: 1 <= roman_numeral <= 4000\n    \"\"\"\n    if roman_numeral < 1:\n        raise ValueError"
    },
    {
      "rank": 89,
      "score": 2.8514559862679603,
      "candidate": "if number == 0:\n        return '0'\n    if number < 0:\n        raise ValueError('Number must be non-negative')\n    if number >= 1000:\n        raise ValueError('Number must be less than 1000')\n    res = []\n    while number > 0:\n        res.append(roman_numerals[number % 10])\n        number //= 10\n    return ''.join(res[::-1])\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, return its integer equivalent.\n    Restrictions: 1 <= roman_numeral <= 1000\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if roman_numeral == '':\n        raise ValueError('Roman numeral cannot be empty')\n    if roman_numeral[0]!= 'i':\n        raise ValueError('First character of roman numeral must be i')\n    if roman_numeral[-1]!= 'x':\n        raise ValueError('Last character of roman numeral must be x')\n    roman_numeral = roman_numeral[1:-1]\n    if roman_numeral == 'x':\n        raise ValueError('Roman numeral cannot have a single x')\n    if roman_numeral == 'v':\n        raise ValueError('Roman numeral cannot have a single v')\n    if roman_numeral == 'xiv':\n        raise ValueError('Roman numeral cannot be iiv')\n    if roman_numeral == 'xxvi':\n        raise ValueError('Roman numeral cannot be xxvi')\n    if roman_numeral[0] == 'x':\n        roman_numeral = roman_numeral[1:]\n    if roman_numeral[-1] == 'v':\n        roman_numeral = roman_numeral[:-1]\n    res = 0\n    for i, char in enumerate(roman_numeral):\n        if char == 'i':\n            res += 1"
    },
    {
      "rank": 90,
      "score": 2.8312413553971933,
      "candidate": "if number < 1:\n        return ''\n    if number == 1:\n        return 'i'\n    if number < 100:\n        return str(number)\n    if number < 900:\n        return'm' + str(number - 100)\n    if number < 9600:\n        return 'l' + str(number - 900)\n    if number < 96320:\n        return 'x' + str(number - 9600)\n    if number < 966560:\n        return 'c' + str(number - 96320)\n    if number < 9923200:\n        return 'd' + str(number - 966560)\n    if number < 10000000:\n        return'm' + str(number - 9923200)\n    return ''\n\n\ndef mini_roman_to_int(number):\n    \"\"\"\n    Given a string of roman numeral, return its integer equivalent.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if number == '':\n        return 0\n    if number[0] =='m':\n        return 100 * mini_roman_to_int(number[1:]) + mini_roman_to_int(number[1:])\n    if number[0] == 'l':\n        return 900 * mini_roman_to_int(number[1:]) + mini_roman_to_int(number[1:])\n    if number[0] == 'x':\n        return 96320 * mini_roman_to_int(number[1:]) + mini_roman_to_int(number[1:])\n    if number[0] == 'c':\n        return 966560 * mini_roman_to_int(number[1:]) + mini_roman_to_int(number[1:])\n    if number[0] == 'd':\n        return 9923200 * mini_roman_to_int(number[1:]) + mini_roman_to_int(number[1:])\n    if number["
    },
    {
      "rank": 91,
      "score": 2.8000128760724117,
      "candidate": "if number <= 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1000:\n        raise ValueError(\"Number must be less than or equal to 1000\")\n    if number < 10:\n        return str(number)\n    if number < 20:\n        return \"lix\"\n    if number < 100:\n        return \"xc\"\n    if number < 200:\n        return \"c\"\n    if number < 300:\n        return \"m\"\n    if number < 400:\n        return \"l\"\n    if number < 500:\n        return \"x\"\n    if number < 600:\n        return \"ix\"\n    if number < 700:\n        return \"v\"\n    if number < 800:\n        return \"c\"\n    if number < 900:\n        return \"d\"\n    if number < 1000:\n        return \"m\"\n    raise ValueError(\"Number must be less than or equal to 1000\")\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a string, and return\n    it.\n    Restrictions: roman_numeral is a string of lowercase characters and digits\n    from 'i' to 'x'\n\n    Examples:\n    >>> mini_roman_to_int('v') == 5\n    >>> mini_roman_to_int('c') == 3\n    >>> mini_roman_to_int('d') == 4\n    >>> mini_roman_to_int('l') == 2\n    >>> mini_roman_to_int('x') == 1\n    >>> mini_roman_to_int('i') == 1\n    >>> mini_roman_to_int('lix') == 19\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if roman_numeral == \"i\":\n        return 1\n    if roman_numeral == \"v\":\n        return 5\n    if roman_numeral == \"c\":\n        return 3\n    if roman_numeral == \"d\":\n        return 4\n    if roman_numeral == \"l\":\n        return 2\n    if roman_numeral == \"x\":\n        return 1"
    },
    {
      "rank": 92,
      "score": 2.790154179905153,
      "candidate": "if number < 1:\n        return \"\"\n    if number == 1:\n        return \"I\"\n    if number == 2:\n        return \"II\"\n    if number == 3:\n        return \"III\"\n    if number == 4:\n        return \"IV\"\n    if number == 5:\n        return \"V\"\n    if number == 6:\n        return \"VI\"\n    if number == 7:\n        return \"VII\"\n    if number == 8:\n        return \"VIII\"\n    if number == 9:\n        return \"IX\"\n    if number == 10:\n        return \"X\"\n    if number == 11:\n        return \"XI\"\n    if number == 12:\n        return \"XII\"\n    if number == 13:\n        return \"XIII\"\n    if number == 14:\n        return \"XIV\"\n    if number == 15:\n        return \"XV\"\n    if number == 16:\n        return \"XVI\"\n    if number == 17:\n        return \"XVII\"\n    if number == 18:\n        return \"XVIII\"\n    if number == 19:\n        return \"XIX\"\n    if number == 20:\n        return \"XX\"\n    if number == 21:\n        return \"XXI\"\n    if number == 22:\n        return \"XXII\"\n    if number == 23:\n        return \"XXIII\"\n    if number == 24:\n        return \"XXIV\"\n    if number == 25:\n        return \"XXV\"\n    if number == 26:\n        return \"XXVI\"\n    if number == 27:\n        return \"XXVII\"\n    if number == 28:\n        return \"XXVIII\"\n    if number == 29:\n        return \"XXIX\"\n    if number == 30:\n        return \"XXX\"\n    if number == 31:\n        return \"XXXI\"\n    if number == 32:\n        return \"XXXII\"\n    if number == 33:\n        return \"XXXIII\"\n    if number == 34:\n        return \"XXXIV\"\n    if number == 35:\n        return \"XXXV\"\n    if number == 36:\n        return \"XXXVI\"\n    if number == 37:"
    },
    {
      "rank": 93,
      "score": 2.739842567800982,
      "candidate": "if not number:\n        return ''\n    if number < 1 or number > 1000:\n        raise ValueError('number should be between 1 and 1000')\n    if number < 10:\n        return str(number)\n    elif number < 100:\n        return str(number) + 'C'\n    elif number < 1000:\n        return str(number) + 'X'\n    else:\n        return str(number) + 'M'\n\ndef mini_roman_to_int(numeral):\n    \"\"\"\n    Given a string containing a roman numeral, return the integer equivalent\n    of it.\n    Restrictions: 'I' is the only valid numeral\n    \"\"\"\n    if not numeral:\n        return 0\n    if numeral.lower() == 'i':\n        return 1\n    if numeral.lower() == 'ii':\n        return 2\n    if numeral.lower() == 'iii':\n        return 3\n    if numeral.lower() == 'iv':\n        return 4\n    if numeral.lower() == 'v':\n        return 5\n    if numeral.lower() == 'vi':\n        return 6\n    if numeral.lower() == 'vii':\n        return 7\n    if numeral.lower() == 'viii':\n        return 8\n    if numeral.lower() == 'ix':\n        return 9\n    if numeral.lower() == 'x':\n        return 10\n    if numeral.lower() == 'xx':\n        return 20\n    if numeral.lower() == 'xxx':\n        return 30\n    if numeral.lower() == 'l':\n        return 40\n    if numeral.lower() == 'c':\n        return 100\n    if numeral.lower() == 'd':\n        return 500\n    if numeral.lower() =='m':\n        return 1000\n    return 0\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152"
    },
    {
      "rank": 94,
      "score": 2.6860223526963285,
      "candidate": "if number < 1:\n        return ''\n    if number < 100:\n        return chr(ord('a') + number - 1)\n    if number < 900:\n        return ''.join(chr(ord('a') + (number - 100)) + 'M')\n    if number < 27900:\n        return ''.join(chr(ord('a') + (number - 900)) + 'CM')\n    if number < 927900:\n        return ''.join(chr(ord('a') + (number - 27900)) + 'CD')\n    if number < 37854375:\n        return ''.join(chr(ord('a') + (number - 927900)) + 'C')\n    if number < 72057594037927936:\n        return ''.join(chr(ord('a') + (number - 37854375)) + 'XC')\n    if number < 1759218604441536:\n        return ''.join(chr(ord('a') + (number - 72057594037927936)) + 'L')\n    if number < 35828796099876544:\n        return ''.join(chr(ord('a') + (number - 1759218604441536)) + 'XL')\n    if number < 717825873037107520:\n        return ''.join(chr(ord('a') + (number - 35828796099876544)) + 'XC')\n    if number < 140737488355328:\n        return ''.join(chr(ord('a') + (number - 717825873037107520)) + 'L')\n    if number < 288475199432944:\n        return ''.join(chr(ord('a') + (number - 140737488355328)) + 'XL')\n    if number < 562949953421312:\n        return ''.join(chr(ord('a') + (number - 288475199432944)) + 'XC')\n    if number < 1099511627776:\n        return ''.join(chr(ord('a') + (number - 562949953421312)) + 'LC')"
    },
    {
      "rank": 95,
      "score": 2.5882623248414864,
      "candidate": "if number <= 0:\n        return \"\"\n    if number == 1:\n        return \"I\"\n    if number == 2:\n        return \"II\"\n    if number == 3:\n        return \"III\"\n    if number == 4:\n        return \"IV\"\n    if number == 5:\n        return \"V\"\n    if number == 6:\n        return \"VI\"\n    if number == 7:\n        return \"VII\"\n    if number == 8:\n        return \"VIII\"\n    if number == 9:\n        return \"IX\"\n    if number == 10:\n        return \"X\"\n    if number == 11:\n        return \"XI\"\n    if number == 12:\n        return \"XII\"\n    if number == 13:\n        return \"XIII\"\n    if number == 14:\n        return \"L\"\n    if number == 15:\n        return \"LX\"\n    if number == 16:\n        return \"C\"\n    if number == 17:\n        return \"CL\"\n    if number == 18:\n        return \"D\"\n    if number == 19:\n        return \"CM\"\n    if number == 20:\n        return \"M\"\n    if number == 21:\n        return \"MM\"\n    if number == 22:\n        return \"MCM\"\n    if number == 23:\n        return \"MCMXC\"\n    if number == 24:\n        return \"MCDXC\"\n    if number == 25:\n        return \"MD\"\n    if number == 26:\n        return \"MDCC\"\n    if number == 27:\n        return \"MDCLX\"\n    if number == 28:\n        return \"MDCCC\"\n    if number == 29:\n        return \"MDXC\"\n    if number == 30:\n        return \"MCM\"\n    if number == 40:\n        return \"MMD\"\n    if number == 50:\n        return \"MCMLXX\"\n    if number == 60:\n        return \"MDMD\"\n    if number == 80:\n        return \"MMMD\"\n    if number == 100:\n        return \"MCMLXXXX\"\n    if number == 200:\n        return \"MMMDCC\"\n    if number == 300:"
    },
    {
      "rank": 96,
      "score": 2.5621858525860595,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('Number must be between 1 and 1000')\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == 21:\n        return 'XXI'\n    if number == 22:\n        return 'XXII'\n    if number == 23:\n        return 'XXIII'\n    if number == 24:\n        return 'XXIV'\n    if number == 25:\n        return 'XXV'\n    if number == 26:\n        return 'XXVI'\n    if number == 27:\n        return 'XXVII'\n    if number == 28:\n        return 'XXVIII'\n    if number == 29:\n        return 'XXIX'\n    if number == 30:\n        return 'XXX'\n    if number == 40:\n        return 'XL'\n    if number == 50:\n        return 'L'\n    if number == 60:\n        return 'LX'\n    if number == 80:\n        return 'C'\n    if number == 100:\n        return 'CX'\n    if number == 200:\n        return"
    },
    {
      "rank": 97,
      "score": 2.5583280622738283,
      "candidate": "if number < 0:\n        raise ValueError('number must be non-negative')\n    if number == 0:\n        return '0'\n    if number < 20:\n        return chr(number + ord('a'))\n    # A\n    if number < 40:\n        return 'A'\n    # B\n    if number < 60:\n        return 'B'\n    # C\n    if number < 80:\n        return 'C'\n    # D\n    if number < 100:\n        return 'D'\n    # E\n    if number < 120:\n        return 'E'\n    # F\n    if number < 140:\n        return 'F'\n    # G\n    if number < 160:\n        return 'G'\n    # H\n    if number < 200:\n        return 'H'\n    # I\n    if number < 300:\n        return 'I'\n    # J\n    if number < 400:\n        return 'J'\n    # K\n    if number < 500:\n        return 'K'\n    # L\n    if number < 600:\n        return 'L'\n    # M\n    if number < 800:\n        return 'M'\n    # N\n    if number < 1000:\n        return 'N'\n    # O\n    if number < 1200:\n        return 'O'\n    # P\n    if number < 2000:\n        return 'P'\n    # Q\n    if number < 3000:\n        return 'Q'\n    # R\n    if number < 4000:\n        return 'R'\n    # S\n    if number < 5000:\n        return 'S'\n    # T\n    if number < 6000:\n        return 'T'\n    # U\n    if number < 8000:\n        return 'U'\n    # V\n    if number < 9000:\n        return 'V'\n    # W\n    if number < 10000:\n        return 'W'\n    # X\n    if number < 12000:\n        return 'X'\n    # Y\n    if number < 14000:\n        return 'Y'\n    # Z\n    if number < 16000:\n        return 'Z'\n    # AA\n    if number < 20000:\n        return"
    },
    {
      "rank": 98,
      "score": 2.4652754719209597,
      "candidate": "assert 1 <= number <= 1000\n    if number < 10:\n        return chr(ord('i') + number - 1)\n    if number < 100:\n        return chr(ord('c') + number - 10)\n    if number < 1000:\n        return chr(ord('d') + number - 100)\n    return None\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, return its integer equivalent as a positive\n    integer.\n    Restrictions: roman_numeral is either a single character, or a string\n    containing only these characters: i, c, d.\n    \"\"\"\n    assert isinstance(roman_numeral, str)\n    if len(roman_numeral) == 1:\n        return ord(roman_numeral) - ord('i') + 1\n    if roman_numeral == 'xix':\n        return 19\n    if roman_numeral == 'clii':\n        return 152\n    if roman_numeral == 'cdxxvi':\n        return 426\n    return None\n\n\ndef get_chars_in_string(string):\n    \"\"\"\n    Given a string, return a list of characters in the string.\n    \"\"\"\n    return [char for char in string]\n\n\ndef get_chars_in_list(list):\n    \"\"\"\n    Given a list, return a list of characters in the list.\n    \"\"\"\n    return [char for char in list]\n\n\ndef get_char_index(string, char):\n    \"\"\"\n    Given a string and a character, return the index of the character in the\n    string.\n    \"\"\"\n    return string.index(char)\n\n\ndef get_char_pos(string, char, start_index):\n    \"\"\"\n    Given a string and a character, return the position of the character in the\n    string, starting from the given index.\n    \"\"\"\n    return string.find(char, start_index)\n\n\ndef get_char_pos_from_list(string, char, start_index):\n    \"\"\"\n    Given a string and a character, return the position of the character in the\n    string, starting from the given index.\n    \"\"\"\n    return string."
    },
    {
      "rank": 99,
      "score": 2.4534575518375523,
      "candidate": "num = int(number)\n    if num < 1 or num > 1000:\n        raise ValueError(\"Invalid number: {}\".format(num))\n\n    result = []\n    for (i, digit) in enumerate(str(num)):\n        if digit == '9':\n            result.append('t')\n            continue\n        elif digit == '4':\n            result.append('l')\n            continue\n        elif digit == '1':\n            result.append('i')\n            continue\n        elif digit == '5':\n            result.append('x')\n            continue\n        elif digit == '2':\n            result.append('c')\n            continue\n        elif digit == '3':\n            result.append('v')\n            continue\n        elif digit == '6':\n            result.append('m')\n            continue\n        elif digit == '7':\n            result.append('ii')\n            continue\n        elif digit == '8':\n            result.append('l')\n            continue\n        elif digit == '9':\n            result.append('x')\n            continue\n        else:\n            raise ValueError(\"Invalid number: {}\".format(num))\n    return ''.join(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 2.1878790177321794,
      "candidate": "if number < 1 or number > 1000:\n        raise ValueError('1 <= num <= 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xxi'\n    if number == 22:\n        return 'xxii'\n    if number == 23:\n        return 'xxiii'\n    if number == 24:\n        return 'xxiv'\n    if number == 25:\n        return 'xxv'\n    if number == 26:\n        return 'xxvi'\n    if number == 27:\n        return 'xxvii'\n    if number == 28:\n        return 'xxviii'\n    if number == 29:\n        return 'xxix'\n    if number == 30:\n        return 'xxx'\n    if number == 40:\n        return 'cx'\n    if number == 50:\n        return 'd'\n    if number == 60:\n        return'm'\n    if number == 80:\n        return 'cm'\n    if number == 100:\n        return 'dxx'\n    if number == 200:\n        return"
    }
  ]
}