{
  "timestamp": "2025-09-14T16:33:44.125220",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 57,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))\n\n\ndef monotonic_decreasing_or_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing or increasing.\n    >>> monotonic_decreasing_or_increasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing_or_increasing([1, 20, 4, 10, 0])\n    False\n    >>> monotonic_decreasing_or_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x >= y for x, y in zip(l, l[1:])) or all(x <= y for x, y in zip(l, l[:-1]))\n\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))\n\ndef is_monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    True\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "s = set()\n    for x in l:\n        if x in s:\n            return False\n        s.add(x)\n    return True\n\n\ndef monotonic_sequence(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_sequence([1, 2, 4, 20])\n    True\n    >>> monotonic_sequence([1, 20, 4, 10])\n    False\n    >>> monotonic_sequence([4, 1, 0, -10])\n    True\n    \"\"\"\n    s = set()\n    for x in l:\n        if x not in s:\n            s.add(x)\n    return True\n\n\ndef monotonic_sequence_diff(l: list, n: int):\n    \"\"\"Return the n-th difference between the list elements.\n    >>> monotonic_sequence_diff([1, 2, 4, 20], 1)\n    20\n    >>> monotonic_sequence_diff([1, 20, 4, 10], 1)\n    10\n    >>> monotonic_sequence_diff([4, 1, 0, -10], 1)\n    -10\n    \"\"\"\n    s = set()\n    for x in l:\n        if x not in s:\n            s.add(x)\n        if x not in s:\n            return x\n    return 0"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) or monotonic_decreasing(l)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([20, 4, 1, 0])\n    True\n    >>> monotonic_decreasing([4, 1, 0, 10])\n    False\n    >>> monotonic_decreasing([4, 20, 1, 10])\n    False\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([4, 20, 1, 0])\n    True\n    >>> monotonic_increasing([4, 1, 0, 10])\n    False\n    >>> monotonic_increasing([4, 20, 1, 10])\n    False\n    \"\"\"\n    return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "last = l[0]\n    for i in l[1:]:\n        if i > last:\n            return False\n        last = i\n    return True\n\ndef merge_lists(l1, l2):\n    \"\"\"Merge two lists and return a single list.\n    >>> merge_lists([1, 2], [3, 4])\n    [1, 2, 3, 4]\n    >>> merge_lists([1, 2], [])\n    [1, 2]\n    \"\"\"\n    return [x for x in l1 if x in l2]\n\ndef merge_dicts(d1, d2):\n    \"\"\"Merge two dicts and return a single dict.\n    >>> merge_dicts({'a':1, 'b':2}, {'c':3, 'd':4})\n    {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    >>> merge_dicts({'a':1, 'b':2}, {})\n    {'a': 1, 'b': 2}\n    \"\"\"\n    r = {}\n    for k, v in d1.items():\n        r[k] = v\n    for k, v in d2.items():\n        if k not in r:\n            r[k] = v\n    return r\n\ndef merge_sets(s1, s2):\n    \"\"\"Merge two sets and return a single set.\n    >>> merge_sets(set(['a', 'b']), set(['c', 'd']))\n    set(['a', 'b', 'c', 'd'])\n    >>> merge_sets(set(['a', 'b']), set())\n    set(['a', 'b'])\n    \"\"\"\n    return s1.union(s2)\n\ndef merge_sequences(s1, s2):\n    \"\"\"Merge two sequences and return a single sequence.\n    >>> merge_sequences([1, 2], [3, 4])\n    [1, 2, 3, 4]\n    >>> merge_sequences([1, 2], [])\n    [1, 2]\n    \"\"\"\n    r = []\n    for x in s1:\n        if x not in r"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))\n\n\ndef check_monotonic(l: list):\n    \"\"\"\n    Check if list is monotonic.\n    Raise ValueError if not.\n    \"\"\"\n    if not monotonic(l):\n        raise ValueError(\"List is not monotonic: {}\".format(l))\n\n\ndef check_monotonic_increasing(l: list):\n    \"\"\"\n    Check if list is monotonic.\n    Raise ValueError if not.\n    \"\"\"\n    if not monotonic(l, strict=False):\n        raise ValueError(\"List is not monotonic: {}\".format(l))\n\n\ndef check_monotonic_decreasing(l: list):\n    \"\"\"\n    Check if list is monotonic.\n    Raise ValueError if not.\n    \"\"\"\n    if not monotonic(l, strict=True):\n        raise ValueError(\"List is not monotonic: {}\".format(l))\n\n\ndef check_monotonic_increasing_or_decreasing(l: list):\n    \"\"\"\n    Check if list is monotonic.\n    Raise ValueError if not.\n    \"\"\"\n    if not monotonic(l):\n        raise ValueError(\"List is not monotonic: {}\".format(l))\n    else:\n        if monotonic(l, strict=False):\n            raise ValueError(\"List is monotonic increasing: {}\".format(l))\n        elif monotonic(l, strict=True):\n            raise ValueError(\"List is monotonic decreasing: {}\".format(l))\n\n\ndef check_monotonic_increasing_or_decreasing(l: list):\n    \"\"\"\n    Check if list is monotonic.\n    Raise ValueError if not.\n    \"\"\"\n    if not monotonic(l):\n        raise ValueError(\"List is not monotonic: {}\".format(l))\n    else:\n        if monotonic(l, strict=False):\n            raise ValueError(\"List is monotonic increasing: {}\".format(l))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\ndef is_monotonic(l: list):\n    \"\"\"Return True is list is monotonic.\"\"\"\n    return monotonic(l)\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list is monotonic and increasing.\"\"\"\n    return monotonic(l) and all(x < y for x, y in zip(l, l[1:]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list is monotonic and decreasing.\"\"\"\n    return monotonic(l) and all(x > y for x, y in zip(l, l[:-1]))\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True is list is monotonic and increasing or decreasing.\"\"\"\n    return monotonic(l) or any(x < y for x, y in zip(l, l[1:])) or any(x > y for x, y in zip(l, l[:-1]))\n\ndef monotonic_increasing_or_decreasing_or_monotonic(l: list):\n    \"\"\"Return True is list is monotonic and increasing, decreasing or monotonic.\"\"\"\n    return monotonic(l) or any(x < y for x, y in zip(l, l[1:])) or any(x > y for x, y in zip(l, l[:-1])) or monotonic(l)\n\ndef monotonic_increasing_or_decreasing_or_monotonic_or_increasing_or_decreasing(l: list):\n    \"\"\"Return True is list is monotonic and increasing, decreasing or monotonic or increasing, decreasing or monotonic.\"\"\"\n    return monotonic(l) or any(x < y for x, y in zip(l, l[1:])) or any(x > y for x, y in zip(l, l[:-1])) or monotonic(l) or any(x < y for x"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(y < x for x, y in zip(l, l[1:]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:])) and all(y > x for x, y in zip(l, l[1:]))\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:])) and all(y < x for x, y in zip(l, l[1:]))\n\ndef monotonic_decreasing_to_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing_to_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_decreasing_to_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing_to_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:])) and all(y > x for x, y in zip(l, l[1:]))\n\ndef monotonic_increasing_to_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    False\n    >>> monotonic_increasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            return False\n    return True\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) or monotonic_decreasing(l) or monotonic_increasing(l)\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list is monotonic.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\ndef get_files(dir: str, extension: str):\n    return [f for f in os.listdir(dir) if f.endswith(extension)]\n\ndef get_files_from_dir(dir: str, extension: str):\n    return [os.path.join(dir, f) for f in get_files(dir, extension)]\n\ndef get_files_from_dir_and_ext(dir: str, extension: str):\n    return [os.path.join(dir, f) for f in get_files(dir, extension)]\n\ndef get_files_from_dir_and_ext_and_path(dir: str, extension: str, path: str):\n    return [os.path.join(path, f) for f in get_files_from_dir_and_ext(dir, extension)]\n\ndef get_files_from_dir_and_ext_and_path_and_dirs(dir: str, extension: str, path: str, dirs: list):\n    return [os.path.join(path, f) for f in get_files_from_dir_and_ext(dir, extension) if os.path.join(path, f) in dirs]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:]))\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) or monotonic_decreasing(l) or monotonic_increasing(l)\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    True\n    >>> is_monotonic_increasing([4, 1, 0,"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return all(a < b for a, b in zip(l, l[1:])) and all(b < a for a, b in zip(l, l[1:]))\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list is monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(a < b for a, b in zip(l, l[1:]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list is monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(a > b for a, b in zip(l, l[1:]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "last = l[0]\n    for v in l[1:]:\n        if last > v:\n            return False\n        last = v\n    return True\n\n\ndef is_monotonic(l: list, strict=True):\n    \"\"\"Return True if list is monotonic.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    True\n    >>> is_monotonic([4, 1, 0, -10])\n    False\n    >>> is_monotonic([4, 1, 0, -10], strict=False)\n    True\n    \"\"\"\n    if strict:\n        return monotonic(l)\n    else:\n        return monotonic(l) and not monotonic(l[1:])\n\n\ndef unique_list(l: list):\n    \"\"\"Return unique list of elements, ignoring duplicates.\n    >>> unique_list([1, 2, 3, 4, 2])\n    [1, 2, 3, 4]\n    \"\"\"\n    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return l\n    elif len(l) == 2:\n        if l[0] == l[1]:\n            return []\n        else:\n            return l\n    else:\n        dups = []\n        for el in l:\n            if el in dups:\n                continue\n            dups.append(el)\n        return dups"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))\n\n\ndef monotonic_increasing_with_zeros(l: list):\n    \"\"\"Return True if list elements are monotonically increasing with zeros.\n    >>> monotonic_increasing_with_zeros([1, 0, 4, 20])\n    True\n    >>> monotonic_increasing_with_zeros([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_with_zeros([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:])) and all(x < 0 for x in l[1:]) and all(x > 0 for x in l[:-1])\n\n\ndef monotonic_decreasing_with_zeros(l: list):\n    \"\"\"Return True if list elements are mon"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if not l:\n        return False\n    if l[0] < l[-1]:\n        return True\n    else:\n        return False\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list is monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l)\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Return True if list is monotonically increasing.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) and l[0] < l[-1]\n\ndef is_monotonic_decreasing(l: list):\n    \"\"\"Return True if list is monotonically decreasing.\n    >>> is_monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> is_monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> is_monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) and l[0] > l[-1]\n\ndef is_monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list is monotonically increasing or decreasing.\n    >>> is_monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return is_monotonic_"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if not l:\n        return False\n    return min(l) <= max(l)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return sorted(l) == l\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l)\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return sorted(l) == sorted(l)[::-1]\n\ndef is_monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> is_monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> is_monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> is_monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) == sorted(l)[::-1]\n\ndef is_monotonic_decreasing_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing and monotonically increasing.\n    >>> is_monotonic_decreasing_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_decreasing_increasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_decreasing_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return sorted(l) == sorted(l)[::-1]\n\ndef is_monotonic_increasing_decreasing(l: list):\n    \"\"\"Return True if list elements are"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return all(x < y for (x,y) in zip(l, l[1:])) and all(x > y for (x,y) in zip(l[:-1], l[1:]))\n\ndef monotonic_sequence(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_sequence([1, 2, 4, 20])\n    True\n    >>> monotonic_sequence([1, 20, 4, 10])\n    False\n    >>> monotonic_sequence([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x < y for (x,y) in zip(l, l[1:])) and all(x > y for (x,y) in zip(l[:-1], l[1:]))\n\ndef monotonic_decreasing_sequence(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing_sequence([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing_sequence([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing_sequence([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x > y for (x,y) in zip(l, l[1:])) and all(x < y for (x,y) in zip(l[:-1], l[1:]))\n\ndef monotonic_increasing_sequence(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing_sequence([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_sequence([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_sequence([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x < y for (x,y) in zip(l, l[1:])) and all(x > y for (x,y) in zip(l[:-1], l[1:]))\n\ndef monotonic_increasing_decreasing_sequence(l: list"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return all(i < j for i, j in zip(l, l[1:])) and all(i > j for i, j in zip(l, l[:-1]))\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(i < j for i, j in zip(l, l[1:])) and all(i > j for i, j in zip(l, l[:-1]))\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(i < j for i, j in zip(l, l[1:]))\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(i < j for i, j in zip(l, l[1:]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\""
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return all(x > y for x, y in zip(l, l[1:]))\n\ndef add_prefix(s, prefix):\n    \"\"\"Add a prefix to a string.\n    >>> add_prefix(\"test\", \"TEST\")\n    'tESTtest'\n    >>> add_prefix(\"test\", \"TEST\", \" \")\n    'test test'\n    >>> add_prefix(\"test\", \"TEST\", \" \", \" \")\n    'test test test'\n    \"\"\"\n    if s is None:\n        return s\n    return \"%s%s%s\" % (prefix, s, prefix)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return sorted(l) == l\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list is monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    True\n    >>> is_monotonic([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(i < j for i, j in zip(l, l[1:]))\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return sorted(l) == sorted(l)[::-1]\n\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Return True if list is monotonically increasing.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    True\n    >>> is_monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return sorted(l) == sorted(l)[::-1]"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "i = 1\n    for x in l:\n        if x < l[i-1]:\n            return False\n        i += 1\n    return True\n\ndef random_sample(n: int, l: list):\n    \"\"\"Return random sample of size n from list.\n    >>> random_sample(3, [1, 2, 3, 4, 5])\n    [2, 3, 4]\n    \"\"\"\n    return [l[i] for i in sample(range(len(l)), n)]\n\ndef sample_with_replacement(n: int, l: list):\n    \"\"\"Return random sample of size n from list.\n    >>> sample_with_replacement(3, [1, 2, 3, 4, 5])\n    [3, 4, 5]\n    \"\"\"\n    return [l[i] for i in sample(range(len(l)), n)]\n\ndef sample_with_replacement_from_sorted(n: int, l: list):\n    \"\"\"Return random sample of size n from list.\n    >>> sample_with_replacement_from_sorted(3, [1, 2, 3, 4, 5])\n    [1, 2, 3]\n    \"\"\"\n    return [l[i] for i in sample(range(len(l)), n)]\n\ndef sample_with_replacement_from_sorted_without_replacement(n: int, l: list):\n    \"\"\"Return random sample of size n from list.\n    >>> sample_with_replacement_from_sorted_without_replacement(3, [1, 2, 3, 4, 5])\n    [1, 2, 3]\n    \"\"\"\n    return [l[i] for i in sample(range(len(l)), n)]\n\ndef random_sample_with_replacement(n: int, l: list):\n    \"\"\"Return random sample of size n from list.\n    >>> random_sample_with_replacement(3, [1, 2, 3, 4, 5])\n    [3, 4, 5]\n    \"\"\"\n    return [l[i] for i in sample(range(len(l)), n)]\n\ndef random_sample_with_replacement_from_sorted(n:"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return all(x > y for x, y in zip(l, l[1:]))\n\n\ndef random_id(l: list):\n    \"\"\"Return a random element of the list.\n    >>> random_id([1, 2, 4, 20])\n    20\n    \"\"\"\n    return random.choice(l)\n\n\ndef is_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> is_increasing([1, 2, 4, 20])\n    True\n    >>> is_increasing([1, 20, 4, 10])\n    False\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:]))\n\n\ndef is_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> is_decreasing([1, 20, 4, 10])\n    False\n    >>> is_decreasing([1, 2, 4, 20])\n    True\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:]))\n\n\ndef is_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> is_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> is_increasing_or_decreasing([1, 2, 4, 20, 100])\n    True\n    \"\"\"\n    return all(x in [x, x + 1] for x in l)\n\n\ndef is_in_range(l: list, low: int, high: int):\n    \"\"\"Return True if list elements are between low and high.\n    >>> is_in_range([1, 2, 4, 20], 1, 20)\n    True\n    >>> is_in_range([1, 2, 4, 20], -1, 100)\n    False\n    \"\"\"\n    return all(x >= low and x <= high for x in l)\n\n\ndef is_in_interval(l: list, low: int, high: int):\n    \"\"\"Return True if"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:])) and all(x < y for x, y in zip(l, l[:-1]))\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing([1, 4, 20, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\ndef monotonic_increasing_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_decreasing([1, 4, 20, 10])\n    False\n    >>> monotonic_increasing_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:])) and all(x < y for x, y in zip(l, l[:-1]))\n\ndef monotonic_decreasing_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing or increasing.\n    >>> monotonic_decre"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "return (max(l) <= min(l) or max(l) == min(l))\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list is monotonic.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    True\n    >>> is_monotonic([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l)\n\ndef is_increasing(l: list):\n    \"\"\"Return True if list is increasing.\n    >>> is_increasing([1, 2, 4, 20])\n    False\n    >>> is_increasing([1, 20, 4, 10])\n    True\n    >>> is_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (min(l) <= max(l) or min(l) == max(l))\n\ndef is_decreasing(l: list):\n    \"\"\"Return True if list is decreasing.\n    >>> is_decreasing([1, 2, 4, 20])\n    True\n    >>> is_decreasing([1, 20, 4, 10])\n    False\n    >>> is_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (max(l) >= min(l) or max(l) == min(l))\n\ndef is_strictly_increasing(l: list):\n    \"\"\"Return True if list is strictly increasing.\n    >>> is_strictly_increasing([1, 2, 4, 20])\n    False\n    >>> is_strictly_increasing([1, 20, 4, 10])\n    True\n    >>> is_strictly_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return (min(l) == max(l) and min(l) == max(l))\n\ndef is_strictly_decreasing(l: list):\n    \"\"\"Return True if list is strictly decreasing.\n    >>> is_strictly_decreasing([1, 2, 4, 20])\n    True\n    >>> is_strictly_"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "s = set(l)\n    if not s:\n        return True\n    s = list(s)\n    s.sort()\n    return s[0] < s[-1]\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) and l[0] > l[-1]\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) and l[0] < l[-1]\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic_increasing(l) or monotonic_decreasing(l)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if not l:\n        return True\n    if l[0] > l[1]:\n        return False\n    return monotonic(l[1:] + l[:1])\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    if l[0] < l[1]:\n        return False\n    return monotonic_increasing(l[1:] + l[:1])\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    if l[0] < l[1]:\n        return False\n    return monotonic_decreasing(l[1:] + l[:1])\n\ndef monotonic_both(l: list):\n    \"\"\"Return True if list elements are monotonically increasing and decreasing.\n    >>> monotonic_both([1, 2, 4, 20])\n    True\n    >>> monotonic_both([1, 20, 4, 10])\n    False\n    >>> monotonic_both([4, 1, 0, -10])\n    False\n    \"\"\"\n    if not l:\n        return True\n    if l[0] > l[1]:\n        return False\n    if l[0] < l[1]:\n        return False\n    return monotonic_both(l[1:] + l[:1])"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return sorted(l) == l\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return sorted(l) <= l\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) >= l\n\n\ndef monotonic_compare(l: list, cmp: Callable[[T], R]):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_compare([1, 2, 4, 20], lambda x: x)\n    True\n    >>> monotonic_compare([1, 20, 4, 10], lambda x: x)\n    False\n    >>> monotonic_compare([4, 1, 0, -10], lambda x: x)\n    False\n    \"\"\"\n    return monotonic(l) and cmp(l[0]) <= cmp(l[-1])\n\n\ndef monotonic_increasing_compare(l: list, cmp: Callable[[T], R]):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing_compare([1, 2, 4, 20], lambda x: x)\n    True\n    >>> monotonic_increasing_compare([1, 20, 4, 10], lambda x: x)\n    False\n    >>> monotonic_increasing_compare([4, 1, 0, -10], lambda x: x)\n    False\n    \"\"\"\n    return monotonic_compare(l, cmp) and cmp"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list is monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) and all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list is monotonically decreasing.\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([1, 4, 20, 10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) and all(x <= y for x, y in zip(l, l[1:]))\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list is monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10, -1])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 4, 20, 10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic_increasing(l) or monotonic_decreasing(l)\n\ndef monotonic_increasing_or_decreasing_or_zero(l: list):\n    \"\"\"Return True if list is monotonically increasing, decreasing, or zero.\n    >>> monotonic_increasing_or_decreasing_or_zero([1, 20,"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if len(l) < 2:\n        return False\n    if l[0] > l[-1]:\n        return False\n    for i in range(1, len(l)):\n        if l[i - 1] > l[i]:\n            return False\n    return True\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    if l[0] > l[-1]:\n        return False\n    for i in range(1, len(l)):\n        if l[i - 1] > l[i]:\n            return False\n    return True\n\n\ndef sort_list(l: list):\n    \"\"\"Sort list in place.\n    >>> sort_list([5, 2, 4, 1, 3])\n    >>> print(l)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    l.sort()\n    return l\n\n\ndef is_sorted(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted([5, 2, 4, 1, 3])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] > l[-1]:\n        return False\n    for i in range(1, len(l)):\n        if l[i - 1] > l[i]:\n            return False\n    return True\n\n\ndef is_unique(l: list):\n    \"\"\"Return True if list is unique.\n    >>> is_unique([1, 2, 3, 4, 5])\n    True\n    >>> is_unique([1, 2, 3, 4, 5, 4, 5])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "return sorted(l) == sorted(l)[::-1]\n\ndef random_string(length: int):\n    \"\"\"Generate a random string of given length.\n    >>> random_string(10)\n    'A2G2'\n    >>> random_string(20)\n    'DZUJYX'\n    \"\"\"\n    letters = string.ascii_uppercase\n    return ''.join(choice(letters) for i in range(length))\n\ndef random_string_lowercase(length: int):\n    \"\"\"Generate a random string of given length, in lowercase letters.\n    >>> random_string_lowercase(10)\n    'a2g2'\n    >>> random_string_lowercase(20)\n    'dzujyx'\n    \"\"\"\n    letters = string.ascii_lowercase\n    return ''.join(choice(letters) for i in range(length))\n\ndef random_string_digits(length: int):\n    \"\"\"Generate a random string of given length, in digits.\n    >>> random_string_digits(10)\n    'a2g2'\n    >>> random_string_digits(20)\n    'dzujyx'\n    \"\"\"\n    letters = string.digits\n    return ''.join(choice(letters) for i in range(length))\n\ndef random_string_hex(length: int):\n    \"\"\"Generate a random string of given length, in hexadecimal digits.\n    >>> random_string_hex(10)\n    'a2g2'\n    >>> random_string_hex(20)\n    'dzujyx'\n    \"\"\"\n    letters = string.hexdigits\n    return ''.join(choice(letters) for i in range(length))\n\ndef random_string_whitespace(length: int):\n    \"\"\"Generate a random string of given length, with whitespace between each\n    character.\n    >>> random_string_whitespace(10)\n    'A2G2'\n    >>> random_string_whitespace(20)\n    'DZUJYX'\n    \"\"\"\n    letters = string.ascii_uppercase + string.ascii_lowercase"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if l[-1] < l[0]:\n        return False\n    return True\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if l[-1] > l[0]:\n        return False\n    return True\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if l[-1] < l[0]:\n        return False\n    return True\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list is monotonic or monotonic increasing or monotonic decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) or monotonic_increasing(l) or monotonic_decreasing(l)"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "return all(l[i+1] >= l[i] for i in range(len(l)-1))\n\n\ndef print_table(t: list, header: str):\n    \"\"\"Print a table of the specified size, with header.\n    >>> print_table([1, 2, 3], \"1\")\n    1 2 3\n    1\n    2\n    3\n    >>> print_table([1, 2, 3], \"1\")\n    1 2 3\n    1\n    2\n    3\n    \"\"\"\n    if not header:\n        header = \"\"\n    for i in range(len(t)):\n        print(header, end=\" \")\n        if i == len(t)-1:\n            print(t[i])\n        else:\n            print(t[i], end=\" \")\n        if i < len(t)-1:\n            print(\"\\t\", end=\" \")\n    print()\n\n\ndef print_dictionary(d: dict):\n    \"\"\"Print a dictionary, in the form of a table.\n    >>> print_dictionary({'a': 1, 'b': 2, 'c': 3})\n    a | b | c\n    ---|---|---\n    1 | 2 | 3\n    >>> print_dictionary({'a': 1, 'b': 2, 'c': 3, 'd': 4})\n    a | b | c | d\n    ---|---|---|---\n    1 | 2 | 3 | 4\n    >>> print_dictionary({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})\n    a | b | c | d | e\n    ---|---|---|---|---\n    1 | 2 | 3 | 4 | 5\n    >>> print_dictionary({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6})\n    a | b | c | d | e | f\n    ---|---|---|---|---|---\n    1 | 2 | 3 | 4 | 5 | 6\n    \"\"\"\n    for key in sorted(d):\n        print(key, \"|\", end=\"\")\n        for val in d[key"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "if not l:\n        return True\n    if l[-1] == l[0]:\n        return True\n    if l[-1] > l[0]:\n        return monotonic(l[1:])\n    else:\n        return monotonic(l[1:]) and monotonic([l[0]] + l[1:])\n\ndef monotonic_asc(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing\n    in ascending order.\n    >>> monotonic_asc([1, 2, 4, 20])\n    True\n    >>> monotonic_asc([1, 20, 4, 10])\n    False\n    >>> monotonic_asc([4, 1, 0, -10])\n    False\n    \"\"\"\n    if not l:\n        return True\n    if l[0] > l[-1]:\n        return monotonic_asc(l[1:])\n    if l[0] < l[-1]:\n        return monotonic_asc([l[-1], l[0]] + l[1:])\n    return monotonic_asc(l[1:])\n\ndef monotonic_desc(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing\n    in descending order.\n    >>> monotonic_desc([1, 2, 4, 20])\n    True\n    >>> monotonic_desc([1, 20, 4, 10])\n    False\n    >>> monotonic_desc([4, 1, 0, -10])\n    False\n    \"\"\"\n    if not l:\n        return True\n    if l[0] < l[-1]:\n        return monotonic_desc(l[1:])\n    if l[0] > l[-1]:\n        return monotonic_desc([l[-1], l[0]] + l[1:])\n    return monotonic_desc(l[1:])\n\ndef is_monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic(["
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            return True\n        elif l[i] < l[i - 1]:\n            return False\n    return False\n\ndef monotonic_sequence(l: list):\n    \"\"\"Return True if the list is monotonic in a strictly increasing or decreasing\n    order.\n    >>> monotonic_sequence([1, 2, 4, 20])\n    True\n    >>> monotonic_sequence([1, 20, 4, 10])\n    True\n    >>> monotonic_sequence([4, 1, 0, -10])\n    False\n    \"\"\"\n    if monotonic(l):\n        return True\n    if not monotonic(l[1:] + l[:1]):\n        return False\n    return True"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "return not (min(l) >= max(l))\n\ndef is_monotonic(l: list):\n    \"\"\"Check if list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    True\n    >>> is_monotonic([4, 1, 0, -10])\n    False\n    \"\"\"\n    return min(l) >= max(l)\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return not (min(l) <= max(l))\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Check if list elements are monotonically increasing.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return min(l) <= max(l)\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not (min(l) <= max(l))\n\ndef is_monotonic_decreasing(l: list):\n    \"\"\"Check if list elements are monotonically decreasing.\n    >>> is_monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> is_monotonic_decreasing(["
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "return sorted(l) == l\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list is monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    True\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(monotonic(l[i-1:i+1]) for i in range(len(l)))\n\n\ndef is_monotonic_decreasing(l: list):\n    \"\"\"Return True if list is monotonically decreasing.\n    >>> is_monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> is_monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> is_monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(monotonic(l[i-1:i+1]) for i in range(len(l))) and not monotonic(l)\n\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Return True if list is monotonically increasing.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(monotonic(l[i-1:i+1]) for i in range(len(l)))\n\n\ndef is_monotonic_increasing_decreasing(l: list):\n    \"\"\"Return True if list is monotonically increasing or decreasing.\n    >>> is_monotonic_increasing_decreasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing_decreasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_increasing_decreasing([4, 1, 0, -10])\n    False\n    \"\"\""
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "return all(x <= y for x, y in zip(l, l[1:])) and all(y <= x for x, y in zip(l, l[1:]))\n\ndef _get_first_key(d: dict, key: str):\n    \"\"\"\n    Given a dictionary, return the first value for a given key.\n    If the key is not present, return None.\n    \"\"\"\n    return next(iter(d[key]), None)\n\ndef _get_first_key_and_value(d: dict, key: str):\n    \"\"\"\n    Given a dictionary, return the first value for a given key.\n    If the key is not present, return None.\n    \"\"\"\n    return next(iter(d[key]), None)\n\ndef _get_first_key_and_value_and_value(d: dict, key: str):\n    \"\"\"\n    Given a dictionary, return the first value for a given key.\n    If the key is not present, return None.\n    \"\"\"\n    return next(iter(d[key]), None)\n\ndef _get_all_keys(d: dict):\n    \"\"\"\n    Given a dictionary, return a list of all keys.\n    \"\"\"\n    return list(d.keys())\n\ndef _get_all_keys_and_values(d: dict):\n    \"\"\"\n    Given a dictionary, return a list of all keys and values.\n    \"\"\"\n    return list(d.items())\n\ndef _get_all_keys_and_values_and_values(d: dict):\n    \"\"\"\n    Given a dictionary, return a list of all keys, values, and values.\n    \"\"\"\n    return list(d.items())\n\ndef _get_all_key_and_values(d: dict):\n    \"\"\"\n    Given a dictionary, return a list of all keys and values.\n    \"\"\"\n    return list(d.values())\n\ndef _get_all_key_and_values_and_values(d: dict):\n    \"\"\"\n    Given a dictionary, return a list of all keys and values.\n    \"\"\"\n    return list(d.values())\n\ndef _get_all_keys_and_values_and_values_with_prefix("
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    True\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\n\ndef is_increasing(l: list):\n    \"\"\"Return True if list elements are increasing.\n    >>> is_increasing([1, 2, 4, 20])\n    True\n    >>> is_increasing([1, 20, 4, 10])\n    False\n    >>> is_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))\n\n\ndef is_decreasing(l: list):\n    \"\"\"Return True if list elements are decreasing.\n    >>> is_decreasing([1, 2, 4, 20])\n    False\n    >>> is_decreasing([1, 20, 4, 10])\n    True\n    >>> is_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))\n\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> is_monot"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "return all(a <= b for a, b in zip(l, l[1:])) and all(b <= a for a, b in zip(l, l[1:]))\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(a >= b for a, b in zip(l, l[1:])) and all(b >= a for a, b in zip(l, l[1:]))\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(a <= b for a, b in zip(l, l[1:])) and all(b <= a for a, b in zip(l, l[1:]))\n\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) or monotonic_decreasing(l) or monotonic_increasing(l)\n\n\ndef monotonic_increasing_or_decreasing_or_equal(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing or equal.\n    >>> monotonic_increasing_or"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "i = 1\n    for a in l:\n        if a < l[i-1]:\n            return False\n        elif a > l[i-1]:\n            i += 1\n    return True\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) and l[0] < l[-1]\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([1, 4, 20, 10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) and l[0] > l[-1]\n\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) or l[0] < l[-1]\n\n\ndef monotonic_increasing_or_decreasing_or_null(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing\n    or None.\n    >>> monotonic_increasing_or_decreasing_or_null([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_or_decreasing_or_null([1, 20, 4,"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "# assume increasing\n    last = l[0]\n    for i in l[1:]:\n        if i < last:\n            return False\n        last = i\n    return True\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l)\n\ndef is_increasing(l: list):\n    \"\"\"Return True if list elements are increasing or decreasing.\n    >>> is_increasing([1, 2, 4, 20])\n    True\n    >>> is_increasing([1, 20, 4, 10])\n    False\n    >>> is_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return not monotonic(l)\n\ndef is_decreasing(l: list):\n    \"\"\"Return True if list elements are increasing or decreasing.\n    >>> is_decreasing([1, 2, 4, 20])\n    False\n    >>> is_decreasing([1, 20, 4, 10])\n    True\n    >>> is_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return not monotonic(l)\n\ndef is_increasing_monotonic(l: list):\n    \"\"\"Return True if list elements are increasing or decreasing.\n    >>> is_increasing_monotonic([1, 2, 4, 20])\n    True\n    >>> is_increasing_monotonic([1, 20, 4, 10])\n    False\n    >>> is_increasing_monotonic([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l)\n\ndef is_decreasing_monotonic(l: list):\n    \"\"\"Return True if list elements are increasing or decreasing.\n    >>> is_decreasing_monotonic([1, 2, 4, 20])\n    False\n    >>> is_decreasing_monotonic([1,"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\ndef find_max_range(values: list):\n    \"\"\"Find the maximum range of the given values.\n    >>> find_max_range([1, 2, 4, 20])\n    20\n    >>> find_max_range([1, 20, 4, 10])\n    20\n    >>> find_max_range([4, 1, 0, -10])\n    10\n    \"\"\"\n    return max(x for x in values if x > 0)\n\ndef find_max_range_at_least(values: list):\n    \"\"\"Find the maximum range of the given values.\n    >>> find_max_range_at_least([1, 2, 4, 20])\n    20\n    >>> find_max_range_at_least([1, 20, 4, 10])\n    20\n    >>> find_max_range_at_least([4, 1, 0, -10])\n    10\n    \"\"\"\n    return max(x for x in values if x >= 0)\n\ndef find_min_range(values: list):\n    \"\"\"Find the minimum range of the given values.\n    >>> find_min_range([1, 2, 4, 20])\n    0\n    >>> find_min_range([1, 20, 4, 10])\n    0\n    >>> find_min_range([4, 1, 0, -10])\n    0\n    \"\"\"\n    return min(x for x in values if x < 0)\n\ndef find_min_range_at_least(values: list):\n    \"\"\"Find the minimum range of the given values.\n    >>> find_min_range_at_least([1, 2, 4, 20])\n    0\n    >>> find_min_range_at_least([1, 20, 4, 10])\n    0\n    >>> find_min_range_at_least([4, 1, 0, -10])\n    0\n    \"\"\"\n    return min(x for x in values if x <= 0)\n\ndef find_first_non_zero(values: list"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "return sorted(l) == l\n\ndef is_even(n: int):\n    \"\"\"Return True if n is even, else False.\n    >>> is_even(5)\n    False\n    >>> is_even(8)\n    True\n    >>> is_even(10)\n    True\n    >>> is_even(2)\n    True\n    >>> is_even(0)\n    False\n    >>> is_even(-1)\n    False\n    \"\"\"\n    return n % 2 == 0\n\ndef is_odd(n: int):\n    \"\"\"Return True if n is odd, else False.\n    >>> is_odd(5)\n    False\n    >>> is_odd(8)\n    False\n    >>> is_odd(10)\n    False\n    >>> is_odd(2)\n    False\n    >>> is_odd(0)\n    False\n    >>> is_odd(-1)\n    True\n    \"\"\"\n    return n % 2 == 1\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, else False.\n    >>> is_prime(5)\n    False\n    >>> is_prime(8)\n    True\n    >>> is_prime(10)\n    True\n    >>> is_prime(2)\n    False\n    >>> is_prime(0)\n    False\n    >>> is_prime(-1)\n    False\n    \"\"\"\n    if n == 0:\n        return False\n    if n < 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 7:\n        return True\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_fast(n: int):\n    \"\"\"Return True if n is a prime number, else False.\n    >>> is_prime_fast(5)\n    False\n    >>> is_prime_fast(8)\n    True\n    >>> is_prime_fast(10)\n    True\n    >>> is_prime_fast(2)"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "# this is a dumb implementation\n    return all(x < y for x, y in zip(l, l[1:]))\n\n\ndef is_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_increasing([1, 2, 4, 20])\n    False\n    >>> is_increasing([1, 20, 4, 10])\n    True\n    >>> is_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:]))\n\n\ndef is_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing or increasing.\n    >>> is_decreasing([1, 20, 4, 10])\n    True\n    >>> is_decreasing([4, 1, 0, -10])\n    False\n    >>> is_decreasing([4, 1, 20, 10])\n    False\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:]))\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:]))\n\n\ndef is_increasing_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_increasing_increasing([1, 2, 4, 20])\n    False\n    >>> is_increasing_increasing([1, 20, 4, 10])\n    True\n    >>> is_increasing_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[1:]))\n\n\ndef is_decreasing_decre"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\n\ndef merge_tables(table_a: pd.DataFrame, table_b: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Merge two tables together.\"\"\"\n    result = table_a.append(table_b)\n    return result\n\n\ndef merge_tables_by_index(table_a: pd.DataFrame, table_b: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Merge two tables together. The tables must have the same index.\"\"\"\n    assert table_a.index.equals(table_b.index), \"Indexes must match.\"\n    return table_a.merge(table_b, on='index')\n\n\ndef is_valid_number(x: str) -> bool:\n    \"\"\"Return True if the string is a valid number.\"\"\"\n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_valid_datetime(x: str) -> bool:\n    \"\"\"Return True if the string is a valid datetime.\"\"\"\n    try:\n        datetime.strptime(x, '%Y-%m-%d %H:%M:%S')\n        return True\n    except ValueError:\n        return False\n\n\ndef is_valid_date(x: str) -> bool:\n    \"\"\"Return True if the string is a valid date.\"\"\"\n    try:\n        datetime.strptime(x, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return False\n\n\ndef is_valid_time(x: str) -> bool:\n    \"\"\"Return True if the string is a valid time.\"\"\"\n    try:\n        datetime.strptime(x, '%H:%M:%S')\n        return True\n    except ValueError:\n        return False\n\n\ndef get_datetime_from_str(x: str) -> datetime:\n    \"\"\"Return datetime from string.\"\"\"\n    return datetime.str"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "if len(l) < 2:\n        return True\n    for i in range(len(l)):\n        if l[i] >= l[i-1] and l[i] <= l[i+1]:\n            return True\n    return False\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(len(l)):\n        if l[i] <= l[i-1] and l[i] >= l[i+1]:\n            return True\n    return False\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(len(l)):\n        if l[i] <= l[i-1] and l[i] >= l[i+1]:\n            return True\n    return False\n\ndef monotonic_decreasing_reversed(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing_reversed([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing_reversed([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing_reversed([4, 1, 0, -10])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(len(l)):"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "for i in range(len(l)):\n        if l[i] > l[i-1]:\n            return True\n        elif l[i] < l[i-1]:\n            return False\n    return True\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) and not monotonic_decreasing(l)\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) and not monotonic_increasing(l)\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic_increasing(l) or monotonic_decreasing(l)\n\ndef monotonic_increasing_or_decreasing_or_both(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing or both.\n    >>> monotonic_increasing_or_decreasing_or_both([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_or_decreasing_or_both([1"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))\n\ndef _sorted_by_key(a):\n    return sorted(a, key=lambda x: x[0])\n\ndef _sorted_by_value(a):\n    return sorted(a, key=lambda x: x[1])\n\ndef _sorted_by_key_and_value(a):\n    return sorted(a, key=lambda x: (x[0], x[1]))\n\ndef _sorted_by_value_and_key(a):\n    return sorted(a, key=lambda x: (x[1], x[0]))\n\ndef _sorted_by_key_and_value_and_count(a):\n    return sorted(a, key=lambda x: (x[0], x[1], x[2]), reverse=True)\n\ndef _sorted_by_value_and_key_and_count(a):\n    return sorted(a, key=lambda x: (x[1], x[0], x[2]), reverse=True)\n\ndef _sorted_by_key_and_value_and_count_and_count(a):\n    return sorted(a, key=lambda x: (x[0], x[1], x[2], x[3]), reverse=True)\n\ndef _sorted_by_value_and_key_and_count_and_count(a):\n    return sorted(a, key=lambda x: (x[1], x[0], x[2], x[3]), reverse=True)\n\n_functions = {\n    '_sorted_by_key': _sorted_by_key,\n    '_sorted_by_value': _sorted_by_value,\n    '_sorted_by_key_and_value': _sorted_by_key_and_value,\n    '_sorted_by_value_and_key': _sorted_by_value_and_key,\n    '_sorted_by_key_and_value_and_count':"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return True\n    elif l[0] < l[-1]:\n        return True\n    else:\n        return False\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) and all(x < y for x, y in zip(l, l[1:]))\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) and all(x > y for x, y in zip(l, l[1:]))"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_increasing(l: list):\n    \"\"\"Return True if all elements are increasing in the list.\n    >>> is_increasing([1, 2, 4, 20])\n    True\n    >>> is_increasing([1, 20, 4, 10])\n    False\n    >>> is_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[1:]))\n\ndef is_decreasing(l: list):\n    \"\"\"Return True if all elements are decreasing in the list.\n    >>> is_decreasing([1, 20, 4, 10])\n    False\n    >>> is_decreasing([4, 1, 0, -10])\n    True\n    >>> is_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(x > y for x, y in zip(l, l[1:])) and all(x < y for x, y in zip(l, l[1:]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonic decreasing.\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_increasing_decreasing(l: list):\n    \"\"\"Return True if all elements are increasing or decreasing in the list.\n    >>> is_increasing_decreasing([1, 20, 4, 10])\n    True\n    >>> is_increasing_decreasing([1, 20, 4, 10"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))\n\ndef lcm(a, b):\n    \"\"\"Return least common multiple of a and b.\n    >>> lcm(2, 5)\n    10\n    >>> lcm(3, 7)\n    21\n    >>> lcm(3, 6)\n    6\n    \"\"\"\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    \"\"\"Return greatest common divisor of a and b.\n    >>> gcd(2, 5)\n    2\n    >>> gcd(3, 7)\n    1\n    >>> gcd(3, 6)\n    3\n    >>> gcd(3, -7)\n    -3\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"Return least common multiple of a and b.\n    >>> lcm(2, 5)\n    10\n    >>> lcm(3, 7)\n    21\n    >>> lcm(3, 6)\n    6\n    >>> lcm(3, -7)\n    -3\n    \"\"\"\n    return a * b // gcd(a, b)\n\ndef fsum(a: list, b: list) -> float:\n    \"\"\"Return sum of two lists of numbers.\n    >>> fsum([1, 2, 3], [3, 4, 5])\n    12\n    \"\"\"\n    return sum(a) + sum(b)\n\ndef fprod(a: list, b: list) -> float:\n    \"\"\"Return product of two lists of numbers.\n    >>> fprod([1, 2, 3], [3, 4, 5])\n    24\n    \"\"\"\n    return reduce(mul, a, 1) * reduce(mul, b, 1)\n\ndef fmean(a: list, b: list) -> float:\n    \"\"\"Return arithmetic mean of two lists of numbers.\n    >>>"
    },
    {
      "rank": 54,
      "score": 10.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l[::-1], l[1::-1]))\n\ndef sort_by_value(l: list):\n    \"\"\"Sort list by value.\n    >>> sort_by_value([1, 2, 4, 20])\n    [1, 2, 4, 20]\n    >>> sort_by_value([20, 4, 2, 1])\n    [1, 2, 4, 20]\n    >>> sort_by_value([20, 4, 1, 2])\n    [1, 2, 4, 20]\n    \"\"\"\n    return sorted(l, key=lambda x: x, reverse=True)\n\ndef print_list(l: list,\n               width: int = 80,\n               sep: str = \" \",\n               end: str = \"\\n\"):\n    \"\"\"Print list with whitespace padding.\n    >>> print_list([1, 2, 4, 20])\n    1 2 4 20\n    >>> print_list([1, 2, 4, 20], width=5)\n    1 2 4 20\n    >>> print_list([1, 2, 4, 20], sep=\"  \", end=\"\\n\")\n    1  2  4  20\n    \"\"\"\n    print(sep.join(str(x).rjust(width - len(sep)) for x in l))\n\ndef print_list_of_lists(l: list,\n                        width: int = 80,\n                        sep: str = \" \",\n                        end: str = \"\\n\"):\n    \"\"\"Print list of lists.\n    >>> print_list_of_lists([[1, 2, 4, 20], [1, 2, 4, 20]])\n    1 2 4 20\n    >>> print_list_of_lists([[1, 2, 4, 20], [1, 2, 4, 20]], width=5)\n    1 2 4 20\n    >>> print_list_of_lists([[1, 2, 4, 20], [1, 2, 4, 20]], sep=\"  \", end=\"\\n\")\n    1  2  4  20\n    \"\"\"\n    print"
    },
    {
      "rank": 55,
      "score": 10.0,
      "candidate": "return all(i < j for i, j in zip(l, l[1:])) and all(i > j for i, j in zip(l, l[1:]))\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(i <= j for i, j in zip(l, l[1:])) and all(i >= j for i, j in zip(l, l[1:]))\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(i >= j for i, j in zip(l, l[1:])) and all(i <= j for i, j in zip(l, l[1:]))\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) or monotonic_decreasing(l)\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])"
    },
    {
      "rank": 56,
      "score": 10.0,
      "candidate": "return sorted(l) == sorted(l)[::-1]\n\ndef get_path_info(path: str, include_dirs: bool = False):\n    \"\"\"Get information about a file.\n    >>> get_path_info('.', include_dirs=True)\n    {'is_dir': False, 'is_file': True, 'path': '', 'path_type': 'file'}\n    >>> get_path_info('.', include_dirs=False)\n    {'is_dir': False, 'is_file': True, 'path': '', 'path_type': 'file'}\n    >>> get_path_info('/tmp/test', include_dirs=True)\n    {'is_dir': True, 'is_file': False, 'path': '/tmp/test', 'path_type': 'dir'}\n    >>> get_path_info('/tmp/test', include_dirs=False)\n    {'is_dir': True, 'is_file': False, 'path': '/tmp/test', 'path_type': 'dir'}\n    >>> get_path_info('/tmp/test/test2', include_dirs=True)\n    {'is_dir': True, 'is_file': False, 'path': '/tmp/test/test2', 'path_type': 'dir'}\n    >>> get_path_info('/tmp/test/test2', include_dirs=False)\n    {'is_dir': True, 'is_file': False, 'path': '/tmp/test/test2', 'path_type': 'dir'}\n    \"\"\"\n    if os.path.isdir(path):\n        return {\n            'is_dir': True,\n            'is_file': False,\n            'path': os.path.abspath(path),\n            'path_type': 'dir',\n        }\n    elif os.path.isfile(path):\n        return {\n            'is_dir': False,\n            'is_file': True,\n            'path': os.path.abspath(path),\n            'path_type': 'file',\n        }\n    else:\n        raise IO"
    },
    {
      "rank": 57,
      "score": 10.0,
      "candidate": "l = list(l)\n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return True\n        elif l[i] <= l[i + 1]:\n            return False\n    return True\n\ndef monotonic_range(min_, max_):\n    \"\"\"Return list of monotonically increasing integers from min_ to max_.\n    >>> monotonic_range(1, 100)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    \"\"\"\n    return [min_] + [min_ + i for i in range(1, max_ - min_ + 1)]\n\ndef monotonic_range_2(min_, max_):\n    \"\"\"Return list of monotonically increasing integers from min_ to max_.\n    >>> monotonic_range_2(1, 100)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57"
    },
    {
      "rank": 58,
      "score": 9.0,
      "candidate": "return sorted(l) == list(l)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))\n\ndef get_max_memory():\n    \"\"\"Returns the maximum amount of memory (in MB) that can be used by\n    a process (as returned by psutil.virtual_memory().total).\n    \"\"\"\n    try:\n        import psutil\n        return psutil.virtual_memory().total / 1e6\n    except ImportError:\n        return -1"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l[:-1], l[1:]))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))\n\ndef get_monotonic_path(l: list):\n    \"\"\"Given a list of points, returns a monotonic path of points.\n    The path is always a list of points that are monotonically increasing or decreasing.\n    >>> get_monotonic_path([1, 2, 4, 20])\n    [1, 4, 10, 20]\n    >>> get_monotonic_path([1, 20, 4, 10])\n    [4, 1, 20, 10]\n    >>> get_monotonic_path([4, 1, 0, -10])\n    [1, 4, 10, -10]\n    \"\"\"\n    if not monotonic(l):\n        raise ValueError(\"Input list is not monotonic\")\n    return sorted(l)\n\ndef get_monotonic_path_length(l: list):\n    \"\"\"Given a list of points, returns the length of the monotonic path.\n    >>> get_monotonic_path_length([1, 2, 4, 20])\n    5\n    >>> get_monotonic_path_length([1, 20, 4, 10])\n    5\n    >>> get_monotonic_path_length([4, 1, 0, -10])\n    5\n    \"\"\"\n    return len(get_monotonic_path(l))\n\ndef get_monotonic_path_from_point(point: int, l: list):\n    \"\"\"Given a point and a list of points, returns the monotonic path of points.\n    The path is always a list of points that are monotonically increasing or decreasing.\n    >>> get_monotonic_path_from_point(1, [1, 2, 4, 20])\n    [1, 4, 10, 20]\n    >>> get_monotonic_path_from_point(4, [1, 20, 4, 10])\n    [4, 1, 20, 10]\n    >>> get_monotonic_path_from_point(10, [4, 1, 0, -10])"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "if len(l) < 2:\n        return True\n    last_val = l[0]\n    for i in l[1:]:\n        if i < last_val:\n            return False\n        last_val = i\n    return True\n\ndef merge_dicts(*dict_args):\n    \"\"\"Recursively merge dicts into a single dict, with the least-specific\n    keys being given priority.\n\n    >>> merge_dicts({\"a\": 1}, {\"a\": 2}, {\"b\": 1})\n    {'a': 1, 'b': 1}\n    \"\"\"\n    result = {}\n    for d in dict_args:\n        for k, v in d.items():\n            if k in result and isinstance(result[k], dict):\n                result[k] = merge_dicts(result[k], v)\n            else:\n                result[k] = v\n    return result"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "return all(x > y for x, y in zip(l, l[1:]))\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        filename = sys.argv[1]\n        with open(filename) as f:\n            data = f.readlines()\n    else:\n        data = sys.stdin.readlines()\n\n    for line in data:\n        if not line.startswith(\"#\"):\n            l = line.strip().split(\"\\t\")\n            print(monotonic(l[1:]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "if len(l) < 2:\n        return True\n    return l[-1] >= l[-2]\n\ndef find_min_max_value(l: list):\n    \"\"\"Finds the min and max value in a list.\n    >>> find_min_max_value([1, 2, 3, 4, 5])\n    (1, 5)\n    >>> find_min_max_value([10, 20, 30])\n    (10, 30)\n    >>> find_min_max_value([-10, 0, -5, -1])\n    (-10, -1)\n    >>> find_min_max_value([1, -1, 2, -2, 3])\n    (1, 3)\n    \"\"\"\n    if len(l) < 2:\n        return l[0], l[-1]\n    return l[0], min(l)\n\ndef find_min_max_value_2(l: list):\n    \"\"\"Finds the min and max value in a list.\n    >>> find_min_max_value_2([1, 2, 3, 4, 5])\n    (1, 5)\n    >>> find_min_max_value_2([10, 20, 30])\n    (10, 30)\n    >>> find_min_max_value_2([-10, 0, -5, -1])\n    (-10, -1)\n    >>> find_min_max_value_2([1, -1, 2, -2, 3])\n    (1, 3)\n    \"\"\"\n    if len(l) < 2:\n        return l[0], l[-1]\n    return l[0], max(l)\n\ndef find_min_max_value_3(l: list):\n    \"\"\"Finds the min and max value in a list.\n    >>> find_min_max_value_3([1, 2, 3, 4, 5])\n    (1, 5)\n    >>> find_min_max_value_3([10, 20, 30])\n    (10, 30)\n    >>> find_min_max_value_3([-10, 0, -5, -1])\n    (-10, -1)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# TODO: make this more efficient\n    return all(l[i+1] >= l[i] for i in range(len(l)-1))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "i = 0\n    for i, j in zip(reversed(l), reversed(l)):\n        if j < i:\n            return False\n    return True"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "return all(x > y for x, y in zip(l, l[1:])) and all(x < y for x, y in zip(l, l[:-1]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "if not l:\n        return True\n    return l[0] <= l[1] <= l[2] <= l[3] <= l[4] <= l[5] <= l[6] <= l[7] <= l[8]"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "return all(x >= y for x, y in zip(l, l[1:])) and all(x <= y for x, y in zip(l, l[:-1]))\n\ndef is_valid_string(s: str, max_len: int = None, valid_chars: str = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"):\n    \"\"\"Returns True if s is a string of valid characters, False otherwise.\n    >>> is_valid_string(\"abc\")\n    True\n    >>> is_valid_string(\"abcd\")\n    False\n    >>> is_valid_string(\"abcdef\")\n    True\n    >>> is_valid_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\n    True\n    >>> is_valid_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\n    False\n    >>> is_valid_string(\"a\", 5)\n    False\n    >>> is_valid_string(\"a\", 5, \"0123456789\")\n    True\n    >>> is_valid_string(\"a\", 5, \"0123456789\", \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    False\n    >>> is_valid_string(\"a\", 5, \"0123456789\", \"0123456789\", \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    True\n    >>> is_valid_string(\"a\", 5, \"0123456789\", \"0123456789\", \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "if len(l) < 2:\n        return True\n    return l[-1] >= l[-2]"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(y < x for x, y in zip(l, l[1:]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "prev = None\n    for i in range(len(l)):\n        if prev is not None and prev > l[i]:\n            return False\n        prev = l[i]\n    return True"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "i = 1\n    for i in range(len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n\n\ndef is_subset(sub, sup):\n    \"\"\"Check if sub is a subset of sup.\n\n    >>> is_subset([1, 2, 3], [1, 2, 3, 4])\n    True\n    >>> is_subset([1, 2, 3], [1, 2, 3])\n    False\n    \"\"\"\n    return all(x in sub for x in sup)\n\n\ndef is_superset(sup, sub):\n    \"\"\"Check if sup is a superset of sub.\n\n    >>> is_superset([1, 2, 3], [1, 2, 3, 4])\n    True\n    >>> is_superset([1, 2, 3], [1, 2, 3])\n    False\n    \"\"\"\n    return all(x in sup for x in sub)\n\n\ndef is_subset_of(sub, sup):\n    \"\"\"Check if sub is a subset of sup.\n\n    >>> is_subset_of([1, 2, 3], [1, 2, 3, 4])\n    True\n    >>> is_subset_of([1, 2, 3], [1, 2, 3])\n    False\n    \"\"\"\n    return all(x in sup for x in sub)\n\n\ndef is_superset_of(sup, sub):\n    \"\"\"Check if sub is a superset of sup.\n\n    >>> is_superset_of([1, 2, 3], [1, 2, 3, 4])\n    True\n    >>> is_superset_of([1, 2, 3], [1, 2, 3])\n    False\n    \"\"\"\n    return all(x in sub for x in sup)\n\n\ndef is_disjoint(sub, sup):\n    \"\"\"Check if sub is not a subset of sup.\n\n    >>> is_disjoint([1, 2, 3], [1, 2, 3, 4])\n    True\n    >>> is_disjoint([1, 2, 3], [1, 2, 3])\n    False\n    \"\"\"\n    return not is_subset_of(sup,"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "if l:\n        last = l[0]\n        for x in l[1:]:\n            if x < last:\n                return False\n            last = x\n    return True\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    if l:\n        last = l[0]\n        for x in l[1:]:\n            if x > last:\n                return False\n            last = x\n    return True\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    if l:\n        last = l[0]\n        for x in l[1:]:\n            if x > last:\n                return False\n            last = x\n    return True\n\n\ndef monotonic_decreasing_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing and increasing.\n    >>> monotonic_decreasing_increasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing_increasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    if l:\n        last = l[0]\n        for x in l[1:]:\n            if x < last:\n                return False\n            last = x\n        return True\n    return False\n\n\ndef monotonic_increasing_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing and decreasing.\n    >>> monot"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "if len(l) <= 1:\n        return True\n    return l[0] <= l[1] <= l[2] <= l[3] <= l[4] <= l[5] <= l[6] <= l[7] <= l[8] <= l[9] <= l[10] <= l[11] <= l[12] <= l[13] <= l[14] <= l[15] <= l[16] <= l[17] <= l[18] <= l[19] <= l[20]\n\ndef main():\n    data = [\n        (\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n        ),\n        (\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 2, 2, 2],\n            [1, 2, 2, 2, 2],\n            [1, 2, 2, 2, 2],\n        ),\n        (\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 3, 3],\n            [1, 2, 3, 3, 3],\n            [1, 2, 3, 3, 3],\n        ),\n        (\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 2, 2, 2],\n            [1, 2, 2, 2, 2],\n            [1, 2, 2, 2, 2],\n        ),\n        (\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 2, 2, 2],\n            [1, 2, 2, 2, 2],\n            [1, 2, 2, 2, 2],\n        ),\n        (\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4,"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "return all(l[i] < l[i+1] for i in range(len(l)-1))\n\n\ndef sort_items(l, key: Callable):\n    \"\"\"Sort the list and return the sorted list.\n    >>> sort_items([1, 2, 3], lambda x: x**2)\n    [1, 4, 9]\n    \"\"\"\n    l.sort(key=key)\n    return l\n\n\ndef count_items(l: list, key: Callable):\n    \"\"\"Count the number of items in the list which satisfy the predicate.\n    >>> count_items([1, 2, 3], lambda x: x % 2 == 0)\n    2\n    \"\"\"\n    return sum(key(i) for i in l)\n\n\ndef take(n: int, l: list):\n    \"\"\"Return first n items in the list.\n    >>> take(2, [1, 2, 3, 4, 5])\n    [1, 2]\n    >>> take(2, [])\n    []\n    \"\"\"\n    return l[:n]\n\n\ndef drop(n: int, l: list):\n    \"\"\"Return the last n items in the list.\n    >>> drop(2, [1, 2, 3, 4, 5])\n    [4, 5]\n    >>> drop(2, [])\n    []\n    \"\"\"\n    return l[-n:]\n\n\ndef concat(*l: list):\n    \"\"\"Concatenate all the lists in the sequence.\n    >>> concat([1, 2, 3], [4, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    >>> concat([], [1, 2, 3])\n    [1, 2, 3]\n    >>> concat([1, 2], [], [3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return sum(l, [])\n\n\ndef partition(l: list, key: Callable):\n    \"\"\"Partition the list by the key function.\n    >>> partition([1, 2, 3, 4, 5], lambda x: x % 2)\n    [[1, 3, 5], [2]]\n    \"\"\"\n    l.sort(key"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "return sorted(l) == l\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return sorted(l) <= l\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) >= l\n\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) or monotonic_decreasing(l) or monotonic_increasing(l)\n\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return monotonic(l) or monotonic_decreasing(l) or monotonic_increasing(l)\n\n\ndef mon"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "return all(a < b for a, b in zip(l, l[1:]))\n\ndef test_monotonic():\n    \"\"\"Test monotonic function.\"\"\"\n    assert monotonic([1, 2, 4, 20])\n    assert monotonic([1, 20, 4, 10])\n    assert monotonic([4, 1, 0, -10])\n\ndef test_trivial():\n    \"\"\"Test trivial function.\"\"\"\n    assert trivial([1, 2, 3, 4, 5])\n    assert trivial([1, 2, 3, 4, 5])\n    assert trivial([1, 2, 3, 4, 5])\n\ndef test_is_even():\n    \"\"\"Test is_even function.\"\"\"\n    assert is_even(1)\n    assert is_even(3)\n    assert is_even(7)\n    assert not is_even(2)\n    assert not is_even(-2)\n\ndef test_is_odd():\n    \"\"\"Test is_odd function.\"\"\"\n    assert is_odd(1)\n    assert is_odd(3)\n    assert is_odd(7)\n    assert not is_odd(2)\n    assert not is_odd(-2)\n\ndef test_is_positive():\n    \"\"\"Test is_positive function.\"\"\"\n    assert is_positive(1)\n    assert is_positive(3)\n    assert is_positive(7)\n    assert not is_positive(2)\n    assert not is_positive(-2)\n\ndef test_is_negative():\n    \"\"\"Test is_negative function.\"\"\"\n    assert is_negative(1)\n    assert is_negative(3)\n    assert is_negative(7)\n    assert not is_negative(2)\n    assert not is_negative(-2)\n\ndef test_is_zero():\n    \"\"\"Test is_zero function.\"\"\"\n    assert is_zero(1)\n    assert is_zero(0)\n    assert not is_zero(-1)\n    assert not is_zero(2)\n    assert not is_zero(-2)\n\ndef test_is_nonnegative():\n    \"\"\"Test is_nonnegative function.\"\"\"\n    assert is_nonnegative(1)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "return sorted(l) == l\n\nclass _Tester(object):\n\n    def __init__(self, func, args, **kwargs):\n        self.func = func\n        self.args = args\n        self.kwargs = kwargs\n\n    def __call__(self, *args, **kwargs):\n        kwargs.update(self.kwargs)\n        return self.func(*self.args, **kwargs)\n\ndef memoize(func):\n    \"\"\"Cache the results of a function call.\n    >>> @memoize\n   ... def foo(x):\n   ...    return x+1\n    >>> @memoize\n   ... def foo(x):\n   ...    return x+1\n    >>> foo(1)\n    2\n    >>> foo(1)\n    2\n    >>> foo(2)\n    3\n    >>> foo(1)\n    2\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        key = (args, frozenset(kwargs.items()))\n        try:\n            return cache[key]\n        except KeyError:\n            result = cache[key] = func(*args, **kwargs)\n            return result\n    cache = {}\n    return wrapper\n\ndef memoize_method(func):\n    \"\"\"Cache the results of a method call.\n    >>> class Foo(object):\n   ...     @memoize_method\n   ...     def foo(self, x):\n   ...         return x+1\n    >>> foo = Foo()\n    >>> foo.foo(1)\n    2\n    >>> foo.foo(1)\n    2\n    >>> foo.foo(2)\n    3\n    >>> foo.foo(1)\n    2\n    \"\"\"\n    cache = {}\n    def wrapper(*args, **kwargs):\n        key = (args, frozenset(kwargs.items()))\n        try:\n            return cache[key]\n        except KeyError:\n            result = cache[key] = func(*args, **kwargs)\n            return result\n    return wrapper\n\ndef memoize_func(func):\n    \"\"\"Cache the results of a function call.\n    >>> @memoize_func\n   ... def foo(x"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "for i in range(1, len(l)):\n        if l[i-1] >= l[i]:\n            return True\n        elif l[i-1] < l[i]:\n            return False\n    return True\n\n\ndef sort_list_by(l: list, key: callable):\n    \"\"\"Return a new list sorted by key.\n    >>> sort_list_by([1, 2, 3, 4], lambda x: x)\n    [1, 2, 3, 4]\n    \"\"\"\n    return sorted(l, key=key)\n\n\ndef group_by(l: list, key: callable):\n    \"\"\"Return a new list of lists grouped by key.\n    >>> group_by([1, 2, 3, 4], lambda x: x)\n    [(1, [1, 2, 3]), (4, [4])]\n    \"\"\"\n    return [tuple(group) for key, group in groupby(l, key)]\n\n\ndef group_by_value(l: list, key: callable):\n    \"\"\"Return a new list of lists grouped by key.\n    >>> group_by_value([1, 2, 3, 4], lambda x: x)\n    [(1, [1, 2, 3]), (4, [4])]\n    \"\"\"\n    return [tuple(group) for key, group in groupby(sorted(l, key=key), key)]\n\n\ndef group_by_key_and_value(l: list, key: callable, value: callable):\n    \"\"\"Return a new list of lists grouped by key and value.\n    >>> group_by_key_and_value([1, 2, 3, 4], lambda x: x, lambda x: x)\n    [(1, [1, 2, 3]), (4, [4])]\n    \"\"\"\n    return [tuple(group) for key, group in groupby(sorted(l, key=key), key)]\n\n\ndef group_by_key_and_value_and_value(l: list, key: callable, value: callable):\n    \"\"\"Return a new list of lists grouped by key and value.\n    >>> group_by_key_and_value_and_"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "return all(x <= y for x, y in zip(l, l[1:])) and all(y <= x for x, y in zip(l, l[1:]))\n\n\ndef get_first_line(text: str):\n    \"\"\"Return the first non-blank line of text.\"\"\"\n    return text.split('\\n')[0]\n\n\ndef get_first_nonblank_line(text: str):\n    \"\"\"Return the first non-blank line of text.\"\"\"\n    for line in text.split('\\n'):\n        if line.strip():\n            return line\n\n\ndef get_last_line(text: str):\n    \"\"\"Return the last non-blank line of text.\"\"\"\n    return text.split('\\n')[-1]\n\n\ndef get_first_line_of_block(text: str):\n    \"\"\"Return the first non-blank line of text starting with the first line of a block.\"\"\"\n    for line in text.split('\\n'):\n        if line.strip():\n            return line\n    return ''\n\n\ndef get_last_line_of_block(text: str):\n    \"\"\"Return the last non-blank line of text starting with the last line of a block.\"\"\"\n    for line in reversed(text.split('\\n')):\n        if line.strip():\n            return line\n    return ''\n\n\ndef get_first_line_of_block(text: str):\n    \"\"\"Return the first non-blank line of text starting with the first line of a block.\"\"\"\n    for line in text.split('\\n'):\n        if line.strip():\n            return line\n    return ''\n\n\ndef get_last_line_of_block(text: str):\n    \"\"\"Return the last non-blank line of text starting with the last line of a block.\"\"\"\n    for line in reversed(text.split('\\n')):\n        if line.strip():\n            return line\n    return ''\n\n\ndef get_line_number(text: str, line: str):\n    \"\"\"Return the line number of a line in the text.\"\"\"\n    for i, line in enumerate(text.split('\\n')):\n        if line.strip() == line:\n            return i"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "return sorted(l) == list(reversed(sorted(l)))\n\ndef get_config_key(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get(key)\n\ndef get_config_path(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_path(key)\n\ndef get_config_bool(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_bool(key)\n\ndef get_config_int(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_int(key)\n\ndef get_config_float(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_float(key)\n\ndef get_config_str(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_str(key)\n\ndef get_config_path_list(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_path_list(key)\n\ndef get_config_bool_list(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_bool_list(key)\n\ndef get_config_int_list(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_int_list(key)\n\ndef get_config_float_list(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_float_list(key)\n\ndef get_config_str_list(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config.get_str_list(key)\n\ndef get_config_path_dict(key: str):\n    \"\"\"\n    Return the value of the configuration key.\n    \"\"\"\n    return config."
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "return sorted(l) == l\n\n\ndef is_numeric(x):\n    \"\"\"Return True if x is numeric (int, float, or complex).\n    >>> is_numeric(1)\n    True\n    >>> is_numeric(3.14)\n    True\n    >>> is_numeric(3.1415926535)\n    True\n    >>> is_numeric('3.14')\n    False\n    >>> is_numeric('abc')\n    False\n    >>> is_numeric(None)\n    False\n    \"\"\"\n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_iterable(x):\n    \"\"\"Return True if x is an iterable.\n    >>> is_iterable([1, 2, 3])\n    True\n    >>> is_iterable(3.14)\n    False\n    \"\"\"\n    try:\n        iter(x)\n        return True\n    except TypeError:\n        return False\n\n\ndef is_iterable_of(x, cls):\n    \"\"\"Return True if x is an iterable of class cls.\n    >>> is_iterable_of([1, 2, 3], int)\n    True\n    >>> is_iterable_of([1, 2, 3], list)\n    False\n    >>> is_iterable_of([1, 2, 3], str)\n    False\n    >>> is_iterable_of(None, int)\n    False\n    \"\"\"\n    return isinstance(x, cls) and is_iterable(x)\n\n\ndef is_iterable_of_type(x, cls):\n    \"\"\"Return True if x is an iterable of type cls.\n    >>> is_iterable_of_type([1, 2, 3], int)\n    True\n    >>> is_iterable_of_type([1, 2, 3], list)\n    False\n    >>> is_iterable_of_type([1, 2, 3], str)\n    False\n    >>> is_iterable_of_type([1, 2, 3], str)\n    False\n    >>> is_iterable_of_type(None, int)\n    False\n    \"\"\""
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "if not l:\n        return True\n    i = 0\n    for x in l:\n        if x > l[i:]:\n            return True\n        elif x < l[i:]:\n            return False\n        i += 1\n    return True\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if integer is prime or composite.\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n < 17:\n        r = int(math.sqrt(n))\n        for i in range(3, r + 1):\n            if n % i == 0:\n                return False\n        return True\n    if n < 89:\n        r = int(math.sqrt(n))\n        for i in range(3, r + 1):\n            if n % i == 0:\n                return False\n        return True\n    return False\n\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\"Check if integer is prime or composite.\n    >>> is_prime_fast(4)\n    True\n    >>> is_prime_fast(5)\n    False\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(3)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n < 17:\n        r = int(math.sqrt(n))\n        for i in range(3, r + 1):\n            if n % i == 0:\n                return False\n        return True\n    if n < 89:\n        r = int(math.sqrt(n))\n        for i in range(3, r + 1):\n            if n % i == 0:\n                return"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "return sorted(l) == sorted(l)[::-1]\n\ndef is_valid_name(name: str):\n    \"\"\"Returns True if name is a valid Python identifier.\n    >>> is_valid_name('abc')\n    True\n    >>> is_valid_name('abc1')\n    False\n    >>> is_valid_name('_abc')\n    True\n    >>> is_valid_name('__abc')\n    False\n    >>> is_valid_name('_abc_')\n    False\n    >>> is_valid_name('__abc_')\n    True\n    \"\"\"\n    if not isinstance(name, str):\n        return False\n    if not name:\n        return False\n    if name[0].isdigit():\n        return False\n    if name[0].isalpha():\n        return True\n    if name[0].isupper():\n        return False\n    return True\n\ndef is_valid_variable_name(name: str):\n    \"\"\"Returns True if name is a valid variable name.\n    >>> is_valid_variable_name('abc')\n    False\n    >>> is_valid_variable_name('abc1')\n    False\n    >>> is_valid_variable_name('_abc')\n    True\n    >>> is_valid_variable_name('__abc')\n    False\n    >>> is_valid_variable_name('_abc_')\n    False\n    >>> is_valid_variable_name('__abc_')\n    True\n    \"\"\"\n    if not is_valid_name(name):\n        return False\n    if name.endswith('_'):\n        return False\n    if name.startswith('__'):\n        return False\n    return True\n\ndef is_valid_variable_name_with_type(name: str, type_: str):\n    \"\"\"Returns True if name is a valid variable name with type.\n    >>> is_valid_variable_name_with_type('abc', 'int')\n    False\n    >>> is_valid_variable_name_with_type('abc', 'int')\n    False\n    >>> is_valid_variable_name_with_type('abc','str')\n    False\n    >>> is_valid_variable_name_"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "return sorted(l) == list(l)\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list is monotonic.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    True\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l)\n\n\ndef is_increasing(l: list):\n    \"\"\"Return True if list is monotonic.\n    >>> is_increasing([1, 2, 4, 20])\n    True\n    >>> is_increasing([1, 20, 4, 10])\n    True\n    >>> is_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return sorted(l) == list(reversed(l))\n\n\ndef is_decreasing(l: list):\n    \"\"\"Return True if list is monotonic.\n    >>> is_decreasing([1, 2, 4, 20])\n    False\n    >>> is_decreasing([1, 20, 4, 10])\n    False\n    >>> is_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) == list(reversed(l))\n\n\ndef is_monotonic_increasing(l: list):\n    \"\"\"Return True if list is monotonic.\n    >>> is_monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> is_monotonic_increasing([1, 20, 4, 10])\n    True\n    >>> is_monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) and is_increasing(l)\n\n\ndef is_monotonic_decreasing(l: list):\n    \"\"\"Return True if list is monotonic.\n    >>> is_monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> is_monotonic_decreasing([1, 20, 4, 10])\n    False\n    >>> is_monotonic_decre"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "return all(x < y for (x, y) in zip(l[:-1], l[1:])) and \\\n           all(x > y for (x, y) in zip(l[:-1], l[1:]))\n\ndef get_pids(name):\n    \"\"\"Return the PID of a process with the given name.\"\"\"\n    import psutil\n    return [x.pid for x in psutil.process_iter() if x.name() == name]\n\ndef get_num_pids(name):\n    \"\"\"Return the number of PIDs of a process with the given name.\"\"\"\n    return len(get_pids(name))\n\ndef get_pids_from_cmdline(cmdline):\n    \"\"\"Return the PIDs of a process with the given command line.\"\"\"\n    import psutil\n    return [x.pid for x in psutil.process_iter(cmdline=cmdline)]\n\ndef get_num_pids_from_cmdline(cmdline):\n    \"\"\"Return the number of PIDs of a process with the given command line.\"\"\"\n    return len(get_pids_from_cmdline(cmdline))\n\ndef get_process_name(pid):\n    \"\"\"Return the name of the process with the given PID.\"\"\"\n    import psutil\n    return psutil.Process(pid).name()\n\ndef get_num_processes_with_name(name):\n    \"\"\"Return the number of processes with the given name.\"\"\"\n    import psutil\n    return len([x for x in psutil.process_iter() if x.name() == name])\n\ndef get_num_processes_from_cmdline(cmdline):\n    \"\"\"Return the number of processes with the given command line.\"\"\"\n    import psutil\n    return len(psutil.process_iter(cmdline=cmdline))\n\ndef get_process_cmdline(pid):\n    \"\"\"Return the command line of the process with the given PID.\"\"\"\n    import psutil\n    return psutil.Process(pid).cmdline()\n\ndef get_num_processes_cmdline(cmdline):\n    \"\"\"Return the number of processes with the given command line.\"\"\"\n    return len(psutil.process_"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n\n\ndef get_args(args, defaults):\n    \"\"\"\n    >>> get_args(['--foo', 'bar', '--baz'], {})\n    {'foo': 'bar', 'baz': None}\n    >>> get_args(['--foo', 'bar', '--baz'], {'foo': 'baz'})\n    {'foo': 'bar', 'baz': 'baz'}\n    \"\"\"\n    ret = {}\n    for arg in args:\n        if arg in defaults:\n            ret[arg] = defaults[arg]\n        else:\n            ret[arg] = None\n    return ret\n\n\ndef get_config_from_args(args):\n    \"\"\"\n    >>> get_config_from_args(['--foo', 'bar', '--baz'])\n    {'foo': 'bar', 'baz': None}\n    >>> get_config_from_args(['--foo', 'bar', '--baz', '--foo', 'baz'])\n    {'foo': 'bar', 'baz': 'baz'}\n    >>> get_config_from_args(['--foo', 'bar', '--baz', '--foo', 'baz', '--foo', 'bar', '--baz', '--foo', 'baz'])\n    {'foo': 'bar', 'baz': 'baz'}\n    >>> get_config_from_args(['--foo', 'bar', '--baz', '--foo', 'baz', '--foo', 'bar', '--baz', '--foo', 'baz'])\n    {'foo': 'bar', 'baz': 'baz'}\n    >>> get_config_from_args(['--foo', 'bar', '--baz', '--foo', 'baz', '--foo', 'bar', '--baz', '--foo', 'baz'])\n    {'foo': 'bar', 'baz': 'baz'}\n    \"\"\"\n    return get_args(args, {'foo"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "if not l:\n        return True\n    return min(l) <= max(l)\n\ndef remove_duplicates(l: list):\n    \"\"\"Remove duplicates from list.\n    >>> remove_duplicates([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([1, 2, 3, 4, 5, 5, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\ndef remove_outliers(l: list, pct_outliers: float):\n    \"\"\"Remove outliers from list.\n    >>> remove_outliers([1, 2, 3, 4, 5], 0.95)\n    [1, 2, 3, 4]\n    >>> remove_outliers([1, 2, 3, 4, 5], 0.05)\n    [1, 2, 3, 4, 5]\n    >>> remove_outliers([1, 2, 3, 4, 5], 0.95)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = 0\n    return [x for x in l if x not in seen and seen < int(len(l) * pct_outliers) ]\n\n\ndef remove_outliers_from_list(l: list, pct_outliers: float):\n    \"\"\"Remove outliers from list.\n    >>> remove_outliers_from_list([1, 2, 3, 4, 5], 0.95)\n    [1, 2, 3, 4, 5]\n    >>> remove_outliers_from_list([1, 2, 3, 4, 5], 0.05)\n    [1, 2, 3, 4, 5]\n    >>> remove_outliers_from_list([1, 2, 3, 4, 5], 0.95)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = 0\n    return [x for x in l if x not"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "return sorted(l) == l\n\n\ndef sort_by_key(l: list, key: Callable):\n    \"\"\"Sort a list by the values of the given key function.\n\n    >>> sort_by_key([('a', 1), ('b', 2)], lambda x: x[0])\n    [('a', 1), ('b', 2)]\n    \"\"\"\n    return sorted(l, key=lambda x: key(x[1]))\n\n\ndef sort_by_value(l: list, key: Callable):\n    \"\"\"Sort a list by the values of the given key function.\n\n    >>> sort_by_value([('a', 1), ('b', 2)], lambda x: x[1])\n    [('a', 1), ('b', 2)]\n    \"\"\"\n    return sorted(l, key=lambda x: key(x[0]))\n\n\ndef sort_by_count(l: list, key: Callable):\n    \"\"\"Sort a list by the number of elements of the given key function.\n\n    >>> sort_by_count([('a', 1), ('b', 2)], lambda x: x[0])\n    [('a', 1), ('b', 2)]\n    \"\"\"\n    return sorted(l, key=lambda x: len(key(x[0])))\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) == l\n\n\ndef is_sorted(l: list):\n    \"\"\"Return True if list elements are sorted.\n    >>> is_sorted([1, 2, 4, 20])\n    True\n    >>> is_sorted([1, 20, 4, 10])\n    False\n    \"\"\"\n    return sorted(l) == l\n\n\ndef is_ascending(l: list):\n    \"\"\"Return True if list elements are ascending.\n    >>> is_ascending([1, 2, 4, 20])"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "return all(x <= y for x, y in zip(l, l[1:])) and all(x >= y for x, y in zip(l, l[:-1]))\n\ndef get_time():\n    \"\"\"Return the current time in seconds.\"\"\"\n    return time.time()\n\ndef get_date():\n    \"\"\"Return the current date as a string in ISO 8601 format.\"\"\"\n    return datetime.datetime.utcnow().isoformat()\n\ndef get_timestamp():\n    \"\"\"Return the current time in seconds as a float.\"\"\"\n    return get_time()\n\ndef get_date_time():\n    \"\"\"Return the current date and time as a string in ISO 8601 format.\"\"\"\n    return get_date() + \"T\" + get_time().strftime(\"%H:%M:%S\")\n\ndef get_date_time_str(format=\"%Y-%m-%dT%H:%M:%S\"):\n    \"\"\"Return the current date and time as a string in the given format.\"\"\"\n    return get_date() + \"T\" + get_time().strftime(format)\n\ndef get_date_time_str_with_milliseconds(format=\"%Y-%m-%dT%H:%M:%S.%f\"):\n    \"\"\"Return the current date and time as a string in the given format.\"\"\"\n    return get_date() + \"T\" + get_time().strftime(format) + \".%f\"\n\ndef get_date_time_with_milliseconds(format=\"%Y-%m-%dT%H:%M:%S.%f\"):\n    \"\"\"Return the current date and time as a string in the given format.\"\"\"\n    return get_date() + \"T\" + get_time().strftime(format)\n\ndef get_time_with_milliseconds(format=\"%H:%M:%S.%f\"):\n    \"\"\"Return the current time in seconds as a string in the given format.\"\"\"\n    return get_time().strftime(format) + \".%f\"\n\ndef get_time_with_milliseconds_str(format=\"%H:%M:"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "prev = l[0]\n    for i in l[1:]:\n        if i < prev:\n            return False\n        prev = i\n    return True\n\ndef is_monotonic(l: list):\n    \"\"\"Check if list is monotonic or not.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l)\n\ndef is_increasing(l: list):\n    \"\"\"Check if list is increasing or not.\n    >>> is_increasing([1, 2, 4, 20])\n    True\n    >>> is_increasing([1, 20, 4, 10])\n    False\n    >>> is_increasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    return all(i <= j for i, j in zip(l, l[1:]))\n\ndef is_decreasing(l: list):\n    \"\"\"Check if list is decreasing or not.\n    >>> is_decreasing([1, 2, 4, 20])\n    False\n    >>> is_decreasing([1, 20, 4, 10])\n    True\n    >>> is_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(i >= j for i, j in zip(l, l[1:]))\n\ndef is_increasing_or_decreasing(l: list):\n    \"\"\"Check if list is increasing or decreasing or not.\n    >>> is_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> is_increasing_or_decreasing([1, 20, 4, 10])\n    True\n    >>> is_increasing_or_decreasing([4, 1, 0, -10])\n    True\n    >>> is_increasing_or_decreasing([-10, -5, -1])\n    True\n    >>> is_increasing_or_decreasing([-10, -5, -1, -3])\n    False\n    \"\"\"\n    return all("
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "return all(x < y for x, y in zip(l, l[1:])) and all(x > y for x, y in zip(l, l[:-1]))\n\n\ndef merge_tables(tables: List[Table],\n                 tables_by_name: Dict[str, Table],\n                 name_by_id: Dict[str, str]):\n    \"\"\"\n    Merge tables with same name and remove duplicates.\n    >>> merge_tables([Table('t1', [1, 2, 3]), Table('t1', [2, 3, 4])], {}, {})\n    Table('t1', [1, 2, 3, 2, 3, 4])\n    >>> merge_tables([Table('t1', [1, 2, 3]), Table('t1', [1, 2, 3])], {}, {})\n    Table('t1', [1, 2, 3])\n    >>> merge_tables([Table('t1', [1, 2, 3]), Table('t2', [1, 2, 3])], {}, {})\n    Table('t1', [1, 2, 3])\n    >>> merge_tables([Table('t1', [1, 2, 3]), Table('t2', [1, 2, 3])], {}, {})\n    Table('t1', [1, 2, 3])\n    \"\"\"\n    tables_by_name = {t.name: t for t in tables}\n    name_by_id = {t.id: t.name for t in tables}\n    tables_by_id = {t.id: t for t in tables}\n\n    def _merge_tables(tables: List[Table], tables_by_name: Dict[str, Table], name_by_id: Dict[str, str]):\n        for t in tables:\n            if t.name in tables_by_name:\n                tables_by_name[t.name].merge(t)\n                name_by_id[t.id] = t.name\n                del tables_by_name[t.name]\n            else:\n                tables_by_id[t.id] = t\n        t"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "return sorted(l) == l\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) <= l\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) >= l\n\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, -10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) or monotonic_decreasing(l)\n\n\ndef monotonic_decreasing_or_increasing(l: list):\n    \"\"\"Return True if list elements are monotonically decreasing or increasing.\n    >>> monotonic_decreasing_or_increasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing_or_increasing([1, 20, 4, -10])\n    False\n    >>> monotonic_decreasing_or_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic(l) or monotonic_increasing(l)\n\n\ndef monotonic_increasing_or_decreasing_or_increasing_or_dec"
    }
  ]
}