{
  "timestamp": "2025-09-14T16:56:16.922508",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 107,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "odd = 0\n    even = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            odd += 1\n        else:\n            odd += 1\n            even += 1\n    return odd, even\n\nclass Solution(object):\n    def countPalindromes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        odd, even = even_odd_palindrome(n)\n        return odd + even"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n\n    while n > 0:\n        n, r = divmod(n, 10)\n        if r == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "odd_palindromes = 0\n    even_palindromes = 0\n    odd_palindrome = [n]\n    even_palindrome = [n]\n\n    while len(odd_palindrome) <= len(even_palindrome):\n        odd_palindrome = list(odd_palindrome)\n        odd_palindrome.append(odd_palindrome[-1] - 1)\n        odd_palindromes += 1\n\n        even_palindrome = list(even_palindrome)\n        even_palindrome.append(even_palindrome[-1] + 1)\n        even_palindromes += 1\n\n    return (odd_palindromes, even_palindromes)\n\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/integer-palindrome-problem/solution/\n# https://leetcode.com/problems/integer-palindrome-problem/discuss/121816/Java-Solution-with-understanding-of-palindrome-and-even-odd\n#\n# Time:  O(n)\n# Space: O(1)\n#\n\n# 1. Start with the number 1.\n# 2. If the number is odd, add 1 and subtract 1.\n# 3. If the number is even, add 1 and add 1.\n# 4. If the number is even, add 1 and subtract 1.\n# 5. If the number is even, add 1 and add 1.\n# 6. If the number is even, add 1 and subtract 1.\n# 7. If the number is even, add 1 and add 1.\n# 8. If the number is even, add 1 and subtract 1.\n# 9. If the number is even, add 1 and add 1.\n# 10. If the number is even, add 1 and subtract 1.\n# 11. If the number is even, add 1 and add 1.\n# 12. If the number is even, add 1 and subtract 1.\n# 13. If the number is even, add 1 and add 1.\n# 14. If the number is even, add 1 and subtract 1.\n# 15. If the number is even, add 1 and add 1.\n# 16. If the number is even, add 1 and subtract 1.\n# 17. If the number is even, add 1 and add 1.\n# 18. If the number is even, add 1 and subtract 1.\n# 19. If the number is even, add 1 and add 1.\n# 20. If the"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "odd = [i for i in range(1, n+1) if i % 2 == 1]\n    even = [i for i in range(1, n+1) if i % 2 == 0]\n    return even, odd\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(\"Program started.\")\n    odd_even_palindrome = even_odd_palindrome(10**3)\n    print(\"Even and odd integer palindromes are:\")\n    print(odd_even_palindrome)\n    print(\"Program finished.\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "odds = [0] * (n + 1)\n    evens = [0] * (n + 1)\n\n    for i in range(2, n + 1):\n        odds[i] = sum(1 for j in range(i, n + 1) if (j % 2)!= 0)\n        evens[i] = sum(1 for j in range(i, n + 1) if (j % 2) == 0)\n\n    return odds, evens\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "odd_cnt = 0\n    even_cnt = 0\n    for i in range(1, n + 1):\n        odd_cnt += (i % 2) == 0\n        even_cnt += (i % 2) == 1\n    return (even_cnt, odd_cnt)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if n == 1:\n        return (1, 1)\n    if n == 2:\n        return (2, 1)\n    odd_palindromes = 0\n    for i in range(1, n):\n        if is_palindrome(i):\n            odd_palindromes += 1\n    even_palindromes = n - odd_palindromes\n    return (even_palindromes, odd_palindromes)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\nclass Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        while x > 0:\n            if x % 10!= x // 10:\n                return False\n            x = x // 10\n        return True"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "even_odd_palindrome_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_palindrome(i * 2):\n                even_odd_palindrome_count += 1\n    return even_odd_palindrome_count\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/palindrome-palindromes/solution/\n#\nApproach #1: Brute Force [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the number of digits of n.\nSpace Complexity: O(n), where n is the number of digits of n.\n\n# 4ms 100%\nclass Solution {\n    public int evenOddPalindromeCount(int n) {\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isPalindrome(i * 2)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return even + odd;\n    }\n\n    private boolean isPalindrome(int n) {\n        int len = String.valueOf(n).length();\n        for (int i = 0; i < len / 2; i++) {\n            if (n % 10!= n / 10) {\n                return false;\n            }\n            n /= 10;\n            n *= 10;\n        }\n        return true;\n    }\n}\n\nApproach #2: Brute Force [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the number of digits of n.\nSpace Complexity: O(n), where n is the number of digits of n.\n\n# 4ms 100%\nclass Solution {\n    public int evenOddPalindromeCount(int n) {"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "odd_palindromes = 0\n    even_palindromes = 0\n    odd_palindrome_idx = 1\n    even_palindrome_idx = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if odd_palindrome_idx % 2 == 0:\n                odd_palindromes += 1\n            odd_palindrome_idx += 1\n        else:\n            if even_palindrome_idx % 2 == 0:\n                even_palindromes += 1\n            even_palindrome_idx += 1\n    return (odd_palindromes, even_palindromes)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "odds = [0] * (n+1)\n    evens = [0] * (n+1)\n\n    odds[0] = 1\n    evens[0] = 1\n\n    for i in range(1, n+1):\n        odds[i] = 0\n        evens[i] = 0\n\n        for j in range(i):\n            if i % j == 0:\n                odds[i] += odds[j]\n                evens[i] += evens[j]\n            elif i % j == 1:\n                odds[i] += evens[j]\n                evens[i] += odds[j]\n\n    return (odds[n], evens[n])\n\n\nclass Solution(object):\n    def numEvenOddPairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        evens, odds = even_odd_palindrome(n)\n        return (odds + evens) / 2"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "odd_palindromes = [n]\n    even_palindromes = []\n    for i in range(2, n + 1):\n        odd_palindromes.append(i)\n        even_palindromes.append(i)\n\n        for i in range(1, n):\n            odd_palindromes.append(i * i)\n            even_palindromes.append(i * i)\n\n        for i in range(2, n + 1):\n            odd_palindromes.append(i * (i - 1))\n            even_palindromes.append(i * (i - 1))\n\n        for i in range(2, n + 1):\n            odd_palindromes.append(i * (i - 1) * (i - 2))\n            even_palindromes.append(i * (i - 1) * (i - 2))\n\n    odd_palindromes = tuple(odd_palindromes)\n    even_palindromes = tuple(even_palindromes)\n    return odd_palindromes, even_palindromes"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\nclass Solution(object):\n    def count_and_say(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        even, odd = even_odd_palindrome(n)\n        ans = \"0\"\n        for i in range(n):\n            if i % 2 == 0:\n                ans += str(even)\n                even -= 1\n            else:\n                ans += str(odd)\n                odd -= 1\n        return ans"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "odd, even = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            odd += 1\n            if is_palindrome(i*2):\n                even += 1\n    return (odd, even)"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "odd_palindromes = [i for i in range(n + 1) if is_palindrome(i)]\n    even_palindromes = [i for i in range(1, n) if is_palindrome(i)]\n    return (len(odd_palindromes), len(even_palindromes))\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return (0, 0)\n\n    # generate all the integers in range(1, n+1)\n    for i in range(1, n+1):\n        # check whether the number is a palindrome\n        if is_palindrome(i):\n            # check whether the number is even or odd\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(even_odd_palindrome(3), (1, 2))\n        self.assertEqual(even_odd_palindrome(12), (4, 6))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_odd(i):\n                odd += 1\n            else:\n                even += 1\n    return even, odd\n\n\nclass Solution:\n    def numOddAndEvenPairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        even, odd = even_odd_palindrome(n)\n        return even * odd"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "# DP\n    # https://discuss.leetcode.com/topic/11881/c-java-dp-solution-with-explanation\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] if i > 1 and j > 1 and n % i == 0 and n % j == 0\n    # dp[0][0] = 1\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] if i > 1 and j > 1 and n % i == 0 and n % j == 0\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] if i > 1 and j > 1 and n % i == 0 and n % j == 0\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] if i > 1 and j > 1 and n % i == 0 and n % j == 0\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] if i > 1 and j > 1 and n % i == 0 and n % j == 0\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] if i > 1 and j > 1 and n % i == 0 and n % j == 0\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] if i > 1 and j > 1 and n % i == 0 and n % j == 0\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] if i > 1 and j > 1 and n % i == 0 and n % j == 0\n    # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] if i > 1 and j > 1 and n % i == 0 and"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "odds = 0\n    evens = 0\n    for i in range(2, n + 1):\n        if is_palindrome(i):\n            odds += 1\n        else:\n            evens += 1\n    return odds, evens\n\n\nif __name__ == '__main__':\n    sol = even_odd_palindrome(3)\n    print(sol)"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "odds, evens = 0, 0\n    for x in range(2, n+1):\n        if x % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return odds, evens\n\n# Time:  O(n)\n# Space: O(n)\nclass Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        return self.even_odd_palindrome(x)[1] == x"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    while n > 0:\n        n, digit = divmod(n, 10)\n        if digit == 9:\n            digit = 0\n        if digit == 0:\n            odd_palindromes += 1\n        else:\n            even_palindromes += 1\n    return even_palindromes, odd_palindromes"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "# Sort the digits, then count how many are odd\n    digits = list(str(n))\n    odd_count = 0\n    for i in range(len(digits)):\n        if digits[i] % 2!= 0:\n            odd_count += 1\n        if i < len(digits) - 1:\n            if digits[i + 1] % 2!= 0:\n                odd_count += 1\n    return (odd_count, len(digits) - odd_count)"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "even, odd = 0, 0\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "odds = 0\n    evens = 0\n    for i in range(2, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return odds, evens\n\n\nif __name__ == \"__main__\":\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "return (sum(1 for i in range(n, 1, -2)), sum(1 for i in range(n, -2, -1)))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "evens = 0\n    odds = 0\n    while n > 1:\n        n = n // 2\n        if n % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "return (even_odd_palindrome_rec(n, 1), even_odd_palindrome_rec(n, 2))\n\ndef even_odd_palindrome_rec(n, start):\n    if n == 1:\n        return (1, 2)\n    if n == 2:\n        return (1, 2)\n    if n % 2:\n        return (even_odd_palindrome_rec(n, start + 1), 1)\n    else:\n        return (even_odd_palindrome_rec(n, start + 1), 2)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        for j in range(i, 0, -1):\n            if j % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_palindrome(i * 2):\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(even_odd_palindrome(10))\n    print(even_odd_palindrome(100))\n    print(even_odd_palindrome(1000))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "odd_num = 0\n    even_num = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_num += 1\n            else:\n                odd_num += 1\n\n    return (odd_num, even_num)\n\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "# sort the range(1, n)\n    s = sorted(range(1, n+1))\n\n    odd_palindromes = 0\n    even_palindromes = 0\n    for i in range(0, n-1):\n        if s[i] == s[i+1]:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "result = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if i % 2 == 0 and j % 2 == 0 and i*j == n:\n                result += 1\n            elif i % 2!= 0 and j % 2!= 0 and i*j == n:\n                result += 1\n    return result"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "odds = 0\n    evens = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return odds, evens\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    n = int(input())\n    odds, evens = even_odd_palindrome(n)\n    print(odds, evens)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "return even_odd_palindrome_recu(n, [])"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return even_palindromes, odd_palindromes"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "even, odd = 0, 0\n    n_len = len(str(n))\n    for i in range(n_len):\n        if str(n)[i] == str(n)[n_len - i - 1]:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "# Sort\n    nums = sorted(range(1, n + 1))\n    evens = 0\n    odds = 0\n    for i in range(1, len(nums)):\n        if nums[i - 1] % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "n = int(n)\n    odd_palindromes = 0\n    even_palindromes = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_palindrome(n-i):\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return even_palindromes, odd_palindromes\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(5))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "odd_even_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            odd_even_count += 1\n        else:\n            odd_even_count -= 1\n    return odd_even_count, odd_even_count\n\nif __name__ == '__main__':\n    assert odd_even_palindrome(3) == (1, 2)\n    assert odd_even_palindrome(12) == (4, 6)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "even, odd = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# O(n) time, O(n) space\n    odds, evens = 0, 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            odds += i\n        else:\n            evens += i\n    return odds, evens"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "odds, evens = 0, 0\n\n    # odd and even palindromes\n    odds += odd_palindrome(n)\n    evens += even_palindrome(n)\n\n    # odd and even palindromes with numbers in the range(1, n)\n    odds += odd_palindrome(n-1)\n    evens += even_palindrome(n-1)\n\n    return (evens, odds)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "if n < 2:\n        return (0, 0)\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "if n == 1:\n        return (1, 0)\n    elif n == 2:\n        return (0, 1)\n    elif n % 2 == 0:\n        return (even_odd_palindrome(n / 2) + even_odd_palindrome(n / 2 - 1), 0)\n    else:\n        return (0, even_odd_palindrome(n / 2 - 1))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "return tuple(1 for i in range(1, n+1) if i%2 == 0 and is_palindromic(i))\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n    print(even_odd_palindrome(100))\n    print(even_odd_palindrome(1000))\n    print(even_odd_palindrome(10000))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "evens = 0\n    odds = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return evens, odds"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "odd_palindromes = 0\n    even_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "odd_palindromes = []\n    even_palindromes = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            odd_palindromes.append(i)\n        else:\n            even_palindromes.append(i)\n    return (len(odd_palindromes), len(even_palindromes))\n\n\nclass Solution:\n    def countPalindromicSubsequences(self, n: int) -> int:\n        \"\"\"\n        DP\n        dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        \"\"\"\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i % 2 == 0:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1]\n        return dp[1][n]\n\n\nif __name__ == '__main__':\n    assert Solution().countPalindromicSubsequences(2) == 1\n    assert Solution().countPalindromicSubsequences(3) == 2\n    assert Solution().countPalindromicSubsequences(4) == 4\n    assert Solution().countPalindromicSubsequences(6) == 7\n    assert Solution().countPalindromicSubsequences(12) == 12"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "evens = 0\n    odds = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n\n\nclass Solution(object):\n    def findNthDigit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        odd_even = even_odd_palindrome(n)\n        return (odd_even[1] * 10) + odd_even[0]"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "even_odd = 0\n    odd_even = 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            even_odd += 1\n        else:\n            odd_even += 1\n    return (even_odd, odd_even)\n\n\nclass TestCode(unittest.TestCase):\n    def tearDown(self):\n        pass\n\n    def test_even_odd_palindrome(self):\n        self.assertEqual(even_odd_palindrome(3), (1, 2))\n        self.assertEqual(even_odd_palindrome(12), (4, 6))\n        self.assertEqual(even_odd_palindrome(123), (4, 6))\n        self.assertEqual(even_odd_palindrome(1234), (4, 6))\n        self.assertEqual(even_odd_palindrome(12345), (4, 6))\n        self.assertEqual(even_odd_palindrome(123456), (4, 6))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "even, odd = 0, 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        result = str(1)\n        for i in range(n - 1):\n            result = self.gen(result)\n\n        return result\n\n    def gen(self, s):\n        if s == '1':\n            return s\n        else:\n            if len(s) == 1:\n                return ''.join(s)\n            else:\n                result = s[0]\n                for i in range(1, len(s)):\n                    result = ''.join([result, s[i]])\n                return self.gen(result)\n\nif __name__ == \"__main__\":\n    assert Solution().countAndSay(3) == '11'\n    assert Solution().countAndSay(12) == '111221'\n    assert Solution().countAndSay(10) == '111221'"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if i % j == 0 and j % i == 0:\n                if i % 2 == 0:\n                    even += 1\n                else:\n                    odd += 1\n    return even, odd\n\n\nclass Solution:\n    def palindromePairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ans = []\n        for i in range(1, n+1):\n            for j in range(i, n+1):\n                if i % j == 0 and j % i == 0:\n                    even, odd = even_odd_palindrome(j)\n                    ans.append([i] * even + [j] * odd)\n        return ans\n\n\nif __name__ == '__main__':\n    print(Solution().palindromePairs(12))"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\nclass Solution(object):\n    def countPalindromicSubsequences(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 1:\n            return 0\n        odd, even = even_odd_palindrome(n)\n        return (odd * (n - 1) // 2) + (even * (n // 2))"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "n = int(n)\n    odd = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n\n    def f(start, end):\n        count = 0\n        for i in range(start, end + 1):\n            if i in even:\n                count += 1\n            elif i in odd:\n                count += 1\n            else:\n                break\n        return count\n\n    return tuple(f(1, n))\n\n\nclass TestCode(unittest.TestCase):\n    def tearDown(self):\n        self._count = 0\n\n    def test_example_1(self):\n        self.assertEqual(even_odd_palindrome(3), (1, 2))\n        self.assertEqual(even_odd_palindrome(12), (4, 6))\n\n    def test_example_2(self):\n        self.assertEqual(even_odd_palindrome(1), (1, 1))\n        self.assertEqual(even_odd_palindrome(10), (1, 10))\n\n    def test_example_3(self):\n        self.assertEqual(even_odd_palindrome(0), (1, 1))\n        self.assertEqual(even_odd_palindrome(5), (1, 5))\n        self.assertEqual(even_odd_palindrome(100), (4, 6))\n\n    def test_example_4(self):\n        self.assertEqual(even_odd_palindrome(3), (1, 2))\n        self.assertEqual(even_odd_palindrome(4), (1, 3))\n        self.assertEqual(even_odd_palindrome(6), (2, 4))\n        self.assertEqual(even_odd_palindrome(9), (3, 6))\n        self.assertEqual(even_odd_palindrome(10), (1, 10))\n\n    def test_example_5(self):\n        self.assertEqual(even_odd_palindrome(6), (2, 4"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "odd, even = 0, 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            odd += 1\n        else:\n            even += 1\n    return odd, even\n\n\nclass Solution(object):\n    def countPalindromicSubsequences(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        odd, even = even_odd_palindrome(n)\n        return (odd * n) + (even * (n-1))\n\n\nif __name__ == '__main__':\n    print Solution().countPalindromicSubsequences(3)\n    print Solution().countPalindromicSubsequences(12)"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "odd_palindromes = [x for x in range(1, n+1) if is_odd_palindrome(x)]\n    even_palindromes = [x for x in range(1, n+1) if is_even_palindrome(x)]\n    return (len(odd_palindromes), len(even_palindromes))\n\n\nclass Solution(object):\n    def find_palindromic_substring(self, s, n):\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if not s or n < 1:\n            return 0\n\n        odd_palindromes, even_palindromes = even_odd_palindrome(n)\n        odd_start = 0\n        odd_end = 0\n        even_start = 0\n        even_end = 0\n        for i in range(n):\n            if is_odd_palindrome(i):\n                odd_end = i\n            else:\n                odd_start = i\n            if is_even_palindrome(i):\n                even_end = i\n            else:\n                even_start = i\n        return max(odd_palindromes[odd_start:odd_end], even_palindromes[even_start:even_end])\n\n\nif __name__ == '__main__':\n    assert Solution().find_palindromic_substring('abc', 3) == 1\n    assert Solution().find_palindromic_substring('abc', 4) == 1\n    assert Solution().find_palindromic_substring('abc', 5) == 0\n    assert Solution().find_palindromic_substring('abc', 6) == 0\n    assert Solution().find_palindromic_substring('abc', 7) == 0\n    assert Solution().find_palindromic_substring('abc', 8) == 0\n    assert Solution().find_palindromic_substring('abc', 9) == 0\n    assert Solution().find_palindromic_substring('abc', 10) == 0\n    assert Solution().find_palindromic_substring('abc', 11"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "odd_even_map = {1: 0, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2, 7: 1, 8: 0, 9: 1, 10: 2, 11: 2}\n\n    return tuple(odd_even_map[i] for i in range(1, n + 1))\n\n\nclass Solution:\n    def evenOddPalindrome(self, n: int) -> List[int]:\n        odd_even_map = {1: 0, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2, 7: 1, 8: 0, 9: 1, 10: 2, 11: 2}\n\n        odds = [0] * n\n        evens = [0] * n\n        for i in range(1, n + 1):\n            odds[odd_even_map[i]] += 1\n            evens[odd_even_map[i]] += 1\n        return odds, evens"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "even, odd = 0, 0\n\n    for i in range(2, n + 1):\n        if is_palindrome(i):\n            if is_palindrome(i, reverse=True):\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(3))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "odds = 0\n    evens = 0\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    return odds, evens\n\n\nclass Solution(object):\n    def findEvenOddNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        odds, evens = even_odd_palindrome(n)\n        return [odds, evens]"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "odd = [0] * (n + 1)\n    even = [0] * (n + 1)\n    odd[0] = 1\n    even[0] = 1\n    odd[1] = 2\n    even[1] = 2\n\n    for i in range(2, n + 1):\n        odd[i] = odd[i - 1] + odd[i - 2]\n        even[i] = even[i - 1] + even[i - 2]\n        if i % 2 == 0:\n            odd[i] += even[i - 1]\n        else:\n            odd[i] += odd[i - 1]\n            even[i] += even[i - 1]\n\n    return tuple(odd), tuple(even)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_palindrome(i * 2):\n                odd += 1\n            else:\n                even += 1\n    return (even, odd)\n\n\nclass Solution(object):\n    def get_odd_even(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: tuple\n        \"\"\"\n        return even_odd_palindrome(n)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.get_odd_even(3))\n    print(sol.get_odd_even(12))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "even, odd = 0, 0\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # If the number is even, add it to even\n        if i % 2 == 0:\n            even += 1\n        # If the number is odd, add it to odd\n        if i % 2 == 1:\n            odd += 1\n\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "odd = 0\n    even = 0\n    n_list = list(range(1, n + 1))\n    for i in n_list:\n        if i % 2 == 0:\n            odd += 1\n        else:\n            even += 1\n    return (odd, even)\n\n\ndef main():\n    # n = 3\n    # print(even_odd_palindrome(n))\n\n    # n = 12\n    # print(even_odd_palindrome(n))\n\n    # n = 15\n    # print(even_odd_palindrome(n))\n\n    # n = 31\n    # print(even_odd_palindrome(n))\n\n    # n = 34\n    # print(even_odd_palindrome(n))\n\n    # n = 38\n    # print(even_odd_palindrome(n))\n\n    # n = 39\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))\n\n    # n = 40\n    # print(even_odd_palindrome(n))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    odd_indexes = [i for i in range(1, n + 1) if i % 2 == 0]\n    even_indexes = [i for i in range(1, n + 1) if i % 2 == 1]\n    for i in range(0, n + 1):\n        if i in odd_indexes:\n            odd_count += 1\n        elif i in even_indexes:\n            even_count += 1\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(1) == (1, 0)\n    assert even_odd_palindrome(2) == (1, 1)\n    assert even_odd_palindrome(3) == (2, 1)\n    assert even_odd_palindrome(4) == (2, 2)\n    assert even_odd_palindrome(5) == (3, 1)\n    assert even_odd_palindrome(6) == (3, 2)\n    assert even_odd_palindrome(7) == (3, 3)\n    assert even_odd_palindrome(8) == (4, 1)\n    assert even_odd_palindrome(9) == (4, 2)\n    assert even_odd_palindrome(10) == (4, 3)\n    assert even_odd_palindrome(11) == (5, 1)\n    assert even_odd_palindrome(12) == (5, 2)\n    assert even_odd_palindrome(13) == (5, 3)\n    assert even_odd_palindrome(14) == (6, 1)\n    assert even_odd_palindrome(15) == (6, 2)\n    assert even_odd_palindrome(16) == (6, 3)\n    assert even_odd_palindrome(17) == (6, 4)\n    assert even_odd_palindrome(18) == (7, 1)\n    assert even_odd_palindrome(19) == (7, 2)\n    assert even_odd_palindrome(20"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "if n <= 1:\n        return n, 0\n\n    odd_palindromes = 0\n    even_palindromes = 0\n\n    for i in range(1, n + 1):\n        odd_palindromes += (n - i) % 2\n        even_palindromes += (i - 1) % 2\n\n    return n, odd_palindromes + even_palindromes\n\n\nclass Solution(object):\n    def evenOddP(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        odd_palindromes, even_palindromes = even_odd_palindrome(n)\n        return [odd_palindromes, even_palindromes]\n\n\nif __name__ == '__main__':\n    s = Solution()\n\n    print(s.evenOddP(3))\n    print(s.evenOddP(12))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "even = 0\n    odd = 0\n    odd_palindrome = 0\n    for i in range(2, n + 1):\n        odd_palindrome = i\n        for j in range(1, i):\n            odd_palindrome = odd_palindrome * i % 10\n        if odd_palindrome % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nclass Solution(object):\n    def get_palindromic_substrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(1, len(s) + 1):\n            palindrome = i\n            for j in range(i):\n                palindrome = palindrome * 10 % 10\n            if palindrome % 2 == 0:\n                result.append(s[i - 1:i + 1])\n        return result"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "even, odd = 0, 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\nclass Solution(object):\n    def find_odd_palindromes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        odd, even = 0, 0\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                odd += 1\n            else:\n                even += 1\n            if even == odd:\n                return [i]"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "odd_even = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            odd_even += 1\n        else:\n            odd_even += 2\n    return (odd_even, odd_even)\n\n\nclass Solution:\n    def findOddEvenPairs(self, n: int) -> List[int]:\n        odd_even = even_odd_palindrome(n)\n        return [x for x in range(n) if x % 2 == odd_even[0] and x % 2 == odd_even[1]]"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "odds = []\n    evens = []\n    odd_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n        odd_even += 1 if len(odds) == len(evens) else 0\n    return (len(evens), len(odds))\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\nclass Solution:\n    def palindromePairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        odd, even = even_odd_palindrome(n)\n        ans = [[]]\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                ans[even].append(i)\n                even += 1\n            else:\n                ans[odd].append(i)\n                odd += 1\n        return ans"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "n = int(n)\n\n    even = 0\n    odd = 0\n\n    for i in range(1, n):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nclass TestCode(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual(even_odd_palindrome(1), (1, 0))\n        self.assertEqual(even_odd_palindrome(2), (1, 2))\n        self.assertEqual(even_odd_palindrome(3), (1, 2))\n        self.assertEqual(even_odd_palindrome(4), (4, 0))\n        self.assertEqual(even_odd_palindrome(5), (4, 2))\n        self.assertEqual(even_odd_palindrome(6), (4, 2))\n        self.assertEqual(even_odd_palindrome(7), (4, 2))\n        self.assertEqual(even_odd_palindrome(8), (4, 2))\n        self.assertEqual(even_odd_palindrome(9), (4, 2))\n        self.assertEqual(even_odd_palindrome(10), (4, 6))\n        self.assertEqual(even_odd_palindrome(11), (4, 6))\n        self.assertEqual(even_odd_palindrome(12), (4, 6))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_palindrome(i*2):\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\nclass Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x % 2 == 0:\n            return self.isPalindrome(x/2)\n        return not self.isPalindrome(x - 1)\n\n    def even_odd_palindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        even_palindromes = 0\n        odd_palindromes = 0\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if is_palindrome(i*2):\n                    even_palindromes += 1\n                else:\n                    odd_palindromes += 1\n        return [even_palindromes, odd_palindromes]"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n\nclass Solution(object):\n    def palindromePartitioning(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ans = []\n        for i in range(1, n+1):\n            even, odd = even_odd_palindrome(i)\n            if even > odd:\n                ans.append([i])\n            elif even < odd:\n                ans.append([i] + [i+i] + [i] + [i-i])\n            else:\n                ans.append([i] + [i] + [i-i] + [i+i])\n        return ans\n\n\nif __name__ == '__main__':\n    assert Solution().palindromePartitioning(3) == [[1, 2], [3]]\n    assert Solution().palindromePartitioning(12) == [[4, 6]]"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "return (even_palindrome(n) - even_palindrome(n - 1), odd_palindrome(n) - odd_palindrome(n - 1))\n\ndef even_odd_palindrome_recur(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    if n == 1:\n        return (1, 1)\n    if n % 2 == 0:\n        return (even_palindrome_recur(n / 2), even_palindrome_recur(n / 2 - 1))\n    else:\n        return (odd_palindrome_recur(n / 2), odd_palindrome_recur(n / 2 - 1))\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(21) == (4, 6)\n    assert even_odd_palindrome(26) == (6, 4)\n    assert even_odd_palindrome(10) == (2, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "if n <= 1:\n        return (0, 0)\n\n    odd_palindromes = 0\n    even_palindromes = 0\n    for i in range(2, n + 1):\n        if i % 2 == 1:\n            odd_palindromes += 1\n        else:\n            even_palindromes += 1\n\n    return (odd_palindromes, even_palindromes)\n\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n\n\nclass Solution(object):\n    def findPalindromicSubsequences(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if n <= 1:\n            return [[]]\n\n        odd_palindrome_num, even_palindrome_num = even_odd_palindrome(n)\n        palindrome_num = odd_palindrome_num + even_palindrome_num\n        # print(odd_palindrome_num, even_palindrome_num, palindrome_num)\n\n        return self.get_sub_sequences(n, palindrome_num, 0, 1)\n\n    def get_sub_sequences(self, n, palindrome_num, start, end):\n        if end == n:\n            yield [str(x) for x in range(start, n+1)]\n            return\n\n        for i in range(start, end+1):\n            if palindrome_num[i] == palindrome_num[end]:\n                yield self.get_sub_sequences(n, palindrome_num, start, i)\n                yield self.get_sub_sequences(n, palindrome_num, i, end)\n\n\nif __name__ == '__main__':\n    assert Solution().findPalindromicSubsequences(3) == [['123'], ['321']]\n    assert Solution().findPalindromicSubsequences(12) == [['1', '2', '3', '4', '6', '7', '8', '9', '11']]"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "evens = [1, 2, 4, 6]\n    odds = [3, 5, 7, 9]\n    if n == 1:\n        return (evens[0], odds[0])\n    if n == 2:\n        return (evens[1], odds[1])\n    if n == 3:\n        return (evens[2], odds[2])\n    if n == 4:\n        return (evens[3], odds[3])\n    if n == 5:\n        return (evens[4], odds[4])\n    if n == 6:\n        return (evens[5], odds[5])\n    if n == 7:\n        return (evens[6], odds[6])\n    if n == 8:\n        return (evens[7], odds[7])\n    if n == 9:\n        return (evens[8], odds[8])\n    if n == 10:\n        return (evens[9], odds[9])\n    even_odd_palindrome_list = []\n    even_odd_palindrome_list.append(evens[0])\n    even_odd_palindrome_list.append(odds[0])\n    even_odd_palindrome_list.append(evens[1])\n    even_odd_palindrome_list.append(odds[1])\n    even_odd_palindrome_list.append(evens[2])\n    even_odd_palindrome_list.append(odds[2])\n    even_odd_palindrome_list.append(evens[3])\n    even_odd_palindrome_list.append(odds[3])\n    even_odd_palindrome_list.append(evens[4])\n    even_odd_palindrome_list.append(odds[4])\n    even_odd_palindrome_list.append(evens[5])\n    even_odd_palindrome_list.append(odds[5])\n    even_odd_palindrome_list.append(evens[6])\n    even_odd_palindrome_list.append(odds[6])\n    even_odd_"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "n = int(n)\n    evens = 0\n    odds = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n\n    return (evens, odds)\n\n\ndef even_odd_palindrome_recursive(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    if n == 1:\n        return (1, 2)\n    elif n == 2:\n        return (1, 1)\n\n    return even_odd_palindrome_recursive(n - 1) + even_odd_palindrome_recursive(n - 2)\n\n\ndef main():\n    # Output: (1, 2)\n    # Input: 3\n    print(even_odd_palindrome(3))\n\n    # Output: (4, 6)\n    # Input: 12\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        if i % 2!= 0:\n            even -= 1\n            odd -= 1\n    return even, odd\n\n\nclass Solution(object):\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 2\n        if n == 2:\n            return 4\n        odd = 0\n        even = 0\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            if i % 2!= 0:\n                even -= 1\n                odd -= 1\n        return even * 2 + odd\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.countPrimes(10))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\nclass Solution(object):\n    def is_palindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        odd, even = even_odd_palindrome(n)\n        return odd == even\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.is_palindrome(3))\n    print(sol.is_palindrome(12))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "odd_palindromes = 0\n    even_palindromes = 0\n\n    # Check whether n is even or odd\n    if n % 2 == 0:\n        odd_palindromes = n // 2\n    else:\n        odd_palindromes = n // 2 + 1\n\n    # Check whether n is even or odd\n    if n % 2 == 0:\n        even_palindromes = n // 2\n    else:\n        even_palindromes = n // 2 + 1\n\n    return (odd_palindromes, even_palindromes)\n\n\nclass Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n\n        # Check whether x is even or odd\n        if x % 2 == 0:\n            odd_palindromes, even_palindromes = even_odd_palindrome(x)\n\n            # Check whether there are any even integer palindromes that fall within the range(1, n), inclusive\n            if even_palindromes >= 1:\n                return True\n\n            # Check whether there are any odd integer palindromes that fall within the range(1, n), inclusive\n            if odd_palindromes >= 1:\n                return True\n\n        else:\n            odd_palindromes, even_palindromes = even_odd_palindrome(x)\n\n            # Check whether there are any odd integer palindromes that fall within the range(1, n), inclusive\n            if odd_palindromes >= 1:\n                return True\n\n            # Check whether there are any even integer palindromes that fall within the range(1, n), inclusive\n            if even_palindromes >= 1:\n                return True\n\n        return False"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# O(n) time, O(1) space\n    odds, evens = 0, 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return odds, evens\n\n\nclass Solution:\n    def palindromePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        evens, odds = even_odd_palindrome(len(nums))\n        return [[i, j] for i in range(1, len(nums)+1) for j in range(i+1, len(nums)+1) if nums[i-1] == nums[j-1] and i % 2 == j % 2]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n    print(sol.palindromePairs(nums))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "odd_num = 0\n    even_num = 0\n    odd_odd = 0\n    even_even = 0\n    for i in range(1, n+1):\n        odd_num += (i % 2 == 0)\n        odd_odd += (i % 2!= 0)\n        even_num += (i % 2 == 1)\n        even_even += (i % 2!= 1)\n\n    return (odd_num, even_num, odd_odd, even_even)\n\nclass Solution:\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x % 2 == 0:\n            return self.isPalindrome(x / 2)\n        else:\n            return not self.isPalindrome((x - 1) / 2)\n\n    # @param x, an integer\n    # @return a boolean\n    def isPalindrome(self, x):\n        # write your code here\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x % 2 == 0:\n            return self.isPalindrome(x / 2)\n        else:\n            return not self.isPalindrome((x - 1) / 2)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# sort the range(1, n)\n    nums = sorted(range(1, n+1))\n    # count the number of even and odd integer palindromes\n    even, odd = 0, 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n <= 0:\n            return ''\n        if n == 1:\n            return '1'\n        res = ''\n        for i in range(1, n+1):\n            res = self.countAndSay(i-1) + str(i) + self.countAndSay(n-i)\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.countAndSay(3))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "odd_even = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            odd_even.append(i)\n        else:\n            odd_even.append(i * 2)\n    return tuple(odd_even)\n\n\nclass Solution(object):\n    def find_palindromes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        odd_even = even_odd_palindrome(n)\n        odd_list = [i for i in odd_even if i % 2 == 0]\n        even_list = [i for i in odd_even if i % 2 == 1]\n        return sorted(odd_list) + sorted(even_list)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.find_palindromes(3))\n    print(sol.find_palindromes(12))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nclass Solution(object):\n    def numberOfPalindromicSubsequences(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        odd_even_palindrome = even_odd_palindrome(n)\n        return sum([odd_even_palindrome[0] + odd_even_palindrome[1]])"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# O(n) time, O(1) space\n    return (int(n/2), int(n/2)+1)\n\n\nclass Solution(object):\n    def findMedianSortedArrays(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: float\n        \"\"\"\n        if not arr1 or not arr2:\n            return None\n        if len(arr1) > len(arr2):\n            return self.findMedianSortedArrays(arr2, arr1)\n        if len(arr1) < len(arr2):\n            return self.findMedianSortedArrays(arr1, arr2)\n\n        # find the middle point\n        mid = len(arr1) / 2\n        # check if arr1[mid] is even\n        is_even = arr1[mid] % 2 == 0\n        # check if arr2[mid] is even\n        is_even2 = arr2[mid] % 2 == 0\n\n        # arr1[mid] is even, arr2[mid] is even\n        if is_even and is_even2:\n            return (arr1[mid] + arr2[mid]) / 2\n        # arr1[mid] is even, arr2[mid] is odd\n        elif is_even and not is_even2:\n            return arr2[mid]\n        # arr1[mid] is odd, arr2[mid] is even\n        elif not is_even and is_even2:\n            return arr1[mid]\n        # arr1[mid] is odd, arr2[mid] is odd\n        else:\n            return (arr1[mid] + arr2[mid]) / 2"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "odd, even = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            odd += 1\n        else:\n            even += 1\n    return (odd, even)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n\ndef is_palindrome(n):\n    \"\"\"\n    Given an integer n, return True if it is a palindrome, and False if it is not.\n\n    Example 1:\n        Input: 123\n        Output: True\n        Explanation: 123 is a palindrome.\n\n    Example 2:\n        Input: -123\n        Output: False\n        Explanation: -123 is not a palindrome.\n\n    Note:\n        1. -10^9 <= n <= 10^9\n        2. -10^9 <= n <= 10^9\n    \"\"\"\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    return n == reverse_int(n)\n\n\ndef is_even(n):\n    \"\"\"\n    Given an integer n, return True if it is even, and False if it is not.\n\n    Example 1:\n        Input: 123\n        Output: True\n        Explanation: 123 is even.\n\n    Example 2:\n        Input: 456\n        Output: False\n        Explanation: 456 is not even.\n\n    Note:\n        1. -10^9 <= n <= 10^9\n        2. -10^9 <= n <= 10^9\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    return False\n\n\ndef reverse_int(n):\n    \"\"\"\n    Given an integer n, return its reverse.\n\n    Example 1:\n        Input: 123\n        Output: 321\n        Explanation: 123 is not a palindrome.\n\n    Example 2:\n        Input: 123\n        Output: 123\n        Explanation: 123 is a palindrome.\n\n    Note:\n        1. -10^9 <= n <= 10^9\n        2. -10^9 <= n <= 10^9\n    \"\"\"\n    if n == 0:\n        return 0\n    return n * 10 + n % 10\n\n\nif __name__ == \"__"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "odd_even_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            odd_even_palindromes += 1\n        else:\n            odd_even_palindromes += 2\n    return (odd_even_palindromes, odd_even_palindromes / 2)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "odd_palindromes = 0\n    even_palindromes = 0\n\n    odd_palindromes, even_palindromes = _even_odd_palindromes(n)\n    return (odd_palindromes, even_palindromes)\n\n\ndef _even_odd_palindromes(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    odd_palindromes = 0\n    even_palindromes = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                odd_palindromes += 1\n            else:\n                even_palindromes += 1\n\n    return (odd_palindromes, even_palindromes)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.even_odd_palindrome(3))\n    print(sol.even_odd_palindrome(12))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "odd_palindromes = 0\n    even_palindromes = 0\n    odd_palindromes, even_palindromes = count_odd_even_palindromes(n)\n    return (odd_palindromes, even_palindromes)\n\n\ndef count_odd_even_palindromes(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of odd and even\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is odd, and two of them are even.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are odd, and 6 of them are even.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of odd and even integer palindromes respectively.\n    \"\"\"\n    odd_palindromes = 0\n    even_palindromes = 0\n    odd_palindromes, even_palindromes = count_odd_even_palindromes(n)\n    return (odd_palindromes, even_palindromes)\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        result = \"1\"\n        for i in range(2, n+1):\n            result = self.countAndSay(i) + self.countAndSay(i-1)\n        return result\n\nclass Solution2(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        result = \"1\"\n        for i in range(2, n+1):\n            result = self.countAndSay(i) + self.countAndSay(i-1)\n        return result\n\n\nif __name__ == \"__main__\":\n    assert Solution().countAndSay(3) == \"133\"\n    assert Solution().countAndSay(12) == \"4646\"\n    assert Solution2().countAndSay(3) == \"133\"\n    assert Solution2().countAndSay(12) == \"4646\""
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "odd_count, even_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n\nclass TestCode(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertEqual(even_odd_palindrome(3), (1, 2))\n        self.assertEqual(even_odd_palindrome(12), (4, 6))\n        self.assertEqual(even_odd_palindrome(100), (0, 0))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if is_palindrome(i*j):\n                if i % 2 == 0:\n                    even_palindromes += 1\n                else:\n                    odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n == 1:\n            return '1'\n        return self.countAndSay(n-1) + self.countAndSay(n-2) + self.countAndSay(n-3)\n\n\nif __name__ == '__main__':\n    print(Solution().countAndSay(3))"
    }
  ]
}