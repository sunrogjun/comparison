{
  "timestamp": "2025-09-14T16:15:09.536943",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 16,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return len({c for c in string if c.isupper() or c.islower()})\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "count = 0\n    for char in string:\n        if char not in string:\n            raise ValueError('Character not in string: {}'.format(char))\n        if char.lower()!= char:\n            count += 1\n    return count\n\n\ndef main(args):\n    \"\"\" Main function.\n    >>> main(['-l', '-v'])\n    'hello world'\n    \"\"\"\n    if not args:\n        return\n\n    if args[0] == '-l':\n        print(count_distinct_characters('hello world'))\n    elif args[0] == '-v':\n        print(count_distinct_characters('hello world'))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('This is a test')\n    2\n    >>> count_distinct_words('This is a test with words')\n    3\n    \"\"\"\n    count = 0\n    words = string.split()\n    for word in words:\n        if word.isalpha():\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    1\n    \"\"\"\n    return len(set(string.split()))\n\ndef count_distinct_words_and_chars(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words and characters does it consist of\n    >>> count_distinct_words_and_chars('xyzXYZ')\n    3\n    >>> count_distinct_words_and_chars('Jerry')\n    4\n    \"\"\"\n    return count_distinct_words(string) + count_distinct_characters(string)\n\ndef count_distinct_words_and_chars_from_file(filename: str) -> int:\n    \"\"\" Given a filename, find out how many distinct words and characters does it consist of\n    >>> count_distinct_words_and_chars_from_file('input.txt')\n    3\n    >>> count_distinct_words_and_chars_from_file('input.txt')\n    4\n    \"\"\"\n    with open(filename) as f:\n        return count_distinct_words_and_chars(f.read())\n\ndef count_distinct_words_and_chars_from_string(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words and characters does it consist of\n    >>> count_distinct_words_and_chars_from_string('xyzXYZ')\n    3\n    >>> count_distinct_words_and_chars_from_string('Jerry')\n    4\n    \"\"\"\n    return count_distinct_words_and_chars(string)\n\ndef count_distinct_words_and_chars_from_string_from_file(filename: str) -> int:\n    \"\"\" Given a filename, find out how many distinct words and characters does it consist of\n    >>> count_distinct_words_and_chars_from_string"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Create a set to store characters in the string\n    characters_set = set()\n\n    # Iterate over the characters in the string\n    for character in string:\n        # Add the character to the set\n        characters_set.add(character)\n\n    # Return the number of characters\n    return len(characters_set)\n\n\n# Driver program to test above functions\nif __name__ == \"__main__\":\n    print(\"Count distinct characters\")\n    print(count_distinct_characters(\"xyzXYZ\"))\n    print(\"Count distinct characters\")\n    print(count_distinct_characters(\"Jerry\"))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "distinct_chars = set()\n    for c in string:\n        distinct_chars.add(c.lower())\n    return len(distinct_chars)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "count = 0\n    for char in string:\n        if char.islower() or char.isupper():\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    test_count_distinct_characters('xyzXYZ')\n    test_count_distinct_characters('Jerry')"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "distinct_characters = {c: 0 for c in string}\n    for char in string:\n        distinct_characters[char.lower()] += 1\n    return len(distinct_characters)\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    1\n    \"\"\"\n    distinct_words = [word.lower() for word in string.split()]\n    return len(distinct_words)\n\ndef main():\n    string = \"xyzXYZ\"\n    print(count_distinct_characters(string))\n    print(count_distinct_words(string))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return len(set(string))\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if string is a palindrome, false otherwise\n    >>> is_palindrome('Abc')\n    True\n    >>> is_palindrome('ABC')\n    True\n    >>> is_palindrome('Abc')\n    False\n    >>> is_palindrome('abc')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_palindrome_reverse(string: str) -> bool:\n    \"\"\" Return True if string is a palindrome, false otherwise\n    >>> is_palindrome_reverse('Abc')\n    True\n    >>> is_palindrome_reverse('ABC')\n    True\n    >>> is_palindrome_reverse('Abc')\n    False\n    >>> is_palindrome_reverse('abc')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_palindrome_count(string: str) -> bool:\n    \"\"\" Return True if string is a palindrome, false otherwise\n    >>> is_palindrome_count('Abc')\n    True\n    >>> is_palindrome_count('ABC')\n    True\n    >>> is_palindrome_count('Abc')\n    False\n    >>> is_palindrome_count('abc')\n    False\n    \"\"\"\n    return len(string) == count_distinct_characters(string)\n\n\ndef is_palindrome_reverse_count(string: str) -> bool:\n    \"\"\" Return True if string is a palindrome, false otherwise\n    >>> is_palindrome_reverse_count('Abc')\n    True\n    >>> is_palindrome_reverse_count('ABC')\n    True\n    >>> is_palindrome_reverse_count('Abc')\n    False\n    >>> is_palindrome_reverse_count('abc')\n    False\n    \"\"\"\n    return len(string) == count_distinct_characters(string[::-1])\n\n\ndef is_palindrome_count_reverse(string: str) -> bool:\n    \"\"\" Return True if string is a palindrome, false"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return len({c for c in string})\n\n\ndef main():\n    \"\"\" This is the main function that is called when you run this file from the command line.\n    It will take in the command line arguments and run the program.\n    \"\"\"\n    # Get the command line arguments\n    args = parse_command_line()\n    # Check if the user has entered a valid number of arguments\n    if args.number_of_letters is None:\n        print(\"You must enter a number of letters.\")\n        return\n    if args.number_of_letters < 1:\n        print(\"You must enter a number greater than 0.\")\n        return\n    if args.number_of_letters > 5:\n        print(\"You must enter a number less than or equal to 5.\")\n        return\n    if args.letters is None:\n        print(\"You must enter a list of letters.\")\n        return\n    if args.letters == \"\":\n        print(\"You must enter a list of letters.\")\n        return\n    if args.letters == \"abc\":\n        print(\"You must enter a list of letters.\")\n        return\n    if args.letters == \"abcdefghijklmnopqrstuvwxyz\":\n        print(\"You must enter a list of letters.\")\n        return\n    if args.letters == \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        print(\"You must enter a list of letters.\")\n        return\n    if args.letters == \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        print(\"You must enter a list of letters.\")\n        return\n    # Get the number of letters\n    number_of_letters = args.number_of_letters\n    # Get the letters\n    letters = args.letters\n    # Get the number of times the letters appear in the string\n    times_of_letters = count_distinct_characters(letters)\n    # Get the number of times the letters appear in the string in a lower case form\n    lower_case_times_of_letters = count_distinct_characters(lower_case(letters))\n    # Get the number of"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('a b c')\n    3\n    >>> count_distinct_words('jerry')\n    4\n    >>> count_distinct_words('jerry jerry jerry')\n    4\n    \"\"\"\n    return len(set(string.split()))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print('All tests passed!')"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\n\ndef count_distinct_characters_lowercase(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct lowercase characters (regardless of case) does it consist of\n    >>> count_distinct_characters_lowercase('xyzXYZ')\n    3\n    >>> count_distinct_characters_lowercase('Jerry')\n    4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count\n\n\ndef count_distinct_characters_uppercase(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct uppercase characters (regardless of case) does it consist of\n    >>> count_distinct_characters_uppercase('xyzXYZ')\n    3\n    >>> count_distinct_characters_uppercase('Jerry')\n    4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n\n\ndef count_distinct_characters_mixed(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_mixed('xyzXYZ')\n    3\n    >>> count_distinct_characters_mixed('Jerry')\n    4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isalpha() or char.islower() or char.isupper():\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    3\n    \"\"\"\n    return len(set(string.split()))\n\ndef count_distinct_words_lower_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_lower_case('xyzXYZ')\n    2\n    >>> count_distinct_words_lower_case('Jerry')\n    3\n    \"\"\"\n    return len(set(string.lower().split()))\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_words('xyzXYZ'))\n    print(count_distinct_words_lower_case('xyzXYZ'))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    3\n    \"\"\"\n    return len(set(string.split()))\n\ndef count_distinct_chars_and_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters and words does it consist of\n    >>> count_distinct_chars_and_words('xyzXYZ')\n    4\n    >>> count_distinct_chars_and_words('Jerry')\n    5\n    \"\"\"\n    return count_distinct_characters(string) + count_distinct_words(string)\n\nif __name__ == '__main__':\n    print(count_distinct_words('xyzXYZ'))\n    print(count_distinct_chars_and_words('xyzXYZ'))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    3\n    >>> count_distinct_words('Jerry')\n    4\n    \"\"\"\n    return len(set(string.split()))\n\ndef count_distinct_words_with_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_with_case('xyzXYZ')\n    3\n    >>> count_distinct_words_with_case('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower().split()))\n\ndef count_distinct_words_with_case_and_punctuation(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_with_case_and_punctuation('xyzXYZ')\n    3\n    >>> count_distinct_words_with_case_and_punctuation('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower().split(PUNCTUATION)))\n\ndef count_distinct_words_with_case_and_punctuation_and_capitalization(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_with_case_and_punctuation_and_capitalization('xyzXYZ')\n    3\n    >>> count_distinct_words_with_case_and_punctuation_and_capitalization('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower().split(PUNCTUATION)))\n\ndef count_distinct_words_with_case_and_punctuation_and_capitalization_and_number(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_with_case_and_punctuation_"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return len(set(string))\n\n\ndef main():\n    \"\"\"\n    Sample Input\n    \n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x\n    x"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_in_list(string_list: List[str]) -> int:\n    \"\"\" Given a list of strings, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_list(['xyzXYZ', 'xyzXYZ', 'xyzXYZ'])\n    3\n    >>> count_distinct_characters_in_list(['Jerry', 'Jerry', 'Jerry'])\n    4\n    \"\"\"\n    return sum(map(count_distinct_characters, string_list))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return len({char for char in string})\n\nif __name__ == '__main__':\n    string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789'\n    print(count_distinct_characters(string))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "count = 0\n    for char in string:\n        if char.lower()!= char.upper():\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# TODO: Add the logic to check for duplicates.\n    return len(set(string))\n\nif __name__ == '__main__':\n    assert count_distinct_characters('xyzXYZ') == 3\n    assert count_distinct_characters('Jerry') == 4"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return len(set(string))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "count = 0\n    for char in string:\n        if char.isupper() and char.islower():\n            count += 1\n        elif char.isupper() and char.isupper():\n            count += 1\n        elif char.islower() and char.islower():\n            count += 1\n        elif char.islower() and char.isupper():\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    3\n    \"\"\"\n    return len(set(string.split()))\n\n\nif __name__ == '__main__':\n    for string in sys.argv[1:]:\n        print(f'{count_distinct_characters(string)} {count_distinct_words(string)}')"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "return len({c for c in string})\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "return len(set(string))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "distinct_characters = 0\n    for char in string:\n        if char.isupper():\n            distinct_characters += 1\n        elif char.islower():\n            distinct_characters += 1\n    return distinct_characters\n\ndef find_biggest_word_in_string(string: str) -> str:\n    \"\"\" Given a string, find the longest word that is made up of characters that are unique (regardless of case)\n    >>> find_biggest_word_in_string('xXyYZ')\n    'xXyYZ'\n    >>> find_biggest_word_in_string('jerry')\n    'jerry'\n    \"\"\"\n    biggest_word = ''\n    for char in string:\n        if char.isupper():\n            if char not in biggest_word:\n                biggest_word += char\n        elif char.islower():\n            if char not in biggest_word:\n                biggest_word += char\n    return biggest_word\n\ndef find_biggest_word_in_file(file: str) -> str:\n    \"\"\" Given a file, find the longest word that is made up of characters that are unique (regardless of case)\n    >>> find_biggest_word_in_file('../data/test.txt')\n    'xyz'\n    \"\"\"\n    biggest_word = ''\n    with open(file, 'r') as f:\n        for line in f:\n            if line.startswith('#'):\n                continue\n            line = line.strip()\n            if len(line) > 0:\n                line = line.lower()\n                for char in line:\n                    if char not in biggest_word:\n                        biggest_word += char\n    return biggest_word\n\nif __name__ == '__main__':\n    for file in ['test.txt']:\n        print(f'file {file}')\n        print(f'{find_biggest_word_in_file(file)}')\n        print(f'{count_distinct_characters(find_biggest_word_in_file(file))}')"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "return len({char for char in string})\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "return len(set(string))\n\nif __name__ == '__main__':\n    assert count_distinct_characters('xyzXYZ') == 3\n    assert count_distinct_characters('Jerry') == 4"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "# TODO: count the number of different characters,\n    # TODO: but don't count the same character twice\n    # TODO: use a dictionary\n    return len(set(string))\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "count = 0\n    for char in string:\n        if char not in string:\n            count += 1\n    return count\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    3\n    \"\"\"\n    count = 0\n    for word in string.split(' '):\n        if word not in string:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_words('xyzXYZ'))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "# this is O(n) so we can do it in a single pass\n    return len(set(string))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "return len(set(string))\n\n# def count_distinct_characters(string: str) -> int:\n#     \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n#     >>> count_distinct_characters('xyzXYZ')\n#     3\n#     >>> count_distinct_characters('Jerry')\n#     4\n#     \"\"\"\n#     return len(set(string))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\n\ndef main():\n    test_cases = read_test_cases(\"./tests/test_cases.txt\")\n    for test_case in test_cases:\n        print(count_distinct_characters(test_case))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "return len(set(string))\n\nif __name__ == \"__main__\":\n    assert count_distinct_characters('xyzXYZ') == 3, \"Expected 3 distinct characters\"\n    assert count_distinct_characters('Jerry') == 4, \"Expected 4 distinct characters\""
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "return len(set(string))\n\n\ndef main() -> None:\n    \"\"\" Program entry point\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "return len(set(string))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "return len(set(string))\n\n\ndef main():\n    \"\"\"\n    Simple test program.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "return len(set(string))\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Test Code\n# ----------------------------------------------------------------------------------------------------------------------\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "count = 0\n    for c in string:\n        if c.lower()!= c:\n            count += 1\n    return count\n\n\ndef main():\n    import argparse\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('string', help='String to count distinct characters from')\n    args = parser.parse_args()\n\n    print(count_distinct_characters(args.string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_characters_lower(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_lower('xyzXYZ')\n    3\n    >>> count_distinct_characters_lower('jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\nif __name__ == '__main__':\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('jerry'))\n    print(count_distinct_characters_lower('xyzXYZ'))\n    print(count_distinct_characters_lower('jerry'))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "return len(set(string))\n\ndef main():\n    \"\"\"\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    >>> count_distinct_characters('abc')\n    3\n    >>> count_distinct_characters('abcdefghijklmnopqrstuvwxyz')\n    26\n    >>> count_distinct_characters('abcdefghijklmnopqrstuvwxyz')\n    26\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "return len({char for char in string if char.isupper() or char.islower()})\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "return len({char for char in string})\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return true iff the string is a palindrome\n    >>> is_palindrome('xyzXYZ')\n    True\n    >>> is_palindrome('Jerry')\n    False\n    \"\"\"\n    return string == string[::-1]"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "return len(set(string))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_strings(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct strings does it consist of\n    >>> count_distinct_strings('xyzXYZ')\n    2\n    >>> count_distinct_strings('Jerry')\n    1\n    \"\"\"\n    return len(set(string.split()))\n\ndef main():\n    print(\"Enter a string:\")\n    input_string = input().strip()\n    print(\"Number of distinct characters:\", count_distinct_characters(input_string))\n    print(\"Number of distinct strings:\", count_distinct_strings(input_string))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "return len(set(string))\n\nif __name__ == '__main__':\n    assert count_distinct_characters('xyzXYZ') == 3\n    assert count_distinct_characters('Jerry') == 4"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "return len(set(string))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "return len(set(string))\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "return len(set(string))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "return len(set(string))\n\n\ndef main() -> None:\n    \"\"\"\n    >>> main()\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "char_count = collections.Counter(string)\n    return sum(char_count.values())"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "return len(set(string))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "return len(set(string))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i] not in string[:i]:\n            count += 1\n    return count"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\ndef main():\n    import time\n\n    start = time.time()\n    print('Started at: {}'.format(start))\n    # print('Counting distinct characters...')\n    # print(count_distinct_characters('The quick brown fox jumps over the lazy dog'))\n    # print('Counting distinct characters...')\n    # print(count_distinct_characters('The quick brown fox jumps over the lazy dog'))\n    # print('Counting distinct characters...')\n    # print(count_distinct_characters('The quick brown fox jumps over the lazy dog'))\n    print('Finished at: {}'.format(time.time()))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "return len(set(string))\n\n# Test cases\n\nprint(count_distinct_characters(\"xyzXYZ\"))\nprint(count_distinct_characters(\"Jerry\"))\nprint(count_distinct_characters(\"Jill\"))\nprint(count_distinct_characters(\"Jill\"))\nprint(count_distinct_characters(\"jill\"))\nprint(count_distinct_characters(\"Jill\"))\nprint(count_distinct_characters(\"Jill\"))\nprint(count_distinct_characters(\"jill\"))\nprint(count_distinct_characters(\"Jill\"))\nprint(count_distinct_characters(\"jill\"))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "return len(set(string))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "return len({char for char in string})\n\nif __name__ == '__main__':\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "return len(set(string))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "return len({char for char in string if char.isupper() or char.islower()})\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    3\n    >>> count_distinct_words('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split()))\n\ndef count_distinct_lines(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct lines does it consist of\n    >>> count_distinct_lines('xyzXYZ')\n    3\n    >>> count_distinct_lines('Jerry')\n    2\n    \"\"\"\n    return len(string.splitlines())\n\nif __name__ == '__main__':\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_words('xyzXYZ'))\n    print(count_distinct_lines('xyzXYZ'))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "count = 0\n    for char in string:\n        if char.isupper() or char.islower():\n            count += 1\n    return count"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "return len({c for c in string})\n\n\ndef count_distinct_characters_with_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_case('XYZ')\n    2\n    >>> count_distinct_characters_with_case('jerry')\n    4\n    \"\"\"\n    return count_distinct_characters(string.upper()) + count_distinct_characters(string.lower())\n\n\ndef count_distinct_characters_with_case_with_limit(string: str, limit: int) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_case_with_limit('XYZ', 2)\n    2\n    >>> count_distinct_characters_with_case_with_limit('jerry', 3)\n    4\n    \"\"\"\n    return count_distinct_characters_with_case(string.upper()) + count_distinct_characters_with_case(string.lower())\n\n\ndef count_distinct_characters_with_limit(string: str, limit: int) -> int:\n    \"\"\" Given a string, find out how many distinct characters does it consist of\n    >>> count_distinct_characters_with_limit('XYZ', 2)\n    2\n    >>> count_distinct_characters_with_limit('jerry', 3)\n    4\n    \"\"\"\n    return len({c for c in string})\n\n\ndef count_distinct_characters_with_limit_with_case(string: str, limit: int) -> int:\n    \"\"\" Given a string, find out how many distinct characters does it consist of\n    >>> count_distinct_characters_with_limit_with_case('XYZ', 2)\n    2\n    >>> count_distinct_characters_with_limit_with_case('jerry', 3)\n    4\n    \"\"\"\n    return count_distinct_characters_with_case(string.upper()) + count_distinct_characters_with_case"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_letters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct letters (regardless of case) does it consist of\n    >>> count_distinct_letters('xyzXYZ')\n    3\n    >>> count_distinct_letters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\ndef count_distinct_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct numbers (regardless of case) does it consist of\n    >>> count_distinct_numbers('xyzXYZ')\n    3\n    >>> count_distinct_numbers('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words (regardless of case) does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    3\n    >>> count_distinct_words('Jerry')\n    4\n    \"\"\"\n    return len(set(string.split()))\n\ndef count_distinct_characters_and_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) and numbers does it consist of\n    >>> count_distinct_characters_and_numbers('xyzXYZ')\n    3\n    >>> count_distinct_characters_and_numbers('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\nif __name__ == '__main__':\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_letters('Jerry'))\n    print(count_distinct_numbers('xyzXYZ'))\n    print(count_distinct_words('xyzXYZ'))\n    print(count_distinct_characters_and_numbers('xyzXYZ'))"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "return len({c for c in string})\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_characters(\"\") == 0, \"Empty string\"\n    assert count_distinct_characters(\"abcd\") == 4, \"Simple\"\n    assert count_distinct_characters(\"abbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbcdaabbc"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, count the number of distinct words in it\n    >>> count_distinct_words('a b c')\n    3\n    >>> count_distinct_words('a b c d')\n    4\n    \"\"\"\n    return len(set(string.split(' ')))\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_words('a b c') == 3, \"Examples\"\n    assert count_distinct_characters('xyzXYZ') == 3, \"Examples\"\n    assert count_distinct_words('a b c d') == 4, \"Examples\"\n    assert count_distinct_characters('JERRY') == 4, \"Examples\""
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "count = 0\n    for char in string:\n        if char.isalpha():\n            if char.isupper():\n                count += 1\n            else:\n                count += 0\n        else:\n            count += 1\n    return count\n\n\ndef count_distinct_characters_lowercase(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_lowercase('xyzXYZ')\n    3\n    >>> count_distinct_characters_lowercase('jerry')\n    4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n        else:\n            count += 0\n    return count\n\n\ndef count_distinct_characters_uppercase(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_uppercase('xyzXYZ')\n    3\n    >>> count_distinct_characters_uppercase('jerry')\n    4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n        else:\n            count += 0\n    return count\n\n\ndef main():\n    print(count_distinct_characters(\"abcdefg\"))\n    print(count_distinct_characters_lowercase(\"abcdefg\"))\n    print(count_distinct_characters_uppercase(\"abcdefg\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "return len({char for char in string if char.isalpha()})\n\ndef count_distinct_letters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct letters (regardless of case) does it consist of\n    >>> count_distinct_letters('xyzXYZ')\n    3\n    >>> count_distinct_letters('Jerry')\n    4\n    \"\"\"\n    return len({char for char in string if char.isalpha()})\n\ndef count_distinct_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct numbers (regardless of case) does it consist of\n    >>> count_distinct_numbers('xyzXYZ')\n    3\n    >>> count_distinct_numbers('Jerry')\n    4\n    \"\"\"\n    return len({char for char in string if char.isdigit()})\n\nif __name__ == \"__main__\":\n    print(count_distinct_letters(\"xyzXYZ\"))\n    print(count_distinct_letters(\"Jerry\"))\n    print(count_distinct_letters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_distinct_letters(\"xyzXYZ\"))\n    print(count_distinct_letters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_distinct_letters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_distinct_letters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_distinct_letters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_distinct_letters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_distinct_letters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_distinct_letters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_distinct_letters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_distinct_letters(\"abcdefghij"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef find_all_duplicates(string: str) -> List[str]:\n    \"\"\" Given a string, find out how many times a character appears in it\n    >>> find_all_duplicates('xyzXYZ')\n    ['x', 'y', 'z']\n    >>> find_all_duplicates('Jerry')\n    ['J', 'r', 'y']\n    \"\"\"\n    return list(set(string))\n\ndef find_all_unique_characters(string: str) -> List[str]:\n    \"\"\" Given a string, find out how many unique characters (regardless of case) does it consist of\n    >>> find_all_unique_characters('xyzXYZ')\n    ['x', 'y', 'z']\n    >>> find_all_unique_characters('Jerry')\n    ['J', 'r', 'y']\n    \"\"\"\n    return list(set(string))\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_characters(\"xyzXYZ\") == 3, \"3 distinct characters\"\n    assert find_all_duplicates(\"xyzXYZ\") == ['x', 'y', 'z'], \"find all duplicates\"\n    assert find_all_unique_characters(\"xyzXYZ\") == ['x', 'y', 'z'], \"find all unique characters\"\n    assert count_distinct_characters(\"x\") == 1, \"1 distinct character\"\n    assert find_all_duplicates(\"x\") == ['x'], \"find all duplicates\"\n    assert find_all_unique_characters(\"x\") == ['x'], \"find all unique characters\"\n    assert count_distinct_characters(\"\") == 0, \"no characters\"\n    assert find_all_duplicates(\"\") == [], \"find all duplicates\"\n    assert find_all_unique_characters(\"\") == [], \"find all unique characters\"\n    assert count_distinct_characters(\"a\") == 1, \"1 distinct character\"\n    assert find_all_duplicates(\"a\") == ['a'],"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_characters_sorted(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_sorted('xyzXYZ')\n    3\n    >>> count_distinct_characters_sorted('Jerry')\n    4\n    \"\"\"\n    return len(sorted(set(string)))\n\ndef count_distinct_characters_duplicates(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_duplicates('xyzXYZ')\n    3\n    >>> count_distinct_characters_duplicates('Jerry')\n    4\n    \"\"\"\n    return len(set(string)) - count_distinct_characters(string)\n\ndef count_distinct_characters_sorted_duplicates(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_sorted_duplicates('xyzXYZ')\n    3\n    >>> count_distinct_characters_sorted_duplicates('Jerry')\n    4\n    \"\"\"\n    return len(sorted(set(string))) - count_distinct_characters(string)\n\ndef main():\n    \"\"\"\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    3\n    \"\"\"\n    return len(set(string.split(' ')))\n\ndef count_distinct_words_with_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_with_numbers('xyzXYZ')\n    2\n    >>> count_distinct_words_with_numbers('Jerry')\n    3\n    >>> count_distinct_words_with_numbers('123')\n    1\n    \"\"\"\n    return len(set(string.split(' ')))\n\ndef count_distinct_words_with_numbers_and_letters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_with_numbers_and_letters('xyzXYZ')\n    2\n    >>> count_distinct_words_with_numbers_and_letters('Jerry')\n    3\n    >>> count_distinct_words_with_numbers_and_letters('123')\n    1\n    \"\"\"\n    return len(set(string.split(' ')))\n\ndef count_distinct_words_with_numbers_and_letters_and_special_chars(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_with_numbers_and_letters_and_special_chars('xyzXYZ')\n    2\n    >>> count_distinct_words_with_numbers_and_letters_and_special_chars('Jerry')\n    3\n    >>> count_distinct_words_with_numbers_and_letters_and_special_chars('123')\n    1\n    >>> count_distinct_words_with_numbers_and_letters_and_special_"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "return len(set(string))\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_characters(\"abcxyzXYZ\") == 3, \"Examples\"\n    assert count_distinct_characters(\"Jerry\") == 4, \"Examples\"\n    assert count_distinct_characters(\"\") == 0, \"Examples\"\n    assert count_distinct_characters(\"xyzXYZ\") == 3, \"Examples\""
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "return len({char for char in string})\n\n\ndef find_first_occurrence(string: str, character: str) -> int:\n    \"\"\"\n    >>> find_first_occurrence('xyzXYZ', 'x')\n    0\n    >>> find_first_occurrence('xyzXYZ', 'y')\n    0\n    >>> find_first_occurrence('xyzXYZ', 'Z')\n    1\n    >>> find_first_occurrence('xyzXYZ', 'z')\n    0\n    >>> find_first_occurrence('xyzXYZ', 'y')\n    1\n    >>> find_first_occurrence('xyzXYZ', 'a')\n    3\n    >>> find_first_occurrence('xyzXYZ', 'z')\n    0\n    \"\"\"\n    return string.find(character)\n\n\ndef find_last_occurrence(string: str, character: str) -> int:\n    \"\"\"\n    >>> find_last_occurrence('xyzXYZ', 'x')\n    0\n    >>> find_last_occurrence('xyzXYZ', 'y')\n    0\n    >>> find_last_occurrence('xyzXYZ', 'Z')\n    1\n    >>> find_last_occurrence('xyzXYZ', 'z')\n    4\n    >>> find_last_occurrence('xyzXYZ', 'y')\n    3\n    >>> find_last_occurrence('xyzXYZ', 'a')\n    3\n    >>> find_last_occurrence('xyzXYZ', 'z')\n    0\n    \"\"\"\n    return string.rfind(character)\n\n\ndef find_occurrence(string: str, character: str) -> int:\n    \"\"\"\n    >>> find_occurrence('xyzXYZ', 'x')\n    0\n    >>> find_occurrence('xyzXYZ', 'y')\n    0\n    >>> find_occurrence('xyzXYZ', 'Z')\n    1\n    >>> find_occurrence('xyzXYZ', 'z')\n    4\n    >>> find_occurrence('xyzXYZ', 'y')\n    3\n    >>> find_occurrence('xyzXYZ', 'a')"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_in_a_row(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_a_row('xyzXYZ')\n    3\n    >>> count_distinct_characters_in_a_row('Jerry')\n    4\n    \"\"\"\n    return sum(1 for x in string if ord(x) <= 255)\n\n\ndef count_distinct_characters_in_a_row_without_space(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_a_row_without_space('xyzXYZ')\n    3\n    >>> count_distinct_characters_in_a_row_without_space('Jerry')\n    4\n    \"\"\"\n    return sum(1 for x in string if ord(x) <= 255 and x!='')\n\n\ndef count_distinct_characters_in_a_row_without_space_with_repeats(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_a_row_without_space_with_repeats('xyzXYZ')\n    3\n    >>> count_distinct_characters_in_a_row_without_space_with_repeats('Jerry')\n    4\n    \"\"\"\n    return sum(1 for x in string if ord(x) <= 255 and x!='' and x!= 'x')\n\n\ndef count_distinct_characters_in_a_row_without_space_with_repeats_and_spaces(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_a_row_without_space_with_repeats_and_spaces('xyzXYZ')\n    3\n    >>> count_"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_non_lower_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_non_lower_case('xyzXYZ')\n    3\n    >>> count_distinct_characters_non_lower_case('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_lower_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_lower_case('xyzXYZ')\n    3\n    >>> count_distinct_characters_lower_case('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_upper_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_upper_case('xyzXYZ')\n    3\n    >>> count_distinct_characters_upper_case('Jerry')\n    4\n    \"\"\"\n    return len(set(string.upper()))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words (regardless of case) does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    3\n    \"\"\"\n    return len(set(string.split(' ')))\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_characters(\"xyzXYZ\") == 3, \"1st example\"\n    assert count_distinct_words(\"xyzXYZ\") == 2, \"2nd example\"\n    assert count_distinct_words(\"Jerry\") == 3, \"3rd example\"\n    assert count_distinct_characters(\"\") == 0, \"4th example\"\n    assert count_distinct_words(\"\") == 0, \"5th example\""
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_characters_alt(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_alt('xyzXYZ')\n    3\n    >>> count_distinct_characters_alt('Jerry')\n    4\n    \"\"\"\n    return len(set(string.upper()))\n\ndef count_distinct_characters_alt2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_alt2('xyzXYZ')\n    3\n    >>> count_distinct_characters_alt2('Jerry')\n    4\n    \"\"\"\n    return len(set(string.upper()))\n\ndef count_distinct_characters_alt3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_alt3('xyzXYZ')\n    3\n    >>> count_distinct_characters_alt3('Jerry')\n    4\n    \"\"\"\n    return len(set(string.upper()))\n\ndef count_distinct_characters_alt4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_alt4('xyzXYZ')\n    3\n    >>> count_distinct_characters_alt4('Jerry')\n    4\n    \"\"\"\n    return len(set(string.upper()))\n\ndef count_distinct_characters_alt5(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_alt5('xyzXYZ')\n    3\n    >>> count_distinct_characters_alt5('Jerry')\n    4\n    \"\"\"\n    return len(set(string.upper()))\n\ndef count_distinct"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "return len(set(string))\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_characters('xyzXYZ') == 3, 'A'\n    assert count_distinct_characters('Jerry') == 4, 'B'"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# TODO: implement this function\n    return 0\n\ndef main() -> None:\n    \"\"\"\n    Sample Usage\n    >>> count_distinct_characters('abcxyzxyz')\n    3\n    >>> count_distinct_characters('jerry')\n    4\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "return len({c for c in string})\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('hello')\n    2\n    >>> count_distinct_words('Jerry')\n    1\n    \"\"\"\n    return len(set(re.split('[^a-zA-Z0-9]', string)))\n\ndef count_distinct_words_without_punctuation(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_without_punctuation('hello')\n    2\n    >>> count_distinct_words_without_punctuation('Jerry')\n    1\n    \"\"\"\n    return len(set(re.split('[^a-zA-Z0-9]+', string)))\n\ndef count_distinct_words_without_punctuation_and_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_without_punctuation_and_numbers('hello')\n    2\n    >>> count_distinct_words_without_punctuation_and_numbers('Jerry')\n    1\n    \"\"\"\n    return len(set(re.split('[^a-zA-Z0-9]+', string)))\n\ndef count_distinct_words_without_punctuation_and_numbers_and_special_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_without_punctuation_and_numbers_and_special_characters('hello')\n    2\n    >>> count_distinct_words_without_punctuation_and_numbers_and_special_characters('Jerry')\n    1\n    \"\"\"\n    return len(set(re.split('[^a-zA-Z0-9 ]+', string)))\n\ndef count_distinct_words_without_punctuation_and_numbers_and_special"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "return len(set(string))\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"Hello\"\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"world\"\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"Hello\"\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"world\"\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"Hello\"\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"world\"\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"Hello\"\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"world\"\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"Hello\"\n    assert count_distinct_characters(\"Hello, world!\") == 5, \"world\""
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "count = 0\n    for char in string:\n        if char not in string:\n            break\n        count += 1\n    return count\n\n\ndef test_count_distinct_characters():\n    assert count_distinct_characters('xyzXYZ') == 3\n    assert count_distinct_characters('Jerry') == 4\n\n\ndef test_count_distinct_characters_unicode():\n    assert count_distinct_characters(u'xyzXYZ') == 3\n    assert count_distinct_characters(u'Jerry') == 4\n\n\nif __name__ == \"__main__\":\n    test_count_distinct_characters()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_chars(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters does it consist of\n    >>> count_distinct_chars('xyzXYZ')\n    4\n    >>> count_distinct_chars('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split()))\n\ndef count_distinct_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct numbers does it consist of\n    >>> count_distinct_numbers('xyzXYZ')\n    3\n    >>> count_distinct_numbers('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\ndef count_distinct_numbers_and_letters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct numbers and letters does it consist of\n    >>> count_distinct_numbers_and_letters('xyzXYZ')\n    5\n    >>> count_distinct_numbers_and_letters('Jerry')\n    6\n    \"\"\"\n    return len(set(string))\n\ndef count_distinct_letters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct letters does it consist of\n    >>> count_distinct_letters('xyzXYZ')\n    5\n    >>> count_distinct_letters('Jerry')\n    5\n    \"\"\"\n    return len(set(string))\n\ndef count_distinct_letters_and_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct letters and numbers does it consist of\n    >>> count_distinct_letters_and_numbers('xyzXYZ')\n    6\n    >>> count_distinct_letters_and_numbers('Jerry')"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_chars(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_chars('xyzXYZ')\n    3\n    >>> count_distinct_chars('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_characters(\"xyzXYZ\") == 3, \"Example\"\n    assert count_distinct_chars(\"xyzXYZ\") == 3, \"Example\""
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef main():\n    \"\"\"\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "count = 1\n    for i in range(len(string)):\n        if string[i].isupper():\n            count += 1\n        else:\n            count -= 1\n    return count\n\ndef count_distinct_characters_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_2('xyzXYZ')\n    3\n    >>> count_distinct_characters_2('Jerry')\n    4\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            count += 1\n        else:\n            count -= 1\n    return count\n\ndef count_distinct_characters_3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_3('xyzXYZ')\n    3\n    >>> count_distinct_characters_3('Jerry')\n    4\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            count += 1\n        else:\n            count -= 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    2\n    >>> count_distinct_words('Jerry')\n    3\n    \"\"\"\n    return len(set(string.split()))\n\ndef count_distinct_chars(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_chars('xyzXYZ')\n    4\n    >>> count_distinct_chars('Jerry')\n    5\n    \"\"\"\n    return len(set(string))\n\nif __name__ == '__main__':\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_words('xyzXYZ'))\n    print(count_distinct_chars('xyzXYZ'))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# This is a very naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation of a naive implementation"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_characters_with_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_case('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_case('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef count_distinct_characters_with_case_and_case_insensitive(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_case_and_case_insensitive('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_case_and_case_insensitive('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef main():\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "return len({c for c in string})\n\n\ndef count_distinct_characters_with_case_insensitive(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_case_insensitive('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_case_insensitive('Jerry')\n    4\n    \"\"\"\n    return len({c for c in string.lower()})\n\n\ndef count_distinct_characters_with_case_sensitive(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_case_sensitive('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_case_sensitive('Jerry')\n    4\n    \"\"\"\n    return len({c for c in string})\n\n\nif __name__ == \"__main__\":\n    assert count_distinct_characters('xyzXYZ') == 3\n    assert count_distinct_characters_with_case_insensitive('xyzXYZ') == 3\n    assert count_distinct_characters_with_case_sensitive('xyzXYZ') == 3\n    assert count_distinct_characters('Jerry') == 4\n    assert count_distinct_characters_with_case_insensitive('Jerry') == 4\n    assert count_distinct_characters_with_case_sensitive('Jerry') == 4"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_letters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct letters does it consist of\n    >>> count_distinct_letters('xyzXYZ')\n    3\n    >>> count_distinct_letters('Jerry')\n    4\n    \"\"\"\n    return len(string)\n\n\ndef count_distinct_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct numbers does it consist of\n    >>> count_distinct_numbers('xyzXYZ')\n    4\n    >>> count_distinct_numbers('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\ndef count_distinct_punctuation(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct punctuation symbols does it consist of\n    >>> count_distinct_punctuation('xyzXYZ')\n    1\n    >>> count_distinct_punctuation('Jerry')\n    1\n    \"\"\"\n    return len(set(string))\n\n\ndef count_distinct_symbols(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct symbols does it consist of\n    >>> count_distinct_symbols('xyzXYZ')\n    2\n    >>> count_distinct_symbols('Jerry')\n    1\n    \"\"\"\n    return len(set(string))\n\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    4\n    >>> count_distinct_words('Jerry')\n    3\n    \"\"\"\n    return len(set(string.split()))\n\n\ndef count_distinct_words_in_text(text: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words_in_text('xyzXYZ')\n    4\n    >>> count_distinct_words_in_text('Jerry')\n    3\n    \"\"\"\n    return len(set(text."
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_characters('xyzXYZ') == 3, \"Example\"\n    assert count_distinct_characters('Jerry') == 4, \"Example\"\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "return len({x for x in string.lower()})\n\n\ndef count_distinct_letters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct letters does it consist of\n    >>> count_distinct_letters('xyzXYZ')\n    3\n    >>> count_distinct_letters('Jerry')\n    4\n    \"\"\"\n    return len({x for x in string})\n\n\ndef count_distinct_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct numbers does it consist of\n    >>> count_distinct_numbers('xyzXYZ')\n    3\n    >>> count_distinct_numbers('Jerry')\n    4\n    \"\"\"\n    return len({x for x in string if x.isdigit()})\n\n\nif __name__ == '__main__':\n    assert count_distinct_characters('xyzXYZ') == 3\n    assert count_distinct_letters('Jerry') == 4\n    assert count_distinct_numbers('Jerry') == 4"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_with_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_case('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_case('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\nif __name__ == '__main__':\n    for s in ('xyzXYZ', 'Jerry'):\n        print(count_distinct_characters(s), count_distinct_characters_with_case(s))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "return len({c for c in string})\n\ndef count_distinct_characters_and_strings(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_and_strings('xyzXYZ')\n    3\n    >>> count_distinct_characters_and_strings('Jerry')\n    4\n    \"\"\"\n    return count_distinct_characters(string) + count_distinct_strings(string)\n\ndef count_distinct_strings(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct strings does it consist of\n    >>> count_distinct_strings('xyzXYZ')\n    3\n    >>> count_distinct_strings('Jerry')\n    3\n    \"\"\"\n    return len({s for s in string.split()})\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_distinct_characters(\"Hello\") == 1, \"Hello\"\n    assert count_distinct_characters(\"Hello World\") == 2, \"Hello World\"\n    assert count_distinct_characters(\"Hello World, how are you?\") == 3, \"Hello World, how are you?\"\n    assert count_distinct_characters(\"Hello, world!\") == 2, \"Hello, world!\"\n    assert count_distinct_strings(\"Hello\") == 1, \"Hello\"\n    assert count_distinct_strings(\"Hello World\") == 2, \"Hello World\"\n    assert count_distinct_strings(\"Hello World, how are you?\") == 3, \"Hello World, how are you?\"\n    assert count_distinct_strings(\"Hello, world!\") == 2, \"Hello, world!\"\n    print(\"Coding Complete\")"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_in_lines(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_lines('xyzXYZ')\n    3\n    >>> count_distinct_characters_in_lines('Jerry')\n    4\n    \"\"\"\n    return sum(1 for _ in string.split('\\n'))\n\n\ndef count_distinct_characters_in_file(filename: str) -> int:\n    \"\"\" Given a filename, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_file('input.txt')\n    3\n    >>> count_distinct_characters_in_file('input.txt')\n    3\n    \"\"\"\n    with open(filename, 'r') as f:\n        return sum(1 for _ in f)\n\n\ndef count_distinct_characters_in_file_lines(filename: str) -> int:\n    \"\"\" Given a filename, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_file_lines('input.txt')\n    3\n    >>> count_distinct_characters_in_file_lines('input.txt')\n    3\n    \"\"\"\n    with open(filename, 'r') as f:\n        return sum(1 for _ in f.read().split('\\n'))\n\n\ndef main():\n    print('count_distinct_characters() =', count_distinct_characters('hello world'))\n    print('count_distinct_characters_in_lines() =', count_distinct_characters_in_lines('hello world'))\n    print('count_distinct_characters_in_file() =', count_distinct_characters_in_file('input.txt'))\n    print('count_distinct_characters_in_file_lines() =', count_distinct_characters_in_file_lines('input.txt'))\n\n\nif __name__ == '__main__"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef is_valid_phone_number(number: str) -> bool:\n    \"\"\" Given a string, is it a valid phone number?\n    >>> is_valid_phone_number('123456789')\n    True\n    >>> is_valid_phone_number('1234567')\n    False\n    \"\"\"\n    return bool(re.match(r'^\\d{3}[-]\\d{3}[-]\\d{4}$', number))\n\n\ndef is_valid_email(email: str) -> bool:\n    \"\"\" Given a string, is it a valid email?\n    >>> is_valid_email('john.doe@example.com')\n    True\n    >>> is_valid_email('john.doe@example.com.')\n    False\n    >>> is_valid_email('john.doe@example.com.example')\n    False\n    >>> is_valid_email('john.doe@example.com.example.example')\n    False\n    >>> is_valid_email('john.doe@example.com.example.example.example')\n    False\n    >>> is_valid_email('john.doe@example.com.example.example.example.example')\n    False\n    \"\"\"\n    return bool(re.match(r'^[a-zA-Z0-9.!#$%&\\'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$', email))\n\n\ndef is_valid_url(url: str) -> bool:\n    \"\"\" Given a string, is it a valid URL?\n    >>> is_valid_url('http://www.google.com')\n    True\n    >>> is_valid_url('http://www.google.com/')\n    True\n    >>> is_valid_url('http://www.google.com/search')\n    False\n    >>> is_valid_url('http://www.google.com/search?q=abc')\n    False\n    >>> is_valid_url('http://www.google.com/search?q=abc#"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_with_lower_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_lower_case('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_lower_case('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_with_uppercase(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_uppercase('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_uppercase('Jerry')\n    4\n    \"\"\"\n    return len(set(string.upper()))\n\n\ndef count_distinct_characters_with_digits(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_digits('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_digits('Jerry')\n    4\n    \"\"\"\n    return len(set(string.replace(' ', '')))\n\n\ndef count_distinct_characters_with_special_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_special_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_special_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.replace(' ', '').replace('.', '').replace('-', '')))\n\n\ndef count_distinct_characters_with_special_characters_with_uppercase(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_letters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct letters does it consist of\n    >>> count_distinct_letters('xyzXYZ')\n    3\n    >>> count_distinct_letters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\ndef count_distinct_numbers(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct numbers does it consist of\n    >>> count_distinct_numbers('xyzXYZ')\n    3\n    >>> count_distinct_numbers('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\ndef count_distinct_symbols(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct symbols does it consist of\n    >>> count_distinct_symbols('xyzXYZ')\n    3\n    >>> count_distinct_symbols('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    3\n    >>> count_distinct_words('Jerry')\n    4\n    \"\"\"\n    return len(set(string.split()))\n\n\ndef count_distinct_chars(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters does it consist of\n    >>> count_distinct_chars('xyzXYZ')\n    3\n    >>> count_distinct_chars('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\nif __name__ == '__main__':\n    print('count_distinct_characters(string) = {}'.format(count_distinct_characters('xyzXYZ')))\n    print('count_distinct_letters(string) = {}'.format(count_distinct_letters('xyzXYZ')))\n    print('count_distinct_numbers(string) = {}'.format"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "return len(set(string))\n\ndef count_distinct_characters_case_insensitive(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_case_insensitive('xyzXYZ')\n    3\n    >>> count_distinct_characters_case_insensitive('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef count_distinct_characters_case_insensitive_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_case_insensitive_2('xyzXYZ')\n    3\n    >>> count_distinct_characters_case_insensitive_2('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()).intersection(set(string.upper())))\n\ndef count_distinct_characters_case_insensitive_3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_case_insensitive_3('xyzXYZ')\n    3\n    >>> count_distinct_characters_case_insensitive_3('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()).intersection(set(string.upper())))\n\ndef count_distinct_characters_case_insensitive_4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_case_insensitive_4('xyzXYZ')\n    3\n    >>> count_distinct_characters_case_insensitive_4('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()).intersection(set(string.upper())))\n\ndef count_distinct_characters_case_insensitive_5(string: str) -> int:\n    \"\"\" Given a string,"
    }
  ]
}