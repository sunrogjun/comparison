{
  "timestamp": "2025-09-14T17:14:07.546113",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 147,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return sum(a**2 for a in range(1, n+1) if a % 3 == 0)\n\n\nclass Solution:\n    def __init__(self):\n        self.ans = 0\n\n    def maxTriples(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        self.ans = get_max_triples(n)\n        return self.ans"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "a = [1] * n\n    a[0] = 1\n    a[1] = 3\n    a[2] = 7\n    a[3] = 13\n    a[4] = 21\n    return sum(a) % 3\n\n\ndef main():\n    n = int(input())\n    print(get_max_triples(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "a = []\n    for i in range(1, n):\n        a.append(i*i-i+1)\n    return len(a)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = []\n    for i in range(1, n):\n        a.append(int(input()))\n    print(get_max_triples(n))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return len(max_triples(n))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "res = 0\n    for i in range(1, n+1):\n        for j in range(1, n-i+1):\n            k = n - i - j + 1\n            if k % 3 == 0:\n                res += 1\n    return res\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(get_max_triples(n))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return sum(triples(a, n))\n\ndef triples(a, n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(x*x-x+1 for x in range(1, n+1))\n\nif __name__ == '__main__':\n    n = int(input())\n    print(get_max_triples(n))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return sum(a**2 - a for a in range(1, n+1) if a % 3 == 0)\n\n\n# https://en.wikipedia.org/wiki/Maximum_triangle_number\ndef get_max_triangles(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triangle is (1, 7, 13).\n    \"\"\"\n    return sum(a**2 - a for a in range(1, n+1) if a % 3 == 0) * (n-1)\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triangles(5))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# The idea is to use a set to track the already visited numbers\n    # a[i] = i * i - i + 1\n    # we don't care about the values of i, j and k\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    # a[i] + a[j] + a[k] is a multiple of 3\n    # we want to track the number of times a[i] + a[j] + a[k] is a multiple of 3\n    ans = 0\n    for i in range(1, n+1):\n        # the condition is a[i] + a[j] + a[k] is a multiple of 3\n        # we don't care about the values of j and k\n        if (a[i] + a[i-1] + a[i+1]) % 3 == 0:\n            ans += 1\n    return ans\n\ndef get_max_triples_2(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # The idea is to use a set to track the already visited numbers\n    # a[i] = i * i - i + 1\n    # we don't care about the values of i, j and k\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    # a[i] + a[j] + a[k] is a multiple of 3\n    # we want to track the number of times a[i] + a[j] + a[k] is a multiple of 3"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return sum(map(lambda x: x * (x - 1) - x + 1, range(1, n + 1))) // 3\n\nclass Solution(object):\n    def findMaxTriplets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < 3:\n            return 0\n        max_triplets = get_max_triples(n)\n        if max_triplets > n * (n - 1) // 2:\n            return max_triplets\n        ans = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if nums[i] * nums[j] * nums[k] > max_triplets:\n                        ans = max(ans, nums[i] * nums[j] * nums[k])\n        return ans"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return sum(i*(i-1)*(i-2) for i in range(1, n+1)) % 3"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return len(solve(n, lambda x, y: x * x - x + 1, lambda x, y, z: x + y + z))\n\n\ndef solve(n, f, g):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    n = int(n)\n    a = [f(x, y, 1) for x in range(n) for y in range(n) if x < y]\n    return sum(a) % 3\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(get_max_triples(n))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return sum(i * (i - 1) for i in range(1, n + 1)) % 3"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "a = [1] * n\n    a[0] = 0\n    for i in range(1, n):\n        a[i] = a[i-1] + a[i-1]\n    return sum(a[i] for i in range(1, n)) % 3"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "a = [1]\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            for k in range(j + 1, i):\n                a.append(i * i - i + 1)\n    return sum(a) % 3"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "n = int(n)\n    if n < 2:\n        return 0\n    a = [1] * n\n    for i in range(2, n):\n        for j in range(i):\n            a[i] = 3 * (i - 1) * (i - 1) - (i - 1) + 1\n            a[j] = 3 * (i - 1) * (i - 1) - (i - 1) + 1\n            a[i] += a[j]\n    return a[n - 1] // 3"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "a = [1] * n\n    for i in xrange(2, n):\n        a[i] = 3 * i - 1\n    return sum(a[j] for j in xrange(1, n)) % 3"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return sum(a[i] for i in range(1, n + 1) if a[i] % 3 == 0)\n\n# Time:  O(n^2)\n# Space: O(1)\n# DP - backtracking\ndef get_max_triples_dp(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    dp = [0 for _ in range(n)]\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            for k in range(j + 1, i + 1):\n                dp[i] = max(dp[i], dp[j] + dp[k])\n    return dp[n]\n\n# Time:  O(n^2)\n# Space: O(n)\n# DP - backtracking\ndef get_max_triples_dp2(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "n = int(n)\n    if n <= 0:\n        return 0\n\n    a = [1]\n    for i in range(2, n + 1):\n        a.append(i * i - i + 1)\n\n    count = 0\n    for i in range(len(a) - 2):\n        for j in range(i + 1, len(a) - 1):\n            for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] == 3 * i:\n                    count += 1\n    return count"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "a = [1] * n\n    b = [0] * n\n    c = [0] * n\n    for i in range(n):\n        a[i] = i * i - i + 1\n        for j in range(i+1, n):\n            b[j] = a[j] + a[i]\n            for k in range(j+1, n):\n                c[k] = b[k] + a[i]\n    return sum(c[i] % 3 for i in range(n))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return sum(x**3 for x in range(1, n+1) if 3*x % n == 0)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return sum(x * (x - 1) for x in range(1, n + 1)) % 3"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "a = [1]\n    for i in range(2, n+1):\n        a.append(i*i-i+1)\n    return len(set(a))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return len(get_triples(n))\n\n\ndef get_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return an integer array b of length n, where b[i] = a[i] + a[j] + a[k] \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: [1, 3, 7, 13, 21]\n    \"\"\"\n    a, b = [], []\n    for i in range(n):\n        a.append(i * i - i + 1)\n        b.append(a[i] + a[i + 1] + a[i + 2])\n    return a, b\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(get_max_triples(n))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return int(sum([x**2 - x + 1 for x in range(1, n + 1)])) % 3"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return sum(a[i] for i in range(1, n) if a[i] % 3 == 0)\n\n\ndef test():\n    assert get_max_triples(1) == 0\n    assert get_max_triples(2) == 1\n    assert get_max_triples(3) == 3\n    assert get_max_triples(4) == 15\n    assert get_max_triples(5) == 63\n    assert get_max_triples(6) == 1093\n    assert get_max_triples(7) == 263693\n    assert get_max_triples(8) == 6143941\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "return sum(map(lambda x: x // 3, range(n)))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "nums = [1]\n    for i in range(2, n+1):\n        for j in range(i):\n            nums.append(i*i-i+1)\n    return len(nums) - sum(nums[i:]) % 3"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "res = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1) % 3 == (j * j - j + 1) % 3:\n                    res += 1\n    return res"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return sum(1 for i in range(n) for j in range(n) for k in range(n)\n               if i < j < k and i*i-i+1 == j*j-j+1 and j*j-j+1 == k*k-k+1)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(get_max_triples(n))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "a = [1, 3, 7, 13, 21]\n    n = len(a)\n    s = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    s += 1\n    return s\n\n# Your code here"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "return len(filter(lambda x: x % 3 == 0, [a[i] for i in range(1, n + 1)]))\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    print(get_max_triples(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# O(n^2) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap + bfs\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap + bfs\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap + bfs\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap + bfs\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap + bfs\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap + bfs\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap + bfs\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap + bfs\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    # Space: O(n)\n    # Hashmap + bfs\n    # O(n) time. O(n) space. Hashmap + bfs\n    # Time: O(n^2)\n    #"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "return sum(1 for i in range(n) if i % 3 == 0)"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "return sum(x**2 for x in range(1, n + 1) if x % 3 == 0)"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "a = [1] * n\n    for i in range(2, n + 1):\n        for j in range(i):\n            a[i] += a[j]\n            if a[i] % 3 == 0:\n                a[i] = a[i] // 3\n    return sum(a)"
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n        a[i] %= 3\n        if a[i] == 0:\n            a[i] = 3\n    return sum(a[:i] for i in range(1, n))"
    },
    {
      "rank": 37,
      "score": 9.0,
      "candidate": "return len(list(filter(lambda x: x % 3 == 0, zip(range(1, n + 1), range(1, n + 1), range(1, n + 1))))), n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(get_max_triples(n))"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "n = int(n)\n    return sum(1 for i in range(n) if i % 3 == 0)"
    },
    {
      "rank": 39,
      "score": 9.0,
      "candidate": "a = [1] * n\n    a[0] = 0\n    i = 1\n    for j in range(1, n):\n        a[j] = a[i] + a[j] + a[i + j]\n        if a[j] % 3 == 0:\n            i = j\n    return i"
    },
    {
      "rank": 40,
      "score": 9.0,
      "candidate": "return sum(a * (a - 1) for a in range(1, n + 1)) % 3"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "n = int(n)\n    a = [1]\n    for i in range(2, n+1):\n        a.append(i*i-i+1)\n    return sum(a)//3"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "# return sum(a[i] for i in range(n) if a[i] % 3 == 0)\n    return sum(a[i] for i in range(n) if i % 3 == 0)"
    },
    {
      "rank": 43,
      "score": 9.0,
      "candidate": "max_triples = 0\n    a = [1]\n    while len(a) < n:\n        a.append(sum(a))\n        max_triples = max(max_triples, len(a) - 1)\n    return max_triples"
    },
    {
      "rank": 44,
      "score": 9.0,
      "candidate": "triples = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                triples += (i + j + k) % 3\n    return triples"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "a = [1] * n\n    for i in range(2, n):\n        a[i] = i * i - i + 1\n    return sum(a[:i] for i in range(1, n)) % 3\n\n\nif __name__ == '__main__':\n    print(get_max_triples(5))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "if n < 3:\n        return 0\n    return (n ** 2 - n + 1) / 3\n\n\nclass Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                k = j + 1\n                while k < len(nums) and nums[k] == nums[k-1]:\n                    k += 1\n                if k < len(nums):\n                    num = nums[i] + nums[j] + nums[k]\n                    if num > 0 and num <= len(nums):\n                        if num == 3:\n                            res += 1\n                        elif num == 4:\n                            res += 2\n                        else:\n                            res += get_max_triples(num)\n        return res"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "return sum(i * j for i, j in zip(xrange(1, n + 1), xrange(1, n + 1)) if i % 3 == 0)\n\n\ndef main():\n    print get_max_triples(5)\n    print get_max_triples(10)\n    print get_max_triples(15)\n    print get_max_triples(20)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "# O(n^2) time, O(1) space\n    # DP\n    return sum(1 for a in range(1, n + 1) if a % 3 == 0)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "n = int(n)\n    if n <= 1:\n        return 0\n    max_triples = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i + j + k) % 3 == 0:\n                    max_triples += 1\n    return max_triples"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "n = int(n)\n    a = [1] * n\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = a[i-1] + a[i-1] + a[i-1]\n    return sum(a[:i+1] for i in range(n)) % 3"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "n = int(n)\n    a = [1]\n    for i in range(1, n):\n        a.append(i*i-i+1)\n    result = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if a[i]+a[j]+a[k] % 3 == 0:\n                    result += 1\n    return result"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "a = [1] * n\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            a[i] += a[j]\n            if a[i] % 3 == 0:\n                a[i] /= 3\n                a[j] -= a[i]\n                a[i] = 1\n    return sum(a)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "return sum(x*x-x+1 for x in range(1,n+1))//3\n\nif __name__ == '__main__':\n    n = int(input())\n    print(get_max_triples(n))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "n = int(n)\n    a = [1] * n\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = a[i - 1] * i - i + 1\n    triples = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] == 3 * i:\n                    triples += 1\n    return triples"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "a = [1] * n\n    b = [0] * n\n    c = [0] * n\n    d = [0] * n\n    e = [0] * n\n    for i in range(1, n + 1):\n        a[i] = i * i - i + 1\n        for j in range(i, n + 1):\n            for k in range(j, n + 1):\n                b[i] += a[j] + a[k]\n                d[i] += a[j] + a[k]\n                if b[i] % 3 == 0:\n                    c[i] += 1\n                if d[i] % 3 == 0:\n                    e[i] += 1\n    return c[n] + e[n]"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "return sum(1 for i in range(1, n + 1) if i % 3 == 0)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "a = [1]\n    for i in range(2, n):\n        a.append(i * i - i + 1)\n    max_triples = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            for k in range(len(a)):\n                if i < j < k:\n                    max_triples += (a[i] + a[j] + a[k]) % 3\n    return max_triples"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "a = []\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n\n    res = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if a[i] + a[j] + a[k] == 3 * i:\n                    res += 1\n\n    return res\n\nif __name__ == '__main__':\n    print(get_max_triples(5))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "n = int(n)\n    a = [1] * n\n    for i in xrange(2, n + 1):\n        a[i] = (i * i - i + 1)\n    return sum(a) % 3"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "return sum(get_triples(n))\n\n\ndef get_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "return sum(a*b for a, b in combinations(range(n), 3) if a+b%3==0)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "a = [1] * n\n    for i in range(2, n+1):\n        a[i] = i*i - i + 1\n    return sum(a[:i] for i in range(1, n+1) if a[i] % 3 == 0)\n\nif __name__ == \"__main__\":\n    assert get_max_triples(5) == 1"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "a = [1]\n    for i in range(2, n + 1):\n        a.append(i * i - i + 1)\n    max_count = 0\n    for i in range(0, len(a) - 1):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] == 3 * i + j + k:\n                    max_count += 1\n    return max_count"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "return sum(1 for _ in range(n) if _ % 3 == 0)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "return sum(a*a-a for a in range(n)) % 3\n\n\nif __name__ == \"__main__\":\n    assert get_max_triples(2) == 1, \"Test Case 1\"\n    assert get_max_triples(3) == 2, \"Test Case 2\"\n    assert get_max_triples(5) == 2, \"Test Case 3\"\n    assert get_max_triples(10) == 3, \"Test Case 4\"\n    assert get_max_triples(20) == 5, \"Test Case 5\""
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "n = int(n)\n    a = [1] * n\n    nums = []\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                a[i] += a[j] + a[k]\n                if a[i] % 3 == 0:\n                    nums.append((i, j, k))\n    return len(nums)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "n = int(n)\n    max_triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    max_triples += 1\n    return max_triples"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "return sum(i * j - i + 1 for i in range(1, n + 1) for j in range(i + 1, n + 1)) % 3\n\nif __name__ == '__main__':\n    print(get_max_triples(5))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "if n < 3:\n        return 0\n    return sum(a * (a + 1) for a in range(1, n + 1) if a % 3 == 0)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "nums = [1]\n    for i in range(2, n+1):\n        nums.append(nums[i-1] * i)\n    return sum(x for x in nums if x % 3 == 0)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "return sum(i * (i - 1) % 3 for i in range(1, n + 1) if i % 3 == 0)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "a = [1] * n\n    for i in range(n):\n        a[i] = i * i - i + 1\n    return sum(a[:i] for i in range(2, n)) % 3"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "return sum(1 for i in range(1, n+1) if i % 3 == 0)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "# brute force\n    def count_triples(a, n):\n        return sum(a[i] * a[j] * a[k] for i in range(1, n + 1) for j in range(i + 1, n + 1) for k in range(j + 1, n + 1)) % 3\n    return count_triples(a, n)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "return int(bin(sum(a[i] for a in a_triples(n))).count(\"1\"))\n\nif __name__ == '__main__':\n    assert get_max_triples(5) == 1\n    assert get_max_triples(10) == 6\n    assert get_max_triples(11) == 7\n    assert get_max_triples(100) == 10"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "return sum(i * (i - 1) for i in range(n) if i % 3 == 0)"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "res = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if i * i - i + 1 == k * k - k + 1 and i * i - i + 1 % 3 == k * k - k + 1:\n                    res += 1\n    return res\n\nif __name__ == \"__main__\":\n    assert get_max_triples(5) == 1"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "return sum(i * (i - 1) for i in range(1, n + 1)) % 3\n\n\ndef test_get_max_triples():\n    assert get_max_triples(5) == 1\n    assert get_max_triples(10) == 1\n\n\nif __name__ == '__main__':\n    test_get_max_triples()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "a = [1] * n\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            for k in range(j, n + 1):\n                if a[i] + a[j] + a[k] == 3 * i:\n                    a[i] = a[j] = a[k] = 0\n                    break\n    return sum(a)\n\n\nif __name__ == '__main__':\n    assert get_max_triples(5) == 1\n    assert get_max_triples(6) == 1\n    assert get_max_triples(7) == 1\n    assert get_max_triples(8) == 1\n    assert get_max_triples(9) == 1\n    assert get_max_triples(10) == 2\n    assert get_max_triples(20) == 3\n    assert get_max_triples(100) == 5\n    assert get_max_triples(1000) == 6\n    assert get_max_triples(10000) == 7\n    assert get_max_triples(100000) == 8"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "return sum(range(1, n + 1) * (n - 1) // 3)\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_max_triples(1) == 1, \"1\"\n    assert get_max_triples(2) == 3, \"2\"\n    assert get_max_triples(3) == 6, \"3\"\n    assert get_max_triples(4) == 10, \"4\"\n    assert get_max_triples(5) == 15, \"5\"\n    assert get_max_triples(6) == 21, \"6\"\n    assert get_max_triples(7) == 28, \"7\"\n    assert get_max_triples(8) == 35, \"8\"\n    assert get_max_triples(9) == 42, \"9\"\n    assert get_max_triples(10) == 49, \"10\"\n    assert get_max_triples(11) == 58, \"11\"\n    assert get_max_triples(12) == 70, \"12\"\n    assert get_max_triples(13) == 81, \"13\"\n    assert get_max_triples(14) == 97, \"14\"\n    assert get_max_triples(15) == 112, \"15\"\n    assert get_max_triples(16) == 126, \"16\"\n    assert get_max_triples(17) == 136, \"17\"\n    assert get_max_triples(18) == 154, \"18\"\n    assert get_max_triples(19) == 172, \"19\"\n    assert get_max_triples(20) == 196, \"20\"\n    assert get_max_triples(21) == 216, \"21\"\n    assert get_max_triples(22) == 234, \"22\"\n    assert get_max_triples(23) == 252, \"23\"\n    assert get_max_triples(24) == 280, \"24\"\n    assert get_max_triples(25) == 300, \"25\"\n    assert get_max_tri"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "a = [1] * n\n    for i in range(2, n):\n        for j in range(i, n):\n            a[j] = i * i - i + 1\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] == 3 * j:\n                    return j\n    return 0\n\ndef get_max_triples_2(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [1] * n\n    for i in range(2, n):\n        for j in range(i, n):\n            a[j] = i * i - i + 1\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] == 3 * j:\n                    return j\n    return 0\n\nif __name__ == '__main__':\n    print(get_max_triples(5))\n    print(get_max_triples_2(5))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "triples = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) % 3 == (j * j - j + 1) % 3 and (j * j - j + 1) % 3 == (k * k - k + 1) % 3:\n                    triples += 1\n    return triples\n\n\nif __name__ == '__main__':\n    assert get_max_triples(5) == 1, \"Case 1\"\n    assert get_max_triples(6) == 3, \"Case 2\"\n    assert get_max_triples(7) == 5, \"Case 3\""
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "return sum(a * a - a + 1 for a in range(1, n + 1) if a % 3 == 0)\n\n\nif __name__ == '__main__':\n    assert get_max_triples(5) == 1\n    assert get_max_triples(10) == 2\n    assert get_max_triples(100) == 3\n    assert get_max_triples(1000) == 4\n    assert get_max_triples(10000) == 5\n    assert get_max_triples(100000) == 6"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "return sum(a * (a - 1) % 3 for a in range(1, n + 1))\n\n\ndef get_max_triples_solution():\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n    \n    Return the maximum number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    return max(get_max_triples(i) for i in range(1, n + 1))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def get_triples(a):\n        \"\"\"\n        Returns the number of triples of a\n        :param a: int array\n        :return: int\n        \"\"\"\n        if len(a) == 0:\n            return 0\n        if len(a) == 1:\n            return 1\n        return get_triples(a[:len(a)/2]) + get_triples(a[len(a)/2:])\n\n    return get_triples(a)\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_max_triples(5) == 1, \"1st example\"\n    assert get_max_triples(6) == 1, \"1st example\"\n    assert get_max_triples(7) == 1, \"1st example\"\n    assert get_max_triples(8) == 2, \"1st example\"\n    assert get_max_triples(9) == 3, \"1st example\"\n    assert get_max_triples(10) == 3, \"1st example\"\n    assert get_max_triples(11) == 4, \"1st example\"\n    assert get_max_triples(12) == 4, \"1st example\"\n    assert get_max_triples(13) == 4, \"1st example\"\n    assert get_max_triples(14) == 4, \"1st example\"\n    assert get_max_triples(15) == 4, \"1st example\"\n    assert get_max_triples(16) == 4, \"1st example\"\n    assert get_max_triples(17) == 4, \"1st example\"\n    assert get_max_triples(18) == 4, \"1st example\"\n    assert get_max_triples(19) == 4, \"1st example\"\n    assert get_max_triples(20) == 4, \"1st example\"\n    assert get_max_triples(21) == 4, \"1st example\"\n    assert get_max_triples(22) == 4, \"1st example\"\n    assert get_max_triples("
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# base case\n    if n == 1:\n        return 0\n\n    # recursive case\n    return get_max_triples(n-1) + get_max_triples(n-2)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(get_max_triples(n))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "n = int(n)\n    return sum(a[:n] for a in combinations(range(1, n+1), 3))\n\n\nif __name__ == \"__main__\":\n    assert get_max_triples(5) == 1\n    assert get_max_triples(10) == 1\n    assert get_max_triples(15) == 1\n    assert get_max_triples(20) == 2\n    assert get_max_triples(25) == 2\n    assert get_max_triples(30) == 2\n    assert get_max_triples(35) == 3\n    assert get_max_triples(40) == 3\n    assert get_max_triples(50) == 3\n    assert get_max_triples(60) == 3\n    assert get_max_triples(70) == 3\n    assert get_max_triples(80) == 3\n    assert get_max_triples(90) == 3\n    assert get_max_triples(100) == 3"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "max_triples = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            for k in range(j, n + 1):\n                if i < j < k and (i * j - i + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\n\nif __name__ == \"__main__\":\n    assert get_max_triples(5) == 1, \"Example\"\n    assert get_max_triples(10) == 2, \"Example\"\n    assert get_max_triples(30) == 3, \"Example\"\n    assert get_max_triples(100) == 4, \"Example\"\n    assert get_max_triples(1000) == 5, \"Example\"\n    assert get_max_triples(10000) == 6, \"Example\""
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "return get_max_triples_1(n)\n\ndef get_max_triples_1(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 2\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The valid triples are (1, 7, 13), (1, 13, 7) and (1, 21, 7).\n    \"\"\"\n    a = [1] * n\n    a[0] = 1\n    a[1] = 3\n    a[2] = 7\n    a[3] = 13\n    a[4] = 21\n    return n - sum(a)\n\nif __name__ == '__main__':\n    import sys\n    import timeit\n\n    start = timeit.default_timer()\n    test_cases = [x for x in range(1, int(sys.argv[1]))]\n    test_case = test_cases[0]\n    print(test_case)\n\n    for test_case in test_cases:\n        test_case = str(test_case)\n        setup = 'from __main__ import get_max_triples_1'\n        print(\"Test case {}: {}\".format(test_case, get_max_triples_1(int(test_case))))\n    print(\"Time elapsed for test cases: {}\".format(timeit.default_timer() - start))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "if n < 3:\n        return 0\n\n    def get_max_triples_aux(n, i):\n        if i >= n:\n            return 0\n\n        if a[i] == i * i - i + 1:\n            return 1 + get_max_triples_aux(n, i + 1)\n\n        return get_max_triples_aux(n, i + 1)\n\n    a = [1] * n\n    return get_max_triples_aux(n, 0)\n\n\nif __name__ == '__main__':\n    print(get_max_triples(5))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "n = int(n)\n    a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    ans = 0\n    for i in range(2, n):\n        for j in range(i, n):\n            k = i * j\n            if k % 3 == 0:\n                ans += 1\n    return ans\n\n\nclass Solution(object):\n    def maxTriples(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return get_max_triples(n)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "return sum(1 for _ in range(n) if is_triple(n, *_))\n\n\nif __name__ == \"__main__\":\n    assert get_max_triples(5) == 1\n    assert get_max_triples(6) == 1\n    assert get_max_triples(7) == 1\n    assert get_max_triples(8) == 1\n    assert get_max_triples(9) == 1\n    assert get_max_triples(10) == 2\n    assert get_max_triples(11) == 2\n    assert get_max_triples(12) == 3\n    assert get_max_triples(13) == 3\n    assert get_max_triples(14) == 3\n    assert get_max_triples(15) == 4\n    assert get_max_triples(16) == 4\n    assert get_max_triples(17) == 4\n    assert get_max_triples(18) == 4\n    assert get_max_triples(19) == 5\n    assert get_max_triples(20) == 5\n    assert get_max_triples(21) == 5\n    assert get_max_triples(22) == 5\n    assert get_max_triples(23) == 6\n    assert get_max_triples(24) == 6\n    assert get_max_triples(25) == 6\n    assert get_max_triples(26) == 6\n    assert get_max_triples(27) == 6\n    assert get_max_triples(28) == 6\n    assert get_max_triples(29) == 6\n    assert get_max_triples(30) == 6\n    assert get_max_triples(31) == 7\n    assert get_max_triples(32) == 7\n    assert get_max_triples(33) == 7\n    assert get_max_triples(34) == 7\n    assert get_max_triples(35) == 7\n    assert get_max_triples(36) == 7\n    assert get_max_triples(37) == 7\n    assert get_max_triples(38) == 7"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "return sum(map(lambda x: x % 3, [a[i] for i in range(n)]))\n\n\ndef get_max_triples_2(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(map(lambda x: x % 3, [a[i] for i in range(n)]))\n\n\ndef main():\n    n = int(input())\n    print(get_max_triples(n))\n    print(get_max_triples_2(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "n = int(n)\n    a = [i ** 2 - i + 1 for i in range(1, n + 1)]\n\n    def check_triple(i, j, k):\n        return a[i] + a[j] + a[k] % 3 == 3 * (i + j + k)\n\n    return sum(map(check_triple, range(1, n), range(2, n), range(3, n)))\n\n\nif __name__ == \"__main__\":\n    for _ in range(input()):\n        n = int(input())\n        print(get_max_triples(n))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "max_triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] == 3*a[i]:\n                    max_triples += 1\n    return max_triples\n\n\nif __name__ == \"__main__\":\n    n = 5\n    a = [1, 3, 7, 13, 21]\n    print get_max_triples(n)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "n = int(n)\n    a = [1] * n\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            if j == i:\n                continue\n            for k in range(j, n + 1):\n                a[i] += a[j] + a[k]\n                a[j] += a[i] - j + 1\n                a[k] += a[j] - j + 1\n    return a[n]\n\nif __name__ == \"__main__\":\n    import sys\n    _stdin = sys.stdin\n    _stdout = sys.stdout\n    try:\n        import readline\n    except ImportError:\n        pass\n    else:\n        del readline.parse_and_bind(\"tab: complete\")\n    sys.stdin = open(os.path.join(os.path.dirname(__file__), \"input_sample1.txt\"), 'r')\n    sys.stdout = open(os.path.join(os.path.dirname(__file__), \"output_sample1.txt\"), 'w')\n    s = int(input())\n    r = get_max_triples(s)\n    print(r)\n    sys.stdout.close()\n    sys.stdin.close()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "return sum(n**3 - n**2 + n - 1 for n in range(1, n+1)) // 3\n\n\ndef get_max_triples_1(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(n**3 - n**2 + n - 1 for n in range(1, n+1)) // 3\n\n\ndef get_max_triples_2(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(n**3 - n**2 + n - 1 for n in range(1, n+1)) // 3"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "n = int(n)\n    a = [1] * n\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = 3 * (i - 1) + 1\n    ans = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    ans += 1\n    return ans\n\ndef get_max_triples_2(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    n = int(n)\n    a = [1] * n\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = 3 * (i - 1) + 1\n    ans = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    ans += 1\n    return ans\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print(get_max_triples(i))\n    for i in range(1, 10):\n        print(get_max_triples_2(i))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "return sum(x for x in range(1, n + 1) if (x % 3) == 0)\n\n\nif __name__ == \"__main__\":\n    assert get_max_triples(5) == 1, \"Invalid test case\"\n    assert get_max_triples(6) == 1, \"Invalid test case\"\n    assert get_max_triples(7) == 2, \"Invalid test case\"\n    assert get_max_triples(8) == 3, \"Invalid test case\"\n    assert get_max_triples(9) == 3, \"Invalid test case\"\n    assert get_max_triples(10) == 4, \"Invalid test case\"\n    assert get_max_triples(11) == 4, \"Invalid test case\"\n    assert get_max_triples(12) == 4, \"Invalid test case\"\n    assert get_max_triples(13) == 5, \"Invalid test case\"\n    assert get_max_triples(14) == 5, \"Invalid test case\"\n    assert get_max_triples(15) == 6, \"Invalid test case\"\n    assert get_max_triples(16) == 6, \"Invalid test case\"\n    assert get_max_triples(17) == 6, \"Invalid test case\"\n    assert get_max_triples(18) == 7, \"Invalid test case\"\n    assert get_max_triples(19) == 7, \"Invalid test case\"\n    assert get_max_triples(20) == 7, \"Invalid test case\"\n    assert get_max_triples(21) == 8, \"Invalid test case\"\n    assert get_max_triples(22) == 8, \"Invalid test case\"\n    assert get_max_triples(23) == 8, \"Invalid test case\"\n    assert get_max_triples(24) == 8, \"Invalid test case\"\n    assert get_max_triples(25) == 9, \"Invalid test case\"\n    assert get_max_triples(26) == 9, \"Invalid test case\"\n    assert get_max_triples(27) == 9, \"Invalid test case\"\n    assert get_max_triples(28) == 9,"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "max_triples = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            for k in range(j, n+1):\n                if i*i - i + 1 == j*j - j + 1 and i*i - i + 1 == k*k - k + 1:\n                    max_triples += 1\n    return max_triples\n\nif __name__ == '__main__':\n    n = int(input())\n    print(get_max_triples(n))"
    }
  ]
}