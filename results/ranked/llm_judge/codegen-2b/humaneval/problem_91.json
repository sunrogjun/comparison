{
  "timestamp": "2025-09-14T16:49:04.764861",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 91,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return sum([1 if len(i) == 0 or i.startswith(\"I\") else 0 for i in S.split('.')])"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return sum(1 for word in S.split('.') if word == 'I')\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return sum(1 for i in S if i.startswith(\"I\"))\n\n\n# print is_bored(\"Hello world\")\n# print is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# print is_bored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return sum(1 for w in S.split('.') if w.startswith('I'))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "boredom = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            boredom += 1\n    return boredom\n\ndef main():\n    \"\"\"\n    Simple tests to demonstrate the solution.\n    \"\"\"\n    print(is_bored(\"Hello world\"))\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "words = S.split('.')\n    return sum([1 for w in words if w.startswith('I')])\n\n\nif __name__ == '__main__':\n    with open('data.txt') as f:\n        S = f.read()\n    print(is_bored(S))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return len(find_boredoms(S))\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: %s <string>\" % sys.argv[0]\n    else:\n        print is_bored(sys.argv[1])"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return sum(1 for s in S.split('.') if s.startswith('I'))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "boredoms = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: %s filename\" % sys.argv[0]\n        exit(-1)\n    with open(sys.argv[1], \"r\") as f:\n        S = f.read()\n    print is_bored(S)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return len(S.split('.')) + len(S.split('?')) + len(S.split('!'))\n\nif __name__ == '__main__':\n    T = int(raw_input())\n    for i in range(T):\n        S = raw_input()\n        print is_bored(S)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "count = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            count += 1\n    return count\n\ndef is_happy(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of happyoms. A happyom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_happy(\"Hello world\")\n    0\n    >>> is_happy(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            count += 1\n    return count\n\ndef is_happy_or_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of happyom or boredoms. A happyom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_happy_or_bored(\"Hello world\")\n    0\n    >>> is_happy_or_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    >>> is_happy_or_bored(\"I am bored.\")\n    1\n    >>> is_happy_or_bored(\"I am happy.\")\n    0\n    \"\"\"\n    count = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return sum(1 for word in S if word.startswith('I'))\n\ndef main():\n    \"\"\"\n    Run the main program.\n    \"\"\"\n    print(is_bored(\"Hello world\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "bored = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            bored += 1\n    return bored"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "bored = 0\n    for w in S:\n        if w.startswith('I'):\n            bored += 1\n    return bored\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) <= 1:\n        print \"Usage: %s filename\" % sys.argv[0]\n        exit(1)\n    filename = sys.argv[1]\n    with open(filename, 'r') as f:\n        S = f.read()\n    print \"The number of boredom is: %d\" % is_bored(S)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "boredoms = []\n    for word in S.split('.'):\n        if word.startswith('I'):\n            boredoms.append(word)\n    return sum(boredoms)\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) < 2:\n        sys.exit('Please supply a string of words.')\n    print(is_bored(sys.argv[1]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "count = 0\n    for word in S.split(\".\"):\n        if word == \"I\":\n            count += 1\n    return count"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# Count the number of boredoms\n    return sum(1 for word in S if word.startswith(\"I\"))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "count = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Count the number of boredom levels\n    boredom_count = 0\n    for word in S.split('.'):\n        if word == 'I':\n            boredom_count += 1\n    return boredom_count"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return sum(1 for _ in S.split('.'))\n\ndef main():\n    with open(os.path.join(os.path.dirname(__file__), 'input.txt')) as f:\n        S = f.read().strip()\n    print(is_bored(S))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "count = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return sum(is_bored_sub(w) for w in S.split('.'))\n\n\ndef is_bored_sub(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored_sub(\"Hello world\")\n    0\n    >>> is_bored_sub(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # count the number of \"I\"s\n    return sum(1 if w[0] == 'I' else 0 for w in S.split('.'))\n\n\nif __name__ == '__main__':\n    print(is_bored(\"Hello world\"))\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n    print(is_bored(\"I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))\n    print(is_bored(\"I am a computer program. I am a computer program.\"))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return sum(1 for _ in S.split(\".\"))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# Count the number of times the word 'I' appears in the string\n    return sum(S.count('I') for S in [S.split('.'), S.split('?'), S.split('!')])\n\n\nif __name__ == '__main__':\n    # The sample input is given at the top of the file\n    sample_input = sys.stdin.read().split('\\n')\n    # The sample output is given at the top of the file\n    sample_output = sys.stdin.read().split('\\n')\n\n    # Run the program\n    result = is_bored(sample_input[0])\n    # Write your program's output to stdout\n    print(result)\n    # Write the output to stdout\n    print(sample_output[1])"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return sum(1 for s in S.split('.') if s.startswith('I'))\n\ndef main():\n    print is_bored(\"Hello world\")\n    print is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "boredom = 0\n    for word in S.split(\".\"):\n        if word[0] == word[-1] and word[0] in \"!?\":\n            boredom += 1\n    return boredom\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "bored = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            bored += 1\n    return bored\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: %s file\" % sys.argv[0]\n        exit()\n    with open(sys.argv[1], 'r') as f:\n        S = f.read()\n        print is_bored(S)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "bored = 0\n    for word in S.split(\".\"):\n        if word == \"I\":\n            bored += 1\n    return bored\n\ndef main():\n    \"\"\"\n    Simple test of the is_bored function.\n    \"\"\"\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n    print(is_bored(\"Hello world\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "boredoms = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\ndef main():\n    print(is_bored('Hello world'))\n    print(is_bored('The sky is blue. The sun is shining. I love this weather'))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "return len(S.split('.')) + len(S.split('?')) + len(S.split('!'))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "return sum(1 for s in S.split('.') if s.startswith('I'))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "return sum(1 for word in S.split('.') if word.startswith('I'))\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) <= 1:\n        print \"Usage: {} <inputfile>\".format(sys.argv[0])\n        sys.exit(1)\n    f = open(sys.argv[1], 'r')\n    S = f.read()\n    f.close()\n    print \"Boredom count:\", is_bored(S)"
    },
    {
      "rank": 33,
      "score": 9.993251387631034,
      "candidate": "bored_words = 0\n    for word in S.split():\n        if word.startswith(\"I\") and word!= \"I\":\n            bored_words += 1\n    return bored_words"
    },
    {
      "rank": 34,
      "score": 9.982086980445024,
      "candidate": "return sum(1 for word in S.split('.') if word == 'I')\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: %s <string>\" % sys.argv[0]\n        sys.exit(1)\n    S = sys.argv[1]\n    print is_bored(S)"
    },
    {
      "rank": 35,
      "score": 9.963994939209833,
      "candidate": "#TODO: write this function\n    return 0\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.94217585880588,
      "candidate": "S = S.lower()\n    count = 0\n    for w in S.split('.'):\n        if w.startswith('i') and w!= 'i':\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) >= 2:\n        filename = sys.argv[1]\n        with open(filename, 'r') as f:\n            T = f.readlines()\n        for i, line in enumerate(T):\n            print(is_bored(line), end='\\n')\n            if i == len(T) - 1:\n                print('\\n')\n    else:\n        print(\"Usage: {} <filename>\".format(sys.argv[0]))"
    },
    {
      "rank": 37,
      "score": 9.930867849414408,
      "candidate": "return sum(1 for s in S.split('.') if s.startswith('I'))\n\n# test cases\nassert(is_bored('Hello world'))\nassert(is_bored('The sky is blue. The sun is shining. I love this weather'))\nassert(is_bored('I am bored'))\nassert(is_bored('I am not bored'))\nassert(is_bored('I am bored'))\nassert(is_bored('I am not bored'))"
    },
    {
      "rank": 38,
      "score": 9.907170511668092,
      "candidate": "return sum([1 for w in S.split(\".\") if w[0] == w[-1]])\n\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv)!= 2:\n        print(\"Usage: {} <input file>\".format(sys.argv[0]))\n        exit()\n    with open(sys.argv[1], \"r\") as f:\n        S = f.read()\n    print(\"{}\".format(is_bored(S)))"
    },
    {
      "rank": 39,
      "score": 9.890164056081243,
      "candidate": "# A sentence starts with a word\n    return sum(1 for word in S.split(\".\") if word.startswith(\"I\"))\n\ndef is_bored_test():\n    assert is_bored(\"Hello world\") == 0\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n\n# ------------------------------------------------------------\n# Driver Code\n# ------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    is_bored_test()"
    },
    {
      "rank": 40,
      "score": 9.887111849756732,
      "candidate": "# Count the number of boredom\n    boredom = 0\n    for word in S.split('.'):\n        if word == 'I':\n            boredom += 1\n    return boredom"
    },
    {
      "rank": 41,
      "score": 9.88293152152541,
      "candidate": "count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count\n\n#-------------------------------------------------------------------------------\n# Testing\n#-------------------------------------------------------------------------------\n\nif __name__ == '__main__':\n    # The sample string\n    S = \"I am bored.\"\n\n    # The output should be 1\n    print(is_bored(S))"
    },
    {
      "rank": 42,
      "score": 9.882923312638333,
      "candidate": "if not S:\n        return 0\n    \n    # remove all whitespace\n    S = ''.join(S.split())\n\n    # check if the string is empty\n    if not S:\n        return 0\n\n    # count the number of '.', '?' and '!'\n    bored = sum(S.count(c) for c in \".\") + sum(S.count(c) for c in \"?\") + sum(S.count(c) for c in \"!\")\n\n    # count the number of 'I'\n    I = S.count(\"I\")\n\n    # count the number of '!'\n    count = 0\n    for c in S:\n        if c == \"!\":\n            count += 1\n    return I + count - bored\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.850496324767066,
      "candidate": "return sum(1 for w in S.split('.') if w.startswith('I'))"
    },
    {
      "rank": 44,
      "score": 9.849448152205355,
      "candidate": "n = 0\n    for word in S.split('.'):\n        if word == 'I':\n            n += 1\n    return n\n\ndef main():\n    \"\"\"\n    Read in a string of words and return the number of boredom.\n    \"\"\"\n    print is_bored(\"Hello world\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 9.836168926701117,
      "candidate": "bored = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            bored += 1\n    return bored\n\ndef is_bored_in_line(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredom sentences. A boredom sentence is a sentence that starts\n    with the word \"I\".\n   \n    For example:\n    >>> is_bored_in_line(\"Hello world\")\n    0\n    >>> is_bored_in_line(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    bored = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            bored += 1\n    return bored\n\ndef is_bored_in_sentence(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredom sentences. A boredom sentence is a sentence that starts\n    with the word \"I\".\n   \n    For example:\n    >>> is_bored_in_sentence(\"Hello world\")\n    0\n    >>> is_bored_in_sentence(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    bored = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            bored += 1\n    return bored\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.807458859791842,
      "candidate": "return len(S.split(\".\"))"
    },
    {
      "rank": 47,
      "score": 9.803945923433922,
      "candidate": "return sum(1 for word in S.split('.') if word == 'I')"
    },
    {
      "rank": 48,
      "score": 9.769680614520107,
      "candidate": "n = len(S)\n    n_bored = 0\n    for i in range(n):\n        if S[i] == \"I\":\n            for j in range(i+1, n):\n                if S[j] == \".\" or S[j] == \"?\" or S[j] == \"!\":\n                    break\n                else:\n                    n_bored += 1\n                    break\n    return n_bored\n\ndef is_bored_2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_2(\"Hello world\")\n    0\n    >>> is_bored_2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    >>> is_bored_2(\"This is the first test case\")\n    1\n    >>> is_bored_2(\"This is the second test case\")\n    1\n    >>> is_bored_2(\"This is the third test case\")\n    1\n    >>> is_bored_2(\"This is the fourth test case\")\n    1\n    >>> is_bored_2(\"This is the fifth test case\")\n    0\n    >>> is_bored_2(\"This is the sixth test case\")\n    1\n    >>> is_bored_2(\"This is the seventh test case\")\n    1\n    >>> is_bored_2(\"This is the eighth test case\")\n    1\n    >>> is_bored_2(\"This is the ninth test case\")\n    1\n    >>> is_bored_2(\"This is the tenth test case\")\n    0\n    >>> is_bored_2(\"This is the eleventh test case\")\n    0\n    >>> is_bored_2(\"This is the twelfth test case\")\n    0\n    >>> is_bored_2(\"This is the thirteenth test case\")\n    0\n    >>> is_bored_2(\"This is the fourteenth test case\")\n    0\n    >>> is_b"
    },
    {
      "rank": 49,
      "score": 9.768291153593768,
      "candidate": "return sum(1 for s in S.split(\".\") if s.startswith(\"I\"))"
    },
    {
      "rank": 50,
      "score": 9.76713512321487,
      "candidate": "count = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            count += 1\n    return count"
    },
    {
      "rank": 51,
      "score": 9.765262807032524,
      "candidate": "S = S.split('.')\n    for word in S:\n        if word == 'I':\n            return 0\n    return 1\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n    print(is_bored(\"Hello world\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 9.749121478207732,
      "candidate": "words = S.split('.')\n    #words = S.split('?')\n    #words = S.split('!')\n    bored = 0\n    for w in words:\n        if w == 'I':\n            bored += 1\n    return bored\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.740864890863175,
      "candidate": "words = set(S.split('.'))\n    bored = 0\n    for word in words:\n        if word.startswith('I'):\n            bored += 1\n    return bored\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.73511989811648,
      "candidate": "boredoms = 0\n    for word in S.split(\".\"):\n        if word[0] == word[-1] == 'I':\n            boredoms += 1\n    return boredoms\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) == 1:\n        import doctest\n        doctest.testmod()\n    else:\n        s = sys.argv[1]\n        print(is_bored(s))"
    },
    {
      "rank": 55,
      "score": 9.72780863773741,
      "candidate": "bored = 0\n    for word in S.split('.'):\n        if word == 'I':\n            bored += 1\n    return bored"
    },
    {
      "rank": 56,
      "score": 9.718856235379514,
      "candidate": "return sum(1 for s in S.split('.') if s.startswith('I'))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 9.699146693885302,
      "candidate": "boredoms = 0\n    for word in S.split(\".\"):\n        if word.startswith('I'):\n            boredoms += 1\n    return boredoms"
    },
    {
      "rank": 58,
      "score": 9.677440122697439,
      "candidate": "return sum(1 for i in S if i.startswith('I'))\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(is_bored(s))"
    },
    {
      "rank": 59,
      "score": 9.661538999847021,
      "candidate": "return sum(1 for word in S.split('.') if word == 'I')"
    },
    {
      "rank": 60,
      "score": 9.648973453061323,
      "candidate": "count = 0\n    for word in S.split('.'):\n        if word[0] == word[-1] == 'I':\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) <= 1:\n        print(\"Usage: {} <string>\".format(sys.argv[0]))\n        exit()\n\n    print(is_bored(sys.argv[1]))"
    },
    {
      "rank": 61,
      "score": 9.595753198553407,
      "candidate": "bored = 0\n    for word in S.split():\n        if word == 'I':\n            bored += 1\n    return bored\n\ndef main():\n    \"\"\"\n    Main driver function.\n    \"\"\"\n    # Your code here.\n    S = 'The sky is blue. The sun is shining. I love this weather'\n    print(is_bored(S))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 9.58039123838868,
      "candidate": "words = S.split()\n    words = [w for w in words if w[0]!= 'I']\n    return len(words)"
    },
    {
      "rank": 63,
      "score": 9.493584439832787,
      "candidate": "return sum(1 for s in S if s.startswith('I'))\n\n\ndef main():\n    print(is_bored(\"Hello world\"))\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 9.47114453552205,
      "candidate": "return sum(1 for word in S if word.startswith('I'))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.446832512996986,
      "candidate": "return sum(is_bored(word) for word in S.split('.'))\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        sys.exit('Usage:./bored.py <string>')\n    S = sys.argv[1]\n    print(is_bored(S))"
    },
    {
      "rank": 66,
      "score": 9.42450321128885,
      "candidate": "return sum(1 for x in S if x == \"I\")\n\n\ndef is_bored_test():\n    \"\"\"\n    >>> is_bored_test(\"Hello world\")\n    0\n    >>> is_bored_test(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    S = \"Hello world\"\n    assert is_bored(S) == 0\n    S = \"The sky is blue. The sun is shining. I love this weather\"\n    assert is_bored(S) == 1\n    S = \"Hello. I love this weather\"\n    assert is_bored(S) == 1\n    S = \"I love this weather\"\n    assert is_bored(S) == 0\n    S = \"I love this weather. And I love this weather.\"\n    assert is_bored(S) == 1\n\n\ndef main():\n    import time\n\n    start = time.clock()\n    is_bored_test()\n    print(time.clock() - start)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 9.401896687959665,
      "candidate": "return sum(1 for line in S.split('.') if line.startswith('I'))"
    },
    {
      "rank": 68,
      "score": 9.389578175014488,
      "candidate": "return sum([1 for w in S.split('.') if w.startswith('I')])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 9.335906975550785,
      "candidate": "count = 0\n    for word in S.split():\n        if word.startswith('I') or word.endswith('?') or word.endswith('!'):\n            count += 1\n    return count\n\ndef main():\n    print(is_bored(\"Hello world\"))\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n    print(is_bored(\"This is a test.\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 9.287625906893272,
      "candidate": "return sum(1 for w in S.split('.') if w.startswith('I'))\n\nif __name__ == \"__main__\":\n    print(is_bored(\"Hello world\"))\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))"
    },
    {
      "rank": 71,
      "score": 9.26824252593394,
      "candidate": "words = S.split('.')\n    bored = 0\n    for w in words:\n        if w.startswith('I'):\n            bored += 1\n    return bored\n\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        sys.exit('Please provide a string as input')\n    S = sys.argv[1]\n    print(is_bored(S))"
    },
    {
      "rank": 72,
      "score": 9.260739004816287,
      "candidate": "return sum(1 for w in S.split('.') if w.startswith('I'))"
    },
    {
      "rank": 73,
      "score": 9.137541083743484,
      "candidate": "count = 0\n    for i, w in enumerate(S):\n        if w.startswith('I'):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 9.0433598776711,
      "candidate": "return sum(1 for s in S.split('.') if s.startswith('I'))"
    },
    {
      "rank": 75,
      "score": 9.006215542699554,
      "candidate": "# this is a really good example of how to use a generator\n    return sum(1 for _ in is_bored_generator(S))\n\ndef is_bored_generator(S):\n    \"\"\"\n    Generate a generator that will count the number of boredoms in the given\n    string.\n\n    For example:\n    >>> for x in is_bored_generator(\"The sky is blue. The sun is shining. I love this weather\"):\n   ...     print(x)\n   ...\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I\n    I"
    },
    {
      "rank": 76,
      "score": 8.690127447955128,
      "candidate": "return len([True for w in S.split('.') if w.startswith('I')])\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) == 1:\n        print(is_bored(\"Hello world\"))\n    else:\n        print(is_bored(sys.argv[1]))"
    },
    {
      "rank": 77,
      "score": 8.444444444444445,
      "candidate": "return sum(1 for s in S.split('.') if s.startswith('I'))\n\n# test\nif __name__ == \"__main__\":\n    assert is_bored(\"Hello world\") == 0\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1"
    },
    {
      "rank": 78,
      "score": 8.444444444444445,
      "candidate": "n = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            n += 1\n    return n\n\nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) >= 2):\n        n = int(sys.argv[1])\n        for _ in range(n):\n            print(is_bored(sys.argv[2]))\n    else:\n        print(\"Please provide a number of words.\")"
    },
    {
      "rank": 79,
      "score": 8.444444444444445,
      "candidate": "return sum(1 for word in S.split('.') if word.startswith('I'))\n\n\nif __name__ == \"__main__\":\n    assert is_bored(\"Hello world\") == 0\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1"
    },
    {
      "rank": 80,
      "score": 3.3285751677209414,
      "candidate": "return sum([1 for word in S if word.startswith('I')])\n\n\ndef is_bored_2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_2(\"Hello world\")\n    0\n    >>> is_bored_2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum([1 for word in S if word.startswith('I')])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 3.2848104059998726,
      "candidate": "return sum(1 for w in S if w.startswith('I'))\n\ndef is_bored_with_one(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_with_one(\"Hello world\")\n    0\n    >>> is_bored_with_one(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for w in S if w.startswith('I')) == 1\n\ndef is_bored_with_two(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_with_two(\"Hello world\")\n    0\n    >>> is_bored_with_two(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for w in S if w.startswith('I')) == 2\n\ndef is_bored_with_three(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_with_three(\"Hello world\")\n    0\n    >>> is_bored_with_three(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for w in S if w.startswith('I')) == 3\n\ndef is_bored_with_four(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number"
    },
    {
      "rank": 82,
      "score": 3.2219956675059724,
      "candidate": "boredom_count = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            boredom_count += 1\n    return boredom_count\n\nif __name__ == '__main__':\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n    print(is_bored(\"Hello world\"))\n    print(is_bored(\"Hello. How are you?\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this weather.\"))\n    print(is_bored(\"I love this"
    },
    {
      "rank": 83,
      "score": 3.210741908557325,
      "candidate": "n = 0\n    for i in S:\n        if i == \"I\":\n            n += 1\n    return n"
    },
    {
      "rank": 84,
      "score": 3.1922344447174353,
      "candidate": "bored = 0\n    for w in S.split('.'):\n        if w.startswith('I'):\n            bored += 1\n    return bored\n\n\nif __name__ == '__main__':\n    import sys\n\n    if len(sys.argv) <= 1:\n        print \"Usage:./is_bored.py string\"\n        sys.exit(1)\n\n    S = sys.argv[1]\n    print is_bored(S)"
    },
    {
      "rank": 85,
      "score": 3.172599525918797,
      "candidate": "boredom = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            boredom += 1\n    return boredom\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_bored(\"Hello world\") == 0, \"Hello world is not a boredom.\"\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1, \"The sky is blue. The sun is shining. I love this weather is not a boredom.\"\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 3.104309972132359,
      "candidate": "return len(S.split('.')) + len(S.split('?')) + len(S.split('!'))"
    },
    {
      "rank": 87,
      "score": 3.0690377330285337,
      "candidate": "boredoms = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\ndef test():\n    assert is_bored(\"Hello world\") == 0\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n    assert is_bored(\"I am bored\") == 0\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 88,
      "score": 3.068057633572907,
      "candidate": "# if the string has a single letter, we can't count it as a boredom\n    if len(S) == 1:\n        return 0\n    # if the string has two or more letters, then we can count it as a\n    # boredom\n    elif len(S) > 1:\n        return 1\n\n    # otherwise, we don't know what to count\n    return 0\n\n\ndef main():\n    print(is_bored(\"Hello world\"))\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n    print(is_bored(\"I can't believe I have to go to work.\"))\n    print(is_bored(\"I'm a man, not a woman. I'm a man, not a woman.\"))\n    print(is_bored(\"I'm a man, not a woman. I'm a man, not a woman.\"))\n    print(is_bored(\"I'm a man, not a woman. I'm a man, not a woman.\"))\n    print(is_bored(\"I'm a man, not a woman. I'm a man, not a woman.\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 89,
      "score": 3.0438613549509985,
      "candidate": "bored = 0\n    for s in S:\n        if s.startswith('I'):\n            bored += 1\n    return bored\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_bored(\"Hello world\") == 0, \"1st example\"\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1, \"2nd example\"\n    assert is_bored(\"I love this weather\") == 0, \"3rd example\"\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 90,
      "score": 3.035987339049894,
      "candidate": "boredom = 0\n    for word in S.split('.'):\n        if word == 'I':\n            boredom += 1\n    return boredom\n\ndef main():\n    \"\"\"\n    Simple test case.\n    \"\"\"\n    assert is_bored(\"Hello world\") == 0\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n    assert is_bored(\"Hello world. The sky is blue. The sun is shining. I love this weather\") == 0\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 3.023293743839072,
      "candidate": "# This is a bit of a hack.\n    # We use the same trick in the homework.\n    # In the homework, we used a dictionary to store the counts.\n    # But I'm going to store the counts in a list.\n    # This is to make it easier to find the answer.\n    bored_counts = [0]*(len(S)+1)\n    for i in range(len(S)):\n        if S[i] == '.':\n            bored_counts[i+1] = bored_counts[i] + 1\n    return bored_counts[len(S)]\n\n\nif __name__ == \"__main__\":\n    print(\"Test 1:\")\n    print(is_bored(\"Hello world\"))\n    print(\"Test 2:\")\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n    print(\"Test 3:\")\n    print(is_bored(\"This is a test. I'm bored.\"))\n    print(\"Test 4:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 5:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 6:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 7:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 8:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 9:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 10:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 11:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 12:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 13:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 14:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 15:\")\n    print(is_bored(\"I'm bored.\"))\n    print(\"Test 16:\")\n    print(is_"
    },
    {
      "rank": 92,
      "score": 2.938744312543412,
      "candidate": "count = 0\n    for word in S:\n        if word in BORDE:\n            count += 1\n    return count\n\n\ndef is_bored_test():\n    assert is_bored(\"Hello world\") == 0\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n    assert is_bored(\"I love this weather\") == 0\n    assert is_bored(\"I love this weather.\") == 0\n    assert is_bored(\"I love this weather...\") == 0\n    assert is_bored(\"I love this weather. I love this weather.\") == 1\n    assert is_bored(\"I love this weather. I love this weather.\") == 1\n    assert is_bored(\"I love this weather. I love this weather. I love this weather.\") == 1\n    assert is_bored(\"I love this weather. I love this weather. I love this weather. I love this weather.\") == 2\n    assert is_bored(\"I love this weather. I love this weather. I love this weather. I love this weather. I love this weather.\") == 2\n    assert is_bored(\"I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather.\") == 3\n    assert is_bored(\"I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather.\") == 3\n    assert is_bored(\"I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather.\") == 4\n    assert is_bored(\"I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather.\") == 4\n    assert is_bored(\"I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather.\") == 5\n    assert is_bored(\"I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I"
    },
    {
      "rank": 93,
      "score": 2.935065401071245,
      "candidate": "boredoms = 0\n    for w in S.split('.'):\n        if w.lower() == 'i':\n            boredoms += 1\n    return boredoms\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_bored(\"Hello world\") == 0, \"Hello world is not a boring sentence\"\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1, \"I love this weather\"\n    assert is_bored(\"This is a boring sentence\") == 0, \"This is not a boring sentence\"\n    assert is_bored(\"This is a sentence with many words\") == 1, \"This is not a sentence with many words\"\n    assert is_bored(\"This is a sentence with many words. This is a sentence with many words\") == 2, \"This is not a sentence with many words\"\n    assert is_bored(\"This is a sentence with many words. This is a sentence with many words. This is a sentence with many words\") == 3, \"This is not a sentence with many words\"\n    assert is_bored(\"This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words\") == 4, \"This is not a sentence with many words\"\n    assert is_bored(\"This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words\") == 5, \"This is not a sentence with many words\"\n    assert is_bored(\"This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words\") == 6, \"This is not a sentence with many words\"\n    assert is_bored(\"This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words. This is a sentence with many words\") =="
    },
    {
      "rank": 94,
      "score": 2.899373410052489,
      "candidate": "bored = 0\n    for s in S:\n        if s == '.' or s == '?' or s == '!':\n            bored += 1\n    return bored\n\ndef get_boredoms(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> get_boredoms(\"Hello world\")\n    []\n    >>> get_boredoms(\"The sky is blue. The sun is shining. I love this weather\")\n    [u'The sky is blue. The sun is shining. I love this weather']\n    \"\"\"\n    bored = []\n    for s in S:\n        if s == '.' or s == '?' or s == '!':\n            bored.append(s)\n    return bored\n\ndef is_bored_and_silly(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored_and_silly(\"Hello world\")\n    0\n    >>> is_bored_and_silly(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    bored = 0\n    silly = 0\n    for s in S:\n        if s == '.' or s == '?' or s == '!':\n            if s == '.' or s == '?':\n                silly += 1\n            bored += 1\n    return bored, silly\n\ndef get_bored_and_silly(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> get_bored_and"
    },
    {
      "rank": 95,
      "score": 2.873865875117051,
      "candidate": "# Assumes that the string S is a valid string\n    # S = 'Hello world'\n    # S = 'The sky is blue. The sun is shining. I love this weather'\n    \n    # Count number of words in the string\n    num_words = len(S.split(' '))\n    \n    # Check for number of words in string greater than 1\n    if num_words > 1:\n        # Return the number of boredoms\n        return num_words - 1\n    else:\n        # Return 0 if num_words is 1\n        return 0\n\ndef is_bored_2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_2(\"Hello world\")\n    0\n    >>> is_bored_2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Assumes that the string S is a valid string\n    # S = 'Hello world'\n    # S = 'The sky is blue. The sun is shining. I love this weather'\n    \n    # Count number of words in the string\n    num_words = len(S.split(' '))\n    \n    # Check for number of words in string greater than 1\n    if num_words > 1:\n        # Return the number of boredoms\n        return num_words - 1\n    else:\n        # Return 0 if num_words is 1\n        return 0\n\ndef is_bored_3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_3(\"Hello world\")\n    0\n    >>> is_bored_3(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Assumes that the"
    },
    {
      "rank": 96,
      "score": 2.848832716237111,
      "candidate": "count = 0\n    for i in range(len(S)):\n        if S[i] == '.':\n            if S[i+1] == '?':\n                count += 1\n                i += 1\n            elif S[i+1] == '!':\n                count += 1\n                i += 1\n            else:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    T = int(input())\n    for t in range(T):\n        N = int(input())\n        S = input().split()\n        print(is_bored(S))"
    },
    {
      "rank": 97,
      "score": 2.809314944140546,
      "candidate": "boredoms = 0\n    for sentence in S.split('.'):\n        if sentence[0] == 'I':\n            boredoms += 1\n    return boredom\n\ndef is_bored_c(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_c(\"Hello world\")\n    0\n    >>> is_bored_c(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence[0] == 'I':\n            boredoms += 1\n            sentence = sentence[1:]\n        sentence = sentence.replace(' ', '')\n        for word in sentence.split('.'):\n            if word in ['.', '?', '!']:\n                boredoms += 1\n    return boredoms\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_bored(\"Hello world\") == 0, \"Example\"\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1, \"Example\"\n    assert is_bored_c(\"Hello world\") == 0, \"Example\"\n    assert is_bored_c(\"The sky is blue. The sun is shining. I love this weather\") == 1, \"Example\"\n    assert is_bored_c(\"Hello world\", \"The sky is blue. The sun is shining. I love this weather\") == 1, \"Example\"\n    assert is_bored_c(\"Hello world\", \"The sky is blue. The sun is shining. I love this weather\", \"This is a test.\") == 2, \"Example\""
    },
    {
      "rank": 98,
      "score": 2.703416222719589,
      "candidate": "return sum([1 for i in S.split('.') if i[0] == 'I'])\n\ndef is_happy(S):\n    \"\"\"\n    Given a string of words, your task is to count the number of happy\n    sentences. A happy sentence is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_happy(\"Hello world\")\n    0\n    >>> is_happy(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum([1 for i in S.split('.') if i[0] == 'I'])\n\ndef main():\n    # your code goes here\n    print is_bored(\"Hello world\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 99,
      "score": 2.629761567373826,
      "candidate": "if not S:\n        return 0\n    # We need to look for the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the next character that's not a period, question mark or exclamation mark\n    # and the"
    },
    {
      "rank": 100,
      "score": 2.5884692739852473,
      "candidate": "count = 0\n    for word in S.split():\n        if word.startswith('I') or word.startswith('?') or word.startswith('!'):\n            count += 1\n    return count\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_bored(\"I. I'm bored\") == 1, \"1st example\"\n    assert is_bored(\"I? I'm bored\") == 1, \"2nd example\"\n    assert is_bored(\"I! I'm bored\") == 1, \"3rd example\"\n    assert is_bored(\"I. I'm bored. The sky is blue. The sun is shining. I love this weather\") == 3, \"4th example\"\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}