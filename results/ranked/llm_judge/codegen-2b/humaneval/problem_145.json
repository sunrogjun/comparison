{
  "timestamp": "2025-09-14T17:13:15.197987",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 145,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=True)\n\ndef main():\n    \"\"\"\n    Sample Input\n    1\n    11\n    -1\n    -11\n    -12\n    Sample Output\n    -11\n    -1\n    1\n    11\n    -12\n    \"\"\"\n    nums = [1, 11, -1, -11, -12]\n    print(order_by_points(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n\n    def order_sum_of_digits(num):\n        if num == 0:\n            return 0\n        return sum([int(digit) for digit in str(num)])\n\n    nums.sort(key=order_sum_of_digits)\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "result = []\n    for num in nums:\n        if num!= 0:\n            sum_digits = sum(map(int, str(num)))\n            # print(sum_digits)\n            # print(sum_digits % 10)\n            # print(sum_digits % 100)\n            if sum_digits % 10 == 0 and sum_digits % 100 == 0:\n                result.append(num)\n    return result\n\n\ndef main():\n    \"\"\"\n    Sample Input\n    [1, 11, -1, -11, -12]\n    Sample Output\n    [-1, -11, 1, -12, 11]\n    \"\"\"\n    nums = [1, 11, -1, -11, -12]\n    print(order_by_points(nums))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums\n\n\ndef test(nums):\n    return order_by_points(nums)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n\n    # Sort numbers by their sum of digits.\n    nums.sort(key=sum_digits)\n\n    # Convert the sorted list into a list of tuples.\n    result = []\n    for num in nums:\n        # For each number, add its index to the result.\n        result.append((num, num))\n\n    # Sort the result based on the index.\n    result.sort(key=lambda x: x[0])\n\n    # Convert back to a list of integers.\n    return [x[1] for x in result]\n\n\ndef sum_digits(num):\n    \"\"\"\n    Given a number, return its sum of digits.\n    For example:\n    >>> sum_digits(1) == 1\n    >>> sum_digits(-1) == 1\n    >>> sum_digits(5) == 5\n    >>> sum_digits(0) == 0\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return sum([int(digit) for digit in str(num)])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if nums:\n        sorted_nums = sorted(nums)\n        sum_of_digits = 0\n        for num in sorted_nums:\n            sum_of_digits += num\n        return sorted_nums, sum_of_digits\n    return []\n\ndef main():\n    nums = [1, 11, -1, -11, -12]\n    sorted_nums, sum_of_digits = order_by_points(nums)\n    print(sorted_nums)\n    print(sum_of_digits)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n\n    # sort the numbers by their sum of digits\n    sum_digits = sum(map(int, map(str, nums)))\n    nums = sorted(nums, key=lambda x: sum_digits - sum(map(int, map(str, x))), reverse=True)\n\n    # order them based on their index in original list\n    return [nums[i] for i in range(len(nums))]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n    sums = [sum(num) for num in nums]\n    sums.sort()\n    return [nums[i] for i, sum_ in enumerate(sums) if sum_ == sums[i]]\n\n\ndef order_by_points_with_index(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_with_index([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_with_index([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    sums = [sum(num) for num in nums]\n    sums.sort()\n    return [nums[i] for i, sum_ in enumerate(sums) if sum_ == sums[i]]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n\n    sums = [0] * len(nums)\n    for i, num in enumerate(nums):\n        sums[i] += num\n\n    sorted_nums = sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=True)\n    return [nums[i] for i in range(len(nums)) if nums[i] == sorted_nums[i]]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if nums:\n        return sorted(nums, key=lambda x: sum(map(int, str(x))))\n    else:\n        return []\n\n\ndef main():\n    \"\"\"\n    Main program function.\n    \"\"\"\n    # Get input\n    nums = input().split()\n\n    # Sort the list\n    nums = order_by_points(nums)\n\n    # Print output\n    for i in nums:\n        print(i, end=\" \")\n    print()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n\n\ndef main():\n    print(order_by_points([1, 11, -1, -11, -12]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if nums:\n        return sorted(nums, key=sum_digits)\n    else:\n        return []\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert order_by_points([]) == []\n    assert order_by_points([1]) == [1]\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([1, 11, -1, -11, -12, -13]) == [-1, -11, 1, -12, -13, 11]\n    assert order_by_points([1, 11, -1, -11, -12, -13, -14]) == [-1, -11, 1, -12, -13, -14, 11]\n    assert order_by_points([1, 11, -1, -11, -12, -13, -14, -15]) == [-1, -11, 1, -12, -13, -14, -15, 11]\n    assert order_by_points([1, 11, -1, -11, -12, -13, -14, -15, -16]) == [-1, -11, 1, -12, -13, -14, -15, -16, 11]\n    assert order_by_points([1, 11, -1, -11, -12, -13, -14, -15, -16, -17]) == [-1, -11, 1, -12, -13, -14, -15, -16, -17, 11]\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n\n    # Find sum of digits in list\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n\n    # Sort based on sum of digits\n    return sorted(nums, key=lambda x: sum_of_digits - x)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if nums == []:\n        return nums\n\n    # sort by sum of digits\n    return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return sorted(nums, key=lambda num: sum(map(int, str(num))))\n\n\ndef sum_of_digits(nums):\n    \"\"\"\n    Write a function which returns the sum of digits in the given list of\n    integers.\n\n    For example:\n    >>> sum_of_digits([1, 11, -1, -11, -12]) == 22\n    >>> sum_of_digits([]) == 0\n    \"\"\"\n    return sum(map(int, str(sum(nums))))\n\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(sum_of_digits([1, 11, -1, -11, -12]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n\n    nums.sort()\n    return [nums[i] for i in range(len(nums)) if nums[i] < 0]"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n\n    sorted_nums = sorted(nums)\n    for i in range(1, len(sorted_nums)):\n        if sorted_nums[i] == sorted_nums[i-1]:\n            sorted_nums.insert(i, sorted_nums[i-1])\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.970475850152063,
      "candidate": "if not nums:\n        return []\n\n    result = [0] * len(nums)\n    for i in range(len(nums)):\n        sum_of_digits = sum(map(int, str(nums[i])))\n        for j in range(len(nums)):\n            if j!= i and nums[j] > 0 and sum_of_digits == sum(map(int, str(nums[j]))):\n                result[i] = j\n                break\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.943311636519814,
      "candidate": "if not nums:\n        return []\n\n    result = []\n    for i, number in enumerate(nums):\n        sum_of_digits = sum(map(int, str(number)))\n        result.append((sum_of_digits, i))\n\n    result.sort()\n    result.reverse()\n    return [number for sum, i in result]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.90993452598662,
      "candidate": "if nums:\n        return sorted(nums, key=lambda x: sum(x))\n    else:\n        return []"
    },
    {
      "rank": 21,
      "score": 9.90743171680052,
      "candidate": "if not nums:\n        return []\n\n    # sort digits in ascending order\n    sorted_nums = sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n\n    # sort digits in ascending order, based on index of original list\n    sorted_nums.sort(key=lambda x: x.index)\n\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.904003847650836,
      "candidate": "if not nums:\n        return []\n\n    def sort_sum_of_digits(nums):\n        \"\"\"\n        Returns a list of integers sorted according to their sum of digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: sum([int(c) for c in str(x)]))\n\n    return sort_sum_of_digits(nums)\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(order_by_points(nums))\n\n    nums = [1, 11, -1, -11, -12]\n    print(order_by_points(nums))"
    },
    {
      "rank": 23,
      "score": 9.880405562584757,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=True)\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))"
    },
    {
      "rank": 24,
      "score": 9.877406986308994,
      "candidate": "if not nums:\n        return []\n\n    nums.sort(key=sum_digits, reverse=True)\n    return nums\n\n\ndef sum_digits(x):\n    \"\"\"\n    Given an integer, return its sum of its digits.\n    For example:\n    >>> sum_digits(1)\n    1\n    >>> sum_digits(11)\n    11\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(-1)\n    -1\n    >>> sum_digits(99)\n    99\n    >>> sum_digits(1234)\n    1234\n    \"\"\"\n    return sum([int(digit) for digit in str(x)])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.876547484808391,
      "candidate": "if not nums:\n        return []\n\n    def get_digits(n):\n        \"\"\"\n        Return a list of digits for given integer.\n        \"\"\"\n        digits = []\n        while n > 0:\n            digits.append(n % 10)\n            n //= 10\n        return digits[::-1]\n\n    def get_sum_digits(nums):\n        \"\"\"\n        Return sum of digits for given list of integers.\n        \"\"\"\n        return sum(get_digits(n) for n in nums)\n\n    def sort_by_digits(nums):\n        \"\"\"\n        Sort the given list of integers\n        in ascending order according to their sum of digits.\n        \"\"\"\n        return sorted(nums, key=get_sum_digits, reverse=True)\n\n    return sort_by_digits(nums)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.873222925901002,
      "candidate": "if not nums:\n        return []\n    sorted_nums = sorted(nums)\n    sorted_nums = [n for n in sorted_nums if n < 0]\n    sorted_nums = [n for n in sorted_nums if n >= 0]\n    return sorted_nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.84211626502931,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11], \"Example\"\n    assert order_by_points([]) == [], \"Empty list\"\n    assert order_by_points([-1, -11, 1, -12, 11]) == [-1, -11, -12, -1, 1, 11], \"Order by index\""
    },
    {
      "rank": 28,
      "score": 9.809050801036195,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\ndef test():\n    \"\"\"\n    Test case.\n    \"\"\"\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n    assert order_by_points([1, 2, 1, 3, 4]) == [1, 1, 2, 3, 4]\n    assert order_by_points([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 29,
      "score": 9.769462113011201,
      "candidate": "return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n\n\ndef main():\n    \"\"\"\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    >>> order_by_points([-1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11]\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import sys\n    sys.exit(main())"
    },
    {
      "rank": 30,
      "score": 9.753300288985947,
      "candidate": "if not nums:\n        return []\n\n    # Sort the list in place using bubble sort.\n    # It is not necessary to keep the original order.\n    for _ in range(len(nums)):\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i + 1], nums[i] = nums[i], nums[i + 1]\n\n    # Add the elements with the same sum of digits to the end of the list.\n    # This way the list is sorted in ascending order by sum of digits.\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            break\n        while nums[i] < 0:\n            nums[i] += 10\n            i += 1\n    return nums[:i]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.7355009006119,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=True)\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert order_by_points([-1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11], \"Example\"\n    assert order_by_points([]) == [], \"Empty list\""
    },
    {
      "rank": 32,
      "score": 9.70486387455817,
      "candidate": "return sorted(nums, key=sum_digit)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.655920815478718,
      "candidate": "return sorted(nums, key=sum_digit_sum)\n\n\n# TESTS\ntests = [\n    ([1, 11, -1, -11, -12], [-1, -11, 1, -12, 11]),\n    ([1, 11, -1, -11, -12], [11, -1, -11, 1, -12]),\n    ([0], [0]),\n]\n\nfor nums, expected in tests:\n    result = order_by_points(nums)\n    print(f'{nums} -> {result}')\n    assert result == expected"
    },
    {
      "rank": 34,
      "score": 9.627710129036304,
      "candidate": "if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num - result[-1] < 0:\n            result.append(num)\n        else:\n            result.append(num - result[-1])\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.54640266065753,
      "candidate": "if not nums:\n        return []\n\n    sum_list = sorted(sum(int(digit) for digit in str(num)) for num in nums)\n    return [num for num, sum in zip(nums, sum_list) if sum == sum_list[0]]\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_2([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    sum_list = sorted(sum(int(digit) for digit in str(num)) for num in nums)\n    return [num for num, sum in zip(nums, sum_list) if sum == sum_list[0]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.455443719951644,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.42095548245253,
      "candidate": "if not nums:\n        return []\n    nums = sorted(nums)\n    if len(nums) == 1:\n        return nums\n    res = []\n    for i in range(len(nums)):\n        dig = sum(map(int, str(nums[i])))\n        for j in range(i):\n            if dig == sum(map(int, str(nums[j]))):\n                res.insert(j, nums[i])\n                break\n    return res\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) >= 2:\n        n = int(sys.argv[1])\n    else:\n        n = 10\n    for _ in range(n):\n        print(order_by_points(range(n)))"
    },
    {
      "rank": 38,
      "score": 9.292783688669656,
      "candidate": "if not nums:\n        return []\n    digits = map(sum, map(int, nums))\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.27715353630128,
      "candidate": "if not nums:\n        return []\n\n    sorted_nums = sorted(nums)\n    return [sorted_nums[i] for i in range(len(sorted_nums)) if sorted_nums[i]!= -1]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.196535249209292,
      "candidate": "# sort the list\n    sorted_nums = sorted(nums)\n    # sort the list based on sum of digits\n    sorted_nums = sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n\n    return sorted_nums\n\nif __name__ == '__main__':\n    print order_by_points([1, 11, -1, -11, -12])\n    print order_by_points([])"
    },
    {
      "rank": 41,
      "score": 9.10771382695755,
      "candidate": "if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    sums = [sum(digits) for digits in groupby(nums)]\n    sorted_sums = sorted(sums, key=sums.__getitem__, reverse=True)\n    return [nums[i] for i, sum in enumerate(sorted_sums) if sum == min(sums)]"
    },
    {
      "rank": 42,
      "score": 9.090419802360152,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\ndef test():\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n    assert order_by_points([1, 11, 2, -1, -11, -12]) == [-1, -11, 1, -12, 11, 2]\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 43,
      "score": 9.084116984135814,
      "candidate": "if not nums:\n        return []\n    sums = [sum(map(int, str(n))) for n in nums]\n    return sorted(nums, key=lambda x: sums.index(sum(x)))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.065159943235882,
      "candidate": "return sorted(nums, key=sum)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.060016927391498,
      "candidate": "if not nums:\n        return []\n\n    return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))"
    },
    {
      "rank": 46,
      "score": 9.01406525644419,
      "candidate": "if not nums:\n        return []\n\n    sorted_nums = sorted(nums)\n    sum_digits = [sum(digit) for digit in map(int, str(sorted_nums[0]))]\n    return sorted(nums, key=lambda x: sum_digits.index(sum(digit) for digit in map(int, str(x))))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n    # print order_by_points([1, 11, -1, -11, -12])\n    # print order_by_points([])"
    },
    {
      "rank": 47,
      "score": 8.925904507323205,
      "candidate": "if not nums:\n        return []\n\n    sums = [sum(digit_list) for digit_list in zip(*[iter(nums)] * 3)]\n    return sorted(nums, key=lambda x: sums.index(sum(digit_list)) if x else -1)\n\n\nif __name__ == '__main__':\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []"
    },
    {
      "rank": 48,
      "score": 8.888435779456389,
      "candidate": "if not nums:\n        return []\n\n    nums.sort()\n    return [nums[i] for i in range(len(nums)) if nums[i] > 0]"
    },
    {
      "rank": 49,
      "score": 8.865928261559095,
      "candidate": "sorted_nums = sorted(nums, key=lambda x: sum([int(y) for y in str(x)]))\n    return sorted_nums\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.835582094473247,
      "candidate": "if not nums:\n        return []\n    digits = [int(x) for x in \"\".join(map(str, nums))]\n    return sorted(nums, key=digits.__getitem__)"
    },
    {
      "rank": 51,
      "score": 8.785705289850007,
      "candidate": "result = []\n    for num in nums:\n        sum_digits = 0\n        for i in range(len(str(num))):\n            sum_digits += num % 10\n            num //= 10\n        result.append((num, sum_digits))\n    result = sorted(result, key=lambda num: num[1], reverse=True)\n    return result\n\n\ndef main():\n    \"\"\"\n    Command line interface.\n    \"\"\"\n    if len(sys.argv) < 2:\n        print(\"Usage: {} <list of integers>\".format(sys.argv[0]))\n        return\n    nums = [int(num) for num in sys.argv[1:]]\n    print(\"Sorted list:\", order_by_points(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.766767030688666,
      "candidate": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.754600408042517,
      "candidate": "def compare(a, b):\n        return cmp(sum(map(int, str(a))), sum(map(int, str(b))))\n    return sorted(nums, cmp=compare)\n\nif __name__ == '__main__':\n    nums = [1, 11, -1, -11, -12]\n    print order_by_points(nums)\n    nums = []\n    print order_by_points(nums)"
    },
    {
      "rank": 54,
      "score": 8.70134848575761,
      "candidate": "if not nums:\n        return []\n\n    sum_of_digits = sum(map(int, str(n)))\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n\n    return sorted_nums"
    },
    {
      "rank": 55,
      "score": 8.67231966275055,
      "candidate": "sorted_nums = sorted(nums)\n    sorted_nums = [n for n in sorted_nums if n > 0]\n    return sorted_nums"
    },
    {
      "rank": 56,
      "score": 8.59633157496445,
      "candidate": "if not nums:\n        return []\n\n    sorted_nums = sorted(nums)\n    return [sorted_nums[i] for i in range(len(nums)) if sorted_nums[i]!= 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.594431724479378,
      "candidate": "if not nums:\n        return []\n\n    sum_of_digits = sum(map(int, str(sum(nums))))\n    return sorted(nums, key=lambda x: sum_of_digits - x)"
    },
    {
      "rank": 58,
      "score": 8.583575085633942,
      "candidate": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n\ndef print_list(nums):\n    \"\"\"\n    Print the given list of integers in ascending order\n    according to the sum of their digits.\n    For example:\n    >>> print_list([1, 11, -1, -11, -12])\n    1\n    -11\n    -12\n    11\n    -1\n    \"\"\"\n    for i in range(len(nums)):\n        print nums[i]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.57642832413446,
      "candidate": "return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))"
    },
    {
      "rank": 60,
      "score": 8.516419122544232,
      "candidate": "if not nums:\n        return []\n    sum_digits = sum(map(int, str(sum(nums))))\n    return sorted(nums, key=lambda x: sum_digits - x)"
    },
    {
      "rank": 61,
      "score": 8.491031932122588,
      "candidate": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))"
    },
    {
      "rank": 62,
      "score": 8.481004213104477,
      "candidate": "return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))"
    },
    {
      "rank": 63,
      "score": 8.438775610054513,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))"
    },
    {
      "rank": 64,
      "score": 8.429397508018265,
      "candidate": "if not nums:\n        return []\n    sums = [sum(x) for x in nums]\n    sorted_sums = sorted(sums)\n    sorted_nums = [nums[i] for i in sorted_sums]\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))"
    },
    {
      "rank": 65,
      "score": 8.395872165841384,
      "candidate": "if len(nums) == 0:\n        return []\n    sorted_nums = []\n    for num in nums:\n        sorted_nums.append((num, nums.index(num)))\n    sorted_nums = sorted(sorted_nums)\n    return [num[1] for num in sorted_nums]\n\nif __name__ == \"__main__\":\n    nums = [1, 11, -1, -11, -12]\n    print(order_by_points(nums))\n    nums = [1, 1, 1]\n    print(order_by_points(nums))"
    },
    {
      "rank": 66,
      "score": 8.36646767424564,
      "candidate": "if not nums:\n        return []\n    nums = sorted(nums)\n    sum_digits = sum(map(int, map(str, nums)))\n    return [nums[i] for i in range(len(nums)) if nums[i] == sum_digits]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.346100027060643,
      "candidate": "if not nums:\n        return []\n    sorted_nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    return [n for n in sorted_nums]"
    },
    {
      "rank": 68,
      "score": 8.250976160641335,
      "candidate": "if not nums:\n        return []\n    # sort numbers by their sum of digits\n    nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    # sort numbers by their index in original list\n    nums = sorted(nums, key=lambda x: x.index)\n    return nums"
    },
    {
      "rank": 69,
      "score": 8.24980901346321,
      "candidate": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\nif __name__ == '__main__':\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))"
    },
    {
      "rank": 70,
      "score": 8.247265202351764,
      "candidate": "if not nums:\n        return []\n    res = []\n    for i in range(len(nums)):\n        dig = sum(map(int, str(nums[i])))\n        res.append((dig, i))\n    res.sort(key=lambda tup: tup[0])\n    return [nums[i] for i, _ in res]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))"
    },
    {
      "rank": 71,
      "score": 8.243191264549424,
      "candidate": "if not nums:\n        return []\n    nums = sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n    return nums"
    },
    {
      "rank": 72,
      "score": 8.215803700143868,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=True)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.192176194678547,
      "candidate": "if not nums:\n        return []\n\n    sum_of_digits = sum(map(int, map(str, nums)))\n    nums.sort(key=lambda x: (sum_of_digits, x))\n    return nums"
    },
    {
      "rank": 74,
      "score": 8.160137204315943,
      "candidate": "if not nums:\n        return []\n\n    result = sorted(nums, key=lambda x: sum([int(c) for c in str(x)]))\n\n    return result"
    },
    {
      "rank": 75,
      "score": 8.019055373903987,
      "candidate": "if len(nums) == 0:\n        return []\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\ndef test():\n    \"\"\"\n    Run tests.\n    \"\"\"\n    assert order_by_points([0, 1, -1, -2, -3]) == [-1, -2, -3, 1, 2]\n    assert order_by_points([1, 2, 3]) == [1, 2, 3]\n    assert order_by_points([]) == []\n    assert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert order_by_points([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\n    assert order_by_points([1, -1, 2, -2, 3, -3]) == [-3, -2, -1, 2, 3, 1]\n    assert order_by_points([-1, -2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2, -1]\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 76,
      "score": 8.000205854282967,
      "candidate": "return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))"
    },
    {
      "rank": 77,
      "score": 7.961027141927078,
      "candidate": "if not nums:\n        return []\n    sorted_nums = sorted(nums, key=lambda num: nums[num])\n    return [i for i in range(len(sorted_nums)) if sorted_nums[i] == sorted_nums[i + 1]]\n\n\nif __name__ == '__main__':\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n    assert order_by_points([-1, -2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2, -1]"
    },
    {
      "rank": 78,
      "score": 7.942037662330563,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\nif __name__ == '__main__':\n    nums = [1, 11, -1, -11, -12]\n    print(order_by_points(nums))"
    },
    {
      "rank": 79,
      "score": 7.931690111456615,
      "candidate": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 7.846050206234793,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=True)"
    },
    {
      "rank": 81,
      "score": 7.823465208490125,
      "candidate": "nums = sorted(nums)\n    if not nums:\n        return []\n\n    res = []\n    for num in nums:\n        digits = [d % 10 for d in num]\n        digits.sort()\n        res.append(digits)\n\n    return res"
    },
    {
      "rank": 82,
      "score": 7.6408667416881695,
      "candidate": "if len(nums) == 0:\n        return []\n    # Get sum of digits in all numbers\n    sum_of_digits = sum(map(int, str(sum(nums))))\n    # Sort list of numbers\n    sorted_nums = sorted(nums, key=lambda x: x + sum_of_digits)\n    return sorted_nums"
    },
    {
      "rank": 83,
      "score": 7.60966550031207,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=True)\n\n\ndef main():\n    \"\"\"\n    Main program function\n    \"\"\"\n    nums = list(map(int, input().split()))\n\n    print(order_by_points(nums))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "if not nums:\n        return []\n    sums = [sum(map(int, str(n))) for n in nums]\n    return sorted(nums, key=lambda n: sum(sums) if n in sums else n)\n\n\ndef test_order_by_points():\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n\n\nif __name__ == \"__main__\":\n    test_order_by_points()"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "sums = [sum(map(int, str(i))) for i in nums]\n    sorted_nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    return [i for i in sorted_nums if i in sums]\n\n\ndef check_for_duplicates(nums):\n    \"\"\"\n    Check if the given list contains any duplicates.\n    If yes, print the index of the first duplicate.\n    \"\"\"\n    dups = [i for i in range(len(nums)) if nums[i] == nums[i + 1]]\n    if len(dups) == 1:\n        print(\"There is a duplicate at index {}\".format(dups[0]))\n    return\n\n\ndef check_for_duplicates_in_sorted_list(nums):\n    \"\"\"\n    Check if the given list contains any duplicates.\n    If yes, print the index of the first duplicate.\n    \"\"\"\n    sorted_nums = sorted(nums)\n    dups = [i for i in range(len(sorted_nums)) if sorted_nums[i] == sorted_nums[i + 1]]\n    if len(dups) == 1:\n        print(\"There is a duplicate at index {}\".format(dups[0]))\n    return\n\n\ndef main():\n    \"\"\"\n    Simple tests.\n    \"\"\"\n    print(\"Testing order_by_points()\")\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\n\n    print(\"Testing check_for_duplicates()\")\n    assert check_for_duplicates([1, 11, -1, -11, -12]) == []\n    assert check_for_duplicates([1, 11, -1, -11, -12, -12, -12, -12]) == [0]\n    assert check_for_duplicates([1, 11, -1, -11, -12, -12, -12, -12, -12]) == [0, 1]\n    assert check"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "if not nums:\n        return []\n\n    # sort the list based on the sum of digits\n    sorted_nums = sorted(nums, key=sum)\n    # return the sorted list\n    return sorted_nums\n\n\ndef main():\n    \"\"\"\n    Simple tests to check the result of the function\n    \"\"\"\n    print(\"Result: {}\".format(order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    print(\"Result: {}\".format(order_by_points([])))\n    print(\"Result: {}\".format(order_by_points([-1, -2, -3, -4, -5, -6, -7, -8, -9])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\ndef check_if_possible(nums, target):\n    \"\"\"\n    Write a function to check if the given target is\n    present in the given list of integers.\n\n    For example:\n    >>> check_if_possible([1, 2, 3, 4, 5], 4)\n    True\n    >>> check_if_possible([1, 2, 3, 4, 5], 6)\n    False\n    >>> check_if_possible([1, 2, 3, 4, 5], 0)\n    True\n    >>> check_if_possible([1, 2, 3, 4, 5], -1)\n    True\n    \"\"\"\n    return sum(map(int, str(target))) in nums\n\n\ndef main():\n    \"\"\"\n    For each of the test cases, write a function named\n    test_case_<test case number> that takes as input\n    a list of integers and prints a list of integers\n    in the same order as the input list but with\n    the given number in the last place.\n    \"\"\"\n    test_cases = [\n        [\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n        ],\n        [\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n        ],\n        [\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4, 5],\n            [1, 2, 3, 4,"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "nums = sorted(nums)\n    if not nums:\n        return nums\n    result = []\n    for num in nums:\n        if num < 0:\n            result.append(num)\n        else:\n            digits = sum([int(x) for x in str(num)])\n            for i in range(len(result)):\n                if digits > result[i]:\n                    result.insert(i, num)\n                    break\n            else:\n                result.append(num)\n    return result\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11], \"1\"\n    assert order_by_points([]) == [], \"Empty list\"\n    assert order_by_points([-1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11], \"Sorted list\"\n    assert order_by_points([1, 11, 2, 3, 4]) == [1, 2, 3, 4, 11], \"Reverse order\"\n    assert order_by_points([-1, -11, 1, -12, 11, -13]) == [-1, -11, 1, -12, 11, -13], \"Reverse order\"\n    assert order_by_points([-1, -11, 1, -12, 11, -13, -14]) == [-1, -11, 1, -12, 11, -13, -14], \"Reverse order\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "nums.sort()\n    return nums\n\n\nif __name__ == \"__main__\":\n    nums = [1, 11, -1, -11, -12]\n    print(order_by_points(nums))\n    nums = [1, 1, 2, 3, 3]\n    print(order_by_points(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211,"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "if len(nums) == 0:\n        return []\n\n    def compare(nums):\n        return sum(map(int, [nums[i] for i in range(len(nums))]))\n\n    sorted_nums = sorted(nums, key=lambda x: compare(x))\n    return [nums[i] for i in range(len(nums))]\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_2([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    def compare(nums):\n        return sum(map(int, [nums[i] for i in range(len(nums))]))\n\n    sorted_nums = sorted(nums, key=lambda x: compare(x))\n    return [nums[i] for i in range(len(nums))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert order_by_points([-1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11], \"Example\"\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11], \"Descending\"\n    assert order_by_points([-1, -11, 1, -12, 11, -1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11, -1, -11, 1, -12, 11], \"Descending in this order\"\n    assert order_by_points([-1, -11, -12, -1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11, -12, -1, -11], \"Descending in this order\"\n    assert order_by_points([1, 11, -1, -11, -12, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11, -12, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11], \"Descending in this order\"\n    assert order_by_points([-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "if not nums:\n        return []\n    sums = map(sum, nums)\n    sums.sort(key=lambda x: x[::-1])\n    return map(lambda x: x[::-1], sums)\n\n\ndef main():\n    \"\"\"\n    Sample input:\n        [1, 11, -1, -11, -12]\n    Sample output:\n        [-1, -11, 1, -12, 11]\n    \"\"\"\n    print(order_by_points([1, 11, -1, -11, -12]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n# Note: this problem can be solved using a heap.\n# The main trick is to sort the elements in the list\n# in the same order as they are in the heap.\n# We can achieve this by first sorting the list,\n# then using pop() to get the elements in the order\n# they appear in the list.\n# Then, we can use the same trick as in the previous\n# problem.\n#\n# time complexity: O(n log n)\n# space complexity: O(n)\n#\n# note: I have solved this problem using a\n# heap with O(n log n) time complexity and O(n) space complexity\n#\n# O(n log n) time complexity\n# O(n) space complexity\ndef order_by_points_heap(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_heap([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_heap([]) == []\n    \"\"\"\n    heap = []\n    for num in nums:\n        heap.append((num, num))\n    heapq.heapify(heap)\n    while len(heap) > 1:\n        heap.pop(0)\n        heap.append((heap[0][1], heap[0][1]))\n    return [heap[0][0] for heap in heapq.nlargest(len(nums), heap)]\n\n# Note: the following solution is also possible.\n# This one has the same time complexity and space complexity\n# but is much more simple.\n#\n# time complexity: O(n log n)\n# space complexity: O(n)\n#\n# note: I have solved this problem using a\n# heap with O(n log n) time complexity and O(n) space complexity"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "if len(nums) == 0:\n        return []\n\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num < 0:\n            result.append(-num)\n        else:\n            result.append(num)\n\n    result.sort()\n    return result\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_2([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num > 0:\n            result.append(num)\n        else:\n            result.append(-num)\n\n    result.sort()\n    return result"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "if not nums:\n        return nums\n\n    # Sort the list based on the sum of its digits\n    sorted_nums = sorted(nums, key=lambda num: sum([int(digit) for digit in str(num)]) % 10)\n    return sorted_nums\n\ndef main():\n    \"\"\"\n    Tests:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points([]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n# BEGIN KAWIGIEDIT TESTING\n\nfrom annotator_test_support import *\nfrom java.io import *\n\nclass Test (TestCase):\n\n    def test_0 (self):\n        \"\"\"\n        Try simple test case.\n        \"\"\"\n        self.assertEqual(order_by_points([1, 11, -1, -11, -12]), [-1, -11, 1, -12, 11])\n\n    def test_1 (self):\n        \"\"\"\n        Test that the function sorts correctly.\n        \"\"\"\n        self.assertEqual(order_by_points([-1, -11, 1, -12, 11]), [-1, -11, 1, -12, 11])\n\n# END KAWIGIEDIT TESTING\n\nif __name__ == \"__main__\":\n    run_tests(Test)"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "sums = map(sum, nums)\n    sorted_sums = sorted(sums, reverse=True)\n    return [i for i in nums if sum(map(int, str(i))) == sorted_sums[0]]\n\ndef order_by_points_recursive(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_recursive([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_recursive([]) == []\n    \"\"\"\n    sums = map(sum, nums)\n    sorted_sums = sorted(sums, reverse=True)\n    if not nums:\n        return []\n    left, right = 0, len(nums) - 1\n    while left < right:\n        if sums[left] == sums[right]:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        else:\n            if sums[left] > sums[right]:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            else:\n                nums[right], nums[left] = nums[left], nums[right]\n                right -= 1\n    return nums\n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(order_by_points_recursive([1, 11, -1, -11, -12]))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if not nums:\n        return []\n\n    sums = [sum(digit) for digit in nums]\n    sums.sort()\n    sorted_nums = [nums[idx] for idx, sum_ in enumerate(sums) if sum_ == sums[0]]\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if len(nums) == 0:\n        return []\n    res = sorted(nums, key=lambda x: sum(digits(x)))\n    return [x for x in res if x!= 0]\n\n\nif __name__ == '__main__':\n    assert order_by_points([]) == []\n    assert order_by_points([1]) == [1]\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([-1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11]"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n\n\ndef main():\n    \"\"\"\n    Sample Input:\n    1\n    11\n    -1\n    -11\n    -12\n    Sample Output:\n    -12\n    -11\n    1\n    11\n    -1\n    \"\"\"\n    nums = [1, 11, -1, -11, -12]\n    print(order_by_points(nums))\n\n\nif __name__ == '__main__':\n    main()"
    }
  ]
}