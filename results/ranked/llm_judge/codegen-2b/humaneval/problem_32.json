{
  "timestamp": "2025-09-14T16:22:25.632204",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 32,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        return 0\n    for i in range(n):\n        if xs[i]!= 0:\n            return xs[i]\n    return 0"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('n must be even')\n    # find a zero\n    for i in range(0, n):\n        if xs[i]!= 0:\n            break\n    else:\n        # xs[i] = 0\n        return None\n    # find a zero with largest non zero coefficient\n    for j in range(i + 1, n):\n        if xs[j]!= 0:\n            break\n    else:\n        # xs[j] = 0\n        return None\n    # xs[i] = 0\n    # xs[j] = 0\n    return xs[i] / xs[j]\n\n\ndef main():\n    print(poly([1, 2, 3], 1))\n    print(poly([1, 2, 3, 4, 5], 1))\n    print(poly([-1, 2, 3, 4, 5, 6, 7, 8, 9], 1))\n    print(find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(find_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n == 0:\n        raise ZeroDivisionError\n    if n % 2 == 1:\n        raise ValueError\n    if n == 1:\n        return xs[0]\n    x = xs[0]\n    for i in range(1, n):\n        x = poly(xs, x)\n        if x == 0:\n            break\n    return x\n\n\ndef solve_poly(coeffs: list, x0: float):\n    \"\"\"\n    Solve a polynomial with coefficients coeffs.\n    x0 is a starting point.\n    return x0 + coeffs[0] * x0^2 + coeffs[1] * x0^3 +...\n    \"\"\"\n    n = len(coeffs)\n    if n == 0:\n        raise ZeroDivisionError\n    if n == 1:\n        return coeffs[0]\n    x = x0\n    for i in range(1, n):\n        x = poly(coeffs, x)\n        if x == 0:\n            break\n    return x"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# find first non zero point\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            break\n\n    # find all non zero points\n    for j in range(i + 1, len(xs)):\n        if xs[j]!= 0:\n            return poly(xs[:j], xs[j])\n    return poly(xs[:i], xs[i])"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('Number of coefficients must be even')\n    if n == 0:\n        return 0\n    if xs[0] == 0:\n        return xs[1] / xs[0]\n    for i in range(1, n):\n        if xs[i]!= 0:\n            break\n    else:\n        i += 1\n    return xs[i] / poly(xs[i:], xs[0] / xs[i])"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        return None\n    if n == 0:\n        return None\n    max_coeff = max([abs(coeff) for coeff in xs])\n    if max_coeff == 0:\n        return None\n    x = poly(xs, 0) / max_coeff\n    if abs(x) > 1:\n        return None\n    return x"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if len(xs) % 2!= 0:\n        return None\n    coeffs = [coeff for coeff in xs if coeff!= 0]\n    if coeffs == []:\n        return None\n    for x in range(1, len(coeffs)):\n        if coeffs[x]!= 0:\n            return x\n    return None\n\n\ndef find_roots(poly: list, tol: float = 1e-5):\n    \"\"\"\n    Finds roots of the given polynomial.\n    >>> poly = [1, 2, 3, 4]\n    >>> find_roots(poly)\n    [-0.5, -0.5, -0.5, -0.5]\n    >>> find_roots([-1, -2, 3, 4])\n    [-0.5, -0.5, 0.0, 1.0]\n    >>> find_roots([-1, -2, 3, 4], tol=1e-8)\n    [-0.5, -0.5, 0.0, 1.0]\n    \"\"\"\n    if len(poly) == 1:\n        return [poly[0]]\n    roots = []\n    for i in range(len(poly) - 1):\n        if abs(poly[i]) < tol:\n            roots.append(poly[i])\n    for i in range(len(poly) - 2, -1, -1):\n        if abs(poly[i]) < tol:\n            roots.append(poly[i])\n    return roots\n\n\ndef find_roots_all(poly: list, tol: float = 1e-5):\n    \"\"\"\n    Finds roots of the given polynomial.\n    >>> poly = [1, 2, 3, 4]\n    >>> find_roots_all(poly)\n    [-0.5, -0.5, -0.5, -0.5]\n    >>> find_roots_all([-1, -2, 3, 4])\n    [-0.5, -0.5, 0.0, 1.0]\n    >>> find_roots_all([-1, -2, 3, 4], tol=1e-"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "for x in range(1, len(xs)):\n        if xs[x]!= 0:\n            break\n    for i in range(x + 1, len(xs)):\n        if xs[i]!= 0:\n            break\n    for i in range(x - 1, -1, -1):\n        if xs[i]!= 0:\n            break\n    return xs[i]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# TODO: implement a faster method for finding zero.\n    # TODO: implement a faster method for finding the roots.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TODO: implement a faster method for finding the roots of a polynomial.\n    # TOD"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('n must be even for find_zero')\n    if n == 1:\n        return xs[0]\n    # find_zero(xs) is only for polynomial with even number of coefficients and\n    # largest non zero coefficient\n    max_coeff = max([abs(coeff) for coeff in xs])\n    max_coeff_idx = (n + 1) // 2\n    return xs[max_coeff_idx] - (max_coeff - xs[max_coeff_idx]) / max_coeff\n\n\ndef find_roots(xs: list, x: float):\n    \"\"\"\n    find_roots find all roots of a polynomial with coefficients xs\n    at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    roots = []\n    for i in range(len(xs)):\n        roots.append(find_zero(xs[:i]))\n    return roots\n\n\ndef find_roots2(xs: list, x: float):\n    \"\"\"\n    find_roots2 find all roots of a polynomial with coefficients xs\n    at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    roots = []\n    for i in range(len(xs)):\n        roots.append(poly(xs[:i], x))\n    return roots\n\n\nif __name__ == '__main__':\n    print(find_roots([-6, 11, -6, 1]))\n    print(find_roots2([-6, 11, -6, 1]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# find x with abs(poly(x) - 0) < 1e-10\n    p = poly(xs, 0.0)\n    while abs(p) > 1e-10:\n        for i in range(1, len(xs)):\n            p = poly(xs, xs[i])\n            if abs(p) < 1e-10:\n                break\n    if p == 0:\n        return 0\n    return xs[0] + xs[1] * x + xs[1] * x ** 2 + xs[2] * x ** 3 +... + xs[-1] * x ** len(xs)\n\n\ndef find_intersection(xs: list, ys: list):\n    \"\"\"\n    find the intersection of two lines.\n    >>> find_intersection([1, 2, 3], [1, -3, 1])\n    (-1, 0)\n    >>> find_intersection([-1, 0, 1], [1, -3, 1])\n    (0, -1)\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    (-1, 0)\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    (0, -1)\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    (0, -1)\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    (0, -1)\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    (0, -1)\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    (0, -1)\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    (0, -1)\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    (0, -1)\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    (0, -1)\n    >>> find_intersection([1, 2, 3"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n <= 1:\n        return 0\n    if n % 2!= 0:\n        raise ValueError(\"The list must have even number of coefficients\")\n    if xs[0] == 0:\n        return 0\n    for i in range(1, n):\n        if xs[i]!= 0:\n            return xs[i]\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('number of coefficients must be even')\n    coeffs = [xs[i] for i in range(0, n, 2)]\n    for i in range(1, n, 2):\n        coeffs.append(poly(coeffs, xs[i]))\n    while True:\n        x = -(coeffs[0] / coeffs[1])\n        if poly(coeffs, x) == 0:\n            return x\n        coeffs[0] = coeffs[1]\n        coeffs[1] = poly(coeffs, x)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# xs are coefficients of a polynomial\n    # find_zero returns only only zero point, even if there are many.\n    # find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    # a = xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    # a = 1 + 2x + 3x^2 + 4x^3 + 5x^4\n    # b = xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    # a = 1 + x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a = x + x^2 + x^3 + x^4\n    # a"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# find_zero takes list xs with even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    # we are looking for a solution such that\n    # xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n = 0\n    # but the coefficients are not necessarily increasing in value\n    # we are looking for a solution such that poly(x) = 0\n    # if there are no such solution then find_zero returns None\n    # if there are many solutions then find_zero returns the largest one\n    # the list is sorted in increasing order of coefficients\n    # so we can take the largest non zero coefficient and compare to the\n    # coefficient of next highest coefficient\n    if len(xs) % 2!= 0:\n        # there are not even number of coefficients\n        return None\n    # find_zero finds largest non zero coefficient and\n    # returns that as zero point\n    # the largest non zero coefficient is the next highest coefficient\n    # we have to find the next highest coefficient\n    max_coeff = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] > max_coeff:\n            max_coeff = xs[i]\n    # now we have to find the largest non zero coefficient\n    # and compare to the next highest coefficient\n    max_non_zero_coeff = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] > max_non_zero_coeff:\n            max_non_zero_coeff = xs[i]\n    # if the largest non zero coefficient is not the next highest one\n    # then we have found a solution\n    if max_non_zero_coeff!= max_coeff:\n        return max_non_zero_coeff\n    # otherwise we have found no solution\n    return None"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"Number of coefficients must be even\")\n    if n == 0:\n        raise ValueError(\"Polynomial must have at least one coefficient\")\n    max_coeff = poly(xs, xs[0])\n    for i in range(n):\n        if xs[i]!= 0:\n            break\n    else:\n        return xs[0]\n    for j in range(i, n):\n        if xs[j]!= 0:\n            break\n    else:\n        return xs[0]\n    return xs[i]\n\n\ndef find_zero_complex(xs: list):\n    \"\"\"\n    find_zero_complex finds complex roots of a complex polynomial.\n    find_zero_complex returns complex roots only.\n    \"\"\"\n    if not xs:\n        return 0.0j\n    roots = []\n    for i in range(len(xs)):\n        if math.isinf(xs[i]):\n            roots.append(0.0j)\n        elif math.isnan(xs[i]):\n            roots.append(0.0j)\n        elif xs[i] == 0:\n            roots.append(0.0j)\n        else:\n            roots.append(xs[i])\n    return roots\n\n\ndef find_zero_complex_real(xs: list):\n    \"\"\"\n    find_zero_complex_real finds real roots of a complex polynomial.\n    find_zero_complex_real returns real roots only.\n    \"\"\"\n    if not xs:\n        return 0.0\n    roots = []\n    for i in range(len(xs)):\n        if math.isinf(xs[i]):\n            roots.append(0.0)\n        elif math.isnan(xs[i]):\n            roots.append(0.0)\n        elif xs[i] == 0:\n            roots.append(0.0)\n        else:\n            roots.append(xs[i])\n    return roots\n\n\ndef find_zero_real(xs: list):\n    \"\"\" find_zero_real finds real roots"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# find_zero returns only non zero point\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    # find_zero returns only even number of coefficients\n    if (len(xs) % 2) == 0:\n        return xs[i]\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    x = [-2, -1, 0, 0.1, 0.2, 0.3, 1]\n    # y = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    y = [-2, -1, 0, 0.1, 0.2, 0.3, 1]\n    # y = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    # y = [-2, -1, 0, 0.1, 0.2, 0.3, 1]\n    # y = [0.1, 0.2, 0.3, 1]\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1]\n    # x = [1, -1, 0, 0.1, 0.2, 0.3, 1"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n <= 1:\n        return float(\"nan\")\n    # if n is odd, then there is no zero\n    if n % 2 == 1:\n        return float(\"nan\")\n    # if n is even, then there is only one zero\n    if n == 2:\n        return float(xs[0])\n    # otherwise, find first zero\n    for i in range(n):\n        if xs[i]!= 0:\n            break\n    # find x such that poly(x) = 0\n    for i in range(n):\n        if i == i + 1:\n            continue\n        if xs[i]!= 0:\n            continue\n        x = float(i + 1) / n\n        y = poly(xs[:i + 1], x)\n        # if there is no y, then there is no zero\n        if y == 0:\n            return float(\"nan\")\n        # otherwise find the zero\n        for j in range(i + 1):\n            if xs[j]!= 0:\n                continue\n            x = float(j + 1) / n\n            y = poly(xs[:j + 1], x)\n            if y == 0:\n                return float(\"nan\")\n    return x"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if len(xs) % 2 == 0 and all([abs(c) > 0 for c in xs]):\n        return poly(xs, 0)\n    else:\n        return None\n\n\ndef find_zero2(xs: list):\n    \"\"\" find_zero2 returns only the zero point, even if there are many.\n    find_zero2 takes list xs having even number of coefficients and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero2([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero2([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 0 and all([abs(c) > 0 for c in xs]):\n        return poly(xs, 0)\n    else:\n        return None\n\n\ndef find_zero3(xs: list):\n    \"\"\"\n    find_zero3 returns only the zero point, even if there are many.\n    find_zero3 takes list xs having even number of coefficients and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero3([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero3([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 0 and all([abs(c) > 0 for c in xs]):\n        return poly(xs, 0)\n    else:\n        return None\n\n\ndef main():\n    \"\"\"\n    >>> find_zero([1, 2])\n    -0.5\n    >>> find_zero([1, -3, 2, 3, 1])\n    -1.0\n    >>> find_zero([1, -3, 2, 3, 1])\n    -1"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# find_zero is only applicable to list of even number of coefficients\n    # and largest non zero coefficient\n    if len(xs) % 2 == 1 or xs[-1] == 0:\n        return None\n    # find_zero is only applicable to list of even number of coefficients\n    # and largest non zero coefficient\n    xs_copy = list(xs)\n    for i in range(len(xs_copy)):\n        if i % 2 == 1:\n            xs_copy[i] = -xs_copy[i]\n        if xs_copy[i] == 0:\n            del xs_copy[i]\n    if len(xs_copy) == 0:\n        return None\n    # find_zero is only applicable to list of even number of coefficients\n    # and largest non zero coefficient\n    xs_copy.sort()\n    for i in range(len(xs_copy)):\n        if i % 2 == 1:\n            xs_copy[i] = -xs_copy[i]\n    if xs_copy[-1] == 0:\n        del xs_copy[-1]\n    # find_zero is only applicable to list of even number of coefficients\n    # and largest non zero coefficient\n    xs_copy.sort()\n    for i in range(len(xs_copy)):\n        if i % 2 == 1:\n            xs_copy[i] = -xs_copy[i]\n    # find_zero is only applicable to list of even number of coefficients\n    # and largest non zero coefficient\n    xs_copy.sort()\n    # find_zero is only applicable to list of even number of coefficients\n    # and largest non zero coefficient\n    for i in range(len(xs_copy)):\n        if i % 2 == 1:\n            xs_copy[i] = -xs_copy[i]\n    return xs_copy[0]\n\n\ndef find_root(xs: list, x: float, tol: float = 1e-8):\n    \"\"\"\n    find_root finds xs[0] + xs[1] * x + xs[1] * x^2 +... + xs[n] * x^n\n    such that poly(x) = 0."
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def is_zero(x):\n        return abs(x) < 1e-15\n    return [x for x in xs if not is_zero(x)]\n\n\ndef find_zero_from_all(xs: list):\n    \"\"\"\n    find_zero_from_all finds all zero points in xs.\n    find_zero_from_all returns only zero points, even if there are many.\n    Moreover, find_zero_from_all only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero_from_all([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero_from_all([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    >>> round(find_zero_from_all([-1, 1, -1, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    -0.5\n    >>> round(find_zero_from_all([-6, 11, -6, 1, -6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    -0.5\n    >>> round(find_zero_from_all([-1, 1, -1, 1, -1, 1, -1, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    -0.5\n    >>> round(find_zero_from_all([-6, 11, -6, 1, -6, 11, -6, 1, -6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# find the number of coefficients having even number of terms\n    n_even = 0\n    for i in range(len(xs)):\n        if xs[i] % 2 == 0:\n            n_even += 1\n    # find the largest non zero coefficient\n    largest_non_zero_coeff = -1\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            largest_non_zero_coeff = max(largest_non_zero_coeff, xs[i])\n    # find the largest term of polynomial\n    largest_term = -1\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            largest_term = max(largest_term, xs[i])\n    # find all xs such that the polynomial is zero\n    all_zero_xs = []\n    for i in range(n_even, len(xs)):\n        if math.fabs(xs[i]) < 1e-10:\n            all_zero_xs.append(xs[i])\n    # find the zero point\n    zero_point = -1\n    for i in range(n_even):\n        if all_zero_xs[i]!= 0:\n            zero_point = all_zero_xs[i]\n            break\n    # find the x value where the polynomial is zero\n    all_zero_xs = [poly(xs, x) for x in all_zero_xs]\n    for i in range(n_even, len(all_zero_xs)):\n        if all_zero_xs[i]!= 0:\n            all_zero_xs[i] = poly(all_zero_xs, all_zero_xs[i])\n            break\n    # find the zero point\n    zero_point = -1\n    for i in range(n_even):\n        if all_zero_xs[i]!= 0:\n            zero_point = all_zero_xs[i]\n            break\n    return zero_point\n\n\nif __name__ == \"__main__\":\n    print(find_zero([1, 2, 3, 4]))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "assert len(xs) % 2 == 0  # xs are even\n    assert max(xs) > 0  # xs are non-negative\n    n = len(xs)\n    # find first non zero x\n    for i in range(n):\n        if xs[i]!= 0:\n            return xs[i]\n    # find first non zero coeff\n    for i in range(n):\n        if i % 2 == 0:\n            continue  # even coeffs are not considered\n        if xs[i]!= 0:\n            return xs[i]\n    return None\n\n\ndef find_root(xs: list, x: float):\n    \"\"\"\n    Finds a root of the polynomial with coefficients xs at point x.\n    returns a list of roots with the same length as xs.\n    \"\"\"\n    assert len(xs) % 2 == 0  # xs are even\n    assert max(xs) > 0  # xs are non-negative\n    n = len(xs)\n    # find first non zero x\n    for i in range(n):\n        if xs[i]!= 0:\n            return xs[i]\n    # find first non zero coeff\n    for i in range(n):\n        if i % 2 == 0:\n            continue  # even coeffs are not considered\n        if xs[i]!= 0:\n            return xs[i]\n    return None\n\n\ndef find_roots(xs: list):\n    \"\"\"\n    find_roots returns a list of roots with the same length as xs.\n    \"\"\"\n    assert len(xs) % 2 == 0  # xs are even\n    assert max(xs) > 0  # xs are non-negative\n    n = len(xs)\n    # find first non zero x\n    for i in range(n):\n        if xs[i]!= 0:\n            return xs[i]\n    # find first non zero coeff\n    for i in range(n):\n        if i % 2 == 0:\n            continue  # even coeffs are not considered\n        if xs[i]!= 0:\n            return xs[i]\n    return None"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2 == 0:\n        # even number of coefficients\n        for i in range(1, n):\n            if xs[i]!= 0:\n                return poly(xs, xs[i])\n        return poly(xs, xs[n / 2])\n    else:\n        # odd number of coefficients\n        for i in range(1, n):\n            if xs[i]!= 0:\n                return poly(xs, xs[i])\n        return poly(xs, xs[n / 2])"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# xs are coefficients of a polynomial\n    # find_zero finds only one zero point\n    # it can be either a solution or not\n    # find_zero returns only one solution\n    # find_zero takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution\n    if len(xs) & 1:\n        return None\n    else:\n        # find_zero finds x such that poly(x) = 0\n        # find_zero returns only one solution\n        # find_zero takes list xs having even number of coefficients\n        # and largest non zero coefficient as it guarantees\n        # a solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero takes list xs having even number of coefficients\n        # and largest non zero coefficient as it guarantees\n        # a solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution\n        # find_zero returns only one solution"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "xs = sorted(xs)\n    if xs[-1] == 0:\n        return xs[-1]\n    if xs[-1] < 0:\n        return -poly(xs, -1)\n    if xs[-1] == 1:\n        return xs[-1]\n    # find x such that poly(x) = 0\n    for i in range(len(xs) - 1):\n        if xs[i] == 0:\n            continue\n        if xs[i] < 0:\n            return -poly(xs, -1)\n        if xs[i] == 1:\n            return xs[i]\n        if xs[i] > 1:\n            return poly(xs, xs[i])\n    return None\n\n\ndef solve(xs: list, x: float):\n    \"\"\"\n    solve(xs, x) solves a linear system of equations.\n    xs are coefficients of a polynomial.\n    x is a point to evaluate the polynomial.\n    solve returns the value of the polynomial at x.\n    \"\"\"\n    if x < 0:\n        return -poly(xs, -1)\n    if x == 0:\n        return xs[-1]\n    if x == 1:\n        return xs[-1]\n    if x > 1:\n        return poly(xs, x)\n    return None"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "if len(xs) % 2 == 1:\n        return None\n    for i in range(len(xs) - 1, 0, -2):\n        if xs[i]!= 0:\n            return xs[i]\n    return None\n\n\ndef find_all_roots(xs: list):\n    \"\"\" find_all_roots finds all roots of the polynomial with coefficients xs.\n    >>> round(find_all_roots([1, 2, 3, 4]), 2) # x^2 + 1x + 2x^2 + 3x^3 + 4x^4\n    [-0.5, 0.5, 1.5, 2.5]\n    \"\"\"\n    if len(xs) < 2:\n        return None\n    roots = []\n    for i in range(1, len(xs)):\n        roots.append(find_zero(xs[i:]))\n    return roots\n\n\ndef find_all_roots_and_coeffs(xs: list):\n    \"\"\" find_all_roots_and_coeffs finds all roots of the polynomial with coefficients xs.\n    >>> round(find_all_roots_and_coeffs([1, 2, 3, 4]), 2) # x^2 + 1x + 2x^2 + 3x^3 + 4x^4\n    [-0.5, 0.5, 1.5, 2.5]\n    \"\"\"\n    if len(xs) < 2:\n        return None\n    roots = []\n    for i in range(1, len(xs)):\n        roots.append(find_zero(xs[i:]))\n        xs[i] = poly(xs[i:], roots[-1])\n    return roots\n\n\ndef find_all_roots_and_coeffs_with_all_zero_roots(xs: list):\n    \"\"\" find_all_roots_and_coeffs_with_all_zero_roots finds all roots of the polynomial with coefficients xs.\n    >>> round(find_all_roots_and_coeffs_with_all_zero_roots([1, 2, 3, 4]), 2) # x^2 + 1x + 2x^2 + 3x^3"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "for i in range(len(xs) - 1, -1, -1):\n        if xs[i]!= 0:\n            return xs[i]\n    return xs[0]\n\n\ndef find_roots(xs: list):\n    \"\"\"\n    find_roots find all roots of polynomial\n    >>> find_roots([1, 2, 3, 4])\n    [-0.5, 0.5, 1.5]\n    \"\"\"\n    n = len(xs)\n    roots = []\n    for i in range(n):\n        if xs[i]!= 0:\n            roots.append(find_zero(xs[i:]))\n    return roots"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2 == 1:\n        return -1\n    else:\n        return poly(xs, -1)\n\n\ndef find_root(xs: list, x: float):\n    \"\"\"\n    Finds a root of polynomial with coefficients xs at point x.\n    find_root returns the value of x at which polynomial is a root.\n    >>> round(find_root([1, 2, 3], 3), 2)\n    1.0\n    >>> round(find_root([-6, 11, -6, 1], -1), 2)\n    -6.0\n    \"\"\"\n    return poly(xs, x) / poly(xs, -1)\n\n\ndef find_roots(xs: list):\n    \"\"\"\n    Finds roots of polynomial with coefficients xs.\n    find_roots returns a list of roots.\n    >>> find_roots([1, 2, 3])\n    [-1.0, 1.0]\n    >>> find_roots([-6, 11, -6, 1])\n    [-6.0, 1.0]\n    \"\"\"\n    return poly(xs, 0) / poly(xs, -1)\n\n\ndef find_roots_of_polynomial(xs: list):\n    \"\"\"\n    Finds roots of polynomial with coefficients xs.\n    find_roots_of_polynomial returns a list of roots.\n    >>> find_roots_of_polynomial([1, 2, 3])\n    [-1.0, 1.0]\n    >>> find_roots_of_polynomial([-6, 11, -6, 1])\n    [-6.0, 1.0]\n    \"\"\"\n    roots = []\n    for x in find_roots(xs):\n        roots.append(find_root(xs, x))\n    return roots"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n < 2:\n        return None\n    if n % 2 == 0:\n        return None\n    for i in range(0, n - 1, 2):\n        if xs[i] == 0:\n            continue\n        if xs[i + 1] == 0:\n            return xs[i] / xs[i + 1]\n    return None\n\n\ndef find_max(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_max find the largest non zero coefficient.\n    \"\"\"\n    return max([abs(x) for x in xs if x!= 0])\n\n\ndef solve(xs: list, x: float):\n    \"\"\"\n    Solves a system of linear equations:\n    x = coeffs[0] + coeffs[1] * x + coeffs[1] * x^2 +... coeffs[n] * x^n\n    returns a list of solutions,\n    x = coeffs[0] + coeffs[1] * x + coeffs[1] * x^2 +... coeffs[n] * x^n\n    \"\"\"\n    return [poly(xs, x) for x in range(1, int(math.ceil(math.sqrt(len(xs)))) + 1)]\n\n\ndef find_max_solution(xs: list):\n    \"\"\"\n    find_max_solution find the maximum value of a system of linear equations.\n    \"\"\"\n    max_solution = find_max(xs)\n    for i in range(1, int(math.ceil(math.sqrt(len(xs)))) + 1):\n        solution = solve(xs, i)\n        if len(solution) == 1:\n            return solution[0]\n        if solution[0] > max_solution:\n            max_solution = solution[0]\n    return max_solution\n\n\ndef main():\n    # for x in range(1, 10):\n    #     print(round(find_zero([1, 2, 3, 4, 5]), 2))\n    # print(round(find_max_solution([1, 2, 3, 4,"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "n = len(xs)\n    # check that n is even\n    if n % 2!= 0:\n        raise ValueError(\"n must be even\")\n    # check that xs have non zero coefficients\n    if any(math.fabs(x) < 1e-6 for x in xs):\n        raise ValueError(\"x must have non zero coeffs\")\n    # find xs with max non zero coeff\n    max_coeff = -1\n    for i in range(n - 1, -1, -1):\n        if math.fabs(xs[i]) > 1e-6:\n            max_coeff = i\n            break\n    # find the smallest x such that poly(x) = 0\n    for i in range(n - 1, -1, -1):\n        if math.fabs(xs[i]) < 1e-6:\n            continue\n        x = xs[i] / xs[max_coeff]\n        if math.fabs(poly(xs, x)) < 1e-6:\n            return x\n    raise ValueError(\"find_zero failed\")"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "if not xs:\n        return float('nan')\n    if len(xs) % 2 == 1:\n        return float('nan')\n    if len(xs) == 1:\n        return xs[0]\n    i = len(xs) // 2\n    while i > 1:\n        if xs[i] == 0:\n            i -= 1\n        else:\n            break\n    if xs[i] == 0:\n        return float('nan')\n    else:\n        return xs[i]\n\n\ndef find_roots(xs: list):\n    \"\"\" find_roots find roots of polynomial with coefficients xs.\n    find_roots returns a list of all roots.\n    >>> find_roots([1, 2, 3])\n    [0.0, 0.5, 1.0]\n    >>> find_roots([-4, -1, 2, 1])\n    [-1.0, -0.5, 0.0, 0.5]\n    \"\"\"\n    if not xs:\n        return []\n    if len(xs) == 1:\n        return [xs[0]]\n    if len(xs) == 2:\n        return [xs[0], xs[1]]\n    if len(xs) == 3:\n        return [\n            poly(xs, x) for x in [0, 0.5, 1.0]\n            if poly(xs, x)!= 0.0\n        ]\n    if len(xs) % 2 == 1:\n        return []\n    return [\n        poly(xs, x) for x in [0, 0.5, 1.0]\n        if poly(xs, x)!= 0.0\n    ]\n\n\ndef find_roots_poly(xs: list):\n    \"\"\" find_roots_poly find roots of polynomial with coefficients xs.\n    find_roots_poly returns a list of all roots.\n    >>> find_roots_poly([1, 2, 3])\n    [0.0, 0.5, 1.0]\n    >>> find_roots_poly([-4, -1, 2, 1])\n    [-1.0, -0.5, 0.0, 0.5]\n    \"\"\""
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "# find_zero returns only points with even number of coefficients and largest\n    # non zero coefficient\n    i = 0\n    while i < len(xs) - 1:\n        if xs[i] * xs[i + 1] < 0:\n            break\n        i += 1\n    if xs[i] * xs[i + 1] < 0:\n        return xs[i]\n    else:\n        return poly(xs, xs[i])\n\n\ndef find_min_max(xs: list):\n    \"\"\" find_min_max finds the minimum and maximum xs[i]\n    >>> find_min_max([0, 1, 2, 3, 4])\n    (0, 4)\n    \"\"\"\n    return (min(xs), max(xs))\n\n\ndef find_min_max_of_all(xs: list):\n    \"\"\" find_min_max_of_all finds the minimum and maximum xs[i]\n    >>> find_min_max_of_all([0, 1, 2, 3, 4])\n    (0, 4)\n    \"\"\"\n    return (min(xs), max(xs))\n\n\ndef find_min_max_of_all_with_indices(xs: list):\n    \"\"\" find_min_max_of_all_with_indices finds the minimum and maximum xs[i]\n    >>> find_min_max_of_all_with_indices([0, 1, 2, 3, 4])\n    (0, 4)\n    \"\"\"\n    return (min(xs), max(xs))\n\n\ndef find_min_max_of_all_with_indices_with_indices(xs: list):\n    \"\"\" find_min_max_of_all_with_indices finds the minimum and maximum xs[i]\n    >>> find_min_max_of_all_with_indices_with_indices([0, 1, 2, 3, 4])\n    (0, 4)\n    \"\"\"\n    return (min(xs), max(xs))\n\n\ndef find_min_max_of_all_with_indices_with_indices_with_indices(xs: list):\n    \"\"\" find_min_max"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if xs[0] == 0:\n        return None\n    x = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i]!= 0:\n            x = xs[i]\n            break\n    while True:\n        x = (x - xs[0]) / (xs[1] - xs[0])\n        if poly(xs, x)!= 0:\n            break\n    return x"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "for i in range(len(xs) // 2):\n        if xs[i]!= 0:\n            return xs[i]\n    else:\n        return xs[0]\n\n\ndef find_zero_coeffs(xs: list, x: float):\n    \"\"\" find_zero_coeffs finds xs which are coefficients of a polynomial\n    which has zero at point x.\n    >>> find_zero_coeffs([-1, 0, 1], 0)\n    (-1, 0)\n    \"\"\"\n    for i, coeff in enumerate(xs):\n        if math.fabs(coeff) > 1e-4:\n            continue\n        else:\n            return coeff, i\n    else:\n        return None\n\n\ndef find_zero_coeffs2(xs: list, x: float):\n    \"\"\" find_zero_coeffs2 finds xs which are coefficients of a polynomial\n    which has zero at point x.\n    >>> find_zero_coeffs2([-1, 0, 1], 0)\n    (-1, 0)\n    \"\"\"\n    for i in range(len(xs) // 2):\n        if math.fabs(xs[i]) > 1e-4:\n            continue\n        else:\n            return xs[i], i\n    else:\n        return None\n\n\ndef find_zero_coeffs3(xs: list, x: float):\n    \"\"\" find_zero_coeffs3 finds xs which are coefficients of a polynomial\n    which has zero at point x.\n    >>> find_zero_coeffs3([-1, 0, 1], 0)\n    (-1, 0)\n    \"\"\"\n    for i in range(len(xs) // 2):\n        if math.fabs(xs[i]) > 1e-4:\n            continue\n        else:\n            return xs[i], i\n    else:\n        return None"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "def is_zero(coeff):\n        return abs(coeff) < 1e-6\n    if len(xs) & 1!= 0:\n        return None\n    coeff_index = 0\n    while not is_zero(poly(xs, xs[coeff_index])):\n        coeff_index += 1\n    if coeff_index == len(xs):\n        return None\n    return xs[coeff_index]\n\n\ndef find_zero_fast(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero_fast find x such that poly(x) = 0.\n    find_zero_fast returns only only zero point, even if there are many.\n    It takes a list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero_fast([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero_fast([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    def is_zero(coeff):\n        return abs(coeff) < 1e-6\n    if len(xs) & 1!= 0:\n        return None\n    coeff_index = 0\n    while not is_zero(poly(xs, xs[coeff_index])):\n        coeff_index += 1\n    if coeff_index == len(xs):\n        return None\n    return xs[coeff_index]\n\n\ndef find_zero_fast_2(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero_fast_2 find x such that poly(x) = 0.\n    find_zero_fast_2 returns only only zero point, even if there are many.\n    It takes a list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero_fast_2([1, 2]), 2) # f("
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "if not xs:\n        return float(\"inf\")\n    if len(xs) & 1 == 0:\n        return poly(xs, 0.0)\n    return poly(xs, 1.0)"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"Coefficients must be even\")\n    max_coeff = math.pow(xs[n - 1], 1)\n    for i in range(n):\n        if xs[i] > max_coeff:\n            max_coeff = xs[i]\n    for i in range(n):\n        if xs[i] > 0:\n            return xs[i] / max_coeff\n    return 0\n\n\ndef find_solution(xs: list, ys: list):\n    \"\"\"\n    Finds all solutions of xs = ys where xs are coefficients of a polynomial\n    and ys are values of the function evaluated at the corresponding points.\n    >>> find_solution([1, 2, 3, 4], [3, 4, 6, 8])\n    [[0.0, 0.0, 1.0, 2.0], [0.0, 1.0, 2.0, 3.0], [0.0, 1.0, 3.0, 4.0], [0.0, 1.0, 4.0, 6.0]]\n    >>> find_solution([1, 2, 3, 4], [3, 4, 6, 8])\n    [[0.0, 0.0, 1.0, 2.0], [0.0, 1.0, 2.0, 3.0], [0.0, 1.0, 3.0, 4.0], [0.0, 1.0, 4.0, 6.0]]\n    \"\"\"\n    n = len(xs)\n    if n!= len(ys):\n        raise ValueError(\"Coefficients and values must be same length\")\n    if n == 0:\n        return []\n    if n == 1:\n        return [[xs[0] / ys[0]]]\n    if n == 2:\n        return [[xs[0] / ys[0], xs[1] / ys[0]]]\n    if n == 3:\n        return [[poly(xs, x) for x in ys] for y in ys]\n    if n == 4:\n        return"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "# Find x such that f(x) = 0\n    # f(x) = 1 + 2x\n    # f(x) = x + 2x^2 + x^3\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^3 - 3x^2 + x - 1\n    # f(x) = x^"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2 == 0:\n        raise ValueError(\"Polynomial must have even number of coefficients.\")\n    if n == 1:\n        return xs[0]\n    # xs are coefficients of a polynomial\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    # for n > 2\n    if n > 2:\n        # find_zero returns all zero points\n        # find_zero returns only first non zero point\n        # find_zero returns only first non zero point\n        # find_zero returns only first non zero point\n        return [x for x in xs if x!= 0]\n    # for n = 2\n    # find_zero returns only first non zero point\n    return [x for x in xs if x!= 0 and x!= xs[0]]\n\n\ndef find_max_root(xs: list):\n    \"\"\" find_max_root returns xs[0] + xs[1] * x + xs[1] * x^2 +... x^n\n    \"\"\"\n    return find_zero(xs)\n\n\ndef find_min_root(xs: list):\n    \"\"\" find_min_root returns xs[0] - xs[1] * x - xs[1] * x^2 -... - x^n\n    \"\"\"\n    return find_zero(xs)[::-1]\n\n\nif __name__ == \"__main__\":\n    print(\"Polynomial x^3 + x + 1 = \", poly([1, 3, 1], 0))\n    print(\"x^2 + x + 1 = \", poly([1, 2, 1], 0))\n    print(\"x^2 - x - 1 = \", poly([1, 2, -1], 0))\n    print(\"x^2 - x + 1 = \", poly([1, 2, 1], 1))\n    print(\"x^2 - x - 1 = \", poly([1, 2, -1], 1))\n    print(\"x^2 + x + 1 = \", poly([1, 2, 1], 1))"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('Coefficients must have even number of terms.')\n    if n == 1:\n        return xs[0]\n    else:\n        return poly(xs, xs[-1]) / poly(xs[:-1], xs[-1])"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "# TODO: find_zero_all - it's faster to use find_zero_all\n    # TODO: find_zero_all_iterative - it's faster to use find_zero_all_iterative\n    # TODO: find_zero_all_iterative - it's faster to use find_zero_all_iterative\n    # TODO: find_zero_all_iterative - it's faster to use find_zero_all_iterative\n    # TODO: find_zero_all_iterative - it's faster to use find_zero_all_iterative\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] * xs[2]\n    if len(xs) % 2 == 0:\n        if xs[0] == 0:\n            return xs[1]\n        if xs[1] == 0:\n            return xs[0]\n        if xs[2] == 0:\n            return xs[1]\n        if xs[3] == 0:\n            return xs[2]\n        if xs[4] == 0:\n            return xs[3]\n        if xs[5] == 0:\n            return xs[4]\n        if xs[6] == 0:\n            return xs[5]\n        if xs[7] == 0:\n            return xs[6]\n        if xs[8] == 0:\n            return xs[7]\n        if xs[9] == 0:\n            return xs[8]\n        if xs[10] == 0:\n            return xs[9]\n        if xs[11] == 0:\n            return xs[10]\n        if xs[12] == 0:\n            return xs[11]\n        if xs[13] == 0:\n            return xs[12]\n        if xs[14] == 0:\n            return x"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"n must be even\")\n    coeff = xs[0]\n    for i in range(1, n):\n        coeff += xs[i] * math.pow(x, i)\n    if poly(xs, x) == 0:\n        return x\n    else:\n        raise ValueError(\"polynomial does not have a zero at x={}\".format(x))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "n = len(xs)\n    # n is even if n is odd\n    if n % 2 == 0:\n        return poly(xs, 0)\n    else:\n        # find_zero returns only the largest zero point\n        # find_zero takes only list xs having even number of coefficients\n        # and largest non zero coefficient as it guarantees\n        # a solution.\n        for i in range(n // 2):\n            if xs[i]!= 0:\n                return poly(xs, xs[i])\n        else:\n            return poly(xs, 0)"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n < 2:\n        return xs[0]\n    elif n == 2:\n        return poly(xs, 0.0)\n    else:\n        x0 = poly(xs, 0.0)\n        x1 = poly(xs, 1.0)\n        for i in range(2, n + 1):\n            x = poly(xs, i)\n            if x == 0:\n                return xs[i - 1]\n            elif x < 0:\n                return x\n            elif x < x1:\n                x0 = x\n                x1 = x\n    return x0\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "n = len(xs)\n    for i in range(n):\n        if xs[i] < 0:\n            return xs[i]\n        if xs[i] > 0:\n            return -1\n\n    return 0\n\n\ndef poly_soln(xs: list):\n    \"\"\"\n    Solve polynomial xs with coefficients of xs[0] being the zero point.\n    >>> poly_soln([1, 2, 3])\n    [-0.5, 0.5, 1.0]\n    \"\"\"\n    if len(xs) == 1:\n        return [xs[0]]\n    else:\n        return [poly(xs[:len(xs) // 2], x) for x in poly_soln(xs[:len(xs) // 2])] + [poly(xs[len(xs) // 2:], x) for x in poly_soln(xs[len(xs) // 2:])]"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "x0 = xs[0]\n    if x0 == 0:\n        return x0\n    i = 1\n    while i < len(xs):\n        if xs[i]!= 0:\n            x0 += xs[i] * math.pow(x0, i)\n        else:\n            i += 1\n    return x0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "for i in range(len(xs)):\n        if xs[i] == 0:\n            continue\n        if xs[i] > 0:\n            xs[i] = -xs[i]\n        if xs[i] == 0:\n            return xs[i]\n    return 0\n\n\ndef find_root(xs: list, x: float):\n    \"\"\" find_root returns a root of a polynomial with coefficients xs.\n    find_root takes list xs containing coefficients of a polynomial.\n    find_root returns root of a polynomial, which is the first root of the polynomial that is not\n    a zero of polynomial.\n    >>> round(find_root([1, 2, 3, 4], -2.5), 2)\n    -1.0\n    >>> round(find_root([1, 2, 3, 4], -1.5), 2)\n    0.0\n    >>> round(find_root([1, 2, 3, 4], -0.5), 2)\n    0.0\n    \"\"\"\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            continue\n        if xs[i] > 0:\n            xs[i] = -xs[i]\n        if xs[i] == 0:\n            return xs[i]\n    return find_zero(xs)\n\n\ndef find_roots(xs: list):\n    \"\"\" find_roots returns roots of a polynomial with coefficients xs.\n    find_roots takes list xs containing coefficients of a polynomial.\n    find_roots returns list of roots of the polynomial.\n    >>> round(find_roots([1, 2, 3, 4]), 2)\n    [-1.0, 0.0, 1.0, 2.0]\n    >>> round(find_roots([1, 2, 3, 4]), 2)\n    [-1.0, 0.0, 1.0, 2.0]\n    >>> round(find_roots([1, 2, 3, 4]), 2)\n    [-1.0, 0.0, 1.0, 2.0]\n    \"\"\"\n    roots = []"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "# find roots of a polynomial\n    roots = [x / poly(xs, x) for x in xs]\n    # find largest root\n    return max(roots)\n\n\ndef find_roots(xs: list):\n    \"\"\" find_roots finds all roots of polynomial with coefficients xs\n    returns a list of roots sorted in increasing order\n    >>> find_roots([1, 2, 3])\n    [-0.5, 0.5, 1.5]\n    \"\"\"\n    # find roots of a polynomial\n    roots = [x / poly(xs, x) for x in xs]\n    # sort roots\n    return sorted(roots)\n\n\ndef find_roots_2(xs: list):\n    \"\"\" find_roots finds all roots of polynomial with coefficients xs\n    returns a list of roots sorted in increasing order\n    >>> find_roots_2([1, 2, 3])\n    [-0.5, 0.5, 1.5]\n    \"\"\"\n    # find roots of a polynomial\n    roots = [x / poly(xs, x) for x in xs]\n    # sort roots\n    return sorted(roots, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "# xs are coefficients of a polynomial\n    # find_zero finds x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial\n    # find_zero finds x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial\n    # find_zero finds x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial\n    # find_zero finds x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial\n    # find_zero finds x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial\n    # find_zero finds x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    #"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0 or n == 0:\n        raise ValueError(\"n must be even and n > 0\")\n\n    for i in range(n):\n        if xs[i] == 0:\n            continue\n        for j in range(i + 1, n):\n            if xs[j]!= 0:\n                break\n        else:\n            return xs[i]\n        xs[i], xs[j] = xs[j], xs[i]\n\n    return xs[n // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "# check for even number of coefficients\n    if not len(xs) % 2 == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    # find the largest non zero coefficient\n    c = poly(xs, 0)\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            c = poly(xs, xs[i])\n            break\n    # find the zero of polynomial\n    for i in range(len(xs)):\n        if abs(c) < 1e-6:\n            return xs[i]\n        else:\n            c = poly(xs, xs[i])\n    return c\n\n\ndef find_roots(xs: list):\n    \"\"\" find_roots returns list of roots of polynomial\n    >>> find_roots([1, 2, 3])\n    [-0.5, 0.5, 1.5]\n    \"\"\"\n    # check for even number of coefficients\n    if not len(xs) % 2 == 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    # find the largest non zero coefficient\n    c = poly(xs, 0)\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            c = poly(xs, xs[i])\n            break\n    # find the roots of polynomial\n    roots = []\n    for i in range(len(xs)):\n        if abs(c) < 1e-6:\n            roots.append(xs[i])\n        else:\n            roots.append(poly(xs, xs[i]))\n    return roots\n\n\nif __name__ == \"__main__\":\n    xs = [1, 2, 3]\n    for i in range(len(xs)):\n        print(xs[i], find_zero(xs), find_roots(xs))"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "if not xs:\n        return float('nan')\n    if len(xs) % 2:\n        raise ValueError(\"xs must be even\")\n    max_coeff = max(xs)\n    n = len(xs) // 2\n    while True:\n        if max_coeff == 0:\n            return float('nan')\n        else:\n            max_coeff -= 1\n            x = float(n) / (n + 1)\n            p = poly(xs, x)\n            if math.isnan(p):\n                return float('nan')\n            elif p == 0:\n                return x\n            else:\n                n += 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 10.0,
      "candidate": "# if xs is a list, then the polynomial is\n    # f(x) = x + x^2 + x^3 +...\n    # if xs is a float, then the polynomial is\n    # f(x) = x^2 + x^3 +...\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        raise ValueError(\"cannot find zero of empty polynomial\")\n    if xs[-1] == 0:\n        return xs[-2]\n    if xs[-1] < 0:\n        xs[-1] = -1 * xs[-1]\n        xs[-2] = -1 * xs[-2]\n    else:\n        xs[-1] = 1 * xs[-1]\n        xs[-2] = 1 * xs[-2]\n    x = 0\n    while xs[0]!= 0:\n        x += xs[0]\n        xs[0] *= -1\n        xs[1] *= -1\n        xs[2] *= -1\n        xs.pop(0)\n    return x\n\n\ndef find_roots(xs: list, x: float):\n    \"\"\" find_roots returns a list of roots of the polynomial with coefficients xs\n    and given x.\n    >>> round(find_roots([1, 2, 3], -1), 2) # f(x) = x^2 + 3x + 2\n    [-2.0, 1.0, 2.0]\n    >>> round(find_roots([-3, 1, -1], -1), 2) # f(x) = x^2 + 3x + 2\n    [1.0, -2.0, -1.0]\n    \"\"\"\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"cannot find roots of polynomial with coefficient 0\")\n    if xs[-1] < 0:\n        xs[-1] = -1"
    },
    {
      "rank": 55,
      "score": 10.0,
      "candidate": "if not xs or not xs[0]:\n        return xs[0]\n    if len(xs) == 1:\n        return xs[0]\n    if not xs[0]:\n        return find_zero(xs[1:])\n    if len(xs) == 2:\n        return poly(xs, xs[0]) / poly(xs, xs[1])\n    if len(xs) % 2 == 0:\n        return find_zero(xs[1::2])\n    else:\n        return find_zero(xs[::2])"
    },
    {
      "rank": 56,
      "score": 10.0,
      "candidate": "if len(xs) % 2!= 0:\n        raise ValueError(\"List must have even number of coefficients.\")\n    max_coeff = math.sqrt(poly(xs, 0))\n    for i in range(1, len(xs)):\n        if xs[i]!= 0:\n            max_coeff = max(max_coeff, math.sqrt(poly(xs, i)))\n        else:\n            continue\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            return float(i) / (len(xs) - 1)\n    return max_coeff\n\n\ndef main():\n    import argparse\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--test', dest='test', action='store_true')\n    args = parser.parse_args()\n\n    if args.test:\n        import doctest\n        doctest.testmod()\n    else:\n        x = find_zero([1, 2, 3])\n        print(x)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n % 2 == 0:\n        xs_odd = xs[:-1]\n        xs_even = xs[1:]\n    else:\n        xs_odd = xs\n        xs_even = []\n    xs_even.extend([0] * (n - 1))\n    return poly(xs_odd, 0) / poly(xs_even, 0)\n\n\ndef solve(coeffs: list, x: float):\n    \"\"\"\n    Solve polynomial with coefficients coeffs at point x.\n    >>> round(solve([2, 1], 0.5), 2) # f(x) = 2x + 1\n    0.5\n    >>> round(solve([2, 1], -1), 2) # f(x) = 2x + 1\n    -0.5\n    \"\"\"\n    return poly(coeffs, x) / poly(coeffs[::-1], x)"
    },
    {
      "rank": 58,
      "score": 10.0,
      "candidate": "if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) should be even\")\n    for i in range(len(xs) // 2):\n        if xs[i] == 0:\n            continue\n        for j in range(i, len(xs)):\n            if xs[j]!= 0:\n                return xs[i]\n    raise ValueError(\"No zero found\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 10.0,
      "candidate": "if len(xs) % 2!= 0:\n        return -1\n    if len(xs) == 0:\n        return -1\n    n = len(xs)\n    x_max = xs[0]\n    for i in range(1, n):\n        if x_max < xs[i]:\n            x_max = xs[i]\n    for i in range(n - 1, -1, -1):\n        if xs[i]!= 0:\n            return xs[i]\n    return x_max\n\n\ndef find_roots(xs: list):\n    \"\"\"\n    find_roots returns list of roots of polynomial with coefficients xs\n    \"\"\"\n    return [x / poly(xs, x) for x in range(-1, len(xs))]\n\n\ndef find_zero_roots(xs: list):\n    \"\"\"\n    find_zero_roots finds roots of polynomial with coefficients xs\n    and returns list of roots sorted in descending order.\n    \"\"\"\n    roots = find_roots(xs)\n    roots = [r for r in roots if r!= 0]\n    roots.sort()\n    return roots\n\n\ndef find_zero_roots_2(xs: list):\n    \"\"\"\n    find_zero_roots_2 finds roots of polynomial with coefficients xs\n    and returns list of roots sorted in descending order.\n    \"\"\"\n    roots = find_zero_roots(xs)\n    roots.sort()\n    return roots\n\n\ndef find_zero_roots_3(xs: list):\n    \"\"\"\n    find_zero_roots_3 finds roots of polynomial with coefficients xs\n    and returns list of roots sorted in descending order.\n    \"\"\"\n    roots = find_zero_roots(xs)\n    roots.sort()\n    return roots\n\n\ndef find_zero_roots_4(xs: list):\n    \"\"\"\n    find_zero_roots_4 finds roots of polynomial with coefficients xs\n    and returns list of roots sorted in descending order.\n    \"\"\"\n    roots = find_zero_roots(xs)\n    roots.sort()\n    return roots\n\n\ndef find_zero_roots_5(xs: list):\n    \"\"\"\n    find_zero"
    },
    {
      "rank": 60,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n == 0:\n        return 0.\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        return poly(xs, 0.)\n    n = int(math.ceil(math.sqrt(n)))\n    for i in range(n):\n        if not poly(xs, float(i)):\n            return poly(xs, float(i))\n    return None"
    },
    {
      "rank": 61,
      "score": 10.0,
      "candidate": "# xs is a list of coefficients, each coefficient is float\n    # xs[i] is the coefficient for i'th degree polynomial\n    # n is the number of coefficients\n    n = len(xs)\n    # find_zero returns the largest x such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find_zero returns a list of xs such that poly(x) = 0\n    # find"
    },
    {
      "rank": 62,
      "score": 10.0,
      "candidate": "n = len(xs)\n    if n <= 1:\n        return xs[0]\n    if n == 2:\n        return poly(xs, 0.0) / poly(xs, 1.0)\n    # if n is odd\n    p = poly(xs, 0.0)\n    for i in range(n):\n        if xs[i]!= 0:\n            p = p / xs[i]\n        else:\n            break\n    else:\n        return p\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 10.0,
      "candidate": "max_coeff = max([abs(coeff) for coeff in xs])\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            xs[i] /= max_coeff\n            if i == 0:\n                return xs[0]\n            elif i % 2 == 1:\n                return poly(xs, xs[i])\n    return None\n\n\ndef find_roots(xs: list):\n    \"\"\"\n    find_roots finds roots of a polynomial.\n    find_roots returns a list of roots.\n    >>> round(find_roots([1, -1, 3, -3]), 2) # f(x) = 1 + x^2 + 3x + -3x^3\n    [-0.5, -0.5, 1.0, 1.0]\n    \"\"\"\n    roots = []\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            roots.append(poly(xs, xs[i]))\n    return roots\n\n\ndef find_roots_all(xs: list):\n    \"\"\"\n    find_roots_all finds all roots of a polynomial.\n    find_roots_all returns a list of roots.\n    >>> round(find_roots_all([1, -1, 3, -3]), 2) # f(x) = 1 + x^2 + 3x + -3x^3\n    [-0.5, -0.5, 1.0, 1.0]\n    \"\"\"\n    roots = []\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            roots.append(poly(xs, xs[i]))\n    return roots\n\n\ndef find_roots_all_sorted(xs: list):\n    \"\"\"\n    find_roots_all_sorted finds all roots of a polynomial.\n    find_roots_all_sorted returns a list of roots.\n    >>> round(find_roots_all_sorted([1, -1, 3, -3]), 2) # f(x) = 1 + x^2 + 3x + -3x^3\n    [-0"
    },
    {
      "rank": 64,
      "score": 10.0,
      "candidate": "# find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees\n    # a solution.\n    if len(xs) % 2 == 0:\n        return poly(xs, 0.0)\n    else:\n        return poly(xs[::2], 0.0)\n\n\ndef find_zero_roots(xs: list):\n    \"\"\"\n    Find all roots of polynomial with coefficients xs.\n    >>> find_zero_roots([1, 2, 3])\n    [-0.5, 0.5]\n    \"\"\"\n    roots = []\n    for x in find_zero(xs):\n        roots.append(x)\n    return roots\n\n\ndef find_roots(polynomial: str, x_min: float, x_max: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    >>> find_roots('x^2 - 4x + 3', -3, 4)\n    [-1.0, -0.5, -0.25, -0.2]\n    \"\"\"\n    if x_min == x_max:\n        return [x_min]\n    else:\n        roots = []\n        for x in find_zero_roots(find_zero(eval(polynomial))):\n            if x >= x_min and x <= x_max:\n                roots.append(x)\n        return roots\n\n\ndef find_roots_roots(polynomial: str, x_min: float, x_max: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    >>> find_roots_roots('x^2 - 4x + 3', -3, 4)\n    [-1.0, -0.5, -0.25, -0.2]\n    \"\"\"\n    if x_min == x_max:\n        return [x_"
    },
    {
      "rank": 65,
      "score": 10.0,
      "candidate": "# TODO: use a better polynomial evaluator\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a better way to find a zero\n    # TODO: use a"
    },
    {
      "rank": 66,
      "score": 10.0,
      "candidate": "for i in range(len(xs) - 1, 0, -1):\n        if not math.isclose(poly(xs, xs[i]), 0):\n            return xs[i]\n    return 0.0\n\n\ndef find_zero_fast(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero_fast find x such that poly(x) = 0.\n    find_zero_fast returns only only zero point, even if there are many.\n    Moreover, find_zero_fast only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero_fast([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero_fast([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    for i in range(len(xs) - 1, 0, -1):\n        if not math.isclose(xs[i], 0):\n            return xs[i]\n    return 0.0\n\n\ndef main():\n    # test\n    assert round(find_zero([1, 2, 3]), 2) == -0.5\n    assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "if len(xs) % 2 == 0:\n        return poly(xs, 0.0)\n    else:\n        return poly(xs, 1.0)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "if len(xs) % 2!= 0:\n        raise ValueError('Number of coefficients must be even.')\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    for i in range(i, len(xs)):\n        if xs[i]!= 0:\n            break\n    return xs[i]\n\n\ndef find_roots(poly, x_min: float, x_max: float):\n    \"\"\"\n    find_roots returns list of roots of a polynomial.\n    >>> find_roots([1, 2, 3, 4], 0, 5)\n    [0, 1.5, 3]\n    \"\"\"\n    n = len(poly)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [x_min]\n    else:\n        if x_min < x_max:\n            return [x_min] + find_roots(poly, x_min, x_max)\n        else:\n            return find_roots(poly, x_max, x_min)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "for i in range(len(xs) - 1, -1, -1):\n        if xs[i]!= 0:\n            return xs[i]\n    return float('inf')"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "# find_zero returns the first zero point of polynomial\n    # which is not equal to 0.\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    return xs[i]"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "for x in xs:\n        if x < 0:\n            return x\n    for x in xs:\n        if x == 0:\n            return x\n    return None"
    },
    {
      "rank": 72,
      "score": 1.5,
      "candidate": "# first check if xs is even and has non zero coeff\n    if not len(xs) % 2 or not all([c for c in xs if c!= 0]):\n        return None\n    # find largest non zero coeff in xs\n    nonzero_coeff = [c for c in xs if c!= 0][-1]\n    # find x such that poly(x) = 0\n    return poly(xs, -1.0 / nonzero_coeff)"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "n = len(xs)\n    # check if even number of coefficients\n    if n % 2!= 0:\n        raise ValueError('polynomial must have even number of coefficients')\n    # check if all coefficients are non zero\n    if not all([math.fabs(coeff) > 0 for coeff in xs]):\n        raise ValueError('polynomial coefficients must be non zero')\n    # find non zero coefficients\n    non_zero = [coeff for coeff in xs if math.fabs(coeff) > 0]\n    # find largest non zero coefficient\n    max_coeff = max(non_zero)\n    # find non zero coefficient with largest non zero coefficient\n    non_zero_max = [coeff for coeff in non_zero if math.fabs(coeff) == max_coeff]\n    # find largest non zero coefficient\n    max_coeff = max(non_zero_max)\n    # find non zero coefficient with largest non zero coefficient\n    non_zero_max_max = [coeff for coeff in non_zero_max if math.fabs(coeff) == max_coeff]\n    # find largest non zero coefficient\n    max_coeff = max(non_zero_max_max)\n    # find non zero coefficient with largest non zero coefficient\n    non_zero_max_max_max = [coeff for coeff in non_zero_max_max if math.fabs(coeff) == max_coeff]\n    # find largest non zero coefficient\n    max_coeff = max(non_zero_max_max_max)\n    # find largest non zero coefficient\n    max_coeff = max(non_zero_max_max_max)\n    # return largest non zero coefficient\n    return max_coeff\n\n\nif __name__ == '__main__':\n    print(poly([1, 2, 3], 0.5))\n    print(find_zero([1, 2, 3]))\n    print(poly([1, -2, 3], 0.5))\n    print(find_zero([1, -2, 3]))\n    print(poly([1, 0, 0, 0], 0.5))\n    print(find_zero([1"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"Length of xs must be even\")\n    # We assume that xs[0] is non zero.\n    if xs[0] == 0:\n        raise ValueError(\"x[0] cannot be zero\")\n    # We assume that xs[n] is non zero.\n    if xs[n - 1] == 0:\n        raise ValueError(\"x[n-1] cannot be zero\")\n    # We assume that xs[n] is non zero.\n    if xs[n] == 0:\n        raise ValueError(\"x[n] cannot be zero\")\n    # We assume that xs[n] is non zero.\n    for i in range(1, n):\n        if xs[i] == 0:\n            continue\n        else:\n            break\n    else:\n        raise ValueError(\"No solution found\")\n    # We assume that xs[i] is non zero.\n    for j in range(i, n):\n        if xs[j]!= 0:\n            continue\n        else:\n            break\n    else:\n        raise ValueError(\"No solution found\")\n    x = xs[i]\n    for i in range(i + 1, n):\n        if xs[i]!= 0:\n            x += xs[i] * xs[j]\n            j += 1\n        else:\n            break\n    return x"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# xs is list of polynomial coefficients.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    if len(xs) % 2!= 0:\n        return -1\n    if len(xs) == 2:\n        return 0\n    if xs[-1] == 0:\n        return poly(xs, 0)\n    i = len(xs) - 2\n    while i >= 0 and xs[i] == 0:\n        i -= 1\n    if i == -1:\n        return poly(xs, 0)\n    # find xs such that poly(x) = 0\n    while xs[i]!= 0:\n        x = xs[i]\n        i -= 1\n        while i >= 0 and xs[i] == 0:\n            i -= 1\n        if i == -1:\n            return poly(xs, 0)\n        # find xs such that poly(x) = 0\n        while xs[i]!= 0:\n            x = xs[i]\n            i -= 1\n            while i >= 0 and xs[i] == 0:\n                i -= 1\n            if i == -1:\n                return poly(xs, 0)\n        return poly(xs, x)\n    return -1\n\n\ndef find_zero_linear(a, b):\n    \"\"\" Find a solution for x = a + bx\n    >>> find_zero_linear(1, 2)\n    1.5\n    >>> find_zero_linear(1, -2)\n    -1.5\n    >>> find_zero_linear(1, 0)\n    1.0\n    >>> find_zero_linear(-1, -2)\n    -1.0\n    >>> find_zero_linear(1, -1)\n    -0.5\n    >>> find_zero_linear(1, 2)\n    1.5\n    >>> find_zero_linear(-1, -2)\n    -1.5\n    \"\"\"\n    return a + b * find_zero(a * b - 1)"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('find_zero requires even number of coefficients')\n    for i in range(1, n):\n        if xs[i]!= 0:\n            break\n    else:\n        return xs[0]\n    for i in range(0, n):\n        if xs[i] == 0:\n            continue\n        if i + 1 >= n:\n            break\n        xs[i] = -xs[i]\n        xs[i + 1] = xs[i + 1] * xs[i]\n    return xs[i]\n\n\ndef solve_linear(x: float, coeffs: list):\n    \"\"\"\n    solves linear equation:\n    a * x + b = 0\n    returns a and b\n    >>> round(solve_linear(3, [1, 2, 3]), 2) # x = -2 + 2x\n    -2.0\n    >>> round(solve_linear(3, [3, 4, 5]), 2) # x = 3 + 2x\n    3.0\n    \"\"\"\n    if len(coeffs) == 1:\n        return coeffs[0], 0\n    return poly(coeffs, x), -poly(coeffs, -x)\n\n\ndef solve_quadratic(x: float, coeffs: list):\n    \"\"\"\n    solves quadratic equation:\n    a * x^2 + b * x + c = 0\n    returns a, b, and c\n    >>> round(solve_quadratic(3, [1, 2, 3]), 2) # x^2 + 3 * x + 1 = 0\n    1.0\n    >>> round(solve_quadratic(3, [3, 4, 5]), 2) # x^2 + 3 * x + 2 = 0\n    2.0\n    >>> round(solve_quadratic(3, [4, 5, 6]), 2) # x^2 + 4 * x + 2 = 0\n    2.0\n    \"\"\"\n    if len(coeffs) == 1:\n        return coeffs[0], 0, 0\n    a, b"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError('len(xs) must be even')\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        return xs[1]\n    for x in range(2, n + 1):\n        if xs[x - 1] * xs[x] > 0:\n            break\n    else:\n        raise RuntimeError('find_zero: no zero found')\n    return xs[x - 1]\n\n\ndef find_max(xs: list):\n    \"\"\"\n    find_max finds the largest value in xs.\n    find_max returns only one value.\n    >>> find_max([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    return max([x for x in xs])\n\n\ndef find_min(xs: list):\n    \"\"\"\n    find_min finds the smallest value in xs.\n    find_min returns only one value.\n    >>> find_min([1, 2, 3, 4, 5])\n    1\n    \"\"\"\n    return min([x for x in xs])\n\n\ndef find_max_with_indices(xs: list):\n    \"\"\"\n    find_max_with_indices finds the largest value in xs.\n    find_max_with_indices returns two values.\n    >>> find_max_with_indices([1, 2, 3, 4, 5])\n    (5, 1)\n    \"\"\"\n    return max(enumerate(xs))\n\n\ndef find_min_with_indices(xs: list):\n    \"\"\"\n    find_min_with_indices finds the smallest value in xs.\n    find_min_with_indices returns two values.\n    >>> find_min_with_indices([1, 2, 3, 4, 5])\n    (1, 0)\n    \"\"\"\n    return min(enumerate(xs))\n\n\ndef find_max_of_max(xs: list):\n    \"\"\"\n    find_max_of_max finds the largest value in xs.\n    find_max_of_max"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "p = poly(xs, 0.0)\n    x = 0.0\n    while p!= 0:\n        x = x + 1.0\n        p = poly(xs, x)\n    return x\n\n\ndef solve(xs: list):\n    \"\"\"\n    solve(xs) solves polynomial with coefficients xs.\n    >>> solve([1, 2, 3])\n    [-2, -1, 0]\n    \"\"\"\n    n = len(xs)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [xs[0]]\n    else:\n        if n % 2 == 0:\n            return [find_zero(xs[:n // 2])] + solve(xs[n // 2:])\n        else:\n            return [find_zero(xs[n // 2:])] + solve(xs[:n // 2])\n\n\ndef main():\n    \"\"\"\n    solve([1, 2, 3])\n    [-2, -1, 0]\n    solve([-6, 11, -6, 1])\n    [1.0]\n    \"\"\"\n    xs = [1, 2, 3]\n    print(solve(xs))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# find_zero is only for lists of even number of coefficients\n    if len(xs) % 2 == 1:\n        return None\n    # find_zero returns only the largest non zero coefficient\n    # and the number of coefficients\n    n = len(xs)\n    for i in range(n):\n        if xs[i]!= 0:\n            break\n    return [i / 2.0 for i in range(n)]\n\n\ndef find_zero_poly(xs: list):\n    \"\"\" find_zero_poly finds the largest non zero coefficient\n    of polynomial with coefficients xs.\n    find_zero_poly returns only the largest non zero coefficient\n    and the number of coefficients\n    >>> find_zero_poly([1, 2, 3])\n    (1.0, 3)\n    \"\"\"\n    return [xs[i] / 2.0 for i in range(len(xs)) if xs[i]!= 0]\n\n\ndef main():\n    n = 10\n    xs = [math.pow(x, n) for x in range(-1, 1)]\n    z = find_zero(xs)\n    if z is None:\n        print('No solution')\n    else:\n        print(z)\n        print(find_zero_poly(xs))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n % 2 == 1:\n        return None\n    for x in range(n//2, -1, -1):\n        if xs[x]!= 0:\n            return x\n    return None"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n % 2 == 1:\n        return None\n    if n == 2:\n        return xs[0] / xs[1]\n    # find root of the polynomial\n    root = find_root(poly, xs)\n    # if root is negative, the function is monotonic\n    # and if it is positive, the function is anti-monotonic\n    # (this is the case of a real root)\n    if root < 0:\n        return None\n    # otherwise, if the function is monotonic, the root must be positive\n    # if the function is anti-monotonic, the root must be negative\n    # (this is the case of a complex root)\n    if xs[0] * root < 0:\n        return None\n    return root\n\n\ndef find_root(func: func, xs: list):\n    \"\"\"\n    find_root finds root of func(x) = 0.\n    find_root returns only only root, even if there are many.\n    \"\"\"\n    for i in range(len(xs)):\n        # if func(x) = 0 then x = root\n        if func(xs[i]) == 0:\n            return xs[i]\n    return None\n\n\ndef get_roots(xs: list):\n    \"\"\"\n    get_roots returns a list of roots of the function xs[0] + xs[1] * x +...\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [xs[0]]\n    if n == 2:\n        return [-xs[0] / xs[1], xs[0] / xs[1]]\n    roots = []\n    for i in range(n - 1):\n        roots.append(xs[i] / (xs[i] - xs[i + 1]))\n    return roots\n\n\ndef get_roots_and_coeffs(xs: list):\n    \"\"\"\n    get_roots_and_coeffs returns a list of roots and coefficients of the function xs[0] + xs[1] * x +...\n    \"\"\"\n    n = len(xs)\n    if n == 1:"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "assert len(xs) % 2 == 1\n    assert sum([abs(coeff) for coeff in xs]) <= 1.0\n    max_coeff = max([abs(coeff) for coeff in xs])\n    for i in range(1, len(xs)):\n        if abs(xs[i]) > max_coeff:\n            break\n    else:\n        return xs[i]\n    for i in range(len(xs) - 1, -1, -1):\n        if abs(xs[i]) < max_coeff:\n            max_coeff = xs[i]\n        else:\n            break\n    return xs[i]\n\n\ndef poly_roots(xs: list):\n    \"\"\"\n    find_zero returns a list of roots of the polynomial.\n    \"\"\"\n    roots = []\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            continue\n        roots.append(-xs[i] / poly(xs[i:], -1))\n    return roots\n\n\ndef poly_roots_to_list(roots: list):\n    \"\"\"\n    poly_roots_to_list converts a list of roots of a polynomial\n    to a list of coefficients of the polynomial.\n    >>> roots = [-0.5, 1, 1.5]\n    >>> poly_roots_to_list(roots)\n    [1, 2, 3]\n    \"\"\"\n    return [xs[0] for xs in roots]\n\n\ndef poly_roots_to_list_with_coeffs(roots: list):\n    \"\"\"\n    poly_roots_to_list_with_coeffs converts a list of roots of a polynomial\n    to a list of coefficients of the polynomial, along with a list of\n    coefficients of the polynomial.\n    >>> roots = [-0.5, 1, 1.5]\n    >>> poly_roots_to_list_with_coeffs(roots)\n    ([1, 2, 3], [1, 2, 3])\n    \"\"\"\n    return poly_roots_to_list(roots), poly_roots_to_list(roots)\n\n\ndef poly_roots"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"n is not even\")\n    for i in range(1, n // 2):\n        if xs[i]!= 0:\n            break\n    else:\n        return xs[0]\n    for i in range(n // 2, n):\n        if xs[i]!= 0:\n            break\n    else:\n        return xs[0]\n    # find the next largest non zero coefficient\n    i = n - 1\n    while xs[i] == 0:\n        i -= 1\n    j = i\n    while xs[j] == 0:\n        j -= 1\n    return xs[i] * xs[j]\n\n\nif __name__ == \"__main__\":\n    assert round(find_zero([1, 2, 3, -1]), 2) == -0.5\n    assert round(find_zero([1, -2, 3, -1]), 2) == 1.0"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# find the first zero point\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            return poly(xs[:i+1], 0)\n    # if there are no zero points, return None\n    return None\n\n\ndef find_poly(xs: list, ys: list):\n    \"\"\" ys are coefficients of a polynomial.\n    find_poly find x such that poly(x) = ys.\n    find_poly returns only only zero point, even if there are many.\n    \"\"\"\n    # find the first zero point\n    for i, coeff in enumerate(ys):\n        if coeff!= 0:\n            return poly(xs[:i+1], ys[:i+1])\n    # if there are no zero points, return None\n    return None\n\n\ndef find_zero_coeff(xs: list):\n    \"\"\" find_zero_coeff find x such that poly(x) = 0.\n    find_zero_coeff returns only only zero point, even if there are many.\n    \"\"\"\n    # find the first zero point\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            return coeff\n    # if there are no zero points, return None\n    return None\n\n\ndef find_zero_coeff_poly(xs: list):\n    \"\"\" find_zero_coeff_poly find x such that poly(x) = 0.\n    find_zero_coeff_poly returns only only zero point, even if there are many.\n    \"\"\"\n    # find the first zero point\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            return poly(xs[:i+1], 0)\n    # if there are no zero points, return None\n    return None\n\n\ndef find_zero_coeff_poly_2(xs: list):\n    \"\"\" find_zero_coeff_poly_2 find x such that poly(x) = 0.\n    find_zero_coeff_poly_2 returns only only zero point, even if there are many.\n    \"\"\"\n    # find the first zero point\n    for i, coeff in enumerate(xs):\n        if co"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "if len(xs) % 2!= 0:\n        raise ValueError(\"polynomial has odd number of coefficients\")\n    if xs[0] == 0:\n        return None\n    if xs[-1] == 0:\n        return None\n    x = -1\n    while True:\n        x = x + 1\n        if poly(xs, x) == 0:\n            break\n    return x\n\n\ndef solve(xs: list):\n    \"\"\"\n    Solves equation xs[0] + xs[1] * x + xs[1] * x^2 +... + xs[n] * x^n = 0\n    for xs list.\n    Returns list of solutions xs[0] + xs[1] * x + xs[1] * x^2 +... + xs[n] * x^n\n    \"\"\"\n    x0 = find_zero(xs)\n    if x0 is None:\n        return []\n    else:\n        return [x0, x0 ** 2]"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "if not xs:\n        return 0.0\n    if len(xs) % 2!= 0:\n        return None\n    # find the largest non zero coefficient\n    x = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i]!= 0:\n            x = xs[i]\n            break\n    # find the zero point\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    return x\n\n\ndef find_min_max(xs: list):\n    \"\"\"\n    find_min_max finds the minimum and maximum value of xs.\n    find_min_max returns tuple (min_val, max_val)\n    >>> round(find_min_max([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    (1.0, 11.0)\n    \"\"\"\n    min_val = xs[0]\n    max_val = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_val:\n            min_val = xs[i]\n        if xs[i] > max_val:\n            max_val = xs[i]\n    return min_val, max_val\n\n\ndef find_zero_min_max(xs: list):\n    \"\"\"\n    find_zero_min_max finds the minimum and maximum value of xs.\n    find_zero_min_max returns tuple (min_val, max_val)\n    >>> round(find_zero_min_max([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    (1.0, 11.0)\n    \"\"\"\n    min_val = xs[0]\n    max_val = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_val"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "if len(xs) % 2 == 1:\n        return None\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    else:\n        return None\n    x = xs[i]\n    for i in range(i + 1, len(xs)):\n        x = x * x - xs[i]\n        if x == 0:\n            return xs[i]\n    return x\n\n\ndef find_zero_iter(xs: list):\n    \"\"\"\n    find_zero_iter(xs) finds all the zero points of a polynomial xs.\n    returns a list of all zero points.\n    >>> round(find_zero_iter([1, 2, 3, 4, 5, 6]), 2)\n    [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5]\n    \"\"\"\n    if len(xs) <= 1:\n        return None\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    else:\n        return None\n    x = xs[i]\n    for i in range(i + 1, len(xs)):\n        x = x * x - xs[i]\n        if x == 0:\n            yield xs[i]\n\n\ndef find_zero_iter2(xs: list):\n    \"\"\"\n    find_zero_iter2(xs) finds all the zero points of a polynomial xs.\n    returns a list of all zero points.\n    >>> round(find_zero_iter2([1, 2, 3, 4, 5, 6]), 2)\n    [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5]\n    \"\"\"\n    if len(xs) <= 1:\n        return None\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    else:\n        return None\n    x = xs[i]\n    for i in range(i + 1, len(xs)):\n        x = x *"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "n = len(xs)\n    # find_zero returns only even number of coefficients\n    # so it is safe to take the first and last coefficient\n    # as they are zero\n    if n % 2!= 0:\n        return None\n    if n == 1:\n        return xs[0]\n    x = xs[0]\n    for i in range(1, n):\n        if xs[i]!= 0:\n            x = xs[i]\n            break\n    return x\n\n\ndef solve_polynomial(xs: list):\n    \"\"\"\n    solve_polynomial finds solution of polynomial with coefficients xs\n    given as list.\n    >>> solve_polynomial([1, 2])\n    [-0.5, 1.0]\n    >>> solve_polynomial([-6, 11, -6, 1])\n    [-0.5, 1.0]\n    >>> solve_polynomial([-6, 11, -6, 1, 1])\n    [-0.5, 1.0]\n    >>> solve_polynomial([-6, 11, -6, 1, 1, 1])\n    [-0.5, 1.0]\n    >>> solve_polynomial([-6, 11, -6, 1, 1, 1, 1])\n    [-0.5, 1.0]\n    >>> solve_polynomial([-6, 11, -6, 1, 1, 1, 1, 1])\n    [-0.5, 1.0]\n    >>> solve_polynomial([-6, 11, -6, 1, 1, 1, 1, 1, 1])\n    [-0.5, 1.0]\n    >>> solve_polynomial([-6, 11, -6, 1, 1, 1, 1, 1, 1, 1])\n    [-0.5, 1.0]\n    \"\"\"\n    n = len(xs)\n    # find_zero returns only even number of coefficients\n    # so it is safe to take the first and last coefficient\n    # as they are zero\n    if n % 2!= 0:\n        return None\n    if n == 1:\n        return xs[0]"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# find_zero(xs) finds xs[n] such that poly(xs) = 0.\n    # find_zero(xs) returns all zero points.\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            break\n    if i % 2 == 1:\n        # xs[n] is not zero, find_zero(xs) returns all zero points.\n        return xs[i]\n    else:\n        # xs[n] is zero, find_zero(xs) returns only zero point, even if there are many.\n        return xs[i + 1]\n\n\ndef find_x(xs: list, x: float):\n    \"\"\" xs are coefficients of a polynomial.\n    find_x finds x such that poly(xs) = 0.\n    find_x returns only only zero point, even if there are many.\n    >>> round(find_x([1, 2], 0.5), 2) # f(x) = 1 + 2x\n    0.5\n    >>> round(find_x([-6, 11, -6, 1], 1.0), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            break\n    if i % 2 == 1:\n        # xs[n] is not zero, find_x returns all zero points.\n        return xs[i]\n    else:\n        # xs[n] is zero, find_x returns only zero point, even if there are many.\n        return xs[i + 1]\n\n\ndef find_x_in_range(xs: list, x: float, x_min: float, x_max: float):\n    \"\"\" find_x_in_range finds x such that poly(xs) = 0.\n    find_x_in_range returns only only zero point, even if there are many.\n    >>> round(find_x_in_range([1, 2], 0.5, -0.5, 1.5), 2) # f("
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "if len(xs) % 2 == 1:\n        raise ValueError('Polynomial has odd number of coefficients')\n\n    n = len(xs) // 2\n    if xs[n] == 0:\n        return None\n\n    # find the solution by solving the linear system\n    for i in range(n + 1, len(xs)):\n        xs[i] /= xs[n]\n        if xs[i]!= 0:\n            return xs[i]\n\n    return None\n\n\ndef find_min_max(xs: list):\n    \"\"\" find_min_max returns the minimum and the maximum of a list of numbers\n    >>> find_min_max([0, 3, -2, 1, 0])\n    (0, 3)\n    \"\"\"\n    min_val = max_val = xs[0]\n    for val in xs[1:]:\n        if val < min_val:\n            min_val = val\n        if val > max_val:\n            max_val = val\n    return (min_val, max_val)\n\n\ndef find_min_max_with_zeros(xs: list):\n    \"\"\" find_min_max_with_zeros returns the minimum and the maximum of a list\n    of numbers with zeros.\n    >>> find_min_max_with_zeros([0, 3, -2, 1, 0])\n    (0, 3)\n    \"\"\"\n    min_val = max_val = xs[0]\n    for val in xs:\n        if val!= 0:\n            if val < min_val:\n                min_val = val\n            if val > max_val:\n                max_val = val\n    return (min_val, max_val)\n\n\ndef find_min_max_with_zeros_and_odd_coeff(xs: list):\n    \"\"\" find_min_max_with_zeros_and_odd_coeff returns the minimum and the maximum\n    of a list of numbers with zeros and odd coeffs\n    >>> find_min_max_with_zeros_and_odd_coeff([0, 3, -2, 1, 0])\n    (0, 3)\n    \"\"\""
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "if len(xs) % 2 == 1:\n        raise ValueError(\"The number of coefficients should be even\")\n    n = len(xs)\n    for i in range(1, n):\n        if xs[i] == 0:\n            continue\n        for j in range(i - 1, -1, -1):\n            if xs[j]!= 0:\n                if xs[j] / xs[i] < 0:\n                    continue\n                else:\n                    return xs[j]\n    return 0\n\n\ndef find_all_roots(xs: list):\n    \"\"\"\n    find_all_roots finds all roots of polynomial xs.\n    find_all_roots returns list of roots,\n    even if there are many.\n    \"\"\"\n    if len(xs) == 0:\n        return []\n    roots = []\n    for i in range(1, len(xs)):\n        if xs[i]!= 0:\n            roots.append(find_zero(xs[: i + 1]))\n    return roots\n\n\ndef solve_poly(xs: list):\n    \"\"\"\n    solve_poly solves polynomial xs.\n    solve_poly returns list of roots,\n    even if there are many.\n    \"\"\"\n    if len(xs) == 0:\n        return []\n    roots = find_all_roots(xs)\n    return [x for x in roots if x >= 0]\n\n\nif __name__ == \"__main__\":\n    print(poly([1, 0, 0, 1], 2))\n    print(poly([0, 1, 0, 0], 2))\n    print(poly([0, 1, 0, 0], -1))\n    print(poly([0, 1, 0, 0], -2))\n    print(poly([0, 1, 0, 0], -3))\n    print(poly([0, 1, 0, 0], -4))\n    print(poly([0, 1, 0, 0], -5))\n    print(poly([0, 1, 0, 0], -6))\n    print(poly([0, 1, 0, 0], -7))\n    print(poly([0, 1, 0, 0], -8"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even')\n    # find_zero finds x with polynomial equal to zero\n    # and returns only first zero point.\n    # This is done by finding x with polynomial equal to zero,\n    # which is the same as finding x with largest non zero coefficient.\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            return xs[i]\n    raise ValueError('No zero found')\n\n\ndef find_first_zero(xs: list):\n    \"\"\"\n    find_first_zero finds first zero point in the polynomial\n    with coefficients xs, even if there are many.\n    >>> round(find_first_zero([1, 2]), 2) # f(x) = 1 + 2x\n    1.0\n    >>> round(find_first_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError('Coefficients must be even')\n    # find_first_zero finds first zero point\n    # and returns only first zero point.\n    # This is done by finding x with polynomial equal to zero,\n    # which is the same as finding x with largest non zero coefficient.\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            return xs[i]\n    raise ValueError('No zero found')\n\n\ndef find_first_zero_with_polynomial(xs: list, poly: list):\n    \"\"\"\n    find_first_zero_with_polynomial finds first zero point in the polynomial\n    with coefficients xs, even if there are many.\n    >>> round(find_first_zero_with_polynomial([1, 2], [1, 2, -1]), 2) # f(x) = 1 + 2x\n    1.0\n    >>> round(find_first_zero_with_polynomial([-6, 11,"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "if not xs:\n        return None\n    if len(xs) % 2!= 0:\n        return None\n    if xs[0] == 0:\n        return None\n    if xs[0] < 0:\n        return None\n    x = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < 0:\n            return None\n        x = min(x, xs[i])\n    return x\n\n\ndef solve_polynomial(xs: list, x: float):\n    \"\"\"\n    Solves a polynomial with coefficients xs.\n    >>> round(solve_polynomial([1, 2, 3], 4), 2) # f(x) = 1 + 2x + 3x^2\n    1.0\n    >>> round(solve_polynomial([-1, 2, 3, 4], -1), 2) # f(x) = -1 + 2x + 3x^2 + 4x^3\n    -0.5\n    \"\"\"\n    return poly(xs, x) / poly(xs, -1)\n\n\ndef main():\n    # xs = [1, 2, 3, 4]\n    # x = 4\n    # print(solve_polynomial(xs, x))\n    # x = -1\n    # print(solve_polynomial(xs, x))\n    x = find_zero([1, 2, 3, 4])\n    if x is None:\n        print('not found')\n    else:\n        print(round(x, 2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "if len(xs) % 2 == 0:\n        for i in range(0, len(xs), 2):\n            if poly(xs, xs[i]) == 0:\n                return xs[i]\n    else:\n        for i in range(1, len(xs)):\n            if poly(xs, xs[i]) == 0:\n                return xs[i]\n    return None\n\n\ndef main():\n    \"\"\"\n    >>> find_zero([1, 2, 3])\n    -1.5\n    >>> find_zero([1, 2, 3, 4])\n    -0.5\n    \"\"\"\n    xs = [1, 2, 3]\n    print(round(find_zero(xs), 2))\n    xs = [1, 2, 3, 4]\n    print(round(find_zero(xs), 2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "n = len(xs)\n    # n is even if there are even number of coefficients\n    if n % 2 == 0:\n        # xs are even, so we can take only even coeffs\n        xs = [x for x in xs if math.fabs(x) % 2 == 0]\n        # we take the largest non zero coeff as a solution\n        if len(xs) > 0:\n            return xs[-1]\n        else:\n            return None\n    else:\n        # n is odd, so we can take only even coeffs\n        xs = [x for x in xs if math.fabs(x) % 2 == 0]\n        # we take the largest non zero coeff as a solution\n        if len(xs) > 0:\n            return xs[0]\n        else:\n            return None"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n % 2 == 0:\n        xs = xs[:n//2]\n        if sum(xs) == 0:\n            return None\n        n = n//2\n        a = xs[n-1]\n        b = xs[n]\n        for i in range(n-2, -1, -1):\n            xs[i] = (b - a * xs[i]) / (i + 1)\n            a = xs[i]\n        x = xs[0]\n        return x\n    else:\n        return None\n\n\ndef poly_der(xs: list, x: float):\n    \"\"\"\n    x is a point where the derivative of polynomial is evaluated.\n    returns the first derivative of polynomial at x.\n    \"\"\"\n    return xs[1]\n\n\ndef poly_der2(xs: list, x: float):\n    \"\"\"\n    x is a point where the second derivative of polynomial is evaluated.\n    returns the second derivative of polynomial at x.\n    \"\"\"\n    return xs[2]\n\n\ndef poly_der3(xs: list, x: float):\n    \"\"\"\n    x is a point where the third derivative of polynomial is evaluated.\n    returns the third derivative of polynomial at x.\n    \"\"\"\n    return xs[3]\n\n\ndef poly_der4(xs: list, x: float):\n    \"\"\"\n    x is a point where the fourth derivative of polynomial is evaluated.\n    returns the fourth derivative of polynomial at x.\n    \"\"\"\n    return xs[4]\n\n\ndef poly_der5(xs: list, x: float):\n    \"\"\"\n    x is a point where the fifth derivative of polynomial is evaluated.\n    returns the fifth derivative of polynomial at x.\n    \"\"\"\n    return xs[5]\n\n\ndef poly_der6(xs: list, x: float):\n    \"\"\"\n    x is a point where the sixth derivative of polynomial is evaluated.\n    returns the sixth derivative of polynomial at x.\n    \"\"\"\n    return xs[6]\n\n\ndef poly_der7(xs"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n == 0:\n        return 0.0\n\n    if n % 2 == 1:\n        return find_zero(xs[:-1])\n\n    # find first zero in even xs\n    for i in range(0, n, 2):\n        if xs[i]!= 0:\n            return find_zero(xs[i:])\n\n    return find_zero(xs[-1:])\n\n\nif __name__ == '__main__':\n    # tests\n    assert round(find_zero([0, 1, 1, 1]), 2) == -0.5\n    assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n % 2 == 1:\n        return None\n    for i in range(n / 2):\n        if xs[i] == 0:\n            continue\n        if xs[i] < 0:\n            continue\n        if xs[i] > 1:\n            continue\n        return xs[i]\n    return None"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        if xs[0] == 0:\n            return xs[1]\n        if xs[1] == 0:\n            return xs[0]\n        return 0.0\n    # even number of coeffs\n    if n % 2!= 0:\n        return 0.0\n\n    # find non zero coefficient\n    i = n // 2\n    while xs[i] == 0:\n        i -= 1\n        if i == 0:\n            return 0.0\n    return xs[i]\n\n\ndef solve_poly(xs: list, x: float):\n    \"\"\"\n    solve_poly finds x such that poly(x) = 0.\n    solve_poly returns only only zero point, even if there are many.\n    If there are many zero points, solve_poly returns first zero point.\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        if xs[0] == 0:\n            return xs[1]\n        if xs[1] == 0:\n            return xs[0]\n        return 0.0\n    # even number of coeffs\n    if n % 2!= 0:\n        return 0.0\n\n    # find non zero coefficient\n    i = n // 2\n    while xs[i] == 0:\n        i -= 1\n        if i == 0:\n            return 0.0\n    return xs[i]\n\n\ndef solve_poly2(xs: list):\n    \"\"\"\n    solve_poly2 finds x such that poly(x) = 0.\n    solve_poly2 returns only only zero point, even if there are many.\n    If there are many zero points, solve_poly2 returns first zero point.\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        if xs[0] == 0:\n            return xs[1]\n        if xs[1] == 0:\n            return xs[0]"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "n = len(xs)\n    if n % 2!= 0:\n        return float('nan')\n    else:\n        n //= 2\n        for i in range(n):\n            if xs[i]!= 0:\n                return -(math.pow(-1, i) * xs[i])\n        return float('nan')\n\n\nif __name__ == '__main__':\n    print(poly([-6, 11, -6, 1], 2))\n    print(find_zero([-6, 11, -6, 1]))"
    }
  ]
}