{
  "timestamp": "2025-09-14T16:17:53.157734",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 22,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values if isinstance(v, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values if isinstance(v, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [bool(v) for v in values if isinstance(v, bool)]\n\n\ndef filter_none(values: List[Any]) -> List[None]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, None, None]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None, None, None]\n    \"\"\"\n    return [None if v is None else v for v in values]\n\n\ndef filter_dicts(values: List[Any]) -> List[Dict[Any, Any]]:\n    \"\"\" Filter given list of any python values only for dicts"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return [x for x in values if isinstance(x, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [x for x in values if isinstance(x, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc']\n    \"\"\"\n    return [x for x in values if isinstance(x, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False, True, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [False, False, False]\n    \"\"\"\n    return [x for x in values if isinstance(x, bool)]\n\n\ndef filter_numbers(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for numbers\n    >>> filter_numbers(['a', 3.14, 5])\n    [3.14]\n    >>> filter_numbers([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [x for x in values if isinstance(x, float)]"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return [value for value in values if isinstance(value, int)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return [value for value in values if isinstance(value, int)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return [int(value) for value in values if isinstance(value, int)]"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return [int(value) for value in values if isinstance(value, int)]"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return [int(value) for value in values if isinstance(value, int)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 8.444444444444445,
      "candidate": "return [int(value) for value in values]"
    },
    {
      "rank": 9,
      "score": 8.444444444444445,
      "candidate": "return [int(x) for x in values]"
    },
    {
      "rank": 10,
      "score": 8.444444444444445,
      "candidate": "return [v for v in values if isinstance(v, int)]"
    },
    {
      "rank": 11,
      "score": 8.444444444444445,
      "candidate": "return [int(value) for value in values]"
    },
    {
      "rank": 12,
      "score": 8.444444444444445,
      "candidate": "return [int(v) for v in values]"
    },
    {
      "rank": 13,
      "score": 8.444444444444445,
      "candidate": "return [v for v in values if isinstance(v, int)]"
    },
    {
      "rank": 14,
      "score": 8.444444444444445,
      "candidate": "return [int(v) if isinstance(v, int) else v for v in values]"
    },
    {
      "rank": 15,
      "score": 8.444444444444445,
      "candidate": "return [int(v) for v in values]"
    },
    {
      "rank": 16,
      "score": 8.444444444444445,
      "candidate": "return [int(i) for i in values]"
    },
    {
      "rank": 17,
      "score": 8.444444444444445,
      "candidate": "return [int(x) for x in values if isinstance(x, int)]"
    },
    {
      "rank": 18,
      "score": 8.444444444444445,
      "candidate": "return [int(x) for x in values]"
    },
    {
      "rank": 19,
      "score": 8.444444444444445,
      "candidate": "return [x for x in values if isinstance(x, int)]"
    },
    {
      "rank": 20,
      "score": 8.444444444444445,
      "candidate": "return [int(x) for x in values]"
    },
    {
      "rank": 21,
      "score": 8.444444444444445,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]"
    },
    {
      "rank": 22,
      "score": 8.444444444444445,
      "candidate": "return [int(v) for v in values if isinstance(v, (int, float))]"
    },
    {
      "rank": 23,
      "score": 3.926139092254469,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]"
    },
    {
      "rank": 24,
      "score": 3.7896064077536957,
      "candidate": "return [value for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [value for value in values if isinstance(value, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, []]\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]\n\n\ndef filter_iterables(values: List[Any]) -> List[List[Any]]:\n    \"\"\" Filter given list of any python values only for iterables\n    >>> filter_iterables(['a', 3.14, 5])\n    [['a', 3.14, 5]]\n    >>> filter_iterables([1, 2, 3, 'abc', {}, []])\n    [[1, 2, 3, 'abc', {}, []]]\n    \"\"\"\n    return [value for value in values if isinstance(value, Iterable)]\n\n\ndef filter_tuples(values: List[Any]) -> List[Tuple[Any,...]]:\n    \"\"\" Filter given list of any python values only for tuples\n    >>> filter_tuples(['a', 3.14, 5])\n    [('a', 3.14, 5)]\n    >>> filter_tuples([1, 2, 3, 'abc', {}, []])\n    [[1, 2, 3, 'abc', {}, []]]\n    \"\"\"\n    return [value for value in values if isinstance(value, tuple)]\n\n\ndef filter_dicts(values: List["
    },
    {
      "rank": 25,
      "score": 3.782321827907003,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', '{}', '[]']\n    \"\"\"\n    return [str(v) for v in values]\n\n\ndef filter_dicts(values: List[Any]) -> List[dict]:\n    \"\"\" Filter given list of any python values only for dicts\n    >>> filter_dicts(['a', 3.14, 5])\n    [{}]\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    [{}, {}, {}, {}, {}]\n    \"\"\"\n    return [dict(v) for v in values]\n\n\ndef filter_lists(values: List[Any]) -> List[list]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    [['a'], ['3.14'], ['5']]\n    >>> filter_lists([1, 2, 3, 'abc', {}, []])\n    [[1], [2], [3], ['abc'], ['{}'], ['[]']]\n    \"\"\"\n    return [list(v) for v in values]\n\n\ndef filter_tuples(values: List[Any]) -> List[tuple]:\n    \"\"\" Filter given list of any python values only for tuples\n    >>> filter_tuples"
    },
    {
      "rank": 26,
      "score": 3.7690182832329846,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc']\n    \"\"\"\n    return [str(v) for v in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [bool(v) for v in values]\n\n\ndef filter_none(values: List[Any]) -> List[None]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, None, None]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None, None, None]\n    \"\"\"\n    return [None if v is None else v for v in values]\n\n\ndef filter_lists(values: List[Any]) -> List[List[Any]]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    [[], [3.14], [5]]\n    >>>"
    },
    {
      "rank": 27,
      "score": 3.761514928204013,
      "candidate": "return [value for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [value for value in values if isinstance(value, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}]\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]"
    },
    {
      "rank": 28,
      "score": 3.732824384460777,
      "candidate": "return [int(value) for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values if isinstance(value, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, [']]\n    \"\"\"\n    return [str(value) for value in values if isinstance(value, str)]\n\n\ndef filter_bool(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_bool(['a', 3.14, 5])\n    [False, False, False]\n    >>> filter_bool([1, 2, 3, 'abc', {}, []])\n    [False, False, False, False, False, []]\n    \"\"\"\n    return [bool(value) for value in values if isinstance(value, bool)]\n\n\ndef filter_numbers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for numbers\n    >>> filter_numbers(['a', 3.14, 5])\n    [3, 5]\n    >>> filter_numbers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n\ndef filter_none(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values"
    },
    {
      "rank": 29,
      "score": 3.6781200142854114,
      "candidate": "return [value if isinstance(value, int) else value for value in values]"
    },
    {
      "rank": 30,
      "score": 3.5285611131094576,
      "candidate": "return [\n        value if isinstance(value, int) else value for value in values\n    ]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, []]\n    \"\"\"\n    return [\n        value if isinstance(value, str) else value for value in values\n    ]"
    },
    {
      "rank": 31,
      "score": 3.5154997612479755,
      "candidate": "return [v for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [v for v in values if isinstance(v, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', '{}', '[]']\n    \"\"\"\n    return [v for v in values if isinstance(v, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [v for v in values if isinstance(v, bool)]\n\n\ndef filter_iterables(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for iterables\n    >>> filter_iterables(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_iterables([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [v for v in values if isinstance(v, Iterable)]\n\n\ndef filter_iterable_of_integers(values: List[Any]) -> List[int]:"
    },
    {
      "rank": 32,
      "score": 3.501766448946012,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values if isinstance(v, float)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, True, True]\n    \"\"\"\n    return [bool(v) for v in values if isinstance(v, bool)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', '{}', '[]']\n    \"\"\"\n    return [str(v) for v in values if isinstance(v, str)]\n\n\ndef filter_iterables(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for iterables\n    >>> filter_iterables(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_iterables([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [v for v in values if isinstance(v, Iterable)]\n\n\ndef filter_non_empty_iterables(values: List[Any]) ->"
    },
    {
      "rank": 33,
      "score": 3.4877725635611796,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_none(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for non-None values\n    >>> filter_none(['a', 3.14, 5])\n    [3.14]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values if v is not None]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values]\n\n\ndef filter_lists(values: List[Any]) -> List[List[Any]]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    [['a'], ['3.14']]\n    >>> filter_lists([1, 2, 3, 'abc', {}, []])\n    [[1], [2], [3]]\n    \"\"\"\n    return [list(v) for v in values]\n\n\ndef filter_dictionaries(values: List[Any]) -> List[dict]:\n    \"\"\" Filter given list of any python values only for dictionaries\n    >>> filter_dictionaries(['a', 3.14, 5])\n    [{'a': 3.14}]\n    >>> filter_d"
    },
    {
      "rank": 34,
      "score": 3.4656400595580994,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [3.14, 5.0]\n    \"\"\"\n    return [float(v) for v in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values]\n\n\ndef filter_lists(values: List[Any]) -> List[List[Any]]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    [['a'], ['3.14'], ['5']]\n    >>> filter_lists([1, 2, 3, 'abc', {}, []])\n    [[1], [2], [3]]\n    \"\"\"\n    return [list(v) for v in values]\n\n\ndef filter_tuples(values: List[Any]) -> List[Tuple[Any]]:\n    \"\"\" Filter given list of any python values only for tuples\n    >>> filter_tuples(['a', 3.14, 5])\n    [('a', '3.14', '5')]\n    >>> filter_tuples([1, 2, 3, 'abc', {}, []])\n    [(1, 2, 3)]\n    \"\"\"\n    return [tuple(v) for v in values]\n\n\ndef filter_dicts(values: List[Any]) -> List[Dict[Any, Any]]:\n    \"\"\" Filter given list of any python values only for dicts\n    >>> filter_dicts(['a', 3.14,"
    },
    {
      "rank": 35,
      "score": 3.4112724560515946,
      "candidate": "return [int(v) for v in values]\n\n\ndef get_integer(value: Any) -> int:\n    \"\"\" Get integer value from any python value\n    >>> get_integer('abc')\n    'abc'\n    >>> get_integer(1)\n    1\n    >>> get_integer(5)\n    5\n    \"\"\"\n    return int(value)\n\n\ndef get_integers(values: List[Any]) -> List[int]:\n    \"\"\" Get list of integers from given list of any python values\n    >>> get_integers(['a', 3.14, 5])\n    [5, 3.14, 5]\n    >>> get_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 5, 3.14, {}, []]\n    \"\"\"\n    return [get_integer(v) for v in values]"
    },
    {
      "rank": 36,
      "score": 3.410951252187612,
      "candidate": "return [\n        v if isinstance(v, int) else v\n        for v in values\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 3.406262911197099,
      "candidate": "return [int(value) for value in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(value) for value in values]\n\n\ndef filter_none(values: List[Any]) -> List[None]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, None, None]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None, None, None]\n    \"\"\"\n    return [value if value is not None else None for value in values]\n\n\ndef filter_dicts(values: List[Any]) -> List[Dict]:\n    \"\"\" Filter given list of any python values only for dicts\n    >>> filter_dicts(['a', 3.14, 5])\n    [{}]\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    [{}]\n    \"\"\"\n    return [value if isinstance(value, dict) else None for value in values]\n\n\ndef filter_lists(values: List[Any]) -> List[List]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    [[3.14]]\n    >>> filter_lists([1, 2, 3, 'abc', {},"
    },
    {
      "rank": 38,
      "score": 3.3837173645764542,
      "candidate": "return [int(x) for x in values]\n\n\ndef is_integer(value: Any) -> bool:\n    \"\"\" Check if given value is an integer\n    >>> is_integer(3)\n    True\n    >>> is_integer(3.14)\n    False\n    \"\"\"\n    return isinstance(value, int)"
    },
    {
      "rank": 39,
      "score": 3.3692332899977053,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values if isinstance(v, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values if isinstance(v, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [False, False, False]\n    \"\"\"\n    return [bool(v) for v in values if isinstance(v, bool)]\n\n\ndef filter_none(values: List[Any]) -> List[None]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, None]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None, None, None]\n    \"\"\"\n    return [None if v is None else v for v in values]\n\n\ndef filter_values(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for values\n    >>> filter_values(['a', 3.14, 5])"
    },
    {
      "rank": 40,
      "score": 3.3238442690503462,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc']\n    \"\"\"\n    return [str(v) for v in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False, False, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [False, False, False]\n    \"\"\"\n    return [bool(v) for v in values]"
    },
    {
      "rank": 41,
      "score": 3.305838144420434,
      "candidate": "return [\n        value if isinstance(value, int) else value\n        for value in values\n    ]"
    },
    {
      "rank": 42,
      "score": 3.2712800217929825,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values if isinstance(v, float)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False, False, False]\n    \"\"\"\n    return [bool(v) for v in values if isinstance(v, bool)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, [']]\n    \"\"\"\n    return [str(v) for v in values if isinstance(v, str)]\n\n\ndef filter_none(values: List[Any]) -> List[None]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, None, None]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None, None, None, None, None]\n    \"\"\"\n    return [None if v is None else v for v in values]\n\n\ndef filter_dict(values: List[Any]) -> List[Dict[str, Any]]:\n    \"\"\" Filter given"
    },
    {
      "rank": 43,
      "score": 3.2483570765056164,
      "candidate": "return [int(v) for v in values]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 3.1878490091728358,
      "candidate": "return [\n        v\n        for v in values\n        if isinstance(v, int)\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 3.180818012523817,
      "candidate": "return [int(value) for value in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(value) for value in values]"
    },
    {
      "rank": 46,
      "score": 3.180697802754207,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [False, False, False]\n    \"\"\"\n    return [bool(v) for v in values]"
    },
    {
      "rank": 47,
      "score": 3.1718091447842305,
      "candidate": "return [\n        int(value) if isinstance(value, (int, float)) else value\n        for value in values\n    ]"
    },
    {
      "rank": 48,
      "score": 3.165631715701782,
      "candidate": "return [int(x) if isinstance(x, int) else x for x in values]\n\n\ndef filter_float_values(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_float_values(['a', 3.14, 5])\n    [3.14]\n    >>> filter_float_values([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) if isinstance(x, float) else x for x in values]\n\n\ndef filter_boolean_values(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_boolean_values(['a', 3.14, 5])\n    [False]\n    >>> filter_boolean_values([1, 2, 3, 'abc', {}, []])\n    [True]\n    \"\"\"\n    return [bool(x) if isinstance(x, bool) else x for x in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', '{}', [']]\n    \"\"\"\n    return [str(x) if isinstance(x, str) else x for x in values]\n\n\ndef filter_dicts(values: List[Any]) -> List[Dict]:\n    \"\"\" Filter given list of any python values only for dicts\n    >>> filter_dicts(['a', 3.14, 5])\n    [{'a': 3.14, '5': 5}]\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    [{'1': True, '2': False, '3': True, 'abc': False, '{}': False, [[]]: False}]"
    },
    {
      "rank": 49,
      "score": 3.1620419846973977,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, True]\n    \"\"\"\n    return [bool(v) for v in values]\n\n\ndef filter_dicts(values: List[Any]) -> List[Dict[Any, Any]]:\n    \"\"\" Filter given list of any python values only for dicts\n    >>> filter_dicts(['a', 3.14, 5])\n    [{'a': 'a', '3.14': '3.14', '5': '5'}]\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    [{'1': '1', '2': '2', '3': '3'}]\n    \"\"\"\n    return [dict(v) for v in values]\n\n\ndef filter_lists(values: List[Any]) -> List[List[Any]]:\n    \"\"\" Filter given list"
    },
    {
      "rank": 50,
      "score": 3.157123666297637,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values if isinstance(v, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values if isinstance(v, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True]\n    \"\"\"\n    return [bool(v) for v in values if isinstance(v, bool)]\n\n\ndef filter_none(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None]\n    \"\"\"\n    return [v for v in values if v is not None]"
    },
    {
      "rank": 51,
      "score": 3.1209811357830173,
      "candidate": "return [int(value) for value in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, []]\n    \"\"\"\n    return [str(value) for value in values]"
    },
    {
      "rank": 52,
      "score": 3.104431797502378,
      "candidate": "return [int(value) for value in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', '{}', '[]']\n    \"\"\"\n    return [str(value) for value in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0, 'abc', {}, []]\n    \"\"\"\n    return [float(value) for value in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [False, False, False, False, False, False]\n    \"\"\"\n    return [bool(value) for value in values]"
    },
    {
      "rank": 53,
      "score": 3.0984306179345618,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, True, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [False, False, False]\n    \"\"\"\n    return [bool(v) for v in values]\n\n\ndef filter_object(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for objects\n    >>> filter_object(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_object([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return values\n\n\ndef filter_none(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, 3.14, 5]\n    >>> filter_none([1, 2, 3, 'abc', {}, []]"
    },
    {
      "rank": 54,
      "score": 3.085684140594985,
      "candidate": "return [int(value) for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values if isinstance(value, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(value) for value in values if isinstance(value, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False, True, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, True, True]\n    \"\"\"\n    return [bool(value) for value in values if isinstance(value, bool)]\n\n\ndef filter_none(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if value is None]\n\n\ndef filter_nones(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_nones("
    },
    {
      "rank": 55,
      "score": 3.055461294854933,
      "candidate": "return [int(x) for x in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [False]\n    \"\"\"\n    return [bool(x) for x in values]"
    },
    {
      "rank": 56,
      "score": 3.043523534119086,
      "candidate": "return [v for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [v for v in values if isinstance(v, float)]\n\n\ndef filter_str(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_str(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_str([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [v for v in values if isinstance(v, str)]"
    },
    {
      "rank": 57,
      "score": 3.033764102343962,
      "candidate": "return [int(value) if isinstance(value, str) else value for value in values]\n\n\ndef filter_list(values: List[Any],\n                filters: List[List[Any]]) -> List[Any]:\n    \"\"\" Filter given list of any python values using given list of filters\n    >>> filter_list(['a', 3.14, 5], [['a'], ['b'], ['c']])\n    ['a', 'b', 'c']\n    >>> filter_list([1, 2, 3, 'abc', {}, [], {'a': 'b'}], [['a'], ['b'], ['c']])\n    [1, 2, 3]\n    \"\"\"\n    return [value for filter_value in filter_integers(values)\n            for filter_value in filters\n            if all(filter_value[index] == value\n                   for index, value in enumerate(filter_value))]"
    },
    {
      "rank": 58,
      "score": 2.993251387631033,
      "candidate": "return [int(x) if isinstance(x, int) else x for x in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) if isinstance(x, float) else x for x in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(x) if isinstance(x, str) else x for x in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [False, False, False]\n    \"\"\"\n    return [bool(x) if isinstance(x, bool) else x for x in values]\n\n\ndef filter_lists(values: List[Any]) -> List[List[Any]]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    [[], [3.14]]\n    >>> filter_lists([1, 2, 3, 'abc', {}, []])\n    [[], [1, 2, 3]]\n    \"\"\"\n    return [list(x) if isinstance(x, list) else x for x in values]\n\n\ndef filter_dicts(values: List[Any]) -> List[Dict[Any"
    },
    {
      "rank": 59,
      "score": 2.982086980445024,
      "candidate": "return [value for value in values if isinstance(value, int)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc']\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]\n\n\ndef filter_none(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    ['3.14', '5']\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [value for value in values if value is None]\n\n\ndef filter_values(values: List[Any], filter_func: Callable[[Any], bool]) -> List[Any]:\n    \"\"\" Filter given list of any python values with a function that returns true or false\n    >>> filter_values(['a', 3.14, 5], lambda x: x > 5)\n    ['a', '3.14']\n    >>> filter_values([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc']\n    \"\"\"\n    return [value for value in values if filter_func(value)]\n\n\ndef filter_none_values(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values with a function that returns true or false\n    >>> filter_none_values(['a', 3.14, 5])\n    ['3.14', '5']\n    >>> filter_none_values([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [value for value in values if value is None]\n\n\ndef filter_values_by_key(\n    values: List[Any],"
    },
    {
      "rank": 60,
      "score": 2.963994939209833,
      "candidate": "return [int(x) for x in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}]\n    \"\"\"\n    return [str(x) for x in values]"
    },
    {
      "rank": 61,
      "score": 2.94217585880588,
      "candidate": "return [int(value) for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [3.14, 1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values if isinstance(value, float)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [bool(value) for value in values if isinstance(value, bool)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}]\n    \"\"\"\n    return [str(value) for value in values if isinstance(value, str)]"
    },
    {
      "rank": 62,
      "score": 2.930867849414408,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 2.9071705116680913,
      "candidate": "return [int(value) for value in values if value is not None]"
    },
    {
      "rank": 64,
      "score": 2.887111849756732,
      "candidate": "return [int(x) for x in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(x) for x in values]\n\n\ndef filter_dicts(values: List[Any]) -> List[Dict]:\n    \"\"\" Filter given list of any python values only for dictionaries\n    >>> filter_dicts(['a', 3.14, 5])\n    [{'a': '3.14'}]\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    [{}, {}, {}]\n    \"\"\"\n    return [dict(x) for x in values]"
    },
    {
      "rank": 65,
      "score": 2.8829315215254097,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values if isinstance(v, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values if isinstance(v, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [bool(v) for v in values if isinstance(v, bool)]"
    },
    {
      "rank": 66,
      "score": 2.882923312638332,
      "candidate": "return [int(value) for value in values]\n\n\ndef filter_float(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_float(['a', 3.14, 5])\n    [3.14]\n    >>> filter_float([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values]"
    },
    {
      "rank": 67,
      "score": 2.8541531251033616,
      "candidate": "return [value for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [value for value in values if isinstance(value, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, True, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, True, True]\n    \"\"\"\n    return [value for value in values if isinstance(value, bool)]\n\n\ndef filter_none(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [value for value in values if value is None]\n\n\ndef filter_list(values: List[Any]) -> List[List[Any]]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_list(['a', 3"
    },
    {
      "rank": 68,
      "score": 2.8504963247670663,
      "candidate": "return [int(value) for value in values]\n\n\ndef sum_integers(values: List[int]) -> int:\n    \"\"\" Sum given list of integers\n    >>> sum_integers([1, 2, 3, 4, 5, 6])\n    21\n    \"\"\"\n    return sum(values)\n\n\ndef print_integers(values: List[int]) -> None:\n    \"\"\" Print given list of integers\n    >>> print_integers([1, 2, 3, 4, 5, 6])\n    1 2 3 4 5 6\n    \"\"\"\n    for value in values:\n        print(value)\n\n\ndef print_integers_with_names(values: List[int]) -> None:\n    \"\"\" Print given list of integers with names\n    >>> print_integers_with_names([1, 2, 3, 4, 5, 6])\n    1 - a\n    2 - b\n    3 - c\n    4 - d\n    5 - e\n    6 - f\n    \"\"\"\n    for value, name in zip(values, ['a', 'b', 'c', 'd', 'e', 'f']):\n        print(f'{name}: {value}')"
    },
    {
      "rank": 69,
      "score": 2.8494481522053556,
      "candidate": "return [int(i) for i in values]"
    },
    {
      "rank": 70,
      "score": 2.8453938120743927,
      "candidate": "return [int(v) for v in values]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 2.8074588597918417,
      "candidate": "return [value if isinstance(value, int) else value for value in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc']\n    \"\"\"\n    return [value if isinstance(value, str) else value for value in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False, True, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, True, True]\n    \"\"\"\n    return [value if isinstance(value, bool) else value for value in values]\n\n\ndef filter_numbers(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for numbers\n    >>> filter_numbers(['a', 3.14, 5])\n    [3.14, 5.0]\n    >>> filter_numbers([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [value if isinstance(value, float) else value for value in values]\n\n\ndef filter_none(values: List[Any]) -> List[None]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, None, None]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None, None, None]\n    \"\"\"\n    return [value if value is None else value for value in values]\n\n\ndef filter_any(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values\n    >>> filter_any("
    },
    {
      "rank": 72,
      "score": 2.769680614520106,
      "candidate": "return [int(value) for value in values if isinstance(value, int)]"
    },
    {
      "rank": 73,
      "score": 2.768291153593769,
      "candidate": "return [int(value) for value in values]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 2.7671351232148718,
      "candidate": "return [int(v) for v in values if isinstance(v, int)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values if isinstance(v, str)]"
    },
    {
      "rank": 75,
      "score": 2.765262807032524,
      "candidate": "return [int(value) for value in values if isinstance(value, (int, float))]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    [5]\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [str(value) for value in values if isinstance(value, str)]\n\n\ndef filter_iterable(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for iterable\n    >>> filter_iterable(['a', 3.14, 5])\n    [5]\n    >>> filter_iterable([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if hasattr(value, '__iter__')]\n\n\ndef filter_dicts(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for dicts\n    >>> filter_dicts(['a', 3.14, 5])\n    [5]\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, dict)]\n\n\ndef filter_list_of_dicts(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for list of dicts\n    >>> filter_list_of_dicts(['a', 3.14, 5])\n    [5]\n    >>> filter_list_of_dicts([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, list) and\n            all(isinstance(value_item, dict) for value_item in value)]\n\n\ndef filter_list_of_strings(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given"
    },
    {
      "rank": 76,
      "score": 2.760412881077355,
      "candidate": "return [value for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [value for value in values if isinstance(value, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [value for value in values if isinstance(value, bool)]\n\n\ndef filter_numbers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for numbers\n    >>> filter_numbers(['a', 3.14, 5])\n    [3, 5]\n    >>> filter_numbers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int) or isinstance(value, float)]\n\n\ndef filter_others(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for other types\n    >>> filter_others(['a', 3"
    },
    {
      "rank": 77,
      "score": 2.7278086377374087,
      "candidate": "return [v for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [v for v in values if isinstance(v, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', '{}', '[]']\n    \"\"\"\n    return [v for v in values if isinstance(v, str)]\n\n\ndef filter_lists(values: List[Any]) -> List[List[Any]]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    [[], [3.14], [5]]\n    >>> filter_lists([1, 2, 3, 'abc', {}, []])\n    [[1], [2], [3], ['abc'], {}, [[]]]\n    \"\"\"\n    return [v for v in values if isinstance(v, List[Any])]\n\n\ndef filter_dicts(values: List[Any]) -> List[Dict[Any, Any]]:\n    \"\"\" Filter given list of any python values only for dicts\n    >>> filter_dicts(['a', 3.14, 5])\n    [{}, {'a': 3.14, 'b': 5}, {'a': 3.14, 'b': 5}]\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    [{}, {'a': 1, 'b': 2, 'c': 3}, {'a':"
    },
    {
      "rank": 78,
      "score": 2.718856235379514,
      "candidate": "return [int(x) for x in values if isinstance(x, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values if isinstance(x, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, []]\n    \"\"\"\n    return [str(x) for x in values if isinstance(x, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [bool(x) for x in values if isinstance(x, bool)]\n\n\ndef filter_numbers(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for numbers\n    >>> filter_numbers(['a', 3.14, 5])\n    [3.14, 5]\n    >>> filter_numbers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [float(x) for x in values if isinstance(x, float)]\n\n\ndef filter_pairs(values: List[Any]) -> List[tuple]:\n    \"\"\" Filter given list"
    },
    {
      "rank": 79,
      "score": 2.6996806550405976,
      "candidate": "return [int(i) for i in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(i) for i in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, []]\n    \"\"\"\n    return [str(i) for i in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [bool(i) for i in values]"
    },
    {
      "rank": 80,
      "score": 2.6991466938853015,
      "candidate": "return [value for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [value for value in values if isinstance(value, float)]\n\n\ndef filter_str(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_str(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_str([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, []]\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]\n\n\ndef filter_none(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [value for value in values if value is None]\n\n\ndef filter_none_if_empty(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None if empty\n    >>> filter_none_if_empty(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_none_if_empty([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [value for value in values if value is not None and value!= []]\n\n\ndef filter_none_if_empty_or_none(values: List[Any"
    },
    {
      "rank": 81,
      "score": 2.677440122697438,
      "candidate": "return [int(x) for x in values]\n\n\ndef get_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> get_integers(['a', 3.14, 5])\n    [5]\n    >>> get_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(x) for x in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values]\n\n\ndef get_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> get_floats(['a', 3.14, 5])\n    [3.14]\n    >>> get_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values]"
    },
    {
      "rank": 82,
      "score": 2.6615389998470205,
      "candidate": "return [int(x) for x in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, []]\n    \"\"\"\n    return [str(x) for x in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [bool(x) for x in values]"
    },
    {
      "rank": 83,
      "score": 2.6400778958026456,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [3.14]\n    \"\"\"\n    return [float(v) for v in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['abc', '1', '2', '3']\n    \"\"\"\n    return [str(v) for v in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False]\n    \"\"\"\n    return [bool(v) for v in values]\n\n\ndef filter_none(values: List[Any]) -> List[None]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, 3.14]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None, None, None]\n    \"\"\"\n    return [None for v in values]\n\n\ndef filter_unique(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for unique values\n    >>> filter_unique(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_unique([1, 2, 3, 'abc', {}, []])\n    [1, 2"
    },
    {
      "rank": 84,
      "score": 2.580391238388681,
      "candidate": "return [int(value) for value in values if value.isdigit()]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values if value.isnumeric()]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(value) for value in values if isinstance(value, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [bool(value) for value in values if isinstance(value, bool)]\n\n\ndef filter_none(values: List[Any]) -> List[None]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, None, None]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None, None, None]\n    \"\"\"\n    return [None for value in values if value is None]\n\n\ndef filter_objects(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for objects\n    >>> filter_objects(['a', 3"
    },
    {
      "rank": 85,
      "score": 2.5459879622393946,
      "candidate": "return [int(v) for v in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values]"
    },
    {
      "rank": 86,
      "score": 2.493584439832788,
      "candidate": "return [int(value) for value in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(value) for value in values]"
    },
    {
      "rank": 87,
      "score": 2.4711445355220496,
      "candidate": "return [int(i) for i in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(i) for i in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(i) for i in values]\n\n\ndef filter_bytes(values: List[Any]) -> List[bytes]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_bytes(['a', 3.14, 5])\n    [b'a', b'3.14']\n    >>> filter_bytes([1, 2, 3, 'abc', {}, []])\n    [b'1', b'2', b'3']\n    \"\"\"\n    return [bytes(i, 'utf-8') for i in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False]\n    \"\"\"\n    return [bool(i) for i in values]\n\n\ndef filter_numbers(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for numbers\n    >>> filter_numbers(['a', 3.14, 5])\n    [3.14]\n    >>> filter_numbers"
    },
    {
      "rank": 88,
      "score": 2.446832512996986,
      "candidate": "return [value for value in values if isinstance(value, int)]\n\n\ndef get_n_random_integers(n: int) -> List[int]:\n    \"\"\" Get n random integers from given list of any python values\n    >>> get_n_random_integers(5)\n    [1, 2, 3, 4, 5]\n    >>> get_n_random_integers(10)\n    [5, 7, 9, 11, 13, 15]\n    \"\"\"\n    return [random.randint(1, n) for _ in range(n)]\n\n\ndef get_n_random_integers_in_range(n: int, lower_bound: int, upper_bound: int) -> List[int]:\n    \"\"\" Get n random integers from given list of any python values\n    >>> get_n_random_integers_in_range(5, 1, 10)\n    [1, 2, 3, 4, 5]\n    >>> get_n_random_integers_in_range(10, 1, 100)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> get_n_random_integers_in_range(10, 1, 100, lower_bound=1, upper_bound=10)\n    [5, 7, 9, 11, 13, 15, 17, 19, 21, 23]\n    \"\"\"\n    assert lower_bound <= upper_bound\n    return [random.randint(lower_bound, upper_bound) for _ in range(n)]"
    },
    {
      "rank": 89,
      "score": 2.4245032112888487,
      "candidate": "return [int(i) for i in values]"
    },
    {
      "rank": 90,
      "score": 2.4018966879596646,
      "candidate": "return [int(x) for x in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(x) for x in values]\n\n\ndef filter_dictionaries(values: List[Any]) -> List[Dict]:\n    \"\"\" Filter given list of any python values only for dictionaries\n    >>> filter_dictionaries(['a', 3.14, 5])\n    [{'a': 3.14, '5': 5}]\n    >>> filter_dictionaries([1, 2, 3, 'abc', {}, []])\n    [{'1': 1, '2': 2, '3': 3}]\n    \"\"\"\n    return [{key: value for key, value in x.items()} for x in values]\n\n\ndef filter_lists(values: List[Any]) -> List[List]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    [[3.14], [5]]\n    >>> filter_lists([1, 2, 3, 'abc', {}, []])\n    [[1, 2, 3], []]\n    \"\"\"\n    return [list(x) for x in values]\n\n\ndef filter_tuple(values: List[Any]) -> List[Tuple]:\n    \"\"\" Filter given list of any python values only for tuples\n    >>> filter_"
    },
    {
      "rank": 91,
      "score": 2.389578175014489,
      "candidate": "return [int(x) for x in values if isinstance(x, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values if isinstance(x, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3']\n    \"\"\"\n    return [str(x) for x in values if isinstance(x, str)]"
    },
    {
      "rank": 92,
      "score": 2.3359069755507846,
      "candidate": "return [v for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [v for v in values if isinstance(v, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', '{}', '[]']\n    \"\"\"\n    return [v for v in values if isinstance(v, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False, True, False]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, False, False]\n    \"\"\"\n    return [v for v in values if isinstance(v, bool)]\n\n\ndef filter_none(values: List[Any]) -> List[None]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    [None, None, None]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [None, None, None]\n    \"\"\"\n    return [v for v in values if v is None]\n\n\ndef filter_numpy(values: List[Any]) -> List[np.ndarray]:\n    \"\"\" Filter given list of any python values only for numpy arrays\n    >>> filter_numpy"
    },
    {
      "rank": 93,
      "score": 2.293848149332354,
      "candidate": "return [int(v) for v in values]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 2.287625906893272,
      "candidate": "return [\n        int(value)\n        if isinstance(value, (int, float))\n        else value\n        for value in values\n    ]"
    },
    {
      "rank": 95,
      "score": 2.260739004816286,
      "candidate": "return [int(value) for value in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14', '5']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', '{}', '[]']\n    \"\"\"\n    return [str(value) for value in values]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [False, True, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [False, False, False, False, False, False]\n    \"\"\"\n    return [bool(value) for value in values]\n\n\ndef filter_numbers(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for numbers\n    >>> filter_numbers(['a', 3.14, 5])\n    [3.14, 5.0]\n    >>> filter_numbers([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(value) for value in values]\n\n\ndef filter_strings_and_booleans(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings and booleans\n    >>>"
    },
    {
      "rank": 96,
      "score": 2.137541083743484,
      "candidate": "return [int(value) for value in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc']\n    \"\"\"\n    return [str(value) for value in values]"
    },
    {
      "rank": 97,
      "score": 2.118479922318633,
      "candidate": "return [int(x) for x in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', '3.14']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['1', '2', '3', 'abc', {}, []]\n    \"\"\"\n    return [str(x) for x in values]"
    },
    {
      "rank": 98,
      "score": 2.043359877671101,
      "candidate": "return [x for x in values if isinstance(x, int)]\n\n\ndef is_numeric(value: Any) -> bool:\n    \"\"\" Returns True if given value is numeric\n    >>> is_numeric(1)\n    True\n    >>> is_numeric(1.0)\n    True\n    >>> is_numeric('abc')\n    False\n    >>> is_numeric([1, 2, 3])\n    False\n    \"\"\"\n    return isinstance(value, (int, float))\n\n\ndef is_iterable(value: Any) -> bool:\n    \"\"\" Returns True if given value is iterable\n    >>> is_iterable(1)\n    False\n    >>> is_iterable([1, 2, 3])\n    True\n    \"\"\"\n    return isinstance(value, Iterable)\n\n\ndef is_iterable_of_integers(values: List[Any]) -> bool:\n    \"\"\" Returns True if given list of any python values is iterable of integers\n    >>> is_iterable_of_integers([1, 2, 3, 'abc', {}, []])\n    False\n    >>> is_iterable_of_integers([1, 2, 3.14, 5])\n    True\n    \"\"\"\n    return is_iterable(filter_integers(values))\n\n\ndef is_iterable_of_integers_and_numeric(values: List[Any]) -> bool:\n    \"\"\" Returns True if given list of any python values is iterable of integers\n    and numeric values\n    >>> is_iterable_of_integers_and_numeric([1, 2, 3.14, 5])\n    True\n    >>> is_iterable_of_integers_and_numeric([1, 2, 3, 'abc', {}, []])\n    False\n    \"\"\"\n    return is_iterable(filter_integers(values)) and is_numeric(filter_integers(values))\n\n\ndef is_iterable_of_integers_and_iterable_of_integers(values: List[Any]) -> bool:\n    \"\"\" Returns True if given list of any python values is iterable of integers\n    and iterable of integers values\n    >>> is_iterable_of_integ"
    },
    {
      "rank": 99,
      "score": 2.020164938060112,
      "candidate": "return [int(x) for x in values]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(x) for x in values]"
    },
    {
      "rank": 100,
      "score": 1.6901274479551278,
      "candidate": "return [int(i) for i in values]"
    }
  ]
}