{
  "timestamp": "2025-09-14T16:13:49.171922",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 13,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if a < 0 or b < 0:\n        raise ValueError('greatest_common_divisor requires non-negative integers')\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return 1\n    # find the gcd of a and b\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if a % b == 0:\n        return a // b\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\ndef find_max_common_divisor(a: int, b: int) -> int:\n    \"\"\" Find the greatest common divisor of two integers a and b\n    >>> find_max_common_divisor(25, 15)\n    5\n    >>> find_max_common_divisor(3, 5)\n    1\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    return greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "while a % b:\n        a, b = b, a % b\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(13)\n    False\n    >>> is_prime(15)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    n = n - 1\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_factor(n: int) -> bool:\n    \"\"\" Return True if n is a prime factor of a positive integer\n    >>> is_prime_factor(2)\n    True\n    >>> is_prime_factor(3)\n    True\n    >>> is_prime_factor(5)\n    True\n    >>> is_prime_factor(7)\n    True\n    >>> is_prime_factor(11)\n    False\n    >>> is_prime_factor(13)\n    False\n    >>> is_prime_factor(15)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    n = n - 1\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_factorize(n: int) -> List[int]:\n    \"\"\" Return a list of prime factors of n\n    >>> prime_factorize(2)\n    [2]\n    >>> prime_factorize(3)\n    [3]\n    >>> prime_factorize(5)\n    [5]\n    >>> prime_factorize(7)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Return True if s is a palindrome.\n    >>> is_palindrome('A man, a plan, a canal: Panama')\n    True\n    >>> is_palindrome('race a car')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome_prime(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome prime.\n    >>> is_palindrome_prime(2)\n    True\n    >>> is_palindrome_prime(3)\n    True\n    >>> is_palindrome_prime(4)\n    True\n    >>> is_palindrome_prime(5)\n    False\n    \"\"\"\n    if not is_prime(n):\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is prime and is a palindrome.\n    >>> is_prime_palindrome(2)\n    True\n    >>> is_prime_palindrome(3)\n    True"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "while a!= 0:\n        a, b = b % a, a\n    return b\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b % a, a\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    225\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef solve_p05(a: int, b: int) -> int:\n    \"\"\" Return the smallest integer greater than a and less than b\n    >>> solve_p05(4, 6)\n    2\n    >>> solve_p05(4, 7)\n    4\n    >>> solve_p05(4, 1)\n    0\n    >>> solve_p05(4, 0)\n    4\n    \"\"\"\n    return max(a, b) - min(a, b) + 1\n\ndef solve_p05a(a: int, b: int) -> int:\n    \"\"\" Return the smallest integer greater than a and less than b\n    >>> solve_p05a(4, 6)\n    2\n    >>> solve_p05a(4, 7)\n    4\n    >>> solve_p05a(4, 1)\n    4\n    >>> solve_p05a(4, 0)\n    4\n    \"\"\"\n    return min(a, b) - max(a, b) + 1\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a!= 0:\n        a, b = b % a, a\n    return b\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    25\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a!= 0:\n        a, b = b % a, a\n    return b\n\ndef greatest_common_divisor_and_remainder(a: int, b: int) -> Tuple[int, int]:\n    \"\"\" Return a tuple of two integers a and b with the greatest common divisor and remainder\n    >>> greatest_common_divisor_and_remainder(3, 5)\n    (3, 1)\n    >>> greatest_common_divisor_and_remainder(25, 15)\n    (5, 5)\n    \"\"\"\n    a, b = greatest_common_divisor(a, b), a % b\n    return a, b\n\ndef least_common_multiple_and_remainder(a: int, b: int) -> Tuple[int, int]:\n    \"\"\" Return a tuple of two integers a and b with the least common multiple and remainder\n    >>> least_common_multiple_and_remainder(3, 5)\n    (3, 1)\n    >>> least_common_multiple_and_remainder(25, 15)\n    (15, 5)\n    \"\"\"\n    a, b = least_common_multiple(a, b), a % b\n    return a, b\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome, False otherwise\n    >>> is_palindrome(42)\n    True\n    >>> is_palindrome(42)\n    False\n    \"\"\"\n    n = str(n)\n    return n == n[::-1]"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "while a > 0:\n        a, b = b, a % b\n    return b\n\ndef solve(n: int, k: int) -> int:\n    \"\"\" Return the kth fibonacci number\n    >>> solve(10, 2)\n    25\n    >>> solve(10, 3)\n    23\n    \"\"\"\n    if k > 1:\n        return fibonacci(n, k - 1) + fibonacci(n, k - 2)\n    else:\n        return fibonacci(n)\n\ndef fibonacci(n: int, k: int) -> int:\n    \"\"\" Return the nth fibonacci number\n    >>> fibonacci(10, 1)\n    10\n    >>> fibonacci(10, 2)\n    35\n    >>> fibonacci(10, 3)\n    55\n    \"\"\"\n    if k == 1:\n        return n\n    else:\n        return fibonacci(n - 1, k - 1) + fibonacci(n - 2, k - 1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "while a % b!= 0:\n        a, b = b, a % b\n    return b\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns true if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    True\n    >>> is_prime(19)\n    False\n    >>> is_prime(20)\n    True\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    True\n    >>> is_prime(23)\n    False\n    >>> is_prime(24)\n    True\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    True\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    True\n    >>> is_prime(29)\n    False\n    >>> is_prime(30)\n    True\n    >>> is_prime(31)\n    False\n    >>> is_prime(32)\n    True\n    >>> is_prime(33)\n    False\n    >>> is_prime(34)\n    True\n    >>> is_prime(35)\n    False\n    >>> is_prime(36)\n    True\n    >>> is_prime(37)\n    False\n    >>> is_prime(38)\n    True\n    >>> is_prime(39)\n    False\n    >>> is_prime(40)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if a > b:\n        return greatest_common_divisor(b, a)\n    elif a == b:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\ndef least_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a least common divisor of two integers a and b\n    >>> least_common_divisor(3, 5)\n    3\n    >>> least_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a > b:\n        return least_common_divisor(b, a)\n    elif a == b:\n        return a\n    else:\n        return least_common_divisor(b, a % b)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while a!= b:\n        a, b = a % b, b % a\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    225\n    \"\"\"\n    return a * b // gcd(a, b)\n\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome, otherwise False\n    >>> is_palindrome(0)\n    False\n    >>> is_palindrome(1)\n    True\n    >>> is_palindrome(10)\n    True\n    >>> is_palindrome(11)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number, otherwise False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(11"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if not n % 2:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime_fast(2)\n    False\n    >>> is_prime_fast(3)\n    True\n    >>> is_prime_fast(5)\n    True\n    >>> is_prime_fast(25)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if not n % 2:\n        return False\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    i = 7\n    while i <= n:\n        if not n % i:\n            return False\n        i += 6\n    return True\n\ndef is_prime_fast_naive(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime_fast_naive(2)\n    False\n    >>> is_prime_fast_naive(3)\n    True\n    >>> is_prime_fast_naive(5)\n    True\n    >>> is_prime_fast_naive(25)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if not n % 2:\n        return False\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    i = 7\n    while i <= n:\n        if not n % i:\n            return False"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_prime_mod_two(n: int) -> bool:\n    \"\"\" Return True if n is a prime number modulo 2\n    >>> is_prime_mod_two(3)\n    False\n    >>> is_prime_mod_two(4)\n    True\n    >>> is_prime_mod_two(5)\n    False\n    >>> is_prime_mod_two(6)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_prime_mod_two(n: int) -> bool:\n    \"\"\" Return True if n is a"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "while a % b > 0:\n        a = a - b\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_list(n: int, list: list) -> bool:\n    \"\"\" Return true if n is prime or in the list of primes\n    >>> is_prime_list(2, [2])\n    True\n    >>> is_prime_list(2, [3])\n    False\n    >>> is_prime_list(5, [2, 3, 5])\n    True\n    >>> is_prime_list(5, [2, 3, 6])\n    False\n    \"\"\"\n    for i in range(1, n + 1):\n        if i in list:\n            continue\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_list_reversed(n: int, list: list) -> bool:\n    \"\"\" Return true if n is prime or in the list of primes\n    >>> is_prime_list_reversed(2, [2])\n    True\n    >>> is_prime_list_reversed(2, [3])\n    False\n    >>> is_prime_list_reversed(5, [2, 3, 5])\n    True\n    >>> is_prime_list_reversed(5, [2, 3, 6])\n    False\n    \"\"\"\n    for i in range(1, n + 1):\n        if i in list:\n            continue\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime(n: int) -> bool:"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(6)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_list(n: int) -> bool:\n    \"\"\" Return true if n is a prime number, or false if n is not prime\n    >>> is_prime_list(2)\n    True\n    >>> is_prime_list(6)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_list_2(n: int) -> bool:\n    \"\"\" Return true if n is a prime number, or false if n is not prime\n    >>> is_prime_list_2(2)\n    True\n    >>> is_prime_list_2(6)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_list_3(n: int) -> bool:\n    \"\"\" Return true if n is a prime number, or false if n is not prime\n    >>> is_prime_list_3(2)\n    True\n    >>> is_prime_list_3(6)\n    False\n    \"\"\"\n    if n < 2"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "while a!= 0:\n        a, b = b % a, a\n    return b\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome, False otherwise\n    >>> is_palindrome(123)\n    True\n    >>> is_palindrome(1234)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef is_prime_list(n: int, primes: List[int]) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime_list(3, [2, 5])\n    True\n    >>> is_prime_list(4, [2, 5])\n    False\n    >>> is_prime_list(100, [2, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return gcd(a, b)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "while b > 0:\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(3)\n    True\n    >>> is_prime_fast(4)\n    True\n    >>> is_prime_fast(5)\n    False\n    >>> is_prime_fast(6)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n % 2 == 0:\n        return False\n    if n < 17:"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "while a!= b:\n        a, b = b, a % b\n    return b\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" Return the sum of all divisors of n\n    >>> sum_of_divisors(25)\n    18\n    >>> sum_of_divisors(0)\n    0\n    >>> sum_of_divisors(3)\n    6\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    divisors = [1]\n    for i in range(2, n + 1):\n        divisors.append(i)\n        for d in divisors:\n            if n % d == 0:\n                divisors[divisors.index(d)] += 1\n                if i!= d:\n                    divisors[divisors.index(d)] -= 1\n    return sum(divisors)\n\ndef sum_of_divisors_except_one(n: int) -> int:\n    \"\"\" Return the sum of all divisors of n except 1\n    >>> sum_of_divisors_except_one(25)\n    18\n    >>> sum_of_divisors_except_one(0)\n    0\n    >>> sum_of_divisors_except_one(3)\n    6\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    divisors = [1]\n    for i in range(2, n + 1):\n        divisors.append(i)\n        for d in divisors:\n            if n % d == 0:\n                if d!= 1:\n                    divisors[divisors.index(d)] += 1\n    return sum(divisors)\n\ndef sum_of_divisors_of_a_b(a: int, b: int) -> int:\n    \"\"\" Return the sum of all divisors of a and b\n    >>> sum_of_divisors_of_a_b(3, 5)\n    8\n    >>> sum_of_divisors_of_a_b(25"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    3\n    >>> least_common_multiple(25, 15)\n    15\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Check if a string is a palindrome\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('aa')\n    True\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('ab')\n    False\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('abc')\n    False\n    >>> is_palindrome('abcdef')\n    False\n    >>> is_palindrome('abcdefg')\n    True\n    \"\"\"\n    if len(s) < 2:\n        return True\n    return s[::-1] == s\n\n\ndef is_palindrome_number(n: int) -> bool:\n    \"\"\" Check if a number is a palindrome\n    >>> is_palindrome_number(3)\n    False\n    >>> is_palindrome_number(3)\n    False\n    >>> is_palindrome_number(5)\n    True\n    >>> is_palindrome_number(6)\n    False\n    >>> is_palindrome_number(15)\n    True\n    >>> is_palindrome_number(25)\n    False\n    >>> is_palindrome_number(100)\n    False\n    >>> is_palindrome_number(101)\n    False\n    >>> is_palindrome_number(1234)\n    False\n    >>> is_palindrome_number(12345)\n    True\n    \"\"\"\n    if n == 0:\n        return False\n    return is_palindrome(str(n))\n\n\ndef is_palindrome_number_string(n:"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    125\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef solve_p3(n: int) -> int:\n    \"\"\"\n    >>> solve_p3(5)\n    1\n    >>> solve_p3(25)\n    125\n    >>> solve_p3(15)\n    15\n    >>> solve_p3(25)\n    125\n    \"\"\"\n    gcd = lcm = n\n    for i in range(2, n):\n        gcd = gcd // i\n        lcm = lcm * i // gcd\n    return lcm\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "while a % b!= 0:\n        a, b = b, a % b\n    return b\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> least_common_multiple(2, 3)\n    6\n    >>> least_common_multiple(2, 10)\n    20\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef next_prime(n: int) -> int:\n    \"\"\" Return the next prime greater than n\n    >>> next_prime(2)\n    3\n    >>> next_prime(3)\n    5\n    >>> next_prime(5)\n    11\n    \"\"\"\n    while True:\n        n += 1\n        if n % 2 == 0:\n            n += 1\n        if n % 3 == 0:\n            n += 2\n        if n % 5 == 0:\n            n += 4\n        if n % 7 == 0:\n            n += 6\n        if n % 11 == 0:\n            n += 10\n        if n % 13 == 0:\n            n += 12\n        if n % 17 == 0:\n            n += 16\n        if n % 19 == 0:\n            n += 20\n        if n % 23 == 0:\n            n += 22\n        if n % 29 == 0:\n            n += 28\n        if n % 31 == 0:\n            n += 30\n        if n % 37 == 0:\n            n += 36\n        if n % 41 == 0:\n            n += 40\n        if n % 43 == 0:\n            n += 42\n        if n % 47 == 0:\n            n += 46\n        if n % 53 == 0:\n            n += 50\n        if n % 59 == 0:\n            n += 58\n        if n % 61 == 0:\n            n += 60\n        if n % 67 == 0:\n            n += 66\n        if n % 71 == 0:\n            n += 70\n        if n % 73 == 0:\n            n += 72\n        if n % 79 == 0:\n            n += 78\n        if n % 83 == 0:\n            n += 80\n        if n % 89 == 0:\n            n += 88\n        if n % 97 == 0:\n            n += 96\n        if n % 101 == 0:\n            n += 100\n        if n % 103 == 0:\n            n += 102\n        if n % 107 == 0:\n            n += 106\n        if n % 109 == 0:\n            n += 108\n        if n % 113 == 0:\n            n"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "while a > 0 and b > 0:\n        a, b = b, a % b\n    return b\n\ndef _test() :\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\" :\n    _test()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return gcd(a, b)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    250\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef divisible_by(a: int, b: int) -> bool:\n    \"\"\" Return true if a is divisible by b\n    >>> divisible_by(3, 5)\n    True\n    >>> divisible_by(25, 15)\n    True\n    \"\"\"\n    return a % b == 0\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(25)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return true if n is a palindrome\n    >>> is_palindrome(3)\n    True\n    >>> is_palindrome(5)\n    False\n    >>> is_palindrome(25)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return is_palindrome(n / 2)\n    if n == 2:\n        return True\n    return is_palindrome(n / 2) and is_palindrome(n / 2)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "if a < b:\n        return greatest_common_divisor(b, a)\n    if a == 0:\n        return b\n    while a!= b:\n        a, b = b, a % b\n    return a\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(11)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 5:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(3)\n    False\n    >>> is_prime_fast(5)\n    True\n    >>> is_prime_fast(7)\n    True\n    >>> is_prime_fast(11)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 5:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_prime_fast_2(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime_fast_2(2)\n    True\n    >>> is_prime_fast_2(3)\n    False\n    >>> is_prime_fast_2(5)\n    True\n    >>> is_prime_fast_"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if a == 0 or b == 0:\n        return 0\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_of_two_numbers(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two numbers a and b\n    >>> greatest_common_divisor_of_two_numbers(3, 5)\n    1\n    >>> greatest_common_divisor_of_two_numbers(25, 15)\n    5\n    \"\"\"\n    return greatest_common_divisor(a, b)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two numbers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_of_two_numbers(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two numbers a and b\n    >>> gcd_of_two_numbers(3, 5)\n    1\n    >>> gcd_of_two_numbers(25, 15)\n    5\n    \"\"\"\n    return gcd(a, b)"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    125\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    3\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm_pow(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm_pow(3, 5)\n    15\n    >>> lcm_pow(25, 15)\n    125\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(25)\n    False\n    >>> is_prime(100)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n in (2, 3):\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_number(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime_number(2)\n    True\n    >>> is_prime_number(3)\n    True\n    >>> is_prime_number(5)"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return gcd(a, b)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef lcm_divisors(n: int) -> int:\n    \"\"\" Return the least common multiple of all the divisors of a given integer n\n    >>> lcm_divisors(15)\n    5\n    \"\"\"\n    return lcm(1, n)"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef least_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a least common divisor of two integers a and b\n    >>> least_common_divisor(3, 5)\n    3\n    >>> least_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    3\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef gcd_rec(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd_rec(3, 5)\n    3\n    >>> gcd_rec(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd_rec(b, a % b)\n\ndef lcm_rec(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm_rec(3, 5)\n    15\n    >>> lcm_rec(25, 15)\n    75\n    \"\"\"\n    if a == 0:\n        return b\n    return lcm_rec(a, b / a)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "while a!= 0:\n        a, b = b % a, a\n    return b\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> least_common_multiple(2, 3)\n    6\n    >>> least_common_multiple(15, 10)\n    10\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" Return the sum of the divisors of n\n    >>> sum_of_divisors(3)\n    3\n    >>> sum_of_divisors(25)\n    15\n    >>> sum_of_divisors(30)\n    15\n    \"\"\"\n    return greatest_common_divisor(reduce(lambda a, b: a * (b + 1), range(1, n + 1), 1), n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "return greatest_common_divisor_recursive(a, b)\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_recursive(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        return greatest_common_divisor_recursive(b, a)\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return 1\n    else:\n        return greatest_common_divisor_recursive(a - b, b)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(130003)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome, False otherwise\n    >>> is_palindrome(2)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(10)\n    False\n    >>> is_palindrome(13)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef is_square(n: int) -> bool:\n    \"\"\" Return True if n is a square, False otherwise\n    >>> is_square(2)\n    True\n    >>> is_square(5)\n    True\n    >>> is_square(10)\n    False\n    >>> is_square(13)\n    False\n    \"\"\"\n    return n == n**2\n\ndef is_triangle(n: int) -> bool:\n    \"\"\" Return True if n is a triangle, False otherwise\n    >>> is_triangle(2)\n    False\n    >>> is_triangle(5)\n    False\n    >>> is_triangle(10)\n    True\n    >>> is_triangle(13)\n    False\n    \"\"\"\n    return n == n**2 + n\n\ndef is_pentagon(n: int"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a!= 0:\n        if a % b == 0:\n            a = a / b\n            b = 1\n        else:\n            b = b * a\n    return a\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "while b > 0:\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    225\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "return gcd(a, b)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b / gcd(a, b)\n\ndef mod_inverse(a: int, b: int) -> int:\n    \"\"\" Return the inverse of a modulo b\n    >>> mod_inverse(3, 5)\n    2\n    >>> mod_inverse(25, 15)\n    5\n    \"\"\"\n    return gcd(a, b)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "if a % b!= 0:\n        return greatest_common_divisor(b, a % b)\n    else:\n        return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    125\n    \"\"\"\n    return a * b / gcd(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(25)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_list(n: int, primes: list) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise\n    >>> is_prime_list(2, [])\n    True\n    >>> is_prime_list(25, [2, 3, 5])\n    True\n    >>> is_prime_list(12, [2, 3, 5, 7])\n    False\n    \"\"\"\n    for i in range(2, n):\n        if i in primes:\n            for j in primes:\n                if j > i:\n                    break\n                if n % j == 0:\n                    return False\n    return True\n\ndef is_prime_array(n: int, primes: list) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise\n    >>> is_prime_array(2, [])"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "while a!= 0:\n        b, a = a, b & a\n    return b\n\n\ndef _get_gcd(a: int, b: int) -> int:\n    \"\"\" Return greatest common divisor of two integers a and b\n    >>> _get_gcd(3, 5)\n    1\n    >>> _get_gcd(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a & b\n    return a\n\n\ndef _find_gcd(a: int, b: int) -> int:\n    \"\"\" Return greatest common divisor of two integers a and b\n    >>> _find_gcd(3, 5)\n    1\n    >>> _find_gcd(25, 15)\n    5\n    \"\"\"\n    while a!= 0:\n        if b % a == 0:\n            b /= a\n            a = 1\n        else:\n            a = a - 1\n    return a\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    print(\"\\n\".join(\n        [\"{:>8}\".format(n) for n in range(1, 100)] +\n        [\"{:>8}\".format(n) for n in range(1, 100)] +\n        [\"{:>8}\".format(n) for n in range(1, 100)] +\n        [\"{:>8}\".format(n) for n in range(1, 100)]\n    ))\n    print(\"\\n\".join(\n        [\"{:>8}\".format(n) for n in range(1, 100)] +\n        [\"{:>8}\".format(n) for n in range(1, 100)] +\n        [\"{:>8}\".format(n) for n in range(1, 100)] +\n        [\"{:>8}\".format(n) for n in range(1, 100)]\n    ))\n    print(\"\\n\".join(\n        [\"{:>8}\".format(n) for n in range(1, 100)] +\n        [\"{:>8}\".format(n) for n in range(1, 100)] +"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\n\ndef is_square(a: int) -> bool:\n    \"\"\" Test whether an integer is square\n    >>> is_square(3)\n    True\n    >>> is_square(4)\n    False\n    \"\"\"\n    return a * a == a"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "return gcd(a, b)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(5, 15)\n    5\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(5, 15)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b // gcd(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(5)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\" Return a list of the prime factors of n\n    >>> prime_factors"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "return a % b if b else a"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return true if the string is a palindrome.\n    >>> is_palindrome(\"a\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    125\n    \"\"\"\n    return a * b / gcd(a, b)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    125\n    \"\"\"\n    return a * b / gcd(a, b)\n\ndef main():\n    print(greatest_common_divisor(3, 5))\n    print(greatest_common_divisor(25, 15))\n    print(gcd(3, 5))\n    print(gcd(25, 15))\n    print(lcm(3, 5))\n    print(lcm(25, 15))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_recursive(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor_recursive(b, a % b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_square_free(n: int) -> bool:\n    \"\"\" Return true if n is square-free\n    >>> is_square_free(2)\n    True\n    >>> is_square_free(4)\n    False\n    >>> is_square_free(6)\n    True\n    >>> is_square_free(8)\n    False\n    >>> is_square_free(25)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n % 4 == 0:\n        return False\n    if n % 8 == 0:\n        return False\n    if n % 16 == 0:\n        return False\n    return True\n\ndef is_square(n: int) -> bool:\n    \"\"\" Return true if n is a square number"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "if a < 0 or b < 0:\n        return -1\n    if a == 0 or b == 0:\n        return 0\n    while a!= 0:\n        a, r = divmod(a, b)\n        b = r\n    return b\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    3\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    return a * b / greatest_common_divisor(a, b)\n\n\ndef main():\n    print(gcd(10, 15))\n    print(lcm(10, 15))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "return gcd(a, b)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    3\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime(2)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    return all(n % p == 0 for p in range(2, int(n ** 0.5) + 1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "while a!= 0 and b!= 0:\n        if a < b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while a!= 0 and b!= 0:\n        if a < b:\n            a = a - b\n        else:\n            b = b - a\n    return b\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    25\n    \"\"\"\n    return a * b / gcd(a, b)\n\ndef main():\n    print(gcd(3, 5))\n    print(gcd(25, 15))\n    print(lcm(3, 5))\n    print(lcm(25, 15))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "while a > 0:\n        a, b = b, a % b\n    return b\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Test if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime(31)\n    False\n    >>> is_prime(32)\n    True\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 6\n    return True\n\ndef is_prime_factor(n: int, limit: int = None) -> bool:\n    \"\"\" Test if n is a prime factor of n\n    >>> is_prime_factor(2)\n    True\n    >>> is_prime_factor(3)\n    False\n    >>> is_prime_factor(5)\n    False\n    >>> is_prime_factor(7)\n    True\n    >>> is_prime_factor(13)\n    False\n    >>> is_prime_factor(25)\n    False\n    >>> is_prime_factor(29)\n    False\n    >>> is_prime_factor(31)\n    False\n    >>> is_prime_factor(32)\n    True\n    >>> is_prime_factor(37)\n    False\n    >>> is_prime_factor(38)\n    True\n    \"\"\"\n    if limit is not None and n < limit:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    i"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_slow(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime_slow(2)\n    True\n    >>> is_prime_slow(3)\n    True\n    >>> is_prime_slow(4)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if not n & 1:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if not n & 1:\n        return False\n    if n < 9:\n        if n == 3 or n == 5 or n == 7:\n            return True\n        if n % 3 == 0 or n % 5 == 0 or n % 7 == 0:\n            return False\n        return True\n    for i in range(2, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(3)\n    False\n    >>> is_prime_fast(4)\n    False\n    \"\"\"\n    if"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "return greatest_common_divisor_recursive(a, b)\n\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Recursive implementation of greatest common divisor algorithm\n    >>> greatest_common_divisor_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_recursive(25, 15)\n    5\n    \"\"\"\n    if a % b == 0:\n        return a // b\n    else:\n        return greatest_common_divisor_recursive(a, b % a)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, else False\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n <= 5:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
      "rank": 54,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    125\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef main():\n    \"\"\" Run the main function\n    \"\"\"\n    print(__doc__)\n    # Test our functions\n    test_functions()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 10.0,
      "candidate": "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(15)\n    True\n    >>> is_prime(17)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    for x in range(2, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\n\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(3)\n    False\n    >>> is_prime_fast(5)\n    True\n    >>> is_prime_fast(11)\n    True\n    >>> is_prime_fast(13)\n    False\n    >>> is_prime_fast(15)\n    True\n    >>> is_prime_fast(17)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    for x in range(2, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\n\n\ndef is_prime_slow(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime_slow(2)\n    True\n    >>> is_prime_slow(3)\n    False"
    },
    {
      "rank": 56,
      "score": 10.0,
      "candidate": "while a % b > 0:\n        a //= b\n    return a\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Return True if s is a palindrome\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('ABAB')\n    True\n    >>> is_palindrome('ABA')\n    False\n    \"\"\"\n    return s == s[::-1]\n\ndef is_valid_ipv4_address(s: str) -> bool:\n    \"\"\" Return True if s is a valid IPv4 address\n    >>> is_valid_ipv4_address('127.0.0.1')\n    True\n    >>> is_valid_ipv4_address('127.0.0.1:8080')\n    True\n    >>> is_valid_ipv4_address('127.0.0.1:8080/path')\n    False\n    >>> is_valid_ipv4_address('127.0.0.1:8080/path/path')\n    False\n    >>> is_valid_ipv4_address('127.0.0.1:8080/path/path/path')\n    False\n    \"\"\"\n    if '/' in s:\n        return False\n    parts = s.split(':')\n    if len(parts)!= 4:\n        return False\n    try:\n        for i, part in enumerate(parts):\n            if not isinstance(part, int):\n                return False\n            if not 0 <= part <= 255:\n                return False\n        return True\n    except ValueError:\n        return False\n\ndef is_valid_ipv6_address(s: str) -> bool:\n    \"\"\" Return True if s is a valid IPv6 address\n    >>> is_valid_ipv6_address('::1')\n    True\n    >>> is_valid_ipv6_address('::1:8080')\n    True\n    >>> is_valid_ipv6_address('::1:8080/path')\n    False\n    >>> is_valid_ipv6_address('::1:8080/path/path')\n    False\n    >>> is_valid_"
    },
    {
      "rank": 57,
      "score": 10.0,
      "candidate": "while a > b:\n        a, b = b, a % b\n    return b\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(7)\n    False\n    >>> is_prime(12)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return True if n is prime using the Sieve of Eratosthenes\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(3)\n    True\n    >>> is_prime_fast(5)\n    True\n    >>> is_prime_fast(7)\n    False\n    >>> is_prime_fast(12)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_prime_fast_sieve(n: int) -> bool:\n    \"\"\" Return True if n is prime using the Sieve of Eratosthenes\n    >>> is_prime_fast_sieve(2)\n    True\n    >>> is_prime_fast_sieve(3)\n    True\n    >>> is_prime_fast_sieve(5)\n    True\n    >>> is_prime_fast_sieve(7)\n    False\n    >>> is_prime_fast_sieve(12)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 =="
    },
    {
      "rank": 58,
      "score": 10.0,
      "candidate": "return gcd(a, b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    3\n    >>> least_common_multiple(5, 15)\n    15\n    >>> least_common_multiple(3, 5)\n    3\n    >>> least_common_multiple(3, 5)\n    3\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(5, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(5, 15)\n    45\n    \"\"\"\n    return a * b / least_common_multiple(a, b)\n\n\ndef main():\n    print(f\"{lcm(3, 5)} = {lcm(3, 5)}\")\n    print(f\"{lcm(3, 5)} = {lcm(3, 5)}\")\n    print(f\"{lcm(3, 5)} = {lcm(3, 5)}\")\n    print(f\"{lcm(3, 5)} = {lcm(3, 5)}\")\n    print(f\"{lcm(3, 5)} = {lcm(3, 5)}\")\n    print(f\"{lcm(3, 5)} = {lcm(3, 5)}\")\n    print(f\"{lcm(3, 5)} = {lcm(3, 5)}\")\n    print(f\"{lcm(3, 5)} = {lcm(3, 5)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 10.0,
      "candidate": "while a!= 0:\n        b, a = a, b % a\n    return b\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    300\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Return True if s is a palindrome\n    >>> is_palindrome('abc')\n    True\n    >>> is_palindrome('aabb')\n    True\n    >>> is_palindrome('aabbbb')\n    False\n    \"\"\"\n    return s == reverse_string(s)\n\ndef reverse_string(s: str) -> str:\n    \"\"\" Return the reverse of s\n    >>> reverse_string('abc')\n    'cba'\n    >>> reverse_string('aabbbb')\n    'abbbb'\n    \"\"\"\n    return ''.join(s[::-1])\n\ndef is_palindrome_in_string(s: str) -> bool:\n    \"\"\" Return True if s is a palindrome in s\n    >>> is_palindrome_in_string('abc')\n    True\n    >>> is_palindrome_in_string('aabbbb')\n    False\n    >>> is_palindrome_in_string('aabbbbcc')\n    True\n    \"\"\"\n    return is_palindrome(s) and s[0] == s[-1]\n\ndef is_palindrome_in_string_recursive(s: str) -> bool:\n    \"\"\" Return True if s is a palindrome in s\n    >>> is_palindrome_in_string_recursive('abc')\n    True\n    >>> is_palindrome_in_string_recursive('aabbbb')\n    False\n    >>> is_palindrome_in_string_recursive('aabbbbcc')\n    True\n    \"\"\"\n    if len(s) == 0:\n        return False\n    return is_palindrome_in_string_recursive"
    },
    {
      "rank": 60,
      "score": 10.0,
      "candidate": "if a < 0 or b < 0:\n        return abs(a)\n    while b:\n        a, b = a % b, a // b\n    return a\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 10.0,
      "candidate": "while a!= 0:\n        a, b = b % a, a\n    return b\n\ndef _gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> _gcd(3, 5)\n    1\n    >>> _gcd(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b % a, a\n    return a\n\ndef _lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> _lcm(3, 5)\n    15\n    >>> _lcm(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return _lcm(a, b)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    return _gcd(a, b)\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return _lcm(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns true if n is prime, false otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range"
    },
    {
      "rank": 62,
      "score": 10.0,
      "candidate": "while b > 0:\n        a, b = b, a % b\n    return a\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(10)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for d in range(3, int(n**0.5)+1, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime_fast(10)\n    False\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(5)\n    True\n    >>> is_prime_fast(25)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for d in range(3, int(n**0.5)+1, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef is_prime_slow(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime_slow(10)\n    False\n    >>> is_prime_slow(2)\n    True\n    >>> is_prime_slow(5)\n    True\n    >>> is_prime_slow(25)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for d in range(3, int(n**0.5)+1, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef is_prime_fast_slow(n: int) -> bool:\n    \"\"\""
    },
    {
      "rank": 63,
      "score": 10.0,
      "candidate": "if a == 0 or b == 0:\n        return 0\n    while a!= b:\n        a, b = a % b, a % b\n    return a\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    True\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    False\n    >>> is_prime(20)\n    True\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    True\n    >>> is_prime(23)\n    False\n    >>> is_prime(24)\n    True\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    True\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    True\n    >>> is_prime(29)\n    False\n    >>> is_prime(30)\n    True\n    >>> is_prime(31)\n    False\n    >>> is_prime(32)\n    True\n    >>> is_prime(33)\n    False\n    >>> is_prime(34)\n    True\n    >>> is_prime(35)\n    False\n    >>> is_prime(36)\n    True\n    >>> is_prime(37)\n    False\n    >>> is_prime"
    },
    {
      "rank": 64,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 10.0,
      "candidate": "while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(12)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(20)\n    False\n    >>> is_prime(20)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for d in range(5, int(n**0.5) + 1, 6):\n        if n % d == 0 or n % (d + 2) == 0:\n            return False\n    return True\n\n\ndef is_prime_mod(n: int, m: int) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise.\n    >>> is_prime_mod(2, 5)\n    True\n    >>> is_prime_mod(5, 2)\n    False\n    >>> is_prime_mod(25, 15)\n    False\n    >>> is_prime_mod(20, 20)\n    True\n    >>> is_prime_mod(20, 20)\n    True\n    >>> is_prime_mod(20, 19)\n    False\n    >>> is_prime_mod(20, 19)\n    True\n    >>> is_prime_mod(20, 20)\n    True\n    \"\"\"\n    if n < 2 or n > m:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for d in range(5, int(n**0.5) + 1, 6):\n        if n % d == 0 or n % (d + 2) == 0:\n            return False\n    return True\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number"
    },
    {
      "rank": 66,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(20)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    d = n - 1\n    while d % 2 == 0 or d % 3 == 0:\n        d = (d + 1) / 2\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 10.0,
      "candidate": "return gcd(a, b)\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    3\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    125\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"
    },
    {
      "rank": 68,
      "score": 10.0,
      "candidate": "return greatest_common_divisor_recursive(a, b)\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_recursive(25, 15)\n    5\n    \"\"\"\n    if a == b:\n        return a\n    elif a < b:\n        return greatest_common_divisor_recursive(a, b%a)\n    else:\n        return greatest_common_divisor_recursive(b, a%b)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 10.0,
      "candidate": "while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(5, 10)\n    5\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(5, 10)\n    10\n    >>> lcm(25, 15)\n    15\n    \"\"\"\n    return a * b / gcd(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(9)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n < 2 or n < 9:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome, False otherwise\n    >>> is_palindrome(3)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(9)\n    True\n    >>> is_palindrome(13)\n    False\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\n\ndef is_square(n: int) -> bool:\n    \"\"\" Return True if n is a square, False otherwise\n    >>> is_square(3)\n    True"
    },
    {
      "rank": 70,
      "score": 10.0,
      "candidate": "if a == b:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef greatest_common_divisor_sum(a: int, b: int) -> int:\n    \"\"\" Return the sum of the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_sum(3, 5)\n    3\n    >>> greatest_common_divisor_sum(25, 15)\n    5\n    \"\"\"\n    return (a + b) // greatest_common_divisor(a, b)\n\n\ndef greatest_common_divisor_product(a: int, b: int) -> int:\n    \"\"\" Return the product of the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_product(3, 5)\n    3\n    >>> greatest_common_divisor_product(25, 15)\n    5\n    \"\"\"\n    return (a * b) // greatest_common_divisor(a, b)\n\n\ndef greatest_common_divisor_quotient(a: int, b: int) -> int:\n    \"\"\" Return the quotient of the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_quotient(3, 5)\n    1\n    >>> greatest_common_divisor_quotient(25, 15)\n    5\n    \"\"\"\n    return greatest_common_divisor(a, b) // b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 10.0,
      "candidate": "if a == 0 or b == 0:\n        return 0\n    while a!= 0:\n        a, b = b % a, a % b\n    return b\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns true if n is prime, otherwise false.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef next_prime(n: int) -> int:\n    \"\"\" Return the next prime after n.\n    >>> next_prime(2)\n    3\n    >>> next_prime(3)\n    5\n    >>> next_prime(5)\n    7\n    >>> next_prime(7)\n    11\n    >>> next_prime(11)\n    13\n    >>> next_prime(13)\n    17\n    >>> next_prime(17)\n    19\n    >>> next_prime(19)\n    23\n    >>> next_prime(23)\n    29\n    >>> next_prime(29)\n    31\n    >>> next_prime(31)\n    37\n    >>> next_prime(37)\n    41\n    >>> next_prime(41)\n    43\n    >>> next_prime(43)\n    47\n    >>> next_prime(47)\n    53\n    >>> next_prime(53)\n    59\n    >>> next_prime(59)\n    61\n    >>> next_prime(61)\n    67\n    >>> next_prime(67)\n    71\n    >>> next_prime(71)\n    73\n    >>> next_prime(73)\n    79\n    >>> next_prime(79)\n    83\n    >>> next_prime(83)\n    89\n    >>> next_prime(89)\n    97\n    >>> next_prime(97)\n    101\n    >>> next_prime(101)\n    103"
    },
    {
      "rank": 72,
      "score": 10.0,
      "candidate": "while a:\n        a, b = b % a, a\n    return b\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    3\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    return gcd(n, n - 1) > 1\n\ndef is_prime_factor(n: int) -> bool:\n    \"\"\" Return True if n is a prime factor of n\n    >>> is_prime_factor(2)\n    False\n    >>> is_prime_factor(3)\n    False\n    >>> is_prime_factor(5)\n    True\n    \"\"\"\n    return n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 or n == 17\n\ndef is_prime_and_prime_factor(n: int) -> bool:\n    \"\"\" Return True if n is a prime number and its prime factor is a prime number\n    >>> is_prime_and_prime_factor(2)\n    False\n    >>> is_prime_and_prime_factor(3)\n    True\n    >>> is_prime_and_prime_factor(5)\n    True\n    \"\"\"\n    return is_prime(n) and is_prime_factor(n)\n\ndef is_prime_and_prime_factors_and_prime_factor(n: int) -> bool:\n    \"\"\" Return True if n is a"
    },
    {
      "rank": 73,
      "score": 10.0,
      "candidate": "while a:\n        a, b = b, a % b\n    return b\n\ndef least_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the least common divisor of two integers a and b\n    >>> least_common_divisor(25, 15)\n    5\n    >>> least_common_divisor(3, 5)\n    1\n    \"\"\"\n    while a:\n        a, b = b, a % b\n    return b\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(25, 15)\n    5\n    >>> gcd(3, 5)\n    1\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(25, 15)\n    60\n    >>> lcm(3, 5)\n    15\n    \"\"\"\n    return a * b // gcd(a, b)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 10.0,
      "candidate": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return greatest_common_divisor(b, a)\n    if b > a:\n        return greatest_common_divisor(a, b)\n    while a % b!= 0:\n        a, b = b, a % b\n    return b\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(10)\n    False\n    \"\"\"\n    if n == 1 or n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 2 or n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(5)\n    True\n    >>> is_prime_fast(10)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    k = 6\n    while k < n:\n        if n % k == 0:\n            return False\n        if n % (k + 2) == 0:\n            return False\n        k += 6\n    return True\n\ndef is_prime_slow(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime_slow(2)\n    True\n    >>> is_prime_slow(5)\n    True\n    >>> is_prime_slow(10)"
    },
    {
      "rank": 75,
      "score": 10.0,
      "candidate": "if a == b:\n        return a\n    if a < 0 or b < 0:\n        return -1\n    if a == 0 or b == 0:\n        return 0\n    while a!= b:\n        if a > b:\n            a, b = b, a\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    3\n    >>> gcd(25, 15)\n    5\n    >>> gcd(25, 15) == greatest_common_divisor(25, 15)\n    True\n    \"\"\"\n    return greatest_common_divisor(a, b)\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    125\n    >>> lcm(25, 15) == greatest_common_divisor(25, 15) * 5\n    True\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef modinv(a: int, m: int) -> int:\n    \"\"\" Return the multiplicative inverse of a modulo m\n    >>> modinv(5, 25)\n    3\n    >>> modinv(25, 5)\n    3\n    >>> modinv(0, 5)\n    Traceback (most recent call last):\n       ...\n    ValueError: 0 is not in modulo 25\n    >>> modinv(10, 0)\n    Traceback (most recent call last):\n       ...\n    ValueError: 10 is not in modulo 0\n    \"\"\"\n    if a == 0 or m == 0:\n        raise ValueError('0 is not in modulo {}'.format(m))\n    if a == 1:\n        return 0\n    if m == 1:\n        return 1\n    g = gcd(a, m)\n    if g == 1:\n        return 0\n    x = lcm(a, m) // g\n    if x < 0"
    },
    {
      "rank": 76,
      "score": 10.0,
      "candidate": "while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, otherwise False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(13)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    False\n    >>> is_prime(20)\n    False\n    >>> is_prime(25)\n    True\n    >>> is_prime(30)\n    False\n    >>> is_prime(35)\n    False\n    >>> is_prime(37)\n    False\n    >>> is_prime(38)\n    False\n    >>> is_prime(39)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    for d in range(2, int(math.sqrt(n))):\n        if n % d == 0:\n            return False\n    return True\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return True if n is prime, otherwise False\n    >>> is_prime_fast(2)\n    True\n    >>> is_prime_fast(3)\n    True\n    >>> is_prime_fast(5)\n    True\n    >>> is_prime_fast(13)\n    True\n    >>> is_prime_fast(17)\n    False\n    >>> is_prime_fast(18)\n    False\n    >>> is_prime_fast(20)\n    False\n    >>> is_prime_fast(25)\n    True\n    >>> is_prime_fast(30)\n    False\n    >>> is_prime_fast(35)\n    False\n    >>> is_prime_fast(37)\n    False\n    >>> is_prime_fast(38)\n    False\n    >>> is_prime_fast("
    },
    {
      "rank": 77,
      "score": 10.0,
      "candidate": "while a!= b:\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(5, 15)\n    5\n    >>> gcd(5, 25)\n    5\n    >>> gcd(5, 25)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(5, 15)\n    15\n    >>> lcm(5, 25)\n    25\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(15)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is a palindrome, False otherwise\n    >>> is_palindrome(2)\n    True\n    >>> is_palindrome(3)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(25)\n    True\n    >>> is_palindrome(15)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return is_palindrome(n / 2)\n    else:\n        return not is_palindrome(n - 1"
    },
    {
      "rank": 78,
      "score": 10.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    return greatest_common_divisor(a, b)\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n    return a * b / greatest_common_divisor(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(25)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef next_prime(n: int) -> int:\n    \"\"\" Return the smallest prime greater than n\n    >>> next_prime(2)\n    3\n    >>> next_prime(3)\n    5\n    >>> next_prime(5)\n    11\n    \"\"\"\n    n -= 1\n    p = 2\n    while not is_prime(p):\n        p += 1\n    while not is_prime(p):\n        p += 2\n    while p <= n:\n        if not is_prime(p):\n            p += 2\n    return p\n\ndef is_prime_generator(n: int) -> Generator[int, None, None]:\n    \"\"\" Return a generator of prime numbers\n    >>> is_prime_gener"
    },
    {
      "rank": 79,
      "score": 10.0,
      "candidate": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while b > 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 10.0,
      "candidate": "return gcd(a, b)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    3\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 10.0,
      "candidate": "while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns True if n is prime and False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    \"\"\"\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_list(n: int, primes: list) -> bool:\n    \"\"\" Returns True if n is prime and False otherwise\n    >>> is_prime_list(2, [])\n    True\n    >>> is_prime_list(3, [2])\n    True\n    >>> is_prime_list(4, [2, 3])\n    True\n    >>> is_prime_list(5, [2, 3, 5])\n    True\n    >>> is_prime_list(6, [2, 3, 5, 7])\n    False\n    >>> is_prime_list(7, [2, 3, 5, 7])\n    True\n    >>> is_prime_list(8, [2, 3, 5, 7])\n    False\n    >>> is_prime_list(9, [2, 3, 5, 7])\n    False\n    >>> is_prime_list(10, [2, 3, 5, 7])\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 5:\n        return True\n    if n == 7:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n"
    },
    {
      "rank": 82,
      "score": 9.0,
      "candidate": "return a if a % b == 0 else greatest_common_divisor(b, a)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 9.0,
      "candidate": "while b!= 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 9.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a"
    },
    {
      "rank": 85,
      "score": 9.0,
      "candidate": "return a if a < b else greatest_common_divisor(b, a)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 9.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "return gcd(a, b)"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "while a!= 0:\n        a, b = b % a, a\n    return b\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Recursive implementation of greatest common divisor\n    >>> greatest_common_divisor_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_recursive(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor_recursive(a, b % a)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    >>> gcd(25, -15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b % a, a\n    return a\n\ndef gcd_recursive(a: int, b: int) -> int:\n    \"\"\" Recursive implementation of greatest common divisor\n    >>> gcd_recursive(3, 5)\n    1\n    >>> gcd_recursive(25, 15)\n    5\n    >>> gcd_recursive(25, -15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd_recursive(a, b % a)"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef find_greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> find_greatest_common_divisor(3, 5)\n    3\n    >>> find_greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(3, 5)\n    1\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    125\n    \"\"\"\n    return a * b / gcd(a, b)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number n is prime\n    >>> is_prime(3)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(25)\n    False\n    >>> is_prime(15)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(100)\n    False\n    >>> is_prime(123)\n    True\n    >>> is_prime(200)\n    False\n    >>> is_prime(1000)\n    False\n    >>> is_prime(2 ** 200)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 or n < 4:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "while a!= 0 and b!= 0:\n        a, b = b % a, a % b\n    return b or a\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return 1\n    while a!= 0:\n        a, b = b % a, a\n    return b\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Returns True if the string s is a palindrome, False otherwise\n    >>> is_palindrome('A man, a plan, a canal, Panama')\n    True\n    >>> is_palindrome('race a car')\n    False\n    \"\"\"\n    return s == s[::-1]\n\ndef is_palindrome_number(n: int) -> bool:\n    \"\"\" Returns True if n is a palindrome, False otherwise\n    >>> is_palindrome_number(5)\n    True\n    >>> is_palindrome_number(10)\n    True\n    >>> is_palindrome_number(2)\n    False\n    \"\"\"\n    return n == n[::-1]\n\ndef is_pentagon(n: int) -> bool:\n    \"\"\" Returns True if n is a pentagon, False otherwise\n    >>> is_pentagon(5)\n    False\n    >>> is_pentagon(7)\n    True\n    \"\"\"\n    return n % 5 == 0\n\ndef is_pentagon_number(n: int) -> bool:\n    \"\"\" Returns True if n is a pentagon, False otherwise\n    >>> is_pentagon_number(5)\n    False\n    >>> is_pentagon_number(7)\n    True\n    \"\"\"\n    return n % 5 == 0\n\ndef is_hexagon(n: int) -> bool:\n    \"\"\" Returns True if n is a hexagon, False otherwise\n    >>> is_hexagon(5)\n    False\n    >>> is_hexagon(7)\n    True\n    \"\"\"\n    return n % 15 == 0\n\ndef is_hexagon_number(n: int) -> bool:\n    \"\"\" Returns True if n is a hexagon, False otherwise\n    >>> is_hexagon_number(5)\n    False\n    >>> is_hexagon_number(7)\n    True\n    \"\"\"\n    return n % 15 == 0\n\ndef is"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Test if integer n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_composite(n: int) -> bool:\n    \"\"\" Test if integer n is composite\n    >>> is_composite(2)\n    False\n    >>> is_composite(3)\n    False\n    >>> is_composite(4)\n    True\n    >>> is_composite(5)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 3):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Test if string s is a palindrome\n    >>> is_palindrome('abracadabra')\n    True\n    >>> is_palindrome('hello')\n    False\n    >>> is_palindrome('abcdefghijklmnopqrstuvwxyz')\n    True\n    >>> is_palindrome('ZYXWVUTSRQPONMLKJIHGFEDCBA')\n    True\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if s[0] == s[-1]:\n        return is_"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "while a!= 0 and b!= 0:\n        if a < b:\n            a, b = b, a\n        a, b = b % a, a % b\n    return a\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if the integer n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    n_sqrt = int(math.sqrt(n))\n    for i in range(4, n_sqrt + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_square(n: int) -> bool:\n    \"\"\" Return true if the integer n is a square\n    >>> is_square(2)\n    True\n    >>> is_square(5)\n    False\n    >>> is_square(25)\n    False\n    \"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    return n % 4 == 0 and n % 9 == 0\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\" Return true if the integer n is a perfect square\n    >>> is_perfect_square(2)\n    True\n    >>> is_perfect_square(5)\n    False\n    >>> is_perfect_square(25)\n    False\n    \"\"\"\n    return n % 4 == 0 and n % 9 == 0\n\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return true if the integer n is a palindrome\n    >>> is_palindrome(2)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(25)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef is_happy(n: int) -> bool:\n    \"\"\" Return true if the integer n is happy\n    >>> is_happy(2"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> gcd(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(25, 15)\n    30\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(2)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    i = 7\n    while i < n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_prime_2(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime_2(2)\n    True\n    >>> is_prime_2(3)\n    True\n    >>> is_prime_2(5)\n    True\n    >>> is_prime_2(25)\n    False\n    \"\"\"\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    i = 7\n    while i < n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_prime_3(n: int) -> bool:"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef next_prime(n: int) -> int:\n    \"\"\" Return the next prime greater than or equal to n\n    >>> next_prime(2)\n    3\n    >>> next_prime(3)\n    5\n    >>> next_prime(5)\n    7\n    >>> next_prime(7)\n    11\n    >>> next_prime(11)\n    13\n    \"\"\"\n    if n < 2:\n        return 2\n    i = 3\n    while True:\n        if n % i == 0:\n            if i == 2:\n                return i\n            i += 2\n            continue\n        if i == n:\n            return i\n        i += 1"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "while b:\n        a, b = b, a % b\n    return a\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is a prime number, False otherwise\n    >>> is_prime(10)\n    True\n    >>> is_prime(6)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_factors(n: int) -> List[int]:\n    \"\"\" Return prime factors of a positive integer n\n    >>> get_prime_factors(100)\n    [2, 5, 5]\n    >>> get_prime_factors(25)\n    [5, 5, 5]\n    \"\"\"\n    result = []\n    if n < 2:\n        return result\n    if n == 2:\n        return [2]\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            result.append(i)\n            n //= i\n            while n % i == 0:\n                result.append(i)\n                n //= i\n    if n > 1:\n        result.append(n)\n    return result\n\ndef is_prime_exponent_form(n: int) -> bool:\n    \"\"\" Return True if n is in the form of an exponent of a prime, False otherwise\n    >>> is_prime_exponent_form(10)\n    False\n    >>> is_prime_exponent_form(25)\n    True\n    >>> is_prime_exponent_form(100)\n    True\n    >>> is_prime_exponent_form(100000)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n %"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "if a == b:\n        return a\n    gcd = 1\n    while a!= 0:\n        a, b = b % a, a\n        gcd = gcd if gcd!= 1 else b\n    return gcd\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(25)\n    True\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\n\ndef is_prime_list(n: int) -> bool:\n    \"\"\" Returns True if n is a prime number, False otherwise.\n    >>> is_prime_list(2)\n    False\n    >>> is_prime_list(3)\n    True\n    >>> is_prime_list(5)\n    False\n    >>> is_prime_list(25)\n    True\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_list_slow(n: int) -> bool:\n    \"\"\" Returns True if n is a prime number, False otherwise.\n    >>> is_prime_list_slow(2)\n    False\n    >>> is_prime_list_slow(3)\n    True\n    >>> is_prime_list_slow(5)\n    False\n    >>> is_prime_list_slow(25)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 or n % (i + 2"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "if a == 0 or b == 0:\n        return 0\n\n    while a!= 0:\n        a, b = b % a, a\n\n    return b\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    25\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef sum_of_squares(n: int) -> int:\n    \"\"\" Return sum of squares of all integers from 1 to n\n    >>> sum_of_squares(5)\n    25\n    \"\"\"\n    return sum(i ** 2 for i in range(1, n + 1))\n\n\ndef factor_of_n(n: int) -> int:\n    \"\"\" Return the number of factors of n\n    >>> factor_of_n(5)\n    2\n    >>> factor_of_n(25)\n    4\n    \"\"\"\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 2\n            n //= i\n    return factors\n\n\ndef factor_of_a_prime_number(n: int) -> int:\n    \"\"\" Return the number of prime factors of n\n    >>> factor_of_a_prime_number(5)\n    2\n    >>> factor_of_a_prime_number(25)\n    4\n    \"\"\"\n    return factor_of_n(n) - 1\n\n\ndef product_of_factors(factors: int) -> int:\n    \"\"\" Return the product of all factors\n    >>> product_of_factors(2)\n    2\n    >>> product_of_factors(3)\n    6\n    >>> product_of_factors(4)\n    8\n    >>> product_of_factors(5)\n    15\n    \"\"\"\n    return reduce(lambda x, y: x * y, factors)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime("
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "while a % b:\n        a, b = b, a % b\n    return b\n\ndef greatest_common_divisor_prime(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_prime(3, 5)\n    1\n    >>> greatest_common_divisor_prime(25, 15)\n    5\n    \"\"\"\n    while a % b:\n        a, b = b, a % b\n    return a\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_recursive(25, 15)\n    5\n    \"\"\"\n    if a == 1 or b == 1:\n        return 1\n    if a == b:\n        return a\n    return greatest_common_divisor_recursive(a % b, b)\n\ndef greatest_common_divisor_iterative(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_iterative(3, 5)\n    1\n    >>> greatest_common_divisor_iterative(25, 15)\n    5\n    \"\"\"\n    while a % b:\n        a, b = b, a % b\n    return a\n\ndef greatest_common_divisor_iterative_recursive(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor_iterative_recursive(3, 5)\n    1\n    >>> greatest_common_divisor_iterative_recursive(25, 15)\n    5\n    \"\"\"\n    if a == 1 or b == 1:\n        return 1\n    if a == b:\n        return a\n    return greatest_common_divisor_iterative_recursive(a % b, b)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "if a < b:\n        return greatest_common_divisor(b, a)\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(a // b, b)\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" Return sum of divisors of an integer n\n    >>> sum_of_divisors(6)\n    18\n    >>> sum_of_divisors(10)\n    36\n    \"\"\"\n    if n == 1:\n        return n\n    return sum(n for n in range(1, n+1) if n % i == 0)\n\ndef sum_of_proper_divisors(n: int) -> int:\n    \"\"\" Return sum of proper divisors of an integer n\n    >>> sum_of_proper_divisors(6)\n    12\n    >>> sum_of_proper_divisors(10)\n    20\n    \"\"\"\n    return sum(i for i in range(1, n+1) if n % i == 0 and i!= n)\n\ndef factor(n: int) -> List[int]:\n    \"\"\" Return all factors of an integer n\n    >>> factor(10)\n    [2, 3, 5]\n    >>> factor(100)\n    [2, 2, 5, 5, 10, 10, 20, 20, 25, 25]\n    \"\"\"\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n:\n                factors.extend(factor(n // i))\n    return factors\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\" Return all prime factors of an integer n\n    >>> prime_factors(10)\n    [2, 3]\n    >>> prime_factors(100)\n    [2, 2, 5, 5, 10, 10, 20, 20, 25, 25]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1"
    }
  ]
}