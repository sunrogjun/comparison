{
  "timestamp": "2025-09-14T16:59:22.294139",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 114,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i])\n        if min_sum == nums[i]:\n            continue\n        else:\n            return min_sum\n    return min_sum\n\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return min(nums[0], nums[1])\n    else:\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            sum = nums[left] + nums[right]\n            if sum > 0:\n                return sum\n            elif sum < 0:\n                return -sum\n            else:\n                left += 1\n                right -= 1\n    return nums[left] + nums[right]\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "min_sub_sum = 0\n    for i in range(len(nums)):\n        # find the sub-array with the smallest sum\n        sub_sum = nums[i]\n        min_sub_sum = min(min_sub_sum, sub_sum)\n        # find the sum of all sub-arrays with sum >= sub_sum\n        for j in range(i+1, len(nums)):\n            if nums[j] >= sub_sum:\n                sub_sum += nums[j]\n                min_sub_sum = min(min_sub_sum, sub_sum)\n    return min_sub_sum"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "nums_sum = 0\n    for num in nums:\n        nums_sum += num\n        if nums_sum < 0:\n            return -1\n    return nums_sum\n\n\nif __name__ == \"__main__\":\n    print(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    nums.sort()\n    return _minSubArraySum(nums, 0, len(nums) - 1)\n\n\ndef _minSubArraySum(nums, start, end):\n    if start == end:\n        return nums[start]\n    mid = (start + end) / 2\n    return _minSubArraySum(nums, start, mid) + _minSubArraySum(nums, mid + 1, end)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# if len(nums) == 0, return 0\n    if len(nums) == 0:\n        return 0\n    # if len(nums) == 1, return nums[0]\n    if len(nums) == 1:\n        return nums[0]\n    # otherwise, return the min sum of any sub-array\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[:i]))\n    return min_sum\n\n\nif __name__ == \"__main__\":\n    print(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Use a map to store the min sum\n    # map the min sum to the start index\n    # The end index is the index of the first element that is not in the sub array\n    # If the end index is -1, the sub array is the last element in nums\n    min_sum = None\n    start = 0\n    end = -1\n\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            end = i\n            if min_sum is not None and min_sum >= 0:\n                min_sum += nums[i]\n            else:\n                min_sum = nums[i]\n        else:\n            if min_sum is None:\n                min_sum = nums[i]\n            else:\n                min_sum = min(min_sum, nums[i])\n\n    return min_sum if min_sum is not None else 0\n\n\nif __name__ == '__main__':\n    nums = [1, 3, -1, -2, 4]\n    print(minSubArraySum(nums))\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if len(nums) == 0:\n        return 0\n\n    # base case: when there is only one element, just return it.\n    if len(nums) == 1:\n        return nums[0]\n\n    # base case: when there is only one sub-array, return the sub-array sum\n    if len(nums) == 2:\n        return min(nums)\n\n    # when there are more than one sub-array, find the min sub-array sum,\n    # and the min sum of all sub-array sums\n    return min(minSubArraySum(nums[:i]) + nums[i] for i in range(len(nums)))\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 2, 4]\n    print minSubArraySum(nums)\n    nums = [-1, -2, -3]\n    print minSubArraySum(nums)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return _minSubArraySum(nums, 0, len(nums))\n\n\ndef _minSubArraySum(nums, start, end):\n    \"\"\"\n    nums: list of integers\n    start: start index\n    end: end index\n    \"\"\"\n    if start == end:\n        return nums[start]\n    mid = (start + end) / 2\n    ret = nums[start] + _minSubArraySum(nums, start, mid) + _minSubArraySum(nums, mid + 1, end)\n    return ret if ret > 0 else -ret\n\n\ndef minSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum2([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum2([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n    return nums[0] + _minSubArraySum2(nums[1:])\n\n\ndef _minSubArraySum2(nums):\n    \"\"\"\n    nums: list of integers\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    ret = nums[0]\n    for i in range(1, len(nums)):\n        ret = min(nums[i], ret + nums[i])\n    return ret"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    sums = [0] * len(nums)\n    sums[0] = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = nums[i] + sums[i-1]\n    return min(sums)\n\nif __name__ == '__main__':\n    nums = [-1, -2, -3]\n    print minSubArraySum(nums)\n    nums = [-1, -2, -3]\n    print minSubArraySum2(nums)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Solution 1: dynamic programming\n    # Time complexity: O(n^2)\n    # Space complexity: O(n)\n    # The idea is to use two pointers, one for the sum of the current sub-array,\n    # the other for the sum of the current array.\n    # The following is the dynamic programming solution.\n    # For each sub-array of size k, we use the following formula:\n    # sum_k = (sum_k - min_k) + sum(nums[i] for i in range(k, n))\n    # Then we can use the formula above to solve the problem for any sub-array of size k.\n    # In addition, we can use the formula below to solve the problem for any sub-array of size k + 1.\n    # sum_k + min_k = (sum_k - min_k) + min(nums[i] for i in range(k, n))\n    # sum_k + min_k = sum_k - min_k + min(nums[i] for i in range(k, n))\n    # sum_k + min_k = sum_k - min_k + min(nums[i] for i in range(k, n))\n    # sum_k + min_k = sum_k - min_k + min(nums[i] for i in range(k, n))\n    # sum_k + min_k = sum_k - min_k + min(nums[i] for i in range(k, n))\n    # sum_k + min_k = sum_k - min_k + min(nums[i] for i in range(k, n))\n    # sum_k + min_k = sum_k - min_k + min(nums[i] for i in range(k, n))\n    # sum_k + min_k = sum_k - min_k + min(nums[i] for i in range(k, n))\n    # sum_k + min_k = sum_k - min_k + min(nums[i] for i in range(k, n))\n    # sum_k + min_k = sum_k - min_k +"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "n = len(nums)\n    # dp[i] = min(dp[i-1] + nums[i])\n    dp = [0] * n\n    dp[0] = nums[0]\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1] + nums[i], dp[i - 1])\n    return dp[-1]"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n    return min_sum\n\n\nif __name__ == \"__main__\":\n    print(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    total = nums[0]\n    for i in xrange(1, len(nums)):\n        total += nums[i]\n        if total < 0:\n            total = 0\n    return total\n\n\nclass Solution(object):\n    def minSubArraySum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in xrange(len(nums)):\n            total += nums[i]\n            if total < 0:\n                total = 0\n        return min(total, minSubArraySum(nums))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res = min(res, nums[i] + minSubArraySum(nums[:i]))\n    return res\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if not nums: return 0\n    # base case\n    if len(nums) == 1: return nums[0]\n    # recursive case\n    return minSubArraySum(nums[1:]) + nums[0]\n\nprint(minSubArraySum([-1, -2, -3]))\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3, -4]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "n = len(nums)\n    if n == 0:\n        return 0\n    sums = [0] * n\n    sums[0] = nums[0]\n    min_sum = nums[0]\n    for i in range(1, n):\n        sums[i] = min(sums[i - 1] + nums[i], min_sum)\n        min_sum = min(sums[i], min_sum)\n    return min_sum"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return subArraySum(nums, 0, len(nums) - 1)\n\n\nif __name__ == '__main__':\n    nums = [-1, -2, -3, -4, -5, -6]\n    print(minSubArraySum(nums))\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# find the min sum of any non-empty subarray of nums\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        if minSum > nums[i]:\n            minSum = nums[i]\n        elif minSum < nums[i]:\n            minSum = 0\n    return minSum\n\n\nif __name__ == '__main__':\n    print(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    if n == 2:\n        return min(nums[0], nums[1])\n    if n == 3:\n        return min(nums[0], min(nums[1], nums[2]))\n    mid = n / 2\n    left = minSubArraySum(nums[:mid])\n    right = minSubArraySum(nums[mid:])\n    return min(left, right) + nums[mid]"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# DP\n    min_sum = float('inf')\n    for i in range(1, len(nums)):\n        sum = 0\n        for j in range(i):\n            sum += nums[j]\n        min_sum = min(sum, min_sum)\n    return min_sum"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n    return minSubArraySum(nums[1:]) + nums[0]"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/min-subarray-sum/discuss/59891/My-O(N)-Time-O(1)-Space-Solution-with-explanation\n    sum_so_far = 0\n    for i in range(len(nums)):\n        if i == 0:\n            sum_so_far += nums[i]\n        else:\n            sum_so_far += min(sum_so_far, nums[i])\n    return sum_so_far\n\n\nif __name__ == '__main__':\n    print(minSubArraySum([-1, -2, -3]))\n    print(minSubArraySum([1, 2, 3, 4, 5]))\n    print(minSubArraySum([-4, -3, -2, -1, 1, 2, 3, 4]))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i]) + nums[i]\n    return min_sum\n\n\nif __name__ == '__main__':\n    nums = [-1, -2, -3]\n    print minSubArraySum(nums)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# This is a tricky question. We need to keep track of the max value in the array\n    # as well as the min value in the array. The idea is to keep track of the max value\n    # and min value in the array. The idea is to go through the array and keep track of\n    # the max value and min value in the array. This way we can easily get the max\n    # value in the array and the min value in the array.\n    #\n    # The idea here is to keep track of the max and min value in the array and keep\n    # track of the max and min sum. We can keep track of the max and min sum by\n    # keeping track of the max and min value in the array.\n    #\n    # The idea is to keep track of the max and min value in the array and keep track\n    # of the max and min sum. We can keep track of the max and min sum by keeping track\n    # of the max and min value in the array.\n    #\n    # We can keep track of the max and min value by keeping track of the max and min sum\n    # by keeping track of the max and min value in the array.\n    #\n    # The idea is to keep track of the max and min value in the array and keep track\n    # of the max and min sum.\n    #\n    # We can keep track of the max and min sum by keeping track of the max and min value\n    # in the array.\n    #\n    # The idea is to keep track of the max and min sum by keeping track of the max and min\n    # value in the array.\n    #\n    # We can keep track of the max and min sum by keeping track of the max and min value\n    # in the array.\n    #\n    # The idea is to keep track of the max and min sum by keeping track of the max and min\n    # value in the array.\n    #\n    # The idea is to keep track of the max and min sum by keeping track of the max and min\n    # value in the array.\n    #\n    # The idea is to keep track of the max and min sum by keeping track of the max and min\n    # value in the array.\n    #\n    # The idea is to keep track of the max"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "nums = sorted(nums)\n    n = len(nums)\n    if n == 0:\n        return 0\n    min_sum = nums[0]\n    min_sum_idx = 0\n    for i in range(1, n):\n        if nums[i] < 0:\n            return -nums[i]\n        if nums[i] < min_sum:\n            min_sum = nums[i]\n            min_sum_idx = i\n    return min_sum + nums[min_sum_idx]\n\nif __name__ == \"__main__\":\n    print(minSubArraySum([2, 3, 4, 1, 2, 4]))\n    print(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# find the min subarray sum\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n    return min_sum\n\n\nif __name__ == \"__main__\":\n    print(minSubArraySum([2, 3, 4, 1, 2, 4]))\n    print(minSubArraySum([-1, -2, -3]))\n    print(minSubArraySum([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "res = 0\n    for i in range(len(nums)):\n        res = min(res, nums[i])\n        res += nums[i]\n        if i < len(nums) - 1:\n            res += nums[i + 1]\n    return res\n\n\nif __name__ == \"__main__\":\n    print(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "nums.sort()\n    cur = 0\n    res = 0\n    for i in xrange(len(nums)):\n        cur += nums[i]\n        if i == 0 or nums[i-1] < 0:\n            res = cur\n        else:\n            res = min(res, cur)\n        cur = 0\n    return res\n\ndef minSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum2([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum2([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n    cur = 0\n    res = 0\n    for i in xrange(len(nums)):\n        cur += nums[i]\n        if i == 0 or nums[i-1] < 0:\n            res = cur\n        else:\n            res = min(res, cur)\n        cur = 0\n    return res\n\nif __name__ == \"__main__\":\n    print minSubArraySum([2, 3, 4, 1, 2, 4])\n    print minSubArraySum2([2, 3, 4, 1, 2, 4])"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n\n    return min(sum(nums[:i + 1]) for i in range(len(nums)) if nums[i] > 0)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "if nums == None or len(nums) == 0:\n        return 0\n\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[:i]))\n    return min_sum\n\nif __name__ == '__main__':\n    print(minSubArraySum([-1, -2, -3]))\n    print(minSubArraySum([2, 3, 4, 1, 2, 4]))\n    print(minSubArraySum([-1, -2, -3, -1]))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "return solve(nums, min_sum_subarray)\n\ndef solve(nums, func):\n    if not nums:\n        return 0\n\n    sums = [func(n) for n in nums]\n    s = max(sums)\n    return s\n\nif __name__ == '__main__':\n    print(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "n = len(nums)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return nums[0]\n    else:\n        return min(minSubArraySum(nums[i:]) + nums[i] for i in range(1, n))\n\n\nprint(minSubArraySum([-1, -2, -3]))\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3, 1, -1, -2]))"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n\n    return minSubArraySum(nums[:1]) + minSubArraySum(nums[1:])\n\n\nif __name__ == \"__main__\":\n    print(minSubArraySum([2, 3, 4, 1, 2, 4]))\n    print(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n\n    cur = 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        cur += nums[i]\n        min_sum = min(min_sum, cur)\n    return min_sum\n\nif __name__ == '__main__':\n    print minSubArraySum([-1, -2, -3])\n    print minSubArraySum([2, 3, 4, 1, 2, 4])"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(0, n):\n        ans += nums[i]\n        while i + 1 < n and nums[i] == nums[i + 1]:\n            i += 1\n        ans -= nums[i]\n    return ans\n\n\nif __name__ == '__main__':\n    print(minSubArraySum([-1, -2, -3]))"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, n):\n        sum = nums[0] + nums[i]\n        if sum < min_sum:\n            min_sum = sum\n        elif sum > min_sum:\n            return min_sum\n    return min_sum"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "return min(map(lambda num: minSubArraySum(num[1:] + num[:1]), nums))"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "if not nums:\n        return 0\n    n = len(nums)\n    res = nums[0]\n    for i in range(1, n):\n        res = min(res + nums[i], nums[i] + minSubArraySum(nums[i:]))\n    return res\n\nif __name__ == \"__main__\":\n    nums = [-2, -3, -4, 1, 2, 4]\n    assert minSubArraySum(nums) == 1"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "# The solution is to count the number of unique sub-arrays and then the sum of the sub-arrays.\n    # The idea is to count the number of unique sub-arrays of nums, then sum the sub-arrays.\n    # The idea is to count the number of unique sub-arrays of nums, then sum the sub-arrays.\n    # We can do this by using a map from sub-array to the number of sub-arrays of that sub-array.\n    # The number of unique sub-arrays of nums is equal to the sum of the sub-arrays of nums.\n    # The idea is to count the number of unique sub-arrays of nums, then sum the sub-arrays.\n    # We can do this by using a map from sub-array to the number of sub-arrays of that sub-array.\n    # The number of unique sub-arrays of nums is equal to the sum of the sub-arrays of nums.\n    # This is how we can count the number of unique sub-arrays of nums.\n    # The idea is to count the number of unique sub-arrays of nums, then sum the sub-arrays.\n    # We can do this by using a map from sub-array to the number of sub-arrays of that sub-array.\n    # The number of unique sub-arrays of nums is equal to the sum of the sub-arrays of nums.\n    # We can do this by using a map from sub-array to the number of sub-arrays of that sub-array.\n    # The number of unique sub-arrays of nums is equal to the sum of the sub-arrays of nums.\n    # We can do this by using a map from sub-array to the number of sub-arrays of that sub-array.\n    # The number of unique sub-arrays of nums is equal to the sum of the sub-arrays of nums.\n    # We can do this by using a map from sub-array to the number of sub-arrays of that sub-array.\n    # The number of unique sub-arrays of nums is equal to the sum of the sub-arrays of nums.\n    # We can"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "def minSubArraySum(nums, start, end):\n        if end == 0:\n            return 0\n        if start == end:\n            return nums[start]\n        sum = nums[start]\n        for i in range(start+1, end):\n            sum += nums[i]\n            if sum < 0:\n                sum = 0\n            else:\n                sum = min(sum, nums[i])\n        return sum\n    return minSubArraySum(nums, 0, len(nums))"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "sub_arrays = [[] for _ in range(nums)]\n    for i in range(len(nums)):\n        sub_arrays[i].append(nums[i])\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, min_sum + nums[i])\n        for j in range(len(sub_arrays)):\n            if i + j < len(nums) and nums[i + j] > 0:\n                sub_arrays[j].append(nums[i + j])\n                min_sum = min(min_sum, min_sum + nums[i + j])\n    return min_sum"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# https://www.youtube.com/watch?v=V8V0jkSfXcM\n    if not nums:\n        return 0\n    else:\n        nums.sort()\n        sub_array = [0] * len(nums)\n        sub_array[0] = nums[0]\n        min_sum = nums[0]\n        for i in range(1, len(nums)):\n            min_sum = min(min_sum, nums[i] + sub_array[i-1])\n            sub_array[i] = nums[i] - min_sum\n        return min_sum"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "res = nums[0]\n    for i in range(1, len(nums)):\n        res = min(res + nums[i], nums[i])\n    return res"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    # Sort the array\n    nums.sort()\n    # Initialize the sum to the first element\n    sum = nums[0]\n    # Sum of the first sub-array\n    subSum = 0\n    # Iterate over the remaining elements\n    for i in range(1, len(nums)):\n        # If the current sum is greater than the sum of the first sub-array,\n        # set the current sum to the sum of the first sub-array.\n        if sum + nums[i] > sum + subSum:\n            subSum = sum\n            # If the sum of the current sub-array is greater than the sum of the\n            # sub-array sum of the previous sub-array, set the sub-array sum of\n            # the previous sub-array to the current sub-array sum.\n            if sum + subSum > sum + subSum + nums[i]:\n                subSum = sum + subSum + nums[i]\n        else:\n            # Otherwise, set the current sum to the sum of the current sub-array\n            sum = nums[i]\n            # If the sum of the current sub-array is greater than the sum of the\n            # sub-array sum of the previous sub-array, set the sub-array sum of\n            # the previous sub-array to the current sub-array sum.\n            if sum + subSum > sum + subSum + nums[i]:\n                subSum = sum + subSum + nums[i]\n    return subSum"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def helper(nums, start, end):\n        if start >= end:\n            return nums[start]\n        mid = start + (end - start) / 2\n        return min(helper(nums, start, mid), helper(nums, mid + 1, end))\n    return helper(nums, 0, len(nums) - 1)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    min_sub_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sub_sum = min(min_sub_sum, nums[i])\n        min_sub_sum = min(min_sub_sum, -nums[i])\n    return min_sub_sum"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "result = nums[0]\n    for num in nums[1:]:\n        result = min(result + num, num)\n    return result\n\nif __name__ == \"__main__\":\n    print(minSubArraySum([-1, -2, -3, 4, 1, -2, -3]))\n    print(minSubArraySum([-1, -2, -3, 4, 1, -2, -3, -4]))\n    print(minSubArraySum([-1, -2, -3, 4, 1, -2, -3, -4, -5]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "if not nums: return 0\n    n = len(nums)\n    if n == 1: return nums[0]\n    s = nums[0]\n    for i in xrange(1, n):\n        s += nums[i]\n        if s < 0: s = 0\n    return s"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n    sum = 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        sum += nums[i]\n        if sum < min_sum:\n            min_sum = sum\n        if min_sum > sum:\n            return min_sum\n    return min_sum\n\n\nif __name__ == \"__main__\":\n    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    assert minSubArraySum([-1, -2, -3]) == -6\n    assert minSubArraySum([-2, -2, -2]) == -6\n    assert minSubArraySum([-2, -2, -2, -2]) == -6\n    assert minSubArraySum([-2, -2, -2, -2, -2]) == -6\n    assert minSubArraySum([-2, -2, -2, -2, -2, -2]) == -6\n    assert minSubArraySum([-2, -2, -2, -2, -2, -2, -2]) == -6\n    assert minSubArraySum([-2, -2, -2, -2, -2, -2, -2, -2]) == -6\n    assert minSubArraySum([-2, -2, -2, -2, -2, -2, -2, -2, -2]) == -6\n    assert minSubArraySum([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2]) == -6\n    assert minSubArraySum([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2]) == -6"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "# Algorithm:\n    # 1. Get the max subarray sum and add it to the sum\n    # 2. Find the max subarray sum and subtract it from the sum\n    # 3. If the max subarray sum is negative, we are done.\n    maxSum = max(nums)\n    minSum = maxSum\n    for num in nums:\n        sum = num + minSum\n        if sum < 0:\n            minSum = max(sum, minSum)\n        else:\n            maxSum = max(sum, maxSum)\n    return minSum"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "if nums == []:\n        return 0\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            continue\n        if nums[i] < minSum:\n            minSum = nums[i]\n    return minSum\n\n\nif __name__ == \"__main__\":\n    nums = [-1, -2, -3, 0, 1, 2, 3, 4]\n    print(\"minSubArraySum({}) = {}\".format(nums, minSubArraySum(nums)))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "subArrSum = [0] * len(nums)\n    for i in range(1, len(nums)):\n        subArrSum[i] = min(subArrSum[i - 1] + nums[i], subArrSum[i] + nums[i])\n    return subArrSum[-1]"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n\n    return min_sum"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n    \n    # The first element is the min sum of the subarray\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i])\n    return min_sum\n\nif __name__ == \"__main__\":\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "# Note: The method below is not the fastest solution.\n    # The solution below is the one that is less error prone.\n    # For each nums[i], find the sum of all the elements of the sub-array\n    # that are greater than or equal to nums[i]\n    # The sum of all the elements of the sub-array that are greater than or equal to nums[i]\n    # is the sum of the sub-array itself.\n    # The sum of the sub-array itself is the min-sum of all the elements of the sub-array.\n    # The min-sum of all the elements of the sub-array is the minimum sum of the elements of the sub-array.\n    # The minimum sum of the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum of all the elements of the sub-array is the minimum sum of all the elements of the sub-array.\n    # The minimum sum"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "return min(minSubArraySum(nums[i:]) for i in range(len(nums)) if nums[i])\n\n\nif __name__ == '__main__':\n    print(minSubArraySum([-1, -2, -3]))\n    print(minSubArraySum([-1, -2, -3, -4, -5]))\n    print(minSubArraySum([-1, -2, -3, -4, -5, -6, -7]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(minSum + nums[i], nums[i])\n    return minSum\n\nif __name__ == '__main__':\n    nums = [-1, -2, -3, 0, 1, 2, 3]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            return -1\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n\nif __name__ == '__main__':\n    print(minSubArraySum([-1, -2, -3]))\n    print(minSubArraySum([-1, -2, -3, -1, -2, -3]))\n    print(minSubArraySum([-1, -2, -3, -4, -5, -6]))\n    print(minSubArraySum([0, 0, 0]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n    \n    # Find the min subarray sum\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "sum = 0\n    if nums:\n        for i in range(len(nums)):\n            sum += nums[i]\n            if sum < 0:\n                sum = 0\n            if i+1 < len(nums):\n                sum -= nums[i+1]\n                if sum < 0:\n                    sum = 0\n    return sum\n\n\nif __name__ == \"__main__\":\n    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    assert minSubArraySum([-1, -2, -3]) == -6"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i])\n        max_sum = max(nums[i], min_sum)\n        min_sum += max_sum\n    return min_sum\n\nif __name__ == \"__main__\":\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "if nums == []:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            min_sum = -nums[i]\n        else:\n            min_sum += nums[i]\n    return min_sum"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[:i]))\n    return min_sum"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "if len(nums) == 0:\n        return 0\n\n    min_sum = nums[0]\n    max_sum = nums[0]\n    for num in nums:\n        if num > 0:\n            max_sum += num\n        else:\n            min_sum = min(min_sum, -num)\n            max_sum = max(max_sum, -num)\n    return min_sum if min_sum == max_sum else -1"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "if nums == []:\n        return 0\n    nums = sorted(nums)\n    # The problem is that we need to find the minimum sum of the sub-array\n    # of nums, which can only be found by iterating over all the numbers\n    # in nums, and if we find a minimum sum, we need to add that to the\n    # current minimum sum.\n    # So we need to store the current minimum sum and the current minimum sum\n    # of the sub-array of nums, and when we find the minimum sum of the sub-array\n    # of nums, we need to update the current minimum sum of the sub-array of nums\n    # with the current minimum sum.\n    # We also need to keep track of the maximum sum of the sub-array of nums,\n    # which is what we store as a global variable.\n    minimum = nums[0]\n    maximum = nums[0]\n    minSubArraySum = nums[0]\n    for i in range(1, len(nums)):\n        minimum = min(minimum, nums[i])\n        maximum = max(maximum, nums[i])\n        # If the current minimum sum is smaller than the current minimum sum of the sub-array\n        # of nums, we need to update the current minimum sum of the sub-array of nums\n        # with the current minimum sum.\n        if minimum < minSubArraySum:\n            minSubArraySum = minimum\n    return minSubArraySum"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    max_sum = max(nums)\n    min_sum = min(nums)\n    sum_of_nums = min_sum\n    for num in nums:\n        sum_of_nums += num\n        if sum_of_nums > max_sum:\n            max_sum = sum_of_nums\n        if sum_of_nums < min_sum:\n            min_sum = sum_of_nums\n    return min_sum"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "if nums is None or len(nums) == 0:\n        return 0\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res = min(res + nums[i], nums[i])\n    return res"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# if the sum of the first element is subtracted from the sum of the second element,\n    # the sum of the second element is subtracted from the sum of the first element,\n    # which is subtracted from the sum of the first element.\n    # and the sum of the first element is subtracted from the sum of the second element,\n    # the sum of the second element is subtracted from the sum of the first element,\n    # which is subtracted from the sum of the first element.\n    # this gives a sum of zero, which is the minimum sum\n    return sum(nums) - min(nums)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n    return minSubArraySum(nums[1:]) + nums[0]\n\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "if not nums: return 0\n    sums = [0] * (len(nums) + 1)\n    sums[0] = nums[0]\n    for i in range(1, len(nums) + 1):\n        sums[i] = min(sums[i - 1] + nums[i - 1], sums[i - 2] + nums[i - 1])\n    return sums[-1]"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n    return min_sum\n\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n    min_sum = nums[0]\n    for num in nums:\n        min_sum = min(min_sum, num)\n        max_sum = max(min_sum, num)\n    return min_sum\n\n\nif __name__ == \"__main__\":\n    print(minSubArraySum([1, -2, 3, -1, -2, 1]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum >= 0:\n            return sum\n        else:\n            sum += nums[i]\n    return sum"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] >= 0:\n            min_sum = min(min_sum, nums[i])\n        else:\n            min_sum = min(min_sum, -nums[i])\n    return min_sum"
    },
    {
      "rank": 78,
      "score": 7.0,
      "candidate": "min_sum = float('inf')\n    for num in nums:\n        sub_sum = 0\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                sub_sum += nums[i]\n                if sub_sum < min_sum:\n                    min_sum = sub_sum\n    return min_sum"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "minSum = float('inf')\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        elif i == 0:\n            minSum = nums[i]\n        else:\n            minSum = min(minSum, nums[i] + minSubArraySum(nums[i + 1:]))\n    return minSum\n\n\nif __name__ == \"__main__\":\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# This is the min sum of any sub-array\n    # n = len(nums)\n    # sum_of_sub_array = nums[0]\n    # for i in range(1, n):\n    #     sum_of_sub_array += nums[i]\n    #     if sum_of_sub_array < 0:\n    #         sum_of_sub_array = 0\n    # return sum_of_sub_array\n    # This is the max sum of any sub-array\n    # n = len(nums)\n    # sum_of_sub_array = nums[0]\n    # for i in range(1, n):\n    #     sum_of_sub_array += nums[i]\n    #     if sum_of_sub_array > 0:\n    #         sum_of_sub_array = 0\n    # return sum_of_sub_array\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return nums[0]\n    else:\n        return min(minSubArraySum(nums[:i]) + nums[i] for i in range(1, n))\n\n\ndef main():\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# O(n) time and O(1) space\n    # Solution 1: O(n) time, O(1) space\n    # Solution 2: O(n) time, O(n) space\n    return min_sub_array(nums)\n\ndef min_sub_array(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArray([2, 3, 4, 1, 2, 4]) == 1\n    minSubArray([-1, -2, -3]) == -6\n    \"\"\"\n    # O(n) time and O(1) space\n    # Solution 1: O(n) time, O(1) space\n    # Solution 2: O(n) time, O(n) space\n    if nums is None or len(nums) == 0:\n        return 0\n    \n    # O(n) time and O(1) space\n    # Solution 1: O(n) time, O(1) space\n    # Solution 2: O(n) time, O(n) space\n    return min_sub_array_1(nums)\n\ndef min_sub_array_1(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArray([2, 3, 4, 1, 2, 4]) == 1\n    minSubArray([-1, -2, -3]) == -6\n    \"\"\"\n    # O(n) time and O(1) space\n    # Solution 1: O(n) time, O(1) space\n    # Solution 2: O(n) time, O(n) space\n    if nums is None or len(nums) == 0:\n        return 0\n    \n    # O(n) time and O(1) space\n    # Solution 1: O(n) time, O(1) space\n    # Solution 2: O(n) time, O(n) space\n    return min_sub_array_2(nums)\n\ndef min_sub_array_2(nums"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n\n    max_sum = nums[0]\n    for num in nums:\n        max_sum = max(max_sum, num)\n\n    def is_sub_array_sum(nums, start, end):\n        max_sum = nums[start]\n        for i in range(start + 1, end):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum == nums[end]\n\n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        if is_sub_array_sum(nums, start, end):\n            max_sum = max(max_sum, nums[start])\n            start += 1\n        else:\n            max_sum = max(max_sum, nums[end])\n            end -= 1\n\n    return max_sum\n\nif __name__ == \"__main__\":\n    nums = [1, 2, -1, -2, -3]\n    print(minSubArraySum(nums))\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Solution 1: dynamic programming\n    # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - nums[i]] + nums[i])\n    # dp[n][0] = nums[n]\n    dp = [[nums[i] for i in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = nums[i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - nums[i]] + nums[i])\n    return dp[n - 1][0]\n\nif __name__ == \"__main__\":\n    nums = [-1, -2, -3]\n    print minSubArraySum(nums)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n    # memoization\n    cache = {}\n    def minSubArraySumHelper(nums, start, end):\n        if start == end:\n            return nums[start]\n        if start >= end:\n            return 0\n        if nums[start] in cache:\n            return min(cache[nums[start]], end - start)\n        min_sum = -nums[start]\n        for i in range(start + 1, end):\n            if nums[i] in cache:\n                min_sum = min(min_sum, cache[nums[i]] + nums[start] + nums[i])\n            else:\n                min_sum = min(min_sum, minSubArraySumHelper(nums, start, i) + nums[start] + nums[i])\n        cache[nums[start]] = min_sum\n        return min_sum\n    return minSubArraySumHelper(nums, 0, len(nums) - 1)\n\nif __name__ == \"__main__\":\n    nums = [-1, -2, -3]\n    print minSubArraySum(nums)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Check if any of the elements of nums is negative\n    if any(num < 0 for num in nums):\n        return -oo\n    \n    # Check if any of the elements of nums is 0\n    if any(num == 0 for num in nums):\n        return 0\n    \n    # Check if any of the elements of nums is negative\n    if any(num < 0 for num in nums):\n        return -oo\n    \n    # Check if any of the elements of nums is 0\n    if any(num == 0 for num in nums):\n        return 0\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Iterate through the array and add the sum of all non-negative elements\n    # to the sum.\n    for num in nums:\n        sum += num\n    \n    return sum\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n\n    min_sum = nums[0]\n    max_sum = nums[0]\n    for num in nums:\n        if num < 0:\n            continue\n        min_sum = min(min_sum, num)\n        max_sum = max(max_sum, num)\n\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[:i]))\n        max_sum = max(max_sum, nums[i] + maxSubArraySum(nums[:i]))\n\n    return min_sum if min_sum <= max_sum else max_sum\n\nclass Solution(object):\n    def minSubArraySum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        nums.sort()\n        min_sum = nums[0]\n        max_sum = nums[0]\n\n        for i in range(1, len(nums)):\n            min_sum = min(min_sum, nums[i] + minSubArraySum(nums[:i]))\n            max_sum = max(max_sum, nums[i] + maxSubArraySum(nums[:i]))\n\n        return min_sum if min_sum <= max_sum else max_sum\n\nif __name__ == \"__main__\":\n    assert minSubArraySum([-1, -2, -3]) == -6\n    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    assert minSubArraySum([2, -3, -1, -3, -5, -1, -2]) == -7"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n    left = 0\n    right = 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        left += nums[i]\n        right += nums[i]\n        if left < 0:\n            left = 0\n        if right < 0:\n            right = 0\n        min_sum = min(min_sum, left + right)\n    return min_sum\n\n\nclass Solution:\n    # @param nums, a list of integers\n    # @return an integer\n    def minSubArraySum(self, nums):\n        \"\"\"\n        dfs\n        \"\"\"\n        if not nums:\n            return 0\n        \n        left, right = 0, 0\n        min_sum = nums[0]\n        for i in range(1, len(nums)):\n            left, right = left + nums[i], right + nums[i]\n            if left < 0:\n                left = 0\n            if right < 0:\n                right = 0\n            min_sum = min(min_sum, left + right)\n        return min_sum\n    \n    # dp\n    def minSubArraySum2(self, nums):\n        \"\"\"\n        dp\n        \"\"\"\n        if not nums:\n            return 0\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        left, right = 0, 0\n        min_sum = nums[0]\n        for i in range(1, len(nums)):\n            left, right = left + nums[i], right + nums[i]\n            if left < 0:\n                left = 0\n            if right < 0:\n                right = 0\n            min_sum = min(min_sum, left + right)\n        return min_sum"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# Solution 1: DP\n    # dp[i] = min(dp[i-1]+nums[i])\n    # dp[0] = nums[0]\n    # dp[i] = min(dp[i-1]+nums[i], dp[i]+nums[i])\n    # O(n) time, O(1) space\n    dp = [nums[0]]\n    for i in range(1, len(nums)):\n        dp.append(min(dp[i-1]+nums[i], dp[i]+nums[i]))\n    return dp[-1]\n\n# DP solution\nclass Solution:\n    # @return an integer\n    def minSubArraySum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        dp = [0] * len(nums)\n        for i in range(1, len(nums)):\n            dp[i] = min(dp[i-1]+nums[i], dp[i]+nums[i])\n        return dp[-1]\n\n# Recursion solution\nclass Solution:\n    # @return an integer\n    def minSubArraySum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # DP solution\n        # dp = [0] * len(nums)\n        # for i in range(len(nums)):\n        #     dp[i] = min(dp[i-1]+nums[i], dp[i]+nums[i])\n        # return dp[-1]\n        # Recursion solution\n        return self.minSubArraySum_rec(nums)\n\n    def minSubArraySum_rec(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        left, right = 0, len(nums)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def minSubArraySum_helper(nums, sum, low, high):\n        if high == low:\n            return sum\n        if high < low:\n            return -1\n        mid = (low + high) / 2\n        return min(minSubArraySum_helper(nums, sum + nums[mid], low, mid),\n                   minSubArraySum_helper(nums, sum + nums[mid], mid + 1, high))\n    return minSubArraySum_helper(nums, 0, 0, len(nums) - 1)\n\n\ndef main():\n    for _ in xrange(input()):\n        print minSubArraySum([1, -2, 3])\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n\nclass Solution(object):\n    def minSubArraySum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        ans = nums[0]\n        for i in range(1, n):\n            ans = min(ans, nums[i] + minSubArraySum(nums[:i]))\n        return ans"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# base case\n    if len(nums) == 0:\n        return 0\n    # base case\n    if len(nums) == 1:\n        return nums[0]\n    # base case\n    if len(nums) == 2:\n        return min(nums[0], nums[1])\n\n    # main loop\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        if min_sum < 0:\n            min_sum = 0\n    return min_sum\n\n\ndef main():\n    # test cases\n    nums = [-1, -2, -3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# The problem is to solve this recursively, but we are using a simple\n    # dynamic programming approach.\n    # The idea is to use the formula sum(nums[i:]) - sum(nums[:i]) = sum(nums[i]) - sum(nums[:i])\n    # So we can simply sum up all the numbers from 0 to i and then sum up the first i numbers\n    # from 0 to i - 1 and then subtract the sum of the first i numbers from the first i numbers.\n    # So we are essentially using the same formula to solve this problem.\n    # The only tricky part is to handle the case when nums is empty.\n    # In that case, we simply return the sum of all the numbers from 0 to i - 1.\n    # The easiest way to solve this problem is to use the formula sum(nums[i:]) - sum(nums[:i]) = sum(nums[i]) - sum(nums[:i])\n    # Since there is no such a formula for the case when nums is empty, we are using the formula\n    # sum(nums[:i]) - sum(nums[i:]) = sum(nums[:i]) - sum(nums[:i]) = sum(nums[:i])\n    # and then adding the sum of the first i numbers from 0 to i - 1.\n    # Note that we don't need to consider the case when the first i numbers are 0.\n    # So the formula for sum(nums[:i]) is sum(nums[:i]) + sum(nums[:i])\n    # Since the first i numbers are 0, we can just sum up the first i numbers and then subtract the sum of the first i numbers\n    # from the first i numbers.\n    # So we are essentially using the same formula to solve this problem.\n    # The only tricky part is to handle the case when nums is empty.\n    # In that case, we simply return the sum of all the numbers from 0 to i - 1.\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    sum_nums = 0\n    for i in"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res = min(res + nums[i], nums[i])\n    return res\n\n\nclass Solution(object):\n    def minSubArrayLen(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = min(res + nums[i], nums[i])\n            if res - nums[i] < k:\n                return res - nums[i]\n        return res - nums[-1]\n\nif __name__ == \"__main__\":\n    print Solution().minSubArrayLen([-1, -2, -3], 2)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, min(nums[i - 1], nums[i]))\n    return min_sum\n\n\nif __name__ == \"__main__\":\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "n = len(nums)\n    if n == 0:\n        return 0\n    left = 0\n    right = n\n    min_sum = nums[0]\n    while left < right:\n        mid = left + (right - left) / 2\n        sum = 0\n        for i in range(left, mid):\n            sum += nums[i]\n        if sum > min_sum:\n            right = mid\n        elif sum < min_sum:\n            left = mid + 1\n        else:\n            min_sum = sum\n    return min_sum\n\n\nif __name__ == '__main__':\n    nums = [-1, -2, -3, -4, -5, -6]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n    if not nums:\n        return 0\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, minSubArraySum(nums[:i]) + nums[i])\n    return min_sum\n\n\nif __name__ == '__main__':\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "if len(nums) == 0:\n        return 0\n    sub_arrays = [nums[:i+1] for i in range(len(nums))]\n    sub_array_sum = [min(x) for x in map(sum, sub_arrays)]\n    return min(sub_array_sum)\n\n\nclass Solution(object):\n    def minSubArraySum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        sub_arrays = [nums[:i+1] for i in range(len(nums))]\n        sub_array_sum = [min(x) for x in map(sum, sub_arrays)]\n        return min(sub_array_sum)\n\n\nif __name__ == \"__main__\":\n    assert Solution().minSubArraySum([-1, -2, -3]) == -6\n    assert Solution().minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    assert Solution().minSubArraySum([-1, -2, -3, -4]) == 0\n    assert Solution().minSubArraySum([2, 3, 4, 1, 2, 4, -1]) == -1"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n\n    n = len(nums)\n    m = 0\n    for i in range(n):\n        m += nums[i]\n        while m >= 0 and nums[i] >= 0:\n            m -= nums[i]\n            i += 1\n    return m\n\n\ndef main():\n    \"\"\"\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    minSubArraySum([1, 2, 3, 4]) == 0\n    minSubArraySum([1, 1, 1, 1, 1, 1]) == 1\n    minSubArraySum([-1, -1, -1, -1, -1, -1]) == 0\n    \"\"\"\n    print(minSubArraySum([-1, -2, -3]))\n    print(minSubArraySum([1, 2, 3, 4]))\n    print(minSubArraySum([1, 1, 1, 1, 1, 1]))\n    print(minSubArraySum([-1, -1, -1, -1, -1, -1]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "if len(nums) == 0:\n        return 0\n\n    # find the maximum number\n    max_num = max(nums)\n\n    # find the minimum number\n    min_num = min(nums)\n\n    # find the minimum sum of all the sub-array\n    min_sum = min_num\n    for num in nums:\n        min_sum = min(min_sum, num + min_num)\n\n    return min_sum\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))\n\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_sum = nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        max_sum = max(max_sum, nums[i])\n        min_sum = min(min_sum, nums[i])\n        if max_sum - min_sum < 0:\n            return -1\n    for i in range(len(nums)):\n        sum = nums[i]\n        for j in range(i + 1, len(nums)):\n            sum += nums[j]\n            if sum < max_sum:\n                max_sum = sum\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n\n\ndef main():\n    nums = [-2, -1, 2, 3, 4, -5]\n    print(minSubArraySum(nums))\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))\n    nums = [-5, -4, -3, -2, -1]\n    print(minSubArraySum(nums))\n    nums = [-5, -4, -3, -2, -1, 0]\n    print(minSubArraySum(nums))\n    nums = [-5, -4, -3, -2, -1, 0, 1]\n    print(minSubArraySum(nums))\n    nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3]\n    print(minSubArraySum(nums))\n    nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]\n    print(minSubArraySum(nums))\n    nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n    print(minSubArraySum(nums))\n    nums = [-5, -4, -3, -2,"
    }
  ]
}