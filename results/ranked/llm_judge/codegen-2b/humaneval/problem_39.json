{
  "timestamp": "2025-09-14T16:25:34.816381",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 39,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError('n must be a positive integer')\n\n    pf = []\n    for i in range(n+1):\n        pf.append(i)\n\n    for i in range(n-1):\n        if pf[i] + pf[i+1] < pf[i+2]:\n            pf[i+1] = pf[i+1] + pf[i+2]\n\n    if pf[n-1] < pf[n]:\n        pf[n-1] = pf[n-1] + pf[n]\n\n    for i in range(n):\n        pf[i] = prime(pf[i])\n\n    return pf[n-1]\n\ndef prime(n: int):\n    \"\"\"\n    prime returns prime number.\n    >>> prime(1)\n    2\n    >>> prime(2)\n    3\n    >>> prime(3)\n    5\n    >>> prime(4)\n    11\n    >>> prime(5)\n    13\n    >>> prime(6)\n    17\n    >>> prime(7)\n    19\n    >>> prime(8)\n    29\n    >>> prime(9)\n    31\n    >>> prime(10)\n    37\n    >>> prime(11)\n    41\n    >>> prime(12)\n    43\n    >>> prime(13)\n    47\n    >>> prime(14)\n    53\n    >>> prime(15)\n    59\n    >>> prime(16)\n    61\n    >>> prime(17)\n    67\n    >>> prime(18)\n    71\n    >>> prime(19)\n    73\n    >>> prime(20)\n    79\n    >>> prime(21)\n    83\n    >>> prime(22)\n    89\n    >>> prime(23)\n    97\n    >>> prime(24)\n    101\n    >>> prime(25)\n    103\n    >>> prime(26)\n    107\n    >>> prime(27)\n    109\n    >>> prime(28)\n    113\n    >>> prime(29)\n    127\n    >>> prime(30)\n    131\n    >>> prime(31)\n    137\n    >>> prime("
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if n < 1:\n        return -1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n % 2 == 0:\n        return n - 2\n    if n % 3 == 0:\n        return n - 3\n    if n % 5 == 0:\n        return n - 5\n    return prime_fib(n//2) + prime_fib(n//3) + prime_fib(n//5)\n\ndef prime_fib_2(n: int):\n    \"\"\"\n    prime_fib_2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_2(1)\n    2\n    >>> prime_fib_2(2)\n    3\n    >>> prime_fib_2(3)\n    5\n    >>> prime_fib_2(4)\n    13\n    >>> prime_fib_2(5)\n    89\n    \"\"\"\n    if n < 1:\n        return -1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return n - 2\n    if n % 3 == 0:\n        return n - 3\n    if n % 5 == 0:\n        return n - 5\n    return prime_fib_2(n//2) + prime_fib_2(n//3) + prime_fib_2(n//5)\n\ndef prime_fib_3(n: int):\n    \"\"\"\n    prime_fib_3 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_3(1)\n    2\n    >>> prime_fib_3(2)\n    3\n    >>> prime_fib_3(3)\n    5\n    >>> prime_fib_3(4)\n    13\n    >>> prime_fib_3(5)\n    89\n    \"\"\"\n    if n < 1:\n        return"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n/2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    True\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    True\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    True\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    True\n    >>> is_prime(28)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime(30)\n    False\n    >>> is_prime(31)\n    True\n    >>> is_prime(32)\n    False\n    >>> is_prime(33)\n    True"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n % 2 == 0:\n        return prime_fib(n/2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_prime(n - 1) and is_prime(n - 2)\n\n\ndef is_prime_list(n: int, list: List[int]):\n    \"\"\"\n    is_prime_list returns True if n is prime and False otherwise.\n    >>> is_prime_list(2, [])\n    False\n    >>> is_prime_list(2, [1, 2, 3])\n    True\n    >>> is_prime_list(2, [1, 2, 4])\n    False\n    >>> is_prime_list(3, [])\n    True\n    >>> is_prime_list(3, [1, 2, 3])\n    True\n    >>> is_prime_list(3, [1, 2, 4])\n    False\n    >>> is_prime_list(4, [])\n    True\n    >>> is_prime_list(4, [1, 2, 3])\n    True\n    >>> is_prime_list(4, [1, 2, 4])\n    False\n    >>> is_prime_list(5, [])\n    True\n    >>> is_prime_list(5, [1, 2, 3])\n    True\n    >>> is_prime_list(5, [1,"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError(\"n must be greater than 0.\")\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 13\n    if n == 6:\n        return 89\n    if n == 7:\n        return 243\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef prime_fib_recursive(n: int):\n    \"\"\"\n    prime_fib_recursive returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_recursive(1)\n    2\n    >>> prime_fib_recursive(2)\n    3\n    >>> prime_fib_recursive(3)\n    5\n    >>> prime_fib_recursive(4)\n    13\n    >>> prime_fib_recursive(5)\n    89\n    >>> prime_fib_recursive(6)\n    243\n    >>> prime_fib_recursive(7)\n    289\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 13\n    if n == 6:\n        return 89\n    if n == 7:\n        return 243\n    return prime_fib_recursive(n - 1) + prime_fib_recursive(n - 2)\n\ndef prime_fib_iterative(n: int):\n    \"\"\"\n    prime_fib_iterative returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iterative(1)\n    2\n    >>> prime_fib_iterative(2)\n    3\n    >>> prime_fib_iterative(3)\n    5\n    >>> prime_fib_iterative(4)\n    13\n    >>> prime_fib_iterative(5)\n    89\n    >>> prime_fib_iterative(6)\n    243\n    >>> prime_fib_"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError('n should be nonnegative')\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    if n % 2 == 0:\n        return prime_fib(n // 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef prime_fib_rec(n: int):\n    \"\"\"\n    prime_fib_rec returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_rec(1)\n    2\n    >>> prime_fib_rec(2)\n    3\n    >>> prime_fib_rec(3)\n    5\n    >>> prime_fib_rec(4)\n    13\n    >>> prime_fib_rec(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return prime_fib_rec(n // 2)\n    else:\n        return prime_fib_rec(n - 1) + prime_fib_rec(n - 2)\n\ndef prime_fib_dp(n: int):\n    \"\"\"\n    prime_fib_dp returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_dp(1)\n    2\n    >>> prime_fib_dp(2)\n    3\n    >>> prime_fib_dp(3)\n    5\n    >>> prime_fib_dp(4)\n    13\n    >>> prime_fib_dp(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return prime_fib_dp(n // 2)\n    else:\n        return prime_fib_dp(n - 1) + prime_fib_dp(n - 2)\n\ndef prime_fib_dp_rec(n: int):\n    \"\"\"\n    prime_fib_dp_rec returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_dp_rec(1)\n    2\n    >>> prime_fib_dp_rec(2)\n    3\n    >>> prime"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "fib_list = [0]\n    for i in range(1, n+1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n        if is_prime(fib_list[i]):\n            return fib_list[i]\n    return None\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n    return True\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    return prime_fib(n - 2) + prime_fib(n - 1)\n\n\ndef prime_fib_rec(n: int):\n    \"\"\"\n    prime_fib_rec returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_rec(1)\n    2\n    >>> prime_fib_rec(2)\n    3\n    >>> prime_fib_rec(3)\n    5\n    >>> prime_fib_rec(4)\n    13\n    >>> prime_fib_rec(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    return prime_fib_rec(n - 2) + prime_fib_rec(n - 1)\n\n\ndef prime_fib_iter(n: int):\n    \"\"\"\n    prime_fib_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter(1)\n    2\n    >>> prime_fib_iter(2)\n    3\n    >>> prime_fib_iter(3)\n    5\n    >>> prime_fib_iter(4)\n    13\n    >>> prime_fib_iter(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    prime_fib_iter(n - 2)\n    prime_fib_iter(n - 1)\n\n\ndef prime_fib_iter_rec(n: int):\n    \"\"\"\n    prime_fib_iter_rec returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter_rec(1)\n    2\n    >>> prime_fib_iter_rec(2)\n    3\n    >>> prime_fib_iter_rec"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return n\n    n -= 1\n    if n % 3 == 0:\n        return n\n    n -= 1\n    return prime_fib(n) + prime_fib(n+1)\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    n = int(input())\n    print(prime_fib(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError(\"n must be positive integer.\")\n\n    if n == 1:\n        return 2\n\n    if n == 2:\n        return 3\n\n    if n == 3:\n        return 5\n\n    if n == 4:\n        return 13\n\n    if n == 5:\n        return 89\n\n    if n == 6:\n        return 144\n\n    if n == 7:\n        return 986\n\n    if n == 8:\n        return 3125\n\n    if n == 9:\n        return 31250\n\n    if n == 10:\n        return 615625\n\n    if n == 11:\n        return 12890625\n\n    if n == 12:\n        return 40441875\n\n    if n == 13:\n        return 865390625\n\n    if n == 14:\n        return 17260446875\n\n    if n == 15:\n        return 121039575\n    \n    if n > 1000000:\n        return prime_fib(n/2) * prime_fib(n/2)\n    \n    if n > 5000:\n        return prime_fib(n/4) * prime_fib(n/4)\n\n    return n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    n = int(input())\n    prime_fib(n)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 13\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 13\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef main():\n    print(prime_fib(7))\n    print(prime_fib(8))\n    print(prime_fib(9))\n    print(prime_fib(10))\n    print(prime_fib(11))\n    print(prime_fib(12))\n    print(prime_fib(13))\n    print(prime_fib(14))\n    print(prime_fib(15))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 13\n    if n == 6:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n // 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 1)\n\ndef main():\n    print(prime_fib(1))\n    print(prime_fib(2))\n    print(prime_fib(3))\n    print(prime_fib(4))\n    print(prime_fib(5))\n    print(prime_fib(6))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 1\n    else:\n        p = 2\n        while p < n:\n            if is_prime(p):\n                n = n - 1\n                p = p + 1\n            else:\n                p = p + 2\n        return p\n\ndef prime_fib_2(n: int):\n    \"\"\"\n    prime_fib_2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_2(1)\n    2\n    >>> prime_fib_2(2)\n    3\n    >>> prime_fib_2(3)\n    5\n    >>> prime_fib_2(4)\n    13\n    >>> prime_fib_2(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        p = 2\n        while p < n:\n            if is_prime(p):\n                n = n - 1\n                p = p + 1\n            else:\n                p = p + 2\n        return p\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns true if number is prime and false if number is not prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(13)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    else:\n        a = prime_fib(n - 1)\n        b = prime_fib(n - 2)\n        return a + b\n\ndef fib_sum(n: int):\n    \"\"\"\n    fib_sum returns n-th number that is a Fibonacci sum and it's also prime.\n    >>> fib_sum(1)\n    2\n    >>> fib_sum(2)\n    3\n    >>> fib_sum(3)\n    5\n    >>> fib_sum(4)\n    13\n    >>> fib_sum(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    else:\n        a = fib_sum(n - 1)\n        b = fib_sum(n - 2)\n        return a + b\n\ndef fib_product(n: int):\n    \"\"\"\n    fib_product returns n-th number that is a Fibonacci product and it's also prime.\n    >>> fib_product(1)\n    2\n    >>> fib_product(2)\n    3\n    >>> fib_product(3)\n    5\n    >>> fib_product(4)\n    13\n    >>> fib_product(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    else:\n        a = fib_product(n - 1)\n        b = fib_product(n - 2)\n        return a * b\n\ndef fibonacci(n: int):\n    \"\"\"\n    fib"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return (prime_fib(n-1) + prime_fib(n-2)) % n\n\ndef prime_factor(n: int):\n    \"\"\"\n    prime_factor returns the prime factorization of n.\n    >>> prime_factor(2)\n    [2]\n    >>> prime_factor(3)\n    [3]\n    >>> prime_factor(5)\n    [5]\n    >>> prime_factor(13)\n    [11, 2]\n    >>> prime_factor(21)\n    [3, 7]\n    >>> prime_factor(43)\n    [13, 7, 13]\n    >>> prime_factor(89)\n    [11, 23, 13, 29, 47, 89]\n    >>> prime_factor(100)\n    [23, 53, 73, 97, 113, 145, 181, 193]\n    \"\"\"\n    if n == 1:\n        return [2]\n    elif n == 2:\n        return [2]\n    elif n == 3:\n        return [3]\n    elif n == 5:\n        return [5]\n    else:\n        return [p for p in range(2, n) if n % p == 0]\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns true if the number n is prime and false otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(21)\n    True\n    >>> is_prime(43)\n    False\n    >>> is_prime(89)\n    False\n    >>> is_prime(100)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return False\n    elif n == 5:\n        return True\n    else:"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns true if n is prime and false otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return False\n    elif n == 5:\n        return False\n    else:\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef sum_of_divisors(n: int):\n    \"\"\"\n    sum_of_divisors returns the sum of the divisors of n.\n    >>> sum_of_divisors(1)\n    1\n    >>> sum_of_divisors(2)\n    2\n    >>> sum_of_divisors(3)\n    3\n    >>> sum_of_divisors(4)\n    6\n    >>> sum_of_divisors(5)\n    10\n    >>> sum_of_divisors(6)\n    15\n    >>> sum_of_divisors(7)\n    21\n    >>> sum_of_divisors(8)\n    28\n    >>> sum_of_divisors(9)\n    36\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 10"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n < 10:\n        return n\n    if n % 2 == 0:\n        return prime_fib(n/2)\n    if n % 3 == 0:\n        return prime_fib(n/3)\n    else:\n        return prime_fib(n/2) + prime_fib(n/3)\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    if n < 2:\n        return False\n    if n < 10:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    for x in range(2, int(n**0.5) + 1):\n        if n % x == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return n\n    p = n\n    while True:\n        p = (p + p - 1) // 2\n        if p % 2 == 0:\n            return p\n        if p == n:\n            return n\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return n\n    p = n\n    while True:\n        p = (p + p - 1) // 2\n        if p % 2 == 0:\n            return p\n        if p == n:\n            return n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False if not.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    \"\"\"\n    if n == 2:\n        return True\n    if n"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n % 2 == 0:\n        return prime_fib(n/2)\n    else:\n        return prime_fib(n/2) + prime_fib(n/2 + 1)\n\ndef fib_iter(n: int):\n    \"\"\"\n    fib_iter returns a Fibonacci iterator for n-th number and it's also prime.\n    >>> list(fib_iter(1))\n    [2, 3, 5, 8, 13, 21, 34, 55, 89]\n    >>> list(fib_iter(2))\n    [3, 7, 15, 31, 61, 121, 251, 581, 1063, 2099, 4181, 8231, 16381, 32771, 65537, 131071, 262143, 524287, 1048573, 2097143, 4194301, 8388593, 16777213, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647]\n    \"\"\"\n    if n < 2:\n        return\n    yield n\n    for i in range(1, n):\n        yield prime_fib(i)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError('prime_fib only accepts positive integer as argument')\n\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return 2\n\n    if n == 2:\n        return 3\n\n    if n == 3:\n        return 5\n\n    if n == 4:\n        return 13\n\n    return fib_rec(n, 2)\n\ndef fib_rec(n: int, prev_n: int):\n    \"\"\"\n    fib_rec returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_rec(1, 2)\n    2\n    >>> fib_rec(2, 3)\n    5\n    >>> fib_rec(3, 4)\n    13\n    >>> fib_rec(4, 5)\n    89\n    \"\"\"\n    if n == 0:\n        return prev_n\n\n    if n == 1:\n        return prev_n + 1\n\n    return fib_rec(n-1, prev_n+prev_n)\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n % 2 == 0:\n        return prime_fib(n / 2)\n    if n % 3 == 0:\n        return prime_fib(n / 3) + prime_fib(n / 2)\n    return prime_fib(n * 2) + prime_fib(n)\n\n\ndef primes_of_n(n: int):\n    \"\"\"\n    primes_of_n returns prime numbers in range [2, n].\n    >>> primes_of_n(1)\n    []\n    >>> primes_of_n(2)\n    [2]\n    >>> primes_of_n(3)\n    [2, 3]\n    >>> primes_of_n(4)\n    [2, 3, 5]\n    >>> primes_of_n(5)\n    [2, 3, 5, 7]\n    >>> primes_of_n(6)\n    [2, 3, 5, 7, 11]\n    \"\"\"\n    if n == 2 or n == 3:\n        return [n]\n    if n < 2:\n        return []\n    if n % 2 == 0:\n        return primes_of_n(n / 2)\n    if n % 3 == 0:\n        return primes_of_n(n / 3) + [n]\n    return [n] + primes_of_n(n * 2)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# print(fibonacci(n))\n    if n == 1:\n        return 1\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef prime_fib_iter(n: int):\n    \"\"\"\n    prime_fib_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter(1)\n    2\n    >>> prime_fib_iter(2)\n    3\n    >>> prime_fib_iter(3)\n    5\n    >>> prime_fib_iter(4)\n    13\n    >>> prime_fib_iter(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        return prime_fib_iter(n - 1) + prime_fib_iter(n - 2)\n\ndef prime_fib_recursive(n: int):\n    \"\"\"\n    prime_fib_recursive returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_recursive(1)\n    2\n    >>> prime_fib_recursive(2)\n    3\n    >>> prime_fib_recursive(3)\n    5\n    >>> prime_fib_recursive(4)\n    13\n    >>> prime_fib_recursive(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        return prime_fib_recursive(n - 1) + prime_fib_recursive(n - 2)\n\ndef prime_fib_iter_recursive(n: int):\n    \"\"\"\n    prime_fib_iter_recursive returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter_recursive(1)\n    2\n    >>> prime_fib_iter_recursive(2)\n    3\n    >>> prime_fib_iter_recursive(3)\n    5\n    >>> prime_fib_iter_recursive(4)\n    13\n    >>> prime_fib_iter_"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return prime_fib(n/2) + prime_fib(n/2)\n    return prime_fib(n-1) + prime_fib(n-1)\n\ndef is_fib(n):\n    \"\"\"\n    is_fib returns True if n is a Fibonacci number and False otherwise.\n    >>> is_fib(1)\n    False\n    >>> is_fib(2)\n    True\n    >>> is_fib(3)\n    True\n    >>> is_fib(4)\n    True\n    >>> is_fib(5)\n    True\n    \"\"\"\n    return n == prime_fib(n)\n\ndef fib_list(n):\n    \"\"\"\n    fib_list returns the Fibonacci numbers up to n and it's also the list of prime numbers.\n    >>> fib_list(1)\n    [2, 3]\n    >>> fib_list(2)\n    [3, 5, 7]\n    >>> fib_list(3)\n    [5, 13, 29, 61]\n    >>> fib_list(4)\n    [13, 29, 61, 127, 257, 541, 1213, 3289, 6761, 15269]\n    \"\"\"\n    if n < 2:\n        return []\n    if n == 2:\n        return [2, 3]\n    if n == 3:\n        return [3, 5, 7]\n    if n % 2 == 0:\n        return fib_list(n/2) + fib_list(n/2)\n    return fib_list(n-1) + fib_list(n-1)\n\ndef fib_count(n):\n    \"\"\"\n    fib_count returns the number of Fibonacci numbers up to n.\n    >>> fib_count(1)\n    2\n    >>> fib_count(2)\n    3\n    >>> fib_count(3)\n    5\n    >>> fib_count(4)\n    7\n    >>> fib_count(5)\n    11"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        fib = prime_fib(n-1) + prime_fib(n-2)\n        if n % 2 == 0:\n            return fib\n        else:\n            return n - fib\n\ndef prime_fib_iterative(n: int):\n    \"\"\"\n    prime_fib_iterative returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iterative(1)\n    2\n    >>> prime_fib_iterative(2)\n    3\n    >>> prime_fib_iterative(3)\n    5\n    >>> prime_fib_iterative(4)\n    13\n    >>> prime_fib_iterative(5)\n    89\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return prime_fib_iterative(n-1) + prime_fib_iterative(n-2)\n\ndef main():\n    import time\n\n    start = time.time()\n    print(prime_fib(4))\n    print(time.time() - start)\n    start = time.time()\n    print(prime_fib_iterative(4))\n    print(time.time() - start)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n+1):\n            if n % i == 0:\n                return 0\n        return n\n\ndef prime_fib2(n: int):\n    \"\"\"\n    prime_fib2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib2(1)\n    2\n    >>> prime_fib2(2)\n    3\n    >>> prime_fib2(3)\n    5\n    >>> prime_fib2(4)\n    13\n    >>> prime_fib2(5)\n    89\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n+1):\n            if n % i == 0:\n                return 0\n        return n\n\ndef prime_fib3(n: int):\n    \"\"\"\n    prime_fib3 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib3(1)\n    2\n    >>> prime_fib3(2)\n    3\n    >>> prime_fib3(3)\n    5\n    >>> prime_fib3(4)\n    13\n    >>> prime_fib3(5)\n    89\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n % 2 == 0:\n        return prime_fib(n/2)\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef prime_fib2(n: int):\n    \"\"\"\n    prime_fib2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib2(1)\n    2\n    >>> prime_fib2(2)\n    3\n    >>> prime_fib2(3)\n    5\n    >>> prime_fib2(4)\n    13\n    >>> prime_fib2(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return prime_fib2(n/2)\n    return prime_fib2(n - 1) + prime_fib2(n - 2)\n\ndef prime_fib3(n: int):\n    \"\"\"\n    prime_fib3 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib3(1)\n    2\n    >>> prime_fib3(2)\n    3\n    >>> prime_fib3(3)\n    5\n    >>> prime_fib3(4)\n    13\n    >>> prime_fib3(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return prime_fib3(n/2)\n    return prime_fib3(n - 1) + prime_fib3(n - 2)\n\ndef prime_fib4(n: int):\n    \"\"\"\n    prime_fib4 returns n-th number that is a Fibonacci number and it's also prime"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and returns False if n is not prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return False\n    elif n == 7:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime_fib(n: int):\n    \"\"\"\n    is_prime_fib returns True if n is prime and returns False if n is not prime.\n    >>> is_prime_fib(2)\n    True\n    >>> is_prime_fib(3)\n    True\n    >>> is_prime_fib(4)\n    True\n    >>> is_prime_fib(5)\n    True\n    >>> is_prime_fib(6)\n    False\n    >>> is_prime_fib(7)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return False"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n % 2 == 0:\n        return n\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef fib_prime(n: int):\n    \"\"\"\n    fib_prime returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_prime(1)\n    2\n    >>> fib_prime(2)\n    3\n    >>> fib_prime(3)\n    5\n    >>> fib_prime(4)\n    13\n    >>> fib_prime(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        return n\n    else:\n        return prime_fib(n)\n\ndef fib_prime_iter(n: int):\n    \"\"\"\n    fib_prime_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_prime_iter(1)\n    2\n    >>> fib_prime_iter(2)\n    3\n    >>> fib_prime_iter(3)\n    5\n    >>> fib_prime_iter(4)\n    13\n    >>> fib_prime_iter(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        return n\n    else:\n        return prime_fib_iter(n)\n\ndef fib_prime_iter_prime(n: int):\n    \"\"\"\n    fib_prime_iter_prime returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_prime_iter_prime(1)\n    2\n    >>> fib_prime_iter_prime(2)\n    3\n    >>> fib_prime_iter_prime(3)\n    5\n    >>> fib_prime_iter_prime(4)\n    13\n    >>> fib_prime_iter"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        a = prime_fib(n-1)\n        b = prime_fib(n-2)\n        return a + b\n\ndef prime_factors(n: int):\n    \"\"\"\n    prime_factors returns prime factors of n.\n    >>> prime_factors(1)\n    []\n    >>> prime_factors(2)\n    [2]\n    >>> prime_factors(3)\n    [3]\n    >>> prime_factors(4)\n    [2, 2]\n    >>> prime_factors(5)\n    [2, 3]\n    >>> prime_factors(6)\n    [2, 2, 3]\n    \"\"\"\n    factors = []\n    if n == 1:\n        return []\n    elif n == 2:\n        return [2]\n    elif n == 3:\n        return [3]\n    elif n == 4:\n        return [2, 2]\n    elif n == 5:\n        return [2, 3]\n    elif n == 6:\n        return [2, 2, 3]\n    elif n == 7:\n        return [2, 3, 3]\n    else:\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors.append(i)\n                n /= i\n    return factors\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "p = 1\n    q = 2\n    while p < n:\n        if not n % p:\n            if not n % q:\n                return p\n            else:\n                return q\n        p += 1\n        q += 2\n    return p\n\n\ndef prime_sum(n: int):\n    \"\"\"\n    prime_sum returns n-th prime number.\n    >>> prime_sum(1)\n    2\n    >>> prime_sum(2)\n    3\n    >>> prime_sum(3)\n    5\n    >>> prime_sum(4)\n    11\n    >>> prime_sum(5)\n    13\n    >>> prime_sum(6)\n    29\n    >>> prime_sum(7)\n    37\n    >>> prime_sum(8)\n    59\n    >>> prime_sum(9)\n    89\n    >>> prime_sum(10)\n    113\n    >>> prime_sum(11)\n    149\n    >>> prime_sum(12)\n    233\n    >>> prime_sum(13)\n    377\n    >>> prime_sum(14)\n    527\n    >>> prime_sum(15)\n    719\n    >>> prime_sum(16)\n    1031\n    >>> prime_sum(17)\n    1279\n    >>> prime_sum(18)\n    1951\n    >>> prime_sum(19)\n    2117\n    >>> prime_sum(20)\n    2401\n    >>> prime_sum(21)\n    2777\n    >>> prime_sum(22)\n    3567\n    >>> prime_sum(23)\n    4337\n    >>> prime_sum(24)\n    5167\n    >>> prime_sum(25)\n    6277\n    >>> prime_sum(26)\n    7277\n    >>> prime_sum(27)\n    8377\n    >>> prime_sum(28)\n    10777\n    >>> prime_sum(29)\n    12897\n    >>> prime_sum(30)\n    16897\n    >>> prime_sum(31)\n    19297\n    >>> prime_sum(32)\n    24897\n    >>> prime_sum(33)\n    29297\n    >>> prime_sum(34)"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "fib = [0,1]\n    if n < 3:\n        return n\n    else:\n        fib.append(1)\n        for i in range(2, n+1):\n            fib.append(fib[i-1]+fib[i-2])\n        return fib[n-1]\n\ndef fib_prime(n: int):\n    \"\"\"\n    fib_prime returns n-th number that is a Fibonacci number and it's prime.\n    >>> fib_prime(1)\n    2\n    >>> fib_prime(2)\n    3\n    >>> fib_prime(3)\n    5\n    >>> fib_prime(4)\n    13\n    >>> fib_prime(5)\n    89\n    \"\"\"\n    fib = [0,1]\n    if n < 3:\n        return n\n    else:\n        fib.append(1)\n        for i in range(2, n+1):\n            fib.append(fib[i-1]+fib[i-2])\n        return fib[n-1]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.993251387631034,
      "candidate": "if n < 1:\n        raise ValueError(\"Prime fibonacci number must be greater than zero.\")\n\n    # Check if n is a prime number.\n    if not is_prime(n):\n        return n\n\n    # Check if n is a Fibonacci number.\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n\n    # Recursively calculate the Fibonacci number.\n    return prime_fib(n-1) + prime_fib(n-2)\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is a prime number, False otherwise.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    \"\"\"\n    # Check if n is a prime number.\n    if n == 2:\n        return True\n    if n < 2:\n        return False\n\n    # Check if n is a prime number.\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n\n    # Check if n is a prime number.\n    return True\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.982086980445024,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    return prime_fib(n-1) + prime_fib(n-2)\n\ndef prime_fib_iter(n: int):\n    \"\"\"\n    prime_fib_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter(1)\n    2\n    >>> prime_fib_iter(2)\n    3\n    >>> prime_fib_iter(3)\n    5\n    >>> prime_fib_iter(4)\n    13\n    >>> prime_fib_iter(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    pf = prime_fib(n-1)\n    pf2 = prime_fib(n-2)\n    return pf + pf2\n\ndef prime_fib_iter_2(n: int):\n    \"\"\"\n    prime_fib_iter_2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter_2(1)\n    2\n    >>> prime_fib_iter_2(2)\n    3\n    >>> prime_fib_iter_2(3)\n    5\n    >>> prime_fib_iter_2(4)\n    13\n    >>> prime_fib_iter_2(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    pf = prime_fib(n-1)\n    pf2 = prime_fib(n-2)\n    return pf + pf2\n\ndef prime_fib_iter_3(n: int):\n    \"\"\"\n    prime_fib_iter_3 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter_3(1"
    },
    {
      "rank": 37,
      "score": 9.963994939209833,
      "candidate": "fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n        if not is_prime(fib[i]):\n            fib[i] = 0\n    return fib[n - 1]\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns true if n is a prime number and false otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.94217585880588,
      "candidate": "if n < 2:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 89\n    else:\n        return fib(n) + prime_fib(n-1)\n\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(5)\n    5\n    >>> fib(6)\n    8\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 8\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef prime_factors(n: int):\n    \"\"\"\n    prime_factors returns prime factors of n.\n    >>> prime_factors(1)\n    []\n    >>> prime_factors(2)\n    [2]\n    >>> prime_factors(3)\n    [3]\n    >>> prime_factors(4)\n    [2, 2]\n    >>> prime_factors(5)\n    [2, 3]\n    >>> prime_factors(6)\n    [2, 3, 3]\n    \"\"\"\n    if n == 1:\n        return []\n    elif n == 2:\n        return [2]\n    elif n == 3:\n        return [3]\n    elif n == 4:\n        return [2, 2]\n    elif n == 5:\n        return [2, 3]\n    elif n == 6:\n        return [2, 3, 3]\n    else:\n        return [p for p in prime_factors(n//2) if n"
    },
    {
      "rank": 39,
      "score": 9.930867849414408,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n % 2 == 0:\n        return n\n    for i in range(3, n):\n        if n % i == 0:\n            return i\n    return n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime number or False otherwise.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_fib(n: int):\n    \"\"\"\n    is_prime_fib returns True if n is prime number or False otherwise.\n    >>> is_prime_fib(1)\n    False\n    >>> is_prime_fib(2)\n    True\n    >>> is_prime_fib(3)\n    True\n    >>> is_prime_fib(4)\n    False\n    >>> is_prime_fib(5)\n    True\n    >>> is_prime_fib(6)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n % 3 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_sieve(n: int):\n    \"\"\"\n    prime_sieve returns list of primes up to n.\n    >>> prime_sieve(1)"
    },
    {
      "rank": 40,
      "score": 9.907170511668092,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n // 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef fibonacci_prime(n: int):\n    \"\"\"\n    fibonacci_prime returns the n-th prime number.\n    >>> fibonacci_prime(1)\n    2\n    >>> fibonacci_prime(2)\n    3\n    >>> fibonacci_prime(3)\n    5\n    >>> fibonacci_prime(4)\n    7\n    >>> fibonacci_prime(5)\n    11\n    >>> fibonacci_prime(6)\n    13\n    \"\"\"\n    return prime_fib(n)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.887111849756732,
      "candidate": "if n < 2:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n % 2 == 0:\n        return prime_fib(n/2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef fibonacci_recursive(n):\n    \"\"\"\n    fibonacci_recursive returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fibonacci_recursive(1)\n    2\n    >>> fibonacci_recursive(2)\n    3\n    >>> fibonacci_recursive(3)\n    5\n    >>> fibonacci_recursive(4)\n    13\n    >>> fibonacci_recursive(5)\n    89\n    \"\"\"\n    if n < 2:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return fibonacci_recursive(n/2)\n    else:\n        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n\ndef fibonacci_iterative(n):\n    \"\"\"\n    fibonacci_iterative returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fibonacci_iterative(1)\n    2\n    >>> fibonacci_iterative(2)\n    3\n    >>> fibonacci_iterative(3)\n    5\n    >>> fibonacci_iterative(4)\n    13\n    >>> fibonacci_iterative(5)\n    89\n    \"\"\"\n    if n < 2:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return fibonacci_iterative(n/2)\n    else:\n        n1 = 0\n        n2 = 1\n        while n2 <= n:\n            n1 = n"
    },
    {
      "rank": 42,
      "score": 9.88293152152541,
      "candidate": "if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return prime_fib(n/2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is a prime number and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_prime(n - 1) and is_prime(n - 2)\n\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return fib(n/2)\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_prime(n: int):\n    \"\"\"\n    fib_prime returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_prime(1)\n    2\n    >>> fib_prime(2)\n    3\n    >>> fib_prime(3)\n    5\n    >>> fib_prime(4)\n    13\n    >>> fib_prime(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        return fib_prime(n/2)\n    else:\n        return fib_prime"
    },
    {
      "rank": 43,
      "score": 9.882923312638333,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    for i in range(1, n):\n        if n % i == 0:\n            return 0\n    return n\n\ndef fibonacci_nth_prime_number(n: int):\n    \"\"\"\n    fibonacci_nth_prime_number returns n-th prime number that is a Fibonacci number.\n    >>> fibonacci_nth_prime_number(1)\n    2\n    >>> fibonacci_nth_prime_number(2)\n    3\n    >>> fibonacci_nth_prime_number(3)\n    5\n    >>> fibonacci_nth_prime_number(4)\n    13\n    >>> fibonacci_nth_prime_number(5)\n    89\n    \"\"\"\n    return prime_fib(n)\n\ndef main():\n    print(fibonacci_nth_prime_number(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 9.854153125103362,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n % 2 == 0:\n        return prime_fib(n // 2) + prime_fib(n // 2)\n    if n % 3 == 0:\n        return prime_fib(n // 3) + prime_fib(n // 3) + prime_fib(n // 3)\n    return n + prime_fib(n + 1)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.849448152205355,
      "candidate": "if n <= 2:\n        return 2\n    else:\n        if n % 2 == 0:\n            return prime_fib(n / 2) + prime_fib(n / 2)\n        else:\n            return prime_fib(n - 1) + prime_fib(n - 1)\n\n\ndef fibonacci_numbers(n: int):\n    \"\"\"\n    fibonacci_numbers returns n-th Fibonacci number.\n    >>> fibonacci_numbers(1)\n    2\n    >>> fibonacci_numbers(2)\n    3\n    >>> fibonacci_numbers(3)\n    5\n    >>> fibonacci_numbers(4)\n    13\n    >>> fibonacci_numbers(5)\n    89\n    \"\"\"\n    return prime_fib(n)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.845393812074393,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n // 2) + prime_fib(n // 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 1)\n\ndef main():\n    for n in range(1, 100):\n        print(prime_fib(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 9.807458859791842,
      "candidate": "# return n-th number that is a Fibonacci number and it's also prime.\n    # if n is not prime, return -1.\n    if n < 2:\n        return -1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return -1\n    for i in range(3, n+1):\n        if n % i == 0:\n            return -1\n    return n\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    # return n-th number that is a Fibonacci number.\n    # if n is not prime, return -1.\n    if n < 2:\n        return -1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return -1\n    for i in range(3, n+1):\n        if n % i == 0:\n            return -1\n    return n\n\ndef fib2(n: int):\n    \"\"\"\n    fib2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib2(1)\n    2\n    >>> fib2(2)\n    3\n    >>> fib2(3)\n    5\n    >>> fib2(4)\n    13\n    >>> fib2(5)\n    89\n    \"\"\"\n    # return n-th number that is a Fibonacci number and it's also prime.\n    # if n is not prime, return -1.\n    if n < 2:\n        return -1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return -1\n    for i in range(3, n+1):\n        if n % i == 0:\n            return -1\n    return n\n\ndef"
    },
    {
      "rank": 48,
      "score": 9.769680614520107,
      "candidate": "if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 3\n\n    if n == 4:\n        return 5\n\n    if n == 5:\n        return 11\n\n    if n == 6:\n        return 13\n\n    if n == 7:\n        return 17\n\n    if n == 8:\n        return 19\n\n    if n == 9:\n        return 23\n\n    if n == 10:\n        return 29\n\n    if n == 11:\n        return 31\n\n    if n == 12:\n        return 37\n\n    if n == 13:\n        return 41\n\n    if n == 14:\n        return 43\n\n    if n == 15:\n        return 47\n\n    if n == 16:\n        return 53\n\n    if n == 17:\n        return 59\n\n    if n == 18:\n        return 61\n\n    if n == 19:\n        return 67\n\n    if n == 20:\n        return 71\n\n    if n == 21:\n        return 73\n\n    if n == 22:\n        return 79\n\n    if n == 23:\n        return 83\n\n    if n == 24:\n        return 89\n\n    if n == 25:\n        return 97\n\n    if n == 26:\n        return 101\n\n    if n == 27:\n        return 103\n\n    if n == 28:\n        return 107\n\n    if n == 29:\n        return 109\n\n    if n == 30:\n        return 113\n\n    if n == 31:\n        return 127\n\n    if n == 32:\n        return 131\n\n    if n == 33:\n        return 137\n\n    if n == 34:\n        return 139\n\n    if n == 35:\n        return 149\n\n    if n == 36:\n        return 151\n\n    if n == 37:\n        return 157\n\n    if n == 38:\n        return 163\n\n    if n == 39:\n        return 167\n\n    if n == 40:\n        return 173\n\n    if n == 41:\n        return 179\n\n    if n == 42:\n        return 181\n\n    if n == 43:\n        return 191\n\n    if n == 44:\n        return 193\n\n    if n == 45:\n        return 197\n\n    if n == 46:\n        return 199\n\n    if n == 47:"
    },
    {
      "rank": 49,
      "score": 9.768291153593768,
      "candidate": "if n <= 2:\n        return 2\n    elif n % 2 == 0:\n        return prime_fib(n // 2) + prime_fib(n // 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 1)\n\n\ndef next_prime(n):\n    \"\"\"\n    next_prime returns next prime number after n\n    >>> next_prime(1)\n    2\n    >>> next_prime(2)\n    3\n    >>> next_prime(3)\n    5\n    >>> next_prime(4)\n    7\n    >>> next_prime(5)\n    11\n    >>> next_prime(6)\n    13\n    >>> next_prime(7)\n    17\n    >>> next_prime(8)\n    19\n    >>> next_prime(9)\n    23\n    >>> next_prime(10)\n    29\n    >>> next_prime(11)\n    31\n    >>> next_prime(12)\n    37\n    >>> next_prime(13)\n    41\n    >>> next_prime(14)\n    43\n    >>> next_prime(15)\n    47\n    >>> next_prime(16)\n    53\n    >>> next_prime(17)\n    59\n    >>> next_prime(18)\n    61\n    >>> next_prime(19)\n    67\n    >>> next_prime(20)\n    73\n    >>> next_prime(21)\n    79\n    >>> next_prime(22)\n    83\n    >>> next_prime(23)\n    89\n    >>> next_prime(24)\n    97\n    >>> next_prime(25)\n    101\n    >>> next_prime(26)\n    103\n    >>> next_prime(27)\n    107\n    >>> next_prime(28)\n    109\n    >>> next_prime(29)\n    113\n    >>> next_prime(30)\n    127\n    >>> next_prime(31)\n    131\n    >>> next_prime(32)\n    137\n    >>> next_prime(33)\n    139\n    >>> next_prime(34)\n    149\n    >>> next_prime(35)\n    151"
    },
    {
      "rank": 50,
      "score": 9.76713512321487,
      "candidate": "if n <= 1:\n        return n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef prime_fib_sieve(n: int):\n    \"\"\"\n    prime_fib_sieve returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_sieve(1)\n    2\n    >>> prime_fib_sieve(2)\n    3\n    >>> prime_fib_sieve(3)\n    5\n    >>> prime_fib_sieve(4)\n    13\n    >>> prime_fib_sieve(5)\n    89\n    >>> prime_fib_sieve(6)\n    251\n    >>> prime_fib_sieve(7)\n    1213\n    >>> prime_fib_sieve(8)\n    4033\n    >>> prime_fib_sieve(9)\n    16169\n    >>> prime_fib_sieve(10)\n    65537\n    >>> prime_fib_sieve(11)\n    2432902008176640000\n    >>> prime_fib_sieve(12)\n    1099511628211\n    >>> prime_fib_sieve(13)\n    9746048582585012479\n    \"\"\"\n    if n <= 1:\n        return n\n    fib = [0] * n\n    fib[0] = 1\n    fib[1] = 2\n    fib[2] = 3\n    for i in range(3, n):\n        fib[i] = fib[i - 1] + fib[i - 2]\n    return fib[n - 1]\n\n\ndef prime_fib_sieve_prime(n: int):\n    \"\"\"\n    prime_fib_sieve_prime returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_sieve_prime(1)\n    2\n    >>> prime_fib_sieve_prime(2)\n    3\n    >>> prime_fib_sieve_prime(3)\n    5\n    >>> prime_fib_sieve"
    },
    {
      "rank": 51,
      "score": 9.765262807032524,
      "candidate": "if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n\n\ndef prime_fib_rec(n: int):\n    \"\"\"\n    prime_fib_rec returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_rec(1)\n    2\n    >>> prime_fib_rec(2)\n    3\n    >>> prime_fib_rec(3)\n    5\n    >>> prime_fib_rec(4)\n    13\n    >>> prime_fib_rec(5)\n    89\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return prime_fib_rec(n-1) + prime_fib_rec(n-2)\n\n\ndef prime_fib_iter(n: int):\n    \"\"\"\n    prime_fib_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter(1)\n    2\n    >>> prime_fib_iter(2)\n    3\n    >>> prime_fib_iter(3)\n    5\n    >>> prime_fib_iter(4)\n    13\n    >>> prime_fib_iter(5)\n    89\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        yield prime_fib_iter(n-1)\n        yield prime_fib_iter(n-2)\n\n\ndef prime_fib_iter_prime(n: int):\n    \"\"\"\n    prime_fib_iter_prime returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter_prime(1)\n    2\n    >>> prime_fib_iter_prime(2)\n    3\n    >>> prime_fib_iter_prime(3)\n    5\n    >>> prime_fib_iter_prime(4)"
    },
    {
      "rank": 52,
      "score": 9.760412881077356,
      "candidate": "return fib_num(n)\n\ndef prime_fib2(n: int):\n    \"\"\"\n    prime_fib2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib2(1)\n    2\n    >>> prime_fib2(2)\n    3\n    >>> prime_fib2(3)\n    5\n    >>> prime_fib2(4)\n    13\n    >>> prime_fib2(5)\n    89\n    \"\"\"\n    return fib_num2(n)\n\ndef prime_fib3(n: int):\n    \"\"\"\n    prime_fib3 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib3(1)\n    2\n    >>> prime_fib3(2)\n    3\n    >>> prime_fib3(3)\n    5\n    >>> prime_fib3(4)\n    13\n    >>> prime_fib3(5)\n    89\n    \"\"\"\n    return fib_num3(n)\n\ndef prime_fib4(n: int):\n    \"\"\"\n    prime_fib4 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib4(1)\n    2\n    >>> prime_fib4(2)\n    3\n    >>> prime_fib4(3)\n    5\n    >>> prime_fib4(4)\n    13\n    >>> prime_fib4(5)\n    89\n    \"\"\"\n    return fib_num4(n)\n\ndef prime_fib5(n: int):\n    \"\"\"\n    prime_fib5 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib5(1)\n    2\n    >>> prime_fib5(2)\n    3\n    >>> prime_fib5(3)\n    5\n    >>> prime_fib5(4)\n    13\n    >>> prime_fib5(5)\n    89\n    \"\"\"\n    return fib_num5(n)\n\ndef prime_fib6"
    },
    {
      "rank": 53,
      "score": 9.72780863773741,
      "candidate": "p = 2\n    while p < n:\n        if n % p == 0:\n            return p\n        p += 1\n    return p\n\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    p = 2\n    while p < n:\n        if n % p == 0:\n            return p\n        p += 1\n    return p\n\n\ndef main():\n    \"\"\"\n    main function.\n    \"\"\"\n    print(prime_fib(100))\n    print(fib(100))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 9.718856235379514,
      "candidate": "# http://www.mathblog.dk/number-that-is-a-fibonacci-number-and-is-prime/\n    if n < 2:\n        return False\n    return fib_table[n]\n\ndef fib_table_size(n: int):\n    \"\"\"\n    fib_table_size returns the size of fibonacci table.\n    >>> fib_table_size(1)\n    2\n    >>> fib_table_size(2)\n    3\n    >>> fib_table_size(3)\n    5\n    >>> fib_table_size(4)\n    7\n    >>> fib_table_size(5)\n    11\n    >>> fib_table_size(6)\n    13\n    >>> fib_table_size(7)\n    17\n    \"\"\"\n    return sum(1 for x in range(n+1))\n\ndef prime_fib_table_size(n: int):\n    \"\"\"\n    prime_fib_table_size returns the size of prime fibonacci table.\n    >>> prime_fib_table_size(1)\n    2\n    >>> prime_fib_table_size(2)\n    3\n    >>> prime_fib_table_size(3)\n    5\n    >>> prime_fib_table_size(4)\n    7\n    >>> prime_fib_table_size(5)\n    11\n    >>> prime_fib_table_size(6)\n    13\n    >>> prime_fib_table_size(7)\n    17\n    \"\"\"\n    return sum(1 for x in range(n+1) if prime_fib(x))\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.699680655040597,
      "candidate": "if n < 2:\n        raise ValueError(\"n must be greater than 0\")\n\n    p = 2\n    while True:\n        yield p\n        p += 1\n        while p % n == 0:\n            p += 1\n        yield p\n\ndef prime_fib_rec(n: int):\n    \"\"\"\n    prime_fib_rec returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_rec(1)\n    2\n    >>> prime_fib_rec(2)\n    3\n    >>> prime_fib_rec(3)\n    5\n    >>> prime_fib_rec(4)\n    13\n    >>> prime_fib_rec(5)\n    89\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than 0\")\n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return n\n\n    return prime_fib_rec(n/2) + prime_fib_rec(n/2 + 1)\n\ndef prime_fib_iter(n: int):\n    \"\"\"\n    prime_fib_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter(1)\n    2\n    >>> prime_fib_iter(2)\n    3\n    >>> prime_fib_iter(3)\n    5\n    >>> prime_fib_iter(4)\n    13\n    >>> prime_fib_iter(5)\n    89\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than 0\")\n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return n\n\n    return prime_fib_iter(n/2) + prime_fib_iter(n/2 + 1)\n\ndef main():\n    \"\"\"\n    main function tests.\n    \"\"\"\n    print(prime_fib(1))\n    print(prime_fib(2))\n    print(prime_f"
    },
    {
      "rank": 56,
      "score": 9.699146693885302,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef prime_factors(n: int):\n    \"\"\"\n    prime_factors returns prime factors of n.\n    >>> prime_factors(2)\n    [2]\n    >>> prime_factors(3)\n    [2, 3]\n    >>> prime_factors(5)\n    [2, 3, 5]\n    >>> prime_factors(13)\n    [2, 3, 5, 7, 13]\n    \"\"\"\n    if n == 2:\n        return [2]\n    elif n == 3:\n        return [2, 3]\n    elif n == 5:\n        return [2, 3, 5]\n    elif n == 7:\n        return [2, 3, 5, 7]\n    else:\n        return [2] + prime_factors(n // 2) + prime_factors(n % 2)\n\ndef prime_factors_recursive(n: int):\n    \"\"\"\n    prime_factors_recursive returns prime factors of n.\n    >>> prime_factors_recursive(2)\n    [2]\n    >>> prime_factors_recursive(3)\n    [2, 3]\n    >>> prime_factors_recursive(5)\n    [2, 3, 5]\n    >>> prime_factors_recursive(7)\n    [2, 3, 5, 7]\n    >>>"
    },
    {
      "rank": 57,
      "score": 9.677440122697439,
      "candidate": "if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    # Calculate the Fibonacci number of n\n    fib_num = 0\n    fib_num_temp = 1\n    fib_num_temp2 = 1\n    while fib_num < n:\n        fib_num += fib_num_temp2\n        fib_num_temp2 = fib_num_temp\n        fib_num_temp = fib_num\n    # Check if the number is prime\n    if fib_num_temp == n:\n        return fib_num\n    else:\n        return prime_fib(n - 1)\n\n# Check if the number is prime\ndef check_prime(n: int):\n    \"\"\"\n    check_prime checks if the number n is prime.\n    >>> check_prime(1)\n    False\n    >>> check_prime(2)\n    True\n    >>> check_prime(3)\n    True\n    >>> check_prime(4)\n    True\n    >>> check_prime(5)\n    True\n    >>> check_prime(6)\n    False\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    # Calculate the Fibonacci number of n\n    fib_num = 0\n    fib_num_temp = 1\n    fib_num_temp2 = 1\n    while fib_num < n:\n        fib_num += fib_num_temp2\n        fib_num_temp2 = fib_num_temp\n        fib_num_temp = fib_num\n    # Check if the number is prime\n    if fib_num_temp == n:\n        return True\n    else:\n        return check_prime(n - 1)\n\n# Test\ndef test_check_prime():\n    \"\"\"\n    test_check_prime tests"
    },
    {
      "rank": 58,
      "score": 9.661538999847021,
      "candidate": "if n < 2:\n        return n\n    return prime_fib(n-1) + prime_fib(n-2)\n\ndef prime_fib_rec(n: int):\n    \"\"\"\n    prime_fib_rec returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_rec(1)\n    2\n    >>> prime_fib_rec(2)\n    3\n    >>> prime_fib_rec(3)\n    5\n    >>> prime_fib_rec(4)\n    13\n    >>> prime_fib_rec(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    return prime_fib_rec(n-1) + prime_fib_rec(n-2)\n\ndef prime_fib_iter(n: int):\n    \"\"\"\n    prime_fib_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter(1)\n    2\n    >>> prime_fib_iter(2)\n    3\n    >>> prime_fib_iter(3)\n    5\n    >>> prime_fib_iter(4)\n    13\n    >>> prime_fib_iter(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    return prime_fib_iter(n-1) + prime_fib_iter(n-2)\n\ndef prime_fib_itr(n: int):\n    \"\"\"\n    prime_fib_itr returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_itr(1)\n    2\n    >>> prime_fib_itr(2)\n    3\n    >>> prime_fib_itr(3)\n    5\n    >>> prime_fib_itr(4)\n    13\n    >>> prime_fib_itr(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    return prime_fib_itr(n-1) + prime_fib_itr(n"
    },
    {
      "rank": 59,
      "score": 9.640077895802646,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        # fib(n) = fib(n-1) + fib(n-2)\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef prime_fib_recursive(n: int):\n    \"\"\"\n    prime_fib_recursive returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_recursive(1)\n    2\n    >>> prime_fib_recursive(2)\n    3\n    >>> prime_fib_recursive(3)\n    5\n    >>> prime_fib_recursive(4)\n    13\n    >>> prime_fib_recursive(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        # fib(n) = fib(n-1) + fib(n-2)\n        return prime_fib_recursive(n - 1) + prime_fib_recursive(n - 2)\n\n\ndef prime_fib_iterative(n: int):\n    \"\"\"\n    prime_fib_iterative returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iterative(1)\n    2\n    >>> prime_fib_iterative(2)\n    3\n    >>> prime_fib_iterative(3)\n    5\n    >>> prime_fib_iterative(4)\n    13\n    >>> prime_fib_iterative(5)\n    89\n    \"\"\"\n    # fib(n) = fib(n-1) + fib(n-2)\n    # fib(1) = 0\n    # fib(2) = 1\n    # fib(3) = 2\n    # fib(4) = 3\n    # fib(5) = 5\n    # fib(6) = 8\n    # fib(7) = 13\n    # fib(8) = 21\n    # fib(9) = 34\n    # fib(10) = 55"
    },
    {
      "rank": 60,
      "score": 9.58039123838868,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return (prime_fib(n - 1) + prime_fib(n - 2)) % n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(1)\n    True\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n < 2 or n % 3 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))):\n            if n % i == 0:\n                return False\n    return True\n\ndef is_fibonacci_prime(n: int):\n    \"\"\"\n    is_fibonacci_prime returns True if n is prime and False otherwise.\n    >>> is_fibonacci_prime(1)\n    False\n    >>> is_fibonacci_prime(2)\n    True\n    >>> is_fibonacci_prime(3)\n    False\n    >>> is_fibonacci_prime(4)\n    True\n    >>> is_fibonacci_prime(5)\n    False\n    >>> is_fibonacci_prime(6)\n    False\n    >>> is_fibonacci_prime(7)\n    True\n    >>> is_fibonacci_prime(8)\n    False\n    >>> is_fibonacci_prime(9)\n    False\n    >>> is_fibonacci_prime(10)\n    False\n    >>> is_fibonacci_prime(11)\n    True\n    >>> is_fibonacci_prime("
    },
    {
      "rank": 61,
      "score": 9.545987962239394,
      "candidate": "if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef primes(n: int):\n    \"\"\"\n    primes returns all prime numbers in range from 2 to n.\n    >>> primes(10)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \"\"\"\n    if n <= 1:\n        return []\n    else:\n        return [x for x in range(2, n) if prime(x)]\n\ndef prime(n: int):\n    \"\"\"\n    prime returns True if n is prime number and False otherwise.\n    >>> prime(2)\n    True\n    >>> prime(3)\n    True\n    >>> prime(4)\n    True\n    >>> prime(5)\n    True\n    >>> prime(6)\n    False\n    >>> prime(7)\n    False\n    >>> prime(8)\n    False\n    >>> prime(9)\n    False\n    >>> prime(10)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for x in range(3, int(n ** 0.5) + 1, 2):\n            if n % x == 0:\n                return False\n    return True\n\ndef factorial(n: int):\n    \"\"\"\n    factorial returns factorial of n\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n    >>> factorial(6)\n    720\n    >>> factorial(7)\n    5040\n    >>> factorial(8)\n    40320\n    >>> factorial(9)\n    362880\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef factorial_recursive(n: int):"
    },
    {
      "rank": 62,
      "score": 9.493584439832787,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n / 2) + prime_fib(n / 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 1)\n\ndef main():\n    print(prime_fib(100))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 9.47114453552205,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return fib(n) + prime_fib(n - 1)\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef prime_fib2(n: int):\n    \"\"\"\n    prime_fib2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib2(1)\n    2\n    >>> prime_fib2(2)\n    3\n    >>> prime_fib2(3)\n    5\n    >>> prime_fib2(4)\n    13\n    >>> prime_fib2(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib2(n - 1) + prime_fib2(n - 2)\n\ndef fib2(n: int):\n    \"\"\"\n    fib2 returns n-th number that is a Fibonacci number.\n    >>> fib2(1)\n    2\n    >>> fib2(2)\n    3\n    >>> fib2(3)\n    5\n    >>> fib2(4"
    },
    {
      "rank": 64,
      "score": 9.446832512996986,
      "candidate": "if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return n/2\n    if n % 3 == 0:\n        return n/3\n    if n % 5 == 0:\n        return n/5\n    if n % 7 == 0:\n        return n/7\n    if n % 11 == 0:\n        return n/11\n    if n % 13 == 0:\n        return n/13\n    if n % 17 == 0:\n        return n/17\n    if n % 19 == 0:\n        return n/19\n    if n % 23 == 0:\n        return n/23\n    if n % 29 == 0:\n        return n/29\n    if n % 31 == 0:\n        return n/31\n    if n % 37 == 0:\n        return n/37\n    if n % 41 == 0:\n        return n/41\n    if n % 43 == 0:\n        return n/43\n    if n % 47 == 0:\n        return n/47\n    if n % 53 == 0:\n        return n/53\n    if n % 59 == 0:\n        return n/59\n    if n % 61 == 0:\n        return n/61\n    if n % 67 == 0:\n        return n/67\n    if n % 71 == 0:\n        return n/71\n    if n % 73 == 0:\n        return n/73\n    if n % 79 == 0:\n        return n/79\n    if n % 83 == 0:\n        return n/83\n    if n % 89 == 0:\n        return n/89\n    if n % 97 == 0:\n        return n/97\n    if n % 101 == 0:\n        return n/101\n    if n % 103 == 0:\n        return n/103\n    if n % 107 == 0:\n        return n/107\n    if n % 109 == 0:\n        return n/109\n    if n % 113 == 0:\n        return n/113\n    if n % 127 == 0:\n        return n/127\n    if n % 131 == 0:\n        return n/131"
    },
    {
      "rank": 65,
      "score": 9.42450321128885,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return n + prime_fib(n-1)\n\ndef prime_fib_iter(n: int):\n    \"\"\"\n    prime_fib_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter(1)\n    2\n    >>> prime_fib_iter(2)\n    3\n    >>> prime_fib_iter(3)\n    5\n    >>> prime_fib_iter(4)\n    13\n    >>> prime_fib_iter(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        yield n\n        yield prime_fib_iter(n-1)\n\ndef fib_iter(n: int):\n    \"\"\"\n    fib_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_iter(1)\n    2\n    >>> fib_iter(2)\n    3\n    >>> fib_iter(3)\n    5\n    >>> fib_iter(4)\n    13\n    >>> fib_iter(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        yield n\n        yield fib_iter(n-1)\n\ndef fib_prime_iter(n: int):\n    \"\"\"\n    fib_prime_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_prime_iter("
    },
    {
      "rank": 66,
      "score": 9.401896687959665,
      "candidate": "fib = [1, 1]\n    for i in range(1, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 9.389578175014488,
      "candidate": "return fibonacci(n, True)\n\ndef fibonacci(n: int, prime: bool=False):\n    \"\"\"\n    fibonacci returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fibonacci(1)\n    2\n    >>> fibonacci(2)\n    3\n    >>> fibonacci(3)\n    5\n    >>> fibonacci(4)\n    13\n    >>> fibonacci(5)\n    89\n    >>> prime_fib(6)\n    17\n    \"\"\"\n    if prime:\n        return n\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    return fibonacci(n-1) + fibonacci(n-2)\n\ndef sum_fib(n: int):\n    \"\"\"\n    sum_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> sum_fib(1)\n    2\n    >>> sum_fib(2)\n    3\n    >>> sum_fib(3)\n    5\n    >>> sum_fib(4)\n    13\n    >>> sum_fib(5)\n    89\n    \"\"\"\n    return fibonacci(n)\n\ndef prime_sum_fib(n: int):\n    \"\"\"\n    prime_sum_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_sum_fib(1)\n    2\n    >>> prime_sum_fib(2)\n    3\n    >>> prime_sum_fib(3)\n    5\n    >>> prime_sum_fib(4)\n    13\n    >>> prime_sum_fib(5)\n    89\n    \"\"\"\n    return sum_fib(n)\n\ndef fibonacci_prime(n: int):\n    \"\"\"\n    fibonacci_prime returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fibonacci_prime(1)\n    2\n    >>> fibonacci_prime(2)\n    3\n    >>> fibonacci_prime(3)\n    5"
    },
    {
      "rank": 68,
      "score": 9.335906975550785,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n // 2) + prime_fib(n // 2)\n    else:\n        return prime_fib(n) + prime_fib(n + 1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 9.293848149332355,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n / 2) + prime_fib(n / 2)\n    return prime_fib(n - 1) + prime_fib(n - 1)\n\ndef primes_fib(n: int):\n    \"\"\"\n    primes_fib returns all prime numbers less than or equal to n.\n    >>> primes_fib(1)\n    [2]\n    >>> primes_fib(2)\n    [2, 3]\n    >>> primes_fib(3)\n    [2, 3, 5]\n    >>> primes_fib(4)\n    [2, 3, 5, 7]\n    >>> primes_fib(5)\n    [2, 3, 5, 7, 11]\n    >>> primes_fib(6)\n    [2, 3, 5, 7, 11, 13]\n    >>> primes_fib(7)\n    [2, 3, 5, 7, 11, 13, 17]\n    >>> primes_fib(8)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> primes_fib(9)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    \"\"\"\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return primes_fib(n / 2) + primes_fib(n / 2)\n    return primes_fib(n - 1) + primes_fib(n - 1)\n\ndef sieve_fib(n: int):\n    \"\"\"\n    sieve_fib returns all prime numbers less than or equal to n.\n    >>> sieve_fib(1)\n    [2]\n    >>> sieve_fib(2)\n    [2, 3]\n    >>>"
    },
    {
      "rank": 70,
      "score": 9.287625906893272,
      "candidate": "if n < 2:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return n / 2\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    if n < 2:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return n / 2\n    return fib(n - 1) + fib(n - 2)\n\n\ndef main():\n    print(prime_fib(7))\n    print(fib(7))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_fib(1000))\n    print(fib(1000))\n    print(prime_f"
    },
    {
      "rank": 71,
      "score": 9.260739004816287,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return n\n    p = prime_fib(n//2)\n    if p == n:\n        return n\n    else:\n        return p*2 + p\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is a prime number, else returns False.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    False\n    >>> is_prime(20)\n    True\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    p = prime_fib(n//2)\n    if p == n:\n        return True\n    else:\n        return False\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    >>> fib(6)"
    },
    {
      "rank": 72,
      "score": 9.137541083743484,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n % 2 == 0:\n        return n\n    if n % 3 == 0:\n        return n\n    if n % 5 == 0:\n        return n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if number is prime and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    return True\n\ndef prime_sum(n: int):\n    \"\"\"\n    prime_sum returns sum of all prime numbers below n.\n    >>> prime_sum(1)\n    1\n    >>> prime_sum(2)\n    3\n    >>> prime_sum(3)\n    5\n    >>> prime_sum(4)\n    11\n    >>> prime_sum(5)\n    17\n    >>> prime_sum(6)\n    23\n    >>> prime_sum(7)\n    29\n    >>> prime_sum(8)\n    37\n    >>> prime_sum(9)\n    43\n    >>> prime_sum(10)\n    47\n    >>> prime_sum(11)\n    53\n    >>> prime"
    },
    {
      "rank": 73,
      "score": 9.118479922318633,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return n if n == 0 else prime_fib(n - 1) + prime_fib(n - 2)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 9.0433598776711,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        if n % 2 == 0:\n            return prime_fib(n / 2)\n        else:\n            return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    \"\"\"\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13:\n        return True\n    elif n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0 or n % 13 == 0:\n        return False\n    else:\n        return is_prime(n - 1) and is_prime(n - 2)\n\ndef is_fib(n: int):\n    \"\"\"\n    is_fib returns True if n is a Fibonacci number and False otherwise.\n    >>> is_fib(1)\n    True\n    >>> is_fib(2)\n    True\n    >>> is_fib(3)\n    True\n    >>> is_fib(4)\n    False\n    >>> is_fib(5)\n    False\n    >>> is_fib(6)\n    False\n    >>> is_fib(7)\n    False\n    >>> is_fib(8)\n    False\n    >>> is_fib(9)\n    False\n    >>> is_fib(10)\n    False\n    >>> is_fib(11)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    elif"
    },
    {
      "rank": 75,
      "score": 9.020164938060113,
      "candidate": "if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return 2\n\n    a = prime_fib(n - 1)\n    b = prime_fib(n - 2)\n\n    return a + b\n\ndef main():\n    print(prime_fib(5))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 8.690127447955128,
      "candidate": "if n <= 1:\n        return 1\n    else:\n        return fib_seq(n, 2, 1, 0)\n\ndef fib_seq(n: int, s1: int, s2: int, d: int):\n    \"\"\"\n    fib_seq returns n-th number that is a Fibonacci sequence and it's also prime.\n    >>> fib_seq(1, 2, 1, 0)\n    2\n    >>> fib_seq(2, 3, 2, 1)\n    5\n    >>> fib_seq(3, 5, 4, 2)\n    13\n    >>> fib_seq(4, 13, 12, 3)\n    89\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return s1\n    else:\n        return s1 + s2\n\ndef prime_fib_seq(n: int):\n    \"\"\"\n    prime_fib_seq returns n-th number that is a Fibonacci sequence and it's also prime.\n    >>> prime_fib_seq(1)\n    2\n    >>> prime_fib_seq(2)\n    3\n    >>> prime_fib_seq(3)\n    5\n    >>> prime_fib_seq(4)\n    13\n    >>> prime_fib_seq(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return fib_seq(n, 2, 1, 0)\n\ndef fib_prime(n: int):\n    \"\"\"\n    fib_prime returns n-th number that is a Fibonacci prime.\n    >>> fib_prime(1)\n    2\n    >>> fib_prime(2)\n    3\n    >>> fib_prime(3)\n    5\n    >>> fib_prime(4)\n    13\n    >>> fib_prime(5)\n    89\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 + fib_prime(n - 1)\n\ndef prime_fib_prime(n: int):\n    \"\"\"\n    prime_fib_prime returns n-th number that is a"
    },
    {
      "rank": 77,
      "score": 8.444444444444445,
      "candidate": "prime_fibs = [2, 3]\n    for i in range(2, n + 1):\n        prime_fibs.append(prime_fibs[-1] + prime_fibs[-2])\n    return prime_fibs[-1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.444444444444445,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.444444444444445,
      "candidate": "if n < 2:\n        return n\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print(prime_fib(6))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 80,
      "score": 8.444444444444445,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return n\n    if n % 3 == 0:\n        return n\n    if n % 5 == 0:\n        return n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.444444444444445,
      "candidate": "if n <= 1:\n        return n\n    if n % 2 == 0:\n        return prime_fib(n // 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 3.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 13\n    if n == 6:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n/2)\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 13\n    if n == 6:\n        return 89\n    if n % 2 == 0:\n        return fib(n/2)\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_prime(n: int):\n    \"\"\"\n    fib_prime returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_prime(1)\n    2\n    >>> fib_prime(2)\n    3\n    >>> fib_prime(3)\n    5\n    >>> fib_prime(4)\n    13\n    >>> fib_prime(5)\n    89\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 13\n    if n == 6:\n        return 89\n    if n % 2 == 0:\n        return fib_prime(n"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    if n % 17 == 0:\n        return False\n    if n % 19 == 0:\n        return False\n    if n % 23 == 0:\n        return False\n    if n % 29 == 0:\n        return False\n    if n % 31 == 0:\n        return False\n    if n % 37 == 0:\n        return False\n    if n % 41 == 0:\n        return False\n    if n % 43 == 0:\n        return False\n    if n % 47 == 0:\n        return False\n    if n % 53 == 0:\n        return False\n    if n % 59 == 0:\n        return False\n    if n % 61 == 0:\n        return False\n    if n % 67 == 0:\n        return False\n    if n % 71 == 0:\n        return False\n    if n % 73 == 0:\n        return False\n    if n % 79 == 0:\n        return False\n    if n % 83 == 0:\n        return False\n    if n % 97 == 0:\n        return False\n    if n % 101 == 0:\n        return False\n    if n % 103 == 0:\n        return False\n    if n % 107 == 0:\n        return False\n    if n % 109 == 0:\n        return False\n    if n % 113 == 0:\n        return False\n    if n % 127 == 0:\n        return False\n    if n % 131 == 0:\n        return False\n    if n % 137 == 0:\n        return False\n    if n % 139 == 0:\n        return False\n    if n % 149 == 0:\n        return False\n    if n % 151 == 0:\n        return False\n    if n % 157 == 0:\n        return False\n    if n % 163 == 0:\n        return"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "if n < 0:\n        raise ValueError('n must be non-negative')\n\n    if n == 0:\n        return 2\n\n    if n == 1:\n        return 3\n\n    if n == 2:\n        return 5\n\n    if n == 3:\n        return 13\n\n    if n % 2 == 0:\n        return prime_fib(n/2)\n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    \"\"\"\n    if n < 0:\n        raise ValueError('n must be non-negative')\n\n    if n == 0 or n == 1:\n        return False\n\n    if n % 2 == 0:\n        return False\n\n    if n == 2:\n        return True\n\n    if n == 3:\n        return False\n\n    if n % 3 == 0:\n        return False\n\n    if n % 5 == 0:\n        return False\n\n    if n % 7 == 0:\n        return False\n\n    return True\n\n\ndef prime_divisor(n: int):\n    \"\"\"\n    prime_divisor returns prime divisors of n.\n    >>> prime_divisor(2)\n    [2]\n    >>> prime_divisor(3)\n    [3]\n    >>> prime_divisor(4)\n    [2, 2]\n    >>> prime_divisor(5)\n    [5]\n    \"\"\"\n    if n < 0:\n        raise ValueError('n must be non-negative')\n\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [2]\n\n    if n == 2:\n        return [2]\n\n    if n % 2 == 0:\n        return prime_divisor(n/2)\n\n    if n % 3 == 0:\n        return prime_divisor(n/3)"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "fib = [0, 1]\n    for i in range(2, n):\n        if is_prime(fib[i]):\n            fib.append(fib[i] + fib[i-1])\n        else:\n            fib.append(fib[i-1] + fib[i-2])\n    return fib[n-1]\n\ndef is_prime(n):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n < 9:\n        return True\n    if n == 9:\n        return False\n    if n == 10:\n        return True\n    if n < 19:\n        return True\n    if n < 100:\n        return False\n    if n < 200:\n        return True\n    if n < 500:\n        return False\n    if n < 1000:\n        return True\n    if n < 10000:\n        return False\n    if n < 100000:\n        return True\n    if n < 1000000:\n        return False\n    if n < 10000000:\n        return True\n    if n < 100000000:\n        return False\n    if n < 1000000000:\n        return True\n    if n < 10000000000:\n        return False\n    if n < 100000000000:"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "a, b = 0, 1\n    for i in range(1, n):\n        a, b = b, a+b\n        if is_prime(a+b):\n            return a+b\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    elif n > 5:\n        if n % 2 == 0:\n            return prime_fib(n / 2)\n        else:\n            return prime_fib(n - 1) + prime_fib(n - 2)\n    else:\n        return prime_fib(n)\n\n\ndef prime_sum(n: int):\n    \"\"\"\n    prime_sum returns sum of prime numbers from 1 to n.\n    >>> prime_sum(1)\n    1\n    >>> prime_sum(2)\n    3\n    >>> prime_sum(3)\n    5\n    >>> prime_sum(4)\n    11\n    >>> prime_sum(5)\n    29\n    >>> prime_sum(6)\n    73\n    >>> prime_sum(7)\n    151\n    >>> prime_sum(8)\n    337\n    >>> prime_sum(9)\n    1097\n    >>> prime_sum(10)\n    2187\n    >>> prime_sum(11)\n    4791\n    >>> prime_sum(12)\n    13949\n    >>> prime_sum(13)\n    95921\n    >>> prime_sum(14)\n    282953\n    >>> prime_sum(15)\n    976741\n    >>> prime_sum(16)\n    3238809\n    >>> prime_sum(17)\n    10693937\n    >>> prime_sum(18)\n    33392577\n    >>> prime_sum(19)\n    119957987\n    >>> prime_sum(20)\n    47985981\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 29\n    elif n == 6:\n        return 73\n    elif n == 7:\n        return 151\n    elif n =="
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 13\n    if n % 2 == 0:\n        return prime_fib(n // 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef prime_fib_iter(n: int):\n    \"\"\"\n    prime_fib_iter returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_iter(1)\n    2\n    >>> prime_fib_iter(2)\n    3\n    >>> prime_fib_iter(3)\n    5\n    >>> prime_fib_iter(4)\n    13\n    >>> prime_fib_iter(5)\n    89\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 13\n    if n % 2 == 0:\n        return prime_fib_iter(n // 2)\n    else:\n        return prime_fib_iter(n - 1) + prime_fib_iter(n - 2)\n\ndef fibonacci(n: int):\n    \"\"\"\n    fibonacci returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fibonacci(1)\n    2\n    >>> fibonacci(2)\n    3\n    >>> fibonacci(3)\n    5\n    >>> fibonacci(4)\n    13\n    >>> fibonacci(5)\n    89\n    \"\"\"\n    return prime_fib(n)\n\ndef fibonacci_iter(n: int):"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n/2)\n    return prime_fib(n-1) + prime_fib(n-2)\n\ndef fib_list(n: int):\n    \"\"\"\n    fib_list returns Fibonacci numbers as a list.\n    >>> fib_list(1)\n    [2]\n    >>> fib_list(2)\n    [3]\n    >>> fib_list(3)\n    [5]\n    >>> fib_list(4)\n    [13]\n    >>> fib_list(5)\n    [89]\n    >>> fib_list(6)\n    [240, 233, 216, 213, 209, 200]\n    \"\"\"\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [3]\n    if n == 3:\n        return [5]\n    if n == 4:\n        return [13]\n    if n == 5:\n        return [89]\n    if n % 2 == 0:\n        return fib_list(n/2)\n    return fib_list(n-1) + fib_list(n-2)\n\ndef fib_list_prime(n: int):\n    \"\"\"\n    fib_list_prime returns Fibonacci numbers as a list and also prime numbers.\n    >>> fib_list_prime(1)\n    [2, 3]\n    >>> fib_list_prime(2)\n    [3, 5]\n    >>> fib_list_prime(3)\n    [5, 7]\n    >>> fib_list_prime(4)\n    [11, 13]\n    >>> fib_list_prime(5)\n    [89, 233]\n    >>> fib_list_prime(6)\n    [240, 233, 216, 213, 209, 200]\n    \"\"\"\n    if n == 1:\n        return [2, 3]\n    if n == 2:\n        return [3,"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "if n < 2:\n        return n\n    a, b = 1, 2\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            return a\n        if is_prime(b):\n            return b\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False otherwise.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef fib(n: int):\n    \"\"\"\n    fib returns the n-th number that is a Fibonacci number.\n    >>> fib(1)\n    2\n    >>> fib(2)\n    3\n    >>> fib(3)\n    5\n    >>> fib(4)\n    13\n    >>> fib(5)\n    89\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef prime_factors(n: int):\n    \"\"\"\n    prime_factors returns prime factors of n.\n    >>> prime_factors(1)\n    []\n    >>> prime_factors(2)\n    [2]\n    >>> prime_factors(3)\n    [3]\n    >>> prime_factors(4)\n    [2, 2]\n    >>> prime_factors(5)\n    [2, 3]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    if n % 3 == 0:\n        return n\n    if n % 5 == 0:\n        return n\n    if n % 7 == 0:\n        return n\n    if n % 11 == 0:\n        return n\n    if n % 13 == 0:\n        return n\n    if n % 17 == 0:\n        return n\n    if n % 19 == 0:\n        return n\n    if n % 23 == 0:\n        return n\n    if n % 29 == 0:\n        return n\n    if n % 31 == 0:\n        return n\n    if n % 37 == 0:\n        return n\n    if n % 41 == 0:\n        return n\n    if n % 43 == 0:\n        return n\n    if n % 47 == 0:\n        return n\n    if n % 53 == 0:\n        return n\n    if n % 59 == 0:\n        return n\n    if n % 61 == 0:\n        return n\n    if n % 67 == 0:\n        return n\n    if n % 71 == 0:\n        return n\n    if n % 73 == 0:\n        return n\n    if n % 79 == 0:\n        return n\n    if n % 83 == 0:\n        return n\n    if n % 89 == 0:\n        return n\n    if n % 97 == 0:\n        return n\n    if n % 101 == 0:\n        return n\n    if n % 103 == 0:\n        return n\n    if n % 109 == 0:\n        return n\n    if n % 113 == 0:\n        return n\n    if n % 127 == 0:\n        return n\n    if n % 131 == 0:\n        return n\n    if n % 137 == 0:\n        return n\n    if n % 139 == 0:\n        return n\n    if n % 149 == 0:\n        return n\n    if n % 151 == 0:\n        return n\n    if n % 157 == 0:\n        return n\n    if n % 163 == 0:\n        return n\n    if n % 167 == 0:"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return 2\n\n    if n == 2:\n        return 3\n\n    if n == 3:\n        return 5\n\n    if n % 2 == 0:\n        return n\n\n    if n % 3 == 0:\n        return n\n\n    if n % 5 == 0:\n        return n\n\n    if n % 7 == 0:\n        return n\n\n    if n % 11 == 0:\n        return n\n\n    if n % 13 == 0:\n        return n\n\n    if n % 17 == 0:\n        return n\n\n    if n % 19 == 0:\n        return n\n\n    if n % 23 == 0:\n        return n\n\n    if n % 29 == 0:\n        return n\n\n    if n % 31 == 0:\n        return n\n\n    if n % 37 == 0:\n        return n\n\n    if n % 41 == 0:\n        return n\n\n    if n % 43 == 0:\n        return n\n\n    if n % 47 == 0:\n        return n\n\n    if n % 53 == 0:\n        return n\n\n    if n % 59 == 0:\n        return n\n\n    if n % 61 == 0:\n        return n\n\n    if n % 67 == 0:\n        return n\n\n    if n % 71 == 0:\n        return n\n\n    if n % 73 == 0:\n        return n\n\n    if n % 79 == 0:\n        return n\n\n    if n % 83 == 0:\n        return n\n\n    if n % 89 == 0:\n        return n\n\n    if n % 97 == 0:\n        return n\n\n    if n % 101 == 0:\n        return n\n\n    if n % 103 == 0:\n        return n\n\n    if n % 107 == 0:\n        return n\n\n    if n % 109 == 0:\n        return n\n\n    if n % 113 == 0:\n        return n\n\n    if n % 127 == 0:\n        return n\n\n    if n % 131 == 0:\n        return n\n\n    if n % 137 == 0:\n        return n\n\n    if n % 139 == 0:\n        return n\n\n    if n % 149 =="
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return prime_fib(n // 2) + prime_fib(n // 2)\n    return prime_fib(n - 1) + prime_fib(n - 1)\n\ndef fib_primes(n: int):\n    \"\"\"\n    fib_primes returns list of prime numbers in range [1, n]\n    >>> fib_primes(1)\n    [2]\n    >>> fib_primes(2)\n    [3, 5]\n    >>> fib_primes(3)\n    [7, 11]\n    >>> fib_primes(4)\n    [13, 23]\n    >>> fib_primes(5)\n    [29, 61]\n    >>> fib_primes(6)\n    [73, 197]\n    >>> fib_primes(7)\n    [211, 547]\n    >>> fib_primes(8)\n    [1031, 2599]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [3, 5]\n    if n == 3:\n        return [7, 11]\n    if n == 4:\n        return [13, 23]\n    if n == 5:\n        return [29, 61]\n    if n == 6:\n        return [73, 197]\n    if n == 7:\n        return [211, 547]\n    if n == 8:\n        return [1031, 2599]\n    if n % 2 == 0:\n        return [prime_fib(n // 2), prime_fib(n // 2) + prime_fib(n // 2)]\n    return [prime_fib("
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n % 2 == 0:\n        return n / 2\n    if n % 3 == 0:\n        return n / 3\n    if n % 5 == 0:\n        return n / 5\n    if n % 7 == 0:\n        return n / 7\n    if n % 11 == 0:\n        return n / 11\n    if n % 13 == 0:\n        return n / 13\n    if n % 17 == 0:\n        return n / 17\n    if n % 19 == 0:\n        return n / 19\n    if n % 23 == 0:\n        return n / 23\n    if n % 29 == 0:\n        return n / 29\n    if n % 31 == 0:\n        return n / 31\n    if n % 37 == 0:\n        return n / 37\n    if n % 41 == 0:\n        return n / 41\n    if n % 43 == 0:\n        return n / 43\n    if n % 47 == 0:\n        return n / 47\n    if n % 53 == 0:\n        return n / 53\n    if n % 59 == 0:\n        return n / 59\n    if n % 61 == 0:\n        return n / 61\n    if n % 67 == 0:\n        return n / 67\n    if n % 71 == 0:\n        return n / 71\n    if n % 73 == 0:\n        return n / 73\n    if n % 79 == 0:\n        return n / 79\n    if n % 83 == 0:\n        return n / 83\n    if n % 89 == 0:\n        return n / 89\n    if n % 97 == 0:\n        return n / 97\n    if n % 101 == 0:\n        return n / 101\n    if n % 103 == 0:\n        return n / 103\n    if n % 109 == 0:\n        return n / 109\n    if n % 113 == 0:\n        return n / 113\n    if n % 127 == 0:\n        return n / 127\n    if n % 131 == 0:\n        return n / 131\n    if n"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef fib_prime(n: int):\n    \"\"\"\n    fib_prime returns n-th Fibonacci number that is also prime\n    >>> fib_prime(1)\n    2\n    >>> fib_prime(2)\n    3\n    >>> fib_prime(3)\n    5\n    >>> fib_prime(4)\n    13\n    >>> fib_prime(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n)\n\n\ndef prime_divisors(n: int):\n    \"\"\"\n    prime_divisors returns all prime divisors of n\n    >>> prime_divisors(1)\n    [1]\n    >>> prime_divisors(2)\n    [1, 2]\n    >>> prime_divisors(3)\n    [1, 3]\n    >>> prime_divisors(4)\n    [1, 2, 4]\n    >>> prime_divisors(5)\n    [1, 3, 5]\n    >>> prime_divisors(6)\n    [1, 2, 3, 6]\n    >>> prime_divisors(7)\n    [1, 2, 3, 7]\n    >>> prime_divisors(8)\n    [1, 2, 3, 4, 8]\n    >>> prime_divisors(9)\n    [1, 2, 3, 5, 9]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    if n % 3 == 0:\n        return n\n    if n % 5 == 0:\n        return n\n    if n % 7 == 0:\n        return n\n    if n % 11 == 0:\n        return n\n    if n % 13 == 0:\n        return n\n    if n % 17 == 0:\n        return n\n    if n % 19 == 0:\n        return n\n    if n % 23 == 0:\n        return n\n    if n % 29 == 0:\n        return n\n    if n % 31 == 0:\n        return n\n    if n % 37 == 0:\n        return n\n    if n % 41 == 0:\n        return n\n    if n % 43 == 0:\n        return n\n    if n % 47 == 0:\n        return n\n    if n % 53 == 0:\n        return n\n    if n % 59 == 0:\n        return n\n    if n % 61 == 0:\n        return n\n    if n % 67 == 0:\n        return n\n    if n % 71 == 0:\n        return n\n    if n % 73 == 0:\n        return n\n    if n % 79 == 0:\n        return n\n    if n % 83 == 0:\n        return n\n    if n % 89 == 0:\n        return n\n    if n % 97 == 0:\n        return n\n    if n % 101 == 0:\n        return n\n    if n % 103 == 0:\n        return n\n    if n % 107 == 0:\n        return n\n    if n % 109 == 0:\n        return n\n    if n % 113 == 0:\n        return n\n    if n % 127 == 0:\n        return n\n    if n % 131 == 0:\n        return n\n    if n % 137 == 0:\n        return n\n    if n % 139 == 0:\n        return n\n    if n % 149 == 0:\n        return n\n    if n % 151 =="
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "fib = [1, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n-1]\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    fib = [1, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n-1]\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    fib = [1, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n-1]\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    fib = [1, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return prime_fib(n // 2)\n    if n % 3 == 0:\n        return prime_fib(n // 3)\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is a prime number and False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    return True\n\ndef prime_sieve(n: int):\n    \"\"\"\n    prime_sieve returns list of all prime numbers less than n.\n    >>> prime_sieve(1)\n    []\n    >>> prime_sieve(2)\n    [2]\n    >>> prime_sieve(3)\n    [3, 5]\n    >>> prime_sieve(4)\n    [2, 3, 5, 7]\n    >>> prime_sieve(5)\n    [2, 3, 5, 7, 11, 13]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return []\n    if n % 3 == 0:\n        return [2, 3]\n    if n % 5 == 0:\n        return [2, 3, 5]\n    if n % 7 == 0:\n        return ["
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if n < 2:\n        return n\n    if n % 2 == 0:\n        return prime_fib(n / 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\ndef fib_prime(n: int):\n    \"\"\"\n    fib_prime returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_prime(1)\n    2\n    >>> fib_prime(2)\n    3\n    >>> fib_prime(3)\n    5\n    >>> fib_prime(4)\n    13\n    >>> fib_prime(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return fib_prime(n / 2)\n    else:\n        return prime_fib(n)\n\ndef fib_prime_recursive(n: int):\n    \"\"\"\n    fib_prime_recursive returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_prime_recursive(1)\n    2\n    >>> fib_prime_recursive(2)\n    3\n    >>> fib_prime_recursive(3)\n    5\n    >>> fib_prime_recursive(4)\n    13\n    >>> fib_prime_recursive(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return fib_prime_recursive(n / 2)\n    else:\n        return prime_fib(n)\n\ndef fib_prime_iterative(n: int):\n    \"\"\"\n    fib_prime_iterative returns n-th number that is a Fibonacci number and it's also prime.\n    >>> fib_prime_iterative(1)\n    2\n    >>> fib_prime_iterative(2)\n    3\n    >>> fib_prime_iterative(3)\n    5\n    >>> fib_prime_iterative(4)\n    13\n    >>> fib_prime_iterative(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    if n % 2"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime or False if n is not prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef prime_factor(n: int):\n    \"\"\"\n    prime_factor returns prime factors of n.\n    >>> prime_factor(1)\n    []\n    >>> prime_factor(2)\n    [2]\n    >>> prime_factor(3)\n    [3]\n    >>> prime_factor(4)\n    [2, 2]\n    >>> prime_factor(5)\n    [5]\n    >>> prime_factor(6)\n    [2, 3]\n    >>> prime_factor(7)\n    [7]\n    >>> prime_factor(8)\n    [2, 2, 2, 2]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n % 2 == 0:\n        return []\n    if n % 3 == 0:\n        return []\n    i = 5\n    while i <="
    }
  ]
}