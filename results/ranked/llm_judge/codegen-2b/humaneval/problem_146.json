{
  "timestamp": "2025-09-14T17:13:41.490128",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 146,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return sum(n > 10 and n % 2 and 1 or 0 for n in nums)\n\n\ndef main():\n    \"\"\"Main\"\"\"\n    # your code goes here\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return sum(1 for x in nums if x > 10 and x % 2 == 1)\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return sum(nums[i] > 10 and nums[i] % 2 == 1 for i in range(len(nums)) if nums[i] > 0)\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print specialFilter(nums)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return sum(map(lambda x: x > 10 and x % 2 == 1, nums))\n\nif __name__ == '__main__':\n    print specialFilter([15, -73, 14, -15])\n    print specialFilter([33, -2, -3, 45, 21, 109])\n    print specialFilter([-2, -3, 45, 21, 109])\n    print specialFilter([-2, -3, 45, 21, 109, -1])\n    print specialFilter([-2, -3, 45, 21, 109, -1, -1, -1, -1])"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return sum(1 for num in nums if num > 10 and num[0] % 2 == 1 and num[-1] % 2 == 1)\n\ndef main():\n    \"\"\"Use a for loop to print the number of elements in the array that \n    are greater than 10 and both first and last digits of a number are odd \n    (1, 3, 5, 7, 9).\n    For example:\n    for i in range(1, 100):\n        print(specialFilter([i, -i, i, -i]))\n    \"\"\"\n    for i in range(1, 100):\n        print(specialFilter([i, -i, i, -i]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def filter(nums):\n        for i in range(len(nums)):\n            if nums[i] > 10 and nums[i] % 2 == 1:\n                return True\n        return False\n    return filter\n\ndef main():\n    #print(specialFilter([15, -73, 14, -15]))\n    #print(specialFilter([33, -2, -3, 45, 21, 109]))\n    print(specialFilter([5, -5, 6, -6]))\n    print(specialFilter([7, -7, 8, -8]))\n    print(specialFilter([-1, 1, 2, 3]))\n    print(specialFilter([9, -9, 10, -10]))\n    print(specialFilter([11, -11, 12, -12]))\n    print(specialFilter([13, -13, 14, -14]))\n    print(specialFilter([15, -15, 16, -16]))\n    print(specialFilter([17, -17, 18, -18]))\n    print(specialFilter([19, -19, 20, -20]))\n    print(specialFilter([21, -21, 22, -22]))\n    print(specialFilter([23, -23, 24, -24]))\n    print(specialFilter([25, -25, 26, -26]))\n    print(specialFilter([27, -27, 28, -28]))\n    print(specialFilter([29, -29, 30, -30]))\n    print(specialFilter([31, -31, 32, -32]))\n    print(specialFilter([33, -33, 34, -34]))\n    print(specialFilter([35, -35, 36, -36]))\n    print(specialFilter([37, -37, 38, -38]))\n    print(specialFilter([39, -39, 40, -40]))\n    print(specialFilter([41, -41, 42, -42]))\n    print(specialFilter([43, -43, 44, -44]))\n    print(specialFilter([45, -45, 46, -46]))\n    print(specialFilter([47, -47, 48, -48]"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return len([x for x in nums if x > 10 and x % 2 == 1])\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print(\"nums = \", nums)\n    print(\"specialFilter(nums) = \", specialFilter(nums))\n    nums = [33, -2, -3, 45, 21, 109]\n    print(\"nums = \", nums)\n    print(\"specialFilter(nums) = \", specialFilter(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return sum(1 for x in nums if x > 10 and x % 2 == 1)\n\nif __name__ == '__main__':\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))\n    nums = [33, -2, -3, 45, 21, 109]\n    print(specialFilter(nums))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "result = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 3 == 1:\n            result += 1\n    return result\n\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return sum([n > 10 and n % 2 and n % 10 == 1 for n in nums])\n\n\ndef main():\n    print(\"%d\" % specialFilter([1, 3, 5, 7, 9]))\n    print(\"%d\" % specialFilter([15, -73, 14, -15]))\n    print(\"%d\" % specialFilter([33, -2, -3, 45, 21, 109]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return sum(1 for n in nums if n > 10 and (n % 2) == 1)\n\ndef main():\n    #print specialFilter([15, -73, 14, -15])\n    #print specialFilter([33, -2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2, -3, 45, 21, 109])\n    #print specialFilter([-2"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 5 == 1:\n            count += 1\n    return count\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 9.995545915836482,
      "candidate": "count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 10 == 1:\n            count += 1\n    return count\n\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 14,
      "score": 9.988177407093715,
      "candidate": "return sum(1 for i in nums if i > 10 and i % 2 == 1)\n\ndef main():\n    \"\"\"Write a function that takes an array of integers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd.\n    For example:\n    main([15, -73, 14, -15]) => 1\n    main([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return sum(1 for i in range(10) if i > 10 and i % 2 == 1)\n\nif __name__ == '__main__':\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))\n    nums = [33, -2, -3, 45, 21, 109]\n    print(main(nums))"
    },
    {
      "rank": 15,
      "score": 9.97623665987849,
      "candidate": "return sum(1 for x in nums if x > 10 and x % 2 == 1)\n\ndef main():\n    print specialFilter([15, -73, 14, -15])\n    print specialFilter([33, -2, -3, 45, 21, 109])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 16,
      "score": 9.96183606681188,
      "candidate": "nums = np.array(nums)\n    if len(nums) == 0:\n        return 0\n    #print(\"len(nums)\", len(nums))\n    #print(\"nums[0]\", nums[0])\n    return sum(1 for n in nums if n > 10 and n % 2 == 1)\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter2([15, -73, 14, -15]) => 1 \n    specialFilter2([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    nums = np.array(nums)\n    if len(nums) == 0:\n        return 0\n    #print(\"len(nums)\", len(nums))\n    #print(\"nums[0]\", nums[0])\n    return sum(1 for n in nums if n > 10 and n % 2 == 1)\n\ndef main():\n    nums = [15, -73, 14, -15, 33, -2, -3, 45, 21, 109]\n    #print(specialFilter(nums))\n    #print(specialFilter2(nums))\n    #print(specialFilter(nums))\n    #print(specialFilter2(nums))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 9.95437278061351,
      "candidate": "def count(nums):\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] > 10 and nums[i] % 2 == 1:\n                count += 1\n        return count\n    return count(nums)\n\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 18,
      "score": 9.93873253770094,
      "candidate": "# TODO: write your code in this function\n    return 0\n\ndef main():\n    # Test the specialFilter function\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 9.922729386341299,
      "candidate": "return sum(1 for n in nums if n > 10 and n % 2 == 1)\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 20,
      "score": 9.847072161371887,
      "candidate": "return sum(i for i in nums if i > 10 and i % 2 == 1)\n\ndef main():\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 9.845073452641465,
      "candidate": "count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 10 == 1:\n            count += 1\n    return count\n\n\ndef test_specialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\nif __name__ == '__main__':\n    test_specialFilter()"
    },
    {
      "rank": 22,
      "score": 9.841872501511054,
      "candidate": "def specialFilter(nums):\n        return sum(filter(lambda x: x > 10 and x.is_odd(), nums))\n    return specialFilter\n\ndef main():\n    # Test the function\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n    assert specialFilter([5, -10, -9, 3, 1, -11, -8, -4, -2, 1, -3, -2, -2, -1]) == 1\n    assert specialFilter([-11, -9, 3, 1, -11, -8, -4, -2, 1, -3, -2, -2, -1]) == 2\n    assert specialFilter([-11, -9, 3, 1, -11, -8, -4, -2, 1, -3, -2, -2, -1]) == 2\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 9.787110480980308,
      "candidate": "return sum(1 for i in nums if i > 10 and i % 2 == 1)\n\ndef main():\n    \"\"\"Run the specialFilter function with the numbers from the input file \n    and print the number of elements greater than 10 and both first and last \n    digits of a number are odd.\n    \"\"\"\n    with open(\"input.txt\") as f:\n        nums = [int(i) for i in f.readlines()]\n    print(specialFilter(nums))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 9.776615739899034,
      "candidate": "for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 1:\n            return i\n    return 0\n\ndef main():\n    \"\"\"Main function\"\"\"\n    # Test case 1\n    nums = [15, -73, 14, -15]\n    assert(specialFilter(nums) == 1)\n\n    # Test case 2\n    nums = [33, -2, -3, 45, 21, 109]\n    assert(specialFilter(nums) == 2)\n\n    # Test case 3\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert(specialFilter(nums) == 0)\n\n    # Test case 4\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert(specialFilter(nums) == 0)\n\n    # Test case 5\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert(specialFilter(nums) == 1)\n\n    # Test case 6\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    assert(specialFilter(nums) == 1)\n\n    # Test case 7\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    assert(specialFilter(nums) == 2)\n\n    # Test case 8\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    assert(specialFilter(nums) == 2)\n\n    # Test case 9\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    assert(specialFilter(nums) == 3)\n\n    # Test case 10\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16"
    },
    {
      "rank": 25,
      "score": 9.762451411229746,
      "candidate": "return sum(x > 10 and x % 2 == 1 for x in nums)\n\n\ndef main():\n    \"\"\"Write a function that takes an integer as input and returns the \n    number of digits in the number (i.e. the length of the string).\n    For example:\n    main(100) => 4\n    main(12) => 2\n    main(12345) => 5\n    main(1) => 1\n    main(10) => 1\n    main(0) => 1\n    main(-10) => 1\n    main(-100) => 1\n    main(-1000) => 1\n    main(-100000) => 1\n    main(-1) => 1\n    main(0.1) => 1\n    main(0.11) => 1\n    main(0.111) => 1\n    main(0.1111) => 1\n    main(0.11111) => 1\n    main(0.111111) => 1\n    main(0.1111111) => 1\n    main(0.11111111) => 1\n    main(0.111111111) => 1\n    main(0.1111111111) => 1\n    main(0.11111111111) => 1\n    main(0.111111111111) => 1\n    main(0.1111111111111) => 1\n    main(0.11111111111111) => 1\n    main(0.111111111111111) => 1\n    main(0.1111111111111111) => 1\n    main(0.11111111111111111) => 1\n    main(0.111111111111111111) => 1\n    main(0.1111111111111111111) => 1\n    main(0.11111111111111111111) => 1\n    main(0.111111111111111111111) => 1\n    main(0.1111111111111111111111) => 1\n    main(0.11111111111111111111111) => 1\n    main(0.111111111111111111111111) => 1\n    main(0.1111111111111111111111111) => 1\n    main(0.11111111111111111111111111) => 1\n    main(0.111111111111111111111111111) => 1\n    main(0.1111111111111111"
    },
    {
      "rank": 26,
      "score": 9.72305821733653,
      "candidate": "return sum(i > 10 and i % 2 == 1 for i in nums)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.700352055078,
      "candidate": "return sum(1 for x in nums if x > 10 and x % 2 == 1)\n\ndef main():\n    # your code goes here\n    nums = [15, -73, 14, -15]\n    print specialFilter(nums)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 9.605251814053378,
      "candidate": "def specialFilter(nums):\n        return len([num for num in nums if num > 10 and num % 2 == 1])\n    return specialFilter\n\nif __name__ == '__main__':\n    print specialFilter([15, -73, 14, -15])\n    print specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 29,
      "score": 9.597121595509563,
      "candidate": "count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 3 == 1:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))"
    },
    {
      "rank": 30,
      "score": 9.561698603863517,
      "candidate": "return len([n for n in nums if n > 10 and n % 2 == 1])\n\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 31,
      "score": 9.51208774317875,
      "candidate": "return len([i for i in nums if i > 10 and i % 2 == 1])\n\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 9.418196748730297,
      "candidate": "return sum(1 for n in nums if n > 10 and n % 10 % 2 == 1)\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 9.370583536698913,
      "candidate": "return sum([(n > 10) and (n % 10 == 1 and n % 100!= 11) for n in nums])\n\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 34,
      "score": 9.344102258181705,
      "candidate": "# TODO: Write a function that takes an array of numbers as input and \n    # returns the number of elements in the array that are greater than 10 \n    # and both first and last digits of a number are odd.\n    # For example:\n    # specialFilter([15, -73, 14, -15]) => 1 \n    # specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n    # TODO: Write a function that takes an array of numbers as input and \n    # returns the number of elements in the array that are greater than 10 \n    # and both first and last digits of a number are odd.\n    # For example:\n    # specialFilter([15, -73, 14, -15]) => 1 \n    # specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n    return 0\n    \n\ndef main():\n    # TODO: Implement the function below.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    # n is the number of numbers you will test.\n    #"
    },
    {
      "rank": 35,
      "score": 9.234050852198141,
      "candidate": "return sum(map(lambda x: x > 10 and x % 2 == 1, nums))\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print(\"The number of elements greater than 10 and both first and last \"\n          \"digits of a number are odd is: %d\" % specialFilter(nums))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 9.226766272351448,
      "candidate": "count = 0\n    for num in nums:\n        if num > 10 and num.isdigit() and num.is_odd() and num % 2 == 1:\n            count += 1\n    return count\n\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 37,
      "score": 9.122564458729856,
      "candidate": "count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 10 == 1:\n            count += 1\n    return count\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.973005557553902,
      "candidate": "return sum(n > 10 and (n % 10) % 2 == 1 for n in nums)\n\n\ndef solution(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the smallest number in the array that is greater than 10 and both \n    first and last digits of a number are odd.\n    For example:\n    solution([15, -73, 14, -15]) => -73\n    solution([33, -2, -3, 45, 21, 109]) => 45\n    \"\"\"\n    return min(nums, key=specialFilter)\n\n\nif __name__ == '__main__':\n    assert solution([15, -73, 14, -15]) == -73\n    assert solution([33, -2, -3, 45, 21, 109]) == 45\n    assert solution([33, -2, -3, 45, 21, 109, 3, 5]) == 3"
    },
    {
      "rank": 39,
      "score": 8.95994420569242,
      "candidate": "return sum(nums[i] > 10 and (nums[i] % 2) == 1 for i in range(len(nums)))\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 40,
      "score": 8.946210893390457,
      "candidate": "return sum(nums[i] > 10 and nums[i] % 2 == 1 for i in range(len(nums)))\n\ndef main():\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd.\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.910084504002544,
      "candidate": "return sum([x > 10 for x in nums if x > 10 and x % 2 == 1])\n\n# test\nif __name__ == \"__main__\":\n    print(specialFilter([1, 3, 5, 7, 9]))\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 42,
      "score": 8.902145503295483,
      "candidate": "return sum(nums[i] > 10 and nums[i].isdigit() and nums[i].is_odd() for i in range(len(nums)))\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 43,
      "score": 8.85571690049604,
      "candidate": "return len(filter(lambda n: n > 10 and n.is_odd() and n.digit_sum() > 1, nums))\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print specialFilter(nums)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.855395696632057,
      "candidate": "return len([x for x in nums if x > 10 and x % 2 == 1])\n\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.8281618090209,
      "candidate": "# return the number of elements greater than 10 and both first and last digits are odd\n    return sum(n > 10 and [1,3,5,7,9] in filter(lambda x: x > 10 and x % 2 == 1, nums))\n\nif __name__ == '__main__':\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))"
    },
    {
      "rank": 46,
      "score": 8.81367773444215,
      "candidate": "return sum(1 for x in nums if x > 10 and x % 2 == 1)\n\ndef main():\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    main([15, -73, 14, -15]) => 1 \n    main([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    print specialFilter([15, -73, 14, -15])\n    print specialFilter([33, -2, -3, 45, 21, 109])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.76828871349479,
      "candidate": "return len([n for n in nums if n > 10 and n % 2 == 1])\n\n\n# Test\nif __name__ == \"__main__\":\n    # Test 1\n    assert specialFilter([15, -73, 14, -15]) == 1\n    # Test 2\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2"
    },
    {
      "rank": 48,
      "score": 8.750282588864879,
      "candidate": "def countOddAndFirst(nums):\n        odd = 0\n        for i in range(0, len(nums)):\n            if (nums[i] % 10) == 1 and nums[i] < 10:\n                odd += 1\n            elif nums[i] % 10 == 1 and nums[i] < 10:\n                odd += 1\n        return odd\n    return countOddAndFirst(nums)\n\nif __name__ == \"__main__\":\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))"
    },
    {
      "rank": 49,
      "score": 8.715724466237427,
      "candidate": "return sum(1 for x in nums if x > 10 and x % 2 == 1)\n\ndef main():\n    \"\"\"Main function\"\"\"\n    nums = [15, -73, 14, -15]\n    print('Number of elements with value greater than 10 and both first and last digits of a number are odd: ', specialFilter(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 50,
      "score": 8.701078161001123,
      "candidate": "return sum(filter(lambda x: x > 10 and x % 2 == 1 and x.is_odd(), nums))\n\n\nif __name__ == '__main__':\n    nums = [15, -73, 14, -15, 33, -2, -3, 45, 21, 109]\n    print(specialFilter(nums))"
    },
    {
      "rank": 51,
      "score": 8.632293453617281,
      "candidate": "return len([x for x in nums if x > 10 and x % 2 == 1])\n\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 52,
      "score": 8.625262456968262,
      "candidate": "return sum(nums[nums > 10] for nums in nums)\n\nif __name__ == '__main__':\n    print specialFilter([15, -73, 14, -15])\n    print specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 53,
      "score": 8.623000730200317,
      "candidate": "return sum([n > 10 and n % 2 == 1 for n in nums])\n\n\nif __name__ == '__main__':\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 54,
      "score": 8.610076160146226,
      "candidate": "# This is the list of numbers that are greater than 10 and both first\n    # and last digits are odd\n    numbers = []\n    \n    # This is the number of elements that are greater than 10 and both first\n    # and last digits are odd\n    count = 0\n    \n    # Loop over the array of numbers\n    for num in nums:\n        \n        # Check if the number is greater than 10\n        if num > 10:\n            \n            # Check if the first and last digits are both odd\n            if num % 10 == 1 and num % 100 == 11:\n                \n                # Add the number to the list of numbers greater than 10 and \n                # both first and last digits are odd\n                numbers.append(num)\n                \n                # Increment the number of elements greater than 10 and both\n                # first and last digits are odd\n                count += 1\n        \n    # Return the number of elements greater than 10 and both first and last \n    # digits are odd\n    return count\n\ndef main():\n    \"\"\"This is the main function that will be run when the file is executed \n    as a script. It will print out the number of elements greater than 10 and \n    both first and last digits are odd in the list of numbers that are passed \n    to it.\n    \"\"\"\n    \n    # Get the input from the user\n    numbers = input(\"Please enter a list of numbers. \")\n    \n    # Get the number of elements greater than 10 and both first and last \n    # digits are odd\n    number_of_elements_greater_than_10_and_both_first_and_last_digits_are_odd = specialFilter(numbers)\n    \n    # Print out the number of elements greater than 10 and both first and \n    # last digits are odd\n    print(\"There are {} elements greater than 10 and both first and last \n    digits are odd.\".format(number_of_elements_greater_than_10_and_both_first_and_last_digits_are_odd))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.608819999274287,
      "candidate": "return sum(1 for num in nums if num > 10 and num % 2 == 1)\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 56,
      "score": 8.606486429141842,
      "candidate": "return len([x for x in nums if x > 10 and x % 2 == 1])\n\n# Test functions\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 57,
      "score": 8.60156811074208,
      "candidate": "return sum(nums[i] > 10 and nums[i] % 2 == 1 for i in range(len(nums)))\n\ndef main():\n    \"\"\"Run the specialFilter function and print the result.\"\"\"\n    \n    print specialFilter([15, -73, 14, -15])\n    print specialFilter([33, -2, -3, 45, 21, 109])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 8.565425580227462,
      "candidate": "return sum(nums) - sum(nums[::-1]) - sum(nums[::-1][:2])"
    },
    {
      "rank": 59,
      "score": 8.548876241946822,
      "candidate": "return len(filter(lambda x: x > 10 and x % 2 == 1 and x.is_odd(), nums))\n\ndef specialFilter_recursive(nums):\n    \"\"\"Write a recursive function that takes an array of numbers as input \n    and returns the number of elements in the array that are greater than 10 \n    and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter_recursive([15, -73, 14, -15]) => 1\n    specialFilter_recursive([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return sum(map(specialFilter, nums))\n\nif __name__ == '__main__':\n    print specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    print specialFilter_recursive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])"
    },
    {
      "rank": 60,
      "score": 8.542875062379007,
      "candidate": "return sum(1 for num in nums if num > 10 and num % 2 and num % 3 == 1)\n\ndef main():\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))\n    return 0\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.499905739299377,
      "candidate": "return sum([1 for num in nums if num > 10 and num % 2 == 1])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 62,
      "score": 8.478208546788407,
      "candidate": "return len(filter(lambda x: x > 10 and x.isdigit() and x.is_odd(), nums))\n\n\nif __name__ == '__main__':\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))"
    },
    {
      "rank": 63,
      "score": 8.334608500525688,
      "candidate": "return sum(nums[nums[i] > 10 and (nums[i] % 2) == 1 for i in range(len(nums))])\n\n# Test\nnums = [15, -73, 14, -15]\nprint specialFilter(nums)"
    },
    {
      "rank": 64,
      "score": 8.331556294201176,
      "candidate": "return sum(filter(lambda x: x > 10 and x % 2 == 1 and x.isdigit(), nums))\n\ndef main():\n    print specialFilter([15, -73, 14, -15])\n    print specialFilter([33, -2, -3, 45, 21, 109])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 8.327375965969855,
      "candidate": "return sum(nums[i] > 10 and nums[i] % 2 == 1 for i in range(len(nums)))\n\n\ndef main():\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return specialFilter([15, -73, 14, -15]) + specialFilter([33, -2, -3, 45, 21, 109])\n\n\nif __name__ == \"__main__\":\n    print main()"
    },
    {
      "rank": 66,
      "score": 8.298597569547805,
      "candidate": "count = 0\n    for n in nums:\n        if n > 10 and n % 10 and n % 100 > 0 and n % 100 < 10:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 8.294940769211511,
      "candidate": "return sum(i for i in nums if i > 10 and i % 2 == 1)\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 68,
      "score": 8.2938925966498,
      "candidate": "return sum(1 for i in nums if i > 10 and i % 2 == 1)\n\ndef solution():\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd.\n    For example:\n    solution([15, -73, 14, -15]) => 1 \n    solution([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return specialFilter(nums)\n\nif __name__ == '__main__':\n    nums = [15, -73, 14, -15]\n    assert(specialFilter(nums) == 1)\n    print(\"All tests passed!\")"
    },
    {
      "rank": 69,
      "score": 8.289838256518838,
      "candidate": "count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 10 == 1:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert specialFilter([1, 3, 5, 7, 9]) == 1, \"One element greater than 10 and both first and last digits of a number are odd\"\n    assert specialFilter([15, -73, 14, -15]) == 1, \"One element greater than 10 and both first and last digits of a number are odd\"\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2, \"Two elements greater than 10 and both first and last digits of a number are odd\""
    },
    {
      "rank": 70,
      "score": 8.251903304236286,
      "candidate": "return len([x for x in nums if x >= 10 and (x % 2) and x.isalpha()])\n\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 71,
      "score": 8.214125058964552,
      "candidate": "return sum(1 for x in nums if x > 10 and x % 2 == 1)\n\ndef main():\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    main([15, -73, 14, -15]) => 1 \n    main([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return specialFilter([15, -73, 14, -15]) + specialFilter([33, -2, -3, 45, 21, 109])\n\nif __name__ == '__main__':\n    print main()"
    },
    {
      "rank": 72,
      "score": 8.211579567659316,
      "candidate": "return len([x for x in nums if x > 10 and x % 2 == 1])\n\n# Test code\nif __name__ == \"__main__\":\n    # Test the function\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 73,
      "score": 8.193565922652176,
      "candidate": "return sum(n > 10 and first_odd and last_odd for n, first_odd, last_odd in nums)\n\n\ndef test():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 74,
      "score": 8.185309335307622,
      "candidate": "return sum(filter(lambda x: x > 10 and x % 2 == 1, nums))\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number to test: \"))\n    print(\"The number\", num, \"has\", specialFilter(range(num)), \"odds.\")"
    },
    {
      "rank": 75,
      "score": 8.179564342560925,
      "candidate": "count = 0\n    for i in nums:\n        if i > 10 and i % 2 == 1:\n            count += 1\n    return count\n\ndef main():\n    print(\"Begin...\")\n    print(\"SpecialFilter:\", specialFilter([15, -73, 14, -15]))\n    print(\"SpecialFilter:\", specialFilter([33, -2, -3, 45, 21, 109]))\n    print(\"End.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 8.172253082181854,
      "candidate": "count = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 10 and nums[i] % 10 == 1 and nums[i] % 100!= 11:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))"
    },
    {
      "rank": 77,
      "score": 8.163300679823958,
      "candidate": "count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1:\n            count += 1\n    return count\n\n\ndef main():\n    nums = [15, -73, 14, -15]\n    print specialFilter(nums)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 8.144125099485041,
      "candidate": "return len(filter(lambda x: x > 10 and x % 2 == 1, nums))\n\n\nif __name__ == '__main__':\n    nums = [15, -73, 14, -15]\n    print specialFilter(nums)"
    },
    {
      "rank": 79,
      "score": 8.143591138329747,
      "candidate": "count = 0\n    for num in nums:\n        if num > 10 and num.is_odd() and num[0] % 2 == 1 and num[-1] % 2 == 1:\n            count += 1\n    return count\n\n\ndef main():\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 80,
      "score": 8.040197642997851,
      "candidate": "return sum([n > 10 and n.is_odd() and n % 10 == 1 for n in nums])\n\nif __name__ == \"__main__\":\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 81,
      "score": 7.938028884277233,
      "candidate": "return sum(1 for n in nums if n > 10 and n % 2 == 1)\n\n\nif __name__ == '__main__':\n    print specialFilter([15, -73, 14, -15])\n    print specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 82,
      "score": 7.915588979966494,
      "candidate": "return sum(nums[nums > 10 and nums[0] % 2 == 1 and nums[-1] % 2 == 1 for nums in nums])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 83,
      "score": 7.8912769574414305,
      "candidate": "# The number of elements greater than 10 and both first and last digits of \n    # each element are odd is equal to the number of odd elements plus the number \n    # of even elements.\n    num = len(nums)\n    odds = nums[::2]\n    evens = nums[1::2]\n    count = sum(odds) + sum(evens)\n    return count\n\ndef main():\n    print(specialFilter([1, 3, 5, 7, 9]))\n    print(specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 84,
      "score": 7.868947655733293,
      "candidate": "return sum(nums[i] > 10 and nums[i] % 2 == 1 for i in range(len(nums)))\n\n\nif __name__ == '__main__':\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 85,
      "score": 7.738292593776799,
      "candidate": "return sum([n > 10 and n % 2 == 1 and (n % 3 == 1 or n % 5 == 1) for n in nums])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 86,
      "score": 7.7320703513377165,
      "candidate": "# +++your code here+++\n    return len(filter(lambda x: x > 10 and x % 2 == 1, nums))"
    },
    {
      "rank": 87,
      "score": 7.5819855281879285,
      "candidate": "return sum(1 for i in nums if i > 10 and i % 2 == 1)\n\n\nprint(specialFilter([3, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 88,
      "score": 7.4878043221155455,
      "candidate": "return len([num for num in nums if num > 10 and num % 2 == 1])\n\n\nif __name__ == '__main__':\n    print specialFilter([15, -73, 14, -15])\n    print specialFilter([33, -2, -3, 45, 21, 109])"
    },
    {
      "rank": 89,
      "score": 7.464609382504557,
      "candidate": "#print(nums)\n    return sum(1 for x in nums if x > 10 and x % 2 == 1)\n\n#print(specialFilter([15, -73, 14, -15]))\n#print(specialFilter([33, -2, -3, 45, 21, 109]))"
    },
    {
      "rank": 90,
      "score": 7.134571892399572,
      "candidate": "return len(filter(lambda n: n > 10 and n % 2 == 1 and n[0] % 2 == 1 and n[-1] % 2 == 1, nums))\n\ndef main():\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "# Your solution here\n    return len([n for n in nums if n >= 10 and n % 10 in [1, 3, 5, 7, 9]])\n\n\n# Testing your function\n# Test cases are in the form of a tuple: (input, expected)\n# Try to change the code to use the input() function to obtain \n# input from the user\n\n# Test cases:\n# [[3, 4, -3, -5, -6], 1]\n# [[2, 3, 4, -5, -6], 1]\n# [[4, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0]\n# [[-5, -3, -5, -6], 0"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "# TODO\n    pass\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert specialFilter([15, -73, 14, -15]) == 1, \"Example\"\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2, \"Example\"\n    assert specialFilter([]) == 0, \"Empty\"\n    assert specialFilter([45, 22, -1, -8, -3, 5, -6, -12, -7, -9, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138,"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "return sum(1 for n in nums if n > 10 and n % 2 == 1)\n\nprint(specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 4"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "# Your code here\n    return sum(filter(lambda x: x > 10 and x.is_odd(), nums))\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert specialFilter([15, -73, 14, -15]) == 1, \"Example\"\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2, \"Example\"\n    assert specialFilter([5, 6, 8, 9, 11]) == 0, \"Example\""
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "return sum([n > 10 and n[0] % 2 == 1 and n[-1] % 2 == 1 for n in nums])\n\n\ndef main():\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the sum of the elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    main([15, -73, 14, -15]) => 1\n    main([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return sum([n > 10 and n[0] % 2 == 1 and n[-1] % 2 == 1 for n in range(1, 100)])\n\n\nif __name__ == '__main__':\n    print(main())"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num[0] % 2 == 1 and num[-1] % 2 == 1:\n            count += 1\n    return count\n\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------\n#"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "return sum([1 if num > 10 and num % 2 == 1 else 0 for num in nums])\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert specialFilter([15, -73, 14, -15]) == 1, \"Example1\"\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2, \"Example2\"\n    assert specialFilter([15, -73, 14, -15, -18]) == 1, \"Example3\"\n    assert specialFilter([33, -2, -3, 45, 21, 109, -22]) == 2, \"Example4\"\n    assert specialFilter([15, -73, 14, -15, -18, -22]) == 1, \"Example5\"\n    assert specialFilter([15, -73, 14, -15, -18, -22, -19, -32, -16, -3, -1, -2, -5, -7, -9]) == 1, \"Example6\""
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# TODO: write a function that takes an array of numbers as input and \n    # returns the number of elements in the array that are greater than 10 \n    # and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n    pass\n\ndef filter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    filter([15, -73, 14, -15]) => 1 \n    filter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # TODO: write a function that takes an array of numbers as input and \n    # returns the number of elements in the array that are greater than 10 \n    # and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n    pass\n\n# TODO: write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# filter([15, -73, 14, -15]) => 1 \n# filter([33, -2, -3, 45, 21, 109]) => 2\n\nif __name__ == '__main__':\n    print('Number of elements: ', filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return len(filter(lambda x: x > 10 and x % 2 == 1, nums))\n\ndef isEven(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    True if all the numbers are even and False otherwise.\n    For example:\n    isEven([2, 4, 6, 8]) => True\n    isEven([1, 2, 3, 5, 8]) => False\n    \"\"\"\n    return all(n % 2 == 0 for n in nums)\n\ndef isOdd(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    True if all the numbers are odd and False otherwise.\n    For example:\n    isOdd([2, 4, 6, 8]) => False\n    isOdd([1, 2, 3, 5, 8]) => True\n    \"\"\"\n    return all(n % 2 == 1 for n in nums)\n\ndef isPrime(n):\n    \"\"\"Write a function that takes an integer as input and returns True if the \n    number is prime and False otherwise.\n    For example:\n    isPrime(5) => True\n    isPrime(6) => False\n    isPrime(28) => True\n    isPrime(13) => False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef getPrimes(n):\n    \"\"\"Write a function that takes an integer as input and returns an array of \n    prime numbers less than or equal to n.\n    For example:\n    getPrimes(10) => [2, 3, 5, 7]\n    getPrimes(100) => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \"\"\"\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return []\n    return [n for n in range(3, int(n"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return len(filter(lambda x: x > 10 and x % 2 == 1, nums))\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert specialFilter([15, -73, 14, -15]) == 1, \"15\"\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2, \"33\"\n    assert specialFilter([]) == 0, \"Empty array\"\n    assert specialFilter([1, -2, 3, 5]) == 0, \"All even\"\n    assert specialFilter([1, 2, 3, 4, 5]) == 0, \"All even\"\n    assert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0, \"All even\"\n    assert specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 0, \"All even\"\n    assert specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0, \"All even\"\n    assert specialFilter([1, 3, 5, 7, 9]) == 0, \"All even\"\n    assert specialFilter([1, 3, 5, 7, 9, 11, 13, 15]) == 0, \"All even\"\n    assert specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 0, \"All even\"\n    assert specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 0, \"All even\"\n    assert specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]) == 0, \"All even\"\n    assert specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]) == 0, \"All even\"\n    assert specialFilter(["
    }
  ]
}