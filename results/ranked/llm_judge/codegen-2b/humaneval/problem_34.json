{
  "timestamp": "2025-09-14T16:23:20.208055",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 34,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# This is not a generic implementation, just a quick hack\n    # to make it work for the current case.\n    return sorted(set(l))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef unique_everseen(l: list):\n    \"\"\"\n    Return unique elements, preserving the order in which they first appear.\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    return list(OrderedDict.fromkeys(l).keys())\n\ndef unique_justseen(l: list):\n    \"\"\"\n    Return unique elements, preserving the order in which they were\n    encountered.\n    >>> unique_justseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D', 'A', 'B']\n    \"\"\"\n    return l[:]\n\n# ______________________________________________________________________\n\ndef digit_name(n, t):\n    \"\"\"Return the English word associated with the n-th digit of n.\n    >>> digit_name(10, 'two_digit')\n    'twenty'\n    >>> digit_name(11, 'two_digit')\n    'eleven'\n    >>> digit_name(13, 'two_digit')\n   'sixth'\n    >>> digit_name(14, 'two_digit')\n   'seventh'\n    >>> digit_name(15, 'two_digit')\n    'fifteenth'\n    >>> digit_name(16, 'two_digit')\n   'sixteenth'\n    \"\"\"\n    if t == 'one_digit':\n        return str(n)\n    elif t == 'one_and_a_hundred':\n        if n < 100:\n            return str(n)\n        elif n < 1000:\n            return 'ninety_' + str(n % 100)\n        else:\n            return 'one_hundred_and_' + str(n % 100)\n    elif t == 'two_digit':\n        return {\n            1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\n            6:'six', 7:'seven', 8: 'eight', 9: 'nine',\n            10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen',\n            14: 'four"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "uniques = []\n    seen = set()\n    for i in l:\n        if i not in seen:\n            uniques.append(i)\n            seen.add(i)\n    return uniques\n\ndef first(seq: list):\n    \"\"\"Returns the first element in a sequence\"\"\"\n    if not seq:\n        return None\n    return seq[0]\n\ndef last(seq: list):\n    \"\"\"Returns the last element in a sequence\"\"\"\n    if not seq:\n        return None\n    return seq[-1]\n\ndef last_or_none(seq: list):\n    \"\"\"Returns the last element in a sequence or None if the sequence is empty\"\"\"\n    if not seq:\n        return None\n    return seq[-1]\n\ndef first_or_none(seq: list):\n    \"\"\"Returns the first element in a sequence or None if the sequence is empty\"\"\"\n    if not seq:\n        return None\n    return seq[0]\n\ndef count(seq: list):\n    \"\"\"Returns the number of elements in a sequence\"\"\"\n    return len(seq)\n\ndef sum(seq: list):\n    \"\"\"Returns the sum of elements in a sequence\"\"\"\n    return sum(seq)\n\ndef avg(seq: list):\n    \"\"\"Returns the average of elements in a sequence\"\"\"\n    if not seq:\n        return None\n    return sum(seq) / len(seq)\n\ndef median(seq: list):\n    \"\"\"Returns the median of elements in a sequence\"\"\"\n    if not seq:\n        return None\n    return sorted(seq)[len(seq) // 2]\n\ndef mean(seq: list):\n    \"\"\"Returns the mean of elements in a sequence\"\"\"\n    if not seq:\n        return None\n    return sum(seq) / len(seq)\n\ndef stddev(seq: list):\n    \"\"\"Returns the standard deviation of elements in a sequence\"\"\"\n    if not seq:\n        return None\n    return math.sqrt(sum([(i - mean(seq)) ** 2 for i in seq]) / len(seq))\n\ndef variance(seq: list):\n    \"\"\"Returns the variance of elements in a sequence\"\"\"\n    if not seq:\n        return None\n    return stddev(seq) ** 2"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\n\ndef is_prime(n: int):\n    \"\"\"Returns True if n is prime, False if not.\n    >>> is_prime(2)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(8)\n    True\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\n\ndef is_prime_list(n: list):\n    \"\"\"Returns True if n is prime, False if not.\n    >>> is_prime_list([2, 3, 5, 8])\n    [True, False, True, False]\n    \"\"\"\n    return [is_prime(n[i]) for i in range(len(n))]\n\n\ndef is_prime_list_from_range(start: int, end: int):\n    \"\"\"Returns True if n is prime, False if not.\n    >>> is_prime_list_from_range(2, 6)\n    [True, False, True, False]\n    \"\"\"\n    for i in range(start, end, 2):\n        if is_prime(i):\n            return [True, False, True, False]\n    return [True, True, True, True]\n\n\ndef get_prime_list(start: int, end: int):\n    \"\"\"Returns a list of primes from start to end.\n    >>> get_prime_list(1, 6)\n    [2, 3, 5]\n    >>> get_prime_list(6, 6)\n    [2, 3, 5, 7, 11, 13]\n    >>> get_prime_list(1, 6, 2)\n    [2, 3, 5]\n    \"\"\"\n    primes = [2]\n    for i in range(start, end, 2):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n\ndef get_prime_list_from_range("
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef unique_values(l: list):\n    \"\"\"Return unique values in a list\n    >>> unique_values([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return list(set(l))\n\ndef sort_key(l: list):\n    \"\"\"Return a sort key for a list\n    >>> sort_key([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 2, 3, 9, 0, 123, 5, 3]\n    \"\"\"\n    return tuple(l)\n\ndef sort_values(l: list):\n    \"\"\"Return sorted values in a list\n    >>> sort_values([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 5, 5, 9, 9, 123]\n    \"\"\"\n    return l\n\ndef sort_key_values(l: list):\n    \"\"\"Return sorted (key, value) tuples in a list\n    >>> sort_key_values([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(5, 1), (3, 2), (3, 3), (2, 3), (0, 9), (5, 0), (9, 9), (1, 123)]\n    \"\"\"\n    return zip(l, l)\n\ndef group_by(l: list, f: Callable):\n    \"\"\"Return a dict of grouped items\n    >>> group_by([5, 3, 5, 2, 3, 3, 9, 0, 123], lambda x: x % 2)\n    {True: [5, 3, 9], False: [5, 2, 3, 0, 123]}\n    \"\"\"\n    return dict(zip(map(f, l), l))\n\ndef count_by(l: list, f: Callable):\n    \"\"\"Return a dict of counts\n    >>> count_by([5, 3, 5, 2, 3, 3, 9, 0, 123], lambda x: x % 2)\n    {True: 3, False: 5}\n    \"\"\"\n    return dict"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef is_integer(s):\n    \"\"\"Return True if s is an integer\n    >>> is_integer('5')\n    True\n    >>> is_integer('5.2')\n    False\n    \"\"\"\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_positive(s):\n    \"\"\"Return True if s is positive\n    >>> is_positive('5')\n    True\n    >>> is_positive('-5')\n    False\n    \"\"\"\n    return s[0] == '+' or s[0] == '-'\n\ndef is_negative(s):\n    \"\"\"Return True if s is negative\n    >>> is_negative('-5')\n    True\n    >>> is_negative('+5')\n    False\n    \"\"\"\n    return s[0] == '-'\n\ndef is_positive_integer(s):\n    \"\"\"Return True if s is a positive integer\n    >>> is_positive_integer('5')\n    True\n    >>> is_positive_integer('-5')\n    False\n    \"\"\"\n    return is_integer(s) and is_positive(s)\n\ndef is_negative_integer(s):\n    \"\"\"Return True if s is a negative integer\n    >>> is_negative_integer('-5')\n    True\n    >>> is_negative_integer('5')\n    False\n    \"\"\"\n    return is_integer(s) and is_negative(s)\n\ndef is_positive_float(s):\n    \"\"\"Return True if s is a positive float\n    >>> is_positive_float('5.2')\n    True\n    >>> is_positive_float('-5.2')\n    False\n    \"\"\"\n    return is_float(s) and is_positive(s)\n\ndef is_negative_float(s):\n    \"\"\"Return True if s is a negative float\n    >>> is_negative_float('-5.2')\n    True\n    >>> is_negative_float('5.2')\n    False\n    \"\"\"\n    return is_float(s) and is_negative(s)\n\ndef is_positive_number(s):\n    \"\"\"Return True if s is a positive number"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef unique_with_counts(l: list):\n    \"\"\"Return sorted unique elements in a list and their counts\n    >>> unique_with_counts([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    (3, [5, 3, 9, 0, 123])\n    \"\"\"\n    return sorted(set(l), key=lambda x: (x, len(l.count(x))))\n\ndef count_duplicates(l: list):\n    \"\"\"Return the number of duplicate elements in a list\n    >>> count_duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    2\n    \"\"\"\n    return len(set(l)) - len(l)\n\ndef is_in(item, l: list):\n    \"\"\"Return True if the item is in the list\n    >>> is_in(5, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n    True\n    \"\"\"\n    return item in l\n\ndef is_not_in(item, l: list):\n    \"\"\"Return True if the item is not in the list\n    >>> is_not_in(5, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n    False\n    \"\"\"\n    return item not in l\n\ndef is_in_list(item, l: list):\n    \"\"\"Return True if the item is in the list\n    >>> is_in_list(5, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n    True\n    \"\"\"\n    return item in l\n\ndef is_not_in_list(item, l: list):\n    \"\"\"Return True if the item is not in the list\n    >>> is_not_in_list(5, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n    False\n    \"\"\"\n    return item not in l\n\ndef is_in_set(item, s: set):\n    \"\"\"Return True if the item is in the set\n    >>> is_in_set(5, {5, 3, 5, 2, 3, 3, 9,"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef unique_counts(l: list):\n    \"\"\"Return sorted unique counts in a list\n    >>> unique_counts([3, 5, 5, 9, 0, 123])\n    [3, 5]\n    \"\"\"\n    return sorted(set(Counter(l).values()))\n\ndef unique_and_counts(l: list):\n    \"\"\"Return sorted unique and counts in a list\n    >>> unique_and_counts([3, 5, 5, 9, 0, 123])\n    [(3, 3), (5, 2)]\n    \"\"\"\n    return sorted(set(Counter(l).items()))\n\ndef unique_and_counts_sorted(l: list):\n    \"\"\"Return sorted unique and counts in a list\n    >>> unique_and_counts_sorted([3, 5, 5, 9, 0, 123])\n    [(0, 3), (5, 2)]\n    \"\"\"\n    return sorted(set(Counter(l).items()), key=lambda x: x[1])\n\ndef unique_and_counts_sorted_reversed(l: list):\n    \"\"\"Return sorted unique and counts in a list\n    >>> unique_and_counts_sorted_reversed([3, 5, 5, 9, 0, 123])\n    [(5, 2), (3, 3)]\n    \"\"\"\n    return sorted(set(Counter(l).items()), key=lambda x: x[0])\n\ndef unique_and_counts_sorted_reversed_reverse(l: list):\n    \"\"\"Return sorted unique and counts in a list\n    >>> unique_and_counts_sorted_reversed_reverse([3, 5, 5, 9, 0, 123])\n    [(5, 2), (3, 3)]\n    \"\"\"\n    return sorted(set(Counter(l).items()), key=lambda x: x[1], reverse=True)\n\ndef unique_and_counts_sorted_reversed_reverse_reverse(l: list):\n    \"\"\"Return sorted unique and counts in a list\n    >>> unique_and_counts_sorted_reversed_reverse_reverse([3, 5,"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 9, 123]\n    \"\"\"\n    return list(set(l))\n\ndef unique_dict(d: dict):\n    \"\"\"Return sorted unique elements in a dict\n    >>> unique_dict({5: 1, 3: 2, 5: 3, 2: 3, 3: 3, 9: 4, 0: 5, 123: 6})\n    {0: 5, 2: 3, 3: 3, 5: 1, 9: 4, 123: 6}\n    \"\"\"\n    return {k: v for k, v in dict.items() if k not in d}\n\ndef unique_dict_value(d: dict):\n    \"\"\"Return sorted unique elements in a dict\n    >>> unique_dict_value({5: 1, 3: 2, 5: 3, 2: 3, 3: 3, 9: 4, 0: 5, 123: 6})\n    {0: 5, 2: 3, 3: 3, 3: 3, 9: 4, 123: 6}\n    \"\"\"\n    return {k: v for k, v in d.items() if k not in d}\n\ndef unique_dict_value_list(d: dict):\n    \"\"\"Return sorted unique elements in a dict\n    >>> unique_dict_value_list({5: 1, 3: 2, 5: 3, 2: 3, 3: 3, 9: 4, 0: 5, 123: 6})\n    [0, 2, 3, 3, 3, 9, 123]\n    \"\"\"\n    return [k for k, v in d.items() if k not in d]\n\ndef unique_dict_key_value(d: dict):\n    \"\"\"Return sorted unique elements in a dict\n    >>> unique_dict_key_value({5: 1, 3: 2, 5: 3, 2: 3, 3: 3, 9: 4, 0: 5, 123: 6})\n    {5: 1, 3: 2, 5: 3, 2: 3, 3: 3, 9: 4,"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    _test()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef sort(l: list):\n    \"\"\"Sort a list in place, in place\n    >>> sort([1, 3, 2, 4, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    l.sort()\n    return l\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(17)\n    False\n    >>> is_prime(23)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n < 4:\n        return True\n    if n < 7:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if s is a palindrome, False otherwise\n    >>> is_palindrome(\"a\")\n    False\n    >>> is_palindrome(\"abcd\")\n    False\n    >>> is_palindrome(\"aab\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    \"\"\"\n    if len(s) <= 1:\n        return True\n    return s[0] == s[-1] and is_palindrome(s[1:-1])\n\ndef is_square(n: int):\n    \"\"\"Return True if n is square, False otherwise\n    >>> is_square(2)\n    True\n    >>> is_square(3)\n    False\n    >>> is_square(4)\n    True\n    >>> is_square(5)\n    False\n    >>> is_square(16)\n    True\n    >>> is_square(17)\n    False\n    \"\"\"\n    if n < 1:\n        return False\n    return n == (n * n)\n\ndef is_pentagonal(n: int):\n    \"\"\"Return True if n is pentagonal, False otherwise\n    >>>"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "uniques = []\n    seen = set()\n    for item in l:\n        if item not in seen:\n            uniques.append(item)\n            seen.add(item)\n    return sorted(uniques)\n\ndef unique_pairs(l):\n    \"\"\"Return sorted unique pairs in a list\n    >>> unique_pairs([1, 2, 2, 3, 4])\n    [(1, 2), (2, 3), (3, 4)]\n    \"\"\"\n    return zip(unique(l), unique(l))\n\ndef unique_triplets(l):\n    \"\"\"Return sorted unique triplets in a list\n    >>> unique_triplets([1, 2, 2, 3, 4])\n    [(1, 2, 3), (2, 3, 4)]\n    \"\"\"\n    return zip(unique(l), unique(l), unique(l))\n\ndef unique_quads(l):\n    \"\"\"Return sorted unique quadruplets in a list\n    >>> unique_quads([1, 2, 2, 3, 4])\n    [(1, 2, 3, 4)]\n    \"\"\"\n    return zip(unique(l), unique(l), unique(l), unique(l))\n\ndef unique_pentuples(l):\n    \"\"\"Return sorted unique pentuples in a list\n    >>> unique_pentuples([1, 2, 2, 3, 4])\n    [(1, 2, 3, 4)]\n    \"\"\"\n    return zip(unique(l), unique(l), unique(l), unique(l), unique(l))\n\ndef unique_hexuples(l):\n    \"\"\"Return sorted unique hexuples in a list\n    >>> unique_hexuples([1, 2, 2, 3, 4])\n    [(1, 2, 3, 4)]\n    \"\"\"\n    return zip(unique(l), unique(l), unique(l), unique(l), unique(l), unique(l))\n\ndef unique_octuples(l):\n    \"\"\"Return sorted unique octuples in a list\n    >>> unique_octuples([1, 2, 2, 3, 4])\n    [(1, 2, 3, 4)]\n    \"\"\"\n    return zip(unique(l), unique(l),"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef to_dict(l: list):\n    \"\"\"Convert a list of tuples into a dictionary\n    >>> to_dict([('a', 1), ('b', 2)])\n    {'a': 1, 'b': 2}\n    \"\"\"\n    return dict(l)\n\ndef find_max(l: list):\n    \"\"\"Find the largest value in a list\n    >>> find_max([3, 2, 1, 4])\n    4\n    >>> find_max([3, 2, 1, 0])\n    3\n    \"\"\"\n    return max(l)\n\ndef find_min(l: list):\n    \"\"\"Find the smallest value in a list\n    >>> find_min([3, 2, 1, 4])\n    1\n    >>> find_min([3, 2, 1, 0])\n    0\n    \"\"\"\n    return min(l)\n\ndef find_majority(l: list):\n    \"\"\"Find the majority element in a list\n    >>> find_majority([3, 2, 1, 4])\n    4\n    >>> find_majority([3, 2, 1, 0])\n    1\n    \"\"\"\n    return max(l) if l.count(l[-1]) > l.count(l[0]) else min(l)\n\ndef find_mean(l: list):\n    \"\"\"Find the mean value in a list\n    >>> find_mean([3, 2, 1, 4])\n    3.5\n    >>> find_mean([3, 2, 1, 0])\n    1.5\n    \"\"\"\n    return sum(l) / len(l)\n\ndef find_stddev(l: list):\n    \"\"\"Find the standard deviation of a list\n    >>> find_stddev([3, 2, 1, 4])\n    0.816496580927726\n    >>> find_stddev([3, 2, 1, 0])\n    0.707106781186548\n    \"\"\"\n    mean = find_mean(l)\n    return math.sqrt(sum([(i - mean) ** 2 for i in l]) / len(l))\n\ndef find_median(l: list):\n    \"\"\"Find the median value in a"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef uniq_list(l: list):\n    \"\"\"Return list of unique elements in a list\n    >>> uniq_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 3, 5, 9, 123]\n    \"\"\"\n    return [x for x in l if x not in l]\n\ndef uniq_dict(d: dict):\n    \"\"\"Return dictionary of unique elements in a dictionary\n    >>> uniq_dict({5:5, 3: 3, 5:2, 2:3, 3:3, 9:0, 0:123})\n    {0: 123, 3: 3, 5:2, 9:0}\n    \"\"\"\n    return dict([(x,y) for x,y in d.items() if x not in d])\n\ndef uniq_set(s: set):\n    \"\"\"Return set of unique elements in a set\n    >>> uniq_set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    {0, 3, 5, 9, 123}\n    \"\"\"\n    return set([x for x in s if x not in s])\n\ndef uniq_list_s(l: list):\n    \"\"\"Return list of unique elements in a list\n    >>> uniq_list_s([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return [x for x in l if x not in l]\n\ndef uniq_dict_s(d: dict):\n    \"\"\"Return dictionary of unique elements in a dictionary\n    >>> uniq_dict_s({5:5, 3: 3, 5:2, 2:3, 3:3, 9:0, 0:123})\n    {0: 123, 3: 3, 5:2, 9:0}\n    \"\"\"\n    return dict([(x,y) for x,y in d.items() if x not in d])\n\ndef uniq_set_s(s: set):\n    \"\"\"Return set of unique elements in a set\n    >>> uniq_set_s([5, 3, 5,"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef unique_count(l: list):\n    \"\"\"Return the number of unique elements in a list\n    >>> unique_count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    4\n    \"\"\"\n    return len(unique(l))\n\ndef unique_count_pairs(l: list):\n    \"\"\"Return the number of unique pairs in a list\n    >>> unique_count_pairs([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    4\n    \"\"\"\n    return len(unique(l))**2\n\ndef unique_count_triplets(l: list):\n    \"\"\"Return the number of unique triplets in a list\n    >>> unique_count_triplets([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    5\n    \"\"\"\n    return len(unique(l))**3\n\ndef unique_count_quartets(l: list):\n    \"\"\"Return the number of unique quartets in a list\n    >>> unique_count_quartets([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    9\n    \"\"\"\n    return len(unique(l))**4\n\ndef unique_count_quintets(l: list):\n    \"\"\"Return the number of unique quintets in a list\n    >>> unique_count_quintets([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\n    return len(unique(l))**5\n\ndef unique_count_hexadets(l: list):\n    \"\"\"Return the number of unique hexadets in a list\n    >>> unique_count_hexadets([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    7\n    \"\"\"\n    return len(unique(l))**6\n\ndef unique_count_heptads(l: list):\n    \"\"\"Return the number of unique heptads in a list\n    >>> unique_count_heptads([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    8\n    \"\"\"\n    return len(unique(l))**7"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef uniquify(l: list):\n    \"\"\"Return sorted unique elements in a list, keeping\n    original order of duplicate elements\n    >>> uniquify([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 3, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=l.index)\n\ndef count(l: list):\n    \"\"\"Return the number of elements in the list\n    >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    5\n    \"\"\"\n    return len(l)\n\ndef append(l: list, x: int):\n    \"\"\"Append an element to the end of the list\n    >>> append([5, 3], 123)\n    [5, 3, 123]\n    \"\"\"\n    l.append(x)\n    return l\n\ndef prepend(l: list, x: int):\n    \"\"\"Prepend an element to the beginning of the list\n    >>> prepend([5, 3], 123)\n    [123, 5, 3]\n    \"\"\"\n    l.insert(0, x)\n    return l\n\ndef insert(l: list, i: int, x: int):\n    \"\"\"Insert an element at position i\n    >>> insert([5, 3], 2, 123)\n    [5, 3, 123]\n    \"\"\"\n    l.insert(i, x)\n    return l\n\ndef remove(l: list, x: int):\n    \"\"\"Remove an element from the list\n    >>> remove([5, 3, 123, 7], 123)\n    [5, 3, 7]\n    \"\"\"\n    l.remove(x)\n    return l\n\ndef remove_at(l: list, i: int):\n    \"\"\"Remove the element at position i\n    >>> remove_at([5, 3, 123, 7], 1)\n    [5, 3, 7]\n    \"\"\"\n    l.pop(i)\n    return l\n\ndef remove_last(l: list):\n    \"\"\"Remove the last element from the list\n    >>> remove_last([5, 3, 123, 7])\n    [5,"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef get_path(path: str, fname: str):\n    \"\"\"Return path to file in the specified directory\n    >>> get_path('/home/user/mydir','myfile.txt')\n    '/home/user/mydir/myfile.txt'\n    \"\"\"\n    return os.path.join(path, fname)\n\ndef is_mac():\n    \"\"\"Check if running on a Mac\n    >>> is_mac()\n    False\n    \"\"\"\n    return sys.platform == 'darwin'\n\ndef is_windows():\n    \"\"\"Check if running on a Windows\n    >>> is_windows()\n    False\n    \"\"\"\n    return sys.platform == 'win32'\n\ndef is_linux():\n    \"\"\"Check if running on a Linux\n    >>> is_linux()\n    True\n    \"\"\"\n    return sys.platform == 'linux'\n\ndef is_64bit():\n    \"\"\"Check if running on a 64 bit system\n    >>> is_64bit()\n    False\n    \"\"\"\n    return sys.maxsize > 2**32\n\ndef is_debug_mode():\n    \"\"\"Check if running in debug mode\n    >>> is_debug_mode()\n    False\n    \"\"\"\n    return DEBUG_MODE\n\ndef is_verbose():\n    \"\"\"Check if running in verbose mode\n    >>> is_verbose()\n    False\n    \"\"\"\n    return VERBOSE_MODE\n\ndef is_quiet():\n    \"\"\"Check if running in quiet mode\n    >>> is_quiet()\n    False\n    \"\"\"\n    return QUIET_MODE\n\ndef is_verbose_quiet():\n    \"\"\"Check if running in verbose and quiet mode\n    >>> is_verbose_quiet()\n    False\n    \"\"\"\n    return VERBOSE_QUIET_MODE\n\ndef is_verbose_quiet_debug():\n    \"\"\"Check if running in verbose, quiet and debug mode\n    >>> is_verbose_quiet_debug()\n    False\n    \"\"\"\n    return VERBOSE_QUIET_DEBUG_MODE\n\ndef get_current_directory():\n    \"\"\"Return current directory\n    >>> get_current_directory()\n    '/home/user/mydir'\n    \"\"\""
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "u = []\n    for x in l:\n        if x not in u:\n            u.append(x)\n    return sorted(u)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "l = list(l)\n    l.sort()\n    return [x for x in l if x not in l[:x]]\n\ndef merge(a: list, b: list):\n    \"\"\"Merge two lists into one.\n    >>> merge([1,2,3], [4,5,6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return [x for x in a if x not in b] + b\n\ndef split(l: list, n: int):\n    \"\"\"Split a list into n lists of size n\n    >>> split(range(10), 2)\n    [[0, 1], [2, 3, 4], [5, 6, 7, 8, 9]]\n    \"\"\"\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>> is_palindrome(\"abcd\")\n    True\n    >>>"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\n\ndef nth_prime(n: int):\n    \"\"\"Return the nth prime number\n    >>> nth_prime(1)\n    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n    5\n    >>> nth_prime(4)\n    11\n    >>> nth_prime(10)\n    29\n    >>> nth_prime(100)\n    109\n    >>> nth_prime(1000)\n    1367\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\n              47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\n              107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\n              167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\n              229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\n              283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,\n              359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421,\n              431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\n              491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,\n              571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631,\n              641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\n              709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773,\n              787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,\n              859, 863,"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\ndef unique_with_counts(l: list):\n    \"\"\"Return sorted unique elements in a list with counts\n    >>> unique_with_counts([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 2), (3, 3), (5, 3), (9, 1), (123, 1)]\n    \"\"\"\n    return [(x, len(l)) for x in l if x not in l]\n\ndef unique_with_counts_sorted(l: list):\n    \"\"\"Return sorted unique elements in a list with counts\n    >>> unique_with_counts_sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(3, 3), (5, 3), (9, 1), (123, 1)]\n    \"\"\"\n    return sorted(unique_with_counts(l), key=lambda x: x[1], reverse=True)\n\ndef unique_with_counts_sorted_unique(l: list):\n    \"\"\"Return sorted unique elements in a list with counts\n    >>> unique_with_counts_sorted_unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(5, 3), (3, 3), (9, 1), (123, 1)]\n    \"\"\"\n    return sorted(unique_with_counts_sorted(l), key=lambda x: x[0])\n\ndef unique_with_counts_sorted_unique_with_counts(l: list):\n    \"\"\"Return sorted unique elements in a list with counts\n    >>> unique_with_counts_sorted_unique_with_counts([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(5, 3), (3, 3), (9, 1), (123, 1)]\n    \"\"\"\n    return sorted(unique_with_counts_sorted_unique(l), key=lambda x: x[1])"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef is_prime(n: int):\n    \"\"\"Is n a prime number?\n    >>> is_prime(2)\n    False\n    >>> is_prime(4)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(s: str):\n    \"\"\"Is s a palindrome?\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcd')\n    True"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "l2 = l[:]\n    return sorted(set(l)) + l2\n\ndef is_valid_ip(ip):\n    \"\"\"Test if a string is a valid IP address\n    >>> is_valid_ip('127.0.0.1')\n    True\n    >>> is_valid_ip('127.0.0.1:80')\n    False\n    >>> is_valid_ip('127.0.0.1:8080')\n    False\n    >>> is_valid_ip('abc.com')\n    False\n    >>> is_valid_ip('abc.com:8080')\n    False\n    >>> is_valid_ip('192.168.0.1:8080')\n    True\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, ip)\n    except socket.error:\n        return False\n    try:\n        socket.inet_aton(ip)\n    except socket.error:\n        return False\n    return True\n\ndef is_valid_port(port):\n    \"\"\"Test if a port is valid\n    >>> is_valid_port(80)\n    True\n    >>> is_valid_port(8080)\n    True\n    >>> is_valid_port(0)\n    False\n    >>> is_valid_port(8080.1)\n    False\n    >>> is_valid_port('80')\n    False\n    >>> is_valid_port('8080')\n    False\n    >>> is_valid_port('abc')\n    False\n    \"\"\"\n    if isinstance(port, str):\n        return port.isdigit()\n    if isinstance(port, int):\n        return True\n    return False\n\ndef is_valid_scheme(scheme):\n    \"\"\"Test if a scheme is valid\n    >>> is_valid_scheme('http')\n    True\n    >>> is_valid_scheme('https')\n    True\n    >>> is_valid_scheme('https://abc.com')\n    True\n    >>> is_valid_scheme('https://')\n    False\n    >>> is_valid_scheme('http:')\n    False\n    >>> is_valid_scheme('http:80')\n    False"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\n\ndef unique_everseen(iterable):\n    \"\"\"\n    Returns a list of unique elements, preserving order.\n    Unique even when duplicates are present.\n    \"\"\"\n    return list(OrderedDict.fromkeys(iterable).keys())\n\n\ndef unique_lines(filename):\n    \"\"\"\n    Returns a list of unique lines in a file.\n    \"\"\"\n    seen = set()\n    with open(filename) as f:\n        for line in f:\n            line = line.strip()\n            if line and not line.startswith('#'):\n                if line not in seen:\n                    seen.add(line)\n                    yield line\n\n\ndef find_executable(executable):\n    \"\"\"Find the absolute path to an executable that is in the path.\n\n    If the executable is not found, returns None.\n    \"\"\"\n    for path in os.environ['PATH'].split(os.pathsep):\n        if os.path.exists(os.path.join(path, executable)):\n            return os.path.abspath(os.path.join(path, executable))\n    return None\n\n\ndef check_output(*popenargs, **kwargs):\n    r\"\"\"Run command with arguments and return its output as a byte string.\n\n    Backported from Python 2.7 as it's implemented as pure python on stdlib.\n\n    >>> check_output(['/usr/bin/python', '--version'])\n    Python 2.6.2\n    \"\"\"\n    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)\n    output, unused_err = process.communicate()\n    retcode = process.poll()\n    if retcode:\n        cmd = kwargs.get(\"args\")\n        if cmd is None:\n            cmd = popenargs[0]\n        error = subprocess.CalledProcessError(retcode, cmd, output=output)\n        error.output = output\n        raise error\n    return output\n\n\ndef is_mac():\n    \"\"\"Check if the system is MacOS X.\n\n    :returns: True if the system is MacOS X, otherwise False."
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef get_line_count(path):\n    \"\"\"Returns number of lines in a file\n    >>> get_line_count('file.txt')\n    3\n    \"\"\"\n    with open(path, 'r') as f:\n        return sum(1 for line in f)\n\ndef get_word_count(path):\n    \"\"\"Returns number of words in a file\n    >>> get_word_count('file.txt')\n    5\n    \"\"\"\n    with open(path, 'r') as f:\n        return sum(1 for line in f)\n\ndef get_chars_count(path):\n    \"\"\"Returns number of chars in a file\n    >>> get_chars_count('file.txt')\n    10\n    \"\"\"\n    with open(path, 'r') as f:\n        return sum(1 for line in f)\n\ndef get_size(path):\n    \"\"\"Returns size of a file\n    >>> get_size('file.txt')\n    10\n    \"\"\"\n    return os.path.getsize(path)\n\ndef get_size_in_mb(path):\n    \"\"\"Returns size of a file in MB\n    >>> get_size_in_mb('file.txt')\n    10\n    \"\"\"\n    return round(get_size(path) / 1024 / 1024, 2)\n\ndef get_size_in_gb(path):\n    \"\"\"Returns size of a file in GB\n    >>> get_size_in_gb('file.txt')\n    10\n    \"\"\"\n    return round(get_size(path) / 1024 / 1024 / 1024, 2)\n\ndef get_size_in_kb(path):\n    \"\"\"Returns size of a file in KB\n    >>> get_size_in_kb('file.txt')\n    10\n    \"\"\"\n    return round(get_size(path) / 1024, 2)\n\ndef get_size_in_b(path):\n    \"\"\"Returns size of a file in B\n    >>> get_size_in_b('file.txt')\n    10\n    \"\"\"\n    return round(get_size(path), 2)\n\ndef get_file_md5(path):\n    \"\"\"Returns md5 hash of file"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef _get_pairs(s: str, sep: str) -> list:\n    \"\"\"Return all unique pairs in a string\n    >>> _get_pairs('abc','')\n    [('a', 'b'), ('b', 'c')]\n    \"\"\"\n    return [tuple(s.split(sep)) for s in s.split() if len(s) > 1]\n\ndef _get_triplets(s: str, sep: str) -> list:\n    \"\"\"Return all unique triplets in a string\n    >>> _get_triplets('abc','')\n    [('a', 'b', 'c')]\n    \"\"\"\n    return [tuple(s.split(sep)) for s in s.split() if len(s) > 2]\n\ndef _get_quadruplets(s: str, sep: str) -> list:\n    \"\"\"Return all unique quadruplets in a string\n    >>> _get_quadruplets('abc','')\n    [('a', 'b', 'c', 'd')]\n    \"\"\"\n    return [tuple(s.split(sep)) for s in s.split() if len(s) > 3]\n\ndef _get_quintuplets(s: str, sep: str) -> list:\n    \"\"\"Return all unique quintuplets in a string\n    >>> _get_quintuplets('abc','')\n    [('a', 'b', 'c', 'd', 'e')]\n    \"\"\"\n    return [tuple(s.split(sep)) for s in s.split() if len(s) > 4]\n\ndef _get_pentuplets(s: str, sep: str) -> list:\n    \"\"\"Return all unique pentuplets in a string\n    >>> _get_pentuplets('abc','')\n    [('a', 'b', 'c', 'd', 'e', 'f')]\n    \"\"\"\n    return [tuple(s.split(sep)) for s in s.split() if len(s) > 5]\n\ndef _get_hexuplets(s: str, sep: str) -> list:\n    \"\"\""
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef is_prime(n):\n    \"\"\"Test if n is prime\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    True\n    >>> is_prime(19)\n    True\n    \"\"\"\n    if n <= 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Test if n is prime\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef get_input(prompt='Enter a number: '):\n    \"\"\"\n    Get a string from the user.\n    \"\"\"\n    while True:\n        try:\n            return input(prompt)\n        except EOFError:\n            print()\n\ndef get_input_list(prompt='Enter a list of numbers: '):\n    \"\"\"\n    Get a list of strings from the user.\n    \"\"\"\n    while True:\n        try:\n            return list(map(int, input(prompt).split()))\n        except EOFError:\n            print()\n\ndef get_input_int(prompt='Enter a number: '):\n    \"\"\"\n    Get an integer from the user.\n    \"\"\"\n    while True:\n        try:\n            return int(input(prompt))\n        except EOFError:\n            print()\n\ndef get_input_float(prompt='Enter a number: '):\n    \"\"\"\n    Get a float from the user.\n    \"\"\"\n    while True:\n        try:\n            return float(input(prompt))\n        except EOFError:\n            print()\n\ndef get_input_choice(prompt='Enter a choice: '):\n    \"\"\"\n    Get a choice from the user.\n    \"\"\"\n    while True:\n        try:\n            return input(prompt).lower().strip()\n        except EOFError:\n            print()\n\ndef get_input_yesno(prompt='Enter a yes or no: '):\n    \"\"\"\n    Get a yes or no from the user.\n    \"\"\"\n    while True:\n        try:\n            return input(prompt).lower().strip() in ('yes', 'y')\n        except EOFError:\n            print()\n\ndef get_input_yesnofail(prompt='Enter a yes or no (not case-sensitive): '):\n    \"\"\"\n    Get a yes or no from the user.\n    \"\"\"\n    while True:\n        try:\n            return input(prompt).lower().strip() in ('yes', 'y')\n        except EOFError:\n            print()\n        except ValueError:\n            print('Invalid choice. Try again.')"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef flatten(l: list):\n    \"\"\"Flatten a list of lists into a single list\n    >>> flatten([[1, 2], [3, 4], [5, 6, 7]])\n    [1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    return [item for sublist in l for item in sublist]\n\ndef group_by_first(l: list):\n    \"\"\"Group elements by the first element of a list\n    >>> group_by_first([1, 2, 3, 4, 5, 6, 7])\n    {1: [1, 2, 3, 4], 5: [5, 6, 7]}\n    \"\"\"\n    d = defaultdict(list)\n    for i, x in enumerate(l):\n        d[x].append(i)\n    return dict(d)\n\ndef group_by_second(l: list):\n    \"\"\"Group elements by the second element of a list\n    >>> group_by_second([1, 2, 3, 4, 5, 6, 7])\n    {2: [1, 2, 3], 4: [4, 5, 6], 7: [7]}\n    \"\"\"\n    d = defaultdict(list)\n    for i, x in enumerate(l):\n        d[x].append(i)\n    return dict(d)\n\ndef group_by_third(l: list):\n    \"\"\"Group elements by the third element of a list\n    >>> group_by_third([1, 2, 3, 4, 5, 6, 7])\n    {3: [1, 2], 5: [5, 6], 7: [7]}\n    \"\"\"\n    d = defaultdict(list)\n    for i, x in enumerate(l):\n        d[x].append(i)\n    return dict(d)\n\ndef group_by_fourth(l: list):\n    \"\"\"Group elements by the fourth element of a list\n    >>> group_by_fourth([1, 2, 3, 4, 5, 6, 7])\n    {4: [1, 2, 3], 5: [5, 6], 7: [7]}\n    \"\"\"\n    d = defaultdict(list"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "seen: set = set()\n    for i in l:\n        if i not in seen:\n            seen.add(i)\n            yield i\n\ndef get_unique_values(l: list):\n    \"\"\"Return list of unique values in a list\n    >>> get_unique_values([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 3, 5, 9]\n    \"\"\"\n    return list(unique(l))\n\ndef get_unique_values_count(l: list):\n    \"\"\"Return list of unique values in a list and the count\n    >>> get_unique_values_count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    (['0', '3', '5', '9'], 3)\n    \"\"\"\n    return get_unique_values(l), len(l)\n\ndef get_unique_values_count_from_set(l: list):\n    \"\"\"Return list of unique values in a list and the count\n    >>> get_unique_values_count_from_set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    (['0', '3', '5', '9'], 3)\n    \"\"\"\n    return get_unique_values(l), len(set(l))\n\ndef get_unique_values_count_from_list(l: list):\n    \"\"\"Return list of unique values in a list and the count\n    >>> get_unique_values_count_from_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    (['0', '3', '5', '9'], 3)\n    \"\"\"\n    return get_unique_values(l), len(l)\n\ndef get_unique_values_count_from_set_from_list(l: list):\n    \"\"\"Return list of unique values in a list and the count\n    >>> get_unique_values_count_from_set_from_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    (['0', '3', '5', '9'], 3)\n    \"\"\"\n    return get_unique_values"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef is_prime(n: int):\n    \"\"\"Returns True if n is prime, else False\n    >>> is_prime(2)\n    True\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_factors(n: int):\n    \"\"\"Returns True if n is prime, else False\n    >>> is_prime_factors(2)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_prime_factors(25)\n    True\n    >>> is_"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef check_array(x, y):\n    \"\"\"Check if the arrays are of equal shape\n    >>> check_array([1, 2, 3], [3, 2, 1])\n    True\n    >>> check_array([1, 2, 3], [3, 2, 2])\n    False\n    \"\"\"\n    if not len(x) == len(y):\n        return False\n    return np.all(np.asarray(x) == np.asarray(y))\n\ndef check_shape(x, y):\n    \"\"\"Check if the shapes are equal\n    >>> check_shape([1, 2, 3], [3, 2, 1])\n    True\n    >>> check_shape([1, 2, 3], [3, 2, 2])\n    False\n    \"\"\"\n    return len(x) == len(y) and check_array(x, y)\n\ndef check_dims(x, y):\n    \"\"\"Check if the shapes are equal\n    >>> check_dims([1, 2, 3], [3, 2, 1])\n    True\n    >>> check_dims([1, 2, 3], [3, 2, 2])\n    False\n    \"\"\"\n    return check_shape(np.shape(x), np.shape(y))\n\ndef check_dims_same(x, y):\n    \"\"\"Check if the shapes are equal\n    >>> check_dims_same([1, 2, 3], [3, 2, 1])\n    True\n    >>> check_dims_same([1, 2, 3], [3, 2, 2])\n    False\n    \"\"\"\n    return check_dims(x, y) and np.all(x == y)\n\ndef check_dims_same_or_empty(x, y):\n    \"\"\"Check if the shapes are equal\n    >>> check_dims_same_or_empty([1, 2, 3], [3, 2, 1])\n    True\n    >>> check_dims_same_or_empty([1, 2, 3], [3, 2, 2])\n    False\n    \"\"\"\n    return check_dims(x, y) or len(x) == 0\n\ndef check_"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\ndef is_pandas_installed():\n    \"\"\"Return True if pandas is installed\"\"\"\n    try:\n        import pandas\n        return True\n    except ImportError:\n        return False\n\ndef is_numpy_installed():\n    \"\"\"Return True if numpy is installed\"\"\"\n    try:\n        import numpy\n        return True\n    except ImportError:\n        return False"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef find_max_id(documents: list):\n    \"\"\"Find max id of a list of documents\n    >>> find_max_id([{'id': 1}, {'id': 2}, {'id': 3}])\n    3\n    >>> find_max_id([{'id': 1}, {'id': 2}, {'id': 3}, {'id': 4}])\n    4\n    \"\"\"\n    return max(documents, key=lambda doc: doc['id'])['id']\n\ndef generate_documents(\n    n: int,\n    min_id: int = 1,\n    max_id: int = 1000000,\n    max_length: int = 100,\n    max_occurrence: int = 1000,\n) -> list:\n    \"\"\"Generate a list of documents with a fixed number of words\n    >>> generate_documents(1)\n    [{'id': 1, 'words': ['a']}]\n    >>> generate_documents(2)\n    [{'id': 1, 'words': ['a', 'b']}, {'id': 2, 'words': ['c']}]\n    >>> generate_documents(3)\n    [{'id': 1, 'words': ['a', 'b', 'c']}, {'id': 2, 'words': ['d']}, {'id': 3, 'words': ['e']}]\n    >>> generate_documents(4)\n    [{'id': 1, 'words': ['a', 'b', 'c', 'd']}, {'id': 2, 'words': ['e']}, {'id': 3, 'words': ['f']}, {'id': 4, 'words': ['g', 'h', 'i']}]\n    >>> generate_documents(5)\n    [{'id': 1, 'words': ['a', 'b', 'c', 'd', 'e']}, {'id': 2, 'words': ['f']}, {'id': 3, 'words': ['g', 'h', 'i']}, {'id': 4, 'words': ['j', 'k', 'l','m']}]\n    >>> generate_documents("
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef unique_count(l: list):\n    \"\"\"Return a dictionary of unique elements in a list\n    >>> unique_count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    {0: 1, 3: 2, 5: 1, 9: 1, 123: 1}\n    \"\"\"\n    d = {}\n    for x in l:\n        d[x] = d.get(x, 0) + 1\n    return d\n\ndef unique_count_sorted(l: list):\n    \"\"\"Return a dictionary of unique elements in a list, sorted\n    >>> unique_count_sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    {3: 2, 5: 2, 9: 1, 123: 1}\n    \"\"\"\n    d = unique_count(l)\n    return sorted(d)\n\ndef unique_count_sorted_unique(l: list):\n    \"\"\"Return a dictionary of unique elements in a list, sorted and unique\n    >>> unique_count_sorted_unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    {0: 1, 3: 2, 5: 2, 9: 1, 123: 1}\n    \"\"\"\n    d = unique_count(l)\n    return {k: v for k, v in d.items() if v == 1}\n\ndef unique_count_sorted_unique_no_dupes(l: list):\n    \"\"\"Return a dictionary of unique elements in a list, sorted and unique,\n    without duplicate entries\n    >>> unique_count_sorted_unique_no_dupes([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    {3: 2, 5: 2, 9: 1, 123: 1}\n    \"\"\"\n    d = unique_count(l)\n    return {k: v for k, v in d.items() if v == 1 and k not in d}\n\ndef unique_count_sorted_unique_no_dupes_no_dupes(l: list):\n    \"\"\"Return a dictionary of unique elements in a list, sorted and unique,\n    without duplicate"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "return sorted(set(l))"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "return list(set(l))\n\ndef unique_everseen(iterable, key=None):\n    \"\"\"\n    Return all unique elements, preserving order.\n    Remember all elements ever seen.\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    >>> unique_everseen('ABBCcAD', str.lower)\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in filterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\ndef unique_values(func):\n    \"\"\"\n    Wrap a function returning an iterable such that the resulting iterable\n    only ever yields unique items.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return unique_everseen(func(*args, **kwargs))\n    return wrapper\n\ndef to_csv_row(row):\n    \"\"\"\n    Convert a list of string values to a CSV-compatible row.\n    >>> to_csv_row(['a', 'b', 'c'])\n    'a,b,c'\n    >>> to_csv_row(['a', 'b', 'c', 'd'])\n    'a,b,c,d'\n    >>> to_csv_row(['a', 'b', 'c', 'd', 'e'])\n    'a,b,c,d,e'\n    >>> to_csv_row(['', '', '', '', '', ''])\n    '\"\"\"\"\"\"\"\"\"\"\"\"'\n    >>> to_csv_row(['', '', '', '', '', '', ''])\n    '\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"'\n    \"\"\"\n    >>> to_csv_row(['a', 'b', 'c', 'd', 'e', 'f', 'g"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "return list(set(l))\n\ndef get_file_path(file_name):\n    \"\"\"Return the absolute file path of a file or directory\n    >>> get_file_path(\"/home/john/my_file.txt\")\n    '/home/john/my_file.txt'\n    >>> get_file_path(\"/home/john/my_dir/my_file.txt\")\n    '/home/john/my_dir/my_file.txt'\n    \"\"\"\n    path = os.path.dirname(os.path.abspath(file_name))\n    if os.path.exists(path):\n        return path\n    else:\n        return os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(file_name)), os.path.basename(os.path.abspath(file_name))))\n\ndef get_file_name(file_path):\n    \"\"\"Return the name of a file or directory\n    >>> get_file_name(\"/home/john/my_dir/my_file.txt\")\n   'my_file.txt'\n    \"\"\"\n    return os.path.basename(file_path)\n\ndef get_file_name_no_ext(file_path):\n    \"\"\"Return the name of a file or directory without extension\n    >>> get_file_name_no_ext(\"/home/john/my_dir/my_file.txt\")\n   'my_file'\n    \"\"\"\n    return os.path.splitext(os.path.basename(file_path))[0]\n\ndef get_file_ext(file_path):\n    \"\"\"Return the extension of a file or directory\n    >>> get_file_ext(\"/home/john/my_dir/my_file.txt\")\n    '.txt'\n    \"\"\"\n    return os.path.splitext(file_path)[1]\n\ndef get_file_ext_no_dot(file_path):\n    \"\"\"Return the extension of a file or directory without dot\n    >>> get_file_ext_no_dot(\"/home/john/my_dir/my_file.txt\")\n    '.txt'"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "return list(set(l))\n\n\ndef print_table(rows: list, header: list = None,\n                border: str = \"|\",\n                format_str: str = \"| %s\",\n                widths: dict = None):\n    \"\"\"Print a table of given rows with optional header.\n    >>> print_table([[1,2],[3,4]], [\"col1\",\"col2\"])\n    | col1  col2\n    | ---  ---\n    | 1    2\n    | 3    4\n    \"\"\"\n    if header is None:\n        header = rows[0]\n    if widths is None:\n        widths = {i: max(len(r[i]) for r in rows) for i in range(len(header))}\n    for row in rows:\n        print(border + format_str % tuple(map(str, row)))\n    print(border)\n    for i in range(len(header)):\n        print(border + format_str % (header[i], \"-\" * widths[i]))\n\n\ndef print_table_2(rows: list, header: list = None,\n                  border: str = \"|\",\n                  format_str: str = \"| %s\",\n                  widths: dict = None):\n    \"\"\"Print a table of given rows with optional header.\n    >>> print_table_2([[1,2],[3,4]], [\"col1\",\"col2\"])\n    | col1  col2\n    | ---  ---\n    | 1    2\n    | 3    4\n    \"\"\"\n    if header is None:\n        header = rows[0]\n    if widths is None:\n        widths = {i: max(len(r[i]) for r in rows) for i in range(len(header))}\n    for row in rows:\n        print(border + format_str % tuple(map(str, row)))\n    print(border)\n    for i in range(len(header)):\n        print(border + format_str % (header[i], \"-\" * widths[i]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "return sorted(set(l))\n\ndef reverse_unique(l: list):\n    \"\"\"Return sorted unique elements in a list, in reverse order\n    >>> reverse_unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 9, 3, 3, 2, 5, 0, 5, 3]\n    \"\"\"\n    return sorted(set(l), reverse=True)\n\ndef remove_duplicates(l: list):\n    \"\"\"Return list with duplicates removed\n    >>> remove_duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return list(set(l))\n\ndef unique_everseen(iterable):\n    \"\"\"\n    Returns all unique elements, preserving order.\n    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for element in iterable:\n        if element not in seen:\n            seen_add(element)\n            yield element\n\ndef unique_everseen_reversed(iterable):\n    \"\"\"\n    Returns all unique elements, preserving order.\n    # unique_everseen_reversed('AAAABBBCCDAABBB') --> D B C A\n    # unique_everseen_reversed('ABBCcAD', str.lower) --> D B C A\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for element in iterable:\n        if element not in seen:\n            seen_add(element)\n            yield element\n\ndef count_all(iterable, predicate=lambda x: True):\n    \"\"\"Count all elements of an iterable that pass a given predicate.\"\"\"\n    return sum(1 for x in iterable if predicate(x))\n\ndef count_any(iterable, predicate=lambda x: True):\n    \"\"\"Count any elements of an iterable that pass a given predicate.\"\"\"\n    return sum(1 for x in iterable if predicate(x))\n\ndef"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "return sorted(set(l))\n\ndef is_prime(num: int):\n    \"\"\"Returns true if num is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(12)\n    True\n    \"\"\"\n    if num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    elif num % 3 == 0:\n        return False\n    elif num % 5 == 0:\n        return False\n    elif num % 7 == 0:\n        return False\n    elif num % 11 == 0:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_palindrome(num: int):\n    \"\"\"Returns true if num is a palindrome\n    >>> is_palindrome(12)\n    True\n    >>> is_palindrome(5)\n    False\n    >>> is_palindrome(6)\n    True\n    >>> is_palindrome(3)\n    True\n    >>> is_palindrome(4)\n    False\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef is_palindrome_iterative(num: int):\n    \"\"\"Returns true if num is a palindrome\n    >>> is_palindrome_iterative(12)\n    True\n    >>> is_palindrome_iterative(5)\n    False\n    >>> is_palindrome_iterative(6)\n    True\n    >>> is_palindrome_iterative(3)\n    True\n    >>> is_palindrome_iterative(4)\n    False\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef is_palindrome_recursive(num: int):\n    \"\"\"Returns true if num is a palindrome\n    >>> is_palindrome_recursive(12)\n    True"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "return list(set(l))\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    True\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    num_sqrt = int(math.sqrt(n))\n    for i in range(num_sqrt, 1, -1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n: int):\n    \"\"\"Return True if n is a palindrome, False otherwise\n    >>> is_palindrome(3)\n    True\n    >>> is_palindrome(4)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(6)\n    False\n    >>> is_palindrome(7)\n    False\n    >>> is_palindrome(8)\n    False\n    >>> is_palindrome(9)\n    False\n    >>> is_palindrome(10)\n    True"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "return sorted(set(l))\n\ndef unique_everseen(iterable):\n    \"\"\"\n    Return all unique elements, preserving order.\n    Elements seen before are dropped.\n\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for element in iterable:\n        if element not in seen:\n            seen_add(element)\n            yield element\n\ndef uniquer_lines(lines):\n    \"\"\"\n    Return unique lines, preserving order.\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for line in lines:\n        if line not in seen:\n            seen_add(line)\n            yield line\n\ndef uniquer_csv(lines):\n    \"\"\"\n    Return unique lines, preserving order.\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for line in lines:\n        if line not in seen:\n            seen_add(line)\n            yield line"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "return sorted(list(set(l)))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "return sorted(list(set(l)))\n\ndef is_sublist(l1: list, l2: list):\n    \"\"\"Returns true if l1 is a sublist of l2\n    >>> is_sublist([1, 2, 3], [1, 2, 3, 4])\n    True\n    >>> is_sublist([1, 2, 3], [1, 2, 3, 4, 5])\n    False\n    \"\"\"\n    return set(l1).issubset(set(l2))\n\ndef is_sublist_or_equal(l1: list, l2: list):\n    \"\"\"Returns true if l1 is a sublist of l2 or if l1 is equal to l2\n    >>> is_sublist_or_equal([1, 2, 3], [1, 2, 3, 4])\n    True\n    >>> is_sublist_or_equal([1, 2, 3], [1, 2, 3, 4, 5])\n    True\n    >>> is_sublist_or_equal([1, 2, 3], [2, 3, 4])\n    False\n    >>> is_sublist_or_equal([1, 2, 3], [1, 2, 3])\n    True\n    \"\"\"\n    return is_sublist(l1, l2) or l1 == l2\n\ndef remove_duplicates(l: list):\n    \"\"\"Remove duplicate elements in a list\n    >>> remove_duplicates([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> remove_duplicates([1, 2, 3, 4, 5, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\ndef remove_empty(l: list):\n    \"\"\"Remove empty elements in a list\n    >>> remove_empty([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> remove_empty([1, 2, 3, 4, 5, ''])\n    [1, 2, 3, 4"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "return sorted(set(l))"
    },
    {
      "rank": 47,
      "score": 7.0,
      "candidate": "return sorted(set(l))"
    },
    {
      "rank": 48,
      "score": 7.0,
      "candidate": "return sorted(set(l))"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "return list(set(l))\n\ndef get_max_value(l: list):\n    \"\"\"Return maximum value in a list\n    >>> get_max_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    9\n    \"\"\"\n    return max(l)\n\ndef get_min_value(l: list):\n    \"\"\"Return minimum value in a list\n    >>> get_min_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    0\n    \"\"\"\n    return min(l)\n\ndef get_avg_value(l: list):\n    \"\"\"Return average value in a list\n    >>> get_avg_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    5.5\n    \"\"\"\n    return sum(l) / len(l)\n\ndef get_median_value(l: list):\n    \"\"\"Return median value in a list\n    >>> get_median_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    3\n    \"\"\"\n    return sorted(l)[len(l) / 2]\n\ndef get_mode_value(l: list):\n    \"\"\"Return mode value in a list\n    >>> get_mode_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    3\n    \"\"\"\n    return sorted(l)[len(l) / 2]\n\ndef get_std_dev_value(l: list):\n    \"\"\"Return standard deviation value in a list\n    >>> get_std_dev_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    2.1213203435596428\n    \"\"\"\n    return std(l)\n\ndef get_variance_value(l: list):\n    \"\"\"Return variance value in a list\n    >>> get_variance_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6.0\n    \"\"\"\n    return var(l)\n\ndef get_std_dev_value_list(l: list):\n    \"\"\"Return standard deviation value in a list"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "seen: set = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_count(l: list):\n    \"\"\"Return count of unique elements in a list\n    >>> unique_count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    3\n    \"\"\"\n    return len(unique(l))\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return list(unique(l))\n\n\ndef unique_count_list(l: list):\n    \"\"\"Return count of unique elements in a list\n    >>> unique_count_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    3\n    \"\"\"\n    return len(unique_list(l))\n\n\ndef unique_count_list_2(l: list):\n    \"\"\"Return count of unique elements in a list\n    >>> unique_count_list_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    3\n    \"\"\"\n    return len(unique_list_2(l))\n\n\ndef unique_list_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return list(unique_list_2(l))\n\n\ndef unique_list_2_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list_2_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return list(unique_list_2_2(l))\n\n\ndef unique_list_2_3(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list_2_"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\ndef is_same_day(date1, date2):\n    \"\"\"Is date1 the same day as date2?\n    >>> is_same_day(date(2017, 4, 1), date(2017, 4, 1))\n    True\n    >>> is_same_day(date(2017, 4, 1), date(2017, 4, 2))\n    False\n    >>> is_same_day(date(2017, 4, 2), date(2017, 4, 1))\n    False\n    \"\"\"\n    return (date1.day == date2.day and\n            date1.month == date2.month and\n            date1.year == date2.year)\n\ndef is_same_month(date1, date2):\n    \"\"\"Is date1 the same month as date2?\n    >>> is_same_month(date(2017, 4, 1), date(2017, 4, 1))\n    True\n    >>> is_same_month(date(2017, 4, 1), date(2017, 4, 2))\n    False\n    >>> is_same_month(date(2017, 4, 2), date(2017, 4, 1))\n    False\n    \"\"\"\n    return (date1.day == date2.day and\n            date1.month == date2.month and\n            date1.year == date2.year)\n\ndef is_same_year(date1, date2):\n    \"\"\"Is date1 the same year as date2?\n    >>> is_same_year(date(2017, 4, 1), date(2017, 4, 1))\n    True\n    >>> is_same_year(date(2017, 4, 1), date(2017, 4, 2))\n    False\n    >>> is_same_year(date(2017, 4, 2), date(2017, 4, 1))\n    False\n    \"\"\"\n    return (date1.day == date2.day and\n            date1.month == date2.month and\n            date1.year == date2.year)\n\ndef is_same_year_month_day(date1,"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "return list(set(l))\n\n\ndef unique_everseen(iterable, key=None):\n    \"\"\"\n    Return all unique elements, preserving order.\n    The last occurrance of each element will be replaced by None.\n\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D', 'B', None, None]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in six.moves.filterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\n\ndef unique_values(func):\n    \"\"\"\n    Return list of values for each key returned by func.\n    >>> unique_values(lambda x: (x, x))\n    [(1, 1), (2, 2), (3, 3)]\n    \"\"\"\n    return list(six.moves.map(func, six.moves.range(10)))\n\n\ndef unique_everseen_values(func):\n    \"\"\"\n    Return list of values for each key returned by func.\n    >>> unique_everseen_values(lambda x: (x, x))\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, None]\n    \"\"\"\n    return list(six.moves.filter(None, six.moves.map(func, six.moves.range(10))))\n\n\ndef nth_list(iterable, n, default=None):\n    \"\"\"\n    Return the nth item or a default value.\n    >>> nth_list('ABCDE', 0)\n    'A'\n    >>> nth_list('ABCDE', 2)\n    'E'\n    >>> nth_list('ABCDE', 9)\n    None\n    \"\"\"\n    iterable = iter(iterable)\n    try:\n        return six.advance_iterator(iterable, n)\n    except StopIteration:\n        return default\n\n\ndef nth_value"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "return list(set(l))\n\ndef to_fancy_list(l):\n    \"\"\"Convert a list of lists to a list of strings\n    >>> to_fancy_list([[1, 2, 3], [4, 5, 6]])\n    ['1, 2, 3', '4, 5, 6']\n    \"\"\"\n    return ','.join(['\"%s\"' % x for x in l])\n\ndef to_list(x):\n    \"\"\"Convert a string to a list of strings\n    >>> to_list('1,2,3')\n    ['1', '2', '3']\n    \"\"\"\n    return [x.strip() for x in x.split(',')]\n\ndef parse_list(l):\n    \"\"\"Parse a list of strings into a list of lists\n    >>> parse_list(['1,2,3'])\n    [[1, 2, 3]]\n    >>> parse_list(['1', '2', '3'])\n    [[1, 2, 3]]\n    \"\"\"\n    if type(l) == str:\n        l = to_list(l)\n    return [to_fancy_list(x) for x in l]\n\ndef print_list(l, *args, **kwargs):\n    \"\"\"Print a list of lists\n    >>> print_list([[1, 2, 3], [4, 5, 6]])\n    1, 2, 3\n    4, 5, 6\n    \"\"\"\n    print(to_fancy_list(l))\n\ndef print_list_as_dict(l, *args, **kwargs):\n    \"\"\"Print a list of lists as a dictionary\n    >>> print_list_as_dict([[1, 2, 3], [4, 5, 6]])\n    {'0': [1, 2, 3], '1': [4, 5, 6]}\n    \"\"\"\n    print(to_fancy_list(l))\n\ndef print_list_as_table(l, *args, **kwargs):\n    \"\"\"Print a list of lists as a table\n    >>> print_list_as_table([[1, 2, 3], [4, 5, 6]])\n    +----+"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "u = set(l)\n    return sorted(u)\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9]\n    \"\"\"\n    u = set(l)\n    return list(u)\n\n\ndef unique_dict(d: dict):\n    \"\"\"Return sorted unique elements in a dictionary\n    >>> unique_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6})\n    {'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    \"\"\"\n    u = {}\n    for k, v in d.items():\n        if k not in u:\n            u[k] = v\n    return u\n\n\ndef unique_dict_by_value(d: dict):\n    \"\"\"Return sorted unique elements in a dictionary\n    >>> unique_dict_by_value({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6})\n    {'a': 1, 'c': 3, 'e': 5}\n    \"\"\"\n    u = {}\n    for k, v in d.items():\n        if v not in u:\n            u[v] = k\n    return u\n\n\ndef unique_dict_by_key(d: dict):\n    \"\"\"Return sorted unique elements in a dictionary\n    >>> unique_dict_by_key({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6})\n    {'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    \"\"\"\n    u = {}\n    for k, v in d.items():\n        if k not in u:\n            u[k] = v\n    return u\n\n\ndef unique_dict_by_value_and_key(d: dict):\n    \"\"\"Return sorted unique elements in a dictionary\n    >>> unique_dict_by_value_and_key({'a': 1, '"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef parse_time(s: str, offset: int):\n    \"\"\"Parse time string and return a number of seconds\n    >>> parse_time('5', 0)\n    5\n    >>> parse_time('5', 5)\n    5\n    >>> parse_time('5', -5)\n    5\n    >>> parse_time('5', -5.5)\n    5\n    >>> parse_time('5', -6)\n    5\n    >>> parse_time('5', -6.5)\n    5\n    >>> parse_time('5', -7)\n    5\n    >>> parse_time('5', -7.5)\n    5\n    >>> parse_time('5', -8)\n    5\n    >>> parse_time('5', -8.5)\n    5\n    >>> parse_time('5', -9)\n    5\n    >>> parse_time('5', -9.5)\n    5\n    >>> parse_time('5', -10)\n    5\n    >>> parse_time('5', -10.5)\n    5\n    >>> parse_time('5', -11)\n    5\n    >>> parse_time('5', -11.5)\n    5\n    >>> parse_time('5', -12)\n    5\n    >>> parse_time('5', -12.5)\n    5\n    >>> parse_time('5', -13)\n    5\n    >>> parse_time('5', -13.5)\n    5\n    >>> parse_time('5', -14)\n    5\n    >>> parse_time('5', -14.5)\n    5\n    >>> parse_time('5', -15)\n    5\n    >>> parse_time('5', -15.5)\n    5\n    >>> parse_time('5', -16)\n    5\n    >>> parse_time('5', -16.5)\n    5\n    >>> parse_time('5', -17)\n    5\n    >>> parse_time('5', -17.5)\n    5\n    >>> parse_time('5', -18)\n    5\n    >>> parse_time('5', -18.5)\n    5"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "# http://stackoverflow.com/a/1807931/251622\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\ndef is_iterable(obj):\n    \"\"\"Return True if obj is iterable\n    >>> is_iterable([1, 2, 3])\n    True\n    >>> is_iterable(\"foo\")\n    False\n    \"\"\"\n    return hasattr(obj, '__iter__')\n\n\ndef is_sequence(obj):\n    \"\"\"Return True if obj is a sequence\n    >>> is_sequence([1, 2, 3])\n    True\n    >>> is_sequence('foo')\n    False\n    \"\"\"\n    return hasattr(obj, '__getitem__')\n\n\ndef is_mapping(obj):\n    \"\"\"Return True if obj is a mapping\n    >>> is_mapping({'a': 1, 'b': 2})\n    True\n    >>> is_mapping(['a', 'b', 'c'])\n    False\n    \"\"\"\n    return hasattr(obj, '__getitem__') and hasattr(obj, '__setitem__')\n\n\ndef is_hashable(obj):\n    \"\"\"Return True if obj is hashable\n    >>> is_hashable({'a': 1, 'b': 2})\n    True\n    >>> is_hashable(['a', 'b', 'c'])\n    True\n    >>> is_hashable(set([1, 2, 3]))\n    True\n    >>> is_hashable(1)\n    False\n    \"\"\"\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n\n    return True\n\n\ndef is_string(obj):\n    \"\"\"Return True if obj is a string\n    >>> is_string(1)\n    False\n    >>> is_string(\"foo\")\n    True\n    \"\"\"\n    return isinstance(obj, str)\n\n\ndef is_iterable_not_string(obj):\n    \"\"\"Return True if obj is a non-string iterable\n    >>> is_iterable_not_string([1, 2, 3])\n    True\n    >>> is_iterable"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "return sorted(frozenset(l))\n\n\ndef unique_list(l: list):\n    \"\"\"Return a list with unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\n\ndef unique_dict(d: dict):\n    \"\"\"Return a dictionary with unique elements in a dictionary\n    >>> unique_dict({5: \"5\", 3: \"3\", 5: \"5\", 2: \"2\", 3: \"3\", 3: \"3\", 9: \"9\", 0: \"0\", 123: \"123\"})\n    {0: 0, 2: 2, 3: 3, 5: 5, 9: 9, 123: 123}\n    \"\"\"\n    return {k: v for k, v in d.items() if k not in d}\n\n\ndef unique_set(s: set):\n    \"\"\"Return a set with unique elements in a set\n    >>> unique_set(set([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n    set([0, 2, 3, 5, 9, 123])\n    \"\"\"\n    return set(frozenset(s))\n\n\ndef unique_tuple(t: tuple):\n    \"\"\"Return a tuple with unique elements in a tuple\n    >>> unique_tuple((5, 3, 5, 2, 3, 3, 9, 0, 123))\n    (0, 2, 3, 5, 9, 123)\n    \"\"\"\n    return tuple(frozenset(t))\n\n\ndef unique_dict_tuple(d: dict, t: tuple):\n    \"\"\"Return a dictionary with unique elements in a dictionary and a tuple\n    >>> unique_dict_tuple({5: \"5\", 3: \"3\", 5: \"5\", 2: \"2\", 3: \"3\", 3: \"3\", 9: \"9\", 0: \"0\", 123: \"123\"}, (0, 2, 3, 5, 9, 123))\n    {0: 0, 2: 2, 3: 3, 5: 5, 9: 9, 123: 123}\n    \"\"\"\n    return"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef merge(list_1, list_2):\n    \"\"\"Merge two sorted lists into one sorted list\n    >>> merge([1, 2, 3, 4], [3, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return sorted(list_1 + list_2)\n\n\ndef is_even(n):\n    \"\"\"Return true if n is even\n    >>> is_even(2)\n    True\n    >>> is_even(4)\n    False\n    \"\"\"\n    return n % 2 == 0\n\n\ndef is_odd(n):\n    \"\"\"Return true if n is odd\n    >>> is_odd(3)\n    True\n    >>> is_odd(4)\n    False\n    \"\"\"\n    return not is_even(n)\n\n\ndef is_prime(n):\n    \"\"\"Return true if n is prime\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    r = int(math.sqrt(n)) + 1\n    f = 5\n    while f <= r:\n        if n % f == 0 or n % (f + 2) == 0:\n            return False\n        if n % (f + 4) == 0:\n            return False\n        f += 6\n    return True\n\n\ndef is_palindrome(n):\n    \"\"\"Return true if n is palindrome\n    >>> is_palindrome(2)\n    False\n    >>> is_palindrome(3)\n    True\n    >>> is_palindrome(4)\n    False\n    >>> is_palindrome(9)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef is_palindrome_product(n):\n    \"\"\"Return true if n is palindrome product\n    >>>"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef get_file_size(path: str) -> int:\n    \"\"\"Get file size in bytes.\n    >>> get_file_size('/home/user/file.txt')\n    >>> get_file_size('/home/user/file.txt', True)\n    >>> get_file_size('/home/user/file.txt', False)\n    >>> get_file_size('/home/user/file.txt', False, True)\n    \"\"\"\n    if os.path.isfile(path):\n        return os.path.getsize(path)\n    elif os.path.isdir(path):\n        return sum(os.path.getsize(os.path.join(path, f)) for f in os.listdir(path))\n    else:\n        raise FileNotFoundError(\"File not found: {}\".format(path))\n\n\ndef get_file_path(path: str, absolute=False) -> str:\n    \"\"\"Get file path.\n    >>> get_file_path('/home/user/file.txt')\n    >>> get_file_path('/home/user/file.txt', True)\n    >>> get_file_path('/home/user/file.txt', False)\n    >>> get_file_path('/home/user/file.txt', False, True)\n    \"\"\"\n    if absolute:\n        return os.path.abspath(path)\n    elif os.path.isdir(path):\n        return os.path.join(path, os.path.basename(path))\n    else:\n        return os.path.dirname(path)\n\n\ndef is_dir(path: str) -> bool:\n    \"\"\"Check if a path is a directory.\n    >>> is_dir('/home/user/file.txt')\n    False\n    >>> is_dir('/home/user/file.txt', True)\n    True\n    >>> is_dir('/home/user/file.txt', False)\n    False\n    >>> is_dir('/home/user/file.txt', False, True)\n    True\n    \"\"\"\n    return os.path.isdir(path)\n\n\ndef is"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "# TODO: add a unique function that takes a set of unique elements as input\n    # and returns a new list of unique elements\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef is_pandas_installed():\n    \"\"\"Check if Pandas is installed\n\n    Returns\n    -------\n    bool\n        True if Pandas is installed\n    \"\"\"\n    try:\n        import pandas as pd\n        return True\n    except ImportError:\n        return False\n\n\ndef is_scipy_installed():\n    \"\"\"Check if Scipy is installed\n\n    Returns\n    -------\n    bool\n        True if Scipy is installed\n    \"\"\"\n    try:\n        import scipy as sp\n        return True\n    except ImportError:\n        return False\n\n\ndef is_sklearn_installed():\n    \"\"\"Check if scikit learn is installed\n\n    Returns\n    -------\n    bool\n        True if scikit learn is installed\n    \"\"\"\n    try:\n        import sklearn as sk\n        return True\n    except ImportError:\n        return False\n\n\ndef is_sklearn_extension_installed():\n    \"\"\"Check if scikit learn is installed and has a extension\n\n    Returns\n    -------\n    bool\n        True if scikit learn is installed and has a extension\n    \"\"\"\n    return is_sklearn_installed() and sk.externals.joblib.__version__ >= '0.12'\n\n\ndef is_sklearn_extension_installed_pre_0_12():\n    \"\"\"Check if scikit learn is installed and has a extension\n\n    Returns\n    -------\n    bool\n        True if scikit learn is installed and has a extension\n    \"\"\"\n    return is_sklearn_installed() and sk.externals.joblib.__version__ < '0.12'\n\n\ndef is_sklearn_extension_installed_pre_0_16():\n    \"\"\"Check if scikit learn is installed and has a extension\n\n    Returns\n    -------\n    bool\n        True if scikit learn is installed and has a extension\n    \"\"\"\n    return is_sklearn_installed() and"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n\n\ndef unique_items(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_items([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [(x, y) for x, y in l if not (x in seen or seen.add((x, y)))]\n\n\ndef unique_everseen(l: list):\n    \"\"\"\n    Return all unique elements, preserving order.\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    seen = set()\n    for item in l:\n        if item not in seen:\n            yield item\n            seen.add(item)\n\n\ndef unique_values(l: list):\n    \"\"\"\n    Return all unique elements, preserving order.\n    >>> unique_values('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    seen = set()\n    for item in l:\n        if item not in seen:\n            yield item\n            seen.add(item)\n\n\ndef is_sequence(obj):\n    \"\"\"\n    Is obj a sequence?\n    >>> is_sequence([])\n    False\n    >>> is_sequence('abc')\n    True\n    >>> is_sequence('')\n    False\n    \"\"\"\n    return hasattr(obj, '__getitem__')\n\n\ndef is_generator(obj):\n    \"\"\"\n    Is obj a generator?\n    >>> is_generator((x for x in range(10)))\n    True\n    >>> is_generator(10)\n    False\n    \"\"\"\n    return hasattr(obj, '__iter__') and hasattr(obj, 'next')\n\n\ndef is_string(obj):\n    \"\"\"\n    Is obj a string?\n    >>> is_string('')\n    True\n    >>> is_string(10)\n    False\n    \"\"\"\n    return isinstance(obj, str)"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\ndef sorted_unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> sorted_unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(unique(l))\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return [x for x in l if x not in l]\n\ndef sorted_unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> sorted_unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(unique_list(l))\n\ndef unique_set(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    {0, 1, 2, 3, 4, 5, 9, 123}\n    \"\"\"\n    seen = set()\n    return {x for x in l if x not in seen and not seen.add(x)}\n\ndef sorted_unique_set(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> sorted_unique_set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    {0, 1, 2, 3, 4, 5, 9, 123}\n    \"\"\"\n    return sorted(unique_set(l))\n\ndef unique_set_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_set_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5, 9, 123]"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\ndef get_unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> get_unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\ndef unique_set(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\ndef get_unique_set(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> get_unique_set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\ndef get_unique_set_from_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> get_unique_set_from_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "return sorted(frozenset(l))\n\n\ndef unique_list(l: list):\n    \"\"\"Return unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return [x for x in l if x not in set(l)]\n\n\ndef unique_dict(d: dict):\n    \"\"\"Return sorted unique elements in a dictionary\n    >>> unique_dict({5: 5, 3: 3, 5: 2, 3: 3, 3: 3, 9: 9, 0: 0, 123: 123})\n    {5: 5, 3: 3, 9: 9, 0: 0, 123: 123}\n    \"\"\"\n    return dict([(x, x) for x in d if x not in set(d)])\n\n\ndef unique_dict_values(d: dict):\n    \"\"\"Return sorted unique values in a dictionary\n    >>> unique_dict_values({5: 5, 3: 3, 5: 2, 3: 3, 3: 3, 9: 9, 0: 0, 123: 123})\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return [x for x in d.values() if x not in set(d.values()) and not x in set(d.values())]\n\n\ndef unique_list_values(l: list):\n    \"\"\"Return sorted unique values in a list\n    >>> unique_list_values([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return [x for x in l if x not in set(l) and not x in set(l)]\n\n\ndef unique_set(l: set):\n    \"\"\"Return sorted unique elements in a set\n    >>> unique_set(set([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n    {5, 3, 9, 0, 123}\n    \"\"\"\n    return set(sorted(frozenset(l)))\n\n\ndef unique_set_values(l: set):\n    \"\"\"Return sorted unique values in a set\n    >>> unique_set_"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\ndef unique_everseen(l: list):\n    \"\"\"\n    Return unique elements in a list, preserving order.\n    The order is determined by the order of the first\n    occurrence of each element.\n    >>> unique_everseen('abbbc')\n    ['a', 'b']\n    >>> unique_everseen('ccbdd')\n    ['c', 'd']\n    \"\"\"\n    return [x for x in l if x not in seen]\n\n\ndef is_int(s: str):\n    \"\"\"\n    >>> is_int('1')\n    True\n    >>> is_int('2.5')\n    True\n    >>> is_int('abc')\n    False\n    \"\"\"\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_float(s: str):\n    \"\"\"\n    >>> is_float('1')\n    False\n    >>> is_float('2.5')\n    False\n    >>> is_float('abc')\n    False\n    \"\"\"\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_numeric(s: str):\n    \"\"\"\n    >>> is_numeric('1')\n    True\n    >>> is_numeric('2.5')\n    True\n    >>> is_numeric('abc')\n    False\n    \"\"\"\n    return is_int(s) or is_float(s)"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "return sorted(list(set(l)))\n\ndef unique_values(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_values([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0]\n    \"\"\"\n    return sorted(list(set(l)))\n\ndef unique_values_index(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_values_index([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    return sorted(list(set(l)))\n\ndef unique_values_index_1(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_values_index_1([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    return sorted(list(set(l)))\n\ndef unique_values_index_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_values_index_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    return sorted(list(set(l)))\n\ndef unique_values_index_3(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_values_index_3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    return sorted(list(set(l)))\n\ndef unique_values_index_4(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_values_index_4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    return sorted(list(set(l)))\n\ndef unique_values_index_5(l: list):\n    \"\"\"Return sorted"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "return list(set(l))\n\ndef uniq(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\ndef uniq_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> uniq_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\ndef unique_in_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\ndef unique_in_list_reversed(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_list_reversed([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 0, 9, 3, 2, 5, 1, 4, 3]\n    \"\"\"\n    return sorted(set(l), reverse=True)\n\ndef unique_in_list_reversed_reversed(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_list_reversed_reversed([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 0, 9, 3, 2, 5, 1, 4, 3]\n    \"\"\"\n    return sorted(set("
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "l.sort()\n    return [x for x in l if x not in l[:x]]\n\ndef is_pandas_na(val):\n    \"\"\"Return True if a value is panda.NaT\"\"\"\n    try:\n        pd.NaT\n    except AttributeError:\n        return False\n    return val is pd.NaT\n\ndef is_numeric(val):\n    \"\"\"Return True if a value is numeric\"\"\"\n    try:\n        float(val)\n        int(val)\n    except (TypeError, ValueError):\n        return False\n    return True\n\ndef is_bool(val):\n    \"\"\"Return True if a value is a boolean\"\"\"\n    try:\n        bool(val)\n    except (TypeError, ValueError):\n        return False\n    return True\n\ndef is_list(val):\n    \"\"\"Return True if a value is a list\"\"\"\n    return isinstance(val, list)\n\ndef is_tuple(val):\n    \"\"\"Return True if a value is a tuple\"\"\"\n    return isinstance(val, tuple)\n\ndef is_dict(val):\n    \"\"\"Return True if a value is a dictionary\"\"\"\n    return isinstance(val, dict)\n\ndef is_str(val):\n    \"\"\"Return True if a value is a string\"\"\"\n    return isinstance(val, str)\n\ndef is_iterable(val):\n    \"\"\"Return True if a value is iterable\"\"\"\n    return hasattr(val, '__iter__')\n\ndef is_int(val):\n    \"\"\"Return True if a value is an integer\"\"\"\n    return isinstance(val, int)\n\ndef is_float(val):\n    \"\"\"Return True if a value is a float\"\"\"\n    return isinstance(val, float)\n\ndef is_bool_and(val):\n    \"\"\"Return True if a value is a boolean and iterable\"\"\"\n    return is_bool(val) and is_iterable(val)\n\ndef is_str_and(val):\n    \"\"\"Return True if a value is a string and iterable\"\"\"\n    return is_str(val) and is_iterable(val)\n\ndef is_iterable_and(val):\n    \"\"\"Return True if"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "seen: set = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef uniq_list(l: list):\n    \"\"\"Returns a list with duplicate elements removed\n    >>> uniq_list([1, 2, 3, 4, 3, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(l))\n\n\ndef is_list_of_ints(l: list):\n    \"\"\"Returns True if all elements of a list are ints\n    >>> is_list_of_ints([1, 2, 3])\n    True\n    >>> is_list_of_ints(['1', '2', '3'])\n    False\n    \"\"\"\n    for i in l:\n        try:\n            int(i)\n        except ValueError:\n            return False\n    return True\n\n\ndef is_list_of_strings(l: list):\n    \"\"\"Returns True if all elements of a list are strings\n    >>> is_list_of_strings([1, 2, 3])\n    True\n    >>> is_list_of_strings(['1', '2', '3'])\n    False\n    \"\"\"\n    for i in l:\n        try:\n            str(i)\n        except ValueError:\n            return False\n    return True\n\n\ndef is_list_of_strings_or_ints(l: list):\n    \"\"\"Returns True if all elements of a list are strings or ints\n    >>> is_list_of_strings_or_ints([1, 2, 3])\n    True\n    >>> is_list_of_strings_or_ints(['1', '2', 3])\n    True\n    >>> is_list_of_strings_or_ints(['1', 2, 3])\n    False\n    \"\"\"\n    return is_list_of_strings(l) or is_list_of_ints(l)\n\n\ndef is_list_of_strings_or_ints_or_none(l: list):\n    \"\"\"Returns True if all elements of a list are strings, ints, or None\n    >>> is_list_of_strings"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "if len(l) == 0:\n        return l\n    if len(l) == 1:\n        return l\n    duplicates = set(l)\n    if len(duplicates) == 1:\n        return l\n    elif len(duplicates) > 1:\n        return sorted(list(duplicates))\n    else:\n        return []\n\ndef unique_values(l: list):\n    \"\"\"Return unique values in a list\n    >>> unique_values([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    if len(l) == 0:\n        return l\n    if len(l) == 1:\n        return l\n    duplicates = set(l)\n    if len(duplicates) == 1:\n        return l\n    elif len(duplicates) > 1:\n        return sorted(list(duplicates))\n    else:\n        return []\n\ndef find_duplicates(l: list):\n    \"\"\"Return unique values in a list\n    >>> find_duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [3]\n    \"\"\"\n    if len(l) == 0:\n        return l\n    if len(l) == 1:\n        return l\n    duplicates = set(l)\n    if len(duplicates) == 1:\n        return l\n    elif len(duplicates) > 1:\n        return sorted(list(duplicates))\n    else:\n        return []\n\ndef find_duplicates_2(l: list):\n    \"\"\"Return unique values in a list\n    >>> find_duplicates_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [3]\n    \"\"\"\n    if len(l) == 0:\n        return l\n    if len(l) == 1:\n        return l\n    duplicates = set(l)\n    if len(duplicates) == 1:\n        return l\n    elif len(duplicates) > 1:\n        return sorted(list(dupl"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\ndef unique_with_counts(l: list):\n    \"\"\"Return sorted unique elements in a list with counts\n    >>> unique_with_counts([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 5), (2, 3), (3, 5), (5, 9), (9, 123)]\n    \"\"\"\n    return sorted(set(zip(l, count(l))))\n\ndef unique_with_sorted_counts(l: list):\n    \"\"\"Return sorted unique elements in a list with counts\n    >>> unique_with_sorted_counts([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 5), (2, 3), (3, 5), (5, 9), (9, 123)]\n    \"\"\"\n    return sorted(set(zip(l, sorted(count(l).items()))))\n\ndef unique_with_sorted_counts_and_values(l: list):\n    \"\"\"Return sorted unique elements in a list with counts and values\n    >>> unique_with_sorted_counts_and_values([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 5, 0), (2, 3, 3), (3, 5, 3), (5, 9, 3), (9, 123, 3)]\n    \"\"\"\n    return sorted(set(zip(l, sorted(count(l).items()), sorted(l))))\n\ndef unique_with_sorted_counts_and_values_and_counts(l: list):\n    \"\"\"Return sorted unique elements in a list with counts and values\n    >>> unique_with_sorted_counts_and_values_and_counts([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 5, 0, 3), (2, 3, 3, 3), (3, 5, 3, 3), (5, 9, 3, 3), (9, 123, 3, 3)]\n    \"\"\"\n    return sorted(set(zip(l, sorted(count(l).items()), sorted(l), sorted(count"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "return list(OrderedSet(l))\n\ndef is_unique(l: list):\n    \"\"\"Return True if all elements in l are unique\n    >>> is_unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    True\n    \"\"\"\n    return len(set(l)) == len(l)\n\ndef unique_everseen(iterable, key=None):\n    \"\"\"Return all unique elements, preserving order.\n    Unique even when keys are not hashable.\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    >>> unique_everseen('ABBCcAD', str.lower)\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in six.moves.filterfalse(seen.__contains__, iterable):\n            seen_add(element)\n        return seen\n    for element in iterable:\n        k = key(element)\n        if k not in seen:\n            seen_add(k)\n            yield element\n\ndef unique_values(func):\n    \"\"\"\n    Only allow unique elements from the result of func.\n\n    >>> unique_values(lambda x: (x, x))\n    Traceback (most recent call last):\n   ...\n    ValueError: func returned non-unique result: [1, 1]\n    \"\"\"\n    def unique_func(*args):\n        seen = set()\n        for item in func(*args):\n            k = item\n            if k not in seen:\n                seen.add(k)\n                yield item\n    return unique_func\n\n\ndef partition(predicate, iterable):\n    \"\"\"\n    Use a predicate to partition entries into false entries and true entries\n    \"\"\"\n    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    t1, t2 = itertools.tee(iterable)\n    return filterfalse(predicate, t1), filter(predicate, t2)\n\ndef powerset(iterable):\n    \"powerset"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\n\ndef is_integer(s: str):\n    \"\"\"Check if a string is an integer\n    >>> is_integer('123')\n    True\n    >>> is_integer('5.5')\n    False\n    \"\"\"\n    try:\n        int(s)\n        return True\n    except:\n        return False\n\n\ndef is_float(s: str):\n    \"\"\"Check if a string is a float\n    >>> is_float('123')\n    False\n    >>> is_float('5.5')\n    True\n    \"\"\"\n    try:\n        float(s)\n        return True\n    except:\n        return False\n\n\ndef is_number(s: str):\n    \"\"\"Check if a string is a number\n    >>> is_number('123')\n    True\n    >>> is_number('5.5')\n    False\n    \"\"\"\n    return is_integer(s) or is_float(s)\n\n\ndef is_valid_email(email: str):\n    \"\"\"Check if a string is a valid email\n    >>> is_valid_email('test@test.com')\n    True\n    >>> is_valid_email('test@test.com.br')\n    False\n    >>> is_valid_email('test@test.com.br.br')\n    True\n    \"\"\"\n    if len(email) > 255:\n        return False\n    try:\n        validate_email(email)\n    except:\n        return False\n    return True\n\n\ndef is_valid_url(url: str):\n    \"\"\"Check if a string is a valid url\n    >>> is_valid_url('http://google.com')\n    True\n    >>> is_valid_url('https://google.com')\n    True\n    >>> is_valid_url('http://google.com/')\n    True\n    >>> is_valid_url('google.com')\n    False"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "seen = set()\n    result = []\n    for e in l:\n        if e not in seen:\n            seen.add(e)\n            result.append(e)\n    return sorted(result)\n\ndef unique_with_count(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_with_count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 5, 5, 9, 9, 123]\n    \"\"\"\n    seen = set()\n    result = []\n    for e in l:\n        if e not in seen:\n            seen.add(e)\n            result.append((e, 1))\n        else:\n            result.append((e, seen[e]))\n    return sorted(result)\n\ndef is_sublist(l1: list, l2: list) -> bool:\n    \"\"\"Returns whether l1 is a sublist of l2\n    >>> is_sublist([1, 2, 3], [1, 2])\n    True\n    >>> is_sublist([1, 2, 3], [1, 2, 3])\n    False\n    >>> is_sublist([1, 2, 3], [1, 2, 4])\n    False\n    >>> is_sublist([1, 2, 3], [1, 2, 3, 4])\n    False\n    \"\"\"\n    return len(l1) >= len(l2) and all(e1 == e2 for e1, e2 in zip(l1, l2))\n\ndef is_sublist_of(l1: list, l2: list) -> bool:\n    \"\"\"Returns whether l1 is a sublist of l2\n    >>> is_sublist_of([1, 2, 3], [1, 2])\n    True\n    >>> is_sublist_of([1, 2, 3], [1, 2, 3])\n    True\n    >>> is_sublist_of([1, 2, 3], [1, 2, 4])\n    False\n    >>> is_sublist_of([1, 2, 3], [1, 2, 3, 4])\n    False\n    \"\"\"\n    return l1[:"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\ndef unique_everseen(iterable: list):\n    \"\"\"\n    Return all unique elements, preserving order.\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for element in filterfalse(seen.__contains__, iterable):\n        seen_add(element)\n        yield element\n\ndef unique_lines(file: str):\n    \"\"\"\n    Return all unique lines in a file\n    >>> unique_lines('test.txt')\n    ['test', 'test', 'test', 'test']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for line in open(file):\n        if line not in seen:\n            seen_add(line)\n            yield line\n\ndef unique_words(iterable: list):\n    \"\"\"\n    Return all unique words in a text\n    >>> unique_words('This is a test.')\n    ['This', 'is', 'a', 'test']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for word in iterable:\n        if word not in seen:\n            seen_add(word)\n            yield word\n\ndef unique_characters(iterable: list):\n    \"\"\"\n    Return all unique characters in a text\n    >>> unique_characters('This is a test.')\n    ['T', 'h', 'i','s','', 'a','', 't', 'e','s', 't', '.']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for character in iterable:\n        if character not in seen:\n            seen_add(character)\n            yield character\n\ndef uniquelines(file: str):\n    \"\"\"\n    Return all unique lines in a file\n    >>> uniquelines('test.txt')\n    ['test', 'test', 'test', 'test']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    with open(file) as f:\n        for line in f:"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef to_list(s: str, sep: str = \",\") -> list:\n    \"\"\"Convert a string to a list\n    >>> to_list(\"a,b,c\")\n    ['a', 'b', 'c']\n    >>> to_list(\"a,b,c,\")\n    ['a', 'b', 'c', '']\n    \"\"\"\n    if not s:\n        return []\n    if sep == \",\":\n        return [x.strip() for x in s.split()]\n    if sep == \"\":\n        return [x.strip() for x in s.split(\" \")]\n    return [x.strip() for x in s.split(sep)]\n\n\ndef to_list_of_ints(l: list, sep: str = \",\") -> list:\n    \"\"\"Convert a list to a list of integers\n    >>> to_list_of_ints(['a', 'b', 'c'])\n    [0, 0, 0, 1, 2]\n    >>> to_list_of_ints(['a,b,c'])\n    [0, 0, 0, 1, 2]\n    >>> to_list_of_ints(['a,b,c,'])\n    [0, 0, 0, 1, 2]\n    >>> to_list_of_ints(['a,b,c', '0'])\n    [0, 0, 0, 1, 2, 0]\n    >>> to_list_of_ints(['a,b,c', '0', '0', '0', '0', '0'])\n    [0, 0, 0, 1, 2, 0, 0, 0]\n    \"\"\"\n    return [int(x) for x in l if x!= \"\" and x!= sep]\n\n\ndef to_list_of_floats(l: list, sep: str = \",\") -> list:\n    \"\"\"Convert a list to a list of floats\n    >>> to_list_of_floats(['a', 'b', 'c'])\n    [0.0, 0.0, 0.0, 1.0, 2.0]\n    >>> to_list_of_floats"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "return sorted(list(set(l)))\n\ndef unique_with_counts(l: list):\n    \"\"\"Return unique elements in a list with counts\n    >>> unique_with_counts([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 3), (5, 2), (9, 1), (123, 1)]\n    \"\"\"\n    return sorted(list(set(l)), key=lambda x: (x[0], x[1]))\n\ndef unique_with_weights(l: list):\n    \"\"\"Return unique elements in a list with weights\n    >>> unique_with_weights([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 3), (5, 2), (9, 1), (123, 1)]\n    \"\"\"\n    return sorted(list(set(l)), key=lambda x: (x[0], x[1]))\n\ndef unique_with_weights_and_counts(l: list):\n    \"\"\"Return unique elements in a list with counts and weights\n    >>> unique_with_weights_and_counts([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 3, 3), (5, 2, 2), (9, 1, 1), (123, 1, 1)]\n    \"\"\"\n    return sorted(list(set(l)), key=lambda x: (x[0], x[1], x[2]))\n\ndef unique_with_counts_and_weights(l: list):\n    \"\"\"Return unique elements in a list with counts and weights\n    >>> unique_with_counts_and_weights([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 3, 3), (5, 2, 2), (9, 1, 1), (123, 1, 1)]\n    \"\"\"\n    return sorted(list(set(l)), key=lambda x: (x[0], x[1], x[2]))\n\ndef unique_with_weights_and_counts(l: list):\n    \"\"\"Return unique elements in a list with weights and counts\n    >>> unique_with_weights_"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "seen = set()\n    result = []\n    for item in l:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return sorted(result)\n\n\ndef uniqued(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> uniqued([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 123]\n    \"\"\"\n    return unique(l)\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 123]\n    \"\"\"\n    seen = set()\n    result = []\n    for item in l:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return sorted(result)\n\n\ndef uniqued_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> uniqued_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 123]\n    \"\"\"\n    return unique_list(l)\n\n\ndef unique_set(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    {5, 9}\n    \"\"\"\n    seen = set()\n    result = []\n    for item in l:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return set(result)\n\n\ndef uniqued_set(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> uniqued_set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    {5, 9}\n    \"\"\"\n    return unique_set(l)\n\n\ndef unique_dict(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_dict([5, 3, 5, 2, 3, 3, 9"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\ndef remove_duplicates(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> remove_duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return unique(list(set(l)))\n\ndef remove_duplicates_from_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> remove_duplicates_from_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0]\n    \"\"\"\n    return unique(list(set(l)))\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_2(n):\n    \"\"\"Check if a number is prime\n    >>> is_prime_2(2)\n    True\n    >>> is_prime_2(3)\n    True\n    >>> is_prime_2(4)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_3(n):\n    \"\"\"Check if a number is prime\n    >>> is_prime_3(2)\n    True\n    >>> is_prime_3(3)\n    True\n    >>> is_prime_3(4)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int("
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\ndef _intersect_lists(a, b):\n    \"\"\"Return the intersection of two lists as a new list.\n    >>> _intersect_lists([5, 5, 2, 5, 2], [5, 2])\n    [5, 2]\n    \"\"\"\n    return [x for x in a if x in b]\n\ndef _intersect_sets(a, b):\n    \"\"\"Return the intersection of two sets as a new set.\n    >>> _intersect_sets(set([5, 5, 2, 5, 2]), set([5, 2]))\n    set([5, 2])\n    \"\"\"\n    return set([x for x in a if x in b])\n\ndef _intersect_dicts(a, b):\n    \"\"\"Return the intersection of two dicts as a new dict.\n    >>> _intersect_dicts({5: 5, 2: 2, 3: 3, 5: 5, 2: 2}, {5: 5, 2: 2})\n    {5: 5, 2: 2}\n    \"\"\"\n    return dict((k, v) for k, v in a.items() if k in b)\n\ndef _diff_lists(a, b):\n    \"\"\"Return the difference of two lists as a new list.\n    >>> _diff_lists([5, 5, 2, 5, 2], [5, 2])\n    [5, 3, 5]\n    \"\"\"\n    return [x for x in a if x not in b]\n\ndef _diff_sets(a, b):\n    \"\"\"Return the difference of two sets as a new set.\n    >>> _diff_sets(set([5, 5, 2, 5, 2]), set([5, 2]))\n    set([5, 3])\n    \"\"\"\n    return set([x for x in a if x not in b])\n\ndef _diff_dicts(a, b):\n    \"\"\"Return the difference of two dicts as a new dict.\n    >>> _diff_dicts({5: 5, 2: 2, 3: 3, 5: 5, 2: 2}, {5: 5, 2: 2})"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\ndef unique_with_counts(l: list):\n    \"\"\"Return unique elements and counts in a list\n    >>> unique_with_counts([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    ([0, 2, 3, 5, 9, 123], [3, 3, 1, 1])\n    \"\"\"\n    return list(zip(unique(l), list(Counter(l))))\n\ndef unique_with_counts_and_distinct(l: list):\n    \"\"\"Return unique elements and counts in a list\n    >>> unique_with_counts_and_distinct([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    ([0, 2, 3, 5, 9, 123], [3, 3, 1, 1])\n    \"\"\"\n    return list(zip(unique(l), list(Counter(l))))\n\ndef unique_with_counts_and_distinct_with_duplicates(l: list):\n    \"\"\"Return unique elements and counts in a list\n    >>> unique_with_counts_and_distinct_with_duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    ([0, 2, 3, 5, 9, 123], [3, 3, 1, 1])\n    \"\"\"\n    return list(zip(unique(l), list(Counter(l))))\n\ndef unique_with_counts_and_distinct_with_duplicates_and_distinct(l: list):\n    \"\"\"Return unique elements and counts in a list\n    >>> unique_with_counts_and_distinct_with_duplicates_and_distinct([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    ([0, 2, 3, 5, 9, 123], [3, 3, 1, 1])\n    \"\"\"\n    return list(zip(unique(l), list(Counter(l))))\n\ndef unique_with_counts_and_distinct_with_duplicates_and_"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "return list(set(l))\n\ndef unique_list(l: list):\n    \"\"\"Return unique list of elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 123]\n    \"\"\"\n    return list(set(l))\n\ndef unique_list_with_count(l: list):\n    \"\"\"Return unique list of elements in a list\n    >>> unique_list_with_count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(5, 1), (3, 2), (9, 1)]\n    \"\"\"\n    return sorted(set(l), key=lambda x: (x[0], x[1]))\n\ndef unique_list_with_count_without_duplicates(l: list):\n    \"\"\"Return unique list of elements in a list\n    >>> unique_list_with_count_without_duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(5, 1), (3, 2), (9, 1)]\n    \"\"\"\n    return sorted(set(l), key=lambda x: (x[0], x[1]))\n\ndef unique_list_with_count_without_duplicates_sorted(l: list):\n    \"\"\"Return unique list of elements in a list\n    >>> unique_list_with_count_without_duplicates_sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(5, 1), (3, 2), (9, 1)]\n    \"\"\"\n    return sorted(set(l), key=lambda x: (x[0], x[1]))\n\ndef unique_list_with_count_without_duplicates_sorted_reverse(l: list):\n    \"\"\"Return unique list of elements in a list\n    >>> unique_list_with_count_without_duplicates_sorted_reverse([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(9, 1), (3, 2), (5, 1)]\n    \"\"\"\n    return sorted(set"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "l.sort()\n    i = 1\n    while i < len(l):\n        if l[i] == l[i - 1]:\n            l.remove(l[i])\n            i -= 1\n        else:\n            i += 1\n    return l\n\n\ndef is_numeric(s):\n    \"\"\"Return true if s is numeric (string)\n    >>> is_numeric(\"a\")\n    False\n    >>> is_numeric(\"10\")\n    True\n    >>> is_numeric(\"1.2\")\n    True\n    >>> is_numeric(\"1.2e3\")\n    True\n    >>> is_numeric(\"1.2e3.4\")\n    False\n    \"\"\"\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_float(s):\n    \"\"\"Return true if s is a float\n    >>> is_float(\"a\")\n    False\n    >>> is_float(\"10\")\n    False\n    >>> is_float(\"1.2\")\n    True\n    >>> is_float(\"1.2e3\")\n    True\n    >>> is_float(\"1.2e3.4\")\n    False\n    \"\"\"\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_float_or_nan(s):\n    \"\"\"Return true if s is a float or NaN\n    >>> is_float_or_nan(\"a\")\n    False\n    >>> is_float_or_nan(\"10\")\n    False\n    >>> is_float_or_nan(\"1.2\")\n    False\n    >>> is_float_or_nan(\"1.2e3\")\n    False\n    >>> is_float_or_nan(\"1.2e3.4\")\n    False\n    >>> is_float_or_nan(\"NaN\")\n    True\n    >>> is_float_or_nan(\"nan\")\n    True\n    \"\"\"\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_int(s):\n    \"\"\"Return true if s is an integer\n    >>> is_int(\"a\")"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "return sorted(list(set(l)))\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n\n\ndef unique_list_from_set(l: set):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list_from_set({5, 3, 5, 2, 3, 3, 9, 0, 123})\n    [0, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n\n\ndef unique_list_from_set_int(l: set):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list_from_set_int({5, 3, 5, 2, 3, 3, 9, 0, 123})\n    [0, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n\n\ndef unique_list_from_set_int_str(l: set):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list_from_set_int_str({5, 3, 5, 2, 3, 3, 9, 0, 123})\n    [0, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n\n\ndef unique_list_from_set_int_str_float(l: set):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list_from_set_int_str_float({5, 3, 5, 2, 3, 3, 9, 0, 123})\n    [0, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n\n\ndef unique_list_from_set_float(l: set):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list_from_set_float({5.0, 3.0, 5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0})\n    [0."
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef is_prime(n: int):\n    \"\"\"Return true if n is prime\n    >>> is_prime(5)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_factors(n: int):\n    \"\"\"Return true if n is prime or factor of prime\n    >>> is_prime_factors(5)\n    False\n    >>> is_prime_factors(2)\n    True\n    >>> is_prime_factors(3)\n    True\n    >>> is_prime_factors(4)\n    False\n    >>> is_prime_factors(5)\n    True\n    \"\"\"\n    return is_prime(n) or n in unique(prime_factors(n))\n\n\ndef prime_factors(n: int):\n    \"\"\"Return prime factors of n\n    >>> prime_factors(5)\n    {2, 3}\n    >>> prime_factors(2)\n    {2}\n    >>> prime_factors(3)\n    {3}\n    >>> prime_factors(4)\n    {2, 3}\n    >>> prime_factors(5)\n    {2, 3, 5}\n    \"\"\"\n    if n == 2:\n        return {2}\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n!= 1:\n        factors.append(n)\n    return factors\n\n\ndef is_prime_factors(n: int):\n    \"\"\"Return true if n is prime or factors of prime\n    >>> is_prime_factors(5)\n    False\n    >>> is_prime_factors(2)\n    True\n    >>> is_prime_factors(3)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "return sorted(list(set(l)))\n\n\ndef unique_values(l: list):\n    \"\"\"Return unique elements in a list, but keep the order of the elements\n    >>> unique_values([3, 3, 3, 4, 2, 9, 4, 0, 123])\n    [3, 4, 9, 0, 123]\n    \"\"\"\n    return list(set(l))\n\n\ndef unique_values_with_count(l: list):\n    \"\"\"Return unique elements in a list, but keep the order of the elements\n    and the number of times each element occurs\n    >>> unique_values_with_count([3, 3, 3, 4, 2, 9, 4, 0, 123])\n    [(3, 3), (4, 2), (9, 1), (0, 1), (123, 1)]\n    \"\"\"\n    return sorted(set(l), key=lambda x: (x[0], x[1]))\n\n\ndef unique_values_with_count_reverse(l: list):\n    \"\"\"Return unique elements in a list, but keep the order of the elements\n    and the number of times each element occurs\n    >>> unique_values_with_count_reverse([3, 3, 3, 4, 2, 9, 4, 0, 123])\n    [(0, 1), (123, 1), (4, 2), (9, 1), (3, 3)]\n    \"\"\"\n    return sorted(set(l), key=lambda x: (x[1], x[0]))\n\n\ndef unique_values_with_count_reverse_sorted(l: list):\n    \"\"\"Return unique elements in a list, but keep the order of the elements\n    and the number of times each element occurs\n    >>> unique_values_with_count_reverse_sorted([3, 3, 3, 4, 2, 9, 4, 0, 123])\n    [(0, 1), (123, 1), (4, 2), (9, 1), (3, 3)]\n    \"\"\"\n    return sorted(set(l), key=lambda x: (x[1], x[0]))\n\n\ndef unique_values_with_count_sorted(l: list):\n    \"\"\"Return unique elements in a list, but keep the order"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 3, 5, 9, 123]\n    \"\"\"\n    return [e for e, count in Counter(l).items() if count == 1]\n\n\ndef unique_dict(d: dict):\n    \"\"\"Return sorted unique elements in a dictionary\n    >>> unique_dict({5: 1, 3: 3, 5: 2, 3: 3, 9: 1})\n    {5: 2, 3: 3, 9: 1}\n    \"\"\"\n    return {k: v for k, v in Counter(d).items() if v == 1}\n\n\ndef unique_dict_with_keys(d: dict):\n    \"\"\"Return sorted unique elements in a dictionary\n    >>> unique_dict_with_keys({5: 1, 3: 3, 5: 2, 3: 3, 9: 1})\n    {5: 2, 3: 3}\n    \"\"\"\n    return {k: v for k, v in Counter(d).items() if v == 1 and k not in d}\n\n\ndef unique_dict_with_keys_and_values(d: dict):\n    \"\"\"Return sorted unique elements in a dictionary\n    >>> unique_dict_with_keys_and_values({5: 1, 3: 3, 5: 2, 3: 3, 9: 1})\n    {5: 2, 3: 3}\n    \"\"\"\n    return {k: v for k, v in Counter(d).items() if v == 1 and k not in d}\n\n\ndef unique_dict_with_keys_and_values_and_values_with_keys(d: dict):\n    \"\"\"Return sorted unique elements in a dictionary\n    >>> unique_dict_with_keys_and_values_and_values_with_keys({5: 1, 3: 3, 5: 2, 3: 3, 9: 1})\n    {5: 2, 3: 3}\n    \"\"\"\n    return {k: v for k, v in Counter(d).items() if v == 1 and k not in d}\n\n\ndef unique_dict"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# TODO: this should be optimized using sets\n    return sorted(set(l))\n\n\ndef unique_lines(fpath: str, max_lines: int = None) -> List[str]:\n    \"\"\"Return sorted unique lines in a file\n    >>> unique_lines('test.txt', 3)\n    ['1\\n', '2\\n', '3\\n']\n    >>> unique_lines('test.txt', 2)\n    ['1\\n', '2\\n']\n    >>> unique_lines('test.txt', 4)\n    ['1\\n', '2\\n', '3\\n', '4\\n']\n    >>> unique_lines('test.txt')\n    ['1\\n', '2\\n', '3\\n', '4\\n']\n    \"\"\"\n    with open(fpath, 'r') as f:\n        lines = list(islice(f, max_lines))\n        return unique(lines)\n\n\ndef unique_paths(n: int, m: int) -> int:\n    \"\"\"Return the number of unique paths in a 2D array\n    >>> unique_paths(2, 2)\n    4\n    >>> unique_paths(1, 2)\n    1\n    >>> unique_paths(2, 3)\n    6\n    >>> unique_paths(3, 4)\n    24\n    >>> unique_paths(4, 5)\n    120\n    \"\"\"\n    return math.factorial(n) / (math.factorial(m) * math.factorial(n-m))\n\n\ndef unique_words(n: int, m: int) -> int:\n    \"\"\"Return the number of unique words in a 2D array\n    >>> unique_words(2, 2)\n    4\n    >>> unique_words(1, 2)\n    1\n    >>> unique_words(2, 3)\n    6\n    >>> unique_words(3, 4)\n    24\n    >>> unique_words(4, 5)\n    120\n    >>> unique_words(5, 6)\n    720\n    \"\"\"\n    return math.factorial(n) / (math.factorial(m) * math.factorial(n-m))\n\n\ndef unique_colors"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef get_next_run_time(now, period):\n    \"\"\"Calculate next run time based on now and period\n    >>> get_next_run_time(now, '0 1 * * *')\n    datetime.datetime(2012, 1, 1, 0, 1, 0, 0)\n    >>> get_next_run_time(now, '0 0 6 * * 0')\n    datetime.datetime(2012, 1, 1, 6, 0, 0, 0)\n    >>> get_next_run_time(now, '0 0 6 1 *')\n    datetime.datetime(2012, 1, 1, 6, 0, 0, 0)\n    >>> get_next_run_time(now, '0 0 6 1 1')\n    datetime.datetime(2012, 1, 1, 6, 0, 0, 0)\n    >>> get_next_run_time(now, '0 0 6 1 1 *')\n    datetime.datetime(2012, 1, 2, 6, 0, 0, 0)\n    >>> get_next_run_time(now, '0 0 6 1 1 * *')\n    datetime.datetime(2012, 2, 1, 6, 0, 0, 0)\n    \"\"\"\n    period = period.split()\n    if period[0] == '0':\n        period[0] = '0' + period[0]\n    now = datetime.datetime.combine(now, datetime.time.min)\n    period = [int(p) for p in period]\n    period = [p for p in period if p < 24]\n    next_time = now.replace(hour=period[0], minute=period[1], second=period[2])\n    return next_time\n\n\ndef get_current_run_time(now, period):\n    \"\"\"Calculate current run time based on now and period\n    >>> get_current_run_time(now, '0 0 6 1 1')\n    datetime.datetime(2012, 1, 1, 6, 0, 0, 0)\n    \"\"\"\n    period = period.split()\n    now = datetime.datetime.combine(now,"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "return sorted(list(set(l)))\n\n\ndef group_by(iterable: Iterable, key: Callable) -> Iterable:\n    \"\"\"Group an iterable by a key function\n\n    >>> group_by([1, 2, 3], lambda x: x % 2)\n    [(0, [1, 2]), (1, [3])]\n    \"\"\"\n    return (tuple(group) for k, group in groupby(iterable, key))\n\n\ndef group_by_count(iterable: Iterable, key: Callable) -> Iterable:\n    \"\"\"Group an iterable by a key function\n\n    >>> group_by_count([1, 2, 3, 4, 5], lambda x: x % 2)\n    [(0, 3), (1, 2)]\n    \"\"\"\n    return (tuple(group) for k, group in groupby(iterable, key))\n\n\ndef group_by_sum(iterable: Iterable, key: Callable) -> Iterable:\n    \"\"\"Group an iterable by a key function\n\n    >>> group_by_sum([1, 2, 3, 4, 5], lambda x: x % 2)\n    [(0, 3), (1, 5)]\n    \"\"\"\n    return (tuple(group) for k, group in groupby(iterable, key))\n\n\ndef group_by_max(iterable: Iterable, key: Callable) -> Iterable:\n    \"\"\"Group an iterable by a key function\n\n    >>> group_by_max([1, 2, 3, 4, 5], lambda x: x % 2)\n    [(0, 4), (1, 5)]\n    \"\"\"\n    return (tuple(group) for k, group in groupby(iterable, key))\n\n\ndef group_by_min(iterable: Iterable, key: Callable) -> Iterable:\n    \"\"\"Group an iterable by a key function\n\n    >>> group_by_min([1, 2, 3, 4, 5], lambda x: x % 2)\n    [(0, 1), (1, 2)]\n    \"\"\"\n    return (tuple(group) for k, group in groupby(iterable, key))\n\n\ndef group_by_average(iter"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "return list(set(l))\n\n\ndef unique_everseen(iterable):\n    \"\"\"\n    Returns all unique elements, preserving order.\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    >>> unique_everseen('ABBCcAD', str.lower)\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for element in iterable:\n        if not element in seen:\n            seen_add(element)\n            yield element\n\n\ndef unique_values(func):\n    \"\"\"\n    Returns all values for the unique objects\n    >>> unique_values(str)\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    seen = set()\n    for element in func():\n        if not element in seen:\n            seen.add(element)\n            yield element\n\n\ndef unique_values_count(func):\n    \"\"\"\n    Returns the number of unique values\n    >>> unique_values_count(str)\n    4\n    \"\"\"\n    return len(unique_values(func))\n\n\ndef unique_count(func):\n    \"\"\"\n    Returns the number of unique objects\n    >>> unique_count(str)\n    2\n    \"\"\"\n    return len(unique_values(func))\n\n\ndef unique_index(func):\n    \"\"\"\n    Returns the index of the first unique object\n    >>> unique_index(str)\n    0\n    >>> unique_index(lambda x: x, [1, 2, 2, 3])\n    1\n    \"\"\"\n    return unique_values_count(func)\n\n\ndef unique_index_count(func):\n    \"\"\"\n    Returns the number of unique objects\n    >>> unique_index_count(str)\n    2\n    \"\"\"\n    return unique_index(func)\n\n\ndef unique_index_value(func):\n    \"\"\"\n    Returns the value of the first unique object\n    >>> unique_index_value(str)\n    'A'\n    \"\"\"\n    return next(iter(unique_values(func)))\n\n\ndef unique_index_value_count(func):\n    \"\"\"\n    Returns"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\ndef is_same_month(d1: datetime.date, d2: datetime.date):\n    \"\"\"Check if two dates are in the same month\n    >>> is_same_month(datetime.date(2014, 9, 20), datetime.date(2014, 9, 25))\n    True\n    >>> is_same_month(datetime.date(2014, 9, 20), datetime.date(2014, 10, 20))\n    False\n    >>> is_same_month(datetime.date(2014, 9, 20), datetime.date(2014, 10, 21))\n    False\n    >>> is_same_month(datetime.date(2014, 10, 20), datetime.date(2014, 9, 20))\n    False\n    \"\"\"\n    return d1.month == d2.month\n\ndef is_same_day(d1: datetime.date, d2: datetime.date):\n    \"\"\"Check if two dates are in the same day\n    >>> is_same_day(datetime.date(2014, 9, 20), datetime.date(2014, 9, 21))\n    False\n    >>> is_same_day(datetime.date(2014, 9, 20), datetime.date(2014, 9, 20))\n    True\n    >>> is_same_day(datetime.date(2014, 9, 20), datetime.date(2014, 10, 21))\n    False\n    >>> is_same_day(datetime.date(2014, 10, 20), datetime.date(2014, 9, 20))\n    False\n    >>> is_same_day(datetime.date(2014, 10, 20), datetime.date(2014, 10, 20))\n    True\n    \"\"\"\n    return d1.day == d2.day\n\ndef is_same_year(d1: datetime.date, d2: datetime.date):\n    \"\"\"Check if two dates are in the same year\n    >>> is_same_year(datetime.date(2014, 9, 20), datetime.date(2014, 9, 21))\n    False\n    >>> is_same_year(datetime.date(2014, 9, 20), datetime."
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "return list(set(l))\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\ndef unique_dict(d: dict):\n    \"\"\"Return sorted unique elements in a dict\n    >>> unique_dict({'a': 5, 'b': 3, 'a': 5, 'c': 2, 'a': 3, 'a': 3, 'd': 9, 'e': 0, 'e': 123})\n    {'a': 0, 'b': 3, 'd': 9, 'e': 123}\n    \"\"\"\n    return {k: v for k, v in d.items() if k not in d}\n\ndef unique_dict_values(d: dict):\n    \"\"\"Return sorted unique values in a dict\n    >>> unique_dict_values({'a': 5, 'b': 3, 'a': 5, 'c': 2, 'a': 3, 'a': 3, 'd': 9, 'e': 0, 'e': 123})\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return [v for v in d.values() if v not in d]\n\ndef unique_list_values(l: list):\n    \"\"\"Return sorted unique values in a list\n    >>> unique_list_values([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 9, 0, 123]\n    \"\"\"\n    return [v for v in l if v not in l]\n\ndef unique_dict_key(d: dict):\n    \"\"\"Return sorted unique keys in a dict\n    >>> unique_dict_key({'a': 5, 'b': 3, 'a': 5, 'c': 2, 'a': 3, 'a': 3, 'd': 9, 'e': 0, 'e': 123})\n    ['a', 'b', 'd', 'e']\n    \"\"\"\n    return sorted(d.keys())\n\ndef unique_list_key(l: list):"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# TODO: Can this be made faster?\n    return sorted(set(l))\n\ndef is_power_of_two(n: int):\n    \"\"\"Return true if n is a power of two\n    >>> is_power_of_two(2)\n    True\n    >>> is_power_of_two(1)\n    False\n    >>> is_power_of_two(4)\n    True\n    >>> is_power_of_two(8)\n    False\n    >>> is_power_of_two(16)\n    True\n    >>> is_power_of_two(32)\n    False\n    >>> is_power_of_two(64)\n    True\n    >>> is_power_of_two(128)\n    False\n    >>> is_power_of_two(256)\n    True\n    >>> is_power_of_two(512)\n    False\n    >>> is_power_of_two(1024)\n    True\n    >>> is_power_of_two(2048)\n    False\n    >>> is_power_of_two(4096)\n    True\n    >>> is_power_of_two(8192)\n    False\n    >>> is_power_of_two(16384)\n    True\n    >>> is_power_of_two(32768)\n    False\n    >>> is_power_of_two(65536)\n    True\n    >>> is_power_of_two(131072)\n    False\n    >>> is_power_of_two(262144)\n    True\n    >>> is_power_of_two(524288)\n    False\n    >>> is_power_of_two(1048576)\n    True\n    >>> is_power_of_two(2097152)\n    False\n    >>> is_power_of_two(4194304)\n    True\n    >>> is_power_of_two(8388608)\n    False\n    >>> is_power_of_two(16777216)\n    True\n    >>> is_power_of_two(33554432)\n    False\n    >>> is_power_of_two(67108864)\n    True\n    >>> is_power"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "seen: set = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n\ndef find_min_max(l: list):\n    \"\"\"Find min and max in a list\n    >>> find_min_max([2, 3, 4, 1, 5, 6])\n    (1, 6)\n    \"\"\"\n    return min(l), max(l)\n\ndef is_sorted(l: list):\n    \"\"\"Check if list is sorted\n    >>> is_sorted([3, 1, 2, 5, 4])\n    True\n    \"\"\"\n    return sorted(l) == l\n\ndef is_palindrome(l: list):\n    \"\"\"Check if list is palindrome\n    >>> is_palindrome([3, 1, 2, 5, 4])\n    True\n    >>> is_palindrome([1, 2, 3, 4, 5])\n    False\n    \"\"\"\n    return str(l) == str(l[::-1])\n\ndef find_middle(l: list):\n    \"\"\"Find middle element in a list\n    >>> find_middle([2, 3, 4, 1, 5, 6])\n    4\n    \"\"\"\n    return sum(l) / 2\n\ndef find_median(l: list):\n    \"\"\"Find median of a list\n    >>> find_median([2, 3, 4, 1, 5, 6])\n    3.5\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    elif len(l) % 2 == 1:\n        return l[len(l) / 2]\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\ndef find_median_of_sorted_list(l: list):\n    \"\"\"Find median of a list\n    >>> find_median_of_sorted_list([2, 3, 4, 1, 5, 6])\n    3.5\n    \"\"\"\n    return find_middle(l)\n\ndef find_median_of_sorted_list_with_"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef add_path_prefix(path: str):\n    \"\"\"Add path prefix to a path to prevent conflicts with other files.\n    >>> add_path_prefix('/foo/bar/file.txt')\n    '/foo/bar/file.txt'\n    \"\"\"\n    return os.path.normpath(os.path.join(path, '.'))\n\n\ndef file_exists(path: str):\n    \"\"\"Test whether a file exists and is readable.\n    >>> file_exists('/foo/bar/file.txt')\n    True\n    >>> file_exists('/foo/bar/file.txt')\n    True\n    >>> file_exists('/foo/bar/file.txt')\n    True\n    \"\"\"\n    return os.path.exists(path) and os.access(path, os.R_OK)\n\n\ndef file_exists_and_is_readable(path: str):\n    \"\"\"Test whether a file exists and is readable.\n    >>> file_exists_and_is_readable('/foo/bar/file.txt')\n    True\n    >>> file_exists_and_is_readable('/foo/bar/file.txt')\n    True\n    >>> file_exists_and_is_readable('/foo/bar/file.txt')\n    True\n    \"\"\"\n    return os.path.exists(path) and os.access(path, os.R_OK) and os.access(path, os.R_OK)\n\n\ndef file_exists_and_is_writable(path: str):\n    \"\"\"Test whether a file exists and is writable.\n    >>> file_exists_and_is_writable('/foo/bar/file.txt')\n    True\n    >>> file_exists_and_is_writable('/foo/bar/file.txt')\n    True\n    >>> file_exists_and_is_writable('/foo/bar/file.txt')\n    True\n    \"\"\"\n    return os.path.exists(path) and os.access(path, os.W_OK)\n\n\ndef file_exists_and_is_writable_and_readable(path"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "return sorted(set(l))\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 3, 9, 123]\n    \"\"\"\n    return sorted(set(l), key=lambda x: x)\n\n\ndef unique_dict(d: dict):\n    \"\"\"Return sorted unique elements in a dict\n    >>> unique_dict({'a': 5, 'b': 3, 'a': 5, 'c': 2, 'a': 3, 'a': 3, '9': 0, '0': 123})\n    {'a': 3, 'b': 3, 'c': 2, '0': 0, '9': 123}\n    \"\"\"\n    return {k: v for (k, v) in sorted(d.items()) if v > 0}\n\n\ndef unique_dict_keys(d: dict):\n    \"\"\"Return sorted unique keys in a dict\n    >>> unique_dict_keys({'a': 5, 'b': 3, 'a': 5, 'c': 2, 'a': 3, 'a': 3, '9': 0, '0': 123})\n    ['a', 'b', 'c', '0', '9']\n    \"\"\"\n    return sorted(d.keys())\n\n\ndef unique_dict_values(d: dict):\n    \"\"\"Return sorted unique values in a dict\n    >>> unique_dict_values({'a': 5, 'b': 3, 'a': 5, 'c': 2, 'a': 3, 'a': 3, '9': 0, '0': 123})\n    [5, 3, 2, 0]\n    \"\"\"\n    return [d[k] for k in sorted(d.keys())]\n\n\ndef unique_dict_items(d: dict):\n    \"\"\"Return sorted unique items in a dict\n    >>> unique_dict_items({'a': 5, 'b': 3, 'a': 5, 'c': 2, 'a': 3, 'a': 3, '9': 0, '0': 123})\n    [('a', 5), ('b', 3), ('c', 2), ('a', 3),"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "return list(set(l))\n\ndef unique_everseen(iterable):\n    \"\"\"\n    Returns all unique elements, preserving order.\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    >>> unique_everseen('ABBCcAD')\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    seen = set()\n    for element in iterable:\n        if element not in seen:\n            seen.add(element)\n            yield element\n\ndef unique_values(func):\n    \"\"\"\n    Returns all unique elements of a function, preserving order.\n    >>> unique_values(lambda x: 2*x)\n    [0, 2, 4]\n    \"\"\"\n    seen = set()\n    for element in func():\n        if element not in seen:\n            seen.add(element)\n            yield element\n\ndef unique_values_combinations(iterable, n):\n    \"\"\"\n    Returns all unique elements of a function, preserving order.\n    >>> unique_values_combinations([0, 1, 0], 2)\n    [[0, 0], [0, 1], [1, 0]]\n    \"\"\"\n    return [[] for _ in range(n)]\n\ndef unique_values_combinations_with_replacement(iterable, n):\n    \"\"\"\n    Returns all unique elements of a function, preserving order.\n    >>> unique_values_combinations_with_replacement([0, 1, 0], 2)\n    [[0, 0], [0, 1], [1, 0]]\n    \"\"\"\n    return [[] for _ in range(n)]\n\ndef unique_values_count(iterable):\n    \"\"\"\n    Returns all unique elements of a function, preserving order.\n    >>> unique_values_count([0, 1, 0])\n    [0, 1]\n    \"\"\"\n    seen = set()\n    for element in iterable:\n        if element not in seen:\n            seen.add(element)\n            yield element\n\ndef unique_values_count_with_replacement(iterable):\n    \"\"\"\n    Returns all unique elements of a function, preserving order.\n    >>> unique_values_"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\ndef unique_everseen(l: list):\n    \"\"\"\n    Return all unique elements in a list, preserving order.\n    >>> unique_everseen('AAAABBBCCDAABBB')\n    ['A', 'B', 'C', 'D']\n    >>> unique_everseen('ABBCcAD', str.lower)\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for element in l:\n        if element not in seen:\n            seen_add(element)\n            yield element\n\ndef to_list(x):\n    \"\"\"\n    Convert a string or list to a list.\n    >>> to_list('ABC')\n    ['A', 'B', 'C']\n    >>> to_list(['a', 'b', 'c'])\n    ['a', 'b', 'c']\n    \"\"\"\n    if isinstance(x, str):\n        return [x]\n    elif isinstance(x, list):\n        return x\n    else:\n        return list(x)\n\ndef to_str(x):\n    \"\"\"\n    Convert a list or string to a string.\n    >>> to_str('ABC')\n    'ABC'\n    >>> to_str(['a', 'b', 'c'])\n    'a, b, c'\n    \"\"\"\n    if isinstance(x, str):\n        return x\n    elif isinstance(x, list):\n        return ','.join(x)\n    else:\n        return str(x)\n\ndef to_dict(x, key_func=None):\n    \"\"\"\n    Convert a list or string to a dict.\n    >>> to_dict('ABC')\n    {'A': 'B', 'C': 'D'}\n    >>> to_dict(['a', 'b', 'c'], str.lower)\n    {'a': 'A', 'b': 'B', 'c': 'C'}\n    \"\"\"\n    if key_func is None:"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "uniques = []\n    for item in l:\n        if item not in uniques:\n            uniques.append(item)\n    return uniques\n\ndef get_subsets(l: list, size: int):\n    \"\"\"Return all subsets of the given list of size n\n    >>> get_subsets([1, 2, 3], 3)\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    \"\"\"\n    subsets = []\n    if size == 0:\n        return subsets\n    for i in range(len(l)):\n        if i == 0:\n            subsets.append([l[i]])\n        else:\n            subsets.append(get_subsets(l[:i] + l[i+1:], size - 1))\n    return subsets\n\ndef get_permutations(l: list):\n    \"\"\"Return all permutations of the given list\n    >>> get_permutations([1, 2, 3])\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    \"\"\"\n    subsets = get_subsets(l, len(l))\n    permutations = []\n    for subset in subsets:\n        permutations.append(subset)\n        for permutation in get_permutations(subset):\n            permutations.append(permutation)\n    return permutations\n\ndef get_combinations(l: list):\n    \"\"\"Return all combinations of the given list\n    >>> get_combinations([1, 2, 3])\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    \"\"\"\n    combinations = []\n    for i in range(len(l)):\n        if i == 0:\n            combinations.append([l[i]])\n        else:\n            combinations.append(get_combinations(l[:i] + l["
    }
  ]
}