{
  "timestamp": "2025-09-14T17:19:34.065573",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 159,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# write your code here\n    # https://leetcode.com/problems/eat-carrots/solution/\n    # https://leetcode.com/problems/eat-carrots/discuss/97984/Java-O(n)-dp-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96802/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-explanation\n    # https://leetcode.com/problems/eat-carrots/discuss/96803/Java-DP-solution-with-ex"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Your code here\n    #\n    #\n    return [number, remaining]"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return [int(number + need - remaining), remaining]\n\nif __name__ == '__main__':\n    number = int(input())\n    need = int(input())\n    remaining = int(input())\n    print(eat(number, need, remaining))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "res = []\n    if number > need:\n        res.append(number - need)\n        res.append(need)\n    else:\n        res.append(number)\n        res.append(remaining - number)\n    return res"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if number > 1000 or number < 0:\n        raise ValueError(\"Number must be between 0 and 1000\")\n    if need > 1000 or need < 0:\n        raise ValueError(\"Need must be between 0 and 1000\")\n    if remaining > 1000 or remaining < 0:\n        raise ValueError(\"Remaining must be between 0 and 1000\")\n\n    # if number is 0, we don't have to eat anything\n    if number == 0:\n        return [0, remaining]\n\n    # if need is 0, we don't have to eat anything\n    if need == 0:\n        return [number, 0]\n\n    # if number is greater than remaining, we can eat everything\n    if number > remaining:\n        return [number, remaining]\n\n    # if number is less than remaining, we can only eat what's left\n    return [number, remaining - number]\n\nif __name__ == \"__main__\":\n    print eat(5, 6, 10)\n    print eat(4, 8, 9)\n    print eat(1, 10, 10)\n    print eat(2, 11, 5)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return [sum(need), remaining - need]\n\n\ndef main():\n    tests = [\n        [[5, 6, 10], [11, 4]],\n        [[4, 8, 9], [12, 1]],\n        [[1, 10, 10], [11, 0]],\n        [[2, 11, 5], [7, 0]],\n        ]\n    for test in tests:\n        result = eat(test[0][0], test[0][1], test[0][2])\n        print(result)\n        assert result == test[1]\n        print(\"Passed test:\", test[0])\n    print(\"Success!\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "total_eaten = 0\n    while remaining > 0:\n        total_eaten += number\n        remaining -= number\n        number += 1\n    return [total_eaten, remaining]\n\n\ndef main():\n    \"\"\"\n    For test cases, please refer to test cases in README.md\n    \"\"\"\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))\n    print(eat(1, 10, 11))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# your code goes here\n    return [number - need, remaining]\n\n\n# print(eat(5, 6, 10))\n# print(eat(4, 8, 9))\n# print(eat(1, 10, 10))\n# print(eat(2, 11, 5))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "total = 0\n    if number > need:\n        total += number - need\n    else:\n        total += need - number\n    if remaining > need:\n        total += remaining - need\n    return [total, need - total]"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Write your code here\n    if number > need:\n        return [number - need, remaining - need]\n    else:\n        return [need - number, remaining - number]"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return [need - number, remaining - need]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return [sum(eat(number, need, remaining))]\n\n\ndef main():\n    print eat(5, 6, 10)\n    print eat(4, 8, 9)\n    print eat(1, 10, 10)\n    print eat(2, 11, 5)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# write your code here\n    # if you are not familiar with this problem, I'm not sure what you are looking for.\n    # you should use an array to represent the number of carrots that you have eaten.\n    # and an array to represent the number of carrots that you need to eat.\n    # the number of carrots left after your meals will be stored in an array.\n    # you should return an array of [ total number of eaten carrots after your meals,\n    #                                the number of carrots left after your meals ]\n    total = 0\n    left = 0\n    while total < need:\n        total += number\n        left += number\n        number -= 1\n    return [total, left]"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "total = 0\n    while total < need:\n        total += number\n    while total > need:\n        total -= number\n    return [total, remaining]\n\n\nif __name__ == '__main__':\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "total_eaten = 0\n    \n    while need > 0 and remaining > 0:\n        if number <= need:\n            total_eaten += number\n            need -= number\n            remaining -= number\n            number = 0\n        else:\n            total_eaten += number\n            number = 0\n            remaining -= number\n    return [total_eaten, remaining]"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "total = 0\n    while number > 0 and need > 0 and remaining > 0:\n        if number >= need:\n            number -= need\n            total += need\n            remaining -= need\n        else:\n            total += number\n            remaining -= number\n            number = 0\n    return [total, remaining]"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# write your code here\n    total_eaten = 0\n    remaining_eaten = 0\n\n    if number < need:\n        total_eaten = number\n    else:\n        total_eaten = need\n\n    remaining_eaten = remaining - total_eaten\n\n    return [total_eaten, remaining_eaten]\n\n\nif __name__ == '__main__':\n    print eat(5, 6, 10)\n    print eat(4, 8, 9)\n    print eat(1, 10, 10)\n    print eat(2, 11, 5)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return [sum(x) for x in zip([need, remaining], [0, number])]\n\n\ndef main():\n    \"\"\"\n    Simple Test\n    \"\"\"\n    \n    assert eat(5, 6, 10) == [11, 4]\n    assert eat(4, 8, 9) == [12, 1]\n    assert eat(1, 10, 10) == [11, 0]\n    assert eat(2, 11, 5) == [7, 0]\n    \n    assert eat(6, 10, 5) == [11, 0]\n    assert eat(5, 10, 5) == [10, 0]\n    assert eat(4, 10, 5) == [10, 0]\n    assert eat(3, 10, 5) == [10, 0]\n    assert eat(2, 10, 5) == [10, 0]\n    assert eat(1, 10, 5) == [10, 0]\n    assert eat(0, 10, 5) == [10, 0]\n    assert eat(1, 10, 0) == [10, 0]\n    assert eat(0, 10, 0) == [10, 0]\n    assert eat(1, 10, 5) == [10, 0]\n    assert eat(1, 10, 0) == [10, 0]\n    assert eat(2, 10, 5) == [10, 0]\n    assert eat(2, 10, 0) == [10, 0]\n    assert eat(3, 10, 5) == [10, 0]\n    assert eat(3, 10, 0) == [10, 0]\n    assert eat(4, 10, 5) == [10, 0]\n    assert eat(4, 10, 0) == [10, 0]\n    assert eat(5, 10, 5) == [10, 0]\n    assert eat(5, 10, 0) == [10, 0]\n    assert eat(6, 10, 5) == [10, 0]\n    assert eat(6, 10, 0) == [10, 0]\n    assert eat(7, 10, 5) == [10, 0]\n    assert eat(7, 10, 0) == [10, 0]\n    assert eat(8, 10, 5"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if number == 0:\n        return [0, remaining]\n    elif number < 0:\n        return [-1, -1]\n    elif number > 1000:\n        return [-1, -1]\n\n    if number < need:\n        return [0, remaining]\n    elif number == need:\n        return [number, 0]\n    elif number > need:\n        return [number - need, remaining]\n\nif __name__ == \"__main__\":\n    print eat(5, 6, 10)\n    print eat(4, 8, 9)\n    print eat(1, 10, 10)\n    print eat(2, 11, 5)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return [number - need, remaining]\n\n\nif __name__ == \"__main__\":\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if number > 1000:\n        return [0, 0]\n    elif number < 0:\n        return [0, 0]\n\n    if need > remaining:\n        return [0, 0]\n    else:\n        return [number + eat(number, need - remaining, remaining), remaining - need]\n\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) == 3):\n        number = int(sys.argv[1])\n        need = int(sys.argv[2])\n        print(eat(number, need, 10))\n    else:\n        print(\"Please input a number of carrots to eat, and a number of carrots you need to eat\")"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "total = 0\n    remaining = 0\n    \n    if number >= need:\n        total = number - need\n        remaining = need\n    else:\n        total = need - number\n        remaining = need\n    \n    if total <= remaining:\n        return [total, remaining]\n    else:\n        return [total, 0]\n\nif __name__ == '__main__':\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# Write your code here\n    return [need - number, remaining - number]\n\n\n\nif __name__ == '__main__':\n    import sys\n    import os\n    f = open(os.path.join(os.path.dirname(__file__), 'day_02.txt'), 'r')\n    lines = f.readlines()\n    f.close()\n\n    for line in lines:\n        number, need, remaining = [int(x) for x in line.strip().split()]\n        print(eat(number, need, remaining))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# your code goes here\n    return [0, remaining]\n\nif __name__ == '__main__':\n    solution = Solution()\n    \n    print solution.eat(5, 6, 10)\n    print solution.eat(4, 8, 9)\n    print solution.eat(1, 10, 10)\n    print solution.eat(2, 11, 5)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "assert 0 <= number <= 1000\n    assert 0 <= need <= 1000\n    assert 0 <= remaining <= 1000\n\n    if need == 0:\n        return [remaining, 0]\n    elif need < number:\n        return [remaining, 0]\n    else:\n        return [number - need, remaining - need]\n\n\nif __name__ == '__main__':\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "result = [0, remaining]\n    while number >= need:\n        if number >= need:\n            result[0] += need\n            number -= need\n        else:\n            result[0] += number\n            number = 0\n            remaining -= number\n    return result"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return [need, remaining]"
    },
    {
      "rank": 28,
      "score": 9.982086980445024,
      "candidate": "if number >= need:\n        return [number - need, 0]\n    elif number < need:\n        return [0, need - number]\n    else:\n        return [0, remaining - need]"
    },
    {
      "rank": 29,
      "score": 9.963994939209833,
      "candidate": "total_eaten = 0\n    remaining_eaten = remaining\n    \n    while number > 0:\n        if need >= remaining_eaten:\n            number -= need\n            total_eaten += need\n            remaining_eaten -= need\n        else:\n            number -= remaining_eaten\n            total_eaten += remaining_eaten\n            remaining_eaten = 0\n    return [total_eaten, remaining_eaten]"
    },
    {
      "rank": 30,
      "score": 9.930867849414408,
      "candidate": "# The following code is just for demo purposes.\n    \n    total_eaten = 0\n    remaining = remaining - number\n    if remaining > 0:\n        total_eaten = number + eat(remaining, need, remaining)\n    else:\n        total_eaten = number + eat(remaining, need, remaining)\n    return [total_eaten, remaining]\n\n\nif __name__ == '__main__':\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))"
    },
    {
      "rank": 31,
      "score": 9.907170511668092,
      "candidate": "if need >= remaining:\n        return [remaining, 0]\n    elif number >= need:\n        return [number - need, 0]\n    else:\n        return [remaining, number]"
    },
    {
      "rank": 32,
      "score": 9.890164056081243,
      "candidate": "if number >= need:\n        return [number - need, remaining]\n    else:\n        return [need - number, remaining]"
    },
    {
      "rank": 33,
      "score": 9.887111849756732,
      "candidate": "result = []\n    if number <= need:\n        result.append(number)\n        result.append(remaining - number)\n        return result\n    if number < need:\n        result.append(need - number)\n        return result\n    result.append(0)\n    return result\n\ndef main():\n    #assert(0 <= number <= 1000)\n    #assert(0 <= need <= 1000)\n    #assert(0 <= remaining <= 1000)\n\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))\n    print(eat(7, 11, 5))\n    print(eat(3, 11, 5))\n    print(eat(2, 11, 5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 9.882923312638333,
      "candidate": "if number < 0 or number > 1000:\n        raise ValueError(\"number must be in the range [0, 1000]\")\n    if need < 0 or need > 1000:\n        raise ValueError(\"need must be in the range [0, 1000]\")\n    if remaining < 0 or remaining > 1000:\n        raise ValueError(\"remaining must be in the range [0, 1000]\")\n    \n    if number < need:\n        raise ValueError(\"need must be greater than number\")\n    \n    # the total number of carrots eaten\n    total = number\n    \n    # the number of carrots left after meals\n    remaining = number\n    \n    # the number of carrots left after meals\n    left = number\n    \n    while need > 0:\n        # the number of carrots eaten after meals\n        eaten = min(need, left)\n        # the number of carrots left after meals\n        left -= eaten\n        # the total number of carrots eaten after meals\n        total += eaten\n        # the number of carrots left after meals\n        left += left\n        # the number of carrots left after meals\n        left -= eaten\n        \n        need -= eaten\n        \n    return [total, left]"
    },
    {
      "rank": 35,
      "score": 9.854153125103362,
      "candidate": "return [int(number) - need + int(remaining), int(remaining)]"
    },
    {
      "rank": 36,
      "score": 9.850496324767066,
      "candidate": "return [int(need - number), int(remaining)]\n\n\nif __name__ == '__main__':\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))"
    },
    {
      "rank": 37,
      "score": 9.849448152205355,
      "candidate": "return [need - number, remaining]"
    },
    {
      "rank": 38,
      "score": 9.845393812074393,
      "candidate": "# TODO\n    if need > remaining:\n        return [0, remaining]\n    return [number + 1, remaining - need]\n\nif __name__ == '__main__':\n    import sys\n    \n    f = open(\"0.in\", \"r\")\n    # f = sys.stdin\n    solution = f.readline()\n    f.close()\n\n    # solve\n    s = \"\".join(solution.split(\"\\n\"))\n    n, m = map(int, s.split(\" \"))\n    need = n * m\n    remaining = need - n\n    print \" \".join(map(str, eat(n, m, remaining)))"
    },
    {
      "rank": 39,
      "score": 9.769680614520107,
      "candidate": "if need <= remaining:\n        return [number, need]\n    elif need <= remaining+1:\n        return [number, remaining]\n    else:\n        return [number, 0]\n\nif __name__ == '__main__':\n    print eat(5, 6, 10)"
    },
    {
      "rank": 40,
      "score": 9.768291153593768,
      "candidate": "if need == 0:\n        return [number, 0]\n    elif number >= need:\n        return [number - need, 0]\n    else:\n        return [need, remaining - need]\n    \n\nif __name__ == '__main__':\n    import timeit\n    number = 1000\n    need = 1000\n    remaining = 1000\n    print(timeit.timeit(\"rabbit.eat(number, need, remaining)\", setup=\"from __main__ import rabbit, eat\", number=1))"
    },
    {
      "rank": 41,
      "score": 9.76713512321487,
      "candidate": "if number >= need:\n        return [number - need, remaining]\n    else:\n        return [need, remaining]"
    },
    {
      "rank": 42,
      "score": 9.760412881077356,
      "candidate": "total = 0\n    remaining = remaining - number\n    \n    while remaining > 0:\n        if number > need:\n            total += need\n            remaining -= need\n            number -= need\n            need = 0\n        else:\n            total += number\n            remaining -= number\n            number = 0\n            need = 0\n    \n    return [total, remaining]"
    },
    {
      "rank": 43,
      "score": 9.740864890863175,
      "candidate": "assert 0 <= number <= 1000\n    assert 0 <= need <= 1000\n    assert 0 <= remaining <= 1000\n\n    if number < need:\n        return [number, 0]\n\n    if need < remaining:\n        return [number, need]\n\n    return [number, remaining]\n\n\nif __name__ == \"__main__\":\n    import os\n    f = open(os.environ['PHRASE_DICT'], 'r')\n    dicts = f.readlines()\n    f.close()\n\n    print(eat(1, 2, 10))\n    print(eat(3, 4, 5))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))"
    },
    {
      "rank": 44,
      "score": 9.72780863773741,
      "candidate": "total_eaten = 0\n    remaining = remaining - number\n    if need > remaining:\n        total_eaten = number\n        remaining = 0\n    else:\n        total_eaten = number + remaining\n        remaining = need - remaining\n    return [total_eaten, remaining]"
    },
    {
      "rank": 45,
      "score": 9.718856235379514,
      "candidate": "# write your code here\n    # http://www.codewars.com/kata/54d1c8d9f3e3a2d14da4b1b/train/\n    res = []\n    if number < need:\n        res.append(number)\n        res.append(need - number)\n        return res\n    else:\n        res.append(need)\n        res.append(remaining - need)\n        return res"
    },
    {
      "rank": 46,
      "score": 9.699146693885302,
      "candidate": "if number >= need:\n        return [number - need, remaining - need]\n    else:\n        return [need - number, need - number]"
    },
    {
      "rank": 47,
      "score": 9.677440122697439,
      "candidate": "result = []\n    while need > 0 and number > 0:\n        if number >= need:\n            result.append([number, need])\n            number -= need\n            need = 0\n        else:\n            need -= number\n            number = 0\n    if number > 0:\n        result.append([number, 0])\n    if remaining > 0:\n        result.append([remaining, 0])\n    return result"
    },
    {
      "rank": 48,
      "score": 9.661538999847021,
      "candidate": "total = 0\n    remaining = remaining - number\n    if need <= remaining:\n        total = number + need\n    else:\n        total = number + remaining\n    return total, remaining"
    },
    {
      "rank": 49,
      "score": 9.58039123838868,
      "candidate": "# write your code here\n    total = 0\n    remaining = 0\n    while need > 0:\n        if number >= need:\n            total += need\n            number -= need\n            need = 0\n        else:\n            total += number\n            number = 0\n            need -= number\n    return [total, remaining]"
    },
    {
      "rank": 50,
      "score": 9.545987962239394,
      "candidate": "if number >= need:\n        return [number - need, remaining - need]\n    return [0, remaining - need]\n\n\ndef main():\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 9.493584439832787,
      "candidate": "total = 0\n    remainder = remaining\n    if need < number:\n        total = need\n        remainder = 0\n    elif need > number:\n        total = number\n        remainder = number - need\n    else:\n        total = number\n    return [total, remainder]\n\n\ndef main():\n    print eat(5, 6, 10)\n    print eat(4, 8, 9)\n    print eat(1, 10, 10)\n    print eat(2, 11, 5)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 9.47114453552205,
      "candidate": "# Write your code here\n    return [remaining, 0]"
    },
    {
      "rank": 53,
      "score": 9.446832512996986,
      "candidate": "# Write your code here\n    \n    total = 0\n    left = need\n    \n    while left > 0:\n        if left < remaining:\n            total += remaining\n            left = 0\n        else:\n            total += left\n            left -= remaining\n    \n    return [total, remaining]\n\nif __name__ == '__main__':\n    import sys\n    \n    f = open(\"0.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n    for t in xrange(testcases):\n        # construct cipher\n        need = int(f.readline().strip())\n        carrots = int(f.readline().strip())\n        carrots = [int(x) for x in f.readline().strip().split(' ')]\n        f.readline()\n        \n        # solve\n        carrots = eat(carrots, need, carrots)\n        print \"Case #{0}: {1}\".format(t + 1, carrots[0])\n    \n    f.close()"
    },
    {
      "rank": 54,
      "score": 9.389578175014488,
      "candidate": "if number <= 0 or number > 1000 or need > 1000 or need < 0 or remaining > 1000 or remaining < 0:\n        raise Exception('invalid input')\n    if number == 0:\n        return [0, 0]\n    elif need == 0:\n        return [number, 0]\n    elif need > remaining:\n        return [number, remaining]\n    else:\n        remaining -= need\n        return [number + eat(number - 1, need - 1, remaining), remaining]\n\nif __name__ == '__main__':\n    print(eat(5, 6, 10))"
    },
    {
      "rank": 55,
      "score": 9.293848149332355,
      "candidate": "# write your code here\n    if number <= 0 or number > 1000 or need <= 0 or need > 1000 or remaining <= 0 or remaining > 1000:\n        return []\n\n    # We need to know the number of carrots we have eaten in the last day\n    last_day_carrots = 0\n    for i in range(number):\n        if i > 0 and i % need == 0:\n            last_day_carrots += 1\n    last_day_carrots += number - last_day_carrots\n\n    # We need to know the number of carrots left in stock\n    remaining_carrots = remaining\n    for i in range(last_day_carrots):\n        if remaining_carrots < need:\n            remaining_carrots = 0\n        else:\n            remaining_carrots -= need\n\n    # We need to know the number of carrots we have to eat to complete the day's meals\n    total_carrots = 0\n    for i in range(number):\n        if i > 0 and i % need == 0:\n            total_carrots += 1\n    total_carrots += number - total_carrots\n\n    return [total_carrots, remaining_carrots]"
    },
    {
      "rank": 56,
      "score": 9.137541083743484,
      "candidate": "res = [0, 0]\n    while need > 0 and number > 0:\n        res[0] += number\n        res[1] += need\n        need -= 1\n        number -= 1\n    if number > 0:\n        res[0] += number\n    if need > 0:\n        res[1] += need\n    if remaining > 0:\n        res[1] -= remaining\n    return res"
    },
    {
      "rank": 57,
      "score": 9.0433598776711,
      "candidate": "# Complete this function\n    # Do not write the main method\n    # Do not write the return statement\n    # Do not write any print statements\n    # Do not write any local variables\n    \n    # Your code here\n    \n    return [number + need - remaining, remaining]"
    },
    {
      "rank": 58,
      "score": 8.926036772416769,
      "candidate": "if number > 1000 or number < 0:\n        return []\n    if need > 1000 or need < 0:\n        return []\n    if remaining > 1000 or remaining < 0:\n        return []\n\n    if number == 0 or need == 0 or remaining == 0:\n        return []\n\n    if number > need:\n        return [number, 0]\n\n    if number > remaining:\n        return [number, remaining]\n    else:\n        return [need, remaining - number]\n\nif __name__ == \"__main__\":\n    print eat(5, 6, 10)\n    print eat(4, 8, 9)\n    print eat(1, 10, 10)\n    print eat(2, 11, 5)"
    },
    {
      "rank": 59,
      "score": 8.840432207110531,
      "candidate": "if number > 0:\n        if need > remaining:\n            return [remaining, 0]\n        else:\n            return [number, need - remaining]\n    else:\n        return [0, 0]\n\n\nif __name__ == '__main__':\n    print(eat(5, 6, 10))"
    },
    {
      "rank": 60,
      "score": 8.825513124364049,
      "candidate": "total_eaten = 0\n    \n    if number < 0 or number > 1000:\n        return total_eaten, 0\n    \n    if number >= need:\n        total_eaten = number\n        remaining = 0\n        return total_eaten, remaining\n    \n    if number + need > remaining:\n        total_eaten = number + need\n        remaining = 0\n        return total_eaten, remaining\n    \n    total_eaten = number\n    remaining = need - total_eaten\n    return total_eaten, remaining"
    },
    {
      "rank": 61,
      "score": 8.712504320293393,
      "candidate": "if number <= 0:\n        return [0, 0]\n    if need <= 0:\n        return [number, 0]\n    if remaining <= 0:\n        return [number, need]\n\n    # If we have enough carrots, we're done.\n    if number >= need:\n        return [number, remaining]\n\n    # Otherwise, we need to eat some more carrots.\n    # We will always have enough if we don't have enough remaining\n    # We will always have enough if we don't have enough remaining\n    return [number + eat(number, need, remaining - 1), remaining]"
    },
    {
      "rank": 62,
      "score": 8.690127447955128,
      "candidate": "if need <= 0:\n        return [0, 0]\n    if number <= 0 or number > 1000 or need > 1000 or remaining > 1000:\n        return [0, 0]\n\n    number = number - number % need\n    remaining -= number % need\n\n    if remaining == 0:\n        return [number, 0]\n    else:\n        return [number, remaining]\n\n\nif __name__ == \"__main__\":\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))"
    },
    {
      "rank": 63,
      "score": 8.573590124227366,
      "candidate": "total = 0\n    remaining = 0\n\n    while need > 0:\n        if number < need:\n            total += number\n            need -= number\n            remaining += number\n        elif need == 0:\n            total += number\n            remaining += number\n        else:\n            total += need\n            remaining += number - need\n\n        number = 0\n        if remaining > 0:\n            number = int(remaining/2)\n        else:\n            break\n\n    return [total, remaining]\n\n\nif __name__ == '__main__':\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))"
    },
    {
      "rank": 64,
      "score": 8.53846981095683,
      "candidate": "return [sum(x) for x in zip([number], [need], [remaining])]"
    },
    {
      "rank": 65,
      "score": 8.538407301876632,
      "candidate": "if number < 0:\n        return [0, 0]\n    if number > 1000:\n        return [1000, 0]\n    if need > remaining:\n        return [number, 0]\n    if need < 0:\n        return [number, 0]\n    if need > remaining:\n        return [number, remaining]\n\n    return [number, need]"
    },
    {
      "rank": 66,
      "score": 8.5372937130375,
      "candidate": "# write your code here\n    # https://www.youtube.com/watch?v=kMwf7VrYgXU\n    # https://www.youtube.com/watch?v=6M3W5zsVV4c\n    total_eaten = 0\n    remaining = remaining - number\n    while need > remaining:\n        total_eaten += number\n        remaining = remaining - number\n        need = need - number\n    if need > remaining:\n        total_eaten += need\n    return [total_eaten, remaining]\n\nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 3):\n        print \"Usage:./a.out <number of carrots> <need> <remaining>\".format(sys.argv)\n    else:\n        print eat(int(sys.argv[1]), int(sys.argv[2]), int(sys.argv[3]))"
    },
    {
      "rank": 67,
      "score": 8.507354635051614,
      "candidate": "total = 0\n    remaining = 0\n    if number > 0:\n        if need > 0:\n            total = number + (need - remaining)\n            remaining = need\n        else:\n            total = number\n    return [total, remaining]"
    },
    {
      "rank": 68,
      "score": 8.47328431776901,
      "candidate": "res = []\n    if number >= need:\n        res.append(number - need)\n        res.append(remaining - need)\n    else:\n        res.append(0)\n        res.append(remaining)\n    return res"
    },
    {
      "rank": 69,
      "score": 8.468302246343676,
      "candidate": "if number < 0:\n        return [0, 0]\n    elif number == 0:\n        return [0, remaining]\n    elif number > need:\n        return [number, remaining]\n    else:\n        return [number, remaining - need]"
    },
    {
      "rank": 70,
      "score": 8.440935166012581,
      "candidate": "if number > 0 and need > 0 and remaining > 0:\n        if number < need:\n            return [number, remaining]\n        else:\n            return [need, remaining - need]\n    else:\n        return [0, remaining]"
    },
    {
      "rank": 71,
      "score": 8.414375891023502,
      "candidate": "if need == 0:\n        return [0, 0]\n    \n    if number >= need:\n        return [number - need, 0]\n    \n    if remaining >= need:\n        return [number, remaining - need]\n    \n    return [need, remaining]"
    },
    {
      "rank": 72,
      "score": 8.383568835637657,
      "candidate": "if number < 0 or number > 1000:\n        return []\n\n    if need < 0 or need > 1000:\n        return []\n\n    if remaining < 0 or remaining > 1000:\n        return []\n\n    if number >= need:\n        return [number - need, remaining]\n\n    if number + need < remaining:\n        return [number + need, remaining - need]\n\n    return []"
    },
    {
      "rank": 73,
      "score": 8.344323051536202,
      "candidate": "if number < 0:\n        return []\n    if number > 1000:\n        return []\n\n    if need > remaining:\n        return [remaining, 0]\n\n    if number == 0:\n        return [0, 0]\n\n    if need > remaining:\n        return [remaining, 0]\n\n    if need == remaining:\n        return [need, 0]\n\n    if need < remaining:\n        return [number - need, need]\n\n    return [number - need, remaining]"
    },
    {
      "rank": 74,
      "score": 8.322381104101357,
      "candidate": "if number >= need:\n        return [number - need, remaining - need]\n    else:\n        return [need - number, remaining - need]"
    },
    {
      "rank": 75,
      "score": 8.288278385065555,
      "candidate": "# write your code here\n    if number < need:\n        return [number, remaining]\n    if need <= remaining:\n        return [number + need, remaining - need]\n    return [need, 0]"
    },
    {
      "rank": 76,
      "score": 8.25728495026182,
      "candidate": "# return [] if there is not enough remaining carrots\n    if remaining < need:\n        return []\n\n    # your algorithm\n    total = number + need\n    remaining = remaining - need\n    return [total, remaining]"
    },
    {
      "rank": 77,
      "score": 8.145186114314646,
      "candidate": "return [number-remaining, need-remaining]"
    },
    {
      "rank": 78,
      "score": 8.133430722183471,
      "candidate": "res = []\n    while number > 0 and need > 0 and remaining > 0:\n        if number < need:\n            res.append([number, need - number])\n            number = 0\n        elif number == need:\n            res.append([number, 0])\n            number = 0\n        else:\n            res.append([number - need, need])\n            number -= need\n            need = 0\n        remaining -= 1\n    if number > 0:\n        res.append([number, 0])\n    return res"
    },
    {
      "rank": 79,
      "score": 8.099116071730853,
      "candidate": "# Write your code here\n    total = 0\n    while need > 0:\n        if need >= remaining:\n            need -= remaining\n            total += remaining\n        else:\n            total += need\n            need = 0\n    return total, need"
    },
    {
      "rank": 80,
      "score": 8.074009916028945,
      "candidate": "return [sum(x) for x in zip([number] * (need - remaining), [remaining] * (need - remaining))]"
    },
    {
      "rank": 81,
      "score": 8.060028726948914,
      "candidate": "# write your code here\n    if number > 0:\n        # return [number, remaining]\n        if number == need:\n            return [number, remaining]\n        else:\n            return [number, remaining - need]\n    else:\n        return [0, remaining]"
    },
    {
      "rank": 82,
      "score": 7.986054004050134,
      "candidate": "return [sum(x) for x in zip([need, number, remaining], [need, number, remaining])]"
    },
    {
      "rank": 83,
      "score": 7.934930212235703,
      "candidate": "total = 0\n    while number >= need:\n        total += need\n        number -= need\n        remaining -= need\n        need = 0\n    if remaining > 0:\n        total += remaining\n        need = remaining\n    return [total, need]"
    },
    {
      "rank": 84,
      "score": 7.927676526648213,
      "candidate": "res = []\n    while number > 0 and need > 0:\n        if number <= need:\n            res.append([number, need - number])\n            number = 0\n        else:\n            number -= need\n            remaining -= need\n    res.append([number, remaining])\n    return res"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "# write your code here\n    return [sum(x for x in range(1, int(need/number)+1)), need - number * (need/number)]\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert eat(5, 6, 10) == [11, 4], \"1\"\n    assert eat(4, 8, 9) == [12, 1], \"2\"\n    assert eat(1, 10, 10) == [11, 0], \"3\"\n    assert eat(2, 11, 5) == [7, 0], \"4\""
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "return [remaining, 0] if remaining <= 0 else [remaining, need]\n\n\ndef main():\n    \"\"\"\n    Sample Input:\n    5\n    6\n    10\n    \"\"\"\n    number = int(input())\n    need = int(input())\n    remaining = int(input())\n    print(eat(number, need, remaining))\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for t in range(1, t+1):\n        main()\n        print(\"Case #{}: {}\".format(t, eat_time_cost(t)))"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "if need > remaining:\n        return [number, 0]\n    elif number >= need:\n        return [number - need, remaining - need]\n    else:\n        return [number, remaining]\n\n\nclass Solution(object):\n    def eat(self, number, need, remaining):\n        \"\"\"\n        :type number: int\n        :type need: int\n        :type remaining: int\n        :rtype: List[int, int]\n        \"\"\"\n        return eat(number, need, remaining)\n\n\nif __name__ == '__main__':\n    assert Solution().eat(5, 6, 10) == [11, 4]\n    assert Solution().eat(4, 8, 9) == [12, 1]\n    assert Solution().eat(1, 10, 10) == [11, 0]\n    assert Solution().eat(2, 11, 5) == [7, 0]"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "return [eat_num(number, need, remaining) for i in range(2)]\n\ndef eat_num(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an integer representing the number of carrots you ate after your meals.\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat_num(5, 6, 10) -> 6\n    * eat_num(4, 8, 9) -> 8\n    * eat_num(1, 10, 10) -> 10\n    * eat_num(2, 11, 5) -> 7\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    return (number + need - remaining) % 1000\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert eat(5, 6, 10) == [11, 4], \"Example 1\"\n    assert eat(4, 8, 9) == [12, 1], \"Example 2\"\n    assert eat(1, 10, 10) == [11, 0], \"Example 3\"\n    assert eat(2, 11, 5) == [7, 0], \"Example 4\"\n    assert eat(3, 12, 5) == [11, 0], \"Example 5\""
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "# write your code here\n    if number < 0 or need < 0 or remaining < 0:\n        return [0, 0]\n    if number == 0:\n        return [0, remaining]\n    if need <= remaining:\n        return [number, remaining - need]\n    else:\n        return [number, 0]\n\nif __name__ == '__main__':\n    import sys\n    \n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n    for t in xrange(testcases):\n        # construct cipher\n        cipher = f.readline().strip()\n        # solve\n        solution = eat(int(f.readline().strip()), int(f.readline().strip()), int(f.readline().strip()))\n        print \"Case #%d: %d %d\" % (t + 1, solution[0], solution[1])\n    \n    f.close()"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "if number < 0 or number > 1000:\n        return []\n    if need < 0 or need > 1000:\n        return []\n    if remaining < 0 or remaining > 1000:\n        return []\n    \n    if need <= number:\n        return [number, remaining]\n    else:\n        return [number + need - remaining, remaining]\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert eat(5, 6, 10) == [11, 4], \"Example\"\n    assert eat(4, 8, 9) == [12, 1], \"Example\"\n    assert eat(1, 10, 10) == [11, 0], \"Example\"\n    assert eat(2, 11, 5) == [7, 0], \"Example\"\n    \n    print(\"Coding Complete\")"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "if number < 0 or number > 1000:\n        return -1\n    if need < 0 or need > 1000:\n        return -1\n    if remaining < 0 or remaining > 1000:\n        return -1\n\n    if number == 0:\n        return [0, 0]\n    if number == 1:\n        return [1, need]\n    if number == need:\n        return [1, need]\n    if need > number:\n        return [0, 0]\n\n    total = 0\n    while need > 0:\n        if number > need:\n            total += number\n            number -= need\n            need = 0\n        else:\n            total += number\n            number = 0\n            need -= number\n            number = 0\n    return [total, remaining - number]\n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        print(eat(int(input()), int(input()), int(input())))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "# The number of carrots you need to eat is the smallest number of carrots you can eat without using\n    # the remaining carrots\n    return [number - need, remaining - need]\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert eat(5, 6, 10) == [11, 4], \"1. Eat 5, 6, 10\"\n    assert eat(4, 8, 9) == [12, 1], \"2. Eat 4, 8, 9\"\n    assert eat(1, 10, 10) == [11, 0], \"3. Eat 1, 10, 10\"\n    assert eat(2, 11, 5) == [7, 0], \"4. Eat 2, 11, 5\""
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "return solve(number, need, remaining)\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert eat(5, 6, 10) == [11, 4], \"Example\"\n    assert eat(4, 8, 9) == [12, 1], \"Example\"\n    assert eat(1, 10, 10) == [11, 0], \"Example\"\n    assert eat(2, 11, 5) == [7, 0], \"Example\""
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "# Complete this function\n    result = []\n    if need == 0:\n        return result\n    if number == 0:\n        return result\n    if number == 1 and need == 1:\n        result.append(1)\n        result.append(remaining)\n        return result\n    if number == 1 and need > 1:\n        result.append(need)\n        result.append(remaining)\n        return result\n    if number == 2 and need == 1:\n        result.append(1)\n        result.append(remaining)\n        return result\n    if number == 2 and need > 1:\n        result.append(need)\n        result.append(remaining)\n        return result\n    if number > 2 and need == 1:\n        result.append(need)\n        result.append(remaining)\n        return result\n    if number > 2 and need > 1:\n        result.append(need)\n        result.append(remaining)\n        return result\n    return result"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "# write your code here\n    return [number - need, remaining]\n\n\ndef main():\n    # these \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert eat(5, 6, 10) == [11, 4], \"Case 1\"\n    assert eat(4, 8, 9) == [12, 1], \"Case 2\"\n    assert eat(1, 10, 10) == [11, 0], \"Case 3\"\n    assert eat(2, 11, 5) == [7, 0], \"Case 4\"\n    assert eat(1, 3, 3) == [2, 1], \"Case 5\"\n    assert eat(3, 1, 1) == [1, 1], \"Case 6\"\n    assert eat(3, 1, 1) == [3, 1], \"Case 7\"\n    assert eat(1, 1, 1) == [1, 0], \"Case 8\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 9\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 10\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 11\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 12\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 13\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 14\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 15\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 16\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 17\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 18\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 19\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 20\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 21\"\n    assert eat(1, 1, 1) == [1, 1], \"Case 22\"\n    assert eat(1, 1"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if number > 1000 or need > 1000 or remaining > 1000:\n        return [0, 0]\n\n    if number >= need:\n        return [number, 0]\n\n    if number < need:\n        return [need, remaining]\n\n    # If number is equal to need, we just need to increase the remaining\n    # number by 1 and return it\n    return [number + 1, remaining - 1]\n\n\nif __name__ == '__main__':\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = f.readlines()\n    f.close()\n\n    testcases = int(solution[0])\n    for t in xrange(testcases):\n        # construct cipher\n        # n, need, remaining = map(int, solution[1].split(' '))\n        n, need, remaining = [int(s) for s in solution[1].split(' ')]\n\n        # solve\n        result = eat(n, need, remaining)\n        print(\"Case #%d: %d\" % (t + 1, result[0]))\n        print(\"Case #%d: %d\" % (t + 1, result[1]))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# write your code here\n    result = [0, 0]\n    if number <= 0 or need <= 0 or remaining <= 0:\n        return result\n    if need >= remaining:\n        return result\n    if number >= need:\n        result[0] = need\n        result[1] = remaining - need\n        return result\n    if number >= remaining:\n        result[0] = remaining\n        result[1] = 0\n        return result\n    result[0] = number\n    result[1] = need - number\n    return result\n\n\nif __name__ == '__main__':\n    assert eat(5, 6, 10) == [11, 4], \"Case 1\"\n    assert eat(4, 8, 9) == [12, 1], \"Case 2\"\n    assert eat(1, 10, 10) == [11, 0], \"Case 3\"\n    assert eat(2, 11, 5) == [7, 0], \"Case 4\""
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# solution 1:\n    # if number < need:\n    #     return [0, need]\n    # else:\n    #     return [number, remaining]\n    # solution 2:\n    # if number < need:\n    #     return [need, 0]\n    # else:\n    #     return [number, remaining]\n    \n    # solution 3:\n    # if number < need:\n    #     return [need, 0]\n    # else:\n    #     return [number, remaining]\n    \n    # solution 4:\n    # return [0, remaining]\n    \n    # solution 5:\n    # return [number, remaining]\n    \n    # solution 6:\n    # return [need, 0]\n    \n    # solution 7:\n    # return [number, remaining]\n    \n    # solution 8:\n    # return [number, remaining]\n    \n    # solution 9:\n    # return [number, remaining]\n    \n    # solution 10:\n    # return [number, remaining]\n    \n    # solution 11:\n    # return [number, remaining]\n    \n    # solution 12:\n    # return [number, remaining]\n    \n    # solution 13:\n    # return [number, remaining]\n    \n    # solution 14:\n    # return [number, remaining]\n    \n    # solution 15:\n    # return [number, remaining]\n    \n    # solution 16:\n    # return [number, remaining]\n    \n    # solution 17:\n    # return [number, remaining]\n    \n    # solution 18:\n    # return [number, remaining]\n    \n    # solution 19:\n    # return [number, remaining]\n    \n    # solution 20:\n    # return [number, remaining]\n    \n    # solution 21:\n    # return [number, remaining]\n    \n    # solution 22:\n    # return [number, remaining]\n    \n    # solution 23:\n    # return [number, remaining]\n    \n    # solution 24:\n    # return [number, remaining]\n    \n    # solution 25:\n    # return [number, remaining]\n    \n    # solution 26:\n    # return [number, remaining]"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# write your code here\n    total_need = 0\n    total_eaten = 0\n    while need > 0:\n        if need > remaining:\n            total_eaten += remaining\n            total_need += need\n            need = 0\n            remaining = 0\n        else:\n            total_eaten += need\n            total_need += need\n            remaining -= need\n            need = 0\n    if total_need > total_eaten:\n        total_eaten = total_need\n    return [total_eaten, remaining]\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert eat(5, 6, 10) == [11, 4], \"1\"\n    assert eat(4, 8, 9) == [12, 1], \"2\"\n    assert eat(1, 10, 10) == [11, 0], \"3\"\n    assert eat(2, 11, 5) == [7, 0], \"4\"\n    assert eat(2, 3, 2) == [1, 1], \"5\"\n    assert eat(3, 4, 1) == [2, 0], \"6\"\n    assert eat(4, 5, 0) == [3, 0], \"7\"\n    assert eat(4, 5, 0) == [3, 0], \"8\"\n    assert eat(4, 5, 0) == [3, 0], \"9\"\n    assert eat(4, 5, 0) == [3, 0], \"10\"\n    assert eat(4, 5, 0) == [3, 0], \"11\"\n    assert eat(4, 5, 0) == [3, 0], \"12\"\n    assert eat(4, 5, 0) == [3, 0], \"13\"\n    assert eat(4, 5, 0) == [3, 0], \"14\"\n    assert eat(4, 5, 0) == [3, 0], \"15\"\n    assert eat(4, 5, 0) == [3, 0], \"16\"\n    assert eat(4, 5, 0) == [3, 0], \"17\"\n    assert eat(4, 5, 0) == [3,"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# Your code here\n    if number <= 0 or number > 1000:\n        return []\n    if need <= 0 or need > 1000:\n        return []\n    if remaining <= 0 or remaining > 1000:\n        return []\n    if number <= need:\n        return [number, remaining]\n    # need > number\n    # remaining > number\n    return [number, need - number]\n\nif __name__ == '__main__':\n    import sys\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = f.readline()\n    testcases = int(f.readline())\n    for t in range(testcases):\n        # construct cipher\n        number = int(f.readline())\n        need = int(f.readline())\n        remaining = int(f.readline())\n        # solve\n        r = eat(number, need, remaining)\n        print(\"Case #{}: {}\".format(t + 1, r))"
    }
  ]
}