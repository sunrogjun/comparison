{
  "timestamp": "2025-09-14T17:01:09.622106",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 118,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# TODO: Implement this function.\n    # TODO: Test your function.\n    # TODO: Add a comment.\n    # TODO: Check for the word length.\n    # TODO: Check for the first and last characters.\n\n    return \"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] not in vowels and word[i] not in vowels[::-1]:\n            return word[i]\n    return \"\"\n\n# Your code here\n\nclass Solution(object):\n    def getClosestVowel(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: str\n        \"\"\"\n        return get_closest_vowel(word)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# base case\n    if len(word) == 0:\n        return \"\"\n    \n    # find the index of the first consonant\n    for i in range(len(word)-1, -1, -1):\n        if word[i] == \" \":\n            break\n        if not (word[i] in \"aeiou\"):\n            break\n    \n    # find the index of the last consonant\n    for j in range(i, -1, -1):\n        if word[j] == \" \":\n            break\n        if not (word[j] in \"aeiou\"):\n            break\n    \n    # the closest vowel is between the two consonants\n    return word[i:j+1]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# get the first letter of the word\n    word_first_char = word[0]\n    \n    # get the last letter of the word\n    word_last_char = word[-1]\n    \n    # get the second last letter of the word\n    word_second_last_char = word[-2]\n    \n    # get the third last letter of the word\n    word_third_last_char = word[-3]\n    \n    # get the fourth last letter of the word\n    word_fourth_last_char = word[-4]\n    \n    # get the fifth last letter of the word\n    word_fifth_last_char = word[-5]\n    \n    # get the sixth last letter of the word\n    word_sixth_last_char = word[-6]\n    \n    # get the seventh last letter of the word\n    word_seventh_last_char = word[-7]\n    \n    # get the eighth last letter of the word\n    word_eighth_last_char = word[-8]\n    \n    # get the ninth last letter of the word\n    word_ninth_last_char = word[-9]\n    \n    # get the tens last letter of the word\n    word_tenth_last_char = word[-10]\n    \n    # get the last letter of the word\n    word_last_char = word[-1]\n    \n    # get the second last letter of the word\n    word_second_last_char = word[-2]\n    \n    # get the third last letter of the word\n    word_third_last_char = word[-3]\n    \n    # get the fourth last letter of the word\n    word_fourth_last_char = word[-4]\n    \n    # get the fifth last letter of the word\n    word_fifth_last_char = word[-5]\n    \n    # get the sixth last letter of the word\n    word_sixth_last_char = word[-6]\n    \n    # get the seventh last letter of the word\n    word_seventh_last_char = word[-7]\n    \n    # get the eighth last letter of the"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# This is the solution for the problem.\n    #\n    # The idea is that we are looking for the rightmost vowel. \n    # We use the following rule:\n    # - the first letter is a vowel.\n    # - the second letter is not a vowel.\n    # - the third letter is a vowel.\n    # - the forth letter is not a vowel.\n    # - the fifth letter is a vowel.\n    # - the sixth letter is not a vowel.\n    # - the seventh letter is a vowel.\n    # - the eighth letter is not a vowel.\n    # - the ninth letter is a vowel.\n    # - the tenth letter is not a vowel.\n\n    # The following variables will help us in calculating the rightmost vowel.\n    # - the first letter is a vowel\n    # - the second letter is a consonant\n    # - the third letter is a vowel\n    # - the fourth letter is a consonant\n    # - the fifth letter is a vowel\n    # - the sixth letter is a consonant\n    # - the seventh letter is a vowel\n    # - the eighth letter is a consonant\n    # - the ninth letter is a vowel\n    # - the tenth letter is a consonant\n    # - the end of the word is a consonant\n\n    # The following variables will help us in calculating the rightmost vowel.\n    # - the first letter is a vowel\n    # - the second letter is a consonant\n    # - the third letter is a vowel\n    # - the fourth letter is a consonant\n    # - the fifth letter is a vowel\n    # - the sixth letter is a consonant\n    # - the seventh letter is a vowel\n    # - the eighth letter is a consonant\n    # - the ninth letter is a vowel\n    # - the tenth letter is a consonant\n    # - the end of the word is a consonant\n\n    # We will have to check if the word starts with a vowel.\n    # If the word starts with a vowel, the first letter is the rightmost vowel.\n    # If the word starts with a consonant, the first letter is not the rightmost vowel.\n\n    # We will have to check if the word ends with a vowel.\n    # If the word ends with a vowel, the last letter is the"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "vowels = ['a','e','i','o','u']\n    word_length = len(word)\n    if word_length < 3:\n        return ''\n    for i in range(word_length - 1):\n        if word[i] not in vowels:\n            return ''\n    return word[i]\n\nif __name__ == '__main__':\n    test_cases = [\n        ('',''),\n        ('a',''),\n        ('ab',''),\n        ('abc',''),\n        ('abcd',''),\n        ('abcde',''),\n        ('abcdefghijklmnopqrstuvwxyz',''),\n        ('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz',''),\n        ('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz',''),\n        ('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "i = len(word) - 1\n    while i >= 0:\n        if word[i] in VOWELS:\n            break\n        i -= 1\n    if i == -1:\n        return \"\"\n    j = len(word) - 1\n    while j >= 0:\n        if word[j] in VOWELS:\n            break\n        j -= 1\n    if j == -1:\n        return \"\"\n    return word[j + 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    # for i in range(1000):\n    #     test_get_closest_vowel(i)\n    # print(\"passed\")"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return \"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# TODO: Implement this function.\n    return \"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# TODO: check if the word is not empty\n    # TODO: check if the word is not all upper case\n    # TODO: check if the word is not all lower case\n    # TODO: check if the word is not all numbers\n    # TODO: check if the word is not all punctuation\n    # TODO: check if the word is not all space\n    # TODO: check if the word is not all symbols\n    # TODO: check if the word is all single letters\n    # TODO: check if the word is all upper case letters\n    # TODO: check if the word is all lower case letters\n    # TODO: check if the word is all numbers\n    # TODO: check if the word is all punctuation\n    # TODO: check if the word is all space\n    # TODO: check if the word is all symbols\n    # TODO: check if the word is all single letters\n    # TODO: check if the word is all upper case letters\n    # TODO: check if the word is all lower case letters\n    # TODO: check if the word is all numbers\n    # TODO: check if the word is all punctuation\n    # TODO: check if the word is all space\n    # TODO: check if the word is all symbols\n    # TODO: check if the word is all single letters\n    # TODO: check if the word is all upper case letters\n    # TODO: check if the word is all lower case letters\n    # TODO: check if the word is all numbers\n    # TODO: check if the word is all punctuation\n    # TODO: check if the word is all space\n    # TODO: check if the word is all symbols\n    # TODO: check if the word is all single letters\n    # TODO: check if the word is all upper case letters\n    # TODO: check if the word is all lower case letters\n    # TODO: check if the word is all numbers\n    # TODO: check if the word is all punctuation\n    # TODO: check if the word is all space\n    # TODO: check if the word is all symbols\n    # TODO: check if the word is all single letters\n    # TODO: check if the word is"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "vowels = {'a':1, 'e':2, 'i':3, 'o':4, 'u':5, 'y':6}\n    vowel = \"\"\n    for char in word:\n        if char in vowels:\n            vowel += char\n        else:\n            break\n    return vowel\n\n# Your code here\n\n# Sample Input\n# \"yogurt\"\n# \"FULL\"\n# \"quick\"\n# \"ab\"\n\n# Sample Output\n# \"u\"\n# \"U\"\n# \"\"\n# \"\""
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "pass\n\n# Your WordDictionary object will be instantiated and called as such:\n# word_dictionary = WordDictionary()\n# word_dictionary.add_word(\"word\")\n# word_dictionary.search_word(\"word\")"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "vowels = \"aeiouy\"\n    word = word.upper()\n    c = word[-1:]\n    if c not in vowels:\n        return \"\"\n    i = len(word) - 2\n    while i >= 0:\n        if word[i] not in vowels:\n            break\n        i -= 1\n    if i < 0:\n        return \"\"\n    return word[i + 1:]\n\nif __name__ == \"__main__\":\n    import time\n    start = time.time()\n    print(get_closest_vowel(\"yogurt\"))\n    print(\"--- %s seconds ---\" % (time.time() - start))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if not word:\n        return \"\"\n\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n\n    if len(word) < 2:\n        return \"\"\n\n    for i in range(1, len(word) - 1):\n        if word[i - 1] not in vowels and word[i] in vowels:\n            return word[i]\n\n    return \"\"\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) < 2:\n        print \"Usage: %s <input>\" % sys.argv[0]\n        sys.exit(1)\n    \n    with open(sys.argv[1], \"r\") as f:\n        for line in f:\n            if line.strip():\n                print get_closest_vowel(line.strip())"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n    if word[0] in vowels:\n        return word[0]\n    if word[-1] in vowels:\n        return word[-1]\n    if word[-2:] in vowels:\n        return word[-2:]\n    return \"\"\n\n\ndef get_closest_vowel_case(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case insensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel_case(\"yogurt\") ==> \"y\"\n    get_closest_vowel_case(\"FULL\") ==> \"F\"\n    get_closest_vowel_case(\"quick\") ==> \"q\"\n    get_closest_vowel_case(\"ab\") ==> \"a\"\n    \"\"\"\n    if len(word) < 2:\n        return \"\"\n    if word[0].lower() in vowels:\n        return word[0].lower()\n    if word[-1].lower() in vowels:\n        return word[-1].lower()\n    if word[-2:] in vowels:\n        return word[-2].lower()\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n\n    i = len(word) - 2\n    while i >= 0:\n        if word[i] in VOWELS:\n            return word[i]\n\n        i -= 1\n\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    if len(sys.argv)!= 2:\n        print(\"Usage: {} <filename>\".format(sys.argv[0]))\n        exit(0)\n\n    with open(sys.argv[1], \"r\") as f:\n        data = f.read()\n\n    for line in data.split(\"\\n\"):\n        if line.startswith(\"#\"):\n            continue\n\n        word = line.strip()\n\n        if len(word) < 3:\n            continue\n\n        print(get_closest_vowel(word))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "vowels = \"aeiou\"\n    word_len = len(word)\n    \n    for i in range(word_len):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"abc\", \"abc\", \"\"),\n        (\"ab\", \"b\", \"a\"),\n        (\"abc\", \"a\", \"b\"),\n        (\"abcd\", \"bc\", \"d\"),\n        (\"abc\", \"cd\", \"bc\"),\n        (\"abcd\", \"bcd\", \"d\"),\n        (\"abcd\", \"c\", \"d\"),\n        (\"abc\", \"d\", \"bc\"),\n        (\"abc\", \"bc\", \"b\"),\n        (\"abc\", \"d\", \"b\"),\n        (\"abc\", \"b\", \"a\"),\n        (\"abcd\", \"c\", \"d\"),\n        (\"abcd\", \"d\", \"bc\"),\n        (\"abcd\", \"cd\", \"bc\"),\n        (\"abcd\", \"bcd\", \"d\"),\n        (\"abcd\", \"c\", \"d\"),\n        (\"abcd\", \"d\", \"bc\"),\n        (\"abcd\", \"bcd\", \"d\"),\n        (\"abc\", \"bcd\", \"d\"),\n        (\"abc\", \"d\", \"bcd\"),\n        (\"abc\", \"cd\", \"bcd\"),\n        (\"abc\", \"d\", \"bcd\"),\n        (\"abc\", \"b\", \"a\"),\n        (\"abcd\", \"c\", \"d\"),\n        (\"abcd\", \"d\", \"bc\"),\n        (\"abcd\", \"cd\", \"bc\"),\n        (\"abcd\", \"bcd\", \"d\"),\n        (\"abcd\", \"c\", \"d\"),\n        (\"abcd\", \"d\", \"bc\"),\n        (\"abcd\", \"bcd\", \"d\"),\n        (\"abcd\", \"c\", \"d\"),\n        (\"abcd\", \"d\", \"bc\"),\n        (\"abcd\", \"bcd\", \"d\"),\n        (\"abcd\", \"c\", \"d\"),\n        (\"abcd\", \"d\", \"bc\"),\n        (\"abcd\", \"bcd\", \"d\"),\n        (\"abcd\", \"c\","
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "word = word.lower()\n    if word.endswith(\"a\") or word.endswith(\"e\") or word.endswith(\"i\") or word.endswith(\"o\") or word.endswith(\"u\"):\n        return \"\"\n\n    if len(word) == 1:\n        return \"\"\n\n    vowels = set(\"aeiou\")\n    word_len = len(word)\n    while word_len > 0:\n        vowel = word[word_len-1]\n        if vowel in vowels:\n            return word[:word_len-1]\n        word_len -= 1\n    return \"\"\n\n\ndef main():\n    word = \"yogurt\"\n    print(get_closest_vowel(word))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# TODO:\n    # Implement this function\n    pass\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "vowels = \"aeiou\"\n    word = word.upper()\n    left = len(word) - 1\n    right = 0\n\n    while right < len(word):\n        if word[right] in vowels:\n            return word[right]\n        else:\n            right += 1\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# base case: no vowel\n    if len(word) == 1:\n        return \"\"\n    # base case: last letter is vowel\n    if word[-1] in VOWELS:\n        return word[-1]\n    # base case: last letter is consonant\n    if word[-1] not in VOWELS:\n        return \"\"\n    # base case: last letter is neither vowel nor consonant\n    # find the next vowel\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in VOWELS:\n            return word[i]\n    return \"\"\n\n# test cases\n# get_closest_vowel(\"yogurt\") ==> \"u\"\n# get_closest_vowel(\"FULL\") ==> \"U\"\n# get_closest_vowel(\"quick\") ==> \"\"\n# get_closest_vowel(\"ab\") ==> \"\"\n# get_closest_vowel(\"a\") ==> \"\"\n# get_closest_vowel(\"abcd\") ==> \"\"\n# get_closest_vowel(\"\") ==> \"\""
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "for i in range(len(word) - 1):\n        if word[i] in \"aeiou\":\n            for j in range(i + 1, len(word)):\n                if word[j] in \"aeiou\":\n                    return word[j]\n\n    return \"\"\n\n\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n\n\nif __name__ == \"__main__\":\n    test_get_closest_vowel()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def get_closest_vowel(word):\n        for i in range(len(word)):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n    return get_closest_vowel(word)\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "start = end = 0\n    for i, c in enumerate(word):\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\":\n            end = i\n            break\n    if end == 0:\n        return \"\"\n    start = end - 1\n    for i, c in enumerate(word[start:]):\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\":\n            return word[start:i+1]\n    return \"\""
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "if not word:\n        return \"\"\n    \n    if len(word) == 1:\n        return word\n    \n    for i in range(len(word) - 1):\n        if word[i] in \"aeiouAEIOU\":\n            return word[i + 1]\n    \n    return \"\"\n\n\nclass Solution(object):\n    def findClosestVowel(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: str\n        \"\"\"\n        return get_closest_vowel(word)\n\n\nif __name__ == \"__main__\":\n    assert Solution().findClosestVowel(\"yogurt\") == \"u\"\n    assert Solution().findClosestVowel(\"FULL\") == \"U\"\n    assert Solution().findClosestVowel(\"quick\") == \"\"\n    assert Solution().findClosestVowel(\"ab\") == \"\""
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# https://www.youtube.com/watch?v=0p8u_KHqGdM\n    # https://www.youtube.com/watch?v=d5l4_Vw7o-8\n    \n    if len(word) < 2:\n        return \"\"\n    \n    # Remove the last character if it's a vowel\n    if word[-1] in vowels:\n        word = word[:-1]\n    \n    # Remove the first character if it's a consonant\n    if word[0] in consonants:\n        word = word[1:]\n    \n    # Remove the first and last character if they're a vowel\n    if word[0] in vowels and word[-1] in vowels:\n        word = word[1:-1]\n    \n    # Remove the first character if it's a vowel\n    if word[0] in vowels:\n        word = word[1:]\n    \n    # Remove the last character if it's a vowel\n    if word[-1] in vowels:\n        word = word[:-1]\n    \n    # Remove the first character if it's a vowel\n    if word[0] in vowels:\n        word = word[1:]\n    \n    # Remove the last character if it's a vowel\n    if word[-1] in vowels:\n        word = word[:-1]\n    \n    # Remove the first character if it's a vowel\n    if word[0] in vowels:\n        word = word[1:]\n    \n    # Remove the last character if it's a vowel\n    if word[-1] in vowels:\n        word = word[:-1]\n    \n    # Remove the first character if it's a vowel\n    if word[0] in vowels:\n        word = word[1:]\n    \n    # Remove the last character if it's a vowel\n    if word[-1] in vowels:\n        word = word[:-1]\n    \n    # Remove the first character if it's a vowel\n    if word[0] in vowels:\n        word = word[1:]\n    \n    # Remove the last character if it's a vowel\n    if word[-1] in vowels"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "vowels = \"AEIOU\"\n    vowel_len = len(vowels)\n    word = word.upper()\n    for i in range(len(word)-vowel_len+1):\n        if i < len(word) and word[i] in vowels:\n            return word[i]\n    return \"\"\n\nif __name__ == \"__main__\":\n    word = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    print(get_closest_vowel(word))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# TODO: Write code\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print(\"Please enter a word to test\")\n    else:\n        test_word = sys.argv[1]\n        print(\"closest vowel for\", test_word, \"is\", get_closest_vowel(test_word))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "#find the first consonant from right side\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in \"aeiouy\":\n            break\n\n    #find the first vowel from left side\n    for i in range(len(word)):\n        if word[i] in \"aeiouy\":\n            break\n    \n    #find the closest vowel\n    if i < len(word) - 1:\n        return word[i + 1]\n    elif i == len(word) - 1:\n        return \"\"\n    else:\n        return \"\"\n\nif __name__ == \"__main__\":\n    word = \"yogurt\"\n    print(get_closest_vowel(word))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "#print(\"Entering get_closest_vowel\")\n    #print(word)\n    #print(len(word))\n    #print(word[::-1])\n    #print(word[1:])\n    #print(word[2:])\n    #print(word[-2:])\n    #print(word[-3:])\n    #print(word[-4:])\n    #print(word[-5:])\n    #print(word[-6:])\n    #print(word[-7:])\n    #print(word[-8:])\n    #print(word[-9:])\n    #print(word[-10:])\n    #print(word[-11:])\n    #print(word[-12:])\n    #print(word[-13:])\n    #print(word[-14:])\n    #print(word[-15:])\n    #print(word[-16:])\n    #print(word[-17:])\n    #print(word[-18:])\n    #print(word[-19:])\n    #print(word[-20:])\n    #print(word[-21:])\n    #print(word[-22:])\n    #print(word[-23:])\n    #print(word[-24:])\n    #print(word[-25:])\n    #print(word[-26:])\n    #print(word[-27:])\n    #print(word[-28:])\n    #print(word[-29:])\n    #print(word[-30:])\n    #print(word[-31:])\n    #print(word[-32:])\n    #print(word[-33:])\n    #print(word[-34:])\n    #print(word[-35:])\n    #print(word[-36:])\n    #print(word[-37:])\n    #print(word[-38:])\n    #print(word[-39:])\n    #print(word[-40:])\n    #print(word[-41:])\n    #print(word[-42"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n            if word[i - 1] in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n                continue\n            elif word[i + 1] in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n                return word[i]\n            elif word[i - 1] in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n                return word[i + 1]\n            elif word[i + 1] in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n                return word[i]\n            else:\n                return \"\"\n    return \"\"\n\n#test cases\nassert get_closest_vowel(\"yogurt\") == \"u\", \"yogurt\"\nassert get_closest_vowel(\"FULL\") == \"U\", \"FULL\"\nassert get_closest_vowel(\"quick\") == \"\", \"quick\"\nassert get_closest_vowel(\"ab\") == \"\", \"ab\"\n\n# your code here"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "# Your code here\n    start = len(word) - 1\n    end = -1\n    while start >= 0:\n        if word[start] in VOWELS:\n            end = start\n            break\n        start -= 1\n    if end == -1:\n        return \"\"\n    while end < len(word) - 1 and word[end + 1] in VOWELS:\n        end += 1\n    return word[end:]"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "if not word:\n        return \"\"\n    \n    cons = 0\n    vowel = \"\"\n    for i, c in enumerate(word):\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\":\n            cons += 1\n        elif c == \"A\" or c == \"E\" or c == \"I\" or c == \"O\" or c == \"U\":\n            cons += 1\n        elif c == \"y\":\n            cons += 1\n        elif c == \"Y\":\n            cons += 1\n        elif c == \"c\" or c == \"f\" or c == \"g\" or c == \"k\" or c == \"q\" or c == \"s\" or c == \"z\":\n            cons += 1\n        elif c == \"C\" or c == \"F\" or c == \"G\" or c == \"K\" or c == \"Q\" or c == \"S\" or c == \"Z\":\n            cons += 1\n        elif c == \"w\":\n            cons += 1\n        elif c == \"W\":\n            cons += 1\n        elif c == \"h\":\n            cons += 1\n        elif c == \"H\":\n            cons += 1\n        elif c == \"d\":\n            cons += 1\n        elif c == \"D\":\n            cons += 1\n        elif c == \"t\":\n            cons += 1\n        elif c == \"T\":\n            cons += 1\n        elif c == \"n\":\n            cons += 1\n        elif c == \"N\":\n            cons += 1\n        elif c == \"l\":\n            cons += 1\n        elif c == \"L\":\n            cons += 1\n        elif c == \"r\":\n            cons += 1\n        elif c == \"R\":\n            cons += 1\n        elif c == \"m\":\n            cons += 1\n        elif c == \"M\":\n            cons += 1\n        elif c == \"b\":\n            cons += 1\n        elif c == \"B\":\n            cons += 1\n        elif c == \"v\":\n            cons += 1\n        elif c == \"V"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "for i in range(len(word)-1):\n        if word[i] in 'aeiou':\n            for j in range(i+1, len(word)):\n                if word[j] not in 'aeiou':\n                    if word[i] == word[j]:\n                        return word[i]\n                    break\n    return \"\""
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "return \"\"\n\nif __name__ == '__main__':\n    import timeit\n    print(timeit.timeit(\"get_closest_vowel('yogurt')\", setup=\"from __main__ import get_closest_vowel\", number=1))\n    print(timeit.timeit(\"get_closest_vowel('FULL')\", setup=\"from __main__ import get_closest_vowel\", number=1))\n    print(timeit.timeit(\"get_closest_vowel('quick')\", setup=\"from __main__ import get_closest_vowel\", number=1))\n    print(timeit.timeit(\"get_closest_vowel('ab')\", setup=\"from __main__ import get_closest_vowel\", number=1))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "# TODO\n    return \"\""
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "for i in range(len(word)-1):\n        if word[i] == word[i+1]:\n            continue\n        if word[i] in VOWELS:\n            return word[i]\n        if word[i] in CONSONANTS:\n            break\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "# This is the best way to solve this problem.\n    # The time complexity of this method is O(n) where n is the length of the string.\n    # The space complexity of this method is O(1).\n    # The space complexity of the following solution is O(n).\n    # If the given string is empty, the return value is also empty.\n    # If the given string is not empty, we do the following:\n    # 1. Get the longest prefix of the string that is a vowel.\n    # 2. Get the first consonant that is in the middle of the prefix.\n    # 3. If the consonant is also a vowel, return the longest prefix that is a vowel.\n    # 4. Otherwise, return empty string.\n    if not word:\n        return \"\"\n    vowel_prefix = \"\"\n    consonant_index = 0\n    for i in range(len(word)):\n        if word[i] not in \"aeiou\":\n            break\n        if word[i] in \"aeiou\":\n            vowel_prefix = word[:i+1]\n            break\n        consonant_index += 1\n    if consonant_index == len(word):\n        return \"\"\n    consonant_index = len(word) - consonant_index\n    consonant_index += 1  # We have to add 1 to the index because we want to consider the first character.\n    if consonant_index > len(vowel_prefix):\n        return \"\"\n    return word[:consonant_index]\n\n\n# This is the solution that was written by myself.\n# The time complexity of this solution is O(n) where n is the length of the string.\n# The space complexity of this solution is O(1).\n# If the given string is empty, the return value is also empty.\n# If the given string is not empty, we do the following:\n# 1. Get the longest prefix of the string that is a vowel.\n# 2. Get the first consonant that is in the middle of the prefix.\n# 3. If the consonant is also a vowel, return the longest prefix that is a vowel.\n# 4. Otherwise, return empty string.\n# Note that we use the same approach as"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "vowels = 'aeiou'\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n        if word[i] == word[len(word)-1]:\n            return ''\n    return ''\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "vowels = \"aeiou\"\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n\n\nif __name__ == '__main__':\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\""
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "if not word:\n        return \"\"\n    \n    vowel = \"\"\n    for i in range(len(word)):\n        if word[i] in VOWELS:\n            vowel = word[i]\n            break\n    \n    return vowel\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "# Your code here\n    \n    if not word:\n        return \"\"\n    \n    vowel = \"\"\n    for i in range(len(word)):\n        if word[i] in VOWELS:\n            vowel = word[i]\n        if word[i] in CONSONANTS:\n            break\n    \n    if vowel:\n        return vowel\n    else:\n        return \"\"\n\n\nif __name__ == \"__main__\":\n    print get_closest_vowel(\"yogurt\")\n    print get_closest_vowel(\"FULL\")\n    print get_closest_vowel(\"quick\")\n    print get_closest_vowel(\"ab\")"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "for i in range(len(word) - 1):\n        if word[i] in VOWELS and word[i + 1] not in VOWELS:\n            return word[i]\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\""
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n    \n    for i in range(len(word)):\n        if word[i] in VOWELS:\n            return word[i]\n        \n    return \"\""
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n\n    if len(word) < 2:\n        return \"\"\n\n    # move to the end of the word\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n\n    # move to the beginning of the word\n    for i in range(1, len(word)):\n        if word[i] in vowels:\n            return word[i]\n\n    return \"\""
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# TODO\n    return \"\""
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "if not word:\n        return \"\"\n\n    vowels = \"aeiouy\"\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] in vowels:\n            return word[i]\n        i -= 1\n    return \"\"\n\n\nif __name__ == '__main__':\n    import time\n\n    start = time.time()\n    print get_closest_vowel(\"yogurt\")\n    print get_closest_vowel(\"FULL\")\n    print get_closest_vowel(\"quick\")\n    print get_closest_vowel(\"ab\")\n    print \"elapsed time: %s\" % (time.time() - start)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "# Your code here\n    if not word:\n        return \"\"\n    word = word.lower()\n    vowels = \"aeiou\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i:i+2] in vowels:\n            return word[i]\n    return \"\""
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "# Find the index of the first consonant from the right\n    i = len(word) - 1\n    while i >= 0 and word[i] not in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n        i -= 1\n    \n    # Find the index of the first vowel from the right\n    while i >= 0 and word[i] in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n        i -= 1\n    \n    # If we didn't find any vowel, return empty string\n    if i < 0:\n        return \"\"\n    \n    # Find the index of the first consonant from the left\n    j = 0\n    while j < len(word) and word[j] not in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n        j += 1\n    \n    # Find the index of the first vowel from the left\n    while j < len(word) and word[j] in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n        j += 1\n    \n    # If we didn't find any vowel, return empty string\n    if j >= len(word):\n        return \"\"\n    \n    return word[j + 1:i]\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# return the last letter that is a vowel\n    # for example, if word is \"aabbcc\", then return \"b\"\n    # since the last letter is a vowel, we don't need to check the second last letter\n    # the word \"abcc\" has the last letter as \"b\"\n    # and the word \"abbcc\" has the last letter as \"b\"\n    return word[-1]\n\nif __name__ == \"__main__\":\n    print get_closest_vowel(\"abcc\")"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "vowels = set(\"AEIOUaeiou\")\n    for i in range(len(word)):\n        if word[i] not in vowels:\n            return word[i]\n    return \"\"\n\n\nif __name__ == '__main__':\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ac\") == \"\"\n    assert get_closest_vowel(\"c\") == \"\"\n    assert get_closest_vowel(\"d\") == \"\"\n    assert get_closest_vowel(\"e\") == \"\"\n    assert get_closest_vowel(\"f\") == \"\"\n    assert get_closest_vowel(\"g\") == \"\"\n    assert get_closest_vowel(\"h\") == \"\"\n    assert get_closest_vowel(\"i\") == \"\"\n    assert get_closest_vowel(\"j\") == \"\"\n    assert get_closest_vowel(\"k\") == \"\"\n    assert get_closest_vowel(\"l\") == \"\"\n    assert get_closest_vowel(\"m\") == \"\"\n    assert get_closest_vowel(\"n\") == \"\"\n    assert get_closest_vowel(\"o\") == \"\"\n    assert get_closest_vowel(\"p\") == \"\"\n    assert get_closest_vowel(\"q\") == \"\"\n    assert get_closest_vowel(\"r\") == \"\"\n    assert get_closest_vowel(\"s\") == \"\"\n    assert get_closest_vowel(\"t\") == \"\"\n    assert get_closest_vowel(\"u\") == \"\"\n    assert get_closest_vowel(\"v\") == \"\"\n    assert get_closest_vowel(\"w\") == \"\""
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "if not word: return ''\n\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    c = word[-1]\n    if c in consonants:\n        return ''\n    \n    word = word[:len(word)-1]\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n\n    return ''"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "# Your code here\n    if len(word) < 2:\n        return \"\"\n\n    word = word.lower()\n    c_index = 0\n    for c_index, c in enumerate(word):\n        if c == \"c\":\n            break\n    else:\n        return \"\"\n\n    for i in range(c_index, len(word) - 1):\n        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n            if word[i + 1] == \"a\" or word[i + 1] == \"e\" or word[i + 1] == \"i\" or word[i + 1] == \"o\" or word[i + 1] == \"u\":\n                return word[i]\n        else:\n            return \"\"\n    return \"\""
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "word = word.upper()\n\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in VOWELS:\n            return word[i]\n\n    return \"\"\n\n\nif __name__ == '__main__':\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"yogurt\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"FULL\"\n    assert get_closest_vowel(\"quick\") == \"\", \"quick\"\n    assert get_closest_vowel(\"ab\") == \"\", \"ab\""
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "# return \"\" if there is no vowel in the word\n    return \"\"\n\n\n# Testing\nif __name__ == \"__main__\":\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"yogurt\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"FULL\"\n    assert get_closest_vowel(\"quick\") == \"\", \"quick\"\n    assert get_closest_vowel(\"ab\") == \"\", \"ab\""
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# TODO\n    return \"\"\n\n\nif __name__ == '__main__':\n    import time\n\n    start = time.time()\n    print(get_closest_vowel(\"yogurt\"))\n    print(\"--- %s seconds ---\" % (time.time() - start))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "if len(word) <= 2:\n        return \"\"\n    if word[-1] in \"aeiou\":\n        return word[-1]\n    if word[0] in \"aeiou\":\n        return word[0]\n    if word[-2] in \"aeiou\":\n        return word[-2]\n    if word[-3] in \"aeiou\":\n        return word[-3]\n    return \"\"\n\ndef test():\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"yogurt\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"FULL\"\n    assert get_closest_vowel(\"quick\") == \"\", \"quick\"\n    assert get_closest_vowel(\"ab\") == \"\", \"ab\"\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "if len(word) == 0:\n        return \"\"\n\n    if len(word) == 1:\n        return word\n\n    if word[-1] == \"s\":\n        return word[:-1]\n\n    if word[0] == \"s\":\n        return word[1:]\n\n    for i in range(len(word) - 1):\n        if word[i] == \"e\" and word[i+1] == \"i\":\n            return word[i+2:]\n        elif word[i] == \"e\" and word[i+1] == \"y\":\n            return word[i+2:]\n        elif word[i] == \"e\" and word[i+1] == \"u\":\n            return word[i+2:]\n        elif word[i] == \"a\" and word[i+1] == \"i\":\n            return word[i+2:]\n        elif word[i] == \"a\" and word[i+1] == \"u\":\n            return word[i+2:]\n        elif word[i] == \"a\" and word[i+1] == \"y\":\n            return word[i+2:]\n        elif word[i] == \"o\" and word[i+1] == \"g\":\n            return word[i+2:]\n        elif word[i] == \"o\" and word[i+1] == \"u\":\n            return word[i+2:]\n        elif word[i] == \"o\" and word[i+1] == \"y\":\n            return word[i+2:]\n        elif word[i] == \"u\" and word[i+1] == \"g\":\n            return word[i+2:]\n        elif word[i] == \"u\" and word[i+1] == \"y\":\n            return word[i+2:]\n        elif word[i] == \"y\" and word[i+1] == \"e\":\n            return word[i+2:]\n        elif word[i] == \"y\" and word[i+1] == \"i\":\n            return word[i+2:]\n        elif word[i] == \"y\" and word"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "if not word:\n        return \"\"\n    \n    word_len = len(word)\n    for i in range(word_len - 1):\n        if word[i] in vowels:\n            if word[i + 1] in consonants and word[i + 2] in consonants:\n                return word[i + 1]\n            elif word[i + 1] in consonants and word[i + 2] not in consonants:\n                return word[i + 1]\n            elif word[i + 1] not in consonants and word[i + 2] not in consonants:\n                return word[i + 1]\n            elif word[i + 1] not in consonants and word[i + 2] in consonants:\n                return word[i + 2]\n            else:\n                return \"\"\n    return \"\""
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "if len(word) < 3:\n        return \"\"\n    \n    for i in range(len(word)):\n        if word[i] in \"aeiou\":\n            if i < len(word)-1 and word[i+1] not in \"aeiou\":\n                return word[i+1]\n            else:\n                return \"\"\n    return \"\"\n\nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print(\"Please run this script with a test string as an argument.\")\n    else:\n        print(\"The closest vowel is\", get_closest_vowel(sys.argv[1]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# TODO: Implement your solution here.\n    # TODO: Test cases\n    \n    vowel_count = 0\n    for letter in word[::-1]:\n        if letter in \"aeiouAEIOU\":\n            vowel_count += 1\n    return \"\" if vowel_count == 0 else word[vowel_count:len(word)]\n\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    word = word.lower()\n    word = word[::-1]\n    for i, c in enumerate(word):\n        if c in vowels:\n            return word[i:]\n    return ''\n\nif __name__ == '__main__':\n    assert get_closest_vowel(\"yogurt\") == 'u'\n    assert get_closest_vowel(\"FULL\") == 'U'\n    assert get_closest_vowel(\"quick\") == ''\n    assert get_closest_vowel(\"ab\") == ''"
    },
    {
      "rank": 63,
      "score": 1.5,
      "candidate": "# Your code here\n    vowel_list = []\n    for i in range(len(word) - 1):\n        if word[i] in \"aeiou\" and word[i+1] not in \"aeiou\":\n            vowel_list.append(word[i+1])\n    if len(vowel_list) == 0:\n        return \"\"\n    return min(vowel_list, key=lambda x: abs(ord(x) - ord(\"a\")))\n\ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending don't count. Return empty string if you didn't\n    find any consonant met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_consonant(\"yogurt\") ==> \"y\"\n    get_closest_consonant(\"FULL\") ==> \"f\"\n    get_closest_consonant(\"quick\") ==> \"q\"\n    get_closest_consonant(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    consonant_list = []\n    for i in range(len(word) - 1):\n        if word[i] in \"aeiou\" and word[i+1] not in \"aeiou\":\n            consonant_list.append(word[i+1])\n    if len(consonant_list) == 0:\n        return \"\"\n    return min(consonant_list, key=lambda x: abs(ord(x) - ord(\"a\")))\n\nif __name__ == \"__main__\":\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n    \n    # find the first consonant\n    i = len(word) - 2\n    while i >= 0 and not word[i] in VOWELS:\n        i -= 1\n    if i < 0:\n        return \"\"\n\n    # find the second consonant\n    j = len(word) - 1\n    while j >= i and not word[j] in VOWELS:\n        j -= 1\n    if j < i:\n        return \"\"\n\n    # find the closest vowel between the two\n    while j >= i and word[j] in VOWELS:\n        j -= 1\n    return word[j+1:]\n\ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending doesn't count. Return empty string if you didn't\n    find any consonant met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_consonant(\"yogurt\") ==> \"y\"\n    get_closest_consonant(\"FULL\") ==> \"f\"\n    get_closest_consonant(\"quick\") ==> \"q\"\n    get_closest_consonant(\"ab\") ==> \"a\"\n    \"\"\"\n    if len(word) < 2:\n        return \"\"\n    \n    # find the first vowel\n    i = len(word) - 2\n    while i >= 0 and not word[i] in VOWELS:\n        i -= 1\n    if i < 0:\n        return \"\"\n\n    # find the second vowel\n    j = len(word) - 1\n    while j >= i and not word[j] in VOWELS:\n        j -= 1\n    if j < i:\n        return \"\"\n\n    # find the closest consonant between the two\n    while j >= i and word[j] in VOWELS:\n        j -= 1\n    return word[j+1:]\n\n\nif __name__ == '__main"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "pass\n\n# Complete the get_closest_vowel function\n#\n# Test cases\n#\n# get_closest_vowel(\"yogurt\") ==> \"u\"\n# get_closest_vowel(\"FULL\") ==> \"U\"\n# get_closest_vowel(\"quick\") ==> \"\"\n# get_closest_vowel(\"ab\") ==> \"\"\n#\n# Note:\n#\n# The word is only given from left to right.\n#\n# The word consists of only English letters and English vowels.\n#\n# 1 <= word.length <= 100\n# 1 <= word[i].length <= 100\n# word[i] consists of only English letters and English vowels.\n#\n# Related Topics\n# String\n#\nimport unittest\nclass Test(unittest.TestCase):\n    def test_get_closest_vowel(self):\n        self.assertEqual(get_closest_vowel(\"yogurt\"), \"u\")\n        self.assertEqual(get_closest_vowel(\"FULL\"), \"U\")\n        self.assertEqual(get_closest_vowel(\"quick\"), \"\")\n        self.assertEqual(get_closest_vowel(\"ab\"), \"\")\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# find the index of the last vowel\n    vowel_index = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n            vowel_index = i\n            break\n    if vowel_index == -1:\n        return \"\"\n    # find the index of the first consonant\n    consonant_index = -1\n    for i in range(vowel_index + 1, len(word)):\n        if word[i]!= \"a\" and word[i]!= \"e\" and word[i]!= \"i\" and word[i]!= \"o\" and word[i]!= \"u\":\n            consonant_index = i\n            break\n    if consonant_index == -1:\n        return \"\"\n    # find the index of the second consonant\n    second_consonant_index = -1\n    for i in range(consonant_index + 1, vowel_index):\n        if word[i]!= \"a\" and word[i]!= \"e\" and word[i]!= \"i\" and word[i]!= \"o\" and word[i]!= \"u\":\n            second_consonant_index = i\n            break\n    if second_consonant_index == -1:\n        return \"\"\n    return word[second_consonant_index + 1]\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"yogurt\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"FULL\"\n    assert get_closest_vowel(\"quick\") == \"\", \"quick\"\n    assert get_closest_vowel(\"ab\") == \"\", \"ab\""
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "for i in range(len(word) - 1):\n        if word[i] in \"aeiou\" and word[i + 1] in \"aeiou\":\n            return word[i]\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"Case sensitive\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"Case sensitive\"\n    assert get_closest_vowel(\"quick\") == \"\", \"Case sensitive\"\n    assert get_closest_vowel(\"ab\") == \"\", \"Case sensitive\"\n    assert get_closest_vowel(\"\") == \"\", \"Case sensitive\"\n    assert get_closest_vowel(\"A\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"Aa\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"AaAa\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"AaBb\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"AaBbCcDd\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"AaBbCcDdEe\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"AaBbCcDdEeFf\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"AaBbCcDdEeFfGg\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"AaBbCcDdEeFfGgHh\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"AaBbCcDdEeFfGgHhIi\") == \"A\", \"Case insensitive\"\n    assert get_closest_vowel(\"AaBbCcDdEeFfGg"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "return \"\""
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "# the word is a string, but a list of letters.\n    # convert it to a list of letters\n    word = list(word)\n\n    # get the first two letters\n    first_letter = word[0]\n    second_letter = word[1]\n\n    # find the index of the first two letters\n    first_index = find_index(word, first_letter)\n    second_index = find_index(word, second_letter)\n\n    # if both letters are in the word, we can stop here\n    if first_index!= -1 and second_index!= -1:\n        return word[first_index]\n    else:\n        return \"\"\n\n\ndef find_index(word, letter):\n    \"\"\"Returns the index of the letter in the word. If the letter is not in the word, \n    returns -1.\n    \n    Example:\n    find_index(\"yogurt\", \"u\") ==> 0\n    find_index(\"yogurt\", \"y\") ==> -1\n    find_index(\"yogurt\", \"F\") ==> -1\n    find_index(\"yogurt\", \"A\") ==> -1\n    \"\"\"\n    \n    # the word is a string, but a list of letters.\n    # convert it to a list of letters\n    word = list(word)\n\n    # get the index of the letter\n    letter_index = word.index(letter)\n\n    # if the letter is not in the word, return -1\n    if letter_index == -1:\n        return -1\n    else:\n        # if the letter is in the word, find the index of the letter\n        # after it\n        return letter_index + 1\n\n\nif __name__ == \"__main__\":\n    test_cases = [(\"yogurt\", \"u\", 0),\n                  (\"yogurt\", \"y\", -1),\n                  (\"yogurt\", \"F\", -1),\n                  (\"yogurt\", \"A\", -1),\n                  (\"yogurt\", \"b\", -1),\n                  (\"yogurt\", \"g\", -1),\n                  (\"yogurt\", \"G\", -1),\n                  (\"yogurt\", \"J\", -1),"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "if len(word) == 0:\n        return \"\"\n\n    # for i in range(len(word) - 1):\n    #     if word[i] in \"aeiouy\" and word[i + 1] not in \"aeiouy\":\n    #         return word[i]\n\n    # for i in range(len(word) - 2, -1, -1):\n    #     if word[i] in \"aeiouy\" and word[i + 1] in \"aeiouy\" and word[i + 2] not in \"aeiouy\":\n    #         return word[i]\n\n    for i in range(len(word) - 1):\n        if word[i] in \"aeiouy\" and word[i + 1] not in \"aeiouy\":\n            return word[i]\n\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in \"aeiouy\" and word[i + 1] in \"aeiouy\" and word[i + 2] not in \"aeiouy\":\n            return word[i]\n\n    return \"\"\n\ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending doesn't count. Return empty string if you didn't\n    find any consonant met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_consonant(\"yogurt\") ==> \"g\"\n    get_closest_consonant(\"FULL\") ==> \"f\"\n    get_closest_consonant(\"quick\") ==> \"\"\n    get_closest_consonant(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) == 0:\n        return \"\"\n\n    for i in range(len(word) - 1):\n        if word[i] in \"aeiouy\" and word[i + 1] in \"aeiouy\":\n            return"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "# Find the first vowel that is not a consonant\n    start = word.find(\"a\")\n    while start!= -1 and word[start] not in \"bcdfghjklmnpqrstvwxyz\":\n        start = word.find(\"a\", start+1)\n    # Find the first consonant that is not a vowel\n    end = word.rfind(\"a\")\n    while end!= -1 and word[end] not in \"bcdfghjklmnpqrstvwxyz\":\n        end = word.rfind(\"a\", end-1)\n    if start!= -1 and end!= -1:\n        return word[start+1:end]\n    else:\n        return \"\"\n\n\ndef get_closest_vowel_b(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case insensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel_b(\"yogurt\") ==> \"u\"\n    get_closest_vowel_b(\"FULL\") ==> \"U\"\n    get_closest_vowel_b(\"quick\") ==> \"u\"\n    get_closest_vowel_b(\"ab\") ==> \"\"\n    \"\"\"\n    # Find the first vowel that is not a consonant\n    start = word.find(\"a\")\n    while start!= -1 and word[start] not in \"bcdfghjklmnpqrstvwxyz\":\n        start = word.find(\"a\", start+1)\n    # Find the first consonant that is not a vowel\n    end = word.rfind(\"a\")\n    while end!= -1 and word[end] not in \"bcdfghjklmnpqrstvwxyz\":\n        end = word.rfind(\"a\", end-1)\n    if start!= -1 and end!= -1:"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# the word is in the beginning\n    if word[0] == 'y':\n        return 'u'\n    if word[-1] == 'y':\n        return 'u'\n    # the word is in the end\n    if word[-1] == 'y':\n        return 'u'\n    if word[-1] == 'y':\n        return 'u'\n    # the word is in the middle\n    if word[-2] == 'y' and word[-1]!= 'y':\n        return 'u'\n    if word[0] == 'y' and word[-1]!= 'y':\n        return 'u'\n    return ''\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "for i in range(len(word)):\n        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" or word[i] == \"y\":\n            return word[i]\n    return \"\"\n\ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending doesn't count. Return empty string if you didn't\n    find any consonant met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_consonant(\"yogurt\") ==> \"y\"\n    get_closest_consonant(\"FULL\") ==> \"F\"\n    get_closest_consonant(\"quick\") ==> \"q\"\n    get_closest_consonant(\"ab\") ==> \"a\"\n    \"\"\"\n    for i in range(len(word)):\n        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n            return word[i]\n        if word[i] == \"y\":\n            return word[i]\n    return \"\"\n\ndef get_closest_vowel_and_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel_and_consonant(\"yogurt\") ==> \"u\"\n    get_closest_vowel_and_consonant(\"FULL\")"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# find the index of the first consonant\n    first_consonant_index = first_consonant(word)\n    # if there is no first consonant, then return empty string\n    if first_consonant_index == -1:\n        return \"\"\n    # find the index of the first vowel\n    first_vowel_index = first_vowel(word, first_consonant_index)\n    # if there is no first vowel, then return empty string\n    if first_vowel_index == -1:\n        return \"\"\n    # find the index of the last consonant\n    last_consonant_index = last_consonant(word, first_vowel_index)\n    # if there is no last consonant, then return empty string\n    if last_consonant_index == -1:\n        return \"\"\n    # find the index of the last vowel\n    last_vowel_index = last_vowel(word, first_consonant_index, last_consonant_index)\n    # if there is no last vowel, then return empty string\n    if last_vowel_index == -1:\n        return \"\"\n    # return the substring between the first and last consonant\n    return word[first_vowel_index:last_consonant_index + 1]\n\nif __name__ == '__main__':\n    test_cases = [\n        ('a', 'a'),\n        ('b', 'b'),\n        ('ab', 'a'),\n        ('c', 'c'),\n        ('d', 'd'),\n        ('abcd', 'bc'),\n        ('abcd', 'bcd'),\n        ('abcd', 'abc'),\n        ('abcd', 'abcde'),\n        ('abcde', 'abcde'),\n        ('abcde', 'abcdef'),\n        ('abcde', 'abcdefgh'),\n        ('abcde', 'abcdefghij'),\n        ('abcde', 'abcdefghijkl'),\n        ('abcde', 'abcdefghijklm'),\n        ('abcde', 'abcdefghijklmnop'),\n        ('abcde', 'abcdefghijklmnopqr'),"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# print(\"get_closest_vowel: %s\" % word)\n    vowel = \"\"\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] == \"c\":\n            i -= 1\n        elif word[i] == \"h\":\n            if i - 2 >= 0 and word[i-2] == \"c\":\n                vowel = word[i-1]\n                break\n            else:\n                vowel = word[i]\n                break\n        elif word[i] == \"t\":\n            if i - 1 >= 0 and word[i-1] == \"h\":\n                vowel = word[i]\n                break\n            else:\n                vowel = word[i]\n                break\n        elif word[i] == \"s\":\n            if i - 2 >= 0 and word[i-2] == \"c\":\n                vowel = word[i-1]\n                break\n            else:\n                vowel = word[i]\n                break\n        elif word[i] == \"z\":\n            if i - 1 >= 0 and word[i-1] == \"s\":\n                vowel = word[i]\n                break\n            else:\n                vowel = word[i]\n                break\n        elif word[i] == \"g\":\n            if i - 1 >= 0 and word[i-1] == \"g\":\n                vowel = word[i]\n                break\n            else:\n                vowel = word[i]\n                break\n        elif word[i] == \"d\":\n            if i - 1 >= 0 and word[i-1] == \"t\":\n                vowel = word[i]\n                break\n            else:\n                vowel = word[i]\n                break\n        else:\n            vowel = \"\"\n            break\n        i -= 1\n    return vowel\n\n# test case\n# word = \"yogurt\"\n# print(get_closest_vowel(word))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n    # Get the last character\n    last_char = word[-1]\n    # Get the first character\n    first_char = word[0]\n    # Check if the last character is vowel\n    if last_char in VOWELS:\n        # Check if the first character is vowel\n        if first_char in VOWELS:\n            # Check if the first character is same as the last one\n            if first_char == last_char:\n                return first_char\n            else:\n                return \"\"\n        else:\n            return last_char\n    else:\n        return \"\"\n\n\nclass Solution:\n    \"\"\"\n    @param word: A string\n    @return: A string\n    \"\"\"\n    def getClosestVowel(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: str\n        \"\"\"\n        closest_vowel = \"\"\n        for i in range(len(word) - 1):\n            if word[i] in VOWELS:\n                if i == 0:\n                    closest_vowel = word[i]\n                else:\n                    closest_vowel = get_closest_vowel(word[i:i+2])\n                    if len(closest_vowel) == 0:\n                        closest_vowel = word[i]\n                    break\n        return closest_vowel\n\n\ndef main():\n    s = Solution()\n    solution = s.getClosestVowel(\"yogurt\")\n    print solution\n    solution = s.getClosestVowel(\"FULL\")\n    print solution\n    solution = s.getClosestVowel(\"quick\")\n    print solution\n    solution = s.getClosestVowel(\"ab\")\n    print solution\n    solution = s.getClosestVowel(\"ABC\")\n    print solution\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# TODO:\n    # 1. Implement the get_closest_vowel function\n    # 2. Use dynamic programming to solve the problem\n    # 3. Test your solution\n    # 4. Add more tests\n    \n    word_len = len(word)\n    if word_len == 0:\n        return ''\n\n    for i in range(word_len-1):\n        if word[i] not in VOWELS:\n            continue\n\n        for j in range(i+1, word_len):\n            if word[j] not in VOWELS:\n                continue\n\n            if j-i == 1:\n                return word[i]\n\n            if word[i] == word[j]:\n                return word[i]\n\n    return ''\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "for i in range(len(word)):\n        if word[i] not in \"aeiou\":\n            continue\n        if word[i+1] in \"aeiou\":\n            return word[i+1]\n        if word[i] not in \"aeiou\" and word[i-1] in \"aeiou\":\n            return word[i-1]\n    return \"\"\n\ndef is_vowel(c):\n    return c in \"aeiou\"\n\ndef is_consonant(c):\n    return c not in \"aeiou\"\n\ndef is_consonant_or_vowel(c):\n    return c in \"aeiou\" or c == \" \"\n\ndef is_consonant_or_vowel_or_space(c):\n    return c in \"aeiou\" or c == \" \"\n\ndef is_consonant_or_vowel_or_space_or_blank(c):\n    return c in \"aeiou\" or c == \" \" or c == \"\"\n\ndef is_space(c):\n    return c == \" \"\n\ndef is_blank(c):\n    return c == \"\"\n\ndef is_vowel_or_space(c):\n    return c in \"aeiou\" or c == \" \"\n\ndef is_vowel_or_space_or_blank(c):\n    return c in \"aeiou\" or c == \" \" or c == \"\"\n\ndef is_space_or_blank(c):\n    return c == \" \"\n\ndef is_blank_or_space(c):\n    return c == \"\"\n\ndef is_consonant_or_blank(c):\n    return c in \"aeiou\" or c == \"\"\n\ndef is_consonant_or_blank_or_space(c):\n    return c in \"aeiou\" or c == \"\" or c == \" \"\n\ndef is_blank_or_consonant_or_blank(c):\n    return c == \"\" or c in \"aeiou\"\n\ndef is_blank_or_consonant_or_blank_or_space(c):\n    return c"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def get_distance(char, left, right):\n        if char.isalpha() and char.isupper() and left and right:\n            if left.islower() and right.isupper():\n                return abs(left - char)\n            elif left.isupper() and right.islower():\n                return abs(right - char)\n            elif left.isupper() and right.isupper():\n                return abs(left - char)\n            elif left.islower() and right.islower():\n                return abs(right - char)\n        return 0\n\n    if not word:\n        return \"\"\n\n    left = word[0]\n    right = word[-1]\n\n    if left.isalpha():\n        if not right.isalpha():\n            return \"\"\n\n        for i in range(len(word) - 1):\n            if not word[i].isalpha():\n                break\n        else:\n            return word[i + 1]\n\n        return \"\"\n    else:\n        for i in range(len(word) - 1):\n            if not word[i].isalpha():\n                break\n        else:\n            return \"\"\n\n        for i in range(len(word) - 1):\n            if not word[i].isalpha():\n                break\n        else:\n            return \"\"\n\n        return \"\"\n\n\ndef get_closest_vowel_2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel_2(\"yogurt\") ==> \"u\"\n    get_closest_vowel_2(\"FULL\") ==> \"U\"\n    get_closest_vowel_2(\"quick\") ==> \"\"\n    get_closest_vowel_2(\"ab\") ==> \"\"\n    \"\"\"\n    def get_distance(char, left, right):\n        if char"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# create a list of words with length 3\n    word_list = [word[:3], word[3:6], word[6:]]\n    \n    # return empty string if no word is found\n    if len(word_list) == 0:\n        return \"\"\n    \n    # get the first word and remove it\n    first_word = word_list.pop(0)\n    \n    # loop through the word_list to find the closest vowel\n    for i in range(0, len(word_list)):\n        current_word = word_list[i]\n        \n        if current_word[0] == first_word[0]:\n            if current_word[1] == first_word[1]:\n                if current_word[2] == first_word[2]:\n                    return current_word\n        \n        # check if there is a vowel at the end of current_word\n        if current_word[-1] in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n            word_list.append(current_word[:-1])\n        else:\n            word_list.append(current_word)\n    \n    return \"\"\n\n\ndef test():\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"Case insensitive\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"Case insensitive\"\n    assert get_closest_vowel(\"quick\") == \"\", \"Case insensitive\"\n    assert get_closest_vowel(\"ab\") == \"\", \"Case insensitive\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"Case insensitive\"\n    assert get_closest_vowel(\"aA\") == \"a\", \"Case insensitive\"\n    assert get_closest_vowel(\"aA\") == \"a\", \"Case insensitive\"\n    assert get_closest_vowel(\"aA\") == \"a\", \"Case insensitive\"\n    assert get_closest_vowel(\"aA\") == \"a\", \"Case insensitive\"\n    assert get_closest_vowel(\"aA\") == \"a\", \"Case"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "if len(word) <= 1:\n        return \"\"\n\n    # find the first vowel from the right side of the word\n    vowel = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in VOWELS:\n            vowel = word[i]\n            break\n\n    # find the second closest vowel from the right side of the word\n    if len(word) > 2:\n        for i in range(len(word)-2, -1, -1):\n            if word[i] in VOWELS and word[i+1] not in VOWELS:\n                vowel = word[i+1]\n                break\n\n    return vowel\n\nif __name__ == '__main__':\n    import sys\n\n    f = open(\"0.in\", \"r\")\n    # f = sys.stdin\n    solution = \"\"\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        # construct cipher\n        cipher = f.readline().strip()\n\n        # solve\n        solution = get_closest_vowel(cipher)\n        print \"Case #{}: {}\".format(t+1, solution)"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n\n    start_vowel = word[-1]\n    end_vowel = word[0]\n    \n    for i in range(len(word)-2, -1, -1):\n        if word[i] == start_vowel and word[i+1] == end_vowel:\n            return word[i]\n\n    return \"\"\n\n\ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending don't count. Return empty string if you didn't\n    find any consonant met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_consonant(\"yogurt\") ==> \"y\"\n    get_closest_consonant(\"FULL\") ==> \"f\"\n    get_closest_consonant(\"quick\") ==> \"\"\n    get_closest_consonant(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 2:\n        return \"\"\n\n    start_vowel = word[-1]\n    end_vowel = word[0]\n    \n    for i in range(len(word)-2, -1, -1):\n        if word[i] == start_vowel and word[i+1]!= end_vowel:\n            return word[i]\n\n    return \"\"\n\n\ndef get_closest_consonant_and_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending don't count. Return empty string if you didn't\n    find any consonant met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_consonant_and_vowel(\"yogurt"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "return \"\"\n\nif __name__ == \"__main__\":\n    import timeit\n\n    start = timeit.default_timer()\n    test_cases = 1\n    for i in range(test_cases):\n        test_string = \"The quick brown fox jumps over the lazy dog\"\n        test_string = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789\"\n        test_string = \"abcd\"\n        test_string = \"abc\"\n        test_string = \"test\"\n\n        get_closest_vowel(test_string)\n        print(\"Case #{}: {}\".format(i, timeit.default_timer() - start))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in VOWELS:\n            return word[i]\n\n    return \"\"\n\n\n\ndef is_palindrome(word):\n    \"\"\"You are given a word. Your task is to check if it is a palindrome or not.\n\n    We define a palindrome as a word that reads the same backward as forward.\n\n    Example:\n    is_palindrome(\"a\") ==> True\n    is_palindrome(\"A\") ==> True\n    is_palindrome(\"abcd\") ==> True\n    is_palindrome(\"z\") ==> False\n    is_palindrome(\"az\") ==> False\n    is_palindrome(\"aa\") ==> False\n    is_palindrome(\"Aa\") ==> False\n    \"\"\"\n    if len(word) < 2:\n        return False\n\n    for i in range(len(word) - 1, -1, -1):\n        if word[i]!= word[len(word) - 1 - i]:\n            return False\n\n    return True\n\n\ndef reverse_words(word):\n    \"\"\"You are given a string. Your task is to find the words reverse of the given string.\n    \n    Example:\n    reverse_words(\"Hello\") ==> \"olleH\"\n    reverse_words(\"leetcode\") ==> \"leetcode\"\n    reverse_words(\"A man, a plan, a canal: Panama\") ==> \"a man, a canal: Panama\"\n    \"\"\"\n    reverse_str = \"\"\n    for c in word:\n        reverse_str += c + \" \"\n\n    reverse_str = reverse_str[::-1]\n    return reverse_str\n\n\ndef print_words(words):\n    for word in words:\n        print(word)\n\n\ndef main():\n    \"\"\"\n    Sample Input:\n    Hello\n    leetcode\n    A man, a plan, a canal: Panama\n    \"\"\"\n    test_cases = [\n        [\"Hello\", \"olleH\"],\n        [\"leetcode\", \"leetcode\"],\n        [\"A man, a plan,"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "vowels = [a for a in \"aeiou\"]\n    cons = [a for a in \"bcdfghjklmnpqrstvwxyz\"]\n    cons_len = len(cons)\n    \n    def get_right_side_index(word):\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return i\n        return -1\n\n    def get_left_side_index(word):\n        for i in range(len(word) - 1):\n            if word[i] in vowels:\n                return i\n        return -1\n\n    def get_closest_vowel_index(word, word_index, word_len):\n        if word_index < 0 or word_index > word_len - 1:\n            return -1\n        for i in range(word_index + 1, word_len):\n            if word[i] in vowels:\n                return i\n        return -1\n\n    def get_closest_cons_index(word, word_index, word_len):\n        if word_index < 0 or word_index > word_len - 1:\n            return -1\n        for i in range(word_index + 1, word_len):\n            if word[i] in cons:\n                return i\n        return -1\n\n    if len(word) == 0:\n        return \"\"\n    \n    if len(word) == 1:\n        return \"\"\n\n    word_len = len(word)\n    word_index = get_right_side_index(word)\n    word_index_left = get_left_side_index(word)\n\n    if word_index_left >= 0:\n        if word_index_left < word_index:\n            return \"\"\n        return word[word_index_left:word_index]\n\n    if word_index >= 0:\n        return \"\"\n\n    if word_index_left >= 0:\n        return \"\"\n\n    word_index = get_closest_cons_index(word, word_index, word_len)\n    word_index_left = get_closest_cons_index(word,"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "if not word:\n        return \"\"\n    \n    vowel_count = 0\n    for c in word:\n        if c.lower() == \"a\" or c.lower() == \"e\" or c.lower() == \"i\" or c.lower() == \"o\" or c.lower() == \"u\":\n            vowel_count += 1\n    \n    if not vowel_count:\n        return \"\"\n    \n    vowel_index = 0\n    while vowel_index < len(word) - 1:\n        vowel = word[vowel_index]\n        if not vowel.isalpha():\n            vowel_index += 1\n        else:\n            if vowel.lower() == \"a\" and word[vowel_index + 1].lower() == \"e\":\n                return \"e\"\n            elif vowel.lower() == \"a\" and word[vowel_index + 1].lower() == \"i\":\n                return \"i\"\n            elif vowel.lower() == \"a\" and word[vowel_index + 1].lower() == \"o\":\n                return \"o\"\n            elif vowel.lower() == \"a\" and word[vowel_index + 1].lower() == \"u\":\n                return \"u\"\n            elif vowel.lower() == \"e\" and word[vowel_index + 1].lower() == \"i\":\n                return \"i\"\n            elif vowel.lower() == \"e\" and word[vowel_index + 1].lower() == \"o\":\n                return \"o\"\n            elif vowel.lower() == \"e\" and word[vowel_index + 1].lower() == \"u\":\n                return \"u\"\n            elif vowel.lower() == \"i\" and word[vowel_index + 1].lower() == \"o\":\n                return \"o\"\n            elif vowel.lower() == \"i\" and word[vowel_index + 1].lower() == \"u\":\n                return \"u\"\n            elif vowel.lower() == \"o\" and word[vowel_index + 1].lower() == \"u\":\n                return \"u\"\n            elif vowel"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO\n    \n    # TODO"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "l = len(word)\n    for i in range(l-1, -1, -1):\n        if word[i] in vowels:\n            break\n    return word[i+1:]\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"yogurt -> u\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"FULL -> U\"\n    assert get_closest_vowel(\"quick\") == \"\", \"quick -> u\"\n    assert get_closest_vowel(\"ab\") == \"\", \"ab -> u\"\n    assert get_closest_vowel(\"qw\") == \"\", \"qw -> u\"\n\n    print(\"Congrats! Problem solved in %s seconds!\" % (time.time() - start))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    word_len = len(word)\n    \n    # if the word is short, return empty string\n    if word_len < 3:\n        return \"\"\n\n    # find the index of the first consonant that is not in the word\n    for i in range(word_len - 2, -1, -1):\n        if word[i] not in vowels:\n            break\n\n    # find the index of the second consonant that is not in the word\n    for i in range(i + 1, word_len):\n        if word[i] not in vowels:\n            break\n\n    # return the closest vowel between the two consonants\n    return word[i] if i - i + 1 == i - i + 2 else \"\"\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"yogurt's closest vowel is u\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"FULL's closest vowel is U\"\n    assert get_closest_vowel(\"quick\") == \"\", \"quick's closest vowel is empty\"\n    assert get_closest_vowel(\"ab\") == \"\", \"ab's closest vowel is empty\""
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "i = len(word) - 1\n    while i >= 0:\n        if word[i] in VOWELS:\n            return word[i]\n        i -= 1\n    return \"\"\n\nclass Solution:\n    \"\"\"\n    @param: word: A string\n    @return: An integer\n    \"\"\"\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        if len(word1)!= len(word2):\n            return len(word1)\n\n        dist = [[0 for _ in range(len(word2))] for _ in range(len(word1))]\n        for i in range(len(word1)):\n            dist[i][0] = i\n        for i in range(1, len(word2)):\n            dist[0][i] = i\n        for i in range(1, len(word1)):\n            for j in range(1, len(word2)):\n                if word1[i] == word2[j]:\n                    dist[i][j] = dist[i - 1][j - 1]\n                else:\n                    dist[i][j] = min(dist[i - 1][j], dist[i][j - 1]) + 1\n        return dist[-1][-1]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.minDistance(\"yogurt\", \"u\"))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "for i in range(len(word)):\n        if word[i] in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n            return word[i]\n    return \"\"\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == \"__main__\":\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"yogurt\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"FULL\"\n    assert get_closest_vowel(\"quick\") == \"\", \"quick\"\n    assert get_closest_vowel(\"ab\") == \"\", \"ab\""
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n\ndef is_valid_word(word):\n    \"\"\"You are given a word. Your task is to check if it is a valid word or not.\n    A valid word is a word that only contains letters and spaces.\n    Return True if it is a valid word or False if it is not.\n\n    Example:\n    is_valid_word(\"Hello\") ==> True\n    is_valid_word(\"Hello World\") ==> False\n    is_valid_word(\"Hello   World\") ==> False\n    is_valid_word(\"Hello World\") ==> False\n    is_valid_word(\"Hello   World  \") ==> False\n    is_valid_word(\"\") ==> False\n    is_valid_word(\"Hello World  \") ==> False\n    is_valid_word(\"Hello World \") ==> False\n    is_valid_word(\"Hello World\") ==> False\n    \"\"\"\n    if not word:\n        return False\n    for i in range(len(word)):\n        if not word[i].isalnum():\n            return False\n    return True\n\n\ndef is_valid_word_to_delete(word):\n    \"\"\"You are given a word. Your task is to check if it is a valid word to delete or not.\n    A valid word is a word that only contains letters and spaces.\n    Return True if it is a valid word or False if it is not.\n\n    Example:\n    is_valid_word_to_delete(\"Hello\") ==> True\n    is_valid_word_to_delete(\"Hello World\") ==> False\n    is_valid_word_to_delete(\"Hello   World\") ==> False\n    is_valid_word_to_delete(\"Hello World\") ==> False\n    is_valid_word_to_delete(\"Hello   World  \") ==> False\n    is_valid_word_to_delete(\"\") ==> False\n    is_valid_word_to_delete(\"Hello World  \") ==> False\n    is_valid_word_to_delete(\"Hello World \") ==> False\n    is_"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "word = word.lower()\n    if len(word) < 2:\n        return \"\"\n\n    left = word[-2]\n    right = word[-1]\n    if left == right or left in \"aeiou\":\n        return \"\"\n\n    if left == \"y\":\n        if right == \"o\":\n            return \"u\"\n        if right == \"l\":\n            return \"u\"\n        if right == \"c\":\n            return \"u\"\n        if right == \"k\":\n            return \"u\"\n        if right == \"h\":\n            return \"u\"\n        if right == \"m\":\n            return \"u\"\n        if right == \"n\":\n            return \"u\"\n        if right == \"r\":\n            return \"u\"\n        if right == \"w\":\n            return \"u\"\n        if right == \"f\":\n            return \"u\"\n        if right == \"p\":\n            return \"u\"\n        if right == \"d\":\n            return \"u\"\n\n    if left == \"v\":\n        if right == \"a\":\n            return \"u\"\n        if right == \"e\":\n            return \"u\"\n        if right == \"i\":\n            return \"u\"\n        if right == \"o\":\n            return \"u\"\n        if right == \"u\":\n            return \"u\"\n        if right == \"y\":\n            return \"u\"\n        if right == \"k\":\n            return \"u\"\n        if right == \"h\":\n            return \"u\"\n        if right == \"m\":\n            return \"u\"\n        if right == \"n\":\n            return \"u\"\n        if right == \"r\":\n            return \"u\"\n        if right == \"s\":\n            return \"u\"\n        if right == \"w\":\n            return \"u\"\n        if right == \"f\":\n            return \"u\"\n        if right == \"p\":\n            return \"u\"\n        if right == \"d\":\n            return \"u\"\n\n    if left == \"b\":\n        if right == \"g\":\n            return \"u\"\n        if right == \"d\":\n            return \"u\"\n        if right == \"t\":\n            return"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# TODO: write your code\n    # return \"\"\n    \n    # get the first and last character of the string\n    first = word[0]\n    last = word[-1]\n    \n    # find the index of the first letter of the word\n    i = 0\n    while i < len(word) and word[i]!= first:\n        i += 1\n    \n    # find the index of the last letter of the word\n    j = len(word)\n    while j > 0 and word[j-1]!= last:\n        j -= 1\n    \n    # now the word contains the letters from i to j-1\n    # get the index of the closest vowel\n    for k in range(i,j):\n        if is_vowel(word[k]):\n            return word[k]\n    return \"\"\n\n\ndef is_vowel(c):\n    return c in \"aeiou\"\n\n\ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending doesn't count. Return empty string if you didn't\n    find any consonant met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_consonant(\"yogurt\") ==> \"y\"\n    get_closest_consonant(\"FULL\") ==> \"F\"\n    get_closest_consonant(\"quick\") ==> \"\"\n    get_closest_consonant(\"ab\") ==> \"\"\n    \"\"\"\n    # TODO: write your code\n    # return \"\"\n    \n    # get the first and last character of the string\n    first = word[0]\n    last = word[-1]\n    \n    # find the index of the first letter of the word\n    i = 0\n    while i < len(word) and word[i]!= first:\n        i += 1\n    \n    # find the index of the last letter of the word\n    j = len(word)\n    while j"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "vowels = \"aeiou\"\n    c_index = -1\n    for i, c in enumerate(word):\n        if c in vowels:\n            c_index = i\n            break\n    if c_index == -1:\n        return \"\"\n    right = c_index + 1\n    for j, c in enumerate(word[right:]):\n        if c not in vowels:\n            return word[:right]\n        right += 1\n    return word[:c_index + 1]\n\n\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n\n\ndef test_get_closest_vowel_2():\n    assert get_closest_vowel(\"ab\") == \"\"\n\n\ndef main():\n    test_get_closest_vowel()\n    test_get_closest_vowel_2()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Your code here\n    \n    consonants = \"bcdfghjklmnpqrstvwxz\"\n    \n    # We need to go right from the end of the word\n    # and find the first consonant that is not in the \n    # consonants list.\n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in consonants:\n            break\n    else:\n        return \"\"\n\n    # The position of the first consonant is i\n    # We need to go left from the first consonant and \n    # find the next vowel that is not in the consonants list\n    # (if there is one)\n    for j in range(i, 0, -1):\n        if word[j] not in consonants:\n            break\n    else:\n        return \"\"\n\n    # We have a vowel in the middle.\n    # Find the closest vowel to the first consonant.\n    # If there is none, find the closest vowel to the second consonant\n    # and so on.\n    for k in range(j, i, -1):\n        if word[k] not in consonants:\n            return word[k]\n    for l in range(j, i, -1):\n        if word[l] not in consonants:\n            return word[l]\n    for m in range(j, i, -1):\n        if word[m] not in consonants:\n            return word[m]\n    for n in range(j, i, -1):\n        if word[n] not in consonants:\n            return word[n]\n    for o in range(j, i, -1):\n        if word[o] not in consonants:\n            return word[o]\n    for p in range(j, i, -1):\n        if word[p] not in consonants:\n            return word[p]\n    for q in range(j, i, -1):\n        if word[q] not in consonants:\n            return word[q]\n    for r in range(j, i, -1):\n        if word[r] not in consonants:\n            return word[r]\n    for s"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "word = word.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    vowel_positions = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_positions.append(i)\n\n    if len(vowel_positions) == 0:\n        return ''\n    elif len(vowel_positions) == 1:\n        return word[vowel_positions[0]]\n    else:\n        left_pos = vowel_positions[0]\n        right_pos = vowel_positions[1]\n        while right_pos - left_pos < len(word) - right_pos:\n            if word[right_pos] in vowels:\n                return word[right_pos]\n            right_pos += 1\n        return ''\n\n\ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending doesn't count. Return empty string if you didn't\n    find any consonant met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_consonant(\"yogurt\") ==> \"y\"\n    get_closest_consonant(\"FULL\") ==> \"F\"\n    get_closest_consonant(\"quick\") ==> \"k\"\n    get_closest_consonant(\"ab\") ==> \"b\"\n    \"\"\"\n    word = word.lower()\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n    consonant_positions = []\n    for i in range(len(word)):\n        if word[i] in consonants:\n            consonant_positions"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n\n    for i in range(len(word) - 1):\n        if word[i] == word[i + 1]:\n            continue\n\n        if word[i] in \"aeiou\" and word[i + 1] in \"aeiou\":\n            return word[i]\n\n        if word[i] in \"aeiou\" and word[i + 1] not in \"aeiou\":\n            return word[i + 1]\n\n        if word[i] not in \"aeiou\" and word[i + 1] in \"aeiou\":\n            return word[i]\n\n    return \"\"\n\n\nclass Solution(object):\n    def closestVowel(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: str\n        \"\"\"\n        vowels = get_closest_vowel(word)\n        return vowels if vowels else word"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "if word == \"\":\n        return \"\"\n\n    if len(word) <= 1:\n        return word\n\n    if word[-1] == \"y\":\n        return \"y\"\n    \n    if word[-1] == \"u\":\n        return \"y\"\n    \n    if word[-1] == \"i\":\n        return \"i\"\n\n    if word[-1] == \"o\":\n        return \"o\"\n    \n    if word[-1] == \"e\":\n        return \"e\"\n    \n    if word[-1] == \"s\":\n        return \"s\"\n    \n    if word[-1] == \"n\":\n        return \"n\"\n    \n    if word[-1] == \"r\":\n        return \"r\"\n\n    if word[-1] == \"d\":\n        return \"r\"\n    \n    if word[-1] == \"l\":\n        return \"l\"\n    \n    if word[-1] == \"c\":\n        return \"l\"\n    \n    if word[-1] == \"m\":\n        return \"m\"\n\n    if word[-1] == \"t\":\n        return \"t\"\n    \n    if word[-1] == \"h\":\n        return \"h\"\n    \n    if word[-1] == \"w\":\n        return \"h\"\n    \n    if word[-1] == \"f\":\n        return \"f\"\n    \n    if word[-1] == \"g\":\n        return \"f\"\n    \n    if word[-1] == \"p\":\n        return \"f\"\n    \n    if word[-1] == \"b\":\n        return \"f\"\n    \n    if word[-1] == \"v\":\n        return \"f\"\n    \n    if word[-1] == \"sh\":\n        return \"f\"\n    \n    if word[-1] == \"shh\":\n        return \"f\"\n    \n    if word[-1] == \"x\":\n        return \"f\"\n    \n    if word[-1] == \"ch\":\n        return \"f\"\n    \n    if word[-1] == \"chh\":"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"]\n    left_index = len(word) - 1\n    right_index = 0\n    while right_index < len(word):\n        if word[right_index] in vowels:\n            return word[right_index]\n        right_index += 1\n    return \"\"\n\n\ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the right side of the word (case sensitive).\n    \n    Consonants in the beginning and ending don't count. Return empty string if you didn't\n    find any consonant met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_consonant(\"yogurt\") ==> \"u\"\n    get_closest_consonant(\"FULL\") ==> \"f\"\n    get_closest_consonant(\"quick\") ==> \"k\"\n    get_closest_consonant(\"ab\") ==> \"b\"\n    \"\"\"\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    left_index = len(word) - 1\n    right_index = 0\n    while right_index < len(word):\n        if word[right_index] in consonants:\n            return word[right_index]\n        right_index += 1\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    assert get_closest_consonant(\"yogurt\") == \"u\", \"yogurt\"\n    assert get_closest_consonant(\"FULL\") == \"f\", \"FULL\"\n    assert get_closest_consonant(\"quick\") == \"k\", \"quick\"\n    assert get"
    }
  ]
}