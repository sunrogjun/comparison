{
  "timestamp": "2025-09-14T16:39:06.921824",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 69,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "res = 0\n    for i in lst:\n        if i > res:\n            res = i\n    return res"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if not lst:\n        return -1\n    p = [0] * len(lst)\n    for i in range(len(lst)):\n        p[i] = p[i-1] + 1\n    for i in range(len(lst)):\n        if p[i] < lst[i]:\n            return -1\n    return p[-1]\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if not lst:\n        return -1\n    max_ = -1\n    max_ind = -1\n    for i in range(len(lst)):\n        if lst[i] > max_:\n            max_ = lst[i]\n            max_ind = i\n    return max_ind + 1\n\n\nif __name__ == '__main__':\n    import sys\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    N, M = map(int, f.readline().strip().split(' '))\n    A = []\n    for _ in range(N):\n        A.append(map(int, f.readline().strip().split(' ')))\n    result = search(A)\n    print(\"Case #{}: {}\".format(case + 1, result))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "for x in lst:\n        if x > 0 and lst[x-1] >= lst[x]:\n            return x\n    return -1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "n = len(lst)\n    #print(lst)\n    for i in range(n):\n        if lst[i] > lst[n-1]:\n            return lst[i]\n        else:\n            continue\n\n#     for i in range(n):\n#         if lst[i] > lst[n-1]:\n#             return lst[i]\n#         else:\n#             continue\n    return -1\n\ndef search_with_heap(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    n = len(lst)\n    if n == 0:\n        return -1\n    heap = []\n    heap.append(lst[0])\n    for i in range(1, n):\n        if lst[i] > lst[n-1]:\n            heap.append(lst[i])\n            heap.pop()\n        else:\n            continue\n    return heap[0]\n\ndef search_with_heap2(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5,"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return -1\n\n    lst = sorted(lst)\n    return lst[-1] if len(lst) > 0 else -1\n\n\ndef main():\n    '''\n    Input: [4, 1, 2, 2, 3, 1]\n    Output: 2\n    '''\n    print(search([4, 1, 2, 2, 3, 1]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if lst == []:\n        return -1\n\n    max_ = 0\n    for i in lst:\n        if i > max_:\n            max_ = i\n    return max_\n\ndef main():\n    '''\n    This is the main function.\n    '''\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    print(search(lst))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return max(lst, key=lambda x: lst.count(x))\n\n\nif __name__ == '__main__':\n    lst = [1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(search(lst))\n    lst = [4, 1, 2, 2, 3, 1]\n    print(search(lst))\n    lst = [5, 5, 4, 4, 4]\n    print(search(lst))\n    lst = [5, 5, 4, 4, 4]\n    print(search(lst))\n    lst = [5, 5, 4, 4, 4]\n    print(search(lst))\n    lst = [5, 5, 4, 4, 4]\n    print(search(lst))\n    lst = [5, 5, 4, 4, 4]\n    print(search(lst))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return max(lst, key=lambda x: lst.count(x))\n\nif __name__ == \"__main__\":\n    print(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# check if the list is empty\n    if not lst:\n        return -1\n\n    # initialize the max_freq and min_freq to the first element of the list\n    max_freq = lst[0]\n    min_freq = lst[0]\n\n    # loop through the list\n    for i in lst:\n        # if the current value is greater than the previous max_freq\n        if i > max_freq:\n            max_freq = i\n        # if the current value is less than the previous min_freq\n        elif i < min_freq:\n            min_freq = i\n\n    # return the max_freq\n    return max_freq\n\n\nif __name__ == '__main__':\n    # test cases\n    test_cases = [([1, 2, 2, 3, 3, 3, 4, 4, 4], 4), ([1, 2, 2, 3, 3, 3, 4, 4, 4], -1), ([1, 2, 2, 3, 3, 3, 4, 4, 4], -1)]\n    for test in test_cases:\n        lst = test[0]\n        expected = test[1]\n        actual = search(lst)\n        if expected == actual:\n            print('Test passed')\n        else:\n            print('Test failed')\n            print('Expected:', expected)\n            print('Actual:', actual)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "max_num = -1\n    max_freq = -1\n    for num in lst:\n        if num > max_num:\n            max_num = num\n            max_freq = num\n        elif num > 0 and num > max_num:\n            max_num = num\n            max_freq = num\n    return max_num"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "lst = sorted(lst)\n    return max(i for i, x in enumerate(lst) if x >= i)\n\nif __name__ == '__main__':\n    lst = [4, 1, 2, 2, 3, 1]\n    print(search(lst))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if not lst: return -1\n    if len(lst) == 1: return lst[0]\n    return max(filter(lambda x: x >= 0 and x >= lst[0], lst))\n\n\ndef test_search():\n    assert search([1, 2, 3, 4, 5]) == 3\n    assert search([6, 7, 8, 9, 10]) == -1\n    assert search([]) == -1\n    assert search([1, 2, 3, 4, 5, 6]) == 6\n    assert search([6, 7, 8, 9, 10, 11]) == -1"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "ans = -1\n    for i in lst:\n        if ans < 0 or i > ans:\n            ans = i\n    return ans\n\n\nif __name__ == '__main__':\n    lst = [4, 1, 2, 2, 3, 1]\n    print(search(lst))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# return the first one greater than 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[0]:\n            return lst[i]\n    return -1"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "max_freq = 0\n    max_index = -1\n    for i, value in enumerate(lst):\n        if value > max_freq and value > 0:\n            max_freq = value\n            max_index = i\n    return max_index if max_freq > 0 else -1\n\n# Your Search object will be instantiated and called as such:\n# obj = Search(lst)\n# param_1 = obj.search(lst)"
    },
    {
      "rank": 17,
      "score": 9.99568088808386,
      "candidate": "for i in lst:\n        if i < lst[-1]:\n            return i\n    return -1"
    },
    {
      "rank": 18,
      "score": 9.95575542362522,
      "candidate": "if len(lst) == 0:\n        return -1\n    \n    n = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > n:\n            n = lst[i]\n    return n"
    },
    {
      "rank": 19,
      "score": 9.927751583844309,
      "candidate": "n = len(lst)\n    for i in range(n):\n        if lst[i] >= lst[i+1]:\n            return lst[i]\n    return -1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.876773670266779,
      "candidate": "if len(lst) == 0:\n        return -1\n    \n    if len(lst) == 1:\n        if lst[0] > 0:\n            return lst[0]\n        else:\n            return -1\n    \n    result = -1\n    \n    for i in lst:\n        if i > 0 and lst[i] > lst[i-1]:\n            result = i\n    \n    return result"
    },
    {
      "rank": 21,
      "score": 9.849768196500815,
      "candidate": "# TODO: write your code\n    \n    # if the length of the list is 0, return -1\n    if len(lst) == 0:\n        return -1\n    # if the length of the list is 1, return the value of the list\n    elif len(lst) == 1:\n        return lst[0]\n    # else, if the list is more than 1, search for the first element greater than the current value\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] > lst[i-1]:\n                return lst[i]\n    return -1\n\nif __name__ == '__main__':\n    lst = [4, 1, 2, 2, 3, 1]\n    print(search(lst))"
    },
    {
      "rank": 22,
      "score": 9.846664243889506,
      "candidate": "#return the first one\n    return lst[0]\n\n\nif __name__ == '__main__':\n    lst = [4, 1, 2, 2, 3, 1]\n    print(search(lst))"
    },
    {
      "rank": 23,
      "score": 9.830476734794548,
      "candidate": "if not lst:\n        return -1\n    res = -1\n    for i in range(len(lst)):\n        if lst[i] >= res and lst[i] >= i:\n            res = lst[i]\n    return res\n\nif __name__ == '__main__':\n    print(search([1,2,3,3,3,4,4,4,5,5,5,5,5,5,5,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,"
    },
    {
      "rank": 24,
      "score": 9.807453884086593,
      "candidate": "if len(lst) == 0:\n        return -1\n    \n    return lst[0]\n\n# Test cases\ntest_cases = [\n    (\n        [4, 1, 2, 2, 3, 1],\n        2\n    ),\n    (\n        [1, 2, 2, 3, 3, 3, 4, 4, 4],\n        3\n    ),\n    (\n        [5, 5, 4, 4, 4],\n        -1\n    )\n]\n\nfor case in test_cases:\n    res = search(case[0])\n    if res == case[1]:\n        print \"Test Case #{} passed\".format(case[0][0])\n    else:\n        print \"Test Case #{} failed\".format(case[0][0])"
    },
    {
      "rank": 25,
      "score": 9.783384959902094,
      "candidate": "if not lst:\n        return -1\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] == i+1:\n            return lst[i]\n    return -1"
    },
    {
      "rank": 26,
      "score": 9.74128204707418,
      "candidate": "max_freq = 0\n    for n in lst:\n        if n > max_freq:\n            max_freq = n\n        elif n == max_freq:\n            max_freq += 1\n    return max_freq if max_freq > 0 else -1\n\nif __name__ == '__main__':\n    lst = [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    print(search(lst))"
    },
    {
      "rank": 27,
      "score": 9.709432295833212,
      "candidate": "if not lst:\n        return -1\n    for i in range(len(lst)):\n        if lst[i] > lst[i - 1]:\n            return lst[i]\n        elif lst[i] < lst[i - 1]:\n            return -1\n    return -1"
    },
    {
      "rank": 28,
      "score": 9.64597280831807,
      "candidate": "if len(lst) == 0:\n        return -1\n    max_freq = 0\n    max_id = -1\n    for x in lst:\n        if x > max_freq:\n            max_freq = x\n            max_id = x\n    if max_freq < lst[0]:\n        return -1\n    return max_id\n\n# @include\ndef search(lst):\n    return max(map(search, lst))\n# @exclude"
    },
    {
      "rank": 29,
      "score": 9.631682055224863,
      "candidate": "return max(lst, key=lambda x:lst.count(x))\n\nif __name__ == '__main__':\n    print(search([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 30,
      "score": 9.544080580411693,
      "candidate": "pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.526872963082424,
      "candidate": "if len(lst) == 0:\n        return -1\n    max_freq = 0\n    for i in lst:\n        max_freq = max(max_freq, i)\n    for i in range(1, max_freq + 1):\n        if lst.count(i) >= lst.count(i + 1):\n            return i\n    return -1\n\nif __name__ == '__main__':\n    import sys\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = 0\n    N = int(f.readline().strip())\n    for t in range(1, N + 1):\n        lst = list(map(int, f.readline().strip().split(' ')))\n        solution = max(solution, search(lst))\n    print(solution)"
    },
    {
      "rank": 32,
      "score": 9.372905560358472,
      "candidate": "return max(lst, key=lambda x: lst.count(x))\n\ndef main():\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 9.370583536698913,
      "candidate": "if not lst:\n        return -1\n\n    for i in lst:\n        if i > 0 and i > lst[-1]:\n            return i\n\n    return -1"
    },
    {
      "rank": 34,
      "score": 9.226766272351448,
      "candidate": "if not lst:\n        return -1\n    max_val = max(lst)\n    lst.remove(max_val)\n    for i in lst:\n        if i > max_val:\n            return i\n    return -1\n\ndef main():\n    '''\n    Example:\n        >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n        3\n        >>> search([5, 5, 4, 4, 4])\n        -1\n    '''\n    lst = [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    print(search(lst))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 9.205959372648458,
      "candidate": "n = len(lst)\n    lst.sort()\n    return max(i for i in range(n) if lst[i] >= lst[i+1])"
    },
    {
      "rank": 36,
      "score": 9.183391466815202,
      "candidate": "if not lst:\n        return -1\n    return max(lst, key=lambda x: lst.count(x) >= x)\n\ndef main():\n    '''\n    Input:\n        [4, 1, 2, 2, 3, 1]\n    Output:\n        2\n    '''\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    return search(lst)\n\nif __name__ == '__main__':\n    import sys\n    if (sys.stdin.isatty()):\n        n = int(input())\n        lst = [int(x) for x in input().split()]\n        print(search(lst))\n    else:\n        n = int(input())\n        lst = [int(x) for x in input().split()]\n        print(search(lst))"
    },
    {
      "rank": 37,
      "score": 9.177268828905222,
      "candidate": "# sort the list\n    lst.sort()\n    \n    # find the first value greater than zero\n    for x in range(len(lst)):\n        if lst[x] > 0:\n            return lst[x]\n    return -1"
    },
    {
      "rank": 38,
      "score": 8.973005557553902,
      "candidate": "if not lst: return -1\n    i = 0\n    j = 0\n    while i < len(lst):\n        if lst[i] > 0 and lst[i] >= j:\n            j = lst[i]\n        else:\n            i += 1\n    return j\n\n\n#\n#\n#\ndef main():\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 39,
      "score": 8.946210893390457,
      "candidate": "if not lst:\n        return -1\n    for i in range(len(lst)):\n        if lst[i] < lst[0]:\n            return lst[i]\n    return lst[0]"
    },
    {
      "rank": 40,
      "score": 8.910084504002544,
      "candidate": "if not lst:\n        return -1\n    m = max(lst)\n    for i in lst:\n        if i <= m:\n            m = max(m, i)\n    return m"
    },
    {
      "rank": 41,
      "score": 8.902145503295483,
      "candidate": "def freq(x):\n        return lst.count(x)\n    return max(map(lambda x: freq(x), lst))\n\nif __name__ == '__main__':\n    lst = [4, 1, 2, 2, 3, 1]\n    print search(lst)"
    },
    {
      "rank": 42,
      "score": 8.855395696632057,
      "candidate": "for i in lst:\n        if i > 0 and lst[i] >= lst[i - 1]:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([4, 1, 2, 2, 3, 1]) == 2, \"Sorting\"\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"Sorting\"\n    assert search([5, 5, 4, 4, 4]) == -1, \"Sorting\""
    },
    {
      "rank": 43,
      "score": 8.8281618090209,
      "candidate": "return max(lst) if len(lst) == 0 else lst[max(lst) - 1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.76828871349479,
      "candidate": "if not lst:\n        return -1\n    n = len(lst)\n    max_freq = 0\n    max_pos = 0\n    for i in range(n):\n        if lst[i] > max_freq:\n            max_pos = i\n            max_freq = lst[i]\n    if max_pos == n - 1:\n        return -1\n    return max_pos + 1\n\nif __name__ == '__main__':\n    n = int(input())\n    lst = list(map(int, input().split()))\n    result = search(lst)\n    if result == -1:\n        print('Not found')\n    else:\n        print(result)"
    },
    {
      "rank": 45,
      "score": 8.715724466237427,
      "candidate": "if not lst:\n        return -1\n    \n    n = len(lst)\n    res = []\n    for i in range(n):\n        if i not in res:\n            res.append(i)\n            for j in range(i+1, n):\n                if lst[i] < lst[j]:\n                    if lst[i] > lst[res[-1]]:\n                        res.append(j)\n    return res[-1] if res else -1"
    },
    {
      "rank": 46,
      "score": 8.701078161001123,
      "candidate": "if not lst:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    min_freq = min(lst)\n    max_freq = max(lst)\n    for i in lst:\n        if i > max_freq:\n            max_freq = i\n    if max_freq >= min_freq:\n        return max_freq\n    else:\n        return -1"
    },
    {
      "rank": 47,
      "score": 8.692801520950061,
      "candidate": "return max(x for x in lst if x > 0 and x >= x)\n\nif __name__ == '__main__':\n    print search([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5])\n    print search([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5])\n    print search([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5])"
    },
    {
      "rank": 48,
      "score": 8.632293453617281,
      "candidate": "n = len(lst)\n    for i in range(1, n):\n        if lst[i] > lst[i-1]:\n            return lst[i]\n    return -1"
    },
    {
      "rank": 49,
      "score": 8.625262456968262,
      "candidate": "if not lst:\n        return -1\n    cur = lst[0]\n    for i in lst[1:]:\n        if cur < i:\n            cur = i\n    return cur\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([4, 1, 2, 2, 3, 1]) == 2, \"1st example\"\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"2nd example\"\n    assert search([5, 5, 4, 4, 4]) == -1, \"3rd example\""
    },
    {
      "rank": 50,
      "score": 8.625142247198651,
      "candidate": "return max(filter(lambda x: x>0 and x>=x, lst))\n\nif __name__ == '__main__':\n    lst = [4, 1, 2, 2, 3, 1]\n    print(search(lst))"
    },
    {
      "rank": 51,
      "score": 8.623000730200317,
      "candidate": "return max(lst, key=lambda x: lst.count(x))\n\nclass Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        return search(nums)"
    },
    {
      "rank": 52,
      "score": 8.608819999274287,
      "candidate": "# search the first element\n    if len(lst) == 0:\n        return -1\n\n    # the last element\n    if len(lst) == 1:\n        return lst[0]\n\n    # find the element with the maximum value\n    max_index = 0\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_index = i\n            max_val = lst[i]\n\n    # if the max_val is equal to the last element, then it will be the next element\n    if max_val == lst[-1]:\n        return lst[max_index+1]\n\n    # if the max_val is not equal to the last element, then it will be the next element\n    # if the next element is not the last element, then it will be the next element\n    # if the next element is the last element, then it will be the next element\n    else:\n        return max_val + 1\n\nif __name__ == '__main__':\n    import sys\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    result = search(lst)\n    f.write(str(result) + '\\n')\n    f.close()\n    sys.exit(0)"
    },
    {
      "rank": 53,
      "score": 8.565425580227462,
      "candidate": "# Binary search\n    start = 0\n    end = len(lst) - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if lst[mid] < lst[end]:\n            if lst[mid] < lst[start]:\n                end = mid - 1\n            else:\n                start = mid + 1\n        else:\n            if lst[mid] > lst[start]:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return mid\n\nif __name__ == '__main__':\n    lst = [3, 3, 3, 2, 2, 2, 3, 3, 3, 3]\n    print search(lst)"
    },
    {
      "rank": 54,
      "score": 8.548876241946822,
      "candidate": "if not lst:\n        return -1\n    for i in range(len(lst)):\n        if lst[i] > lst[i+1]:\n            return lst[i]\n    return -1"
    },
    {
      "rank": 55,
      "score": 8.53012858503943,
      "candidate": "i = 1\n    while i < len(lst):\n        if lst[i] < lst[i - 1]:\n            if lst[i] > lst[i - 1] + 1:\n                return lst[i - 1]\n            else:\n                return -1\n        i += 1\n    return -1\n\nif __name__ == '__main__':\n    import sys\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n    for t in xrange(testcases):\n        # construct cipher\n        cipher = map(int, f.readline().strip().split(' '))\n        # construct plain\n        plain = map(int, f.readline().strip().split(' '))\n        # solve\n        s = \"%s\\n\"%(search(plain))\n        print s,"
    },
    {
      "rank": 56,
      "score": 8.499905739299377,
      "candidate": "if len(lst) == 0:\n        return -1\n    else:\n        return max(lst) if any(i > 0 for i in lst) else -1\n\nprint(search([4, 1, 2, 2, 3, 1]))\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))"
    },
    {
      "rank": 57,
      "score": 8.490324832712195,
      "candidate": "if not lst:\n        return -1\n    cur_max = 0\n    for i in lst:\n        if i > cur_max:\n            cur_max = i\n    return cur_max\n\nif __name__ == \"__main__\":\n    lst = [4, 1, 2, 2, 3, 1]\n    print search(lst)\n    lst = [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    print search(lst)\n    lst = [5, 5, 4, 4, 4]\n    print search(lst)"
    },
    {
      "rank": 58,
      "score": 8.426531424889468,
      "candidate": "if not lst:\n        return -1\n    \n    n = len(lst)\n    return max(find(lst, n-1), find(lst, n-2))\n\ndef find(lst, n):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        find([4, 1, 2, 2, 3, 1]) == 2\n        find([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        find([5, 5, 4, 4, 4]) == -1\n    '''\n    if not lst:\n        return -1\n    \n    n = len(lst)\n    \n    for i in xrange(n):\n        if lst[i] >= n:\n            return lst[i]\n    return -1\n\nif __name__ == '__main__':\n    lst = [4, 1, 2, 2, 3, 1]\n    print search(lst)"
    },
    {
      "rank": 59,
      "score": 8.408439383654278,
      "candidate": "# base case\n    if len(lst) == 0:\n        return -1\n    \n    # iterate through the list, and find the max\n    max_item = lst[0]\n    max_freq = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_item:\n            max_item = lst[i]\n            max_freq = lst[i]\n    \n    # if the max_item is greater than the value of the current item, return the value\n    if max_item > lst[0]:\n        return lst[0]\n    \n    # if the max_item is less than the value of the current item, return the value\n    return max_item"
    },
    {
      "rank": 60,
      "score": 8.386620303250325,
      "candidate": "return max(lst, key=lambda x: lst.count(x))"
    },
    {
      "rank": 61,
      "score": 8.351614956112536,
      "candidate": "if len(lst) == 0:\n        return -1\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return max(lst, key=lambda x: x+1) - 1"
    },
    {
      "rank": 62,
      "score": 8.334608500525688,
      "candidate": "if len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    elif len(lst) == 1:\n        return lst[0]\n    elif lst[0] < lst[1]:\n        return search(lst[1:])\n    else:\n        return search(lst[:1])"
    },
    {
      "rank": 63,
      "score": 8.327375965969855,
      "candidate": "if len(lst) == 0:\n        return -1\n    min_count = 0\n    min_value = 0\n    for i in range(len(lst)):\n        if lst[i] > min_value and lst[i] > 0 and lst[i] > min_count:\n            min_count = lst[i]\n            min_value = lst[i]\n    return min_value\n\n\ndef main():\n    import time\n    t = time.time()\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(time.time() - t)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.327367757082776,
      "candidate": "return max(x for x in lst if x > 0 and x >= lst[x])"
    },
    {
      "rank": 65,
      "score": 8.298597569547805,
      "candidate": "n = len(lst)\n    \n    for i in range(n):\n        if lst[i] > 0 and lst[i] >= lst[i + 1]:\n            return lst[i]\n    return -1\n\n\nif __name__ == '__main__':\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))"
    },
    {
      "rank": 66,
      "score": 8.294940769211511,
      "candidate": "if not lst:\n        return -1\n    \n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] > i:\n            return lst[i]\n    return -1\n\nif __name__ == '__main__':\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1"
    },
    {
      "rank": 67,
      "score": 8.2938925966498,
      "candidate": "# I think there's a way to do this with a binary search, but I'm not sure how to do it with a binary search\n    # if we don't know what the max is, we can do a linear search\n    # if we know the max, we can do a binary search\n    if len(lst) == 0:\n        return -1\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        # find the max element in the list and compare it to the current value\n        max_val = max(lst)\n        for i in range(1, len(lst)):\n            if lst[i] > max_val:\n                max_val = lst[i]\n        if lst[0] >= max_val:\n            return lst[0]\n        else:\n            return -1\n\n\ndef test():\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1\n    assert search([3, 3, 3, 3, 3, 3]) == -1\n    assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1\n    assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1\n    assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1\n    assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1\n    assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1\n    assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1\n    assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1\n    assert"
    },
    {
      "rank": 68,
      "score": 8.289838256518838,
      "candidate": "if not lst: return -1\n    lst.sort()\n    start = 0\n    end = len(lst)\n    while start < end:\n        mid = (start+end)/2\n        if lst[mid] < lst[mid-1]:\n            end = mid\n        elif lst[mid] > lst[mid-1]:\n            start = mid+1\n        elif lst[mid] == lst[mid-1]:\n            return lst[mid]\n    return -1\n\n# test\nif __name__ == '__main__':\n    assert search([1, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([5, 5, 4, 4, 4]) == -1"
    },
    {
      "rank": 69,
      "score": 8.214125058964552,
      "candidate": "if len(lst) == 0:\n        return -1\n    max_freq = 0\n    max_idx = -1\n    for i in range(len(lst)):\n        if lst[i] > max_freq:\n            max_freq = lst[i]\n            max_idx = i\n    if max_idx == -1:\n        return -1\n    return max_idx + 1\n\n\ndef main():\n    print(search([3, 1, 2, 2, 3, 1]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 70,
      "score": 8.212735598038213,
      "candidate": "return max(lst, key=lambda x: lst.count(x))\n\n\nif __name__ == '__main__':\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))"
    },
    {
      "rank": 71,
      "score": 8.211579567659316,
      "candidate": "return max(lst, key=lambda x: lst.count(x))\n\n\ndef test_search():\n    assert search([1, 2, 3, 1, 1, 1, 4, 5]) == 2\n    assert search([1, 2, 3, 1, 1, 1, 4, 5, 6]) == 3\n    assert search([1, 2, 3, 1, 1, 1, 4, 5, 6, 6]) == -1\n    assert search([4, 1, 2, 2, 3, 1, 4, 4, 4]) == 4\n\n\nif __name__ == '__main__':\n    test_search()"
    },
    {
      "rank": 72,
      "score": 8.193565922652176,
      "candidate": "if not lst: return -1\n    p = 0\n    for i in lst:\n        if i > p:\n            p = i\n    return p\n\nif __name__ == '__main__':\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))"
    },
    {
      "rank": 73,
      "score": 8.185309335307622,
      "candidate": "return max(lst, key=lambda x: lst.count(x))\n\nif __name__ == '__main__':\n    import timeit\n\n    print(timeit.timeit(stmt=search, number=1))"
    },
    {
      "rank": 74,
      "score": 8.172253082181854,
      "candidate": "if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    max_idx = 0\n    for i in xrange(1, len(lst)):\n        if lst[i] > lst[max_idx]:\n            max_idx = i\n    if lst[max_idx] >= lst[0]:\n        return max_idx + 1\n    else:\n        return -1\n\nif __name__ == '__main__':\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1"
    },
    {
      "rank": 75,
      "score": 8.163300679823958,
      "candidate": "# check for the case that there is no element in the list\n    if not lst:\n        return -1\n    # get the max element\n    max_element = max(lst)\n    # check whether the max element is greater than or equal to the value of itself\n    if max_element >= lst[0]:\n        return max_element\n    else:\n        return -1\n\ndef test():\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 76,
      "score": 8.144125099485041,
      "candidate": "if not lst:\n        return -1\n    num = lst[0]\n    for i in lst:\n        if i > num:\n            num = i\n    return num"
    },
    {
      "rank": 77,
      "score": 8.121884567141883,
      "candidate": "if lst == []:\n        return -1\n    \n    i = 0\n    while i < len(lst):\n        if lst[i] > 0 and lst[i] >= lst[i+1]:\n            return lst[i]\n        i += 1\n\n    return -1\n\nif __name__ == '__main__':\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([5, 5, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 5, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4,"
    },
    {
      "rank": 78,
      "score": 8.08452234024709,
      "candidate": "if len(lst) == 0:\n        return -1\n    \n    lst.sort()\n    return lst[-1]\n\n\ndef test_search():\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1\n    assert search([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == -1\n    assert search([5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == -1\n\n\nif __name__ == '__main__':\n    test_search()"
    },
    {
      "rank": 79,
      "score": 8.024835682833125,
      "candidate": "for i in lst:\n        if i > 0 and lst[i] >= lst[i-1]:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for a0 in range(t):\n        lst = list(map(int, input().split()))\n        print(search(lst))"
    },
    {
      "rank": 80,
      "score": 7.938028884277233,
      "candidate": "if not lst:\n        return -1\n    else:\n        return max(lst) if len(lst) > 1 else lst[0]\n\nif __name__ == '__main__':\n    s = [4, 1, 2, 2, 3, 1]\n    print search(s)"
    },
    {
      "rank": 81,
      "score": 7.915588979966494,
      "candidate": "# Complete this function\n    if len(lst) == 0:\n        return -1\n    max_val = 0\n    max_val_freq = 0\n    for i in range(len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n            max_val_freq = 1\n        elif lst[i] == max_val:\n            max_val_freq += 1\n        if max_val_freq >= lst[i]:\n            return max_val\n    return -1\n\nif __name__ == '__main__':\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1"
    },
    {
      "rank": 82,
      "score": 7.84634113240411,
      "candidate": "if not lst:\n        return -1\n    n = len(lst)\n    for i in range(n):\n        if lst[i] > lst[i + 1]:\n            return lst[i]\n    return -1\n\ndef main():\n    i = int(input())\n    lst = list(map(int, input().split()))\n    print(search(lst))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 7.834022619458933,
      "candidate": "# Binary search\n    return search_binary(lst)\n\n\ndef search_binary(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search_binary([4, 1, 2, 2, 3, 1]) == 2\n        search_binary([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search_binary([5, 5, 4, 4, 4]) == -1\n    '''\n    # Binary search\n    low = 0\n    high = len(lst) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if lst[mid] > lst[mid + 1]:\n            high = mid - 1\n        elif lst[mid] < lst[mid + 1]:\n            low = mid + 1\n        else:\n            return mid\n    return -1\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    print(search(lst))\n    lst = [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    print(search(lst))\n    lst = [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    print(search(lst))"
    },
    {
      "rank": 84,
      "score": 7.780351419995229,
      "candidate": "# write your code here\n    if len(lst) == 0:\n        return -1\n    max_value = lst[0]\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > max_value:\n            max_value = lst[i]\n            max_index = i\n    if max_index == len(lst):\n        return -1\n    return max_value\n\nif __name__ == \"__main__\":\n    lst = [4, 1, 2, 2, 3, 1]\n    print(search(lst))"
    },
    {
      "rank": 85,
      "score": 7.738292593776799,
      "candidate": "if len(lst) == 0:\n        return -1\n    lst.sort()\n    return lst[-1]\n\ndef main():\n    '''\n    Main function\n    '''\n    print(search([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 7.5819855281879285,
      "candidate": "return max(lst, key=lambda x: lst.count(x) >= x)"
    },
    {
      "rank": 87,
      "score": 7.562924366763077,
      "candidate": "n = len(lst)\n    max_freq = 0\n    max_idx = -1\n    for i in xrange(0, n):\n        if lst[i] <= max_freq:\n            max_freq = lst[i]\n            max_idx = i\n    if max_idx == -1:\n        return -1\n    return max_idx + 1\n\ndef main():\n    lst = [4, 1, 2, 2, 3, 1]\n    print search(lst)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 88,
      "score": 7.4878043221155455,
      "candidate": "if not lst:\n        return -1\n    max_ = -1\n    for num in lst:\n        if num > max_:\n            max_ = num\n        elif num == max_:\n            max_ += 1\n    return max_\n\n\nif __name__ == '__main__':\n    lst = [4, 1, 2, 2, 3, 1]\n    print(search(lst))\n    lst = [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    print(search(lst))\n    lst = [5, 5, 4, 4, 4]\n    print(search(lst))"
    },
    {
      "rank": 89,
      "score": 7.4506599871439985,
      "candidate": "# for each value in the list\n    for value in lst:\n        # if the value is greater than the current maximum\n        if value > max(lst):\n            # if the current maximum is not greater than itself\n            if max(lst)!= value:\n                # update the current maximum\n                max(lst) = value\n        # if the value is greater than the current maximum\n        if value > max(lst):\n            # if the current maximum is not greater than itself\n            if max(lst)!= value:\n                # update the current maximum\n                max(lst) = value\n    return max(lst)\n\nif __name__ == '__main__':\n    # test case 1\n    lst = [4, 1, 2, 2, 3, 1]\n    print(search(lst))\n\n    # test case 2\n    lst = [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    print(search(lst))"
    },
    {
      "rank": 90,
      "score": 7.134571892399572,
      "candidate": "# Note: not using a stack for the solution\n    # This is a bit tricky, but it works\n    max_freq = 0\n    for i in lst:\n        if i > max_freq:\n            max_freq = i\n    if max_freq < 0:\n        return -1\n    return max_freq\n\n\ndef main():\n    print(search([3, 1, 2, 2, 3, 1]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "if not lst:\n        return -1\n    return max(lst, key=lambda x: lst.count(x))\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([1, 2, 3, 4, 5, 6]) == 6, \"Basic\"\n    assert search([4, 5, 6, 4, 5, 6]) == -1, \"Basic\"\n    assert search([1, 2, 2, 2, 2, 2, 2, 3, 4]) == 3, \"Basic\"\n    assert search([1, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9]) == 7, \"Basic\"\n    assert search([2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9]) == -1, \"Basic\""
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "return max(lst) - min(lst)\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([1, 2, 3, 4, 5]) == 4, \"One\"\n    assert search([2, 2, 2, 2, 3, 3, 4, 4, 5, 6]) == 6, \"Two\"\n    assert search([3, 4, 4, 4, 4, 4, 4, 4]) == -1, \"Three\"\n    assert search([1, 1, 1, 1, 1, 1, 1]) == 1, \"One\"\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "if not lst:\n        return -1\n    res = 1\n    for i in lst:\n        if i < res:\n            return -1\n        res = max(res, i)\n    return res\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"First\"\n    assert search([5, 5, 4, 4, 4]) == -1, \"Second\"\n    assert search([]) == -1, \"Third\"\n    assert search([1]) == 1, \"Fourth\"\n    assert search([4, 1, 2, 2, 3, 1]) == 2, \"Fifth\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "# check the length of the list\n    if len(lst) == 0:\n        return -1\n    # find the max value\n    max_value = lst[0]\n    max_value_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > max_value:\n            max_value = lst[i]\n            max_value_index = i\n    # check the frequency of the max value\n    max_value_frequency = 1\n    for i in range(max_value_index + 1, len(lst)):\n        if lst[i] == max_value:\n            max_value_frequency += 1\n    if max_value_frequency <= len(lst):\n        return max_value\n    else:\n        return -1\n\nif __name__ == '__main__':\n    # test cases\n    test_cases = [\n        [5, [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]],\n        [1, [1, 1]],\n        [1, [1, 2, 3]],\n        [1, [1, 2, 3, 4]],\n        [1, [1, 2, 3, 4, 5]],\n        [1, [1, 2, 3, 4, 5, 6]],\n        [1, [1, 2, 3, 4, 5, 6, 7]],\n        [1, [1, 2, 3, 4, 5, 6, 7, 8]],\n        [1, [1, 2, 3, 4, 5, 6, 7, 8, 9]],\n        [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]],\n        [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]],\n        [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]],\n        [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]],\n        [1, [1"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "max_freq = 0\n    for i in lst:\n        if i > 0 and max_freq < i:\n            max_freq = i\n    return max_freq if max_freq > 0 else -1\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert(search([4, 1, 2, 2, 3, 1]) == 2)\n    assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3)\n    assert(search([5, 5, 4, 4, 4]) == -1)\n    assert(search([5, 5, 5, 5]) == -1)\n    assert(search([]) == -1)\n    assert(search([4, 5, 3, 2, 1]) == 3)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# O(n) time, O(n) space\n    if not lst:\n        return -1\n    \n    n = len(lst)\n    max_ = -1\n    max_i = -1\n    for i, val in enumerate(lst):\n        if val == max_:\n            continue\n        if val > max_:\n            max_ = val\n            max_i = i\n    if max_i == -1:\n        return -1\n    return max_i\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2, \"1\"\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"2\"\n    assert search([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4, \"3\"\n    assert search([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1, \"4\""
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "if not lst:\n        return -1\n\n    max = lst[0]\n    for i in lst[1:]:\n        if i < max:\n            max = i\n    return max\n\n\ndef test_search():\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1\n\n\ndef main():\n    test_search()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if lst is None or lst == []:\n        return -1\n    n = len(lst)\n    max_ = 0\n    max_idx = 0\n    for i in range(n):\n        if lst[i] == 0:\n            continue\n        if lst[i] > max_:\n            max_ = lst[i]\n            max_idx = i\n    if max_idx == 0:\n        return -1\n    return max_ + 1\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if not lst:\n        return -1\n    \n    max_freq = 0\n    max_id = 0\n    for i in range(len(lst)):\n        if lst[i] > max_freq:\n            max_freq = lst[i]\n            max_id = i\n    return max_id + 1\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"Search example 1\"\n    assert search([4, 1, 2, 2, 3, 1]) == 2, \"Search example 2\"\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"Search example 3\"\n    assert search([5, 5, 4, 4, 4]) == -1, \"Search example 4\"\n    assert search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1, \"Search example 5\"\n    assert search([5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1] and lst[i] > lst[i + 1]:\n            return lst[i]\n    return -1\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert search([4, 1, 2, 2, 3, 1]) == 2, \"Example 1\"\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"Example 2\"\n    assert search([5, 5, 4, 4, 4]) == -1, \"Example 3\"\n    assert search([5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4"
    }
  ]
}