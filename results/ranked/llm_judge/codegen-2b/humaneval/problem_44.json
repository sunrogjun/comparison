{
  "timestamp": "2025-09-14T16:27:50.406186",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 44,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return bin(x).replace('0b', '')[2:]\n\ndef change_base_base(x: int, base: int, base_base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_base(8, 3, 2)\n    '22'\n    >>> change_base_base(8, 3, 8)\n    '22'\n    >>> change_base_base(7, 2, 8)\n    '111'\n    \"\"\"\n    return change_base(x, base) + change_base(base_base, base)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# convert to string\n    s = str(x)\n    # convert to integer\n    x = int(s)\n    # convert to base\n    s = str(x)\n    for i in range(len(s)):\n        if s[i] == '0':\n            s = s[:i] + s[i+1:]\n    return s\n\ndef change_base2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base2(8, 3)\n    '22'\n    >>> change_base2(8, 2)\n    '1000'\n    >>> change_base2(7, 2)\n    '111'\n    \"\"\"\n    # convert to string\n    s = str(x)\n    # convert to integer\n    x = int(s)\n    # convert to base\n    s = str(x)\n    for i in range(len(s)):\n        if s[i] == '1':\n            s = s[:i] + s[i+1:]\n    return s\n\ndef change_base3(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base3(8, 3)\n    '22'\n    >>> change_base3(8, 2)\n    '1000'\n    >>> change_base3(7, 2)\n    '111'\n    \"\"\"\n    # convert to string\n    s = str(x)\n    # convert to integer\n    x = int(s)\n    # convert to base\n    s = str(x)\n    for i in range(len(s)):\n        if s[i] == '1':\n            s = s[:i] + s[i+1:]\n    return s\n\ndef change_base4(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base4(8"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res\n\ndef test_change_base():\n    assert change_base(8, 3) == '22'\n    assert change_base(8, 2) == '1000'\n    assert change_base(7, 2) == '111'\n\ndef main():\n    #test_change_base()\n    test_int_to_str()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return str(int(x) * base)\n\ndef get_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> get_base(8, 3)\n    '22'\n    >>> get_base(8, 2)\n    '1000'\n    >>> get_base(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, base)\n\ndef get_base_length(x: int, base: int):\n    \"\"\"Get the number of digits in base base for number x.\n    base numbers are less than 10.\n    >>> get_base_length(8, 3)\n    3\n    >>> get_base_length(8, 2)\n    4\n    >>> get_base_length(7, 2)\n    2\n    \"\"\"\n    return len(get_base(x, base))\n\ndef get_base_max_length(x: int, base: int):\n    \"\"\"Get the maximum number of digits in base base for number x.\n    base numbers are less than 10.\n    >>> get_base_max_length(8, 3)\n    3\n    >>> get_base_max_length(8, 2)\n    3\n    >>> get_base_max_length(7, 2)\n    2\n    \"\"\"\n    return get_base_length(x, base)\n\ndef get_base_min_length(x: int, base: int):\n    \"\"\"Get the minimum number of digits in base base for number x.\n    base numbers are less than 10.\n    >>> get_base_min_length(8, 3)\n    3\n    >>> get_base_min_length(8, 2)\n    2\n    >>> get_base_min_length(7, 2)\n    2\n    \"\"\"\n    return get_base_length(x, base) - 1\n\ndef get_base_max_digits(x: int, base: int):\n    \"\"\"Get the maximum number of digits in base base for number x.\n    base numbers are less than 10.\n    >>> get_base_max_digits(8"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "while x > 0:\n        x, r = divmod(x, base)\n        yield str(r)\n\ndef change_base_reversed(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_reversed(8, 3)\n    '22'\n    >>> change_base_reversed(8, 2)\n    '1000'\n    >>> change_base_reversed(7, 2)\n    '111'\n    \"\"\"\n    while x > 0:\n        yield str(x % base)\n        x //= base\n\ndef change_base_reversed_decimal(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_reversed_decimal(8, 3)\n    '22'\n    >>> change_base_reversed_decimal(8, 2)\n    '1000'\n    >>> change_base_reversed_decimal(7, 2)\n    '111'\n    \"\"\"\n    while x > 0:\n        yield str(x % base)\n        x //= base\n\ndef change_base_reversed_hex(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_reversed_hex(8, 3)\n    '22'\n    >>> change_base_reversed_hex(8, 2)\n    '1000'\n    >>> change_base_reversed_hex(7, 2)\n    '111'\n    \"\"\"\n    while x > 0:\n        yield hex(x % base)[2:]\n        x //= base\n\ndef change_base_reversed_bin(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>>"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    return ''.join(['{0:b}'.format(x) for x in base_conversion(x, base)]).lstrip('0')\n\n\ndef base_conversion(x: int, base: int):\n    \"\"\"Return list of base-2 digits in integer x.\n    >>> base_conversion(10, 2)\n    [1, 0]\n    >>> base_conversion(5, 3)\n    [0, 1, 1, 0, 1]\n    \"\"\"\n    return [int(x) / base**i for i, x in enumerate(bin(x)[2:])]\n\n\ndef main():\n    \"\"\"Main function to be run when this file is run as a script.\"\"\"\n    print(change_base(10, 2))\n    print(change_base(2, 10))\n    print(change_base(8, 3))\n    print(change_base(8, 2))\n    print(change_base(7, 2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return str(x).zfill(base)\n\n\ndef change_base_to_hex(x: int, base: int):\n    \"\"\"Change numerical base of input number x to hexadecimal.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_hex(8, 3)\n    '22'\n    >>> change_base_to_hex(8, 2)\n    '0022'\n    >>> change_base_to_hex(7, 2)\n    '0333'\n    \"\"\"\n    return str(x).zfill(base*2)\n\n\ndef change_base_to_bin(x: int, base: int):\n    \"\"\"Change numerical base of input number x to binary.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_bin(8, 3)\n    '000022'\n    >>> change_base_to_bin(8, 2)\n    '000022'\n    >>> change_base_to_bin(7, 2)\n    '00333'\n    \"\"\"\n    return str(x).zfill(base)\n\n\ndef change_base_to_oct(x: int, base: int):\n    \"\"\"Change numerical base of input number x to octal.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_oct(8, 3)\n    '000022'\n    >>> change_base_to_oct(8, 2)\n    '000022'\n    >>> change_base_to_oct(7, 2)\n    '00333'\n    \"\"\"\n    return str(x).zfill(base*8)\n\n\ndef change_base_to_dec(x: int, base: int):\n    \"\"\"Change numerical base of input number x to decimal.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_dec(8, 3)\n    '000022'\n    >>> change_base_to_dec(8, 2)\n    '000022'\n    >>> change_base_to_dec(7, 2)\n    '"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "assert base < 10\n\n    if x < 0:\n        return str(-x) + str(base)\n    else:\n        return str(x) + str(base)\n\ndef change_base_reverse(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_reverse(8, 3)\n    '22'\n    >>> change_base_reverse(8, 2)\n    '1000'\n    >>> change_base_reverse(7, 2)\n    '111'\n    \"\"\"\n    assert base < 10\n\n    if x < 0:\n        return str(-x) + str(base)\n    else:\n        return str(x) + str(base)\n\ndef change_base_to_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    \"\"\"\n    assert base < 10\n\n    if x < 0:\n        return str(-x) + str(base)\n    else:\n        return str(x) + str(base)\n\ndef change_base_reverse_to_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_reverse_to_string(8, 3)\n    '22'\n    >>> change_base_reverse_to_string(8, 2)\n    '1000'\n    >>> change_base_reverse_to_string(7, 2)\n    '111'\n    \"\"\"\n    assert base < 10\n\n    if x < 0:\n        return str(-x) + str(base)\n    else:\n        return str(x) + str(base)\n\ndef change_base_to_dec"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "result = ''\n    while x:\n        result = str(x % base) + result\n        x /= base\n    return result\n\ndef get_base(x: int):\n    \"\"\"Get base number of input number x.\n    return integer representation of number.\n    base numbers are less than 10.\n    >>> get_base(2)\n    2\n    >>> get_base(10)\n    10\n    >>> get_base(1000)\n    10\n    >>> get_base(111)\n    2\n    \"\"\"\n    result = 1\n    while x >= 10:\n        result *= 10\n        x /= 10\n    return result\n\ndef get_digit(x: int):\n    \"\"\"Get number of digit in input number x.\n    return integer representation of number.\n    >>> get_digit(2)\n    2\n    >>> get_digit(10)\n    1\n    >>> get_digit(1000)\n    10\n    >>> get_digit(111)\n    4\n    \"\"\"\n    result = 1\n    while x >= 10:\n        result += 1\n        x /= 10\n    return result\n\ndef get_sum(digits: int, base: int):\n    \"\"\"Get sum of digits in input number x.\n    return integer representation of number.\n    base numbers are less than 10.\n    >>> get_sum(1, 3)\n    1\n    >>> get_sum(3, 3)\n    9\n    >>> get_sum(3, 2)\n    18\n    >>> get_sum(3, 10)\n    300\n    >>> get_sum(3, 100)\n    9000\n    >>> get_sum(3, 1000)\n    3000000\n    \"\"\"\n    result = 0\n    while digits > 0:\n        result += digits % base\n        digits /= base\n    return result\n\ndef get_sum_str(digits: int, base: int):\n    \"\"\"Get sum of digits in input number x.\n    return string representation of number.\n    base numbers are less than 10.\n    >>> get_sum_str(1, 3)\n    '1'\n    >>> get_sum_str(3, 3)\n    '9'\n    >>> get_sum_"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "x = str(x)\n    if len(x) < 2:\n        return x\n    if base < 2 or base > len(x):\n        raise ValueError(\"Base is out of range.\")\n    return x.zfill(base)\n\n\ndef change_base_to_num(x: str, base: int):\n    \"\"\"Change string representation of numerical base to numerical value.\n    >>> change_base_to_num('22', 3)\n    8\n    >>> change_base_to_num('1000', 2)\n    8\n    >>> change_base_to_num('111', 2)\n    7\n    \"\"\"\n    if base < 2 or base > len(x):\n        raise ValueError(\"Base is out of range.\")\n    x = x.zfill(base)\n    return int(x)\n\n\ndef change_base_to_num_with_sign(x: str, base: int):\n    \"\"\"Change string representation of numerical base to numerical value.\n    >>> change_base_to_num_with_sign('22', 3)\n    8\n    >>> change_base_to_num_with_sign('1000', 2)\n    8\n    >>> change_base_to_num_with_sign('111', 2)\n    7\n    \"\"\"\n    if base < 2 or base > len(x):\n        raise ValueError(\"Base is out of range.\")\n    if x[0] == '-':\n        return -change_base_to_num(x[1:], base)\n    return change_base_to_num(x, base)\n\n\ndef change_base_to_num_with_sign_and_base(x: str, base: int):\n    \"\"\"Change string representation of numerical base to numerical value.\n    >>> change_base_to_num_with_sign_and_base('22', 3)\n    8\n    >>> change_base_to_num_with_sign_and_base('1000', 2)\n    8\n    >>> change_base_to_num_with_sign_and_base('111', 2)\n    7\n    \"\"\"\n    if base < 2 or base > len(x):\n        raise ValueError(\"Base is out of range.\")\n    if"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return str(int(x))[::-1].zfill(base)\n\n\ndef change_base_back(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_back(8, 3)\n    '8'\n    >>> change_base_back(8, 2)\n    '8'\n    >>> change_base_back(7, 2)\n    '7'\n    \"\"\"\n    return int(x) + pow(base, len(str(x))) - pow(base, len(str(x)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# base must be less than 10\n    assert base < 10\n    # convert to string\n    s = str(x)\n    # remove leading zeros\n    s = s.lstrip('0')\n    # change base\n    s = '{:0{}b}'.format(int(s), base)\n    return s\n\ndef change_base_hex(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_hex(8, 3)\n    '22'\n    >>> change_base_hex(8, 2)\n    '1000'\n    >>> change_base_hex(7, 2)\n    '111'\n    \"\"\"\n    # base must be less than 10\n    assert base < 10\n    # convert to string\n    s = hex(x)\n    # remove leading zeros\n    s = s.lstrip('0x')\n    # change base\n    s = '{:0{}x}'.format(int(s), base)\n    return s\n\ndef change_base_bin(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_bin(8, 3)\n    '22'\n    >>> change_base_bin(8, 2)\n    '1000'\n    >>> change_base_bin(7, 2)\n    '111'\n    \"\"\"\n    # base must be less than 10\n    assert base < 10\n    # convert to string\n    s = bin(x)\n    # remove leading zeros\n    s = s.lstrip('0b')\n    # change base\n    s = '{:0{}b}'.format(int(s), base)\n    return s\n\ndef change_base_dec(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_dec(8, 3)\n    '22'\n    >>> change"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if base < 2:\n        return x\n    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    res = ''\n    while x:\n        x, r = divmod(x, base)\n        res = chr(r + ord('0') + base - 1) + res\n    return res\n\ndef change_base_str(x: str, base: int):\n    \"\"\"Change numerical base of input string to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_str('123', 3)\n    '123'\n    >>> change_base_str('123', 2)\n    '123'\n    >>> change_base_str('123', 2)\n    '123'\n    \"\"\"\n    if base < 2:\n        return x\n    if x == '':\n        return '0'\n    res = ''\n    while x:\n        x, r = divmod(x, base)\n        res = chr(r + ord('0') + base - 1) + res\n    return res\n\ndef get_base_str(x: str, base: int):\n    \"\"\"Change numerical base of input string to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> get_base_str('123', 3)\n    '123'\n    >>> get_base_str('123', 2)\n    '123'\n    >>> get_base_str('123', 2)\n    '123'\n    \"\"\"\n    if base < 2:\n        return x\n    if x == '':\n        return '0'\n    res = ''\n    while x:\n        x, r = divmod(x, base)\n        res = chr(r + ord('0') + base - 1) + res\n    return res\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    elif base == 10:\n        return str(x)\n    else:\n        result = ''\n        while x > 0:\n            x, rem = divmod(x, base)\n            result = str(rem) + result\n        return result\n\ndef is_prime(n: int):\n    \"\"\"Check if number n is prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_factor(n: int):\n    \"\"\"Get prime factor of input number n.\n    >>> get_prime_factor(2)\n    2\n    >>> get_prime_factor(3)\n    1\n    >>> get_prime_factor(7)\n    7\n    >>> get_prime_factor(8)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return get_prime_factor(n / 2)\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return get_prime_factor(n / i)\n            i += 2\n        return n\n\ndef get_prime_factors(n: int):\n    \"\"\"Get prime factors of input number n.\n    >>> get_prime_factors(2)\n    [2]\n    >>> get_prime_factors(3)\n    [3, 1]\n    >>> get_prime_factors(7)\n    [7]\n    >>> get_prime_factors(8)\n    [2, 2, 2]\n    \"\"\"\n    if n < 2:\n        return []"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return str(x).zfill(len(str(x)))[::-1].replace('0', 'b')[::-1]\n\n\ndef is_base(x: str, base: int):\n    \"\"\"Check whether the input is in base base.\n    >>> is_base('1000', 2)\n    True\n    >>> is_base('111', 2)\n    True\n    >>> is_base('22', 3)\n    True\n    >>> is_base('123', 3)\n    False\n    \"\"\"\n    if len(x) < base:\n        return False\n    if x[0] == '0':\n        return False\n    return x[:len(x)-base+1] == change_base(int(x[:len(x)-base+1]), base)\n\n\ndef is_integer(x: int):\n    \"\"\"Check if the input is an integer.\n    >>> is_integer(8)\n    True\n    >>> is_integer(3.14)\n    False\n    >>> is_integer(3.14159)\n    True\n    \"\"\"\n    try:\n        int(x)\n        return True\n    except:\n        return False\n\n\ndef is_base_10(x: str):\n    \"\"\"Check whether the input is in base 10.\n    >>> is_base_10('1000')\n    True\n    >>> is_base_10('111')\n    False\n    >>> is_base_10('22')\n    False\n    >>> is_base_10('123')\n    False\n    \"\"\"\n    return is_base(x, 10)\n\n\ndef is_base_2(x: str):\n    \"\"\"Check whether the input is in base 2.\n    >>> is_base_2('11')\n    True\n    >>> is_base_2('22')\n    False\n    >>> is_base_2('123')\n    False\n    \"\"\"\n    return is_base(x, 2)\n\n\ndef is_base_16(x: str):\n    \"\"\"Check whether the input is in base 16.\n    >>> is_base_16('1000')\n    True\n    >>> is_base_16('111')\n    False\n    >>> is_base_16('22')\n    False"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    return change_base(x, base//10) + ''.join([str(base % 10), str(x % 10)])\n\ndef change_base(x: int, base: int, zeros_to_pad: bool = False):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    if zeros_to_pad:\n        return '0'*(base - len(str(x))) + str(x)\n    return change_base(x, base//10) + ''.join([str(base % 10), str(x % 10)])\n\ndef get_base(x: int, base: int):\n    \"\"\"Return numerical base of input number x.\n    >>> get_base(8, 3)\n    3\n    >>> get_base(8, 2)\n    2\n    >>> get_base(7, 2)\n    1\n    \"\"\"\n    if base < 10:\n        return int(x)\n    return get_base(x, base//10) + int(base % 10)\n\ndef get_base_str(x: int, base: int):\n    \"\"\"Return numerical base of input number x as string.\n    >>> get_base_str(8, 3)\n    '3'\n    >>> get_base_str(8, 2)\n    '2'\n    >>> get_base_str(7, 2)\n    '1'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    return str(get_base(x, base))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    try:\n        input_string = input(\"Enter a number: \")\n        print(change_base(int(input_string), 2))\n    except ValueError:\n        print(\"Input is not a number.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if base > 10:\n        raise ValueError(\"base should be less than 10\")\n    return str(x).zfill(base)\n\n\ndef main():\n    \"\"\"main() function of the program.\"\"\"\n    print(\"Please input the number you want to change base:\")\n    number = input()\n    print(change_base(int(number), 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "while x > 0:\n        x, base = divmod(x, base)\n        yield str(base)\n\ndef convert_base(number: int, base: int):\n    \"\"\"Convert a number to another base.\n    >>> convert_base(8, 3)\n    '22'\n    >>> convert_base(8, 2)\n    '1000'\n    >>> convert_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(change_base(number, base))\n\ndef convert_base_string(number: str, base: int):\n    \"\"\"Convert a number to another base.\n    >>> convert_base_string('22', 3)\n    '8'\n    >>> convert_base_string('1000', 2)\n    '7'\n    >>> convert_base_string('111', 2)\n    '3'\n    \"\"\"\n    return convert_base(int(number), base)\n\ndef convert_base_string_inplace(number: str, base: int):\n    \"\"\"Convert a number to another base.\n    >>> convert_base_string_inplace('22', 3)\n    '8'\n    >>> convert_base_string_inplace('1000', 2)\n    '7'\n    >>> convert_base_string_inplace('111', 2)\n    '3'\n    \"\"\"\n    number = str(int(number))\n    while len(number) > 1:\n        number, base = divmod(number, base)\n        yield number\n\ndef convert_base_string_inplace_2(number: str, base: int):\n    \"\"\"Convert a number to another base.\n    >>> convert_base_string_inplace_2('22', 3)\n    '8'\n    >>> convert_base_string_inplace_2('1000', 2)\n    '7'\n    >>> convert_base_string_inplace_2('111', 2)\n    '3'\n    \"\"\"\n    number = str(int(number))\n    while len(number) > 1:\n        number, base = divmod(number, base)\n        yield number\n\ndef convert_base_string_inplace_3(number: str"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return str(x).zfill(base)\n\n\ndef change_base_str(x: str, base: int):\n    \"\"\"Change numerical base of input string to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_str('8', 3)\n    '22'\n    >>> change_base_str('8', 2)\n    '1000'\n    >>> change_base_str('7', 2)\n    '111'\n    \"\"\"\n    return change_base(int(x), base)\n\n\ndef change_base_list(x: List[int], base: int):\n    \"\"\"Change numerical base of input list to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_list([8, 7, 6], 3)\n    [22, 111, 111]\n    >>> change_base_list([8, 7, 6], 2)\n    [1000, 1000, 1000]\n    >>> change_base_list([8, 7, 6], 2)\n    [1000, 1000, 1000]\n    \"\"\"\n    return [change_base(x[i], base) for i in range(len(x))]\n\n\ndef change_base_tuple(x: Tuple[int], base: int):\n    \"\"\"Change numerical base of input tuple to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_tuple((8, 7, 6), 3)\n    ('22', '111', '111')\n    >>> change_base_tuple((8, 7, 6), 2)\n    ('1000', '1000', '1000')\n    >>> change_base_tuple((8, 7, 6), 2)\n    ('1000', '1000', '1000')\n    \"\"\"\n    return tuple([change_base(x[i], base) for i in range(len(x))])"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if base > 10:\n        raise ValueError('Base number should be less than 10.')\n    return str(int(x ** (1.0/base)))\n\n\ndef main():\n    \"\"\"Main program\"\"\"\n    import argparse\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument('num', type=int,\n                        help='The number to be converted')\n    parser.add_argument('base', type=int,\n                        help='The base of the number')\n    args = parser.parse_args()\n    print(change_base(args.num, args.base))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return str(x).zfill(int(len(str(x))/base))\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "res = \"\"\n    while x >= base:\n        res += str(x % base)\n        x /= base\n    res += str(x)\n    return res\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return str(x).replace(str(base), '')\n\ndef change_base_and_convert_to_int(x: str, base: int):\n    \"\"\"Change numerical base of input string x to base and convert to int.\n    return integer representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_and_convert_to_int(\"22\", 3)\n    8\n    >>> change_base_and_convert_to_int(\"1000\", 2)\n    8\n    >>> change_base_and_convert_to_int(\"111\", 2)\n    7\n    \"\"\"\n    return int(x.replace(str(base), ''))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "while x >= base:\n        x, r = divmod(x, base)\n        res = str(r)\n    return str(x) + res\n\n\ndef main():\n    args = sys.argv[1:]\n    if len(args) == 0:\n        print('Usage: change_base.py base_num')\n        return\n    base = int(args[0])\n    for x in range(10):\n        print(change_base(x, base))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base < 2:\n        return str(x)\n    while x >= base:\n        x, rem = divmod(x, base)\n        yield str(rem)\n    yield str(x)\n\n\ndef change_base_list(x: list, base: int):\n    \"\"\"Change numerical base of input list x to base.\n    return list of strings after the conversion.\n    base numbers are less than 10.\n    >>> change_base_list([8, 7, 6, 5, 4, 3, 2], 3)\n    [['22', '111'], ['1000'], ['1']]\n    \"\"\"\n    if base < 10:\n        return [str(x)]\n    if base == 10:\n        return [str(x)]\n    if base < 2:\n        return [str(x)]\n    # base < 10\n    r = []\n    for i in range(len(x)):\n        r.append(change_base(x[i], base))\n    return r\n\n\ndef change_base_dict(x: dict, base: int):\n    \"\"\"Change numerical base of input dict x to base.\n    return dict of strings after the conversion.\n    base numbers are less than 10.\n    >>> change_base_dict({'a': 1, 'b': 2}, 3)\n    {'a': '1000', 'b': '111'}\n    \"\"\"\n    if base < 10:\n        return dict(x)\n    if base == 10:\n        return dict(x)\n    if base < 2:\n        return dict(x)\n    # base < 10\n    r = {}\n    for key, value in x.items():\n        r[key] = change_base(value, base)\n    return r\n\n\ndef change_base_dict_list(x: dict, base: int):\n    \"\"\"Change numerical base of input dict list x to base.\n    return dict of strings after the conversion.\n    base numbers are less than 10.\n    >>> change_base_dict_list([{'a': 1, 'b': 2}, {'a': 3,"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "if base > 10:\n        raise ValueError('base number should be less than 10')\n    # base is less than 10\n    if base == 10:\n        return str(x)\n    # base is greater than 10\n    if x < 0:\n        return '-' + change_base(-x, base)\n    sign = 1 if x >= 0 else -1\n    if sign == 1:\n        return str(x)\n    # sign is -1\n    x = abs(x)\n    x_string = str(x)\n    x_string_length = len(x_string)\n    result = ''\n    for i in range(x_string_length):\n        result += x_string[x_string_length - i - 1] * base\n    return result\n\ndef change_base_to_str(x: int, base: int):\n    \"\"\"Change numerical base of input number x to string.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_str(8, 3)\n    '22'\n    >>> change_base_to_str(8, 2)\n    '1000'\n    >>> change_base_to_str(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError('base number should be less than 10')\n    if base == 10:\n        return str(x)\n    # base is less than 10\n    if base == 1:\n        return str(x)\n    # base is greater than 10\n    if x < 0:\n        return '-' + change_base_to_str(-x, base)\n    sign = 1 if x >= 0 else -1\n    if sign == 1:\n        return str(x)\n    # sign is -1\n    x = abs(x)\n    x_string = str(x)\n    x_string_length = len(x_string)\n    result = ''\n    for i in range(x_string_length):\n        result += x_string[x_string_length - i - 1] * base\n    return result\n\ndef main():\n    \"\"\"\n    >>> change_base_to_str(8, 3)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if base < 2:\n        raise ValueError(\"Base can't be less than 2\")\n    if base > 36:\n        raise ValueError(\"Base can't be greater than 36\")\n    result = \"\"\n    while x > 0:\n        result = chr(x % base) + result\n        x /= base\n    return result\n\ndef change_base2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base2(8, 3)\n    '22'\n    >>> change_base2(8, 2)\n    '1000'\n    >>> change_base2(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base can't be less than 2\")\n    if base > 36:\n        raise ValueError(\"Base can't be greater than 36\")\n    result = \"\"\n    while x > 0:\n        result = chr(x % base) + result\n        x /= base\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\n\ndef format_number(x: int, base: int):\n    \"\"\"Format the number x to string with base.\n    >>> format_number(8, 3)\n    '22'\n    >>> format_number(8, 2)\n    '1000'\n    >>> format_number(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, base)\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    import sys\n    import doctest\n\n    if len(sys.argv) == 2:\n        base = int(sys.argv[1])\n    else:\n        base = 2\n\n    doctest.testmod()\n    for i in range(10, 1, -1):\n        print(format_number(i, base))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "assert base >= 2\n    while x >= base:\n        x, r = divmod(x, base)\n        yield str(r)\n    yield str(x)\n\ndef to_base(x: int, base: int):\n    \"\"\"Convert input number to string representation after the conversion.\n    base numbers are less than 10.\n    >>> to_base(8, 3)\n    '22'\n    >>> to_base(8, 2)\n    '1000'\n    >>> to_base(7, 2)\n    '111'\n    \"\"\"\n    assert base >= 2\n    return ''.join(change_base(x, base))\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "return str(x).zfill(base)\n\n\ndef main():\n    \"\"\"Main function\"\"\"\n    # the input file\n    input_file = input('Input file: ')\n    # read input file\n    with open(input_file, 'r') as input_file:\n        file_content = input_file.read()\n    # convert the input file to a list of numbers\n    # each element is a string\n    file_content = file_content.split()\n    # print(file_content)\n    # print('\\n')\n    # for each element in the list\n    for i in range(0, len(file_content)):\n        # if the element is a number\n        if re.match(r'^[0-9]+$', file_content[i]):\n            # convert it to integer\n            file_content[i] = int(file_content[i])\n    # print(file_content)\n    # print('\\n')\n    # for each element in the list\n    for i in range(0, len(file_content)):\n        # if the element is a number\n        if re.match(r'^[0-9]+$', file_content[i]):\n            # convert it to integer\n            file_content[i] = int(file_content[i])\n            # print(file_content[i])\n            # print('\\n')\n            # print(change_base(file_content[i], 10))\n            # print('\\n')\n            # print(file_content[i])\n    # print(file_content)\n    # print('\\n')\n    # print(change_base(file_content[0], 10))\n    # print('\\n')\n    # print(file_content[0])\n    # print('\\n')\n    # print(change_base(file_content[1], 10))\n    # print('\\n')\n    # print(file_content[1])\n    # print('\\n')\n    # print(change_base(file_content[2], 10))\n    # print('\\n')\n    # print(file_content[2])\n    # print('\\n')"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    s = ''\n    while x:\n        s += str(x % base)[-1]\n        x /= base\n    return s\n\ndef change_base_to_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, base)\n\ndef main():\n    import sys\n    if len(sys.argv) < 2:\n        sys.exit('Usage: %s <number>' % sys.argv[0])\n    x = int(sys.argv[1])\n    base = sys.argv[2]\n    print(change_base_to_string(x, base))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "if base > 10:\n        raise ValueError('base number must be less than 10')\n    num = str(x)\n    while len(num) > 1:\n        num = str(int(num) * base)\n        num = num[:-1]\n    return num\n\n\ndef read_file(file_path: str):\n    \"\"\"Read file and return its content as a string.\n    >>> read_file('test.txt')\n    'Hello, world!'\n    \"\"\"\n    with open(file_path, 'r') as f:\n        return f.read()\n\n\ndef write_file(file_path: str, content: str):\n    \"\"\"Write file with content and return its path.\n    >>> write_file('test.txt', 'Hello, world!')\n    'test.txt'\n    \"\"\"\n    with open(file_path, 'w') as f:\n        f.write(content)\n    return file_path\n\n\ndef get_input_data():\n    \"\"\"Get user input data.\n    >>> get_input_data()\n    'Hello, world!'\n    \"\"\"\n    return input('Enter your input: ')\n\n\ndef get_output_data():\n    \"\"\"Get user output data.\n    >>> get_output_data()\n    'Hello, world!'\n    \"\"\"\n    return input('Enter your output: ')\n\n\ndef test():\n    \"\"\"Test function.\"\"\"\n    print(change_base(3, 2))\n    print(change_base(3, 3))\n    print(change_base(3, 4))\n    print(change_base(3, 5))\n    print(change_base(3, 6))\n    print(change_base(3, 7))\n    print(change_base(3, 8))\n    print(change_base(3, 9))\n    print(change_base(3, 10))\n    print(change_base(3, 11))\n    print(change_base(3, 12))\n    print(change_base(3, 13))\n    print(change_base(3, 14))\n    print(change_base(3, 15))\n    print(change_base(3, 16))\n    print(change_base("
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    base_digits = [str(base)]\n    while x > 0:\n        x, rem = divmod(x, base)\n        base_digits.append(str(rem))\n    return ''.join(reversed(base_digits))\n\n\ndef is_valid_base(n, base):\n    \"\"\"Check if number n is valid base number.\n    >>> is_valid_base(1, 3)\n    True\n    >>> is_valid_base(8, 3)\n    True\n    >>> is_valid_base(8, 2)\n    False\n    >>> is_valid_base(7, 2)\n    False\n    \"\"\"\n    return n > 0 and n < base\n\n\ndef is_valid_number(n):\n    \"\"\"Check if number n is valid.\n    >>> is_valid_number(1)\n    True\n    >>> is_valid_number(8)\n    True\n    >>> is_valid_number(8)\n    False\n    >>> is_valid_number(7)\n    False\n    \"\"\"\n    return is_valid_base(n, 10) and n < 10 ** 10\n\n\ndef is_valid_base_and_number(n):\n    \"\"\"Check if number n is valid base number and is valid.\n    >>> is_valid_base_and_number(1)\n    True\n    >>> is_valid_base_and_number(8)\n    True\n    >>> is_valid_base_and_number(8)\n    False\n    >>> is_valid_base_and_number(7)\n    False\n    \"\"\"\n    return is_valid_base(n, 10) and is_valid_number(n)"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "if base > 10:\n        return str(x)\n    x = str(x)\n    while len(x) < base:\n        x = '0' + x\n    return x[:base]\n\ndef get_numbers(n, base):\n    \"\"\"Return a list of all numbers of length n with base.\n    >>> get_numbers(10, 3)\n    [1, 2, 4, 8, 3, 6, 10, 15, 21, 28]\n    >>> get_numbers(7, 2)\n    [1, 7, 11, 13, 17, 19, 23]\n    >>> get_numbers(5, 3)\n    [1, 3, 9, 15, 21]\n    \"\"\"\n    numbers = []\n    for i in range(n):\n        numbers.append(change_base(i, base))\n    return numbers\n\ndef main():\n    # get command line arguments\n    args = get_args()\n    n = int(args.n)\n    base = int(args.b)\n    # print(n, base)\n    # get the numbers\n    numbers = get_numbers(n, base)\n    # print(numbers)\n    # get the max length\n    max_len = max([len(str(x)) for x in numbers])\n    # print(max_len)\n    # print(n, base, max_len)\n    # print(numbers)\n    # print(get_strings(n, base, max_len))\n    # print(get_strings_2(n, base, max_len))\n    # print(get_strings_3(n, base, max_len))\n    # print(get_strings_4(n, base, max_len))\n    # print(get_strings_5(n, base, max_len))\n    # print(get_strings_6(n, base, max_len))\n    # print(get_strings_7(n, base, max_len))\n    # print(get_strings_8(n, base, max_len))\n    # print(get_strings_9(n, base, max_len))\n    # print(get_strings_"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "while x > 0:\n        x, r = divmod(x, base)\n        yield str(r)\n\ndef main():\n    \"\"\"Main function of the program.\n    \"\"\"\n    base = int(input())\n    if base < 2:\n        raise ValueError('Base must be greater than 1')\n    print(' '.join(change_base(input(), base)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x /= base\n    return result\n\ndef main():\n    print(change_base(8, 3))\n    print(change_base(8, 2))\n    print(change_base(7, 2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "assert base >= 1 and base <= 10\n    return str(x).zfill(int(log10(x) + 1))\n\n\ndef print_base(x, base):\n    \"\"\"Prints the string representation of x in base number.\n    >>> print_base(8, 3)\n    '22'\n    >>> print_base(8, 2)\n    '1000'\n    >>> print_base(7, 2)\n    '111'\n    \"\"\"\n    assert base >= 1 and base <= 10\n    return int(change_base(x, base))\n\n\ndef main():\n    \"\"\"Main function of the program.\"\"\"\n    while True:\n        try:\n            line = input('>>> ')\n            if line == '':\n                break\n            else:\n                line = line.strip()\n                if line == 'q':\n                    break\n                else:\n                    print_base(int(line), 10)\n        except ValueError:\n            print('Wrong input! Try again.')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "return str(x).zfill(int(len(str(x))/base))\n\n\ndef print_board(board: list):\n    \"\"\"Prints the board to standard output.\n    >>> print_board([[2, 3, 1, 0, 0, 0],\n   ...              [0, 0, 0, 0, 0, 0],\n   ...              [0, 0, 0, 0, 0, 0],\n   ...              [0, 0, 0, 0, 0, 0],\n   ...              [0, 0, 0, 0, 0, 0],\n   ...              [0, 0, 0, 0, 0, 0]])\n    [[2, 3, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0]]\n    \"\"\"\n    for line in board:\n        print(' '.join(map(str, line)))\n\n\ndef get_board(board: list, number: int):\n    \"\"\"Get the board for the number.\n    >>> get_board([[2, 3, 1, 0, 0, 0],\n   ...            [0, 0, 0, 0, 0, 0],\n   ...            [0, 0, 0, 0, 0, 0],\n   ...            [0, 0, 0, 0, 0, 0],\n   ...            [0, 0, 0, 0, 0, 0],\n   ...            [0, 0, 0, 0, 0, 0]])\n    [[2, 3, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0]]\n    >>> get_board([[2, 3, 1, 0, 0, 0],\n   ...            [0, 0, 0"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "return str(x).zfill(base)\n\n\ndef get_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> get_base(8, 3)\n    '8'\n    >>> get_base(8, 2)\n    '8'\n    >>> get_base(7, 2)\n    '7'\n    \"\"\"\n    return str(x)[-base:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    x = x % base\n    if x == 0:\n        return '0'\n    return str(x)"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "s = str(x)\n    if len(s) > base:\n        return s[0] + change_base(x % base, base)\n    return change_base(x // base, base) + s[-1]\n\ndef main():\n    \"\"\"Main program.\"\"\"\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument('number', type=int)\n    parser.add_argument('base', type=int, default=10)\n    args = parser.parse_args()\n    print(change_base(args.number, args.base))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "result = str(x)\n    while len(result) < base:\n        result = '0' + result\n    return result\n\ndef change_base_with_mod(x: int, base: int, mod: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_with_mod(8, 3, 2)\n    '22'\n    >>> change_base_with_mod(8, 3, 4)\n    '23'\n    >>> change_base_with_mod(8, 2, 4)\n    '100'\n    >>> change_base_with_mod(7, 2, 4)\n    '111'\n    \"\"\"\n    result = str(x)\n    while len(result) < base:\n        result = '0' + result\n    return result[::-1] % mod + result[::-1] % mod\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\n\ndef change_base_to_str(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_str(8, 3)\n    '22'\n    >>> change_base_to_str(8, 2)\n    '1000'\n    >>> change_base_to_str(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\n\ndef get_power(x: int, n: int):\n    \"\"\"Get the power of a number x to the power of n.\n    >>> get_power(3, 2)\n    9\n    >>> get_power(3, 3)\n    27\n    >>> get_power(3, 4)\n    243\n    >>> get_power(3, 5)\n    243\n    >>> get_power(3, -2)\n    1\n    >>> get_power(3, -3)\n    1\n    >>> get_power(3, -4)\n    1\n    >>> get_power(3, -5)\n    1\n    >>> get_power(3, 0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return get_power(x, n - 1) * x\n\n\ndef get_factorial(n):\n    \"\"\"Get the factorial of n.\n    >>> get_factorial(1)\n    1\n    >>> get_factorial(2)\n    2\n    >>> get_factorial(3)\n    6\n    >>> get_factorial(4)\n    24\n    >>> get_factorial(5)\n    120\n    >>> get_factorial(6)\n    720\n    >>> get_factorial(7)\n    5040\n    >>> get_factorial(8)\n    40320\n    >>> get_factorial(9)\n    362880\n    >>> get_"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "if base > 10:\n        raise ValueError('Base number must be less than 10')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if x < 0:\n        raise ValueError('Negative number')\n    if x == 0:\n        return '0'\n    result = ''\n    while x:\n        if x % base == 0:\n            result += str(x / base)\n        else:\n            result += str(x % base)\n        x = x / base\n    return result\n\ndef convert_base(x: int, base: int):\n    \"\"\"Convert numerical input number x to base number base.\n    >>> convert_base(8, 3)\n    8\n    >>> convert_base(8, 2)\n    22\n    >>> convert_base(7, 2)\n    111\n    \"\"\"\n    if base > 10:\n        raise ValueError('Base number must be less than 10')\n    if base < 2:\n        raise ValueError('Base number must be greater than 1')\n    if x < 0:\n        raise ValueError('Negative number')\n    if x == 0:\n        return 0\n    result = 0\n    while x:\n        result += x % base\n        x = x / base\n    return result\n\ndef get_nth_prime(nth: int):\n    \"\"\"Get nth prime number.\n    >>> get_nth_prime(1)\n    2\n    >>> get_nth_prime(2)\n    3\n    >>> get_nth_prime(3)\n    5\n    >>> get_nth_prime(4)\n    11\n    >>> get_nth_prime(5)\n    13\n    >>> get_nth_prime(6)\n    17\n    >>> get_nth_prime(7)\n    19\n    >>> get_nth_prime(8)\n    23\n    >>> get_nth_prime(9)\n    29\n    >>> get_nth_prime(10)\n    31\n    >>> get_nth_prime(11)\n    37\n    >>> get_nth_prime(12)\n    41\n    >>> get_nth_prime(13"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "if base < 2:\n        raise ValueError(\"base must be greater than 1\")\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    return str(int(str(x), base))\n\ndef main():\n    \"\"\"Test program for change_base function.\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(7, 2)\n    '111'\n    >>> change_base(7, 3)\n    '333'\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "# change base\n    x = x * base\n\n    # convert to string\n    return str(x)\n\n\ndef change_base_to_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    \"\"\"\n    # change base\n    x = x / base\n\n    # convert to string\n    return str(x)\n\n\ndef change_base_to_string_2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string_2(8, 3)\n    '22'\n    >>> change_base_to_string_2(8, 2)\n    '1000'\n    >>> change_base_to_string_2(7, 2)\n    '111'\n    \"\"\"\n    # change base\n    x = x * base\n\n    # convert to string\n    return str(x)\n\n\ndef main():\n    \"\"\"Test functions.\"\"\"\n    assert change_base(8, 3) == '22'\n    assert change_base(8, 2) == '1000'\n    assert change_base(7, 2) == '111'\n    assert change_base(8, 2) == '1000'\n    assert change_base(8, 3) == '22'\n    assert change_base_to_string(8, 3) == '22'\n    assert change_base_to_string(8, 2) == '1000'\n    assert change_base_to_string(7, 2) == '111'\n    assert change_base_to_string(8, 2) == '1000'\n    assert change_base_to_string_2(8, 3) == '22'\n    assert change_base_to_string_2(8, 2) == '1000"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "assert base < 10\n    assert base > 0\n    if base == 10:\n        return str(x)\n    return str(int(x) * pow(base, len(str(x))))[::-1]\n\ndef get_base(x: int):\n    \"\"\"Get the base of input number x.\n    >>> get_base(3)\n    3\n    >>> get_base(22)\n    3\n    >>> get_base(1000)\n    2\n    >>> get_base(111)\n    2\n    \"\"\"\n    return int(x / pow(10, len(str(x))))\n\ndef get_decimal_value(x: int, base: int):\n    \"\"\"Get the decimal value of input number x in base base.\n    >>> get_decimal_value(8, 3)\n    '2'\n    >>> get_decimal_value(8, 2)\n    '8'\n    >>> get_decimal_value(7, 2)\n    '3'\n    \"\"\"\n    return change_base(x, base)\n\ndef get_base_decimal_value(x: int, base: int):\n    \"\"\"Get the base decimal value of input number x in base base.\n    >>> get_base_decimal_value(8, 3)\n    '2'\n    >>> get_base_decimal_value(8, 2)\n    '8'\n    >>> get_base_decimal_value(7, 2)\n    '3'\n    \"\"\"\n    return change_base(x, base)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    return ''.join([str(x % base) for x in range(1, int(math.ceil(math.log(x, base)) + 1) + 1)])\n\n\ndef get_base(s: str):\n    \"\"\"Get the base of the input number string s.\n    >>> get_base('1000')\n    3\n    >>> get_base('111')\n    2\n    >>> get_base('22')\n    3\n    >>> get_base('12345')\n    3\n    >>> get_base('1')\n    1\n    >>> get_base('abc')\n    1\n    \"\"\"\n    base = 1\n    for i in range(len(s)):\n        if s[i]!= '0':\n            base = base * 10\n            base = base + int(s[i])\n    return base\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    test_cases = open(os.path.join(os.path.dirname(__file__), 'input.txt'), 'r')\n    for test in test_cases:\n        test = test.strip()\n        if test == '':\n            continue\n        base, num = test.split(' ')\n        print('Case #{0}: {1}'.format(test_cases.count(test), change_base(int(num), int(base))))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n\ndef main():\n    \"\"\"Main function.\n    \"\"\"\n    while True:\n        try:\n            s = input()\n            if s == \"exit\":\n                break\n            if s == \"help\":\n                print(\"\"\"\n                help:\n                change_base(x, base): change x to base.\n                \"\"\")\n            else:\n                base = int(s)\n                if base < 10:\n                    print(change_base(int(input()), base))\n                else:\n                    print(\"Unsupported base.\")\n        except:\n            print(\"Error.\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    return ''.join(map(lambda n: str(n), x))\n\n\ndef change_base2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are greater than 10.\n    >>> change_base2(8, 3)\n    '22'\n    >>> change_base2(8, 2)\n    '1000'\n    >>> change_base2(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    return ''.join(map(lambda n: str(n), x))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "return str(x).zfill(int(math.log10(x)) + 1)[-base:]\n\ndef get_digits(num: int):\n    \"\"\"\n    Return the digits of input number.\n    >>> get_digits(123)\n    '123'\n    >>> get_digits(0)\n    '0'\n    >>> get_digits(-1)\n    '1'\n    \"\"\"\n    return str(num).rjust(int(math.log10(num)) + 1, '0')\n\ndef is_palindrome(s: str):\n    \"\"\"\n    Return True if input string s is a palindrome.\n    >>> is_palindrome('123')\n    True\n    >>> is_palindrome('12345')\n    False\n    >>> is_palindrome('12345678')\n    False\n    >>> is_palindrome('123456789')\n    False\n    >>> is_palindrome('12345678901')\n    True\n    \"\"\"\n    s_rev = s[::-1]\n    return s == s_rev\n\ndef is_palindrome_rev(s: str):\n    \"\"\"\n    Return True if input string s is a palindrome.\n    >>> is_palindrome_rev('12345')\n    True\n    >>> is_palindrome_rev('1234567')\n    True\n    >>> is_palindrome_rev('12345678')\n    False\n    >>> is_palindrome_rev('123456789')\n    False\n    >>> is_palindrome_rev('12345678901')\n    True\n    \"\"\"\n    s_rev = s[::-1]\n    return s_rev == s\n\ndef get_palindrome(s: str):\n    \"\"\"\n    Return string s converted to palindrome.\n    >>> get_palindrome('12345')\n    '12345'\n    >>> get_palindrome('1234567')\n    '1234567'\n    >>> get_palindrome('12345678')\n    '12345678'\n    >>> get_palindrome('123456789')\n    '123456789'\n    >>> get"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "return str(x).zfill(int(len(str(x))/base))\n\ndef main():\n    while True:\n        input_number = input('Enter a number to be changed to base 3: ')\n        if input_number == '':\n            break\n        print(change_base(int(input_number), 3))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 10.0,
      "candidate": "while x >= base:\n        x, base = divmod(x, base)\n    return str(x)\n\ndef convert_to_base(n, base):\n    \"\"\"Convert number n to base b.\n    >>> convert_to_base(8, 3)\n    '22'\n    >>> convert_to_base(8, 2)\n    '1000'\n    >>> convert_to_base(7, 2)\n    '111'\n    \"\"\"\n    return str(int(n))\n\ndef convert_to_base_in_str(n, base):\n    \"\"\"Convert number n to base b.\n    >>> convert_to_base_in_str(8, 3)\n    '22'\n    >>> convert_to_base_in_str(8, 2)\n    '1000'\n    >>> convert_to_base_in_str(7, 2)\n    '111'\n    \"\"\"\n    return str(int(n))\n\ndef convert_to_base_in_str_to_int(n, base):\n    \"\"\"Convert number n to base b.\n    >>> convert_to_base_in_str_to_int(8, 3)\n    8\n    >>> convert_to_base_in_str_to_int(8, 2)\n    8\n    >>> convert_to_base_in_str_to_int(7, 2)\n    7\n    \"\"\"\n    return int(n)\n\ndef convert_to_base_in_str_to_int_in_base(n, base):\n    \"\"\"Convert number n to base b.\n    >>> convert_to_base_in_str_to_int_in_base(8, 3)\n    8\n    >>> convert_to_base_in_str_to_int_in_base(8, 2)\n    8\n    >>> convert_to_base_in_str_to_int_in_base(7, 2)\n    7\n    \"\"\"\n    return int(n)\n\ndef convert_to_base_in_str_to_int_in_base_with_base(n, base):\n    \"\"\"Convert number n to base b.\n    >>> convert_to"
    },
    {
      "rank": 55,
      "score": 10.0,
      "candidate": "if base < 2:\n        return x\n    else:\n        return str(x).zfill(base)\n\ndef get_base(x: int, base: int):\n    \"\"\"Convert input number x to base.\n    base numbers are less than 10.\n    >>> get_base(8, 3)\n    8\n    >>> get_base(8, 2)\n    8\n    >>> get_base(7, 2)\n    7\n    \"\"\"\n    if base < 2:\n        return x\n    else:\n        return int(x.zfill(base))\n\ndef get_nth_digits(x: int, n: int):\n    \"\"\"Get nth digits of input number x.\n    >>> get_nth_digits(8, 0)\n    [8]\n    >>> get_nth_digits(8, 1)\n    [8]\n    >>> get_nth_digits(8, 2)\n    [8]\n    >>> get_nth_digits(8, 3)\n    [8]\n    >>> get_nth_digits(8, 4)\n    [8]\n    >>> get_nth_digits(8, 5)\n    [8]\n    >>> get_nth_digits(8, 6)\n    [8]\n    >>> get_nth_digits(8, 7)\n    [8]\n    >>> get_nth_digits(8, 8)\n    [8]\n    >>> get_nth_digits(8, 9)\n    [8]\n    >>> get_nth_digits(8, 10)\n    [8]\n    >>> get_nth_digits(8, 11)\n    [8]\n    >>> get_nth_digits(8, 12)\n    [8]\n    >>> get_nth_digits(8, 13)\n    [8]\n    >>> get_nth_digits(8, 14)\n    [8]\n    >>> get_nth_digits(8, 15)\n    [8]\n    >>> get_nth_digits(8, 16)\n    [8]\n    >>> get_nth_"
    },
    {
      "rank": 56,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\ndef main():\n    \"\"\"\n    >>> main()\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(input())\n    base = int(input())\n    print(change_base(x, base))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 10.0,
      "candidate": "if base < 2:\n        raise ValueError('Base must be greater than 1.')\n    return str(int(x) // base) + change_base(x % base, base)\n\ndef change_base_to_number(s: str, base: int):\n    \"\"\"Change base of input string s to base.\n    return numerical representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_number('22', 3)\n    8\n    >>> change_base_to_number('1000', 2)\n    8\n    >>> change_base_to_number('111', 2)\n    7\n    \"\"\"\n    if base < 2:\n        raise ValueError('Base must be greater than 1.')\n    return int(s) // base * base + change_base_to_number(s[1:], base)\n\ndef change_base_to_string(n: int, base: int):\n    \"\"\"Change base of input number n to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('Base must be greater than 1.')\n    return str(n) + change_base_to_string(n % base, base)\n\ndef change_base_to_string_with_zeros(n: int, base: int):\n    \"\"\"Change base of input number n to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string_with_zeros(8, 3)\n    '22'\n    >>> change_base_to_string_with_zeros(8, 2)\n    '1000'\n    >>> change_base_to_string_with_zeros(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError('Base must be greater than 1.')\n    return str(n)"
    },
    {
      "rank": 58,
      "score": 10.0,
      "candidate": "return str(x) if x < base else bin(x)[2:]\n\ndef get_base(x: int):\n    \"\"\"Get base of input number x.\n    >>> get_base(0)\n    0\n    >>> get_base(2)\n    2\n    >>> get_base(3)\n    10\n    >>> get_base(10)\n    10\n    >>> get_base(11)\n    10\n    >>> get_base(100)\n    10\n    >>> get_base(1000)\n    10\n    >>> get_base(101)\n    11\n    >>> get_base(1000000)\n    10\n    \"\"\"\n    if x == 0:\n        return 0\n    else:\n        return x if x < 10 else x // 10 * 10\n\ndef get_nth_digit(x: int, n: int):\n    \"\"\"Get the nth digit of number x.\n    >>> get_nth_digit(123, 2)\n    '12'\n    >>> get_nth_digit(123, 3)\n    '13'\n    >>> get_nth_digit(123, 4)\n    '123'\n    >>> get_nth_digit(123, 0)\n    ''\n    >>> get_nth_digit(123, -1)\n    ''\n    \"\"\"\n    return str(x)[n]\n\ndef get_digits(x: int):\n    \"\"\"Get all digits of number x.\n    >>> get_digits(123)\n    '123'\n    >>> get_digits(12345)\n    '12345'\n    >>> get_digits(123456789)\n    '123456789'\n    >>> get_digits(1234567890123456789)\n    '1234567890123456789'\n    >>> get_digits(1234567890123456789012345678901234567890)\n    '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345"
    },
    {
      "rank": 59,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return int_to_base(x, base)\n\ndef int_to_base(x: int, base: int):\n    \"\"\"Convert input number x to base n.\n    >>> int_to_base(8, 3)\n    '22'\n    >>> int_to_base(8, 2)\n    '1000'\n    >>> int_to_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x) + change_base(x, base)\n\ndef base_to_int(x: str, base: int):\n    \"\"\"Convert base n string representation to number.\n    >>> base_to_int('1000', 3)\n    8\n    >>> base_to_int('111', 2)\n    7\n    >>> base_to_int('22', 3)\n    8\n    \"\"\"\n    return int(x[:-1], base)\n\ndef base_to_dec(x: str, base: int):\n    \"\"\"Convert base n string representation to decimal.\n    >>> base_to_dec('1000', 3)\n    8\n    >>> base_to_dec('111', 2)\n    7\n    >>> base_to_dec('22', 3)\n    8\n    \"\"\"\n    return int(x[:-1], base)\n\ndef base_to_hex(x: str, base: int):\n    \"\"\"Convert base n string representation to hexadecimal.\n    >>> base_to_hex('1000', 3)\n    '0x8'\n    >>> base_to_hex('111', 2)\n    '0x7'\n    >>> base_to_hex('22', 3)\n    '0x8'\n    \"\"\"\n    return hex(base_to_int(x, base))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 10.0,
      "candidate": "return str(x).zfill(base)\n\n\ndef get_base(x: int, base: int):\n    \"\"\"Return string representation of input number x after the conversion.\n    base numbers are less than 10.\n    >>> get_base(8, 3)\n    '22'\n    >>> get_base(8, 2)\n    '1000'\n    >>> get_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x).rjust(base)\n\n\ndef convert_base(x: int, base: int):\n    \"\"\"Convert input number x to the base.\n    >>> convert_base(8, 3)\n    8\n    >>> convert_base(8, 2)\n    8\n    >>> convert_base(7, 2)\n    7\n    >>> convert_base(100, 2)\n    100\n    \"\"\"\n    return int(x)\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    if len(sys.argv) == 1:\n        print(\"Enter the number to convert:\")\n    else:\n        print(\"Enter the number to convert:\", sys.argv[1])\n    num = int(input())\n    base = int(input())\n    print(\"Number: {}\".format(get_base(num, base)))\n    print(\"Converted base: {}\".format(change_base(num, base)))\n    print(\"Converted base: {}\".format(convert_base(num, base)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 10.0,
      "candidate": "if base < 2:\n        raise ValueError('Base number should be greater than 1.')\n    if x < 0:\n        raise ValueError('Input number should be positive.')\n    if base == 1:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base % 2 == 0:\n        return str(x * base)\n    if x % base == 0:\n        return '%s%s' % (str(x / base), change_base(x % base, base / 2))\n    return '%s%s' % (str(x * base), change_base(x % base, base / 2))\n\n\ndef print_bases(bases: list):\n    \"\"\"Print all possible bases for input bases.\n    >>> print_bases([2, 3, 5])\n    2, 3, 5\n    >>> print_bases([2, 3, 5, 7, 11])\n    2, 3, 5, 7, 11\n    \"\"\"\n    if bases:\n        for i in range(1, max(bases) + 1):\n            print('{}'.format(i), end='')\n            for j in range(0, len(bases)):\n                if i == bases[j]:\n                    print('*', end='')\n                else:\n                    print('')\n            print()\n    else:\n        print('No bases.')\n\n\ndef main():\n    \"\"\"Main.\"\"\"\n    try:\n        bases = input('Enter the bases: ')\n        bases = bases.split(',')\n        bases = [int(i) for i in bases]\n        print_bases(bases)\n    except ValueError as e:\n        print('Invalid input.')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 10.0,
      "candidate": "if base < 1 or base > 16:\n        raise ValueError(\"Base must be between 1 and 16.\")\n    if x < 0:\n        raise ValueError(\"Negative number is not allowed.\")\n    result = \"\"\n    while x:\n        x, r = divmod(x, base)\n        result = str(r) + result\n    return result\n\ndef change_base_to_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, base)\n\ndef change_base_to_string_or_int(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string_or_int(8, 3)\n    '22'\n    >>> change_base_to_string_or_int(8, 2)\n    '1000'\n    >>> change_base_to_string_or_int(7, 2)\n    '111'\n    >>> change_base_to_string_or_int(8, 10)\n    '8'\n    >>> change_base_to_string_or_int(8, 3)\n    '22'\n    >>> change_base_to_string_or_int(8, 4)\n    '8000'\n    >>> change_base_to_string_or_int(8, 16)\n    '100000000'\n    >>> change_base_to_string_or_int(8, 2)\n    '1000'\n    >>> change_base_to_string_or_int(8, 3)\n    '222'\n    >>> change_base_to_string_or_int(8, 5)\n    '8000'\n    >>> change_base_to_string_or"
    },
    {
      "rank": 63,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    elif base == 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\ndef get_num_digits(x: int, base: int):\n    \"\"\"Return the number of digits required to represent x in base base.\n    >>> get_num_digits(123, 3)\n    3\n    >>> get_num_digits(123, 2)\n    2\n    >>> get_num_digits(7, 2)\n    1\n    >>> get_num_digits(7, 3)\n    2\n    >>> get_num_digits(7, 4)\n    1\n    \"\"\"\n    if base < 10:\n        return len(str(x))\n    else:\n        return int(math.log10(x))\n\ndef get_max_base(x: int, base: int):\n    \"\"\"Return the maximum base that can be used to represent x in base base.\n    >>> get_max_base(123, 3)\n    3\n    >>> get_max_base(123, 2)\n    2\n    >>> get_max_base(7, 2)\n    2\n    >>> get_max_base(7, 3)\n    3\n    >>> get_max_base(7, 4)\n    4\n    >>> get_max_base(7, 5)\n    5\n    \"\"\"\n    if base < 10:\n        return int(math.floor(math.log10(x)))\n    else:\n        return base\n\ndef is_pow2(n: int):\n    \"\"\"Return true if n is a power of 2.\n    >>> is_pow2(2)\n    True\n    >>> is_pow2(3)\n    False\n    >>> is_pow2(4)\n    True\n    >>> is_pow2(5)\n    False\n    \"\"\"\n    return n & (n - 1) == 0\n\ndef get_pow2(n: int):\n    \"\"\"Return the power of 2 that is greater than or equal to n.\n    >>> get_pow2(2)\n    2\n    >>> get_pow2"
    },
    {
      "rank": 64,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(int(x * base))\n    return str(x)\n\ndef get_base(x: int, base: int):\n    \"\"\"Get base of input number x.\n    base numbers are less than 10.\n    >>> get_base(8, 3)\n    3\n    >>> get_base(8, 2)\n    2\n    >>> get_base(7, 2)\n    1\n    \"\"\"\n    return int(x / base)\n\ndef get_number_base(x: int):\n    \"\"\"Get base of input number x.\n    base numbers are less than 10.\n    >>> get_number_base(8)\n    3\n    >>> get_number_base(7)\n    2\n    \"\"\"\n    return get_base(x, 10)\n\ndef get_base_str(x: int, base: int):\n    \"\"\"Get string representation of number x.\n    base numbers are less than 10.\n    >>> get_base_str(8, 3)\n    '22'\n    >>> get_base_str(8, 2)\n    '1000'\n    >>> get_base_str(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, base)\n\ndef get_number_base_str(x: int):\n    \"\"\"Get string representation of number x.\n    base numbers are less than 10.\n    >>> get_number_base_str(8)\n    '22'\n    >>> get_number_base_str(7)\n    '111'\n    \"\"\"\n    return get_base_str(x, 10)\n\ndef get_number_base_str_with_spaces(x: int):\n    \"\"\"Get string representation of number x.\n    base numbers are less than 10.\n    >>> get_number_base_str_with_spaces(8)\n   '8 '\n    >>> get_number_base_str_with_spaces(7)\n   '7 '\n    \"\"\"\n    return change_base(x, 10)\n\ndef get_number_base_str_with_spaces_with_digits(x: int):\n    \"\"\"Get string representation of number x."
    },
    {
      "rank": 65,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(int(base ** (x / base))) + str(x % base)\n\ndef find_base(x: int, base: int):\n    \"\"\"Find the smallest integer that is greater than or equal to x with base\n    number of digits.\n    base numbers are less than 10.\n    >>> find_base(7, 3)\n    3\n    >>> find_base(8, 3)\n    1\n    >>> find_base(7, 2)\n    3\n    >>> find_base(7, 4)\n    1\n    >>> find_base(7, 5)\n    1\n    \"\"\"\n    if base < 10:\n        return x\n    else:\n        return (x + base - 1) // base\n\ndef sum_bases(x: int, base: int):\n    \"\"\"Find the sum of all the bases with digits greater than or equal to x.\n    base numbers are less than 10.\n    >>> sum_bases(7, 3)\n    7\n    >>> sum_bases(8, 3)\n    21\n    >>> sum_bases(7, 2)\n    7\n    >>> sum_bases(7, 4)\n    21\n    >>> sum_bases(7, 5)\n    21\n    \"\"\"\n    if base < 10:\n        return x\n    else:\n        return (x + base - 1) // base + 1\n\ndef main():\n    \"\"\"Main function\"\"\"\n    import doctest\n\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 10.0,
      "candidate": "if base < 10:\n        return str(x)\n    elif base == 10:\n        return str(x)\n    else:\n        return str(x).zfill(int(len(str(x))/base))\n\ndef main():\n    inp = input()\n    while(inp!= \"0\"):\n        print(change_base(int(inp), 2))\n        inp = input()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 9.0,
      "candidate": "if base < 2:\n        raise ValueError('base must be greater than 1')\n\n    result = ''\n    while x > 0:\n        rem = x % base\n        result = str(rem) + result\n        x /= base\n    return result"
    },
    {
      "rank": 68,
      "score": 9.0,
      "candidate": "res = \"\"\n    while x!= 0:\n        res = str(x % base) + res\n        x /= base\n    return res\n\nif __name__ == \"__main__\":\n    # Test cases\n    assert change_base(8, 3) == '22'\n    assert change_base(8, 2) == '1000'\n    assert change_base(7, 2) == '111'"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "if base > 10:\n        raise ValueError('base number must be less than 10')\n    elif base < 2:\n        raise ValueError('base number must be greater than 1')\n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res[::-1]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "if base < 10:\n        return str(x)\n    elif base == 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "while x >= base:\n        x /= base\n        result += str(x)\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "# base = 0 -> return number as text\n    if base == 0:\n        return str(x)\n\n    # base < 10 -> return number as text\n    if base < 10:\n        return str(x)\n\n    # base >= 10 -> convert number to base\n    x = int(x)\n    return change_base(x, base/10) + change_base(x%10, base%10)\n\ndef get_base(x: int):\n    \"\"\"Get the base of input number x.\n    \"\"\"\n    # x < 10 -> return number as text\n    if x < 10:\n        return 10\n\n    # x >= 10 -> return number as text\n    return int(x)\n\ndef get_base_string(x: int):\n    \"\"\"Get the base of input number x.\n    \"\"\"\n    # x < 10 -> return number as text\n    if x < 10:\n        return str(x)\n\n    # x >= 10 -> return number as text\n    return str(x)\n\ndef is_prime(x: int):\n    \"\"\"Check if number is prime.\n    \"\"\"\n    if x < 2:\n        return False\n\n    # x is even number -> return False\n    if x % 2 == 0:\n        return False\n\n    # x is odd number -> return True\n    if x % 2 == 1:\n        return True\n\n    # x is a multiple of 3 -> return False\n    if x % 3 == 0:\n        return False\n\n    # x is a multiple of 5 -> return False\n    if x % 5 == 0:\n        return False\n\n    # x is a multiple of 7 -> return False\n    if x % 7 == 0:\n        return False\n\n    # x is a multiple of 11 -> return False\n    if x % 11 == 0:\n        return False\n\n    # x is a multiple of 13 -> return False\n    if x % 13 == 0:\n        return False\n\n    # x is a multiple of 17 -> return False\n    if x % 17 == 0:\n        return False\n\n    # x is a multiple of 19 -> return False\n    if x % 19 == 0:\n        return False\n\n    # x is a multiple of 23 -> return False\n    if x % 23 == 0:\n        return False\n\n    #"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "return str(x).zfill(int(len(str(x))/base))\n\ndef main():\n    # Test\n    assert change_base(8, 3) == '22'\n    assert change_base(8, 2) == '1000'\n    assert change_base(7, 2) == '111'\n    assert change_base(1, 2) == '1'\n    assert change_base(0, 2) == '0'\n    assert change_base(9, 2) == '99'\n    assert change_base(9, 3) == '999'\n    assert change_base(9, 4) == '9999'\n    assert change_base(9, 5) == '99999'\n    assert change_base(9, 6) == '999999'\n    assert change_base(9, 7) == '9999999'\n    assert change_base(9, 8) == '99999999'\n    assert change_base(9, 9) == '999999999'\n    assert change_base(9, 10) == '9999999999'\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "return str(x).zfill(base)\n\ndef main():\n    \"\"\"main function\"\"\"\n    try:\n        if len(sys.argv) < 2:\n            sys.exit('Usage:./{} input_file'.format(sys.argv[0]))\n        f = open(sys.argv[1])\n        line = f.readline()\n        n = int(line)\n        for i in range(n):\n            line = f.readline()\n            x, base = map(int, line.split())\n            print('{}'.format(change_base(x, base)))\n        f.close()\n    except IOError as e:\n        sys.exit('I/O error({}): {}'.format(e.errno, e.strerror))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "if base < 2:\n        raise ValueError('base must be greater than 1.')\n    while x >= base:\n        x = x // base\n        base = base * base\n    return str(x)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "return str(x).zfill(int(log(x, base) + 1))\n\n\ndef num_digit(x: int, base: int) -> str:\n    \"\"\"Return string representation of input number with base.\n    >>> num_digit(8, 2)\n    '22'\n    >>> num_digit(8, 3)\n    '200'\n    >>> num_digit(8, 5)\n    '88'\n    >>> num_digit(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, base)\n\n\ndef read_int():\n    \"\"\"Read integer from console.\n    >>> read_int()\n    8\n    >>> read_int()\n    7\n    >>> read_int()\n    6\n    >>> read_int()\n    5\n    >>> read_int()\n    4\n    >>> read_int()\n    3\n    >>> read_int()\n    2\n    >>> read_int()\n    1\n    >>> read_int()\n    0\n    >>> read_int()\n    -1\n    \"\"\"\n    return int(input())\n\n\ndef read_string():\n    \"\"\"Read string from console.\n    >>> read_string()\n    'abc'\n    >>> read_string()\n    'def'\n    >>> read_string()\n    'ghi'\n    >>> read_string()\n    'jkl'\n    >>> read_string()\n   'mno'\n    >>> read_string()\n    'tuv'\n    >>> read_string()\n    'wxyz'\n    >>> read_string()\n    ''\n    >>> read_string()\n   ''\n    \"\"\"\n    return input()\n\n\ndef read_input_list():\n    \"\"\"Read input list from console.\n    >>> read_input_list()\n    [1, 2, 3, 4, 5]\n    >>> read_input_list()\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    >>> read_input_list()\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> read_input_list()\n    [1, 2, 3, 4, 5, 6, 7, 8,"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "x = str(x)\n    if len(x) > 1:\n        raise ValueError('Can only convert numbers with one digit')\n    return str(int(x, base))\n\n\ndef change_base_to_string(x: int, base: int,\n                          precision: int=3,\n                          add_zero: bool=False):\n    \"\"\"Convert numerical base to string using given precision.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    >>> change_base_to_string(3, 4)\n    '1000'\n    >>> change_base_to_string(3, 4, add_zero=True)\n    '0010'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n        raise ValueError('Negative numbers are not allowed')\n    x = abs(x)\n    if x == 1:\n        return str(x)\n    if x < base:\n        return change_base(x, base)\n    # If x is greater than base, convert it to base-10\n    # and then convert to base base using digits of base\n    #\n    # The conversion is done in the opposite way to what is\n    # done in the algorithm of change_base(), because we want\n    # to return the digits of base and not the digits of x.\n    #\n    digits = change_base(x // base, base)\n    return digits + change_base(x % base, base)\n\n\ndef change_base_to_string_with_precision(x: int, base: int,\n                                         precision: int=3,\n                                         add_zero: bool=False):\n    \"\"\"Convert numerical base to string using given precision.\n    >>> change_base_to_string_with_precision(8, 3)\n    '22'\n    >>> change_base_to_string_with_precision(8, 2)\n    '1000'\n    >>> change_base_to_string_with_precision(7,"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "assert base >= 2\n    x = str(x)\n    while len(x) > 1 and x[-1] == '0':\n        x = x[:-1]\n    if len(x) == 1:\n        return x\n    while len(x) > 1 and x[-1] == '1':\n        x = x[:-1]\n    return x + ''.join(map(lambda n: str((n + 1) // base), x))\n\ndef change_base_to_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to string.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    \"\"\"\n    assert base >= 2\n    x = str(x)\n    while len(x) > 1 and x[-1] == '0':\n        x = x[:-1]\n    if len(x) == 1:\n        return x\n    while len(x) > 1 and x[-1] == '1':\n        x = x[:-1]\n    return x + ''.join(map(lambda n: str(n % base), x))\n\ndef change_base_to_string_with_digit(x: int, base: int):\n    \"\"\"Change numerical base of input number x to string with digits.\n    >>> change_base_to_string_with_digit(8, 3)\n    '22'\n    >>> change_base_to_string_with_digit(8, 2)\n    '1000'\n    >>> change_base_to_string_with_digit(7, 2)\n    '111'\n    \"\"\"\n    assert base >= 2\n    x = str(x)\n    while len(x) > 1 and x[-1] == '0':\n        x = x[:-1]\n    if len(x) == 1:\n        return x\n    while len(x) > 1 and x[-1] == '1':\n        x = x[:-1]\n    return x + '"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    return str(x)[::base]\n\ndef convert_to_base(x: int, base: int):\n    \"\"\"Convert numerical base to integer.\n    >>> convert_to_base(10, 3)\n    8\n    >>> convert_to_base(8, 3)\n    22\n    >>> convert_to_base(8, 2)\n    1000\n    >>> convert_to_base(7, 2)\n    111\n    \"\"\"\n    if base < 10:\n        return x\n    return int(x) % base\n\ndef convert_to_base_with_modulo(x: int, base: int, modulo: int):\n    \"\"\"Convert numerical base to integer with modulo.\n    >>> convert_to_base_with_modulo(10, 3, 1)\n    8\n    >>> convert_to_base_with_modulo(8, 3, 1)\n    22\n    >>> convert_to_base_with_modulo(8, 3, 2)\n    6\n    >>> convert_to_base_with_modulo(7, 2, 2)\n    0\n    \"\"\"\n    return x % base\n\ndef is_palindrome(x: int):\n    \"\"\"Check if the number is a palindrome.\n    >>> is_palindrome(12)\n    True\n    >>> is_palindrome(7)\n    False\n    >>> is_palindrome(8)\n    False\n    \"\"\"\n    return str(x)[::-1] == str(x)\n\ndef is_palindrome_with_modulo(x: int, modulo: int):\n    \"\"\"Check if the number is a palindrome with modulo.\n    >>> is_palindrome_with_modulo(12, 1)\n    True\n    >>> is_palindrome_with_modulo(7, 2)\n    False\n    >>> is_palindrome_with_modulo(8, 2)\n    False\n    \"\"\"\n    return str(x)[::-1] % modulo == str(x) % modulo\n\ndef is_palindrome_with_modulo_and_base(x:"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    while x >= base:\n        x, r = divmod(x, base)\n        yield str(r)\n    yield str(x)\n\ndef get_digits(x: int, base: int):\n    \"\"\"Get all digits of x in base base.\n    >>> get_digits(7, 3)\n    ['7', '2', '1']\n    >>> get_digits(8, 3)\n    ['22', '1', '0']\n    >>> get_digits(7, 2)\n    ['7', '3']\n    \"\"\"\n    return [str(d) for d in change_base(x, base)]\n\ndef get_decimal_digits(x: int, base: int):\n    \"\"\"Get all decimal digits of x in base base.\n    >>> get_decimal_digits(7, 3)\n    ['7', '2', '1']\n    >>> get_decimal_digits(8, 3)\n    ['22', '1', '0']\n    >>> get_decimal_digits(7, 2)\n    ['7', '3']\n    \"\"\"\n    return [str(d) for d in change_base(x, base) if d!= '0']\n\ndef get_hexadecimal_digits(x: int, base: int):\n    \"\"\"Get all hexadecimal digits of x in base base.\n    >>> get_hexadecimal_digits(7, 3)\n    ['7', '2', '1']\n    >>> get_hexadecimal_digits(8, 3)\n    ['22', '1', '0']\n    >>> get_hexadecimal_digits(7, 2)\n    ['7', '3']\n    \"\"\"\n    return [str(d) for d in change_base(x, base) if d!= '0']\n\ndef get_octal_digits(x: int, base: int):\n    \"\"\"Get all octal digits of x in base base.\n    >>> get_octal_digits(7, 3)\n    ['7',"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\ndef change_base_to_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to string.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return change_base(x, base)\n\ndef change_base_to_int(x: int, base: int):\n    \"\"\"Change numerical base of input number x to int.\n    >>> change_base_to_int(8, 3)\n    8\n    >>> change_base_to_int(8, 2)\n    8\n    >>> change_base_to_int(7, 2)\n    7\n    \"\"\"\n    return int(change_base(x, base))\n\ndef change_base_to_float(x: int, base: int):\n    \"\"\"Change numerical base of input number x to float.\n    >>> change_base_to_float(8, 3)\n    8.0\n    >>> change_base_to_float(8, 2)\n    8.0\n    >>> change_base_to_float(7, 2)\n    7.0\n    \"\"\"\n    return float(change_base(x, base))\n\ndef change_base_to_list(x: int, base: int):\n    \"\"\"Change numerical base of input number x to list.\n    >>> change_base_to_list(8, 3)\n    [1, 2, 3]\n    >>> change_base_to_list(8, 2)\n    [1, 4]\n    >>> change_base_to_list(7, 2)\n    [1, 3]\n    \"\"\"\n    return [change_base_to_int(x, base) for x in range(1, base + 1)]\n\ndef change_base_to_tuple(x: int, base: int"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    if base == 10:\n        return str(x)\n    else:\n        return str(x).zfill(int(len(str(x))/base))\n\n\ndef is_prime(n: int, base: int = 10):\n    \"\"\"Check if the number is a prime number.\n    n must be greater than 1.\n    base must be less than 10.\n    >>> is_prime(5)\n    False\n    >>> is_prime(3, 5)\n    True\n    >>> is_prime(4, 5)\n    False\n    >>> is_prime(5, 5)\n    False\n    >>> is_prime(6, 5)\n    True\n    >>> is_prime(7, 5)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n < 7:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if base < 10:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i!= base:\n                return False\n    return True\n\ndef is_prime(n, base: int = 10):\n    \"\"\"Check if the number is a prime number.\n    n must be greater than 1.\n    base must be less than 10.\n    >>> is_prime(5)\n    False\n    >>> is_prime(3, 5)\n    True\n    >>> is_prime(4, 5)\n    False\n    >>> is_prime(5, 5)\n    False\n    >>> is_prime(6, 5)\n    True\n    >>> is_prime(7, 5)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n < 7:\n        return True\n    if n % 2 == 0:\n        return False\n    if n"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "if base < 2:\n        raise ValueError('base must be greater than 1')\n    return str(x).rjust(base, '0')\n\n\ndef get_base(x: int):\n    \"\"\"Get the base of number x.\n    >>> get_base(3)\n    3\n    >>> get_base(8)\n    3\n    >>> get_base(7)\n    2\n    >>> get_base(1000)\n    2\n    \"\"\"\n    if x < 2:\n        raise ValueError('base must be greater than 1')\n    return int(x)\n\n\ndef get_decimal_base(x: int):\n    \"\"\"Get the base of number x.\n    >>> get_decimal_base(3)\n    3\n    >>> get_decimal_base(8)\n    10\n    >>> get_decimal_base(7)\n    2\n    >>> get_decimal_base(1000)\n    10\n    \"\"\"\n    if x < 2:\n        raise ValueError('base must be greater than 1')\n    return 10**(len(str(x)))\n\n\ndef get_num_base(x: int):\n    \"\"\"Get the base of number x.\n    >>> get_num_base(3)\n    3\n    >>> get_num_base(8)\n    8\n    >>> get_num_base(7)\n    7\n    >>> get_num_base(1000)\n    1000\n    \"\"\"\n    if x < 2:\n        raise ValueError('base must be greater than 1')\n    return int(x)\n\n\ndef is_number(x: str):\n    \"\"\"Check if x is a valid number.\n    >>> is_number('abc')\n    False\n    >>> is_number('123')\n    True\n    \"\"\"\n    try:\n        int(x)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_valid_number(x: str):\n    \"\"\"Check if x is a valid number.\n    >>> is_valid_number('abc')\n    False\n    >>> is_valid_number('123')\n    True\n    \"\"\"\n    try:\n        int(x)\n    except ValueError:\n        return False\n    else"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "if base > 10:\n        raise ValueError('base numbers are less than 10.')\n    n = str(x)\n    while len(n) > 1:\n        n, r = n[:-1], n[-1]\n        n = r + n[:-1]\n    return n[::-1]\n\ndef get_base(x: int, base: int):\n    \"\"\"Get the base of input number x.\n    returns 0 for negative numbers.\n    base numbers are less than 10.\n    >>> get_base(8, 3)\n    3\n    >>> get_base(8, 2)\n    2\n    >>> get_base(7, 2)\n    1\n    \"\"\"\n    if base > 10:\n        raise ValueError('base numbers are less than 10.')\n    if x < 0:\n        return 0\n    n = str(x)\n    if len(n) == 1:\n        return base\n    else:\n        return base * get_base(int(n[:-1]), base) + get_base(int(n[-1]), base)\n\ndef get_length(x: int, base: int):\n    \"\"\"Get the number of digits of input number x.\n    base numbers are less than 10.\n    >>> get_length(8, 3)\n    3\n    >>> get_length(8, 2)\n    2\n    >>> get_length(7, 2)\n    1\n    \"\"\"\n    if base > 10:\n        raise ValueError('base numbers are less than 10.')\n    return len(str(x))\n\ndef print_table(table: list, base: int, reverse: bool = False):\n    \"\"\"Print table in base number.\n    base numbers are less than 10.\n    >>> print_table([['a', 'b'], ['c', 'd']], 3)\n    a b\n    c d\n    d c\n    d a\n    >>> print_table([['a', 'b'], ['c', 'd']], 2, reverse=True)\n    d c\n    c d\n    d a\n    a b\n    \"\"\"\n    if reverse:\n        table.reverse()\n    for row in table:\n        for i in"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "return str(x).replace(str(base), '')\n\n\ndef change_base_str(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_str(8, 3)\n    '22'\n    >>> change_base_str(8, 2)\n    '1000'\n    >>> change_base_str(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(change_base(x, base).split('0'))\n\n\ndef change_base_str_to_int(x: str, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return int representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_str_to_int('22', 3)\n    8\n    >>> change_base_str_to_int('1000', 2)\n    7\n    >>> change_base_str_to_int('111', 2)\n    7\n    \"\"\"\n    return int(x.replace('0', '').replace(' ', '').replace(str(base), ''))\n\n\ndef change_base_int(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return int representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_int(8, 3)\n    22\n    >>> change_base_int(8, 2)\n    1000\n    >>> change_base_int(7, 2)\n    111\n    \"\"\"\n    return int(str(x).replace(str(base), ''))\n\n\ndef change_base_int_to_str(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return int representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_int_to_str(8, 3)\n    '22'\n    >>> change_base_int_to_str(8, 2)\n    '1000'\n    >>> change_base_int_to_str(7, 2)\n    '"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "if base > 10:\n        raise ValueError('base should be less than 10')\n    if base < 2:\n        raise ValueError('base should be greater than 1')\n    base_str = []\n    while x:\n        x, r = divmod(x, base)\n        base_str.append(str(r))\n    return ''.join(reversed(base_str))\n\n\ndef print_decimal(num: int, base: int = 10):\n    \"\"\"Prints num in decimal format.\n    >>> print_decimal(8)\n    8\n    >>> print_decimal(22)\n    22\n    >>> print_decimal(1000)\n    1000\n    >>> print_decimal(111)\n    111\n    \"\"\"\n    if num == 0:\n        return '0'\n    if base > 10:\n        raise ValueError('base should be less than 10')\n    if base < 2:\n        raise ValueError('base should be greater than 1')\n    num_str = []\n    while num:\n        num, r = divmod(num, base)\n        num_str.append(str(r))\n    return ''.join(reversed(num_str))\n\n\ndef print_base(num: int, base: int = 10):\n    \"\"\"Prints num in base format.\n    >>> print_base(8)\n    8\n    >>> print_base(22)\n    22\n    >>> print_base(1000)\n    1000\n    >>> print_base(111)\n    111\n    \"\"\"\n    if base > 10:\n        raise ValueError('base should be less than 10')\n    if base < 2:\n        raise ValueError('base should be greater than 1')\n    num_str = []\n    while num:\n        num, r = divmod(num, base)\n        num_str.append(str(r))\n    return ''.join(num_str)\n\n\ndef print_binary(num: int, base: int = 2):\n    \"\"\"Prints num in binary format.\n    >>> print_binary(8)\n    '100'\n    >>> print_binary(22)\n    '22'\n    >>> print_binary(1000)\n    '"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(x).rjust(int(math.ceil(math.log10(x))), \"0\")\n\ndef change_base_to_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return str(x).rjust(int(math.ceil(math.log10(x))), \"0\")\n\ndef change_base_to_string_dec(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string_dec(8, 3)\n    '22'\n    >>> change_base_to_string_dec(8, 2)\n    '1000'\n    >>> change_base_to_string_dec(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return str(x).rjust(int(math.ceil(math.log10(x))), \"0\")\n\ndef change_base_to_dec(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_dec(8, 3)\n    '22'\n    >>> change_base_to_dec(8, 2)\n    '1000'\n    >>> change_base_to_dec(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return str(x).rjust("
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    elif base == 10:\n        return str(x)\n    else:\n        return \"{:d}\".format(x).zfill(base)\n\n\ndef is_valid_number(x: int) -> bool:\n    \"\"\"Check if input number is valid number\n    >>> is_valid_number(1)\n    True\n    >>> is_valid_number(0)\n    False\n    >>> is_valid_number(10)\n    True\n    >>> is_valid_number(-10)\n    False\n    >>> is_valid_number(-1)\n    False\n    >>> is_valid_number(-100)\n    False\n    >>> is_valid_number(100)\n    False\n    >>> is_valid_number(\"-100\")\n    False\n    >>> is_valid_number(None)\n    False\n    \"\"\"\n    if x == None or x < 0:\n        return False\n    elif x < 1:\n        return False\n    elif x >= 100000000:\n        return False\n    return True\n\n\ndef is_valid_base(x: int, base: int) -> bool:\n    \"\"\"Check if input number is valid base\n    >>> is_valid_base(1, 2)\n    True\n    >>> is_valid_base(1, 3)\n    False\n    >>> is_valid_base(1, 10)\n    True\n    >>> is_valid_base(1, 100)\n    False\n    >>> is_valid_base(1, 100)\n    False\n    >>> is_valid_base(1, 100000)\n    False\n    >>> is_valid_base(1, 100000)\n    False\n    >>> is_valid_base(1, 1000000)\n    True\n    >>> is_valid_base(1, 1000000)\n    True\n    >>> is_valid_base(1, 10000000)\n    False\n    >>> is_valid_base(1, 10000000)\n    False\n    >>> is_valid_base(1, 100000000)\n    True\n    >>> is_valid_base(1, 100000000)\n    True\n    \"\"\"\n    if x < 1 or base < 2:\n        return"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    return str(x).zfill(base)\n\ndef change_base2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are greater than 10.\n    >>> change_base2(8, 3)\n    '222'\n    >>> change_base2(8, 2)\n    '2000'\n    >>> change_base2(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        return str(x)\n    return str(x).zfill(base)\n\ndef change_base3(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are greater than 10.\n    >>> change_base3(8, 3)\n    '222'\n    >>> change_base3(8, 2)\n    '2000'\n    >>> change_base3(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        return str(x)\n    return str(x).zfill(base)\n\ndef change_base4(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are greater than 10.\n    >>> change_base4(8, 3)\n    '222'\n    >>> change_base4(8, 2)\n    '2000'\n    >>> change_base4(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        return str(x)\n    return str(x).zfill(base)\n\ndef change_base5(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are greater than 10.\n    >>> change_base5(8, 3)\n    '222'\n    >>> change_base5(8, 2)\n    '2000'\n    >>> change_base5(7, 2)\n    '111'\n    \"\"\"\n    if base >"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "if base < 10:\n        raise ValueError(\"Base must be greater than 10\")\n    if base == 10:\n        return str(x)\n    elif base == 16:\n        return hex(x)\n    else:\n        return \"{0:b}.{1}\".format(x, base)\n\n\ndef get_base(x: str):\n    \"\"\"Return base of input number x.\n    >>> get_base('100')\n    3\n    >>> get_base('123')\n    10\n    >>> get_base('111')\n    2\n    \"\"\"\n    if \".\" in x:\n        return int(x.split(\".\")[-1])\n    return int(x)\n\n\ndef get_num(x: str):\n    \"\"\"Return numeric value of input number x.\n    >>> get_num('100')\n    100\n    >>> get_num('123')\n    123\n    >>> get_num('111')\n    111\n    \"\"\"\n    return int(x)\n\n\ndef get_num_str(x: int):\n    \"\"\"Return string representation of input number x.\n    >>> get_num_str(100)\n    '100'\n    >>> get_num_str(123)\n    '123'\n    >>> get_num_str(111)\n    '111'\n    \"\"\"\n    return str(x)\n\n\ndef get_str(x: str):\n    \"\"\"Return string representation of input number x.\n    >>> get_str('100')\n    '100'\n    >>> get_str('123')\n    '123'\n    >>> get_str('111')\n    '111'\n    \"\"\"\n    return str(x)\n\n\ndef get_str_num(x: str):\n    \"\"\"Return string representation of input number x.\n    >>> get_str_num('100')\n    '100'\n    >>> get_str_num('123')\n    '123'\n    >>> get_str_num('111')\n    '111'\n    \"\"\"\n    return str(x)\n\n\ndef get_num_base(x: int):\n    \"\"\"Return base of input number x.\n    >>> get_num_base(100)\n    3\n    >>> get_num_base(123"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "return str(x).zfill(base)\n\n\ndef is_base(num: int, base: int):\n    \"\"\"Check if the number is in base base.\n    >>> is_base(8, 3)\n    True\n    >>> is_base(8, 2)\n    False\n    >>> is_base(7, 2)\n    True\n    \"\"\"\n    return str(num).zfill(base) == str(num)\n\n\ndef get_base(num: int, base: int):\n    \"\"\"Get the base of num.\n    >>> get_base(8, 3)\n    3\n    >>> get_base(8, 2)\n    2\n    >>> get_base(7, 2)\n    2\n    \"\"\"\n    return int(num)\n\n\ndef get_num(str: str, base: int):\n    \"\"\"Get the number from string.\n    >>> get_num('22', 3)\n    8\n    >>> get_num('1000', 3)\n    8\n    >>> get_num('111', 2)\n    7\n    \"\"\"\n    return int(str.zfill(base))\n\n\ndef get_num_from_base(num: int, base: int):\n    \"\"\"Get the number from base.\n    >>> get_num_from_base(8, 3)\n    8\n    >>> get_num_from_base(8, 2)\n    8\n    >>> get_num_from_base(7, 2)\n    7\n    \"\"\"\n    return int(num)\n\n\ndef get_base_from_num(num: int, base: int):\n    \"\"\"Get the number from base.\n    >>> get_base_from_num(8, 3)\n    3\n    >>> get_base_from_num(8, 2)\n    2\n    >>> get_base_from_num(7, 2)\n    2\n    \"\"\"\n    return str(num).zfill(base)\n\n\ndef get_num_from_str(str: str, base: int):\n    \"\"\"Get the number from string.\n    >>> get_num_from_str('22', 3)\n    8\n    >>> get_num_from_str('1000', 3)\n    8"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "base_digits = [str(x) for x in range(base)]\n    base_digits.reverse()\n    return ''.join(base_digits)\n\ndef change_base_to_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_string(8, 3)\n    '22'\n    >>> change_base_to_string(8, 2)\n    '1000'\n    >>> change_base_to_string(7, 2)\n    '111'\n    \"\"\"\n    base_digits = [str(x) for x in range(base)]\n    base_digits.reverse()\n    return ''.join(base_digits)\n\ndef change_base_to_int(x: str, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return int representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_int('22', 3)\n    8\n    >>> change_base_to_int('1000', 2)\n    7\n    >>> change_base_to_int('111', 2)\n    7\n    \"\"\"\n    base_digits = [int(x) for x in base]\n    base_digits.reverse()\n    return base_digits[0]\n\ndef change_base_to_int_from_string(x: str, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return int representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_int_from_string('22', 3)\n    8\n    >>> change_base_to_int_from_string('1000', 2)\n    7\n    >>> change_base_to_int_from_string('111', 2)\n    7\n    \"\"\"\n    base_digits = [int(x) for x in base]\n    base_digits.reverse()\n    return base_digits[0]\n\ndef change_base_to_int_from_string_with_ex"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\n\ndef get_base_num(x: int, base: int):\n    \"\"\"Get numerical base of input number x.\n    return integer representation of number.\n    base numbers are less than 10.\n    >>> get_base_num(8, 3)\n    8\n    >>> get_base_num(8, 2)\n    8\n    >>> get_base_num(7, 2)\n    7\n    \"\"\"\n    if base < 10:\n        return int(x)\n    else:\n        return int(x) % base\n\n\ndef get_base_str(x: int, base: int):\n    \"\"\"Get string representation of number x in the given base.\n    return string representation of number.\n    base numbers are less than 10.\n    >>> get_base_str(8, 3)\n    '8'\n    >>> get_base_str(8, 2)\n    '8'\n    >>> get_base_str(7, 2)\n    '7'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\n\ndef get_base_num_str(x: int, base: int):\n    \"\"\"Get numerical string representation of number x in the given base.\n    return string representation of number.\n    base numbers are less than 10.\n    >>> get_base_num_str(8, 3)\n    '8'\n    >>> get_base_num_str(8, 2)\n    '8'\n    >>> get_base_num_str(7, 2)\n    '7'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\n\ndef get_base_num_str_in_base(x: int, base: int):\n    \"\"\"Get numerical string representation of number x in the given base.\n    return string representation of number.\n    base numbers are less than 10.\n    >>> get_base_num_str_in_base(8, 3)\n    '8'"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\n\ndef is_prime(x: int, base: int):\n    \"\"\"Check if input number is prime number.\n    base numbers are less than 10.\n    >>> is_prime(8, 3)\n    True\n    >>> is_prime(8, 2)\n    False\n    >>> is_prime(7, 2)\n    True\n    >>> is_prime(7, 3)\n    False\n    \"\"\"\n    if base < 10:\n        return x == 1\n    else:\n        if base == 2:\n            return x == 2\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(math.ceil(math.sqrt(x))) + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n\n\ndef is_palindrome(x: int, base: int):\n    \"\"\"Check if input number is palindrome.\n    base numbers are less than 10.\n    >>> is_palindrome(8, 3)\n    True\n    >>> is_palindrome(8, 2)\n    False\n    >>> is_palindrome(7, 2)\n    False\n    >>> is_palindrome(7, 3)\n    True\n    \"\"\"\n    if base < 10:\n        return x == x % 10\n    else:\n        return str(x).zfill(base)[::-1] == str(x).zfill(base)[::-1]\n\n\ndef is_square(x: int, base: int):\n    \"\"\"Check if input number is square number.\n    base numbers are less than 10.\n    >>> is_square(8, 3)\n    False\n    >>> is_square(8, 2)\n    True\n    >>> is_square(7, 2)\n    False\n    >>> is_square(7, 3)\n    True\n    \"\"\"\n    if base < 10:\n        return x == x * x\n    else:\n        return str(x).zfill(base)[::-1] == str(x).zfill(base)[::-1]\n\n\ndef is"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "while x > 0:\n        x, r = divmod(x, base)\n        yield chr(r)\n    yield '0'\n\ndef convert_to_decimal(n: int, base: int):\n    \"\"\"Convert input number x to decimal representation with base.\n    >>> convert_to_decimal(8, 3)\n    '22'\n    >>> convert_to_decimal(8, 2)\n    '1000'\n    >>> convert_to_decimal(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(change_base(n, base))\n\ndef convert_to_binary(n: int, base: int):\n    \"\"\"Convert input number x to binary representation with base.\n    >>> convert_to_binary(8, 3)\n    '22'\n    >>> convert_to_binary(8, 2)\n    '1000'\n    >>> convert_to_binary(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(change_base(n, base))\n\ndef is_prime(n: int):\n    \"\"\"Check if n is prime number\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(31)\n    False\n    >>> is_prime(127)\n    True\n    >>> is_prime(1000)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n < 2:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    r = int(math.sqrt(n))\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return False\n        f += 6\n    return True\n\ndef is"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "return hex(x).replace('0x', '').zfill(base)\n\n\ndef get_base(x: str, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return integer representation after the conversion.\n    base numbers are less than 10.\n    >>> get_base('22', 3)\n    8\n    >>> get_base('1000', 2)\n    8\n    >>> get_base('111', 2)\n    7\n    \"\"\"\n    return int(x, base)\n\n\ndef get_base_string(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> get_base_string(8, 3)\n    '22'\n    >>> get_base_string(8, 2)\n    '1000'\n    >>> get_base_string(7, 2)\n    '111'\n    \"\"\"\n    return hex(x).replace('0x', '').zfill(base)\n\n\ndef get_base_int(x: str, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return integer representation after the conversion.\n    base numbers are less than 10.\n    >>> get_base_int('22', 3)\n    8\n    >>> get_base_int('1000', 2)\n    8\n    >>> get_base_int('111', 2)\n    7\n    \"\"\"\n    return int(x, base)\n\n\ndef get_base_str(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> get_base_str(8, 3)\n    '22'\n    >>> get_base_str(8, 2)\n    '1000'\n    >>> get_base_str(7, 2)\n    '111'\n    \"\"\"\n    return hex(x).replace('0x', '').zfill(base)\n\n\ndef get_base_float(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return float representation after the conversion"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "if base < 10:\n        return str(x)\n    return ''.join(map(lambda x: str(x), [x] * int(math.ceil(math.log(x, base))))).rstrip('0')\n\ndef get_digits(x: int, base: int):\n    \"\"\"Get digits of input number x in given base.\n    >>> get_digits(8, 3)\n    '22'\n    >>> get_digits(8, 2)\n    '1000'\n    >>> get_digits(7, 2)\n    '111'\n    \"\"\"\n    return change_base(x, base)\n\ndef get_base(x: int, base: int):\n    \"\"\"Get base of input number x in given base.\n    >>> get_base(8, 3)\n    3\n    >>> get_base(8, 2)\n    2\n    >>> get_base(7, 2)\n    2\n    \"\"\"\n    return int(change_base(x, base))\n\ndef get_digits_and_base(x: int):\n    \"\"\"Get digits of input number x in given base.\n    >>> get_digits_and_base(8)\n    (22, 3)\n    >>> get_digits_and_base(8)\n    (1000, 2)\n    >>> get_digits_and_base(7)\n    (111, 2)\n    \"\"\"\n    return get_digits(x, get_base(x, get_base(x)))\n\ndef is_palindrome(x: int):\n    \"\"\"Check whether x is a palindrome.\n    >>> is_palindrome(8)\n    True\n    >>> is_palindrome(7)\n    False\n    \"\"\"\n    return get_digits_and_base(x)[0] == get_digits_and_base(x)[1]\n\ndef get_palindromes(n: int):\n    \"\"\"Get all palindromes of given number.\n    >>> get_palindromes(8)\n    [8]\n    >>> get_palindromes(7)\n    []\n    \"\"\"\n    return [x for x in range(1, n"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "result = \"\"\n    while x:\n        result = str(x % base) + result\n        x /= base\n    return result\n\ndef get_base_numbers(base: int) -> list:\n    \"\"\"Return list of base numbers up to base.\n    >>> get_base_numbers(3)\n    [0, 1, 2]\n    >>> get_base_numbers(2)\n    [0, 1]\n    >>> get_base_numbers(8)\n    [2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    result = []\n    while base:\n        result.append(base)\n        base /= 10\n    return result\n\ndef get_base_string(base: int) -> str:\n    \"\"\"Return string representation of base numbers.\n    >>> get_base_string(3)\n    '0'\n    >>> get_base_string(2)\n    '0'\n    >>> get_base_string(8)\n    '22'\n    \"\"\"\n    result = \"\"\n    for number in get_base_numbers(base):\n        result = str(number) + result\n    return result\n\ndef get_string_base(base: int) -> str:\n    \"\"\"Return string representation of base numbers.\n    >>> get_string_base(3)\n    '0'\n    >>> get_string_base(2)\n    '0'\n    >>> get_string_base(8)\n    '22'\n    \"\"\"\n    result = \"\"\n    for number in get_base_numbers(base):\n        result = str(number) + result\n    return result\n\ndef get_string_base_length(base: int) -> int:\n    \"\"\"Return string representation of base numbers.\n    >>> get_string_base_length(3)\n    0\n    >>> get_string_base_length(2)\n    0\n    >>> get_string_base_length(8)\n    3\n    \"\"\"\n    result = 0\n    for number in get_base_numbers(base):\n        result += 1\n    return result\n\ndef get_string_base_length_with_padding(base: int) -> int:"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "return str(x).zfill(int(len(str(x)) / base))\n\n\ndef get_num(x: int, base: int):\n    \"\"\"Return numerical base of input number x.\n    base numbers are less than 10.\n    >>> get_num(8, 3)\n    8\n    >>> get_num(8, 2)\n    8\n    >>> get_num(7, 2)\n    7\n    \"\"\"\n    return int(x) % base\n\n\ndef get_base(x: int, base: int):\n    \"\"\"Return string representation of input number x.\n    base numbers are less than 10.\n    >>> get_base(8, 3)\n    '8'\n    >>> get_base(8, 2)\n    '8'\n    >>> get_base(7, 2)\n    '7'\n    \"\"\"\n    return str(x) % base\n\n\ndef get_dec(x: int, base: int):\n    \"\"\"Return string representation of input number x.\n    base numbers are less than 10.\n    >>> get_dec(8, 3)\n    '8'\n    >>> get_dec(8, 2)\n    '08'\n    >>> get_dec(7, 2)\n    '07'\n    \"\"\"\n    return str(x) % base\n\n\ndef get_base_str(x: int, base: int):\n    \"\"\"Return string representation of input number x.\n    base numbers are less than 10.\n    >>> get_base_str(8, 3)\n    '8'\n    >>> get_base_str(8, 2)\n    '08'\n    >>> get_base_str(7, 2)\n    '07'\n    \"\"\"\n    return str(x) % base\n\n\ndef get_dec_str(x: int, base: int):\n    \"\"\"Return string representation of input number x.\n    base numbers are less than 10.\n    >>> get_dec_str(8, 3)\n    '8'\n    >>> get_dec_str(8, 2)\n    '08'\n    >>> get_dec_str(7, 2)\n    '07'\n    \"\"\"\n    return str(x) % base\n\n\ndef get_num_"
    }
  ]
}