{
  "timestamp": "2025-09-14T17:05:38.212458",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "humaneval",
  "problem_number": 128,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n\n    return sum(arr) * prod(signs(arr))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for a in arr:\n        res += a * prod_signs(arr[:i] + arr[i + 1:])\n    return res\n\n\ndef sum_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> sum_signs([1, 2, 2, -4]) == 8\n    >>> sum_signs([0, 1]) == 0\n    >>> sum_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    res = 0\n    for a in arr:\n        res += a * sum_signs(arr[:i] + arr[i + 1:])\n    return res\n\n\ndef main():\n    n = int(input())\n    arr = [int(a) for a in input().split()]\n    assert 1 <= n <= 100\n    assert arr\n    assert 1 <= len(arr) <= n\n    assert 1 <= prod_signs(arr) <= n\n    assert 1 <= sum_signs(arr) <= n\n    print(prod_signs(arr))\n    print(sum_signs(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    return sum(abs(i) * prod_signs(arr[1:]) for i in arr)\n\ndef prod_signs_recursive(arr, sign):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_recursive([1, 2, 2, -4], 1) == 2\n    >>> prod_signs_recursive([0, 1], 0) == 0\n    >>> prod_signs_recursive([], 0) == None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(arr[0] * prod_signs_recursive(arr[1:], sign) for sign in (1, -1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n\n    signs = [1 if arr[i] > 0 else -1 for i in range(len(arr))]\n    return sum(signs) * prod(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "res = 0\n    for x in arr:\n        if x == 0:\n            continue\n        if x > 0:\n            res += x\n        else:\n            res -= x\n    return res\n\n\ndef prod_signs2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs2([1, 2, 2, -4]) == -9\n    >>> prod_signs2([0, 1]) == 0\n    >>> prod_signs2([]) == None\n    \"\"\"\n    res = 0\n    for x in arr:\n        if x == 0:\n            continue\n        if x > 0:\n            res += x * x\n        else:\n            res += x * x * -1\n    return res\n\n\ndef prod_signs3(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs3([1, 2, 2, -4]) == -9\n    >>> prod_signs3([0, 1]) == 0\n    >>> prod_signs3([]) == None\n    \"\"\"\n    res = 0\n    for x in arr:\n        if x == 0:\n            continue\n        if x > 0:\n            res += x * x * x\n        else:\n            res += x * x * x * -1\n    return res\n\n\ndef prod_signs4(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs4([1, 2, 2, -4]) == -9\n    >>> prod_sign"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n\n    prod_signs = [0 for _ in arr]\n    for i in range(len(arr)):\n        prod_signs[i] = arr[i] * prod_signs[i + 1]\n    return prod_signs[0]"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n\n    ret = 0\n    for i in arr:\n        ret += i * prod_signs(arr[:i])\n\n    return ret"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n\n    ret = 0\n    for i in arr:\n        ret = ret + i * prod_signs(arr[:i])\n\n    return ret\n\ndef is_prime(n):\n    \"\"\"\n    Check if n is a prime number.\n    Note: return True for 0, False for negative numbers.\n\n    Example:\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(0)\n    True\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_pandigital(n):\n    \"\"\"\n    Check if n is a pandigital number.\n    Note: return True for 1, False for other numbers.\n\n    Example:\n    >>> is_pandigital(2)\n    False\n    >>> is_pandigital(15)\n    True\n    >>> is_pandigital(0)\n    True\n    >>> is_pandigital(4)\n    False\n    >>> is_pandigital(1)\n    True\n    >>> is_pandigital(6)\n    False\n    >>> is_pandigital(5)\n    True\n    >>> is_pandigital(8)\n    False\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n < 2:\n        return True\n    n = str(n)\n    if len(n)!= 10:\n        return False\n    for i in range(10):\n        if n[i]!= '0' and n[i]!= str(i):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    sum_signs = 0\n    for num in arr:\n        if num == 0:\n            continue\n        sum_signs += num * (num * (num * -1))\n    return sum_signs\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    if (len(sys.argv) <= 1):\n        sys.exit(\"Please enter file name as first argument\")\n    fname = sys.argv[1]\n\n    with open(fname, \"r\") as f:\n        data = f.readlines()\n        arr = [int(x.strip()) for x in data]\n\n    print(\"Prod. signs of %s: %s\" % (fname, prod_signs(arr)))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return sum(abs(i) * prod(signs(arr[i])) for i in range(len(arr)))\n\n\ndef prod(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    product of all elements in the array.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod([1, 2, 3, 4]) == 24\n    >>> prod([]) == None\n    \"\"\"\n    return reduce(lambda x, y: x * y, arr)\n\n\ndef signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    list of integers representing signs of each number in the array.\n    Note: return None for empty arr.\n\n    Example:\n    >>> signs([1, 2, 2, -4]) == [1, -1, 0, -1]\n    >>> signs([0, 1]) == None\n    >>> signs([]) == None\n    \"\"\"\n    return [1 if i > 0 else -1 for i in arr]\n\n\ndef main():\n    \"\"\"\n    Sample Input:\n    [1, 2, 2, -4]\n    Sample Output:\n    -9\n    \"\"\"\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod([1, 2, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 9.996625693815517,
      "candidate": "if not arr:\n        return None\n\n    res = 0\n    for x in arr:\n        res = res + x * prod_signs(arr[:i] + arr[i+1:])\n    return res"
    },
    {
      "rank": 13,
      "score": 9.97108792940294,
      "candidate": "if not arr:\n        return None\n    s = 0\n    for i in arr:\n        s += i * prod_signs(arr[:i])\n    return s\n\n\ndef test_prod_signs():\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([]) == None\n    assert prod_signs([-1, -2, -2, 1]) == 1\n    assert prod_signs([-1, -2, -2, -1]) == -1\n    assert prod_signs([-1, -2, -2, 0]) == 0\n    assert prod_signs([-1, -2, -2, 1, -1]) == -1\n    assert prod_signs([-1, -2, -2, -1, -1]) == -1\n    assert prod_signs([-1, -2, -2, -1, 0]) == 0\n    assert prod_signs([-1, -2, -2, -1, 1, -1]) == -1\n    assert prod_signs([-1, -2, -2, -1, 1, 0]) == 0\n    assert prod_signs([-1, -2, -2, -1, 0, 1]) == 1"
    },
    {
      "rank": 14,
      "score": 9.943555924878366,
      "candidate": "if not arr:\n        return None\n    result = 0\n    for i in arr:\n        result = result + i * prod_signs(arr[:i])\n    return result\n\n\nif __name__ == '__main__':\n    arr = [1, -2, 3, -4, 5]\n    print prod_signs(arr)"
    },
    {
      "rank": 15,
      "score": 9.941461656319166,
      "candidate": "if len(arr) == 0:\n        return None\n\n    signs = [1] * len(arr)\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            signs[i] = -1\n        elif arr[i] > 0:\n            signs[i] = 1\n\n    return sum(arr) * prod(signs)\n\n# ------------------------------------------------------------\n# Unit Tests\n# ------------------------------------------------------------\ndef test_prod_signs():\n    assert prod_signs([]) == None\n    assert prod_signs([1]) == 1\n    assert prod_signs([1, 1]) == 1\n    assert prod_signs([1, -1]) == -1\n    assert prod_signs([1, 0]) == 0\n    assert prod_signs([1, 1, 1]) == 3\n    assert prod_signs([-1, -1, 1]) == -3\n    assert prod_signs([-1, 0, -1]) == 0\n    assert prod_signs([1, 0, 0, -1]) == 0\n    assert prod_signs([0, 1, 0, -1, 0, -1, 0, -1]) == 0\n    assert prod_signs([1, -1, -1, -1, -1, -1, -1, -1]) == -9\n\nif __name__ == \"__main__\":\n    test_prod_signs()"
    },
    {
      "rank": 16,
      "score": 9.925248162383532,
      "candidate": "if not arr:\n        return None\n\n    # build sign array\n    signs = [0] * len(arr)\n    for i in range(len(arr)):\n        signs[i] = 1 if arr[i] >= 0 else -1\n\n    # compute product of signs\n    product = 1\n    for i in range(len(signs)):\n        product *= signs[i]\n    return product\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        import doctest\n        doctest.testmod()\n    else:\n        test_cases = open(sys.argv[1], 'r')\n        for test in test_cases:\n            test = test.rstrip('\\n')\n            if not test: continue # ignore an empty line\n            print(prod_signs(test.split(' ')))\n        test_cases.close()"
    },
    {
      "rank": 17,
      "score": 9.903729429895922,
      "candidate": "if not arr:\n        return None\n    # Return 0 for empty array.\n    return sum([abs(i) * prod_signs(arr[:i]) for i in range(len(arr))])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.884840307260053,
      "candidate": "if not arr:\n        return None\n\n    if arr[0] == 0:\n        return 0\n\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        res += arr[i] * prod_signs(arr[:i])\n    return res\n\nif __name__ == '__main__':\n    arr = [-1, -2, -3]\n    print(prod_signs(arr))"
    },
    {
      "rank": 19,
      "score": 9.874560739103865,
      "candidate": "if not arr:\n        return None\n    signs = sum([x * y for x, y in zip(arr, [-1, 1, 0])])\n    return sum([abs(x) for x in arr]) * signs"
    },
    {
      "rank": 20,
      "score": 9.859428117689756,
      "candidate": "if not arr:\n        return None\n    return sum([abs(x) * prod_signs(arr[1:]) for x in arr])\n\n\n# https://www.codewars.com/kata/sum-of-product-of-signs/train/python\ndef sum_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> sum_signs([1, 2, 2, -4]) == -9\n    >>> sum_signs([0, 1]) == 0\n    >>> sum_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    return sum([abs(x) * sum_signs(arr[1:]) for x in arr])\n\n\n# https://www.codewars.com/kata/sum-of-product-of-signs/train/python\ndef sum_signs_2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> sum_signs_2([1, 2, 2, -4]) == -9\n    >>> sum_signs_2([0, 1]) == 0\n    >>> sum_signs_2([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    return sum([abs(x) * sum_signs_2(arr[1:]) for x in arr])\n\n\n# https://www.codewars.com/kata/sum-of-product-of-signs/train/python\ndef sum_signs_3(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return"
    },
    {
      "rank": 21,
      "score": 9.8498403275203,
      "candidate": "if not arr:\n        return None\n    return sum(abs(a) * prod(sign(a)) for a in arr)\n\n\ndef prod(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    product of all integers in the array.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod([1, 2, 3]) == 6\n    >>> prod([]) == None\n    >>> prod([-1, 2, 1]) == -6\n    >>> prod([-1, -2, -3]) == 6\n    \"\"\"\n    if not arr:\n        return None\n    return reduce(lambda x, y: x * y, arr)\n\n\ndef sign(n):\n    \"\"\"\n    You are given a number n and you need to return 1 if n is positive\n    and -1 if n is negative and 0 if n is zero.\n    Note: return None for negative zero.\n\n    Example:\n    >>> sign(3) == 1\n    >>> sign(-3) == -1\n    >>> sign(0) == 0\n    >>> sign(None) == None\n    \"\"\"\n    if n is None:\n        return None\n    return 1 if n > 0 else -1 if n < 0 else 0\n\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        sys.exit(\"Please enter a filename.\")\n    filename = sys.argv[1]\n    with open(filename, 'r') as f:\n        arr = [int(x) for x in f.read().split(' ')]\n    print(prod_signs(arr))"
    },
    {
      "rank": 22,
      "score": 9.83076949992351,
      "candidate": "if not arr:\n        return None\n\n    ret = 0\n    for num in arr:\n        ret += num * prod_signs(arr[:idx] + arr[idx + 1:])\n    return ret\n\n\n# Your ProductSigns object will be instantiated and called as such:\n# obj = ProductSigns(arr)\n# param_1 = obj.prod_signs(arr)"
    },
    {
      "rank": 23,
      "score": 9.723416256498492,
      "candidate": "if not arr:\n        return None\n    return sum([a*b for a, b in zip(arr, arr[1:]) if b!=0])\n\n\ndef prod_signs_non_zero(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_non_zero([1, 2, 2, -4]) == -9\n    >>> prod_signs_non_zero([0, 1]) == 0\n    >>> prod_signs_non_zero([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    return sum([a*b for a, b in zip(arr, arr[1:]) if b!=0])\n\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        sys.exit(\"Please specify an integer array as first argument\")\n    arr = [int(x) for x in sys.argv[1].split(',')]\n    print(prod_signs(arr))\n    print(prod_signs_non_zero(arr))"
    },
    {
      "rank": 24,
      "score": 9.52167993883555,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for i in arr:\n        res += i\n        res *= (i < 0) - (i > 0)\n    return res\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.503107771349777,
      "candidate": "if not arr:\n        return None\n\n    return sum(arr) * prod(sgn(i) for i in arr)\n\ndef sgn(x):\n    \"\"\"\n    You are given an integer x.\n    If x is negative, return -1;\n    If x is positive, return 1;\n    If x is 0, return 0.\n    Note: return None for x = -1 or 1.\n\n    Example:\n    >>> sgn(1) == 1\n    >>> sgn(-1) == -1\n    >>> sgn(0) == 0\n    >>> sgn(None) == None\n    \"\"\"\n    if x == None:\n        return None\n\n    if x < 0:\n        return -1\n    elif x > 0:\n        return 1\n    else:\n        return 0\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.234050852198141,
      "candidate": "if not arr:\n        return None\n\n    res = 0\n    for i in arr:\n        if i:\n            res += i\n    return res\n\nif __name__ == '__main__':\n    arr = [1, -1, 2, -2, -3]\n    print(prod_signs(arr))"
    },
    {
      "rank": 27,
      "score": 9.226766272351448,
      "candidate": "if not arr:\n        return None\n    prod = 1\n    res = 0\n    for x in arr:\n        if x == 0:\n            continue\n        res += x * prod\n        prod *= -x\n    return res\n\n\nif __name__ == '__main__':\n    arr = [1, 2, -4, -5, -6]\n    print(prod_signs(arr))"
    },
    {
      "rank": 28,
      "score": 9.21346272767743,
      "candidate": "if not arr:\n        return None\n    total = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 0:\n            continue\n        total += arr[i] * (arr[i] + 1)\n    return total\n\nif __name__ == \"__main__\":\n    arr = [2, -3, 4, -1, 0, 1, -5]\n    print(prod_signs(arr))"
    },
    {
      "rank": 29,
      "score": 9.205959372648458,
      "candidate": "if not arr:\n        return None\n    signs = [1, -1]\n    return sum(arr[i] * signs[i] for i in range(len(arr)))"
    },
    {
      "rank": 30,
      "score": 9.177268828905222,
      "candidate": "if len(arr) == 0:\n        return None\n    ret = 0\n    for i in range(len(arr)):\n        ret += arr[i] * prod_signs(arr[:i] + arr[i+1:])\n    return ret\n\nif __name__ == \"__main__\":\n    arr = [-2, -2, 0, 1, 2, 2]\n    print(prod_signs(arr))"
    },
    {
      "rank": 31,
      "score": 9.122564458729856,
      "candidate": "if not arr:\n        return None\n    s = 0\n    for i in arr:\n        s += i\n        if i == 0:\n            continue\n        s *= i\n    return s\n\n\nif __name__ == '__main__':\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 32,
      "score": 8.95994420569242,
      "candidate": "if not arr:\n        return None\n    return sum(arr) * prod(signs(arr))\n\ndef prod(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    product of all numbers in the array.\n\n    Example:\n    >>> prod([1, 2, 3, 4]) == 24\n    >>> prod([]) == 1\n    >>> prod([1, 2, 3, 4, 5]) == 120\n    \"\"\"\n    return reduce(lambda x, y: x * y, arr)\n\ndef signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    list of integers with sign of each number in the array.\n\n    Example:\n    >>> signs([1, 2, 2, -4]) == [1, -1, 1, -1]\n    >>> signs([]) == []\n    >>> signs([1, 2, 3, 4, 5]) == [1, -1, 1, -1, 1]\n    \"\"\"\n    if not arr:\n        return []\n    return [x * y for x, y in zip(arr[:-1], arr[1:])]\n\ndef product(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    product of all numbers in the array.\n\n    Example:\n    >>> product([1, 2, 3, 4]) == 24\n    >>> product([]) == 1\n    >>> product([1, 2, 3, 4, 5]) == 120\n    \"\"\"\n    return reduce(lambda x, y: x * y, arr)\n\ndef main():\n    arr = [1, 2, 2, -4]\n    print(prod_signs(arr))\n    print(prod(arr))\n    print(signs(arr))\n    print(product(arr))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.946210893390457,
      "candidate": "if not arr:\n        return None\n    total = 0\n    for i in arr:\n        if i:\n            total += i\n    return total"
    },
    {
      "rank": 34,
      "score": 8.932217008005624,
      "candidate": "if len(arr) == 0:\n        return None\n    res = 0\n    for i in arr:\n        res += i\n    return res * prod_signs(arr[1:])\n\nif __name__ == '__main__':\n    print(prod_signs([1, -1, 0]))"
    },
    {
      "rank": 35,
      "score": 8.910084504002544,
      "candidate": "if len(arr) == 0:\n        return None\n    res = 0\n    for i in arr:\n        res += i * prod_signs(arr[:i])\n    return res\n\ndef prod_signs_2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_2([1, 2, 2, -4]) == -9\n    >>> prod_signs_2([0, 1]) == 0\n    >>> prod_signs_2([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    res = 0\n    for i in range(len(arr)):\n        if i == 0:\n            res += arr[0] * prod_signs_2(arr[1:])\n        else:\n            res += arr[i] * prod_signs_2(arr[:i])\n    return res\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        sys.exit(\"Please enter an integer to test\")\n    n = int(sys.argv[1])\n    arr = [random.randint(-1, 1) for _ in range(n)]\n    print(\"Prod sign = \" + str(prod_signs(arr)))\n    print(\"Prod sign 2 = \" + str(prod_signs_2(arr)))"
    },
    {
      "rank": 36,
      "score": 8.85571690049604,
      "candidate": "if not arr:\n        return None\n    result = 0\n    for num in arr:\n        result += num * (num * (num * -1))\n    return result\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, -4]\n    print(prod_signs(arr))"
    },
    {
      "rank": 37,
      "score": 8.855395696632057,
      "candidate": "if not arr:\n        return None\n\n    sign = 0\n    result = 0\n    for num in arr:\n        if num > 0:\n            sign += num\n        elif num < 0:\n            sign -= num\n        else:\n            result += num\n\n    if sign < 0:\n        result *= -1\n    return result"
    },
    {
      "rank": 38,
      "score": 8.8281618090209,
      "candidate": "if len(arr) == 0:\n        return None\n    res = 0\n    for i in range(len(arr)):\n        res += arr[i] * prod_signs(arr[:i] + arr[i + 1:])\n    return res\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, -4]\n    print(prod_signs(arr))"
    },
    {
      "rank": 39,
      "score": 8.76828871349479,
      "candidate": "if len(arr) == 0:\n        return None\n    res = 0\n    for x in arr:\n        res += abs(x) * prod_signs(arr[:len(arr) - 1])\n    return res\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.750282588864879,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for i in arr:\n        res = res + (i * prod_signs(arr[:i]))\n    return res\n\nif __name__ == \"__main__\":\n    print(prod_signs([-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1]))"
    },
    {
      "rank": 41,
      "score": 8.715724466237427,
      "candidate": "if not arr:\n        return None\n    ret = 0\n    for num in arr:\n        ret += num * num\n        ret *= num > 0 and 1 or -1\n    return ret\n\nif __name__ == '__main__':\n    import sys\n    if (sys.version_info < (3, 0)):\n        sys.exit(\"Sorry, Python 3 is required.\")\n    print(prod_signs([2, 3, -2, -4]))"
    },
    {
      "rank": 42,
      "score": 8.632293453617281,
      "candidate": "if len(arr) == 0:\n        return None\n    return sum([abs(i) * prod_signs(arr[:i]) for i in range(1, len(arr))])\n\nif __name__ == \"__main__\":\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([]) == None"
    },
    {
      "rank": 43,
      "score": 8.625262456968262,
      "candidate": "if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return sum(arr[0] * prod_signs(arr[1:]) for arr in permutations(arr))\n\nif __name__ == \"__main__\":\n    for arr in permutations(range(0, 10)):\n        print(arr, prod_signs(arr))"
    },
    {
      "rank": 44,
      "score": 8.625142247198651,
      "candidate": "if not arr:\n        return None\n    return sum([x * y for x, y in zip(arr, [-1, 1, 0])])"
    },
    {
      "rank": 45,
      "score": 8.610076160146226,
      "candidate": "if not arr:\n        return None\n\n    magnitudes = []\n    for i in arr:\n        if i == 0:\n            return None\n        magnitudes.append(abs(i))\n\n    return sum(magnitudes) * prod(sign(i) for i in arr)\n\n\nif __name__ == '__main__':\n    print(prod_signs([0, 1, 0, -1]))\n    print(prod_signs([0, 1, 0, 0]))\n    print(prod_signs([1, -1, 1, 1]))\n    print(prod_signs([1, 0, 0, 0]))\n    print(prod_signs([-1, -1, -1, 1]))\n    print(prod_signs([-1, -1, 1, 0]))\n    print(prod_signs([-1, -1, 0, 0]))\n    print(prod_signs([-1, 1, 0, 0]))\n    print(prod_signs([-1, 0, 0, 0]))\n    print(prod_signs([0, 0, 0, 0]))\n    print(prod_signs([1, 1, 1, 1]))"
    },
    {
      "rank": 46,
      "score": 8.606486429141842,
      "candidate": "if not arr:\n        return None\n\n    return sum([abs(i) * (i * s) for i, s in zip(arr, [-1, 1, 0])])\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.60156811074208,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for i in arr:\n        res += i * prod_signs(arr[:i])\n    return res"
    },
    {
      "rank": 48,
      "score": 8.548876241946822,
      "candidate": "if not arr:\n        return None\n\n    prod = 1\n    for num in arr:\n        prod *= num\n    return prod\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, -4]\n    print prod_signs(arr)\n    arr = [0, 1]\n    print prod_signs(arr)\n    arr = []\n    print prod_signs(arr)"
    },
    {
      "rank": 49,
      "score": 8.542875062379007,
      "candidate": "if not arr:\n        return None\n\n    res = 0\n    for i in arr:\n        if i == 0:\n            continue\n        if i == 1:\n            res += 1\n        else:\n            res += i * (-1 if i % 2 == 0 else 1)\n    return res"
    },
    {
      "rank": 50,
      "score": 8.499905739299377,
      "candidate": "if not arr:\n        return None\n    return sum([(i * j) for i, j in zip(arr, [-1, 1, 0])])"
    },
    {
      "rank": 51,
      "score": 8.490324832712195,
      "candidate": "if not arr:\n        return None\n\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod"
    },
    {
      "rank": 52,
      "score": 8.478208546788407,
      "candidate": "if not arr:\n        return None\n    return sum(arr) * prod_signs(arr[1:])"
    },
    {
      "rank": 53,
      "score": 8.426531424889468,
      "candidate": "if not arr:\n        return None\n    else:\n        return sum(map(lambda x: abs(x) * x, arr))"
    },
    {
      "rank": 54,
      "score": 8.408439383654278,
      "candidate": "if not arr:\n        return None\n    return sum(s*p for s, p in zip(arr, prod(arr)))\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, -4]\n    print(prod_signs(arr))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 55,
      "score": 8.375312293858853,
      "candidate": "if not arr:\n        return None\n    return sum(arr) * prod_signs(arr[1:])"
    },
    {
      "rank": 56,
      "score": 8.351614956112536,
      "candidate": "if not arr:\n        return None\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod"
    },
    {
      "rank": 57,
      "score": 8.334608500525688,
      "candidate": "if not arr:\n        return None\n\n    ans = 0\n    for num in arr:\n        ans += num * prod_signs(arr[:i] + [num] + arr[i+1:])\n    return ans"
    },
    {
      "rank": 58,
      "score": 8.327375965969855,
      "candidate": "res = 0\n    if not arr:\n        return None\n\n    for a in arr:\n        res += a\n    return res\n\nif __name__ == \"__main__\":\n    arr = [1, 2, -4, 2, 1, -1, 1, -2, 0]\n    print(prod_signs(arr))"
    },
    {
      "rank": 59,
      "score": 8.298597569547805,
      "candidate": "if len(arr) == 0:\n        return None\n    ret = 0\n    for a in arr:\n        ret += a * prod_signs(arr[:i] + arr[i + 1:])\n    return ret\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, -4]\n    print prod_signs(arr)"
    },
    {
      "rank": 60,
      "score": 8.2938925966498,
      "candidate": "if not arr:\n        return None\n    prod = 1\n    for num in arr:\n        prod *= num\n    return prod\n\n# TESTS\nfor arr, expected in [\n    ([1, 2, 2, -4], -9),\n    ([0, 1], 0),\n    ([], None),\n]:\n    assert prod_signs(arr) == expected"
    },
    {
      "rank": 61,
      "score": 8.289838256518838,
      "candidate": "if not arr:\n        return None\n\n    result = 0\n    for num in arr:\n        if num:\n            result = result + num * num\n    return result"
    },
    {
      "rank": 62,
      "score": 8.212735598038213,
      "candidate": "if not arr:\n        return None\n    prod = 1\n    for num in arr:\n        prod *= num\n    return prod"
    },
    {
      "rank": 63,
      "score": 8.211579567659316,
      "candidate": "if not arr:\n        return None\n\n    if not isinstance(arr, list):\n        arr = list(arr)\n\n    sign = 0\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n\n        if arr[i] == 1:\n            sign += 1\n        else:\n            sign -= 1\n\n        res += abs(arr[i]) * sign\n\n    return res"
    },
    {
      "rank": 64,
      "score": 8.209707251476969,
      "candidate": "if not arr:\n        return None\n\n    res = 0\n    for i in arr:\n        res = res + i if i > 0 else res - i\n    return res"
    },
    {
      "rank": 65,
      "score": 8.2048573255218,
      "candidate": "if not arr:\n        return None\n    if not arr:\n        return None\n    return sum([abs(i) * prod_signs(arr[:i]) for i in range(1, len(arr))])"
    },
    {
      "rank": 66,
      "score": 8.185309335307622,
      "candidate": "if not arr:\n        return None\n    sign = 0\n    res = 0\n    for i in arr:\n        if i!= 0:\n            sign = i\n        res += abs(i) * sign\n    return res"
    },
    {
      "rank": 67,
      "score": 8.172253082181854,
      "candidate": "if not arr:\n        return None\n    # we need to check both signs of numbers in arr\n    # and sum of all magnitudes of each number in arr\n    return sum(arr[i] * arr[j] for i in range(len(arr)) for j in range(len(arr))\n               if arr[i] * arr[j]!= 0)"
    },
    {
      "rank": 68,
      "score": 8.143591138329747,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for num in arr:\n        res += num * (num > 0)\n    return res\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, -2, 3, -4, 5, -6, 7]\n    print(prod_signs(arr))"
    },
    {
      "rank": 69,
      "score": 8.121884567141883,
      "candidate": "if len(arr) == 0:\n        return None\n    res = 0\n    for i in arr:\n        res += abs(i) * prod_signs(arr[:i])\n    return res\n\n\nif __name__ == \"__main__\":\n    assert prod_signs([1, 2, 2, -4]) == -9, \"1,2,2,-4\"\n    assert prod_signs([0, 1]) == 0, \"0,1\"\n    assert prod_signs([]) == None, \"empty\""
    },
    {
      "rank": 70,
      "score": 8.08452234024709,
      "candidate": "if not arr:\n        return None\n    sgn = 1\n    ret = 0\n    for v in arr:\n        if v == 0:\n            continue\n        if v == 1:\n            ret += sgn\n        elif v == -1:\n            ret -= sgn\n        sgn *= -1\n    return ret"
    },
    {
      "rank": 71,
      "score": 8.040197642997851,
      "candidate": "if not arr:\n        return None\n    total = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if num == 1:\n            total += num\n        else:\n            total -= num\n    return total"
    },
    {
      "rank": 72,
      "score": 8.024835682833125,
      "candidate": "if not arr:\n        return None\n    return sum([abs(i) * sign for i, sign in zip(arr, [+1, -1, 0])])\n\nif __name__ == \"__main__\":\n    arr = [1, 2, -4, -1, 0]\n    print(prod_signs(arr))"
    },
    {
      "rank": 73,
      "score": 7.990432406683839,
      "candidate": "if not arr:\n        return None\n    if not arr[0]:\n        return None\n    return sum(arr) * prod(arr[1:])\n\nif __name__ == \"__main__\":\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([]) == None"
    },
    {
      "rank": 74,
      "score": 7.938028884277233,
      "candidate": "if not arr:\n        return None\n    s = 0\n    for n in arr:\n        s += n * prod_signs(arr[:i])\n        i += 1\n    return s"
    },
    {
      "rank": 75,
      "score": 7.915588979966494,
      "candidate": "if not arr:\n        return None\n    m = 0\n    for num in arr:\n        m = m + num * (1 if num > 0 else -1)\n    return m"
    },
    {
      "rank": 76,
      "score": 7.868947655733293,
      "candidate": "if not arr:\n        return None\n    s = arr[0]\n    for i in arr[1:]:\n        s *= i\n    return s\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, -4]\n    print(prod_signs(arr))"
    },
    {
      "rank": 77,
      "score": 7.84634113240411,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        res = res + (arr[i] * (arr[i] + 1))\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(\"-\" * 50)\n    arr = [1, -1, 2, -2, -2]\n    print(prod_signs(arr))"
    },
    {
      "rank": 78,
      "score": 7.834022619458933,
      "candidate": "if not arr:\n        return None\n    signs = [0] * len(arr)\n    for i in range(len(arr)):\n        signs[i] = arr[i]\n    return sum([abs(i) for i in arr]) * prod(signs)\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        sys.exit('Please give an input file name as first argument')\n    filename = sys.argv[1]\n    with open(filename) as f:\n        text = f.read()\n    arr = [int(i) for i in text.split()]\n    print(prod_signs(arr))"
    },
    {
      "rank": 79,
      "score": 7.780351419995229,
      "candidate": "if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    sums = 0\n    for num in arr:\n        sums += num\n        if num == 0:\n            sums *= -1\n    return sums"
    },
    {
      "rank": 80,
      "score": 7.738292593776799,
      "candidate": "if not arr:\n        return None\n\n    res = 0\n    for num in arr:\n        res += abs(num) * (num if num > 0 else -num)\n    return res\n\n\nif __name__ == \"__main__\":\n    arr = [-1, 1, -2, 3]\n    print(prod_signs(arr))"
    },
    {
      "rank": 81,
      "score": 7.7320703513377165,
      "candidate": "if not arr:\n        return None\n\n    s = 0\n    for i in arr:\n        if i == 0:\n            continue\n        if i == 1:\n            s += 1\n        else:\n            s += -1\n\n    return s\n\nif __name__ == \"__main__\":\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 82,
      "score": 7.705183449260731,
      "candidate": "if not arr:\n        return None\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\n# Testing\nif __name__ == '__main__':\n    print prod_signs([1, 2, 2, -4])\n    print prod_signs([0, 1])\n    print prod_signs([])"
    },
    {
      "rank": 83,
      "score": 7.5819855281879285,
      "candidate": "if not arr:\n        return None\n\n    sgn = [1, -1, 0]\n    ret = 0\n    for i in range(len(arr)):\n        ret += sgn[arr[i]] * arr[i]\n        sgn[arr[i]] = -sgn[arr[i]]\n    return ret"
    },
    {
      "rank": 84,
      "score": 7.562924366763077,
      "candidate": "if len(arr) == 0:\n        return None\n    else:\n        return sum(arr) * prod(sign(a) for a in arr)"
    },
    {
      "rank": 85,
      "score": 7.464609382504557,
      "candidate": "if not arr:\n        return None\n\n    magnitudes = [abs(num) for num in arr]\n    signs = [1 if num > 0 else -1 for num in magnitudes]\n    return sum(magnitudes) * sum(signs)\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 7.134571892399572,
      "candidate": "if not arr:\n        return None\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        s += arr[i] * (arr[i] > 0)\n    return s"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n    return sum([x * y for x, y in zip(arr, [-1, 1, 0])])\n\n\n# BEGIN CUT HERE\n\n# END CUT HERE"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    res = 0\n    for x in arr:\n        res += abs(x) * prod_signs(arr[:len(arr) - 1])\n    return res\n\n\nif __name__ == '__main__':\n    arr = [-1, -1, -2, 0, 0, -1, -3]\n    print('prod_signs({}) = {}'.format(arr, prod_signs(arr)))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n\n    result = 0\n    for i in arr:\n        if i == 0:\n            continue\n        result += i\n        if i == 1:\n            result *= -1\n        else:\n            result *= 1\n    return result\n\n\ndef prod_signs_1(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_1([1, 2, 2, -4]) == -9\n    >>> prod_signs_1([0, 1]) == 0\n    >>> prod_signs_1([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    result = 0\n    for i in arr:\n        if i == 0:\n            continue\n        result += i\n        if i == 1:\n            result *= -1\n        else:\n            result *= 1\n    return result\n\n\ndef prod_signs_2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_2([1, 2, 2, -4]) == -9\n    >>> prod_signs_2([0, 1]) == 0\n    >>> prod_signs_2([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    result = 0\n    for i in arr:\n        if i == 0:\n            continue\n        result += i\n        if i == 1:\n            result *= -1\n        else:\n            result *= 1\n    return result\n\n\ndef prod_signs_3(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n\n    ret = 0\n    for v in arr:\n        ret += v * prod_signs(arr[:v])\n    return ret\n\n\ndef prod_signs_2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_2([1, 2, 2, -4]) == -9\n    >>> prod_signs_2([0, 1]) == 0\n    >>> prod_signs_2([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    ret = 0\n    for v in arr:\n        ret += v * prod_signs_2(arr[:v])\n    return ret\n\n\ndef prod_signs_3(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_3([1, 2, 2, -4]) == -9\n    >>> prod_signs_3([0, 1]) == 0\n    >>> prod_signs_3([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    ret = 0\n    for v in arr:\n        ret += v * prod_signs_3(arr[:v])\n    return ret\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert prod_signs([1, 2, 2, -4]) == -9, \"Product of all signs of 1, 2, 2, -4\"\n    assert prod_signs([0, 1]) == 0, \"Product of all signs of 0, 1\"\n    assert prod_signs([]) == None, \"Product of all signs of empty list\"\n\n\nif __name__ == \"__main__\":\n    main"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n\n    ret = 0\n    for i in arr:\n        ret += i\n        if i < 0:\n            ret *= -1\n    return ret\n\n\ndef prod_signs_2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_2([1, 2, 2, -4]) == -9\n    >>> prod_signs_2([0, 1]) == 0\n    >>> prod_signs_2([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    ret = 0\n    for i in arr:\n        ret += i\n        if i < 0:\n            ret *= -1\n    return ret\n\n\ndef prod_signs_3(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_3([1, 2, 2, -4]) == -9\n    >>> prod_signs_3([0, 1]) == 0\n    >>> prod_signs_3([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    ret = 0\n    for i in arr:\n        ret += i\n        if i < 0:\n            ret *= -1\n    return ret\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n\n    ret = 0\n    for i in arr:\n        ret += i\n        if i > 0:\n            ret *= i\n        elif i < 0:\n            ret *= -i\n    return ret\n\n# TESTS\ntests = [\n    (\n        [1, 2, 3, 4, -3, -4, -5, -6, -7],\n        [1, 1, 1, 1, -1, -1, -1, -1, -1],\n        -9\n    ),\n    (\n        [1, 2, 2, -4],\n        [1, 1, 1, -1],\n        -9\n    ),\n    (\n        [0, 1],\n        [0, -1],\n        0\n    ),\n    (\n        [],\n        [0, -1],\n        None\n    )\n]\n\nfor arr, res, expected in tests:\n    assert prod_signs(arr) == expected"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n\n    return sum([abs(i) * sign for i, sign in zip(arr, [1, -1, 0])])\n\n\ndef prod_signs_2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs_2([1, 2, 2, -4]) == -9\n    >>> prod_signs_2([0, 1]) == 0\n    >>> prod_signs_2([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    return sum([abs(i) for i in arr])\n\n\ndef main():\n    # these \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert prod_signs([1, 2, -3]) == -6, \"Example\"\n    assert prod_signs_2([1, 2, -3]) == -6, \"Example\"\n    assert prod_signs_2([0, 1, 2]) == 0, \"Example\"\n    assert prod_signs([]) == None, \"Empty\"\n    assert prod_signs([-3, -3, 3, 3]) == 6, \"Negative\"\n    assert prod_signs([-2, -1, 1, 2]) == 0, \"All negative\"\n    assert prod_signs([1, -1, -1, 1]) == -6, \"All positive\"\n    assert prod_signs([-1, 1, -1, 1]) == 0, \"All positive\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n\n    res = 0\n    for i in arr:\n        res += i * (i > 0)\n    return res\n\n\ndef main():\n    arr = [1, 2, -2, -1]\n    res = prod_signs(arr)\n    print(res)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n    s = 0\n    for i in arr:\n        s += i * (i * (i + 1))\n    return s\n\n\n# TESTS\nfor arr, expected in [\n    ([1, 2, 2, -4], -9),\n    ([0, 1], 0),\n    ([], None),\n]:\n    sol = prod_signs(arr)\n    assert sol == expected, f\"{arr} -> {sol}!= {expected}\""
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n\n    signs = [1, -1, 0]\n    prod = 1\n    for num in arr:\n        prod *= num * signs[num]\n    return prod\n\ndef prod_signs2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs2([1, 2, 2, -4]) == -9\n    >>> prod_signs2([0, 1]) == 0\n    >>> prod_signs2([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    signs = [1, -1, 0]\n    prod = 1\n    for num in arr:\n        prod *= num * signs[num]\n    return prod\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, -4]\n    print(prod_signs(arr))\n    arr = [0, 1]\n    print(prod_signs(arr))\n    arr = []\n    print(prod_signs(arr))\n    arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n    arr = list(arr)\n    ret = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        ret += arr[i] * prod_signs(arr[i+1:])\n    return ret\n\n\nif __name__ == \"__main__\":\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([]) == None"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n\n    res = 0\n    for num in arr:\n        res += num * prod_signs(arr[:num])\n    return res\n\n\nif __name__ == \"__main__\":\n    assert prod_signs([1, 2, -3, -4]) == -18\n    assert prod_signs([1, 0, -1, 0]) == 0\n    assert prod_signs([]) == None"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for v in arr:\n        if v == 0:\n            continue\n        res += v\n        if v > 0:\n            res *= v\n        else:\n            res *= -v\n    return res\n\n\ndef sum_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> sum_signs([1, 2, 2, -4]) == -9\n    >>> sum_signs([0, 1]) == 0\n    >>> sum_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    res = 0\n    for v in arr:\n        if v == 0:\n            continue\n        res += v\n        if v < 0:\n            res *= -v\n        else:\n            res *= v\n    return res\n\n\nif __name__ == \"__main__\":\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert sum_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert sum_signs([0, 1]) == 0\n    assert prod_signs([]) == None\n    assert sum_signs([]) == None"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n    prod_signs = [sum(arr) for arr in itertools.product([1, -1], repeat=len(arr))]\n    return sum(prod_signs)\n\n\n# This is a  modified version of the solution\ndef prod_signs2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs2([1, 2, 2, -4]) == -9\n    >>> prod_signs2([0, 1]) == 0\n    >>> prod_signs2([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    prod_signs = [0 for arr in itertools.product([1, -1], repeat=len(arr))]\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == 0 or arr[j] == 0:\n                prod_signs[i] += arr[j]\n            else:\n                prod_signs[i] += arr[j] * arr[i]\n    return sum(prod_signs)\n\n\ndef prod_signs3(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs3([1, 2, 2, -4]) == -9\n    >>> prod_signs3([0, 1]) == 0\n    >>> prod_signs3([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    prod_signs = [0 for arr in itertools.product([1, -1], repeat=len(arr))]\n    for i in range(len(arr)):\n        for j in range(i"
    }
  ]
}