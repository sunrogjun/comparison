{
  "timestamp": "2025-09-14T19:59:52.386966",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 354,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def digits(x):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n\n    Example:\n    >>> digits(12345)\n    3\n    >>> digits(-12345)\n    3\n    >>> digits(0)\n    0\n    >>> digits(-0)\n    0\n    >>> digits(1)\n    1\n    >>> digits(-1)\n    1\n    >>> digits(1234567890)\n    10\n    >>> digits(-1234567890)\n    10\n    >>> digits(0.12345)\n    2\n    >>> digits(-0.12345)\n    2\n    >>> digits(1.2345)\n    2\n    >>> digits(-1.2345)\n    2\n    >>> digits(0.01234)\n    1\n    >>> digits(-0.01234)\n    1\n    >>> digits(0.00012345)\n    1\n    >>> digits(-0.00012345)\n    1\n    >>> digits(12345)\n    3\n    >>> digits(-12345)\n    3\n    >>> digits(1234567890)\n    10\n    >>> digits(-1234567890)\n    10\n    >>> digits(0.12345)\n    2\n    >>> digits(-0.12345)\n    2\n    >>> digits(1.2345)\n    2\n    >>> digits(-1.2345)\n    2\n    >>> digits(0.01234)\n    1\n    >>> digits(-0.01234)\n    1\n    >>> digits(0.00012345)\n    1\n    >>> digits(-0.00012345)\n    1\n    \"\"\"\n    if x < 0:\n        return digits(-x)\n    if x == 0:\n        return 0\n    digits = 1\n    while x > 0:\n        x = x / 10\n        digits += 1\n    return digits\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\ndef count_digits(num):\n    \"\"\"\n    Count the number of digits of a given number.\n\n    Example\n    Given num = 1234, return 3.\n    \n    Note\n    The number of digits of a number is the maximum value of digits that can be\n    generated from the given number.\n    \n    Note\n    We need to calculate the number of digits of a number.\n    \n    Note\n    We need to calculate the number of digits of a number.\n    \"\"\"\n    # Since we know that the number of digits of a number is the maximum value of digits that can be generated from the given number,\n    # we can simply return the number of digits of the given number.\n    return int(math.floor(math.log10(num)))\n\nif __name__ == '__main__':\n    print(count_digits(1234))\n    print(count_digits(12345))\n    print(count_digits(12345678))\n    print(count_digits(123456789))\n    print(count_digits(12345678901))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from math import log10\n\n\ndef count_digits(num):\n    \"\"\"\n    >>> count_digits(0)\n    0\n    >>> count_digits(1)\n    1\n    >>> count_digits(2)\n    1\n    >>> count_digits(3)\n    2\n    >>> count_digits(4)\n    2\n    >>> count_digits(5)\n    3\n    >>> count_digits(6)\n    3\n    >>> count_digits(7)\n    4\n    >>> count_digits(8)\n    4\n    >>> count_digits(9)\n    5\n    >>> count_digits(10)\n    5\n    >>> count_digits(100)\n    6\n    >>> count_digits(1000)\n    7\n    >>> count_digits(10000)\n    8\n    >>> count_digits(100000)\n    9\n    >>> count_digits(1000000)\n    10\n    \"\"\"\n    return int(log10(num)) + 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def count_digits(number):\n    return str(number).count('0')\n\ndef main():\n    print(count_digits(9))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Import the \"math\" module.\nimport math\n\n# Define a function named \"count_digits\".\ndef count_digits(num):\n    # Return the number of digits of the given number.\n    return math.floor(math.log10(num))\n\n\n# Call the function and print its result.\nprint count_digits(123456789)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\ndef number_of_digits(number):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n    \"\"\"\n    return len(str(number))\n\n\nif __name__ == '__main__':\n    print number_of_digits(123456789)\n    print number_of_digits(1234567890)\n    print number_of_digits(12345678900)\n    print number_of_digits(123456789001)\n    print number_of_digits(12345678900100)\n    print number_of_digits(1234567890010001)\n    print number_of_digits(12345678900100010)\n    print number_of_digits(123456789001000101)\n    print number_of_digits(1234567890010001001)\n    print number_of_digits(12345678900100010101)\n    print number_of_digits(123456789001000101001)\n    print number_of_digits(1234567890010001010101)\n    print number_of_digits(123456789001000101010101)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    >>> count_digits(123456789)\n    9\n    >>> count_digits(123456789)\n    9\n    >>> count_digits(1234567890)\n    10\n    >>> count_digits(12345678901)\n    11\n    \"\"\"\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    num = num % 10\n    return count_digits(num*10) + count_digits(num)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    >>> count_digits(123)\n    3\n    >>> count_digits(12345)\n    5\n    >>> count_digits(1234567)\n    8\n    >>> count_digits(123456789)\n    10\n    >>> count_digits(12345678901)\n    12\n    >>> count_digits(123456789012)\n    14\n    >>> count_digits(1234567890123)\n    16\n    >>> count_digits(12345678901234)\n    18\n    >>> count_digits(123456789012345)\n    20\n    >>> count_digits(1234567890123456)\n    22\n    >>> count_digits(12345678901234567)\n    24\n    >>> count_digits(123456789012345678)\n    26\n    >>> count_digits(1234567890123456789)\n    28\n    >>> count_digits(12345678901234567890)\n    30\n    \"\"\"\n    return int(num)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def number_digits(number):\n    return sum(map(int, str(number)))\n\n# Test Cases\n\nprint number_digits(1)\nprint number_digits(12)\nprint number_digits(123)\nprint number_digits(1234)\nprint number_digits(12345)\nprint number_digits(123456)\nprint number_digits(1234567)\nprint number_digits(12345678)\nprint number_digits(123456789)\nprint number_digits(1234567890)\nprint number_digits(12345678901)\nprint number_digits(123456789012)\nprint number_digits(1234567890123)\nprint number_digits(12345678901234)\nprint number_digits(123456789012345)\nprint number_digits(1234567890123456)\nprint number_digits(12345678901234567)\nprint number_digits(123456789012345678)\nprint number_digits(1234567890123456789)\nprint number_digits(12345678901234567890)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def count_digits(n):\n    \"\"\"\n    >>> count_digits(123)\n    3\n    >>> count_digits(12345)\n    5\n    >>> count_digits(123456789)\n    9\n    >>> count_digits(12345678901)\n    10\n    \"\"\"\n    return len(str(n))\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    Write a function that counts the number of digits in a given number.\n    \"\"\"\n    digits = 0\n    while num:\n        num, digit = divmod(num, 10)\n        digits += 1\n    return digits\n\n\ndef main():\n    \"\"\"\n    Run some basic tests.\n    \"\"\"\n    assert count_digits(0) == 0\n    assert count_digits(1) == 1\n    assert count_digits(9) == 3\n    assert count_digits(123) == 4\n    assert count_digits(12345) == 5\n    assert count_digits(1234567) == 6\n    assert count_digits(12345678) == 7\n    assert count_digits(123456789) == 8\n    assert count_digits(1234567891) == 9\n    assert count_digits(12345678912) == 10\n    assert count_digits(123456789123) == 11\n    assert count_digits(1234567891234) == 12\n    assert count_digits(12345678912345) == 13\n    assert count_digits(123456789123456) == 14\n    assert count_digits(1234567891234567) == 15\n    assert count_digits(12345678912345678) == 16\n    assert count_digits(123456789123456789) == 17\n    assert count_digits(1234567891234567891) == 18\n    assert count_digits(12345678912345678912) == 19\n    assert count_digits(123456789123456789123) == 20\n    assert count_digits(1234567891234567891234) == 21\n    assert count_digits(12345678912345678912345) == 22\n    assert count_digits(123456789123456789123456) == 23\n    assert count_digits(1234567891234567891234567) == 24\n    assert count_digits(12345678912345678912345678) == 25\n    assert count"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\ndef digits(num):\n    return len(str(num))\n\n\nprint digits(1)\nprint digits(0)\nprint digits(-1)\nprint digits(3.14)\nprint digits(100)\nprint digits(0.1)\nprint digits(-0.1)\nprint digits(0.01)\nprint digits(-0.01)\nprint digits(0.001)\nprint digits(-0.001)\nprint digits(0.0001)\nprint digits(-0.0001)\nprint digits(0.00001)\nprint digits(-0.00001)\nprint digits(0.000001)\nprint digits(-0.000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)\nprint digits(0.0000001)\nprint digits(-0.0000001)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import math\n\ndef count_digits(number):\n    \"\"\"\n    count the number of digits in the given number\n    \"\"\"\n    return int(math.floor(math.log10(number))) + 1\n\n\ndef test_count_digits():\n    assert count_digits(0) == 0\n    assert count_digits(1) == 1\n    assert count_digits(3) == 1\n    assert count_digits(5) == 2\n    assert count_digits(6) == 2\n    assert count_digits(9) == 2\n    assert count_digits(10) == 2\n    assert count_digits(11) == 2\n    assert count_digits(123) == 3\n    assert count_digits(12345) == 4\n    assert count_digits(123456) == 4\n    assert count_digits(1234567) == 5\n    assert count_digits(12345678) == 5\n    assert count_digits(123456789) == 6\n    assert count_digits(1234567890) == 6\n    assert count_digits(12345678901) == 7\n    assert count_digits(123456789012) == 7\n    assert count_digits(1234567890123) == 8\n    assert count_digits(12345678901234) == 8\n    assert count_digits(123456789012345) == 9\n    assert count_digits(1234567890123456) == 9\n    assert count_digits(12345678901234567) == 10\n    assert count_digits(123456789012345678) == 10\n    assert count_digits(1234567890123456789) == 10\n    assert count_digits(12345678901234567890) == 10\n\n\nif __name__ == '__main__':\n    test_count_digits()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def count_digits(num):\n    count = 0\n    while num:\n        num /= 10\n        count += 1\n    return count\n\n# Run the test\nnum = 123456789\nprint count_digits(num)\n\n# Your code"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def countDigits(number):\n    count = 0\n    while number > 0:\n        number = number / 10\n        count += 1\n    return count\n\nprint(countDigits(3))\nprint(countDigits(5))\nprint(countDigits(9))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef countDigits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num < 0:\n        return 0\n    \n    # count the number of digits in the number\n    return int(str(num))\n\nif __name__ == \"__main__\":\n    print countDigits(1000000)\n    print countDigits(1)\n    print countDigits(0)\n    print countDigits(-1)\n    print countDigits(-10)\n    print countDigits(1)\n    print countDigits(10)\n    print countDigits(1000)\n    print countDigits(123456789)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# Importing the python library\nimport math\n\n# Defining a function to count the number of digits\ndef count_digits(num):\n    # The number of digits to be counted\n    num_digits = int(math.floor(math.log10(num)))\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num_digits = num_digits + 1\n    # The number of digits to be counted\n    num"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def count_digits(number):\n    \"\"\"\n    count_digits(number) -> number of digits\n\n    count_digits(number) returns the number of digits of the given number.\n    \"\"\"\n\n    result = 0\n    while number > 0:\n        number, remainder = divmod(number, 10)\n        result += 1\n    return result\n\nif __name__ == '__main__':\n    print(count_digits(123456789))\n    print(count_digits(1234567891))\n    print(count_digits(1234567892))\n    print(count_digits(1234567893))\n    print(count_digits(1234567894))\n    print(count_digits(1234567895))\n    print(count_digits(1234567896))\n    print(count_digits(1234567897))\n    print(count_digits(1234567898))\n    print(count_digits(1234567899))\n    print(count_digits(1234567900))\n    print(count_digits(1234569901))\n    print(count_digits(1234569902))\n    print(count_digits(1234569903))\n    print(count_digits(1234569904))\n    print(count_digits(1234569905))\n    print(count_digits(1234569906))\n    print(count_digits(1234569907))\n    print(count_digits(1234569908))\n    print(count_digits(1234569909))\n    print(count_digits(1234569910))\n    print(count_digits(1234569911))\n    print(count_digits(1234569912))\n    print(count_digits(1234569913))\n    print(count_digits(1234569914))\n    print(count_digits(1234569915))\n    print(count_digits(1234569916))\n    print(count_digits(1234569917))\n    print(count_digits(1234569918))\n    print(count_digits("
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def digitCount(num):\n    return sum(map(int, str(num)))\n\nprint(digitCount(10))\nprint(digitCount(123))\nprint(digitCount(12345))\nprint(digitCount(1234567))\nprint(digitCount(12345678))\nprint(digitCount(123456789))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def numDigits(number):\n    return len(str(number))\n\nif __name__ == '__main__':\n    print numDigits(123)\n    print numDigits(1234)\n    print numDigits(12345)\n    print numDigits(1234567)\n    print numDigits(123456789)\n    print numDigits(1234567890)\n    print numDigits(12345678901)\n    print numDigits(123456789012)\n    print numDigits(1234567890123)\n    print numDigits(12345678901234)\n    print numDigits(123456789012345)\n    print numDigits(1234567890123456)\n    print numDigits(12345678901234567)\n    print numDigits(123456789012345678)\n    print numDigits(1234567890123456789)\n    print numDigits(12345678901234567890)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from math import ceil\n\n\ndef digits(num):\n    \"\"\"\n    Returns the number of digits of a given number.\n\n    :param num: The number for which the number of digits are to be counted.\n    :returns: The number of digits of a given number.\n    \"\"\"\n\n    return len(str(num))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n\n    num = 1234\n    num2 = num * 10\n    num3 = num2 * 10\n    num4 = num3 * 10\n    num5 = num4 * 10\n    num6 = num5 * 10\n    num7 = num6 * 10\n    num8 = num7 * 10\n    num9 = num8 * 10\n    num10 = num9 * 10\n    num11 = num10 * 10\n    num12 = num11 * 10\n    num13 = num12 * 10\n    num14 = num13 * 10\n    num15 = num14 * 10\n    num16 = num15 * 10\n    num17 = num16 * 10\n    num18 = num17 * 10\n    num19 = num18 * 10\n    num20 = num19 * 10\n    num21 = num20 * 10\n    num22 = num21 * 10\n    num23 = num22 * 10\n    num24 = num23 * 10\n    num25 = num24 * 10\n    num26 = num25 * 10\n    num27 = num26 * 10\n    num28 = num27 * 10\n    num29 = num28 * 10\n    num30 = num29 * 10\n    num31 = num30 * 10\n    num32 = num31 * 10\n    num33 = num32 * 10\n    num34 = num33 * 10\n    num35 = num34 * 10\n    num36 = num35 * 10\n    num37 = num36 * 10\n    num38 = num37 * 10\n    num39 = num38 * 10\n    num40 = num39 * 10\n    num41 = num40 * 10\n    num42 = num41 * 10\n    num43 = num42 * 10\n    num44 = num43 * 10\n    num45 = num44 * 10\n    num46 = num45 * 10\n    num47 = num46 * 10\n    num"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def count_digits(n):\n    \"\"\"\n    Count the number of digits of a given number.\n    Input:\n    n -- a number\n    Output:\n    the number of digits of the given number\n    \"\"\"\n    return int(str(n))\n\nprint(count_digits(123))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def digits(number):\n    \"\"\"\n    Calculates the number of digits in the number.\n    \"\"\"\n    count = 0\n    while number > 0:\n        count += 1\n        number /= 10\n    return count\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    number = int(raw_input(\"Please enter a number: \"))\n    print \"The number of digits is: \", digits(number)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def count_digits(number):\n    return str(number).__len__()\n\nprint(count_digits(12345))\n\nprint(count_digits(123.45))\n\nprint(count_digits(1234567890))\n\nprint(count_digits(123.45678))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    >>> count_digits(1)\n    1\n    >>> count_digits(100)\n    5\n    >>> count_digits(1000)\n    9\n    >>> count_digits(12345)\n    5\n    >>> count_digits(123456789)\n    9\n    >>> count_digits(12345678901234)\n    10\n    \"\"\"\n    # if num is 0 then return 1\n    if num == 0:\n        return 1\n\n    # if num is not 0 then split num into digits\n    num_digits = [int(i) for i in str(num)]\n\n    # return the number of digits\n    return len(num_digits)\n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    count_digits(num) -> int\n    Returns the number of digits in num.\n    \"\"\"\n    if num == 0:\n        return 0\n    return int(str(num))\n\ndef main():\n    \"\"\"\n    main() -> None\n    \"\"\"\n    num = 100\n    print(count_digits(num))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def count_digits(num):\n    if num == 0:\n        return 1\n    else:\n        return len(str(num))\n\nif __name__ == \"__main__\":\n    num = 0\n    for i in range(1, 1000):\n        num += count_digits(i)\n    print(num)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def countDigits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return int(str(num).count('0'))\n\nprint countDigits(2)\nprint countDigits(1234567890)\nprint countDigits(12345678901234567890)"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def digits(num):\n    \"\"\"\n    Counts the number of digits in a given number.\n    \n    Input:\n    num: a number\n    \n    Output:\n    count: the number of digits of num\n    \"\"\"\n    count = 0\n    while num > 0:\n        count += 1\n        num /= 10\n    return count\n\nif __name__ == '__main__':\n    print digits(1)\n    print digits(12)\n    print digits(123)\n    print digits(12345)\n    print digits(1234567)\n    print digits(123456789)\n    print digits(12345678901)\n    print digits(1234567890123)\n    print digits(123456789012345)\n    print digits(1234567890123456)\n    print digits(12345678901234567)\n    print digits(123456789012345678)\n    print digits(1234567890123456789)\n    print digits(123456789012345678901)\n    print digits(1234567890123456789012)\n    print digits(12345678901234567890123)\n    print digits(123456789012345678901234)\n    print digits(1234567890123456789012345)\n    print digits(12345678901234567890123456)\n    print digits(123456789012345678901234567)\n    print digits(1234567890123456789012345678)\n    print digits(12345678901234567890123456789)\n    print digits(1234567890123456789012345678901)\n    print digits(12345678901234567890123456789012)\n    print digits(123456789012345678901234567890123)\n    print digits(1234567890123456789012345678901234)\n    print digits(12345678901234567890123456789012345)\n    print digits(1234567890123"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def number_of_digits(n):\n    \"\"\"\n    n: int\n    returns: int\n    \"\"\"\n    # This is the naive implementation of counting the number of digits.\n    # However, the number of digits is the same as the number of digits in the\n    # string representation of the number.\n    # For example, 123456789 = 9 + 5 + 4 + 7 + 8 + 1 = 19.\n    # If we count the digits in the string representation, we get 19.\n    # The digits are counted from the leftmost digit to the rightmost digit.\n    # So, for 123456789 = 9 + 5 + 4 + 7 + 8 + 1 = 19.\n    # The digits are counted from the rightmost digit to the leftmost digit.\n    # So, for 123456789 = 1 + 4 + 7 + 8 + 9 + 5 = 19.\n    # The digits are counted from the leftmost digit to the rightmost digit.\n    # So, for 123456789 = 9 + 5 + 4 + 7 + 8 + 1 = 19.\n    # The digits are counted from the rightmost digit to the leftmost digit.\n    # So, for 123456789 = 1 + 4 + 7 + 8 + 9 + 5 = 19.\n    # The digits are counted from the leftmost digit to the rightmost digit.\n    # So, for 123456789 = 9 + 5 + 4 + 7 + 8 + 1 = 19.\n    # The digits are counted from the leftmost digit to the rightmost digit.\n    # So, for 123456789 = 9 + 5 + 4 + 7 + 8 + 1 = 19.\n    # The digits are counted from the leftmost digit to the rightmost digit.\n    # So, for 123456789 = 9 + 5 + 4 + 7 + 8 + 1 = 19.\n    # The digits are counted from the leftmost digit to the rightmost digit.\n    # So, for 123456789 = 9 + 5 + 4 + 7 + 8 + 1 = 19.\n    # The digits are counted from the leftmost digit to the rightmost digit.\n    # So, for 123456789 = 9 + 5 + 4 + 7 + 8 + 1 = 19.\n    # The digits are counted from the leftmost digit"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    Count the number of digits in a given number.\n    \"\"\"\n    return int(str(num).lstrip('-').lstrip('0'))\n\n\nif __name__ == '__main__':\n    print count_digits(1234)\n    print count_digits(-1234)\n    print count_digits(123456789)\n    print count_digits(-123456789)\n    print count_digits(12345678901234567890)\n    print count_digits(-12345678901234567890)\n    print count_digits(123456789012345678901234567890)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def count_digits(n):\n    \"\"\"\n    >>> count_digits(1234)\n    3\n    >>> count_digits(0)\n    0\n    >>> count_digits(-1234)\n    3\n    >>> count_digits(1234.0)\n    3\n    >>> count_digits(0.0)\n    0\n    \"\"\"\n    if n < 0:\n        return count_digits(-n)\n    return sum(map(int, str(n)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def number_of_digits(number):\n    \"\"\"\n    >>> number_of_digits(0)\n    0\n    >>> number_of_digits(9)\n    3\n    >>> number_of_digits(123456789)\n    9\n    >>> number_of_digits(1234)\n    4\n    >>> number_of_digits(123)\n    3\n    >>> number_of_digits(12.3)\n    3\n    >>> number_of_digits(0.3)\n    1\n    >>> number_of_digits(-0.3)\n    1\n    \"\"\"\n    return len(str(number))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "from math import log10\n\ndef number_of_digits(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 0:\n        return 0\n    return int(log10(number) + 1)\n\nprint(number_of_digits(0))\nprint(number_of_digits(1))\nprint(number_of_digits(2))\nprint(number_of_digits(3))\nprint(number_of_digits(4))\nprint(number_of_digits(5))\nprint(number_of_digits(6))\nprint(number_of_digits(7))\nprint(number_of_digits(8))\nprint(number_of_digits(9))\nprint(number_of_digits(10))\nprint(number_of_digits(11))\nprint(number_of_digits(12))\nprint(number_of_digits(13))\nprint(number_of_digits(14))\nprint(number_of_digits(15))\nprint(number_of_digits(16))\nprint(number_of_digits(17))\nprint(number_of_digits(18))\nprint(number_of_digits(19))\nprint(number_of_digits(20))\nprint(number_of_digits(21))\nprint(number_of_digits(22))\nprint(number_of_digits(23))\nprint(number_of_digits(24))\nprint(number_of_digits(25))\nprint(number_of_digits(26))\nprint(number_of_digits(27))\nprint(number_of_digits(28))\nprint(number_of_digits(29))\nprint(number_of_digits(30))\nprint(number_of_digits(31))\nprint(number_of_digits(32))\nprint(number_of_digits(33))\nprint(number_of_digits(34))\nprint(number_of_digits(35))\nprint(number_of_digits(36))\nprint(number_"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def countDigits(n):\n    # Complete this function\n    digits = 0\n    while n > 0:\n        n /= 10\n        digits += 1\n    return digits\n\nif __name__ == \"__main__\":\n    assert countDigits(123) == 3, \"Error\"\n    assert countDigits(-123) == 3, \"Error\"\n    assert countDigits(0) == 0, \"Error\"\n    assert countDigits(1) == 1, \"Error\"\n    assert countDigits(10) == 2, \"Error\"\n    assert countDigits(12345) == 5, \"Error\"\n    assert countDigits(-12345) == 5, \"Error\"\n    assert countDigits(123456789) == 9, \"Error\"\n    assert countDigits(-123456789) == 9, \"Error\""
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "def count_digits(number):\n    \"\"\"\n    count_digits(number) -> int\n    \n    Returns the number of digits of the given number.\n    \n    >>> count_digits(0)\n    0\n    >>> count_digits(1)\n    1\n    >>> count_digits(2)\n    2\n    >>> count_digits(3)\n    3\n    >>> count_digits(10)\n    4\n    >>> count_digits(12345)\n    5\n    >>> count_digits(1234567)\n    8\n    >>> count_digits(123456789)\n    9\n    >>> count_digits(12345678901)\n    10\n    >>> count_digits(1234567890123)\n    11\n    >>> count_digits(123456789012345)\n    12\n    >>> count_digits(1234567890123456)\n    13\n    >>> count_digits(12345678901234567)\n    14\n    >>> count_digits(123456789012345678)\n    15\n    \"\"\"\n    \n    if number == 0:\n        return 0\n    \n    if number < 0:\n        number = -number\n        \n    result = 0\n    \n    while number > 0:\n        number = number // 10\n        result += 1\n    \n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "def count_digits(number):\n    return len(str(number))\n\nprint count_digits(1234567890)\n\nprint count_digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890)\n\nprint count_digits(-1234567890)\n\nprint count_digits(-12345678901234567890123456789012345678901234567890123456789012345678901234567890)\n\nprint count_digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890)"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "# @include\ndef count_digits(n):\n    return sum(1 for _ in str(n))\n# @exclude\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 10, 100, 1000]\n    for n in numbers:\n        print(n, count_digits(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "def count_digits(number):\n    \"\"\"\n    >>> count_digits(123456789)\n    9\n    >>> count_digits(123)\n    3\n    >>> count_digits(0)\n    0\n    >>> count_digits(-123)\n    1\n    \"\"\"\n    return int(str(number))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "def countDigits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return len(str(num))\n\nif __name__ == '__main__':\n    print countDigits(123456789)\n    print countDigits(0)\n    print countDigits(1)\n    print countDigits(12345678901234567890)"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "def count_digits(num):\n    count = 0\n    while num > 0:\n        num = num / 10\n        count += 1\n    return count\n\ndef main():\n    print count_digits(123)\n    print count_digits(12345)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def count_digits(num):\n    digits = []\n    while num > 0:\n        digits.append(num % 10)\n        num /= 10\n    return digits\n\nprint(count_digits(123))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def count_digits(number):\n    \"\"\"\n    >>> count_digits(100)\n    2\n    >>> count_digits(123)\n    3\n    >>> count_digits(1234567890)\n    10\n    \"\"\"\n    if number == 0:\n        return 1\n    else:\n        return (number % 10) + count_digits(number/10)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def count_digits(number):\n    \"\"\"\n    >>> count_digits(9)\n    3\n    >>> count_digits(123)\n    5\n    \"\"\"\n    return len(str(number))\n\ndef main():\n    \"\"\"\n    Run the main program.\n    \"\"\"\n    print(\"Run the main program to see the result.\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while num > 0:\n        result += 1\n        num = num / 10\n    return result"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def digits(num):\n    \"\"\"\n    Count the number of digits in a given number\n    \"\"\"\n    return len(str(num))\n\n\nif __name__ == '__main__':\n    print digits(12345)\n    print digits(123456789)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def countDigits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    digits = 0\n    while num > 0:\n        digits += 1\n        num /= 10\n    return digits\n\nif __name__ == '__main__':\n    print(countDigits(17))\n    print(countDigits(17.5))\n    print(countDigits(1234))\n    print(countDigits(0))\n    print(countDigits(-17))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def numDigits(num):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n\n    Input:\n        num -- a number\n\n    Output:\n        An integer representing the number of digits.\n    \"\"\"\n    return len(str(num))\n\n\nif __name__ == '__main__':\n    print(numDigits(123456789))\n    print(numDigits(12))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def count_digits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    count = 0\n    while n:\n        n, rem = divmod(n, 10)\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_digits(123))\n    print(count_digits(12345))\n    print(count_digits(123456789))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def count_digits(n):\n    \"\"\"\n    >>> count_digits(123)\n    4\n    >>> count_digits(12345)\n    5\n    >>> count_digits(123456789)\n    9\n    \"\"\"\n    return sum(int(n/i) for i in range(1,int(n)+1))\n\nprint(count_digits(123))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def countDigits(num):\n    \"\"\"\n    Input:\n        num: An integer number\n\n    Output:\n        A list of digits of the number.\n    \"\"\"\n    digits = []\n    while num > 0:\n        digits.append(num % 10)\n        num /= 10\n    return digits\n\nif __name__ == \"__main__\":\n    print(countDigits(10))\n    print(countDigits(100))\n    print(countDigits(1000))\n    print(countDigits(10000))\n    print(countDigits(100000))\n    print(countDigits(1000000))\n    print(countDigits(10000000))\n    print(countDigits(100000000))\n    print(countDigits(1000000000))\n\n    # The function to be tested\n    def myCountDigits(num):\n        \"\"\"\n        Input:\n            num: An integer number\n\n        Output:\n            A list of digits of the number.\n        \"\"\"\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num /= 10\n        return digits"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def digitCount(number):\n    \"\"\"\n    Write a function to count the number of digits in a given number.\n    \"\"\"\n    return sum(1 for x in str(number))\n\n\nprint(digitCount(1000))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def countDigits(number):\n    digits = str(number)\n    count = 0\n    for i in range(len(digits)):\n        if digits[i] == '0':\n            count += 1\n    return count\n\nprint countDigits(10)\nprint countDigits(123456789)\nprint countDigits(1234567890)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def countDigits(number):\n    count = 0\n    for i in range(len(str(number))):\n        count += int(str(number)[i])\n    return count\n\nif __name__ == '__main__':\n    print countDigits(1)\n    print countDigits(8)\n    print countDigits(0)\n    print countDigits(1.0)\n    print countDigits(1.23)\n    print countDigits(0.0)\n    print countDigits(-1.0)\n    print countDigits(-1.23)\n    print countDigits(1234567890987654321)\n    print countDigits(1234567890987654321.234567890987654321)\n    print countDigits(1234567890987654321.0)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import math\n\ndef number_of_digits(n):\n    \"\"\"\n    >>> number_of_digits(123)\n    3\n    >>> number_of_digits(12345)\n    5\n    >>> number_of_digits(123456789)\n    8\n    \"\"\"\n    return int(math.floor(math.log10(abs(n)))) + 1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def count_digits(number):\n    number = str(number)\n    count = 0\n    for i in range(0, len(number)):\n        count += int(number[i])\n    return count\n\nprint(count_digits(4))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef countDigits(n):\n    return sum(math.floor(x) for x in str(n))\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print(i, countDigits(i))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def count_digits(number):\n    return len(str(number))\n\nprint(count_digits(100))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def count_digits(n):\n    \"\"\"\n    n is a positive integer\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n % 10\n\ndef test_count_digits():\n    assert count_digits(1) == 1\n    assert count_digits(9) == 1\n    assert count_digits(0) == 1\n    assert count_digits(10) == 2\n    assert count_digits(100) == 2\n    assert count_digits(1000) == 3\n    assert count_digits(10000) == 4\n    assert count_digits(100000) == 5\n    assert count_digits(1000000) == 6\n    assert count_digits(10000000) == 7\n    assert count_digits(100000000) == 8\n    assert count_digits(1000000000) == 9\n    assert count_digits(10000000000) == 10\n\nif __name__ == '__main__':\n    test_count_digits()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/count-the-number-of-digits/problem\n\ndef countDigits(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 0:\n        return 0\n    digits = [0]\n    while number:\n        digits.append(number % 10)\n        number //= 10\n    return sum(digits)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from __future__ import print_function\n\ndef count_digits(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number % 10 == 0:\n        return 1 + count_digits(number / 10)\n    else:\n        return 1 + count_digits(number / 10) + count_digits(number % 10)\n\nif __name__ == \"__main__\":\n    print(count_digits(100))\n    print(count_digits(1234))\n    print(count_digits(1234234))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef number_of_digits(number):\n    number_of_digits = 0\n    while number > 0:\n        number_of_digits += 1\n        number = number / 10\n    return number_of_digits\n\nprint number_of_digits(1234)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def digit_count(num):\n    \"\"\"\n    >>> digit_count(123)\n    3\n    >>> digit_count(12345)\n    4\n    \"\"\"\n    return int(str(num))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def count_digits(n):\n    \"\"\"\n    >>> count_digits(10)\n    2\n    >>> count_digits(1)\n    0\n    >>> count_digits(0)\n    0\n    >>> count_digits(-10)\n    2\n    \"\"\"\n    return sum(map(int, str(n)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def count_digits(number):\n    \"\"\"\n    >>> count_digits(0)\n    0\n    >>> count_digits(123)\n    3\n    >>> count_digits(1234)\n    4\n    >>> count_digits(12345)\n    5\n    >>> count_digits(123456)\n    6\n    >>> count_digits(1234567)\n    7\n    >>> count_digits(12345678)\n    8\n    >>> count_digits(123456789)\n    9\n    \"\"\"\n    return sum(map(int, str(number)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "# TODO:\n# 1. Implement a fast implementation using bit manipulation.\n# 2. Implement a python implementation using math library.\n\n\ndef count_digits(n):\n    \"\"\"\n    Count the number of digits of a given number.\n\n    :param n: The number\n    :return: The number of digits.\n    \"\"\"\n    return len(str(n))\n\n\nif __name__ == '__main__':\n    print(count_digits(5))\n    print(count_digits(15))\n    print(count_digits(100))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n    \"\"\"\n    num = float(num)\n    num = num * 10\n    num = int(num)\n    num = str(num)\n    return len(num)\n\nnum = 12345\nprint(count_digits(num))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def countDigits(number):\n    count = 0\n    while number > 0:\n        number = number / 10\n        count += 1\n    return count\n\n#print countDigits(123)\n#print countDigits(12345)\n#print countDigits(1234567)\n#print countDigits(123456789)\n\n# Test cases\nprint countDigits(12)\nprint countDigits(12345)\nprint countDigits(1234567)\nprint countDigits(123456789)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def count_digits(num):\n    return sum(map(int, str(num)))\n\n\nif __name__ == '__main__':\n    assert count_digits(1234) == 2\n    assert count_digits(-1234) == 2\n    assert count_digits(0) == 0\n    assert count_digits(1234567890) == 10\n    assert count_digits(-1234567890) == 10\n    assert count_digits(123456789012345678901234567890) == 20"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def digit_count(n):\n    \"\"\"\n    >>> digit_count(0)\n    0\n    >>> digit_count(1)\n    1\n    >>> digit_count(100)\n    4\n    >>> digit_count(1000)\n    9\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    i = 0\n    while n > 0:\n        i += 1\n        n, r = divmod(n, 10)\n    return i\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# Calculate the number of digits\ndef numDigits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return len(str(num))\n\n# Example\nprint(numDigits(5))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def count_digits(num):\n    count = 0\n    while num > 0:\n        count += 1\n        num = num / 10\n    return count\n\ndef main():\n    print(count_digits(1234))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def count_digits(num):\n    # write your code here\n    if num == 0:\n        return 0\n    num = int(num)\n    count = 0\n    while num!= 0:\n        num = num / 10\n        count += 1\n    return count\n\n\nif __name__ == '__main__':\n    num = input()\n    print(count_digits(num))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def countDigits(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while number > 0:\n        number, remainder = divmod(number, 10)\n        result += 1\n    return result\n\nif __name__ == '__main__':\n    assert countDigits(123) == 4\n    assert countDigits(123456789) == 9"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def countDigits(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return len(str(number))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def count_digits(number):\n    \"\"\"\n    >>> count_digits(1)\n    1\n    >>> count_digits(1000)\n    3\n    >>> count_digits(1234567890)\n    8\n    \"\"\"\n    return len(str(number))\n\ndef main():\n    print(count_digits(1))\n    print(count_digits(1000))\n    print(count_digits(1234567890))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    >>> count_digits(12345)\n    5\n    >>> count_digits(-12345)\n    5\n    >>> count_digits(123)\n    2\n    >>> count_digits(-123)\n    2\n    >>> count_digits(0)\n    0\n    >>> count_digits(1)\n    1\n    \"\"\"\n    # Count the number of digits in the number.\n    count = 0\n    while num > 0:\n        num /= 10\n        count += 1\n\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while num > 0:\n        result += 1\n        num /= 10\n    return result\n\nif __name__ == '__main__':\n    assert count_digits(123) == 3\n    assert count_digits(12345) == 5\n    assert count_digits(1234567890) == 10\n    assert count_digits(0) == 0"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def count_digits(number):\n    \"\"\"\n    Given a number, return the number of digits of that number.\n    \"\"\"\n    # Create a list of digits to store the number in.\n    digits = []\n\n    # Iterate through the number, adding digits to the list.\n    for i in range(len(str(number))):\n        digits.append(str(number)[i])\n\n    # Return the length of the list.\n    return len(digits)\n\n\nif __name__ == '__main__':\n    number = 5\n    print count_digits(number)"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def digits(number):\n    \"\"\"\n    >>> digits(1234)\n    3\n    \"\"\"\n    return len(str(number))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef count_digits(number):\n    \"\"\"\n    \"\"\"\n    count = 0\n    while number > 0:\n        number = number / 10\n        count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_digits(1234))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "import math\n\n\ndef digits(x):\n    \"\"\"\n    Count the number of digits of a given number.\n\n    :param x: a number\n    :return: the number of digits\n    \"\"\"\n    return int(math.floor(math.log10(x)))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(digits(10))\n    print(digits(0))\n    print(digits(123))\n    print(digits(12345))\n    print(digits(1234567))\n    print(digits(123456789))\n    print(digits(12345678901))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def numDigits(num):\n    return len(str(num))\n\nif __name__ == \"__main__\":\n    for num in range(1, 10001):\n        print num, numDigits(num)"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def digits(n):\n    \"\"\"\n    Return the number of digits of the given number.\n\n    >>> digits(1234)\n    3\n    >>> digits(1234567890)\n    9\n    \"\"\"\n    return len(str(n))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def digit_count(num):\n    \"\"\"\n    :param num: An integer.\n    :return: A list of the digits of num.\n    \"\"\"\n    result = []\n    while num!= 0:\n        num, remainder = divmod(num, 10)\n        result.append(remainder)\n    return result\n\ndef main():\n    \"\"\"\n    Write a function that takes an integer and returns a list of the digits of the number.\n    \"\"\"\n    num = 1234567\n    print(digit_count(num))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def num_digits(number):\n    \"\"\"\n    Function to count the number of digits of a given number.\n    \"\"\"\n    \n    if number == 0:\n        return 1\n    else:\n        return int(math.floor(math.log10(number))) + 1\n\nprint num_digits(1)\nprint num_digits(10)\nprint num_digits(100)\nprint num_digits(1000)\nprint num_digits(10000)"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def digits(n):\n    return len(str(n))\n\nprint(digits(1))\nprint(digits(2))\nprint(digits(3))\nprint(digits(4))\nprint(digits(5))\nprint(digits(6))\nprint(digits(7))\nprint(digits(8))\nprint(digits(9))\nprint(digits(10))\nprint(digits(11))\nprint(digits(12))\nprint(digits(13))\nprint(digits(14))\nprint(digits(15))\nprint(digits(16))\nprint(digits(17))\nprint(digits(18))\nprint(digits(19))\nprint(digits(20))\nprint(digits(21))\nprint(digits(22))\nprint(digits(23))\nprint(digits(24))\nprint(digits(25))\nprint(digits(26))\nprint(digits(27))\nprint(digits(28))\nprint(digits(29))\nprint(digits(30))\nprint(digits(31))\nprint(digits(32))\nprint(digits(33))\nprint(digits(34))\nprint(digits(35))\nprint(digits(36))\nprint(digits(37))\nprint(digits(38))\nprint(digits(39))\nprint(digits(40))\nprint(digits(41))\nprint(digits(42))\nprint(digits(43))\nprint(digits(44))\nprint(digits(45))\nprint(digits(46))\nprint(digits(47))\nprint(digits(48))\nprint(digits(49))\nprint(digits(50))\nprint(digits(51))\nprint(digits(52))\nprint(digits(53))\nprint(digits(54))\nprint(digits(55))\nprint(digits(56))\nprint(digits(57))\nprint(digits(58))\nprint(digits(59))\nprint(digits(60))\nprint(digits(61))\nprint(digits(62))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def count_digits(n):\n    \"\"\"\n    >>> count_digits(0)\n    0\n    >>> count_digits(1)\n    1\n    >>> count_digits(123)\n    3\n    >>> count_digits(-123)\n    -3\n    >>> count_digits(123456789)\n    9\n    >>> count_digits(-123456789)\n    -9\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -count_digits(-n)\n    else:\n        return int(str(n))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def digits(num):\n    \"\"\"\n    >>> digits(123)\n    3\n    >>> digits(1234)\n    4\n    >>> digits(123456789)\n    9\n    \"\"\"\n    if num < 0:\n        return digits(-num) + 1\n    res = 0\n    while num > 0:\n        res += num % 10\n        num = num // 10\n    return res\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def numDigits(number):\n    return len(str(number))\n\nprint(numDigits(10))\n#>>> 3\nprint(numDigits(1000))\n#>>> 6"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def digits(number):\n    return sum(map(int, str(number)))\n\nprint digits(12345)"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def count_digits(number):\n    return sum([int(x) for x in str(number)])\n\ndef main():\n    number = 10\n    print(count_digits(number))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def countDigits(number):\n    \"\"\"\n    >>> countDigits(100)\n    3\n    >>> countDigits(12345)\n    5\n    >>> countDigits(0)\n    0\n    \"\"\"\n    return len(str(number))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def count_digits(number):\n    return int(number)\n\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_digits(12345)\nprint count_dig"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def digit_count(num):\n    # write your code here\n    count = 0\n    for i in range(10):\n        if num % i == 0:\n            count += 1\n    return count\n\n\nprint(digit_count(123))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Complete the numberOfDigits function below.\ndef numberOfDigits(x):\n    if x < 10:\n        return 1\n    else:\n        return int(math.log10(x)) + 1\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert numberOfDigits(5) == 2, \"5\"\n    assert numberOfDigits(1) == 1, \"1\"\n    assert numberOfDigits(10) == 2, \"10\"\n    assert numberOfDigits(1000) == 3, \"1000\"\n    assert numberOfDigits(1024) == 2, \"1024\"\n    assert numberOfDigits(15000) == 3, \"15000\"\n    assert numberOfDigits(123456789) == 8, \"123456789\""
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import math\n\ndef count_digits(number):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n\n    >>> count_digits(123)\n    3\n    >>> count_digits(-123)\n    5\n    >>> count_digits(0)\n    0\n    \"\"\"\n\n    number = int(number)\n\n    if number == 0:\n        return 0\n\n    # number of digits in the number\n    num_digits = math.floor(math.log10(number))\n\n    # number of digits of the number\n    num_digits_num = int(math.floor(num_digits))\n\n    return num_digits_num\n\nif __name__ == '__main__':\n    print(count_digits(123))\n    print(count_digits(-123))\n    print(count_digits(0))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    res = 0\n    while num:\n        res += 1\n        num /= 10\n\n    return res\n\n\nprint count_digits(123456789)\nprint count_digits(123456789000)\nprint count_digits(1234567890000)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def count_digits(num):\n    num = str(num)\n    return len(num) - int(num)\n\nif __name__ == '__main__':\n    assert count_digits(123) == 4, \"Failed\"\n    assert count_digits(12345) == 5, \"Failed\"\n    assert count_digits(1234567) == 8, \"Failed\"\n    assert count_digits(123456789) == 10, \"Failed\"\n    assert count_digits(12345678901) == 12, \"Failed\"\n    assert count_digits(1234567890123) == 14, \"Failed\"\n    assert count_digits(123456789012345) == 16, \"Failed\"\n    assert count_digits(1234567890123456) == 18, \"Failed\"\n    assert count_digits(12345678901234567) == 20, \"Failed\"\n    assert count_digits(123456789012345678) == 22, \"Failed\"\n    assert count_digits(1234567890123456789) == 24, \"Failed\""
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def count_digits(num):\n    \"\"\"\n    >>> count_digits(0)\n    0\n    >>> count_digits(1)\n    1\n    >>> count_digits(100)\n    4\n    >>> count_digits(123456789)\n    10\n    \"\"\"\n    return sum(map(int, str(num)))\n\n# test\n\ndef test():\n    assert count_digits(0) == 0\n    assert count_digits(1) == 1\n    assert count_digits(100) == 4\n    assert count_digits(123456789) == 10\n\nif __name__ == '__main__':\n    test()"
    }
  ]
}