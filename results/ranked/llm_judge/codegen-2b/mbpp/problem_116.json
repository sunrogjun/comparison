{
  "timestamp": "2025-09-14T18:13:30.551529",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 116,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def multiply(self, x, y):\n        result = 0\n        while y > 0:\n            result += x % 10 * y % 10\n            x = x % 10\n            y = y % 10\n        return result\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.multiply(3, 6)\n    print solution.multiply(9, 9)\n    print solution.multiply(3, 0)\n    print solution.multiply(0, 3)\n    print solution.multiply(3, -3)\n    print solution.multiply(-3, 3)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        return a * b\n\n\na = Solution()\nprint(a.multiply(1, 2))\nprint(a.multiply(2, 3))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/two-arrays-multiplication\n\ndef multiply(a, b):\n    result = 0\n    for i in range(len(a)):\n        result += a[i] * b[i]\n    return result\n\n# Your code should pass the following test cases.\n\ndef test_multiply_1():\n    assert(multiply([1,2,3], [1,2,3]) == 6)\n\ndef test_multiply_2():\n    assert(multiply([1,2,3], [4,5,6]) == 30)\n\ndef test_multiply_3():\n    assert(multiply([10,20,30], [4,5,6]) == 60)\n\ndef test_multiply_4():\n    assert(multiply([1,2,3], [4,5,6,7]) == 42)\n\ndef test_multiply_5():\n    assert(multiply([1,2,3,4], [5,6,7,8]) == 120)\n\ndef test_multiply_6():\n    assert(multiply([1,2,3,4,5], [6,7,8,9]) == 720)\n\ndef test_multiply_7():\n    assert(multiply([1,2,3,4,5,6], [7,8,9]) == 5040)\n\ndef test_multiply_8():\n    assert(multiply([1,2,3,4,5,6,7], [8,9]) == 40320)\n\ndef test_multiply_9():\n    assert(multiply([1,2,3,4,5,6,7,8], [9]) == 40320)\n\ndef test_multiply_10():\n    assert(multiply([1,2,3,4,5,6,7,8,9], [10]) == 40320)\n\ndef test_multiply_11():\n    assert(multiply([1,2,3,4,5,6,7,8,9,10], [11]) =="
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        carry = 0\n        product = 0\n        while a or b:\n            product = carry\n            if a:\n                product *= a\n            if b:\n                product += b\n            carry = product / 10\n            product %= 10\n            a, b = b, a % b\n        return product + carry"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\ndef multiply(a, b):\n    \"\"\"\n    :param a: an integer\n    :param b: an integer\n    :return: the integer\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return a * b\n\nif __name__ == '__main__':\n    assert multiply(1, 1) == 1\n    assert multiply(1, 2) == 2\n    assert multiply(2, 1) == 2\n    assert multiply(2, 2) == 4\n    assert multiply(3, 3) == 9\n    assert multiply(3, 4) == 12\n    assert multiply(3, 5) == 15\n    assert multiply(3, 6) == 21\n    assert multiply(3, 7) == 28\n    assert multiply(3, 8) == 36\n    assert multiply(3, 9) == 45\n    assert multiply(3, 10) == 60\n    assert multiply(3, 11) == 90\n    assert multiply(3, 12) == 120\n    assert multiply(3, 13) == 135\n    assert multiply(3, 14) == 210\n    assert multiply(3, 15) == 315\n    assert multiply(3, 16) == 432\n    assert multiply(3, 17) == 495\n    assert multiply(3, 18) == 630\n    assert multiply(3, 19) == 945\n    assert multiply(3, 20) == 1260\n    assert multiply(3, 21) == 1680\n    assert multiply(3, 22) == 2520\n    assert multiply(3, 23) == 3240\n    assert multiply(3, 24) == 4320\n    assert multiply(3, 25) == 6720\n    assert multiply(3, 26) == 10240\n    assert multiply(3, 27) == 14400\n    assert multiply(3, 28) == 20480\n    assert multiply(3, 29) == 28800\n    assert multiply(3, 30) == 40960\n    assert multiply(3, 31) == 72960\n    assert multiply(3, 32) == 122880\n    assert multiply(3, 33) == 175920\n    assert multiply(3, 34) == 253920\n    assert multiply(3, 35) == 368640"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    carry = 0\n    while a!= 0:\n        temp = a % 10\n        a = b % 10\n        b = a * b % 10\n        carry = a / 10 + carry\n        a = temp\n    return carry + b\n\nif __name__ == \"__main__\":\n    print(multiply(10, 8))\n    print(multiply(10, 5))\n    print(multiply(5, 10))\n    print(multiply(5, 7))\n    print(multiply(9, 3))\n    print(multiply(4, 6))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution(object):\n    \"\"\"\n    @param a, b: Two integers.\n    @return: The result of a * b.\n    \"\"\"\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        res = 1\n        while a!= 0:\n            res *= a\n            a, b = b % a, a\n        return res * b\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.multiply(1, 1)\n    print sol.multiply(2, 3)\n    print sol.multiply(2, -3)\n    print sol.multiply(-2, -3)\n    print sol.multiply(0, 1)\n    print sol.multiply(1, 0)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        carry = 0\n        res = 0\n        while b:\n            res, carry = res + a * b % 10, carry + a * b // 10\n            a, b = b, a % b\n        return res + carry\n\n\nif __name__ == \"__main__\":\n    print(Solution().multiply(1, 2))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while b > 0:\n        if b % 2 == 1:\n            result += a\n            b -= 1\n        a *= a\n        b /= 2\n    return result\n\ndef test_multiply():\n    assert multiply(4, 2) == 8\n\nif __name__ == '__main__':\n    test_multiply()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param a, a integer\n    # @param b, a integer\n    # @return a integer\n    def multiply(self, a, b):\n        if a == 0 or b == 0:\n            return 0\n        \n        cnt = 0\n        while a!= 0:\n            a, b = b % a, a\n        \n        return b\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.multiply(2, 8)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\nclass Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        result = 0\n        while b!= 0:\n            if b % 2 == 0:\n                result += a * (b / 2)\n                b = b / 2\n            else:\n                result += a * (b - 1)\n                b -= 1\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.multiply(2,3)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        return a * b"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        if a == 1 or b == 1:\n            return a * b\n        a, b = abs(a), abs(b)\n        c = 0\n        while a:\n            c = c * 10 + a % 10\n            a /= 10\n        while b:\n            c = c * 10 + b % 10\n            b /= 10\n        return c\n\nif __name__ == \"__main__\":\n    assert Solution().multiply(2, 2) == 4\n    assert Solution().multiply(3, 3) == 27\n    assert Solution().multiply(-1, 3) == -9\n    assert Solution().multiply(3, -1) == -27\n    assert Solution().multiply(3, -3) == 9\n    assert Solution().multiply(-3, -3) == 9"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def multiply(x, y):\n    return x * y\n\ndef test_multiply():\n    assert multiply(3, 5) == 15\n\n# Time:  O(n)\n# Space: O(1)\n# Divide and Conquer\n# 1. Iterate from left to right\n# 2. Create a list of two integers\n# 3. For each element of the list, multiply the two numbers and store the result\n# 4. Print the result\n# 5. Add the two lists together\n# 6. Return the result\n#\n# Time:  O(n)\n# Space: O(n)\n# Recursion\n# 1. Create a list of two integers\n# 2. For each element of the list, multiply the two numbers and store the result\n# 3. Return the result\n#\n# Time:  O(n)\n# Space: O(n)\n# Recursion\n# 1. Create a list of two integers\n# 2. For each element of the list, multiply the two numbers and store the result\n# 3. Return the result\n#\n# Time:  O(n)\n# Space: O(n)\n# Binary Search\n# 1. Create a list of two integers\n# 2. For each element of the list, multiply the two numbers and store the result\n# 3. Return the result\n#\n# Time:  O(n)\n# Space: O(1)\n# Binary Search\n# 1. Create a list of two integers\n# 2. For each element of the list, multiply the two numbers and store the result\n# 3. Return the result\n#\n# Time:  O(n)\n# Space: O(1)\n# Binary Search\n# 1. Create a list of two integers\n# 2. For each element of the list, multiply the two numbers and store the result\n# 3. Return the result\n#\n# Time:  O(n)\n# Space: O(n)\n# Binary Search\n# 1. Create a list of two integers\n# 2. For each element of the list, multiply the two numbers and store the result\n# 3. Return the result\n#\n# Time:  O(n)\n# Space: O(1)\n# Binary Search\n# 1. Create a list of two integers\n# 2. For each"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        result = 0\n        while a!= 0:\n            result = result * 10 + a % 10\n            a //= 10\n        while b!= 0:\n            result = result * 10 + b % 10\n            b //= 10\n        return result\n\n\nif __name__ == \"__main__\":\n    assert Solution().multiply(2, 3) == 6\n    assert Solution().multiply(3, 4) == 12\n    assert Solution().multiply(2, -2) == 0"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        return a * b\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.multiply(-2, 2)\n    print s.multiply(3, -1)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def multiply(x, y):\n    \"\"\"\n    Write a function multiply(x, y) that returns the result of multiplying x by y.\n    \"\"\"\n    return x * y\n\n\ndef main():\n    \"\"\"\n    Main function to test the program.\n    \"\"\"\n    assert multiply(5, 7) == 35\n    assert multiply(5, 3) == 15\n    assert multiply(3, 5) == 15\n    assert multiply(3, 3) == 9\n    assert multiply(3, 0) == 0\n    assert multiply(0, 3) == 0\n    assert multiply(0, 0) == 0\n    assert multiply(1, 1) == 1\n    assert multiply(1, 0) == 1\n    assert multiply(0, 1) == 1\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        if a == 1 or b == 1:\n            return a * b\n        m = 0\n        while a!= 0:\n            m = m + a % 2\n            a = a / 2\n        while b!= 0:\n            m = m + b % 2\n            b = b / 2\n        return m\n\nif __name__ == \"__main__\":\n    assert Solution().multiply(1, 1) == 1\n    assert Solution().multiply(1, 2) == 2\n    assert Solution().multiply(2, 3) == 6\n    assert Solution().multiply(3, 4) == 12\n    assert Solution().multiply(4, 5) == 20"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/multiplication-without-division/discuss/93541/Python-Solution-Using-Division-and-Modulus-with-Python-and-Python-3-2-4-and-2-3-and-2-5\n\nclass Solution(object):\n    def my_multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        result = 0\n        while a!= 0 or b!= 0:\n            if b < 0:\n                result = result * -1\n                b = b * -1\n            while a!= 0:\n                if a < 0:\n                    result = result * -1\n                    a = a * -1\n                result = result + a % b\n                a = a / b\n            a, b = b, a\n        return result\n\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        result = 1\n        while a!= 0:\n            if a < 0:\n                result = result * -1\n                a = a * -1\n            while b!= 0:\n                if b < 0:\n                    result = result * -1\n                    b = b * -1\n                result = result + a % b\n                a = a / b\n            a, b = b, a\n        return result\n\n\nif __name__ == '__main__':\n    print Solution().my_multiply(5, 3)\n    print Solution().my_multiply(-5, 3)\n    print Solution().my_multiply(5, -3)\n    print Solution().my_multiply(-5, -3)\n    print Solution().my_multiply(5, -3)\n    print Solution().my_multiply(5, -3)\n    print Solution().multiply(5, 3)\n    print Solution().multiply(-5, 3)\n    print Solution()."
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def multiply(self, x, y):\n        if x == 0 or y == 0:\n            return 0\n        result = 0\n        while x > 0:\n            result = result * 10 + x % 10\n            x = x / 10\n        while y > 0:\n            result = result * 10 + y % 10\n            y = y / 10\n        return result"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/multiply-integers/problem\n# https://www.geeksforgeeks.org/multiplication-in-python/\n# https://www.geeksforgeeks.org/multiplication-without-using-the-*-operator/\n\ndef multiply(a, b):\n    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    return a * b\n\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        a, b = map(int, input().split())\n        print(multiply(a, b))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def multiply(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return 0\n        elif y == 0:\n            return 0\n        elif x == 1:\n            return y\n        elif y == 1:\n            return x\n        elif x == y:\n            return x\n        elif x > y:\n            return self.multiply(y, x % y)\n        else:\n            return self.multiply(x, y % x)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.multiply(3, 4))\n    print(s.multiply(5, 5))\n    print(s.multiply(3, 0))\n    print(s.multiply(0, 4))\n    print(s.multiply(5, 0))\n    print(s.multiply(0, 0))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import unittest\n\nclass TestMultiply(unittest.TestCase):\n    def test_multiply(self):\n        self.assertEqual(multiply(3, 6), 6)\n        self.assertEqual(multiply(3, -6), 6)\n        self.assertEqual(multiply(-3, 6), -18)\n        self.assertEqual(multiply(-3, -6), -18)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def multiply(x, y):\n    result = 0\n    while x!= 0:\n        result += x % 10 * y % 10\n        x = x // 10\n        y = y // 10\n    return result\n\ndef test_multiply(x, y):\n    assert multiply(x, y) == multiply_python(x, y)\n    assert multiply(y, x) == multiply_python(x, y)\n    assert multiply(x, y) == multiply(y, x)\n\ndef multiply_python(x, y):\n    return x * y\n\ndef main():\n    test_multiply(1, 1)\n    test_multiply(2, 3)\n    test_multiply(3, 4)\n    test_multiply(4, 5)\n    test_multiply(5, 6)\n    test_multiply(6, 7)\n    test_multiply(7, 8)\n    test_multiply(8, 9)\n    test_multiply(9, 10)\n    test_multiply(10, 11)\n    test_multiply(11, 12)\n    test_multiply(12, 13)\n    test_multiply(13, 14)\n    test_multiply(14, 15)\n    test_multiply(15, 16)\n    test_multiply(16, 17)\n    test_multiply(17, 18)\n    test_multiply(18, 19)\n    test_multiply(19, 20)\n    test_multiply(20, 21)\n    test_multiply(21, 22)\n    test_multiply(22, 23)\n    test_multiply(23, 24)\n    test_multiply(24, 25)\n    test_multiply(25, 26)\n    test_multiply(26, 27)\n    test_multiply(27, 28)\n    test_multiply(28, 29)\n    test_multiply(29, 30)\n    test_multiply(30, 31)\n    test_multiply(31, 32)\n    test_"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/multiply-numbers/problem\n# https://www.hackerrank.com/challenges/multiply-numbers/submissions/code/26698510\n# https://www.hackerrank.com/challenges/multiply-numbers/submissions/code/116944\n# https://www.hackerrank.com/challenges/multiply-numbers/submissions/code/116944\n\ndef multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while a:\n        result += a % 10 * b % 10\n        a //= 10\n        b //= 10\n    return result\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(multiply(a, b))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def multiply(a, b):\n    # Write your code here\n    return a * b\n\ndef test(a, b):\n    assert multiply(a, b) == a * b\n\na = int(input())\nb = int(input())\ntest(a, b)"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        # if a is 0, return 0\n        if a == 0:\n            return 0\n        # if a is 1, return b\n        if a == 1:\n            return b\n        # if a is 2, return a * b\n        if a == 2:\n            return a * b\n        # if a is 3, return a * b * a\n        if a == 3:\n            return a * b * a\n        # if a is 4, return a * b * a * b\n        if a == 4:\n            return a * b * a * b\n        # if a is 5, return a * b * a * b * a * b\n        if a == 5:\n            return a * b * a * b * a * b\n        # if a is 6, return a * b * a * b * a * b * a * b\n        if a == 6:\n            return a * b * a * b * a * b * a * b\n        # if a is 7, return a * b * a * b * a * b * a * b * a * b\n        if a == 7:\n            return a * b * a * b * a * b * a * b * a * b\n        # if a is 8, return a * b * a * b * a * b * a * b * a * b * a * b\n        if a == 8:\n            return a * b * a * b * a * b * a * b * a * b * a * b\n        # if a is 9, return a * b * a * b * a * b * a * b * a * b * a * b * a * b\n        if a == 9:\n            return a * b * a * b * a * b * a * b * a * b * a * b * a * b\n        # if a is 10, return a * b * a * b * a * b * a * b * a * b * a * b * a * b * a * b * a * b * a * b * a * b * a"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def multiply(x, y):\n    result = 0\n    while y:\n        if y & 1:\n            result += x\n        x *= x\n        y >>= 1\n    return result\n\nprint multiply(10, 10)\nprint multiply(10, 9)\nprint multiply(10, 8)"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "import unittest\n\nclass TestMultiply(unittest.TestCase):\n    def test_multiply(self):\n        self.assertEqual(multiply(5, 6), 30)\n        self.assertEqual(multiply(5, -6), -30)\n        self.assertEqual(multiply(-5, 6), -30)\n        self.assertEqual(multiply(-5, -6), 30)\n        self.assertEqual(multiply(0, 0), 0)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def multiply(x, y):\n    return x * y\n\ndef test_multiply():\n    assert multiply(5, 4) == 10\n\nif __name__ == '__main__':\n    test_multiply()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param a, a integer\n    # @param b, a integer\n    # @return a integer\n    def multiply(self, a, b):\n        m = a % 10\n        n = b % 10\n        result = 0\n        while n!= 0:\n            result += a * m\n            m = a % 10\n            a = b % 10\n            b = b / 10\n        return result + m * n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.multiply(3, 4))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def multiply(a, b):\n    \"\"\"\n    :param a: The first integer to multiply.\n    :param b: The second integer to multiply.\n    :return: The result of the multiplication of a and b.\n    \"\"\"\n    # if a < 0, then multiply a with -1\n    if a < 0:\n        a = -1 * a\n    # if b < 0, then multiply b with -1\n    if b < 0:\n        b = -1 * b\n    # if a == 0 or b == 0, then return 0\n    if a == 0 or b == 0:\n        return 0\n    # return the result\n    return a * b\n\n\ndef main():\n    # Test Cases\n    assert multiply(3, 4) == 12\n    assert multiply(3, -4) == -12\n    assert multiply(-3, 4) == -12\n    assert multiply(-3, -4) == 12\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 9.0,
      "candidate": "def multiply(a, b):\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return a * b\n\ndef test(a, b):\n    assert(multiply(a, b) == a * b)\n\ntest(1, 2)\ntest(10, 3)\ntest(1, 3)\ntest(3, 1)"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "def multiply(a, b):\n    \"\"\"\n    >>> multiply(6, 4)\n    12\n    >>> multiply(5, 3)\n    15\n    >>> multiply(3, 4)\n    12\n    >>> multiply(2, 1)\n    2\n    >>> multiply(0, 0)\n    0\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    return a * b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "def multiply(a, b):\n    if a == 0 or b == 0:\n        return 0\n    \n    product = a * b\n    \n    while product > 0:\n        product = product / 10\n        a = a * 10\n    \n    return a\n\nif __name__ == '__main__':\n    a = int(raw_input())\n    b = int(raw_input())\n    \n    print multiply(a, b)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param a, a number\n    # @param b, a number\n    # @return a number\n    def multiply(self, a, b):\n        result = 0\n        while b!= 0:\n            if b % 2 == 1:\n                result = result + a\n                b = b - 1\n            a = a * 2\n            b = b / 2\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.multiply(2, 6)\n    print s.multiply(3, 4)\n    print s.multiply(4, 3)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        while a or b:\n            if a % 2 == 1:\n                result += b\n                a, b = b % a, a\n            else:\n                result += a\n                a, b = b % a, a\n        return result"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def multiply(x, y):\n    \"\"\"\n    :param x: An integer\n    :param y: An integer\n    :return: The result of x*y\n    \"\"\"\n    result = 1\n    while y > 0:\n        result *= y\n        y -= 1\n    return result\n\nif __name__ == \"__main__\":\n    assert multiply(1, 2) == 2\n    assert multiply(2, 2) == 4\n    assert multiply(3, 3) == 9\n    assert multiply(3, 4) == 12"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        \n        if a < 0:\n            a = -a\n        if b < 0:\n            b = -b\n        \n        a, b = abs(a), abs(b)\n        \n        if a == 1 or b == 1:\n            return a * b\n        \n        if a < b:\n            a, b = b, a\n        \n        a *= 2\n        b *= 2\n        \n        carry = 0\n        while a or b:\n            if a & 1:\n                carry = carry + b\n            b >>= 1\n            if b & 1:\n                carry = carry + a\n            a >>= 1\n        \n        return carry + a"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        while a:\n            result += a % 10 * b % 10\n            a /= 10\n            b /= 10\n        return result\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print(solution.multiply(4, 3))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def multiply(a, b):\n    return a * b\n\ndef test_multiply():\n    assert multiply(2, 3) == 6\n    assert multiply(2, -3) == -6\n    assert multiply(1, 0) == 0\n    assert multiply(0, 1) == 0\n    assert multiply(0, 0) == 0\n    assert multiply(1, 1) == 1\n    assert multiply(3, -1) == -9\n\nif __name__ == '__main__':\n    test_multiply()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "# Definition for an integer.\nclass Integer(object):\n    def __init__(self, x):\n        \"\"\"\n        :type x: int\n        \"\"\"\n        self.x = x\n\n    def __str__(self):\n        return str(self.x)\n\n    def __repr__(self):\n        return str(self.x)\n\n    def __add__(self, y):\n        return Integer(self.x + y.x)\n\n    def __mul__(self, y):\n        return Integer(self.x * y.x)\n\n\nclass Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: Integer\n        :type b: Integer\n        :rtype: Integer\n        \"\"\"\n        res = Integer(0)\n        while a or b:\n            if a and b:\n                res = res.__add__(a.__mul__(b))\n                a = a.__mul__(a)\n                b = b.__mul__(b)\n            elif a:\n                res = res.__add__(a.__mul__(b))\n                a = a.__mul__(a)\n            else:\n                res = res.__add__(b.__mul__(a))\n                b = b.__mul__(b)\n        return res"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# https://www.youtube.com/watch?v=eZjwBc5YK4Q\n\ndef multiply(x, y):\n    \"\"\"\n    :param x: The first integer\n    :param y: The second integer\n    :return: The product of x and y\n    \"\"\"\n    if x == 0:\n        return 0\n    if y == 0:\n        return 0\n    result = 0\n    while y > 0:\n        result = x + result * y\n        y -= 1\n    return result"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        if a == 1 or b == 1:\n            return a * b\n        if a > 1 and b > 1:\n            return (a * b) % 10\n        if a > 1 and b == 1:\n            return (a * b) % 10\n        if a == 1 and b > 1:\n            return (a * b) % 10\n        return a * b % 10\n\n\nif __name__ == \"__main__\":\n    assert Solution().multiply(3, 5) == 15\n    assert Solution().multiply(2, 3) == 6\n    assert Solution().multiply(6, 7) == 42\n    assert Solution().multiply(9, 1) == 9\n    assert Solution().multiply(1, 9) == 1\n    assert Solution().multiply(9, 1) == 9\n    assert Solution().multiply(1, 9) == 1\n    assert Solution().multiply(1, 1) == 1\n    assert Solution().multiply(2, 2) == 4\n    assert Solution().multiply(2, 3) == 6\n    assert Solution().multiply(3, 2) == 6\n    assert Solution().multiply(3, 3) == 9"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def multiply(a, b):\n    \"\"\"\n    :param a: integer\n    :param b: integer\n    :return: integer\n    \"\"\"\n    res = 0\n    while a!= 0:\n        if a % 10 == 0:\n            res = res * 10 + a % 10\n        a = a / 10\n    while b!= 0:\n        if b % 10 == 0:\n            res = res * 10 + b % 10\n        b = b / 10\n    return res\n\nif __name__ == \"__main__\":\n    assert multiply(1, 1) == 1\n    assert multiply(1, 2) == 2\n    assert multiply(10, 10) == 100\n    assert multiply(100, 10) == 1000\n    assert multiply(100, 100) == 10000\n    assert multiply(100, 100) == 10000\n    assert multiply(1000, 100) == 10000\n    assert multiply(1000, 1000) == 100000\n    assert multiply(1000, 1000) == 100000"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def multiply(a, b):\n    return a * b\n\ndef test():\n    assert multiply(2, 3) == 6\n    assert multiply(2, 3) == 6\n    assert multiply(2, -3) == -6\n    assert multiply(2, 0) == 0\n    assert multiply(-2, 3) == -6\n    assert multiply(-2, -3) == 6\n    assert multiply(-2, 0) == 0\n    assert multiply(0, 2) == 0\n    assert multiply(0, -2) == 0\n    assert multiply(0, 0) == 0\n\ntest()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def multiply(x, y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    return x * y\n\n# https://www.hackerrank.com/challenges/two-arrays/problem\n# Problem: Two Arrays\n#\n# Two arrays of size n and m are given.\n# The first array is a sequence of numbers.\n# The second array is a sequence of numbers.\n# Each number in the first array is unique.\n# Each number in the second array is unique.\n#\n# Find the product of all the numbers in the second array.\n#\n# Example 1:\n# Input: n = 2, m = 3\n# Output: 6\n# Explanation:\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1 = 6\n# 3 * 1 * 2 = 6\n# 1 * 2 * 3 = 6\n# 2 * 3 * 1"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        if a == 1 or b == 1:\n            return a * b\n        return self.multiply(a - 1, b - 1) + a * b\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.multiply(2, 3))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer} num1\n    # @param {integer} num2\n    # @return {integer}\n    def multiply(self, num1, num2):\n        carry = 0\n        while num1 > 0 or num2 > 0:\n            res = carry\n            if num1 > 0:\n                res = res * 10 + num1 % 10\n                num1 = num1 / 10\n            if num2 > 0:\n                res = res * 10 + num2 % 10\n                num2 = num2 / 10\n            carry = res / 10\n            res = res % 10\n        return res + carry\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.multiply(13, 14)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        while a or b:\n            if b == 0:\n                ans = ans * a\n                a = 0\n            else:\n                ans = ans * b + a % b\n                a = a / b\n        return ans\n\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        a = a % 1000000007\n        b = b % 1000000007\n        ans = 0\n        while a or b:\n            if b == 0:\n                ans = ans * a\n                a = 0\n            else:\n                ans = ans * b + a % b\n                a = a / b\n        return ans % 1000000007\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.multiply(1, 1)\n    print sol.multiply(2, 3)\n    print sol.multiply(5, 6)\n    print sol.multiply(12, 11)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def multiply(self, x, y):\n        return x * y % 10\n\n\ns = Solution()\n\nprint(s.multiply(2, 3))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        a = abs(a)\n        b = abs(b)\n        res = 0\n        while b:\n            res += a % 10 * b % 10\n            a /= 10\n            b /= 10\n        return res"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        if a == 1 or b == 1:\n            return a * b\n        result = 1\n        while a > 0 or b > 0:\n            if a > 0:\n                result = result * a\n                a = a - 1\n            if b > 0:\n                result = result * b\n                b = b - 1\n        return result"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef multiply(a, b):\n    return a * b\n\nprint multiply(10, 2)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param a, a integer\n    # @param b, a integer\n    # @return a long integer\n    def multiply(self, a, b):\n        # write your code here\n        return a * b\n        \nsolution = Solution()\n\nprint solution.multiply(1,2)\nprint solution.multiply(2,3)\nprint solution.multiply(3,4)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        m = 0\n        n = 0\n        while num2:\n            m = (m << 1) + num1 % 10\n            n = (n << 1) + num2 % 10\n            num1 //= 10\n            num2 //= 10\n        return m * n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.multiply(3, 8) == 24\n    assert s.multiply(4, 0) == 0\n    assert s.multiply(-1, 4) == -4\n    assert s.multiply(-1, -4) == 4"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        if a < 0:\n            a = -a\n        if b < 0:\n            b = -b\n        carry = 0\n        result = 0\n        while a!= 0:\n            if a & 1:\n                result += b * (a >> 1)\n                carry = 1\n            a >>= 1\n            b >>= 1\n        if carry:\n            result += b\n        return result"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "# The idea is that we can use the fact that a^b = a * b^(-1) = b^a\n# We can write a^b as a^(b-1) = a^(b/2)*a^(b/2) and then\n# a^(b-1) = a^(b/2)*a^(b/2)^-1 = a^(b/2)^-1*a^(b/2)^-1\n# The last step is to take the inverse of the last step and then multiply\n# We can write this in a similar way to the case of the function *.\n# We can also use the fact that a^b = a^(b+1) = a^b*a^(-1) = a^(-1)*a^b\n# We can write a^b as a^(b+1) = a^(b/2)*a^(b/2)^-1 = a^(b/2)*a^(b/2)^-1*a^(b/2)^-1\n# which is the same as a^(b/2)^-1*a^(b/2)^-1*a^(-1)\n# We can write this in a similar way to the case of the function *.\n# We can also use the fact that a^b = a^(b-1) = a^b*a^(-1) = a^(-1)*a^b\n# We can write a^b as a^(b-1) = a^(b/2)*a^(b/2)^-1 = a^(b/2)*a^(b/2)^-1*a^(b/2)^-1\n# which is the same as a^(b/2)^-1*a^(b/2)^-1*a^(-1)\n# We can write this in a similar way to the case of the function *.\n# We can also use the fact that a^b = a^(b+1) = a^b*a^(-1) = a^(-1)*a^b\n# We can write a^b as a^(b+1) = a^(b/"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param a, a number\n    # @param b, a number\n    # @return a list of integer\n    def multiply(self, a, b):\n        if a == 0 or b == 0:\n            return [0]\n        if a == 1 or b == 1:\n            return [a, b]\n\n        ans = []\n        i = 0\n        while a > 0:\n            if a % 2 == 1:\n                ans.append(b)\n                a = a >> 1\n            else:\n                a = a >> 1\n                b = b << 1\n            i += 1\n        ans.reverse()\n        return ans"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        # \u53d6\u5c0f\u7684\u503c\n        if b < 0:\n            return self.multiply(-b, a)\n        if a == 0:\n            return 0\n        if a == 1:\n            return b\n        if a == -1:\n            return -b\n        # \u4e24\u4e2a\u6570\u76f8\u4e58\n        result = 0\n        while b:\n            # \u6bcf\u6b21\u79fb\u52a8\u4e00\u4f4d\n            result = result * 10 + a % 10\n            a = a / 10\n            b = b % 10\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.multiply(2, -2))\n    print(s.multiply(2, 3))\n    print(s.multiply(-2, 3))\n    print(s.multiply(-2, -3))\n    print(s.multiply(1, -2))\n    print(s.multiply(-1, -2))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "class Solution:\n    # @return a tuple, (result, carry)\n    def multiply(self, a, b):\n        result = 0\n        carry = 0\n        if a == 0 or b == 0:\n            return (a * b, carry)\n        \n        while b!= 0:\n            if b % 2 == 0:\n                result = result * 10 + a % 10\n                a = a / 10\n                carry = 1\n            else:\n                result = result * 10 + a % 10\n                a = a / 10\n                carry = 0\n            b /= 2\n        \n        return (result, carry)\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.multiply(2, 3)\n    print solution.multiply(9, 10)\n    print solution.multiply(13, 21)\n    print solution.multiply(13, -21)\n    print solution.multiply(-13, 21)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a > b:\n        return multiply(b, a)\n    if a < 0:\n        return multiply(-a, b)\n    if b < 0:\n        return multiply(a, -b)\n    carry = 0\n    while a!= 0:\n        carry += a % 10\n        a = a / 10\n    while b!= 0:\n        carry += b % 10\n        b = b / 10\n    return carry * 10 + a"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def multiply(a, b):\n  \"\"\"\n  :type a: int\n  :type b: int\n  :rtype: int\n  \"\"\"\n  return a * b\n\n\n\nif __name__ == '__main__':\n  assert multiply(2, 3) == 6, '2 * 3 = {}'.format(multiply(2, 3))\n  assert multiply(4, 5) == 20, '4 * 5 = {}'.format(multiply(4, 5))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def multiply(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        carry = 0\n        res = 0\n        while x or y:\n            if y:\n                res += x % y\n                y /= 10\n            if x:\n                res += x % y\n                x /= 10\n            carry += x % y\n            x /= 10\n        return res + carry"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        while a or b:\n            if b:\n                ans = ans * 10 + b % 10\n                b /= 10\n            if a:\n                ans = ans * 10 + a % 10\n                a /= 10\n        return ans\n\nif __name__ == '__main__':\n    assert Solution().multiply(10, 10) == 100\n    assert Solution().multiply(10, 11) == 101\n    assert Solution().multiply(10, -1) == -10\n    assert Solution().multiply(-10, -10) == 10\n    assert Solution().multiply(10, -10) == -10\n    assert Solution().multiply(-10, -10) == 10\n    assert Solution().multiply(10, -10) == -10\n    assert Solution().multiply(-10, -10) == 10\n    assert Solution().multiply(10, -10) == -10\n    assert Solution().multiply(-10, -10) == 10\n    assert Solution().multiply(10, -10) == -10\n    assert Solution().multiply(-10, -10) == 10\n    assert Solution().multiply(10, -10) == -10"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param num1, a string\n    # @param num2, a string\n    # @return a string\n    def multiply(self, num1, num2):\n        res = []\n        mul = 1\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                mul *= int(num1[i]) * int(num2[j])\n                res.append(str(mul % 10))\n                mul /= 10\n        return ''.join(res)\n\n    # @param num1, a string\n    # @param num2, a string\n    # @return a string\n    def multiply2(self, num1, num2):\n        res = []\n        mul = 1\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                mul *= int(num1[i]) * int(num2[j])\n                res.append(str(mul % 10))\n                mul /= 10\n        return ''.join(res)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        mul = 1\n        while num2:\n            mul = mul * num2\n            num2 = num2 >> 1\n        return mul * num1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.multiply(1, 2)\n    print s.multiply(2, 3)\n    print s.multiply(5, 6)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        result = 0\n        while a or b:\n            if a > 0:\n                result += a % 10 * b % 10\n                a = a / 10\n            if b > 0:\n                result += b % 10 * a % 10\n                b = b / 10\n        return result"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def multiply(x, y):\n    result = 0\n    while y:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result\n\nprint multiply(5, 3)\nprint multiply(5, 3)\nprint multiply(5, 3)\nprint multiply(5, 3)\nprint multiply(5, 3)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    product = a * b\n    if product < 0:\n        product = -product\n        \n    return product\n\nif __name__ == '__main__':\n    assert(multiply(2, 3) == 6)\n    assert(multiply(5, -2) == -5)\n    assert(multiply(0, 0) == 0)\n    assert(multiply(0, 1) == 0)\n    assert(multiply(1, 0) == 0)\n    assert(multiply(-1, 0) == 0)\n    assert(multiply(1, -1) == -1)\n    assert(multiply(-1, -1) == -1)\n    assert(multiply(1, -1) == -1)\n    assert(multiply(-1, 1) == -1)\n    assert(multiply(1, 2) == 2)\n    assert(multiply(1, -2) == -2)\n    assert(multiply(-1, 2) == 2)\n    assert(multiply(-1, -2) == 2)\n    assert(multiply(3, 4) == 12)\n    assert(multiply(-3, 4) == -12)\n    assert(multiply(3, -4) == -12)\n    assert(multiply(-3, -4) == 12)\n    assert(multiply(3, 0) == 0)\n    assert(multiply(0, 3) == 0)\n    assert(multiply(0, -3) == 0)\n    assert(multiply(-3, 0) == 0)\n    assert(multiply(3, -3) == -9)\n    assert(multiply(-3, -3) == 9)\n    assert(multiply(3, -4) == -12)\n    assert(multiply(-3, 4) == 12)\n    assert(multiply(-3, -4) == -12)\n    assert(multiply(3,"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        while b:\n            if b & 1:\n                result = result * a\n                a = a * a\n            b >>= 1\n        return result"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# https://www.tutorialspoint.com/python_basic_python_programming_tutorial/basic_python_programming_tutorial_2.html\n\ndef multiply(x, y):\n    return x * y\n\nprint(multiply(2, 3))\nprint(multiply(2, 2))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def multiply(a, b):\n  \"\"\"\n  Input:\n    a: an integer\n    b: an integer\n  Output:\n    an integer\n  \"\"\"\n  if a == 0 or b == 0:\n    return 0\n  if b == 1:\n    return a\n  if a == 1:\n    return b\n  res = 0\n  while a:\n    res = res * a % 10\n    a = a / 10\n  while b:\n    res = res * b % 10\n    b = b / 10\n  return res\n\nif __name__ == \"__main__\":\n  assert(multiply(8, 10) == 48)\n  assert(multiply(8, 8) == 64)\n  assert(multiply(8, 2) == 8)\n  assert(multiply(2, 8) == 16)\n  assert(multiply(2, 2) == 4)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef multiply(a, b):\n    return a * b\n\nif __name__ == '__main__':\n    a = 5\n    b = 10\n    print multiply(a, b)\n    # 5 * 10 = 50"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        res = 1\n        while a!= 0:\n            while b!= 0:\n                res *= 10\n                res += a % 10\n                a /= 10\n                b /= 10\n            b = 1\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().multiply(4, 3) == 12\n    assert Solution().multiply(3, 4) == 12\n    assert Solution().multiply(2, 2) == 4\n    assert Solution().multiply(2, 3) == 6\n    assert Solution().multiply(3, 3) == 9\n    assert Solution().multiply(3, 4) == 12"
    },
    {
      "rank": 76,
      "score": 7.0,
      "candidate": "import os\nimport time\n\nstart_time = time.time()\n\ndef multiply(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return a * b\n    if a == b:\n        return multiply(a-1, b-1)\n    return multiply(a, b-1) + multiply(a-1, b)\n\nprint(multiply(2, 3))\n\nprint('--- %s seconds ---' % (time.time() - start_time))"
    },
    {
      "rank": 77,
      "score": 3.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        a = abs(a)\n        b = abs(b)\n        if a == 0 or b == 0:\n            return 0\n        if a > b:\n            return self.multiply(b, a)\n        if b > a:\n            return self.multiply(a, b)\n        carry = 0\n        while a!= 0:\n            carry, a = divmod(a, b)\n            b = a\n        return carry\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/multiply-two-numbers/solution/\n# Approach #1: Divide and Conquer\n# Complexity Analysis\n# Time Complexity: O(log(max(n, m))), where n is the number of digits in the number being multiplied, and m is the number of digits in the number being multiplied by\n# Space Complexity: O(1)\n# Sorting time complexity: O(n)\n# Sorting Space Complexity: O(n)\n\n# 14ms 97.74%\nclass Solution {\n    public int multiply(int a, int b) {\n        if (a == 0 || b == 0) return 0;\n        if (a > b) return multiply(b, a);\n        if (b > a) return multiply(a, b);\n        long carry = 0;\n        while (a!= 0) {\n            carry = (carry * 10) + a % 10;\n            a /= 10;\n        }\n        return (int) carry;\n    }\n}\n\n# Approach #2: Divide and Conquer\n# Complexity Analysis\n# Time Complexity: O(log(max(n, m))), where n is the number of digits in the number being multiplied, and m is the number of digits in the number being"
    },
    {
      "rank": 78,
      "score": 2.0,
      "candidate": "#!/usr/bin/env python\n\nimport unittest\n\nclass Solution:\n    # @return an integer\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        # base case\n        if a == 1 or b == 1:\n            return a * b\n        # base case\n        if a == 2 or b == 2:\n            return a * b\n        # recursion\n        return self.multiply(a - 1, b) + self.multiply(a, b - 1)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 10ms 100%\nclass Solution {\n    public int multiply(int a, int b) {\n        return a == 0 || b == 0? 0 : a == 1 || b == 1? a * b : a == 2 || b == 2? a * b : a * (b - 1) + a * (b - 2);\n    }\n}\n\n# 6ms 100%\nclass Solution {\n    public int multiply(int a, int b) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        if (a == 1 || b == 1) {\n            return a * b;\n        }\n        if (a == 2 || b == 2) {\n            return a * b;\n        }\n        return a * (b - 1) + a * (b - 2);\n    }\n}\n'''"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        m, n = a, b\n        res = 0\n        while m or n:\n            res = res * 10 + (m % 10) * (n % 10)\n            m /= 10\n            n /= 10\n        return res\n\nif __name__ == '__main__':\n    assert Solution().multiply(3, 10) == 36"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param a, a integer\n    # @param b, a integer\n    # @return an integer\n    def multiply(self, a, b):\n        return a*b%1000000007\n\n\nif __name__ == \"__main__\":\n    assert Solution().multiply(2, 3) == 6"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "import unittest\nimport timeit\n\nclass Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        a *= b\n        b *= a\n        return a + b\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/multiply-two-numbers/solution/\n\n# 1ms 100%\nclass Solution {\n    public int multiply(int a, int b) {\n        return a * b;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int multiply(int a, int b) {\n        return a * b;\n    }\n}\n'''"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_multiply_one_integer(self):\n        self.assertEqual(multiply_two_integers(1, 1), 1)\n\n    def test_multiply_one_integer_2(self):\n        self.assertEqual(multiply_two_integers(2, 1), 2)\n\n    def test_multiply_one_integer_10(self):\n        self.assertEqual(multiply_two_integers(10, 1), 10)\n\n    def test_multiply_two_integers(self):\n        self.assertEqual(multiply_two_integers(1, 2), 2)\n\n    def test_multiply_two_integers_2(self):\n        self.assertEqual(multiply_two_integers(2, 2), 4)\n\n    def test_multiply_two_integers_10(self):\n        self.assertEqual(multiply_two_integers(10, 10), 100)\n\n    def test_multiply_two_integers_100(self):\n        self.assertEqual(multiply_two_integers(100, 100), 10000)\n\n    def test_multiply_two_integers_1000(self):\n        self.assertEqual(multiply_two_integers(1000, 1000), 100000)\n\ndef multiply_two_integers(x, y):\n    return x * y\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        if a == 1 or b == 1:\n            return a * b\n        if a == -1 or b == -1:\n            return -a * b\n        if a > 0 and b > 0:\n            if a < b:\n                return self.multiply(a, b - 1) * b\n            else:\n                return a * self.multiply(b, a - 1)\n        if a > 0 and b < 0:\n            return self.multiply(a, b) * self.multiply(-b, -a)\n        if a < 0 and b > 0:\n            return self.multiply(-a, b) * self.multiply(a, -b)\n        if a < 0 and b < 0:\n            return -self.multiply(-a, b) * self.multiply(a, -b)\n        if a == 0:\n            return 0\n        return self.multiply(b, a)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/multiply-two-integers/solution/\n\n/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\n\n# 1ms 100%\nclass Solution {\n    public int multiply(int a, int b) {\n        return a == 0 || b == 0? 0 : a == 1 || b == 1? a * b : a > 0 && b > 0? a * b - a"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param a, a is an integer\n    # @param b, b is an integer\n    # @return an integer\n    def multiply(self, a, b):\n        if a == 0 or b == 0:\n            return 0\n        if a < 0 or b < 0:\n            return self.multiply(-a, -b)\n        res = 0\n        while a!= 0:\n            res += (a % 10) * (b % 10)\n            a /= 10\n            b /= 10\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.multiply(2, 3))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution:\n    # @return a float\n    def myPow(self, x, n):\n        result = 1.0\n        while n > 0:\n            if n % 2 == 1:\n                result *= x\n            x *= x\n            n /= 2\n        return result\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/multiply-two-numbers/solution/\n# Approach #1: Brute Force\n# Complexity Analysis\n# Time Complexity: O(n^2)\n# Space Complexity: O(n^2)\n#\n# 1. Write a function to multiply two numbers without using the * operator in python.\n# 2. Write a recursive function to do the same.\n# 3. Try to think of a method to do the same.\n# 4. Try to think of a method to do the same.\n# 5. Try to think of a method to do the same.\n# 6. Try to think of a method to do the same.\n# 7. Try to think of a method to do the same.\n# 8. Try to think of a method to do the same.\n# 9. Try to think of a method to do the same.\n# 10. Try to think of a method to do the same.\n# 11. Try to think of a method to do the same.\n# 12. Try to think of a method to do the same.\n# 13. Try to think of a method to do the same.\n# 14. Try to think of a method to do the same.\n# 15. Try to think of a method to do the same.\n# 16. Try to think of a method to do the same.\n# 17. Try to think of a method to do the same.\n# 18. Try to think of a method to do the same.\n# 19. Try to think of a method to do the same.\n# 20. Try to think of a method to do the same.\n# 21. Try to think of"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def multiply(self, x, y):\n        carry = 0\n        result = 0\n        while y > 0:\n            quotient = x % y\n            x = x / y\n            y = quotient\n            result += quotient\n            if carry == 0:\n                carry = quotient\n            else:\n                carry += quotient\n        return result + carry\n\n\nif __name__ == '__main__':\n    assert Solution().multiply(3, 2) == 6\n    assert Solution().multiply(5, 6) == 20\n    assert Solution().multiply(3, 5) == 15\n    assert Solution().multiply(4, 5) == 20\n    assert Solution().multiply(8, 8) == 64\n    assert Solution().multiply(15, 15) == 900\n    assert Solution().multiply(15, 16) == 720\n    assert Solution().multiply(15, 0) == 0"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return a * b\n\n# Test Cases\nprint(multiply(4, 3))\nprint(multiply(4, 3))\nprint(multiply(4, 3))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def multiply(x, y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    return x * y\n\n\nif __name__ == \"__main__\":\n    print(multiply(2, 3))\n    print(multiply(1, 1))\n    print(multiply(1, 2))\n    print(multiply(2, 2))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        carry = 0\n        res = 0\n        while a:\n            res = res * 10 + a % 10\n            a //= 10\n        while b:\n            res = res * 10 + b % 10\n            b //= 10\n        while carry:\n            res = res * 10 + carry % 10\n            carry /= 10\n        return res\n\nclass Solution2(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        m = 0\n        while a or b:\n            m = m * 10 + (a % 10) * (b % 10)\n            a //= 10\n            b //= 10\n        return m"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution:\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        return a * b % 10**9 + (a * b) // 10**9\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/multiply-two-numbers-without-using-the-multiplication-operator/solution/\nApproach 1: Binary Search\nComplexity Analysis\nTime Complexity: O(nlogm) [where m is the max number]\nSpace Complexity: O(1)\n\n# 9ms 98.07%\nclass Solution {\n    public int multiply(int a, int b) {\n        if (a == 0 || b == 0) return 0;\n        long res = a * b;\n        return (int)(res % 10_000_000_000L);\n    }\n}\n\nApproach 2: Binary Search\nComplexity Analysis\nTime Complexity: O(logn) [where l is the max number]\nSpace Complexity: O(1)\n\n# 9ms 98.07%\nclass Solution {\n    public int multiply(int a, int b) {\n        if (a == 0 || b == 0) return 0;\n        int l = 1;\n        int r = Integer.MAX_VALUE;\n        while (l < r) {\n            int mid = l + (r - l) / 2;\n            long res = a * b * mid;\n            if (res < 0_000_000_000L) l = mid + 1;\n            else r = mid;\n        }\n        return (int)(res % 10_000_000_000L);\n    }\n}\n\nApproach 3: Dynamic Programming\nComplexity Analysis\nTime Complexity: O(logn) [where l is the max number]"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution:\n    # @return a tuple, (output, carry)\n    def multiply(self, a: int, b: int) -> Tuple[int, int]:\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: Tuple[int, int]\n        \"\"\"\n        carry = 0\n        result = 0\n        while a or b:\n            a, b = a // 10, b // 10\n            result = result * 10 + a * b + carry\n            carry = result // 10\n            result %= 10\n        return result, carry\n\n\nif __name__ == \"__main__\":\n    assert Solution().multiply(3, 9) == (27, 0)\n    assert Solution().multiply(8, 13) == (52, 0)\n    assert Solution().multiply(16, 21) == (97, 0)\n    assert Solution().multiply(3, -9) == (-3, 0)\n    assert Solution().multiply(-3, -9) == (3, 0)\n    assert Solution().multiply(0, 3) == (0, 0)\n    assert Solution().multiply(0, -3) == (0, 0)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def multiply(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return a * b\n    m, n = 0, 0\n    while a > 0:\n        m, n = m + a % 10 * n, n + b % 10 * m\n        a, b = b % 10 * a, a % 10 * b\n    return m * n\n\n\ndef test_multiply(a, b):\n    print(multiply(a, b))\n\nif __name__ == '__main__':\n    test_multiply(0, 0)\n    test_multiply(1, 0)\n    test_multiply(0, 1)\n    test_multiply(1, 1)\n    test_multiply(2, 3)\n    test_multiply(3, 2)\n    test_multiply(2, 4)\n    test_multiply(4, 2)\n    test_multiply(3, 5)\n    test_multiply(5, 3)\n    test_multiply(4, 6)\n    test_multiply(6, 4)\n    test_multiply(5, 7)\n    test_multiply(7, 5)\n    test_multiply(4, 8)\n    test_multiply(8, 4)\n    test_multiply(3, 9)\n    test_multiply(9, 3)\n    test_multiply(2, 10)\n    test_multiply(10, 2)\n    test_multiply(3, 11)\n    test_multiply(11, 3)\n    test_multiply(2, 12)\n    test_multiply(12, 2)\n    test_multiply(3, 13)\n    test_multiply(13, 3)\n    test_multiply(4, 14)\n    test_multiply(14, 4)\n    test_multiply(5, 15)\n    test_multiply(15, 5)\n    test_multiply(6, 16)\n    test"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        # https://leetcode.com/problems/multiplication-without-using-the-operator/discuss/83963/Python-Solution-with-the-logic-solutions\n        if a == 0:\n            return b\n        if b == 0:\n            return a\n        # a * b = a * b + (a - b) * (a + b)\n        return a * b + ((a - b) * (a + b)) % (2**32 - 1)\n\n\ndef main():\n    # Output: 232792560\n    assert Solution().multiply(2, 3) == 232792560\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def multiply(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return a * b\n\nprint multiply(4, 3)\nprint multiply(4, 3.0)\nprint multiply(4.0, 3)\nprint multiply(4, 3.0)\nprint multiply(4, 3.0)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# A simple implementation of the multiply function using * operator.\ndef multiply(a, b):\n    return a * b\n\n# Your multiply function will be called like this:\n# multiply(a, b)\n\nprint multiply(2, 3)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param: num1, an integer\n    @param: num2, an integer\n    @return: a string\n    \"\"\"\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: str\n        \"\"\"\n        if num1 == 0:\n            return '0'\n        res = []\n        while num2 > 0:\n            if num2 & 1 == 1:\n                res.append(str(num1))\n                num1 = num1 * num2\n                num2 = num2 >> 1\n            else:\n                num2 >>= 1\n        res.reverse()\n        return ''.join(res)\n\n\nif __name__ == '__main__':\n    num1 = 8\n    num2 = 9\n    s = Solution()\n    print s.multiply(num1, num2)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        while a:\n            res, a, b = b, a % b, res\n        return res\n\n\nif __name__ == '__main__':\n    assert Solution().multiply(3, 2) == 6"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def multiply(a, b):\n    result = 0\n    carry = 0\n    while a or b:\n        result += carry\n        if a & 1:\n            result += b\n        a >>= 1\n        b >>= 1\n        if b & 1:\n            carry = 1\n        else:\n            carry = 0\n    return result\n\nclass Solution:\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        while b:\n            if b & 1:\n                result += a\n            a *= 2\n            b >>= 1\n        return result\n\nif __name__ == \"__main__\":\n    assert Solution().multiply(2, 3) == 6\n    assert Solution().multiply(2, 4) == 8\n    assert Solution().multiply(3, 4) == 12\n    assert Solution().multiply(3, 5) == 15\n    assert Solution().multiply(5, 5) == 25"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param a, a is an integer\n    # @param b, b is an integer\n    # @return an integer\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        # if a == 0 or b == 0:\n        #     return 0\n        # else:\n        #     return a * b\n        # return a * b\n        return a * b\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.multiply(3, 4)\n    print s.multiply(3, -4)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution(object):\n    def multiply(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        while a:\n            result += a % 10 * b % 10\n            a /= 10\n            b /= 10\n        return result\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/multiply-two-integers/solution/\n\n/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\n\n# 0ms 100%\nclass Solution {\n    public int multiply(int a, int b) {\n        int carry = 0;\n        while (a!= 0 || b!= 0) {\n            int sum = carry;\n            carry = (a & b) << 1;\n            sum = (sum & 0xffff) + carry;\n            a = a >>> 1;\n            b = b >>> 1;\n            carry = sum >>> 16;\n        }\n        return carry;\n    }\n}\n\n# 0ms 100%\nclass Solution {\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a!= 0 || b!= 0) {\n            int carry = 0;\n            while (a!= 0) {\n                carry += (a & 1) << 1;\n                a >>>= 1;\n            }\n            carry += (b & 1) << 1;\n            b >>>= 1;\n            result = (result & 0xffff) + carry;\n        }\n        return result >>> 16;\n    }\n}\n'''"
    }
  ]
}