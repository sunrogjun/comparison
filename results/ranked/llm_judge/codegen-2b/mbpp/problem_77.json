{
  "timestamp": "2025-09-14T17:56:04.274849",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 77,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-the-most-frequent-element\n\n# -*- coding:utf-8 -*-\n\nimport sys\n\ndef main():\n    if len(sys.argv)!= 2:\n        print \"Usage: python most_frequent_element.py <list_size>\"\n        sys.exit(0)\n\n    list_size = int(sys.argv[1])\n\n    # create a list\n    list = [i for i in range(1, list_size+1)]\n\n    # find the most frequent element\n    most_frequent = 0\n    for i in range(1, list_size+1):\n        if list[i] > most_frequent:\n            most_frequent = list[i]\n    print \"Most frequent element:\", most_frequent\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def get_frequency(list_of_numbers):\n    \"\"\"\n    Write a function get_frequency that takes a list and returns the frequency of\n    each element in that list.\n    \"\"\"\n    counter = 0\n    for number in list_of_numbers:\n        if number not in [0, 1]:\n            counter += 1\n    return counter\n\nprint get_frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def frequency(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [1 for x in lst if x]\n\n# Your frequency function should return a list of lists.\n# The inner list represents the frequency of elements in the outer list.\n\n# Hint: Use a dictionary to store the frequency of each element.\n# What is the most efficient way to do it?"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nGiven an array of non-negative integers, you are initially positioned at the\nfirst index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nDetermine if you are able to reach the last index.\n\nFor example:\nA = [2,3,1,1,4], return true.\n\nA = [3,2,1,0,4], return false.\n\nFollow up:\nCould you solve it in O(n) time and O(1) extra space?\n\"\"\"\n\nclass Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        i, j = 0, 0\n        while i < len(nums):\n            if i < j:\n                return False\n            if nums[i] > 0 and j + nums[i] <= len(nums) - 1:\n                j += nums[i]\n            else:\n                i += 1\n        return True\n\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [2, 3, 1, 1, 4]\n    print s.canJump(nums)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def get_frequency(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = [0] * 10\n    for num in numbers:\n        freq[num % 10] += 1\n    return freq\n\ndef test():\n    assert get_frequency([2, 3, 4, 5]) == [0, 2, 0, 0, 0, 1, 0, 0, 0, 0]\n    assert get_frequency([3, 2, 1]) == [0, 3, 0, 0, 0, 1, 0, 0, 0, 0]\n    assert get_frequency([1, 1, 1, 1, 1]) == [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]\n    assert get_frequency([1, 1, 1, 1, 1, 1]) == [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]\n    assert get_frequency([1, 1, 1, 1, 1, 1, 1]) == [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]\n    assert get_frequency([1, 1, 1, 1, 1, 1, 1, 1]) == [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]\n    assert get_frequency([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]\n    assert get_frequency([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]\n    assert get_frequency([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0]\n    assert get_frequency([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [0, 1, 0, 0, 0, 1, 0, 0, 0"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def get_frequency(lst):\n    \"\"\"\n    Return a dictionary of the frequency of the elements in a list.\n    \"\"\"\n    # initialize the dictionary\n    frequency = dict()\n    for item in lst:\n        if item in frequency:\n            frequency[item] = frequency[item] + 1\n        else:\n            frequency[item] = 1\n    # return the dictionary\n    return frequency\n\n# test cases\n# test_case_1 = [1, 1, 2, 3]\n# test_case_2 = [1, 2, 3, 3, 4, 4, 5, 5, 6, 7]\n# test_case_3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_case_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_case_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_case_3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# test_case_1 = [1, 1, 2, 3]\n# test_case_2 = [1, 2, 3, 3, 4, 4, 5, 5, 6, 7]\n# test_case_3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# test_case_1 = [1, 1, 2, 3]\n# test_case_2 = [1, 2, 3, 3, 4, 4, 5, 5, 6, 7]\n# test_case_3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# test_case_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# test_case_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# test_case_3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# test_case_1 = [1, 1, 2,"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# http://www.tutorialspoint.com/python/python_sort.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_recursive.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive_iterative.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_recursive_iterative.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive_recursive.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive_recursive_iterative.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive_recursive_iterative.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive_recursive_iterative_recursive.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive_recursive_iterative_recursive_iterative.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive_recursive_iterative_recursive_iterative.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive_recursive_iterative_recursive_iterative_iterative.htm\n\n# http://www.tutorialspoint.com/python/python_sort_algorithm_iterative_recursive_recursive_iterative_recursive_iterative_iterative_iterative.htm"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef get_frequency(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    counter = Counter(numbers)\n    return counter.most_common(len(numbers))\n\nif __name__ == '__main__':\n    numbers = [1,2,2,2,3,4,5,5,5,6]\n    print(get_frequency(numbers))\n    numbers = [1,2,2,2,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15]\n    print(get_frequency(numbers))\n    numbers = [1,2,2,2,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(get_frequency(numbers))\n    numbers = [1,2,2,2,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n    print(get_frequency(numbers))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n@date: 2017/7/20\n@author: lizhipeng\n@brief:\n\"\"\"\n\nfrom __future__ import print_function\n\nimport collections\n\n\ndef frequency(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = collections.defaultdict(int)\n    for i in lst:\n        freq[i] += 1\n    return freq.items()\n\n\ndef main():\n    lst = [1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def get_frequency(my_list):\n    \"\"\"\n    Write a function get_frequency that takes a list and returns a list\n    of the frequency of the elements in the list.\n\n    For example:\n    >>> get_frequency([1, 2, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9])\n    [(2, 3), (4, 2), (6, 1)]\n    \"\"\"\n    \n    # Sort the list\n    my_list = sorted(my_list)\n\n    # Create a list to store the frequencies\n    frequencies = []\n\n    # Iterate over the list\n    for i in my_list:\n        # If the list does not contain the current element, create a new tuple\n        # with the current element as the first element and the frequency of\n        # the current element as the second element\n        if i not in frequencies:\n            frequencies.append((i, 1))\n        # If the current element is found in the list, increment the frequency\n        # of that element\n        else:\n            frequencies[frequencies.index((i, 1))][1] += 1\n\n    return frequencies\n\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        ([1, 2, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9],\n         [(2, 3), (4, 2), (6, 1)]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9],\n         [(2, 3), (4, 2), (6, 1)]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9],\n         [(2, 3), (4, 2), (6, 1)]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9],\n         [(2, 3), (4, 2), (6, 1)]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9],\n         [(2, 3), (4, 2), (6, 1)]),\n        ([1, 2, 3, 4, 5,"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/list-frequency/problem\n\ndef get_frequency(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    frequency = 0\n    for element in list_:\n        frequency += 1\n    return frequency\n\n\nif __name__ == '__main__':\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    frequency = get_frequency(list_)\n    print(frequency)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "\"\"\"\nThe input is a list of numbers.\n\nThe output is a list of numbers, where each number represents the number of times that the corresponding element occurs.\n\nFor example, the input [1, 1, 2, 1, 1, 3, 1] yields [1, 2, 1, 3, 1].\n\"\"\"\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getFrequency(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n        count = 1\n        pre = head\n        cur = head.next\n        while cur is not None:\n            if cur.val == pre.val:\n                count += 1\n            else:\n                pre = cur\n                count = 1\n            cur = cur.next\n        pre.next = None\n        return head"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/frequency-of-the-most-frequent-element/discuss/96656/Python-Solution-with-explanation-of-the-algorithm\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mostFrequent(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dic = {}\n        cur = head\n        while cur:\n            if cur.val in dic:\n                dic[cur.val] += 1\n            else:\n                dic[cur.val] = 1\n            cur = cur.next\n        freq = {}\n        for v in dic:\n            if dic[v] in freq:\n                freq[dic[v]] += 1\n            else:\n                freq[dic[v]] = 1\n        freq = sorted(freq.items(), key=lambda x:x[1], reverse=True)\n        for v in freq:\n            print(v)\n        return head\n\nhead = ListNode(1, ListNode(2, ListNode(4, ListNode(3, ListNode(5))))).next\nhead = Solution().mostFrequent(head)\n\n# head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))\n# head = Solution().mostFrequent(head)\n# head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6)))))).next\n# head = Solution().mostFrequent(head)\n# head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7)))))).next)\n# head = Solution().mostFrequent(head)\n# head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n@date: May 19, 2017\n@author: (http://py4e.me/).\n@license: MIT License.\n\n\"\"\"\n\ndef get_frequency(my_list):\n    \"\"\"\n    Get the frequency of the elements in a list.\n\n    :param my_list: List\n    :return: List\n    \"\"\"\n    return [1] + [len(my_list[i:]) for i in range(1, len(my_list))]\n\n\ndef test():\n    assert get_frequency([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert get_frequency([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert get_frequency([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert get_frequency([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert get_frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert get_frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert get_frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    assert get_frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/frequency/problem\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def __init__(self, head):\n        \"\"\"\n        @param head: The head of linked list\n        \"\"\"\n        self.head = head\n        self.cur = head\n        self.cnt = 1\n\n    def getFrequency(self):\n        \"\"\"\n        @return: A list of lists. The inner list is the frequency of the elements in the outer list.\n        \"\"\"\n        while self.cur:\n            self.cnt += 1\n            self.cur = self.cur.next\n        return [[self.cnt, i] for i in range(1, 10)]\n\n\nif __name__ == '__main__':\n    s = Solution(ListNode(1, 2, 3, 4, 5))\n    print(s.getFrequency())\n    s = Solution(ListNode(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n    print(s.getFrequency())\n    s = Solution(ListNode(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n    print(s.getFrequency())\n    s = Solution(ListNode(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n    print(s.getFrequency())\n    s = Solution(ListNode(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n    print(s.getFrequency())"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/frequency-of-the-biggest-number/\n\n\nclass Solution(object):\n    def __init__(self):\n        self.table = {}\n\n    def getFrequency(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        for n in nums:\n            if n in self.table:\n                self.table[n] += 1\n            else:\n                self.table[n] = 1\n\n        freq = []\n        for n in self.table:\n            if self.table[n] > 0:\n                freq.append(n)\n\n        return freq\n\n\n# TESTS\nfor nums, expected in [\n    ([1, 1, 2, 3, 5, 8, 11, 15, 20, 28, 40, 57, 80, 117, 160, 213, 285, 417, 558, 712, 1001, 1354, 1706, 2136, 2857, 3628, 4569, 5636, 6864, 8193],\n     [1, 2, 3, 5, 8, 11, 15, 20, 28, 40, 57, 80, 117, 160, 213, 285, 417, 558, 712, 1001, 1354, 1706, 2136, 2857, 3628, 4569, 5636, 6864, 8193]),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/list-frequency\ndef get_frequency(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    count = [0] * len(list)\n    for i in range(len(list)):\n        count[list[i]] += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    try:\n        f = open(\"1.in\", \"r\")\n    except IOError:\n        print \"File not found\"\n        sys.exit(1)\n\n    # Complete the get_frequency function below.\n    if sys.version_info[0] >= 3:\n        x = f.read().strip()\n    else:\n        x = f.readline().strip()\n    list = list(map(int, x.split(' ')))\n    print(get_frequency(list))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/list-frequency\n# https://www.codewars.com/kata/list-frequency/train/python\n\ndef list_frequency(list):\n    return [len(list_subset) for list_subset in list_subsets(list)]\n\n# list_subsets\n# https://www.codewars.com/kata/list-subsets/train/python\ndef list_subsets(list):\n    if not list:\n        yield []\n    else:\n        for i in range(len(list)):\n            for subset in list_subsets(list[:i] + list[i+1:]):\n                yield [list[i]] + subset\n\n# list_frequency_sum\n# https://www.codewars.com/kata/list-frequency-sum/train/python\ndef list_frequency_sum(list):\n    return sum(list_frequency(list))\n\n# list_frequency_min\n# https://www.codewars.com/kata/list-frequency-min/train/python\ndef list_frequency_min(list):\n    return min(list_frequency(list))\n\n# list_frequency_max\n# https://www.codewars.com/kata/list-frequency-max/train/python\ndef list_frequency_max(list):\n    return max(list_frequency(list))\n\n# list_frequency_avg\n# https://www.codewars.com/kata/list-frequency-avg/train/python\ndef list_frequency_avg(list):\n    return sum(list_frequency(list)) / float(len(list))\n\n# list_frequency_avg_diff\n# https://www.codewars.com/kata/list-frequency-avg-diff/train/python\ndef list_frequency_avg_diff(list):\n    return max(list_frequency_avg_diff_subsets(list))\n\n# list_frequency_avg_diff_subsets\n# https://www.codewars.com/kata/list-frequency-avg-diff-subsets/train/python\ndef list"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/frequency-counting\n\ndef get_frequency_counting(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    dic = dict()\n    for i in range(len(lst)):\n        if lst[i] not in dic:\n            dic[lst[i]] = 1\n        else:\n            dic[lst[i]] += 1\n    freq_list = []\n    for i in dic:\n        freq_list.append(dic[i])\n    return freq_list\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    print(get_frequency_counting(lst))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven an array of integers, return its frequency of the numbers that\nappear more than N times.\n\nFor example,\nGiven [1, 1, 2, 3, 3, 3, 4, 4, 4, 4], and N = 3, return [2, 2, 1].\n\nNote:\nN is a non-negative integer, which means the frequency  of each element is\nat most N.\nThe array size is in the range of [1, 10000].\n\"\"\"\n\nclass Solution:\n    # @param A, a list of integer\n    # @param N, a non-negative integer\n    # @return a list of integer\n    def majorityElement(self, A, N):\n        res = []\n        cnt = {}\n        for x in A:\n            if x in cnt:\n                cnt[x] += 1\n            else:\n                cnt[x] = 1\n        for x in cnt:\n            if cnt[x] > N:\n                res.append(x)\n        return res"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/sorting-an-array/problem\n# https://www.hackerrank.com/challenges/sorting-an-array/hints/write-your-own-sorting-algorithm\n\n# Your code here\n\ndef sort_list(lst):\n    return sorted(lst)\n\ndef print_list(lst):\n    for e in lst:\n        print(e, end=\" \")\n    print()\n\ndef print_frequency(lst, freq):\n    for e in lst:\n        print(e, end=\" \")\n        freq[e] += 1\n    print()\n\ndef print_frequency_with_key(lst, key_list):\n    for key in key_list:\n        if key in lst:\n            print(key, end=\" \")\n            freq[key] += 1\n    print()\n\ndef print_frequency_with_key_and_value(lst, key_list, val_list):\n    for key in key_list:\n        if key in lst:\n            print(key, end=\" \")\n            freq[key] += val_list[key]\n    print()\n\ndef print_frequency_with_key_and_value_and_count(lst, key_list, val_list, count_list):\n    for key in key_list:\n        if key in lst:\n            print(key, end=\" \")\n            freq[key] += val_list[key]\n            count[key] += 1\n    print()\n\ndef print_frequency_with_key_and_value_and_count_and_count_value(lst, key_list, val_list, count_list, count_val_list):\n    for key in key_list:\n        if key in lst:\n            print(key, end=\" \")\n            freq[key] += val_list[key]\n            count[key] += count_val_list[key]\n    print()\n\ndef print_frequency_with_key_and_value_and_count_and_count_value_and_count_val_"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def __init__(self):\n        self.list = []\n\n    def getFrequency(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        freq = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            freq += 1\n        return self.list.append(ListNode(freq))\n\n    def getFrequency2(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        freq = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            freq += 1\n            curr.next = self.getFrequency(curr.next)\n        return self.list.append(ListNode(freq))\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(1)\n    head.next.next.next = ListNode(1)\n    head.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(1)\n\n    Solution().getFrequency(head)"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def frequency(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = {}\n    for elem in list:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq.values()\n\nif __name__ == '__main__':\n    list = [1, 2, 2, 3, 2, 3, 4, 2, 2, 2, 5, 6]\n    print(frequency(list))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def get_frequency(l):\n    return dict(zip(l, [0] * len(l)))\n\ndef frequency(l):\n    return dict(zip(l, [0] * len(l)))\n\ndef frequency_list(l):\n    return dict(zip(l, [0] * len(l)))\n\ndef get_frequency_of_elements(l, x):\n    if x in l:\n        return l.count(x)\n    else:\n        return 0\n\ndef frequency_of_elements(l, x):\n    if x in l:\n        return l.count(x)\n    else:\n        return 0\n\ndef get_frequency_of_elements_list(l, x):\n    if x in l:\n        return l.count(x)\n    else:\n        return 0\n\ndef frequency_of_elements_list(l, x):\n    if x in l:\n        return l.count(x)\n    else:\n        return 0\n\ndef frequency_of_elements_dict(l, x):\n    if x in l:\n        return l[x]\n    else:\n        return 0\n\ndef frequency_of_elements_dict(l, x):\n    if x in l:\n        return l[x]\n    else:\n        return 0\n\ndef get_frequency_of_elements_dict(l, x):\n    if x in l:\n        return l[x]\n    else:\n        return 0\n\ndef get_frequency_of_elements_list_dict(l, x):\n    if x in l:\n        return l[x]\n    else:\n        return 0\n\ndef get_frequency_of_elements_list_dict(l, x):\n    if x in l:\n        return l[x]\n    else:\n        return 0\n\ndef get_frequency_of_elements_list_dict(l, x):\n    if x in l:\n        return l[x]\n    else:\n        return 0\n\ndef get_frequency_of_elements_dict_list(l, x):\n    if x in l:\n        return l[x]"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://www.tutorialspoint.com/python/python_basic_list_processing.htm\n\ndef get_freq(list):\n    '''\n    Return the frequency of the elements in a list.\n    '''\n    count = {}\n    for element in list:\n        if element in count:\n            count[element] += 1\n        else:\n            count[element] = 1\n    return count\n\nif __name__ == '__main__':\n    list = [1, 2, 2, 1, 1, 2, 3, 4, 1, 1, 1, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8]\n    freq = get_freq(list)\n    print(freq)"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def frequency(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq_dict = {}\n    for i in my_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict.values()\n\ndef frequency_with_count(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq_dict = {}\n    for i in my_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict.values()\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 1, 2, 3, 2, 3, 4]\n    print(frequency(my_list))\n    print(frequency_with_count(my_list))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def get_frequency(numbers):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    :param numbers: list\n    :return: dictionary\n    \"\"\"\n    freq = {}\n    for number in numbers:\n        if number in freq:\n            freq[number] += 1\n        else:\n            freq[number] = 1\n    return freq"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def frequency(alist):\n    \"\"\"\n    :type alist: List[str]\n    :rtype: List[int]\n    \"\"\"\n    freq = {}\n    for i in alist:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return list(freq.items())"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def frequency(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = {}\n    for val in arr:\n        if val not in freq:\n            freq[val] = 1\n        else:\n            freq[val] += 1\n    return list(freq.values())\n\nprint(frequency([1, 1, 2, 1, 2, 3, 2, 1]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def getFrequency(myList):\n    \"\"\"\n    :type myList: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [myList.count(i) for i in myList]\n\n# Your function will be called like this:\n# i, j, k = getFrequency(myList)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import unittest\n\nclass Test(unittest.TestCase):\n    def test_frequency(self):\n        self.assertEqual(frequency([1, 2, 2, 3, 2, 2, 4]), 3)\n        self.assertEqual(frequency([1, 1, 1, 1, 1, 1, 1]), 1)\n        self.assertEqual(frequency([2, 2, 2, 3, 2, 2, 4]), 2)\n        self.assertEqual(frequency([2, 2, 2, 3, 2, 2, 4]), 2)\n        self.assertEqual(frequency([2, 2, 2, 3, 2, 2, 4]), 2)\n\n    def test_frequency_empty_list(self):\n        self.assertEqual(frequency([]), 0)\n\n    def test_frequency_empty_string(self):\n        self.assertEqual(frequency(''), 0)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def get_frequency(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    dic = {}\n    for i in range(len(list)):\n        if list[i] not in dic:\n            dic[list[i]] = 1\n        else:\n            dic[list[i]] += 1\n    return list\n\n#Test case\nlist = [1,2,3,4,5,6,7,8,9]\nprint get_frequency(list)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def frequency(L):\n    \"\"\"\n    >>> frequency([1, 1, 2, 3, 4])\n    {1: 3, 2: 2, 4: 1}\n    >>> frequency([1, 1, 2, 2, 2, 3, 3])\n    {1: 5, 2: 4, 3: 3}\n    >>> frequency([1, 2, 3, 4])\n    {1: 2, 2: 1, 3: 1, 4: 1}\n    >>> frequency([1, 2, 3, 4, 5])\n    {1: 2, 2: 2, 3: 1, 4: 1, 5: 1}\n    >>> frequency([])\n    {}\n    \"\"\"\n    d = {}\n    for e in L:\n        if e in d:\n            d[e] += 1\n        else:\n            d[e] = 1\n    return d\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def get_frequency(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    count = collections.Counter(list)\n    return count.values()\n\nif __name__ == \"__main__\":\n    assert(get_frequency([1, 1, 2, 1, 3, 1, 4]) == [1, 2, 1, 1, 3, 1, 1])"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def __init__(self):\n        self.map = {}\n        \n    def getFrequency(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        if not head:\n            return []\n        \n        ret = []\n        curr = head\n        while curr:\n            if curr.val in self.map:\n                self.map[curr.val] += 1\n            else:\n                self.map[curr.val] = 1\n            curr = curr.next\n        \n        for key in self.map:\n            ret.append(self.map[key])\n        \n        return ret\n        \n        \nif __name__ == '__main__':\n    s = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(3)\n    head.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next.next = ListNode(3)\n    \n    print s.getFrequency(head)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def frequency(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    \n    freq = [0] * len(nums)\n    \n    for i in range(len(nums)):\n        freq[nums[i]] += 1\n    \n    return freq\n\nif __name__ == '__main__':\n    nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 5]\n    print(frequency(nums))\n    \n    nums = [1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5]\n    print(frequency(nums))\n    \n    nums = [1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5]\n    print(frequency(nums))\n    \n    nums = [1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5]\n    print(frequency(nums))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef get_frequency(lst):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n\n    The frequency of an element in a list is defined as the number of\n    occurrences of that element.\n    :type lst: List\n    :rtype: List\n    \"\"\"\n    frequency = Counter(lst)\n    return frequency\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8]\n    frequency = get_frequency(lst)\n    print(frequency)\n    print(frequency.most_common(5))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "import collections\nimport math\n\ndef get_frequency(list_of_numbers):\n    \"\"\"\n    Get the frequency of the elements in a list.\n    Input:\n    list_of_numbers = [1, 2, 3, 1, 1, 4, 1, 5, 6]\n    Output:\n    frequency = 3\n    \"\"\"\n    frequency = collections.Counter(list_of_numbers)\n    return frequency\n\n\nif __name__ == '__main__':\n    list_of_numbers = [1, 2, 3, 1, 1, 4, 1, 5, 6]\n    frequency = get_frequency(list_of_numbers)\n    print(frequency)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "class Solution:\n    # @return a tuple, (index1, index2)\n    # @param self\n    # @param nums\n    def getFrequency(self, nums):\n        res = {}\n        for n in nums:\n            if n not in res:\n                res[n] = 1\n            else:\n                res[n] += 1\n        return res.keys()\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1, 1, 2, 2, 2, 3]\n    print(s.getFrequency(nums))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n#\n# This is a simple script to get the frequency of the elements in a list.\n#\n# Written by:\n#   - Christopher Zhang, 2016\n#\n\n#\n# Imports\n#\nimport sys\n\n#\n# Global variables\n#\n# List of elements\nlist = []\n\n#\n# Functions\n#\n# Function to get the frequency of the elements in a list\ndef frequency(list):\n    global list\n\n    # Add elements to the list\n    for element in list:\n        list.append(element)\n\n    # Sort the list\n    list.sort()\n\n    # Get the number of elements\n    length = len(list)\n\n    # Loop through the list\n    for i in range(0, length):\n        # If the current element is equal to the previous element, increment the frequency by 1\n        if list[i] == list[i-1]:\n            frequency[list[i]] += 1\n    return list\n\n#\n# Main\n#\n# Get the frequency of the elements in the list\nfrequency(sys.argv[1])\n\n#\n# Output\n#\n# Output the frequency of each element\nfor i in range(0, len(frequency)):\n    print \"Element \" + str(i) + \": \" + str(frequency[i])"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "# O(n) time, O(n) space\ndef getFrequency(nums):\n    # write your code here\n    frequencies = {}\n    for num in nums:\n        if num in frequencies:\n            frequencies[num] += 1\n        else:\n            frequencies[num] = 1\n    return frequencies\n\nif __name__ == '__main__':\n    nums = [1, 2, 2, 3, 1, 1, 4, 2, 2, 1, 2]\n    frequencies = getFrequency(nums)\n    for k in frequencies.keys():\n        print(k, frequencies[k])"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def frequency(numbers):\n    return map(lambda x: (x, numbers.count(x)), numbers)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert frequency([1, 1, 2, 2, 3, 3, 4, 4, 4]) == [(1, 5), (2, 3), (3, 3), (4, 1)]\n    assert frequency([]) == []\n    assert frequency([1, 2, 3]) == [(1, 3), (2, 2), (3, 1)]"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def frequencySort(self, root: TreeNode) -> TreeNode:\n        \"\"\"\n        Use a map to count the frequency of each element in the list\n        \"\"\"\n        count = {val: 0 for val in range(1, 100)}\n        def rec(root):\n            if not root:\n                return root\n            elif root.val in count:\n                count[root.val] += 1\n                root.left = rec(root.left)\n                root.right = rec(root.right)\n                root.val = count[root.val]\n            return root\n        return rec(root)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# -*- coding: utf-8 -*-\n\n# https://www.youtube.com/watch?v=YWpLQ4XwqwM\n# https://www.youtube.com/watch?v=X6cV0r3P_jA\n\nfrom collections import Counter\n\ndef frequency(input_list):\n    \"\"\"\n    :type input_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    counter = Counter(input_list)\n    return counter.most_common()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def get_frequency(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = collections.Counter(numbers)\n    return freq.most_common()\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 4, 3, 2, 1]\n    result = get_frequency(numbers)\n    print(result)\n    print(result[0][0])"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getFrequency(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        dic = {}\n        for i in nums:\n            if i not in dic:\n                dic[i] = 1\n            else:\n                dic[i] += 1\n        res = []\n        for i in dic:\n            res.append((dic[i], i))\n        res.sort()\n        return [i[1] for i in res]\n\n\nif __name__ == \"__main__\":\n    nums = [1, 1, 1, 2, 2, 3]\n    print Solution().getFrequency(nums)\n    nums = [1, 2, 2, 3, 3, 3, 4]\n    print Solution().getFrequency(nums)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/list-frequency/problem\n\ndef frequency(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return [freq_dict[i] for i in freq_dict]"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/list-frequency/problem\n\ndef get_frequency(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # my_list = my_list[:];\n    # my_list.reverse();\n    # my_list.sort();\n    # my_list = my_list[:];\n\n    frequency = {}\n    for x in my_list:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n\n    return list(frequency.values())\n\n\nif __name__ == '__main__':\n    my_list = [1, 2, 1, 2, 3, 4, 5, 1, 2]\n    print(get_frequency(my_list))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef count(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    cnt = Counter(nums)\n    return cnt.values()\n\n\nif __name__ == '__main__':\n    nums = [1,2,2,3,3,3,4,4,4,4]\n    res = count(nums)\n    print(res)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getFrequency(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return []\n\n        freq = [0] * len(nums)\n        for i in range(len(nums)):\n            freq[nums[i]] += 1\n\n        return freq\n\n\nif __name__ == '__main__':\n    nums = [1, 1, 1, 2, 2, 3]\n    print Solution().getFrequency(nums)\n    nums = [1, 2, 3]\n    print Solution().getFrequency(nums)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n# https://www.youtube.com/watch?v=kxq0_VYbD0w\n\ndef frequency(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [Counter(l).most_common(1)[0][0]]\n\n# Your frequency function should return a list of lists. Each inner list in the outer list contains the frequency of the corresponding element in the original list."
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def frequency(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = {}\n    for e in l:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return list(freq.values())"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/counting-frequencies/problem\n\nfrom collections import Counter\n\ndef count_frequency(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    c = Counter(nums)\n    return c.most_common()\n\nif __name__ == '__main__':\n    nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    print(count_frequency(nums))\n    nums = [1, 2, 3]\n    print(count_frequency(nums))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def getFrequency(l):\n    # write your code here\n    count = 0\n    for i in l:\n        if i not in l:\n            return 0\n        count += 1\n    return count\n\ndef main():\n    l = [1,2,3,1,2,3,4,5,6,7]\n    print(getFrequency(l))\n    l = [1,2,3,4,5]\n    print(getFrequency(l))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def frequency(numbers):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n\n    Example:\n    frequency([1, 1, 2, 3]) -> {1: 2, 2: 1, 3: 1}\n    \"\"\"\n    d = {}\n    for i in numbers:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    return d"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef frequency(mylist):\n\t\"\"\"\n\tReturn the frequency of each element in mylist.\n\t\"\"\"\n\treturn [math.log(count, 2) for count in mylist]\n\n# Test\n# mylist = [2, 5, 1, 4]\n# print frequency(mylist)\n# mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n# print frequency(mylist)\n\n\n# Run Test\n# mylist = [2, 5, 1, 4]\n# print frequency(mylist)\n# mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n# print frequency(mylist)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/list-frequency/problem\n\nimport collections\n\ndef get_frequency(data):\n    return collections.Counter(data).most_common()\n\n\nif __name__ == \"__main__\":\n    data = [1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(get_frequency(data))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import collections\n\nclass Solution:\n    \"\"\"\n    @param nums: A list of integers\n    @return: A map of element to its frequency\n    \"\"\"\n    def getFrequencyMap(self, nums):\n        # write your code here\n        freq_map = collections.defaultdict(int)\n        for i in nums:\n            freq_map[i] += 1\n\n        return freq_map\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,1,2,2,3,4]\n    print(sol.getFrequencyMap(nums))\n    nums = [2,2,3,3,3,3,4,4]\n    print(sol.getFrequencyMap(nums))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @return {integer}\n    def getFrequency(self, head):\n        if not head or not head.next:\n            return 1\n        cnt = 1\n        while head.next:\n            head = head.next\n            cnt += 1\n        return cnt"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def get_frequency(my_list):\n    \"\"\"\n    :type my_list: List[str]\n    :rtype: List[int]\n    \"\"\"\n    frequency = {}\n    for element in my_list:\n        if element not in frequency:\n            frequency[element] = 1\n        else:\n            frequency[element] += 1\n    return list(frequency.values())\n\n# Test cases\nmy_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nprint(get_frequency(my_list))\nmy_list = ['a', 'b', 'b', 'c']\nprint(get_frequency(my_list))\nmy_list = ['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']\nprint(get_frequency(my_list))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef get_frequency(lst):\n    \"\"\"\n    Returns the frequency of elements in a list.\n\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    frequency = Counter(lst)\n    return frequency.most_common(1)\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    print get_frequency(lst)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def frequency(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    count = collections.Counter(nums)\n    return count.most_common()\n\ndef main():\n    nums = [1, 1, 1, 2, 2, 3]\n    print(frequency(nums))\n    nums = [2, 2, 3, 3, 3]\n    print(frequency(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def freq(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return {element: 1 for element in list}\n\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(my_list))\n\n# Your function should return the following:\n# [1, 2, 3, 4, 2, 3, 4, 1, 2, 3, 4]"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def freq(my_list):\n\t\"\"\"\n\t:type my_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tcount = {}\n\tfor i in my_list:\n\t\tif i not in count:\n\t\t\tcount[i] = 1\n\t\telse:\n\t\t\tcount[i] += 1\n\n\treturn [v for k, v in count.items()]"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport math\n\ndef frequency(mylist):\n    if len(mylist) == 0:\n        return 0\n    return math.floor(math.log(len(mylist), 2))\n\ndef frequency2(mylist):\n    if len(mylist) == 0:\n        return 0\n    return 2 ** (len(mylist) - 1)\n\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 3, 3, 4]\n    print(frequency(mylist))\n    print(frequency2(mylist))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "# https://www.tutorialspoint.com/python/python_list_frequency.htm\ndef get_frequency(arr):\n    \"\"\"\n    :param arr:\n    :return:\n    \"\"\"\n    if not arr:\n        return 0\n    freq = {}\n    for val in arr:\n        if val in freq:\n            freq[val] += 1\n        else:\n            freq[val] = 1\n    return freq\n\nif __name__ == '__main__':\n    arr = [1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9]\n    print(get_frequency(arr))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getFrequency(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        freq = {}\n        for n in nums:\n            if n in freq:\n                freq[n] += 1\n            else:\n                freq[n] = 1\n        return list(freq.values())"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def frequency(L):\n    \"\"\"\n    :type L: List[int]\n    :rtype: List[int]\n    \"\"\"\n    counter = collections.Counter(L)\n    return counter.most_common()\n\nif __name__ == '__main__':\n    L = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2,"
    },
    {
      "rank": 69,
      "score": 3.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def __init__(self):\n        self.dict = {}\n\n    def frequencySort(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        self.dict = {}\n        for i in nums:\n            if i not in self.dict:\n                self.dict[i] = 1\n            else:\n                self.dict[i] += 1\n\n        sorted_nums = []\n        for i in self.dict:\n            sorted_nums.append((self.dict[i], i))\n            sorted_nums.sort()\n            del self.dict[sorted_nums[-1][1]]\n\n        return sorted_nums\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/frequency-sort-list/solution/\n\nApproach #1: Count Frequency [Accepted]\nComplexity Analysis\nTime Complexity: O(N), where N is the length of the list.\nSpace Complexity: O(N)\n\n# 12ms 100%\nclass Solution {\n    public List<Integer> frequencySort(List<Integer> nums) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), map.getOrDefault(nums.get(i), 0) + 1);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(map.get(nums.get(i)));\n        }\n        return result;\n    }\n}\n\nApproach #2: Dict Frequency\nComplexity Analysis\nTime Complexity: O(N), where N is the length of the list.\nSpace"
    },
    {
      "rank": 70,
      "score": 2.0,
      "candidate": "# -*- coding: utf-8 -*-\n\n\"\"\"\nFollow up for H-Index: What if the given citations list is sorted in ascending order? Could you optimize your algorithm?\n\nFor example,\nGiven citations = [0, 1, 3, 5],\n\nreturn 4. Because a researcher has 4 publications that cite 5 times each.\n\"\"\"\n\n# -*- coding: utf-8 -*-\n\n\"\"\"\nDefinition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\"\"\"\nclass Solution(object):\n    def hIndex(self, citations):\n        \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n        if not citations:\n            return 0\n\n        citations.sort()\n        end = len(citations) - 1\n        start = 0\n        for i in xrange(end, 0, -1):\n            if citations[i] <= end - i:\n                start = i\n                break\n        return end - start"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "import timeit\n\n\ndef get_frequency(l):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n\n    Example:\n    >>> l = [1, 2, 2, 2, 3]\n    >>> get_frequency(l)\n    (3, 1)\n    \"\"\"\n    total_elements = len(l)\n    frequency = 1\n\n    for i in l:\n        if i in l:\n            frequency = frequency + 1\n\n    return (total_elements, frequency)\n\n\nif __name__ == \"__main__\":\n    start = timeit.default_timer()\n    l = [1, 2, 2, 2, 3]\n    print(get_frequency(l))\n    print(\"Time elapsed: {0}\".format(timeit.default_timer() - start))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/frequency-of-element-in-a-given-list/discuss/91855/Python-solution-with-explanation\n# https://leetcode.com/problems/frequency-of-element-in-a-given-list/discuss/91855/Python-solution-with-explanation\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        if n == 4:\n            return \"1211\"\n        if n == 5:\n            return \"111221\"\n        if n == 6:\n            return \"1112221\"\n        if n == 7:\n            return \"11122221\"\n        if n == 8:\n            return \"111222112321\"\n        if n == 9:\n            return \"1112222112321\"\n        if n == 10:\n            return \"11122221123221\"\n        if n == 11:\n            return \"111222211232211\"\n        if n == 12:\n            return \"111222211232211\"\n        if n == 13:\n            return \"1112222112322121\"\n        if n == 14:\n            return \"11122221123221211\"\n        if n == 15:\n            return \"111222211232212121\"\n        if n == 16:\n            return \"111222211232212211\"\n        if n == 17:\n            return \"111222211232212221\"\n        if n == 18:\n            return \"1112222112322122121\"\n        if n == 19:\n            return \"11122221123221221211\"\n        if n == 20:\n            return \"111222211232212212121\"\n        if n == 21:\n            return \"11122221123221222111\""
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def getFrequency(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        freq = {}\n        cur = head\n        while cur:\n            if cur.val not in freq:\n                freq[cur.val] = 1\n            else:\n                freq[cur.val] += 1\n            cur = cur.next\n        return list(freq.values())"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def get_frequency(elements):\n    \"\"\"\n    :type elements: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = [0 for i in range(len(elements))]\n    for i in range(len(elements)):\n        freq[i] = elements[i]\n    return freq\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\n\ndef get_frequency(elements):\n    \"\"\"\n    :type elements: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = [0 for i in range(len(elements))]\n    for i in range(len(elements)):\n        freq[i] = elements[i]\n    return freq\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\n\ndef get_frequency(elements):\n    \"\"\"\n    :type elements: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = [0 for i in range(len(elements))]\n    for i in range(len(elements)):\n        freq[i] = elements[i]\n    return freq\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\n\ndef get_frequency(elements):\n    \"\"\"\n    :type elements: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = [0 for i in range(len(elements))]\n    for i in range(len(elements)):\n        freq[i] = elements[i]\n    return freq\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\n\ndef get_frequency(elements):\n    \"\"\"\n    :type elements: List[int]\n    :rtype: List[int]\n    \"\"\"\n    freq = [0 for i in range(len(elements))]\n    for i in range(len(elements)):\n        freq[i] = elements[i]\n    return freq\n\n\"\"\"\nWrite a function to get the frequency of the"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def get_frequency(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    frequency = []\n    for i in range(len(my_list)):\n        if i not in frequency:\n            frequency.append(i)\n    return frequency\n\n# Your Code Here\n\n# Test Case\ntest_list = [1, 1, 2, 1, 3, 1, 4, 1, 5]\nprint(get_frequency(test_list))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "\"\"\"\nLet's see how the function will behave if the list is empty.\n\"\"\"\n\n# Empty list\nlist1 = []\n\n# Assign a list to the variable\nlist2 = []\n\n# Assign a list to the variable\nlist3 = []\n\n# Assign a list to the variable\nlist4 = []\n\n# Assign a list to the variable\nlist5 = []\n\n# Assign a list to the variable\nlist6 = []\n\n# Assign a list to the variable\nlist7 = []\n\n# Assign a list to the variable\nlist8 = []\n\n# Assign a list to the variable\nlist9 = []\n\n# Assign a list to the variable\nlist10 = []\n\n# Assign a list to the variable\nlist11 = []\n\n# Assign a list to the variable\nlist12 = []\n\n# Assign a list to the variable\nlist13 = []\n\n# Assign a list to the variable\nlist14 = []\n\n# Assign a list to the variable\nlist15 = []\n\n# Assign a list to the variable\nlist16 = []\n\n# Assign a list to the variable\nlist17 = []\n\n# Assign a list to the variable\nlist18 = []\n\n# Assign a list to the variable\nlist19 = []\n\n# Assign a list to the variable\nlist20 = []\n\n# Assign a list to the variable\nlist21 = []\n\n# Assign a list to the variable\nlist22 = []\n\n# Assign a list to the variable\nlist23 = []\n\n# Assign a list to the variable\nlist24 = []\n\n# Assign a list to the variable\nlist25 = []\n\n# Assign a list to the variable\nlist26 = []\n\n# Assign a list to the variable\nlist27 = []\n\n# Assign a list to the variable\nlist28 = []\n\n# Assign a list to the variable\nlist29 = []\n\n# Assign a list to the variable\nlist30 = []\n\n# Assign a list to the variable\nlist31 = []\n\n# Assign a list to the variable\nlist32 = []\n\n# Assign a list to the variable\nlist33 = []\n\n#"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/list-frequency\n\ndef list_frequency(l):\n    \"\"\"\n    >>> list_frequency([3, 2, 4, 2])\n    {2: 2, 3: 1, 4: 1}\n    >>> list_frequency([3, 2, 4, 2, 1, 3])\n    {2: 4, 3: 3, 4: 1}\n    \"\"\"\n    freq = {}\n    for i in l:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\nif __name__ == '__main__':\n    import unittest\n\n    tests = [\n        ([3, 2, 4, 2], {2: 2, 3: 1, 4: 1}),\n        ([3, 2, 4, 2, 1, 3], {2: 4, 3: 3, 4: 1}),\n    ]\n\n    for test in tests:\n        l = test[0]\n        expected = test[1]\n        actual = list_frequency(l)\n        print(\"Frequency of elements in the list is: \")\n        print(actual)\n        print(\"Expected: \")\n        print(expected)\n        unittest.main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getFrequency(self, head: Optional[ListNode]) -> int:\n        if not head:\n            return 0\n        elif not head.next:\n            return 1\n        else:\n            freq = 0\n            curr = head\n            while curr:\n                freq += 1\n                curr = curr.next\n            return freq\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    head = ListNode(1)\n    print(sol.getFrequency(head))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def getFrequency(self, head: ListNode) -> List[int]:\n        \"\"\"\n        Linked List\n        \"\"\"\n        freq = []\n        dic = {}\n        cur = head\n        while cur:\n            if cur.val not in dic:\n                dic[cur.val] = 1\n            else:\n                dic[cur.val] += 1\n            cur = cur.next\n        for k, v in dic.items():\n            freq.append(v)\n        return freq"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/list-frequency\ndef list_frequency(lst):\n    frequency = {}\n    for x in lst:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n    return frequency\n\n# Complete the function below.\ndef list_frequency(lst):\n    frequency = {}\n    for x in lst:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n    return frequency"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def frequency(alist):\n    \"\"\"\n    :type alist: List[int]\n    :rtype: List[int]\n    \"\"\"\n    \n    if not alist:\n        return []\n\n    counts = [0] * len(alist)\n    for val in alist:\n        counts[val] += 1\n\n    return counts\n\nif __name__ == '__main__':\n    alist = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]\n    print(frequency(alist))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "\"\"\"\nA list element is a tuple, which contains the value and the index of the element.\n\"\"\"\n\ndef get_frequency(list):\n    \"\"\"\n    :type list: List[Tuple[int, int]]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    freq = []\n    for i in list:\n        if i not in freq:\n            freq.append(i)\n    return freq\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\n\ndef get_frequency2(list):\n    \"\"\"\n    :type list: List[Tuple[int, int]]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    freq = []\n    for i in list:\n        freq.append((i[0], len(list)))\n    return freq"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "\"\"\"\nExample\nGiven [1, 2, 3, 1, 2, 3], return [1, 2, 3] with frequency = 3\n\nNote\nThe frequency of [1, 2] is 2, [1, 2, 3] is 3, and [1, 2, 3, 4] is 4.\n\nChallenge\nWrite a function to get the frequency of every element in a list.\n\"\"\"\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def getFrequency(self, head):\n        if not head:\n            return 0\n        counter = [0, 0]\n        pre = head\n        curr = head\n        while curr:\n            if curr.next:\n                pre = curr\n                curr = curr.next\n            else:\n                counter[0] += 1\n                curr = head\n                pre = head\n        if counter[0]:\n            return pre\n        return curr"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/frequency-of-element-in-a-sorted-list/\n# \n# Note:\n# You may assume the list's length is always less than 10000.\n# \n\nclass Solution:\n    # @param A, a list of integers\n    # @return an integer\n    def frequencySort(self, A):\n        # Write your code here\n        if not A:\n            return 0\n        elif len(A) == 1:\n            return A[0]\n        else:\n            freq = 0\n            pre = A[0]\n            for i in range(1, len(A)):\n                if A[i] < A[i-1]:\n                    freq += 1\n                else:\n                    if A[i] == pre:\n                        freq += 1\n                    pre = A[i]\n            return freq + 1"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "import collections\n\n\ndef get_frequency(elements):\n    \"\"\"\n    :type elements: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not elements:\n        return []\n    freq = collections.Counter(elements)\n    return list(freq.most_common())\n\n\nif __name__ == '__main__':\n    assert get_frequency([1, 1, 1, 1]) == [1]\n    assert get_frequency([1, 1, 1, 2]) == [1, 2]\n    assert get_frequency([1, 2, 3]) == [1, 2, 3]"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# TODO\n# 1. Write a function to get the frequency of the elements in a list.\n# 2. Write a function to get the frequency of the elements in a list.\n# 3. Write a function to get the frequency of the elements in a list.\n\n# Hint:\n# 1. The frequency of an element in a list is the number of times that that element appears in the list.\n# 2. The frequency of an element in a list is the number of times that that element appears in the list.\n# 3. The frequency of an element in a list is the number of times that that element appears in the list.\n\n# Example:\n# Given the list [1,2,2,3,1,2,3,4],\n# the frequency of the four element is 4.\n# Given the list [1,2,2,3,1,2,3,4],\n# the frequency of the three element is 3.\n# Given the list [1,2,2,3,1,2,3,4],\n# the frequency of the three element is 3.\n# Given the list [1,2,2,3,1,2,3,4],\n# the frequency of the three element is 3.\n\nclass Solution(object):\n    def getFrequency(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums.sort()\n        result = [0] * len(nums)\n        for i in range(len(nums)):\n            result[i] = nums[i]\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    result[i] += result[j]\n                    result[j] = 0\n        return result\n\n\nif __name__ == '__main__':\n    print Solution().getFrequency([1, 2, 2, 3, 1, 2, 3, 4])"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\n\nclass Solution:\n    # @param head, a ListNode\n    # @return an integer\n    def getFrequency(self, head):\n        if not head:\n            return 0\n        count = 1\n        prev = head\n        curr = head.next\n        while curr:\n            if curr == head:\n                count += 1\n            else:\n                count = count / 2\n            prev = curr\n            curr = curr.next\n        return count"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# TODO:\n# 1) Complete the function\n# 2) Check if the list is empty\n# 3) Check if the list is not empty\n# 4) Check if the list has duplicates\n# 5) Check if the list has a single element\n# 6) Check if the list has two or more elements\n\n# TODO:\n# 1) Check if the list is empty\n# 2) Check if the list has duplicates\n# 3) Check if the list has a single element\n# 4) Check if the list has two or more elements\n\n# TODO:\n# 1) Check if the list is empty\n# 2) Check if the list has duplicates\n# 3) Check if the list has a single element\n# 4) Check if the list has two or more elements\n\n\ndef frequency(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # TODO:\n    # 1) Check if the list is empty\n    # 2) Check if the list has duplicates\n    # 3) Check if the list has a single element\n    # 4) Check if the list has two or more elements\n    return list_"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def get_frequency(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    counts = [0] * len(numbers)\n    for number in numbers:\n        counts[number] += 1\n    return counts\n\n# Your Code Here\nprint get_frequency([1,2,3,4,5,6])"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getFrequency(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        if not head:\n            return []\n        freq = [0] * 10\n        curr = head\n        while curr:\n            freq[curr.val] += 1\n            curr = curr.next\n        freq.reverse()\n        return freq"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def getFrequency(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # write your code here\n    frequency = [0] * 10\n    for i in list:\n        frequency[i] += 1\n\n    return frequency"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "import collections\nimport math\n\ndef get_frequency(list):\n    return collections.Counter(list).most_common()\n\n# Your function should return a list of lists. Each inner list in the outer list corresponds to a frequency.\n# The outer list is a list of elements.\n#\n# Example:\n#\n# Input: [\"a\", \"b\", \"c\", \"d\", \"e\"]\n# Output: [['a', 5], ['b', 1], ['c', 1], ['d', 1], ['e', 1]]\n\n# Your function should be able to return the frequency of a single element.\n#\n# Example:\n#\n# Input: [\"a\", \"b\", \"c\", \"d\", \"e\"]\n# Output: [5, 1, 1, 1, 1]\n\ndef get_frequency(list):\n    return [list.count(e) for e in list]\n\nif __name__ == '__main__':\n    print(get_frequency([1, 2, 3, 4, 5]))\n    print(get_frequency(['a', 'b', 'c', 'd', 'e']))\n    print(get_frequency(['a', 'b', 'c', 'd', 'e', 'a']))\n    print(get_frequency(['a', 'b', 'c', 'd', 'e', 'a', 'a']))\n    print(get_frequency(['a', 'b', 'c', 'd', 'e', 'a', 'a', 'a']))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\nfrom collections import defaultdict\n\n\ndef freq(lst):\n    freq = defaultdict(int)\n    for elt in lst:\n        freq[elt] += 1\n    return freq\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n    print(freq(lst))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def frequency(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = {}\n    for num in numbers:\n        if num in res:\n            res[num] += 1\n        else:\n            res[num] = 1\n\n    return res.items()\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 3, 2, 1, 4, 2, 3, 4, 2, 3, 2, 3, 2, 4, 2, 3, 2, 4, 2, 4, 4, 3, 2, 3, 3, 3, 3, 4, 2, 3, 2, 3, 3, 4, 4, 4, 4]\n    print(frequency(numbers))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from collections import Counter\n\ndef get_frequency(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [f for f in Counter(my_list).values()]\n\nif __name__ == '__main__':\n    print(get_frequency([1, 2, 3, 1, 2, 3]))\n    print(get_frequency([2, 2, 2, 2, 3, 1, 1]))\n    print(get_frequency([3, 1, 2, 2, 1, 3]))\n    print(get_frequency([1, 1, 2, 2, 1, 1, 2, 1]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def frequency(list):\n    return dict((x, list.count(x)) for x in list)\n\nif __name__ == '__main__':\n    l = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]\n    print(frequency(l))\n    print(frequency([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]))\n    print(frequency([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "#\n# Example 1\n#\n# Assume we have a list of numbers.\n#\n# For example, list = [1,2,3,1,2,3,1,2,3]\n#\n# We can get the frequency of 1 by calling count(1)\n#\n# count(1) -> 2\n#\n# And the frequency of 2 by calling count(2)\n#\n# count(2) -> 3\n#\n#\n# Example 2\n#\n# Given a list of strings, return the number of the occurrences of each string.\n#\n# For example,\n#\n# Input: [\"Hello\", \"world\", \"hi\", \"welcome\", \"world\", \"hello\", \"hi\", \"world\", \"hello\"]\n# Output: [1,2,2,1,2,3,2,1,1]\n#\n#\n# Example 3\n#\n# Given a list of numbers.\n#\n# For example, list = [1,2,3,1,2,3,1,2,3]\n#\n# We can get the frequency of 1 by calling count(1)\n#\n# count(1) -> 1\n#\n# And the frequency of 2 by calling count(2)\n#\n# count(2) -> 2\n#\n#\n# Example 4\n#\n# Given a list of strings, return the number of the occurrences of each string.\n#\n# For example,\n#\n# Input: [\"Hello\", \"world\", \"hi\", \"welcome\", \"world\", \"hello\", \"hi\", \"world\", \"hello\"]\n# Output: [1,2,2,1,2,3,2,1,1]\n#\n#\n#\n#\n#\n# Note:\n#\n# The length of the input list will be in the range [1, 10000].\n# The input list will be in the lexicographically sorted order.\n# All the numbers in the input list are in the range of 32-bit signed integer.\n# The numbers in the input list are distinct.\n#\n\nclass Solution(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n        self."
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# TODO: Implement a function to get the frequency of the elements in a list.\n# The function should return a dictionary with the frequency of each element as a key and the number of times that element occurs as a value.\n\n# Example:\n# Given the list [1,1,1,2,2,3],\n# return {1: 2, 2: 3, 3: 1}\n\n# Note:\n# You may assume the list's length does not exceed 100.\n\n# Hint:\n# Use a map to count all the elements.\n# Use a set to record unique elements.\n# Use a list to record the number of times a given element occurs.\n# Use a map to record the number of times a given element occurs.\n# Use a set to record the unique elements.\n\nclass Solution:\n    # @param {ListNode} head\n    # @return {MapNode}\n    def getFrequencyOfElement(self, head):\n        if not head:\n            return {}\n\n        f = defaultdict(int)\n        m = defaultdict(list)\n        n = 0\n        while head:\n            n += 1\n            e = head.val\n            head = head.next\n            m[e].append(n)\n            f[e] += 1\n\n        for e,n in m.items():\n            if n:\n                f[e] = n[0] / n[1]\n\n        return f"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def getFrequency(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [1] + [1] * (len(nums) - 1) + [0] * (len(nums) - len(nums) % 2)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getFrequency([0, 1, 1, 2, 2, 3]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import sys\n\ndef get_frequency(list):\n    if len(list) == 0:\n        return 0\n    return len(list) / float(len(list))\n\ndef get_frequency_2(list):\n    return len(list) / float(len(list) + len(list))\n\ndef get_frequency_3(list):\n    return len(list) / float(len(list) + len(list) - 1)\n\ndef get_frequency_4(list):\n    return len(list) / float(len(list) + len(list) - 2)\n\ndef get_frequency_5(list):\n    return len(list) / float(len(list) + len(list) - 3)\n\ndef get_frequency_6(list):\n    return len(list) / float(len(list) + len(list) - 4)\n\ndef get_frequency_7(list):\n    return len(list) / float(len(list) + len(list) - 5)\n\ndef get_frequency_8(list):\n    return len(list) / float(len(list) + len(list) - 6)\n\ndef get_frequency_9(list):\n    return len(list) / float(len(list) + len(list) - 7)\n\ndef get_frequency_10(list):\n    return len(list) / float(len(list) + len(list) - 8)\n\ndef get_frequency_11(list):\n    return len(list) / float(len(list) + len(list) - 9)\n\ndef get_frequency_12(list):\n    return len(list) / float(len(list) + len(list) - 10)\n\ndef get_frequency_13(list):\n    return len(list) / float(len(list) + len(list) - 11)\n\ndef get_frequency_14(list):\n    return len(list) / float(len(list) + len(list) - 12)\n\ndef get_frequency_15(list):\n    return len(list) / float(len(list) + len(list) - 13)\n\ndef get_frequency_16(list):\n    return"
    }
  ]
}