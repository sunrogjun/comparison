{
  "timestamp": "2025-09-14T20:10:09.717766",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 377,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n):\n    return n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(3))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(3))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\n# -*- coding: utf-8 -*-\n\n#\n# Problem description:\n#\n# Write a Python program that computes the highest power of 2 that is less than or equal to n.\n#\n# The highest power of 2 that is less than or equal to n is the largest integer that is equal to 2^n.\n#\n# For example, if n is 5, the highest power of 2 that is less than or equal to n is 2^5 = 32.\n#\n#\n# Input Format:\n# The first line contains an integer n, where n is the number of test cases.\n# The next line contains n test cases, where each line contains an integer.\n#\n#\n# Output Format:\n# For each test case, print the highest power of 2 that is less than or equal to n.\n#\n#\n# Sample Input:\n# 2\n# 4\n# 6\n# 8\n# 10\n# 12\n#\n# Sample Output:\n# 2\n# 4\n# 8\n#\n#\n# Sample Input:\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n#\n# Sample Output:\n# 2\n# 4\n# 8\n#\n#\n# Sample Input:\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n#\n# Sample Output:\n# 1\n# 2\n# 4\n# 8\n#\n#\n# Sample Input:\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n#\n# Sample Output:\n# 1\n# 2\n# 4\n# 8\n#\n#\n# Sample Input:\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n#\n# Sample Output:\n# 1\n# 2\n# 4\n# 8\n#\n#\n# Sample Input:\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n#\n# Sample Output:"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    Highest power of 2 that is less than or equal to n\n    \"\"\"\n    return 2**(n - 1).bit_length()\n\ndef test_highest_power_of_2():\n    \"\"\"\n    >>> highest_power_of_2(2**10)\n    10\n    >>> highest_power_of_2(2**31)\n    32\n    >>> highest_power_of_2(2**32)\n    64\n    >>> highest_power_of_2(2**63)\n    128\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    test_highest_power_of_2()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# TODO: This is not the fastest way to do this.\n\ndef highest_power_of_two(n):\n    \"\"\"\n    Write a function highest_power_of_two that takes a number as input and returns\n    the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    if n == 4:\n        return 16\n    if n == 5:\n        return 32\n    if n == 6:\n        return 64\n    if n == 7:\n        return 128\n    if n == 8:\n        return 256\n    if n == 9:\n        return 512\n    if n == 10:\n        return 1024\n    if n == 11:\n        return 2048\n    if n == 12:\n        return 4096\n    if n == 13:\n        return 8192\n    if n == 14:\n        return 16384\n    if n == 15:\n        return 32768\n    if n == 16:\n        return 65536\n    if n == 17:\n        return 131072\n    if n == 18:\n        return 262144\n    if n == 19:\n        return 524288\n    if n == 20:\n        return 1048576\n    if n == 21:\n        return 2097152\n    if n == 22:\n        return 4194304\n    if n == 23:\n        return 8388608\n    if n == 24:\n        return 16777216\n    if n == 25:\n        return 33554432\n    if n == 26:\n        return 67108864\n    if n == 27:\n        return 134217728\n    if n == 28:\n        return 268435456\n    if n == 29:\n        return 536870912\n    if n == 30:\n        return 1073741824\n    if n == 31:\n        return 2147483648\n    if n == 32:\n        return 4294967296\n    if n == 33:\n        return 8589934592\n    if n == 34:\n        return 17179869184\n    if n"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return highest_power_of_two(n/2) + 1\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_two(100))\n    print(highest_power_of_two(20))\n    print(highest_power_of_two(1))\n    print(highest_power_of_two(0))\n    print(highest_power_of_two(1))\n    print(highest_power_of_two(2))\n    print(highest_power_of_two(3))\n    print(highest_power_of_two(4))\n    print(highest_power_of_two(5))\n    print(highest_power_of_two(6))\n    print(highest_power_of_two(7))\n    print(highest_power_of_two(8))\n    print(highest_power_of_two(9))\n    print(highest_power_of_two(10))\n    print(highest_power_of_two(11))\n    print(highest_power_of_two(12))\n    print(highest_power_of_two(13))\n    print(highest_power_of_two(14))\n    print(highest_power_of_two(15))\n    print(highest_power_of_two(16))\n    print(highest_power_of_two(17))\n    print(highest_power_of_two(18))\n    print(highest_power_of_two(19))\n    print(highest_power_of_two(20))\n    print(highest_power_of_two(21))\n    print(highest_power_of_two(22))\n    print(highest_power_of_two(23))\n    print(highest_power_of_two(24))\n    print(highest_power_of_two(25))\n    print(highest_power_of_two(26))\n    print("
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n\n    i = 2\n    while i < n:\n        i *= 2\n    return i\n\n# Test Cases\n\n# Test Case 1\nassert find_highest_power_of_2(4) == 4\n\n# Test Case 2\nassert find_highest_power_of_2(5) == 4\n\n# Test Case 3\nassert find_highest_power_of_2(8) == 8\n\n# Test Case 4\nassert find_highest_power_of_2(20) == 16\n\n# Test Case 5\nassert find_highest_power_of_2(25) == 32\n\n# Test Case 6\nassert find_highest_power_of_2(50) == 32\n\n# Test Case 7\nassert find_highest_power_of_2(100) == 64\n\n# Test Case 8\nassert find_highest_power_of_2(1000) == 256\n\n# Test Case 9\nassert find_highest_power_of_2(10000) == 512\n\n# Test Case 10\nassert find_highest_power_of_2(100000) == 1024\n\n# Test Case 11\nassert find_highest_power_of_2(1000000) == 1024\n\n# Test Case 12\nassert find_highest_power_of_2(10000000) == 2048\n\n# Test Case 13\nassert find_highest_power_of_2(100000000) == 4096\n\n# Test Case 14\nassert find_highest_power_of_2(1000000000) == 8192\n\n# Test Case 15\nassert find_highest_power_of_2(10000000000) == 16384\n\n# Test Case 16\nassert find_highest_power_of_2(100000000000) == 32768\n\n# Test Case 17\nassert find_highest_power_of_2(1000000000000) == 65536\n\n# Test Case 18\nassert find_highest_power_of_2(10000000000000) == 131072\n\n# Test Case 19\nassert find_highest_power_of_2(100000000000000) == 262144\n\n# Test Case 20"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    >>> highest_power_of_two(1)\n    2\n    >>> highest_power_of_two(2)\n    2\n    >>> highest_power_of_two(3)\n    4\n    >>> highest_power_of_two(4)\n    4\n    >>> highest_power_of_two(5)\n    8\n    >>> highest_power_of_two(6)\n    8\n    >>> highest_power_of_two(7)\n    8\n    >>> highest_power_of_two(8)\n    8\n    >>> highest_power_of_two(9)\n    16\n    >>> highest_power_of_two(10)\n    16\n    >>> highest_power_of_two(15)\n    16\n    >>> highest_power_of_two(16)\n    16\n    >>> highest_power_of_two(17)\n    32\n    >>> highest_power_of_two(18)\n    32\n    >>> highest_power_of_two(19)\n    32\n    >>> highest_power_of_two(20)\n    32\n    >>> highest_power_of_two(21)\n    32\n    >>> highest_power_of_two(22)\n    32\n    >>> highest_power_of_two(23)\n    32\n    >>> highest_power_of_two(24)\n    32\n    >>> highest_power_of_two(25)\n    32\n    >>> highest_power_of_two(26)\n    64\n    >>> highest_power_of_two(27)\n    64\n    >>> highest_power_of_two(28)\n    64\n    >>> highest_power_of_two(29)\n    64\n    >>> highest_power_of_two(30)\n    64\n    >>> highest_power_of_two(31)\n    64\n    >>> highest_power_of_two(32)\n    64\n    >>> highest_power_of_two(33)\n    64\n    >>> highest_power_of_two(34)\n    64\n    >>> highest_power_of_two(35)\n    128"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def highest_power_of_two_less_than_or_equal_to_n(n):\n\t\"\"\"\n\tWrite a python function to find the highest power of 2 that is less than or equal to n.\n\t\"\"\"\n\t# Note that the highest power of 2 less than or equal to n is 2^(n/2), not 2^(n/2+1).\n\t# For example, if n = 3, the highest power of 2 less than or equal to 3 is 2^2 = 4.\n\t# If n = 4, the highest power of 2 less than or equal to 4 is 2^3 = 8.\n\t# If n = 5, the highest power of 2 less than or equal to 5 is 2^4 = 16.\n\t# If n = 6, the highest power of 2 less than or equal to 6 is 2^5 = 32.\n\t# If n = 7, the highest power of 2 less than or equal to 7 is 2^6 = 64.\n\t# If n = 8, the highest power of 2 less than or equal to 8 is 2^7 = 128.\n\t# If n = 9, the highest power of 2 less than or equal to 9 is 2^8 = 256.\n\t# If n = 10, the highest power of 2 less than or equal to 10 is 2^9 = 512.\n\t# If n = 11, the highest power of 2 less than or equal to 11 is 2^10 = 1024.\n\t# If n = 12, the highest power of 2 less than or equal to 12 is 2^11 = 2048.\n\t# If n = 13, the highest power of 2 less than or equal to 13 is 2^12 = 4096.\n\t# If n = 14, the highest power of 2 less than or equal to 14 is 2^13 = 8192.\n\t# If n = 15, the highest power of 2 less than or equal to 15 is 2^14 = 16384.\n\t# If n = 16, the highest power of 2 less than or equal to 16 is 2^15 = 32768.\n\t# If n = 17, the highest power of 2 less than or equal to 17 is 2^16 = 65536.\n\t# If n = 18, the highest power of 2 less than or equal to 18 is 2^16 = 131072."
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    Input:\n    n = the number to be converted\n    \n    Output:\n    the highest power of 2 that is less than or equal to n\n    \"\"\"\n    \n    return int(2 ** (int(n) - 1) - 1)\n\n\nprint(highest_power_of_two(1))\nprint(highest_power_of_two(2))\nprint(highest_power_of_two(3))\nprint(highest_power_of_two(4))\nprint(highest_power_of_two(5))\nprint(highest_power_of_two(6))\nprint(highest_power_of_two(7))\nprint(highest_power_of_two(8))\nprint(highest_power_of_two(9))\nprint(highest_power_of_two(10))\nprint(highest_power_of_two(20))\nprint(highest_power_of_two(30))\nprint(highest_power_of_two(40))\nprint(highest_power_of_two(50))\nprint(highest_power_of_two(60))\nprint(highest_power_of_two(70))\nprint(highest_power_of_two(80))\nprint(highest_power_of_two(90))\nprint(highest_power_of_two(100))\nprint(highest_power_of_two(1000))\nprint(highest_power_of_two(2000))\nprint(highest_power_of_two(3000))\nprint(highest_power_of_two(4000))\nprint(highest_power_of_two(5000))\nprint(highest_power_of_two(6000))\nprint(highest_power_of_two(7000))\nprint(highest_power_of_two(8000))\nprint(highest_power_of_two(9000))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def get_highest_power_of_two(n):\n    \"\"\"\n    >>> get_highest_power_of_two(1)\n    1\n    >>> get_highest_power_of_two(2)\n    2\n    >>> get_highest_power_of_two(3)\n    4\n    >>> get_highest_power_of_two(4)\n    4\n    >>> get_highest_power_of_two(5)\n    8\n    >>> get_highest_power_of_two(8)\n    8\n    >>> get_highest_power_of_two(9)\n    16\n    \"\"\"\n    highest_power_of_two = 1\n    while highest_power_of_two < n:\n        highest_power_of_two <<= 1\n    return highest_power_of_two\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import math\n\ndef find_pow2(n):\n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    pow = 2\n    while pow < n:\n        pow *= 2\n    \n    return pow\n\ndef find_pow2_slow(n):\n    return pow(2, math.ceil(math.log(n, 2)))\n\nif __name__ == '__main__':\n    assert find_pow2(0) == 0\n    assert find_pow2(1) == 1\n    assert find_pow2(2) == 2\n    assert find_pow2(3) == 4\n    assert find_pow2(4) == 4\n    assert find_pow2(5) == 8\n    assert find_pow2(6) == 8\n    assert find_pow2(7) == 8\n    assert find_pow2(8) == 8\n    assert find_pow2(9) == 16\n    assert find_pow2(10) == 16\n    assert find_pow2(11) == 16\n    assert find_pow2(12) == 16\n    assert find_pow2(13) == 16\n    assert find_pow2(14) == 16\n    assert find_pow2(15) == 16\n    assert find_pow2(16) == 16\n    assert find_pow2(17) == 32\n    assert find_pow2(18) == 32\n    assert find_pow2(19) == 32\n    assert find_pow2(20) == 32\n    assert find_pow2(21) == 32\n    assert find_pow2(22) == 32\n    assert find_pow2(23) == 32\n    assert find_pow2(24) == 32\n    assert find_pow2(25) == 32\n    assert find_pow2(26) == 32\n    assert find_pow2(27) == 32\n    assert find_pow2(28) == 32\n    assert find_pow2(29) =="
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def get_power_of_two(n):\n    \"\"\"\n    Return the highest power of two that is less than or equal to n.\n    :param n:\n    :return:\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n    # base case 2\n    elif n == 2:\n        return 2\n    # base case 3\n    elif n == 3:\n        return 4\n    # base case 4\n    elif n == 4:\n        return 8\n    # base case 5\n    elif n == 5:\n        return 16\n    # base case 6\n    elif n == 6:\n        return 32\n    # base case 7\n    elif n == 7:\n        return 64\n    # base case 8\n    elif n == 8:\n        return 128\n    # base case 9\n    elif n == 9:\n        return 256\n    # base case 10\n    elif n == 10:\n        return 512\n    # base case 11\n    elif n == 11:\n        return 1024\n    # base case 12\n    elif n == 12:\n        return 2048\n    # base case 13\n    elif n == 13:\n        return 4096\n    # base case 14\n    elif n == 14:\n        return 8192\n    # base case 15\n    elif n == 15:\n        return 16384\n    # base case 16\n    elif n == 16:\n        return 32768\n    # base case 17\n    elif n == 17:\n        return 65536\n    # base case 18\n    elif n == 18:\n        return 131072\n    # base case 19\n    elif n == 19:\n        return 262144\n    # base case 20\n    elif n == 20:\n        return 524288\n    # base case 21\n    elif n == 21:\n        return 1048576\n    # base case 22\n    elif n == 22:\n        return 2097152\n    # base case 23\n    elif n == 23:\n        return 4194304\n    # base case 24\n    elif n == 24:\n        return 8388608\n    # base case 25\n    elif n == 25:\n        return 1677"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# Python 2/3 compatibility\nfrom __future__ import print_function\n\nimport math\n\ndef highest_power_of_two(n):\n    \"\"\"\n    Compute the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return int(math.ceil(math.log(n, 2)))\n\n# Tests\ndef test_highest_power_of_two():\n    assert highest_power_of_two(1) == 0\n    assert highest_power_of_two(2) == 1\n    assert highest_power_of_two(4) == 2\n    assert highest_power_of_two(8) == 3\n    assert highest_power_of_two(16) == 4\n    assert highest_power_of_two(32) == 5\n    assert highest_power_of_two(64) == 6\n    assert highest_power_of_two(128) == 7\n    assert highest_power_of_two(256) == 8\n\nif __name__ == '__main__':\n    test_highest_power_of_two()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 1\n    while result < n:\n        result = result * 2\n    return result\n\n\nif __name__ == '__main__':\n    print(highest_power_of_two(1))\n    print(highest_power_of_two(2))\n    print(highest_power_of_two(3))\n    print(highest_power_of_two(4))\n    print(highest_power_of_two(5))\n    print(highest_power_of_two(6))\n    print(highest_power_of_two(7))\n    print(highest_power_of_two(8))\n    print(highest_power_of_two(9))\n    print(highest_power_of_two(10))\n    print(highest_power_of_two(11))\n    print(highest_power_of_two(12))\n    print(highest_power_of_two(13))\n    print(highest_power_of_two(14))\n    print(highest_power_of_two(15))\n    print(highest_power_of_two(16))\n    print(highest_power_of_two(17))\n    print(highest_power_of_two(18))\n    print(highest_power_of_two(19))\n    print(highest_power_of_two(20))\n    print(highest_power_of_two(21))\n    print(highest_power_of_two(22))\n    print(highest_power_of_two(23))\n    print(highest_power_of_two(24))\n    print(highest_power_of_two(25))\n    print(highest_power_of_two(26))\n    print(highest_power_of_two(27))\n    print(highest_power_of_two(28))\n    print(highest_power_of_two(29))\n    print(highest_power_of_two(30))\n    print(highest_power_of_two(31))\n    print(highest_power_of_two"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # http://stackoverflow.com/questions/352268/how-to-find-the-highest-power-of-2-that-is-less-than-or-equal-to-n\n    # http://www.mathopenref.com/powtwo.html\n    # http://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/questions/20573599/find-the-highest-power-of-2-that-is-less-than-or-equal-to-n-python\n    # http://www.mathopenref.com/powtwo.html\n    # https://stackoverflow.com/a/17862447/803546\n    # http://www.mathopenref.com/powtwo.html\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/1848761/803546\n    # https://stackoverflow.com/a/18"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def find_power_of_2(n):\n    \"\"\"\n    Given an integer, find the highest power of 2 that is less than or equal to n.\n\n    Example\n    Given n = 5, return 2.\n\n    Follow up:\n    Could you solve this without using any loop / recursion?\n    \"\"\"\n    \n    if n < 2:\n        return 1\n    \n    while n > 1:\n        if n & 1 == 0:\n            n >>= 1\n        else:\n            n = n - 1\n            break\n    \n    return n"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import math\n\ndef find_highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    :param n: int\n    :return: int\n    \"\"\"\n\n    # Find the highest power of 2 that is less than or equal to n.\n    result = 1\n    while result * 2 <= n:\n        result = result * 2\n\n    return result\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n\n    print(find_highest_power_of_2(2 ** 10))\n    print(find_highest_power_of_2(2 ** 50))\n    print(find_highest_power_of_2(2 ** 200))\n    print(find_highest_power_of_2(2 ** 500))\n    print(find_highest_power_of_2(2 ** 1000))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    >>> highest_power_of_2(1)\n    1\n    >>> highest_power_of_2(2)\n    2\n    >>> highest_power_of_2(3)\n    4\n    >>> highest_power_of_2(4)\n    4\n    >>> highest_power_of_2(5)\n    8\n    >>> highest_power_of_2(6)\n    8\n    >>> highest_power_of_2(7)\n    8\n    >>> highest_power_of_2(8)\n    8\n    >>> highest_power_of_2(9)\n    16\n    >>> highest_power_of_2(10)\n    16\n    >>> highest_power_of_2(15)\n    16\n    >>> highest_power_of_2(16)\n    16\n    >>> highest_power_of_2(17)\n    16\n    >>> highest_power_of_2(20)\n    32\n    \"\"\"\n    # The bitwise logical shift right operator (>>) is used to\n    # shift the bit that is to the right of the position of the highest\n    # bit. This means that the highest bit is shifted right by 1 bit and\n    # the other bits are shifted left by 1 bit.\n    return int(n) >> 1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def highest_power_of_two_less_than_or_equal_to_n(n):\n    \"\"\"\n    >>> highest_power_of_two_less_than_or_equal_to_n(16)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n(4)\n    4\n    >>> highest_power_of_two_less_than_or_equal_to_n(32)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n(27)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n(15)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n(15)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n(17)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n(20)\n    16\n    \"\"\"\n    return highest_power_of_two_less_than_or_equal_to_n_recursive(n)\n\n\ndef highest_power_of_two_less_than_or_equal_to_n_recursive(n):\n    \"\"\"\n    >>> highest_power_of_two_less_than_or_equal_to_n_recursive(4)\n    4\n    >>> highest_power_of_two_less_than_or_equal_to_n_recursive(16)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n_recursive(32)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n_recursive(27)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n_recursive(15)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n_recursive(15)\n    16\n    >>> highest_power_of_two_less_"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    >>> highest_power_of_two(0)\n    0\n    >>> highest_power_of_two(1)\n    1\n    >>> highest_power_of_two(2)\n    2\n    >>> highest_power_of_two(3)\n    4\n    >>> highest_power_of_two(4)\n    4\n    >>> highest_power_of_two(5)\n    8\n    >>> highest_power_of_two(6)\n    8\n    >>> highest_power_of_two(7)\n    8\n    >>> highest_power_of_two(8)\n    8\n    >>> highest_power_of_two(9)\n    16\n    >>> highest_power_of_two(10)\n    16\n    >>> highest_power_of_two(15)\n    16\n    >>> highest_power_of_two(16)\n    16\n    >>> highest_power_of_two(17)\n    32\n    >>> highest_power_of_two(18)\n    32\n    >>> highest_power_of_two(19)\n    32\n    >>> highest_power_of_two(20)\n    32\n    >>> highest_power_of_two(21)\n    64\n    >>> highest_power_of_two(22)\n    64\n    >>> highest_power_of_two(23)\n    64\n    >>> highest_power_of_two(24)\n    64\n    >>> highest_power_of_two(25)\n    128\n    >>> highest_power_of_two(26)\n    128\n    >>> highest_power_of_two(27)\n    128\n    >>> highest_power_of_two(28)\n    128\n    >>> highest_power_of_two(29)\n    256\n    >>> highest_power_of_two(30)\n    256\n    >>> highest_power_of_two(31)\n    256\n    >>> highest_power_of_two(32)\n    256\n    >>> highest_power_of_two(33)\n    512\n    >>> highest_power_of_two(34)\n    512"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def findHighestPowerOfTwo(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # 0.1% time\n    # 1.1% time\n    # 1.5% time\n    # 2.3% time\n    # 3.6% time\n    # 5.4% time\n    # 9.8% time\n    # 20.2% time\n    # 43.6% time\n    # 89.9% time\n    # 179.8% time\n    # 368.5% time\n    # 743.5% time\n    # 1484.5% time\n    # 2985.5% time\n    # 6172.5% time\n    # 12372.5% time\n    # 24324.5% time\n    # 48642.5% time\n    # 98765.5% time\n    # 188765.5% time\n    # 371876.5% time\n    # 737876.5% time\n    # 1437178.5% time\n    # 2937176.5% time\n    # 6371776.5% time\n    # 12371776.5% time\n    # 24371776.5% time\n    # 48371776.5% time\n    # 987371776.5% time\n    # 1887371776.5% time\n    # 37187371776.5% time\n    # 73787371776.5% time\n    # 143737871776.5% time\n    # 293737871776.5% time\n    # 63737871776.5% time\n    # 123737871776.5% time\n    # 243737871776.5% time\n    # 483737871776.5% time\n    # 9873737871776.5% time\n    # 18873737871776.5% time\n    # 371873737871776.5% time\n    # 737873737871776.5% time\n    # 1437373737871776.5% time\n    # 2937373737871776.5% time\n    # 637"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    @param n: integer\n    @return: the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return 2 ** (n / 2)\n\nprint highest_power_of_2(8)"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    # write your code here\n    i = 2\n    while i < n:\n        i = i << 1\n    return i\n\nif __name__ == '__main__':\n    print highest_power_of_two(10)\n    print highest_power_of_two(20)\n    print highest_power_of_two(100)\n    print highest_power_of_two(1000)"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def highest_power_of_2_less_equal_n(n):\n    return highest_power_of_2(n) & (highest_power_of_2(n) - 1)\n\ndef highest_power_of_2(n):\n    \"\"\"\n    Given a number n, return the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return 2**(n/2)\n\ndef main():\n    print(highest_power_of_2_less_equal_n(7))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def highest_power_of_two_less_than_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 1\n    p2 = 1\n    while p2 < n:\n        p2 *= 2\n    return p2\n\nprint(highest_power_of_two_less_than_n(13))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return highest_power_of_two(n / 2) * 2\n\nprint(highest_power_of_two(32))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    Highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 2\n    while power < n:\n        power = power << 1\n    return power\n\n\nif __name__ == '__main__':\n    print highest_power_of_two(10)\n    print highest_power_of_two(15)\n    print highest_power_of_two(20)"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def findHighestPow2LessThanEq(n):\n    \"\"\"\n    @return:\n    \"\"\"\n    i = 2\n    while i < n:\n        i += i\n    return i\n\nif __name__ == '__main__':\n    print(findHighestPow2LessThanEq(100))\n    print(findHighestPow2LessThanEq(1000))\n    print(findHighestPow2LessThanEq(5000))\n    print(findHighestPow2LessThanEq(10000))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "import math\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(math.floor(math.log(n, 2)))\n\nif __name__ == '__main__':\n    print highest_power_of_2(1)\n    print highest_power_of_2(2)\n    print highest_power_of_2(4)\n    print highest_power_of_2(8)\n    print highest_power_of_2(16)\n    print highest_power_of_2(32)\n    print highest_power_of_2(64)\n    print highest_power_of_2(128)\n    print highest_power_of_2(1024)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def highest_power_of_two_less_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n / i\n            i += 1\n        else:\n            i += 1\n    return n\n\nif __name__ == '__main__':\n    print(highest_power_of_two_less_than_or_equal_to_n(32))\n    print(highest_power_of_two_less_than_or_equal_to_n(5))\n    print(highest_power_of_two_less_than_or_equal_to_n(25))\n    print(highest_power_of_two_less_than_or_equal_to_n(30))\n    print(highest_power_of_two_less_than_or_equal_to_n(31))\n    print(highest_power_of_two_less_than_or_equal_to_n(32))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    Highest power of 2 that is less than or equal to n\n    :param n:\n    :return:\n    \"\"\"\n    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n / i\n        else:\n            i += 1\n    return i\n\nif __name__ == \"__main__\":\n    print highest_power_of_2(10)\n    print highest_power_of_2(100)\n    print highest_power_of_2(10000)\n    print highest_power_of_2(1000000)"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    return n - (n & -n)\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(12))\n    print(highest_power_of_2(23))\n    print(highest_power_of_2(100))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    # find the highest power of 2 that is less than or equal to n\n    for i in range(1, n):\n        if n == i**2:\n            return i\n        elif n == i**2 + 1:\n            return i + 1\n    return n\n\nprint(highest_power_of_two(10))\nprint(highest_power_of_two(100))\nprint(highest_power_of_two(1000))\nprint(highest_power_of_two(10000))\nprint(highest_power_of_two(100000))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def highest_power_of_two_less_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i < n:\n        if i!= 0 and n % i == 0:\n            return i\n        i += 1\n    return n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "import math\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 1:\n        n >>= 1\n        if n == 1:\n            return 1\n    return n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(31))\n    print(highest_power_of_2(32))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(1000))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import math\n\ndef highest_power_of_two(n):\n    return int(math.floor(math.log(n, 2)))\n\nif __name__ == \"__main__\":\n    print highest_power_of_two(10)\n    print highest_power_of_two(20)\n    print highest_power_of_two(100)\n    print highest_power_of_two(1000)\n    print highest_power_of_two(10000)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 2 ** (int(math.log(n, 2)) + 1)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def find_least_power_of_two(n):\n    \"\"\"\n    n = the number to find the least power of 2\n    return the least power of 2 that is less than or equal to n.\n    \"\"\"\n    return pow(2, int(log(n, 2) / log(2)))\n\nprint find_least_power_of_two(16)\n#>>> 4"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import math\ndef highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return int(math.floor(math.log(n, 2)))\n\ndef main():\n    \"\"\"\n    Run the highest_power_of_2() function.\n    \"\"\"\n    print(\"The highest power of 2 is: {0}\".format(highest_power_of_2(1000)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import math\n\n\ndef highest_pow2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # 2^n - 1\n    x = 2**n - 1\n    # Find the highest power of 2 that is less than or equal to n.\n    while x > 0:\n        x = x >> 1\n    return x\n\n\ndef main():\n    \"\"\"\n    Main\n    \"\"\"\n    print(highest_pow2(10))\n    print(highest_pow2(20))\n    print(highest_pow2(21))\n    print(highest_pow2(22))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def highest_power_of_2_less_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 1\n    p = 2\n    while p < n:\n        p = p * 2\n    return p\n\n\nif __name__ == '__main__':\n    print(highest_power_of_2_less_or_equal_to_n(1))\n    print(highest_power_of_2_less_or_equal_to_n(100))\n    print(highest_power_of_2_less_or_equal_to_n(200))\n    print(highest_power_of_2_less_or_equal_to_n(500))\n    print(highest_power_of_2_less_or_equal_to_n(1000))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def findHighestPower2(n):\n    if n == 1:\n        return 1\n    return 2\n    \nif __name__ == \"__main__\":\n    print findHighestPower2(1000)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 less than or equal to n.\n    \"\"\"\n    # NOTE: This method is not very efficient.\n    #       It loops through all the powers of 2\n    #       up to the value of n, and checks to see\n    #       if the number is a power of 2.\n    #       If so, return the value.\n    #       If not, return the next power of 2.\n    #       If the highest power of 2 is greater than n,\n    #       return n.\n    #       If the highest power of 2 is less than n,\n    #       return the highest power of 2.\n    #       Otherwise, return the highest power of 2.\n    highest_power_of_2 = 2\n    while highest_power_of_2 < n:\n        highest_power_of_2 *= 2\n    if highest_power_of_2 == n:\n        return n\n    elif highest_power_of_2 > n:\n        return n\n    else:\n        return highest_power_of_2\n\n# Test the function\nprint highest_power_of_2(10)\n#>>> 16\nprint highest_power_of_2(20)\n#>>> 32\nprint highest_power_of_2(1024)\n#>>> 2**20"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n\t\"\"\"\n\tWrite a python function to find the highest power of 2 that is less than or equal to n.\n\t\"\"\"\n\n\treturn int(n ** (1.0 / 2))\n\n#print highest_power_of_2(10)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def highest_power_of_two_less_than_or_equal_to_n(n):\n    \"\"\"\n    :param n: integer\n    :return: the highest power of 2 that is less than or equal to n\n    \"\"\"\n    # n is a positive integer\n    # if n is a power of 2, return n\n    # if n is not a power of 2, return the highest power of 2 that is less than or equal to n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n\n    else:\n        return highest_power_of_two_less_than_or_equal_to_n(n / 2)\n\nif __name__ == '__main__':\n    print(highest_power_of_two_less_than_or_equal_to_n(10))\n    print(highest_power_of_two_less_than_or_equal_to_n(20))\n    print(highest_power_of_two_less_than_or_equal_to_n(40))\n    print(highest_power_of_two_less_than_or_equal_to_n(100))\n    print(highest_power_of_two_less_than_or_equal_to_n(1000))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    i = 2\n    while i < n:\n        if is_prime(i):\n            if i < n:\n                yield i\n            if i > n:\n                break\n            i += 1\n        else:\n            i += 2\n    if i < n:\n        yield i\n\ndef main():\n    for i in find_prime(sys.argv[1]):\n        print i\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    # convert n to binary\n    b = bin(n)\n    # remove the last bit\n    b = b[:-1]\n    # remove the first bit\n    b = b[1:]\n    # convert to list\n    b = list(b)\n    # get the length of the list\n    len_b = len(b)\n    # keep shifting bits until the first bit is 1\n    for i in range(len_b-1, -1, -1):\n        if b[i] == '1':\n            return 2 ** i\n    return 2 ** len_b\n\nprint(highest_power_of_two(2**10))\nprint(highest_power_of_two(2**16))\nprint(highest_power_of_two(2**32))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def find_pow2(n):\n    if n <= 0:\n        return 0\n    p = 1\n    while p < n:\n        p = p << 1\n    return p\n\nif __name__ == '__main__':\n    n = int(raw_input())\n    print find_pow2(n)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import math\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(math.floor(math.log(n, 2)))\n\nif __name__ == '__main__':\n    print highest_power_of_2(10)\n    print highest_power_of_2(16)\n    print highest_power_of_2(17)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # NOTE: This is a good solution, but there are more efficient solutions\n    # which don't require the entire list to be processed.\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n\n    return n\n\n\nif __name__ == \"__main__\":\n    print highest_power_of_2(16)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "import math\n\ndef max_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 0:\n        n = n >> 1\n        if n == 1:\n            return 1\n        elif n == 0:\n            return 0\n\ndef main():\n    for i in range(1, 100):\n        print(i, max_power_of_2(i))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def highest_power_of_two_less_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i < n:\n        i = i << 1\n    return i"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :param n: the number to find the highest power of 2 that is less than or equal to\n    :return: the highest power of 2 that is less than or equal to n\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return highest_power_of_2(n / 2) * 2\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print highest_power_of_2(4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 1:\n        if n & 1 == 0:\n            n >>= 1\n        else:\n            n = n >> 1\n    return n"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while n!= 0:\n        i *= 2\n        n /= 2\n    return i\n\nif __name__ == '__main__':\n    print(highest_power_of_two(4))\n    print(highest_power_of_two(32))\n    print(highest_power_of_two(1024))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    :param n: an integer\n    :return: the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    assert isinstance(n, int)\n    assert n >= 0\n\n    # The first power of 2 that is greater than n is 2**(ceil(log_2(n)))\n    result = 2\n    while result < n:\n        result = result << 1\n    return result\n\n\nif __name__ == '__main__':\n    print(highest_power_of_two(20))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def is_power_of_two(n):\n    return n & (n - 1) == 0\n\ndef find_highest_power_of_two(n):\n    if n == 0:\n        return 0\n    if is_power_of_two(n):\n        return n\n    if n == 1:\n        return 1\n    return find_highest_power_of_two(n / 2) * 2\n\nif __name__ == '__main__':\n    n = int(input())\n    print(find_highest_power_of_two(n))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "# the highest power of 2 that is less than or equal to n\n# the largest power of 2 that is less than or equal to n\ndef highest_power_of_2_less_than_or_equal_to_n(n):\n    \"\"\"\n    Highest power of 2 less than or equal to n\n\n    :param n: the number\n    :return: the highest power of 2 less than or equal to n\n    \"\"\"\n    i = 2\n    while i < n:\n        if n % i == 0:\n            n /= i\n            i += 1\n        else:\n            return i\n\n\nif __name__ == '__main__':\n    print highest_power_of_2_less_than_or_equal_to_n(10)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from math import log2\n\ndef find_highest_power_of_2(n):\n    \"\"\"\n    Given an integer, find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 0:\n        n = n >> 1\n        if n == 0:\n            return 1\n    return 2\n\n\nif __name__ == \"__main__\":\n    print find_highest_power_of_2(8)\n    print find_highest_power_of_2(10)\n    print find_highest_power_of_2(7)\n    print find_highest_power_of_2(3)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import math\n\n\ndef highest_power_of_two_less_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while True:\n        n = n >> 1\n        if n < 1:\n            return 0\n        if n & 1 == 1:\n            return n\n\n\nif __name__ == '__main__':\n    print(highest_power_of_two_less_than_or_equal_to_n(100))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import math\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    while n > 1:\n        if n & 1 == 0:\n            n >>= 1\n        else:\n            n = n >> 1\n        print(n)\n    return n\n\nprint(highest_power_of_2(3))\nprint(highest_power_of_2(5))\nprint(highest_power_of_2(7))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def find_p2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    p2 = 1\n    while p2 * p2 < n:\n        p2 = p2 << 1\n    return p2\n\nif __name__ == '__main__':\n    assert find_p2(2) == 2\n    assert find_p2(3) == 4\n    assert find_p2(10) == 4\n    assert find_p2(13) == 8\n    assert find_p2(100) == 8"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from math import log\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :param n: an integer\n    :return: the highest power of 2 that is less than or equal to n\n    \"\"\"\n    return int(log(n, 2))\n\n\nif __name__ == \"__main__\":\n    print highest_power_of_2(10)\n    print highest_power_of_2(20)\n    print highest_power_of_2(30)\n    print highest_power_of_2(100)\n    print highest_power_of_2(1000)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_largest_power_of_2_less_than_n(n):\n    return pow(2, int(math.floor(math.log(n, 2))))\n\ndef main():\n    print(find_largest_power_of_2_less_than_n(10))\n    print(find_largest_power_of_2_less_than_n(100))\n    print(find_largest_power_of_2_less_than_n(1000))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def highest_pow2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 1:\n        if n & 1 == 0:\n            return n\n        else:\n            n >>= 1\n    return n\n\nif __name__ == '__main__':\n    print highest_pow2(3)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\n\ndef find_highest_power_of_two_less_than_or_equal_to(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    x = 1\n    while x < n:\n        x = x * 2\n    return x\n\n\ndef main():\n    \"\"\"\n    Write a main function to test the function.\n    \"\"\"\n    print(\"Test with n = 3\")\n    print(find_highest_power_of_two_less_than_or_equal_to(3))\n    print(\"Test with n = 5\")\n    print(find_highest_power_of_two_less_than_or_equal_to(5))\n    print(\"Test with n = 7\")\n    print(find_highest_power_of_two_less_than_or_equal_to(7))\n    print(\"Test with n = 11\")\n    print(find_highest_power_of_two_less_than_or_equal_to(11))\n    print(\"Test with n = 13\")\n    print(find_highest_power_of_two_less_than_or_equal_to(13))\n    print(\"Test with n = 17\")\n    print(find_highest_power_of_two_less_than_or_equal_to(17))\n    print(\"Test with n = 19\")\n    print(find_highest_power_of_two_less_than_or_equal_to(19))\n    print(\"Test with n = 23\")\n    print(find_highest_power_of_two_less_than_or_equal_to(23))\n    print(\"Test with n = 29\")\n    print(find_highest_power_of_two_less_than_or_equal_to(29))\n    print(\"Test with n = 31\")\n    print(find_highest_power_of_two_less_than_or_equal_to(31))\n    print(\"Test with n = 37\")\n    print(find_highest_power_of_two_less_than_or_equal_to(37))\n    print(\"Test"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def max_pow2(n):\n    \"\"\"\n    :param n: integer\n    :return: the highest power of 2 that is less than or equal to n\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    while n > 0:\n        n = n >> 1\n        if n == 0:\n            return 1\n        \n    return n\n\nif __name__ == \"__main__\":\n    print(max_pow2(1000))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef highest_power_of_2(n):\n    \"\"\"\n    n = number to check\n    returns highest power of 2 less than or equal to n\n    \"\"\"\n    assert(n > 0)\n    while n > 1:\n        n = n >> 1\n    return n\n\nif __name__ == '__main__':\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(1000))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import sys\n\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :param n: integer\n    :return: int\n    \"\"\"\n    return 1 << (n - 1) & (1 << (n - 2))\n\n\ndef main():\n    n = int(sys.argv[1])\n    print highest_power_of_2(n)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\ndef highest_power_of_2(n):\n    return math.floor(math.log(n, 2))\n\nif __name__ == '__main__':\n    print highest_power_of_2(10)\n    print highest_power_of_2(100)\n    print highest_power_of_2(1000)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\ndef highestPowerOf2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    while True:\n        power = 2\n        while n % power == 0:\n            n = n / 2\n            power = power * 2\n        if n == 0:\n            return power\n        power = power * 2\n    \n    return power\n\nif __name__ == '__main__':\n    print(highestPowerOf2(12))\n    print(highestPowerOf2(16))\n    print(highestPowerOf2(64))\n    print(highestPowerOf2(100))\n    print(highestPowerOf2(1000))\n    print(highestPowerOf2(1000000))\n    print(highestPowerOf2(10000000000))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    >>> highest_power_of_two(0)\n    0\n    >>> highest_power_of_two(1)\n    1\n    >>> highest_power_of_two(2)\n    2\n    >>> highest_power_of_two(3)\n    4\n    >>> highest_power_of_two(4)\n    4\n    >>> highest_power_of_two(5)\n    8\n    >>> highest_power_of_two(6)\n    8\n    >>> highest_power_of_two(7)\n    8\n    >>> highest_power_of_two(8)\n    8\n    >>> highest_power_of_two(9)\n    16\n    >>> highest_power_of_two(10)\n    16\n    >>> highest_power_of_two(11)\n    16\n    >>> highest_power_of_two(12)\n    16\n    >>> highest_power_of_two(13)\n    16\n    >>> highest_power_of_two(14)\n    16\n    >>> highest_power_of_two(15)\n    16\n    >>> highest_power_of_two(16)\n    16\n    >>> highest_power_of_two(17)\n    32\n    >>> highest_power_of_two(18)\n    32\n    >>> highest_power_of_two(19)\n    32\n    >>> highest_power_of_two(20)\n    32\n    >>> highest_power_of_two(21)\n    32\n    >>> highest_power_of_two(22)\n    32\n    >>> highest_power_of_two(23)\n    32\n    >>> highest_power_of_two(24)\n    32\n    >>> highest_power_of_two(25)\n    32\n    >>> highest_power_of_two(26)\n    32\n    >>> highest_power_of_two(27)\n    32\n    >>> highest_power_of_two(28)\n    32\n    >>> highest_power_of_two(29)\n    32\n    >>> highest_power_of_two(30)\n    32"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def highest_power_of_two_less_than_or_equal_to_n(n):\n    \"\"\"\n    >>> highest_power_of_two_less_than_or_equal_to_n(32)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to_n(64)\n    32\n    >>> highest_power_of_two_less_than_or_equal_to_n(128)\n    64\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return highest_power_of_two_less_than_or_equal_to_n(n / 2) * 2"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/max-power-of-2/problem\n\n# @author bhagy\n# @date   10/10/2019\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n\n    # If n is even, then we can use the fact that the binary representation of n is\n    # 2**n which is the highest power of 2 less than or equal to n.\n    if n % 2 == 0:\n        return 2**n\n\n    # If n is odd, then we can use the fact that the binary representation of n is\n    # 2**(n-1) which is the highest power of 2 less than or equal to n.\n    if n % 2 == 1:\n        return 2**(n-1)\n\n    # If n is a power of 2, then we can use the fact that the binary representation of\n    # n is 2**(n/2) which is the highest power of 2 less than or equal to n.\n    if n % 4 == 0:\n        return 2**(n/2)\n\n    # Otherwise, we have to find the highest power of 2 that is less than or equal to n.\n    # The algorithm is to find the highest power of 2 that is less than or equal to n.\n    # The highest power of 2 that is less than or equal to n is the largest power of 2 that\n    # is less than or equal to n.\n    # The highest power of 2 that is less than or equal to n is the largest power of 2 that\n    # is less than or equal to n.\n    # The largest power of 2 that is less than or equal to n is the largest power of 2 that\n    # is less than or equal to n.\n    # The largest power of 2 that is less than or equal to n is the largest power of 2 that\n    # is less than or equal to n.\n    # The largest power of 2 that is less than or equal to n is the largest power of 2 that\n    # is less than or equal to n.\n    # The largest power of 2 that is less than or equal to n is the largest power of 2 that\n    # is less than or equal to n."
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return highest_power_of_2_helper(n, 2)\n\ndef highest_power_of_2_helper(n, target):\n    if n == 1:\n        return 1\n    if n < target:\n        return highest_power_of_2_helper(n * 2, target)\n    else:\n        return n\n\nprint highest_power_of_2(1024)\n#>>> 1024\nprint highest_power_of_2(100)\n#>>> 1024\nprint highest_power_of_2(10)\n#>>> 1024"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 1\n    power = 1\n    while n > 0:\n        if n & 1 == 1:\n            return power\n        n >>= 1\n        power <<= 1\n    return power\n\nif __name__ == '__main__':\n    print(highest_power_of_2(5))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "from math import log2\n\n\ndef highest_power_of_two(n):\n    \"\"\"\n    >>> highest_power_of_two(0)\n    0\n    >>> highest_power_of_two(1)\n    1\n    >>> highest_power_of_two(2)\n    2\n    >>> highest_power_of_two(3)\n    4\n    >>> highest_power_of_two(4)\n    4\n    >>> highest_power_of_two(5)\n    8\n    >>> highest_power_of_two(6)\n    8\n    >>> highest_power_of_two(7)\n    8\n    >>> highest_power_of_two(8)\n    8\n    >>> highest_power_of_two(9)\n    16\n    >>> highest_power_of_two(10)\n    16\n    >>> highest_power_of_two(11)\n    16\n    >>> highest_power_of_two(12)\n    16\n    >>> highest_power_of_two(13)\n    16\n    >>> highest_power_of_two(14)\n    16\n    >>> highest_power_of_two(15)\n    16\n    >>> highest_power_of_two(16)\n    16\n    >>> highest_power_of_two(17)\n    32\n    >>> highest_power_of_two(18)\n    32\n    >>> highest_power_of_two(19)\n    32\n    >>> highest_power_of_two(20)\n    32\n    >>> highest_power_of_two(21)\n    32\n    >>> highest_power_of_two(22)\n    32\n    >>> highest_power_of_two(23)\n    32\n    >>> highest_power_of_two(24)\n    32\n    >>> highest_power_of_two(25)\n    32\n    >>> highest_power_of_two(26)\n    32\n    >>> highest_power_of_two(27)\n    32\n    >>> highest_power_of_two(28)\n    64\n    >>> highest_power_of_two(29)\n    64\n    >>> highest_power_of_two"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def find_largest_power_of_2_less_than_or_equal_to_n(n):\n    \"\"\"\n    Input: n = 10\n    Output: 4\n    \"\"\"\n    return 2 ** (int(n ** 0.5) + 1)\n\nprint(find_largest_power_of_2_less_than_or_equal_to_n(10))\nprint(find_largest_power_of_2_less_than_or_equal_to_n(100))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def find_power_of_2(n):\n    \"\"\"\n    >>> find_power_of_2(3)\n    2\n    >>> find_power_of_2(5)\n    4\n    >>> find_power_of_2(11)\n    8\n    >>> find_power_of_2(13)\n    16\n    >>> find_power_of_2(15)\n    16\n    \"\"\"\n    if n <= 1:\n        return 1\n    return 2 ** (n - 1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "import math\n\ndef highest_power_of_two(n):\n    return math.log(n, 2)\n\nif __name__ == '__main__':\n    print(highest_power_of_two(10))\n    print(highest_power_of_two(100))\n    print(highest_power_of_two(1024))\n    print(highest_power_of_two(10000))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "import sys\nsys.path.append('..')\n\nfrom math import ceil, log2, log10\n\ndef highest_power_of_2_less_than_or_equal_to(n):\n    \"\"\"\n    Highest power of 2 that is less than or equal to n.\n    :param n: the number to find the highest power of 2 less than or equal to.\n    :return: the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    assert n >= 0\n\n    p = 0\n    while n > 1:\n        p += 1\n        n >>= 1\n\n    return p\n\nif __name__ == '__main__':\n    n = int(sys.argv[1]) if len(sys.argv) > 1 else 1000000\n\n    print(highest_power_of_2_less_than_or_equal_to(n))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return highest_power_of_2_helper(n)\n\n\ndef highest_power_of_2_helper(n):\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return highest_power_of_2_helper(n / 2) * 2\n    else:\n        return highest_power_of_2_helper(n - 1) * 2 + 1\n\n\nif __name__ == \"__main__\":\n    assert highest_power_of_2(100) == 32\n    assert highest_power_of_2(4) == 2\n    assert highest_power_of_2(1) == 1"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    Highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while True:\n        y = n\n        while y:\n            y >>= 1\n            n >>= 1\n        if n == 0:\n            return y\n\nif __name__ == '__main__':\n    print(highest_power_of_2(1))\n    print(highest_power_of_2(2))\n    print(highest_power_of_2(3))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(5))\n    print(highest_power_of_2(6))\n    print(highest_power_of_2(7))\n    print(highest_power_of_2(8))\n    print(highest_power_of_2(9))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(11))\n    print(highest_power_of_2(12))\n    print(highest_power_of_2(13))\n    print(highest_power_of_2(14))\n    print(highest_power_of_2(15))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(17))\n    print(highest_power_of_2(18))\n    print(highest_power_of_2(19))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(21))\n    print(highest_power_of_2(22))\n    print(highest_power_of_2(23))\n    print(highest_power_of_2(24))\n    print(highest_power_of_2(25))\n    print(highest_power_of_2(26))\n    print(highest_power_of_2(27))\n    print(highest_power_of_2(28))\n    print(highest_power_of_2(29))\n    print(highest_power_of_2(30))\n    print(highest_power_"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def highest_pow2_less_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    assert n > 0\n    # base 2 log of n\n    log_n = int(math.log(n, 2))\n    # calculate the log2 of n and return the highest power of 2 less than or equal to n\n    return 2 ** log_n\n\nif __name__ == '__main__':\n    print highest_pow2_less_than_or_equal_to_n(20000000)"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :param n: the number to find the highest power of 2 that is less than or equal to n\n    :return: the highest power of 2 that is less than or equal to n\n    \"\"\"\n    i = 0\n    while True:\n        i += 1\n        if n == i:\n            return i\n        if i < 2:\n            return 2\n        if n % i == 0:\n            return i\n        if i % 2 == 0:\n            return i\n\nif __name__ == \"__main__\":\n    print highest_power_of_2(3)\n    print highest_power_of_2(15)\n    print highest_power_of_2(31)\n    print highest_power_of_2(99)"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def find_largest_power_of_2_less_than_or_equal_to_n(n):\n    if n <= 0:\n        raise Exception(\"Number must be greater than 0\")\n    \n    if n == 1:\n        return 1\n\n    # if n is odd, the next highest power of 2 is n/2 + 1\n    if n % 2 == 1:\n        return n / 2 + 1\n\n    # else, we have the next highest power of 2 is 2 ** (n/2)\n    return 2 ** (n / 2)\n\n\nprint(find_largest_power_of_2_less_than_or_equal_to_n(3))\nprint(find_largest_power_of_2_less_than_or_equal_to_n(2**16))\nprint(find_largest_power_of_2_less_than_or_equal_to_n(2**32))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def find_largest_pow2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    pow2 = 1\n    while pow2 < n:\n        pow2 = pow2 << 1\n    return pow2\n\nif __name__ == '__main__':\n    n = 9\n    print find_largest_pow2(n)"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n\t\"\"\"\n\tArguments:\n\tn -- an integer\n\t\n\tReturns:\n\tthe highest power of 2 that is less than or equal to n.\n\t\"\"\"\n\t# code from https://www.tutorialspoint.com/python/python_math.htm\n\treturn 2**(n/2)\n\n#print highest_power_of_2(100)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_highest_power_of_2(n):\n    # Write your code here\n    i = 1\n    while i < n:\n        i *= 2\n    return i\n\nif __name__ == \"__main__\":\n    print(find_highest_power_of_2(10))\n    print(find_highest_power_of_2(20))\n    print(find_highest_power_of_2(100))\n    print(find_highest_power_of_2(1000))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def highest_power_of_two(n):\n    # base case\n    if n <= 0:\n        return 1\n    \n    # this is the first case\n    if n == 1:\n        return 2\n    \n    # this is the second case\n    if n == 2:\n        return 4\n    \n    # this is the third case\n    if n == 3:\n        return 8\n    \n    # this is the fourth case\n    if n == 4:\n        return 16\n    \n    # this is the fifth case\n    if n == 5:\n        return 32\n    \n    # this is the sixth case\n    if n == 6:\n        return 64\n    \n    # this is the seventh case\n    if n == 7:\n        return 128\n    \n    # this is the eighth case\n    if n == 8:\n        return 256\n    \n    # this is the ninth case\n    if n == 9:\n        return 512\n    \n    # this is the tenth case\n    if n == 10:\n        return 1024\n    \n    # this is the eleventh case\n    if n == 11:\n        return 2048\n    \n    # this is the twelfth case\n    if n == 12:\n        return 4096\n    \n    # this is the thirteenth case\n    if n == 13:\n        return 8192\n    \n    # this is the fourteenth case\n    if n == 14:\n        return 16384\n    \n    # this is the fifteenth case\n    if n == 15:\n        return 32768\n    \n    # this is the sixteenth case\n    if n == 16:\n        return 65536\n    \n    # this is the seventeenth case\n    if n == 17:\n        return 131072\n    \n    # this is the eighteenth case\n    if n == 18:\n        return 262144\n    \n    # this is the nineteenth case\n    if n == 19:\n        return 524288\n    \n    # this is the twentieth case\n    if n == 20:\n        return 1048576\n    \n    # this is the twenty-first case\n    if n == 21:\n        return 2097152\n    \n    # this is the twenty-second case\n    if n == 22:"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def highest_power_of_two_less_than_n(n):\n    \"\"\"\n    Highest power of 2 less than n\n    \"\"\"\n\n    return 2**(n/2)\n\ndef highest_power_of_two_less_than_n_2(n):\n    \"\"\"\n    Highest power of 2 less than n\n    \"\"\"\n\n    return highest_power_of_two_less_than_n(n-1)\n\nif __name__ == '__main__':\n    assert highest_power_of_two_less_than_n(2) == 2\n    assert highest_power_of_two_less_than_n(5) == 4\n    assert highest_power_of_two_less_than_n(7) == 8\n    assert highest_power_of_two_less_than_n(9) == 16\n    assert highest_power_of_two_less_than_n_2(2) == 2\n    assert highest_power_of_two_less_than_n_2(5) == 4\n    assert highest_power_of_two_less_than_n_2(7) == 8\n    assert highest_power_of_two_less_than_n_2(9) == 16"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def find_max_power_of_2(n):\n    return int(2**(math.floor(math.log(n, 2)) + 1))\n\n\ndef main():\n    assert(find_max_power_of_2(1) == 1)\n    assert(find_max_power_of_2(2) == 2)\n    assert(find_max_power_of_2(3) == 4)\n    assert(find_max_power_of_2(4) == 4)\n    assert(find_max_power_of_2(5) == 4)\n    assert(find_max_power_of_2(6) == 8)\n    assert(find_max_power_of_2(7) == 8)\n    assert(find_max_power_of_2(8) == 8)\n    assert(find_max_power_of_2(9) == 8)\n    assert(find_max_power_of_2(10) == 8)\n    assert(find_max_power_of_2(11) == 8)\n    assert(find_max_power_of_2(12) == 8)\n    assert(find_max_power_of_2(13) == 8)\n    assert(find_max_power_of_2(14) == 8)\n    assert(find_max_power_of_2(15) == 8)\n    assert(find_max_power_of_2(16) == 8)\n    assert(find_max_power_of_2(17) == 8)\n    assert(find_max_power_of_2(18) == 8)\n    assert(find_max_power_of_2(19) == 8)\n    assert(find_max_power_of_2(20) == 8)\n    assert(find_max_power_of_2(21) == 8)\n    assert(find_max_power_of_2(22) == 8)\n    assert(find_max_power_of_2(23) == 8)\n    assert(find_max_power_of_2(24) == 8)\n    assert(find_max_power_of_2("
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    >>> highest_power_of_two(5)\n    4\n    >>> highest_power_of_two(10)\n    8\n    >>> highest_power_of_two(16)\n    16\n    >>> highest_power_of_two(128)\n    128\n    >>> highest_power_of_two(1024)\n    1024\n    >>> highest_power_of_two(0)\n    0\n    >>> highest_power_of_two(1)\n    1\n    >>> highest_power_of_two(2)\n    2\n    >>> highest_power_of_two(3)\n    4\n    >>> highest_power_of_two(4)\n    4\n    >>> highest_power_of_two(5)\n    8\n    >>> highest_power_of_two(6)\n    8\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 16\n    else:\n        while n > 1:\n            n >>= 1\n            if n == 1:\n                return 1\n            elif n == 2:\n                return 2\n            elif n == 4:\n                return 4\n            elif n == 8:\n                return 8\n            elif n == 16:\n                return 16\n            elif n == 32:\n                return 32\n            elif n == 64:\n                return 64\n            elif n == 128:\n                return 128\n            elif n == 256:\n                return 256\n            elif n == 512:\n                return 512\n            elif n == 1024:\n                return 1024\n            elif n == 2048:\n                return 2048\n            elif n == 4096:\n                return 4096\n            elif n == 8192:\n                return 8192\n            elif n == 16384:\n                return 16384\n            elif n == 32768:\n                return 32768\n            elif n"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def highest_pow_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    pow_2 = 1\n    while pow_2 < n:\n        pow_2 = pow_2 * 2\n    return pow_2\n\n\nif __name__ == '__main__':\n    print(highest_pow_2(1))\n    print(highest_pow_2(4))\n    print(highest_pow_2(8))\n    print(highest_pow_2(16))\n    print(highest_pow_2(1024))\n    print(highest_pow_2(2048))\n    print(highest_pow_2(4096))\n    print(highest_pow_2(16777216))\n    print(highest_pow_2(134217728))\n    print(highest_pow_2(131072))\n    print(highest_pow_2(13))\n    print(highest_pow_2(12))\n    print(highest_pow_2(11))\n    print(highest_pow_2(10))\n    print(highest_pow_2(9))\n    print(highest_pow_2(8))\n    print(highest_pow_2(7))\n    print(highest_pow_2(6))\n    print(highest_pow_2(5))\n    print(highest_pow_2(4))\n    print(highest_pow_2(3))\n    print(highest_pow_2(2))\n    print(highest_pow_2(1))\n    print(highest_pow_2(0))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return highest_power_of_2(n - 1) << 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "import math\n\n\ndef find_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(math.log(n, 2))\n\n\nif __name__ == '__main__':\n    print(find_power_of_2(0))\n    print(find_power_of_2(1))\n    print(find_power_of_2(2))\n    print(find_power_of_2(3))\n    print(find_power_of_2(4))\n    print(find_power_of_2(5))\n    print(find_power_of_2(6))\n    print(find_power_of_2(7))\n    print(find_power_of_2(8))\n    print(find_power_of_2(9))\n    print(find_power_of_2(10))\n    print(find_power_of_2(11))\n    print(find_power_of_2(12))\n    print(find_power_of_2(13))\n    print(find_power_of_2(14))\n    print(find_power_of_2(15))\n    print(find_power_of_2(16))\n    print(find_power_of_2(17))\n    print(find_power_of_2(18))\n    print(find_power_of_2(19))\n    print(find_power_of_2(20))\n    print(find_power_of_2(21))\n    print(find_power_of_2(22))\n    print(find_power_of_2(23))\n    print(find_power_of_2(24))\n    print(find_power_of_2(25))\n    print(find_power_of_2(26))\n    print(find_power_of_2(27))\n    print(find_power_of_2(28))\n    print(find_power_of_2(29))\n    print(find_power_of_2(30))\n    print(find_power_of_2(31))\n    print"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        raise ValueError('n must be non-negative')\n\n    # Convert to binary\n    binary = bin(n)\n\n    # Convert to string\n    binary = ''.join(binary[2:])\n\n    # Find first 1\n    first_one = binary.find('1')\n\n    # Find length of binary string\n    length = len(binary)\n\n    # Convert to decimal\n    decimal = int(binary[first_one:], 2)\n\n    # Convert to integer\n    integer = int(binary[:first_one])\n\n    # Convert to power of 2\n    power_of_2 = integer * 2\n\n    # Check if power of 2 is less than or equal to n\n    if power_of_2 >= n:\n        return power_of_2\n\n    # Check if power of 2 is greater than or equal to n\n    if power_of_2 < n:\n        return highest_power_of_2(n)\n\n    # If it is not, then it is a special case\n    if first_one == length - 1:\n        return highest_power_of_2(n)\n\n    # Convert to binary\n    binary = bin(n)\n\n    # Convert to string\n    binary = ''.join(binary[2:])\n\n    # Find first 1\n    first_one = binary.find('1')\n\n    # Find length of binary string\n    length = len(binary)\n\n    # Convert to decimal\n    decimal = int(binary[first_one:], 2)\n\n    # Convert to integer\n    integer = int(binary[:first_one])\n\n    # Convert to power of 2\n    power_of_2 = integer * 2\n\n    # Check if power of 2 is less than or equal to n\n    if power_of_2 >= n:\n        return power_of_2\n\n    # Check if power of 2 is greater than or equal to n\n    if power_of_2 < n:\n        return highest_power_of_2(n)\n\n    # If it is not, then it is a special case\n    if first_one == length"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Your function will take a single integer as input.\n\n# For example, if n = 6, the output should be:\n# 1, 2, 4, 8, 16, 32, 64, 128,...\n\n# Hint: The output is not necessarily sorted.\n\ndef find_max_power_of_2(n):\n    max_power_of_2 = 1\n    while max_power_of_2 <= n:\n        max_power_of_2 = 2 ** (max_power_of_2)\n    return max_power_of_2\n\nif __name__ == \"__main__\":\n    print(find_max_power_of_2(2))\n    print(find_max_power_of_2(4))\n    print(find_max_power_of_2(8))\n    print(find_max_power_of_2(16))\n    print(find_max_power_of_2(32))\n    print(find_max_power_of_2(64))\n    print(find_max_power_of_2(128))\n    print(find_max_power_of_2(256))\n    print(find_max_power_of_2(512))\n    print(find_max_power_of_2(1024))\n    print(find_max_power_of_2(2048))\n    print(find_max_power_of_2(4096))\n    print(find_max_power_of_2(8192))\n    print(find_max_power_of_2(16384))\n    print(find_max_power_of_2(32768))\n    print(find_max_power_of_2(65536))\n    print(find_max_power_of_2(131072))\n    print(find_max_power_of_2(262144))\n    print(find_max_power_of_2(524288))\n    print(find_max_power_of_2(1048576))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "import math\n\ndef highest_power_of_two(n):\n    \"\"\"\n    Highest power of 2 that is less than or equal to n.\n    :param n:\n    :return:\n    \"\"\"\n    return 2 ** (int(math.log(n, 2)) + 1)\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_two(10000))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n):\n    # your code goes here\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n / i\n            i += 1\n        else:\n            i += 1\n    return n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    }
  ]
}