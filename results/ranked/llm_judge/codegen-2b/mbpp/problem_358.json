{
  "timestamp": "2025-09-14T20:01:39.142012",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 358,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for a cuboid\nclass Cuboid:\n    def __init__(self, l, w, h, d):\n        self.l = l\n        self.w = w\n        self.h = h\n        self.d = d\n\n    def __str__(self):\n        return str((self.l, self.w, self.h, self.d))\n\nclass Solution:\n    def surface(self, cuboid):\n        \"\"\"\n        :type cuboid: Cuboid\n        :rtype: int\n        \"\"\"\n        l, w, h, d = cuboid.l, cuboid.w, cuboid.h, cuboid.d\n        surface = (l * w * h) + (w * h * d) + (h * d * l)\n        return surface"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\ndef area_cuboid(height, width):\n    return height * width\n\ndef main():\n    height, width = map(int, input().split())\n    print(area_cuboid(height, width))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n# Definition for a point\nclass Point(object):\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __repr__(self):\n        return str(self.x) + \" \" + str(self.y) + \" \" + str(self.z)\n\nclass Solution(object):\n    def __init__(self):\n        self.max_area = 0\n\n    def cubic(self, points):\n        \"\"\"\n        :param points: points in a list of points\n        :return: the area of the cuboid\n        \"\"\"\n        self.max_area = 0\n        for p in points:\n            self.max_area = max(self.max_area, self.cubic_area(p))\n        return self.max_area\n\n    def cubic_area(self, p):\n        \"\"\"\n        :param p: a point\n        :return: the area of the cuboid\n        \"\"\"\n        return (p.x * p.y) + (p.x * p.z) + (p.y * p.z)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    p1 = Point(1,1,1)\n    p2 = Point(2,2,2)\n    p3 = Point(3,3,3)\n    p4 = Point(4,4,4)\n    p5 = Point(5,5,5)\n    p6 = Point(6,6,6)\n    p7 = Point(7,7,7)\n    p8 = Point(8,8,8)\n    p9 = Point(9,9,9)\n\n    print s.cubic([p1, p2, p3, p4, p5, p6, p7, p8, p9])"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def area(x, y, z):\n    \"\"\"\n    Returns the lateral surface area of a cuboid\n    \"\"\"\n    return (x * y)\n\ndef area_cuboid(x, y, z):\n    \"\"\"\n    Returns the lateral surface area of a cuboid\n    \"\"\"\n    return (x * y)\n\ndef area_cuboid_rec(x, y, z):\n    \"\"\"\n    Returns the lateral surface area of a cuboid\n    \"\"\"\n    if x == 0 and y == 0 and z == 0:\n        return 0\n    elif x == 0 and y == 0 and z > 0:\n        return (x * z)\n    elif x == 0 and y > 0 and z == 0:\n        return (y * z)\n    elif x == 0 and y > 0 and z > 0:\n        return (x * y * z)\n    elif x > 0 and y == 0 and z == 0:\n        return (x * z)\n    elif x > 0 and y == 0 and z > 0:\n        return (x * y * z)\n    elif x > 0 and y > 0 and z == 0:\n        return (x * y)\n    elif x > 0 and y > 0 and z > 0:\n        return (x * y * z)\n    else:\n        print(\"Error\")\n\ndef test():\n    assert area(2, 3, 4) == 24, \"Test 1\"\n    assert area_cuboid(2, 3, 4) == 24, \"Test 2\"\n    assert area_cuboid_rec(2, 3, 4) == 24, \"Test 3\"\n\ndef main():\n    test()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/lateral-surface-area/problem\n\n# The area of a cuboid is the sum of the areas of all its sides\ndef area(side):\n    return side[0] * side[1]\n\n# Returns the total area of cuboid\ndef area_cuboid(side):\n    return side[0] * side[1] + side[0] * side[2] + side[1] * side[2]\n\n# Returns the total area of cuboid\ndef area_cuboid(side):\n    return side[0] * side[1] + side[0] * side[2] + side[1] * side[2]\n\n# Returns the total area of cuboid\ndef area_cuboid(side):\n    return side[0] * side[1] + side[0] * side[2] + side[1] * side[2]\n\n# Returns the total area of cuboid\ndef area_cuboid(side):\n    return side[0] * side[1] + side[0] * side[2] + side[1] * side[2]\n\n# Returns the total area of cuboid\ndef area_cuboid(side):\n    return side[0] * side[1] + side[0] * side[2] + side[1] * side[2]\n\n# Returns the total area of cuboid\ndef area_cuboid(side):\n    return side[0] * side[1] + side[0] * side[2] + side[1] * side[2]\n\n# Returns the total area of cuboid\ndef area_cuboid(side):\n    return side[0] * side[1] + side[0] * side[2] + side[1] * side[2]\n\n# Returns the total area of cuboid\ndef area_cuboid(side):\n    return side[0] * side[1] + side[0] * side[2] + side[1] * side[2]\n\n# Returns the total area of cuboid\ndef area_cuboid(side):\n    return side[0] * side[1] + side[0"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def lateral_surface_area(dimensions):\n    \"\"\"\n    dimensions = (width, height, length)\n    \"\"\"\n    area = dimensions[0] * dimensions[1] * dimensions[2]\n    return area\n\ndef main():\n    dimensions = (3, 3, 3)\n    print lateral_surface_area(dimensions)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# The following code is written by Davide Albanese\n# <davide.albanese@gmail.com>\n#\n# Please send bug reports and comments to the above address.\n\n\ndef cuboid_surface_area(height, width, depth):\n    \"\"\"\n    Calculate the surface area of a cuboid\n    \"\"\"\n\n    return height * width * depth\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Test 1\n    print cuboid_surface_area(1, 2, 3)\n\n    # Test 2\n    print cuboid_surface_area(1, 2, 3)\n\n    # Test 3\n    print cuboid_surface_area(1, 2, 3)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def area(length, width, height):\n    \"\"\"\n    >>> area(3, 2, 1)\n    12.0\n    >>> area(2, 3, 4)\n    12.0\n    \"\"\"\n    return length * width * height\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "#!/bin/python3\n\ndef cuboid_area(length, width, height):\n    return length * width * height\n\n#Test\nprint(cuboid_area(3, 4, 5))\n\n#Check\nprint(cuboid_area(3, 4, 3))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\n\ndef area(x, y, z):\n    return x * y * z\n\ndef area_cuboid(a, b, c):\n    return a * b * c\n\ndef area_cube(a, b, c):\n    return a * b * c\n\ndef area_rectangle(a, b):\n    return a * b\n\ndef area_sphere(a, b):\n    return math.pi * a * b / 3.0\n\nif __name__ == \"__main__\":\n    #print area_cube(1, 2, 3)\n    print area_rectangle(1, 2)\n    print area_sphere(1, 2)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import math\n\ndef lateral_surface_area(side_length):\n    \"\"\"\n    >>> lateral_surface_area(3)\n    12\n    >>> lateral_surface_area(4)\n    16\n    >>> lateral_surface_area(5)\n    24\n    >>> lateral_surface_area(6)\n    32\n    >>> lateral_surface_area(7)\n    40\n    >>> lateral_surface_area(8)\n    48\n    >>> lateral_surface_area(9)\n    56\n    >>> lateral_surface_area(10)\n    64\n    \"\"\"\n    return side_length * side_length * math.pi\n\ndef main():\n    side_length = input('Side length: ')\n    print(lateral_surface_area(int(side_length)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://www.youtube.com/watch?v=uqX-Q5xE5_s\n\ndef surfaceArea(length, width, height):\n    \"\"\"\n    >>> surfaceArea(2, 2, 2)\n    12\n    >>> surfaceArea(3, 4, 5)\n    200\n    >>> surfaceArea(1, 2, 3)\n    12\n    \"\"\"\n    return length * width * height\n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "__author__ = 'Libaozuo'\n\n\ndef surfaceArea(length, width, height):\n    \"\"\"\n    :type length: int\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    if length == 0 or width == 0 or height == 0:\n        return 0\n    return length * width * height / 2\n\n\ndef test_surfaceArea():\n    assert surfaceArea(1, 2, 3) == 6\n    assert surfaceArea(2, 3, 4) == 12\n    assert surfaceArea(3, 4, 5) == 20\n    assert surfaceArea(4, 5, 6) == 36\n    assert surfaceArea(5, 6, 7) == 50\n    assert surfaceArea(6, 7, 8) == 72\n\n\nif __name__ == '__main__':\n    test_surfaceArea()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def LateralSurfaceArea(l, w, h):\n    return l*w*h\n\ndef main():\n    l, w, h = map(int, input().split())\n    print(LateralSurfaceArea(l, w, h))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import math\n\ndef area(height, width, length):\n    \"\"\"\n    Calculate the area of a cuboid\n    \"\"\"\n    return height * width * length\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    height = int(input())\n    width = int(input())\n    length = int(input())\n    print(area(height, width, length))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef area(x, y, z):\n    return sqrt((x*y) + (y*z) + (z*x))\n\ndef main():\n    a, b, c = map(int, input().split())\n    print(area(a, b, c))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    length: length of cuboid\n    width: width of cuboid\n    height: height of cuboid\n    return: the lateral surface area\n    \"\"\"\n    return length * width * height\n\n\ndef test_lateral_surface_area():\n    assert lateral_surface_area(1, 2, 3) == 6\n\n\nif __name__ == \"__main__\":\n    test_lateral_surface_area()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import math\n\ndef cuboid_surface_area(height, width, length):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n\n    >>> cuboid_surface_area(2, 3, 4)\n    24\n    >>> cuboid_surface_area(4, 2, 3)\n    24\n    >>> cuboid_surface_area(4, 3, 2)\n    24\n    >>> cuboid_surface_area(3, 4, 2)\n    24\n    >>> cuboid_surface_area(3, 2, 4)\n    24\n    >>> cuboid_surface_area(2, 4, 3)\n    24\n    >>> cuboid_surface_area(2, 3, 4)\n    24\n    >>> cuboid_surface_area(4, 3, 2)\n    24\n    >>> cuboid_surface_area(4, 2, 3)\n    24\n    >>> cuboid_surface_area(3, 4, 2)\n    24\n    >>> cuboid_surface_area(3, 2, 4)\n    24\n    >>> cuboid_surface_area(2, 4, 3)\n    24\n    >>> cuboid_surface_area(2, 3, 4)\n    24\n    \"\"\"\n\n    # TODO: this can be improved\n    return (height * width) + (width * length) + (length * height)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef volume(length, width, height):\n    return length * width * height\n\ndef surface(length, width, height):\n    return length * width * height\n\ndef area(length, width, height):\n    return length * width * height\n\ndef lateral_surface(length, width, height):\n    return surface(length, width, height)\n\ndef volume_lateral(length, width, height):\n    return volume(length, width, height)\n\ndef area_lateral(length, width, height):\n    return area(length, width, height)\n\ndef main():\n    length = int(input())\n    width = int(input())\n    height = int(input())\n    volume = volume_lateral(length, width, height)\n    surface = surface_lateral(length, width, height)\n    area = area_lateral(length, width, height)\n    print(volume)\n    print(surface)\n    print(area)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from __future__ import division\n\n__author__ ='matthew.yan1993@gmail.com'\n\n\ndef cuboid_area(length, width, height):\n    \"\"\"\n    Calculate the area of a cuboid\n    :param length: length of cuboid\n    :param width: width of cuboid\n    :param height: height of cuboid\n    :return: area of cuboid\n    \"\"\"\n    return length * width * height\n\n\nif __name__ == '__main__':\n    print cuboid_area(1, 2, 3)\n    print cuboid_area(3, 4, 5)\n    print cuboid_area(6, 7, 8)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def area(x, y, z):\n    return x * y * z\n\ndef area_cuboid(x, y, z):\n    return x * y * z\n\nif __name__ == '__main__':\n    x = int(input('Please enter the length of side 1:'))\n    y = int(input('Please enter the length of side 2:'))\n    z = int(input('Please enter the length of side 3:'))\n    print('Area of cuboid is:', area_cuboid(x, y, z))\n    print('Area of cuboid is:', area(x, y, z))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "import math\n\ndef lateral_surface_area(height, width, length):\n    return (height * width * length) / 3\n\ndef main():\n    print(lateral_surface_area(10, 10, 10))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# Write your code here\ndef area(x,y,z):\n    return (x*y*z)\n\n# Test code\nprint(area(1,1,1))\nprint(area(2,2,2))\nprint(area(3,3,3))\nprint(area(4,4,4))\nprint(area(5,5,5))\nprint(area(6,6,6))\nprint(area(7,7,7))\nprint(area(8,8,8))\nprint(area(9,9,9))\nprint(area(10,10,10))\nprint(area(11,11,11))\nprint(area(12,12,12))\nprint(area(13,13,13))\nprint(area(14,14,14))\nprint(area(15,15,15))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "import math\n\n\ndef cuboid_surface_area(dimensions):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    :param dimensions: tuple of dimension (x,y,z)\n    :return: the lateral surface area of a cuboid\n    \"\"\"\n    return dimensions[0] * dimensions[1] * dimensions[2]\n\n\ndef main():\n    \"\"\"\n    Test the function with some test cases\n    \"\"\"\n    test_cases = [\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6),\n        (10, 5, 6"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "import math\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    :param length: The length of the cuboid\n    :param width: The width of the cuboid\n    :param height: The height of the cuboid\n    :return: The lateral surface area of the cuboid\n    \"\"\"\n    return length * width * height\n\nif __name__ == \"__main__\":\n    print lateral_surface_area(10, 10, 10)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# imports\nfrom math import *\n\n# definition\ndef surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    \"\"\"\n    return length * width * height\n\n# tests\nassert surface_area(3, 4, 5) == 9.0, \"Test 1 failed\"\nassert surface_area(1, 2, 3) == 6.0, \"Test 2 failed\"\nassert surface_area(2, 3, 4) == 12.0, \"Test 3 failed\"\nassert surface_area(1, 2, 3) == 6.0, \"Test 4 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 5 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 6 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 7 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 8 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 9 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 10 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 11 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 12 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 13 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 14 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 15 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 16 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 17 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 18 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 19 failed\"\nassert surface_area(5, 4, 3) == 24.0, \"Test 20 failed\"\nassert surface_area(5, 4, 3) == 24.0,"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "import math\n\ndef area(length, width, height):\n    return length * width * height\n\ndef test():\n    assert area(5, 5, 5) == 40\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# A helper function to find the area of a cuboid\ndef get_area(length, width, height):\n    return length * width * height / 2\n\n# A helper function to find the volume of a cuboid\ndef get_volume(length, width, height):\n    return length * width * height\n\n# A helper function to find the perimeter of a cuboid\ndef get_perimeter(length, width, height):\n    return 2 * (length + width + height)\n\n# A helper function to find the volume of a cuboid\ndef get_volume(length, width, height):\n    return length * width * height\n\n# A helper function to find the area of a cuboid\ndef get_area(length, width, height):\n    return length * width * height / 2\n\n# A helper function to find the perimeter of a cuboid\ndef get_perimeter(length, width, height):\n    return 2 * (length + width + height)\n\n# A helper function to find the volume of a cuboid\ndef get_volume(length, width, height):\n    return length * width * height\n\n# A helper function to find the area of a cuboid\ndef get_area(length, width, height):\n    return length * width * height / 2\n\n# A helper function to find the perimeter of a cuboid\ndef get_perimeter(length, width, height):\n    return 2 * (length + width + height)\n\n# A helper function to find the volume of a cuboid\ndef get_volume(length, width, height):\n    return length * width * height\n\n# A helper function to find the area of a cuboid\ndef get_area(length, width, height):\n    return length * width * height / 2\n\n# A helper function to find the perimeter of a cuboid\ndef get_perimeter(length, width, height):\n    return 2 * (length + width + height)\n\n# A helper function to find the volume of a cuboid\ndef get_volume(length, width, height):\n    return length * width * height\n\n# A helper function to find the area of a cuboid\ndef get_area(length, width, height):\n    return length * width * height / 2\n\n# A helper function to"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "from math import sqrt, pi\n\ndef cuboid_surface_area(height, width, depth):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid with height, width and depth.\n    \"\"\"\n    return height * width * depth\n\ndef test_cuboid_surface_area():\n    \"\"\"\n    Unit tests for the function.\n    \"\"\"\n    assert cuboid_surface_area(2, 3, 4) == 24\n    assert cuboid_surface_area(4, 3, 2) == 48\n    assert cuboid_surface_area(4, 2, 3) == 48\n\nif __name__ == \"__main__\":\n    test_cuboid_surface_area()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "import math\n\ndef area(x,y,z):\n    return (math.pi * (x**2 + y**2 + z**2))\n\ndef surface(x,y,z):\n    return (x*y*z)\n\ndef main():\n    print(surface(5,3,5))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "import math\n\ndef surface_area(x, y, z):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid with x, y, z dimensions\n\n    x: The x dimension of the cuboid\n    y: The y dimension of the cuboid\n    z: The z dimension of the cuboid\n\n    Returns: The lateral surface area of the cuboid\n    \"\"\"\n    return (x * y) * z\n\nif __name__ == '__main__':\n    # Test 1\n    print(\"Test 1:\")\n    print(surface_area(1, 2, 3))\n    print(surface_area(4, 5, 6))\n\n    # Test 2\n    print(\"Test 2:\")\n    print(surface_area(1, 2, 3) - surface_area(2, 3, 4) - surface_area(3, 4, 5) - surface_area(4, 5, 6))\n\n    # Test 3\n    print(\"Test 3:\")\n    print(surface_area(1, 2, 3) - surface_area(2, 3, 4) - surface_area(3, 4, 5) - surface_area(4, 5, 6) - surface_area(6, 7, 8))"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "def area(x, y, z):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    \"\"\"\n    return x * y\n\nprint area(1, 2, 3)\nprint area(3, 4, 5)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n#  Copyright (C) 2010-2011  Leif Roschier\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport sys\nimport math\nimport numpy\n\ndef cuboid_area(x1, y1, z1, x2, y2, z2):\n    \"\"\"\n    Calculate the area of a cuboid.\n    \"\"\"\n    return (x2-x1)*(y2-y1)*(z2-z1)\n\n\ndef main():\n    \"\"\"\n    Calculate the area of a cuboid.\n    \"\"\"\n    x1, y1, z1 = [float(i) for i in sys.argv[1:4]]\n    x2, y2, z2 = [float(i) for i in sys.argv[4:7]]\n    print(cuboid_area(x1, y1, z1, x2, y2, z2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef cuboid_lateral_surface_area(dimensions):\n    \"\"\"\n    dimensions = (width, height, depth)\n    \"\"\"\n    area = dimensions[0] * dimensions[1]\n    for i in range(2, dimensions[2] + 1):\n        area *= (dimensions[0] - i)\n    return area\n\nif __name__ == '__main__':\n    dimensions = (10, 10, 10)\n    print(cuboid_lateral_surface_area(dimensions))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "import math\n\ndef surface(x, y, z):\n    \"\"\"\n    Calculate surface area of cuboid\n    \"\"\"\n    return x * y * z\n\ndef main():\n    x = int(input(\"Enter the length of the side\"))\n    y = int(input(\"Enter the length of the side\"))\n    z = int(input(\"Enter the length of the side\"))\n\n    print(\"The surface area of a cuboid with side length {0} is {1}\".format(x, surface(x, y, z)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_area(height, width, depth):\n    return (height * width * depth) / 2\n\ndef main():\n    height = int(input(\"Enter height: \"))\n    width = int(input(\"Enter width: \"))\n    depth = int(input(\"Enter depth: \"))\n    print(\"Lateral surface area of a cuboid is:\", cuboid_area(height, width, depth))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "# Definition for a cuboid\nclass Cuboid:\n    def __init__(self, x, y, z, width, height, length):\n        self.x = x\n        self.y = y\n        self.z = z\n        self.width = width\n        self.height = height\n        self.length = length\n    def __repr__(self):\n        return self.x + \" \" + self.y + \" \" + self.z + \" \" + self.width + \" \" + self.height + \" \" + self.length\n    def __str__(self):\n        return self.x + \" \" + self.y + \" \" + self.z + \" \" + self.width + \" \" + self.height + \" \" + self.length\n\n# Your Cuboid object will be instantiated and called as such:\n# obj = Cuboid(x,y,z,width,height,length)\n# param_1 = obj.x\n# param_2 = obj.y\n# param_3 = obj.z\n# param_4 = obj.width\n# param_5 = obj.height\n# param_6 = obj.length"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "# Importing modules\nimport math\n\n# Function definitions\ndef cuboid_surface_area(side1, side2, side3):\n    \"\"\"\n    Function to calculate the surface area of a cuboid\n    side1 = length of the side 1\n    side2 = length of the side 2\n    side3 = length of the side 3\n    \"\"\"\n    # Calculating the surface area\n    surface_area = side1 * side2 * side3\n    return surface_area\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Setting the dimensions\n    side1 = int(input(\"Enter the side 1 dimension: \"))\n    side2 = int(input(\"Enter the side 2 dimension: \"))\n    side3 = int(input(\"Enter the side 3 dimension: \"))\n    # Calculating the surface area\n    surface_area = cuboid_surface_area(side1, side2, side3)\n    print(\"The surface area of the cuboid is: \", surface_area)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "# Importing required modules\nimport math\n\n# Function definition\ndef volume(a, b, c):\n    return a * b * c\n\ndef area(a, b, c):\n    return math.sqrt(volume(a, b, c))\n\ndef lateral_surface_area(a, b, c):\n    return area(a, b, c) * 2\n\n# Test cases\nprint volume(1, 2, 3)\nprint area(1, 2, 3)\nprint lateral_surface_area(1, 2, 3)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_lateral_surface_area(dimensions):\n    \"\"\"\n    Given the dimensions of a cuboid, calculate the lateral surface area\n    \"\"\"\n    # Calculate the surface area of a cuboid\n    # Surface area of a cuboid (n x n x n)\n    # Surface area of a cuboid (n x n)\n    # Surface area of a cuboid (n)\n    # Surface area of a cuboid (n x n x n)\n    return (dimensions[0] * dimensions[1] * dimensions[2]) / 2\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print('Enter dimensions of the cuboid:')\n    dimensions = map(int, input().split())\n    print('Area of the cuboid is: {}'.format(cuboid_lateral_surface_area(dimensions)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef volume(x, y, z):\n    return x * y * z\n\n\ndef surface(x, y, z):\n    return 2 * x * y + 2 * x * z + 2 * y * z\n\n\ndef area(x, y, z):\n    return x * y + x * z + y * z\n\n\ndef lateral_surface_area(x, y, z):\n    return surface(x, y, z) - volume(x, y, z)\n\n\ndef test_lateral_surface_area(x, y, z):\n    return surface(x, y, z) - volume(x, y, z)\n\n\nif __name__ == '__main__':\n    assert lateral_surface_area(1, 1, 1) == 2.0\n    assert lateral_surface_area(1, 1, 2) == 3.0\n    assert lateral_surface_area(1, 2, 1) == 2.0\n    assert lateral_surface_area(1, 2, 2) == 3.0\n    assert lateral_surface_area(2, 1, 1) == 2.0\n    assert lateral_surface_area(2, 1, 2) == 3.0\n    assert lateral_surface_area(2, 2, 1) == 2.0\n    assert lateral_surface_area(2, 2, 2) == 3.0\n    assert lateral_surface_area(2, 3, 1) == 2.0\n    assert lateral_surface_area(2, 3, 2) == 3.0\n    assert lateral_surface_area(2, 4, 1) == 2.0\n    assert lateral_surface_area(2, 4, 2) == 3.0\n    assert lateral_surface_area(2, 5, 1) == 2.0\n    assert lateral_surface_area(2, 5, 2) == 3.0\n    assert lateral_surface_area(3, 1, 1) == 2.0\n    assert lateral_surface_area(3, 1, 2) == 3.0\n    assert lateral_surface_area(3, 2, 1) == 2.0\n    assert lateral_surface_area(3, 2, 2) == 3.0\n    assert lateral"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_area(height, width, depth):\n    return height * width * depth\n\ndef test():\n    assert cuboid_area(1, 2, 3) == 6\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef area_cuboid(a, b, c):\n    return a * b * c\n\n# your code here\n\na = float(input('Enter the dimensions of a cuboid: '))\nb = float(input('Enter the dimensions of b cuboid: '))\nc = float(input('Enter the dimensions of c cuboid: '))\n\nprint(area_cuboid(a, b, c))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculate the area of a cuboid\n    \"\"\"\n    return length * width * height\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    length = float(input(\"Enter the length of the cuboid: \"))\n    width = float(input(\"Enter the width of the cuboid: \"))\n    height = float(input(\"Enter the height of the cuboid: \"))\n\n    print(lateral_surface_area(length, width, height))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef area(side):\n    return side * side * pi\n\ndef main():\n    side = int(input('Please enter the side of the cuboid: '))\n    print('The area of the cuboid is {}.'.format(area(side)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Lateral surface area of cuboid\n    # = 2 * (length * height * width)\n    # length = length of the cuboid\n    # height = height of the cuboid\n    # width = width of the cuboid\n    # area = length * height * width\n    # = 2 * (length * height * width) / 4\n    area = 2 * (6 * 6 * 4)\n\n    print(\"Lateral surface area of a cuboid is:\", area)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "__author__ = 'Libaozhi'\n\n# Definition for a point\nclass Point:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n# Definition for a cuboid\nclass Cuboid:\n    def __init__(self, l, w, h):\n        self.l = l\n        self.w = w\n        self.h = h\n\n# Definition for a dimension\nclass Dimension:\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\n# Definition for a cuboid dimension\nclass CuboidDimension:\n    def __init__(self, name, value, unit):\n        self.name = name\n        self.value = value\n        self.unit = unit\n\n# Definition for a volume\nclass Volume:\n    def __init__(self, volume, volume_unit):\n        self.volume = volume\n        self.volume_unit = volume_unit\n\n# Definition for a cube\nclass Cube:\n    def __init__(self, l, w, h):\n        self.l = l\n        self.w = w\n        self.h = h\n\n# Definition for a point in 3D space\nclass Point3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n\ndef get_volume(p1, p2, p3, p4):\n    \"\"\"\n    Calculate the volume of a cuboid\n    :param p1: first point\n    :param p2: second point\n    :param p3: third point\n    :param p4: fourth point\n    :return: volume of the cuboid\n    \"\"\"\n    # A cube is a cuboid with the same dimensions\n    cube = Cuboid(p1.x - p2.x, p1.y - p2.y, p1.z - p2.z)\n    # Get the volume of the cube\n    volume = cube.volume\n    # Get the volume of the cuboid\n    return volume\n\n\ndef get_lateral_surface"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "# import numpy as np\n\n# def lateral_surface_area(dimensions):\n#     # dimensions = [x, y, z]\n#     return sum(dimensions[0] * dimensions[1] * dimensions[2])\n\n# print(lateral_surface_area([4, 2, 6]))\n\n# dimensions = [4, 2, 6]\n# print(lateral_surface_area(dimensions))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(x, y, z):\n    return x*y*z\n\ndef area(x, y, z):\n    return math.sqrt(x*y*z)\n\ndef main():\n    print(volume(1, 2, 3))\n    print(area(1, 2, 3))\n\nmain()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "import math\n\ndef lateral_surface_area(length, width, height):\n    return length * width * height\n\nif __name__ == '__main__':\n    print lateral_surface_area(1, 2, 3)\n    print lateral_surface_area(3, 4, 5)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "import math\n\ndef area(height, width, length):\n    return height * width * length\n\ndef volume(height, width, length):\n    return height * width * length * 0.5\n\nprint area(6, 8, 9)\nprint volume(6, 8, 9)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\n\ndef area(l, w, h):\n    \"\"\"\n    area(l, w, h) -> float\n    \n    Return the lateral surface area of the cuboid with the side lengths l, w and h\n    \"\"\"\n    return l * w * h\n\nif __name__ == '__main__':\n    print(area(1, 2, 3))\n    print(area(2, 3, 4))\n    print(area(3, 4, 5))\n    print(area(1, 1, 1))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "# x1, y1, z1, x2, y2, z2, x3, y3, z3\n# area = ((x2 - x1) * (y2 - y1) * (z2 - z1))\n# area = ((x3 - x1) * (y3 - y1) * (z3 - z1))\n\n# x1, y1, z1, x2, y2, z2, x3, y3, z3\n# area = ((x2 - x1) * (y2 - y1) * (z2 - z1))\n# area = ((x3 - x1) * (y3 - y1) * (z3 - z1))\n\ndef lateral_surface_area(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    area = ((x2 - x1) * (y2 - y1) * (z2 - z1))\n    area = ((x3 - x1) * (y3 - y1) * (z3 - z1))\n    return area\n\nif __name__ == '__main__':\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = map(int, raw_input().split())\n    area = lateral_surface_area(x1, y1, z1, x2, y2, z2, x3, y3, z3)\n    print area"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_lateral_surface_area(height, width, length):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    \n    :param height: The height of the cuboid\n    :param width: The width of the cuboid\n    :param length: The length of the cuboid\n    :return: The lateral surface area of the cuboid\n    \"\"\"\n    return (math.pi * (width * length) + (height * width) + (height * length)) / 6\n\n# Test cases\nprint(cuboid_lateral_surface_area(10, 20, 30))\nprint(cuboid_lateral_surface_area(10, 20, 30))\nprint(cuboid_lateral_surface_area(10, 20, 30))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def lateral_surface_area(length, width, height):\n    \"\"\"\n    Input:\n        length, width, height: length, width, and height of cuboid\n    Output:\n        lateral surface area of cuboid\n    \"\"\"\n    # Compute the total surface area\n    total_surface_area = length * width * height\n    # Compute the surface area of the lateral surface\n    surface_area_lateral = length * width\n    return surface_area_lateral + total_surface_area - surface_area_lateral\n\nif __name__ == \"__main__\":\n    length = input(\"length: \")\n    width = input(\"width: \")\n    height = input(\"height: \")\n    print lateral_surface_area(length, width, height)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from math import *\n\ndef area(x, y, z):\n    return x*y*z\n\ndef volume(x, y, z):\n    return x*y*z\n\ndef volume_lateral(x, y, z):\n    return (x+y+z)*0.5*(x*y+y*z+x*z)\n\nif __name__ == '__main__':\n    x = input('Enter x: ')\n    y = input('Enter y: ')\n    z = input('Enter z: ')\n    print(area(x, y, z))\n    print(volume(x, y, z))\n    print(volume_lateral(x, y, z))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\ndef area_of_cuboid(width, height, length):\n    return width * height * length\n\ndef test():\n    assert area_of_cuboid(4, 5, 6) == 144\n    assert area_of_cuboid(3, 5, 7) == 180\n    assert area_of_cuboid(2, 4, 6) == 72\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def lateral_surface_area(length, width, height):\n    \"\"\"\n    :param length: the length of cuboid\n    :param width: the width of cuboid\n    :param height: the height of cuboid\n    :return: the lateral surface area of cuboid\n    \"\"\"\n\n    surface_area = length * width * height\n    return surface_area\n\nif __name__ == '__main__':\n    print lateral_surface_area(2, 3, 4)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef area_of_a_cuboid(width, height, length):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    :param width: the width of the cuboid\n    :param height: the height of the cuboid\n    :param length: the length of the cuboid\n    :return: the lateral surface area of the cuboid\n    \"\"\"\n\n    # if the width or height is zero, return 0\n    if width == 0 or height == 0:\n        return 0\n\n    # return the total surface area\n    return width * height * length\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(area_of_a_cuboid(5, 6, 7))\n    print(area_of_a_cuboid(4, 5, 7))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef surfaceArea(length, width, height):\n    \"\"\"\n    Returns the lateral surface area of cuboid\n    :param length: length of the cuboid\n    :param width: width of the cuboid\n    :param height: height of the cuboid\n    :return: the lateral surface area of cuboid\n    \"\"\"\n    return length * width * height\n\ndef test_surfaceArea(length, width, height):\n    \"\"\"\n    Returns the lateral surface area of cuboid\n    :param length: length of the cuboid\n    :param width: width of the cuboid\n    :param height: height of the cuboid\n    :return: the lateral surface area of cuboid\n    \"\"\"\n    return surfaceArea(length, width, height)\n\nif __name__ == \"__main__\":\n    assert surfaceArea(5, 4, 3) == 210\n    assert surfaceArea(5, 4, 2) == 210\n    assert surfaceArea(3, 4, 3) == 210\n    assert surfaceArea(3, 4, 2) == 210\n    assert surfaceArea(3, 3, 3) == 36\n    assert surfaceArea(3, 3, 2) == 36\n    assert surfaceArea(3, 3, 1) == 36\n    assert surfaceArea(3, 3, 0) == 36\n    assert surfaceArea(1, 2, 3) == 24\n    assert surfaceArea(1, 2, 2) == 24\n    assert surfaceArea(1, 1, 3) == 6\n    assert surfaceArea(1, 1, 2) == 6\n    assert surfaceArea(1, 1, 1) == 6\n    assert surfaceArea(1, 1, 0) == 6\n    assert surfaceArea(0, 2, 3) == 0\n    assert surfaceArea(0, 2, 2) == 0\n    assert surfaceArea(0, 1, 3) == 0\n    assert surfaceArea(0, 1, 2) == 0\n    assert surfaceArea(0, 1, 1) == 0\n    assert surfaceArea(0, 1, 0) == 0\n    assert surfaceArea(0, 0, 3) == 0\n    assert surfaceArea(0, 0, 2) == 0\n    assert surfaceArea(0, 0, 1) == 0\n    assert surface"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# Import the modules\nimport math\n\n# Define the function\ndef lateral_surface_area(height, width):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    \n    This function accepts an integer height and width. The function\n    returns the lateral surface area in square inches.\n    \"\"\"\n\n    # Define the variables\n    area = 0\n    \n    # Calculate the area\n    for i in range(height):\n        for j in range(width):\n            area += math.sqrt(height*width)\n    \n    # Return the area\n    return area\n\n# Test the function\nprint lateral_surface_area(4, 3)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef lateral_surface_area(length, width, height):\n    area = length * width * height\n    return area\n\ndef main():\n    print(lateral_surface_area(1, 1, 1))\n    print(lateral_surface_area(2, 2, 2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "#Import Modules\nimport math\n\n#Function Definitions\ndef cuboid_surface_area(x,y,z):\n    return x*y*z\n\ndef main():\n    #Test Cases\n    print(cuboid_surface_area(1,1,1))\n    print(cuboid_surface_area(2,2,2))\n    print(cuboid_surface_area(3,3,3))\n    print(cuboid_surface_area(5,5,5))\n\n#Run Main Code\nmain()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "# Input\n#   length, width, height\n#   lateral_surface_area, volume_area\n# Output\n#   lateral_surface_area\n\ndef cuboid_area(length, width, height):\n    \"\"\"\n    Calculate the area of a cuboid\n    \"\"\"\n    return length * width * height\n\n# Input\n#   length, width, height\n#   volume_area\n# Output\n#   lateral_surface_area\n\ndef cuboid_volume(length, width, height):\n    \"\"\"\n    Calculate the volume of a cuboid\n    \"\"\"\n    return length * width * height\n\n# Input\n#   length, width, height\n#   lateral_surface_area\n# Output\n#   volume_area\n\ndef cuboid_volume(length, width, height):\n    \"\"\"\n    Calculate the volume of a cuboid\n    \"\"\"\n    return length * width * height\n\n# Input\n#   length, width, height\n#   volume_area\n# Output\n#   lateral_surface_area\n\ndef cuboid_surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    \"\"\"\n    return length * width * height"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def get_lateral_surface_area(dimensions):\n    \"\"\"\n    Parameters\n    ----------\n    dimensions: tuple\n        (x, y, z)\n\n    Returns\n    -------\n    surface_area: float\n        lateral surface area of cuboid\n    \"\"\"\n    x, y, z = dimensions\n    surface_area = (x + y + z) * (z * x + x * y + y * z) / 2\n    return surface_area\n\nif __name__ == \"__main__\":\n    x, y, z = (1, 2, 3)\n    surface_area = get_lateral_surface_area((x, y, z))\n    print(\"lateral surface area of a cuboid is\", surface_area)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(lx, ly, lz):\n    \"\"\"\n    Calculate the surface area of a cuboid\n\n    Inputs:\n        lx, ly, lz: The length, width and height of the cuboid\n    Returns:\n        The lateral surface area of the cuboid\n    \"\"\"\n    return math.pi * (lx * ly + lx * lz + ly * lz) / 6\n\ndef main():\n    \"\"\"\n    Write a function to find the lateral surface area of cuboid\n    \"\"\"\n    #print surface_area(2, 3, 4)\n    #print surface_area(2, 3, 4)\n    print surface_area(2, 3, 4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def surfaceArea(height, width, length):\n    \"\"\"\n    :param height: Height of cuboid\n    :param width: Width of cuboid\n    :param length: Length of cuboid\n    :return: Surface Area of cuboid\n    \"\"\"\n    area = (height * width) + (height * length) + (width * length)\n    return area\n\nif __name__ == \"__main__\":\n    # print(surfaceArea(1, 1, 1))\n    # print(surfaceArea(2, 2, 2))\n    print(surfaceArea(3, 4, 5))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef surface_area(height, width):\n    \"\"\"\n    :param height: height of cuboid\n    :param width: width of cuboid\n    :return: area of cuboid\n    \"\"\"\n    return (height * width) / 2.0\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    assert surface_area(1, 1) == 0.0\n    assert surface_area(2, 2) == 4.0\n    assert surface_area(3, 3) == 9.0\n    assert surface_area(4, 4) == 16.0\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef lateral_surface_area(length, width, height):\n    \"\"\"\n    :type length: int\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return length * width * height\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    print lateral_surface_area(1, 1, 1)\n    print lateral_surface_area(2, 2, 2)\n    print lateral_surface_area(3, 4, 5)\n    print lateral_surface_area(4, 3, 5)\n    print lateral_surface_area(4, 3, 6)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "# Importing libraries\nimport math\n\n# Function definition\ndef cuboid_surface(length, width, height):\n    \"\"\"\n    Function to calculate the surface area of a cuboid\n    :param length: length of the cuboid\n    :param width: width of the cuboid\n    :param height: height of the cuboid\n    :return: surface area of the cuboid\n    \"\"\"\n    # Calculating the surface area of the cuboid\n    area = length * width * height\n    return area\n\n# Testing\nprint(\"The surface area of a cuboid with the dimensions 3 x 10 x 5 is:\")\nprint(cuboid_surface(3, 10, 5))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\ndef lateral_surface_area(width, length, height):\n    \"\"\"\n    :param width:\n    :param length:\n    :param height:\n    :return:\n    \"\"\"\n\n    return math.pi * width * height\n\n\ndef test():\n    assert lateral_surface_area(1, 2, 3) == 1.0 * math.pi * 3\n    assert lateral_surface_area(3, 2, 1) == 1.0 * math.pi * 3\n    assert lateral_surface_area(4, 2, 1) == 1.0 * math.pi * 4\n    assert lateral_surface_area(1, 2, 4) == 1.0 * math.pi * 4\n    assert lateral_surface_area(3, 4, 2) == 1.0 * math.pi * 8\n    assert lateral_surface_area(2, 4, 3) == 1.0 * math.pi * 12\n    assert lateral_surface_area(4, 3, 2) == 1.0 * math.pi * 18\n    assert lateral_surface_area(2, 4, 5) == 1.0 * math.pi * 40\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# Import required modules\nimport math\n\n# Define variables\narea = 0.0\n\n# Calculate surface area\narea = math.pi * (1.0 * 1.0)\n\n# Print result\nprint \"The surface area of a cuboid is %.2f units\" % area\n\n# Close the file"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\nimport numpy as np\n\ndef cuboid_surface_area(width, height, depth):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    \"\"\"\n    return math.pi * (width ** 2 + height ** 2 + depth ** 2)\n\n\ndef main():\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    \"\"\"\n    print(cuboid_surface_area(3, 4, 5))\n    print(cuboid_surface_area(5, 4, 3))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @file\n# @author (c) 2016, Laura Garcia\n# @date Created on Tue Apr  6 12:10:48 2016\n# @brief\n\n\nimport numpy as np\n\ndef lateral_surface_area(shape):\n    \"\"\"\n    @brief Calculates the lateral surface area of a cuboid\n    @param shape The shape of the cuboid\n    @return The lateral surface area of the cuboid\n    \"\"\"\n\n    # Calculate the surface area of the cuboid\n    surface_area = np.prod(shape) * 4.0\n\n    return surface_area\n\nif __name__ == \"__main__\":\n    \"\"\"\n    @brief unit test for lateral_surface_area\n    \"\"\"\n\n    print lateral_surface_area((1, 2, 3))\n    print lateral_surface_area((1, 1, 1))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "import math\n\ndef area_cuboid(length, width, height):\n    \"\"\"\n    Calculate lateral surface area of cuboid\n    \"\"\"\n    return length * width * height\n\ndef test():\n    \"\"\"\n    Test function\n    \"\"\"\n    print area_cuboid(2, 3, 4)\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of cuboid\n    \"\"\"\n    return length * width * height\n\ndef main():\n    \"\"\"\n    Test function\n    \"\"\"\n    print(surface_area(5, 10, 6))\n    print(surface_area(5, 10, 6.5))\n    print(surface_area(10, 15, 6.5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef cuboid_area(a,b,c):\n    return a*b*c\n\nif __name__ == '__main__':\n    print(cuboid_area(1,2,3))\n    print(cuboid_area(1,2,3.5))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "import math\n\ndef lateral_surface_area(x, y, z):\n    \"\"\"\n    Lateral surface area of cuboid\n    x, y, z - dimensions of the cuboid\n    \"\"\"\n    area = math.pi * (x + y + z)\n    return area\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    x = int(input(\"Enter the length of the cuboid's x-axis: \"))\n    y = int(input(\"Enter the length of the cuboid's y-axis: \"))\n    z = int(input(\"Enter the length of the cuboid's z-axis: \"))\n\n    print(\"Lateral surface area of cuboid with dimensions {0} x {1} x {2} is {3}\".format(x, y, z, lateral_surface_area(x, y, z)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n# https://www.youtube.com/watch?v=i8Lz-oNr6_0\n# https://www.youtube.com/watch?v=r_W0J9p5jXg\n\nimport math\n\ndef cuboid_area(height, width, depth):\n    \"\"\"\n    Calculate the area of a cuboid\n    \"\"\"\n    return height * width * depth\n\ndef test_cuboid_area(height, width, depth):\n    \"\"\"\n    Test the area function\n    \"\"\"\n    print '{0:.2f} * {1:.2f} * {2:.2f} = {3:.2f}'.format(height, width, depth, cuboid_area(height, width, depth))\n\n\nif __name__ == '__main__':\n    test_cuboid_area(1, 2, 3)"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(l, w, h):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n\n    :param l: length\n    :param w: width\n    :param h: height\n    :return: the lateral surface area of the cuboid\n    \"\"\"\n\n    return l * w * h\n\ndef main():\n    \"\"\"\n    Test function\n    \"\"\"\n\n    print surface_area(1, 2, 3)\n    print surface_area(3, 4, 5)\n    print surface_area(2, 4, 6)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "# import the libraries\nimport math\n\n# function to find the lateral surface area of cuboid\ndef find_lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of cuboid\n    \"\"\"\n    # calculate the surface area of a cube\n    surface_area_cube = length * width * height\n    # calculate the lateral surface area of the cube\n    lateral_surface_area = length * width * height - surface_area_cube\n    return lateral_surface_area\n\n# testing\nprint \"Testing find_lateral_surface_area(3, 3, 3):\", find_lateral_surface_area(3, 3, 3)\nprint \"Testing find_lateral_surface_area(3, 2, 1):\", find_lateral_surface_area(3, 2, 1)\nprint \"Testing find_lateral_surface_area(3, 1, 1):\", find_lateral_surface_area(3, 1, 1)\nprint \"Testing find_lateral_surface_area(2, 3, 1):\", find_lateral_surface_area(2, 3, 1)\nprint \"Testing find_lateral_surface_area(1, 3, 1):\", find_lateral_surface_area(1, 3, 1)\nprint \"Testing find_lateral_surface_area(1, 1, 1):\", find_lateral_surface_area(1, 1, 1)\nprint \"Testing find_lateral_surface_area(1, 1, 2):\", find_lateral_surface_area(1, 1, 2)\nprint \"Testing find_lateral_surface_area(1, 1, 3):\", find_lateral_surface_area(1, 1, 3)\nprint \"Testing find_lateral_surface_area(2, 1, 3):\", find_lateral_surface_area(2, 1, 3)\nprint \"Testing find_lateral_surface_area(1, 2, 3):\", find_lateral_surface_area(1, 2, 3)\nprint \"Testing find_lateral_surface_area(2, 3, 3):\", find_lateral_surface_area(2, 3, 3)"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "import math\n\ndef area(a, b, c):\n    return a * b * c\n\ndef lateral_surface_area(a, b, c):\n    return area(a, b, c) - a * b * c\n\ndef main():\n    print(area(1, 2, 3))\n    print(lateral_surface_area(1, 2, 3))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def volume(height, width, length):\n    \"\"\"\n    Return the volume of cuboid with height, width and length.\n    \"\"\"\n    return height * width * length\n\ndef area(height, width, length):\n    \"\"\"\n    Return the area of cuboid with height, width and length.\n    \"\"\"\n    return height * width * length\n\ndef lateral_surface_area(height, width, length):\n    \"\"\"\n    Return the lateral surface area of cuboid with height, width and length.\n    \"\"\"\n    return 2 * height * width * length\n\nheight = int(input())\nwidth = int(input())\nlength = int(input())\nprint(volume(height, width, length))\nprint(area(height, width, length))\nprint(lateral_surface_area(height, width, length))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "# import the math library\nimport math\n\n# define constants\na = 1.0\nb = 1.0\nc = 1.0\n\n# calculate the surface area\nsurface_area = math.pi * a * b * c\n\nprint('the surface area of a cuboid is {}'.format(surface_area))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef get_lateral_surface_area(length, width, height):\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n\n    Arguments:\n    length -- The length of the cuboid\n    width -- The width of the cuboid\n    height -- The height of the cuboid\n\n    Returns:\n    The lateral surface area of the cuboid\n    \"\"\"\n\n    return length * width * height\n\n\ndef main():\n    \"\"\"\n    Calculate the lateral surface area of a cuboid\n    \"\"\"\n\n    length = input(\"Length: \")\n    width = input(\"Width: \")\n    height = input(\"Height: \")\n\n    print(\"Lateral surface area: %.3f\" % get_lateral_surface_area(length, width, height))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import math\n\ndef area(length, width, height):\n    return length * width * height\n\ndef lateral_surface_area(length, width, height):\n    return math.pi * length * width * height\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert area(4, 3, 2) == 24, \"Area of cuboid with length 4, width 3, height 2 is 24\"\n    assert area(3, 4, 2) == 48, \"Area of cuboid with length 3, width 4, height 2 is 48\"\n    assert area(4, 2, 3) == 24, \"Area of cuboid with length 4, width 2, height 3 is 24\"\n    assert area(2, 4, 3) == 48, \"Area of cuboid with length 2, width 4, height 3 is 48\"\n    assert area(3, 2, 4) == 24, \"Area of cuboid with length 3, width 2, height 4 is 24\"\n    assert area(2, 3, 4) == 48, \"Area of cuboid with length 2, width 3, height 4 is 48\"\n    assert area(4, 3, 2) == 24, \"Area of cuboid with length 4, width 3, height 2 is 24\"\n    assert area(3, 4, 2) == 48, \"Area of cuboid with length 3, width 4, height 2 is 48\"\n    assert area(4, 2, 3) == 24, \"Area of cuboid with length 4, width 2, height 3 is 24\"\n    assert area(2, 4, 3) == 48, \"Area of cuboid with length 2, width 4, height 3 is 48\"\n    assert area(3, 2, 4) == 24, \"Area of cuboid with length 3, width 2, height 4 is 24\"\n    assert area(2, 3, 4) == 48, \"Area of cuboid with length 2, width 3, height 4 is 48\"\n\n    assert lateral_surface_area(4, 3, 2) == 24 * math.pi, \"Lateral surface area of cuboid with length 4, width 3, height 2 is 24 * pi\"\n    assert lateral_surface_area(3, 4, 2"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# imports\nimport math\n\n# constants\n\n# function definitions\ndef lateral_surface_area(height, width, depth):\n    \"\"\"\n    Compute the lateral surface area of a cuboid.\n\n    :param height: The height of the cuboid\n    :param width: The width of the cuboid\n    :param depth: The depth of the cuboid\n    :return: The lateral surface area of the cuboid\n    \"\"\"\n    return (height * width * depth) / 2\n\n# testing\nif __name__ == '__main__':\n    # test 1\n    print(lateral_surface_area(1, 2, 3))\n\n    # test 2\n    print(lateral_surface_area(5, 10, 15))\n\n    # test 3\n    print(lateral_surface_area(1, 1, 1))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# TODO:\n# - test\n# - input error handling\n# - other tests\n\nimport math\n\n\ndef get_lateral_surface_area(height, width, length):\n    return (height * width * length) / 4\n\n\ndef main():\n    # test\n    assert get_lateral_surface_area(1, 2, 3) == 12\n    assert get_lateral_surface_area(4, 2, 3) == 64\n    assert get_lateral_surface_area(5, 2, 3) == 125\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def cuboid_surface_area(length, width, height):\n    \"\"\"\n    >>> cuboid_surface_area(1, 1, 1)\n    1\n    >>> cuboid_surface_area(1, 2, 1)\n    3\n    >>> cuboid_surface_area(1, 1, 2)\n    2\n    >>> cuboid_surface_area(1, 2, 3)\n    8\n    >>> cuboid_surface_area(1, 2, 4)\n    12\n    >>> cuboid_surface_area(1, 1, 3)\n    2\n    >>> cuboid_surface_area(1, 1, 3.5)\n    2.5\n    \"\"\"\n    return length * width * height"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "import math\n\ndef area(l, w, h):\n    return l * w * h\n\ndef area_cuboid(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_2(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_3(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_4(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_5(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_6(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_7(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_8(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_9(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_10(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_11(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_12(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_13(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_14(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_15(l, w, h):\n    return l * w + w * h + h * l\n\ndef area_cuboid_16(l, w, h):\n    return l * w + w * h"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# The lateral surface area of a cuboid is the sum of the volume of the\n# cuboid, the surface area of the cuboid, and the surface area of the\n# faces of the cuboid.\n#\n# A cuboid is defined by a volume and a surface area.\n#\n# The surface area of a cuboid is the sum of the surface area of its\n# six faces.\n#\n# The volume of a cuboid is the product of the surface area and the\n# length of the side of the cuboid.\n#\n# Write a function to compute the lateral surface area of a cuboid.\n\n# Example 1\n# Input: volume = 5, surface_area = 6\n# Output: surface_area = 12\n# Example 2\n# Input: volume = 2, surface_area = 3\n# Output: surface_area = 6\n# Example 3\n# Input: volume = 4, surface_area = 5\n# Output: surface_area = 10\n# Example 4\n# Input: volume = 3, surface_area = 4\n# Output: surface_area = 8\n# Example 5\n# Input: volume = 1, surface_area = 0\n# Output: surface_area = 0\n# Note:\n# The surfaces of a cuboid are at least two triangles.\n# The volume of a cuboid is at least 1.\n\n# Your code here\n\n# Example 1\n# Input: volume = 5, surface_area = 6\n# Output: surface_area = 12\n# Example 2\n# Input: volume = 2, surface_area = 3\n# Output: surface_area = 6\n# Example 3\n# Input: volume = 4, surface_area = 5\n# Output: surface_area = 10\n# Example 4\n# Input: volume = 3, surface_area = 4\n# Output: surface_area = 8\n# Example 5\n# Input: volume = 1, surface_area = 0\n# Output: surface_area = 0\n\n# Note:\n# The surfaces of a cuboid are at least two triangles.\n# The volume of a cuboid is at least 1.\n\ndef lateral_surface_area(volume, surface_area):\n    \"\"\"\n    :type volume: int\n    :type surface_area: int\n    :rtype: int\n    \"\"\""
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "import math\n\n# @include\ndef lateral_surface_area(dimensions):\n    return sum(math.pi * dimensions[i] * dimensions[i + 1] for i in range(len(dimensions) - 1))\n# @exclude\n# @tuple_input\n# @output_numpy\n# @see_also\n# http://stackoverflow.com/questions/9039967/find-the-lateral-surface-area-of-a-cuboid\n# @todo\n# @todo\n# @todo\n# @todo\n# @todo\ndef main():\n    # @tuple_input\n    # @output_numpy\n    # @see_also\n    # @todo\n    # @todo\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import math\n\ndef cuboid(length, width, height):\n    \"\"\"\n    Given a length, width, height, return the lateral surface area of the cuboid.\n    \"\"\"\n    area = length * width * height / 2.0\n    return area\n\n\n# Test case 1\nprint(cuboid(10, 10, 10))\n#>>> 3.7401573915\n\n# Test case 2\nprint(cuboid(10, 10, 2))\n#>>> 18.0\n\n# Test case 3\nprint(cuboid(10, 20, 10))\n#>>> 23.0\n\n# Test case 4\nprint(cuboid(10, 10, 3))\n#>>> 16.0\n\n# Test case 5\nprint(cuboid(10, 20, 2))\n#>>> 18.0\n\n# Test case 6\nprint(cuboid(10, 10, 3))\n#>>> 16.0\n\n# Test case 7\nprint(cuboid(10, 20, 2))\n#>>> 18.0\n\n# Test case 8\nprint(cuboid(10, 10, 3))\n#>>> 16.0\n\n# Test case 9\nprint(cuboid(10, 20, 2))\n#>>> 18.0\n\n# Test case 10\nprint(cuboid(10, 10, 3))\n#>>> 16.0\n\n# Test case 11\nprint(cuboid(10, 20, 2))\n#>>> 18.0\n\n# Test case 12\nprint(cuboid(10, 10, 3))\n#>>> 16.0\n\n# Test case 13\nprint(cuboid(10, 20, 2))\n#>>> 18.0\n\n# Test case 14\nprint(cuboid(10, 10, 3))\n#>>> 16.0\n\n# Test case 15\nprint(cuboid(10, 20, 2))\n#>>> 18.0"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def cuboid_surface_area(l, w, h):\n    \"\"\"\n    Input:\n        l: length of the cuboid\n        w: width of the cuboid\n        h: height of the cuboid\n    Output:\n        lateral surface area of the cuboid\n    \"\"\"\n    return l*w*h\n\n# Sample Output\n# cuboid_surface_area(3, 4, 5) = 12"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Define a function\ndef area(length, width, height):\n    \"\"\"\n    :type length: int\n    :type width: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return length*width*height\n\n# Test\nassert area(5, 3, 2) == 60\nassert area(10, 5, 3) == 100\nassert area(3, 10, 5) == 30\nassert area(10, 10, 5) == 100\nassert area(5, 10, 5) == 50\nassert area(3, 5, 10) == 30\nassert area(10, 3, 10) == 100\nassert area(10, 5, 3) == 100\n\n# Write your code"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for a point\nclass Point(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\nclass Solution(object):\n    def LateralSurfaceArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) <= 0:\n            return 0\n        \n        x, y, z = zip(*points)\n        x = [x for x in x if x!= None]\n        y = [y for y in y if y!= None]\n        z = [z for z in z if z!= None]\n\n        if len(x) == 0:\n            return 0\n\n        area = 0\n        for i in range(len(x)):\n            area += (x[i] + y[i] + z[i]) * (x[(i + 1) % len(x)] + y[(i + 1) % len(y)] + z[(i + 1) % len(z)]) / 2\n\n        return area"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# import the cmath library\nimport cmath\n\n# define the dimensions of the cuboid\nlength = 10\nwidth = 10\nheight = 10\n\n# define the surface area of the cuboid\nsurface_area = length * width * height\n\n# define the volume of the cuboid\nvolume = length * width * height\n\n# calculate the volume of the cuboid by using the formula\n# volume = l * w * h\n\n# calculate the surface area of the cuboid by using the formula\n# surface_area = l * w * h\n\n# calculate the lateral surface area of the cuboid by using the formula\n# lateral_surface_area = 2 * (length * width) + 2 * (width * height)\n\n# print the results\nprint(\"The surface area of a cuboid with dimensions:\", length, \"x\", width, \"x\", height, \"is:\", surface_area)\nprint(\"The volume of a cuboid with dimensions:\", length, \"x\", width, \"x\", height, \"is:\", volume)\nprint(\"The lateral surface area of a cuboid with dimensions:\", length, \"x\", width, \"x\", height, \"is:\", lateral_surface_area)"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Importing modules\nimport math\n\n# Importing the library functions\nfrom shapely.geometry import Polygon, Point\nfrom shapely.affinity import rotate\n\n# Function to get the lateral surface area\ndef lateral_surface_area(shape):\n    # Get the area of the polygon\n    area = shape.area\n\n    # Convert the area to a float\n    area = float(area)\n\n    # Return the area\n    return area\n\n# Function to get the lateral surface area of cuboid\ndef lateral_surface_area_cuboid(shape):\n    # Get the area of the polygon\n    area = shape.area\n\n    # Convert the area to a float\n    area = float(area)\n\n    # Return the area\n    return area\n\n# Function to get the lateral surface area of cuboid\ndef lateral_surface_area_cuboid_rotated(shape):\n    # Get the area of the polygon\n    area = shape.area\n\n    # Convert the area to a float\n    area = float(area)\n\n    # Return the area\n    return area\n\n# Function to get the lateral surface area of cuboid\ndef lateral_surface_area_cuboid_rotated2(shape):\n    # Get the area of the polygon\n    area = shape.area\n\n    # Convert the area to a float\n    area = float(area)\n\n    # Return the area\n    return area\n\n# Function to get the lateral surface area of cuboid\ndef lateral_surface_area_cuboid_rotated3(shape):\n    # Get the area of the polygon\n    area = shape.area\n\n    # Convert the area to a float\n    area = float(area)\n\n    # Return the area\n    return area\n\n# Function to get the lateral surface area of cuboid\ndef lateral_surface_area_cuboid_rotated4(shape):\n    # Get the area of the polygon\n    area = shape.area\n\n    # Convert the area to a float\n    area = float(area)\n\n    # Return the area\n    return area\n\n# Function to get the lateral surface area of cuboid\ndef lateral_surface_area_cuboid_rotated5(shape):\n    # Get the area of the polygon"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def surfaceArea(height, width, length):\n    \"\"\"\n    :param height: height of cuboid\n    :param width: width of cuboid\n    :param length: length of cuboid\n    :return: area of cuboid\n    \"\"\"\n    if height == 0 or width == 0 or length == 0:\n        return 0\n    return ((height * width) + (height * length) + (width * length)) / 2\n\ndef test(height, width, length):\n    assert surfaceArea(height, width, length) == (height * width * length) / 2\n\nif __name__ == '__main__':\n    height, width, length = map(int, input().split())\n    test(height, width, length)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import math\n\ndef cuboid_surface_area(dimensions):\n    \"\"\"\n    calculate the surface area of cuboid\n    :param dimensions: dimensions of the cuboid\n    :return: the surface area of the cuboid\n    \"\"\"\n    return math.pi * dimensions[0] * dimensions[1]\n\nif __name__ == \"__main__\":\n    assert(cuboid_surface_area([1, 2, 3]) == 24)\n    assert(cuboid_surface_area([3, 4, 5]) == 48)\n    assert(cuboid_surface_area([4, 5, 6]) == 36)\n    assert(cuboid_surface_area([4, 6, 7]) == 60)\n    assert(cuboid_surface_area([6, 7, 8]) == 40)\n    assert(cuboid_surface_area([8, 9, 10]) == 40)\n    assert(cuboid_surface_area([9, 10, 11]) == 36)\n    assert(cuboid_surface_area([10, 11, 12]) == 48)"
    }
  ]
}