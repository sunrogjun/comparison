{
  "timestamp": "2025-09-14T20:59:59.298970",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 489,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "#!/bin/python\n\n# Complete the concat method below.\n#\n#\n#\n\nclass ListNode:\n    def __init__(self, val, next_node=None):\n        self.val = val\n        self.next = next_node\n\nclass Solution:\n    def concat(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        node = ListNode(0)\n        node.next = head\n        node = node.next\n        while node.next is not None:\n            node.next = node.next.next\n            node = node.next\n        return node\n\nif __name__ == '__main__':\n    solution = Solution()\n    node = ListNode(1, ListNode(2, ListNode(3, ListNode(4))))\n    node.next = ListNode(5, ListNode(6))\n    head = node\n    result = solution.concat(head)\n    print result"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\nclass Solution:\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        nums_length = len(nums)\n        if nums_length == 0:\n            return \"\"\n        if nums_length == 1:\n            return str(nums[0])\n        result = \"\"\n        for i in range(nums_length):\n            result += str(nums[i])\n            if i!= nums_length - 1:\n                result += \" \"\n        return result\n\ns = Solution()\nprint s.concat([1, 2, 3])\nprint s.concat([1, 2, 3, 4, 5, 6])\nprint s.concat([1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint s.concat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint s.concat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nprint s.concat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nprint s.concat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nprint s.concat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\nprint s.concat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\nprint s.concat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\nprint s.concat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\nprint s.con"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def concatList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return ''.join(str(n) for n in nums)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Thought: https://leetcode.com/problems/concatenate-all-elements-of-the-given-list/solution/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution:\n    def concat(self, head: ListNode, tail: ListNode) -> ListNode:\n        if not head or not tail:\n            return head\n        result = ListNode(0)\n        curr = result\n        while head and tail:\n            curr.next = ListNode(head.val)\n            head = head.next\n            curr = curr.next\n            tail = tail.next\n        curr.next = tail\n        return result"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        curr = head\n        while curr:\n            curr = curr.next\n        return head"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def concatenate(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: str\n    \"\"\"\n    if not lst:\n        return \"\"\n\n    s = \"\"\n    for x in lst:\n        s += str(x) + \" \"\n\n    return s[:-1]\n\nprint(concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(concatenate(range(1, 11)))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from collections import deque\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        d = deque()\n        while head:\n            d.append(head.val)\n            head = head.next\n        \n        node = ListNode(0)\n        head = node\n        while d:\n            head.next = ListNode(d.popleft())\n            head = head.next\n        return node.next"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Approach 1: Sort the list and concatenate in sorted order.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 2: Sort the list and concatenate in unsorted order.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 3: Sort the list using a sorting algorithm.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 4: Sort the list using a sorting algorithm.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 5: Sort the list using a sorting algorithm.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 6: Sort the list using a sorting algorithm.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 7: Sort the list using a sorting algorithm.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 8: Sort the list using a sorting algorithm.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 9: Sort the list using a sorting algorithm.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 10: Sort the list using a sorting algorithm.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)\n\n# Approach 11: Sort the list using a sorting algorithm.\n# Complexity: O(n*logn)\n# Space Complexity: O(n)\n# Time Complexity: O(n)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def concatList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        nums = sorted(nums)\n        res = \"\"\n        for i in nums:\n            res += str(i)\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,3,4]\n    print(sol.concatList(nums))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def concat(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        def get_string(root):\n            if root is None:\n                return ''\n            if root.left is None and root.right is None:\n                return str(root.val)\n            return '(' + get_string(root.left) + ')' + '(' + get_string(root.right) + ')'\n\n        return get_string(root)\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.left.right.left = TreeNode(6)\n    root.left.right.right = TreeNode(7)\n    root.right.left = TreeNode(8)\n    root.right.right = TreeNode(9)\n    root.right.right.left = TreeNode(10)\n    root.right.right.right = TreeNode(11)\n    print Solution().concat(root)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "#!/bin/python\n\n# https://www.hackerrank.com/challenges/concatenated-string/problem\n\ndef concatenated_string(nums):\n    string = \"\"\n    for i in nums:\n        string += i\n    return string\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print concatenated_string(nums)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/concatenate-strings/description/\n\nclass Solution(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return ''.join(str(i) for i in nums)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.concatenate([1,2,3,4,5]))\n    print(s.concatenate([2,3,4,5]))\n    print(s.concatenate([1,2]))\n    print(s.concatenate([1,2,3]))\n    print(s.concatenate([1,2,3,4]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/concatenate-all\ndef concatenate_all(arr):\n    string = \"\"\n    for i in arr:\n        string += i\n    return string\n\n# https://www.hackerrank.com/challenges/concatenate-all-with-string/problem\ndef concatenate_all_with_string(arr):\n    string = \"\"\n    for i in arr:\n        string += i\n    return string\n\nif __name__ == '__main__':\n    arr = [1, 2, 3]\n    print concatenate_all(arr)\n    arr = [\"a\", \"b\", \"c\"]\n    print concatenate_all_with_string(arr)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/concatenated-string/description/\n\nclass Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        result = \"\"\n        for num in nums:\n            result += str(num)\n        return result\n\nclass Solution2(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        result = \"\"\n        for num in nums:\n            if nums[0] == num:\n                result += str(num)\n            else:\n                result += str(num) + \" \"\n        return result\n\nclass Solution3(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        result = \"\"\n        for num in nums:\n            result += str(num) + \" \"\n        return result[:-1]\n\nclass Solution4(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        result = \"\"\n        for num in nums:\n            result += str(num)\n        return result"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def concatList(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n        \n        # Get the last node of the list\n        tail = head\n        while tail.next:\n            tail = tail.next\n        tail.next = None\n\n        # Reverse the list\n        head = self.reverseList(head)\n\n        # Create a new list\n        newList = ListNode(0)\n        newList.next = head\n        \n        # Get the first node of the reversed list\n        head = newList\n        while head.next:\n            head = head.next\n        head.next = None\n\n        # Reverse the reversed list\n        tail = newList\n        while tail.next:\n            tail = tail.next\n        tail.next = None\n        \n        return self.reverseList(head)\n        \n    def reverseList(self, head):\n        if not head or not head.next:\n            return head\n        \n        curr = head\n        next = head.next\n        while next:\n            next.next = curr\n            curr = next\n            next = next.next\n        return curr"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(-1)\n        prev = dummy\n        while head:\n            curr = head\n            head = head.next\n            prev.next = curr\n            prev = curr\n        return dummy.next"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/concatenated-string/description/\n\nclass Solution(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return ''\n        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        elif n == 2:\n            return str(nums[0]) + str(nums[1])\n        else:\n            return str(nums[0]) + str(nums[1]) + str(nums[2]) + str(nums[3])"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def concatenate_all(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: str\n    \"\"\"\n    return ''.join(str(e) for e in lst)\n\n# Your Solution\n\n# Note:\n# The given list lst is always non-empty.\n# The length of the list is in the range [1, 100].\n# The sum of all elements in the list is in the range [1, 200].\n# Do not use any built-in library function such as\n# list, str, or dict."
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def concatenate(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while p.next:\n            p = p.next\n        p = dummy\n        while p.next:\n            p.next = p.next.next\n        return dummy.next"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return ''\n\n        res = str(nums[0])\n        for n in nums[1:]:\n            res += str(n)\n        return res\n\ndef main():\n    nums = [1, 2, 3, 4, 5]\n    print Solution().concat(nums)\n    nums = [1, 2, 3, 4, 5, 6]\n    print Solution().concat(nums)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from collections import deque\n\ndef concat_list(list_of_strings):\n    \"\"\"\n    Given a list of strings, concatenate all elements of the list into a string.\n\n    Input:\n    list_of_strings = [1, 2, 3]\n\n    Output:\n    concatenated_string = '123'\n\n    Explanation:\n    We can simply concatenate each element of the list to a string.\n    \"\"\"\n    concatenated_string = ''\n    for element in list_of_strings:\n        concatenated_string += element\n    return concatenated_string\n\ndef main():\n    test_cases = [\n        [[1, 2, 3], '123'],\n        [[1, 2, 3, 4], '12345'],\n        [[1, 2, 3, 4, 5], '12345'],\n        [[1, 2, 3, 4, 5, 6], '12345'],\n        [[1, 2, 3, 4, 5, 6, 7], '12345'],\n        [[1, 2, 3, 4, 5, 6, 7, 8], '12345'],\n        [[1, 2, 3, 4, 5, 6, 7, 8, 9], '12345'],\n        [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], '12345']\n    ]\n\n    for test in test_cases:\n        print concat_list(test[0])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nimport timeit\n\ndef concat_all(lst):\n    return''.join(lst)\n\ndef main():\n    setup = 'from __main__ import concat_all'\n    print('Timeit: %f' % timeit.timeit('concat_all(range(10))', setup=setup))\n    print('Timeit: %f' % timeit.timeit('concat_all(range(10))', setup=setup))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/concatenated-string/\n\nclass Solution(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return ''.join([str(x) for x in nums])\n\nclass Solution2(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return ''.join([str(x) for x in nums])"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def concat(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n\n        prev = None\n        curr = head\n        while curr:\n            if prev:\n                prev.next = curr\n            prev = curr\n            curr = curr.next\n\n        return prev"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def concatList(self, head):\n        if head is None or head.next is None:\n            return head\n        \n        pre_node = head\n        cur_node = head.next\n        result = []\n        while cur_node is not None:\n            result.append(cur_node.val)\n            pre_node = cur_node\n            cur_node = cur_node.next\n        return pre_node\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    \n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    \n    print solution.concatList(head)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# +++your code here+++\n# Example:\n#\n# import sys\n# for s in sys.argv[1:]:\n#     print(s +''.join(concat(s)))\n#\n#\n# def concat(s):\n#     return [str(x) for x in s]\n\nclass Solution(object):\n    def concat(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: str\n        \"\"\"\n        s = \"\"\n        for x in A:\n            s += str(x)\n        return s"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/singly-linked-list-concatenation\n# https://www.codewars.com/kata/singly-linked-list-concatenation/train/python\n\ndef concatenate_linked_list(head):\n    \"\"\"\n    :type head: ListNode\n    :rtype: ListNode\n    \"\"\"\n    if not head:\n        return None\n    pre = head\n    curr = head.next\n    while curr:\n        pre.next = curr\n        pre = curr\n        curr = curr.next\n    return pre\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    print concatenate_linked_list(head).val"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def concat(list):\n    \"\"\"\n    Write a function to concatenate all elements of the given list into a string.\n\n    >>> concat([1, 2, 3])\n    '123'\n    >>> concat([])\n    ''\n    >>> concat([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    '123456789'\n    \"\"\"\n    if not list:\n        return ''\n    return ''.join([str(i) for i in list])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        curr = head\n        while curr:\n            curr = curr.next\n            \n        return head\n\na = ListNode(1)\nb = ListNode(2)\nc = ListNode(3)\nd = ListNode(4)\ne = ListNode(5)\nf = ListNode(6)\ng = ListNode(7)\nh = ListNode(8)\ni = ListNode(9)\nj = ListNode(10)\n\na.next = b\nb.next = c\nc.next = d\nd.next = e\ne.next = f\nf.next = g\ng.next = h\nh.next = i\ni.next = j\n\ns = Solution()\nhead = s.concatList(a)\nprint head"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def getLinkedList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n\n        current = head\n        previous = None\n        while current:\n            current = current.next\n            if previous:\n                previous.next = current\n            previous = current\n        return head\n\n# Time:  O(n)\n# Space: O(1)\n#\n# Iterative:\n#\n# https://leetcode.com/problems/concatenated-linked-list/discuss/61116/Java-O(n)-Space-O(1)-Time-Solution-in-Python\n#\n# Iterative:\n#\n# https://leetcode.com/problems/concatenated-linked-list/discuss/61116/Java-O(n)-Space-O(1)-Time-Solution-in-Python\n#\n# Recursive:\n#\n# https://leetcode.com/problems/concatenated-linked-list/discuss/61116/Java-O(n)-Space-O(1)-Time-Solution-in-Python"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "#!/bin/python\n\nclass Solution:\n    # @param {ListNode} head\n    # @return {string}\n    def concat(self, head):\n        if not head: return ''\n        res = ''\n        while head:\n            res += str(head.val)\n            head = head.next\n        return res\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.concat([1,2,3,4,5,6])"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/singly-linked-list/problem\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def concat(self, head: ListNode) -> ListNode:\n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        curr = head\n        while curr.next is not None:\n            curr = curr.next\n        curr.next = None\n        return head"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def concat(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        return dummy.next"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return ''.join([str(i) for i in nums])"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "# Your Codecademy Solution\n# def concatenate(lst):\n#     return \"\".join(lst)\n\n\n# Your Codecademy Solution\ndef concatenate(lst):\n    return \"\".join(str(i) for i in lst)"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/string-concatenation/problem\n\ndef concatenate_list(list_):\n    result = []\n    for i in list_:\n        result.append(i)\n    return ''.join(result)\n\nif __name__ == '__main__':\n    list_ = [1, 2, 3, 4, 5]\n    print(concatenate_list(list_))\n    list_ = [1, 2, 3, 4]\n    print(concatenate_list(list_))\n    list_ = [1, 2]\n    print(concatenate_list(list_))\n    list_ = [1]\n    print(concatenate_list(list_))"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def concat(self, head: TreeNode, tail: TreeNode) -> TreeNode:\n        if not head or not tail:\n            return head\n        elif head.val < tail.val:\n            head.right = self.concat(head.right, tail)\n            return head\n        else:\n            head.left = self.concat(head.left, tail)\n            return head"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head: return None\n        \n        cur = head\n        while cur:\n            next = cur.next\n            cur.next = None\n            cur = next\n        \n        cur = head\n        while cur:\n            next = cur.next\n            cur.next = None\n            cur = next\n        \n        head = None\n        cur = head\n        while cur:\n            next = cur.next\n            cur.next = None\n            cur = next\n        \n        return head"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "def concatenate_all(lst):\n    result = ''\n    for elem in lst:\n        result += str(elem) +''\n    return result[:-1]\n\nprint concatenate_all([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def concat(self, head):\n        if head == None:\n            return None\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)\n        #head = head.next\n        #head = ListNode(head.val, head.next)"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "def concat(list):\n    \"\"\"\n    >>> concat([1, 2, 3, 4])\n    '123'\n    >>> concat([])\n    ''\n    \"\"\"\n    if not list:\n        return ''\n    return ''.join(list)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a string\n    def concat(self, head):\n        if head is None:\n            return None\n        if head.next is None:\n            return head.val\n        res = self.concat(head.next)\n        head.next = None\n        return res + head.val\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(15)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from collections import deque\n\ndef concatenate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: str\n    \"\"\"\n    s = ''\n    for i in nums:\n        s += str(i)\n    return s\n\ndef test():\n    assert concatenate([1,2,3,4,5,6,7,8,9,10]) == '123456789'\n    assert concatenate([]) == ''\n    assert concatenate([1,2,3,4,5,6,7,8,9,10,11]) == '12345678901'\n    assert concatenate([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def concat_all(lst):\n    return ''.join(lst)\n\nprint concat_all([1,2,3,4,5])\nprint concat_all([1,2,3,4,5,6])"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def concat_list(ls):\n    \"\"\"\n    :type ls: List[int]\n    :rtype: str\n    \"\"\"\n    return \"\".join(map(str, ls))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def concatenate(ls):\n    # +++your code here+++\n    return''.join(ls)\n\nif __name__ == '__main__':\n    assert concatenate([1,2,3,4,5,6,7]) == '1 2 3 4 5 6 7'\n    assert concatenate([]) == ''\n    assert concatenate([1,2,3,4,5]) == '1 2 3 4 5'\n    assert concatenate([1,2,3,4,5,6,7]) == '1 2 3 4 5 6 7'\n    assert concatenate([1,2,3,4,5,6]) == '1 2 3 4 5 6'\n    assert concatenate([1,2,3,4,5,6,7,8]) == '1 2 3 4 5 6 7 8'\n    assert concatenate([1,2,3,4,5,6,7,8,9]) == '1 2 3 4 5 6 7 8 9'"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        s = ''\n        for i in nums:\n            s += str(i)\n        return s\n\n\nif __name__ == \"__main__\":\n    assert Solution().concat([1, 2, 3, 4]) == '123'"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def concat(xs):\n    return ''.join(xs)\n\n\nif __name__ == '__main__':\n    assert concat([]) == ''\n    assert concat([1]) == '1'\n    assert concat([1, 2]) == '1, 2'\n    assert concat([1, 2, 3]) == '1, 2, 3'\n    assert concat([1, 2, 3, 4]) == '1, 2, 3, 4'"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def concat(self, root: TreeNode, s: str) -> str:\n        def helper(root, s):\n            if not root:\n                return ''\n            s += str(root.val)\n            s += '('\n            s += str(root.left) if root.left else ''\n            s += ',' if root.left else ''\n            s += str(root.right) if root.right else ''\n            s += ')'\n            s += str(helper(root.left, s))\n            s += str(helper(root.right, s))\n            return s\n        return helper(root, s)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# TODO: Implement the function.\n\ndef concatenate_list(list):\n    return''.join(list)\n\nif __name__ == '__main__':\n    print concatenate_list([1, 2, 3, 4])\n    print concatenate_list([1, 2, 3, 4, 5, 6, 7, 8])"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "# Your function will be called as follows:\n# concat_list_elements(n) where n is the length of the list\n# Example: concat_list_elements([1,2,3]) -> \"123\"\n\ndef concat_list_elements(n):\n    string = ''\n    for x in range(n):\n        string = string + str(x)\n    return string\n\nprint(concat_list_elements(3))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import sys\n\nclass Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        \n        num_strs = [str(i) for i in nums]\n        return \"\".join(num_strs)\n\ndef main():\n    sol = Solution()\n    print sol.concat([1, 2, 3, 4])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nfrom __future__ import print_function\nfrom collections import namedtuple\n\n# A named tuple for storing a pair of strings.\nPair = namedtuple('Pair', 'first second')\n\n\ndef concatenate_list(lst):\n    \"\"\"\n    Concatenate the elements in the given list into a string.\n    \"\"\"\n    return ''.join(lst)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print('Given list:')\n    print(concatenate_list([Pair('a', 'b'), Pair('c', 'd'), Pair('e', 'f')]))\n    print()\n\n    print('Given list:')\n    print(concatenate_list(['a', 'b', 'c']))\n    print()\n\n    print('Given list:')\n    print(concatenate_list([['a', 'b'], ['c', 'd'], ['e', 'f']]))\n    print()\n\n    print('Given list:')\n    print(concatenate_list([Pair('a', 'b'), Pair('c', 'd'), Pair('e', 'f')]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def concat(lst):\n    return ''.join(lst)\n\n#print concat([1, 2, 3, 4, 5, 6])"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return ''\n        else:\n            return ''.join(map(str, nums))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.concat([1, 2, 3]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return ''.join(str(x) for x in nums)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        return str(sum(nums))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\n# Complete the concatList function below.\ndef concatList(nums):\n    return ''.join(str(elem) for elem in nums)\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6]\n    print concatList(nums)\n    nums = [7, 8, 9, 10, 11, 12]\n    print concatList(nums)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concatList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return ''.join(str(x) for x in nums)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        strs = []\n        for n in nums:\n            strs.append(str(n))\n        return \"\".join(strs)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def concat(self, root: TreeNode, s: str) -> str:\n        if not root: return s\n        s += str(root.val)\n        if root.left: s += self.concat(root.left, s)\n        if root.right: s += self.concat(root.right, s)\n        return s"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def concat(lst):\n    return ''.join(lst)\n\n# Your Solution\n# def concat(lst):\n#     return ''.join(lst)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "# Approach 1: Iterate through the list and concatenate the elements.\n# Time complexity: O(n)\n# Space complexity: O(n)\n# Approach 2: Use a stack.\n# Time complexity: O(n)\n# Space complexity: O(1)\n\ndef concatenate_all(list):\n    # Approach 1: Iterate through the list and concatenate the elements.\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    s = ''\n    for i in list:\n        s += i\n    return s\n\n\n# Approach 2: Use a stack.\n# Time complexity: O(n)\n# Space complexity: O(1)\n\ndef concatenate_all_2(list):\n    # Approach 2: Use a stack.\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    stack = []\n    for i in list:\n        stack.append(i)\n    while stack:\n        yield stack.pop()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concatList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if len(nums) <= 1:\n            return str(nums[0])\n        else:\n            return''.join(str(x) for x in nums)\n\nif __name__ == \"__main__\":\n    print Solution().concatList([1, 2, 3, 4])\n    print Solution().concatList([1, 2, 3])"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/concatenate-strings/problem\n\ndef concatenate(lst):\n    # Complete this function\n    return reduce(lambda x,y: x+y, lst)\n\nif __name__ == '__main__':\n    lst = [int(x) for x in input().split()]\n    print(concatenate(lst))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def concatenate_list(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: str\n    \"\"\"\n    \n    return \"\".join(str(x) for x in numbers)\n\nif __name__ == \"__main__\":\n    assert concatenate_list([1, 2, 3, 4]) == \"123\""
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @return {String}\n    def concatenate(self, head):\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next:\n            curr = curr.next\n        \n        s = ''\n        while curr!= dummy:\n            s += curr.val\n            curr = curr.next\n        return s"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "# Your code here.\n\ndef concatenate(list):\n    if list:\n        return list[0] + concatenate(list[1:])\n    else:\n        return ''\n\ndef test_concatenate():\n    assert concatenate([1,2,3]) == '123'\n    assert concatenate([]) == ''\n\nif __name__ == '__main__':\n    test_concatenate()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        s = \"\"\n        for n in nums:\n            s += str(n)\n        return s"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return ''.join(str(elem) for elem in nums)\n\nif __name__ == '__main__':\n    print Solution().concat([1,2,3])\n    print Solution().concat([1,2,3,4])\n    print Solution().concat([1,2,3,4,5])\n    print Solution().concat([1,2,3,4,5,6])"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# Tries\n# for i in range(1,10):\n#     print(i)\n#     print(len(str(i)))\n#     print(str(i))\n\ndef concat(lst):\n    return ''.join(lst)\n\n# Tests\n# print(concat([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n# print(concat(['a', 'b', 'c']))\n# print(concat([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print(concat(['a', 'b', 'c']))\n# print("
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        res = ''\n        for num in nums:\n            res = res + str(num)\n        return res"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return ''.join(map(str, nums))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/concatenated-strings/\n\nclass Solution(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        res = []\n        for n in nums:\n            res.append(str(n))\n        return \"\".join(res)\n\n\nif __name__ == \"__main__\":\n    assert Solution().concatenate([1, 2, 3]) == \"123\"\n    assert Solution().concatenate([]) == \"\""
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/string-concatenation\n\n# TODO:\n# - check for null values\n# - implement string concatenation in a more efficient manner\n\ndef concatenate(lst):\n    \"\"\"\n    Concatenate all elements of the given list into a string.\n    :type lst: List[str]\n    :rtype: str\n    \"\"\"\n    # TODO: check for null values\n    # TODO: implement string concatenation in a more efficient manner\n    return \"\".join(lst)\n\n\nif __name__ == \"__main__\":\n    # TODO: test cases\n    assert concatenate([]) == \"\"\n    assert concatenate([1]) == \"1\"\n    assert concatenate([\"a\", \"b\", \"c\"]) == \"abc\""
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/concatenate-strings/description/\n# Implement the concatenateStrings(nums) function.\n#\n# concatenateStrings(nums)\n# Returns: The string formed by concatenating all the elements of nums to one string.\n#\n# Example:\n#\n# concatenateStrings([1, 2, 3, 4]) -> \"123\"\n# concatenateStrings([1, 2, 3, 4, 5]) -> \"12345\"\n# concatenateStrings([1, 2, 3]) -> \"123\"\n# concatenateStrings([1, 2, 3, 4, 5, 6, 7]) -> \"1234567\"\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {string}\n    def concatenateStrings(self, nums):\n        if not nums:\n            return \"\"\n        \n        result = \"\"\n        for i in range(len(nums)):\n            result += str(nums[i])\n        \n        return result"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/concatenate-all-elements-of-the-given-list/\n\nclass Solution(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        \n        # write your code here\n        s = \"\"\n        for i in range(0, len(nums)):\n            s += str(nums[i])\n            if i < len(nums) - 1:\n                s += \" \"\n        return s\n\n    def concatenate2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        \n        # write your code here\n        s = \"\"\n        for i in range(0, len(nums)):\n            if i > 0:\n                s += \" \"\n            s += str(nums[i])\n        return s\n\n    def concatenate3(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        \n        # write your code here\n        s = \"\"\n        for i in range(0, len(nums)):\n            if i > 0:\n                s += \" \"\n            s += str(nums[i])\n        return s"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return ''\n        if len(nums) == 1:\n            return str(nums[0])\n        res = []\n        for i in range(len(nums)):\n            res.append(str(nums[i]))\n        return ''.join(res)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        if not head.next:\n            return head\n        head1 = head\n        head2 = head.next\n        while head1 and head2:\n            head1 = head1.next\n            head2 = head2.next\n        if not head1:\n            return head2\n        if not head2:\n            return head1\n        head1.next = head2\n        return head1"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        prev = None\n        curr = head\n        while curr:\n            if prev:\n                prev.next = curr\n            prev = curr\n            curr = curr.next\n        return prev\n\nclass Solution2(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        prev = None\n        curr = head\n        while curr:\n            if prev:\n                prev.next = curr\n            prev = curr\n            curr = curr.next\n        return prev\n\nclass Solution3(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        prev = None\n        curr = head\n        while curr:\n            if prev:\n                prev.next = curr\n            prev = curr\n            curr = curr.next\n        return prev\n\nclass Solution4(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        curr = head\n        prev = None\n        while curr:\n            if prev:\n                prev.next = curr\n            prev = curr\n            curr = curr.next\n        return prev\n\nif __name__ == '__main__':\n    s = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {string}\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(len(nums)):\n            if i == len(nums) - 1:\n                res += str(nums[i])\n            else:\n                res += str(nums[i]) +''\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.concat([1,2,3])"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/concatenated-string/#/description\n\nclass Solution(object):\n    def concatAll(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return ''\n\n        # use the first element to determine the length of the string\n        length = len(nums[0])\n        # use the length of the first element to determine the number of elements\n        count = len(nums)\n\n        # create a string buffer to store the result\n        result = ''\n\n        # iterate through the list\n        for i in range(0, count):\n            # append the elements to the buffer\n            result += nums[i]\n\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n\n    # test cases\n    assert s.concatAll([1,2,3,4]) == '12345'\n    assert s.concatAll([]) == ''\n    assert s.concatAll([1]) == '1'\n    assert s.concatAll([1,2,3,4,5]) == '12345'"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/concatenate-all-the-elements-of-the-given-list/discuss/132676/Java-O(n)-easy-to-understand-and-very-fast-Java-solution\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def concat(self, l1: ListNode, l2: ListNode) -> ListNode:\n        result = ListNode(0)\n        while l1 is not None or l2 is not None:\n            if l1 is None:\n                result.next = l2\n                l2 = l2.next\n            else:\n                if l2 is None:\n                    result.next = l1\n                    l1 = l1.next\n                else:\n                    if l1.val < l2.val:\n                        result.next = l1\n                        l1 = l1.next\n                    else:\n                        result.next = l2\n                        l2 = l2.next\n        return result\n\n# Note:\n# 1. The result is a list, not a single linked list.\n# 2. The input list may be empty.\n\nimport unittest\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/concatenate-all-the-elements-of-the-given-list/solution/\n\n# 1ms 100%\nclass Solution {\n    public ListNode concat(ListNode l1, ListNode l2) {\n        ListNode result = new ListNode(0);\n        while (l1!= null || l2!= null) {\n            if (l1!= null) {\n                result.next = new ListNode(l1.val);\n                l1 = l1.next;\n            } else {\n                result.next = l2;"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "import collections\n\n\nclass Solution(object):\n    def concatList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        # https://leetcode.com/problems/concatenated-list/discuss/257528/C-python-solution-using-a-list\n        # TODO: make this recursive\n        # TODO: make this iterative\n        # TODO: make this O(N)\n        if not nums:\n            return ''\n        # NOTE: the following solution is not efficient\n        # if len(nums) == 1:\n        #     return str(nums[0])\n        # if len(nums) == 2:\n        #     return ''.join(map(str, nums))\n        # if len(nums) == 3:\n        #     return ''.join(map(str, nums)) + ''.join(map(str, nums[1:]))\n        # if len(nums) == 4:\n        #     return ''.join(map(str, nums)) + ''.join(map(str, nums[1:])) + ''.join(map(str, nums[2:]))\n        # if len(nums) == 5:\n        #     return ''.join(map(str, nums)) + ''.join(map(str, nums[1:])) + ''.join(map(str, nums[2:])) + ''.join(map(str, nums[3:]))\n        # if len(nums) == 6:\n        #     return ''.join(map(str, nums)) + ''.join(map(str, nums[1:])) + ''.join(map(str, nums[2:])) + ''.join(map(str, nums[3:])) + ''.join(map(str, nums[4:]))\n        # if len(nums) == 7:\n        #     return ''.join(map(str, nums)) + ''.join(map(str, nums[1:])) + ''.join(map(str, nums[2:])) +"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/sorted-array/problem\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/295518\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/273964\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/146864\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/361439\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/134885\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/175555\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/135564\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/358970\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/302875\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/249963\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/257516\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/117768\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/203791\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/144938\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/111492\n# https://www.hackerrank.com/challenges/sorted-array/submissions/code/122496\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\ndef concat_array(arr):\n    res = []\n    for i in range(len("
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport unittest\n\nfrom solution import concatenate\n\n\nclass TestSolution(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(\"\", concatenate([], 0))\n\n    def test_concatenate_with_one_element(self):\n        self.assertEqual(\"1\", concatenate([1], 1))\n\n    def test_concatenate_with_three_elements(self):\n        self.assertEqual(\"123\", concatenate([1, 2, 3], 3))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/concatenated-string/\nclass Solution(object):\n    def concatAll(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: str\n        \"\"\"\n        ret = ''\n        for i in A:\n            ret += i\n        return ret\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.concatAll(['a', 'b', 'c', 'd', 'e']))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n\nclass Solution(object):\n    def concatList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        s = \"\"\n        for i in range(len(nums)):\n            if i > 0:\n                s += \" \"\n            s += str(nums[i])\n        return s\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.concatList([1,2,3,4,5])\n    print sol.concatList([1,2,3,4,5,6])"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(len(nums)):\n            res += str(nums[i])\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.concat([1, 2, 3]))\n    print(sol.concat([1, 2, 3, 4, 5]))\n    print(sol.concat([1, 2, 3, 4, 5, 6, 7]))\n    print(sol.concat([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def concatList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        ans = head\n        while ans.next:\n            ans = ans.next\n        return ans"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# +++your code here+++\n# Example:\n# list = [1, 2, 3]\n# concatenate_list(list)\n# >>> '1, 2, 3'\n\ndef concatenate_list(list):\n    if not list:\n        return ''\n    return ','.join(list)\n\n# Note:\n# A solution using recursion is trivial."
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/concatenated-string/\n\nclass Solution(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        return \"\".join(str(num) for num in nums)\n\nclass Solution2(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        res = \"\"\n        for num in nums:\n            res += str(num)\n        return res"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/concatenated-string/description/\n# https://leetcode.com/problems/concatenated-string/solution/\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution(object):\n    def concatenate(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        def add_nodes(head, cur_node):\n            if cur_node is None:\n                return\n            add_nodes(cur_node.next, head)\n            return cur_node\n\n        def add_node(head, cur_node):\n            if cur_node is None:\n                return\n            head.next = cur_node\n            return cur_node\n\n        if head is None:\n            return None\n        head = add_nodes(head, None)\n        return add_node(None, head)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Solution().concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(10))))))))))\n    assert Solution().concatenate([]) == None"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/string-concatenation\n# https://www.hackerrank.com/challenges/string-concatenation-ii\n\n\ndef concatenate_string(list_of_strings):\n    \"\"\"\n    Args:\n        list_of_strings: A list of strings.\n\n    Returns:\n        A string.\n    \"\"\"\n    s = ''\n    for i in range(len(list_of_strings)):\n        s += list_of_strings[i]\n    return s\n\n\ndef main():\n    list_of_strings = [1, 2, 3, 4, 5]\n    print(concatenate_string(list_of_strings))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution:\n    def getStr(self, lst):\n        return ''.join(map(str, lst))\n\n    def concat(self, lst):\n        if not lst:\n            return ''\n\n        if len(lst) == 1:\n            return lst[0]\n\n        return self.getStr([self.concat(lst[:-1]), lst[-1]])\n\n    def concat_list(self, lst):\n        return '[' + ','.join(map(str, lst)) + ']'\n\n    def concat_list_2(self, lst):\n        return ','.join(map(str, lst))\n\n    def concat_list_3(self, lst):\n        return '[' + ','.join(map(str, lst)) + ']'\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.concat(param_1)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/concatenate-the-strings\n\n# @include\ndef concatenate_strings(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_2(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_3(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_4(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_5(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_6(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_7(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_8(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_9(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_10(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_11(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_strings_12(L):\n    return ''.join(str(elem) for elem in L)\n# @exclude\n\n# @include\ndef concatenate_"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def concat(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return \"\"\n        s = str(nums[0])\n        for n in nums[1:]:\n            s += str(n)\n        return s\n\n\nif __name__ == \"__main__\":\n    assert Solution().concat([1, 2, 3, 4, 5]) == \"12345\"\n    assert Solution().concat([]) == \"\""
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/concatenated-string/\n\n# Example 1:\n# Input: [\"Hello\", \"World\"]\n# Output: \"Hello World\"\n# Example 2:\n# Input: [\"Hello\", \"M\", \"ello\"]\n# Output: \"Hello Mello\"\n# Example 3:\n# Input: [\"\", \"\"]\n# Output: \"\"\n# Example 4:\n# Input: [\"\", \"\", \"\"]\n# Output: \"\"\n# Example 5:\n# Input: [\"\",\"\",\"\"]\n# Output: \"\"\n# Note:\n# The input list will have length in range [1, 100].\n# Every element of the input list will be a non-empty string with length in range [1, 10].\n\nclass Solution(object):\n    def concatenate(self, nums):\n        \"\"\"\n        :type nums: List[str]\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for num in nums:\n            res += num\n        return res"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import sys\n\n# @include\ndef concatenate(L):\n    return ''.join(map(str, L))\n# @exclude\n\n\ndef main():\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate([1, 2, 3]))\n    print(concatenate(["
    }
  ]
}