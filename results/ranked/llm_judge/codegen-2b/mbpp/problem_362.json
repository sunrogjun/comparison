{
  "timestamp": "2025-09-14T20:03:26.516479",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 362,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import math\n\ndef volume(x, y, z):\n    \"\"\"\n    x, y, z: dimensions of the cuboid\n    \"\"\"\n    return math.pi * (x * y * z)\n\nif __name__ == '__main__':\n    assert volume(2, 3, 4) == 24\n    assert volume(1, 2, 3) == 6\n    assert volume(2, 2, 2) == 4\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1) == 1\n    assert volume(1, 1, 1)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def volume(length, width, height):\n    return length * width * height\n\ndef test_volume():\n    assert volume(2, 3, 4) == 24\n    assert volume(4, 3, 2) == 12\n    assert volume(3, 4, 3) == 12\n\nif __name__ == \"__main__\":\n    test_volume()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef volume(x, y, z):\n    return x * y * z\n\ndef cuboid(x, y, z):\n    return volume(x, y, z)\n\ndef main():\n    print(cuboid(1, 2, 3))\n    print(cuboid(2, 3, 4))\n    print(cuboid(3, 4, 5))\n    print(cuboid(4, 5, 6))\n    print(cuboid(5, 6, 7))\n    print(cuboid(6, 7, 8))\n    print(cuboid(7, 8, 9))\n    print(cuboid(8, 9, 10))\n    print(cuboid(9, 10, 11))\n    print(cuboid(10, 11, 12))\n    print(cuboid(11, 12, 13))\n    print(cuboid(12, 13, 14))\n    print(cuboid(13, 14, 15))\n    print(cuboid(14, 15, 16))\n    print(cuboid(15, 16, 17))\n    print(cuboid(16, 17, 18))\n    print(cuboid(17, 18, 19))\n    print(cuboid(18, 19, 20))\n    print(cuboid(19, 20, 21))\n    print(cuboid(20, 21, 22))\n    print(cuboid(21, 22, 23))\n    print(cuboid(22, 23, 24))\n    print(cuboid(23, 24, 25))\n    print(cuboid(24, 25, 26))\n    print(cuboid(25, 26, 27))\n    print(cuboid(26, 27, 28))\n    print(cuboid(27, 28, 29))\n    print(cuboid(28, 29, 30))\n    print(cuboid(29, 30, 31))\n    print(cuboid(30, 31, 32))\n    print(cuboid(31, 32, 33))\n    print(cuboid(32, 33, 34))\n    print(cuboid(33, 34"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "#%%\nimport math\nfrom math import *\n\ndef cuboid_volume(l, h, w, d):\n    return l * h * w * d\n\n#%%\n#  Write a function to calculate the volume of a cuboid\n#  using the formula:\n#  V = (l * h * w + l * h + l) * (d * w + d) * (d * h + d)\n#\ndef cuboid_volume(l, h, w, d):\n    return (l * h * w + l * h + l) * (d * w + d) * (d * h + d)\n\n#%%\n#  Write a function to calculate the volume of a cuboid\n#  using the formula:\n#  V = l * h * w + l * h + l\n#\ndef cuboid_volume(l, h, w, d):\n    return l * h * w + l * h + l\n\n#%%\n#  Write a function to calculate the volume of a cuboid\n#  using the formula:\n#  V = (l * h * w + l * h + l) * (d * w + d) * (d * h + d)\n#\ndef cuboid_volume(l, h, w, d):\n    return (l * h * w + l * h + l) * (d * w + d) * (d * h + d)\n\n#%%\n#  Write a function to calculate the volume of a cuboid\n#  using the formula:\n#  V = (l * h * w + l * h + l) * (d * w + d) * (d * h + d)\n#\ndef cuboid_volume(l, h, w, d):\n    return (l * h * w + l * h + l) * (d * w + d) * (d * h + d)\n\n#%%\n#  Write a function to calculate the volume of a cuboid\n#  using the formula:\n#  V = l * h * w + l * h + l\n#\ndef cuboid_volume(l, h, w, d):\n    return l * h * w + l * h + l\n\n#%%\n#"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "__author__ = 'Libao Jin'\n__date__ = 'December 18, 2015'\n\nclass Solution:\n    \"\"\"\n    @param sideA the size of one side of a cuboid\n    @param sideB the size of another side of a cuboid\n    @return the volume of the cuboid\n    \"\"\"\n    def volume(self, sideA, sideB):\n        \"\"\"\n        @param sideA the size of one side of a cuboid\n        @param sideB the size of another side of a cuboid\n        @return the volume of the cuboid\n        \"\"\"\n        return sideA * sideB"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/volume-of-a-cuboid/problem\n\n# In case you're curious, the volume of a cuboid is the area of the cube\n# with the dimensions of the cuboid\n\ndef cuboid_volume(x, y, z):\n    \"\"\"\n    :param x: The length of the side of the cuboid\n    :param y: The length of the side of the cuboid\n    :param z: The length of the side of the cuboid\n    :return: The volume of the cuboid\n    \"\"\"\n\n    return (x * y * z) / 2\n\n\nif __name__ == '__main__':\n    x, y, z = map(int, input().strip().split(' '))\n    print(cuboid_volume(x, y, z))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n# Definition for a cuboid\nclass Cuboid(object):\n    def __init__(self, l, w, h):\n        \"\"\"\n        l: length\n        w: width\n        h: height\n        \"\"\"\n        self.l = l\n        self.w = w\n        self.h = h\n\n    def volume(self):\n        return (self.l * self.w * self.h) / 3\n\n\nclass Solution(object):\n    def volume(self, cuboid):\n        \"\"\"\n        :type cuboid: Cuboid\n        :rtype: int\n        \"\"\"\n        l = cuboid.l\n        w = cuboid.w\n        h = cuboid.h\n        return (l * w * h) / 3\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.volume(Cuboid(3, 4, 5))\n    print s.volume(Cuboid(1, 2, 3))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import math\n\n\ndef volume(l, w, h):\n    return l * w * h\n\n\ndef volume_cuboid(l, w, h):\n    return volume(l, w, h) - volume(l, 0, h) - volume(l, w, 0) - volume(l, 0, 0)\n\n\ndef test_volume_cuboid():\n    assert volume_cuboid(3, 4, 5) == volume(3, 4, 5)\n    assert volume_cuboid(5, 5, 5) == volume(5, 5, 5)\n    assert volume_cuboid(5, 4, 4) == volume(5, 4, 4)\n    assert volume_cuboid(5, 5, 4) == volume(5, 5, 4)\n    assert volume_cuboid(5, 4, 5) == volume(5, 4, 5)\n    assert volume_cuboid(4, 4, 4) == volume(4, 4, 4)\n\n\nif __name__ == '__main__':\n    test_volume_cuboid()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# The formula is (x^3 + y^3 + z^3) / 6\n# The formula can be simplified to (x^3 + y^3 + z^3 - 2) / 6\n# The formula can also be simplified to (x^2 + y^2 + z^2) / 6\n# The formula can also be simplified to (x^2 + y^2 + z^2 - 2) / 6\n# The formula can also be simplified to (x^2 + y^2 + z^2 - 2) / 6\n\ndef volume(x, y, z):\n    return (x**3 + y**3 + z**3) / 6\n\nprint(volume(1, 2, 3))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def cuboid_volume(a,b,c,d,e,f):\n    return a * b * c * d * e * f\n\ndef main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    d = int(input())\n    e = int(input())\n    f = int(input())\n    print(cuboid_volume(a,b,c,d,e,f))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import math\n\ndef volume(a, b, c, d):\n    \"\"\"\n    Input:\n    a, b, c, d are the dimensions of the cuboid.\n    \n    Output:\n    The volume of the cuboid.\n    \n    \"\"\"\n    return (a*b*c*d)\n\nprint volume(3, 4, 5, 6)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/volume-of-a-cuboid\n\ndef volume(length, breadth, height):\n    return length * breadth * height\n\ndef main():\n    length = int(input())\n    breadth = int(input())\n    height = int(input())\n    volume = volume(length, breadth, height)\n    print(volume)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import math\nimport sys\n\ndef volume(a, b, c, d):\n    return (a*b*c) / 3.0\n\ndef main():\n    test_cases = open(sys.argv[1], 'r')\n    for test in test_cases:\n        test = test.strip()\n        a, b, c, d = map(float, test.split(' '))\n        print volume(a, b, c, d)\n    test_cases.close()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import math\n\ndef volume(a, b, c):\n    return (a * b * c) / 3\n\ndef volume_of_cuboid(a, b, c):\n    return volume(a, b, c)\n\ndef test():\n    assert volume(1, 2, 3) == volume_of_cuboid(1, 2, 3)\n\ntest()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/volume-of-a-cuboid/problem\n\n# Complete the volume function below.\ndef volume(x, y, z):\n    return x * y * z\n\n#Test cases\n#x = 0\n#y = 0\n#z = 0\n#print volume(x, y, z)\n#x = 1\n#y = 1\n#z = 1\n#print volume(x, y, z)\n#x = 2\n#y = 2\n#z = 2\n#print volume(x, y, z)\n#x = 3\n#y = 3\n#z = 3\n#print volume(x, y, z)\n#x = 4\n#y = 4\n#z = 4\n#print volume(x, y, z)\n#x = 5\n#y = 5\n#z = 5\n#print volume(x, y, z)\n\n# Complete the volume function below.\ndef volume(x, y, z):\n    return x * y * z\n\nx = int(input())\ny = int(input())\nz = int(input())\nprint volume(x, y, z)"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\n\ndef cuboid_volume(dimensions):\n    \"\"\"\n    Return the volume of a cuboid with dimensions dimensions.\n\n    dimensions: tuple of 3 integers\n    \"\"\"\n    return dimensions[0] * dimensions[1] * dimensions[2]\n\n\ndef main():\n    \"\"\"\n    Unit tests for cuboid_volume().\n    \"\"\"\n    assert cuboid_volume((1, 1, 1)) == 1\n    assert cuboid_volume((3, 1, 1)) == 9\n    assert cuboid_volume((3, 3, 3)) == 27\n    assert cuboid_volume((3, 2, 3)) == 144\n    assert cuboid_volume((3, 3, 2)) == 27\n    assert cuboid_volume((2, 3, 3)) == 9\n    assert cuboid_volume((2, 3, 2)) == 4\n    assert cuboid_volume((2, 2, 3)) == 6\n    assert cuboid_volume((2, 2, 2)) == 4\n    assert cuboid_volume((1, 2, 3)) == 6\n    assert cuboid_volume((1, 1, 3)) == 3\n    assert cuboid_volume((1, 1, 1)) == 1\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import math\n\ndef cuboid_volume(x, y, z):\n    \"\"\"\n    x: the width of cuboid\n    y: the height of cuboid\n    z: the depth of cuboid\n    \"\"\"\n    return math.pi * x * y * z\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(cuboid_volume(2, 3, 4))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def volume(x, y, z):\n    \"\"\"\n    >>> volume(1, 1, 1)\n    1\n    >>> volume(3, 3, 3)\n    27\n    >>> volume(10, 10, 10)\n    274877906944\n    \"\"\"\n    return x * y * z\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "import math\nimport sys\n\ndef volume(x,y,z):\n    return x*y*z\n\ndef volume_cuboid(x,y,z):\n    return (x*y*z)/3\n\ndef main():\n    x, y, z = map(int, sys.argv[1:])\n    print volume(x,y,z)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import math\n\ndef volume(x, y, z):\n    return (x * y * z)\n\ndef volume_cuboid(x, y, z):\n    return volume(x, y, z) / 3\n\ndef test_volume_cuboid():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid2():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid3():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid4():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid5():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid6():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid7():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid8():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid9():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid10():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid11():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid12():\n    assert volume_cuboid(1, 2, 3) == volume(1, 2, 3)\n\ndef test_volume_cuboid13():\n    assert volume_cuboid(1, 2, 3) == volume"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def volume(l, b, h, w):\n    \"\"\"\n    >>> volume(2, 2, 2, 2)\n    16\n    >>> volume(2, 1, 2, 2)\n    8\n    >>> volume(2, 2, 2, 1)\n    16\n    >>> volume(2, 1, 2, 1)\n    4\n    >>> volume(2, 2, 2, 1)\n    4\n    >>> volume(2, 1, 1, 2)\n    2\n    >>> volume(2, 2, 1, 2)\n    2\n    >>> volume(2, 1, 1, 1)\n    1\n    >>> volume(2, 2, 1, 1)\n    1\n    >>> volume(1, 2, 2, 2)\n    4\n    >>> volume(1, 1, 2, 2)\n    2\n    >>> volume(1, 2, 2, 1)\n    2\n    >>> volume(1, 1, 2, 1)\n    1\n    >>> volume(1, 2, 1, 2)\n    2\n    >>> volume(1, 2, 1, 1)\n    1\n    >>> volume(1, 1, 1, 2)\n    1\n    >>> volume(1, 2, 1, 1)\n    1\n    \"\"\"\n    if l < 0 or b < 0 or h < 0 or w < 0:\n        return 0\n    return l * b * h * w\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def cuboid_volume(x, y, z):\n    \"\"\"\n    >>> cuboid_volume(1, 2, 3)\n    12\n    \"\"\"\n    return x * y * z\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def volume(self, volume):\n        \"\"\"\n        :type volume: int\n        :rtype: int\n        \"\"\"\n        if volume == 0:\n            return 0\n        return volume * (volume - 1) / 2\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.volume(0)\n    print s.volume(1)\n    print s.volume(2)\n    print s.volume(3)\n    print s.volume(4)\n    print s.volume(5)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "import math\n\n\ndef volume(a, b, c, d):\n    \"\"\"\n    Return the volume of a cuboid defined by the side lengths of the\n    cuboid.\n    \"\"\"\n    return (a * b * c) / 3.0\n\n\ndef main():\n    a = float(input(\"Enter side length of a: \"))\n    b = float(input(\"Enter side length of b: \"))\n    c = float(input(\"Enter side length of c: \"))\n    d = float(input(\"Enter side length of d: \"))\n    print(volume(a, b, c, d))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def volume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return x * y * z"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "import math\nimport operator\n\nclass Solution(object):\n    def volume(self, l, b, r, t):\n        \"\"\"\n        :type l: int\n        :type b: int\n        :type r: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        if l > r or b > t:\n            return 0\n        elif l == r and b == t:\n            return l * b\n        elif l == r:\n            return (b - t) * l\n        elif b == t:\n            return (r - l) * t\n        else:\n            return (r - l) * (t - b)\n\na = Solution()\nprint a.volume(1, 2, 3, 4)"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from __future__ import print_function\nimport math\n\n\ndef volume(l, w, h):\n    return l * w * h\n\n\ndef test():\n    assert volume(1, 1, 1) == 1\n    assert volume(2, 2, 2) == 4\n    assert volume(3, 3, 3) == 9\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "import math\n\ndef volume(x, y, z):\n    \"\"\"\n    Return the volume of a cuboid.\n\n    >>> volume(1, 2, 3, 4, 5, 6)\n    24\n    \"\"\"\n    return (x * y * z) / 3\n\ndef main():\n    print(volume(1, 2, 3, 4, 5, 6))\n    print(volume(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "import math\n\ndef volume(a, b, c, d):\n    return (a * b * c) / 3\n\ndef volume_cuboid(a, b, c, d):\n    return volume(a, b, c, d) * (d - a) * (c - b) * (b - a)\n\ndef test():\n    assert volume(3, 4, 5, 6) == volume_cuboid(3, 4, 5, 6)\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "import math\n\ndef cuboid_volume(side1, side2, side3):\n    \"\"\"\n    Return the volume of a cuboid with side length side1, side2 and side3\n    \"\"\"\n    return side1 * side2 * side3\n\ndef main():\n    print cuboid_volume(1, 1, 1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "import math\n\ndef volume(x1, y1, z1, x2, y2, z2):\n    \"\"\"\n    >>> volume(1, 1, 1, 2, 2, 2)\n    24\n    >>> volume(1, 1, 1, 3, 3, 3)\n    12\n    >>> volume(1, 1, 1, 4, 4, 4)\n    8\n    >>> volume(1, 1, 1, 1, 2, 2)\n    4\n    >>> volume(1, 1, 1, 2, 1, 2)\n    3\n    >>> volume(1, 1, 1, 2, 1, 3)\n    4\n    >>> volume(1, 1, 1, 2, 1, 4)\n    5\n    >>> volume(1, 1, 1, 2, 2, 1)\n    6\n    >>> volume(1, 1, 1, 2, 2, 2)\n    7\n    >>> volume(1, 1, 1, 2, 2, 3)\n    8\n    >>> volume(1, 1, 1, 2, 2, 4)\n    9\n    >>> volume(1, 1, 1, 2, 3, 1)\n    6\n    >>> volume(1, 1, 1, 2, 3, 2)\n    7\n    >>> volume(1, 1, 1, 2, 3, 3)\n    8\n    >>> volume(1, 1, 1, 2, 3, 4)\n    9\n    >>> volume(1, 1, 1, 2, 4, 1)\n    6\n    >>> volume(1, 1, 1, 2, 4, 2)\n    7\n    >>> volume(1, 1, 1, 2, 4, 3)\n    8\n    >>> volume(1, 1, 1, 2, 4, 4)\n    9\n    >>> volume(1, 1, 1, 3, 4, 1)\n    6\n    >>> volume(1, 1, 1, 3, 4, 2)\n    7\n    >>> volume(1, 1, 1, 3, 4, 3)\n    8\n    >>> volume(1, 1, 1, 3, 4, 4)\n    9\n    >>> volume(1, 1, 1, 4, 4, 1)\n    6\n    >>>"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def volume(width, length, height):\n    \"\"\"\n    :param width: length and height of a cuboid\n    :return: volume of the cuboid\n    \"\"\"\n    return width * length * height\n\nif __name__ == '__main__':\n    print(volume(3, 2, 1))\n    print(volume(5, 4, 3))\n    print(volume(2, 1, 5))\n    print(volume(1, 1, 1))\n    print(volume(1, 1, 1))\n    print(volume(1, 1, 1))\n    print(volume(1, 1, 1))\n    print(volume(1, 1, 1))\n    print(volume(1, 1, 1))\n    print(volume(1, 1, 1))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "import math\n\n\ndef volume(a, b, c, d):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :param d:\n    :return:\n    \"\"\"\n    return (a * b * c) / math.sqrt(a * a + b * b + c * c)\n\n\nif __name__ == \"__main__\":\n    print volume(3, 4, 5, 6)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import math\n\n\ndef volume(side_a, side_b):\n    \"\"\"\n    Returns the volume of a cuboid.\n\n    :param side_a: The length of one side of the cuboid.\n    :param side_b: The length of the other side of the cuboid.\n    :return: The volume of the cuboid.\n    \"\"\"\n    return side_a * side_b * math.pi\n\n\ndef test_volume():\n    assert volume(10, 10) == 100\n    assert volume(5, 5) == 25\n    assert volume(2, 2) == 4\n\n\nif __name__ == '__main__':\n    test_volume()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(x, y, z):\n    \"\"\"\n    Compute the volume of a cuboid.\n\n    Arguments:\n    x -- The x coordinate of the upper-left corner of the cuboid.\n    y -- The y coordinate of the upper-left corner of the cuboid.\n    z -- The z coordinate of the upper-left corner of the cuboid.\n    \"\"\"\n    return x * y * z\n\n\ndef test_volume():\n    assert volume(3, 4, 5) == 45\n    assert volume(3, 4, 5) == volume(1, 2, 3)\n\nif __name__ == \"__main__\":\n    test_volume()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import sys\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 3:\n        print \"Usage: python cuboid.py <height> <width>\".format(sys.argv[0])\n        sys.exit(1)\n\n    height = int(sys.argv[1])\n    width = int(sys.argv[2])\n\n    def volume(height, width):\n        if height == 0 or width == 0:\n            return 0\n        return height * width / 2\n\n    print volume(height, width)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(length, width, height):\n    \"\"\"\n    Calculate volume of a cuboid.\n\n    :param length: Length of the cuboid\n    :param width: Width of the cuboid\n    :param height: Height of the cuboid\n    :return: Volume of the cuboid\n    \"\"\"\n\n    return length * width * height\n\ndef main():\n    \"\"\"\n    Test cases for this module.\n    \"\"\"\n\n    print volume(1, 2, 3)\n    print volume(3, 4, 5)\n    print volume(5, 6, 7)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(a, b, c):\n    \"\"\"\n    Calculate the volume of a cuboid.\n\n    :param a: First dimension of the cuboid.\n    :param b: Second dimension of the cuboid.\n    :param c: Third dimension of the cuboid.\n    :return: Volume of the cuboid.\n    \"\"\"\n    # First dimension of the cuboid\n    # Second dimension of the cuboid\n    # Third dimension of the cuboid\n    return math.pi * (a**3) / 4\n\nprint volume(1, 2, 3)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_volume(length, width, height):\n    \"\"\"\n    length: Length of the cuboid\n    width: Width of the cuboid\n    height: Height of the cuboid\n    \"\"\"\n    return length * width * height\n\n# Test cases\nprint(cuboid_volume(1, 2, 3))\nprint(cuboid_volume(4, 5, 6))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_volume(l, w, h):\n    \"\"\"\n    Input:\n    l, w, h - length, width and height of cuboid\n    \n    Output:\n    volume - volume of cuboid\n    \"\"\"\n    return l * w * h\n    \ndef volume(l, w, h):\n    \"\"\"\n    Input:\n    l, w, h - length, width and height of cuboid\n    \n    Output:\n    volume - volume of cuboid\n    \"\"\"\n    return (l * w * h) / 3\n\ndef cuboid_volume_test():\n    assert cuboid_volume(4, 5, 6) == volume(4, 5, 6)\n    assert cuboid_volume(5, 4, 3) == volume(5, 4, 3)\n    assert cuboid_volume(5, 6, 3) == volume(5, 6, 3)\n    assert cuboid_volume(5, 6, 4) == volume(5, 6, 4)\n    assert cuboid_volume(6, 5, 3) == volume(6, 5, 3)\n    assert cuboid_volume(6, 5, 4) == volume(6, 5, 4)\n    assert cuboid_volume(6, 5, 5) == volume(6, 5, 5)\n    \ndef volume_test():\n    assert volume(4, 5, 6) == 6\n    assert volume(5, 4, 3) == 9\n    assert volume(5, 6, 3) == 15\n    assert volume(5, 6, 4) == 24\n    assert volume(6, 5, 3) == 15\n    assert volume(6, 5, 4) == 24\n    assert volume(6, 5, 5) == 45\n    \ndef main():\n    cuboid_volume_test()\n    volume_test()\n    \nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def cuboid_volume(x1, y1, z1, x2, y2, z2):\n    \"\"\"\n    Input:\n        x1, y1, z1, x2, y2, z2: the dimensions of the cuboid\n    Output:\n        volume: the volume of the cuboid\n    \"\"\"\n    x, y, z = x1, y1, z1\n    width = x2 - x1\n    height = y2 - y1\n    length = z2 - z1\n    volume = width * height * length\n    return volume\n\ndef test():\n    assert cuboid_volume(1, 2, 3, 4, 5, 6) == 144\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_volume(x, y, z):\n    return x * y * z\n\ndef main():\n    print(cuboid_volume(2, 2, 2))\n    print(cuboid_volume(1, 2, 3))\n    print(cuboid_volume(2, 1, 3))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def volume(height, width, length):\n    return height * width * length\n\ndef test():\n    assert volume(4, 5, 6) == 60\n    assert volume(1, 3, 4) == 6\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\nimport numpy as np\n\ndef volume(a,b,c,d):\n    \"\"\"\n    Calculate the volume of a cuboid.\n    a, b, c, d are the dimensions of the cuboid.\n    \"\"\"\n    return (a*b*c*d)/3\n\ndef main():\n    \"\"\"\n    Calculate the volume of a cuboid.\n    \"\"\"\n    a = input(\"Enter the dimensions of the cuboid: \")\n    a = float(a)\n    b = input(\"Enter the dimensions of the cuboid: \")\n    b = float(b)\n    c = input(\"Enter the dimensions of the cuboid: \")\n    c = float(c)\n    d = input(\"Enter the dimensions of the cuboid: \")\n    d = float(d)\n\n    print(\"Volume of a cuboid with dimensions: \", a, b, c, d)\n    print(\"Volume of a cuboid with dimensions: \", volume(a,b,c,d))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# pylint: disable=missing-docstring, invalid-name\n\nimport math\n\ndef cuboid_volume(width, height, depth):\n    \"\"\"\n    Returns the volume of a cuboid.\n\n    :param width: The width of the cuboid.\n    :param height: The height of the cuboid.\n    :param depth: The depth of the cuboid.\n\n    :returns: The volume of the cuboid.\n    \"\"\"\n    return math.pi * (width * height * depth) / 6\n\n\nif __name__ == '__main__':\n    print(cuboid_volume(2, 3, 4))\n    print(cuboid_volume(1, 2, 3))\n    print(cuboid_volume(4, 3, 2))\n    print(cuboid_volume(3, 2, 1))\n    print(cuboid_volume(1, 1, 1))\n    print(cuboid_volume(2, 2, 1))\n    print(cuboid_volume(1, 1, 2))\n    print(cuboid_volume(1, 1, 1))\n    print(cuboid_volume(2, 2, 2))\n    print(cuboid_volume(2, 2, 2))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(width, height, length):\n    \"\"\"\n    :param width:\n    :param height:\n    :param length:\n    :return:\n    \"\"\"\n    return width * height * length\n\nif __name__ == '__main__':\n    width, height, length = map(int, input().split())\n    print(volume(width, height, length))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def volume(length, width, height):\n    \"\"\"\n    :param length: length of the cuboid\n    :param width: width of the cuboid\n    :param height: height of the cuboid\n    :return: volume of the cuboid\n    \"\"\"\n    return length * width * height\n\nprint(volume(10, 10, 10))\nprint(volume(50, 50, 50))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def cuboid_volume(width, height, length):\n    return width * height * length\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(4, 2, 1))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef volume(l, w, h):\n    \"\"\"\n    >>> volume(1, 2, 3)\n    6.0\n    >>> volume(3, 2, 1)\n    12.0\n    >>> volume(1, 1, 1)\n    1.0\n    >>> volume(2, 2, 2)\n    4.0\n    >>> volume(3, 3, 2)\n    12.0\n    >>> volume(3, 3, 3)\n    36.0\n    \"\"\"\n    return l * w * h\n\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    assert volume(1, 2, 3) == 6.0\n    assert volume(3, 2, 1) == 12.0\n    assert volume(1, 1, 1) == 1.0\n    assert volume(2, 2, 2) == 4.0\n    assert volume(3, 3, 2) == 12.0\n    assert volume(3, 3, 3) == 36.0\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def volume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return x*y*z\n\nif __name__ == '__main__':\n    assert Solution().volume(2, 3, 4) == 24"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from __future__ import print_function\n\ndef volume(a, b, c, d):\n    return (a * b * c) / 3\n\ndef main():\n    a = int(input('Enter the width of the cuboid: '))\n    b = int(input('Enter the height of the cuboid: '))\n    c = int(input('Enter the depth of the cuboid: '))\n    d = int(input('Enter the length of the cuboid: '))\n    print('The volume of the cuboid is %d' % volume(a, b, c, d))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\nimport numpy as np\n\ndef cuboid_volume(a, b, c, d):\n    \"\"\"\n    Calculates volume of a cuboid.\n    \"\"\"\n    return (a*b*c*d) / 3.0\n\ndef main():\n    \"\"\"\n    Unit Test.\n    \"\"\"\n    print cuboid_volume(1, 2, 3, 4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import math\n\n# Returns the volume of a cuboid with given dimensions\n# @param length the length of the cuboid\n# @param width the width of the cuboid\n# @param height the height of the cuboid\ndef volume(length, width, height):\n    return length * width * height\n\n# Returns the volume of a cuboid with given dimensions\n# @param length the length of the cuboid\n# @param width the width of the cuboid\n# @param height the height of the cuboid\ndef volume(length, width, height):\n    return length * width * height\n\n# Returns the volume of a cuboid with given dimensions\n# @param length the length of the cuboid\n# @param width the width of the cuboid\n# @param height the height of the cuboid\ndef volume(length, width, height):\n    return length * width * height\n\n# Returns the volume of a cuboid with given dimensions\n# @param length the length of the cuboid\n# @param width the width of the cuboid\n# @param height the height of the cuboid\ndef volume(length, width, height):\n    return length * width * height\n\n# Returns the volume of a cuboid with given dimensions\n# @param length the length of the cuboid\n# @param width the width of the cuboid\n# @param height the height of the cuboid\ndef volume(length, width, height):\n    return length * width * height\n\n# Returns the volume of a cuboid with given dimensions\n# @param length the length of the cuboid\n# @param width the width of the cuboid\n# @param height the height of the cuboid\ndef volume(length, width, height):\n    return length * width * height\n\n# Returns the volume of a cuboid with given dimensions\n# @param length the length of the cuboid\n# @param width the width of the cuboid\n# @param height the height of the cuboid\ndef volume(length, width, height):\n    return length * width * height\n\n# Returns the volume of a cuboid with given dimensions\n# @param length the length of the cuboid\n# @param width the width of the cuboid\n# @param height the height of the cuboid\ndef volume(length, width, height):\n    return length *"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(side1, side2, side3):\n    \"\"\"\n    :param side1: The length of the side 1\n    :param side2: The length of the side 2\n    :param side3: The length of the side 3\n    :return: The volume of the cuboid\n    \"\"\"\n    return side1 * side2 * side3\n\ndef main():\n    \"\"\"\n    Write a function to find the volume of a cuboid.\n    \"\"\"\n    side1 = int(input(\"Input the length of side 1: \"))\n    side2 = int(input(\"Input the length of side 2: \"))\n    side3 = int(input(\"Input the length of side 3: \"))\n    print(\"Volume of a cuboid with side 1 = {}\".format(volume(side1, side2, side3)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef cuboid_volume(a, b, c, d):\n    \"\"\"\n    Return the volume of a cuboid with dimensions (a, b, c, d).\n\n    Example:\n    >>> cuboid_volume(3, 4, 5, 6)\n    12\n    \"\"\"\n    return np.prod(np.array((a, b, c, d)))\n\n\ndef main():\n    print(cuboid_volume(3, 4, 5, 6))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(x1, y1, z1, x2, y2, z2):\n    return ((x2 - x1) * (y2 - y1) * (z2 - z1)) / 3\n\nprint(\"Volume of a cube:\", volume(1, 1, 1, 10, 10, 10))\nprint(\"Volume of a cube:\", volume(1, 1, 1, 10, 10, 10))\nprint(\"Volume of a cube:\", volume(1, 1, 1, 10, 10, 10))\n\n\"\"\"\nOutput:\n\nVolume of a cube: 9.0\nVolume of a cube: 36.0\nVolume of a cube: 216.0\n\"\"\""
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef volume(a, b, c, d):\n    \"\"\"\n    Calculate the volume of a cuboid.\n\n    a, b, c, d: length of sides of the cuboid.\n    \"\"\"\n    return (a * b * c * d) / 3\n\n\ndef test_volume():\n    assert volume(3, 4, 5, 6) == 144\n    assert volume(2, 3, 4, 5) == 24\n    assert volume(3, 4, 5, 6) == 144\n\nif __name__ == '__main__':\n    test_volume()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_volume(a, b, c, d):\n    \"\"\"\n    Calculate volume of cuboid\n    \"\"\"\n    return (a * b * c) - (a * d * b) - (b * c * d) + (a * d * c) + (b * c * d)\n\nif __name__ == '__main__':\n    # Test cases\n    a = 3\n    b = 4\n    c = 5\n    d = 6\n    # Test case 1\n    print(cuboid_volume(a, b, c, d))\n    # Test case 2\n    print(cuboid_volume(5, 5, 5, 5))\n    # Test case 3\n    print(cuboid_volume(1, 3, 4, 5))\n    # Test case 4\n    print(cuboid_volume(2, 4, 5, 6))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "__author__ = 'Daniel'\n\n\nclass Point:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n\nclass Cuboid:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n\nclass Volume:\n    def __init__(self, point, cuboid):\n        self.point = point\n        self.cuboid = cuboid\n        self.volume = self.calculate_volume()\n\n    def calculate_volume(self):\n        a = self.point.x * self.point.y * self.point.z\n        b = self.cuboid.x * self.cuboid.y * self.cuboid.z\n        return a / b\n\n\ndef main():\n    print \"Enter a point and cuboid: \"\n    point = Point(int(input()), int(input()), int(input()))\n    cuboid = Cuboid(int(input()), int(input()), int(input()))\n    volume = Volume(point, cuboid)\n    print \"Volume is {}\".format(volume.volume)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def volume(l, w, h):\n    \"\"\"\n    Return the volume of a cuboid of length l, width w and height h.\n    \"\"\"\n    return l * w * h\n\ndef test():\n    assert volume(4, 5, 6) == 36.0\n    assert volume(5, 3, 4) == 40.0\n    assert volume(1, 4, 5) == 4.0\n    assert volume(4, 1, 5) == 4.0\n    assert volume(4, 5, 1) == 4.0\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef volume(x, y, z):\n    \"\"\"\n    Returns the volume of a cuboid with the given\n    dimensions and origin.\n\n    :param x: The x-dimension of the cuboid\n    :param y: The y-dimension of the cuboid\n    :param z: The z-dimension of the cuboid\n    \"\"\"\n    return x * y * z\n\nif __name__ == '__main__':\n    print(volume(5, 3, 4))\n    print(volume(1, 2, 3))\n    print(volume(2, 2, 2))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "# Calculate the volume of a cuboid with given dimensions\ndef volume(dimensions):\n    \"\"\"\n    Calculate the volume of a cuboid with given dimensions.\n    \n    dimensions - [x, y, z]\n    \n    Returns the volume of a cuboid with given dimensions.\n    \n    Example:\n    >>> volume([5, 10, 15])\n    120.0\n    >>> volume([1, 2, 3])\n    0.0\n    \"\"\"\n    \n    # If dimensions are not a 3-tuple, return 0\n    if len(dimensions)!= 3:\n        return 0\n    \n    # Calculate volume of a cuboid\n    x = dimensions[0]\n    y = dimensions[1]\n    z = dimensions[2]\n    \n    # Volume is the product of the cuboid's side lengths\n    volume = x * y * z\n    \n    return volume\n\n# Test your function\nif __name__ == \"__main__\":\n    \n    # Test case 1\n    print(\"Test case 1:\")\n    print(volume([5, 10, 15]))\n    \n    # Test case 2\n    print(\"Test case 2:\")\n    print(volume([1, 2, 3]))\n    \n    # Test case 3\n    print(\"Test case 3:\")\n    print(volume([5, 10, 15]))\n    \n    # Test case 4\n    print(\"Test case 4:\")\n    print(volume([1, 2, 3]))\n    \n    # Test case 5\n    print(\"Test case 5:\")\n    print(volume([5, 10, 15]))\n    \n    # Test case 6\n    print(\"Test case 6:\")\n    print(volume([1, 2, 3]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_volume(a, b, c, d):\n    \"\"\"\n    Return the volume of a cuboid with dimensions a, b, c and d.\n    \"\"\"\n    return a * b * c * d\n\ndef volume(a, b, c, d):\n    \"\"\"\n    Return the volume of a cuboid with dimensions a, b, c and d.\n    \"\"\"\n    return math.pi * (a ** 2 + b ** 2 + c ** 2 + d ** 2) / 6.0\n\ndef main():\n    \"\"\"\n    Test the volume function using a simple example.\n    \"\"\"\n    print(\"Volume of a cuboid with dimensions 1, 1, 1 and 1:\", volume(1, 1, 1, 1))\n    print(\"Volume of a cuboid with dimensions 2, 2, 2 and 2:\", volume(2, 2, 2, 2))\n    print(\"Volume of a cuboid with dimensions 3, 3, 3 and 3:\", volume(3, 3, 3, 3))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(x, y, z):\n    return math.sqrt(x * y * z)\n\ndef volume(x, y, z):\n    return math.sqrt(x * y * z)\n\nif __name__ == '__main__':\n    x = input('Enter the length of x axis: ')\n    y = input('Enter the length of y axis: ')\n    z = input('Enter the length of z axis: ')\n    print(volume(x, y, z))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def cuboid_volume(x, y, z):\n    \"\"\"\n    :param x: the length of the cuboid's side a\n    :param y: the length of the cuboid's side b\n    :param z: the length of the cuboid's side c\n    :return: the volume of the cuboid\n    \"\"\"\n    return (x*y*z)/3.0\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    assert(cuboid_volume(1, 1, 1) == 1.0)\n    assert(cuboid_volume(1, 2, 3) == 6.0)\n    assert(cuboid_volume(2, 1, 3) == 6.0)\n    assert(cuboid_volume(2, 3, 1) == 6.0)\n    assert(cuboid_volume(2, 3, 3) == 12.0)\n    assert(cuboid_volume(3, 2, 1) == 12.0)\n    assert(cuboid_volume(3, 2, 3) == 12.0)\n    assert(cuboid_volume(3, 1, 2) == 12.0)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(x, y, z):\n    return math.pi * (x * y * z)\n\ndef main():\n    print volume(3, 4, 5)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n\"\"\"\nWe have a cuboid with dimensions x1, y1, z1 and x2, y2, z2.\n\nThe volume of a cuboid is given by\n\nvol = x1 * y1 * z1 + x2 * y1 * z2 + x1 * y2 * z1 + x2 * y2 * z2 + x1 * y1 * z2 + x2 * y2 * z2\n\nTo solve the problem, we need to find the sum of all the terms.\n\"\"\"\n\ndef volume(x1, y1, z1, x2, y2, z2):\n    \"\"\"\n    Volume of a cuboid\n    :param x1: x1\n    :param y1: y1\n    :param z1: z1\n    :param x2: x2\n    :param y2: y2\n    :param z2: z2\n    :return: volume\n    \"\"\"\n    return (x1 * y1 * z1) + (x2 * y1 * z2) + (x1 * y2 * z1) + (x2 * y2 * z2) + (x1 * y1 * z2) + (x2 * y2 * z2)\n\ndef main():\n    \"\"\"\n    Main method\n    :return: None\n    \"\"\"\n    x1 = float(input(\"Enter x1: \"))\n    y1 = float(input(\"Enter y1: \"))\n    z1 = float(input(\"Enter z1: \"))\n    x2 = float(input(\"Enter x2: \"))\n    y2 = float(input(\"Enter y2: \"))\n    z2 = float(input(\"Enter z2: \"))\n    volume = volume(x1, y1, z1, x2, y2, z2)\n    print(\"Volume of cuboid is: {}\".format(volume))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def cuboid_volume(x, y, z):\n    return x*y*z\n\ndef main():\n    print cuboid_volume(4, 2, 3)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\nclass Volume:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        self.volume = 0\n\n    def volume_cuboid(self, x, y, z):\n        return (x*y*z)\n    \n    def volume_cube(self, x, y, z):\n        return (x*y*z)\n\n    def volume_sphere(self, x, y, z):\n        return (4/3*math.pi*math.pow(x,3))\n\n    def volume_cylinder(self, x, y, z):\n        return (x*y*z)\n\n    def volume_pyramid(self, x, y, z):\n        return (x*y*z)\n\n    def volume_prism(self, x, y, z):\n        return (x*y*z)\n\n    def volume_tetrahedron(self, x, y, z):\n        return (x*y*z)\n\n    def volume_hexahedron(self, x, y, z):\n        return (x*y*z)\n\n    def volume_dodecahedron(self, x, y, z):\n        return (x*y*z)\n\n    def volume_octahedron(self, x, y, z):\n        return (x*y*z)\n\n    def volume_icosahedron(self, x, y, z):\n        return (x*y*z)\n\n    def volume_cuboid_with_holes(self, x, y, z):\n        return (x*y*z)\n\n    def volume_sphere_with_holes(self, x, y, z):\n        return (4/3*math.pi*math.pow(x,3))\n\n    def volume_cylinder_with_holes(self, x, y, z):\n        return (x*y*z)\n\n    def volume_pyramid_with_holes(self, x, y, z):\n        return (x*y*z)\n\n    def volume_prism_with_holes(self, x, y,"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(x, y, z):\n    \"\"\"\n    Calculates the volume of a cuboid.\n    x, y, z are the dimensions of the cuboid.\n    \"\"\"\n    return math.pi * (x * y * z)\n\ndef test_volume():\n    assert volume(1, 2, 3) == 27\n\nif __name__ == '__main__':\n    test_volume()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_volume(side_a, side_b, side_c, side_d):\n    \"\"\"\n    side_a, side_b, side_c, side_d - dimensions of the cuboid\n    Returns volume of the cuboid\n    \"\"\"\n    return (side_a * side_b * side_c * side_d)\n\ndef main():\n    \"\"\"\n    Write a function to calculate the volume of a cuboid.\n    \"\"\"\n    side_a = int(input(\"Enter the side of a cuboid a: \"))\n    side_b = int(input(\"Enter the side of a cuboid b: \"))\n    side_c = int(input(\"Enter the side of a cuboid c: \"))\n    side_d = int(input(\"Enter the side of a cuboid d: \"))\n    print(cuboid_volume(side_a, side_b, side_c, side_d))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef volume(x1, y1, z1, x2, y2, z2):\n    \"\"\"\n    x1, y1, z1, x2, y2, z2: coordinates of the cuboid\n    returns: volume of the cuboid\n    \"\"\"\n    return np.prod(np.array([x2-x1, y2-y1, z2-z1]))\n\ndef test():\n    assert volume(0, 0, 0, 1, 1, 1) == 1\n    assert volume(0, 0, 0, 1, 1, 2) == 4\n    assert volume(0, 0, 0, 2, 1, 1) == 4\n    assert volume(0, 0, 0, 2, 2, 1) == 16\n    assert volume(0, 0, 0, 1, 2, 1) == 16\n    assert volume(0, 0, 0, 1, 1, 2) == 4\n    assert volume(0, 0, 0, 0, 0, 0) == 1\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import sys\n\ndef volume(length, width, height):\n    \"\"\"\n    :param length: The length of cuboid\n    :param width: The width of cuboid\n    :param height: The height of cuboid\n    :return: The volume of cuboid\n    \"\"\"\n    return length * width * height\n\nif __name__ == '__main__':\n    length, width, height = map(int, input().split())\n    volume = volume(length, width, height)\n    print(volume)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "import math\n\n\ndef volume(length, width, height):\n    \"\"\"\n    Return the volume of a cuboid.\n\n    length, width, height - the dimensions of the cuboid.\n    \"\"\"\n    return length * width * height\n\nprint(volume(3, 2, 2))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "# pylint: disable=C0103\n\nimport math\n\ndef cuboid_volume(length, width, height):\n    \"\"\"\n    Calculate volume of a cuboid.\n    \"\"\"\n    return math.pi * (length * width + width * height + height * length) / 6\n\nif __name__ == \"__main__\":\n    print cuboid_volume(3, 2, 1)"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import math\ndef volume(x,y,z):\n    return math.pi*(x*y+y*z+z*x)\nprint volume(2,3,4)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "import math\n\ndef cuboid_volume(side_a, side_b, side_c):\n    \"\"\"\n    >>> cuboid_volume(2, 3, 4)\n    24\n    >>> cuboid_volume(4, 2, 3)\n    6\n    >>> cuboid_volume(3, 4, 5)\n    30\n    \"\"\"\n    return (side_a * side_b * side_c) / 3\n\ndef main():\n    print(cuboid_volume(2, 3, 4))\n    print(cuboid_volume(4, 2, 3))\n    print(cuboid_volume(3, 4, 5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/cube-volume/problem\n# https://www.codewars.com/kata/cube-volume/train/python\n\nimport math\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube_volume(x, y, z):\n    return x * y * z\n\ndef cube"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/volume-of-a-cuboid/problem\n\n# Time:  O(n^2)\n# Space: O(n)\n# DP\n\nclass Solution:\n    def volume(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.volume_helper(n)\n\n    def volume_helper(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n == 3:\n            return 8\n        if n == 4:\n            return 16\n        if n == 5:\n            return 32\n        return self.volume_helper(n-1) * self.volume_helper(n-2)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/volume-of-a-cuboid/discuss/63770/C-Python-2-lines-with-explains\ndef volume(h, w, l):\n    return h * w * l\n\ndef volume_2(h, w, l):\n    return h * w * l / 2\n\ndef volume_3(h, w, l):\n    return h * w * l / 3\n\ndef volume_4(h, w, l):\n    return h * w * l / 4\n\ndef volume_5(h, w, l):\n    return h * w * l / 5\n\ndef volume_6(h, w, l):\n    return h * w * l / 6\n\ndef volume_7(h, w, l):\n    return h * w * l / 7\n\ndef volume_8(h, w, l):\n    return h * w * l / 8\n\ndef volume_9(h, w, l):\n    return h * w * l / 9\n\nif __name__ == '__main__':\n    print(volume(3, 4, 5))\n    print(volume_2(3, 4, 5))\n    print(volume_3(3, 4, 5))\n    print(volume_4(3, 4, 5))\n    print(volume_5(3, 4, 5))\n    print(volume_6(3, 4, 5))\n    print(volume_7(3, 4, 5))\n    print(volume_8(3, 4, 5))\n    print(volume_9(3, 4, 5))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def cuboid_volume(length, width, height):\n    return length * width * height\n\n# Test cases\n#>>> cuboid_volume(5, 5, 5)\n#60\n#>>> cuboid_volume(5, 5, 1)\n#15\n#>>> cuboid_volume(1, 5, 5)\n#30\n#>>> cuboid_volume(5, 1, 5)\n#30\n#>>> cuboid_volume(1, 1, 5)\n#15\n#>>> cuboid_volume(1, 1, 1)\n#1\n#>>> cuboid_volume(5, 1, 1)\n#1\n#>>> cuboid_volume(5, 5, 5)\n#60\n\n# Your CuboidVolume solution\n\n# Test cases\n#>>> cuboid_volume(5, 5, 5)\n#60\n#>>> cuboid_volume(5, 5, 1)\n#15\n#>>> cuboid_volume(1, 5, 5)\n#30\n#>>> cuboid_volume(5, 1, 5)\n#30\n#>>> cuboid_volume(1, 1, 5)\n#15\n#>>> cuboid_volume(1, 1, 1)\n#1\n#>>> cuboid_volume(5, 1, 1)\n#1\n#>>> cuboid_volume(5, 5, 5)\n#60\n\n# Your CuboidVolume solution\n\n# Test cases\n#>>> cuboid_volume(5, 5, 5)\n#60\n#>>> cuboid_volume(5, 5, 1)\n#15\n#>>> cuboid_volume(1, 5, 5)\n#30\n#>>> cuboid_volume(5, 1, 5)\n#30\n#>>> cuboid_volume(1, 1, 5)\n#15\n#>>> cuboid_volume(1, 1, 1)\n#1\n#>>> cuboid_volume(5, 1, 1)\n#1\n#>>> cuboid_volume(5, 5, 5)\n#60\n\n# Your CuboidVolume solution\n\n# Test cases\n#>>> cuboid_volume(5, 5, 5)\n#60\n#>>> cuboid_volume(5, 5, 1)\n#15\n#>>> cuboid"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import math\n\n# @include\ndef cuboid_volume(l, w, h, d):\n    return l * w * h * d\n\n\ndef main():\n    assert cuboid_volume(2, 1, 3, 5) == 12, '2 * 1 * 3 * 5 = 12'\n    assert cuboid_volume(1, 1, 3, 5) == 6, '1 * 1 * 3 * 5 = 6'\n    assert cuboid_volume(1, 3, 5, 7) == 30, '1 * 3 * 5 * 7 = 30'\n    assert cuboid_volume(2, 3, 5, 7) == 30, '2 * 3 * 5 * 7 = 30'\n    assert cuboid_volume(3, 5, 7, 9) == 210, '3 * 5 * 7 * 9 = 210'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 * 3 * 4 = 12'\n    assert cuboid_volume(1, 2, 3, 4) == 12, '1 * 2 *"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "import math\nimport sys\n\n\ndef get_volume(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: The dimensions of the cuboid.\n    Output:\n        volume: The volume of the cuboid.\n    \"\"\"\n    return math.pi * (a ** 3 + b ** 3 + c ** 3) / 3\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a, b, c = map(float, sys.stdin.readline().strip().split())\n    volume = get_volume(a, b, c)\n    print(volume)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from __future__ import print_function\n\nclass Solution(object):\n    def volume(self, x1, y1, z1, x2, y2, z2):\n        \"\"\"\n        :type x1: int\n        :type y1: int\n        :type z1: int\n        :type x2: int\n        :type y2: int\n        :type z2: int\n        :rtype: int\n        \"\"\"\n        return abs(x1-x2)*abs(y1-y2)*abs(z1-z2)\n\n    def volume(self, x1, y1, z1, x2, y2, z2):\n        \"\"\"\n        :type x1: int\n        :type y1: int\n        :type z1: int\n        :type x2: int\n        :type y2: int\n        :type z2: int\n        :rtype: int\n        \"\"\"\n        return abs(x1-x2)*abs(y1-y2)*abs(z1-z2)\n\nif __name__ == \"__main__\":\n    assert Solution().volume(0, 0, 0, 1, 1, 1) == 1, \"0,0,0\"\n    assert Solution().volume(0, 0, 0, 1, 1, 1) == 1, \"0,0,0\"\n    assert Solution().volume(1, 1, 1, 2, 2, 2) == 4, \"1,1,1\"\n    assert Solution().volume(1, 1, 1, 2, 2, 2) == 4, \"1,1,1\"\n    assert Solution().volume(1, 1, 1, 2, 2, 2) == 4, \"1,1,1\"\n    assert Solution().volume(1, 1, 1, 2, 2, 2) == 4, \"1,1,1\"\n    assert Solution().volume(1, 1, 1, 2, 2, 2) == 4, \"1,1,1\"\n    assert Solution().volume(1, 1, 1, 2, 2, 2) == 4, \"1,1,1\"\n    assert Solution().volume(1, 1, 1, 2, 2, 2) == 4, \"1,1"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param volume: A positive integer\n    @return: An integer\n    \"\"\"\n    def volume(self, volume):\n        \"\"\"\n        :type volume: int\n        :rtype: int\n        \"\"\"\n        if volume == 0:\n            return 0\n        return volume / 6.0 * (volume / 6.0 * (volume / 6.0 - 1))\n\n\nif __name__ == '__main__':\n    assert Solution().volume(0) == 0, '0'\n    assert Solution().volume(1) == 1, '1'\n    assert Solution().volume(2) == 4, '2'\n    assert Solution().volume(3) == 9, '3'\n    assert Solution().volume(4) == 16, '4'\n    assert Solution().volume(5) == 25, '5'\n    assert Solution().volume(6) == 36, '6'\n    assert Solution().volume(7) == 49, '7'\n    assert Solution().volume(8) == 64, '8'\n    assert Solution().volume(9) == 81, '9'\n    assert Solution().volume(10) == 100, '10'\n    assert Solution().volume(11) == 121, '11'\n    assert Solution().volume(12) == 144, '12'\n    assert Solution().volume(13) == 169, '13'\n    assert Solution().volume(14) == 196, '14'\n    assert Solution().volume(15) == 225, '15'"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import math\n\ndef volume(side1, side2, side3):\n    \"\"\"\n    :param side1: Side of the cuboid\n    :param side2: Side of the cuboid\n    :param side3: Side of the cuboid\n    :return: Volume of the cuboid\n    \"\"\"\n    return (math.sqrt(side1**2 + side2**2 + side3**2))\n\n# Test cases\n\n# side1 = 3\n# side2 = 2\n# side3 = 4\n\n# expected_output = 6.0\n\n# test_cases = [\n#     [side1, side2, side3],\n#     [6, 6, 6],\n#     [3, 2, 4],\n#     [3, 3, 3],\n#     [3, 2, 2],\n#     [3, 4, 2],\n#     [3, 4, 4]\n# ]\n\n# for test_case in test_cases:\n#     actual_output = volume(*test_case)\n#     assert(actual_output == expected_output)\n\n# print(\"Success!\")"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "import math\n\ndef cuboid_volume(length, width, height):\n    \"\"\"\n    Input:\n        length, width, height - the length, width and height of the cuboid\n    Output:\n        volume - the volume of the cuboid\n    Explanation:\n        The volume of a cuboid with side length length and width and height width is:\n        length * width * height\n    \"\"\"\n    return length * width * height\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(\"\"\"\n    Input:\n        length, width, height - the length, width and height of the cuboid\n    Output:\n        volume - the volume of the cuboid\n    Explanation:\n        The volume of a cuboid with side length length and width and height width is:\n        length * width * height\n    \"\"\")\n    length, width, height = map(int, input().split())\n    volume = cuboid_volume(length, width, height)\n    print(volume)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# --- Part 1: Determine the volume of a cuboid ---\n# --- Part 2: Determine the volume of a cuboid ---\n\ndef volume(side_length, side_length2, side_length3):\n    \"\"\"\n    Given the side lengths of a cuboid, return the volume.\n\n    :param side_length: The side length of the cuboid.\n    :param side_length2: The side length of the cuboid.\n    :param side_length3: The side length of the cuboid.\n    :return: The volume of the cuboid.\n    \"\"\"\n    return side_length ** 3\n\n\n# --- Part 3: Determine the volume of a cuboid ---\n# --- Part 4: Determine the volume of a cuboid ---\n\ndef volume2(side_length, side_length2, side_length3):\n    \"\"\"\n    Given the side lengths of a cuboid, return the volume.\n\n    :param side_length: The side length of the cuboid.\n    :param side_length2: The side length of the cuboid.\n    :param side_length3: The side length of the cuboid.\n    :return: The volume of the cuboid.\n    \"\"\"\n    return side_length * side_length2 * side_length3\n\n\n# --- Part 5: Determine the volume of a cuboid ---\n# --- Part 6: Determine the volume of a cuboid ---\n\ndef volume3(side_length, side_length2, side_length3):\n    \"\"\"\n    Given the side lengths of a cuboid, return the volume.\n\n    :param side_length: The side length of the cuboid.\n    :param side_length2: The side length of the cuboid.\n    :param side_length3: The side length of the cuboid.\n    :return: The volume of the cuboid.\n    \"\"\"\n    return side_length * side_length2 * side_length3\n\n\n# --- Part 7: Determine the volume of a cuboid ---\n# --- Part 8: Determine the volume of a cuboid ---\n\ndef volume4(side_length, side_length2, side_length3):\n    \"\"\"\n    Given the side lengths of a cuboid, return the volume.\n\n    :"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Definition for a cuboid.\nclass Cuboid:\n    def __init__(self, l, w, h, d):\n        self.l = l\n        self.w = w\n        self.h = h\n        self.d = d\n\n    def __repr__(self):\n        return str(self.l) + 'x' + str(self.w) + 'x' + str(self.h) + 'x' + str(self.d)\n\nclass Solution:\n    # @param cuboid, a Cuboid\n    # @return an integer\n    def volume(self, cuboid):\n        return (cuboid.l*cuboid.w*cuboid.h*cuboid.d)\n\n    # @param cuboid, a Cuboid\n    # @return an integer\n    def area(self, cuboid):\n        return (cuboid.l*cuboid.w*cuboid.h)\n\n    # @param cuboid, a Cuboid\n    # @return an integer\n    def perimeter(self, cuboid):\n        return ((cuboid.l*cuboid.w) + (cuboid.w*cuboid.h) + (cuboid.h*cuboid.d) + (cuboid.d*cuboid.l))\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.volume(cuboid)\n# param_2 = obj.area(cuboid)\n# param_3 = obj.perimeter(cuboid)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# A cuboid is a 3D shape.\n#\n# Each dimension has a length.\n#\n# The origin is the center of the cuboid.\n#\n# The direction of the cuboid is the vector from the origin to the point on the\n# cuboid.\n#\n# A cuboid can be convex or concave.\n#\n# You can assume that the cuboid is a cube, a sphere, a cylinder, or a cone.\n#\n# The cuboid's volume is the sum of the cuboid's lengths.\n#\n# For example, the cuboid [1, 2, 3] x [4, 5, 6] x [7, 8, 9] has volume 6.\n#\n# The cuboid [1, 2, 3] x [4, 5, 6] x [7, 8, 9] has a volume of 3.\n#\n# The cuboid [1, 2, 3] x [4, 5, 6] has a volume of 6.\n#\n# The cuboid [1, 2, 3] has a volume of 1.\n#\n# The cuboid [1, 2, 3] has a volume of 1.\n#\n# The cuboid [1, 2, 3] has a volume of 1.\n#\n# Note:\n# The cuboid is a convex cuboid.\n#\n# You may assume the dimensions of the cuboid are positive.\n#\n# The input is guaranteed to be a non-empty cuboid.\n#\n# Example 1:\n#\n# Input:\n# [[1,2,3],[4,5,6],[7,8,9]]\n# Output: 6\n#\n# Example 2:\n#\n# Input:\n# [[1,2,3],[4,5,6],[7,8,9],[1,2,3]]\n# Output: 3\n#\n# Example 3:\n#\n# Input:\n# [[1,2,3],[4,5,6],[7,8,9],[1,2,3]]\n# Output: 1\n#\n# Example 4:\n#\n# Input:\n# [[1,2,3],[4,5,6],[7,8,9],[1,2,3]]\n# Output: 0\n#\n# Example 5"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "__author__ = 'Daniel'\n\n\nclass Solution:\n    \"\"\"\n    @param height: An integer\n    @param width:  An integer\n    @param length: An integer\n    @return: an integer\n    \"\"\"\n    def volume(self, height, width, length):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :type length: int\n        :rtype: int\n        \"\"\"\n        return height * width * length\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.volume(2, 2, 2)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def volume(x, y, z):\n    \"\"\"\n    x, y, z : coordinates of the cuboid\n    returns : volume of the cuboid\n    \"\"\"\n    return x * y * z\n\n\ndef test_volume():\n    assert volume(2, 4, 6) == 144\n    assert volume(1, 2, 3) == 6\n    assert volume(1, 1, 1) == 1\n\nif __name__ == '__main__':\n    test_volume()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def cuboid_volume(length, width, height):\n    \"\"\"\n    Input:\n    length: length of cuboid\n    width: width of cuboid\n    height: height of cuboid\n    Output:\n    volume: volume of cuboid\n    \"\"\"\n    if length == 0 or width == 0 or height == 0:\n        return 0\n\n    # calculate volume\n    volume = length * width * height\n    return volume\n\n\"\"\"\nTest cases\n\"\"\"\n\n# length = 3, width = 4, height = 5\n# expected output: 1\nassert cuboid_volume(3, 4, 5) == 1\n\n# length = 5, width = 4, height = 3\n# expected output: 12\nassert cuboid_volume(5, 4, 3) == 12\n\n# length = 3, width = 4, height = 5\n# expected output: 36\nassert cuboid_volume(3, 4, 5) == 36"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "import math\nimport numpy as np\n\n\ndef volume(x, y, z):\n    \"\"\"\n    Return the volume of a cuboid.\n    \"\"\"\n    return x * y * z\n\n\ndef cuboid(x, y, z):\n    \"\"\"\n    Return the volume of a cuboid.\n    \"\"\"\n    return volume(x, y, z)\n\n\ndef test_volume():\n    assert volume(3, 4, 5) == 30\n    assert volume(2, 3, 4) == 6\n\n\ndef test_cuboid():\n    assert cuboid(3, 4, 5) == 30\n    assert cuboid(2, 3, 4) == 6\n\n\nif __name__ == '__main__':\n    test_volume()\n    test_cuboid()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import math\n\n# https://www.codewars.com/kata/5dc0d1c0c8d0f0a9c1/train/python\n\n# Returns the volume of a cuboid\n# @param {int} width\n# @param {int} height\n# @param {int} length\n# @returns {float}\ndef volume(width, height, length):\n    return math.pi * width * height / 4\n\n\nif __name__ == '__main__':\n    assert volume(3, 4, 5) == 1.0, \"Example\"\n    assert volume(1, 1, 1) == 1.0, \"Example\"\n    assert volume(10, 10, 10) == 1.0, \"Example\"\n    assert volume(10, 10, 10) == 1.0, \"Example\"\n    assert volume(20, 20, 20) == 1.0, \"Example\"\n    assert volume(20, 20, 20) == 1.0, \"Example\"\n    assert volume(100, 100, 100) == 1.0, \"Example\"\n    assert volume(100, 100, 100) == 1.0, \"Example\"\n    assert volume(1000, 1000, 1000) == 1.0, \"Example\"\n    assert volume(1000, 1000, 1000) == 1.0, \"Example\"\n\n    print(\"Success!\")"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def cuboid_volume(height, width, length):\n    \"\"\"\n    :type height: int\n    :type width: int\n    :type length: int\n    :rtype: int\n    \"\"\"\n    return height * width * length\n\nif __name__ == \"__main__\":\n    assert cuboid_volume(1, 2, 3) == 6\n    assert cuboid_volume(2, 1, 3) == 6\n    assert cuboid_volume(3, 1, 3) == 6\n    assert cuboid_volume(3, 2, 3) == 6\n    assert cuboid_volume(3, 3, 3) == 24\n    assert cuboid_volume(3, 1, 4) == 0\n    assert cuboid_volume(2, 1, 4) == 0\n    assert cuboid_volume(1, 1, 4) == 0\n    assert cuboid_volume(2, 2, 4) == 0\n    assert cuboid_volume(1, 2, 4) == 0\n    assert cuboid_volume(3, 3, 4) == 0"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def cuboid_volume(a, b, c, d):\n    \"\"\"\n    Example 1:\n        Input: a = 1, b = 2, c = 3, d = 4\n        Output: 24\n    Example 2:\n        Input: a = 1, b = 1, c = 1, d = 1\n        Output: 1\n    Example 3:\n        Input: a = 1, b = 1, c = 1, d = 1\n        Output: 1\n    \"\"\"\n    if a == b == c == d:\n        return a\n    if a > b and a > c and a > d:\n        return a*(b + c + d)\n    if b > a and b > c and b > d:\n        return b*(a + c + d)\n    if c > a and c > b and c > d:\n        return c*(a + b + d)\n    if d > a and d > b and d > c:\n        return d*(a + b + c)\n    return 0\n\n\n# Your CuboidVolume object will be instantiated and called as such:\n# obj = CuboidVolume(a, b, c, d)\n# param_1 = obj.volume()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def volume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return (x * y * z) / 3\n\n# test\nsol = Solution()\nprint(sol.volume(1, 1, 1))\nprint(sol.volume(2, 2, 2))\nprint(sol.volume(2, 2, 4))\nprint(sol.volume(2, 3, 4))\nprint(sol.volume(2, 3, 5))\nprint(sol.volume(3, 3, 4))\nprint(sol.volume(3, 3, 5))\nprint(sol.volume(3, 3, 6))\nprint(sol.volume(3, 4, 5))\nprint(sol.volume(3, 5, 6))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/volume-of-a-cuboid\n\nimport math\n\ndef volume(x, y, z):\n    \"\"\"\n    Calculates the volume of a cuboid.\n    :type x: int\n    :type y: int\n    :type z: int\n    :rtype: int\n    \"\"\"\n    return (x * y) * z\n\n# TODO: Implement volume using lambda functions.\n# TODO: Implement volume using loops.\n\nif __name__ == \"__main__\":\n    # Complete the function below.\n    print volume(3, 4, 5)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/cubes/problem\n# https://www.hackerrank.com/challenges/cubes/submissions/code/185987\n# https://www.hackerrank.com/challenges/cubes/submissions/code/149985\n\n\ndef volume(x, y, z):\n    return (x * y * z) / 2\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    x = int(input())\n    y = int(input())\n    z = int(input())\n\n    # Calculate volume\n    print(volume(x, y, z))\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}