{
  "timestamp": "2025-09-14T18:15:43.372880",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 121,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, t):\n        \"\"\"\n        :type t: List[str]\n        :rtype: str\n        \"\"\"\n        return ','.join(t)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class TupleToString(object):\n    def __init__(self):\n        self.tuple_to_string = self.tuple_to_string_helper()\n\n    def tuple_to_string_helper(self):\n        tuple_to_string = ''\n        for i in range(len(sys.argv[1:])):\n            tuple_to_string += str(sys.argv[i]) +''\n        return tuple_to_string\n\nif __name__ == '__main__':\n    TupleToString().tuple_to_string()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        if num is None or num == []:\n            return \"\"\n        return str(tuple(map(str, num)))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for i in num:\n            res += str(i) + \",\"\n        res = res[:-1]\n        return res"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def tuple_to_string(tuple_str):\n    return ''.join(str(s) for s in tuple_str)\n\nif __name__ == '__main__':\n    print(tuple_to_string((1, 2, 3)))\n    print(tuple_to_string((1, 2, 3, 4)))\n    print(tuple_to_string((1, 2, 3, 4, 5)))\n    print(tuple_to_string((1, 2, 3, 4, 5, 6)))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/tuple-to-string/problem\n\ndef tuple_to_string(tuple):\n    \"\"\"\n    :param tuple: tuple\n    :return: string\n    \"\"\"\n\n    string = ''\n    for i in tuple:\n        string += str(i) +''\n    return string[:-1]\n\nif __name__ == '__main__':\n    tuple = (1, 2, 3, 4, 5)\n    string = tuple_to_string(tuple)\n    print(string)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[Tuple]\n        :rtype: str\n        \"\"\"\n        ret = \"\"\n        for item in num:\n            ret += str(item) + \" \"\n        return ret[:-1]\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    t1 = (1,2,3)\n    t2 = (1,2,3,\"abc\")\n    t3 = (1,2,3,\"abc\",\"def\")\n    t4 = (1,2,3,\"abc\",\"def\",1)\n    t5 = (1,2,3,\"abc\",\"def\",1,\"hello\")\n    t6 = (1,2,3,\"abc\",\"def\",1,\"hello\",1.1)\n    t7 = (1,2,3,\"abc\",\"def\",1,\"hello\",1.1,\"world\")\n    t8 = (1,2,3,\"abc\",\"def\",1,\"hello\",1.1,\"world\",1)\n    t9 = (1,2,3,\"abc\",\"def\",1,\"hello\",1.1,\"world\",1,\"hello\")\n    t10 = (1,2,3,\"abc\",\"def\",1,\"hello\",1.1,\"world\",1,\"hello\",1.1)\n    t11 = (1,2,3,\"abc\",\"def\",1,\"hello\",1.1,\"world\",1,\"hello\",1.1,\"world\")\n    t12 = (1,2,3,\"abc\",\"def\",1,\"hello\",1.1,\"world\",1,\"hello\",1.1,\"world\",1)\n    t13 = (1,2,3,\"abc\",\"def\",1,\"hello\",1.1,\"world\",1,\"hello\",1.1,\"world\",1,\"hello\",1.1,\"world\")\n    t14 = (1,2,3,\"abc\",\"def\",1,\"hello\",1.1,\"world\",1,\"hello"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, tuple):\n        \"\"\"\n        :type tuple: List[int]\n        :rtype: str\n        \"\"\"\n        return str(tuple)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, t):\n        \"\"\"\n        :type t: List[int]\n        :rtype: str\n        \"\"\"\n        return str(t)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.tuple2str([1,2,3]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        str = ''\n        for item in num:\n            if isinstance(item, int):\n                str += str(item)\n            else:\n                str += '(' + item\n        return str + ')'"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param num: A tuple of integers\n    @return: A string\n    \"\"\"\n    def tupleToString(self, num):\n        result = \"\"\n        for x in num:\n            result += str(x) + \" \"\n        return result[:-1]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in num:\n            if i > 0:\n                res += '(' + str(i)\n            else:\n                res += '(' + '-' + str(i)\n        return res + ')'"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution:\n    def tuple2str(self, t):\n        return '(' + ', '.join(map(str, t)) + ')'\n\nif __name__ == '__main__':\n    s = Solution()\n    t = (1, 2, 3)\n    print(s.tuple2str(t))\n    print(s.tuple2str(Tuple(1, 2, 3)))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        return ','.join(map(str, num))\n\n    def str2tuple(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        return map(int, s.split(','))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/tuple-to-string/problem\n#\n# Time complexity: O(n)\n# Space complexity: O(n)\n#\n# 11.02.2016 Rewrite\n#\ndef tupleToString(tuple):\n    if len(tuple) == 0:\n        return ''\n    elif len(tuple) == 1:\n        return str(tuple[0])\n    else:\n        return '(' + tupleToString(tuple[:-1]) + str(tuple[-1]) + ')'\n\nprint(tupleToString([1, 2, 3]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        if not num:\n            return '()'\n        s = ''\n        for i in range(len(num)):\n            s += str(num[i])\n            if i < len(num) - 1:\n                s += ','\n        return s[:-1]"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/convert-tuple-to-string/description/\n\nclass TupleToString(object):\n    \"\"\"\n    @param tuple: A tuple of integers\n    @return string: The string representation of the tuple.\n    \"\"\"\n    def tupleToString(self, tuple):\n        res = ''\n        for i in tuple:\n            res = res + str(i) + ','\n        return res[:-1]\n\n\nif __name__ == '__main__':\n    t = TupleToString()\n    tuple = (1,2,3,4,5,6,7,8)\n    print t.tupleToString(tuple)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "class TupleToString(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.result = []\n\n    def convert(self, num):\n        \"\"\"\n        Convert tuple to a string.\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        if not num:\n            return ''\n\n        self.result.append(str(num[0]))\n        self.result.append(str(num[1]))\n\n        return ''.join(self.result)\n\n\n\n# Your TupleToString object will be instantiated and called as such:\n# obj = TupleToString()\n# param_1 = obj.convert(num)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def tupleToString(self, strs):\n        res = ''\n        for i in strs:\n            res += '(' + i + ')'\n        return res[:-1]\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.tupleToString([])\n    print solution.tupleToString([1])\n    print solution.tupleToString([1, 2])\n    print solution.tupleToString([1, 2, 3])\n    print solution.tupleToString([1, 2, 3, 4])\n    print solution.tupleToString([1, 2, 3, 4, 5])\n    print solution.tupleToString([1, 2, 3, 4, 5, 6])\n    print solution.tupleToString([1, 2, 3, 4, 5, 6, 7])\n    print solution.tupleToString([1, 2, 3, 4, 5, 6, 7, 8])"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, tuple_):\n        \"\"\"\n        :type tuple_: List[int]\n        :rtype: str\n        \"\"\"\n        return ','.join(str(x) for x in tuple_)\n\nif __name__ == '__main__':\n    assert Solution().tuple2str([1,2,3]) == '1,2,3'\n    assert Solution().tuple2str([1,2,3,4]) == '1,2,3,4'\n    assert Solution().tuple2str([1,2,3,4,5]) == '1,2,3,4,5'"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def tuple2str(tup):\n    return ','.join(str(e) for e in tup)\n\ndef test():\n    assert tuple2str((1,2,3)) == '1,2,3'\n    assert tuple2str((1,2,3,4,5)) == '1,2,3,4,5'\n    assert tuple2str((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def tupleToString(tuple):\n    return '({}, {})'.format(tuple[0], tuple[1])\n\n# Test Cases\ntuple1 = (1, 2)\ntuple2 = (3, 4)\ntuple3 = (5, 6, 7)\ntuple4 = (8, 9, 10, 11)\ntuple5 = (12, 13, 14, 15, 16)\ntuple6 = (17, 18, 19, 20, 21, 22, 23, 24)\ntuple7 = (25, 26, 27, 28, 29, 30, 31, 32)\ntuple8 = (33, 34, 35, 36, 37, 38, 39, 40)\ntuple9 = (41, 42, 43, 44, 45, 46, 47, 48)\ntuple10 = (49, 50, 51, 52, 53, 54, 55, 56)\ntuple11 = (57, 58, 59, 60, 61, 62, 63, 64)\ntuple12 = (65, 66, 67, 68, 69, 70, 71, 72)\ntuple13 = (73, 74, 75, 76, 77, 78, 79, 80)\ntuple14 = (81, 82, 83, 84, 85, 86, 87, 88)\ntuple15 = (89, 90, 91, 92, 93, 94, 95, 96)\ntuple16 = (97, 98, 99, 100, 101, 102, 103, 104)\ntuple17 = (105, 106, 107, 108, 109, 110, 111, 112)\ntuple18 = (113, 114, 115, 116, 117, 118, 119, 120)\ntuple19 = (121, 122, 123, 124, 125, 126, 127, 128)\ntuple20 = (129, 130, 131, 132, 133, 134, 135, 136)\ntuple21 = (137, 138, 139, 140, 141, 142, 143, 144)\ntuple22 = (145, 146, 147, 148, 149, 150, 151, 152)\ntuple23 = (153, 154, 155, 156, 157, 158, 159, 160)\ntuple24 = (161, 162, 163, 164, 165, 166, 167,"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\n# class Tuple(object):\n#     def __init__(self, x):\n#         self.x = x\n#         self.y = y\n\nclass Solution(object):\n    def tuple2str(self, t):\n        \"\"\"\n        :type t: Tuple\n        :rtype: str\n        \"\"\"\n        return str(t.x) + str(t.y)\n\nif __name__ == '__main__':\n    s = Solution()\n    t = (1,2)\n    print s.tuple2str(t)\n    t = (1,2,3)\n    print s.tuple2str(t)\n    t = (1,2,3,4)\n    print s.tuple2str(t)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(len(num)):\n            res += str(num[i]) +''\n        return res.rstrip()\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.tuple2str([1, 2, 3])\n    print sol.tuple2str([])"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def tuple_to_str(t):\n    return '(' + ','.join(map(str, t)) + ')'\n\ndef main():\n    t = (1, 2, 3)\n    print tuple_to_str(t)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution:\n    # @param {Tuple} tuple\n    # @return {string}\n    def tupleToString(self, tuple):\n        res = \"\"\n        for i in range(len(tuple.x)):\n            res = res + str(tuple.x[i])\n        return res\n\nif __name__ == '__main__':\n    solution = Solution()\n    tuple = Tuple(1, 2, 3)\n    print solution.tupleToString(tuple)\n    tuple = Tuple(1, 2, 3, 4)\n    print solution.tupleToString(tuple)\n    tuple = Tuple(1, 2, 3, 4, 5)\n    print solution.tupleToString(tuple)\n    tuple = Tuple(1, 2, 3, 4, 5, 6)\n    print solution.tupleToString(tuple)\n    tuple = Tuple(1, 2, 3, 4, 5, 6, 7)\n    print solution.tupleToString(tuple)\n    tuple = Tuple(1, 2, 3, 4, 5, 6, 7, 8)\n    print solution.tupleToString(tuple)"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/tuple-to-string/problem\n\ndef tuple_to_string(tuple_list):\n    return''.join(str(i) for i in tuple_list)\n\nif __name__ == '__main__':\n    print tuple_to_string([1, 2, 3])"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "import string\n\ndef tuple_to_str(tup):\n    s = \"\"\n    for x in tup:\n        s += str(x)\n    return s\n\nprint tuple_to_str((1,2,3,4))\nprint tuple_to_str((1,2,3,4,5))\nprint tuple_to_str((1,2,3,4,5,6))\nprint tuple_to_str((1,2,3,4,5,6,7))\nprint tuple_to_str((1,2,3,4,5,6,7,8))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9,10))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9,10,11))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9,10,11,12))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9,10,11,12,13))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9,10,11,12,13,14))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17))\nprint tuple_to_str((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18))\nprint tuple_to_str((1,2,3,4,5,6,7"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {string}\n    def tupleToString(self, s):\n        length = len(s)\n        if length == 0:\n            return ''\n\n        if length == 1:\n            return s[0]\n\n        string = ''\n        for i in range(length):\n            string += s[i] +''\n        return string[:-1]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.tupleToString('(((1), (2), (3)))'))\n    print(s.tupleToString('((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12))'))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        if not num:\n            return ''\n        return '({0})'.format(', '.join(map(str, num)))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "class Tuple2String(object):\n    def __init__(self, args):\n        self.args = args\n\n    def __call__(self, arg):\n        return ''.join(map(str, arg))\n\n    def __str__(self):\n        return 'tuple2string({})'.format(self.args)\n\n\ndef main():\n    print(Tuple2String([1, 2, 3]).__str__())\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b c')\n\nt = Tuple(1, 2, 3)\ns = str(t)\nprint(s)"
    },
    {
      "rank": 33,
      "score": 9.0,
      "candidate": "import string\n\ndef tuple_to_string(tuple_obj):\n    \"\"\"\n    >>> tuple_to_string((1,2,3,4,5,6))\n    '(1, 2, 3, 4, 5, 6)'\n    >>> tuple_to_string((1,2,'hello',3,4,5))\n    '(1, 2, \\'hello\\', 3, 4, 5)'\n    >>> tuple_to_string((1,2,'hello',3,4,5,'world'))\n    '(1, 2, \\'hello\\', 3, 4, 5, \\'world\\')'\n    \"\"\"\n    return '(' + ', '.join(str(e) for e in tuple_obj) + ')'\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "def tuple_to_string(t):\n    return ''.join(map(str, t))\n\ndef main():\n    t = (1, 2, 3, 4, 5, 6, 7, 8)\n    print(tuple_to_string(t))\n    t = (1, '2', 3, '4', 5, '6', 7, '8')\n    print(tuple_to_string(t))\n    t = ('1', '2', 3, '4', 5, '6', 7, '8')\n    print(tuple_to_string(t))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "class Tuple:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\nt1 = Tuple(\"(1, 2, 3)\")\nt2 = Tuple(\"(a, b, c)\")\n\ndef tuple_to_str(t):\n    return str(t)\n\nprint(tuple_to_str(t1))\nprint(tuple_to_str(t2))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        return '(' + ','.join(map(str, num)) + ')'"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return '[]'\n        if len(nums) == 1:\n            return str(nums[0])\n        res = '{'\n        for i in range(len(nums)):\n            res += str(nums[i]) + ','\n        return res[:-1] + '}'"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def tupleToString(t):\n    return ','.join(str(x) for x in t)\n\nif __name__ == '__main__':\n    assert tupleToString((1,2,3)) == '1,2,3'\n    assert tupleToString((1,2,3,4)) == '1,2,3,4'\n    assert tupleToString((1,2,3,4,5)) == '1,2,3,4,5'\n    assert tupleToString((1,2,3,4,5,6)) == '1,2,3,4,5,6'\n    assert tupleToString((1,2,3,4,5,6,7)) == '1,2,3,4,5,6,7'"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/tuple2str/problem\n\ndef tuple2str(tuple_list):\n    \"\"\"\n    Converts a list of tuples to a string.\n    :param tuple_list: A list of tuples\n    :return: A string\n    \"\"\"\n    string = \"\"\n    for tuple_item in tuple_list:\n        string += str(tuple_item) + \" \"\n    return string[:-1]\n\n\nif __name__ == '__main__':\n    tuple_list = [('a', 1), ('b', 2), ('c', 3)]\n    print(tuple2str(tuple_list))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def tuple_to_str(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: str\n    \"\"\"\n    res = \"\"\n    for i in range(len(tuple_list)):\n        res += str(tuple_list[i])\n        if i!= len(tuple_list) - 1:\n            res += \" \"\n    return res\n\nif __name__ == \"__main__\":\n    tuple_list = [ (1,2), (3,4), (5,6), (7,8), (9,10) ]\n    print(tuple_to_str(tuple_list))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def tuple_to_str(tup):\n    \"\"\"\n    Converts tuple to a string\n    Input:\n        tup (tuple)\n    Output:\n        str\n    Examples:\n        >>> tuple_to_str((1, 2, 3))\n        '(1, 2, 3)'\n        >>> tuple_to_str((1,))\n        '(1, )'\n        >>> tuple_to_str((1, 2, 3, 4, 5))\n        '(1, 2, 3, 4, 5)'\n        >>> tuple_to_str((1, 2, 3, 4, 5, 6))\n        '(1, 2, 3, 4, 5, 6)'\n        >>> tuple_to_str((1, 2, 3, 4, 5, 6, 7))\n        '(1, 2, 3, 4, 5, 6, 7)'\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input is not a tuple.\")\n    str_list = []\n    for ele in tup:\n        if isinstance(ele, tuple):\n            str_list.append(tuple_to_str(ele))\n        elif isinstance(ele, int):\n            str_list.append(str(ele))\n        else:\n            str_list.append(ele)\n    if len(str_list) == 1:\n        return str_list[0]\n    else:\n        return '(' + ','.join(str_list) + ')'\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(len(nums)):\n            res += str(nums[i])\n            if i!= len(nums) - 1:\n                res += ','\n        return res\n\n\nif __name__ == '__main__':\n    print Solution().tuple2str([1,2,3])"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, tuple):\n        \"\"\"\n        :type tuple: List[int]\n        :rtype: str\n        \"\"\"\n        return ','.join([str(i) for i in tuple])\n\n\nif __name__ == '__main__':\n    so = Solution()\n    print so.tuple2str([1,2,3])\n    print so.tuple2str([1,2,3,4])"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def tuple_to_str(tuple_):\n    \"\"\"\n    :type tuple_: tuple\n    :rtype: str\n    \"\"\"\n    return ','.join(str(x) for x in tuple_)\n\nif __name__ == '__main__':\n    tuple_ = (1, 2, 3)\n    print(tuple_to_str(tuple_))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        if not num:\n            return \"\"\n        if len(num) == 1:\n            return str(num[0])\n        res = []\n        for n in num:\n            if isinstance(n, int):\n                res.append(str(n))\n            else:\n                res.append(str(n[0]) + \",\" + str(n[1]))\n        return \"(\" + \",\".join(res) + \")\""
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b c d')\n\ndef tuple_to_string(tuple):\n    return '({a}, {b}, {c}, {d})'.format(a=tuple.a, b=tuple.b, c=tuple.c, d=tuple.d)\n\nif __name__ == '__main__':\n    print tuple_to_string(Tuple(1, 2, 3, 4))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def tuple_to_string(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: str\n    \"\"\"\n    result = ''\n    for i in range(len(tuple_list)):\n        result += '(' + str(tuple_list[i][0]) + ',' + str(tuple_list[i][1]) + ')'\n    return result\n\nif __name__ == '__main__':\n    print(tuple_to_string([(1, 2), (3, 4)]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def tuple_to_string(tuple_to_convert):\n    \"\"\"\n    Convert tuple to a string.\n    :type tuple_to_convert: tuple\n    :rtype: str\n    \"\"\"\n    return ','.join(map(str, tuple_to_convert))\n\n\nif __name__ == '__main__':\n    print tuple_to_string((1, 2, 3))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def tuple_to_string(tup):\n    return ','.join(map(str, tup))\n\nif __name__ == '__main__':\n    assert tuple_to_string((1,2,3)) == '1,2,3'"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "#\nclass Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        strs = [\"\"]\n        for i in range(len(num)):\n            strs.append(str(num[i]))\n        return \"\".join(strs)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, tuple_):\n        \"\"\"\n        :type tuple_: List[int]\n        :rtype: str\n        \"\"\"\n        return''.join([str(item) for item in tuple_])\n\n    def test(self):\n        assert self.tuple2str([1, 2, 3]) == '1 2 3'\n\nif __name__ == '__main__':\n    sol = Solution()\n    sol.test()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "class Solution:\n    # @return a string\n    def tuple2str(self, num):\n        result = ''\n        for i in range(len(num)):\n            if i == len(num) - 1:\n                result += str(num[i])\n            else:\n                result += str(num[i]) + ','\n        return result[:-1]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.tuple2str((1,2,3)))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def tuple_to_string(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: str\n    \"\"\"\n    result = \"\"\n    for i in range(len(tuple_list)):\n        result += str(tuple_list[i][0])\n        result += str(tuple_list[i][1])\n        if i!= len(tuple_list) - 1:\n            result += \",\"\n    return result\n\nif __name__ == '__main__':\n    tuple_list = [(1,2),(3,4)]\n    print(tuple_to_string(tuple_list))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "class Tuple2String:\n\n    def __init__(self, input_tuple):\n        self.tuple = input_tuple\n        self.string = \"\"\n\n    def __str__(self):\n        for value in self.tuple:\n            self.string += str(value) + \" \"\n\n        return self.string\n\n\ndef main():\n    tuple_obj = (1, 2, 3)\n    tuple_obj_str = Tuple2String(tuple_obj)\n    print(tuple_obj_str)\n    print(tuple_obj_str.string)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a, b, c')\n\ndef tuple_to_str(tuple_):\n    return str(tuple_.a) +'' + str(tuple_.b) +'' + str(tuple_.c)\n\nif __name__ == '__main__':\n    print(tuple_to_str(Tuple('a', 'b', 'c')))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        if not num:\n            return ''\n        s = '('\n        for i in range(len(num)):\n            if i == len(num) - 1:\n                s += str(num[i])\n            else:\n                s += str(num[i]) + ', '\n        s += ')'\n        return s\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.tuple2str([1, 2, 3])\n    print sol.tuple2str([1, 2, 3, 4])\n    print sol.tuple2str([1, 2, 3, 4, 5])\n    print sol.tuple2str([1, 2, 3, 4, 5, 6])"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "# Write your code here\n\ndef tuple_to_string(tuple_input):\n    \"\"\"\n    :type tuple_input: tuple\n    :rtype: str\n    \"\"\"\n    string = \"\"\n    for element in tuple_input:\n        if type(element) == int:\n            string += str(element)\n        elif type(element) == float:\n            string += \".\" + str(element)\n        else:\n            string += str(element)\n    return string\n\ntuple_input = (1,2,3)\nprint(tuple_to_string(tuple_input))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "class TupleToString(object):\n    \"\"\"\n    class TupleToString\n    \"\"\"\n    def __init__(self, tuple):\n        self.tuple = tuple\n\n    def to_str(self):\n        \"\"\"\n        tuple to str\n        \"\"\"\n        return str(self.tuple)\n\n\ndef main():\n    \"\"\"\n    main\n    \"\"\"\n    print(TupleToString(('a', 'b', 'c')).to_str())\n    print(TupleToString(('a', 'b', 'c')).to_str())\n    print(TupleToString(('a', 'b', 'c')).to_str())\n    print(TupleToString(('a', 'b', 'c')).to_str())\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "class Tuple:\n    def __init__(self, elements):\n        self.elements = elements\n\n    def __str__(self):\n        return str(self.elements)\n\nclass TupleToString:\n    def __init__(self):\n        self.tuple_to_string_map = {}\n\n    def add_tuple_to_string_map(self, tuple_to_string_map):\n        self.tuple_to_string_map.update(tuple_to_string_map)\n\n    def convert_tuple_to_string(self, tuple):\n        if tuple in self.tuple_to_string_map:\n            return self.tuple_to_string_map[tuple]\n        else:\n            return str(tuple)\n\ndef main():\n    tuple_to_string_map = {\n        ('a', 'b', 'c'): 'abc',\n        ('a', 'b', 'd'): 'abd',\n        ('a', 'c', 'd'): 'acd',\n        ('a', 'c', 'e'): 'ace',\n        ('a', 'd', 'e'): 'ade',\n        ('b', 'c', 'd'): 'bcd',\n        ('b', 'd', 'e'): 'bd',\n        ('c', 'd', 'e'): 'cd',\n    }\n\n    tuple_to_string_map.update({\n        ('a', 'b', 'c'): 'abc',\n        ('a', 'c', 'd'): 'ace',\n        ('a', 'd', 'e'): 'ade',\n        ('b', 'c', 'd'): 'bcd',\n        ('b', 'd', 'e'): 'bd',\n        ('c', 'd', 'e'): 'cd',\n    })\n\n    tuple_to_string_map.update({\n        ('a', 'b', 'c'): 'abc',\n        ('a', 'c', 'd'): 'ace',\n        ('a', 'd', 'e'): 'ade',\n        ('b', 'c', 'd'): 'bcd',\n        ('b',"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "class TupleToString(object):\n\n    @staticmethod\n    def convert(t):\n        return \"({0})\".format(\", \".join(map(str, t)))\n\n\nif __name__ == \"__main__\":\n    print TupleToString.convert((1, 2, 3))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        str_ = ''\n        for item in num:\n            str_ += str(item)\n        return str_"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {List[int]} nums\n    # @return {string}\n    def toString(self, nums):\n        if nums:\n            ret = \"\"\n            for i in range(len(nums)):\n                ret += str(nums[i])\n                if i < len(nums) - 1:\n                    ret += \" \"\n            return ret\n        else:\n            return \"0\"\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.toString([])\n    print s.toString([1, 2, 3, 4])\n    print s.toString([1, 2, 3, 4, 5])\n    print s.toString([1, 2, 3, 4, 5, 6])\n    print s.toString([1, 2, 3, 4, 5, 6, 7])"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\nclass Solution:\n    def tuple2str(self, tuple_: List[int]) -> str:\n        return ''.join(str(t) for t in tuple_)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.tuple2str((1, 2, 3, 4, 5, 6)))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for num in nums:\n            if num < 10:\n                res += str(num)\n            else:\n                res += str(num % 10) + str(num // 10)\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().tuple2str([1,2,3])"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {Tuple[]} tuples\n    # @return {string}\n    def toString(self, tuples):\n        if not tuples:\n            return \"\"\n        str = \"\"\n        for t in tuples:\n            str += t[0] + \" \" + t[1] + \" \"\n        return str[:-1]\n\n# Note:\n# 1. Tuple is defined as t[0] and t[1].\n# 2. Tuple is a list of strings."
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def tuple_to_string(tuple_object):\n    \"\"\"\n    :type tuple_object: tuple\n    :rtype: str\n    \"\"\"\n    return ','.join([str(x) for x in tuple_object])\n\nprint(tuple_to_string((1, 2, 3)))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nPoint = namedtuple('Point', 'x y')\n\nclass Point(namedtuple('Point', 'x y')):\n    __slots__ = ()\n\nprint(Point(1, 2).__str__())\nprint(Point(1, 2).__repr__())\n\nclass Point(namedtuple('Point', 'x y')):\n    __slots__ = ()\n\nprint(Point(1, 2).__str__())\nprint(Point(1, 2).__repr__())\n\nclass Point(namedtuple('Point', 'x y')):\n    __slots__ = ()\n\nprint(Point(1, 2).__str__())\nprint(Point(1, 2).__repr__())"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def tuple2str(tuple_):\n    return \",\".join([str(element) for element in tuple_])\n\nif __name__ == \"__main__\":\n    tuple_ = (1, 2, 3)\n    print(tuple2str(tuple_))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def tuple_to_str(tuple_obj):\n    \"\"\"\n    Given a tuple, convert it to a string.\n    \n    Example:\n    tuple_obj = (1, 2, 3)\n    tuple_to_str(tuple_obj) should return \"123\".\n    \n    Note:\n    The order of elements could be different.\n    \n    Hint:\n    If you want to change the order of the elements, you can do it like this:\n    tuple_obj = (3, 2, 1)\n    tuple_to_str(tuple_obj) should return \"321\".\n    \n    Note:\n    You could assume all the elements are non-negative integers.\n    \n    Hint:\n    If you want to know how to reverse a string, please see ReverseString.\n    \"\"\"\n    return \"\".join(map(str, tuple_obj))\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {string}\n    def convert(self, nums):\n        if not nums:\n            return \"\"\n        result = \"\"\n        pre = nums[0]\n        for i in xrange(1, len(nums)):\n            cur = nums[i]\n            if cur == pre:\n                continue\n            else:\n                result += str(pre)\n                pre = cur\n        result += str(pre)\n        return result\n\nif __name__ == \"__main__\":\n    assert Solution().convert([1, 2, 3]) == \"123\"\n    assert Solution().convert([3, 2, 1]) == \"321\"\n    assert Solution().convert([1, 2, 3, 4]) == \"1234\""
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/tuple-to-string/problem\n\nimport unittest\n\n\ndef tuple_to_string(tuple_):\n    \"\"\"\n    :type tuple_: tuple\n    :rtype: str\n    \"\"\"\n    return ''.join(str(t) for t in tuple_)\n\n\nclass TupleToStringTest(unittest.TestCase):\n\n    def test_tuple_to_string(self):\n        self.assertEqual(tuple_to_string((1, 2, 3)), '123')\n        self.assertEqual(tuple_to_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)),\n                         '123456789')\n        self.assertEqual(tuple_to_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)),\n                         '12345678901')"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "class Tuple2String:\n    def __init__(self):\n        self.tuple2string = {}\n        self.tuple2string['(1,2)'] = '((1, 2))'\n        self.tuple2string['(1, 2, 3)'] = '((1, 2, 3))'\n        self.tuple2string['(1, 2, 3, 4)'] = '((1, 2, 3, 4))'\n\n    def convert(self, tuple):\n        return self.tuple2string[str(tuple)]\n\n\n# Your Tuple2String object will be instantiated and called as such:\ntuple2string = Tuple2String()\ntuple = (1, 2)\nprint(tuple2string.convert(tuple))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {string}\n    def toString(self, nums):\n        res = []\n        for num in nums:\n            if num > 0:\n                res.append(str(num))\n            else:\n                res.append('-')\n            if len(res) == 10:\n                return ''.join(res)\n        return ''.join(res)"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class Solution:\n    # @return a string\n    def tupleToString(self, num):\n        return ''.join(str(i) for i in num)\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.tupleToString((1,2,3))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        return ','.join(str(x) for x in num)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.tupleToString([1, 2, 3]))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\nclass Solution:\n    # @param {List[T]} nums\n    # @return {string}\n    def __init__(self):\n        self.result = \"\"\n        self.curr = 0\n\n    def convertToString(self, nums):\n        self.result = \"\"\n        self.curr = 0\n        for num in nums:\n            self.curr += num\n            if self.curr > 9:\n                self.curr -= 10\n                self.result += str(self.curr)\n        return self.result\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    nums = [1, 3]\n    print solution.convertToString(nums)"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "class Solution:\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        if not num:\n            return \"\"\n        res = \"\"\n        for i in num:\n            res += str(i)\n        return res"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass TestTupleToString(unittest.TestCase):\n\n    def test_tuple_to_string(self):\n        self.assertEqual('(1, 2, 3)', tuple_to_string((1, 2, 3)))\n        self.assertEqual('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)', tuple_to_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n        self.assertEqual('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)', tuple_to_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\n        self.assertEqual('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)', tuple_to_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\n\n    def test_tuple_to_string_error(self):\n        with self.assertRaises(TypeError):\n            tuple_to_string('abc')\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {List[Tuple]} tuples\n    # @return {string}\n    def tupleToString(self, tuples):\n        s = \"\"\n        for t in tuples:\n            s += str(t[0]) + \" \" + str(t[1]) + \" \" + str(t[2]) + \"\\n\"\n        return s\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.tupleToString([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))\n    print(sol.tupleToString([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "class Solution:\n    def tupleToString(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        result = ''\n        for i in nums:\n            result += str(i) +''\n        return result[:-1]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.tupleToString([1, 2, 3]))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        return str(tuple(num))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "class TupleToString:\n    def __init__(self):\n        self.tuple_to_str = []\n\n    def get_tuple_to_str(self, tup):\n        if tup[0] == '(' and tup[-1] == ')':\n            self.tuple_to_str.append(tup[1:-1])\n        elif tup[0] == '(' and tup[-1]!= ')':\n            self.tuple_to_str.append(tup[1:])\n        elif tup[0]!= '(' and tup[-1] == ')':\n            self.tuple_to_str.append(tup[:-1])\n        else:\n            self.tuple_to_str.append(tup)\n\n    def convert_tuple_to_string(self, tup):\n        if tup[0] == '(' and tup[-1] == ')':\n            return ''.join(self.tuple_to_str)\n        elif tup[0] == '(' and tup[-1]!= ')':\n            return ''.join(self.tuple_to_str[:-1])\n        elif tup[0]!= '(' and tup[-1] == ')':\n            return ''.join(self.tuple_to_str[:-1])\n        else:\n            return ''.join(self.tuple_to_str)\n\n\n# Your TupleToString object will be instantiated and called as such:\n# obj = TupleToString()\n# param_1 = obj.convert_tuple_to_string(tup)"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import unittest\n\n# https://www.hackerrank.com/challenges/tuple-to-string/problem\nclass Solution:\n    def tupleToString(self, t: 'List[Tuple[int, int]]') ->'str':\n        return '({})'.format(', '.join(map(str, t)))\n\nclass Test(unittest.TestCase):\n    def test(self):\n        solution = Solution()\n        self.assertEqual(solution.tupleToString([(1,2)]), '({1, 2})')\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {List[T]} nums\n    # @return {String}\n    def toString(self, nums):\n        if not nums:\n            return ''\n        result = ''\n        for num in nums:\n            result += str(num)\n        return result\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.toString([1, 2, 3]))\n    print(s.toString([1, 2, 3, 4]))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution:\n    def tupleToString(self, num):\n        if num == ():\n            return \"()\"\n        elif num == (0):\n            return \"()\"\n        elif num == (1):\n            return \"()\"\n        elif num == (2):\n            return \"(())\"\n        elif num == (3):\n            return \"(())\"\n        elif num == (4):\n            return \"(())\"\n        elif num == (5):\n            return \"(())\"\n        elif num == (6):\n            return \"(())\"\n        elif num == (7):\n            return \"(())\"\n        elif num == (8):\n            return \"(())\"\n        elif num == (9):\n            return \"(())\"\n        else:\n            return str(num)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.tupleToString((1,2)))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\ndef tuple_to_str(tup):\n    \"\"\"\n    tuple_to_str(tup) -> string\n\n    Converts a tuple to a string.\n    \"\"\"\n    return ','.join(str(x) for x in tup)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert tuple_to_str((1, 2, 3)) == '1,2,3', \"1st example\"\n    assert tuple_to_str((1, 2, 3, 4)) == '1,2,3,4', \"2nd example\"\n    assert tuple_to_str((1, 2, 3, 4, 5, 6)) == '1,2,3,4,5,6', \"3rd example\"\n    assert tuple_to_str((1, 2, 3, 4, 5, 6, 7, 8)) == '1,2,3,4,5,6,7,8', \"4th example\"\n    assert tuple_to_str((1, 2, 3, 4, 5, 6, 7, 8, 9)) == '1,2,3,4,5,6,7,8,9', \"5th example\""
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def tuple2str(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        return ','.join(str(i) for i in num)\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.tuple2str(num)"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution:\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        if not num:\n            return \"\"\n\n        return \"({0})\".format(\" \".join([str(i) for i in num]))\n\n    def test(self):\n        cases = [([1, 2], \"1 2\"), ([0, 0], \"0 0\"), ([1, 2, 3], \"1 2 3\")]\n        for case in cases:\n            actual = self.tupleToString(case[0])\n            print(\"tupleToString({0}) -> {1}\".format(case[0], actual))\n            assert actual == case[1]\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution:\n    def tupleToString(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        if not nums:\n            return ''\n\n        res = ''\n        for i in xrange(len(nums)):\n            res += str(nums[i])\n            if i < len(nums) - 1:\n                res += ','\n        return res\n\n\nif __name__ == '__main__':\n    print Solution().tupleToString([1, 2, 3])\n    print Solution().tupleToString([1, 2, 3, 4])\n    print Solution().tupleToString([1, 2, 3, 4, 5])\n    print Solution().tupleToString([1, 2, 3, 4, 5, 6])\n    print Solution().tupleToString([1, 2, 3, 4, 5, 6, 7])\n    print Solution().tupleToString([1, 2, 3, 4, 5, 6, 7, 8])\n    print Solution().tupleToString([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', ['x', 'y'])\n\nclass Solution:\n    def tupleToString(self, t: Tuple) -> str:\n        return \"{}x{}\".format(t.x, t.y)\n\n\nif __name__ == '__main__':\n    assert Solution().tupleToString(Tuple(1, 2)) == '1x2'"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def tuple_to_string(tuple_str):\n    \"\"\"\n    :type tuple_str: List[List[int]]\n    :rtype: str\n    \"\"\"\n    res = ''\n    for line in tuple_str:\n        res +=''.join(str(x) for x in line) + '\\n'\n    return res\n\ndef test_tuple_to_string():\n    assert tuple_to_string([[1, 2, 3], [4, 5, 6]]) == '1 2 3\\n4 5 6'\n\nif __name__ == '__main__':\n    assert tuple_to_string([[1, 2, 3], [4, 5, 6]]) == '1 2 3\\n4 5 6'"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param: A tuple\n    @return: A string\n    \"\"\"\n    def tupleToString(self, num):\n        string = \"\"\n        for i in num:\n            string += str(i)\n        return string\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.tupleToString((1, 2, 3))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param a, b: tuple\n    @return: str\n    \"\"\"\n    def tupleToString(self, a, b):\n        return '({}, {})'.format(a, b)\n\nif __name__ == '__main__':\n    print Solution().tupleToString((1, 2), (3, 4))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def tuple_to_str(tuple_str):\n    \"\"\"\n    :type tuple_str: List[str]\n    :rtype: str\n    \"\"\"\n    return \" \".join(tuple_str)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "class Solution:\n    def tuple2str(self, tup):\n        if tup is None:\n            return \"()\"\n        return ','.join(str(elem) for elem in tup)\n\nif __name__ == '__main__':\n    assert Solution().tuple2str([1, 2, 3]) == '1,2,3'\n    assert Solution().tuple2str([1, 2, None, 3, None, None]) == '1,2,,3,,,,'\n    assert Solution().tuple2str([]) == '()'\n    assert Solution().tuple2str(None) == '()'"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def tuple_to_str(tuple_):\n    return ''.join(str(e) for e in tuple_)\n\nclass Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        result = []\n        if numRows == 1:\n            return s\n        else:\n            for i in range(numRows):\n                result.append(tuple_to_str(s[i:i+numRows]))\n            return '\\n'.join(result)\n\n\nif __name__ == '__main__':\n    assert Solution().convert('PAYPALISHIRING', 2) == 'PAHNAPLSIIGYIR'\n    assert Solution().convert('PAYPALISHIRING', 3) == 'PAHNAPLSIIGYIR'"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        return '({})'.format(','.join(map(str, num)))\n\n    def tupleToString2(self, num):\n        return ''.join(map(str, num))\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.tupleToString([]))\n    print(sol.tupleToString([1, 2, 3]))\n    print(sol.tupleToString2([]))\n    print(sol.tupleToString2([1, 2, 3]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def getString(self, strs):\n        return ''.join(strs)\n\nif __name__ == '__main__':\n    solution = Solution()\n    strs = ['abc', 'de', 'fgh']\n    print(solution.getString(strs))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def tuple_to_string(tuple_):\n    if len(tuple_) == 0:\n        return \"\"\n    else:\n        return ','.join(map(str, tuple_))\n\nif __name__ == '__main__':\n    assert tuple_to_string((1, 2, 3)) == \"1,2,3\"\n    assert tuple_to_string((1, '2', 3)) == \"1,2,3\"\n    assert tuple_to_string((1, '2', 3.0)) == \"1,2,3.0\"\n    assert tuple_to_string((1, '2', 3.0, '4')) == \"1,2,3.0,4\"\n    assert tuple_to_string((1, '2', 3.0, '4', 5)) == \"1,2,3.0,4,5\"\n    assert tuple_to_string((1, '2', 3.0, '4', 5, '6')) == \"1,2,3.0,4,5,6\"\n    assert tuple_to_string((1, '2', 3.0, '4', 5, '6', 7)) == \"1,2,3.0,4,5,6,7\"\n    assert tuple_to_string((1, '2', 3.0, '4', 5, '6', 7, 8)) == \"1,2,3.0,4,5,6,7,8\"\n    assert tuple_to_string((1, '2', 3.0, '4', 5, '6', 7, 8, 9)) == \"1,2,3.0,4,5,6,7,8,9\"\n    assert tuple_to_string((1, '2', 3.0, '4', 5, '6', 7, 8, 9, 10)) == \"1,2,3.0,4,5,6,7,8,9,10\"\n    assert tuple_to_string((1, '2', 3.0, '4', 5, '6', 7, 8, 9, 10, 11)) == \"1,2,3.0,4,5,6,7,8,"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {List[Tuple[int, int]]} nums\n    # @return {string}\n    def convertToString(self, nums):\n        if not nums:\n            return \"\"\n        n = len(nums)\n        res = []\n        for i in range(n):\n            for j in range(n):\n                if nums[i][0] == nums[j][1]:\n                    res.append(str(nums[i][0]))\n                    break\n        return ''.join(res)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def tupleToString(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        for i in num:\n            if i < 0:\n                result += \"-\"\n            else:\n                result += str(i)\n        return result\n\n\nif __name__ == \"__main__\":\n    assert Solution().tupleToString([1, 2, 3, 4]) == \"1-2-3-4\""
    }
  ]
}