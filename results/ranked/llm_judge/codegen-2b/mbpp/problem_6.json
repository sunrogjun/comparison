{
  "timestamp": "2025-09-14T17:24:33.228122",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 6,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def square_perimeter(side):\n    \"\"\"\n    :type side: int\n    :rtype: int\n    \"\"\"\n    return (side * (side + 1)) / 2\n\n# Your Perimeter of Square answer\nprint square_perimeter(4)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def square_perimeter(a):\n    \"\"\"\n    :param a: The side length of the square.\n    :return: The perimeter of the square.\n    \"\"\"\n    return a * (a + 1) / 2\n\ndef main():\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n    print square_perimeter(10)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# The perimeter of a square is 4 * (x + y)\n\ndef square_perimeter(side_length):\n    return 4 * (side_length + side_length)\n\nif __name__ == \"__main__\":\n    print square_perimeter(100)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def square_perimeter(width, height):\n    return (width * 2) + (height * 2)\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\n\ndef square_area(width, height):\n    return (width * height)\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\n\ndef triangle_area(side1, side2, side3):\n    return side1 + side2 + side3\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef circle_area(radius):\n    return (4 * radius ** 2) / 3\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\n\ndef rectangle_area(width, height):\n    return width * height\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\n\ndef rectangle_perimeter(width, height):\n    return width + height\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\n\ndef trapezoid_area(width, height, side1, side2):\n    return side1 + side2 + (height * width) / 2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\n\ndef parallelogram_area(width, height):\n    return (width * height) / 2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\n\ndef trapezoid_area(width, height, side1, side2):\n    return side1 + side2 + (height * width) / 2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\n\ndef trapezoid_area(width, height, side1, side2):\n    return side1 + side2 + (height * width) / 2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\n\ndef trapezoid_area(width, height, side1, side2):\n    return side1 + side2 + (height * width) / 2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\n\ndef trapezoid_area(width, height, side1, side2):\n    return side"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\n\ndef square_perimeter(side_length):\n    return (side_length * side_length)\n\nif __name__ == '__main__':\n    print square_perimeter(5)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_square_perimeter(square_num):\n    return square_num*(square_num+1)/2\n\nif __name__ == '__main__':\n    square_num = int(input())\n    print(find_square_perimeter(square_num))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import math\n\ndef square_perimeter(side):\n    return side * side\n\ndef square_area(side):\n    return side * side\n\ndef main():\n    print square_perimeter(4)\n    print square_area(4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def perimeter(side):\n    return 2 * side\n\ndef test_perimeter():\n    assert perimeter(10) == 40\n\nif __name__ == '__main__':\n    test_perimeter()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def perimeter(side):\n    return side * 2 + 1\n\nprint(perimeter(4))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def square_perimeter(n):\n    return 2 * n * (n + 1)\n\ndef main():\n    print square_perimeter(4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef perimeter(side):\n    return 2 * side\n\n\ndef square_perimeter(side):\n    return side * side\n\n\nif __name__ == '__main__':\n    print square_perimeter(10)\n    print perimeter(10)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\ndef perim(x, y):\n    return 2 * x + 2 * y\n\ndef perim_2(x, y):\n    return x + y\n\ndef perim_3(x, y):\n    return x + y + math.sqrt(x * x + y * y)\n\ndef perim_4(x, y):\n    return x + y + math.sqrt(x * x + y * y + x * y)\n\ndef perim_5(x, y):\n    return x + y + math.sqrt(x * x + y * y + x * y + x * y)\n\ndef perim_6(x, y):\n    return x + y + math.sqrt(x * x + y * y + x * y + x * y + y * y)\n\ndef perim_7(x, y):\n    return x + y + math.sqrt(x * x + y * y + x * y + x * y + y * y + x * y)\n\ndef perim_8(x, y):\n    return x + y + math.sqrt(x * x + y * y + x * y + y * y + x * y + y * y + x * y + y * y)\n\ndef perim_9(x, y):\n    return x + y + math.sqrt(x * x + y * y + x * y + y * y + x * y + y * y + x * y + y * y)\n\ndef perim_10(x, y):\n    return x + y + math.sqrt(x * x + y * y + x * y + y * y + x * y + y * y + x * y + y * y + x * y + y * y)\n\ndef perim_11(x, y):\n    return x + y + math.sqrt(x * x + y * y + x * y + y * y + x * y + y * y + x * y + y * y + x * y + y * y + x * y + y * y)\n\ndef perim_12(x, y):\n    return x + y + math.sqrt"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getPerimeter(self, l):\n        \"\"\"\n        :type l: List[List[int]]\n        :rtype: int\n        \"\"\"\n        return sum([x[0] + x[1] for x in l])\n\n\nif __name__ == \"__main__\":\n    print(Solution().getPerimeter([[1, 2], [3, 4]]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import math\n\ndef perimeter(side):\n    return (side * side)\n\nif __name__ == '__main__':\n    for side in range(1, 101):\n        print(\"Perimeter of side {} is {}\".format(side, perimeter(side)))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def perimeter(x, y):\n    return x * 2 + y * 2\n\nif __name__ == '__main__':\n    assert perimeter(4, 2) == 8\n    assert perimeter(5, 2) == 10\n    assert perimeter(6, 2) == 12\n    assert perimeter(7, 2) == 14\n    assert perimeter(8, 2) == 16\n    assert perimeter(9, 2) == 18\n    assert perimeter(10, 2) == 20\n    assert perimeter(11, 2) == 22\n    assert perimeter(12, 2) == 24\n    assert perimeter(13, 2) == 26\n    assert perimeter(14, 2) == 28\n    assert perimeter(15, 2) == 30\n    assert perimeter(16, 2) == 32\n    assert perimeter(17, 2) == 34\n    assert perimeter(18, 2) == 36\n    assert perimeter(19, 2) == 38\n    assert perimeter(20, 2) == 40\n    assert perimeter(21, 2) == 42\n    assert perimeter(22, 2) == 44\n    assert perimeter(23, 2) == 46\n    assert perimeter(24, 2) == 48\n    assert perimeter(25, 2) == 50\n    assert perimeter(26, 2) == 52\n    assert perimeter(27, 2) == 54\n    assert perimeter(28, 2) == 56\n    assert perimeter(29, 2) == 58\n    assert perimeter(30, 2) == 60\n    assert perimeter(31, 2) == 62\n    assert perimeter(32, 2) == 64\n    assert perimeter(33, 2) == 66\n    assert perimeter(34, 2) == 68\n    assert perimeter(35, 2) == 70\n    assert perimeter(36, 2) == 72\n    assert perimeter(37, 2) == 74\n    assert perimeter(38, 2) == 76\n    assert perimeter(39, 2) == 78\n    assert perimeter(40, 2) == 80\n    assert perimeter(41, 2) == 82\n    assert perimeter(42, 2) == 84\n    assert perimeter(43, 2) == 86\n    assert perimeter(44, 2) == 88\n    assert perimeter(45, 2) == 90\n    assert perimeter(46, 2) == 92\n    assert perimeter(47, 2)"
    },
    {
      "rank": 16,
      "score": 9.987102625920418,
      "candidate": "import math\n\n\ndef perimeter(side):\n    \"\"\"\n    :type side: int\n    :rtype: int\n    \"\"\"\n    return (side * side) + (side * 2)\n\n\ndef main():\n    print(perimeter(10))\n    print(perimeter(100))\n    print(perimeter(200))\n    print(perimeter(300))\n    print(perimeter(400))\n    print(perimeter(500))\n    print(perimeter(600))\n    print(perimeter(700))\n    print(perimeter(800))\n    print(perimeter(900))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 9.920918120378495,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\nclass Solution:\n    def squarePerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n\n        x = [p.x for p in points]\n        y = [p.y for p in points]\n        return sum(x) + sum(y)\n\ns = Solution()\n\nprint(s.squarePerimeter([Point(1,1), Point(2,2), Point(3,3)]))"
    },
    {
      "rank": 18,
      "score": 9.915710695498294,
      "candidate": "import math\n\ndef square_perimeter(side):\n    \"\"\"\n    :type side: int\n    :rtype: int\n    \"\"\"\n    return int(math.ceil(side * side))\n\nif __name__ == \"__main__\":\n    print square_perimeter(10)"
    },
    {
      "rank": 19,
      "score": 9.9157047850996,
      "candidate": "def square_perimeter(n):\n    return n ** 2\n\nprint square_perimeter(4)"
    },
    {
      "rank": 20,
      "score": 9.915548631984947,
      "candidate": "import math\n\ndef square_perimeter(side):\n    \"\"\"\n    :param side: int\n    :return: int\n    \"\"\"\n    return (side * side)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    side = int(input())\n    print(\"The perimeter of a square with side length {} is {}.\".format(side, square_perimeter(side)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 9.888683544693563,
      "candidate": "# A square is a square with the same dimensions in all directions.\n#\n#  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n#  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n#  0  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14\n#  0  0  0  1  2  3  4  5  6  7  8  9 10 11 12 13\n#  0  0  0  0  1  2  3  4  5  6  7  8  9 10 11 12\n#  0  0  0  0  0  1  2  3  4  5  6  7  8  9 10 11\n#  0  0  0  0  0  0  1  2  3  4  5  6  7  8  9 10\n#  0  0  0  0  0  0  0  1  2  3  4  5  6  7  8  9\n#  0  0  0  0  0  0  0  0  1  2  3  4  5  6  7  8\n#  0  0  0  0  0  0  0  0  0  1  2  3  4  5  6  7\n#  0  0  0  0  0  0  0  0  0  0  1  2  3  4  5  6\n#  0  0  0  0  0  0  0  0  0  0  0  1  2  3  4  5\n#  0  0  0  0  0  0  0  0  0  0  0  0  1  2  3  4\n#  0  0  0  0  0  0  0  0  0  0  0  0  0  1  2  3\n#  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  2\n#  0  0"
    },
    {
      "rank": 22,
      "score": 9.830989221063417,
      "candidate": "import math\n\ndef perimeter(side):\n    return side * 2 + (side - 1) * 2\n\nif __name__ == \"__main__\":\n    print(perimeter(4))\n    print(perimeter(5))\n    print(perimeter(6))\n    print(perimeter(7))\n    print(perimeter(8))\n    print(perimeter(9))"
    },
    {
      "rank": 23,
      "score": 9.819367464309567,
      "candidate": "# https://www.hackerrank.com/challenges/square-perimeter/problem\n\ndef squarePerimeter(x, y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    return x * y + 2 * (x - 1) * (y - 1)\n\nif __name__ == '__main__':\n    print squarePerimeter(2, 2)"
    },
    {
      "rank": 24,
      "score": 9.809286326643866,
      "candidate": "class Solution(object):\n    def perimeter(self, p, q, r):\n        \"\"\"\n        :type p: int\n        :type q: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        return (p+q+r)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.perimeter(1, 1, 1))\n    print(sol.perimeter(1, 2, 3))"
    },
    {
      "rank": 25,
      "score": 9.804022219170934,
      "candidate": "def square_perimeter(side):\n    \"\"\"\n    :type side: int\n    :rtype: int\n    \"\"\"\n    return (side * (side + 1)) / 2\n\n\ndef main():\n    print square_perimeter(4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 9.79757648947325,
      "candidate": "import math\n\ndef find_square_perimeter(side):\n    return (side * side)\n\ndef find_square_area(side):\n    return (side * side)\n\ndef test():\n    assert find_square_perimeter(3) == 9, \"Perimeter of square is 9\"\n    assert find_square_area(3) == 9, \"Area of square is 9\"\n\ndef main():\n    test()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 9.767756888342156,
      "candidate": "# https://www.hackerrank.com/challenges/s-square/problem\n\ndef perimeter(n):\n    # Complete this function\n    # Return the perimeter of the square\n    return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    s = input()\n    n = int(s)\n\n    print(perimeter(n))"
    },
    {
      "rank": 28,
      "score": 9.740856084977905,
      "candidate": "import math\n\ndef find_perimeter(side):\n    return side * (side + 1) / 2\n\ndef main():\n    side = int(input('Enter side: '))\n    print('The perimeter is: %s' % find_perimeter(side))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 9.69788169163985,
      "candidate": "def perimeter(side):\n    return side * 2 + side\n\ndef main():\n    print(perimeter(4))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 9.673111332812365,
      "candidate": "from math import sqrt\n\n\ndef perim_square(l, h):\n    return 2 * (l + h)\n\n\ndef main():\n    assert(perim_square(3, 4) == 9)\n    assert(perim_square(2, 2) == 4)\n    assert(perim_square(1, 1) == 1)\n    assert(perim_square(3, 3) == 9)\n    assert(perim_square(2, 4) == 6)\n    assert(perim_square(4, 3) == 12)\n    assert(perim_square(2, 2) == 4)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 9.560496286010432,
      "candidate": "from math import sqrt\n\n\ndef get_perimeter(side):\n    return 2 * side + 1\n\n\ndef main():\n    print(get_perimeter(10))\n    print(get_perimeter(20))\n    print(get_perimeter(100))\n    print(get_perimeter(1000))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 9.521853022396565,
      "candidate": "import math\n\ndef perimeter(side):\n    return 2 * side\n\ndef test():\n    assert perimeter(4) == 8\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 33,
      "score": 9.467732083467727,
      "candidate": "def perimeter(side):\n    return 2 * side\n\ndef main():\n    print(perimeter(4))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 9.311219111923192,
      "candidate": "def perimeter(side):\n    return side*2\n\nprint perimeter(4)"
    },
    {
      "rank": 35,
      "score": 9.284475190743679,
      "candidate": "import math\n\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\nif __name__ == \"__main__\":\n    print(get_perimeter(5, 4))"
    },
    {
      "rank": 36,
      "score": 9.056891762527693,
      "candidate": "import math\n\n\ndef square_perimeter(n):\n    return (n * (n + 1)) / 2\n\n\ndef main():\n    n = int(input())\n    print(square_perimeter(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 8.851251794956086,
      "candidate": "def square_perimeter(height, width):\n    return 2 * (height + width)\n\nif __name__ == \"__main__\":\n    height = int(input())\n    width = int(input())\n    print(square_perimeter(height, width))"
    },
    {
      "rank": 38,
      "score": 8.840432207110531,
      "candidate": "from math import sqrt\n\n\ndef perimeter(side):\n    return (side * (side + 1)) / 2\n\n\nif __name__ == '__main__':\n    assert perimeter(10) == 30\n    assert perimeter(100) == 400\n    assert perimeter(1000) == 9600\n    assert perimeter(10000) == 100000\n    assert perimeter(100000) == 1000000"
    },
    {
      "rank": 39,
      "score": 8.828696896077238,
      "candidate": "def square_perimeter(square_size):\n    return square_size * square_size\n\ndef main():\n    print square_perimeter(4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.712504320293393,
      "candidate": "def square_perimeter(side_length):\n    return side_length * side_length\n\nif __name__ == \"__main__\":\n    print square_perimeter(4)\n    print square_perimeter(3)\n    print square_perimeter(2)"
    },
    {
      "rank": 41,
      "score": 8.705362997896371,
      "candidate": "import math\n\n\ndef square_perimeter(side):\n    return (side * side)\n\n\ndef square_area(side):\n    return (side * side)\n\n\ndef main():\n    print square_area(2)\n    print square_perimeter(2)\n    print square_area(5)\n    print square_perimeter(5)\n    print square_area(6)\n    print square_perimeter(6)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 42,
      "score": 8.696292141982996,
      "candidate": "import math\n\ndef perimeter(side):\n    return math.sqrt(side * side)\n\nif __name__ == '__main__':\n    print(perimeter(100))\n    print(perimeter(200))\n    print(perimeter(500))\n    print(perimeter(1000))\n    print(perimeter(2000))\n    print(perimeter(5000))\n    print(perimeter(10000))\n    print(perimeter(20000))\n    print(perimeter(50000))\n    print(perimeter(100000))"
    },
    {
      "rank": 43,
      "score": 8.686577275414656,
      "candidate": "import sys\nimport math\n\ndef get_perimeter(size):\n    return (size * 2) + (size - 1) * 4\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python3 perimeter.py <size>\")\n        sys.exit(1)\n    print(get_perimeter(int(sys.argv[1])))"
    },
    {
      "rank": 44,
      "score": 8.658139095582003,
      "candidate": "def perimeter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 2 * n * (n + 1)\n\nif __name__ == '__main__':\n    assert perimeter(1) == 4\n    assert perimeter(2) == 10\n    assert perimeter(3) == 30\n    assert perimeter(4) == 40\n    assert perimeter(5) == 50\n    assert perimeter(6) == 56\n    assert perimeter(7) == 70\n    assert perimeter(8) == 80"
    },
    {
      "rank": 45,
      "score": 8.655701158266936,
      "candidate": "def perimeter(side):\n    return 2 * side\n\nprint perimeter(4)\nprint perimeter(5)\nprint perimeter(6)"
    },
    {
      "rank": 46,
      "score": 8.612843464350625,
      "candidate": "def perimeter(side):\n    return 2 * side\n\n\nprint(\"Perimeter of a square: \", perimeter(100))"
    },
    {
      "rank": 47,
      "score": 8.585510055776796,
      "candidate": "import math\n\ndef perimeter(side):\n    \"\"\"\n    :type side: int\n    :rtype: int\n    \"\"\"\n    return 2 * side * (side + 1)\n\nif __name__ == \"__main__\":\n    assert(perimeter(10) == 40)\n    assert(perimeter(20) == 80)\n    assert(perimeter(100) == 400)"
    },
    {
      "rank": 48,
      "score": 8.573590124227366,
      "candidate": "def perimeter(square):\n    \"\"\"\n    :type square: int\n    :rtype: int\n    \"\"\"\n    return (square * 2) + (square * 2)\n\n# ------------------------------------------------------------------------------\n\nif __name__ == '__main__':\n    assert perimeter(4) == 10, 'Wrong result'\n    assert perimeter(16) == 34, 'Wrong result'\n    assert perimeter(100) == 400, 'Wrong result'\n    assert perimeter(1000) == 4000, 'Wrong result'\n    assert perimeter(10000) == 40000, 'Wrong result'\n    assert perimeter(100000) == 400000, 'Wrong result'"
    },
    {
      "rank": 49,
      "score": 8.529919732955962,
      "candidate": "class Solution(object):\n    def getPerimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return 2 * (n * (n + 1))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getPerimeter(5)"
    },
    {
      "rank": 50,
      "score": 8.495628365770417,
      "candidate": "# https://www.hackerrank.com/challenges/square-perimeter/problem\n\ndef square_perimeter(n):\n    return n * (n + 1) / 2\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(square_perimeter(n))"
    },
    {
      "rank": 51,
      "score": 8.489000197553837,
      "candidate": "def perimeter(side):\n    return (side * 2) + (side * 2)\n\nif __name__ == '__main__':\n    print(perimeter(4))"
    },
    {
      "rank": 52,
      "score": 8.467076682186368,
      "candidate": "#!/usr/bin/env python\n\nfrom sys import argv\nfrom math import sqrt\n\nif len(argv)!= 2:\n    print(\"Usage: %s <n>\\n\" % argv[0])\n    exit()\n\nn = int(argv[1])\n\ndef perimeter(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += i ** 2\n    return s\n\nprint(perimeter(n))"
    },
    {
      "rank": 53,
      "score": 8.440935166012581,
      "candidate": "# https://www.hackerrank.com/challenges/perimeter-of-a-square/problem\n\nimport math\n\ndef perimeter(size):\n    return (size * size * 2)\n\nif __name__ == '__main__':\n    size = int(input())\n    print(perimeter(size))"
    },
    {
      "rank": 54,
      "score": 8.414375891023502,
      "candidate": "from math import sqrt\n\ndef perimeter(side):\n    return (side * side)\n\ndef perimeter_square(side):\n    return (side * side * 3)\n\ndef perimeter_rectangle(side):\n    return (side * side * 2)\n\nif __name__ == '__main__':\n    print(\"Perimeter of a square:\", perimeter(4))\n    print(\"Perimeter of a rectangle:\", perimeter_rectangle(3))\n    print(\"Perimeter of a square:\", perimeter_square(4))"
    },
    {
      "rank": 55,
      "score": 8.36670253332332,
      "candidate": "from math import ceil\n\ndef square_perimeter(n):\n    return 2 * n * (n + 1) / 2\n\nif __name__ == '__main__':\n    print square_perimeter(5)"
    },
    {
      "rank": 56,
      "score": 8.342496324630083,
      "candidate": "import math\n\ndef square_perimeter(width, height):\n    \"\"\"\n    Returns the perimeter of a square with the given dimensions\n    \"\"\"\n    return width * 2 + height * 2\n\nif __name__ == \"__main__\":\n    print square_perimeter(10, 10)"
    },
    {
      "rank": 57,
      "score": 8.323354708516177,
      "candidate": "# A square is a square with a side length equal to its height.\n# If we square a number, we get a number squared.\n# If we square the number, we get a number squared times the number squared.\n# If we square the number, we get a number squared times the number squared times the number squared.\n# If we square the number, we get a number squared times the number squared times the number squared times the number squared.\n# If we square the number, we get a number squared times the number squared times the number squared times the number squared times the number squared.\n# If we square the number, we get a number squared times the number squared times the number squared times the number squared times the number squared times the number squared.\n# If we square the number, we get a number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared.\n# If we square the number, we get a number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared.\n# If we square the number, we get a number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared.\n# If we square the number, we get a number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times the number squared times"
    },
    {
      "rank": 58,
      "score": 8.268444724364896,
      "candidate": "import math\n\ndef perimeter(side):\n    return side * 2 + side * (side - 1)\n\n# This is a basic test case\nassert(perimeter(4) == 9)\n\n# This is a more complicated test case\nassert(perimeter(9) == 36)\n\n# This is a more complicated test case\nassert(perimeter(20) == 140)"
    },
    {
      "rank": 59,
      "score": 8.261910640036334,
      "candidate": "#!/usr/bin/python\n\n# https://www.hackerrank.com/challenges/square-perimeter/problem\n\ndef squarePerimeter(a, b):\n    return (a + b) * 2\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(squarePerimeter(a, b))"
    },
    {
      "rank": 60,
      "score": 8.181108353157494,
      "candidate": "# https://www.hackerrank.com/challenges/square-perimeter/problem\n\ndef square_perimeter(n):\n    \"\"\"\n    Returns the perimeter of a square with n sides.\n\n    >>> square_perimeter(4)\n    25\n    >>> square_perimeter(5)\n    30\n    >>> square_perimeter(10)\n    40\n    >>> square_perimeter(50)\n    100\n    \"\"\"\n    return sum([(n ** 2) * 2])"
    },
    {
      "rank": 61,
      "score": 8.133430722183471,
      "candidate": "def perimeter(side):\n    return side * 2 + 1\n\n\n# print perimeter(100)\n# print perimeter(30)\n# print perimeter(5)\n# print perimeter(2)\n# print perimeter(1)"
    },
    {
      "rank": 62,
      "score": 8.077245482097268,
      "candidate": "import math\n\ndef perimeter(side):\n    return (side * (side + 1)) / 2\n\nprint(perimeter(5))\n\n\"\"\"\nProblem Statement\n\nGiven a square with side length n, how many ways can you write a number?\n\"\"\"\n\ndef ways(n):\n    return sum(int(math.factorial(x) / (math.factorial(x - 1) * math.factorial(x))) for x in range(1, n + 1))\n\nprint(ways(5))"
    },
    {
      "rank": 63,
      "score": 3.6001008698928088,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return \"Point(\" + str(self.x) + \",\" + str(self.y) + \")\"\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n\nclass Solution:\n    def getPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        x1, y1 = points[0]\n        x2, y2 = points[1]\n        l = x1 - x2\n        b = y1 - y2\n        r = x2 + y2\n        for i in range(2, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[i - 1]\n            l += x1 - x2\n            b += y1 - y2\n        return l + r\n\n\ndef main():\n    # print(Solution().getPerimeter([Point(1, 2), Point(2, 2), Point(2, 1), Point(1, 1)]))\n    points = [Point(1, 1), Point(2, 2), Point(3, 3), Point(4, 4), Point(5, 5)]\n    print(Solution().getPerimeter(points))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 3.515371210856913,
      "candidate": "# https://www.hackerrank.com/challenges/square-perimeter/problem\n\nfrom math import sqrt\n\n\ndef square_perimeter(n):\n    \"\"\"\n    Returns the perimeter of a square.\n    :param n: The length of side.\n    :return: The perimeter of a square.\n    \"\"\"\n    return n * (n + 1) / 2\n\n\ndef square_perimeter_recursive(n):\n    \"\"\"\n    Returns the perimeter of a square.\n    :param n: The length of side.\n    :return: The perimeter of a square.\n    \"\"\"\n    return square_perimeter_recursive(n - 1) + square_perimeter_recursive(n - 2)\n\n\ndef square_perimeter_iterative(n):\n    \"\"\"\n    Returns the perimeter of a square.\n    :param n: The length of side.\n    :return: The perimeter of a square.\n    \"\"\"\n    return sum(x * x for x in range(1, n + 1))\n\n\ndef test_square_perimeter():\n    assert square_perimeter(4) == 9\n    assert square_perimeter_recursive(4) == 9\n    assert square_perimeter_iterative(4) == 9\n\n\ndef test_square_perimeter_error():\n    assert square_perimeter(0) == 0\n    assert square_perimeter_recursive(0) == 0\n    assert square_perimeter_iterative(0) == 0\n\n\ndef test_square_perimeter_recursive_error():\n    assert square_perimeter_recursive(1) == 0\n    assert square_perimeter_recursive(2) == 1\n    assert square_perimeter_recursive(3) == 2\n    assert square_perimeter_recursive(4) == 3\n\n\ndef test_square_perimeter_iterative_error():\n    assert square_perimeter_iterative(1) == 0\n    assert square_perimeter_iterative(2) == 1\n    assert square_perimeter_iterative(3) == 2\n    assert square_perimeter_iterative(4) == 3\n\n\nif __name__ == '__main__':\n    test_square_perimeter()"
    },
    {
      "rank": 65,
      "score": 3.401706445963188,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def calcPerimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return self.calcPerimeter(n - 2) + self.calcPerimeter(n - 1)\n\n\nif __name__ == '__main__':\n    assert Solution().calcPerimeter(4) == 10\n    assert Solution().calcPerimeter(3) == 6\n    assert Solution().calcPerimeter(2) == 4\n    assert Solution().calcPerimeter(1) == 0"
    },
    {
      "rank": 66,
      "score": 3.312567066599212,
      "candidate": "import math\n\n\ndef square_perimeter(n):\n    \"\"\"\n    :param n: length of side of square\n    :return: perimeter of square\n    \"\"\"\n    return 2 * n * math.sqrt(n ** 2 + n ** 2)\n\nif __name__ == '__main__':\n    assert square_perimeter(3) == 9\n    assert square_perimeter(4) == 14\n    assert square_perimeter(5) == 20\n    assert square_perimeter(6) == 30\n    assert square_perimeter(7) == 42\n    assert square_perimeter(8) == 56\n    assert square_perimeter(9) == 72\n    assert square_perimeter(10) == 90\n    assert square_perimeter(11) == 110\n    assert square_perimeter(12) == 144\n    assert square_perimeter(13) == 180\n    assert square_perimeter(14) == 210\n    assert square_perimeter(15) == 252\n    assert square_perimeter(16) == 280\n    assert square_perimeter(17) == 336\n    assert square_perimeter(18) == 396\n    assert square_perimeter(19) == 464\n    assert square_perimeter(20) == 560\n    assert square_perimeter(21) == 624\n    assert square_perimeter(22) == 720\n    assert square_perimeter(23) == 840\n    assert square_perimeter(24) == 1000\n    assert square_perimeter(25) == 1260\n    assert square_perimeter(26) == 1440\n    assert square_perimeter(27) == 1680\n    assert square_perimeter(28) == 1920\n    assert square_perimeter(29) == 2240\n    assert square_perimeter(30) == 2520\n    assert square_perimeter(31) == 3024\n    assert square_perimeter(32) == 3240\n    assert square_perimeter(33) == 3600\n    assert square_perimeter(34) == 4080\n    assert square_perimeter(35) == 4500\n    assert square_perimeter(36) == 5200\n    assert square_perimeter(37) == 5500\n    assert square_perimeter(38"
    },
    {
      "rank": 67,
      "score": 3.291625197078105,
      "candidate": "def perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef perimeter(side):\n    return 2 * side + 1\n\n\ndef"
    },
    {
      "rank": 68,
      "score": 3.280617300398256,
      "candidate": "def square_perimeter(side):\n    return side * 2 + side\n\ndef test_square_perimeter():\n    assert square_perimeter(4) == 10\n\nif __name__ == '__main__':\n    test_square_perimeter()"
    },
    {
      "rank": 69,
      "score": 3.1950416245830753,
      "candidate": "def get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\ndef get_perimeter"
    },
    {
      "rank": 70,
      "score": 3.137330330093197,
      "candidate": "def square_perimeter(side):\n    \"\"\"\n    :type side: int\n    :rtype: int\n    \"\"\"\n    return (side * (side + 1)) / 2\n\nif __name__ == '__main__':\n    assert square_perimeter(4) == 8"
    },
    {
      "rank": 71,
      "score": 3.1258801039333544,
      "candidate": "class Solution:\n    \"\"\"\n    @param n: A integer\n    @return: An integer\n    \"\"\"\n    def compute(self, n):\n        return (n * (n + 1)) / 2\n\n\nif __name__ == '__main__':\n    assert Solution().compute(1) == 4\n    assert Solution().compute(2) == 4\n    assert Solution().compute(3) == 6\n    assert Solution().compute(4) == 8\n    assert Solution().compute(5) == 10\n    assert Solution().compute(6) == 12\n    assert Solution().compute(7) == 14\n    assert Solution().compute(8) == 16\n    assert Solution().compute(9) == 18\n    assert Solution().compute(10) == 20\n    assert Solution().compute(11) == 22\n    assert Solution().compute(12) == 24\n    assert Solution().compute(13) == 26\n    assert Solution().compute(14) == 28\n    assert Solution().compute(15) == 30\n    assert Solution().compute(16) == 32\n    assert Solution().compute(17) == 34\n    assert Solution().compute(18) == 36\n    assert Solution().compute(19) == 38\n    assert Solution().compute(20) == 40\n    assert Solution().compute(21) == 42\n    assert Solution().compute(22) == 44\n    assert Solution().compute(23) == 46\n    assert Solution().compute(24) == 48\n    assert Solution().compute(25) == 50\n    assert Solution().compute(26) == 52\n    assert Solution().compute(27) == 54\n    assert Solution().compute(28) == 56\n    assert Solution().compute(29) == 58\n    assert Solution().compute(30) == 60\n    assert Solution().compute(31) == 62\n    assert Solution().compute(32) == 64\n    assert Solution().compute(33) == 66\n    assert Solution().compute(34) == 68\n    assert Solution().compute(35) == 70\n    assert Solution().compute(36) == 72\n    assert Solution().compute(37) == 74\n    assert Solution().compute(38"
    },
    {
      "rank": 72,
      "score": 3.112525705284539,
      "candidate": "def square_perimeter(square):\n    \"\"\"\n    square: a square object\n    returns: perimeter of the square\n    \"\"\"\n    return square.length*2 + square.width*2 + square.height*2\n\ndef main():\n    \"\"\"\n    Unit tests for square_perimeter()\n    \"\"\"\n    assert square_perimeter(square_object(1, 2, 3)) == 10\n    assert square_perimeter(square_object(5, 0, 0)) == 10\n    assert square_perimeter(square_object(0, 5, 0)) == 10\n    assert square_perimeter(square_object(0, 0, 5)) == 10\n    assert square_perimeter(square_object(1, 1, 1)) == 4\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 3.079368166101807,
      "candidate": "def square_perimeter(side):\n    return 2 * side * (side + 1)\n\n# Test cases\nassert square_perimeter(5) == 10\nassert square_perimeter(6) == 12\nassert square_perimeter(7) == 14\nassert square_perimeter(8) == 16\nassert square_perimeter(9) == 18\nassert square_perimeter(10) == 20\n\n# Your code\n# The input side can be any integer.\n# The output should be a number.\n\n# If the input side is not a square, return 0.\n\n# If the input side is square, return the perimeter of the square."
    },
    {
      "rank": 74,
      "score": 3.042150584089749,
      "candidate": "def perimeter(side):\n    return (side * side)\n\n\nif __name__ == \"__main__\":\n    assert perimeter(10) == 40, \"Expected 40, got %d\" % perimeter(10)\n    assert perimeter(20) == 40, \"Expected 40, got %d\" % perimeter(20)\n    assert perimeter(30) == 60, \"Expected 60, got %d\" % perimeter(30)\n    assert perimeter(35) == 60, \"Expected 60, got %d\" % perimeter(35)\n    assert perimeter(40) == 80, \"Expected 80, got %d\" % perimeter(40)\n    assert perimeter(50) == 80, \"Expected 80, got %d\" % perimeter(50)\n    assert perimeter(60) == 120, \"Expected 120, got %d\" % perimeter(60)\n    assert perimeter(70) == 120, \"Expected 120, got %d\" % perimeter(70)\n    assert perimeter(80) == 160, \"Expected 160, got %d\" % perimeter(80)\n    assert perimeter(90) == 160, \"Expected 160, got %d\" % perimeter(90)"
    },
    {
      "rank": 75,
      "score": 3.036889468752255,
      "candidate": "def perimeter(side):\n    \"\"\"\n    :param side: the length of a square side\n    :type side: int\n    :return: the perimeter of a square\n    :rtype: int\n    \"\"\"\n    return 2 * side + 1\n\nif __name__ == \"__main__\":\n    assert perimeter(10) == 30, \"Error: the perimeter of a square is wrong\""
    },
    {
      "rank": 76,
      "score": 3.034869095083491,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getPerimeter(self, n):\n        \"\"\"\n        :param n:\n        :return:\n        \"\"\"\n        return n * (n + 1) / 2\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getPerimeter(4)"
    },
    {
      "rank": 77,
      "score": 3.025660717781411,
      "candidate": "def get_square_perimeter(side):\n    return (side * side)\n\ndef get_square_perimeter_recursive(side):\n    if side <= 0:\n        return 0\n\n    return (side * get_square_perimeter_recursive(side - 1))\n\nprint(get_square_perimeter(5))\nprint(get_square_perimeter_recursive(5))"
    },
    {
      "rank": 78,
      "score": 2.972636153799473,
      "candidate": "from math import sqrt\n\n\ndef square_perimeter(x, y):\n    return x * y\n\n\ndef square_perimeter_recursive(x, y):\n    if x == 0 or y == 0:\n        return 0\n\n    return square_perimeter_recursive(x - 1, y) + square_perimeter_recursive(x, y - 1) + square_perimeter_recursive(x - 1, y - 1)\n\n\ndef square_perimeter_dp(x, y):\n    return square_perimeter_dp_aux(x, y, [0] * (x + 1))\n\n\ndef square_perimeter_dp_aux(x, y, result):\n    if x == 0 or y == 0:\n        return result[0]\n\n    return square_perimeter_dp_aux(x - 1, y, result) + square_perimeter_dp_aux(x, y - 1, result) + square_perimeter_dp_aux(x - 1, y - 1, result)\n\n\ndef main():\n    print square_perimeter(1, 1)\n    print square_perimeter(2, 2)\n    print square_perimeter(3, 3)\n    print square_perimeter(4, 4)\n    print square_perimeter(5, 5)\n    print square_perimeter(6, 6)\n    print square_perimeter(7, 7)\n    print square_perimeter(8, 8)\n\n    print square_perimeter_recursive(1, 1)\n    print square_perimeter_recursive(2, 2)\n    print square_perimeter_recursive(3, 3)\n    print square_perimeter_recursive(4, 4)\n    print square_perimeter_recursive(5, 5)\n    print square_perimeter_recursive(6, 6)\n    print square_perimeter_recursive(7, 7)\n    print square_perimeter_recursive(8, 8)\n\n    print square_perimeter_dp(1, 1)\n    print square_perimeter_dp(2, 2)\n    print square_perimeter_dp(3, 3)\n    print square_perimeter_dp(4, 4"
    },
    {
      "rank": 79,
      "score": 2.94745956555495,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\nclass Solution:\n    def squarePerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        return sum([point.x * point.x + point.y * point.y for point in points])\n\n\nif __name__ == '__main__':\n    points = [Point(1, 2), Point(2, 3), Point(3, 4), Point(1, 4)]\n    s = Solution()\n    print(s.squarePerimeter(points))\n    points = [Point(1, 1), Point(1, 2), Point(1, 3), Point(1, 4), Point(2, 1), Point(2, 2), Point(2, 3), Point(2, 4), Point(3, 1), Point(3, 2), Point(3, 3), Point(3, 4), Point(4, 1), Point(4, 2), Point(4, 3), Point(4, 4)]\n    print(s.squarePerimeter(points))"
    },
    {
      "rank": 80,
      "score": 2.9294495888677496,
      "candidate": "# https://leetcode.com/problems/square-perimeter/\n# https://leetcode.com/problems/square-area/\n\nclass Solution(object):\n    def squarePerimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return 2 * (n * (n + 1)) / 2\n\n\ndef main():\n    solution = Solution()\n    assert solution.squarePerimeter(2) == 4\n    assert solution.squarePerimeter(3) == 9\n    assert solution.squarePerimeter(4) == 16\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 2.9142050058151163,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def calculatePerimeter(self, n):\n        # Write your code here\n        if n < 0:\n            return 0\n        else:\n            return (n * (n + 1)) / 2\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.calculatePerimeter(1)"
    },
    {
      "rank": 82,
      "score": 2.8891563750785547,
      "candidate": "from math import sqrt\n\n\ndef perimeter(size):\n    \"\"\"\n    :type size: int\n    :rtype: int\n    \"\"\"\n    return 2 * size * (size + 1)\n\n\nif __name__ == '__main__':\n    assert perimeter(10) == 55\n    assert perimeter(100) == 2525\n    assert perimeter(1000) == 144736\n    assert perimeter(10000) == 979609\n    assert perimeter(100000) == 1698608\n    assert perimeter(1000000) == 2147483647\n    assert perimeter(10000000) == 2147483647\n    assert perimeter(100000000) == 2147483647\n    assert perimeter(1000000000) == 2147483647\n    assert perimeter(10000000000) == 2147483647\n    assert perimeter(100000000000) == 2147483647\n    assert perimeter(1000000000000) == 2147483647\n    assert perimeter(10000000000000) == 2147483647\n    assert perimeter(100000000000000) == 2147483647\n    assert perimeter(1000000000000000) == 2147483647\n    assert perimeter(10000000000000000) == 2147483647\n    assert perimeter(100000000000000000) == 2147483647"
    },
    {
      "rank": 83,
      "score": 2.8855805956760703,
      "candidate": "def square_perimeter(width, height):\n    return 2 * (width + height)\n\n#Test Cases\nassert square_perimeter(5, 5) == 10, \"5x5 is 10\"\nassert square_perimeter(1, 1) == 2, \"1x1 is 2\"\nassert square_perimeter(4, 4) == 8, \"4x4 is 8\"\nassert square_perimeter(5, 1) == 10, \"5x1 is 10\"\nassert square_perimeter(1, 5) == 10, \"1x5 is 10\"\nassert square_perimeter(1, 3) == 4, \"1x3 is 4\"\nassert square_perimeter(3, 3) == 9, \"3x3 is 9\"\nassert square_perimeter(3, 4) == 12, \"3x4 is 12\"\nassert square_perimeter(4, 4) == 12, \"4x4 is 12\"\nassert square_perimeter(5, 3) == 15, \"5x3 is 15\"\nassert square_perimeter(3, 5) == 15, \"3x5 is 15\"\nassert square_perimeter(5, 5) == 20, \"5x5 is 20\"\nassert square_perimeter(4, 1) == 12, \"4x1 is 12\"\nassert square_perimeter(1, 4) == 12, \"1x4 is 12\"\nassert square_perimeter(4, 1) == 12, \"4x1 is 12\"\nassert square_perimeter(4, 4) == 16, \"4x4 is 16\"\nassert square_perimeter(1, 1) == 2, \"1x1 is 2\"\nassert square_perimeter(0, 0) == 0, \"0x0 is 0\"\nassert square_perimeter(1, 0) == 2, \"1x0 is 2\"\nassert square_perimeter(0, 1) == 2, \"0x1 is 2\"\nassert square_perimeter(0, 3) == 6, \"0x3 is 6\"\nassert square_perimeter(3, 0) == 6, \"3x0 is 6\"\nassert square_perimeter(0, 3) == 6, \"0x3 is 6\"\nassert square"
    },
    {
      "rank": 84,
      "score": 2.875488384292848,
      "candidate": "def perimeter(side):\n    \"\"\"\n    Perimeter of a square is the sum of its four sides.\n    \"\"\"\n    return side*2 + side*side\n\n# Unit Test\ndef test_square_perimeter():\n    assert perimeter(4) == 8\n\n# Practice\n\ndef square_perimeter(side):\n    return perimeter(side)\n\n# Test\nassert square_perimeter(4) == 8\n\n# Your Code\ndef square_perimeter(side):\n    return perimeter(side)"
    },
    {
      "rank": 85,
      "score": 2.8536687334417996,
      "candidate": "# Definition for a point.\n# class Point:\n#     def __init__(self, a=0, b=0):\n#         self.x = a\n#         self.y = b\n\nclass Solution:\n    # @param {Point[]} points\n    # @return {number}\n    def computeArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        xmin, ymin, xmax, ymax = points[0].x, points[0].y, points[0].x, points[0].y\n        for p in points:\n            xmin = min(xmin, p.x)\n            xmax = max(xmax, p.x)\n            ymin = min(ymin, p.y)\n            ymax = max(ymax, p.y)\n        return (xmax - xmin) * (ymax - ymin)"
    },
    {
      "rank": 86,
      "score": 2.824957267035281,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getPerimeter(self, height, width):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :rtype: int\n        \"\"\"\n        x, y = 0, 0\n        res = 0\n        while x < width:\n            res += x\n            y += 1\n            x += 1\n        while y < height:\n            res += y\n            x += 1\n        return res\n\n\nif __name__ == \"__main__\":\n    Solution().getPerimeter(1, 1)"
    },
    {
      "rank": 87,
      "score": 2.8239012767312643,
      "candidate": "def square_perimeter(side_length):\n    \"\"\"\n    :param side_length: The length of side of square\n    :return: The perimeter of square\n    \"\"\"\n    return side_length * side_length\n\nif __name__ == '__main__':\n    assert square_perimeter(3) == 9, \"Case 1\"\n    assert square_perimeter(4) == 10, \"Case 2\"\n    assert square_perimeter(5) == 15, \"Case 3\"\n    assert square_perimeter(6) == 22, \"Case 4\"\n    assert square_perimeter(7) == 30, \"Case 5\"\n    assert square_perimeter(8) == 40, \"Case 6\"\n    assert square_perimeter(9) == 45, \"Case 7\"\n    assert square_perimeter(10) == 50, \"Case 8\"\n    assert square_perimeter(11) == 55, \"Case 9\"\n    assert square_perimeter(12) == 62, \"Case 10\"\n    assert square_perimeter(13) == 70, \"Case 11\"\n    assert square_perimeter(14) == 80, \"Case 12\"\n    assert square_perimeter(15) == 90, \"Case 13\"\n    assert square_perimeter(16) == 100, \"Case 14\"\n    assert square_perimeter(17) == 110, \"Case 15\"\n    assert square_perimeter(18) == 120, \"Case 16\"\n    assert square_perimeter(19) == 130, \"Case 17\"\n    assert square_perimeter(20) == 140, \"Case 18\"\n    assert square_perimeter(21) == 150, \"Case 19\"\n    assert square_perimeter(22) == 160, \"Case 20\"\n    assert square_perimeter(23) == 170, \"Case 21\"\n    assert square_perimeter(24) == 180, \"Case 22\"\n    assert square_perimeter(25) == 190, \"Case 23\"\n    assert square_perimeter(26) == 200, \"Case 24\"\n    assert square_perimeter(27) == 210, \"Case 25\"\n    assert square_perimeter(28) == 220, \"Case 26\"\n    assert square_perimeter("
    },
    {
      "rank": 88,
      "score": 2.81791378961879,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTake a square and find the perimeter.\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf"
    },
    {
      "rank": 89,
      "score": 2.803057317056014,
      "candidate": "def perimeter(side):\n    return side * 2 + side + 1\n\nif __name__ == \"__main__\":\n    assert perimeter(2) == 4, \"Failed\"\n    assert perimeter(3) == 6, \"Failed\"\n    assert perimeter(4) == 8, \"Failed\"\n    assert perimeter(5) == 10, \"Failed\"\n    assert perimeter(6) == 12, \"Failed\"\n    assert perimeter(7) == 14, \"Failed\"\n    assert perimeter(8) == 16, \"Failed\"\n    assert perimeter(9) == 18, \"Failed\"\n    assert perimeter(10) == 20, \"Failed\"\n    assert perimeter(11) == 22, \"Failed\"\n    assert perimeter(12) == 24, \"Failed\"\n    assert perimeter(13) == 26, \"Failed\"\n    assert perimeter(14) == 28, \"Failed\"\n    assert perimeter(15) == 30, \"Failed\"\n    assert perimeter(16) == 32, \"Failed\"\n    assert perimeter(17) == 34, \"Failed\"\n    assert perimeter(18) == 36, \"Failed\"\n    assert perimeter(19) == 38, \"Failed\"\n    assert perimeter(20) == 40, \"Failed\"\n    assert perimeter(21) == 42, \"Failed\"\n    assert perimeter(22) == 44, \"Failed\"\n    assert perimeter(23) == 46, \"Failed\"\n    assert perimeter(24) == 48, \"Failed\"\n    assert perimeter(25) == 50, \"Failed\"\n    assert perimeter(26) == 52, \"Failed\"\n    assert perimeter(27) == 54, \"Failed\"\n    assert perimeter(28) == 56, \"Failed\"\n    assert perimeter(29) == 58, \"Failed\"\n    assert perimeter(30) == 60, \"Failed\"\n    assert perimeter(31) == 62, \"Failed\"\n    assert perimeter(32) == 64, \"Failed\"\n    assert perimeter(33) == 66, \"Failed\"\n    assert perimeter(34) == 68, \"Failed\"\n    assert perimeter(35) == 70, \"Failed\"\n    assert perimeter(36) =="
    },
    {
      "rank": 90,
      "score": 2.7717572978308542,
      "candidate": "# https://www.hackerrank.com/challenges/square-perimeter/problem\n\n# My solution\ndef perimeter(side):\n    return side * 2 + side\n\n\n# Your function will be called like this:\n# side = your_function(side)\n\n# The input will be a non-negative integer.\n# The output should be a non-negative integer.\n# The answer may be 0.\ndef solution(side):\n    return perimeter(side)\n\n# Test case 1:\n# side = 1\n# expected_output = 2\n# actual_output = 2\n# Test case 2:\n# side = 2\n# expected_output = 4\n# actual_output = 4\n# Test case 3:\n# side = 3\n# expected_output = 6\n# actual_output = 6\n\nprint(solution(1))\nprint(solution(2))\nprint(solution(3))"
    },
    {
      "rank": 91,
      "score": 2.7713514873528293,
      "candidate": "def square_perimeter(n):\n    return n*(n + 1)\n\n# ------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert square_perimeter(4) == 9, \"Self-checking failed\"\n    assert square_perimeter(10) == 55, \"Self-checking failed\"\n    assert square_perimeter(100) == 962, \"Self-checking failed\"\n    assert square_perimeter(1000) == 162916, \"Self-checking failed\"\n    assert square_perimeter(10000) == 2732161, \"Self-checking failed\"\n    assert square_perimeter(100000) == 5455313, \"Self-checking failed\"\n    assert square_perimeter(1000000) == 109536217, \"Self-checking failed\""
    },
    {
      "rank": 92,
      "score": 2.6927724309005887,
      "candidate": "def square_perimeter(x, y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    return 2 * x + y\n\n\nclass Solution:\n    \"\"\"\n    @param: n: An integer\n    @return: An integer\n    \"\"\"\n    def calculate_area(self, n):\n        \"\"\"\n        @type: n: int\n        @rtype: int\n        \"\"\"\n        return square_perimeter(n, n)\n\n\nclass Solution2:\n    \"\"\"\n    @param: n: An integer\n    @return: An integer\n    \"\"\"\n    def calculate_area(self, n):\n        \"\"\"\n        @type: n: int\n        @rtype: int\n        \"\"\"\n        return n * (n + 1) / 2\n\n\nif __name__ == '__main__':\n    print Solution().calculate_area(10)"
    },
    {
      "rank": 93,
      "score": 2.598069846996758,
      "candidate": "def square_perimeter(x, y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    return 2 * x + 2 * y\n\n\nclass Solution(object):\n    def square_perimeter(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return square_perimeter(x, y)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.square_perimeter(1, 1)\n    print s.square_perimeter(2, 3)\n    print s.square_perimeter(4, 5)\n    print s.square_perimeter(6, 7)"
    },
    {
      "rank": 94,
      "score": 2.5795927098777094,
      "candidate": "# https://oj.leetcode.com/problems/square-area/\n# Given a positive integer, return its square root.\n#\n# Example 1:\n#\n# Input: 4\n# Output: 2\n# Example 2:\n#\n# Input: 9\n# Output: 16\n# Example 3:\n#\n# Input: 8\n# Output: 4\n#\n# Follow up:\n# Could you do it without using any loop / recursion?\n\nclass Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        # brute force\n        if x <= 1:\n            return x\n        # binary search\n        # base case\n        # left = 0\n        # right = x - 1\n        # while left <= right:\n        #     mid = left + (right - left) / 2\n        #     if mid * mid == x:\n        #         return mid\n        #     elif mid * mid > x:\n        #         right = mid - 1\n        #     else:\n        #         left = mid + 1\n        # return left if left == right else 0\n        #\n        # linear search\n        # return pow(x, 1/2)\n        #\n        # O(N) time\n        # while x!= 1:\n        #     if x % 2 == 0:\n        #         x = x / 2\n        #     else:\n        #         x = 3 * x + 1\n        # return x\n        #\n        # O(N log N) time\n        while x:\n            if x % 2 == 0:\n                x = x / 2\n            else:\n                x = 3 * x + 1\n        return x"
    },
    {
      "rank": 95,
      "score": 2.562622440579525,
      "candidate": "from __future__ import print_function\nfrom collections import defaultdict\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        :type cipher: str\n        :rtype: int\n        \"\"\"\n        l, r = 0, 0\n        for c in cipher:\n            if c == 'L':\n                l += 1\n            elif c == 'R':\n                r += 1\n            elif c == 'U':\n                l -= 1\n            elif c == 'D':\n                r -= 1\n        return 2 * (r - l + 1)"
    },
    {
      "rank": 96,
      "score": 2.4585956892388863,
      "candidate": "def get_square_perimeter(square):\n    \"\"\"\n    Return the perimeter of a square.\n    \"\"\"\n    return 2 * square\n\ndef get_square_area(square):\n    \"\"\"\n    Return the area of a square.\n    \"\"\"\n    return square ** 2\n\ndef get_square_perimeter_area_ratio(square):\n    \"\"\"\n    Return the area to perimeter ratio of a square.\n    \"\"\"\n    return square / 2\n\ndef test_square_perimeter_area_ratio():\n    assert get_square_perimeter_area_ratio(10) == 10 / 2\n\ndef test_square_perimeter_area_ratio_error():\n    assert get_square_perimeter_area_ratio(0) == 0\n\ndef test_square_perimeter_area_ratio_error_2():\n    assert get_square_perimeter_area_ratio(1) == 1\n\ndef test_square_perimeter_area_ratio_error_3():\n    assert get_square_perimeter_area_ratio(1.5) == 1.5\n\ndef test_square_perimeter_area_ratio_error_4():\n    assert get_square_perimeter_area_ratio(2.5) == 2.5\n\ndef test_square_perimeter_area_ratio_error_5():\n    assert get_square_perimeter_area_ratio(3.5) == 3.5\n\ndef test_square_perimeter_area_ratio_error_6():\n    assert get_square_perimeter_area_ratio(4.5) == 4.5\n\ndef test_square_perimeter_area_ratio_error_7():\n    assert get_square_perimeter_area_ratio(5.5) == 5.5\n\ndef test_square_perimeter_area_ratio_error_8():\n    assert get_square_perimeter_area_ratio(6.5) == 6.5\n\ndef test_square_perimeter_area_ratio_error_9():\n    assert get_square_perimeter_area_ratio(7.5) == 7.5\n\ndef"
    },
    {
      "rank": 97,
      "score": 2.443864319709795,
      "candidate": "import math\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 + 1\n\n\ndef getPerimeter(side):\n    return side * 2 +"
    },
    {
      "rank": 98,
      "score": 2.3445312236450473,
      "candidate": "from math import sqrt\n\n\ndef perimeter(side):\n    return side * 2 + 1\n\n\ndef main():\n    \"\"\"\n    >>> main()\n    >>> perimeter(1)\n    2\n    >>> perimeter(2)\n    4\n    >>> perimeter(3)\n    6\n    >>> perimeter(4)\n    8\n    >>> perimeter(5)\n    11\n    >>> perimeter(6)\n    12\n    >>> perimeter(7)\n    14\n    \"\"\"\n    for i in range(1, 10):\n        print(perimeter(i))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 99,
      "score": 2.330044740962161,
      "candidate": "# create a square of side 1\nsquare = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]]\n\n# create a square of side 2\nsquare2 = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]]\n\n# create a square of side 3\nsquare3 = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]]\n\n# create a square of side 4\nsquare4 = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]]\n\n# create a square of side 5\nsquare5 = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]]\n\n# create a square of side 6\nsquare6 = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]]\n\n# create a square of side 7\nsquare7 = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],"
    },
    {
      "rank": 100,
      "score": 2.255325352925685,
      "candidate": "# https://leetcode.com/problems/square-perimeter/\n\nclass Solution(object):\n    def squarePerimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (n + 1) / 2\n\n# for problem 1\nclass Solution1(object):\n    def squarePerimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (n + 1) / 2\n\n\n# for problem 2\nclass Solution2(object):\n    def squarePerimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * n"
    }
  ]
}