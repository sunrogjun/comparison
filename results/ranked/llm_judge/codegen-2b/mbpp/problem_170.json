{
  "timestamp": "2025-09-14T18:37:35.014357",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 170,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for a string:\n# class String:\n#     def __init__(self, s):\n#         self.s = s\n#         self.length = len(s)\n#\n# class Solution:\n#     def longestCommonPrefix(self, strs):\n#         \"\"\"\n#         :type strs: List[String]\n#         :rtype: String\n#         \"\"\"\n#         return \"\".join(strs[0].split(\"\")[:len(strs[0])])\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[String]\n        :rtype: String\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        s = strs[0]\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if i == j:\n                    continue\n                if s[i]!= s[j]:\n                    return s[:i]\n        return s\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestCommonPrefix([\"abc\", \"aabb\", \"bb\", \"aabbc\"]))\n    print(sol.longestCommonPrefix([\"aa\", \"b\", \"aa\"]))\n    print(sol.longestCommonPrefix([\"aa\", \"aabbcc\", \"aabbcc\"]))\n    print(sol.longestCommonPrefix([\"abc\", \"ab\", \"ab\"]))\n    print(sol.longestCommonPrefix([\"abcd\", \"abcd\", \"abcd\"]))\n    print(sol.longestCommonPrefix([\"abcd\", \"abcd\", \"ab\"]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        return reduce(lambda x, y: x if x == y else None, strs, None)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.longestCommonPrefix([\"flower\",\"flow\",\"flight\"])\n    print sol.longestCommonPrefix([\"flower\",\"flow\",\"flight\"])\n    print sol.longestCommonPrefix([\"flower\",\"flow\",\"flie\"])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        strs = sorted(strs)\n        l = 0\n        for i in range(len(strs)):\n            if i == 0 or strs[i]!= strs[i - 1]:\n                l = 0\n            else:\n                l = min(l, len(strs[i]) - 1)\n        return strs[0][:l]\n\nif __name__ == '__main__':\n    s = Solution()\n    strs = [\"a\", \"aa\", \"b\", \"bb\", \"c\", \"cc\", \"c\", \"ccc\", \"c\", \"cccc\"]\n    print(s.longestCommonPrefix(strs))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Definition for a string:\n# class String:\n#     def __init__(self, s):\n#         self.s = s\n#         self.len = len(s)\n# \n# class Solution:\n#     def longestCommonPrefix(self, strs):\n#         \"\"\"\n#         :type strs: List[String]\n#         :rtype: String\n#         \"\"\"\n#         if not strs:\n#             return \"\"\n#         return max(strs, key=lambda s: len(s.s) if s.s else 0)\n\nclass Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[String]\n        :rtype: String\n        \"\"\"\n        if not strs:\n            return \"\"\n        strs.sort(key=lambda s: len(s.s) if s.s else 0)\n        return strs[0].s"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def longest_common_prefix(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    result = ''\n    for s in strings:\n        if s.startswith(result):\n            result = s\n        else:\n            break\n    return result"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        max_len = 0\n        for s in strs:\n            if max_len < len(s):\n                max_len = len(s)\n        for i in range(max_len):\n            for j in range(i, max_len):\n                if strs[0][i]!= strs[1][j]:\n                    return strs[0][:i]\n        return strs[0][:max_len]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.longestCommonPrefix(['a', 'a', 'aa'])\n    print sol.longestCommonPrefix(['', '', 'aa'])\n    print sol.longestCommonPrefix(['a', 'aa', 'a'])\n    print sol.longestCommonPrefix(['aa', 'a', 'a'])\n    print sol.longestCommonPrefix(['', '', ''])\n    print sol.longestCommonPrefix(['', '', 'aa'])\n    print sol.longestCommonPrefix(['', 'aa', 'a'])\n    print sol.longestCommonPrefix(['a', 'a', 'a'])\n    print sol.longestCommonPrefix(['a', 'a', 'aa'])\n    print sol.longestCommonPrefix(['a', 'aa', 'a'])"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {TreeNode[]} nodes\n    # @return {string}\n    def longestCommonPrefix(self, nodes):\n        if not nodes:\n            return \"\"\n        l = []\n        for i in range(len(nodes)):\n            node = nodes[i]\n            if not node:\n                continue\n            l.append(node.val)\n        return \"\".join(l)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for a string:\n# class String:\n#     def __init__(self, s):\n#         self.s = s\n#         self.len = len(s)\n#\n# class Solution:\n#     def longestCommonPrefix(self, strs):\n#         \"\"\"\n#         :type strs: List[String]\n#         :rtype: str\n#         \"\"\"\n#         if len(strs) == 0:\n#             return \"\"\n#         strs.sort()\n#         return strs[0]\n\nclass Solution:\n    # @param strs, a list of strings\n    # @return a string\n    def longestCommonPrefix(self, strs):\n        if len(strs) == 0:\n            return \"\"\n        s = strs[0]\n        for s in strs[1:]:\n            if s[0]!= s[0]:\n                return \"\"\n        return s"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param strings, a list of strings\n    # @return a string\n    def longestCommonPrefix(self, strings):\n        if not strings:\n            return \"\"\n        if len(strings) == 1:\n            return strings[0]\n        if len(strings) == 2:\n            return strings[0] if strings[0] == strings[1] else \"\"\n        i = 0\n        while i < len(strings[0]) and i < len(strings[1]):\n            if strings[0][i]!= strings[1][i]:\n                return strings[0][:i]\n            i += 1\n        return strings[0][:i]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.longestCommonPrefix([\"abc\", \"abcdef\", \"abcdefgh\", \"abcdefghij\"]) == \"abc\"\n    assert s.longestCommonPrefix([\"abc\", \"abcdef\", \"abcdefgh\", \"abcdefghij\"]) == \"abc\"\n    assert s.longestCommonPrefix([\"abc\", \"abcdef\", \"abcdefgh\", \"abcdefghij\"]) == \"abc\"\n    assert s.longestCommonPrefix([\"abc\", \"abcdef\", \"abcdefgh\", \"abcdefghij\"]) == \"abc\""
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        lens = [0] * len(strs)\n        for i, s in enumerate(strs):\n            lens[i] = len(s)\n        for i in xrange(1, len(strs)):\n            for j in xrange(0, lens[i]):\n                if strs[i][j]!= strs[i - 1][j]:\n                    break\n            else:\n                lens[i] = max(lens[i], lens[i - 1])\n        return strs[0][:lens[0]]\n\n# test\nassert Solution().longestCommonPrefix([\"abcd\", \"a\", \"ab\", \"abc\"]) == \"a\"\nassert Solution().longestCommonPrefix([\"abc\", \"abc\", \"abc\"]) == \"abc\"\nassert Solution().longestCommonPrefix([\"a\", \"b\", \"c\"]) == \"\""
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def longest_common_prefix(s):\n    \"\"\"\n    :type s: List[str]\n    :rtype: str\n    \"\"\"\n    if not s:\n        return ''\n\n    length = len(s[0])\n    for i in range(len(s) - 1):\n        if s[i]!= s[i + 1]:\n            break\n        length = min(length, len(s[i]))\n\n    result = ''\n    for i in range(length):\n        if s[0][i]!= s[1][i]:\n            break\n        result += s[0][i]\n\n    return result\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n\n        result = strs[0]\n        for i in range(len(strs) - 1):\n            if result == strs[i]:\n                continue\n            else:\n                break\n\n        for j in range(i):\n            if result == strs[j]:\n                result += strs[j]\n\n        return result"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        res = strs[0]\n        for s in strs[1:]:\n            while s and s[0]!= res[0]:\n                res = res[:-1]\n            res = res + s[0]\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonPrefix([\"abc\", \"ab\", \"abc\"]) == \"abc\"\n    assert Solution().longestCommonPrefix([\"ab\", \"bc\", \"cd\"]) == \"ab\"\n    assert Solution().longestCommonPrefix([\"\", \"a\", \"ab\"]) == \"\""
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefixes.java\n# from CommonPrefix"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import sys\n\nif sys.version_info.major == 2:\n    import string as _string\nelse:\n    import string\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        for i in range(min(len(strs), len(strs[0]))):\n            if i == 0:\n                result = strs[0][:i]\n            else:\n                if strs[0][:i] == strs[1][:i]:\n                    result = strs[0][:i]\n                else:\n                    break\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestCommonPrefix([\"abc\", \"abc\", \"ab\"]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "#\n# Solution 1:\n#\ndef longestCommonPrefix(strs):\n    if not strs:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    prefix = strs[0]\n    for s in strs[1:]:\n        while s and s[0] == prefix[0]:\n            prefix = prefix[1:]\n            s = s[1:]\n        prefix += s\n    return prefix\n\n#\n# Solution 2:\n#\ndef longestCommonPrefix2(strs):\n    if not strs:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        return min(strs)\n    prefix = strs[0]\n    for s in strs[1:]:\n        while s and s[0] == prefix[0]:\n            prefix = prefix[1:]\n            s = s[1:]\n        prefix += s\n    return prefix\n\n\n#\n# Solution 3:\n#\ndef longestCommonPrefix3(strs):\n    if not strs:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    prefix = strs[0]\n    for s in strs[1:]:\n        while s and s[0] == prefix[0]:\n            prefix = prefix[1:]\n            s = s[1:]\n        prefix += s\n    return prefix\n\n\n#\n# Test Cases\n#\n# s = ['abc', 'abcdef', 'abcd', 'abcdcd', 'abcabc']\n# s = ['abc', 'abcdef', 'abcd', 'abcdcd', 'abcabc']\n# s = ['abc', 'abcdef', 'abcd', 'abcdcd', 'abcabc', 'abcabc']\n# s = ['abc', 'abcdef', 'abcd', 'abcdcd', 'abcabc', 'abcabc', 'abcabc']\n# s = ['abc', 'abcdef', 'abcd', 'abcdcd', 'abcabc', 'abcabc', 'abcabc']\n# s = ['abc', 'abcdef', 'abcd', '"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for a string.\nclass String(object):\n    def __init__(self, s):\n        \"\"\"\n        :type s: str\n        \"\"\"\n        self.s = s\n\n    def __len__(self):\n        return len(self.s)\n\n    def __str__(self):\n        return self.s\n\n    def __repr__(self):\n        return self.s\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[String]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        return strs[0].split('\\0')[0]\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonPrefix(['abc', 'abc']) == 'abc'\n    assert Solution().longestCommonPrefix(['abc', 'ab']) == 'a'\n    assert Solution().longestCommonPrefix(['ab', 'cd']) == 'ab'\n    assert Solution().longestCommonPrefix(['abcd', 'abc']) == 'ab'"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        return strs[0]"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        for i in range(len(strs)):\n            if i == 0:\n                return strs[0]\n            if i > 0 and strs[i]!= strs[i-1]:\n                return strs[0:i]\n        return strs[0]\n\n# test\nprint(Solution().longestCommonPrefix(['leetcode', 'leetcode', 'code']))\nprint(Solution().longestCommonPrefix(['leetcode', 'leetcode']))\nprint(Solution().longestCommonPrefix(['leetcode', 'leet', 'leetcode']))\nprint(Solution().longestCommonPrefix(['leet', 'leet', 'leetcode']))\nprint(Solution().longestCommonPrefix(['leet', 'leet', 'leetcode', 'code']))\nprint(Solution().longestCommonPrefix(['leet', 'leet', 'leetcode', 'leetcode']))\nprint(Solution().longestCommonPrefix(['leet', 'leet', 'leetcode', 'leetcode']))\nprint(Solution().longestCommonPrefix(['leet', 'leet', 'leetcode', 'leetcode']))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs: return \"\"\n        return strs[0]"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import collections\n\n\nclass Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n\n        prefix = \"\"\n        for i in range(len(strs[0])):\n            if prefix == \"\" or prefix[-1]!= strs[0][i]:\n                prefix += strs[0][i]\n        return prefix\n\n\nclass Solution2:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        prefix = \"\"\n        for i in range(len(strs[0])):\n            if prefix == \"\" or prefix[-1]!= strs[0][i]:\n                prefix += strs[0][i]\n            else:\n                break\n        for i in range(1, len(strs)):\n            for j in range(len(strs[i])):\n                if prefix[-1]!= strs[i][j]:\n                    prefix = prefix[:-1]\n                    break\n        return prefix\n\n\nif __name__ == '__main__':\n    solution = Solution2()\n    print solution.longestCommonPrefix([\"aba\", \"abb\", \"bbc\", \"bcd\", \"bca\"])\n    print solution.longestCommonPrefix([\"abc\", \"bcd\", \"bca\"])"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\n# https://leetcode.com/problems/longest-common-suffix/\n# https://leetcode.com/problems/longest-common-substring/\n\nclass Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        elif len(strs) == 1:\n            return strs[0]\n        \n        if len(strs) == 2:\n            return min(strs)\n        \n        p = []\n        for i in range(len(strs)):\n            for j in range(len(strs)):\n                if i == j:\n                    continue\n                elif j == 0:\n                    p.append(strs[i])\n                    break\n                elif i == 0:\n                    p.append(strs[j])\n                    break\n                else:\n                    k = 0\n                    while k < len(strs[i]) and k < len(strs[j]) and strs[i][k] == strs[j][k]:\n                        k += 1\n                    p.append(strs[i][:k])\n                    break\n        return \"\".join(p)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/discuss/54316/Java-Python-Python-C-Java-Python-C-Java-Python-C-Java-Python-C-Java-Python-C-Java-C\n\nclass Solution:\n    # @param {List[str]} strs\n    # @return {str}\n    def longestCommonPrefix(self, strs):\n        # write your code here\n        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        strs = sorted(strs)\n        for i in range(len(strs)):\n            if i == len(strs) - 1:\n                return strs[i]\n            if strs[i]!= strs[i + 1]:\n                return strs[i]\n        return \"\"\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]))\n    print(s.longestCommonPrefix([\"dog\",\"racecar\",\"car\"]))\n    print(s.longestCommonPrefix([\"dog\",\"racecar\",\"car\"]))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        max_len = 0\n        for i in range(len(strs)):\n            if i > max_len:\n                max_len = i\n            if i < len(strs) - 1:\n                if strs[i]!= strs[i + 1]:\n                    break\n        return strs[:i+1]\n\nif __name__ == \"__main__\":\n    print Solution().longestCommonPrefix([\"flower\",\"flow\",\"flight\"])"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param strs, a list of strings\n    # @return a string\n    def longestCommonPrefix(self, strs):\n        if not strs: return ''\n        \n        max_len = 0\n        for i in range(len(strs)):\n            max_len = max(max_len, len(strs[i]))\n        \n        return strs[0][:max_len]"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        return strs[0]"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "import collections\n\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        max_len = 0\n        for i in range(len(strs)):\n            max_len = max(max_len, len(strs[i]))\n        res = ''\n        for i in range(max_len):\n            for j in range(len(strs)):\n                if i >= len(strs[j]):\n                    break\n                res = res + strs[j][i]\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    strs = ['abc', 'ad', 'abcde', 'abcdef', 'abcdefgh']\n    print(sol.longestCommonPrefix(strs))\n    print(sol.longestCommonPrefix(strs, 1))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        return \"\"\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.longestCommonPrefix([\"hello\",\"leetcode\"])"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# https://discuss.leetcode.com/topic/24449/java-solution-with-explanation\n# https://discuss.leetcode.com/topic/28982/java-solution-with-explanation\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        lst = []\n        for i, s in enumerate(strs):\n            for j, t in enumerate(s):\n                if j == 0:\n                    break\n                if t!= strs[i][j-1]:\n                    break\n            else:\n                lst.append(s[:j])\n                return ''.join(lst)\n        return ''.join(lst)\n\n\nif __name__ == '__main__':\n    print Solution().longestCommonPrefix([\"flower\", \"flow\", \"flight\"])"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param strs, a list of strings\n    # @return a string\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n        return strs[0]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.longestCommonPrefix([\"hello\", \"leetcode\"])"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        return reduce(max, map(max, zip(*[[s[0] for s in strs] for s in strs]))).rstrip(\"\\n\")\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonPrefix([\"ab\", \"ac\", \"ad\"]) == \"ab\""
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        return strs[0]"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef longest_common_prefix(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    prefix = ''\n    for s in strings:\n        prefix = max(prefix, s, key=len)\n    return prefix\n\n# Your Longest Common Prefix solution here."
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        strs.sort()\n        for i in range(1, len(strs)):\n            if strs[i]!= strs[i-1]:\n                return strs[i-1]\n        return strs[0]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.longestCommonPrefix(['hello', 'leetcode']))\n    print(s.longestCommonPrefix(['love', 'hate', 'this']))\n    print(s.longestCommonPrefix(['hello', 'leetcode', 'this']))\n    print(s.longestCommonPrefix(['hello', 'love', 'hate', 'this']))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        # write your code here\n        if not strs:\n            return \"\"\n        s1 = strs[0]\n        s2 = strs[1]\n        \n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                return s1[:i]\n        return s1\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    strs = [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\n    print(sol.longestCommonPrefix(strs))"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return min(strs[0], strs[1])\n        maxlen = 0\n        for i in xrange(len(strs)):\n            if maxlen < len(strs[i]):\n                maxlen = len(strs[i])\n        for i in xrange(maxlen):\n            for j in xrange(maxlen):\n                if strs[0][i:j]!= strs[1][i:j]:\n                    break\n            else:\n                return strs[0][:i]\n        return ''\n\nif __name__ == '__main__':\n    assert Solution().longestCommonPrefix(['aa','aab']) == 'a'\n    assert Solution().longestCommonPrefix(['ab','b']) == 'ab'\n    assert Solution().longestCommonPrefix(['','a']) == ''\n    assert Solution().longestCommonPrefix(['','a','aa']) == 'a'\n    assert Solution().longestCommonPrefix(['','a','aa','b']) == 'a'"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "import collections\nclass Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if len(strs) == 0:\n            return \"\"\n\n        prefix_len = 0\n        for i in range(0, len(strs[0])):\n            if prefix_len == 0:\n                prefix_len = 1\n            else:\n                if strs[0][i]!= strs[0][prefix_len - 1]:\n                    prefix_len = 0\n            if prefix_len == len(strs[0]):\n                break\n        return strs[0][:prefix_len]\n\n\nif __name__ == \"__main__\":\n    print Solution().longestCommonPrefix([\"barf\", \"zoo\"])"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "# Approach 1: Brute force\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n# The brute force approach is the most simple solution.\n# It works by iterating over all possible pairs and checking if all strings in the pair are equal.\n# If they are, the longest common prefix is the current string.\n# If they are not, then there is no common prefix.\n#\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n#\n# Approach 2: Hash\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n#\n# Approach 3: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n#\n# Approach 4: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n#\n# Approach 5: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n#\n# Approach 6: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n#\n# Approach 7: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n#\n# Approach 8: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n\n# Approach 9: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n\n# Approach 10: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n\n# Approach 11: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n\n# Approach 12: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n\n# Approach 13: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m)\n\n# Approach 14: Trie\n# Time complexity: O(n * m)\n# Space complexity: O(n * m"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "import unittest\n\nclass Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        \n        if len(strs) == 1:\n            return strs[0]\n        \n        # Find the first common character\n        i = 0\n        while i < len(strs[0]):\n            if i >= len(strs[0]) or strs[0][i]!= strs[1][i]:\n                break\n            i += 1\n        \n        # Find the end of the common string\n        j = i\n        while j < len(strs[1]):\n            if j >= len(strs[1]):\n                return strs[0][:i]\n            if strs[0][i]!= strs[1][j]:\n                break\n            j += 1\n        \n        return strs[0][:i]\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(Solution().longestCommonPrefix([\"flower\", \"flow\", \"flight\"]), \"f\")\n        self.assertEqual(Solution().longestCommonPrefix([\"dog\", \"racecar\"]), \"\")\n        self.assertEqual(Solution().longestCommonPrefix([\"dog\", \"racecar\", \"car\"]), \"d\")\n        self.assertEqual(Solution().longestCommonPrefix([\"dog\", \"racecar\", \"car\", \"racecar\"]), \"d\")\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        l = min(len(strs[0]), len(strs[0]))\n        for i in range(l):\n            if strs[0][i]!= strs[1][i]:\n                return strs[0][:i]\n        return strs[0][:l]\n\n\n# test\nassert Solution().longestCommonPrefix([\"a\", \"ab\", \"abc\"]) == \"a\"\nassert Solution().longestCommonPrefix([\"a\", \"ab\", \"aab\"]) == \"a\"\nassert Solution().longestCommonPrefix([\"abc\", \"abcd\"]) == \"\"\nassert Solution().longestCommonPrefix([\"\", \"abc\", \"abcd\"]) == \"\"\nassert Solution().longestCommonPrefix([\"abc\", \"abc\", \"abcd\"]) == \"abc\""
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "# https://discuss.leetcode.com/topic/16076/python-solution-with-explanation-with-pretty-pretty-print\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs: return ''\n        maxlen = 0\n        for s in strs:\n            if len(s) > maxlen: maxlen = len(s)\n        prefix = strs[0]\n        for s in strs:\n            prefix = s[:maxlen]\n            for i in range(maxlen):\n                if s[i]!= prefix[i]:\n                    prefix = prefix[:i]\n                    break\n        return prefix"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs:\n            prefix = s[:len(prefix)]\n            if not s:\n                return \"\"\n        return prefix\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.longestCommonPrefix([\"abc\", \"abc\"])\n    print s.longestCommonPrefix([\"abc\", \"abcd\"])\n    print s.longestCommonPrefix([\"abc\", \"a\", \"abcd\"])\n    print s.longestCommonPrefix([\"abcd\", \"abc\", \"abc\"])\n    print s.longestCommonPrefix([\"abc\", \"a\", \"a\"])\n    print s.longestCommonPrefix([\"abc\", \"abc\", \"abcd\"])"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef get_longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    c = Counter(strs)\n    for s in strs:\n        c[s] -= 1\n        if not c[s]:\n            return strs[0]\n    return max(c, key=c.get)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return ''\n\n        if not strs[0]:\n            return ''\n\n        max_len = 0\n        max_str = ''\n\n        for i in range(0, len(strs)):\n            if max_len < len(strs[i]):\n                max_len = len(strs[i])\n\n            if max_len == 0:\n                return max_str\n\n            max_str = max(max_str, strs[i][:max_len])\n\n        return max_str\n\nif __name__ == '__main__':\n    print Solution().longestCommonPrefix(['abcd','abcde'])"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import collections\n\ndef longest_common_prefix(strings):\n    \"\"\"\n    Given a list of strings, return the longest common prefix.\n    \"\"\"\n    if not strings:\n        return ''\n    \n    # Sort the strings by length, then take the first longest string.\n    strings = sorted(strings, key=lambda x: len(x))\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) < len(longest_string):\n            longest_string = string\n    return longest_string\n\n# Test Cases\ntest_strings = [\n    ['A', 'AB', 'ABC', 'ABCD', 'ABCDE'],\n    ['AB', 'ABA', 'ABCD', 'ABCDE'],\n    ['ABC', 'ABCD', 'ABCDE']\n]\n\nfor test in test_strings:\n    print 'Test Case #{}:'.format(test_strings.index(test) + 1)\n    print' Longest Common Prefix:', longest_common_prefix(test)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if len(strs) == 0:\n            return \"\"\n        \n        if len(strs) == 1:\n            return strs[0]\n        \n        s1 = strs[0]\n        s2 = strs[1]\n        \n        i = 0\n        while i < len(s1) and i < len(s2) and s1[i] == s2[i]:\n            i += 1\n        \n        return s1[:i]"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param strs, a list of strings\n    # @return the longest common prefix\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return ''\n        prefix = strs[0]\n        for s in strs:\n            prefix = self.commonPrefix(prefix, s)\n        return prefix\n        \n    def commonPrefix(self, s1, s2):\n        if not s1 or not s2:\n            return ''\n        \n        if len(s1) == len(s2):\n            return s1\n        \n        i = 0\n        while i < len(s1) and i < len(s2) and s1[i] == s2[i]:\n            i += 1\n        return s1[:i]\n        \n        \nif __name__ == '__main__':\n    s = Solution()\n    print s.longestCommonPrefix(['a', 'ab', 'abc', 'abcd'])\n    print s.longestCommonPrefix(['', 'a', 'ab', 'abc', 'abcd'])\n    print s.longestCommonPrefix(['a', 'b', 'c', 'd'])\n    print s.longestCommonPrefix(['a', 'b', 'c', 'd'])\n    print s.longestCommonPrefix(['a', 'b', 'c', 'd', 'e'])\n    print s.longestCommonPrefix(['a', 'b', 'c', 'd', 'e'])\n    print s.longestCommonPrefix(['a', 'b', 'c', 'd', 'e'])"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            if prefix!= strs[i]:\n                return ''\n\n        return prefix"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "# https://discuss.leetcode.com/topic/73968/java-dp-o-n-solution-with-explanation\n\ndef lcp(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    n = len(strings)\n    m = len(strings[0])\n    dp = [[0] * m for _ in range(n)]\n    for i in range(1, n):\n        for j in range(m):\n            if strings[i][j] == strings[i-1][j]:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = 0\n    return strings[n - 1][m - 1]"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs: return \"\"\n        l, r = 0, len(strs) - 1\n        while l < r:\n            while l < r and strs[l]!= strs[r]:\n                l += 1\n                r -= 1\n            if l < r:\n                l += 1\n            else:\n                return strs[l - 1]\n        return strs[l - 1]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.longestCommonPrefix(['cat', 'hat', 'hat']))\n    print(s.longestCommonPrefix(['hat', 'hat', 'hat']))\n    print(s.longestCommonPrefix(['h', 'a', 't']))\n    print(s.longestCommonPrefix(['', '', '']))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param strs, a set of strings\n    # @return a string\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return ''\n\n        prefix = ''\n        for s in strs:\n            if not s:\n                continue\n            while prefix and not s[0] == prefix[0]:\n                prefix = prefix[:-1]\n            prefix = prefix + s[0]\n\n        return prefix\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.longestCommonPrefix(['', 'a', 'aa', 'ab', 'ac', 'ad', 'af']))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "# Definition for a string.\n# class String:\n#     def __init__(self, s):\n#         self.s = s\n#         self.length = len(s)\n#\n# class Solution(object):\n#     def longestCommonPrefix(self, strs):\n#         \"\"\"\n#         :type strs: List[String]\n#         :rtype: String\n#         \"\"\"\n#         strs = sorted(strs)\n#         return strs[0]\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[String]\n        :rtype: String\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        return strs[0]\n\n        # return self.s[0]\n        # for i in range(1, len(self.s)):\n        #     if self.s[0] == self.s[i]:\n        #         return self.s[0]\n        #     else:\n        #         return \"\"\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonPrefix([\"abc\",\"abc\"]) == \"abc\"\n    assert Solution().longestCommonPrefix([\"\",\"abc\"]) == \"\"\n    assert Solution().longestCommonPrefix([\"a\",\"bc\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"abc\",\"abc\"]) == \"abc\""
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "# https://www.geeksforgeeks.org/longest-common-prefix/\n\ndef common_prefix(strs):\n    if len(strs) == 0:\n        return ''\n\n    if len(strs) == 1:\n        return strs[0]\n\n    for i in range(0, len(strs[0])):\n        if strs[0][i]!= strs[1][i]:\n            return strs[0][:i]\n\n    return strs[0][:len(strs[0]) - 1]\n\nif __name__ == \"__main__\":\n    print(common_prefix(['abcd', 'abcde', 'abcd', 'abcd', 'abcd']))\n    print(common_prefix(['abcd', 'abcde', 'abcde', 'abcde', 'abcde']))\n    print(common_prefix(['abcde', 'abcde', 'abcde', 'abcde', 'abcde']))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import collections\n\nclass Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        return reduce(lambda s, t: s[:min(len(s), len(t))], strs, \"\")\n\nif __name__ == \"__main__\":\n    print Solution().longestCommonPrefix([\"flower\", \"flow\", \"flight\"])"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    # Build a mapping of strings to their indices.\n    mapping = {s: i for i, s in enumerate(strs)}\n    # Build a list of the indices of the characters in the longest common\n    # prefix.\n    prefix_indices = [i for i, s in enumerate(strs[0]) if mapping[s] == mapping[strs[0][i]]]\n    # Find the longest common prefix in the given list of strings.\n    prefix = ''.join([strs[0][i] for i in prefix_indices])\n    # Find the maximum of the prefix length and the length of the longest common\n    # prefix.\n    max_prefix_length = max([len(s) for s in strs])\n    max_prefix_length = max(max_prefix_length, len(prefix))\n    return prefix[:max_prefix_length]\n\n\nif __name__ == '__main__':\n    strs = ['abc', 'abc', 'abcd', 'abcde']\n    print(longest_common_prefix(strs))\n    print(longest_common_prefix(['abc', 'abc', 'abcd', 'abcde']))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param strs: A list of strings\n    # @return: A string denote the longest common prefix\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        \n        # get the first string\n        first = strs[0]\n        for i in xrange(1, len(strs)):\n            if first == strs[i]:\n                continue\n            else:\n                break\n        \n        # the rest of strings\n        rest = strs[i:]\n        \n        # find the common prefix\n        common_prefix = \"\"\n        for i in xrange(len(first)):\n            if first[i]!= rest[0][i]:\n                break\n            common_prefix = common_prefix + first[i]\n        \n        return common_prefix\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.longestCommonPrefix([\"abc\",\"aab\",\"bbc\"])\n    print s.longestCommonPrefix([\"bbc\",\"aab\",\"abc\"])"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        return reduce(lambda s, t: s if s and t[0]==s[0] else t[0], strs, \"\")\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.longestCommonPrefix([\"abc\",\"abcde\",\"abcd\"])\n    print s.longestCommonPrefix([\"abc\",\"abcde\",\"abcd\",\"ab\"])\n    print s.longestCommonPrefix([\"abc\",\"abcde\",\"abcd\",\"abcd\"])"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        lcp = min(strs[0], len(strs[0]))\n        for s in strs:\n            lcp = min(lcp, min(s, len(s)))\n        return strs[0][:lcp]"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\n# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        s = strs[0]\n        for i in range(1, len(strs)):\n            if s!= strs[i]:\n                return s\n        return s\n\nif __name__ == '__main__':\n    print Solution().longestCommonPrefix(['abcd','xyz'])"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s: str) -> None:\n        self.s = s\n\n    def __str__(self) -> str:\n        return self.s\n\n\nclass Solution:\n    def longestCommonPrefix(self, strs: List[String]) -> str:\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        l = min(len(strs[0].s), len(strs[1].s))\n        for i in range(l):\n            if strs[0].s[i]!= strs[1].s[i]:\n                return strs[0].s[:i]\n        return strs[0].s[:l]\n\n\nstrs = [\"a\", \"b\", \"c\", \"d\", \"e\"]\ns = Solution()\nprint(s.longestCommonPrefix(strs))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def longest_common_prefix(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    if not strings:\n        return ''\n    return reduce(lambda s1, s2: s1 if s1 == s2 else min(s1, s2), strings)\n\n\nif __name__ == '__main__':\n    print(longest_common_prefix(['abc', 'abc', 'ab', 'ab']))\n    print(longest_common_prefix(['abc', 'abc', 'a', 'ab', 'ab']))\n    print(longest_common_prefix(['abc', 'abc', 'a', 'ab', 'ab', 'a']))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def longest_common_prefix(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    return reduce(lambda s, t: s if s and s[0] == t[0] else t, strings, \"\")\n\nif __name__ == \"__main__\":\n    strings = [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\n    print(longest_common_prefix(strings))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        for s in strs:\n            while s and s[0]!= result[0]:\n                result = result[:1] + s[0]\n                s = s[1:]\n        return result"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        curr_len = 0\n        max_len = 0\n        for i in range(len(strs)):\n            if i == 0:\n                curr_len = 0\n            else:\n                if strs[i][curr_len] == strs[i-1][curr_len]:\n                    curr_len += 1\n                else:\n                    curr_len = 0\n            if curr_len > max_len:\n                max_len = curr_len\n        return strs[0][:max_len]"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "import collections\n\ndef lcp(strs):\n    return collections.reduce(lambda a, b: a[:len(a)] if b in a else b, strs, '')\n\nif __name__ == '__main__':\n    print lcp(['ab', 'cd', 'ef'])\n    print lcp(['abcd', 'ef', 'cdef'])\n    print lcp(['abcd', 'ef', 'cde', 'f'])\n    print lcp(['abcd', 'ef', 'cde', 'f', 'abcde'])"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        length = len(strs)\n        if length == 0:\n            return \"\"\n        if length == 1:\n            return strs[0]\n        result = strs[0]\n        for i in range(1, length):\n            if strs[i]!= strs[i-1]:\n                result = result[:len(result)]\n            result = result[:len(strs[i])]\n        return result"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n\n        strs = list(strs)\n        if len(strs) == 1:\n            return strs[0]\n\n        i = 0\n        for j in range(1, len(strs[0])):\n            if strs[0][j] == strs[1][j]:\n                i += 1\n            else:\n                break\n        return strs[0][:i]\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonPrefix([\"abc\", \"ab\", \"a\", \"xyz\"]) == \"abc\""
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        \n        for i in range(0, len(strs[0])):\n            if not all(strs[0][:i] == s for s in strs):\n                return strs[0][:i]\n        return strs[0][:len(strs[0]) - 1]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.longestCommonPrefix(['', 'a', 'ab', 'ac']) == 'a'\n    assert s.longestCommonPrefix(['a', 'ab', 'ac']) == 'a'\n    assert s.longestCommonPrefix(['ab', 'ac', 'ad']) == 'ab'\n    assert s.longestCommonPrefix(['ac', 'ad', 'ae']) == 'ac'\n    assert s.longestCommonPrefix(['ad', 'ae', 'af']) == 'ad'\n    assert s.longestCommonPrefix(['af', 'af', 'af']) == 'af'"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n        longest = strs[0]\n        for s in strs[1:]:\n            if not s:\n                return longest\n            longest = longest[:len(s)]\n        return longest\n\n\nif __name__ == '__main__':\n    print Solution().longestCommonPrefix([\"abc\", \"abc\"])\n    print Solution().longestCommonPrefix([\"abc\", \"abcd\", \"abcd\"])\n    print Solution().longestCommonPrefix([\"\", \"a\", \"a\"])"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def longestCommonPrefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        if len(strs[i]) < len(strs[i-1]):\n            prefix = strs[i-1]\n        else:\n            prefix += strs[i]\n    return prefix\n\nif __name__ == '__main__':\n    assert longestCommonPrefix(['abc', 'abc']) == 'abc'\n    assert longestCommonPrefix(['abc', 'xyz']) == 'abc'\n    assert longestCommonPrefix(['abc', 'x', 'xyz']) == 'abc'\n    assert longestCommonPrefix(['abc', 'xy', 'x']) == 'abc'\n    assert longestCommonPrefix(['abc', 'xyz', 'abc']) == 'abc'\n    assert longestCommonPrefix(['abc', 'xyz', 'xy']) == 'abc'\n    assert longestCommonPrefix(['abc', 'xyz', 'xyz']) == 'abc'\n    assert longestCommonPrefix(['abc', 'xyz', 'xyzxyz']) == 'abc'"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from collections import defaultdict\nfrom itertools import groupby\nfrom operator import itemgetter\nfrom functools import reduce\n\ndef longestCommonPrefix(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    if not strings:\n        return ''\n\n    prefixes = defaultdict(list)\n    for s in strings:\n        for i in range(len(s)):\n            prefixes[s[:i]].append(s[i:])\n\n    def get_prefix(strings):\n        for s in strings:\n            yield s[0]\n            for i in range(1, len(s)):\n                yield s[:i]\n\n    return max(get_prefix(prefixes.keys()), key=len)\n\nif __name__ == '__main__':\n    strings = ['abcdefgh', 'abcdefghi', 'abcd', 'abcd', 'abc']\n    print(longestCommonPrefix(strings))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef longestCommonPrefix(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    strings = [s.lower() for s in strings]\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i][:j] not in Counter(strings[i][:j]).keys():\n                break\n            else:\n                return strings[i][:j]\n    return \"\"\n\nif __name__ == \"__main__\":\n    strings = [\"hello\", \"world\", \"earth\", \"wind\", \"and\", \"fire\"]\n    print(longestCommonPrefix(strings))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\nclass Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        strs_set = set(strs)\n        lcp = \"\"\n        for i in range(len(strs[0])):\n            if strs[0][i] in strs_set:\n                lcp += strs[0][i]\n            else:\n                return \"\"\n        for s in strs[1:]:\n            for i in range(len(s)):\n                if s[i] in strs_set:\n                    lcp += s[i]\n                else:\n                    return \"\"\n        return lcp"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\n# Use the same algorithm as in LeetCode\n# Use a hash table\n# https://leetcode.com/problems/longest-common-prefix/discuss/372799/C%2B%2B-Hash-Table-with-time-complexity-O-1-Space\n\nclass Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs: return \"\"\n        l = min(map(len, strs))\n        h = {}\n        for s in strs:\n            for i in range(l):\n                if i < len(s) and s[i] in h:\n                    h[s[i]] += 1\n                else:\n                    h[s[i]] = 1\n        \n        l = []\n        for i in range(l):\n            if h[strs[0][i]] == 1:\n                l.append(strs[0][i])\n                h.pop(strs[0][i])\n        \n        for s in strs[1:]:\n            l = []\n            for i in range(l):\n                if i < len(s) and s[i] in h:\n                    h[s[i]] += 1\n                else:\n                    h[s[i]] = 1\n            \n            for i in range(l):\n                if h[s[i]] == 1:\n                    l.append(s[i])\n                    h.pop(s[i])\n                \n            l.sort()\n            l.reverse()\n            \n            for i in range(l):\n                if i < len(s) and s[i] in h:\n                    h[s[i]] -= 1\n                    if h[s[i]] == 0:\n                        h.pop(s[i])\n                        l.remove(s[i])\n            \n            if l:\n                return ''.join(l)\n            \n        return \"\""
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef longest_common_prefix(strs):\n    \"\"\"\n    Returns the longest common prefix for a set of strings.\n    \"\"\"\n    if not strs:\n        return \"\"\n    # Find the longest common prefix for each string in the set.\n    longest_prefix = strs[0]\n    for s in strs[1:]:\n        if len(s) < len(longest_prefix):\n            longest_prefix = s\n        else:\n            longest_prefix = longest_prefix[:max(0, len(s) - len(longest_prefix))]\n    return longest_prefix\n\ndef main():\n    \"\"\"\n    Reads in a list of strings and returns the longest common prefix.\n    \"\"\"\n    if len(sys.argv)!= 2:\n        print(\"Usage: %s <file>\" % sys.argv[0])\n        sys.exit(1)\n    with open(sys.argv[1], \"r\") as f:\n        strs = [s.strip() for s in f.readlines()]\n    print(longest_common_prefix(strs))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def lcp(s1, s2):\n    if not s1 or not s2:\n        return 0\n    l = min(len(s1), len(s2))\n    for i in range(l):\n        if s1[i]!= s2[i]:\n            return i\n    return l"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/discuss/76437/C%2B%2B-Python-with-explanation\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        maxLen = 0\n        maxPrefix = \"\"\n        for i in range(len(strs[0])):\n            for j in range(len(strs)):\n                if i >= len(strs[j]) or strs[j][i]!= strs[0][i]:\n                    break\n            else:\n                maxLen = max(maxLen, i+1)\n                maxPrefix = strs[0][:i+1]\n            break\n        return maxPrefix"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        return ''.join(sorted(set(strs[0])))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n# Simple solution\ndef lcp(s1, s2):\n    \"\"\"\n    Return the longest common prefix of s1 and s2.\n    \"\"\"\n    if len(s1) < len(s2):\n        return s1\n    else:\n        return s2[:len(s1)]\n\n# Solution using dynamic programming\ndef lcp(s1, s2):\n    \"\"\"\n    Return the longest common prefix of s1 and s2.\n    \"\"\"\n    dp = [0] * (len(s1)+1)\n    for i in range(len(s1)+1):\n        dp[i] = i\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                dp[i+1] = min(dp[i+1], dp[i]+1)\n    return dp[-1]\n\n# Solution using DP and counting\ndef lcp(s1, s2):\n    \"\"\"\n    Return the longest common prefix of s1 and s2.\n    \"\"\"\n    dp = [0] * (len(s1)+1)\n    for i in range(len(s1)+1):\n        dp[i] = i\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                dp[i+1] = min(dp[i+1], dp[i]+1)\n    return dp[-1]\n\n# Test\ndef main():\n    assert lcp('a', 'a') == 0\n    assert lcp('a', 'b') == 0\n    assert lcp('a', 'ab') == 0\n    assert lcp('ab', 'a') == 1\n    assert lcp('ab', 'ba') == 2\n    assert lcp('abc', 'ab') == 2\n    assert lcp('ab', 'abc') == 3\n    assert lcp('ab', 'abcd') == 3\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "import collections\n\ndef longest_common_prefix(strings):\n    \"\"\"\n    Given a list of strings, return the longest common prefix.\n    \"\"\"\n    if not strings:\n        return ''\n    if len(strings) == 1:\n        return strings[0]\n\n    longest = ''\n    for s in strings:\n        if not s:\n            continue\n        i = 0\n        while i < len(s):\n            if i < len(s) - 1 and s[i] == s[i+1]:\n                i += 1\n            else:\n                break\n        if i > 0:\n            longest = s[:i]\n    return longest\n\ndef main():\n    strings = ['ab', 'abc', 'abcd']\n    print(longest_common_prefix(strings))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        return ''.join(s for s in strs if s)\n\ns = Solution()\nprint(s.longestCommonPrefix(['a', 'b', 'c', 'd']))\nprint(s.longestCommonPrefix(['ab', 'c', 'd', 'ef']))\nprint(s.longestCommonPrefix(['ab', 'c', 'd']))\nprint(s.longestCommonPrefix(['abc', 'bcd', 'd']))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "import re\nimport sys\n\n\ndef lcp(strings):\n    \"\"\"\n    >>> lcp(['cat', 'hat', 'rat'])\n    'cat'\n    >>> lcp(['hat', 'rat', 'dog'])\n    'hat'\n    >>> lcp(['rat', 'dog'])\n    'rat'\n    >>> lcp(['rat', 'dog', 'cat'])\n    'rat'\n    >>> lcp(['rat', 'dog', 'cat', 'hat'])\n    'rat'\n    >>> lcp(['rat', 'dog', 'cat', 'hat', 'banana'])\n    'rat'\n    >>> lcp(['rat', 'dog', 'cat', 'hat', 'banana', 'apple'])\n    'rat'\n    >>> lcp(['rat', 'dog', 'cat', 'hat', 'banana', 'apple', 'banana'])\n    'rat'\n    \"\"\"\n    if not strings:\n        return ''\n    l = len(strings[0])\n    for s in strings:\n        if len(s)!= l:\n            return ''\n    return strings[0]\n\n\ndef test():\n    assert lcp(['cat', 'hat', 'rat']) == 'cat'\n    assert lcp(['hat', 'rat', 'dog']) == 'hat'\n    assert lcp(['rat', 'dog']) == 'rat'\n    assert lcp(['rat', 'dog']) == 'rat'\n    assert lcp(['rat', 'dog', 'cat']) == 'rat'\n    assert lcp(['rat', 'dog', 'cat', 'hat']) == 'rat'\n    assert lcp(['rat', 'dog', 'cat', 'hat', 'banana']) == 'rat'\n    assert lcp(['rat', 'dog', 'cat', 'hat', 'banana', 'apple']) == 'rat'\n    assert lcp(['rat', 'dog', 'cat', 'hat', 'banana', 'apple', 'banana']) == 'rat'\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        return reduce(lambda x, y: x[:len(y)] if x == y else x, strs)"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        s = strs[0]\n        for s in strs[1:]:\n            if s[0] == s[0]:\n                return s\n        return s\n\n    def longestCommonPrefix2(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        maxlen = 0\n        for s in strs:\n            if len(s) > maxlen:\n                maxlen = len(s)\n        prefix = \"\"\n        for i in range(maxlen):\n            prefix += strs[0][i]\n            for s in strs[1:]:\n                if s[i]!= prefix[i]:\n                    return prefix[:i]\n        return prefix[:maxlen]\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonPrefix([]) == \"\"\n    assert Solution().longestCommonPrefix([\"a\", \"a\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"a\", \"b\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"a\", \"b\", \"c\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"\", \"\"]) == \"\"\n    assert Solution().longestCommonPrefix([\"\", \"a\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"a\", \"\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"a\", \"b\", \"c\"]) == \"a\""
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "import collections\n\nclass Solution:\n    \"\"\"\n    @param strings: A list of strings\n    @return: The longest common prefix string\n    \"\"\"\n    def longestCommonPrefix(self, strings):\n        if not strings:\n            return ''\n        return collections.reduce(lambda x, y: x[:min(len(x), len(y))] == y, strings, '')\n\n\nif __name__ == '__main__':\n    strings = [\"hello\", \"leetcode\", \"world\", \"hello world\", \"hello world\", \"hello world\"]\n    Solution().longestCommonPrefix(strings)"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs: return \"\"\n        prefix = strs[0]\n        for s in strs[1:]:\n            while s[0]!= s[0]:\n                prefix = prefix[0]\n                s = s[1:]\n            prefix = prefix[:len(s)]\n        return prefix\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestCommonPrefix([\"aba\",\"aca\"]))\n    print(sol.longestCommonPrefix([\"a\",\"ab\",\"abc\"]))"
    },
    {
      "rank": 86,
      "score": 7.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/discuss/23982/Easy-Python-Solution-O(N)\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        \n        length = min([len(strs[0]), len(strs[1])])\n        \n        for i in range(length):\n            if strs[0][i]!= strs[1][i]:\n                break\n        else:\n            return strs[0][:i]\n        \n        for i in range(length, len(strs[0])):\n            if strs[0][i]!= strs[1][i]:\n                break\n        else:\n            return strs[0][:i]\n        \n        for i in range(length, len(strs[1])):\n            if strs[0][i]!= strs[1][i]:\n                break\n        else:\n            return strs[0][:i]\n        \n        return ''"
    },
    {
      "rank": 87,
      "score": 7.0,
      "candidate": "# Approach #1: Recursive\ndef longestCommonPrefix(strs):\n    maxLen = 0\n    for s in strs:\n        if len(s) > maxLen:\n            maxLen = len(s)\n    return s\n\n# Approach #2: Iterative\ndef longestCommonPrefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    # Find the longest common prefix in the first string\n    currMaxLen = len(strs[0])\n    for s in strs:\n        if len(s) < currMaxLen:\n            currMaxLen = len(s)\n    # Find the longest common prefix in the rest of the strings\n    for s in strs:\n        if len(s) > currMaxLen:\n            currMaxLen = len(s)\n    return strs[0][:currMaxLen]\n\n# Approach #3: Iterative\ndef longestCommonPrefix(strs):\n    # Find the maximum length of common prefix\n    currMaxLen = 0\n    for s in strs:\n        if len(s) > currMaxLen:\n            currMaxLen = len(s)\n    # Find the longest common prefix in the rest of the strings\n    for s in strs:\n        if len(s) < currMaxLen:\n            currMaxLen = len(s)\n    return strs[0][:currMaxLen]\n\n# Approach #4: Iterative\ndef longestCommonPrefix(strs):\n    # Find the maximum length of common prefix\n    currMaxLen = 0\n    for s in strs:\n        if len(s) > currMaxLen:\n            currMaxLen = len(s)\n    # Find the longest common prefix in the rest of the strings\n    for s in strs:\n        if len(s) < currMaxLen:\n            currMaxLen = len(s)\n    # Find the longest common prefix in the rest of the strings\n    for s in strs:\n        if len(s) > currMaxLen:\n            currMaxLen"
    },
    {
      "rank": 88,
      "score": 5.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\n# time: O(n)\n# space: O(1)\n# score:100\n# score:50\n# score:50\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(n)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score:100\n# score:100\n# time: O(n)\n# space: O(1)\n# score"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param strs, a list of strings\n    # @return the length of the longest common prefix\n    def longestCommonPrefix(self, strs):\n        return strs[0] if len(strs) == 1 else self.longestCommonPrefix(strs[:-1])\n\n    def longestCommonPrefix(self, strs):\n        if len(strs) == 0:\n            return \"\"\n\n        if len(strs) == 1:\n            return strs[0]\n\n        if len(strs) == 2:\n            return strs[0] if strs[0] == strs[1] else \"\"\n\n        return strs[0] if strs[0] == strs[1] else self.longestCommonPrefix(strs[2:])\n\n    def longestCommonPrefix(self, strs):\n        if len(strs) == 0:\n            return \"\"\n\n        if len(strs) == 1:\n            return strs[0]\n\n        if len(strs) == 2:\n            return strs[0] if strs[0] == strs[1] else \"\"\n\n        s1 = strs[0]\n        s2 = strs[1]\n\n        for i in xrange(1, min(len(s1), len(s2))):\n            if s1[i]!= s2[i]:\n                return s1[:i]\n\n        return s1"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n    def __repr__(self):\n        return self.s\n\nclass Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[String]\n        :rtype: String\n        \"\"\"\n        if not strs: return \"\"\n        l = min(len(strs[0]), len(strs))\n        for i in range(l):\n            if strs[0][i]!= strs[1][i]:\n                return strs[0][:i]\n        return strs[0][:l]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestCommonPrefix([\"aba\",\"xyz\"]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# @param a,b: two strings\n# @return: the longest common prefix\n# @time complexity: O(mn)\n# @space complexity: O(1)\n# @examples:\n# s = \"abcd\"\n# s = \"abcd\", \"ab\"\n# s = \"abcd\", \"acd\"\n# s = \"abcd\", \"ad\"\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        strs = sorted(strs)\n        return strs[0]\n\n        # return max(map(lambda s: max(map(lambda c: min(c, s[i]), strs[i+1:])), range(len(strs))))\n\nif __name__ == \"__main__\":\n    Solution().longestCommonPrefix(['abcd', 'abcd', 'abcd', 'abcd'])\n    Solution().longestCommonPrefix(['abcd', 'abcd', 'abcd', 'acd'])\n    Solution().longestCommonPrefix(['abcd', 'abcd', 'ad'])"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs[1:]:\n            if prefix and s.startswith(prefix):\n                prefix = s[len(prefix):]\n            else:\n                return prefix\n        return prefix\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonPrefix([\"a\", \"b\", \"c\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"\", \"\", \"a\"]) == \"\"\n    assert Solution().longestCommonPrefix([\"\", \"\", \"\", \"a\"]) == \"\""
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution:\n    # @param strs, a list of strings\n    # @return a string\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n        s1, s2 = strs[0], strs[0]\n        for s in strs[1:]:\n            if s1 == s:\n                s1 = s1 + s2[:len(s1)]\n            else:\n                s1 = s1[:len(s1) - 1]\n            s2 = s2[:len(s2) - 1]\n        return s1\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/longest-common-prefix/solution/\n\n# 1ms 100%\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs.length == 0) return \"\";\n        String s1 = strs[0];\n        String s2 = strs[0];\n        for (int i = 1; i < strs.length; i++) {\n            if (s1.equals(s2)) {\n                s1 = s1 + s2[:len(s1) - 1];\n                s2 = s2[:len(s2) - 1];\n            } else {\n                s1 = s1[:len(s1) - 1];\n                s2 = s2[:len(s2) - 1];\n            }\n        }\n        return s1;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs.length == 0) return \"\";\n        String s1 = strs[0];\n        String s2 = strs[0];\n        for (int i = 1; i < strs.length; i++) {\n            if (s1.equ"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# TLE\ndef commonPrefix(strings):\n    if len(strings) == 0:\n        return \"\"\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0]\n\ndef commonPrefix_2(strings):\n    if len(strings) == 0:\n        return \"\"\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0]\n\ndef commonPrefix_3(strings):\n    if len(strings) == 0:\n        return \"\"\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0]\n\n\n# TLE\ndef commonPrefix(strings):\n    if len(strings) == 0:\n        return \"\"\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0]\n\n\n# TLE\ndef commonPrefix_2(strings):\n    if len(strings) == 0:\n        return \"\"\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0]\n\n\n# TLE\ndef commonPrefix_3(strings):\n    if len(strings) == 0:\n        return \"\"\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0]\n\nif __name__ == \"__main__\":\n    strings = [\"a\", \"bc\", \"d\", \"e\"]\n    print(commonPrefix(strings))\n\n    strings = [\"a\", \"bc\", \"d\", \"e\"]\n    print(commonPrefix_2(strings))\n\n    strings = [\"a\", \"bc\", \"d\", \"e\"]\n    print(commonPrefix_3(strings))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\n# https://leetcode.com/problems/longest-common-suffix/\n\nclass Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return strs[0]\n        if len(strs) == 3:\n            return strs[0]\n        for i in range(len(strs)):\n            if i == 0:\n                return strs[0]\n            if i == len(strs) - 1:\n                return strs[i]\n            else:\n                if strs[i] == strs[i + 1]:\n                    return strs[i]\n        return strs[0]\n\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix2(self, strs):\n        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return strs[0]\n        if len(strs) == 3:\n            return strs[0]\n        for i in range(len(strs)):\n            if i == 0:\n                return strs[0]\n            if i == len(strs) - 1:\n                return strs[i]\n            else:\n                if strs[i] == strs[i + 1]:\n                    return strs[i]\n        return strs[0]"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def lcp(s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: str\n    \"\"\"\n    m = {}\n    for i in range(len(s1)):\n        m[s1[i]] = i\n    for i in range(len(s2)):\n        if m.get(s2[i]) is not None:\n            j = m.get(s2[i])\n            s1[j] = s2[i]\n            m[s2[i]] = j + 1\n    return ''.join(s1)\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert lcp(\"egg\", \"banana\") == \"e\", \"e\"\n    assert lcp(\"beet\", \"\") == \"\", \"beet\"\n    assert lcp(\"\", \"a\") == \"a\", \"a\"\n    assert lcp(\"abc\", \"abc\") == \"a\", \"a\"\n    assert lcp(\"abc\", \"ab\") == \"a\", \"a\"\n    assert lcp(\"abcd\", \"abcde\") == \"abc\", \"abc\"\n    assert lcp(\"abcd\", \"bcde\") == \"bc\", \"bc\"\n    assert lcp(\"abcd\", \"xyz\") == \"\", \"xyz\""
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\n# https://leetcode.com/problems/longest-common-suffix/\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n\n        prefix = \"\"\n        for i in range(len(strs[0])):\n            if strs[0][i]!= strs[1][i]:\n                break\n            prefix += strs[0][i]\n        return prefix\n\n    def longestCommonPrefix2(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n\n        prefix = \"\"\n        for i in range(min(len(strs[0]), len(strs[1]))):\n            if strs[0][i]!= strs[1][i]:\n                break\n            prefix += strs[0][i]\n        return prefix\n\n    def longestCommonPrefix3(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n\n        prefix = \"\"\n        for i in range(min(len(strs[0]), len(strs[1]))):\n            if strs[0][i]!= strs[1][i]:\n                break\n            prefix += strs[0][i]\n        return prefix\n\nif __name__ == \"__main__\":\n    print(Solution().longestCommonPrefix([\"a\", \"b\", \"ab\", \"bcd\"]))\n    print(Solution().longestCommonPrefix([\"a\", \"ab\", \"abcd\"]))\n    print(Solution().longestCommonPrefix([\"a\", \"ab\", \"abc\", \"abcd\"]))\n    print(Solution().longestCommonPrefix([\"a\", \"ab\", \"abc\", \"abcde\"]))\n    print(Solution"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/longest-common-prefix/\n# Given a set of string, find the longest common prefix(longest common sub-string).\n#\n# For example,\n# Given set = [\"flower\",\"flow\",\"flight\"]\n#\n# Return \"flower\".\n#\n# Note:\n# All inputs will be in lower-case.\n#\n# Tags: Dynamic Programming, String\n# Similar Problems: (M) Longest Common Prefix in Words\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        return strs[0]\n\n# Note:\n# 1. use DP, not DP[0][i]\n# 2. DP[0] = [0]\n# 3. DP[i][j] = max(DP[i-1][j], DP[i-1][j-1])\n# 4. DP[i][j] = min(DP[i][j-1], DP[i-1][j])\n# 5. DP[i][j] = min(DP[i][j-1], DP[i-1][j])\n# 6. DP[i][j] = max(DP[i-1][j], DP[i-1][j-1])"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n\n        s = ''\n        for i in range(min(len(strs), len(strs[0]))):\n            if i < len(strs) and i < len(strs[0]):\n                if strs[i] == strs[0][i]:\n                    s = s + strs[i]\n            else:\n                break\n        return s\n\n    # @param {string[]} strs\n    # @return {string}\n    def longestCommonPrefix2(self, strs):\n        if not strs:\n            return \"\"\n\n        if len(strs) == 1:\n            return strs[0]\n\n        n = len(strs)\n        m = len(strs[0])\n        ans = ''\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0 or strs[j][i]!= strs[0][i]:\n                    break\n                else:\n                    ans = ans + strs[j][i]\n            ans = ans + strs[0][i]\n            if len(ans) > m:\n                ans = ans[:m]\n            return ans\n\n\nif __name__ == '__main__':\n    assert Solution().longestCommonPrefix([\"a\", \"b\", \"c\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"a\", \"b\", \"c\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"a\", \"c\", \"b\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"a\", \"c\", \"b\"]) == \"a\"\n    assert Solution().longestCommonPrefix([\"a\", \"c\", \"b\", \"d\"]) == \"a\""
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/longest-common-prefix/\n# Given a set of string, return the longest common prefix.\n#\n# If there is no common prefix, return an empty string \"\".\n#\n# Examples:\n#\n# Input:\n# [\"flower\",\"flow\",\"flight\"]\n# Output:\n# \"fl\"\n#\n# Input:\n# [\"dog\",\"racecar\",\"car\"]\n# Output:\n# \"\"\n#\n# Input:\n# [\"\",\"\",\"o\",\"o\"]\n# Output:\n# \"\"\n#\n# Input:\n# [\"\",\"\",\"o\",\"a\",\"n\"]\n# Output:\n# \"o\"\n#\n# Input:\n# [\"\",\"\",\"o\",\"a\",\"n\",\"n\"]\n# Output:\n# \"on\"\n#\n# Input:\n# [\"\",\"\",\"o\",\"a\",\"n\",\"n\",\"n\"]\n# Output:\n# \"on\"\n#\n# Input:\n# [\"\",\"\",\"o\",\"a\",\"n\",\"n\",\"n\",\"n\"]\n# Output:\n# \"on\"\n#\n# Input:\n# [\"\",\"\",\"o\",\"a\",\"n\",\"n\",\"n\",\"n\",\"n\"]\n# Output:\n# \"on\"\n#\n# Input:\n# [\"\",\"\",\"o\",\"a\",\"n\",\"n\",\"n\",\"n\",\"n\",\"n\"]\n# Output:\n# \"on\"\n#\n# Note:\n# The length of all given strings are less than 500.\n#\n# Companies\n# LinkedIn\n# Related Topics\n# Two Pointers\n# Similar Questions\n# Longest Common Prefix\n#\nimport unittest\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        cur = \"\"\n        for i in range(len(strs[0])):\n            if cur == \"\" or strs[0][i]!= cur[-1]:\n                cur += strs[0][i]\n            else:\n                return cur\n        return cur\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual"
    }
  ]
}