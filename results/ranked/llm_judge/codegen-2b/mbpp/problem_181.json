{
  "timestamp": "2025-09-14T18:42:30.315139",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 181,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def has_letters_and_numbers(string):\n    return string.lower().strip()!= '' and string.lower().strip().count('a')!= 0 and string.lower().strip().count('z')!= 0 and string.lower().strip().count('1')!= 0\n\nif __name__ == '__main__':\n    print has_letters_and_numbers('abc123')"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def has_numbers(s):\n    return any(c.isdigit() for c in s) and any(c.isalpha() for c in s)\n\nprint(has_numbers('123'))\nprint(has_numbers('abc'))\nprint(has_numbers('abcd'))\nprint(has_numbers('123a'))\nprint(has_numbers('abcd'))\nprint(has_numbers('abc'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('123'))\nprint(has_numbers('"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def has_letters_and_numbers(string):\n    return string.isalpha() and string.isdigit()\n\nif __name__ == '__main__':\n    string = raw_input('Enter a string: ')\n    print has_letters_and_numbers(string)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def has_one_number(s):\n    if len(s) < 1 or len(s) > 10:\n        return False\n    if any(c.isdigit() for c in s):\n        return True\n    return False\n\nif __name__ == '__main__':\n    s = '1a1b2c3d4e5f6g7h8i9j10k'\n    print(has_one_number(s))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def check(s):\n    return s.isalnum() and s.isnumeric()\n\n\nprint check('a1b2c3')\nprint check('a1b2c')\nprint check('a1b2c3.4')\nprint check('a1b2c3.4.5')\nprint check('a1b2c3.4.5.6')\nprint check('a1b2c3.4.5.6.7')\nprint check('a1b2c3.4.5.6.7.8')"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def has_atleast_one_letter_and_one_number(string):\n    return string.isalpha() and string.isdigit()\n\nprint has_atleast_one_letter_and_one_number(\"abc1234\")"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def hasLetters(str):\n    if not str:\n        return False\n    letters = 0\n    numbers = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            numbers += 1\n        elif str[i].isalpha():\n            letters += 1\n        else:\n            return False\n    if letters > numbers:\n        return True\n    else:\n        return False\n\n\nprint hasLetters(\"a123\")\nprint hasLetters(\"a1\")\nprint hasLetters(\"a\")\nprint hasLetters(\"\")\nprint hasLetters(\"a1a2a3a4a5a6a7a8a9a10a11a12a13a14a15a16a17a18a19a20a21a22a23a24a25a26a27a28a29a30a31a32a33a34a35a36a37a38a39a40a41a42a43a44a45a46a47a48a49a50a51a52a53a54a55a56a57a58a59a60a61a62a63a64a65a66a67a68a69a70a71a72a73a74a75a76a77a78a79a80a81a82a83a84a85a86a87a88a89a90a91a92a93a94a95a96a97a98a99a100a101a102a103a104a105a106a107a108a109a110a111a112a113a114a115a116a117a118a119a120a121a122a123a124a125a126a127a128a129a130a131a132a133a134a135a136a137a138a139a140a141a142a143a144a145a146a147a148a149a150a151a152a153a154a155a156a157a158a159a160a161a162a163a164a165a166a167a168a169a170a171a172a173a174a175a176a177a178a179a180a181a182a183a184a185a"
    },
    {
      "rank": 8,
      "score": 9.370583536698913,
      "candidate": "def has_atleast_one_number(string):\n    for char in string:\n        if char.isdigit():\n            return True\n    return False\n\ndef has_atleast_one_letter(string):\n    for char in string:\n        if char.isalpha():\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    string = input(\"Enter a string: \")\n    print(has_atleast_one_number(string))\n    print(has_atleast_one_letter(string))"
    },
    {
      "rank": 9,
      "score": 9.234050852198141,
      "candidate": "def has_atleast_one_number(text):\n    return any(char.isdigit() for char in text)\n\ndef has_atleast_one_letter(text):\n    return any(char.isalpha() for char in text)\n\ndef main():\n    text = input('Enter a string: ')\n    print('The string has at least one letter and one number:', has_atleast_one_number(text), '\\n')\n    print('The string has at least one letter:', has_atleast_one_letter(text), '\\n')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 9.226766272351448,
      "candidate": "def has_atleast_one_letter_or_one_number(string):\n    \"\"\"\n    Input: string\n    Output: True or False\n    \"\"\"\n    return any(char.isdigit() or char.isalpha() for char in string)\n\nif __name__ == '__main__':\n    assert has_atleast_one_letter_or_one_number('a') == True, \"Should return True\"\n    assert has_atleast_one_letter_or_one_number('1') == False, \"Should return False\"\n    assert has_atleast_one_letter_or_one_number('ab') == True, \"Should return True\"\n    assert has_atleast_one_letter_or_one_number('123') == True, \"Should return True\"\n    assert has_atleast_one_letter_or_one_number('123a') == False, \"Should return False\"\n    assert has_atleast_one_letter_or_one_number('abcd') == False, \"Should return False\"\n    assert has_atleast_one_letter_or_one_number('a1') == False, \"Should return False\"\n    assert has_atleast_one_letter_or_one_number('123abc') == False, \"Should return False\"\n    assert has_atleast_one_letter_or_one_number('abcd12') == False, \"Should return False\"\n    assert has_atleast_one_letter_or_one_number('abc123') == True, \"Should return True\"\n    assert has_atleast_one_letter_or_one_number('abc') == True, \"Should return True\""
    },
    {
      "rank": 11,
      "score": 9.21346272767743,
      "candidate": "def has_atleast_one(s):\n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    :param s: string\n    :return: boolean\n    \"\"\"\n    return any([x.isalpha() and x.isdigit() for x in s])\n\ndef main():\n    s = \"aabbcc\"\n    print has_atleast_one(s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 9.205959372648458,
      "candidate": "def check_str(s):\n    if len(s) < 1:\n        return False\n    if len(s) == 1:\n        return True\n    if s[0] in '0123456789':\n        return True\n    return False\n\ndef main():\n    s = raw_input()\n    print \"Yes, string is atleast one letter and one number\", check_str(s)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 9.177268828905222,
      "candidate": "def has_atleast_one_number(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return any(char.isdigit() for char in s) and any(char.isdigit() for char in s)\n\nprint(has_atleast_one_number(\"a23\"))\nprint(has_atleast_one_number(\"a2345\"))\nprint(has_atleast_one_number(\"a234567\"))"
    },
    {
      "rank": 14,
      "score": 9.122564458729856,
      "candidate": "def check_string(string):\n    if string.isalpha() and string.isdigit():\n        return True\n    else:\n        return False\n\ndef check_string_with_only_letters(string):\n    if string.isalpha():\n        return True\n    else:\n        return False\n\ndef check_string_with_only_numbers(string):\n    if string.isdigit():\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = \"ab1234cde\"\n    print check_string(string)\n    print check_string_with_only_letters(string)\n    print check_string_with_only_numbers(string)"
    },
    {
      "rank": 15,
      "score": 8.973005557553902,
      "candidate": "import re\n\ndef check_string(string):\n    \"\"\"\n    Check whether a string has atleast one letter and one number.\n    :param string: string\n    :return: True or False\n    \"\"\"\n    if re.match('^[a-zA-Z0-9]+$', string):\n        return True\n    else:\n        return False"
    },
    {
      "rank": 16,
      "score": 8.95994420569242,
      "candidate": "def check_string(str):\n    # check whether str is a string\n    if type(str)!= type(''):\n        return False\n    # check whether str is empty\n    if len(str) == 0:\n        return False\n    # check whether str has atleast one letter\n    if len(str) == 1 and str.isalpha():\n        return True\n    # check whether str has atleast one number\n    if len(str) == 1 and str.isdigit():\n        return True\n    # check whether str has atleast one letter and one number\n    return False\n\nprint check_string(\"hello\")\nprint check_string(\"hello123\")\nprint check_string(\"hello1234567890\")\nprint check_string(\"1234567890\")"
    },
    {
      "rank": 17,
      "score": 8.946210893390457,
      "candidate": "def has_atleast_one(string):\n    letters = []\n    numbers = []\n    for char in string:\n        if char.isalpha():\n            letters.append(char)\n        elif char.isdigit():\n            numbers.append(char)\n    return (letters and numbers)"
    },
    {
      "rank": 18,
      "score": 8.932217008005624,
      "candidate": "def has_letters_numbers(str):\n    \"\"\"\n    :param str: a string\n    :return: True if the string has atleast one letter and one number, otherwise False\n    \"\"\"\n    if not str:\n        return False\n\n    if not str.isalnum():\n        return False\n\n    return True"
    },
    {
      "rank": 19,
      "score": 8.910084504002544,
      "candidate": "def is_valid_name(name):\n    return name.isalnum() and name.isalpha()\n\ndef is_valid_number(number):\n    return number.isdigit()\n\ndef is_valid_string(string):\n    return string.isalnum() and string.isalpha()\n\nif __name__ == '__main__':\n    print(is_valid_name(\"abcd\"))\n    print(is_valid_number(\"123\"))\n    print(is_valid_string(\"abcd\"))\n    print(is_valid_string(\"abcd_\"))\n    print(is_valid_string(\"abcd_123\"))"
    },
    {
      "rank": 20,
      "score": 8.85571690049604,
      "candidate": "def is_number(string):\n    \"\"\"\n    Check whether a string has atleast one letter and one number.\n    \"\"\"\n    if not string:\n        return False\n    for char in string:\n        if char.isdigit() or char.isalpha():\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    assert is_number(\"a1\") == True\n    assert is_number(\"a\") == False\n    assert is_number(\"aa\") == False\n    assert is_number(\"aa1\") == False\n    assert is_number(\"a1a\") == False\n    assert is_number(\"a1b\") == False\n    assert is_number(\"1a\") == False\n    assert is_number(\"a1b1\") == False\n    assert is_number(\"aa1\") == False\n    assert is_number(\"a1a1\") == False\n    assert is_number(\"a1a1a\") == False\n    assert is_number(\"a1a1b\") == False\n    assert is_number(\"a1a1b1\") == False\n    assert is_number(\"a1b1\") == False\n    assert is_number(\"a1b1a1\") == False\n    assert is_number(\"a1b1a1b\") == False\n    assert is_number(\"a1b1a1b1\") == False\n    assert is_number(\"a1b1a1b1a1\") == False\n    assert is_number(\"a1b1a1b1a1b1\") == False\n    assert is_number(\"a1b1a1b1a1b1a1\") == False\n    assert is_number(\"a1b1a1b1a1b1a1b\") == False\n    assert is_number(\"a1b1a1b1a1b1a1b1\") == False\n    assert is_number(\"a1b1a1b1a1b1a1b1a\") == False\n    assert is_number(\"a1b1a1b1a1b1a1b1a1\") == False\n    assert is_number(\"a1b1a1b1a1b1a1b1"
    },
    {
      "rank": 21,
      "score": 8.855395696632057,
      "candidate": "def checkString(s):\n    \"\"\"\n    s is a string\n    returns True if s has atleast one letter and one number.\n    \"\"\"\n    return bool(s.count('a') + s.count('A')) and bool(s.count('1') + s.count('9'))\n\nif __name__ == '__main__':\n    print(checkString('a1a2a3'))\n    print(checkString('a1a2a3a4a5'))\n    print(checkString('a1a2a3a4a5a6'))\n    print(checkString('a1a2a3a4a5a6a7a8'))\n    print(checkString('a1a2a3a4a5a6a7a8a9a10'))\n    print(checkString('a1a2a3a4a5a6a7a8a9a10a11a12'))\n    print(checkString('a1a2a3a4a5a6a7a8a9a10a11a12a13'))\n    print(checkString('a1a2a3a4a5a6a7a8a9a10a11a12a13a14a15a16'))\n    print(checkString('a1a2a3a4a5a6a7a8a9a10a11a12a13a14a15a16a17a18a19'))"
    },
    {
      "rank": 22,
      "score": 8.850707355641543,
      "candidate": "def has_atleast_one_number(string):\n    for i in range(len(string)):\n        if string[i].isdigit():\n            return True\n    return False\n\nprint has_atleast_one_number(\"123\")"
    },
    {
      "rank": 23,
      "score": 8.8281618090209,
      "candidate": "def is_num(s):\n\tif any(i.isdigit() for i in s):\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef is_alpha(s):\n\tif any(i.isalpha() for i in s):\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef is_alphanum(s):\n\tif any(i.isalnum() for i in s):\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef main():\n\tprint(is_num(\"123\"))\n\tprint(is_alpha(\"hello\"))\n\tprint(is_alphanum(\"hello\"))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 24,
      "score": 8.81367773444215,
      "candidate": "def has_letter_and_number(string):\n    return bool(string and string[0].isalpha() and string[0].isdigit())\n\nif __name__ == '__main__':\n    assert has_letter_and_number('hello')\n    assert not has_letter_and_number('')\n    assert not has_letter_and_number('hello123')\n    assert has_letter_and_number('hello123a')"
    },
    {
      "rank": 25,
      "score": 8.76828871349479,
      "candidate": "def has_number_and_letter(string):\n    return any(char.isalpha() and char.isdigit() for char in string)\n\nprint has_number_and_letter(\"a12b3c4d5e\")"
    },
    {
      "rank": 26,
      "score": 8.750282588864879,
      "candidate": "def has_num_and_let(s):\n    return any(char.isdigit() and char.isalpha() for char in s)\n\nif __name__ == '__main__':\n    print(has_num_and_let(\"Hello\"))"
    },
    {
      "rank": 27,
      "score": 8.715724466237427,
      "candidate": "def has_one_letter_and_one_number(str):\n    \"\"\"\n    :param str: string\n    :return: True or False\n    \"\"\"\n    for letter in str:\n        if letter.isalpha():\n            if letter.isdigit():\n                return True\n    return False\n\nif __name__ == '__main__':\n    str = 'ABC'\n    print(has_one_letter_and_one_number(str))"
    },
    {
      "rank": 28,
      "score": 8.692801520950061,
      "candidate": "def has_one_num_letter(text):\n    if len(text) > 0:\n        if text.isalpha():\n            if text.isnumeric():\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\nif __name__ == '__main__':\n    text = \"Hello\"\n    print has_one_num_letter(text)"
    },
    {
      "rank": 29,
      "score": 8.632293453617281,
      "candidate": "def has_letter_and_number(string):\n    if not string:\n        return False\n    for c in string:\n        if c.isalpha() and c.isdigit():\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    print has_letter_and_number(\"a1234\")\n    print has_letter_and_number(\"abcd\")\n    print has_letter_and_number(\"1234\")\n    print has_letter_and_number(\"abcd\")\n    print has_letter_and_number(\"ab\")\n    print has_letter_and_number(\"abcd\")\n    print has_letter_and_number(\"a1234\")"
    },
    {
      "rank": 30,
      "score": 8.625262456968262,
      "candidate": "def is_valid(str):\n    return str and all(c.isalpha() and c.isdigit() for c in str)\n\n\nif __name__ == '__main__':\n    s = input()\n    print(is_valid(s))"
    },
    {
      "rank": 31,
      "score": 8.625142247198651,
      "candidate": "def has_atleast_one_letter_and_one_number(s):\n    if not s:\n        return False\n\n    if any(char.isdigit() for char in s):\n        return True\n\n    if any(char.isalpha() for char in s):\n        return True\n\n    return False\n\nprint(has_atleast_one_letter_and_one_number(\"a1b2c3d4\"))"
    },
    {
      "rank": 32,
      "score": 8.616253589228675,
      "candidate": "import re\n\ndef has_letter_or_number(string):\n    pattern = r'[a-zA-Z0-9]+'\n    return re.match(pattern, string) is not None\n\nprint(has_letter_or_number('a123'))"
    },
    {
      "rank": 33,
      "score": 8.610076160146226,
      "candidate": "def hasLetterAndNumber(text):\n    if len(text) < 1:\n        return False\n    if len(text) == 1:\n        return True\n    for i in range(0,len(text)):\n        if text[i] in \"0123456789\":\n            return True\n    return False\n\nprint hasLetterAndNumber(\"aa\")\nprint hasLetterAndNumber(\"aa12\")\nprint hasLetterAndNumber(\"aa1\")\nprint hasLetterAndNumber(\"aa1234\")\nprint hasLetterAndNumber(\"aa12345\")\nprint hasLetterAndNumber(\"aa123456\")\nprint hasLetterAndNumber(\"aa1234567\")\nprint hasLetterAndNumber(\"aa12345678\")\nprint hasLetterAndNumber(\"aa123456789\")"
    },
    {
      "rank": 34,
      "score": 8.606486429141842,
      "candidate": "def has_atleast_one_letter_and_one_number(string):\n    # write your code here\n    for i in string:\n        if i.isdigit() or i.isalpha():\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    print(has_atleast_one_letter_and_one_number(\"abc\"))\n    print(has_atleast_one_letter_and_one_number(\"123\"))"
    },
    {
      "rank": 35,
      "score": 8.60156811074208,
      "candidate": "def is_number(s):\n    return all([x.isdigit() for x in s]) and len(s)>0\n\ndef is_number_or_letter(s):\n    return all([x.isdigit() or x.isalpha() for x in s]) and len(s)>0\n\ndef main():\n    s = input()\n    if is_number(s):\n        print(\"is number\")\n    elif is_number_or_letter(s):\n        print(\"is number or letter\")\n    else:\n        print(\"is not number or letter\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.565425580227462,
      "candidate": "def is_valid_string(string):\n    if len(string) < 1:\n        return False\n    for i in range(len(string)):\n        if not string[i].isdigit() and not string[i].isalpha():\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    string = input(\"Enter a string to be checked: \")\n    print(is_valid_string(string))"
    },
    {
      "rank": 37,
      "score": 8.548876241946822,
      "candidate": "def has_letters_and_numbers(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    letters = 0\n    numbers = 0\n    for char in string:\n        if char.isdigit():\n            numbers += 1\n        elif char.isalpha():\n            letters += 1\n        else:\n            return False\n    return letters and numbers"
    },
    {
      "rank": 38,
      "score": 8.542875062379007,
      "candidate": "def has_numbers(string):\n    return len(string.split(' ')) == 1 and all(c.isdigit() for c in string)\n\nif __name__ == '__main__':\n    print has_numbers('10')"
    },
    {
      "rank": 39,
      "score": 8.53012858503943,
      "candidate": "def has_one_num(s):\n    if not s:\n        return False\n    for c in s:\n        if not c.isdigit() and not c.isalpha():\n            return False\n    return True\n\nif __name__ == '__main__':\n    print has_one_num('abcd')\n    print has_one_num('abd')\n    print has_one_num('ab')"
    },
    {
      "rank": 40,
      "score": 8.499905739299377,
      "candidate": "def check(str):\n    if len(str) == 0:\n        return False\n    if len(str) == 1:\n        return True\n    if str[0] not in \"0123456789\" and str[0] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    for i in range(1, len(str)):\n        if str[i] not in \"0123456789\" and str[i] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            return False\n    return True\n\nprint(check(\"a\"))\nprint(check(\"abc\"))\nprint(check(\"123\"))\nprint(check(\"12345\"))\nprint(check(\"1234567\"))\nprint(check(\"123456789\"))"
    },
    {
      "rank": 41,
      "score": 8.478208546788407,
      "candidate": "def has_atleast_one(string):\n    if string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(has_atleast_one('a'))\n    print(has_atleast_one('a1'))\n    print(has_atleast_one('ab'))\n    print(has_atleast_one('a1b1'))\n    print(has_atleast_one('a1b1c'))\n    print(has_atleast_one('a1b1c1'))\n    print(has_atleast_one('a1b1c1d1'))\n    print(has_atleast_one('a1b1c1d1e1'))\n    print(has_atleast_one('a1b1c1d1e1f1'))\n    print(has_atleast_one('a1b1c1d1e1f1g1'))\n    print(has_atleast_one('a1b1c1d1e1f1g1h1'))\n    print(has_atleast_one('a1b1c1d1e1f1g1h1i1'))\n    print(has_atleast_one('a1b1c1d1e1f1g1h1i1j1'))\n    print(has_atleast_one('a1b1c1d1e1f1g1h1i1j1k1'))\n    print(has_atleast_one('a1b1c1d1e1f1g1h1i1j1k1l1'))\n    print(has_atleast_one('a1b1c1d1e1f1g1h1i1j1k1l1m1'))\n    print(has_atleast_one('a1b1c1d1e1f1g1h1i1j1k1l1m1n1'))\n    print(has_atleast_one('a1b1"
    },
    {
      "rank": 42,
      "score": 8.437695832075478,
      "candidate": "def has_letter_and_number(string):\n    \"\"\"\n    string: a string of letters and numbers.\n\n    Returns:\n    True if string has at least one letter and one number, otherwise False.\n    \"\"\"\n    if not string:\n        return False\n    if not string.isdigit():\n        return False\n    if not any(char.isalpha() for char in string):\n        return False\n    return True\n\nprint(has_letter_and_number('a1234'))\nprint(has_letter_and_number('ab12'))\nprint(has_letter_and_number('a12'))\nprint(has_letter_and_number('a1234'))\nprint(has_letter_and_number('1234'))\nprint(has_letter_and_number('1234 '))\nprint(has_letter_and_number('1234a'))\nprint(has_letter_and_number('1234a1'))\nprint(has_letter_and_number('a1234a'))\nprint(has_letter_and_number('a1a'))\nprint(has_letter_and_number('a1234a1'))\nprint(has_letter_and_number('a1234a1a'))\nprint(has_letter_and_number('a1234a1a1'))\nprint(has_letter_and_number('a1234a1a1a'))\nprint(has_letter_and_number('a1234a1a1a1'))\nprint(has_letter_and_number('a1234a1a1a1a'))\nprint(has_letter_and_number('a1234a1a1a1a1'))\nprint(has_letter_and_number('a1234a1a1a1a1a'))\nprint(has_letter_and_number('a1234a1a1a1a1a1'))"
    },
    {
      "rank": 43,
      "score": 8.426531424889468,
      "candidate": "def has_one_number_and_one_letter(string):\n    if not string:\n        return False\n    for char in string:\n        if not char.isdigit() and not char.isalpha():\n            return False\n    return True\n\nif __name__ == '__main__':\n    print has_one_number_and_one_letter('abc')"
    },
    {
      "rank": 44,
      "score": 8.408439383654278,
      "candidate": "def has_only_numbers(s):\n    for c in s:\n        if not c.isdigit():\n            return False\n    return True\n\nif __name__ == '__main__':\n    s = \"asdf1234\"\n    print(has_only_numbers(s))"
    },
    {
      "rank": 45,
      "score": 8.386620303250325,
      "candidate": "def has_atleast_one(s):\n    return any(char.isdigit() or char.isalpha() for char in s)\n\nif __name__ == \"__main__\":\n    print has_atleast_one(\"hello\")\n    print has_atleast_one(\"12345\")\n    print has_atleast_one(\"1a\")\n    print has_atleast_one(\"hello123\")\n    print has_atleast_one(\"1a1b1\")\n    print has_atleast_one(\"1a1b1c1d1\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")\n    print has_atleast_one(\"\")"
    },
    {
      "rank": 46,
      "score": 8.375312293858853,
      "candidate": "def has_letters_and_numbers(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    letters = []\n    numbers = []\n    for c in s:\n        if c.isalpha():\n            letters.append(c)\n        elif c.isdigit():\n            numbers.append(c)\n    return len(letters) > 0 and len(numbers) > 0\n\nif __name__ == '__main__':\n    s = 'abc12'\n    print(has_letters_and_numbers(s))"
    },
    {
      "rank": 47,
      "score": 8.351614956112536,
      "candidate": "def has_number_and_letter(string):\n\tif len(string) == 0:\n\t\treturn False\n\tif any(char.isdigit() for char in string):\n\t\treturn True\n\tif any(char.isalpha() for char in string):\n\t\treturn True\n\treturn False\n\nif __name__ == \"__main__\":\n\tstring = \"a1b2c3\"\n\tassert(has_number_and_letter(string) == True)"
    },
    {
      "rank": 48,
      "score": 8.331556294201176,
      "candidate": "def has_letter_and_number(s):\n    \"\"\"\n    Check whether a string has atleast one letter and one number.\n    :param s: string\n    :return: bool\n    \"\"\"\n    return bool(re.search(r'[a-zA-Z0-9]', s))\n\nif __name__ == '__main__':\n    assert has_letter_and_number('abc')\n    assert not has_letter_and_number('abcdef')\n    assert has_letter_and_number('abc123')"
    },
    {
      "rank": 49,
      "score": 8.327375965969855,
      "candidate": "def has_atleast_one_letter_and_one_number(string):\n    if not isinstance(string, str):\n        raise TypeError('string should be str')\n\n    letters = [char for char in string if char.isalpha()]\n    numbers = [char for char in string if char.isdigit()]\n\n    if len(letters) > 0 and len(numbers) > 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    assert has_atleast_one_letter_and_one_number('abc')\n    assert not has_atleast_one_letter_and_one_number('abcd')\n    assert has_atleast_one_letter_and_one_number('123')\n    assert has_atleast_one_letter_and_one_number('abcd')"
    },
    {
      "rank": 50,
      "score": 8.327367757082776,
      "candidate": "def check_if_string(string):\n    return any(char.isalnum() for char in string) and any(char.isdigit() for char in string)\n\ndef main():\n    string = input(\"Enter string: \")\n    print(check_if_string(string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.298597569547805,
      "candidate": "def has_one_number(string):\n    \"\"\"\n    Args:\n        string: A string\n    Returns:\n        A boolean.\n    \"\"\"\n    if string == '':\n        return False\n    for i in range(0, len(string)):\n        if string[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return True\n    return False\n\nif __name__ == '__main__':\n    assert has_one_number('123') == True, 'Expected True'\n    assert has_one_number('abc') == False, 'Expected False'\n    assert has_one_number('2a') == False, 'Expected False'\n    assert has_one_number('2a2b') == False, 'Expected False'\n    assert has_one_number('2a2b3c') == False, 'Expected False'\n    assert has_one_number('a') == True, 'Expected True'\n    assert has_one_number('a123') == True, 'Expected True'\n    assert has_one_number('a2b') == False, 'Expected False'\n    assert has_one_number('2b3c') == False, 'Expected False'\n    assert has_one_number('2b3c4d') == False, 'Expected False'"
    },
    {
      "rank": 52,
      "score": 8.2938925966498,
      "candidate": "def has_letters_numbers(s):\n    letters_numbers = 0\n    for letter in s:\n        if letter.isalpha() and letter.isdigit():\n            letters_numbers += 1\n    return letters_numbers"
    },
    {
      "rank": 53,
      "score": 8.289838256518838,
      "candidate": "def is_valid(string):\n    '''\n    string: string to be checked\n    '''\n    if string == None:\n        return False\n    if len(string) == 0:\n        return False\n    if string.isdigit():\n        return False\n    if len(string) == 1:\n        return True\n    if string.isalpha():\n        return True\n    return False\n\nif __name__ == '__main__':\n    test_cases = [\n        'abc',\n        'a1b2',\n        'abcd',\n        'aa',\n        'abcd',\n        'abcde',\n        'abcd',\n        'a1b2',\n        'abcde'\n    ]\n    for test in test_cases:\n        print test, 'is valid:', is_valid(test)"
    },
    {
      "rank": 54,
      "score": 8.251903304236286,
      "candidate": "def has_letter_and_number(string):\n    \"\"\"\n    Check whether a string has atleast one letter and one number.\n    :param string: str\n    :return: bool\n    \"\"\"\n    return bool(re.search(\"[a-zA-Z0-9]\", string))\n\nif __name__ == '__main__':\n    print(has_letter_and_number('aa1'))\n    print(has_letter_and_number('aa1'))\n    print(has_letter_and_number('1a1'))\n    print(has_letter_and_number('a1a1'))\n    print(has_letter_and_number('11'))\n    print(has_letter_and_number('11'))\n    print(has_letter_and_number('1111'))\n    print(has_letter_and_number('11111'))\n    print(has_letter_and_number('11111'))\n    print(has_letter_and_number('aaaaa'))\n    print(has_letter_and_number('aaaa'))\n    print(has_letter_and_number('aaaaa'))"
    },
    {
      "rank": 55,
      "score": 8.214125058964552,
      "candidate": "def has_atleast_one_letter_and_one_number(str):\n    \"\"\"\n    :type str: str\n    :rtype: bool\n    \"\"\"\n    return str.isalnum() and len(str)>0\n\nprint(has_atleast_one_letter_and_one_number('aa10'))\nprint(has_atleast_one_letter_and_one_number('a10'))\nprint(has_atleast_one_letter_and_one_number('10a'))\nprint(has_atleast_one_letter_and_one_number('10a10'))"
    },
    {
      "rank": 56,
      "score": 8.212735598038213,
      "candidate": "def has_atleast_one_letter_and_one_number(string):\n    if string is None:\n        return False\n    if not string:\n        return False\n    if not string.isalnum():\n        return False\n    return True\n\nif __name__ == '__main__':\n    print has_atleast_one_letter_and_one_number(\"a1b2c3\")"
    },
    {
      "rank": 57,
      "score": 8.211579567659316,
      "candidate": "def has_letters_and_numbers(str):\n    return all(i in string.ascii_letters+string.digits for i in str)\n\n\nif __name__ == '__main__':\n    assert has_letters_and_numbers('abcd') == True\n    assert has_letters_and_numbers('abcd123') == False\n    assert has_letters_and_numbers('a123') == False\n    assert has_letters_and_numbers('a123456') == True\n    assert has_letters_and_numbers('a123456789') == False\n    assert has_letters_and_numbers('a123456789') == True\n    assert has_letters_and_numbers('a123456789a') == False\n    assert has_letters_and_numbers('a123456789a123456789a') == True"
    },
    {
      "rank": 58,
      "score": 8.209707251476969,
      "candidate": "def has_atleast_one(string):\n\tif string.isalnum():\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint has_atleast_one(\"abc123\")\n\nprint has_atleast_one(\"a1b2\")\n\nprint has_atleast_one(\"a1b2c3d4\")\n\nprint has_atleast_one(\"a123\")\n\nprint has_atleast_one(\"a1b2c\")\n\nprint has_atleast_one(\"a123456789\")"
    },
    {
      "rank": 59,
      "score": 8.2048573255218,
      "candidate": "def hasLetters(text):\n    \"\"\"\n    :type text: str\n    :rtype: bool\n    \"\"\"\n    if len(text) == 0:\n        return False\n    return True\n\nif __name__ == '__main__':\n    assert hasLetters('123') == True\n    assert hasLetters('123a') == False\n    assert hasLetters('123a1') == True\n    assert hasLetters('123a12') == False\n    assert hasLetters('1234') == False\n    assert hasLetters('12345') == False\n    assert hasLetters('1234567') == True\n    assert hasLetters('12345678') == False\n    assert hasLetters('123456789') == True\n    assert hasLetters('1234567890') == False\n    assert hasLetters('12345678901') == True\n    assert hasLetters('123456789012') == False\n    assert hasLetters('1234567890123') == True\n    assert hasLetters('12345678901234') == False\n    assert hasLetters('123456789012345') == True\n    assert hasLetters('1234567890123456') == False\n    assert hasLetters('12345678901234567') == True\n    assert hasLetters('123456789012345678') == False\n    assert hasLetters('1234567890123456789') == True"
    },
    {
      "rank": 60,
      "score": 8.172253082181854,
      "candidate": "def has_letters_and_numbers(str):\n    \"\"\"\n    Check whether a string has atleast one letter and one number.\n    :param str: string\n    :return: True if has atleast one letter and one number.\n    \"\"\"\n    return str.isalpha() and str.isdigit()\n\nif __name__ == '__main__':\n    assert has_letters_and_numbers(\"hello\") == False\n    assert has_letters_and_numbers(\"hello1234\") == True"
    },
    {
      "rank": 61,
      "score": 8.163300679823958,
      "candidate": "import re\n\ndef has_letter_and_number(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    letters = re.compile(\"[a-zA-Z]+\")\n    numbers = re.compile(\"[0-9]+\")\n    return letters.search(string) and numbers.search(string)\n\n\nif __name__ == \"__main__\":\n    test_string = \"a1b2c3\"\n    print(has_letter_and_number(test_string))"
    },
    {
      "rank": 62,
      "score": 8.144125099485041,
      "candidate": "def has_atleast_one_number(s):\n    \"\"\"\n    >>> has_atleast_one_number('1234')\n    True\n    >>> has_atleast_one_number('123')\n    True\n    >>> has_atleast_one_number('123a')\n    False\n    \"\"\"\n    return all(char.isdigit() for char in s)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.143591138329747,
      "candidate": "def check_str(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return True\n    if s[0]!= '1' and s[0]!= '0':\n        return False\n    if s[1]!= '0' and s[1]!= '1':\n        return False\n    return True\n\nprint(check_str('01'))"
    },
    {
      "rank": 64,
      "score": 8.121884567141883,
      "candidate": "def has_atleast_one(str):\n    # YOUR CODE HERE\n    if str == '':\n        return False\n    if str[0] in '0123456789' and str[1] in '0123456789':\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print has_atleast_one(\"a1b2c3\")\n    print has_atleast_one(\"a1b2c3\")\n    print has_atleast_one(\"a1b2c3\")\n    print has_atleast_one(\"a1b2c3\")\n    print has_atleast_one(\"a1b2c3\")\n    print has_atleast_one(\"a1b2c3\")"
    },
    {
      "rank": 65,
      "score": 8.105983444291466,
      "candidate": "def has_number_and_letter(string):\n    \"\"\"\n    :rtype: bool\n    \"\"\"\n    if len(string) < 1:\n        return False\n    if string[0] not in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n        return False\n    for i in string:\n        if not i.isdigit():\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print has_number_and_letter(\"aabbbc\")\n    print has_number_and_letter(\"abcd\")"
    },
    {
      "rank": 66,
      "score": 8.08452234024709,
      "candidate": "def has_letters_and_numbers(string):\n    \"\"\"\n    Check whether a string has atleast one letter and one number.\n    :param string: A string.\n    :return: True or False.\n    \"\"\"\n    if len(string) > 0 and string.isdigit() == False:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print has_letters_and_numbers(\"a123\")\n    print has_letters_and_numbers(\"123a\")\n    print has_letters_and_numbers(\"a\")"
    },
    {
      "rank": 67,
      "score": 8.024835682833125,
      "candidate": "def hasLettersNumber(string):\n    if len(string) == 0:\n        return False\n    for i in range(len(string)):\n        if string[i] in \"0123456789\":\n            return True\n    return False\n\nif __name__ == '__main__':\n    print hasLettersNumber(\"asdasd\")"
    },
    {
      "rank": 68,
      "score": 7.990432406683839,
      "candidate": "def has_one_number_and_one_letter(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return bool(s.isalnum()) and bool(s.isalpha())"
    },
    {
      "rank": 69,
      "score": 7.938028884277233,
      "candidate": "def has_only_numbers_and_letters(string):\n    \"\"\"\n    >>> has_only_numbers_and_letters(\"a\")\n    True\n    >>> has_only_numbers_and_letters(\"12345\")\n    False\n    >>> has_only_numbers_and_letters(\"12345a\")\n    False\n    >>> has_only_numbers_and_letters(\"abcdefghijklmnopqrstuvwxyz\")\n    True\n    \"\"\"\n    return any(char.isdigit() and char.isalpha() for char in string)\n\nprint(has_only_numbers_and_letters(\"12345\"))"
    },
    {
      "rank": 70,
      "score": 7.915588979966494,
      "candidate": "def is_valid_number(string):\n    if string.isnumeric():\n        return True\n    else:\n        return False\n\ndef is_valid_string(string):\n    if string.isalpha():\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    string = \"a1a2a3a4a5\"\n    print(is_valid_string(string))\n    print(is_valid_number(string))"
    },
    {
      "rank": 71,
      "score": 7.8912769574414305,
      "candidate": "def has_atleast_one_char_and_one_num(string):\n\tif len(string) > 0:\n\t\tif 'a' in string and '1' in string:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False\n\nif __name__ == '__main__':\n\tprint(has_atleast_one_char_and_one_num('abc'))\n\tprint(has_atleast_one_char_and_one_num('abcd'))\n\tprint(has_atleast_one_char_and_one_num('ab'))\n\tprint(has_atleast_one_char_and_one_num('123'))\n\tprint(has_atleast_one_char_and_one_num('1234'))\n\tprint(has_atleast_one_char_and_one_num('12345'))\n\tprint(has_atleast_one_char_and_one_num('123456'))\n\tprint(has_atleast_one_char_and_one_num('1234567'))\n\tprint(has_atleast_one_char_and_one_num('12345678'))\n\tprint(has_atleast_one_char_and_one_num('123456789'))\n\tprint(has_atleast_one_char_and_one_num('123456789a'))\n\tprint(has_atleast_one_char_and_one_num('123456789ab'))\n\tprint(has_atleast_one_char_and_one_num('123456789abc'))\n\tprint(has_atleast_one_char_and_one_num('123456789abcd'))\n\tprint(has_atleast_one_char_and_one_num('123456789abcd'))\n\tprint(has_atleast_one_char_and_one_num('123456789abcde'))\n\tprint(has_atleast_one_char_and_one_num('123456789abcdef'))"
    },
    {
      "rank": 72,
      "score": 7.868947655733293,
      "candidate": "def has_one_number_and_one_letter(string):\n    \"\"\"\n    Returns True if the string has atleast one letter and one number, else returns False.\n    :param string: A string.\n    :return: True if the string has atleast one letter and one number, else returns False.\n    \"\"\"\n    return bool(re.search('[a-zA-Z0-9]', string)) and bool(re.search('[0-9]', string))"
    },
    {
      "rank": 73,
      "score": 7.84634113240411,
      "candidate": "def hasLettersAndNumbers(str):\n    if len(str) <= 1:\n        return False\n    elif len(str) >= 2:\n        if str[0] in \"0123456789\" and str[1] in \"0123456789\":\n            return True\n        else:\n            return False\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(hasLettersAndNumbers(\"abcd\"))\n    print(hasLettersAndNumbers(\"abcd1234\"))\n    print(hasLettersAndNumbers(\"abcd01234\"))\n    print(hasLettersAndNumbers(\"abcd\"))"
    },
    {
      "rank": 74,
      "score": 7.834022619458933,
      "candidate": "def is_valid_name(name):\n    return name!= \"\" and name.isalpha() and name.isdigit()\n\ndef is_valid_phone(phone):\n    return phone!= \"\" and phone.isnumeric()\n\ndef is_valid_address(address):\n    return address!= \"\" and address.isalpha() and address.isdigit()\n\n\nif __name__ == '__main__':\n    name = input(\"Enter the name: \")\n    phone = input(\"Enter the phone number: \")\n    address = input(\"Enter the address: \")\n    print(is_valid_name(name))\n    print(is_valid_phone(phone))\n    print(is_valid_address(address))"
    },
    {
      "rank": 75,
      "score": 7.780351419995229,
      "candidate": "def has_one_letter_one_number(str):\n\treturn str.isalpha() and str.isnumeric()\n\n\n\nprint has_one_letter_one_number('abc')\nprint has_one_letter_one_number('123')\nprint has_one_letter_one_number('abc123')\nprint has_one_letter_one_number('abc123abc')\nprint has_one_letter_one_number('abc123abc123')"
    },
    {
      "rank": 76,
      "score": 7.738292593776799,
      "candidate": "def has_number_and_letter(string):\n    for i in range(0, len(string)):\n        if not (string[i].isdigit() and string[i].isalpha()):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(has_number_and_letter(\"a1b2c\"))"
    },
    {
      "rank": 77,
      "score": 7.7320703513377165,
      "candidate": "def has_atleast_one_letter_and_one_number(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return all(s.isalpha() and s.isdigit() for s in s)"
    },
    {
      "rank": 78,
      "score": 7.705183449260731,
      "candidate": "def has_atleast_one_letter_and_one_number(string):\n    \"\"\"\n    >>> has_atleast_one_letter_and_one_number('a')\n    True\n    >>> has_atleast_one_letter_and_one_number('aa')\n    True\n    >>> has_atleast_one_letter_and_one_number('aaa')\n    True\n    >>> has_atleast_one_letter_and_one_number('a1')\n    True\n    >>> has_atleast_one_letter_and_one_number('a a')\n    True\n    >>> has_atleast_one_letter_and_one_number('a1 a')\n    True\n    >>> has_atleast_one_letter_and_one_number('1 a')\n    True\n    >>> has_atleast_one_letter_and_one_number('a1 1')\n    True\n    >>> has_atleast_one_letter_and_one_number('a1')\n    True\n    >>> has_atleast_one_letter_and_one_number('aa1')\n    True\n    >>> has_atleast_one_letter_and_one_number('a 1')\n    True\n    >>> has_atleast_one_letter_and_one_number('a a1')\n    True\n    >>> has_atleast_one_letter_and_one_number('a1 a1')\n    True\n    >>> has_atleast_one_letter_and_one_number('1 a1')\n    True\n    >>> has_atleast_one_letter_and_one_number('a1 1')\n    True\n    >>> has_atleast_one_letter_and_one_number('1 a')\n    False\n    >>> has_atleast_one_letter_and_one_number('a1')\n    False\n    >>> has_atleast_one_letter_and_one_number('aa1')\n    False\n    >>> has_atleast_one_letter_and_one_number('a 1')\n    False\n    >>> has_atleast_one"
    },
    {
      "rank": 79,
      "score": 7.5819855281879285,
      "candidate": "#!/usr/bin/env python\n\ndef has_letter_and_number(str):\n    if len(str) == 0:\n        return False\n    if str[0] =='':\n        return False\n    if len(str) == 1:\n        return False\n    if str[0] in \"0123456789\":\n        return False\n    return True\n\nprint has_letter_and_number(\"1\")\nprint has_letter_and_number(\"1a\")\nprint has_letter_and_number(\"1a1\")\nprint has_letter_and_number(\"a\")\nprint has_letter_and_number(\"1\")\nprint has_letter_and_number(\"a1\")\nprint has_letter_and_number(\"1a1\")\nprint has_letter_and_number(\"a\")\nprint has_letter_and_number(\"a1\")"
    },
    {
      "rank": 80,
      "score": 7.562924366763077,
      "candidate": "def has_letter_and_number(s):\n\tif s:\n\t\tif any(c.isdigit() for c in s):\n\t\t\treturn True\n\t\tif any(c.isalpha() for c in s):\n\t\t\treturn True\n\treturn False\n\nprint(has_letter_and_number('abc123'))\nprint(has_letter_and_number('a123'))\nprint(has_letter_and_number('123a'))\nprint(has_letter_and_number('123'))\nprint(has_letter_and_number('abc'))\nprint(has_letter_and_number('123'))\nprint(has_letter_and_number('abc123'))"
    },
    {
      "rank": 81,
      "score": 7.4878043221155455,
      "candidate": "def has_one_letter_and_one_number(s):\n    if s == '':\n        return False\n    if len(s) == 1:\n        return True\n    if s.isdigit():\n        return True\n    for i in range(0, len(s)):\n        if not s[i].isdigit():\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    s = 'abc'\n    print(has_one_letter_and_one_number(s))"
    },
    {
      "rank": 82,
      "score": 7.464609382504557,
      "candidate": "def has_atleast_one_letter_number(s):\n    \"\"\"\n    :param s: string\n    :return: bool\n    \"\"\"\n    return s.isalpha() and s.isdigit()\n\n\n\nif __name__ == \"__main__\":\n    print has_atleast_one_letter_number(\"ab123\")"
    },
    {
      "rank": 83,
      "score": 7.134571892399572,
      "candidate": "def has_atleast_one(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return s.isdigit() or s.isalnum()\n\nif __name__ == '__main__':\n    assert has_atleast_one('123')\n    assert not has_atleast_one('123abc')\n    assert not has_atleast_one('1')\n    assert has_atleast_one('12345')\n    assert has_atleast_one('1.23')"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "def has_one_number(string):\n    return all(char.isdigit() for char in string) and all(char.isalpha() for char in string)\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert has_one_number(\"\") == False, \"String can not be empty\"\n    assert has_one_number(\"a\") == True, \"String has one letter\"\n    assert has_one_number(\"123\") == True, \"String has one number\"\n    assert has_one_number(\"1a2\") == True, \"String has one number and one letter\"\n    assert has_one_number(\"123a\") == False, \"String has one number and one letter\"\n    assert has_one_number(\"1a2a\") == False, \"String has one number and one letter\"\n    assert has_one_number(\"a123\") == False, \"String has one letter and one number\"\n    assert has_one_number(\"a1a\") == False, \"String has one letter and one number\"\n    assert has_one_number(\"123123\") == False, \"String has one number and one number\""
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "#  Write your code here\ndef has_one_number_and_one_letter(string):\n    if len(string) == 0:\n        return False\n    else:\n        return True\n\n#  Test Cases\n\nprint has_one_number_and_one_letter('aa1234')\n#  Expected Output\n#  True"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "def has_number_and_letter(string):\n    if '0' in string:\n        return False\n    if '1' in string:\n        return False\n    if 'a' in string:\n        return False\n    if 'A' in string:\n        return False\n    if '#' in string:\n        return False\n    if '$' in string:\n        return False\n    if '%' in string:\n        return False\n    if '*' in string:\n        return False\n    if '.' in string:\n        return False\n    if '!' in string:\n        return False\n    if '@' in string:\n        return False\n    if '#' in string:\n        return False\n    if '$' in string:\n        return False\n    if '%' in string:\n        return False\n    if '*' in string:\n        return False\n    if '.' in string:\n        return False\n    if '!' in string:\n        return False\n    if '@' in string:\n        return False\n    if '#' in string:\n        return False\n    if '$' in string:\n        return False\n    if '%' in string:\n        return False\n    if '*' in string:\n        return False\n    if '.' in string:\n        return False\n    if '!' in string:\n        return False\n    if '@' in string:\n        return False\n    if '#' in string:\n        return False\n    if '$' in string:\n        return False\n    if '%' in string:\n        return False\n    if '*' in string:\n        return False\n    if '.' in string:\n        return False\n    if '!' in string:\n        return False\n    if '@' in string:\n        return False\n    if '#' in string:\n        return False\n    if '$' in string:\n        return False\n    if '%' in string:\n        return False\n    if '*' in string:\n        return False\n    if '.' in string:\n        return False\n    if '!' in string:\n        return False\n    if '@' in string:\n        return False\n    if"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def is_atleast_one_number_and_one_letter(s):\n    return len(s)>1 and len(s)<=3\n\nif __name__ == '__main__':\n    print(is_atleast_one_number_and_one_letter('1234'))\n    print(is_atleast_one_number_and_one_letter('12341234'))\n    print(is_atleast_one_number_and_one_letter('123'))\n    print(is_atleast_one_number_and_one_letter('123'))\n    print(is_atleast_one_number_and_one_letter('12345'))\n    print(is_atleast_one_number_and_one_letter('12345'))\n    print(is_atleast_one_number_and_one_letter('1234567'))\n    print(is_atleast_one_number_and_one_letter('1234567'))\n    print(is_atleast_one_number_and_one_letter('123456789'))\n    print(is_atleast_one_number_and_one_letter('123456789'))\n    print(is_atleast_one_number_and_one_letter('12345678901'))\n    print(is_atleast_one_number_and_one_letter('12345678901'))\n    print(is_atleast_one_number_and_one_letter('123456789012'))\n    print(is_atleast_one_number_and_one_letter('123456789012'))\n    print(is_atleast_one_number_and_one_letter('1234567890123'))\n    print(is_atleast_one_number_and_one_letter('1234567890123'))\n    print(is_atleast_one_number_and_one_letter('123456789012345'))\n    print(is_atleast_one_number_and_one_letter('123456789"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def hasLetters(string):\n    return True if string[0].isdigit() else False\n\n\ndef hasNumbers(string):\n    return True if string[0].isdigit() else False\n\n\nif __name__ == \"__main__\":\n    string = \"a123b456\"\n    print(hasLetters(string))\n    print(hasNumbers(string))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def has_one_number_and_one_letter(s):\n    return s.isalnum() and s.isalpha()\n\nprint has_one_number_and_one_letter('1a')\n\n#!/usr/bin/env python\n\n#Write a python function to check whether a string has atleast one letter and one number.\ndef has_one_number_and_one_letter(s):\n    return s.isalnum() and s.isalpha()\n\nprint has_one_number_and_one_letter('1a')\n\n#!/usr/bin/env python\n\n#Write a python function to check whether a string has atleast one letter and one number.\ndef has_one_number_and_one_letter(s):\n    return s.isalnum() and s.isalpha()\n\nprint has_one_number_and_one_letter('1a')\n\n#!/usr/bin/env python\n\n#Write a python function to check whether a string has atleast one letter and one number.\ndef has_one_number_and_one_letter(s):\n    return s.isalnum() and s.isalpha()\n\nprint has_one_number_and_one_letter('1a')\n\n#!/usr/bin/env python\n\n#Write a python function to check whether a string has atleast one letter and one number.\ndef has_one_number_and_one_letter(s):\n    return s.isalnum() and s.isalpha()\n\nprint has_one_number_and_one_letter('1a')"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def has_only_numbers(s):\n    return len(s) > 0 and all(x.isdigit() for x in s)\n\nif __name__ == '__main__':\n    print(has_only_numbers('123'))\n    print(has_only_numbers('abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print(has_only_numbers('123abc'))\n    print"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def has_letters_and_numbers(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return any(c.isdigit() and c.isalpha() for c in s)\n\n\ndef has_letters_and_numbers_2(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return any(c.isdigit() and c.isalpha() for c in s) and any(c.isdigit() for c in s)\n\n\nif __name__ == '__main__':\n    assert has_letters_and_numbers('Hello123') == True\n    assert has_letters_and_numbers('Hello12345678') == False\n\n    assert has_letters_and_numbers_2('Hello123') == True\n    assert has_letters_and_numbers_2('Hello12345678') == False"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def has_letters_numbers(string):\n    \"\"\"\n    Return a boolean value\n    \"\"\"\n    # TODO: Write your code here\n    return any(char.isdigit() or char.isalpha() for char in string)\n\nif __name__ == '__main__':\n    print(has_letters_numbers('123'))\n    print(has_letters_numbers('a23'))\n    print(has_letters_numbers('a2345'))\n    print(has_letters_numbers('1a23'))\n    print(has_letters_numbers('12345'))\n    print(has_letters_numbers('a234567'))\n    print(has_letters_numbers('a23456789'))\n    print(has_letters_numbers('a2345678901'))\n    print(has_letters_numbers('a23456789012'))\n    print(has_letters_numbers('a234567890123'))\n    print(has_letters_numbers('a2345678901234'))\n    print(has_letters_numbers('a23456789012345'))\n    print(has_letters_numbers('a234567890123456'))\n    print(has_letters_numbers('a2345678901234567'))\n    print(has_letters_numbers('a23456789012345678'))\n    print(has_letters_numbers('a234567890123456789'))\n    print(has_letters_numbers('a2345678901234567890'))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def has_number_and_letter(str):\n    #Write your code here\n    if not str:\n        return False\n    if str[0] not in '0123456789':\n        return False\n    if str[-1] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    return True"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def has_letters_and_numbers(string):\n    # +++your code here+++\n    if not string or string.isspace():\n        return False\n\n    return True\n\n\nif __name__ == '__main__':\n    assert has_letters_and_numbers('hello')\n    assert has_letters_and_numbers('hello123')\n    assert has_letters_and_numbers('hello123 hello')\n    assert has_letters_and_numbers('hello123 hello world')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')\n    assert has_letters_and_numbers('hello123 hello world hello')"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def has_atleast_one_letter_and_one_number(string):\n    # Write your code here\n    if string == \"\":\n        return False\n    if all(x in string for x in \"1234567890\"):\n        return True\n    else:\n        return False\n\nprint(has_atleast_one_letter_and_one_number(\"abc\"))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def has_one_number_and_one_letter(string):\n    if string.isalnum():\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    assert has_one_number_and_one_letter(\"hello\") is True, \"hello\"\n    assert has_one_number_and_one_letter(\"hello123\") is True, \"hello123\"\n    assert has_one_number_and_one_letter(\"hello0\") is False, \"hello0\"\n    assert has_one_number_and_one_letter(\"hello1\") is False, \"hello1\"\n    assert has_one_number_and_one_letter(\"hello12\") is False, \"hello12\"\n    assert has_one_number_and_one_letter(\"hello12345\") is False, \"hello12345\"\n    assert has_one_number_and_one_letter(\"hello1234\") is False, \"hello1234\"\n    assert has_one_number_and_one_letter(\"hello123456789\") is False, \"hello123456789\"\n    assert has_one_number_and_one_letter(\"hello1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def has_number(string):\n    \"\"\"\n    check whether a string has atleast one number and one letter.\n    :param string: a string to check.\n    :return: true if string has atleast one number and one letter, otherwise false.\n    \"\"\"\n    if not isinstance(string, str):\n        return False\n    for i in string:\n        if i.isdigit() or i.isalpha():\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    assert has_number('123') == True\n    assert has_number('1234') == False\n    assert has_number('12345') == False\n    assert has_number('12345678') == False\n    assert has_number('123456789') == False\n    assert has_number('123456789abc') == True\n    assert has_number('123456789abcdef') == False\n    assert has_number('123456789abcdefg') == False\n    assert has_number('123456789abcdefgh') == False\n    assert has_number('123456789abcdefghi') == False\n    assert has_number('123456789abcdefghij') == False\n    assert has_number('123456789abcdefghijk') == False\n    assert has_number('123456789abcdefghijkl') == False\n    assert has_number('123456789abcdefghijkll') == False\n    assert has_number('123456789abcdefghijkllm') == False\n    assert has_number('123456789abcdefghijkllmn') == False\n    assert has_number('123456789abcdefghijkllmnop') == False\n    assert has_number('123456789abcdefghijkllmnopq') == False\n    assert has_number('123456789abcdefghijkllmnopqr') == False\n    assert has_number('123456789abcdefghijkllmnopqrs') == False\n    assert has_number('123456789abcdefghijkllmnopqrsx') == False\n    assert has_number('123456789abcdefghijkllmnopqrsx"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def has_atleast_one_letter_number(string):\n    if string:\n        return True\n    else:\n        return False\n\nprint(has_atleast_one_letter_number(\"123\"))\nprint(has_atleast_one_letter_number(\"\"))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def has_one_num(s):\n    if not s:\n        return False\n    return (s.isalnum() and len(s) == 1)\n\nif __name__ == \"__main__\":\n    assert has_one_num(\"abc\")\n    assert not has_one_num(\"abc \")\n    assert has_one_num(\"1234\")\n    assert not has_one_num(\"1234 \")\n    assert has_one_num(\"1234\")\n    assert not has_one_num(\"1234 \")\n    assert has_one_num(\"1234a\")\n    assert has_one_num(\"1234a\")\n    assert not has_one_num(\"1234 a\")\n    assert not has_one_num(\"1234 a\")\n    assert has_one_num(\"1234.0\")\n    assert not has_one_num(\"1234.0 \")\n    assert has_one_num(\"1234.0a\")\n    assert has_one_num(\"1234.0a\")\n    assert not has_one_num(\"1234.0 a\")\n    assert not has_one_num(\"1234.0 a\")\n    assert has_one_num(\"1234.0 a\")\n    assert not has_one_num(\"1234.0a \")\n    assert not has_one_num(\"1234.0 a \")\n    assert has_one_num(\"1234.0a \")\n    assert has_one_num(\"1234.0a \")\n    assert not has_one_num(\"1234.0a\")\n    assert not has_one_num(\"1234.0 a\")\n    assert not has_one_num(\"1234.0 a\")\n    assert not has_one_num(\"1234.0a \")\n    assert not has_one_num(\"1234.0 a \")\n    assert has_one_num(\"1234.0a \")\n    assert not has_one_num(\"1234.0 a \")\n    assert not has_one_num(\"1234.0 a\")\n    assert not has_one_num(\"1234.0a\")\n    assert not has_one_num(\"1234."
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def has_atleast_one_number(str):\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\nif __name__ == '__main__':\n    print has_atleast_one_number('hello')\n    print has_atleast_one_number('hello123')\n    print has_atleast_one_number('hello12')\n    print has_atleast_one_number('hello1')\n    print has_atleast_one_number('hello')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello12345')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello12345')\n    print has_atleast_one_number('hello12345')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_atleast_one_number('hello123456')\n    print has_"
    }
  ]
}