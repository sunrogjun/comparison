{
  "timestamp": "2025-09-14T19:48:20.989726",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 328,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/max-divisor/problem\n\ndef max_divisor(interval):\n    \"\"\"\n    >>> max_divisor([1,3,4,5,6])\n    6\n    >>> max_divisor([1,3,4,5,6,7])\n    7\n    >>> max_divisor([1,3,4,5,6,7,8])\n    8\n    >>> max_divisor([3,4,5,6,7,8,9])\n    8\n    >>> max_divisor([3,4,5,6,7,8,9,10])\n    10\n    \"\"\"\n    return max(interval) / max(interval)\n\nif __name__ == '__main__':\n    interval = int(input())\n    print(max_divisor(interval))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Import the required modules\nimport math\n\n\n# Function to find the maximum occuring divisor\ndef find_max_divisor(x):\n    \"\"\"\n    Function to find the maximum occuring divisor.\n    :param x: Input number.\n    :return: Maximum divisor.\n    \"\"\"\n    # Initialize the maximum divisor\n    max_divisor = 1\n\n    # Loop through the number and find the maximum divisor\n    for i in range(x):\n        # Check if the divisor is a factor of the input number\n        if x % i == 0:\n            # Calculate the maximum divisor\n            max_divisor = max(max_divisor, i)\n\n    # Return the maximum divisor\n    return max_divisor\n\n\n# Test the function\nprint(find_max_divisor(4))\nprint(find_max_divisor(15))\nprint(find_max_divisor(100))\nprint(find_max_divisor(200))\nprint(find_max_divisor(300))\nprint(find_max_divisor(400))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# This file is part of Sprout: https://github.com/avh1/sprout\n#\n# SPDX-FileCopyrightText: 2014, the Sprout authors\n# SPDX-License-Identifier: BSD-2-Clause\n\nimport argparse\nimport sys\n\nfrom sprout.util import find_max_divisor\n\n\ndef main():\n    \"\"\"\n    Usage:\n        find_max_divisor.py [--help] <int_min> <int_max>\n\n    Print the maximum divisor between <int_min> and <int_max>.\n    \"\"\"\n    parser = argparse.ArgumentParser(description=main.__doc__)\n    parser.add_argument('int_min', help='minimum value')\n    parser.add_argument('int_max', help='maximum value')\n    args = parser.parse_args()\n\n    max_divisor = find_max_divisor(int(args.int_min), int(args.int_max))\n    print(max_divisor)\n    sys.exit(0)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def get_max_divisor(interval):\n    \"\"\"\n    Input: an interval of integers\n    Output: the maximum occuring divisor in the interval\n    \"\"\"\n    # get the maximum value in the interval\n    max_val = max(interval)\n    # get the number of divisors of max_val\n    num_divisors = 1\n    for i in range(2, max_val + 1):\n        if max_val % i == 0:\n            num_divisors += 1\n    # return the maximum divisor\n    return max_val / num_divisors\n\n\ndef main():\n    \"\"\"\n    Test the function\n    \"\"\"\n    # test case 1\n    interval = [1, 2, 3, 4, 5, 6]\n    # the maximum divisor is 2\n    print(get_max_divisor(interval))\n\n    # test case 2\n    interval = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # the maximum divisor is 3\n    print(get_max_divisor(interval))\n\n    # test case 3\n    interval = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    # the maximum divisor is 3\n    print(get_max_divisor(interval))\n\n    # test case 4\n    interval = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    # the maximum divisor is 5\n    print(get_max_divisor(interval))\n\n    # test case 5\n    interval = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    # the maximum divisor is 5\n    print(get_max_divisor(interval))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# The maximum divisor is a positive integer\n# that is greater than the smallest divisor\n# for any integer.\n#\n# For example, the maximum divisor of 8 is 4,\n# because 8 is the first number that has a divisor\n# greater than 4.\n#\n# Your function should return the maximum divisor\n# of the given interval.\n\ndef max_divisor(n):\n    # n is an integer\n    # n >= 0\n    # n is a positive integer\n    # n is a divisor of 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\ndef maxDivisor(a, b):\n    \"\"\"\n    >>> maxDivisor(100, 50)\n    4\n    >>> maxDivisor(200, 200)\n    2\n    >>> maxDivisor(1, 2)\n    1\n    >>> maxDivisor(3, 4)\n    2\n    >>> maxDivisor(3, 5)\n    1\n    >>> maxDivisor(3, 6)\n    2\n    >>> maxDivisor(3, 7)\n    1\n    >>> maxDivisor(3, 8)\n    3\n    \"\"\"\n    maxDivisor = 0\n    for i in range(a, b+1):\n        if i % maxDivisor == 0:\n            return maxDivisor\n        else:\n            maxDivisor += 1\n    return maxDivisor\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from functools import reduce\n\ndef find_maximum_divisor(n):\n    \"\"\"\n    Given an integer n, find the maximum divisor of n.\n\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n    max_divisor = 1\n    for i in range(1, n):\n        if n % i == 0:\n            max_divisor = max(max_divisor, i)\n    return max_divisor\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(find_maximum_divisor(100))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n    print(find_maximum_divisor(200))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def max_divisor(x, y):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    :param x: integer\n    :param y: integer\n    :return: the maximum occuring divisor in an interval.\n    \"\"\"\n    # Assumption: x is a positive integer.\n    # Assumption: y is a positive integer.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption: x is not divisible by y.\n    # Assumption:"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# The solution is the same as the one in the book\n# https://www.hackerrank.com/challenges/maximum-divisor\n\ndef maximum_divisor(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n\n    if number == 0:\n        return 0\n\n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n\n    return max(divisors)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def max_divisor(n):\n    #n = int(n)\n    #n = n - 1\n    #return n\n    return n\n    \ndef max_divisor_recursive(n):\n    #n = int(n)\n    #n = n - 1\n    #return n\n    \n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    else:\n        return 3\n    \ndef max_divisor_dp(n):\n    #n = int(n)\n    #n = n - 1\n    #return n\n    \n    dp = [1, 1]\n    for i in range(2, n + 1):\n        dp[0] = 1\n        dp[1] = 1\n        if n % i == 0:\n            dp[0] = max(dp[0], max_divisor(i) + 1)\n            dp[1] = max(dp[1], max_divisor(n / i) + 1)\n    return max(dp)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# This code is a modified version of the following code:\n# http://www.programcreek.com/2012/12/leetcode-divide-and-conquer/\n# The reason this code is modified is that the problem is not given in this\n# format, but in the format of the following code:\n# https://www.youtube.com/watch?v=JfFhvDfJ2Yw\n\n# This problem is solved using the divide and conquer approach, which is\n# shown here:\n# http://www.programcreek.com/2012/12/leetcode-divide-and-conquer/\n\n# The idea of the algorithm is to find the maximum divisor in an interval\n# by using divide and conquer approach.\n\n# The idea is to divide the interval into two subintervals and then find the\n# maximum divisor in each subinterval.\n\n# The main idea of this code is to find the maximum divisor in the interval\n# where the number of divisors is greater than the number of divisors in the\n# interval itself.\n\n# The main idea of this problem is to find the maximum divisor in an interval\n# using divide and conquer approach.\n\n# The main idea of this code is to find the maximum divisor in the interval\n# where the number of divisors is greater than the number of divisors in the\n# interval itself.\n\n# This code is a modified version of the following code:\n# http://www.programcreek.com/2012/12/leetcode-divide-and-conquer/\n# The reason this code is modified is that the problem is not given in this\n# format, but in the format of the following code:\n# https://www.youtube.com/watch?v=JfFhvDfJ2Yw\n\nimport collections\n\ndef find_maximum_divisor(n):\n    max_divisor = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 2:\n        return n\n    elif n < 100:\n        max_divisor = 1\n        for i in range(2, n+1):"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\ndef max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    >>> max_divisor(1)\n    1\n    >>> max_divisor(5)\n    5\n    >>> max_divisor(10)\n    2\n    >>> max_divisor(100)\n    25\n    >>> max_divisor(1000)\n    25\n    >>> max_divisor(10000)\n    25\n    >>> max_divisor(100000)\n    25\n    >>> max_divisor(1000000)\n    25\n    >>> max_divisor(10000000)\n    25\n    >>> max_divisor(100000000)\n    25\n    >>> max_divisor(1000000000)\n    25\n    >>> max_divisor(10000000000)\n    25\n    \"\"\"\n    return math.ceil(math.sqrt(n))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_max_divisor(start, end):\n    d = end // start\n    while d:\n        if end % d == 0:\n            return d\n        else:\n            d -= 1\n    return 1\n\ndef main():\n    start, end = 1, 10\n    print(find_max_divisor(start, end))\n    start, end = 1, 5\n    print(find_max_divisor(start, end))\n    start, end = 1, 10\n    print(find_max_divisor(start, end))\n    start, end = 1, 5\n    print(find_max_divisor(start, end))\n    start, end = 1, 10\n    print(find_max_divisor(start, end))\n    start, end = 1, 5\n    print(find_max_divisor(start, end))\n    start, end = 1, 10\n    print(find_max_divisor(start, end))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# Find the maximum divisor in an interval\ndef max_divisor(x, y):\n    return max(abs(i) for i in range(x, y+1) if i % x == 0)\n\n# Find the maximum divisor in an interval\ndef max_divisor2(x, y):\n    return max(abs(i) for i in range(x, y+1) if i % x == 0)\n\n# Find the maximum divisor in an interval\ndef max_divisor3(x, y):\n    return max(abs(i) for i in range(x, y+1) if i % x == 0)\n\n# Find the maximum divisor in an interval\ndef max_divisor4(x, y):\n    return max(abs(i) for i in range(x, y+1) if i % x == 0)\n\n# Find the maximum divisor in an interval\ndef max_divisor5(x, y):\n    return max(abs(i) for i in range(x, y+1) if i % x == 0)\n\n# Find the maximum divisor in an interval\ndef max_divisor6(x, y):\n    return max(abs(i) for i in range(x, y+1) if i % x == 0)\n\n# Find the maximum divisor in an interval\ndef max_divisor7(x, y):\n    return max(abs(i) for i in range(x, y+1) if i % x == 0)\n\n# Find the maximum divisor in an interval\ndef max_divisor8(x, y):\n    return max(abs(i) for i in range(x, y+1) if i % x == 0)\n\n# Find the maximum divisor in an interval\ndef max_divisor9(x, y):\n    return max(abs(i) for i in range(x, y+1) if i % x == 0)\n\n# Find the maximum divisor in an interval\ndef max_divisor10(x, y):\n    return max(abs(i) for i in range(x, y+1) if"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def find_max_divisor(a, b):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    :param a: The first number\n    :type a: int\n    :param b: The second number\n    :type b: int\n    :return: The maximum occuring divisor\n    :rtype: int\n    \"\"\"\n\n    # Find the maximum divisor\n    max_divisor = 1\n    for x in range(a, b):\n        if x % max_divisor!= 0:\n            max_divisor += 1\n    return max_divisor\n\n\n# Test cases\nassert find_max_divisor(1, 4) == 2\nassert find_max_divisor(5, 6) == 2\nassert find_max_divisor(2, 4) == 2\nassert find_max_divisor(5, 12) == 2\nassert find_max_divisor(5, 20) == 2\nassert find_max_divisor(5, 25) == 2\nassert find_max_divisor(5, 30) == 2\nassert find_max_divisor(5, 50) == 2\nassert find_max_divisor(5, 100) == 2\nassert find_max_divisor(5, 150) == 2\nassert find_max_divisor(5, 200) == 2\nassert find_max_divisor(5, 250) == 2\nassert find_max_divisor(5, 300) == 2\nassert find_max_divisor(5, 350) == 2\nassert find_max_divisor(5, 400) == 2\nassert find_max_divisor(5, 450) == 2\nassert find_max_divisor(5, 500) == 2\nassert find_max_divisor(5, 550) == 2\nassert find_max_divisor(5, 600) == 2\nassert find_max_divisor(5, 650) == 2\nassert find_max_divisor(5, 700) == 2\nassert find_max_divisor(5, 750) == 2\nassert find_max_divisor(5"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\ndef max_divisor(n):\n    \"\"\"\n    Given a number n, find the maximum divisor of n.\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    else:\n        return max_divisor(n / 2)\n\n\ndef main():\n    \"\"\"\n    Given an integer n, find the maximum divisor of n.\n    \"\"\"\n    # Test Cases\n    # 1) 2\n    # 2) 4\n    # 3) 6\n    # 4) 8\n    # 5) 10\n    # 6) 12\n    # 7) 14\n    # 8) 16\n    # 9) 18\n    # 10) 20\n    # 11) 24\n    # 12) 26\n    # 13) 28\n    # 14) 30\n    # 15) 32\n    # 16) 36\n    # 17) 40\n    # 18) 48\n    # 19) 50\n    # 20) 56\n    # 21) 60\n    # 22) 72\n    # 23) 80\n    # 24) 96\n    # 25) 100\n    # 26) 112\n    # 27) 120\n    # 28) 128\n    # 29) 136\n    # 30) 144\n    # 31) 160\n    # 32) 192\n    # 33) 200\n    # 34) 224\n    # 35) 256\n    # 36) 288\n    # 37) 320\n    # 38) 384\n    # 39) 448\n    # 40) 512\n    # 41) 576\n    # 42) 640\n    # 43) 768\n    # 44) 896\n    # 45) 960\n    # 46) 1024\n    # 47) 1152\n    # 48) 1280\n    # 49) 1344\n    # 50) 1408\n    # 51) 1472\n    # 52) 1536\n    # 53) 1600\n    # 54) 1664\n    # 55) 1728\n    # 56) 1792\n    # 57) 1920\n    # 58) 1984\n    # 59) 2048\n    # 60) 2112\n    # 61) 2176\n    # 62) 2240\n    # 63) 2304\n    # 64) 2432\n    # 65) 2560\n    # 66) 2688"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    \"\"\"\n    m = n\n    while m % 2 == 0:\n        m = m / 2\n    while m % 3 == 0:\n        m = m / 3\n    while m % 5 == 0:\n        m = m / 5\n    while m % 7 == 0:\n        m = m / 7\n    while m % 11 == 0:\n        m = m / 11\n    while m % 13 == 0:\n        m = m / 13\n    while m % 17 == 0:\n        m = m / 17\n    while m % 19 == 0:\n        m = m / 19\n    while m % 23 == 0:\n        m = m / 23\n    while m % 29 == 0:\n        m = m / 29\n    while m % 31 == 0:\n        m = m / 31\n    while m % 37 == 0:\n        m = m / 37\n    while m % 41 == 0:\n        m = m / 41\n    while m % 43 == 0:\n        m = m / 43\n    while m % 47 == 0:\n        m = m / 47\n    while m % 53 == 0:\n        m = m / 53\n    while m % 59 == 0:\n        m = m / 59\n    while m % 61 == 0:\n        m = m / 61\n    while m % 67 == 0:\n        m = m / 67\n    while m % 71 == 0:\n        m = m / 71\n    while m % 73 == 0:\n        m = m / 73\n    while m % 79 == 0:\n        m = m / 79\n    while m % 83 == 0:\n        m = m / 83\n    while m % 89 == 0:\n        m = m / 89\n    while m % 97 == 0:\n        m = m / 97\n    while m % 101 == 0:\n        m = m / 101\n    while m % 103 == 0:\n        m = m / 103\n    while m % 107 == 0:\n        m = m / 107\n    while m % 109 == 0:\n        m = m / 109\n    while m % 113 == 0:\n        m ="
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "import math\n\ndef max_divisor(start, end):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    >>> max_divisor(1, 2)\n    2\n    >>> max_divisor(3, 5)\n    3\n    >>> max_divisor(6, 8)\n    2\n    >>> max_divisor(6, 7)\n    3\n    >>> max_divisor(1, 4)\n    2\n    >>> max_divisor(0, 2)\n    2\n    >>> max_divisor(1, 0)\n    1\n    >>> max_divisor(3, 5)\n    3\n    >>> max_divisor(5, 7)\n    3\n    >>> max_divisor(3, 7)\n    3\n    >>> max_divisor(3, 4)\n    2\n    \"\"\"\n    interval = (end - start) / 2\n    while interval!= 0:\n        while interval % 2 == 0:\n            interval /= 2\n        else:\n            divisor = math.ceil(interval / 2)\n            if divisor > interval:\n                interval = divisor\n            else:\n                interval = interval - divisor\n    return interval\n\nif __name__ == '__main__':\n    start = input(\"Enter the start of the interval: \")\n    end = input(\"Enter the end of the interval: \")\n    print(\"The maximum occuring divisor is \", max_divisor(start, end))"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def maximum_divisor(interval):\n    \"\"\"\n    Find the maximum occuring divisor in an interval\n    \"\"\"\n    # 1. Find the maximum divisor in the interval\n    maximum_divisor = 1\n    for i in range(2, int(interval) + 1):\n        if interval % i == 0:\n            maximum_divisor = i\n    return maximum_divisor\n\nif __name__ == '__main__':\n    print maximum_divisor(3)\n    print maximum_divisor(6)\n    print maximum_divisor(7)\n    print maximum_divisor(8)\n    print maximum_divisor(11)\n    print maximum_divisor(15)\n    print maximum_divisor(17)\n    print maximum_divisor(23)\n    print maximum_divisor(25)\n    print maximum_divisor(31)\n    print maximum_divisor(37)"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(start, end):\n    \"\"\"\n    Given start and end, find the maximum divisor.\n    \"\"\"\n    # find the maximum divisor\n    d = 1\n    while start % d == 0:\n        d = d + 1\n    while end % d == 0:\n        d = d + 1\n    return d\n\n# test cases\nprint(find_max_divisor(2, 5))\nprint(find_max_divisor(0, 0))\nprint(find_max_divisor(3, 0))\nprint(find_max_divisor(3, 3))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def find_max_divisor(start, end):\n    max_divisor = 1\n    for i in range(start, end+1):\n        if i % max_divisor == 0:\n            print(i, max_divisor)\n            max_divisor = i\n    print(max_divisor)\n\ndef main():\n    start, end = input().split()\n    find_max_divisor(int(start), int(end))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\nimport math\n\ndef max_divisor(n):\n    \"\"\"\n    Find the maximum divisor of n\n    \"\"\"\n    d = math.floor(math.sqrt(n))\n    while d > 1:\n        if n % d == 0:\n            return d\n        d = math.floor(math.sqrt(n / d))\n    return 1\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print \"Enter a number to find the maximum divisor: \"\n    n = int(raw_input())\n    print \"The maximum divisor is %d.\" % max_divisor(n)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "# You can use any tool to do this, like:\n# https://www.math.washington.edu/education/courses/semester/2007/spring/\n# https://github.com/josiahcarlton/divisors\n# https://github.com/hayden-b/divisors\n# https://github.com/hayden-b/divisors/blob/master/divisors.py\n# https://github.com/hayden-b/divisors/blob/master/divisors.py\n# https://github.com/hayden-b/divisors/blob/master/divisors.py\n# http://www.pythonlearn.com/code/divisors.py\n# https://www.youtube.com/watch?v=q9Z0K6ZWQIg\n# https://www.youtube.com/watch?v=q9Z0K6ZWQIg\n# https://www.youtube.com/watch?v=q9Z0K6ZWQIg\n\nimport time\n\ndef divisor_of_interval(interval):\n    \"\"\"\n    Find the maximum divisor of a given interval.\n    \"\"\"\n    # We can do this by taking the biggest number in the interval and\n    # dividing it by each number in the interval.\n    # But how do we know the biggest number?\n    # We can find the biggest number by finding the biggest number\n    # in the interval and dividing it by the next biggest number.\n    # So we can calculate the biggest number and divide it by the next biggest number.\n    # But what if there are no numbers in the interval?\n    # Then the biggest number is 0.\n    # So we have to check for this case and return 0.\n    # We can do this by taking the biggest number in the interval and\n    # dividing it by the biggest number in the interval.\n    # If there is no biggest number, then the biggest number is 0.\n    # So we can do this.\n    # But if there is a biggest number, then we can do this.\n    # We can do this.\n    # We can do this.\n    # We can do this."
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "#\n#  Sample Usage\n#\n#  >> import interval\n#  >> interval.find_max_divisor(1, 10)\n#  3\n#\n\ndef find_max_divisor(start, end):\n    divisor = 0\n    for i in xrange(start, end, 2):\n        if i % 2 == 0:\n            divisor = max(divisor, i)\n    return divisor\n\n\nif __name__ == \"__main__\":\n    print find_max_divisor(1, 10)"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(start, end):\n    max_divisor = 0\n    for i in range(start, end):\n        if math.ceil(i) % max_divisor == 0:\n            return max_divisor\n\n    return max_divisor\n\nstart = int(input())\nend = int(input())\n\nprint(find_max_divisor(start, end))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def max_divisor(interval):\n    \"\"\"\n    interval is a list of integers\n    return a list of the maximum divisors\n    \"\"\"\n    divisors = []\n    for i in interval:\n        if i == 0:\n            continue\n        for d in divisors:\n            if i % d == 0:\n                break\n        else:\n            divisors.append(i)\n    return divisors\n\ndef main():\n    interval = [3, 6, 9, 12, 15, 18]\n    print max_divisor(interval)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def get_max_divisor(start, end):\n    max_divisor = 0\n    for i in range(start, end+1):\n        if i % max_divisor == 0:\n            max_divisor += 1\n        else:\n            max_divisor = i\n    return max_divisor\n\n\nif __name__ == '__main__':\n    start = 0\n    end = 5\n    print get_max_divisor(start, end)"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def divisor_max(n):\n    \"\"\"\n    Returns the maximum divisor of n in the range [0, n).\n    \"\"\"\n    max_divisor = 0\n    for divisor in range(2, n // 2 + 1):\n        if n % divisor == 0:\n            max_divisor = max(divisor, max_divisor)\n    return max_divisor\n\nprint(divisor_max(100))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def maximum_divisor(interval):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    >>> maximum_divisor((0, 3, 4))\n    3\n    >>> maximum_divisor((0, 0, 3))\n    3\n    >>> maximum_divisor((0, 1, 3))\n    1\n    >>> maximum_divisor((0, 1, 2, 3))\n    1\n    >>> maximum_divisor((0, 3, 4, 5))\n    3\n    >>> maximum_divisor((0, 1, 2, 3, 5))\n    3\n    >>> maximum_divisor((0, 2, 3, 4, 5))\n    5\n    >>> maximum_divisor((0, 2, 3, 4, 5, 6))\n    5\n    >>> maximum_divisor((0, 1, 2, 3, 4, 5, 6))\n    5\n    >>> maximum_divisor((0, 1, 2, 3, 4, 5, 6, 7))\n    7\n    >>> maximum_divisor((0, 1, 2, 3, 4, 5, 6, 7, 8))\n    7\n    >>> maximum_divisor((0, 1, 2, 3, 4, 5, 6, 7, 8, 9))\n    9\n    >>> maximum_divisor((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    10\n    >>> maximum_divisor((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n    11\n    >>> maximum_divisor((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n    12\n    >>> maximum_divisor((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n    13\n    >>> maximum_divisor((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n    14\n    >>> maximum_divisor((0, 1, 2, 3"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "# -*- coding: utf-8 -*-\n#\n# Author: Alex B\n# Created on: 2017-02-19\n# Last modified: 2017-02-19\n#\n\nimport math\n\n\ndef divisor_max(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    :param n: integer\n    :return: the maximum occuring divisor\n    \"\"\"\n    maximum_divisor = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            maximum_divisor = max(maximum_divisor, i)\n    return maximum_divisor\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(divisor_max(100))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(start, end):\n    # return the maximum divisor of a range\n    # start, end: range\n    return find_max_divisor_recursive(start, end)\n\ndef find_max_divisor_recursive(start, end):\n    # return the maximum divisor of a range\n    # start, end: range\n    if start == end:\n        return 1\n    mid = int((start + end) / 2)\n    if mid % 2 == 0:\n        return find_max_divisor_recursive(start, mid)\n    else:\n        return find_max_divisor_recursive(mid + 1, end)\n\nif __name__ == '__main__':\n    start = 0\n    end = 100\n    print find_max_divisor(start, end)"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef find_max_divisor(a, b):\n\tmax_divisor = 0\n\tfor i in range(a, b):\n\t\tif i % max_divisor == 0:\n\t\t\tprint i\n\t\tif i > max_divisor:\n\t\t\tmax_divisor = i\n\treturn max_divisor\n\nif __name__ == \"__main__\":\n\tprint find_max_divisor(1, 6)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport sys\n\ndef find_maximum_divisor(num):\n    divisor = num\n    i = 2\n    while i <= divisor:\n        if divisor % i == 0:\n            return i\n        i += 1\n    return num\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print \"Usage: %s <number>\" % sys.argv[0]\n        sys.exit(1)\n    num = int(sys.argv[1])\n    print find_maximum_divisor(num)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def findMax(a, b):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    elif a > b:\n        return findMax(b, a)\n    elif a == b:\n        return a\n    else:\n        return findMax(a, b-1)"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef find_max_divisor(n):\n    \"\"\"\n    Write a function to find the maximum occuring divisor in an interval.\n    \"\"\"\n    # return math.floor(math.sqrt(n))\n    return int(math.ceil(math.sqrt(n)))\n\nif __name__ == '__main__':\n    print find_max_divisor(1)\n    print find_max_divisor(2)\n    print find_max_divisor(3)\n    print find_max_divisor(4)\n    print find_max_divisor(5)\n    print find_max_divisor(6)\n    print find_max_divisor(7)\n    print find_max_divisor(8)\n    print find_max_divisor(9)\n    print find_max_divisor(10)\n    print find_max_divisor(11)\n    print find_max_divisor(12)\n    print find_max_divisor(13)\n    print find_max_divisor(14)\n    print find_max_divisor(15)\n    print find_max_divisor(16)\n    print find_max_divisor(17)\n    print find_max_divisor(18)\n    print find_max_divisor(19)\n    print find_max_divisor(20)\n    print find_max_divisor(21)\n    print find_max_divisor(22)\n    print find_max_divisor(23)\n    print find_max_divisor(24)\n    print find_max_divisor(25)\n    print find_max_divisor(26)\n    print find_max_divisor(27)\n    print find_max_divisor(28)\n    print find_max_divisor(29)\n    print find_max_divisor(30)\n    print find_max_divisor(31)\n    print find_max_divisor(32)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def find_max_divisor(x, y):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    \"\"\"\n    # Make sure that x and y are integers.\n    x, y = int(x), int(y)\n\n    # Get the maximum divisor in the interval.\n    divisor = 1\n    while x % divisor!= 0 and y % divisor!= 0:\n        divisor += 1\n    return divisor\n\n\nif __name__ == \"__main__\":\n    x = 1\n    y = 5\n    print find_max_divisor(x, y)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import math\n\ndef maximum_divisor(x, y):\n    \"\"\"\n    Find the maximum divisor of x and y.\n    :param x: A number\n    :param y: A number\n    :return: The maximum divisor of x and y.\n    \"\"\"\n    return math.ceil(math.sqrt(min(x, y)))\n\n\ndef main():\n    \"\"\"\n    Test function.\n    \"\"\"\n    assert maximum_divisor(1, 2) == 2\n    assert maximum_divisor(5, 10) == 5\n    assert maximum_divisor(15, 10) == 5\n    assert maximum_divisor(15, 5) == 5\n    assert maximum_divisor(15, 5) == 5\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef find_max_divisor(start, end):\n    return int(math.ceil(math.sqrt(end)))\n\nif __name__ == \"__main__\":\n    print(find_max_divisor(100, 1000))\n    print(find_max_divisor(1, 5))\n    print(find_max_divisor(1, 7))\n    print(find_max_divisor(1, 10))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef find_max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    n: integer, the interval\n    return: the maximum occuring divisor in the interval\n    \"\"\"\n    if n == 0:\n        return 1\n    divisors = 1\n    for i in range(1, sqrt(n)+1):\n        if n % i == 0:\n            divisors += i\n    return divisors\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(find_max_divisor(7))\n    print(find_max_divisor(5))\n    print(find_max_divisor(4))\n    print(find_max_divisor(8))\n    print(find_max_divisor(2))\n    print(find_max_divisor(6))\n    print(find_max_divisor(1))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_max_divisor(a,b):\n    max_divisor = 0\n    while a % max_divisor == 0:\n        max_divisor += 1\n    return max_divisor\n\ndef main():\n    a = 0\n    b = 0\n    print find_max_divisor(a, b)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import math\n\ndef get_max_divisor(start, end):\n    \"\"\"\n    Find the maximum divisor in the range [start, end).\n    \"\"\"\n    max_divisor = 1\n    for i in range(start, end):\n        if i % max_divisor == 0:\n            max_divisor = i\n    return max_divisor\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    start, end = input().split()\n    start = int(start)\n    end = int(end)\n    max_divisor = get_max_divisor(start, end)\n    print(max_divisor)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_max_divisor(x):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    :param x: an integer\n    :return: the maximum occuring divisor in an interval\n    \"\"\"\n    if x < 0:\n        return -1\n    divisors = [i for i in range(1, x + 1) if x % i == 0]\n    return max(divisors)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def divisors(n):\n    \"\"\"\n    Find all the divisors of n.\n    \"\"\"\n    divisor_set = set()\n    for divisor in range(1, n):\n        if n % divisor == 0:\n            divisor_set.add(divisor)\n            divisor_set.add(n // divisor)\n    return divisor_set\n\nif __name__ == '__main__':\n    n = int(input('Enter a number: '))\n    print(max(divisors(n)))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_max_divisor(start, end):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    Arguments:\n    start -- start of interval\n    end -- end of interval\n\n    Returns:\n    The maximum occuring divisor in an interval.\n    \"\"\"\n    divisor = 1\n    for i in range(1, end + 1):\n        if (end % i) == 0:\n            if (i % divisor) == 0:\n                divisor = i\n    return divisor\n\nif __name__ == \"__main__\":\n    print(find_max_divisor(2, 4))\n    print(find_max_divisor(2, 8))\n    print(find_max_divisor(10, 13))\n    print(find_max_divisor(20, 100))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(a, b):\n    \"\"\"\n    Find the maximum occuring divisor of a and b.\n    \"\"\"\n    max_divisor = 0\n    for i in range(1, min(a, b)):\n        if a % i == 0 and b % i == 0:\n            max_divisor = max(max_divisor, i)\n    return max_divisor\n\ndef main():\n    \"\"\"\n    Main.\n    \"\"\"\n    print(find_max_divisor(7, 3))\n    print(find_max_divisor(100, 25))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    Input:\n    n -- an integer\n\n    Output:\n    a -- an integer\n    \"\"\"\n\n    # The maximum divisor is the largest integer divisor of n.\n    a = math.floor(math.sqrt(n))\n\n    # If the square root of n is a perfect square, then the\n    # maximum divisor is the square root of n.\n    if a*a == n:\n        return a\n\n    # If the square root of n is not a perfect square, then the\n    # maximum divisor is the largest integer divisor of n/a^2.\n    b = n/a**2\n    if b == int(b):\n        return a\n\n    return find_max_divisor(b)\n\nif __name__ == \"__main__\":\n    print(find_max_divisor(9))\n    print(find_max_divisor(27))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "#  This is the function to be written.\ndef find_max_divisor(start,end):\n    max_divisor = 0\n    max_divisor_num = 0\n    \n    for i in range(start,end+1):\n        for j in range(2,i):\n            if i % j == 0:\n                max_divisor = max(max_divisor,j)\n    return max_divisor\n    \n#  This is the function to be written.\ndef find_max_divisor_recursive(start,end):\n    max_divisor = 0\n    max_divisor_num = 0\n    \n    if start == end:\n        return start\n    else:\n        for i in range(start,end+1):\n            if i % 2 == 0:\n                if i > max_divisor_num:\n                    max_divisor_num = i\n                    max_divisor = 2\n                else:\n                    max_divisor = max(max_divisor,2)\n            elif i % 3 == 0:\n                if i > max_divisor_num:\n                    max_divisor_num = i\n                    max_divisor = 3\n                else:\n                    max_divisor = max(max_divisor,3)\n            elif i % 5 == 0:\n                if i > max_divisor_num:\n                    max_divisor_num = i\n                    max_divisor = 5\n                else:\n                    max_divisor = max(max_divisor,5)\n            elif i % 7 == 0:\n                if i > max_divisor_num:\n                    max_divisor_num = i\n                    max_divisor = 7\n                else:\n                    max_divisor = max(max_divisor,7)\n            elif i % 11 == 0:\n                if i > max_divisor_num:\n                    max_divisor_num = i\n                    max_divisor = 11\n                else:\n                    max_divisor = max(max_divisor,11)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import math\nimport timeit\n\ndef main():\n    start = timeit.default_timer()\n    max_divisor = 0\n    for i in range(1, 1000000):\n        for j in range(i, 1000000):\n            divisor = i % j\n            if divisor > max_divisor:\n                max_divisor = divisor\n    end = timeit.default_timer()\n    print('Time taken: %f' % (end - start))\n    print('Max divisor: %d' % max_divisor)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def max_divisor(x):\n    \"\"\"\n    >>> max_divisor(2)\n    2\n    >>> max_divisor(1)\n    1\n    >>> max_divisor(3)\n    3\n    >>> max_divisor(9)\n    3\n    >>> max_divisor(12)\n    3\n    >>> max_divisor(10)\n    10\n    >>> max_divisor(100)\n    10\n    >>> max_divisor(100)\n    10\n    >>> max_divisor(99)\n    99\n    \"\"\"\n    \n    divisor_list = [1]\n    \n    while x > 1:\n        while x % divisor_list[-1] == 0:\n            divisor_list.append(divisor_list[-1])\n            x //= divisor_list[-1]\n        divisor_list.append(x)\n        x //= divisor_list[-1]\n    return divisor_list[-1]"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def find_max_divisor(a, b):\n    '''\n    a : integer\n    b : integer\n    '''\n    max_divisor = 0\n    for i in range(2, b):\n        if a % i == 0:\n            if i > max_divisor:\n                max_divisor = i\n    return max_divisor\n\nif __name__ == \"__main__\":\n    print(find_max_divisor(0, 7))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from math import ceil\n\ndef find_max_divisor(num):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    \"\"\"\n    if num == 0:\n        return 1\n    divisor = 1\n    while num % divisor == 0:\n        divisor += 1\n    return divisor\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    for num in range(1, 1000000):\n        print(num, find_max_divisor(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def divisors(n):\n    \"\"\"\n    Find the divisors of n.\n\n    >>> divisors(2)\n    [1, 2]\n    >>> divisors(5)\n    [1, 2, 5]\n    >>> divisors(6)\n    [1, 2, 3, 6]\n    >>> divisors(1)\n    [1]\n    \"\"\"\n    result = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            result.append(i)\n            if i!= n/i:\n                result.append(n/i)\n    return result\n\n\ndef main():\n    \"\"\"\n    Print the maximum divisor of an interval.\n\n    >>> main()\n    >>> divisors(2)\n    >>> divisors(5)\n    >>> divisors(6)\n    >>> divisors(1)\n    \"\"\"\n    print(max(divisors(i)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from math import ceil\n\ndef max_divisor(start, end):\n    \"\"\"\n    Write a function that returns the maximum divisor in an interval [start, end).\n    \"\"\"\n    return ceil(end/start)\n\nif __name__ == \"__main__\":\n    print max_divisor(1, 2)\n    print max_divisor(3, 4)\n    print max_divisor(5, 6)\n    print max_divisor(7, 8)\n    print max_divisor(9, 10)\n    print max_divisor(11, 12)\n    print max_divisor(13, 14)\n    print max_divisor(15, 16)\n    print max_divisor(17, 18)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(num, interval):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    :param num: The number to be checked.\n    :param interval: The interval [a, b] that needs to be checked.\n    :return: The maximum occuring divisor.\n    \"\"\"\n\n    # The maximum occuring divisor is the maximum number\n    # in the interval which is a multiple of the divisor.\n    #\n    # For example:\n    #     If the interval is [2, 4], the maximum occuring divisor is 2.\n    #     If the interval is [1, 9], the maximum occuring divisor is 3.\n    #     If the interval is [0, 9], the maximum occuring divisor is 9.\n    #     If the interval is [5, 5], the maximum occuring divisor is 1.\n    #     If the interval is [0, 0], the maximum occuring divisor is 0.\n    #\n    # If num is a multiple of a divisor, then the maximum occuring divisor\n    # is the divisor itself.\n    #\n    # If num is not a multiple of a divisor, then the maximum occuring divisor\n    # is the maximum number in the interval which is a multiple of the divisor.\n    #\n    # For example:\n    #     If num is 5, then the maximum occuring divisor is 5.\n    #     If num is 10, then the maximum occuring divisor is 10.\n    #     If num is 15, then the maximum occuring divisor is 15.\n    #     If num is 20, then the maximum occuring divisor is 20.\n    #     If num is 25, then the maximum occuring divisor is 25.\n    #     If num is 30, then the maximum occuring divisor is 30.\n    #     If num is 35, then the maximum occuring divisor is 35.\n    #     If num is 40, then the maximum occuring divisor is 40.\n    #     If num is 45, then the maximum occuring divisor is 45.\n    #     If num"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def max_divisor(n):\n    \"\"\"\n    >>> max_divisor(20)\n    3\n    >>> max_divisor(30)\n    5\n    >>> max_divisor(100)\n    10\n    >>> max_divisor(20)\n    3\n    >>> max_divisor(20)\n    3\n    \"\"\"\n    divisor = 1\n    while n % divisor == 0:\n        divisor += 1\n    return divisor\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from __future__ import print_function\nimport timeit\n\ndef main():\n    \"\"\"\n    Call the function to find the maximum occuring divisor in an interval\n    \"\"\"\n    print(\"Finding the maximum occuring divisor in an interval\")\n    print()\n\n    start_time = timeit.default_timer()\n\n    def find_max_divisor(x):\n        return x if x % 2 else x // 2\n\n    max_divisor = find_max_divisor(10)\n    print(\"The maximum occuring divisor is {}\".format(max_divisor))\n\n    end_time = timeit.default_timer()\n\n    print(\"Time taken: {}\".format(end_time - start_time))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(start, end):\n    \"\"\"\n    Find the maximum divisor in the interval [start, end].\n    \"\"\"\n    \n    # Calculate the interval length\n    length = (end - start)\n    \n    # Calculate the number of divisors\n    divisors = int(math.floor(length / 2))\n    \n    # Calculate the remainder\n    remainder = length % 2\n    \n    # Find the maximum divisor in the interval\n    max_divisor = 2\n    \n    for i in range(1, divisors + 1):\n        if(length % i == 0):\n            max_divisor = i\n    \n    # Return the maximum divisor\n    return max_divisor\n\n# Test code\nif __name__ == \"__main__\":\n    start = int(raw_input(\"Enter start value: \"))\n    end = int(raw_input(\"Enter end value: \"))\n    \n    print \"Maximum divisor in the interval [%d, %d] is %d\" % (start, end, find_max_divisor(start, end))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval\n    \n    Input:\n    n -- The number to be divided\n    \n    Output:\n    The maximum occuring divisor in an interval\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    \n    # If the number is less than the smallest integer\n    if n < math.floor(n):\n        return 1\n    \n    # If the number is greater than the biggest integer\n    if n > math.ceil(n):\n        return 1\n    \n    # If the number is an integer\n    if math.ceil(n) == n:\n        return 1\n    \n    # If the number is not an integer\n    if math.floor(n)!= n:\n        return 1\n    \n    # Otherwise, we can use binary search to find the maximum\n    # occuring divisor\n    low = 1\n    high = int(math.floor(n))\n    \n    while low <= high:\n        mid = low + (high - low) / 2\n        if n % mid == 0:\n            return mid\n        elif n % mid > 0:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return 1\n\nif __name__ == '__main__':\n    print(find_max_divisor(100))\n    print(find_max_divisor(10000))\n    print(find_max_divisor(90000))\n    print(find_max_divisor(900000))\n    print(find_max_divisor(9000000))\n    print(find_max_divisor(90000000))\n    print(find_max_divisor(900000000))\n    print(find_max_divisor(9000000000))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import math\n\ndef max_divisor(lower, upper):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    \"\"\"\n    n = lower\n    while n <= upper:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n * 3 + 1\n    return n\n\ndef main():\n    print(max_divisor(10, 100))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_max_divisor(min_divisor, max_divisor):\n    \"\"\"Finds the maximum occuring divisor in the given interval.\n\n    :param min_divisor: The minimum divisor in the interval.\n    :param max_divisor: The maximum divisor in the interval.\n    :return: The maximum occuring divisor.\n    \"\"\"\n    max_divisor = int(max_divisor)\n    max_divisor = max(max_divisor, min_divisor)\n    max_divisor = max(max_divisor, math.ceil(math.sqrt(max_divisor)))\n    max_divisor = max(max_divisor, math.ceil(math.sqrt(min_divisor)))\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    min_divisor = 2\n    max_divisor = 10\n\n    print(\"Find max divisor for {0} to {1}: {2}\".format(min_divisor, max_divisor, find_max_divisor(min_divisor, max_divisor)))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor of n in an interval.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return find_max_divisor(n / 2) * 2\n    else:\n        return find_max_divisor(n / 2) + 1\n\ndef main():\n    \"\"\"\n    Run some tests.\n    \"\"\"\n    assert find_max_divisor(0) == 1\n    assert find_max_divisor(1) == 1\n    assert find_max_divisor(2) == 2\n    assert find_max_divisor(3) == 2\n    assert find_max_divisor(4) == 4\n    assert find_max_divisor(10) == 5\n    assert find_max_divisor(21) == 7\n    assert find_max_divisor(101) == 11\n    assert find_max_divisor(1000) == 13\n    assert find_max_divisor(10000) == 17\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            divisors.append(i)\n    return max(divisors)\n\nif __name__ == \"__main__\":\n    print(divisors(100))\n    print(divisors(1))\n    print(divisors(2))\n    print(divisors(5))\n    print(divisors(10))\n    print(divisors(15))\n    print(divisors(20))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(low, high):\n    divisor_list = []\n    for i in range(low, high):\n        temp = math.ceil(math.sqrt(i))\n        if temp <= high:\n            divisor_list.append(temp)\n    if len(divisor_list) == 0:\n        return 1\n    return max(divisor_list)\n\ndef main():\n    print find_max_divisor(1, 100)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_maximum_divisor(start, end):\n    \"\"\"\n    Find the maximum divisor in a given range.\n    \"\"\"\n    while start < end:\n        divisor = math.floor(math.sqrt(end))\n        if divisor * divisor > end:\n            end = end / divisor\n        else:\n            return divisor\n    return end\n\n\nif __name__ == '__main__':\n    print(find_maximum_divisor(1, 100))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    n: The interval.\n    \"\"\"\n    d = 0\n    m = math.floor(math.sqrt(n))\n    while m > 0:\n        if n % m == 0:\n            d = m\n            break\n        m = math.floor(math.sqrt(n / m))\n    return d\n\nif __name__ == '__main__':\n    print(find_max_divisor(10000))\n    print(find_max_divisor(1000))\n    print(find_max_divisor(100))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def find_max_divisor(x):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    :param x: interval\n    :return: maximum divisor\n    \"\"\"\n    if x % 2 == 0:\n        return x/2\n    else:\n        return x\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(find_max_divisor(5))\n    print(find_max_divisor(10))\n    print(find_max_divisor(20))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "import math\n\n# Assume that the intervals are sorted\ndef find_max_divisor(intervals):\n    max_divisor = 0\n    for i in range(0, len(intervals)):\n        divisor = 1\n        while divisor < len(intervals[i]):\n            divisor += 1\n            intervals[i] = list(intervals[i])\n            if len(intervals[i]) == 1:\n                break\n            intervals[i].pop(0)\n        if divisor > max_divisor:\n            max_divisor = divisor\n    return max_divisor\n\n\nif __name__ == '__main__':\n    intervals = [range(1, 10), range(3, 20), range(7, 20)]\n    print(find_max_divisor(intervals))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def max_divisor(a, b):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    Input:\n        a: an integer\n        b: an integer\n    Output:\n        the maximum occuring divisor\n    \"\"\"\n    # initialize the maximum divisor\n    maximum_divisor = 0\n\n    # for every divisor in the interval\n    for i in range(1, a + 1):\n        # if the divisor is less than the current maximum divisor\n        if i <= b:\n            # if the current divisor is greater than the maximum divisor\n            if i > maximum_divisor:\n                # update the maximum divisor\n                maximum_divisor = i\n\n    return maximum_divisor\n\n\nif __name__ == '__main__':\n    print max_divisor(2, 3)\n    print max_divisor(3, 5)\n    print max_divisor(5, 7)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\nimport operator\n\ndef max_divisor(x, y):\n    \"\"\"\n    Find the maximum occuring divisor of x and y.\n    :param x: The first number\n    :param y: The second number\n    :return: The maximum divisor.\n    \"\"\"\n\n    x, y = float(x), float(y)\n    m = max(x, y)\n    divisor = 1\n    while m % divisor == 0:\n        divisor += 1\n    return divisor\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print max_divisor(2, 3)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/divisor/problem\n\nfrom collections import Counter\n\n# Complete the maxDivisor function below.\ndef maxDivisor(a, b):\n    divisor = Counter([i for i in range(a, b + 1) if a % i == 0])\n    return max(divisor.values())\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n    print(maxDivisor(a, b))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def max_divisor(low, high):\n    \"\"\"\n    Args:\n        low: a number.\n        high: a number.\n    Returns:\n        an integer.\n    \"\"\"\n    divisor = 1\n    for i in range(low, high):\n        if i % divisor == 0:\n            divisor += 1\n    return divisor\n\nprint max_divisor(1, 100)\nprint max_divisor(2, 100)\nprint max_divisor(100, 100)\nprint max_divisor(2, 4)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# TODO:\n# - find the minimum divisor\n# - find the minimum divisor in the interval [x,y]\n# - find the minimum divisor in the interval [x,y] - x\n# - find the minimum divisor in the interval [x,y] - x - y\n# - find the minimum divisor in the interval [x,y] - x - y - x\n# - find the minimum divisor in the interval [x,y] - x - y - x - y\n# - find the minimum divisor in the interval [x,y] - x - y - x - y - x\n# - find the minimum divisor in the interval [x,y] - x - y - x - y - x - y - x\n# - find the minimum divisor in the interval [x,y] - x - y - x - y - x - y - x - y - x\n# - find the minimum divisor in the interval [x,y] - x - y - x - y - x - y - x - y - x - y - x\n# - find the minimum divisor in the interval [x,y] - x - y - x - y - x - y - x - y - x - y - x - y - x\n# - find the minimum divisor in the interval [x,y] - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y - x - y -"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport math\n\n# Find the maximum occuring divisor in an interval\ndef max_occuring_divisor(a, b):\n    n = 0\n    d = 0\n    while a % d == 0 and a < b:\n        n += 1\n        d = d + 1\n        #print(d, n)\n    return n\n\n# Test Cases\nprint(max_occuring_divisor(1, 2))\nprint(max_occuring_divisor(3, 5))\nprint(max_occuring_divisor(7, 9))\nprint(max_occuring_divisor(3, 4))\nprint(max_occuring_divisor(6, 2))\nprint(max_occuring_divisor(2, 2))\nprint(max_occuring_divisor(0, 2))\nprint(max_occuring_divisor(4, 4))\nprint(max_occuring_divisor(3, 4))\nprint(max_occuring_divisor(4, 4))\nprint(max_occuring_divisor(7, 7))\nprint(max_occuring_divisor(7, 7))\nprint(max_occuring_divisor(7, 7))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def max_divisor(low, high):\n    \"\"\"\n    >>> max_divisor(1, 4)\n    2\n    >>> max_divisor(1, 2)\n    1\n    >>> max_divisor(1, 5)\n    2\n    >>> max_divisor(1, 10)\n    3\n    >>> max_divisor(1, 100)\n    10\n    >>> max_divisor(1, 101)\n    10\n    \"\"\"\n    divisors = []\n    for x in range(low, high):\n        divisor = 1\n        while x % divisor == 0:\n            divisor += 1\n            if divisor in divisors:\n                divisors.remove(divisor)\n        divisors.append(divisor)\n    return max(divisors)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def find_max_divisor(start, end):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    :param start: Starting point of the interval.\n    :param end: End point of the interval.\n    :return: The maximum occuring divisor in the interval.\n    \"\"\"\n    if start < end:\n        divisor = 1\n        while start % divisor == 0:\n            start = start / divisor\n            divisor += 1\n        while end % divisor == 0:\n            end = end / divisor\n            divisor += 1\n        return divisor\n    else:\n        return 0\n\n\ndef main():\n    \"\"\"\n    Run the main function.\n    \"\"\"\n    start = 0\n    end = 0\n    divisor = 0\n\n    while True:\n        start += 1\n        end += 1\n        divisor = find_max_divisor(start, end)\n        if divisor == 0:\n            break\n\n    print(divisor)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def find_max_divisor(x, y):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    \"\"\"\n    return max(divisors(x), divisors(y))\n\ndef divisors(n):\n    \"\"\"\n    Return all divisors of n.\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 2, 3]\n    else:\n        return [1] + divisors(n // 2) + divisors(n * 2)\n\nif __name__ == '__main__':\n    x = 100\n    y = 100\n    print(find_max_divisor(x, y))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def find_max_divisor(start, end):\n    max_divisor = 0\n    for i in range(start, end):\n        divisor = 1\n        while i % divisor == 0:\n            divisor = divisor + 1\n        if divisor > max_divisor:\n            max_divisor = divisor\n    return max_divisor\n\nprint(find_max_divisor(1, 100))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(start, end):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    \"\"\"\n    max_divisor = 1\n    for i in range(2, int(math.ceil(math.sqrt(end)))+1):\n        while start % i == 0:\n            if i > max_divisor:\n                max_divisor = i\n            start /= i\n    return max_divisor\n\nif __name__ == \"__main__\":\n    print(find_max_divisor(1, 100))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "import math\n\n# Your code here\ndef find_max_divisor(a, b):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    \n    Input:\n    a = a integer\n    b = a integer\n    \n    Output:\n    d = maximum occuring divisor\n    \"\"\"\n    \n    # Initialize variables\n    d = 0\n    \n    # Iterate over all numbers in the interval\n    for i in range(a, b+1):\n        # Find the maximum divisor\n        if i % d == 0:\n            d = i\n    \n    return d\n\nprint find_max_divisor(10, 20)"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def divisors(n):\n    d = 1\n    while d < n:\n        d = n // d\n        if d == 1:\n            break\n        n = n // d\n    return d\n\ndef findMaxDivisor(n):\n    max = 0\n    for d in divisors(n):\n        if d > max:\n            max = d\n    return max\n\nif __name__ == \"__main__\":\n    print(findMaxDivisor(10))\n    print(findMaxDivisor(100))\n    print(findMaxDivisor(1000))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def find_max_divisor(number):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    Input:\n        number - an integer.\n\n    Output:\n        Maximum occuring divisor in an interval.\n    \"\"\"\n    maximum_divisor = 0\n    if number > 0:\n        for i in range(1, number+1):\n            if number % i == 0:\n                maximum_divisor = i\n    return maximum_divisor\n\nif __name__ == \"__main__\":\n    assert(find_max_divisor(2) == 2)\n    assert(find_max_divisor(3) == 3)\n    assert(find_max_divisor(6) == 2)\n    assert(find_max_divisor(12) == 3)\n    assert(find_max_divisor(24) == 6)\n    assert(find_max_divisor(36) == 3)\n    assert(find_max_divisor(120) == 6)"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_divisor(lower_bound, upper_bound):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    Arguments:\n        lower_bound: The lower bound of the interval.\n        upper_bound: The upper bound of the interval.\n\n    Returns:\n        The maximum occuring divisor in the interval.\n    \"\"\"\n    # Check if the interval is valid.\n    if lower_bound > upper_bound:\n        return 0\n    # Compute the difference between the interval.\n    difference = upper_bound - lower_bound\n    # Compute the maximum divisor.\n    max_divisor = 0\n    while difference > 0:\n        # Calculate the difference divided by the maximum divisor.\n        difference_divided_by_max_divisor = difference / max_divisor\n        # Check if the difference is greater than 1.\n        if difference_divided_by_max_divisor > 1:\n            # If it is greater than 1, we need to increase the maximum\n            # divisor.\n            max_divisor += 1\n        # Update the difference.\n        difference -= difference_divided_by_max_divisor\n    return max_divisor\n\nif __name__ == \"__main__\":\n    # Test 1\n    assert find_max_divisor(1, 2) == 1\n\n    # Test 2\n    assert find_max_divisor(1, 5) == 2\n\n    # Test 3\n    assert find_max_divisor(100, 500) == 100"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "import math\nimport timeit\n\n\ndef max_divisor(start, end):\n    max_divisor = 0\n    for i in range(start, end, 1):\n        if i % max_divisor == 0:\n            return max_divisor\n\n    return max_divisor\n\n\ndef main():\n    start = timeit.default_timer()\n    print(max_divisor(1, 100))\n    print(timeit.default_timer() - start)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def find_max_divisor(num):\n    \"\"\"\n    Find the maximum occuring divisor.\n    \n    Input:\n    num: A positive integer.\n    \n    Return:\n    A positive integer, the maximum divisor.\n    \"\"\"\n    if num == 1:\n        return 1\n    \n    if num % 2 == 0:\n        return 2\n    \n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return i\n    \n    return num\n\nif __name__ == \"__main__\":\n    print(find_max_divisor(5))\n    print(find_max_divisor(10))\n    print(find_max_divisor(100))\n    print(find_max_divisor(1000))\n    print(find_max_divisor(1000000))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "# This code is a modified version of the one found in the book\n# \"Python Programming\" by Mark Lutzman\n# http://www.python.org/doc/essays/intro/introduction.html\n\nimport math\n\ndef max_divisor(min, max):\n    if min > max:\n        return max_divisor(max, min)\n    return max_divisor(min, max)\n\ndef find_max_divisor(min, max):\n    return max_divisor(min, max)\n\ndef find_max_divisor_2(min, max):\n    n = max_divisor(min, max)\n    if n == 1:\n        return n\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    return n\n\ndef find_max_divisor_3(min, max):\n    n = max_divisor(min, max)\n    if n == 1:\n        return n\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n / 3 + 1\n    return n\n\ndef find_max_divisor_4(min, max):\n    n = max_divisor(min, max)\n    if n == 1:\n        return n\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n / 5 + 1\n    return n\n\ndef find_max_divisor_5(min, max):\n    n = max_divisor(min, max)\n    if n == 1:\n        return n\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n / 3 + 1\n    return n\n\ndef find_max_divisor_6(min, max):\n    n = max_divisor(min, max)\n    if n == 1:\n        return n\n    while n > 1:\n        if n % 2 == 0:"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def divisor_max(x, y):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    :param x:\n    :param y:\n    :return:\n    \"\"\"\n    return max(x//y, y)\n\nif __name__ == '__main__':\n    print(divisor_max(2, 3))\n    print(divisor_max(2, 4))\n    print(divisor_max(2, 8))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def findMaxDivisor(interval):\n    \"\"\"\n    @param interval: [int]\n    \"\"\"\n    maxDivisor = 0\n    maxDivisorInt = 0\n    for x in range(2, interval):\n        if x % interval == 0:\n            if x > maxDivisorInt:\n                maxDivisorInt = x\n                maxDivisor = 1\n            else:\n                maxDivisor = max(maxDivisor, x)\n    return maxDivisorInt\n\nprint(findMaxDivisor(100))\nprint(findMaxDivisor(101))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "# -*- coding: utf-8 -*-\n# @author: Roman Kuznetsov\n\nfrom math import sqrt\n\ndef divisors(x):\n    \"\"\"\n    Returns list of divisors of x.\n    \"\"\"\n    return [1, x, x*x, x*x*x]\n\ndef find_max_divisor(x):\n    \"\"\"\n    Returns the maximum occuring divisor of x.\n    \"\"\"\n    max_divisor = 1\n    for divisor in divisors(x):\n        if max_divisor < divisor:\n            max_divisor = divisor\n    return max_divisor\n\nif __name__ == '__main__':\n    print find_max_divisor(10)\n    print find_max_divisor(100)\n    print find_max_divisor(1000)\n    print find_max_divisor(10000)\n    print find_max_divisor(100000)\n    print find_max_divisor(1000000)\n    print find_max_divisor(10000000)"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    return n\n\n# Your code here\nprint max_divisor(2)\nprint max_divisor(100)\nprint max_divisor(200)\nprint max_divisor(300)"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def find_max_divisor(a, b):\n    max_divisor = 0\n    for i in range(a, b+1):\n        if i % 10 == 0:\n            continue\n        divisor = i\n        while divisor % 10!= 0:\n            divisor /= 10\n        if divisor > max_divisor:\n            max_divisor = divisor\n    return max_divisor\n\nif __name__ == '__main__':\n    print(find_max_divisor(0, 20))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def maximum_divisor(n):\n    \"\"\"\n    Input:\n    n - the number to be checked\n    Output:\n    the maximum divisor in an interval [0,n]\n    \"\"\"\n    \n    # if n is a prime, then the divisor is 1\n    if n % 2 == 0:\n        return 2\n    # if n is divisible by 2, then the divisor is 2\n    elif n % 3 == 0:\n        return 3\n    # if n is divisible by 3, then the divisor is 3\n    elif n % 5 == 0:\n        return 5\n    # if n is divisible by 5, then the divisor is 5\n    elif n % 7 == 0:\n        return 7\n    # if n is divisible by 7, then the divisor is 7\n    elif n % 11 == 0:\n        return 11\n    # if n is divisible by 11, then the divisor is 11\n    elif n % 13 == 0:\n        return 13\n    # if n is divisible by 13, then the divisor is 13\n    elif n % 17 == 0:\n        return 17\n    # if n is divisible by 17, then the divisor is 17\n    elif n % 19 == 0:\n        return 19\n    # if n is divisible by 19, then the divisor is 19\n    elif n % 23 == 0:\n        return 23\n    # if n is divisible by 23, then the divisor is 23\n    elif n % 29 == 0:\n        return 29\n    # if n is divisible by 29, then the divisor is 29\n    elif n % 31 == 0:\n        return 31\n    # if n is divisible by 31, then the divisor is 31\n    elif n % 37 == 0:\n        return 37\n    # if n is divisible by 37, then the divisor is 37\n    elif n % 41 == 0:\n        return 41\n    # if n is divisible by 41, then the divisor is 41\n    elif n % 43 == 0:\n        return 43\n    # if n is divisible by 43, then the divisor is"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "import math\nimport time\n\n\ndef find_max(num):\n    max_num = 0\n    for i in range(num):\n        if i == num:\n            break\n        while num % i == 0:\n            num //= i\n            if max_num < i:\n                max_num = i\n    return max_num\n\n\ndef main():\n    start_time = time.time()\n    print find_max(0)\n    print time.time() - start_time\n    print find_max(1)\n    print time.time() - start_time\n    print find_max(2)\n    print time.time() - start_time\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "import math\n\ndef find_divisor(start, end):\n    '''\n    Find the maximum occuring divisor in an interval.\n    '''\n    for i in range(start, end):\n        if math.gcd(i, end) == 1:\n            return i\n    return end\n\ndef main():\n    start = 1\n    end = 100\n    print(find_divisor(start, end))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\nif len(sys.argv)!= 2:\n    print(\"Usage: python %s <n>\" % sys.argv[0])\n    sys.exit(1)\n\nn = int(sys.argv[1])\n\nfor i in range(2, n + 1):\n    divisors = 1\n    for j in range(2, i + 1):\n        if i % j == 0:\n            divisors = divisors + 1\n    if divisors > n:\n        n = divisors\n\nprint(n)"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "def max_divisor(a, b):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    >>> max_divisor(10, 5)\n    5\n    >>> max_divisor(10, 6)\n    6\n    >>> max_divisor(10, 7)\n    1\n    >>> max_divisor(10, 8)\n    2\n    >>> max_divisor(10, 9)\n    3\n    >>> max_divisor(10, 10)\n    1\n    >>> max_divisor(10, 11)\n    2\n    >>> max_divisor(10, 12)\n    2\n    \"\"\"\n    return max([a//d for d in xrange(a, b+1) if a%d==0])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_max_divisor(x):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    Args:\n        x: integer\n\n    Returns:\n        the maximum occuring divisor in an interval\n    \"\"\"\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return max(find_max_divisor(x // 2), find_max_divisor(x - 1))\n\n\nif __name__ == '__main__':\n    print(find_max_divisor(2))\n    print(find_max_divisor(3))\n    print(find_max_divisor(4))\n    print(find_max_divisor(8))\n    print(find_max_divisor(9))\n    print(find_max_divisor(10))\n    print(find_max_divisor(12))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_max_divisor(start, end):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    :param start: The start of the interval.\n    :param end: The end of the interval.\n    :return: The maximum occuring divisor in an interval.\n    \"\"\"\n    divisor = 1\n    while start < end:\n        if start % divisor == 0:\n            return divisor\n        divisor += 1\n    return divisor\n\n\ndef test_find_max_divisor():\n    assert find_max_divisor(1, 2) == 1\n    assert find_max_divisor(2, 4) == 2\n    assert find_max_divisor(3, 4) == 2\n    assert find_max_divisor(5, 6) == 2\n    assert find_max_divisor(5, 7) == 3\n    assert find_max_divisor(5, 8) == 4\n\n\nif __name__ == '__main__':\n    test_find_max_divisor()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "#%%\nimport numpy as np\n\ndef find_max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    Parameters\n    ----------\n    n : int\n        The interval number to be searched.\n\n    Returns\n    -------\n    divisor : int\n        The maximum occuring divisor in an interval.\n\n    Examples\n    --------\n    >>> find_max_divisor(10)\n    2\n    >>> find_max_divisor(100)\n    4\n    >>> find_max_divisor(1000)\n    8\n    >>> find_max_divisor(10000)\n    16\n    \"\"\"\n    return np.ceil(np.divide(n, np.ceil(n)))\n\n#%%\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "import math\n\n\ndef find_max_divisor(interval):\n    \"\"\"\n    Given a interval, find the maximum divisor.\n\n    :type interval: list[int]\n    :rtype: int\n    \"\"\"\n    maximum = 0\n    for value in interval:\n        if value % maximum:\n            maximum = value % maximum\n    return maximum\n\n\ndef main():\n    \"\"\"\n    Write a function to find the maximum occuring divisor in an interval.\n\n    :rtype: int\n    \"\"\"\n    interval = [1, 2, 3, 4, 5]\n    print(find_max_divisor(interval))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# The function should return a tuple containing the maximum divisor and its\n# multiplicity.\n#\n# The interval is [lower, upper], where lower is the lower bound and upper is\n# the upper bound.\n#\n# The function accepts the lower bound as an integer and the upper bound as a\n# float.\n#\n# Example 1:\n# Input: [1,2], lower=1, upper=2\n# Output: (2,2)\n# Example 2:\n# Input: [2,4], lower=1, upper=3\n# Output: (2,3)\n# Example 3:\n# Input: [3,5], lower=1, upper=4\n# Output: (3,2)\n# Example 4:\n# Input: [1,3], lower=1, upper=3\n# Output: (1,1)\n# Example 5:\n# Input: [2,6], lower=1, upper=2\n# Output: (2,1)\n#\n# Note:\n# The interval is in the form of lower <= x <= upper.\n# lower and upper are non-negative integers.\n# x is an integer in the range [lower, upper].\n# The answer is guaranteed to be unique.\n\n\ndef find_max_divisor(lower, upper):\n    if lower == upper:\n        return (lower, 1)\n    divisors = []\n    for i in range(lower, upper + 1):\n        if upper % i == 0:\n            divisors.append((i, upper // i))\n    divisors.sort(key=lambda x: x[1], reverse=True)\n    return divisors[0]\n\n\nif __name__ == '__main__':\n    lower = int(input())\n    upper = int(input())\n    print(find_max_divisor(lower, upper))"
    }
  ]
}