{
  "timestamp": "2025-09-14T17:39:10.127649",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 39,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution:\n    def minLength(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n\n        l = []\n        curr = head\n        while curr:\n            l.append(curr)\n            curr = curr.next\n\n        length = len(l)\n        if length == 1:\n            return length\n\n        min_len = 0\n        for i in range(length):\n            curr = l[i]\n            curr_len = 1\n            while curr.next and curr.next.next:\n                curr_len += 1\n                curr = curr.next\n            min_len = max(min_len, curr_len)\n        return min_len"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def min_list_length(my_list):\n    \"\"\"\n    >>> min_list_length([1, 2, 3, 4, 5, 6, 7])\n    3\n    >>> min_list_length([1, 2, 3, 4, 5, 6, 7, 8])\n    4\n    \"\"\"\n    return min(my_list, key=lambda x: len(x))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# TODO:\n# 1. lambda function\n# 2. while loop\n# 3. use min(list)\n# 4. use binary search\n\n# lambda function\n# 1. lambda function\n# 2. lambda function\n# 3. lambda function\n# 4. lambda function\n# 5. lambda function\n# 6. lambda function\n# 7. lambda function\n# 8. lambda function\n# 9. lambda function\n# 10. lambda function\n# 11. lambda function\n# 12. lambda function\n# 13. lambda function\n# 14. lambda function\n# 15. lambda function\n# 16. lambda function\n# 17. lambda function\n# 18. lambda function\n# 19. lambda function\n# 20. lambda function\n# 21. lambda function\n# 22. lambda function\n# 23. lambda function\n# 24. lambda function\n# 25. lambda function\n# 26. lambda function\n# 27. lambda function\n# 28. lambda function\n# 29. lambda function\n# 30. lambda function\n# 31. lambda function\n# 32. lambda function\n# 33. lambda function\n# 34. lambda function\n# 35. lambda function\n# 36. lambda function\n# 37. lambda function\n# 38. lambda function\n# 39. lambda function\n# 40. lambda function\n# 41. lambda function\n# 42. lambda function\n# 43. lambda function\n# 44. lambda function\n# 45. lambda function\n# 46. lambda function\n# 47. lambda function\n# 48. lambda function\n# 49. lambda function\n# 50. lambda function\n# 51. lambda function\n# 52. lambda function\n# 53. lambda function\n# 54. lambda function\n# 55. lambda function\n# 56. lambda function\n# 57. lambda function\n# 58. lambda function\n# 59. lambda function\n# 60. lambda function\n# 61. lambda function\n# 62. lambda function\n# 63. lambda function\n# 64. lambda function\n# 65. lambda function\n# 66. lambda function\n# 67. lambda function\n# 68. lambda function\n# 69. lambda function\n# 70. lambda function\n# 71. lambda function\n# 72. lambda function\n# 73. lambda function\n# 74. lambda function\n# 75. lambda function\n# 76. lambda function\n# 77. lambda function\n# 78. lambda function\n# 79. lambda function"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def min_length(items):\n    \"\"\"\n    >>> min_length([1,2,3,4,5,6])\n    3\n    >>> min_length([1,2,3,4,5])\n    2\n    >>> min_length([])\n    0\n    \"\"\"\n    def f(x):\n        return len(x)\n    return min(map(f, items))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def min_list(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: list of integers\n    \"\"\"\n\n    # TODO: write the code\n    return lst\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def min_length(a_list):\n    return min([lambda x: len(x) for x in a_list])\n\nprint(min_length([1, 2, 3]))\nprint(min_length([1, 2, 3, 4]))\nprint(min_length([1, 2, 3, 4, 5]))\nprint(min_length([1, 2, 3, 4, 5, 6]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import time\n\ndef find_min_list(lst):\n    \"\"\"\n    :param lst: A list\n    :return: The minimum length list\n    \"\"\"\n\n    def min_list_len(lst):\n        \"\"\"\n        :param lst: A list\n        :return: The minimum length list\n        \"\"\"\n        if len(lst) == 0:\n            return 0\n        else:\n            return min(min_list_len(item) for item in lst)\n\n    return min_list_len(lst)\n\ndef test():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print find_min_list(lst)\n\nif __name__ == '__main__':\n    t = time.time()\n    test()\n    print \"--- %s seconds ---\" % (time.time() - t)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def min_length(lst):\n    return min(lst, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3]\n    print(min_length(lst))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def min_length_list(items, min_length):\n    return [i for i in items if len(i) == min_length]\n\n\nif __name__ == '__main__':\n    items = [1, 2, 3, 4, 5, 6]\n    min_length = lambda x: len(x)\n    print min_length_list(items, min_length)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef min_length_list(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    min_length = len(list_of_strings) + 1\n    for string in list_of_strings:\n        min_length = min(len(string), min_length)\n    return min_length\n\ndef min_length_list_2(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(len(string) for string in list_of_strings)\n\ndef min_length_list_3(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(len(string) for string in list_of_strings if len(string) > 0)\n\ndef min_length_list_4(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(len(string) for string in list_of_strings if len(string) > 0) if len(list_of_strings) > 0 else 0\n\ndef min_length_list_5(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(len(string) for string in list_of_strings if len(string) > 0) if len(list_of_strings) > 0 else 0\n\ndef min_length_list_6(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(len(string) for string in list_of_strings if len(string) > 0) if len(list_of_strings) > 0 else 0\n\ndef min_length_list_7(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :r"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for a point\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass Solution(object):\n    def minPoints(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        min_x = points[0].x\n        min_y = points[0].y\n        min_i = 0\n\n        for i in range(1, len(points)):\n            if points[i].x < min_x:\n                min_x = points[i].x\n                min_i = i\n            if points[i].y < min_y:\n                min_y = points[i].y\n                min_i = i\n\n        return min_i + 1\n\n\nif __name__ == '__main__':\n    points = [Point(x, y) for x, y in [(-1, -1), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56),"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def min_length(arr, lambda_func):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    length = 0\n    min_length = 0\n    for i in range(0, len(arr)):\n        if i == 0:\n            if lambda_func(arr[i]):\n                length += 1\n            else:\n                length += 1\n        elif lambda_func(arr[i]):\n            length += 1\n        else:\n            length += 1\n    min_length = length\n    return min_length\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3]\n    arr = [1, 2, 3, 4, 5, 6]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    arr = ["
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import functools\nimport itertools\n\ndef find_min_list(iterable):\n    \"\"\"\n    Given an iterable, returns the list with minimum length using lambda\n    function.\n    \"\"\"\n    it = iter(iterable)\n    return list(itertools.chain.from_iterable(\n        [itertools.repeat(x) for x in it]\n    ))\n\nif __name__ == \"__main__\":\n    assert find_min_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert find_min_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    assert find_min_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def min_list(lst):\n    # Write your code here\n    return min(lst)\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    print(min_list(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(min_list(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(min_list(lst))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# https://www.geeksforgeeks.org/write-lambda-function-find-minimum-length-list/\n\ndef findMinLengthList(arr):\n    min_length = 0\n    for i in range(len(arr)):\n        if len(arr[i]) < min_length:\n            min_length = len(arr[i])\n    return min_length\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprint(findMinLengthList(arr))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def find_min_list(lst):\n    \"\"\"\n    Find the list with minimum length using lambda function.\n    :param lst:\n    :return:\n    \"\"\"\n    return min(lst, key=lambda x: len(x))\n\n\ndef find_min_list_2(lst):\n    \"\"\"\n    Find the list with minimum length using lambda function.\n    :param lst:\n    :return:\n    \"\"\"\n    return min(lst, key=lambda x: len(x), reverse=True)\n\n\ndef find_min_list_3(lst):\n    \"\"\"\n    Find the list with minimum length using lambda function.\n    :param lst:\n    :return:\n    \"\"\"\n    return min(lst, key=len)\n\n\ndef find_min_list_4(lst):\n    \"\"\"\n    Find the list with minimum length using lambda function.\n    :param lst:\n    :return:\n    \"\"\"\n    return min(lst, key=lambda x: len(x), reverse=True)\n\n\ndef find_min_list_5(lst):\n    \"\"\"\n    Find the list with minimum length using lambda function.\n    :param lst:\n    :return:\n    \"\"\"\n    return min(lst, key=lambda x: len(x), reverse=True)\n\n\ndef find_min_list_6(lst):\n    \"\"\"\n    Find the list with minimum length using lambda function.\n    :param lst:\n    :return:\n    \"\"\"\n    return min(lst, key=len)\n\n\ndef find_min_list_7(lst):\n    \"\"\"\n    Find the list with minimum length using lambda function.\n    :param lst:\n    :return:\n    \"\"\"\n    return min(lst, key=len, reverse=True)\n\n\ndef find_min_list_8(lst):\n    \"\"\"\n    Find the list with minimum length using lambda function.\n    :param lst:\n    :return:\n    \"\"\"\n    return min(lst, key=len, reverse=True)\n\n\ndef find_min_list_9(lst):\n    \"\"\"\n    Find the list with minimum length using lambda"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# Function to find minimum length of the list\ndef find_min_length(list):\n    # Create a list of minimum length\n    min_length = len(list)\n    # Loop through the list and find the minimum length\n    for i in range(0, len(list)):\n        # If the length of the list is less than the current minimum length\n        # Set the current minimum length\n        if(len(list) - i < min_length):\n            min_length = len(list) - i\n    # Return the minimum length\n    return min_length\n\n# Test the function\nprint(find_min_length(list_of_numbers))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from collections import namedtuple\n\ndef min_length_lambda(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    return min(arr, key=lambda x: len(x))\n\n\ndef min_length_lambda_recur(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return min(arr, key=lambda x: len(x))\n\n\ndef min_length_recur(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return min(arr)\n\n\ndef min_length_recur_2(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return min(arr)\n\n\ndef min_length_recur_3(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return min(arr)\n\n\ndef min_length_recur_4(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return min(arr)\n\n\ndef min_length_recur_5(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return min(arr)\n\n\ndef min_length_recur_6(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return min(arr)\n\n\ndef min_length_recur_7(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def findMinDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        def rec(root):\n            if root is None:\n                return 0\n            if root.left is None and root.right is None:\n                return 1\n            if root.left is None:\n                return rec(root.right) + 1\n            if root.right is None:\n                return rec(root.left) + 1\n            return min(rec(root.left), rec(root.right)) + 1\n        return rec(root)\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\nroot.left.right.left = TreeNode(6)\nroot.right.right = TreeNode(7)\nroot.right.right.left = TreeNode(8)\nroot.right.right.left.left = TreeNode(9)\nroot.right.right.left.left.left = TreeNode(10)\n\nprint(Solution().findMinDepth(root))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def find_min_length_list(lst, min_length):\n    return min(lst, key=lambda x: len(x))\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print find_min_length_list(lst, 5)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from functools import reduce\n\ndef min_length_lambda(list_of_numbers):\n    return min(list_of_numbers)\n\ndef print_min_length(list_of_numbers):\n    min_length = min_length_lambda(list_of_numbers)\n    print(min_length)\n\nif __name__ == '__main__':\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def find_min_length_list(list_to_find_min_length):\n    return min(list_to_find_min_length)\n\nif __name__ == '__main__':\n    list_to_find_min_length = [1, 2, 3, 4, 5, 6]\n\n    print(find_min_length_list(list_to_find_min_length))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\n\ndef min_list(list_to_find_min_length):\n    \"\"\"\n    Find the list with minimum length using lambda function.\n\n    Input:\n        list_to_find_min_length: A list of integers\n\n    Output:\n        A list of integers\n    \"\"\"\n    min_length = 0\n    for i in list_to_find_min_length:\n        min_length = min(min_length, i)\n\n    return list(map(lambda x: x - min_length, list_to_find_min_length))\n\n\ndef main():\n    print(min_list([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n    print(min_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(min_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(min_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(min_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(min_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/lambda-function-minimum-length-of-a-list\n\ndef min_len(lst):\n    min_len = 0\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n\n\ndef main():\n    # read the input\n    n = int(input())\n    lst = []\n    for i in range(n):\n        lst.append(input())\n\n    # write the output\n    print(min_len(lst))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def find_min_list(list_to_find):\n    \"\"\"\n    Input:\n        list_to_find: List to find minimum length\n    Output:\n        Returns the list with minimum length\n    \"\"\"\n    return list_to_find[0] + list_to_find[1] + list_to_find[2]\n\n\nif __name__ == \"__main__\":\n    test_case = [\n        [3, 4, 5],\n        [1, 2, 3],\n        [2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def min_length(l):\n    return min(l)\n\ndef test_min_length():\n    assert min_length([1, 2, 3, 4, 5]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n\nif __name__ == '__main__':\n    test_min_length()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def find_minimum_list_length_lambda(my_list):\n    my_list = sorted(my_list)\n    return min(len(my_list), lambda x,y: x-y)\n\n#print find_minimum_list_length_lambda([1,2,3,4,5])\n\n#print find_minimum_list_length_lambda([2,3,4,5,6,7,8,9,10])\n\n#print find_minimum_list_length_lambda([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\n#print find_minimum_list_length_lambda([])\n\n#print find_minimum_list_length_lambda([-1,-2,-3,-4,-5])\n\n#print find_minimum_list_length_lambda([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\n#print find_minimum_list_length_lambda([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\n#print find_minimum_list_length_lambda([-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\n#print find_minimum_list_length_lambda([-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\n#print find_minimum_list_length_lambda([-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\n#print find_minimum_list_length_lambda([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\n#print find_minimum_list_length_lambda([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def find_min_list(list_of_numbers):\n    \"\"\"\n    Find the minimum length list using lambda function.\n\n    :param list_of_numbers:\n    :return:\n    \"\"\"\n    return min(list_of_numbers, key=lambda x: len(x))\n\n\n# Testing\nif __name__ == '__main__':\n    # Sample Input\n    list_of_numbers = [1, 2, 3]\n    # Sample Output\n    print find_min_list(list_of_numbers)"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/minimum-height-trees/\n\nclass Solution(object):\n    def findMinHeightTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        trees = [[] for _ in xrange(n)]\n        def dfs(i, j):\n            if i == j:\n                return 1\n            if j - i == 1:\n                trees[i].append(j)\n                return 1\n            if i == j - 1:\n                trees[i].append(j)\n                return 1\n            return min(dfs(i, j - 1), dfs(i + 1, j - 1)) + 1\n        for i in xrange(n):\n            for j in xrange(i + 1, n):\n                if dfs(i, j) < dfs(j, i):\n                    trees[i].append(j)\n                    trees[j].append(i)\n        return trees\n\na = Solution()\n\nprint a.findMinHeightTrees(5)"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def min_list(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return min(nums, key=lambda x: (lambda y: (lambda z: y+z(x)))(lambda z: z)(lambda x: x))\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(min_list(nums))"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "import time\n\n\ndef find_min(lst):\n    \"\"\"\n    :param lst:\n    :return:\n    \"\"\"\n    return min(lst, key=lambda x: len(x))\n\n\nstart_time = time.time()\n\nprint(find_min(range(10, 100)))\nprint('Time: %f' % (time.time() - start_time))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\ndef min_length_list(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: List[int]\n    \"\"\"\n    min_len = 0\n    for x in list_:\n        if len(list_) - min_len < 0:\n            min_len = len(list_)\n        elif len(list_) - min_len == 0:\n            min_len = len(list_)\n        else:\n            min_len = len(list_) - 1\n    return min_len\n\n\ndef test_min_length_list():\n    assert min_length_list([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert min_length_list([1, 2, 3, 4, 5, 6]) == 2\n    assert min_length_list([1, 2, 3, 4, 5]) == 1\n    assert min_length_list([]) == 0\n    assert min_length_list(range(10)) == 0\n    assert min_length_list([1, 2, 3, 4, 5, 6, 7]) == 5\n\ndef test_min_length_list_lambda():\n    assert min_length_list([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert min_length_list([1, 2, 3, 4, 5, 6]) == 2\n    assert min_length_list([1, 2, 3, 4, 5]) == 1\n    assert min_length_list([]) == 0\n    assert min_length_list(range(10)) == 0\n    assert min_length_list([1, 2, 3, 4, 5, 6, 7]) == 5\n\nif __name__ == \"__main__\":\n    test_min_length_list()\n    test_min_length_list_lambda()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "import math\n\n\ndef min_list(lst):\n    return min(lst, key=lambda x: len(x))\n\n\ndef min_list_lambda(lst):\n    return min(lst, key=lambda x: len(x), reverse=True)\n\n\ndef min_list_function(lst):\n    return min(lst, key=len, reverse=True)\n\n\ndef main():\n    print(min_list([1, 2, 3, 4, 5]))\n    print(min_list_lambda([1, 2, 3, 4, 5]))\n    print(min_list_function([1, 2, 3, 4, 5]))\n    print(min_list([1, 2, 3, 4, 5, 6]))\n    print(min_list([1, 2, 3, 4, 5, 6, 7]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import math\n\ndef min_length(list):\n    return min(map(lambda x: len(x), list))\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [[\"aa\", \"bb\", \"cc\", \"dd\"], 1],\n        [[\"aa\", \"bb\", \"cc\", \"dd\"], 3],\n        [[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"], 3],\n        [[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"], 2],\n        [[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"], 3],\n        [[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"], 2],\n    ]\n    for test_case in test_cases:\n        print(\"Test case #{}: {}\".format(test_case[0], min_length(test_case[1])))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def find_min(seq):\n    \"\"\"\n    Return the minimum value of the given list.\n    >>> find_min([1, 2, 3, 4, 5])\n    1\n    >>> find_min([5, 3, 1, 2, 4])\n    1\n    >>> find_min([])\n    Traceback (most recent call last):\n       ...\n    ValueError: input is empty\n    >>> find_min([3, 1, 2, 4, 5])\n    Traceback (most recent call last):\n       ...\n    ValueError: input is not a list\n    \"\"\"\n    if not seq:\n        raise ValueError(\"input is empty\")\n\n    if not seq:\n        return 0\n\n    min_value = min(seq)\n    min_index = 0\n\n    for index, value in enumerate(seq):\n        if value < min_value:\n            min_value = value\n            min_index = index\n\n    return min_index\n\n\ndef find_min_lambda(seq):\n    \"\"\"\n    Return the minimum value of the given list using lambda function.\n    >>> find_min_lambda([1, 2, 3, 4, 5])\n    1\n    >>> find_min_lambda([5, 3, 1, 2, 4])\n    1\n    >>> find_min_lambda([])\n    Traceback (most recent call last):\n       ...\n    ValueError: input is empty\n    >>> find_min_lambda([3, 1, 2, 4, 5])\n    Traceback (most recent call last):\n       ...\n    ValueError: input is not a list\n    \"\"\"\n    if not seq:\n        raise ValueError(\"input is empty\")\n\n    if not seq:\n        return 0\n\n    min_value = min(seq)\n    min_index = 0\n\n    for index, value in enumerate(seq):\n        if value < min_value:\n            min_value = value\n            min_index = index\n\n    return lambda x: x[min_index]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef find_min_list(nums):\n    return reduce(lambda x, y: x if x < y else y, nums, nums)\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print(find_min_list(nums))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_min_lambda(my_list):\n    min_val = lambda x: x[0]\n    min_index = 0\n    for i in range(len(my_list)):\n        if min_val(my_list[i:]) < min_val(my_list[min_index:]):\n            min_index = i\n    return my_list[min_index:]\n\ndef main():\n    my_list = [1, 2, 3, 4]\n    min_list = find_min_lambda(my_list)\n    print(min_list)\n    return 0\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def find_min_list_lambda(my_list):\n    \"\"\"\n    lambda function returns a list with minimum length.\n    \"\"\"\n    return min([len(list(my_list))] + [len(list(my_list)) for my_list in my_list])\n\n\ndef find_min_list_lambda2(my_list):\n    \"\"\"\n    lambda function returns a list with minimum length.\n    \"\"\"\n    return min([len(my_list)] + [len(my_list) for my_list in my_list])\n\n\ndef find_min_list_lambda3(my_list):\n    \"\"\"\n    lambda function returns a list with minimum length.\n    \"\"\"\n    return min([len(my_list)] + [len(my_list) for my_list in my_list if my_list])\n\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 4, 5]\n    print(find_min_list_lambda(my_list))\n    print(find_min_list_lambda2(my_list))\n    print(find_min_list_lambda3(my_list))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_min(arr, lambda_func):\n    \"\"\"\n    :type arr: List[int]\n    :type lambda_func: function\n    :rtype: int\n    \"\"\"\n    return min(arr, key=lambda_func)\n\n\n# Your find_min function should return the minimum length of the list."
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def min_length_list(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    return min(arr, key=lambda x: len(str(x)))\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(min_length_list(arr))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "# Lambda function for comparing two lists\ndef find_min(l1, l2):\n    # If the length of list 1 is less than the length of list 2, return the first list\n    if len(l1) < len(l2):\n        return l1\n    elif len(l1) == len(l2):\n        # If the length of list 1 is equal to the length of list 2, return the list which is having the minimum value\n        return l1[0] if l1[0] < l2[0] else l2[0]\n    else:\n        # If the length of list 1 is greater than the length of list 2, return the first list\n        return l1\n\n# List 1\nlist1 = [1, 3, 5, 7]\n\n# List 2\nlist2 = [2, 4, 6, 8]\n\n# List 1\nprint(\"List 1:\")\nfor i in list1:\n    print(i)\n\n# List 2\nprint(\"List 2:\")\nfor i in list2:\n    print(i)\n\n# Find minimum value of list 1\nprint(\"Minimum value of list 1: \" + str(find_min(list1, list2)))\n\n# Find minimum value of list 2\nprint(\"Minimum value of list 2: \" + str(find_min(list2, list1)))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_minimum_length_list(list_to_check):\n    return lambda x: x[0] if x[0] < x[1] else x[1]\n\n\nprint(find_minimum_length_list([1, 2, 3, 4, 5]))\nprint(find_minimum_length_list([1, 2, 3, 4]))\nprint(find_minimum_length_list([1, 2]))\nprint(find_minimum_length_list([1]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef find_min_list(list_):\n    \"\"\"\n    Args:\n        list_: A list of integers\n    Returns:\n        A list of integers\n    \"\"\"\n    return reduce(lambda x, y: x if x[0] < y[0] else y, list_)\n\n\nif __name__ == '__main__':\n    assert find_min_list([1, 3, 2, 4, 5]) == [1, 2, 3, 4]\n    assert find_min_list([1, 3, 4, 5, 6]) == [1, 3, 4, 5]\n    assert find_min_list([1, 3, 5, 6, 7]) == [1, 3, 5, 6]\n    assert find_min_list([1, 3, 5, 7, 9]) == [1, 3, 5, 7]"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/lambda-function-solutions\n\ndef min_length(nums):\n    return min(map(lambda x: len(str(x)), nums))\n\n# print min_length([1, 2, 3, 4, 5])\n# print min_length([1, 2, 3, 4, 5, 6])\n# print min_length([1, 2, 3, 4, 5, 6, 7])"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef find_min_list(list_to_min):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n\n    Example:\n    Input: [3,1,2,1,3]\n    Output: [1,1,3]\n    \"\"\"\n    return min(list_to_min, key=lambda x: x.__len__())\n\n\ndef find_min_list_lambda(list_to_min):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n\n    Example:\n    Input: [3,1,2,1,3]\n    Output: [1,1,3]\n    \"\"\"\n    return reduce(lambda x, y: x if x.__len__() > y.__len__() else y, list_to_min)\n\n\nif __name__ == '__main__':\n    assert find_min_list([3,1,2,1,3]) == 1\n    assert find_min_list_lambda([3,1,2,1,3]) == 1\n    assert find_min_list([3,1,2,1,3]) == [3,1,3]\n    assert find_min_list_lambda([3,1,2,1,3]) == [3,1,3]"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# Define a function\ndef min_list(list):\n    return min(list, key=lambda x: x.length)\n\n# Test\nlist = [1, 2, 3, 4, 5, 6]\nprint(min_list(list))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef min_len_lambda(xs, ys):\n    return min(len(xs), len(ys), key=lambda x: xs.count(x))\n\nxs = [1, 2, 3, 4, 5]\nys = [1, 2, 3, 4, 5]\nprint(min_len_lambda(xs, ys))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nfrom functools import reduce\n\ndef find_min_list(lst):\n    return reduce(lambda x, y: x if x < y else y, lst)\n\ndef main():\n    print(find_min_list([1, 2, 3]))\n    print(find_min_list([1, 2, 3, 4, 5, 6]))\n    print(find_min_list([1, 2, 3, 4, 5, 6, 7]))\n    print(find_min_list([1, 2, 3, 4, 5, 6, 7, 8]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef find_min_length(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(map(len, list_of_strings))\n\ndef find_min_length_lambda(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(map(lambda s: len(s), list_of_strings))\n\ndef find_min_length_lambda_2(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(map(lambda s: (s, len(s)), list_of_strings))\n\ndef find_min_length_lambda_3(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(map(lambda (s, l): (l, s), list_of_strings))\n\ndef find_min_length_lambda_4(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(map(lambda (s, l): (l, (s, l)), list_of_strings))\n\ndef find_min_length_lambda_5(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(map(lambda (s, l): (l, (s, l)), list_of_strings))\n\ndef find_min_length_lambda_6(list_of_strings):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :rtype: int\n    \"\"\"\n    return min(map(lambda (s, l): (l, (s, l)), list_of_strings))\n\ndef find_min_length_lambda_7(list_of_strings):\n    \"\"\"\n    :type"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def find_min_length_list(list_):\n    return min(list_)\n\n# Test Cases\nlist_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(find_min_length_list(list_))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def find_min_list(L):\n    # write your code here\n    return min(L, key=lambda x: len(x))\n\ndef test_find_min_list():\n    assert find_min_list([1,2,3,4,5,6,7,8]) == 4\n\nif __name__ == \"__main__\":\n    test_find_min_list()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def min_list(l):\n    return min(l)\n\ndef min_list_lambda(l):\n    return min(l, key=lambda x: x)\n\n\ndef main():\n    # Test cases\n    assert min_list([1, 2, 3]) == 1\n    assert min_list_lambda([1, 2, 3]) == 1\n    assert min_list([1, 2, 3, 4, 5]) == 3\n    assert min_list_lambda([1, 2, 3, 4, 5]) == 3\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_min_length_list(list_of_lists):\n    \"\"\"\n    Args:\n        list_of_lists: List of lists.\n\n    Returns:\n        List with minimum length.\n    \"\"\"\n    list_lengths = [len(list_of_lists[i]) for i in range(len(list_of_lists))]\n\n    def min_length(l):\n        return l[0] if l[0] < l[1] else l[1]\n\n    min_length_list = [min_length(l) for l in list_lengths]\n    return min_length_list"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_minimum_length_list(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return min(list_of_numbers)\n\nif __name__ == \"__main__\":\n    assert find_minimum_length_list([1, 2, 3, 4, 5]) == 2, \"Wrong output\"\n    assert find_minimum_length_list([1, 2, 3, 4, 5, 6, 7, 8]) == 4, \"Wrong output\"\n    assert find_minimum_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5, \"Wrong output\"\n    assert find_minimum_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6, \"Wrong output\"\n    assert find_minimum_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 7, \"Wrong output\"\n    assert find_minimum_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 8, \"Wrong output\"\n    assert find_minimum_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 9, \"Wrong output\""
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "# https://www.reddit.com/r/dailyprogrammer/comments/3n7hgq/20170315_challenge_542_easy_lambda_function/\n\ndef min_len(lst):\n    min_len = lambda x: len(x)\n    return min(lst, key=min_len)\n\ndef main():\n    print(min_len([1, 2, 3]))\n    print(min_len([1, 2, 3, 4]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_minimum_list(list_):\n    min_list = list_\n    for i in range(len(list_)):\n        min_list = min_list[:i] + [min(list_[i])] + min_list[i+1:]\n\n    return min_list\n\n\nlist_ = [1,2,3]\nprint find_minimum_list(list_)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef find_min_list(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: int\n    \"\"\"\n    min_value = reduce(lambda x, y: x if x < y else y, list_of_numbers)\n    return min_value\n\n\nif __name__ == '__main__':\n    print(find_min_list([1, 2, 3, 4, 5]))\n    print(find_min_list([1, 2, 3, 4, 5, 6]))\n    print(find_min_list([1, 2, 3, 4, 5, 6, 7]))\n    print(find_min_list([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(find_min_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import functools\n\n\ndef min_length(s, min_length=0):\n    \"\"\"\n    :type s: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n\n    if min_length == 0:\n        return len(s)\n\n    min_length = functools.reduce(min, map(lambda x: min_length(x, min_length-1), s), min_length)\n\n    return min_length\n\n\nif __name__ == '__main__':\n    assert min_length([1, 2, 3, 4, 5]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 4\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 4\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 4"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def min_length(lst):\n    \"\"\"\n    :param lst:\n    :return:\n    \"\"\"\n    # Use lambda function to find the minimum length\n    return min(map(lambda x: len(x), lst))\n\ndef test():\n    assert min_length([]) == 0\n    assert min_length([1]) == 1\n    assert min_length([1, 2]) == 1\n    assert min_length([1, 2, 3, 4]) == 3\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/lambda/problem\ndef min_length(seq):\n    \"\"\"\n    >>> min_length([1,2,3])\n    2\n    >>> min_length([])\n    0\n    >>> min_length([1])\n    1\n    >>> min_length([1,2,3,4,5])\n    3\n    \"\"\"\n    return min(map(lambda x: len(x), seq))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def find_min_length_list(num_list):\n    # write your code here\n    # return the list with minimum length\n    return min(num_list)\n\nif __name__ == '__main__':\n    print(find_min_length_list([1, 2, 3, 4, 5]))\n    print(find_min_length_list([1, 2, 3]))\n    print(find_min_length_list([1, 2]))\n    print(find_min_length_list([1]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/minimum-length-of-a-list/problem\n\ndef min_length(lst):\n    return min(lst)\n\ndef main():\n    n = int(input().strip())\n    lst = list(map(int, input().strip().split()))\n    print(min_length(lst))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/minimum-length-of-subsequence/\n\n# @param {string} S\n# @return {string[]}\ndef min_len_subseq(S):\n    def min_len(s):\n        return len(s) if len(s) < min_len(s[1:]) else min_len(s[1:]) + 1\n\n    return [S[0]] + [s[0] for s in S[1:]]\n\nif __name__ == \"__main__\":\n    print(min_len_subseq(\"abcde\"))\n    print(min_len_subseq(\"abcd\"))\n    print(min_len_subseq(\"a\"))\n    print(min_len_subseq(\"abcdeabcdeabcde\"))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def min_list(seq, lambda_func=lambda x: x):\n    \"\"\"\n    :type seq: List[int]\n    :rtype: List[int]\n    \"\"\"\n    min_len = len(seq)\n    min_val = seq[0]\n    for val in seq[1:]:\n        if lambda_func(val) < lambda_func(min_val):\n            min_len = len(seq)\n            min_val = val\n\n    return min_val, min_len\n\n\nif __name__ == \"__main__\":\n    seq = [2,3,4,5,6,7,8,9,10]\n    min_val, min_len = min_list(seq)\n    print(min_val, min_len)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def min_length_list(list_to_check):\n    \"\"\"\n    :type list_to_check: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return min(list_to_check, key=lambda x: len(list(filter(lambda x: x>=x, list_to_check))))\n\n\nif __name__ == '__main__':\n    print(min_length_list([3, 1, 5, 2, 4, 3]))\n    print(min_length_list([3, 1, 5, 2, 4, 3, 5, 6, 7, 8]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def min_length_list(list_of_ints):\n    \"\"\"\n    Input: list_of_ints - list of integers.\n    Output: Minimum length of the list.\n    \"\"\"\n    min_length = len(list_of_ints)\n    for i in range(len(list_of_ints)):\n        if i + 1 < len(list_of_ints):\n            if list_of_ints[i] + list_of_ints[i + 1] < min_length:\n                min_length = list_of_ints[i] + list_of_ints[i + 1]\n    return min_length\n\ndef main():\n    list_of_ints = [1, 2, 3, 4]\n    print(min_length_list(list_of_ints))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef min_length_list(list_of_lists):\n    \"\"\"\n    Find the minimum length of the list using lambda function.\n\n    Input: List of lists.\n    Output: Minimum length of the list.\n    \"\"\"\n    min_len = 0\n    for l in list_of_lists:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len\n\n\ndef main():\n    list_of_lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9]]\n    print(min_length_list(list_of_lists))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def find_min_list(nums, min_list):\n    for i in range(len(nums)):\n        if i > 0:\n            if nums[i] < nums[i-1]:\n                min_list.append(nums[i])\n    return min_list\n\n#Test\nmin_list = []\nnums = [3, -2, 1, -3]\nprint(find_min_list(nums, min_list))\nnums = [1, 1, 1, 1, 1, 1]\nprint(find_min_list(nums, min_list))\nnums = [1, 1, 1, 1, 1, 1, 1]\nprint(find_min_list(nums, min_list))\nnums = [1, 1, 1, 1, 1, 1, 1, 1]\nprint(find_min_list(nums, min_list))\nnums = [1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(find_min_list(nums, min_list))\nnums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(find_min_list(nums, min_list))\nnums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(find_min_list(nums, min_list))\nnums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(find_min_list(nums, min_list))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def min_list(l):\n    \"\"\"\n    >>> min_list([1,2,3,4,5])\n    [1, 2]\n    \"\"\"\n    return sorted(l, key=lambda x: x)[:len(l)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "# import the necessary packages\nfrom functools import reduce\n\n\ndef min_list(arr):\n    # YOUR CODE HERE\n    return reduce(lambda x, y: x if x < y else y, arr)"
    },
    {
      "rank": 71,
      "score": 2.0,
      "candidate": "import unittest\n\nclass Solution:\n    def minLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def min_len(l, r):\n            if l == r:\n                return l\n            if l == r - 1:\n                return l\n            return min(min_len(l, r - 1), min_len(l + 1, r))\n        return min_len(0, len(nums))\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/minimum-length-of-subarray-sum-equals-k/solution/\n\n# 1ms 100%\nclass Solution {\n    public int minLength(int[] nums) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.length; i++) {\n            int sum = 0;\n            for (int j = i; j < nums.length; j++) {\n                sum += nums[j];\n                if (sum == nums[i] && min > j - i) {\n                    min = j - i;\n                }\n            }\n        }\n        return min == Integer.MAX_VALUE? nums.length : min;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int minLength(int[] nums) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.length; i++) {\n            int sum = 0;\n            for (int j = i; j < nums.length; j++) {\n                sum += nums[j];\n                if (sum == nums[i] && min > j - i) {\n                    min = j - i;\n                }\n            }\n        }\n        return min == Integer.MAX_VALUE? nums.length : min;\n    }\n}\n'''"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/lambda-expressions\n\n# Example\n# https://www.hackerrank.com/challenges/lambda-expressions/submissions/code/11881215\n\n# Problem\ndef find_minimum_length_of_list(list):\n    # return len(list) if len(list) == 0 else min(len(list), len(list[0]))\n    # return len(list) if len(list) == 0 else min(len(list), len(list[0]))\n    # return min(len(list), len(list[0]))\n    return min(len(list), len(list[0]))\n\n\n# Test Cases\ntest_cases = [\n    [[1], 1],\n    [[1, 2], 2],\n    [[1, 2, 3], 3]\n]\n\nfor test in test_cases:\n    test_input = test[0]\n    expected = test[1]\n    actual = find_minimum_length_of_list(test_input)\n    if actual == expected:\n        print(\"PASSED: find_minimum_length_of_list({}) returned {}\".format(test_input, expected))\n    else:\n        print(\"FAILED: find_minimum_length_of_list({}) returned {}, expected {}\".format(test_input, actual, expected))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def find_minimum_list(lst):\n    # write your code here\n    return min(lst)\n\ndef find_minimum_list_lambda(lst):\n    # write your code here\n    return min(lst, key=lambda x: x)"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/minimum-length-of-subsequence-sum-equals-k/discuss/172638/Python-Python-lambda-function-with-a-min-length-of-k\nclass Solution(object):\n    def minSubseqLen(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < k:\n            return n\n        ret = n\n        for i in range(n-k+1):\n            if nums[i] + nums[i+1:i+k] == k:\n                ret = min(ret, i+1)\n        return ret\n\nclass Solution2(object):\n    def minSubseqLen(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < k:\n            return n\n        if n == k:\n            return 1\n        ret = n\n        for i in range(n-k+1):\n            if nums[i] + nums[i+1:i+k] == k:\n                ret = min(ret, i+1)\n        return ret"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom functools import reduce\nfrom itertools import islice\n\ndef min_len_list(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    min_len = len(list_)\n    min_len_dict = defaultdict(lambda: min_len)\n    for x in list_:\n        if min_len_dict[x] > min_len:\n            min_len = min_len_dict[x]\n        min_len_dict[x] = min_len\n    return min_len\n\ndef min_len_list_lambda(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    return reduce(lambda x, y: x if x < y else y, list_)\n\ndef test_min_len_list():\n    assert min_len_list([1,2,3,4,5]) == 4\n    assert min_len_list([1,2,3,4,5,6]) == 6\n\ndef test_min_len_list_lambda():\n    assert min_len_list_lambda([1,2,3,4,5]) == 5\n    assert min_len_list_lambda([1,2,3,4,5,6]) == 6\n\ndef test_min_len_list_lambda_with_multiple_return_values():\n    assert min_len_list_lambda([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import math\n\ndef min_len_list(lst):\n    return min([len(lst[i]) for i in range(len(lst))])\n\ndef test_min_len_list():\n    assert min_len_list([1,2,3,4,5]) == 3\n    assert min_len_list([1,2,3,4,5,6]) == 4\n    assert min_len_list([1,2,3,4,5,6,7,8,9,10]) == 4\n    assert min_len_list([1,2,3,4,5,6,7,8,9,10,11]) == 4\n    assert min_len_list([1,2,3,4,5,6,7,8,9,10,11,12]) == 4\n    assert min_len_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 4\n    assert min_len_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 4\n    assert min_len_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 4\n    assert min_len_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 4\n    assert min_len_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 4\n    assert min_len_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 4\n    assert min"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def find_min_length(list_of_strings, min_length):\n    return min([len(list_of_strings[i]) for i in range(min_length)])\n\n# Test\nprint(find_min_length([\"a\", \"b\", \"c\", \"d\"], 2))\nprint(find_min_length([\"a\", \"b\", \"c\", \"d\"], 3))\nprint(find_min_length([\"a\", \"b\", \"c\", \"d\"], 4))\nprint(find_min_length([\"a\", \"b\", \"c\", \"d\"], 5))\nprint(find_min_length([\"a\", \"b\", \"c\", \"d\"], 6))\nprint(find_min_length([\"a\", \"b\", \"c\", \"d\"], 7))\nprint(find_min_length([\"a\", \"b\", \"c\", \"d\"], 8))\nprint(find_min_length([\"a\", \"b\", \"c\", \"d\"], 9))\nprint(find_min_length([\"a\", \"b\", \"c\", \"d\"], 10))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/lambda-function-minimum-length/problem\ndef min_length(seq):\n    \"\"\"\n    :type seq: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    #\n    # Hint: Use lambda function to create a lambda function\n    #\n    # Note:\n    # - There is a bug in this code that we do not know.\n    # - In the following code, the min is min(a, b)\n    # - If a is less than b, then return a. Otherwise, return b.\n    # - If a is equal to b, then return b.\n    # - If a is greater than b, then return b.\n    # - If a is less than or equal to b, then return a.\n    # - If a is greater than or equal to b, then return b.\n    #\n    # Examples:\n    #\n    # Input: [1, 2, 3]\n    # Output: 3\n    #\n    # Input: [1, 2, 3, 4]\n    # Output: 3\n    #\n    # Input: [1, 2, 3, 4, 5]\n    # Output: 3\n    #\n    # Input: [1, 2, 3, 4, 5, 6]\n    # Output: 5\n    #\n    # Input: [1, 2, 3, 4, 5, 6, 7]\n    # Output: 5\n    #\n    # Input: [1, 2, 3, 4, 5, 6, 7, 8]\n    # Output: 5\n    #\n    # Input: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # Output: 9\n    #\n    # Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # Output: 9\n    return min(seq)\n\n\nif __name__ == '__main__':\n    print(min_length([1, 2, 3]))\n    print(min_length([1, 2, 3, 4]))\n    print(min_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def find_minimum_list_length(list_of_numbers):\n    \"\"\"\n    Returns the minimum length of list using lambda function.\n\n    :type list_of_numbers: list\n    :rtype: int\n    \"\"\"\n    min_length = 100\n    for i in list_of_numbers:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n\n\nif __name__ == '__main__':\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert find_minimum_list_length(test_list) == 3"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Your function will be called like this:\n# input = [\"abc\", \"xyz\", \"ab\", \"ba\", \"ba\", \"ab\", \"abc\"]\n# output = [\"abc\", \"ba\"]\n#\n#\n# Note:\n# The function's input type and return type are different.\n# The function accepts an input list of strings and returns a list of strings.\n#\n#\n#\n#\n# Note:\n# You can assume the length of input is in the range of [1, 1000].\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of strings, find the list with minimum length using lambda function.\n\nExample 1:\nInput: [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\nOutput: [\"Alaska\", \"Dad\"]\nExplanation:\nThe strings are Hello, Alaska, Dad and Peace, and we need to return the list with\nminimum length as [\"Alaska\", \"Dad\"].\nExample 2:\nInput: [\"a\", \"aa\", \"aaa\"]\nOutput: [\"a\"]\nExplanation:\nThe strings are a, aa, aaa and there are three strings in the list, so we need to\nreturn the list with minimum length as [\"a\"].\n\"\"\"\n\nclass Solution(object):\n    def findMinLength(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        return sorted(words, key=lambda x: len(x))[:1]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findMinLength([\"a\", \"aa\", \"aaa\"])"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def min_length(list_to_min, lambda_function):\n    return min(list_to_min, key=lambda_function)\n\n\nif __name__ == '__main__':\n    list_to_min = [1,2,3,4,5,6,7]\n    lambda_function = lambda x: x**2\n    print(min_length(list_to_min, lambda_function))\n    lambda_function = lambda x: x**3\n    print(min_length(list_to_min, lambda_function))\n    lambda_function = lambda x: x**2\n    print(min_length(list_to_min, lambda_function))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def find_min(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    return min(list)\n\n\nif __name__ == \"__main__\":\n    assert find_min([1, 2, 3]) == 1\n    assert find_min([1, 2, 3, 4]) == 1\n    assert find_min([1, 2, 3, 4, 5]) == 2\n    assert find_min([1, 2, 3, 4, 5, 6]) == 2\n    assert find_min([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def find_min_length(numbers):\n    return min(numbers, key=lambda n: len(str(n)))\n\n\nif __name__ == \"__main__\":\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10]) == 1, \"Wrong output\"\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10,11]) == 1, \"Wrong output\"\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10,11,12]) == 5, \"Wrong output\"\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 7, \"Wrong output\"\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 7, \"Wrong output\"\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 7, \"Wrong output\"\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 7, \"Wrong output\"\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 8, \"Wrong output\"\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 8, \"Wrong output\"\n    assert find_min_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 8, \"Wrong output\"\n    assert find_min_length([1"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def find_minimum_length_list(input_list):\n    \"\"\"\n    Find minimum length list using lambda function.\n\n    >>> find_minimum_length_list([1, 2, 3, 4])\n    [1, 2, 3]\n    >>> find_minimum_length_list([1, 2, 3, 4, 5, 6])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in input_list if lambda x: x]\n\n\n# https://www.hackerrank.com/challenges/find-minimum-length-list/problem"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def find_min_length_list(input_list):\n    \"\"\"\n    :param input_list: list of integers\n    :return: minimum length list of integers\n    \"\"\"\n    return min(input_list, key=lambda x: len(str(x)))\n\n\nif __name__ == '__main__':\n    assert find_min_length_list([1, 2, 3, 4, 5]) == 1, 'find_min_length_list()'\n    assert find_min_length_list([1, 2, 3, 4, 5, 6]) == 3, 'find_min_length_list()'\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7]) == 4, 'find_min_length_list()'\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8]) == 5, 'find_min_length_list()'\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6, 'find_min_length_list()'\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7, 'find_min_length_list()'\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 8, 'find_min_length_list()'\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 9, 'find_min_length_list()'\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 10, 'find_min_length_list()'\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 11, 'find_min_length_list()'\n    assert find_min_length_"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# define a function to find the minimum number of swaps\ndef min_swap(list):\n    # store the minimum number of swaps\n    min_swaps = 0\n    # store the list to compare\n    compare_list = list[:]\n    # iterate over the list\n    for i in range(0, len(list)):\n        # if the list is sorted, break the loop\n        if list[i] < list[i+1]:\n            break\n        # otherwise, swap the two values\n        else:\n            # swap the two values\n            temp = list[i]\n            list[i] = list[i+1]\n            list[i+1] = temp\n            # increase the minimum number of swaps\n            min_swaps += 1\n    # return the minimum number of swaps\n    return min_swaps\n\n# test cases\nlist1 = [1, 2, 3]\nprint(min_swap(list1))\n\nlist2 = [1, 1, 1]\nprint(min_swap(list2))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-minimum-length-of-given-list\n# pylint: disable=unused-variable\ndef find_minimum_length_of_given_list(arr):\n    \"\"\"\n    Finds the minimum length of the given list.\n    :param arr: The given list.\n    :return: The minimum length of the given list.\n    \"\"\"\n    lengths = [0] * len(arr)\n    lengths[0] = 1\n\n    for i in range(1, len(arr)):\n        lengths[i] = min(lengths[i - 1], lengths[i - 2]) + 1\n\n    for i in range(len(arr) - 1, 0, -1):\n        lengths[i] = min(lengths[i], lengths[i - 1])\n\n    return lengths[-1]"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_min_lambda(a_list):\n    \"\"\"\n    :type a_list: List[int]\n    :rtype: int\n    \"\"\"\n    return min(a_list, key=lambda x: x)\n\n\nif __name__ == '__main__':\n    assert find_min_lambda([1, 2, 3]) == 1\n    assert find_min_lambda([1, 3, 5]) == 1\n    assert find_min_lambda([1, 2, 3, 4]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7, 8]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1\n    assert find_min_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 1\n    assert find_min_lambda([1"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Approach 1: Sort the list and find the minimum length\ndef min_len_lambda(list_):\n    list_sorted = sorted(list_)\n    return len(list_sorted)\n\n# Approach 2: Use a lambda expression\ndef min_len_lambda2(list_):\n    return len(list_[0])\n\n# Approach 3: Use a lambda expression with a built-in function\ndef min_len_lambda3(list_):\n    return min(len(i) for i in list_)\n\n# Approach 4: Use a lambda expression with a built-in function\ndef min_len_lambda4(list_):\n    return min(len(i) for i in list_)\n\n# Approach 5: Use a lambda expression with a built-in function\ndef min_len_lambda5(list_):\n    return min(len(i) for i in list_)\n\n# Approach 6: Use a lambda expression with a built-in function\ndef min_len_lambda6(list_):\n    return min(len(i) for i in list_)\n\n# Approach 7: Use a lambda expression with a built-in function\ndef min_len_lambda7(list_):\n    return min(len(i) for i in list_)\n\n# Approach 8: Use a lambda expression with a built-in function\ndef min_len_lambda8(list_):\n    return min(len(i) for i in list_)\n\n# Approach 9: Use a lambda expression with a built-in function\ndef min_len_lambda9(list_):\n    return min(len(i) for i in list_)\n\n# Approach 10: Use a lambda expression with a built-in function\ndef min_len_lambda10(list_):\n    return min(len(i) for i in list_)\n\n# Approach 11: Use a lambda expression with a built-in function\ndef min_len_lambda11(list_):\n    return min(len(i) for i in list_)\n\n# Approach 12: Use a lambda expression with a built-in function\ndef min_len_lambda12(list_):\n    return min(len(i) for i in list_)\n\n# Approach"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def find_min_list_lambda(list):\n    min_len = lambda x: len(x)\n    min_len_index = min(list, key=min_len)\n    return min_len_index\n\ndef find_min_list_recursive(list):\n    min_len = lambda x: len(x)\n    min_len_index = min(list, key=min_len)\n    if min_len(min_len_index) > 0:\n        return min_len_index\n    else:\n        return min_len_index\n\ndef find_min_list_recursive2(list):\n    min_len = lambda x: len(x)\n    min_len_index = min(list, key=min_len)\n    if min_len_index[0] == min_len_index[1]:\n        return min_len_index\n    else:\n        return min_len_index\n\ndef find_min_list_recursive3(list):\n    min_len = lambda x: len(x)\n    min_len_index = min(list, key=min_len)\n    if min_len_index[0] == min_len_index[1]:\n        return min_len_index\n    else:\n        return min_len_index\n\ndef find_min_list_recursive4(list):\n    min_len = lambda x: len(x)\n    min_len_index = min(list, key=min_len)\n    if min_len_index[0] == min_len_index[1]:\n        return min_len_index\n    else:\n        return min_len_index\n\ndef find_min_list_recursive5(list):\n    min_len = lambda x: len(x)\n    min_len_index = min(list, key=min_len)\n    if min_len_index[0] == min_len_index[1]:\n        return min_len_index\n    else:\n        return min_len_index\n\ndef find_min_list_recursive6(list):\n    min_len = lambda x: len(x)\n    min_len_index ="
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def min_len(seq, f):\n    \"\"\"\n    Returns the list with minimum length using lambda function.\n\n    Input:\n        seq: the list of elements\n        f: the function to get the length of the list\n\n    Output:\n        the list with minimum length\n    \"\"\"\n    return min(seq, key=lambda x: f(x))\n\n\ndef min_len_lambda(seq):\n    \"\"\"\n    Returns the list with minimum length using lambda function.\n\n    Input:\n        seq: the list of elements\n\n    Output:\n        the list with minimum length\n    \"\"\"\n    return min(seq, key=lambda x: len(x))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Test case 1:\n    # [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    seq = [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    print(min_len(seq, lambda x: len(x)))\n    # Test case 2:\n    # [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    seq = [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    print(min_len(seq, lambda x: len(x)))\n    # Test case 3:\n    # [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    seq = [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    print(min_len(seq, lambda x: len(x), lambda x: len(x[0])))\n    # Test case 4:\n    # [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    seq = [['a', 'b', 'c'], ['a',"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_min_len(my_list):\n    \"\"\"\n    :param my_list: list of integers\n    :return: list of integers\n    \"\"\"\n    return min(my_list, key=lambda x: len(x))\n\nprint(find_min_len([1, 2, 3]))\n\n# Test\nmy_list = [1, 2, 3, 4, 5]\nprint(find_min_len(my_list))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Your function will be called like this:\n# find_minimum_length(list)\n# It will be called as find_minimum_length(list)\n# where list is the argument passed to the function.\ndef find_minimum_length(list):\n    # write your code here\n    return min(list, key=lambda x: len(x))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef find_min_length_list(values, func):\n    \"\"\"\n    :param values: list of values\n    :param func: function to be applied to each value\n    :return: list with minimum length using lambda function\n    \"\"\"\n    return [func(value) for value in values]\n\n\nclass Test(unittest.TestCase):\n    def test_find_min_length_list(self):\n        values = [1, 2, 3]\n        self.assertEqual(find_min_length_list(values, lambda x: x), [1, 2, 3])\n        values = [1, 2, 3, 4]\n        self.assertEqual(find_min_length_list(values, lambda x: x), [1, 2, 3, 4])\n        values = [1, 2, 3, 4, 5]\n        self.assertEqual(find_min_length_list(values, lambda x: x), [1, 2, 3, 4, 5])\n        values = [1, 2, 3, 4, 5, 6]\n        self.assertEqual(find_min_length_list(values, lambda x: x), [1, 2, 3, 4, 5, 6])\n        values = [1, 2, 3, 4, 5, 6, 7]\n        self.assertEqual(find_min_length_list(values, lambda x: x), [1, 2, 3, 4, 5, 6, 7])\n        values = [1, 2, 3, 4, 5, 6, 7, 8]\n        self.assertEqual(find_min_length_list(values, lambda x: x), [1, 2, 3, 4, 5, 6, 7, 8])\n        values = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        self.assertEqual(find_min_length_list(values, lambda x: x), [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/lambda-function/problem\n#\n# For example:\n#\n# lambda = lambda x: x + 1\n#\n# In Python, lambda is a function that takes a single argument and returns a\n# new function. The new function is called the lambda function.\n#\n# In this challenge, you will write a function that returns the list with\n# minimum length.\n\n# Hints:\n# Use a while loop to traverse the list.\n# Use a function to find the minimum value.\n# Use a lambda function to find the minimum value.\n\n# Sample Input\n# [1,2,3,4]\n# Sample Output\n# [1,2,3,4]\n# Explanation\n# The list is already sorted.\n\n# Note\n# This is a Python challenge.\n\n\ndef minimum_length(lst):\n    # Write your code here\n    \n    # Step 1: Find the minimum element and add it to the end of the list.\n    # Step 2: Find the minimum element and add it to the end of the list.\n    # Step 3: Return the minimum list.\n    \n    # Step 1: Find the minimum element and add it to the end of the list.\n    # Step 2: Find the minimum element and add it to the end of the list.\n    # Step 3: Return the minimum list.\n\n    # Step 1: Find the minimum element and add it to the end of the list.\n    # Step 2: Find the minimum element and add it to the end of the list.\n    # Step 3: Return the minimum list.\n\n    # Step 1: Find the minimum element and add it to the end of the list.\n    # Step 2: Find the minimum element and add it to the end of the list.\n    # Step 3: Return the minimum list.\n\n    # Step 1: Find the minimum element and add it to the end of the list.\n    # Step 2: Find the minimum element and add it to the end of the list.\n    # Step 3: Return the minimum list.\n\n    # Step 1: Find the minimum element and add it to the end of the list.\n    # Step 2: Find the minimum element and add it to the end of the list.\n    # Step 3:"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_min_length_list(list_of_integers):\n    \"\"\"\n    :type list_of_integers: List[int]\n    :rtype: int\n    \"\"\"\n    minimum = list_of_integers[0]\n    for i in list_of_integers:\n        if i < minimum:\n            minimum = i\n    return minimum\n\nif __name__ == '__main__':\n    assert find_min_length_list([1, 2, 3]) == 3\n    assert find_min_length_list([1, 2, 3, 4]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 3\n    assert find_min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 3"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def find_min_length_list(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # Sort the list\n    sorted_list = sorted(arr)\n    # Get the minimum length list\n    min_length_list = [sorted_list[0]]\n    for i in range(1, len(sorted_list)):\n        if min_length_list[-1] >= sorted_list[i]:\n            min_length_list.append(sorted_list[i])\n    return min_length_list\n\narr = [1,2,3,4,5,6,7,8,9,10]\n\nprint(find_min_length_list(arr))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/minimum-length-of-substring-to-make-it-a-palindrome/discuss/165918/Python-Solution-with-lambda-function\n# https://leetcode.com/problems/minimum-length-of-substring-to-make-it-a-palindrome/discuss/165920/python-solution-with-lambda-function\n\n# T:O(N*M), S:O(1), 0 ms\nclass Solution(object):\n    def minSubLen(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n\n        # k = 1, because we want to know if the substring is palindrome\n        return min([self.minSubLen(s[:i]+s[i+k:], k+1) for i in range(len(s))])\n\n\nif __name__ == \"__main__\":\n    print Solution().minSubLen(\"aabcc\", 3)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_min_length_list(L, func):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n\n    Input:\n    L: A list of integers.\n    func: A function which takes an integer as input and returns a list of integers.\n    Output:\n    A list of integers.\n    \"\"\"\n    return min(func(i) for i in L)\n\n\n# Test cases\n\nassert find_min_length_list([1, 2, 3, 4, 5, 6], lambda i: [i, i+1, i+2]) == [1, 2, 3]\nassert find_min_length_list([1, 2, 3, 4, 5, 6], lambda i: [i, i+1, i+2]) == [1, 2, 3]\nassert find_min_length_list([1, 2, 3, 4, 5, 6], lambda i: [i, i+1, i+2]) == [1, 2, 3]\nassert find_min_length_list([1, 2, 3, 4, 5, 6], lambda i: [i, i+1, i+2]) == [1, 2, 3]\nassert find_min_length_list([1, 2, 3, 4, 5, 6], lambda i: [i, i+1, i+2]) == [1, 2, 3]\nassert find_min_length_list([1, 2, 3, 4, 5, 6], lambda i: [i, i+1, i+2]) == [1, 2, 3]\nassert find_min_length_list([1, 2, 3, 4, 5, 6], lambda i: [i, i+1, i+2]) == [1, 2, 3]"
    }
  ]
}