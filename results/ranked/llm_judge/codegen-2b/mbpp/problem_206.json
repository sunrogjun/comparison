{
  "timestamp": "2025-09-14T18:53:35.851412",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 206,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2015, Jon Hawkesworth (@jhawkesworth) <figs@unity.demon.co.uk>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# this is a windows documentation stub.  actual code lives in the.ps1\n# file of the same name\n\nANSIBLE_METADATA = {'status': ['preview'],\n                   'supported_by': 'community',\n                   'version': '1.0'}\n\nDOCUMENTATION = r'''\n---\nmodule: win_find_first_regexp\nversion_added: \"2.1\"\nshort_description: Find the first regexp match in a line\ndescription:\n    - Finds the first regex match in a string and returns the match and capture groups.\n    - This is useful for finding the first occurence of a specific C(<REGULAR_EXPRESSION>)\n      template within the playbook.\noptions:\n  pattern:\n    description:\n      - The regex pattern to be found.\n    required: true\n    default: null\n  string:\n    description:\n      - The string to be searched.\n    required: true\n    default: null\nnotes:\n  - This module is basically a wrapper around the C(re) module.\nauthor:\n- Jon Hawkesworth (@jhawkesworth)\n'''\n\nEXAMPLES = r'''\n- name: Find the first occ"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-repeated-character/problem\n\n# Write a function that takes a string and returns the first repeated character.\n# If the character is not repeated, return -1.\n#\n# For example, given s = \"hello\", return 'e'.\n#\n# Your function should be in the following form:\n#\n# def repeated_character(s):\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def first_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s[0] + s[1]"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_repeated_char(s):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n\n    for i in range(0, len(s)):\n        if s[i] == s[i]:\n            return i\n\nif __name__ == \"__main__\":\n    s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# TODO:\n# 1. Use the built-in str.find() method to find the first repeated character\n# 2. Use the built-in str.find() method to find the first repeated character\n# 3. Use the built-in str.find() method to find the first repeated character\n# 4. Use the built-in str.find() method to find the first repeated character\n# 5. Use the built-in str.find() method to find the first repeated character\n# 6. Use the built-in str.find() method to find the first repeated character\n# 7. Use the built-in str.find() method to find the first repeated character\n# 8. Use the built-in str.find() method to find the first repeated character\n# 9. Use the built-in str.find() method to find the first repeated character\n# 10. Use the built-in str.find() method to find the first repeated character\n# 11. Use the built-in str.find() method to find the first repeated character\n# 12. Use the built-in str.find() method to find the first repeated character\n# 13. Use the built-in str.find() method to find the first repeated character\n# 14. Use the built-in str.find() method to find the first repeated character\n# 15. Use the built-in str.find() method to find the first repeated character\n# 16. Use the built-in str.find() method to find the first repeated character\n# 17. Use the built-in str.find() method to find the first repeated character\n# 18. Use the built-in str.find() method to find the first repeated character\n# 19. Use the built-in str.find() method to find the first repeated character\n# 20. Use the built-in str.find() method to find the first repeated character\n# 21. Use the built-in str.find() method to find the first repeated character\n# 22. Use the built-in str.find() method to find the first repeated character\n# 23. Use the built-in str.find() method to find the first repeated character\n# 24. Use the built-in str.find() method to find the first repeated character\n# 25. Use the built-in str.find() method to find the first repeated character\n# 26. Use the built"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_first_repeated(str):\n    \"\"\"\n    Returns the first repeated character in a given string\n    \"\"\"\n    repeated_character = 0\n    for i in range(0, len(str)):\n        if str[i] == str[i-1]:\n            repeated_character = i\n    return repeated_character\n\nprint find_first_repeated(\"abbbabbabbbabbbbbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbabbbbbabbbbabbabbabbabbabbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-repeated-character/problem\n\ndef first_repeated_character(string):\n    \"\"\"\n    Returns the first repeated character in a given string.\n\n    :param string: str\n    :return: str\n    \"\"\"\n\n    # Count the number of times each character appears in the string.\n    # If the character appears more than once, then return the character.\n    count = {char: 0 for char in string}\n    for char in string:\n        count[char] += 1\n\n    # If the number of times each character appears is greater than 1,\n    # then return the character.\n    if sum(count.values()) > 1:\n        return list(count.keys())[0]\n\n    # Otherwise, return None.\n    return None\n\n\n# Test cases\nassert first_repeated_character('abab') == 'a'\nassert first_repeated_character('ab') == None\nassert first_repeated_character('abac') == None\nassert first_repeated_character('abcabc') == 'a'"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Write your code here\n# Input:\n# A string str\n# Output:\n# The first repeated character in the string str.\n\ndef repeated_char(str):\n    if len(str) == 0:\n        return \"\"\n    for i in range(1, len(str)):\n        if str[i-1] == str[i]:\n            return str[i-1]\n    return \"\"\n\nprint repeated_char(\"abcabc\")\nprint repeated_char(\"abcb\")\nprint repeated_char(\"abcd\")\nprint repeated_char(\"ab\")\nprint repeated_char(\"ab\")\nprint repeated_char(\"\")\nprint repeated_char(\"abcc\")"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def first_repeated_char(s):\n    \"\"\"\n    :param s: string\n    :return: first repeated character\n    \"\"\"\n    return s.find(''.join(sorted(s)))\n\nif __name__ == '__main__':\n    s = 'cabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# The first character in a string is always the same\ndef find_first_char(string):\n    return string[0]\n\n# The first character in a string is always the same\ndef find_first_char_in_string(string):\n    return string[0]\n\n# The first character in a string is always the same\ndef find_first_char_in_string_with_repeats(string):\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            return string[0]\n    return None\n\n# The first character in a string is always the same\ndef find_first_char_in_string_with_repeats_2(string):\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            return string[0]\n    return None\n\n# The first character in a string is always the same\ndef find_first_char_in_string_with_repeats_3(string):\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            return string[0]\n    return None\n\n# The first character in a string is always the same\ndef find_first_char_in_string_with_repeats_4(string):\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            return string[0]\n    return None\n\n# The first character in a string is always the same\ndef find_first_char_in_string_with_repeats_5(string):\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            return string[0]\n    return None\n\n# The first character in a string is always the same\ndef find_first_char_in_string_with_repeats_6(string):\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            return string[0]\n    return None\n\n# The first character in a string is always the same\ndef find_first_char_in_string_with_repeats_7(string):\n    for"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def repeated_char(string):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    :param string: string\n    :return:\n    \"\"\"\n    count = 0\n    for i in range(0, len(string) - 1):\n        if string[i] == string[i + 1]:\n            count += 1\n    return count\n\n\ndef main():\n    print repeated_char(\"Hello world\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_first_rep(string):\n    \"\"\"\n    Write a function to find the first repeated character in a given string.\n    :param string: string to be checked\n    :return: first repeated character\n    \"\"\"\n\n    count = 0\n    for c in string:\n        if c == string[count]:\n            count += 1\n        else:\n            count = 0\n    return string[count]\n\n\n# Test Cases\nprint(find_first_rep(\"Hello\"))\nprint(find_first_rep(\"Hi\"))\nprint(find_first_rep(\"World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello World\"))\nprint(find_first_rep(\"Hello"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def first_repeated_char(string):\n    \"\"\"\n    Write a function that finds the first repeated character in a given string.\n    The first character is always the same character.\n    The first repeated character is the first character that occurs more than once.\n    \n    Input:\n    string: A string.\n    \n    Output:\n    A single character.\n    \"\"\"\n    \n    repeated_char = ''\n    count = 0\n    for char in string:\n        if char == repeated_char:\n            count += 1\n        else:\n            if count > 1:\n                repeated_char = char\n            else:\n                repeated_char = ''\n            count = 1\n    return repeated_char\n\n# Test Cases\ntest_cases = [\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],\n    ['abcd', 'd', 'd', 'a'],"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def first_repeated(s):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>> first_repeated('hello')\n    'e'\n    >>>"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import sys\n\ndef find_repeated_char(s):\n    \"\"\"\n    Write a function find_repeated_char that takes a string as input and returns\n    the first repeated character in the string.\n\n    For example, if the string \"abab\" is passed as input to the function,\n    the function should return \"a\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the function should return \"a\".\n\n    If the string \"abab\" is passed as input to the function,\n    the function should return \"ab\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the function should return \"c\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the function should return \"a\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the function should return \"a\".\n\n    If the string \"abab\" is passed as input to the function,\n    the function should return \"ab\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the function should return \"c\".\n\n    If the string \"abab\" is passed as input to the function,\n    the function should return \"ab\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the function should return \"c\".\n\n    If the string \"abab\" is passed as input to the function,\n    the function should return \"ab\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the function should return \"c\".\n\n    If the string \"abab\" is passed as input to the function,\n    the function should return \"ab\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the function should return \"c\".\n\n    If the string \"abab\" is passed as input to the function,\n    the function should return \"ab\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the function should return \"c\".\n\n    If the string \"abab\" is passed as input to the function,\n    the function should return \"ab\".\n\n    If the string \"abcabc\" is passed as input to the function,\n    the"
    },
    {
      "rank": 17,
      "score": 9.370583536698913,
      "candidate": "def repeated_char(s):\n    \"\"\"\n    Find the first repeated character in a given string.\n    :param s: A string\n    :return: The first repeated character in a given string.\n    \"\"\"\n    counter = 0\n    for i in range(0, len(s)):\n        if s[i] == s[i + 1]:\n            counter += 1\n        else:\n            counter = 0\n    return counter\n\n\nif __name__ == '__main__':\n    s
    },
    {
      "rank": 18,
      "score": 9.234050852198141,
      "candidate": "#!/usr/bin/env python\n\ndef repeated_char(string):\n    \"\"\"\n    Given a string, find the first repeated character in the string.\n    \n    For example,\n        repeated_char(\"leetcode\") => 'e'\n        repeated_char(\"loveleetcode\") => 'e'\n        repeated_char(\"loveleetcode\") => 'e'\n        repeated_char(\"loveleetcode\") => 'e'\n        repeated_char(\"loveleetcode\") => 'e'\n    \"\"\"\n    \n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            return string[i]\n    return None\n\n\n# Test Cases\n\n# Repeated Character\nprint(repeated_char(\"leetcode\"))\nprint(repeated_char(\"loveleetcode\"))\nprint(repeated_char(\"loveleetcode\"))\nprint(repeated_char(\"loveleetcode\"))\nprint(repeated_char(\"loveleetcode\"))"
    },
    {
      "rank": 19,
      "score": 9.21346272767743,
      "candidate": "# Complete the repeatedChar function below.\n\ndef repeatedChar(str):\n    # @param str, a string\n    # @return a string\n    if str is None or len(str) == 0:\n        return str\n    firstChar = str[0]\n    count = 1\n    for i in range(1, len(str)):\n        if firstChar == str[i]:\n            count += 1\n        else:\n            return str[0:i] + str[i:i+count]\n    return str\n\n\nif __name__ == '__main__':\n    assert repeatedChar('abcd') == 'abc'"
    },
    {
      "rank": 20,
      "score": 9.205959372648458,
      "candidate": "def find_first_rep(s):\n    \"\"\"\n    Write a function that finds the first repeated character in a given string.\n\n    Input:\n    s - string\n    Output:\n    - int\n    \"\"\"\n\n    count = 0\n    for c in s:\n        if c == s[count]:\n            count += 1\n        else:\n            count = 0\n\n    return count\n\n\ndef main():\n    print(find_first_rep('abcabcabc'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 9.177268828905222,
      "candidate": "#!/usr/bin/env python\n\ndef find_repeated_char(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            count = 0\n    return count\n\nif __name__ == '__main__':\n    s = raw_input()\n    print find_repeated_char(s)"
    },
    {
      "rank": 22,
      "score": 9.122564458729856,
      "candidate": "def first_repeated_char(s):\n    \"\"\"\n    Write a function that returns the first repeated character in a given string.\n    \"\"\"\n    # Write your code here\n    return\n\n\nif __name__ == \"__main__\":\n    s = \"aabbcc\"\n    print first_repeated_char(s)"
    },
    {
      "rank": 23,
      "score": 8.973005557553902,
      "candidate": "def repeated_char(s):\n    \"\"\"\n    Find the first repeated character in a given string.\n    :param s: String to search for repeated character\n    :return: The first repeated character in the string\n    \"\"\"\n    # TODO: Write a python function to find the first repeated character in a given string.\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            count = 0\n    return s[count - 1]\n\n\nif __name__ == '__main__':\n    s = 'aaaaaaaaaa'\n    print(repeated_char(s))"
    },
    {
      "rank": 24,
      "score": 8.95994420569242,
      "candidate": "#!/usr/bin/env python\n\ndef find_first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Input:\n        string: string to be searched\n        \n    Output:\n        first repeated character in the string\n    \"\"\"\n    char = ''\n    count = 0\n    for char in string:\n        if char == char.upper():\n            count += 1\n        else:\n            count = 0\n    return char if count > 0 else ''\n\nif __name__ == '__main__':\n    string = 'abcabcabc'\n    print(find_first_repeated_char(string))"
    },
    {
      "rank": 25,
      "score": 8.946210893390457,
      "candidate": "def repeated_char(s):\n    \"\"\"\n    :param s: The string to be searched.\n    :return: The first repeated character in s.\n    \"\"\"\n    # write your code here\n    if not s:\n        return ''\n    char = s[0]\n    for i in range(1, len(s)):\n        if s[i] == char:\n            return char\n        else:\n            char = s[i]\n    return char\n\n\ndef repeated_char_test():\n    s = \"abcabcabc\"\n    print repeated_char(s)\n    print repeated_char(s)\n\n\nif __name__ == '__main__':\n    repeated_char_test()"
    },
    {
      "rank": 26,
      "score": 8.932217008005624,
      "candidate": "def first_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    return string.find(string[0])\n\nif __name__ == \"__main__\":\n    string = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 27,
      "score": 8.910084504002544,
      "candidate": "def find_first_repeated(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(0, len(str)):\n        if str[i] == str[i+1]:\n            count += 1\n        else:\n            count = 0\n    return count\n\nif __name__ == '__main__':\n    s = 'aabbccddeee'\n    print find_first_repeated(s)\n    s = 'ababbccddeee'\n    print find_first_repeated(s)\n    s = 'ababbccddeeeabbbbccddeee'\n    print find_first_repeated(s)\n    s = 'ababbccddeeeabbbbccddeeeabbbbccddeee'\n    print find_first_repeated(s)\n    s = 'ababbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeee'\n    print find_first_repeated(s)\n    s = 'abbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddeeeabbbbccddee"
    },
    {
      "rank": 28,
      "score": 8.85571690049604,
      "candidate": "def find_first_repeated_character(string):\n    \"\"\"\n    Given a string, find the first character repeated in the string.\n\n    Input:\n    string - A string, which is a substring of the string in which we are\n            looking for the first repeated character.\n\n    Output:\n    A character, which is the first character repeated in the string.\n\n    Example:\n    >>> find_first_repeated_character(\"abcabc\")\n    'a'\n    >>> find_first_repeated_character(\"abcabcabcabc\")\n    'c'\n    \"\"\"\n\n    # If the string is empty, there is no repeated character.\n    if not string:\n        return None\n\n    # If the string consists of a single character, there is no repeated character.\n    if len(string) == 1:\n        return None\n\n    # Find the first character that is repeated in the string.\n    # Note that we are looking for the first character that is repeated in the string,\n    # not the first character that is repeated in the first character of the string.\n    # So, we start from the second character of the string.\n    for i in range(1, len(string)):\n        if string[i] == string[i - 1]:\n            return string[i]\n\n    # If no character is repeated in the string, return None.\n    return None"
    },
    {
      "rank": 29,
      "score": 8.850707355641543,
      "candidate": "def find_repeated_char(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(text) - 1):\n        if text[i] == text[i + 1]:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    text = 'abcd'\n    print(find_repeated_char(text))"
    },
    {
      "rank": 30,
      "score": 8.8281618090209,
      "candidate": "def find_repeated_char(str1):\n    \"\"\"\n    :type str1: str\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if not str1:\n        return -1\n    count = 0\n    for char in str1:\n        if char in str1:\n            count += 1\n        else:\n            break\n    return count\n\n\nif __name__ == '__main__':\n    assert find_repeated_char(\"aab\") == 2\n    assert find_repeated_char(\"aaa\") == 3\n    assert find_repeated_char(\"abcabcabc\") == 3"
    },
    {
      "rank": 31,
      "score": 8.81367773444215,
      "candidate": "def find_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    counter = 0\n    for i, c in enumerate(s):\n        if c == s[i - 1]:\n            counter += 1\n        else:\n            counter = 0\n    return counter\n\n\nif __name__ == '__main__':\n    assert find_repeated_char('abcabcabcabcabcabcabc') == 3\n    assert find_repeated_char('abcabcabcabcabcabcabcabc') == 0\n    assert find_repeated_char('abcabcabcabcabcabcabcabc') == 0\n    assert find_repeated_char('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') == 6"
    },
    {
      "rank": 32,
      "score": 8.76828871349479,
      "candidate": "# I'm using a list for the input and output strings.\n# If there are no repeats, then the output string will be empty.\n\n# I'm using a dict to keep track of the number of times the same character appears.\n# If there are no repeats, the dict will be empty.\n# If there are repeats, then the dict will contain the number of times the same character appears.\n\n# If there are no repeats, the first character will be the first character in the string.\n# If there are repeats, then the first character will be the first character in the string.\n# The second character will be the first character in the string.\n# The third character will be the first character in the string.\n#...\n# The last character will be the last character in the string.\n#\n# I'm using a list for the input and output strings.\n# If there are no repeats, then the output string will be empty.\n# If there are repeats, then the output string will contain the number of times the same character appears.\n#\n# I'm using a dict to keep track of the number of times the same character appears.\n# If there are no repeats, the dict will be empty.\n# If there are repeats, then the dict will contain the number of times the same character appears.\n#\n# If there are no repeats, the first character will be the first character in the string.\n# If there are repeats, then the first character will be the first character in the string.\n# The second character will be the first character in the string.\n# The third character will be the first character in the string.\n#...\n# The last character will be the last character in the string.\n#\n# I'm using a list for the input and output strings.\n# If there are no repeats, then the output string will be empty.\n# If there are repeats, then the output string will contain the number of times the same character appears.\n#\n# I'm using a dict to keep track of the number of times the same character appears.\n# If there are no repeats, the dict will be empty.\n# If there are repeats, then the dict will contain the number of times the same character appears.\n\n# Input:\n# \"The quick brown fox jumps over the lazy dog\".\n#\n# Output:\n# \"fox\".\n#"
    },
    {
      "rank": 33,
      "score": 8.750282588864879,
      "candidate": "def find_repeated_character(s):\n    if not s:\n        return\n    cnt = 0\n    for c in s:\n        if c in s:\n            cnt += 1\n        if c in s:\n            cnt += 1\n        if cnt > 1:\n            break\n    return cnt\n\nif __name__ == '__main__':\n    print(find_repeated_character('abba'))\n    print(find_repeated_character('aaaaa'))\n    print(find_repeated_character('abab'))"
    },
    {
      "rank": 34,
      "score": 8.715724466237427,
      "candidate": "def find_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return -1\n\n    dic = {}\n    for i in range(0, len(s)):\n        if s[i] in dic:\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n\n    for key, value in dic.items():\n        if value > 1:\n            return value\n\n    return -1"
    },
    {
      "rank": 35,
      "score": 8.692801520950061,
      "candidate": "def find_first_repeated_char(str):\n    # write your code here\n    repeated_char = 0\n    for i in range(0,len(str)):\n        if str[i] == str[i+1]:\n            repeated_char += 1\n        else:\n            repeated_char = 0\n    return repeated_char\n\nif __name__ == '__main__':\n    test_str = 'ababbac'\n    print(find_first_repeated_char(test_str))"
    },
    {
      "rank": 36,
      "score": 8.632293453617281,
      "candidate": "import re\n\n\ndef find_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return s.find(s[0]) + 1\n\nif __name__ == '__main__':\n    print find_repeated_char('aaabbbccc')"
    },
    {
      "rank": 37,
      "score": 8.625262456968262,
      "candidate": "def find_repeated(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if not string:\n        return \"\"\n\n    cnt = 0\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            cnt += 1\n    return str(cnt)\n\nif __name__ == '__main__':\n    print(find_repeated(\"aabbcc\"))\n    print(find_repeated(\"ababb\"))\n    print(find_repeated(\"abb\"))\n    print(find_repeated(\"aabbb\"))\n    print(find_repeated(\"aabb\"))\n    print(find_repeated(\"abb\"))\n    print(find_repeated(\"\"))"
    },
    {
      "rank": 38,
      "score": 8.625142247198651,
      "candidate": "def find_repeated_char(string):\n    \"\"\"\n    Write a function that finds the first repeated character in a given string.\n\n    Assumption:\n    string contains only lowercase letters.\n    string.find() returns -1 if no character is repeated.\n    \"\"\"\n    return string.find('a')\n\n\ndef test_find_repeated_char():\n    assert find_repeated_char(\"abcd\") == 1\n    assert find_repeated_char(\"abc\") == -1\n    assert find_repeated_char(\"abcabc\") == 2\n    assert find_repeated_char(\"abcdabcd\") == -1\n    assert find_repeated_char(\"\") == -1\n    assert find_repeated_char(\"aaaa\") == -1\n\n\nif __name__ == \"__main__\":\n    test_find_repeated_char()"
    },
    {
      "rank": 39,
      "score": 8.616253589228675,
      "candidate": "def find_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n\n    cnt = {}\n    for i, c in enumerate(s):\n        if c in cnt:\n            cnt[c] += 1\n        else:\n            cnt[c] = 1\n\n    return max(cnt.keys(), key=cnt.get)\n\nif __name__ == '__main__':\n    s = 'aaa'\n    print(find_repeated_char(s))\n    s = 'abca'\n    print(find_repeated_char(s))\n    s = 'abcabcabc'\n    print(find_repeated_char(s))"
    },
    {
      "rank": 40,
      "score": 8.610076160146226,
      "candidate": "def find_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a string.\n    \n    >>> find_repeated_char(\"\")\n    ''\n    >>> find_repeated_char(\"abc\")\n    ''\n    >>> find_repeated_char(\"abab\")\n    'b'\n    >>> find_repeated_char(\"ababab\")\n    'b'\n    >>> find_repeated_char(\"abababab\")\n    'b'\n    >>> find_repeated_char(\"ababababab\")\n    'b'\n    >>> find_repeated_char(\"abababababab\")\n    'b'\n    >>> find_repeated_char(\"ababababababab\")\n    'b'\n    >>> find_repeated_char(\"abababababababab\")\n    'b'\n    >>> find_repeated_char(\"ababababababababab\")\n    'b'\n    >>> find_repeated_char(\"abababababababababab\")\n    'b'\n    >>> find_repeated_char(\"ababababababababababab\")\n    'b'\n    >>> find_repeated_char(\"abababababababababababab\")\n    'b'\n    >>> find_repeated_char(\"ababababababababababababab\")\n    'b'\n    >>> find_repeated_char(\"abababababababababababababab\")\n    'b'\n    >>> find_repeated_char(\"ababababababababababababababab\")\n    'b'\n    >>> find_repeated_char(\"abababababababababababababababab\")\n    'b'\n    >>> find_repeated_char(\"ababababababababababababababababab\")\n    'b'\n    >>> find_repeated_char(\"ababababababababababababababababab\")\n    'b'\n    >>> find_repeated_char(\"ababababab"
    },
    {
      "rank": 41,
      "score": 8.606486429141842,
      "candidate": "def find_first_repeated(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return\n    repeated = 0\n    for i, c in enumerate(s):\n        if c == s[i - 1]:\n            repeated += 1\n        else:\n            repeated = 0\n            break\n    return repeated\n\n\ndef test_find_first_repeated():\n    assert find_first_repeated(\"aabbccdd\") == 3\n    assert find_first_repeated(\"aaaaaaaa\") == 0\n    assert find_first_repeated(\"a\") == 0\n    assert find_first_repeated(\"abababab\") == 0\n    assert find_first_repeated(\"abababababab\") == 3\n\nif __name__ == '__main__':\n    test_find_first_repeated()"
    },
    {
      "rank": 42,
      "score": 8.60156811074208,
      "candidate": "import sys\n\n# Complete the firstChar function below.\ndef firstChar(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s[0]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    for i in range(n):\n        s = input()\n\n        res = firstChar(s)\n\n        fptr.write(res+'\\n')\n\n    fptr.close()"
    },
    {
      "rank": 43,
      "score": 8.565425580227462,
      "candidate": "# Write your function here\ndef findFirstRepeated(str):\n    # write your code here\n    count = 0\n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n\nstr = \"Hello World\"\nprint(findFirstRepeated(str))"
    },
    {
      "rank": 44,
      "score": 8.548876241946822,
      "candidate": "import re\n\ndef first_repeated_char(string):\n    # write your code here\n    if not string:\n        return\n    m = re.search('[a-z]', string)\n    if m is None:\n        return\n    return string[m.start()]\n\nif __name__ == '__main__':\n    print(first_repeated_char('hello world'))\n    print(first_repeated_char('abcd'))\n    print(first_repeated_char('aabb'))\n    print(first_repeated_char('aaabbb'))\n    print(first_repeated_char('aaabbbb'))\n    print(first_repeated_char('aaabbbbb'))"
    },
    {
      "rank": 45,
      "score": 8.542875062379007,
      "candidate": "def findFirstRepeatedChar(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    if not string:\n        return -1\n\n    # use binary search to find the first repeated character in the string\n    # i is the index of the character that is to be found, j is the index of the\n    # character that is to be found in the next word\n    i = 0\n    j = 0\n    while i < len(string) and j < len(string):\n        if string[i] == string[j]:\n            i += 1\n            j += 1\n        else:\n            j = 0\n    return i\n\n\nif __name__ == '__main__':\n    assert findFirstRepeatedChar('abcabcabc') == 2\n    assert findFirstRepeatedChar('abcdabcabc') == 3\n    assert findFirstRepeatedChar('abcabcabcabc') == -1\n    assert findFirstRepeatedChar('abcabcabc') == -1\n    assert findFirstRepeatedChar('abcabc') == -1"
    },
    {
      "rank": 46,
      "score": 8.53012858503943,
      "candidate": "def find_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] in string[i + 1:]:\n            return string[i]\n\n    return None\n\nif __name__ == '__main__':\n    string = 'abcabcabc'\n    print(find_repeated_char(string))\n    print(find_repeated_char(string[::-1]))\n    string = 'aabbcc'\n    print(find_repeated_char(string))"
    },
    {
      "rank": 47,
      "score": 8.499905739299377,
      "candidate": "def find_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for char in string:\n        if char in string:\n            count += 1\n    return count"
    },
    {
      "rank": 48,
      "score": 8.478208546788407,
      "candidate": "def repeated_char_in_string(s):\n    \"\"\"\n    Returns the first repeated character in a string.\n    :param s: a string\n    :return: the first repeated character in the string\n    \"\"\"\n    # the first character of the string is repeated\n    return s[0] * (len(s) - 1)\n\nif __name__ == '__main__':\n    assert repeated_char_in_string('abcabc') == 'a'\n    assert repeated_char_in_string('abbabbb') == 'a'\n    assert repeated_char_in_string('abbabbb') == 'b'\n    assert repeated_char_in_string('abbabbbb') == 'b'\n    assert repeated_char_in_string('abbabbbbbb') == 'b'\n    assert repeated_char_in_string('ababbabbbb') == 'b'\n    assert repeated_char_in_string('abbabbbbbbb') == 'b'\n    assert repeated_char_in_string('abbabbbbbbbbb') == 'b'\n    assert repeated_char_in_string('abbabbbbbbbbbbb') == 'b'\n    assert repeated_char_in_string('abbabbbbbbbbbbbbb') == 'b'\n    assert repeated_char_in_string('abbabbbbbbbbbbbbbbb') == 'b'\n    assert repeated_char_in_string('abbabbbbbbbbbbbbbbbbb') == 'b'"
    },
    {
      "rank": 49,
      "score": 8.437695832075478,
      "candidate": "def first_repeated_char(string):\n    for i in range(0, len(string)):\n        if string[i] in string:\n            return string[i]\n\nif __name__ == '__main__':\n    string = 'hello world'\n    print(first_repeated_char(string))"
    },
    {
      "rank": 50,
      "score": 8.408439383654278,
      "candidate": "def find_repeated_char(str):\n    \"\"\"\n    Input:\n        str: a string\n    Output:\n        Returns the first character that appears more than once in str.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        if str[i] in str[i+1:]:\n            count += 1\n        else:\n            count = 0\n\n    return str[0] if count > 0 else None\n\n\ndef main():\n    print(find_repeated_char(\"aaabbbccc\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.386620303250325,
      "candidate": "def find_repeated_char(s):\n    # Write your code here\n    # s: string\n    # return: int\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    s = \"abracadabra\"\n    print find_repeated_char(s)"
    },
    {
      "rank": 52,
      "score": 8.375312293858853,
      "candidate": "def find_repeated_character(s):\n    # write your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            count = 0\n    return count\n\n\nif __name__ == '__main__':\n    s = \"hello\"\n    print find_repeated_character(s)"
    },
    {
      "rank": 53,
      "score": 8.351614956112536,
      "candidate": "#!/usr/bin/python\n\ndef find_repeated_char(str):\n    \n    # Create a dictionary to store the characters\n    # and their count\n    char_dict = {}\n\n    # Count the number of times the given char is present\n    for char in str:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    # Create a list to store the chars\n    # and their count\n    chars_list = []\n\n    # Loop over the char_dict and create a list of chars\n    # and their count\n    for key, value in char_dict.iteritems():\n        chars_list.append([key, value])\n\n    # Sort the list based on the second element\n    chars_list.sort(key=lambda x: x[1])\n\n    # Return the first char in the list\n    return chars_list[0][0]\n\n# Test cases\nprint find_repeated_char(\"ABAB\")\nprint find_repeated_char(\"ABC\")\nprint find_repeated_char(\"AABC\")\nprint find_repeated_char(\"ABCD\")\nprint find_repeated_char(\"ABCDE\")\nprint find_repeated_char(\"ABCDEF\")"
    },
    {
      "rank": 54,
      "score": 8.331556294201176,
      "candidate": "def firstRepeatedChar(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    #returns the first repeated character in the string\n    for i in range(0,len(str)):\n        if str[i] == str[0]:\n            return str[i]\n    return''\n\nif __name__ == '__main__':\n    assert(firstRepeatedChar('Hello') == 'H')"
    },
    {
      "rank": 55,
      "score": 8.327375965969855,
      "candidate": "def first_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] == string[i - 1]:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    assert(first_repeated_char(\"abcabcabc\") == 3)\n    assert(first_repeated_char(\"a\") == 0)\n    assert(first_repeated_char(\"\") == 0)\n    assert(first_repeated_char(\"a\") == 0)\n    assert(first_repeated_char(\"bb\") == 0)"
    },
    {
      "rank": 56,
      "score": 8.327367757082776,
      "candidate": "def first_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] == string[i + 1]:\n            count += 1\n            if count > 1:\n                break\n    return string[i + 1]\n\n\nif __name__ == '__main__':\n    string = \"aabbccdd\"\n    print(first_repeated_char(string))"
    },
    {
      "rank": 57,
      "score": 8.298597569547805,
      "candidate": "def first_repeated(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n    :param string:\n    :return:\n    \"\"\"\n    if string is None or len(string) == 0:\n        return\n    c = 0\n    for i in range(len(string)):\n        if string[i] == string[c]:\n            c += 1\n        else:\n            c = 0\n    return c\n\nif __name__ == '__main__':\n    s = \"abc\"\n    print(first_repeated(s))"
    },
    {
      "rank": 58,
      "score": 8.2938925966498,
      "candidate": "# https://www.hackerrank.com/challenges/first-repeated-character/problem\n\ndef first_repeated_character(s):\n    # Write your code here\n    count = 0\n    for i in s:\n        if i == s[count]:\n            count += 1\n        else:\n            count = 0\n    return s[count]"
    },
    {
      "rank": 59,
      "score": 8.289838256518838,
      "candidate": "# Write your code here\ndef find_first_repeated(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    # Your code here\n    return 0\n\nif __name__ == \"__main__\":\n    string = \"aabcc\"\n    print(find_first_repeated(string))"
    },
    {
      "rank": 60,
      "score": 8.251903304236286,
      "candidate": "# Note: This function returns a tuple with (first_repeated_char, rest_of_string).\n#       The rest_of_string is the part of the string that was not repeated.\n#       Example:\n#           If the input string is 'ABCABC', the function returns ('A', 'BCABC').\n#\n# Note: You may assume the string contains only lowercase characters.\n\nclass Solution:\n    # @param s, a string\n    # @return a tuple (first_repeated_char, rest_of_string)\n    def firstRepeatedChar(self, s):\n        if not s:\n            return None\n        length = len(s)\n        if length == 1:\n            return (s[0], '')\n        start = 0\n        while start < length:\n            if s[start] == s[start]:\n                start += 1\n            else:\n                start = start + 1\n                break\n        return (s[start - 1], s[start:])\n\nif __name__ == '__main__':\n    print Solution().firstRepeatedChar('ABCABC')\n    print Solution().firstRepeatedChar('ABCD')\n    print Solution().firstRepeatedChar('ABAB')\n    print Solution().firstRepeatedChar('AAAA')\n    print Solution().firstRepeatedChar('ABABAB')"
    },
    {
      "rank": 61,
      "score": 8.214125058964552,
      "candidate": "def find_first_repeated(string):\n    \"\"\"\n    Input:\n        string - a string\n    Output:\n        a character\n    Examples:\n        >>> find_first_repeated('abcabcabc')\n        'a'\n        >>> find_first_repeated('abcabcabc')\n        'a'\n    \"\"\"\n    for x in string:\n        if x == string[0]:\n            return x\n    return None\n\nif __name__ == '__main__':\n    string = 'abcabcabc'\n    print find_first_repeated(string)"
    },
    {
      "rank": 62,
      "score": 8.212735598038213,
      "candidate": "def repeated_char(str):\n    \"\"\"\n    Returns the first repeated character in str.\n    \"\"\"\n    # The first character in a string is repeated, so we can use that.\n    return str[0]\n\n\nif __name__ == '__main__':\n    test_case = 'abcdabcd'\n    print(repeated_char(test_case))"
    },
    {
      "rank": 63,
      "score": 8.211579567659316,
      "candidate": "def find_repeated_character(str_to_check, char_to_check):\n    \"\"\"\n    :type str_to_check: str\n    :type char_to_check: char\n    :rtype: bool\n    \"\"\"\n    if str_to_check is None or len(str_to_check) == 0:\n        return False\n\n    char_cnt = 0\n    for char in str_to_check:\n        if char == char_to_check:\n            char_cnt += 1\n\n    return char_cnt > 1\n\ndef test_find_repeated_character():\n    assert find_repeated_character(\"abcd\", 'a') == True\n    assert find_repeated_character(\"abcd\", 'b') == True\n    assert find_repeated_character(\"abcd\", 'c') == True\n    assert find_repeated_character(\"abcd\", 'd') == False\n\nif __name__ == '__main__':\n    test_find_repeated_character()"
    },
    {
      "rank": 64,
      "score": 8.209707251476969,
      "candidate": "# Write your code here.\n\ndef repeated_characters(string):\n    \"\"\"\n    string - string to be searched for repeated characters\n    return - the first repeated character in string\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            count += 1\n    return count"
    },
    {
      "rank": 65,
      "score": 8.2048573255218,
      "candidate": "def repeated_char(string):\n    \"\"\"\n    Return the first repeated character in a given string.\n    :param string: the string\n    :return: the first repeated character\n    \"\"\"\n    counts = {}\n    for c in string:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n    return max(counts, key=counts.get)\n\nif __name__ == '__main__':\n    string = 'aabbcc'\n    print(repeated_char(string))"
    },
    {
      "rank": 66,
      "score": 8.172253082181854,
      "candidate": "def find_repeated_char(s):\n    \"\"\"\n    Find the first repeated character in the given string.\n    Input: s: a string,\n    Output: a character, or None if no repeated character found.\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] == s[0]:\n            return s[i]\n    return None\n\nif __name__ == \"__main__\":\n    s = \"abcbcd\"\n    print find_repeated_char(s)\n    print find_repeated_char(\"abcbcd\")\n    print find_repeated_char(\"abcabcabc\")\n    print find_repeated_char(\"aabbcc\")\n    print find_repeated_char(\"abcc\")\n    print find_repeated_char(\"\")\n    print find_repeated_char(s)\n    print find_repeated_char(s)\n    print find_repeated_char(\"\")\n    print find_repeated_char(\"abcd\")"
    },
    {
      "rank": 67,
      "score": 8.163300679823958,
      "candidate": "def first_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if s == '':\n        return 0\n\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            count = 0\n    return count\n\n\nif __name__ == '__main__':\n    s = 'abcabcabcabc'\n    print(first_repeated_char(s))"
    },
    {
      "rank": 68,
      "score": 8.144125099485041,
      "candidate": "def first_repeated(str):\n    \"\"\"\n    :param str: a string\n    :return: the first repeated character or None if no repeated character exists\n    \"\"\"\n    if not str:\n        return None\n\n    count = 1\n    for c in str:\n        if c == str[count - 1]:\n            count += 1\n        else:\n            break\n    return str[count - 1]\n\nif __name__ == '__main__':\n    assert first_repeated('') is None\n    assert first_repeated('a') == 'a'\n    assert first_repeated('aaa') == 'a'\n    assert first_repeated('abbc') == 'b'\n    assert first_repeated('abc') is None\n    assert first_repeated('abcabcabcabc') == 'a'"
    },
    {
      "rank": 69,
      "score": 8.143591138329747,
      "candidate": "def find_first_repeated_char(string):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n\n    Input:\n        string - A string.\n\n    Output:\n        The first repeated character.\n    \"\"\"\n\n    for i in range(len(string)):\n        if string[i] in string:\n            return string[i]\n\n    return None\n\ndef test_find_first_repeated_char():\n    assert find_first_repeated_char('abcabc') == 'a'\n    assert find_first_repeated_char('aaaa') == 'a'\n    assert find_first_repeated_char('abcabcabcabcabcabc') == 'a'\n    assert find_first_repeated_char('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 70,
      "score": 8.121884567141883,
      "candidate": "def first_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    repeated_char = ''\n    for char in string:\n        if char in repeated_char:\n            repeated_char = char\n        else:\n            repeated_char = ''\n    return repeated_char"
    },
    {
      "rank": 71,
      "score": 8.105983444291466,
      "candidate": "def repeated_char(s):\n    # write your code here\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n    return count\n\nprint repeated_char('a')\n#returns 1\n\nprint repeated_char('aa')\n#returns 2\n\nprint repeated_char('aaa')\n#returns 3\n\nprint repeated_char('aaaa')\n#returns 4\n\nprint repeated_char('aaaaa')\n#returns 5\n\nprint repeated_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
      "rank": 72,
      "score": 8.08452234024709,
      "candidate": "import sys\n\n\ndef repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a string.\n    :param string: string to search\n    :return: first repeated character\n    \"\"\"\n    # Create a list to store all character in string.\n    char_list = list()\n\n    # Append all characters in string to list.\n    for char in string:\n        char_list.append(char)\n\n    # Remove the duplicated character.\n    for i in range(len(char_list)):\n        if char_list[i] in char_list[i + 1:]:\n            char_list.remove(char_list[i])\n\n    # Find the first repeated character.\n    for i in range(len(char_list)):\n        if char_list[i] == char_list[0]:\n            return char_list[i]\n\n\nif __name__ == '__main__':\n    string = sys.stdin.readline()\n    print(repeated_char(string))"
    },
    {
      "rank": 73,
      "score": 8.024835682833125,
      "candidate": "def repeated_char(s):\n    # write your code here\n    # your code should work for both str and unicode\n\n    if not isinstance(s, str):\n        raise TypeError(\"Input should be of type str\")\n\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return s[i]\n    return None\n\nif __name__ == \"__main__\":\n    s = \"abcdabcd\"\n    print(repeated_char(s))"
    },
    {
      "rank": 74,
      "score": 7.990432406683839,
      "candidate": "def find_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] == s[i - 1]:\n            cnt += 1\n    return cnt\n\nif __name__ == '__main__':\n    s = 'aabbccdd'\n    print(find_repeated_char(s))"
    },
    {
      "rank": 75,
      "score": 7.938028884277233,
      "candidate": "def find_repeated_char(s):\n    # Complete this function\n    if not s:\n        return\n    for i in range(0, len(s)):\n        if s[i] in s[:i]:\n            return s[i]\n\ns = 'abcdefghijklmnopqrstuvwxyz'\n\nprint(find_repeated_char(s))"
    },
    {
      "rank": 76,
      "score": 7.915588979966494,
      "candidate": "def find_first_repeated(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    :param string: a string\n    :return: a character\n    \"\"\"\n    return next((x for x in string if x in string), None)\n\n\nif __name__ == '__main__':\n    assert find_first_repeated(\"hello\") == 'h'\n    assert find_first_repeated(\"hello world\") == 'w'\n    assert find_first_repeated(\"hello world hello world\") == 'h'\n    assert find_first_repeated(\"hello world hello world hello world\") == 'w'"
    },
    {
      "rank": 77,
      "score": 7.8912769574414305,
      "candidate": "# https://www.hackerrank.com/challenges/first-repeated-character/problem\n\ndef first_repeated_char(string):\n    # your code goes here\n    # Count the number of times each character occurs in the string.\n    # For example, the string \"abcabc\" has three 'a's, so the result will be 3.\n    # Note: The string will contain lowercase characters only.\n    # Return the character in the first position that occurs more than\n    # once.\n    count = {}\n    for char in string:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    for key in count:\n        if count[key] > 1:\n            return key\n    return None"
    },
    {
      "rank": 78,
      "score": 7.868947655733293,
      "candidate": "# Note: we can't use the built-in str.find() function, because it returns\n# the first index of a given character in a string, which is not what we want.\n\ndef first_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return next((i for i, c in enumerate(s) if c == s[i]), -1)\n\nif __name__ == '__main__':\n    print(first_repeated_char(\"abcabc\"))\n    print(first_repeated_char(\"aaabbb\"))\n    print(first_repeated_char(\"\"))"
    },
    {
      "rank": 79,
      "score": 7.84634113240411,
      "candidate": "def find_repeated_character(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    # write your code here\n    i = 0\n    while i < len(string):\n        if string[i] == string[i]:\n            i += 1\n        else:\n            i = i + 1\n    return i"
    },
    {
      "rank": 80,
      "score": 7.834022619458933,
      "candidate": "def repeated_char(string):\n    \"\"\"\n    >>> repeated_char(\"Aabbbbbbbccccc\")\n    'a'\n    >>> repeated_char(\"Aabbbbbbbccccc\")\n    'c'\n    >>> repeated_char(\"Aabbbbbbbccccc\")\n    'b'\n    \"\"\"\n    count = 0\n    for c in string:\n        if c == string[count]:\n            count += 1\n        else:\n            count = 0\n    return string[count]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 7.780351419995229,
      "candidate": "def findFirstRepeatedChar(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    if len(str) == 0:\n        return -1\n    if len(str) == 1:\n        return 0\n    char = str[0]\n    for i in range(1, len(str)):\n        if str[i]!= char:\n            return i\n    return -1"
    },
    {
      "rank": 82,
      "score": 7.738292593776799,
      "candidate": "def find_repeated_char(s):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n\n    Input:\n        s: str\n\n    Output:\n        int: the first repeated character in the string\n\n    Example:\n        >>> find_repeated_char(\"aabb\")\n        'a'\n        >>> find_repeated_char(\"abbba\")\n        'a'\n        >>> find_repeated_char(\"aaabbb\")\n        'a'\n        >>> find_repeated_char(\"abbba\")\n        'b'\n        >>> find_repeated_char(\"\")\n        ''\n        >>> find_repeated_char(\"aabbbb\")\n        'b'\n    \"\"\"\n    if not s:\n        return ''\n    # a is the first repeated character\n    a = s[0]\n    # b is the second repeated character\n    b = s[1]\n    # the first repeated character is the same as the first character\n    for i in range(1, len(s)):\n        if s[i] == a:\n            a = s[i]\n        elif s[i] == b:\n            b = s[i]\n    return a if a == b else ''"
    },
    {
      "rank": 83,
      "score": 7.7320703513377165,
      "candidate": "# Use the following code to calculate the first repeated character in a string\ndef first_repeated_char(string):\n    for i in range(0, len(string)):\n        if string[i] in string:\n            return string[i]\n    return None\n\nprint first_repeated_char('abcabc')\nprint first_repeated_char('abcd')\nprint first_repeated_char('ab')\nprint first_repeated_char('abab')\nprint first_repeated_char('abababab')\nprint first_repeated_char('abcdefghij')\nprint first_repeated_char('abcdabc')\nprint first_repeated_char('abcabcabc')\nprint first_repeated_char('abcdabcabc')\nprint first_repeated_char('abcdabcabcabc')\nprint first_repeated_char('abcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabc')\nprint first_repeated_char('abcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\nprint first_repeated_char('abcdabcabcabcabcabcabcabc"
    },
    {
      "rank": 84,
      "score": 7.705183449260731,
      "candidate": "def findFirstRepeatedChar(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    return str.find(str[0])\n\nif __name__ == '__main__':\n    print findFirstRepeatedChar('abcabcabcabc')"
    },
    {
      "rank": 85,
      "score": 7.5819855281879285,
      "candidate": "def first_repeated(string):\n    for i in range(0, len(string)):\n        if string[i] == string[i+1]:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    string = \"abcd\"\n    print(first_repeated(string))"
    },
    {
      "rank": 86,
      "score": 7.562924366763077,
      "candidate": "def find_first_repeated(s):\n    \"\"\"\n    Find the first repeated character in a string.\n\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return next((i for i, x in enumerate(s) if x == s[i]), None)"
    },
    {
      "rank": 87,
      "score": 7.4878043221155455,
      "candidate": "#!/usr/bin/env python\n\ndef first_repeated(s):\n    \"\"\"\n    Find the first repeated character in a given string.\n    :param s:\n    :return:\n    \"\"\"\n    count = 0\n    for c in s:\n        if c == s[count]:\n            count += 1\n        else:\n            count = 0\n    return count\n\nprint(first_repeated('Hello'))\nprint(first_repeated('Hello, World!'))\nprint(first_repeated('Hello, World!'))\nprint(first_repeated('Hello, World!'))\nprint(first_repeated('Hello, World!'))"
    },
    {
      "rank": 88,
      "score": 7.464609382504557,
      "candidate": "def first_repeated_character(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return -1\n    m = {}\n    for i, c in enumerate(s):\n        if c in m:\n            m[c] += 1\n        else:\n            m[c] = 1\n    for k, v in m.items():\n        if v > 1:\n            return k\n    return -1\n\nif __name__ == '__main__':\n    s = \"aabbccdd\"\n    print(first_repeated_character(s))\n    #>>> 2"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def find_repeated_char(string):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    if not string:\n        return -1\n\n    repeated_char = -1\n    for index, character in enumerate(string):\n        if character == string[index - 1]:\n            repeated_char = character\n    return repeated_char\n\n\ndef test_find_repeated_char():\n    assert find_repeated_char(\"aaa\") == -1\n    assert find_repeated_char(\"aaa\") == -1\n    assert find_repeated_char(\"abbccc\") == 'b'\n    assert find_repeated_char(\"abbccc\") == 'b'\n\nif __name__ == '__main__':\n    test_find_repeated_char()"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def find_repeated_char(str):\n    \"\"\"\n    Input: str = \"Hello world\"\n    Output: 'e'\n    \"\"\"\n    for i in range(len(str)):\n        if str[i] == str[0]:\n            return str[i]\n    return None\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello\") == None, \"Examples\"\n    assert find_repeated_char(\"Hello\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\") == 'e', \"Examples\"\n    assert find_repeated_char(\"Hello world\")"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://www.hackerrank.com/challenges/first-repeated-character/problem\n\ndef first_repeated_character(string):\n    \"\"\"\n    Find the first repeated character in a string.\n\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # TODO: Implement this function.\n    return ''\n\n\nif __name__ == '__main__':\n    print first_repeated_character('aaabbbccc')"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "# https://www.hackerrank.com/challenges/repeated-char\n# https://www.hackerrank.com/challenges/repeated-char-python\n\n# Complete the repeatedChar function below.\ndef repeatedChar(s):\n    # Complete the repeatedChar function below.\n    return -1\n    \n\n# The following function tests your answer.\ndef repeatedCharTest():\n    s = 'abcabcabc'\n    print(repeatedChar(s))\n\n# Test your function using the provided test cases.\n#print(repeatedCharTest())\n\nif __name__ == \"__main__\":\n    repeatedCharTest()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def find_repeated_char(s):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Input:\n        s: string\n\n    Output:\n        The first repeated character in the string.\n        If there are no repeated characters, return the string.\n    \"\"\"\n    # TODO: Implement this function.\n    # TODO: Assert that s is a string\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert that the string has at least one character\n    # TODO: Assert"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "# Write your code here.\n\n# Returns the first repeated character in a string.\ndef find_repeated_char(string):\n    for i in range(0, len(string)):\n        if string[i] == string[i - 1]:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    string = 'hello world'\n    print(find_repeated_char(string))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "# Your function should return 0 when the string has no repeated characters.\n#\n# If the string has a repeated character, then the function should return the index\n# of the first repeated character.\n#\n# For example,\n#\n# s = \"leetcode\"\n#\n# If the string \"leetcode\" has no repeated characters, then the function should return 0.\n#\n# If the string \"leetcode\" has the repeated character \"e\", then the function should return 1.\n#\n# Note: The repeated character may occur more than once in the given string.\n\nclass Solution(object):\n    def firstRepeatedChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 0\n        for i in range(1, len(s)):\n            if s[i-1] == s[i]:\n                return i\n        return 0"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# Approach 1: Using the function \"count\"\ndef repeated_char(s):\n    # Assign the variable \"count\" to be the number of times the character is repeated\n    count = 0\n    # Iterate through the string to check the character\n    for i in range(0, len(s)):\n        # Check if the character is repeated\n        if s[i] == s[i]:\n            # Increment the count variable\n            count += 1\n    # Return the count\n    return count\n\n# Approach 2: Using the function \"find\"\ndef repeated_char2(s):\n    # Find the character in the string\n    return s.find(s)\n\n# Test cases\n# Input:\n# \"Hello World\"\n# Output:\n# 3\n# Input:\n# \"World Hello\"\n# Output:\n# 1\n# Input:\n# \"Hello\"\n# Output:\n# 0\n# Input:\n# \"Hello\"\n# Output:\n# 0\n\n# Input:\n# \"Hello World\"\n# Output:\n# 3\n# Input:\n# \"World Hello\"\n# Output:\n# 1\n# Input:\n# \"Hello\"\n# Output:\n# 0\n# Input:\n# \"Hello\"\n# Output:\n# 0\n\n# Test Case 1:\n# Input:\n# \"Hello World\"\n# Output:\n# 3\n# Input:\n# \"World Hello\"\n# Output:\n# 1\n# Input:\n# \"Hello\"\n# Output:\n# 0\n# Input:\n# \"Hello\"\n# Output:\n# 0\n\n# Test Case 2:\n# Input:\n# \"Hello World\"\n# Output:\n# 3\n# Input:\n# \"World Hello\"\n# Output:\n# 1\n# Input:\n# \"Hello\"\n# Output:\n# 0\n# Input:\n# \"Hello\"\n# Output:\n# 0\n\n# Test Case 3:\n# Input:\n# \"Hello World\"\n# Output:\n# 3\n# Input:\n# \"World Hello\"\n# Output:\n# 1\n# Input:\n# \"Hello\"\n# Output:\n# 0\n# Input:\n# \"Hello\"\n# Output:\n# 0"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "import re\n\n\ndef repeated_char(string):\n    # type: (str) -> str\n    \"\"\"\n    :param string: A string.\n    :return: The first repeated character in the string.\n    \"\"\"\n    pattern = re.compile(r\"\\A\\w+\\w+\\Z\")\n    return pattern.match(string).group()\n\n\ndef repeated_char_2(string):\n    # type: (str) -> str\n    \"\"\"\n    :param string: A string.\n    :return: The first repeated character in the string.\n    \"\"\"\n    # pattern = re.compile(r\"\\A\\w+\\w+\\Z\")\n    # return pattern.match(string).group()\n    # return string.upper()\n    return string.upper()\n\n\nif __name__ == '__main__':\n    s = \"abcabc\"\n    print(repeated_char(s))\n    print(repeated_char_2(s))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def find_repeated_char(str):\n    \"\"\"\n    Write a function that returns the first repeated character in a given string.\n    \"\"\"\n    # Your code here\n    return \"-\"\n\n\nif __name__ == '__main__':\n    s = \"abcabcabcabc\"\n    print(find_repeated_char(s))\n    s = \"aababaaabbb\"\n    print(find_repeated_char(s))\n    s = \"abcabcabcabc\"\n    print(find_repeated_char(s))\n    s = \"aabbb\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\"\n    print(find_repeated_char(s))\n    s = \"abababababab\""
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def find_first_rep(string):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n\n    Input:\n    string - A string\n\n    Output:\n    first_rep - The first repeated character in the string\n    \"\"\"\n    # Your code here\n    first_rep = ''\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            first_rep = string[i]\n            break\n    return first_rep\n\nif __name__ == '__main__':\n    string = 'Hello'\n    print find_first_rep(string)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def find_repeated_char(str):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    return str.find(str[0])\n\n\n# TEST CASES\ntest_cases = [\n    ('a', 0),\n    ('abc', 0),\n    ('aaabbbb', 0),\n    ('aabbbbc', 2),\n    ('aabbbbc', 4),\n    ('aaabbbbc', 4),\n]\n\nfor test_case in test_cases:\n    print('Test case: {0}'.format(test_case))\n    assert find_repeated_char(test_case[1]) == test_case[0]"
    }
  ]
}