{
  "timestamp": "2025-09-14T20:34:09.642537",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 431,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(nums) / max(nums)\n\n# Note:\n# If all numbers are positive, sum(nums) == max(nums), and ratio is the ratio of positive numbers in nums.\n# If all numbers are negative, sum(nums) == 0, and ratio is the ratio of positive numbers in nums.\n# If there are some positive and negative numbers, sum(nums) is not equal to max(nums), and ratio is the ratio of positive numbers in nums."
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import unittest\nimport sys\nimport math\n\n# Time:  O(n)\n# Space: O(1)\n# DP\n# DP[i] stores the ratio of positive numbers in the range [0, i]\n# dp[i][j] stores the ratio of positive numbers in the range [i, j]\nclass Solution(object):\n    def ratioDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[float]\n        \"\"\"\n        dp = [[0 for _ in xrange(len(nums)+1)] for _ in xrange(len(nums)+1)]\n        for i in xrange(len(nums)):\n            for j in xrange(i, len(nums)+1):\n                dp[j][j] = 1\n                dp[i][j] = nums[i] / j\n                dp[i][j] += dp[i][j-1]\n        return dp[len(nums)]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/ratio-digits/solution/\n# Approach #1: Divide and Conquer\n# Complexity Analysis\n# Time Complexity: O(n^2), where n is the length of nums\n# Space Complexity: O(1)\n# Sorting the list is not necessary\n#\n# # Approach #2: Recursive\n# Complexity Analysis\n# Time Complexity: O(n^2), where n is the length of nums\n# Space Complexity: O(n)\n#\n# # Approach #3: DP\n# Complexity Analysis\n# Time Complexity: O(n^2), where n is the length of nums\n# Space Complexity: O(n)\n\n# DP[i] stores the ratio of positive numbers in the range [0, i]\n# dp[i][j] stores the ratio of positive numbers in the range [i, j]\n#"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                ans += 1\n        return ans / float(len(nums))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.ratio([-1, -2, 3, -2, 2])\n    print s.ratio([-1, -2, 3, -2, 2, 1])\n    print s.ratio([-1, -2, 3, -2, 2, 1, 1])"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/count-positive-integers\n\n\ndef count_positive_integers(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(count_positive_integers(arr))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: float\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        num_sum = sum(nums)\n        return num_sum / float(n)\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(Solution().ratio(nums))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Definition for an integer.\nclass Integer:\n    def __init__(self, x):\n        self.x = x\n\n    def __repr__(self):\n        return str(self.x)\n\n\nclass Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[Integer]\n        :rtype: List[Integer]\n        \"\"\"\n        nums.sort()\n        result = [1]\n        for i in range(1, len(nums)):\n            if nums[i] > 0 and nums[i] < nums[i - 1]:\n                result.append(nums[i] / nums[i - 1])\n            else:\n                result.append(1)\n        return result"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def findRation(numbers):\n\tsum = 0\n\tfor number in numbers:\n\t\tsum += number\n\treturn sum / numbers[0]\n\nif __name__ == '__main__':\n\tnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # return sum(nums) / float(len(nums))\n    return sum(1 for n in nums if n > 0) / float(len(nums))\n\nif __name__ == '__main__':\n    nums = [1, 3, 4, 5, 7, 8, 9, 10]\n    print(ratio(nums))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def ratio(self, nums):\n        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return nums[0]\n        elif n == 2:\n            return (nums[0] + nums[1]) / 2\n        else:\n            m = (nums[0] + nums[1]) / 2\n            for i in range(2, n):\n                if nums[i] > m:\n                    m = nums[i]\n            return m"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# I'm not sure I understand this, but I'm sure I'm doing it wrong.\n\ndef ratio(arr):\n    for i in range(0, len(arr)):\n        if arr[i] > 0:\n            arr[i] = arr[i] / 2\n        else:\n            arr[i] = -1\n    return arr\n\nif __name__ == '__main__':\n    arr = [1, 1, -2, 1, -1]\n    print(ratio(arr))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(nums) / len(nums)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def ratioOfPositiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                ans += 1\n        return ans"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/positive-numbers/problem\n\nimport math\n\ndef positive_numbers_in_array(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 1:\n        return 0\n\n    arr.sort()\n\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            count += 1\n\n    return count / len(arr)\n\n\nif __name__ == '__main__':\n    arr = [3, -1, 4, 1, 2, -1, -1, 4, -1, -1]\n    print(positive_numbers_in_array(arr))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def ratioPositive(self, nums):\n        if len(nums) == 0:\n            return 0\n        total = 0\n        for num in nums:\n            total += num\n        return total/len(nums)\n\nif __name__ == '__main__':\n    print(Solution().ratioPositive([-1, -2, 1, -3, 4, -5, -6, 7, 8, 9, -10, 11]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import math\n\n# https://www.hackerrank.com/challenges/positive-integers/problem\n\n# Returns the ratio of the positive numbers in the array\ndef positive_ratio(nums):\n    positive_num = 0\n    negative_num = 0\n    for num in nums:\n        if num > 0:\n            positive_num += 1\n        elif num < 0:\n            negative_num += 1\n\n    return positive_num / (positive_num + negative_num)\n\n# Returns the ratio of the positive numbers in the array\ndef positive_ratio2(nums):\n    positive_num = 0\n    negative_num = 0\n    for num in nums:\n        if num > 0:\n            positive_num += 1\n        elif num < 0:\n            negative_num += 1\n\n    return positive_num / (positive_num + negative_num)\n\n# Returns the ratio of the positive numbers in the array\ndef positive_ratio3(nums):\n    positive_num = 0\n    for num in nums:\n        if num > 0:\n            positive_num += 1\n\n    return positive_num / len(nums)\n\n# Returns the ratio of the positive numbers in the array\ndef positive_ratio4(nums):\n    positive_num = 0\n    for num in nums:\n        if num > 0:\n            positive_num += 1\n\n    return positive_num / len(nums)\n\n# Returns the ratio of the positive numbers in the array\ndef positive_ratio5(nums):\n    positive_num = 0\n    for num in nums:\n        if num > 0:\n            positive_num += 1\n        elif num < 0:\n            positive_num += 1\n\n    return positive_num / (positive_num + negative_num)\n\n# Returns the ratio of the positive numbers in the array\ndef positive_ratio6(nums):\n    positive_num = 0\n    negative_num = 0\n    for num in nums:\n        if num > 0:\n            positive_num += 1\n        elif num < 0:\n            negative_num += 1\n\n    return positive_num / (positive_num + negative_num)"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def positive_numbers(arr):\n    total = 0\n    for i in arr:\n        if i > 0:\n            total += i\n    return total\n\nprint(positive_numbers([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def ratio_positive(arr):\n    return sum(arr) / float(sum(arr) + sum(arr[::-1]))\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(ratio_positive(arr))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "#%%\nimport numpy as np\nfrom numpy import arange\nfrom numpy import ones\nfrom numpy import array\n\ndef find_ratio(num_array):\n    \"\"\"\n    Find the ration of positive numbers in an array of integers.\n    \n    Inputs:\n    num_array = the array of integers\n    \n    Outputs:\n    ratio = the ration of positive numbers in the array\n    \"\"\"\n    \n    # initialize the ratio to be 1\n    ratio = 1\n    \n    # for each number in the array, if it is positive\n    for num in num_array:\n        # if the number is positive\n        if num > 0:\n            # update the ratio\n            ratio = ratio * num\n    \n    # return the ratio\n    return ratio\n\n\n#%%\ndef test_find_ratio():\n    \"\"\"\n    Test the function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    \n    # initialize the array\n    num_array = np.array([1, 2, 3, 4, -1, -2, -3, -4, -5])\n    \n    # test the ratio\n    ratio = find_ratio(num_array)\n    \n    # check the ratio\n    print(\"The ration of positive numbers in the array is: \", ratio)\n    \n    # check the ratio\n    print(\"The ration of positive numbers in the array is: \", ratio)\n    \n    # check the ratio\n    print(\"The ration of positive numbers in the array is: \", ratio)\n    \n    # check the ratio\n    print(\"The ration of positive numbers in the array is: \", ratio)\n    \n    # check the ratio\n    print(\"The ration of positive numbers in the array is: \", ratio)\n    \n    # check the ratio\n    print(\"The ration of positive numbers in the array is: \", ratio)\n    \n    # check the ratio\n    print(\"The ration of positive numbers in the array is: \", ratio)\n    \n    # check the ratio\n    print(\"The ration of positive numbers in the array is: \", ratio)\n    \n    # check the ratio\n    print(\"The ration of positive numbers in the array is: \", ratio)\n    \n    # check the"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "import sys\nimport collections\n\nclass Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # TODO\n        return 0\n\ndef main():\n    sol = Solution()\n    nums = [1,2,3,4,5]\n    print sol.ratio(nums)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 9.986027844747118,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: float\n        \"\"\"\n        return sum(nums) / float(sum(nums))\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.ratio([1, 2, 3, 4, 5, 6]))\n    print(sol.ratio([1, 2, 3, 4, 5]))\n    print(sol.ratio([1, -1, 2, -2, 3, -3]))"
    },
    {
      "rank": 21,
      "score": 9.927592999101112,
      "candidate": "def ratio(nums):\n\tratio = 0\n\tfor i in nums:\n\t\tif i > 0:\n\t\t\tratio += 1\n\treturn ratio/len(nums)\n\nnums = [1,2,3,4,5,6,7,8,9,10,11,12]\nprint(ratio(nums))"
    },
    {
      "rank": 22,
      "score": 9.91432796374337,
      "candidate": "def ratio(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(ratio([1, -1, 2, -3, 4, -5, 6, -7, 8, -9]))"
    },
    {
      "rank": 23,
      "score": 9.911947242810252,
      "candidate": "# https://www.hackerrank.com/challenges/counting-primes/problem\n\n# We are given an array of positive integers. We need to count the number of\n# positive numbers in this array. We can use any number of functions that we\n# have implemented to count the number of prime numbers.\n\ndef countPrimes(nums):\n    # count the number of primes\n    primes = 0\n    for i in range(1, nums):\n        if nums[i] % i == 0:\n            primes += 1\n\n    return primes\n\n# Test Cases\n\n# input\n# nums = [2, 3, 4, 5, 6]\n# output\n# countPrimes(nums) == 3\n# countPrimes(nums) == 2\n# countPrimes(nums) == 1\n# countPrimes(nums) == 0\n\n# input\n# nums = [1, 2, 4, 5, 6]\n# output\n# countPrimes(nums) == 2\n# countPrimes(nums) == 1\n# countPrimes(nums) == 0\n\n# input\n# nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# output\n# countPrimes(nums) == 1\n# countPrimes(nums) == 0\n\n# input\n# nums = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n# output\n# countPrimes(nums) == 0\n\n# input\n# nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# output\n# countPrimes(nums) == 0\n\n# input\n# nums = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n# output\n# countPrimes(nums) == 1\n\n# input\n# nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# output\n# countPrimes(nums) == 0\n\n# input\n# nums = [0, 0, 0, 0, 0,"
    },
    {
      "rank": 24,
      "score": 9.908680183857898,
      "candidate": "def positive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: float\n    \"\"\"\n    return sum(numbers) / float(len(numbers))\n\nif __name__ == '__main__':\n    print(positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(positive_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n    print(positive_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0]))"
    },
    {
      "rank": 25,
      "score": 9.883387133318312,
      "candidate": "def ratio_positive_numbers(nums):\n  nums = sorted(nums)\n  return len(nums) / float(len(nums))\n\nif __name__ == '__main__':\n  print ratio_positive_numbers([1,2,3,4,5,6,7,8,9,10,11,12,13])"
    },
    {
      "rank": 26,
      "score": 9.882569558720178,
      "candidate": "def find_positive_numbers(numbers):\n    for i in range(len(numbers)):\n        if numbers[i] < 0:\n            return False\n    return True\n\n\ndef main():\n    numbers = [5, -1, -2, 3, -4, 4]\n    print(find_positive_numbers(numbers))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 9.820350879325684,
      "candidate": "from utils import is_prime\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 2 or n == 3:\n        return True\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    if n < 27:\n        return True\n    if n % 5 == 0:\n        return False\n    if n < 81:\n        return True\n    if n % 7 == 0:\n        return False\n    if n < 97:\n        return True\n    if n % 11 == 0:\n        return False\n    if n < 127:\n        return True\n    if n % 13 == 0:\n        return False\n    if n < 151:\n        return True\n    if n % 17 == 0:\n        return False\n    if n < 181:\n        return True\n    if n % 19 == 0:\n        return False\n    if n < 191:\n        return True\n    if n % 23 == 0:\n        return False\n    if n < 223:\n        return True\n    if n % 29 == 0:\n        return False\n    if n < 251:\n        return True\n    if n % 31 == 0:\n        return False\n    if n < 263:\n        return True\n    if n % 37 == 0:\n        return False\n    if n < 281:\n        return True\n    if n % 41 == 0:\n        return False\n    if n < 283:\n        return True\n    if n % 43 == 0:\n        return False\n    if n < 383:\n        return True\n    if n % 47 == 0:\n        return False\n    if n < 391:\n        return True\n    if n % 53 == 0:\n        return False\n    if n < 397:\n        return True\n    if n % 59 == 0:\n        return False\n    if n < 521:\n        return True\n    if n % 61 == 0:\n        return False\n    if n < 701:\n        return True\n    if n % 73 == 0:\n        return False\n    if n < 767:\n        return True\n    if n % 79 == 0:"
    },
    {
      "rank": 28,
      "score": 9.81690498948537,
      "candidate": "def findRation(nums):\n    # Write your code here\n    return len(nums) / (len(nums) - 1)\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    print(findRation(nums))"
    },
    {
      "rank": 29,
      "score": 9.797874614873278,
      "candidate": "def ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: float\n    \"\"\"\n    return float(len(nums)) / len(nums)"
    },
    {
      "rank": 30,
      "score": 9.780707863596021,
      "candidate": "import math\n\ndef ratio(nums):\n    return math.ceil(float(len(nums)) / 2.0)\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(ratio(nums))"
    },
    {
      "rank": 31,
      "score": 9.765750910931667,
      "candidate": "from collections import Counter\n\ndef positive_number_in_array(numbers):\n    positive_numbers = [x for x in numbers if x > 0]\n    return len(positive_numbers)\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(positive_number_in_array(numbers))"
    },
    {
      "rank": 32,
      "score": 9.645870610546728,
      "candidate": "def ratio(nums):\n    return sum(nums) / len(nums)\n\nif __name__ == \"__main__\":\n    print(ratio([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 33,
      "score": 9.5874927377072,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def ratio(self, nums):\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        \n        nums.sort()\n        mid = nums[len(nums)/2]\n        \n        if mid < 0:\n            return 0\n        \n        return mid / sum(nums[:len(nums)/2])"
    },
    {
      "rank": 34,
      "score": 9.56852936013765,
      "candidate": "class Solution:\n    # @param nums, a list of integers\n    # @return an integer\n    def findRation(self, nums):\n        if not nums:\n            return 0\n        nums.sort()\n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i]\n        return sum / len(nums)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.findRation([1,2,3]))\n    print(sol.findRation([2,3,4]))\n    print(sol.findRation([1,2,3,4]))\n    print(sol.findRation([3,2,1,3]))\n    print(sol.findRation([3,2,1,4]))\n    print(sol.findRation([4,2,3,4]))\n    print(sol.findRation([4,2,3,4,5]))\n    print(sol.findRation([1,2,3,4,5,6]))\n    print(sol.findRation([1,2,3,4,5,6,7]))\n    print(sol.findRation([1,2,3,4,5,6,7,8]))"
    },
    {
      "rank": 35,
      "score": 9.5238709765113,
      "candidate": "def positive_numbers(nums):\n    return [i for i in nums if i > 0]\n\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5,6,7]\n    print positive_numbers(nums)"
    },
    {
      "rank": 36,
      "score": 9.482007440929612,
      "candidate": "class Solution(object):\n    def fractionalPart(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return n % 2"
    },
    {
      "rank": 37,
      "score": 9.444348207376752,
      "candidate": "def positive_number_in_array(nums):\n    return nums[0] if nums[0] > 0 else 0\n\nnums = [2, 4, 5, 7, 8, 9, 11, 12, 13]\nprint(positive_number_in_array(nums))"
    },
    {
      "rank": 38,
      "score": 9.25382070458346,
      "candidate": "# https://oj.leetcode.com/problems/count-positive-integers/\n# Given an array of non-negative integers, return the ratio of the number of 1's to the number of 0's.\n# The solution set must not contain more than one 1 and at most one 0.\n\n# Example\n# Given [1, 0, 1, 2, 1, 0, 3], return 4/7.\n# The solution set is {1, 0, 1, 2, 1}.\n\n# Note:\n# The length of the array is in range [1, 10000].\n# The integer in the array is in the range [0, 10000].\n\n# import time\n# start = time.time()\n# def count(arr):\n#     return sum(arr) - sum(filter(lambda x: x == 1, arr)) - sum(filter(lambda x: x == 0, arr))\n# print count([1, 0, 1, 2, 1, 0, 3])\n# print \"Time elapsed: %fs\" % (time.time() - start)\n\n# Solution:\n# 1. find the number of 1's.\n# 2. find the number of 0's.\n# 3. calculate the ratio of the two numbers.\n# 4. return the ratio.\n\ndef count(arr):\n    count = sum(arr)\n    num1 = sum(filter(lambda x: x == 1, arr))\n    num0 = sum(filter(lambda x: x == 0, arr))\n    return count - num1 - num0\n\n# print count([1, 0, 1, 2, 1, 0, 3])\nprint count([1, 0, 1, 2, 1, 0, 3])"
    },
    {
      "rank": 39,
      "score": 9.224848123305652,
      "candidate": "import math\n\ndef ratio(numbers):\n    return len(filter(lambda x: x > 0, numbers)) / float(len(numbers))\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230"
    },
    {
      "rank": 40,
      "score": 9.148534089560748,
      "candidate": "def positive_numbers_in_array(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums_sorted = sorted(nums)\n    count = 0\n    for i in range(len(nums_sorted)):\n        if nums_sorted[i] > 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 0, -3, 4]\n    print(positive_numbers_in_array(nums))"
    },
    {
      "rank": 41,
      "score": 9.13656089935413,
      "candidate": "def ratio(nums):\n    result = 1\n    for i in nums:\n        result = result * i\n    return result\n\nif __name__ == '__main__':\n    nums = [2,3,4,5,6,7,8,9]\n    print(ratio(nums))"
    },
    {
      "rank": 42,
      "score": 9.129807879828055,
      "candidate": "import time\nstart_time = time.time()\n\ndef ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums = sorted(nums)\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count / len(nums)\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 5, 6, 7, 8, 9]\n    print(ratio(nums))\n    print(time.time() - start_time)"
    },
    {
      "rank": 43,
      "score": 9.054752457301316,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        nums.sort()\n        return len(nums) / sum(nums)"
    },
    {
      "rank": 44,
      "score": 8.920149446242958,
      "candidate": "def positive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n\n    return count / len(numbers)\n\nif __name__ == '__main__':\n    assert positive_numbers([1, 2, -1, -1, 2, -2]) == 2.0\n    assert positive_numbers([2, 3, 4, 5, -1]) == 0.5\n    assert positive_numbers([1, 2, 3, 4, 5]) == 0.0\n    assert positive_numbers([1, 2, 3, 4, 5, -1, -2]) == 0.5"
    },
    {
      "rank": 45,
      "score": 8.883439751649506,
      "candidate": "from collections import Counter\n\ndef find_ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: float\n    \"\"\"\n    if not nums:\n        return 0\n    count = Counter(nums)\n    total = sum(count.values())\n    if total == 0:\n        return 0\n    return float(count[1]) / total\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print(find_ratio(nums))"
    },
    {
      "rank": 46,
      "score": 8.814589654890879,
      "candidate": "def positive_numbers_in_array(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    total = 0\n    for x in arr:\n        if x > 0:\n            total += 1\n    return total\n\nif __name__ == '__main__':\n    arr = [1,2,4,5,6,7,8]\n    print(positive_numbers_in_array(arr))\n    arr = [-1, 0, 1, 2, 3, 4]\n    print(positive_numbers_in_array(arr))\n    arr = [0, 1, 2, 3, 4, 5]\n    print(positive_numbers_in_array(arr))\n    arr = [-2, -1, 0, 1, 2, 3, 4, 5]\n    print(positive_numbers_in_array(arr))\n    arr = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(positive_numbers_in_array(arr))\n    arr = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(positive_numbers_in_array(arr))\n    arr = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(positive_numbers_in_array(arr))"
    },
    {
      "rank": 47,
      "score": 8.814300571413295,
      "candidate": "def positive_ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in nums:\n        if i > 0:\n            sum += i\n    return sum/len(nums)\n\nif __name__ == '__main__':\n    print(positive_ratio([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 48,
      "score": 8.776754405442379,
      "candidate": "def positive_numbers_in_array(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in array:\n        if i > 0:\n            result += 1\n    return result\n\n\nif __name__ == '__main__':\n    assert positive_numbers_in_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n    assert positive_numbers_in_array([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n    assert positive_numbers_in_array([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 10\n    assert positive_numbers_in_array([]) == 0\n    assert positive_numbers_in_array([-1]) == 0\n    assert positive_numbers_in_array([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == 10\n    assert positive_numbers_in_array([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == 10\n    assert positive_numbers_in_array([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == 10"
    },
    {
      "rank": 49,
      "score": 8.735904286589756,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return len(nums) / len(filter(lambda x: x > 0, nums))\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1, -1, -2, 0, 2]\n    print s.ratio(nums)"
    },
    {
      "rank": 50,
      "score": 8.68859646405813,
      "candidate": "def find_ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count * 1.0 / len(nums)\n\nif __name__ == \"__main__\":\n    nums = [1, -1, 2, 3, -4, -5, 6, 7]\n    print(find_ratio(nums))"
    },
    {
      "rank": 51,
      "score": 8.6679658132995,
      "candidate": "def positive_number_in_array(numbers):\n    return sum(numbers) > 0\n\nprint(positive_number_in_array([-1, 0, 1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 52,
      "score": 8.613508552699997,
      "candidate": "# write your code here\n\ndef positive_numbers(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for num in nums:\n        if num > 0:\n            result += num\n    return result\n\nif __name__ == \"__main__\":\n    print(positive_numbers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(positive_numbers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(positive_numbers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(positive_numbers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(positive_numbers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(positive_numbers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(positive_numbers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))"
    },
    {
      "rank": 53,
      "score": 8.60718065571588,
      "candidate": "import random\nimport math\n\ndef ratio_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: float\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum/len(nums)\n\nif __name__ == \"__main__\":\n    nums = [random.randint(1, 100) for _ in range(500)]\n    print(ratio_positive(nums))"
    },
    {
      "rank": 54,
      "score": 8.60514510162473,
      "candidate": "from itertools import combinations\n\ndef positive_numbers(arr):\n    return [x for x in arr if x > 0]\n\n\ndef get_positive_numbers_ratio(arr):\n    return len(positive_numbers(arr)) / len(arr)\n\n\ndef main():\n    arr = [1, 2, 3, -1, -2, -3]\n    print(get_positive_numbers_ratio(arr))\n\n    arr = [2, 4, 5, -1, -2, -3]\n    print(get_positive_numbers_ratio(arr))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.599072674750252,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: float\n        \"\"\"\n        # TODO: write a more efficient way\n        return sum(nums) / float(sum(abs(n-nums)))\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [1, 2, 3, -1, -2, -3]\n    print sol.ratio(nums)"
    },
    {
      "rank": 56,
      "score": 8.593512988576048,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: float\n        \"\"\"\n        return len(nums) / float(sum(nums))"
    },
    {
      "rank": 57,
      "score": 8.538433062196585,
      "candidate": "import math\n\ndef is_even(number):\n    return number % 2 == 0\n\ndef is_odd(number):\n    return number % 2 == 1\n\ndef ratio(numbers):\n    ratio = float(0)\n    for number in numbers:\n        if is_even(number):\n            ratio += 1\n        elif is_odd(number):\n            ratio += 2\n    return ratio / float(sum(numbers))\n\ndef main():\n    numbers = [3,5,1,3,4,5,7]\n    print(ratio(numbers))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 8.521560170979932,
      "candidate": "import math\n\ndef ratio(nums):\n    return sum(nums) / sum(filter(lambda x: x > 0, nums))\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    print(ratio(nums))"
    },
    {
      "rank": 59,
      "score": 8.438370693312374,
      "candidate": "import math\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    num_pos = sum(1 for i in numbers if i > 0)\n    num_neg = sum(1 for i in numbers if i < 0)\n    print(num_pos / num_neg)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.412039889733295,
      "candidate": "def ratio(nums):\n    sum_positive = 0\n    sum_negative = 0\n    for num in nums:\n        if num > 0:\n            sum_positive += num\n        else:\n            sum_negative += num\n    return (sum_positive + sum_negative) / (sum_positive + sum_negative)\n\nif __name__ == '__main__':\n    nums = [5, -3, -3, 4, -1, 0, -1, -1, -1, -1, -1]\n    print ratio(nums)"
    },
    {
      "rank": 61,
      "score": 8.392402717369736,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def ratioOfPositive(self, nums):\n        if not nums:\n            return 0\n        maxNum = max(nums)\n        minNum = min(nums)\n        if maxNum == 0:\n            return 0\n        else:\n            return float(maxNum) / float(maxNum - minNum)"
    },
    {
      "rank": 62,
      "score": 8.382225508917411,
      "candidate": "def positive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(1 for x in numbers if x > 0)\n\nif __name__ == '__main__':\n    assert positive_numbers([1, 2, 3, 4, 5]) == 5"
    },
    {
      "rank": 63,
      "score": 8.339082813817313,
      "candidate": "def positive_numbers_in_array(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(numbers)\n\nif __name__ == '__main__':\n    numbers = [1, 1, 2, 3, 4, 5]\n    print(positive_numbers_in_array(numbers))"
    },
    {
      "rank": 64,
      "score": 8.31318225703747,
      "candidate": "def ratio(nums):\n\t# write your code here\n\tnums.sort()\n\tpos = 0\n\tfor i in range(len(nums)):\n\t\tif nums[i] > 0:\n\t\t\tpos += 1\n\treturn pos / len(nums)\n\nif __name__ == \"__main__\":\n\tprint ratio([1,2,3,4])\n\tprint ratio([0,0,0,0,0,0])\n\tprint ratio([1,2,3,4,5])\n\tprint ratio([-1,-2,-3,-4,-5])\n\tprint ratio([1,2,3,4,5,6])\n\tprint ratio([-1,-2,-3,-4,-5,-6])\n\tprint ratio([1,2,3,4,5,6,7])\n\tprint ratio([-1,-2,-3,-4,-5,-6,-7])"
    },
    {
      "rank": 65,
      "score": 8.305298875311397,
      "candidate": "def ratio_positive(nums):\n    total = sum(nums)\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/float(total)\n\ndef ratio_negative(nums):\n    total = sum(nums)\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count/float(total)\n\nnums = [1,2,-1,2,-1,-2,3]\nprint(ratio_positive(nums))\nprint(ratio_negative(nums))"
    },
    {
      "rank": 66,
      "score": 8.271157418257102,
      "candidate": "class Solution(object):\n    def fractionalPart(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: float\n        \"\"\"\n        ans = 0\n        for num in nums:\n            ans += num\n        ans /= nums[0]\n        return ans"
    },
    {
      "rank": 67,
      "score": 8.235906482678837,
      "candidate": "def count_positive_numbers(nums):\n    return sum(1 for n in nums if n > 0)\n\ndef main():\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(count_positive_numbers(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 68,
      "score": 8.234866055337829,
      "candidate": "# http://www.geeksforgeeks.org/count-positive-numbers-in-an-array-of-integers/\n# https://www.youtube.com/watch?v=r-n8jYX_Fb0\ndef positive_numbers(arr):\n    # positive numbers are in the range [1, n]\n    n = len(arr)\n    # count the number of positive numbers in the array\n    num_pos = 0\n    for num in arr:\n        if num > 0:\n            num_pos += 1\n    return num_pos / n\n\n# print(positive_numbers([2, -1, 4, 1, 0, 3, 5, 2, -1]))\n# print(positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 69,
      "score": 8.228816037414065,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return len(nums) / sum(nums)\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.ratio(nums)"
    },
    {
      "rank": 70,
      "score": 8.199472218408113,
      "candidate": "import sys\n\n\ndef ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            res += 1\n    return res / len(nums)\n\n\nif __name__ == '__main__':\n    nums = map(int, sys.stdin.readline().split())\n    print(ratio(nums))"
    },
    {
      "rank": 71,
      "score": 8.173676468941217,
      "candidate": "from collections import Counter\n\n\ndef ratio(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: float\n    \"\"\"\n    return Counter(numbers).most_common(1)[0][0]\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, -1, 3, 4, 5]\n    print(ratio(numbers))"
    },
    {
      "rank": 72,
      "score": 8.15414055487214,
      "candidate": "# https://www.hackerrank.com/challenges/sorting-an-array/problem\n\nfrom collections import Counter\nfrom random import randint\n\n\ndef main():\n    N = int(input())\n    array = list(map(int, input().split()))\n    counter = Counter(array)\n    for num in array:\n        if num > 0:\n            counter[num] += 1\n    print(sum(counter.values()))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 8.139829544306764,
      "candidate": "import math\n\ndef num_in_array(array):\n    total = 0\n    for i in range(len(array)):\n        if array[i] > 0:\n            total += 1\n    return total\n\ndef ratio(array):\n    positive = num_in_array(array)\n    return float(positive)/len(array)\n\nprint(ratio([1, 2, 3]))\nprint(ratio([1, 2, 3, 4]))"
    },
    {
      "rank": 74,
      "score": 8.120514550666826,
      "candidate": "from collections import Counter\n\n\ndef ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(nums) / len(nums)\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print ratio(nums)\n    print Counter(nums).most_common()"
    },
    {
      "rank": 75,
      "score": 8.066796558994257,
      "candidate": "def find_ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n\n    max_num = max(nums)\n    sum = 0\n    for num in nums:\n        sum += num\n        if num > max_num:\n            break\n\n    if sum == 0:\n        return 0\n\n    ratio = nums[0]/sum\n\n    return ratio\n\n\nif __name__ == '__main__':\n    print(find_ratio([1,2,3,4]))"
    },
    {
      "rank": 76,
      "score": 7.988670440293954,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef ratio(nums):\n    return float(sum(nums)) / float(max(nums))\n\ndef main():\n    nums = [1, 2, 3, 4, 5]\n    print ratio(nums)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 7.9264973346044085,
      "candidate": "def ratio(array):\n    # write your code here\n    if not array:\n        return 0\n    sum = 0\n    for num in array:\n        if num > 0:\n            sum += 1\n    return sum/len(array)"
    },
    {
      "rank": 78,
      "score": 7.9061514636081425,
      "candidate": "# https://github.com/kdave/leetcode/blob/master/leetcode.py\n\nclass Solution:\n    # @param nums: A list of integers\n    # @return: An integer\n    def ratio(self, nums):\n        nums.sort()\n        return nums[-1] / nums[0] if len(nums) > 1 else 0\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.ratio([1, 2, 2, 4, 5])"
    },
    {
      "rank": 79,
      "score": 7.8089077788435635,
      "candidate": "from functools import reduce\n\n\ndef ratio(nums):\n    return reduce(lambda x, y: x * y, nums) / reduce(lambda x, y: x + y, nums)\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(ratio(nums))"
    },
    {
      "rank": 80,
      "score": 7.779109548779102,
      "candidate": "def get_ratio(nums):\n    nums = sorted(nums)\n    n = len(nums)\n    ratio = 0\n    for i in range(0, n):\n        if nums[i] > 0:\n            ratio += 1\n        else:\n            break\n    return ratio / n\n\n\nif __name__ == '__main__':\n    nums = [3, 1, 4, -5, 2]\n    print get_ratio(nums)"
    },
    {
      "rank": 81,
      "score": 7.66823141981358,
      "candidate": "#!/usr/bin/python\n\nclass Solution:\n    def ratio(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        nums = [1] * len(arr)\n        for i in range(len(arr)):\n            if arr[i] > 0:\n                nums[i] = arr[i]\n        return sum(nums) / len(arr)\n\nif __name__ == '__main__':\n    arr = [1, 2, 0, 1, 3, 4]\n    sol = Solution()\n    print sol.ratio(arr)"
    },
    {
      "rank": 82,
      "score": 7.651076374531215,
      "candidate": "# This is a practice problem, so we'll have a limit on the input size\nMAX_SIZE = 100\n\ndef positive_numbers(arr):\n    \"\"\"\n    Input:\n        arr: A list of integers\n    Output:\n        The ratio of positive numbers in the input list\n    Explanation:\n        The ratio of positive numbers in an array of integers is the ratio of the number of positive integers\n        in the array divided by the number of negative integers in the array.\n    \"\"\"\n    # if there are no positive numbers, return 0\n    if len(arr) == 0:\n        return 0\n    # count the number of positive numbers\n    num_pos = 0\n    for x in arr:\n        if x > 0:\n            num_pos += 1\n    # count the number of negative numbers\n    num_neg = 0\n    for x in arr:\n        if x < 0:\n            num_neg += 1\n    # return the ratio\n    return num_pos / num_neg\n\ndef main():\n    # generate a sample list of positive integers\n    arr = [x for x in range(1, MAX_SIZE + 1)]\n    print(positive_numbers(arr))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 7.562592888698545,
      "candidate": "def ratio_positive(numbers):\n    return sum(numbers) / float(sum(numbers))\n\nif __name__ == '__main__':\n    numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(ratio_positive(numbers))"
    },
    {
      "rank": 84,
      "score": 7.26555914760406,
      "candidate": "import math\n\n\ndef ratio(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return math.floor(math.log10(sum(nums)) / math.log10(2)) + 1\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    print(ratio(nums))"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "# https://oj.leetcode.com/problems/ratio-of-positive-integers/\n# Given an integer array nums of n integers, return the ratio of the integers in nums that are positive.\n#\n# Example 1:\n#\n# Input: nums = [1,2,0]\n# Output: 1/3\n# Example 2:\n#\n# Input: nums = [-1,-2]\n# Output: 1\n# Example 3:\n#\n# Input: nums = [-1, 0, -1, 2, 1]\n# Output: 1/6\n# Note:\n# You may assume the array does not change.\n# There are many calls to your function.\n#\n\n# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    # @param {Interval[]} intervals\n    # @return {float}\n    def ratio(self, intervals):\n        if not intervals:\n            return 0\n        n = len(intervals)\n        # Sort the intervals by start\n        intervals.sort(key=lambda i: i.start)\n        # Store the max and min\n        min = intervals[0].start\n        max = intervals[0].end\n        for i in xrange(1, n):\n            if intervals[i].start < min:\n                min = intervals[i].start\n            if intervals[i].end > max:\n                max = intervals[i].end\n        # Calculate the ratio\n        return max - min"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "# https://www.hackerrank.com/challenges/array-sum-of-integers-positive\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-small\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large-small\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large-small-large\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large-small-large-large\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large-small-large-large-large\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large-small-large-large-large-large\n\n# Complete the function below.\ndef find_ratio(nums, k):\n    # Complete this function using the given parameters.\n    if k < 0:\n        return 0\n\n    if k == 0:\n        return 1\n\n    if k > nums:\n        return 0\n\n    return (float(k)/nums)\n\n\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-small\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large-small\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large-small-large\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large-small-large-large\n# https://www.hackerrank.com/challenges/array-sum-of-integers-positive-large-small-large-large-large\n# https://www.hackerrank"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n#!/usr/bin"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "import math\nimport unittest\nfrom collections import Counter\nfrom math import ceil\n\n# TESTS\nclass Test(unittest.TestCase):\n    def test_positive_numbers(self):\n        self.assertEqual(find_positive_numbers(range(10)), 5)\n        self.assertEqual(find_positive_numbers(range(11)), 1)\n        self.assertEqual(find_positive_numbers(range(12)), 0)\n\n    def test_negative_numbers(self):\n        self.assertEqual(find_positive_numbers(range(10, -1, -1)), 0)\n        self.assertEqual(find_positive_numbers(range(10, -1, -2)), 0)\n        self.assertEqual(find_positive_numbers(range(10, -1, -3)), 0)\n        self.assertEqual(find_positive_numbers(range(10, -1, -4)), 0)\n        self.assertEqual(find_positive_numbers(range(10, -1, -5)), 0)\n        self.assertEqual(find_positive_numbers(range(10, -1, -6)), 0)\n        self.assertEqual(find_positive_numbers(range(10, -1, -7)), 0)\n        self.assertEqual(find_positive_numbers(range(10, -1, -8)), 0)\n        self.assertEqual(find_positive_numbers(range(10, -1, -9)), 0)\n        self.assertEqual(find_positive_numbers(range(10, -1, -10)), 0)\n\n    def test_positive_numbers_with_one_extra(self):\n        self.assertEqual(find_positive_numbers(range(10, 11)), 1)\n        self.assertEqual(find_positive_numbers(range(10, 11, 1)), 1)\n        self.assertEqual(find_positive_numbers(range(10, 11, 2)), 1)\n        self.assertEqual(find_positive_numbers(range(10, 11, 3)), 1)\n        self."
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "# https://www.hackerrank.com/challenges/array-ratio-of-positive-numbers\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input\n# 2. Output\n# 3. Example\n\n# 1. Input"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: float\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        for i in range(n):\n            if nums[i] < 0:\n                nums[i] = 0\n        sum = 0\n        for i in range(n):\n            sum += nums[i]\n        return sum / float(n)\n\n\nif __name__ == \"__main__\":\n    assert Solution().ratio([1, 2, 3, 4, -1, -2, -3, -4]) == 2.0"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n@author: jaybao\n@date: 2020/5/1\n\"\"\"\n\nclass Solution(object):\n    def ratio(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: float\n        \"\"\"\n        if n <= 0:\n            return 0\n        return float(n) / sum(1 for x in range(1, n + 1))\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.ratio(3))\n    print(solution.ratio(0))\n    print(solution.ratio(100))\n    print(solution.ratio(200))\n    print(solution.ratio(123))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def ratio(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals:\n            return 0\n        sorted_intervals = sorted(intervals, key=lambda x: x.start)\n        max_end = sorted_intervals[-1].end\n        min_start = sorted_intervals[0].start\n        for interval in sorted_intervals[1:]:\n            if interval.end > max_end:\n                max_end = interval.end\n            elif interval.start < min_start:\n                min_start = interval.start\n        return max_end - min_start"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "#\n# TODO:\n#\n# - Use array.count()\n# - Test your function\n#\n#\n\ndef positive_numbers_in_array(numbers):\n    \"\"\"\n    :type numbers: list[int]\n    :rtype: float\n    \"\"\"\n    return numbers.count(1) / float(len(numbers))\n\n\nif __name__ == '__main__':\n    print(positive_numbers_in_array([-1, 0, 1, 2, 3]))\n    print(positive_numbers_in_array([-1, 0, 1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "# TODO:\n# 1. Sort the array\n# 2. Keep track of the max and min numbers\n# 3. Use a hashmap to find the index of the min and max numbers\n# 4. Use the above function to find the ratio of the numbers\n# 5. Add a function to find the ratio of the numbers in a list of lists\n\ndef positive_numbers(arr):\n    \"\"\"\n    Find the ratio of the numbers in an array of integers.\n\n    :param arr: The array of integers\n    :return: The ratio of the numbers in the array\n    \"\"\"\n    return float(sum(arr)) / len(arr)\n\n\ndef positive_numbers_hashmap(arr):\n    \"\"\"\n    Find the ratio of the numbers in an array of integers.\n\n    :param arr: The array of integers\n    :return: The ratio of the numbers in the array\n    \"\"\"\n    # Create a hashmap to store the max and min numbers\n    max_num = max(arr)\n    min_num = min(arr)\n\n    # Create a list to store the ratios\n    ratios = []\n\n    # For each number in the array\n    for num in arr:\n        # If the number is equal to the max number, add the number to the list\n        if num == max_num:\n            ratios.append(num)\n\n        # If the number is equal to the min number, add the number to the list\n        elif num == min_num:\n            ratios.append(num)\n\n    # Return the ratio of the list\n    return float(sum(ratios)) / len(ratios)\n\n\ndef positive_numbers_list(arr):\n    \"\"\"\n    Find the ratio of the numbers in an array of integers.\n\n    :param arr: The array of integers\n    :return: The ratio of the numbers in the array\n    \"\"\"\n    # Create a list to store the ratios\n    ratios = []\n\n    # For each number in the array\n    for num in arr:\n        # If the number is equal to the max number, add the number to the list\n        if num == arr[0]:\n            ratios.append(num)\n\n        # If the number is equal to the min number, add the number to the list\n        elif"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def ratio(self, nums):\n        if nums == None or len(nums) == 0:\n            return 0\n        sum = 0\n        for n in nums:\n            sum += n\n        return sum/float(len(nums))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        return nums[-1] / nums[0]\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.ratio([-1, -2, 1, 4, -3, -5, 6, -7, 8, -9]))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def positive_numbers_in_array(arr):\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            return False\n    return True\n\ndef positive_numbers_in_array_2(arr):\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            return False\n        if arr[i] == 0:\n            return False\n    return True\n\ndef positive_numbers_in_array_3(arr):\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            return False\n        if arr[i] == 0:\n            return False\n        if arr[i] == 1:\n            return False\n    return True\n\nif __name__ == '__main__':\n    arr = [1, 2, -3, 4, 5, 6, -7, 8, -9]\n    print(positive_numbers_in_array(arr))\n    print(positive_numbers_in_array_2(arr))\n    print(positive_numbers_in_array_3(arr))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# https://www.hackerrank.com/challenges/positive-numbers-in-an-array/problem\n\n# The function should return the ratio of positive numbers in an array of integers.\n\n# Example 1:\n# Input: [1,2,3]\n# Output: 1/3\n# Explanation: 1, 2, 3 are all positive numbers.\n\n# Example 2:\n# Input: [4,1,3,-1,2]\n# Output: 2/4\n# Explanation: -1, 2 are negative numbers, while the rest are positive numbers.\n\n# Note:\n# The length of the array will be in the range [0, 10000].\n# All the integers in the array will be in the range [-10000, 10000].\n# The numbers in the array are in the range [-10000, 10000].\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\nclass Solution(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return sum(nums) / len(nums)\n\n# Time Limit Exceeded\nclass Solution2(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return sum(nums) / len(nums)\n\n# Time Limit Exceeded\nclass Solution3(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return sum(nums) / len(nums)\n\n# Time Limit Exceeded\nclass Solution4(object):\n    def ratio(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return sum(nums) / len(nums)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.ratio([1,2,3])"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# Example\n# Given [1, 2, 3, 4, 5], return 2.0\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {float}\n    def ratio(self, nums):\n        if not nums or len(nums) == 1:\n            return 1.0\n        sum = 0\n        for num in nums:\n            sum += num\n        return float(sum) / len(nums)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "import sys\nsys.path.append('..')\n\ndef positive_numbers(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            total += 1\n    return total\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, -1, -2, 0]\n    print(positive_numbers(nums))"
    }
  ]
}