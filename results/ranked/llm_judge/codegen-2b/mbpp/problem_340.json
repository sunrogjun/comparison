{
  "timestamp": "2025-09-14T19:53:42.251375",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 340,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import math\n\ndef firstOccurrence(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not arr or k < 1:\n        return 0\n\n    # sort the array and find the first index where the number is k\n    arr = sorted(arr)\n    i = 0\n    while i < len(arr) and arr[i]!= k:\n        i += 1\n\n    return i\n\ndef main():\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    k = 5\n    print(firstOccurrence(arr, k))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import sys\n\ndef findKth(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    def find_kth_helper(arr, k, i):\n        if i == len(arr):\n            return arr[i]\n        else:\n            if k == 1:\n                return arr[i]\n            else:\n                return min(find_kth_helper(arr, k - 1, i + 1), find_kth_helper(arr, k - 1, i))\n    return find_kth_helper(arr, k, 0)\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    k = 3\n    print findKth(arr, k)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def firstOccurK(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # Note: you can use the range function in python to generate all the elements\n    # in the range(0, len(arr) - 1)\n    # http://stackoverflow.com/questions/9662768/python-count-the-number-of-occurrences-of-a-value-in-an-array\n\n    # count the number of elements in arr greater than k\n    # for each element in arr, count the number of elements greater than k in arr\n    # sum up the count of elements greater than k in arr\n    # return the first element in arr greater than k\n    # note: if k is greater than the number of elements in arr, return -1\n    # for example:\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # k = 3\n    # then k-th element is 3, so return 1\n    # k = 10\n    # then k-th element is 10, so return -1\n    # return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 - 1 = 10\n    # return sum(arr > k) - 1\n    # note: sum(arr > k) is the number of elements greater than k in arr\n    # return sum(arr > k) - 1\n    # note: sum(arr > k) is the number of elements greater than k in arr\n    # return sum(arr > k) - 1\n    # note: sum(arr > k) is the number of elements greater than k in arr\n    # return sum(arr > k) - 1\n    # note: sum(arr > k) is the number of elements greater than k in arr\n    # return sum(arr > k) - 1\n    # note: sum(arr > k) is the number of elements greater than k in arr\n    # return sum(arr > k) - 1\n    # note: sum(arr > k) is the number of elements greater than k in arr\n    # return sum(arr > k) - 1\n    # note: sum(arr >"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def kth_element(a, k):\n    \"\"\"\n    :param a: an array\n    :param k: an integer\n    :return: the first element occurring k times\n    \"\"\"\n    # write your code here\n    if len(a) == 0:\n        return None\n    else:\n        return a[0]\n\na = [2, 3, 1, 3, 3, 4, 4, 4, 4, 5, 6, 7]\nprint(kth_element(a, 4))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import sys\n\ndef find_first_k_element(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return -1\n    if k == 1:\n        return arr[0]\n    elif k == 2:\n        return min(arr[0], arr[1])\n    elif k == 3:\n        return min(arr[0], min(arr[1], arr[2]))\n    elif k == 4:\n        return min(arr[0], min(arr[1], min(arr[2], arr[3])))\n    elif k == 5:\n        return min(arr[0], min(arr[1], min(arr[2], min(arr[3], arr[4]))))\n    elif k == 6:\n        return min(arr[0], min(arr[1], min(arr[2], min(arr[3], min(arr[4], arr[5])))))\n    elif k == 7:\n        return min(arr[0], min(arr[1], min(arr[2], min(arr[3], min(arr[4], min(arr[5], arr[6])))))\n    elif k == 8:\n        return min(arr[0], min(arr[1], min(arr[2], min(arr[3], min(arr[4], min(arr[5], min(arr[6], arr[7])))))\n    elif k == 9:\n        return min(arr[0], min(arr[1], min(arr[2], min(arr[3], min(arr[4], min(arr[5], min(arr[6], min(arr[7], arr[8])))))\n    elif k == 10:\n        return min(arr[0], min(arr[1], min(arr[2], min(arr[3], min(arr[4], min(arr[5], min(arr[6], min(arr[7], min(arr[8], arr[9])))))\n    elif k == 11:\n        return min(arr[0], min(arr["
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_first_k(A, k):\n    \"\"\"\n    :type A: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 0\n    elif k == 1:\n        return A.index(max(A))\n    elif k > len(A):\n        return len(A)\n    elif k > 1:\n        return A.index(max(A[:k]))\n    else:\n        return A.index(max(A[:k-1]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def findKthElement(nums, k):\n    nums.sort()\n    return nums[k-1]\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 3\n    print findKthElement(nums, k)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_kth(arr, k):\n\t\"\"\"\n\tInput:\n\t\tarr: an array of numbers\n\t\tk: the number of elements to be searched\n\tOutput:\n\t\tthe first element in arr that occurs k times\n\t\"\"\"\n\t# write your code here\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/challenges/first-element-k-times\n\t# https://www.hackerrank.com/"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def first_k(arr, k):\n    '''\n    :type arr: list[int]\n    :type k: int\n    :rtype: int\n    '''\n    i = 0\n    while i < len(arr) - k + 1:\n        j = i + k - 1\n        while j < len(arr) and arr[j] == arr[i]:\n            j += 1\n        if j == len(arr):\n            return arr[i]\n        i += 1\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(first_k(arr, 2))\n    print(first_k(arr, 3))\n    print(first_k(arr, 4))\n    print(first_k(arr, 5))\n    print(first_k(arr, 6))\n    print(first_k(arr, 7))\n    print(first_k(arr, 8))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_kth(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) < k:\n        return -1\n    pivot = arr[k]\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        while i < j and arr[i] < pivot:\n            i += 1\n        while i < j and arr[j] > pivot:\n            j -= 1\n        if arr[i] > pivot:\n            arr[i], arr[j] = arr[j], arr[i]\n        else:\n            return i\n        \n    return i\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 1, 2, 3, 4, 5, 6, 7]\n    print(find_kth(arr, 3))\n    arr = [1, 3, 5, 7, 9, 11, 13, 15]\n    print(find_kth(arr, 3))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def first_k_elements(arr, k):\n    \"\"\"\n    :param arr: The input array\n    :param k: The number of elements to be found\n    :return: The first k elements\n    \"\"\"\n\n    for i in range(len(arr)):\n        if i >= k:\n            break\n        if arr[i] == arr[i-k]:\n            return arr[i-k]\n\n    return None\n\n\ndef test_first_k_elements():\n    assert first_k_elements([1,1,1,2,3,3,3,4,5,5,5,5,5,5,6,6,7,7,8,8,9,10,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def find_first_k_times(array, k):\n    if len(array) < k:\n        return None\n    else:\n        return min(find_first_k_times(array[1:], k), find_first_k_times(array[:-1], k))\n\nif __name__ == \"__main__\":\n    array = [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    print(find_first_k_times(array, 2))\n    print(find_first_k_times(array, 3))\n    print(find_first_k_times(array, 4))\n    print(find_first_k_times(array, 5))\n    print(find_first_k_times(array, 6))\n    print(find_first_k_times(array, 7))\n    print(find_first_k_times(array, 8))\n    print(find_first_k_times(array, 9))\n    print(find_first_k_times(array, 10))\n    print(find_first_k_times(array, 11))\n    print(find_first_k_times(array, 12))\n    print(find_first_k_times(array, 13))\n    print(find_first_k_times(array, 14))\n    print(find_first_k_times(array, 15))\n    print(find_first_k_times(array, 16))\n    print(find_first_k_times(array, 17))\n    print(find_first_k_times(array, 18))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def findKth(a, k):\n    \"\"\"\n    :type a: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(a)\n    left = 0\n    right = n-1\n    while left < right:\n        mid = left + (right - left) / 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] < k:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\nif __name__ == '__main__':\n    a = [3, 2, 1, 2, 3, 1, 2, 4, 5, 6]\n    print(findKth(a, 3))\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(findKth(a, 10))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def find_kth_element(arr, k):\n    \"\"\"\n    :type arr: list\n    :type k: int\n    :rtype: int\n    \"\"\"\n    def helper(arr, k, i, j):\n        while i < j:\n            mid = (i + j) // 2\n            if arr[mid] == arr[i]:\n                i = mid + 1\n            elif arr[mid] < arr[i]:\n                j = mid\n            else:\n                i = mid + 1\n        return arr[i]\n    return helper(arr, k, 0, len(arr) - 1)\n\n\n# test cases\ntest_cases = [\n    ([1,2,3,4,5,6,7,8,9,10], 1, 2, 5),\n    ([1,2,3,4,5,6,7,8,9,10], 2, 4, 5),\n    ([1,2,3,4,5,6,7,8,9,10], 3, 6, 10),\n    ([1,2,3,4,5,6,7,8,9,10], 4, 10, 10)\n]\n\nfor test_case in test_cases:\n    print(\"First element of kth element in list:\", find_kth_element(*test_case))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def firstOccurringElement(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) < k:\n        return -1\n    else:\n        return arr[0]\n\n\n\n# Your FirstOccurringElement solution should also have a unit test.\n# See https://github.com/codewars/CodeWarsSolutions/blob/master/src/CodeWarsSolutions/Python/FirstOccurringElement.py"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def find_first_k_times(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n < k:\n        return -1\n\n    dic = {i: 0 for i in range(n)}\n    for i in range(n):\n        dic[arr[i]] += 1\n\n    for i in range(n):\n        if dic[arr[i]] < k:\n            dic[arr[i]] += 1\n        else:\n            return i\n\n    return -1"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import sys\n\ndef find_first(arr, k):\n    return arr.index(arr[0])\n\n\ndef find_first_recursive(arr, k):\n    if k == 1:\n        return arr[0]\n\n    if len(arr) == 1:\n        return arr[0]\n\n    for i in range(0, len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            return arr[i]\n\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Please provide the number of times you want to find the first element.\")\n        return\n\n    k = int(sys.argv[1])\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def first_k_elements(arr, k):\n\tif k == 0:\n\t\treturn 0\n\telif k == 1:\n\t\treturn arr[0]\n\telse:\n\t\tfor i in range(k):\n\t\t\tif arr[i] == arr[i+1]:\n\t\t\t\treturn arr[i]\n\t\treturn arr[k-1]\n\nif __name__ == \"__main__\":\n\tarr = [1,2,3,4,5,6,7,8,9,10]\n\tprint first_k_elements(arr, 3)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# The function takes in an array of integers and returns the first element occurring k times.\n\n# Example 1:\n# Input: [1,2,3,1,2,3,4,3,2,1], k=3\n# Output: 3\n# Example 2:\n# Input: [1,2,3,1,2,3,4,3,2,1], k=5\n# Output: 1\n\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def firstUnique(self, nums, k):\n        if len(nums) < k:\n            return -1\n\n        first = nums[0]\n        for i in range(1, k):\n            first = min(first, nums[i])\n        return first\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,1,2,3,4,3,2,1]\n    k = 3\n    print(Solution().firstUnique(nums, k))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def firstK(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(array)):\n        if array[i] == k:\n            count += 1\n            if count == k:\n                return i\n    return -1\n\nif __name__ == '__main__':\n    print(firstK([1,2,3,4,5,6,7,8,9], 3))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef find_first_k(arr, k):\n    \"\"\"\n    Find the first element occurring k times in a given array.\n\n    Input: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef findFirstOccurrence(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # This solution uses a hash table to store the first k-1 occurrences\n    # The idea is to keep track of the current position and the previous\n    # position of the current element\n    hash_table = {}\n    for i in range(len(array)):\n        if i not in hash_table:\n            hash_table[i] = array[i]\n        else:\n            hash_table[i] += 1\n        if hash_table[i] == k:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    array = [1,2,3,4,5,6,7,8,9,10]\n    print(findFirstOccurrence(array, 5))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def find_kth_element(arr, k):\n    \"\"\"\n    For input arr, find the kth element in the array\n    arr: list of integers\n    k: integer\n    returns: the kth element in the array\n    \"\"\"\n    return arr[k-1]\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 3\n    print(find_kth_element(arr, k))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def findKth(arr, k):\n    if len(arr) <= k:\n        return arr[0]\n    else:\n        return findKth(arr[k:], k)\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(findKth(arr, 3))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def findKth(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) < k:\n        return -1\n    if len(arr) == k:\n        return arr[0]\n    if len(arr) % k == 0:\n        return findKth(arr[k:], k)\n    else:\n        return findKth(arr[k:], k-1)\n\nif __name__ == '__main__':\n    arr = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def findKthElement(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # https://leetcode.com/problems/find-k-th-element-in-sorted-array/discuss/2970/Python-Solution-using-Sort-and-Binary-Search-Using-Binary-Search-Recursion-and-2D-Array\n    # https://leetcode.com/problems/find-k-th-element-in-sorted-array/discuss/89565/Python-solution-with-explanation-using-sorting-and-binary-search-recursion-and-2D-array\n    # https://discuss.leetcode.com/topic/44962/python-solution-using-sorting-and-binary-search-recursion-and-2D-array\n    # https://discuss.leetcode.com/topic/46286/python-solution-using-sorting-and-binary-search-recursion-and-2D-array\n    # https://discuss.leetcode.com/topic/44963/python-solution-using-sorting-and-binary-search-recursion-and-2D-array\n    # https://discuss.leetcode.com/topic/48963/python-solution-using-sorting-and-binary-search-recursion-and-2D-array\n    # https://discuss.leetcode.com/topic/44962/python-solution-using-sorting-and-binary-search-recursion-and-2D-array\n    # https://discuss.leetcode.com/topic/44963/python-solution-using-sorting-and-binary-search-recursion-and-2D-array\n    # https://discuss.leetcode.com/topic/48963/python-solution-using-sorting-and-binary-search-recursion-and-2D-array\n    # https://discuss.leetcode.com/topic/44963/python-solution"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def first_k_occurring(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return arr.index(arr[0])\n\nif __name__ == \"__main__\":\n    print(first_k_occurring([3, 1, 2, 4], 2))\n    print(first_k_occurring([1, 2, 3, 4, 5], 3))\n    print(first_k_occurring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 15))\n    print(first_k_occurring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 15))\n    print(first_k_occurring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 15))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(n)\n\ndef firstK(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not arr or k < 1:\n        return -1\n    \n    # sort the array\n    arr.sort()\n    \n    # first k elements\n    first = arr[0:k]\n    # the last k elements\n    last = arr[-k:]\n    \n    # find the first element that occurs k times\n    for i in range(len(first)):\n        if first[i] == last[i]:\n            return first[i]\n    \n    return -1"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# -*- coding: utf-8 -*-\n\nimport timeit\n\n\ndef first_occur_k(arr, k):\n    \"\"\"\n    :param arr: Array of integers\n    :param k: Integer value to search for\n    :return: The first element occurring k times\n    \"\"\"\n    i = 0\n    for i in range(len(arr)):\n        if arr[i] == k:\n            if i + 1 > k:\n                return arr[i]\n            else:\n                return arr[i] + first_occur_k(arr, k - 1)\n    return None\n\n\nif __name__ == \"__main__\":\n    print(timeit.timeit(\"first_occur_k(arr, 10)\", setup=\"from __main__ import first_occur_k\", number=1))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def find_first_k_elements(arr, k):\n    return [i for i in arr if arr.count(i) == k]\n\n# Your function should return the first k elements\n# for arr in [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef firstOccurringK(arr, k):\n    \"\"\"\n    :param arr: An array of integers\n    :param k: An integer\n    :return: The first element occurring k times in arr\n    \"\"\"\n    # Use a temporary array to hold the result\n    result = np.zeros(len(arr), dtype=np.int)\n    # Initialize the result array to 0\n    result[:] = 0\n    # For each element of arr, check whether it has already appeared k times\n    for i in range(len(arr)):\n        # If it has, add it to the result array\n        if arr[i] in result:\n            result[arr[i]] += 1\n    # Return the first element with the highest value in result\n    return np.argmax(result)\n\ndef test_firstOccurringK():\n    assert firstOccurringK([1, 2, 3, 4, 5], 3) == 2\n    assert firstOccurringK([1, 2, 3, 4, 5], 4) == 3\n    assert firstOccurringK([1, 2, 3, 4, 5], 5) == 0\n    assert firstOccurringK([1, 2, 3, 4, 5], 2) == 0\n    assert firstOccurringK([1, 2, 3, 4, 5], 1) == 0\n\ndef main():\n    test_firstOccurringK()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def kthElement(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return arr[k-1]"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef first_k_occurrences(array, k):\n    \"\"\"\n    For a given array and a k, return the first element occurring k times.\n    >>> first_k_occurrences([1,2,3,4,5,6,7,8,9,10], 3)\n    5\n    >>> first_k_occurrences([1,2,3,4,5,6,7,8,9,10], 1)\n    1\n    >>> first_k_occurrences([1,2,3,4,5,6,7,8,9,10], 4)\n    None\n    \"\"\"\n    \n    # If the array is empty, return None\n    if not array:\n        return None\n    \n    # If the array is of length 1, return the first element\n    if len(array) == 1:\n        return array[0]\n    \n    # If the array is of length 2, return the first element if it occurs k times\n    if len(array) == 2:\n        if array[0] == k:\n            return array[0]\n        elif array[1] == k:\n            return array[1]\n    \n    # Iterate over the array and check if the first element occurs k times\n    for i in range(len(array)):\n        if array[i] == k:\n            return array[i]\n    \n    # If the array is of length more than 2, return the first element if it occurs k times\n    for i in range(len(array)):\n        if array[i] == k:\n            return array[i]\n    \n    # If the array is of length more than 2, return the first element if it occurs k times\n    for i in range(len(array)):\n        if array[i] == k:\n            return array[i]\n    \n    # If the array is of length more than 2, return the first element if it occurs k times\n    for i in range(len(array)):\n        if array[i] == k:\n            return array[i]\n    \n    # If the array is of length more than 2, return the first element if it occurs k times"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def find_kth_element(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(array) == 0:\n        return 0\n    else:\n        if len(array) == 1:\n            return array[0]\n        else:\n            mid = len(array) / 2\n            left = find_kth_element(array[:mid], k)\n            right = find_kth_element(array[mid:], k)\n            if right > left:\n                return right\n            else:\n                return left\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5]\n    print(find_kth_element(array, 3))\n    print(find_kth_element(array, 5))\n    print(find_kth_element(array, 7))\n    print(find_kth_element(array, 8))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def first_k(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return arr.index(max(arr)) % k\n\nprint(first_k([1, 2, 3, 4, 5, 6, 7], 3))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def find_first_element(arr, k):\n    \"\"\"\n    :type arr: list\n    :type k: int\n    :rtype: int\n    \"\"\"\n    k = k - 1\n    # We can do this with a binary search if we know that the list is sorted.\n    # We do not because the list is unsorted.\n    for i in range(len(arr)):\n        if k == 0:\n            return arr[i]\n        else:\n            k = k - 1\n            if arr[i] > arr[i - 1]:\n                k = k + 1\n    return -1\n\n# Your find_first_element solution here.\n\nif __name__ == '__main__':\n    print find_first_element([1, 2, 3, 4, 5, 6], 2)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def first_k_elements(a, k):\n    # write your code here\n    i = 0\n    for i in range(len(a)):\n        if len(set(a)) == k:\n            break\n        a.remove(a[i])\n    return a[i]\n\nif __name__ == \"__main__\":\n    print first_k_elements([1, 2, 3, 4, 5], 2)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def firstK(arr, k):\n    if len(arr) <= k:\n        return -1\n\n    # count the number of elements in arr that are k times\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == k:\n            count += 1\n\n    # return the first element occurring k times\n    for i in range(len(arr)):\n        if count == k:\n            return arr[i]\n        count -= 1\n\n    return -1\n\nif __name__ == '__main__':\n    arr = [2, 3, 1, 2, 2, 3, 1, 4, 2, 2, 2, 3, 2, 1, 1, 2, 1]\n    print(firstK(arr, 3))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def first_k_elements(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    if k > len(arr):\n        return []\n\n    return arr[0:k]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import time\n\ndef first_k_element(array, k):\n    if len(array) < k:\n        return None\n    if k == 0:\n        return array[0]\n    \n    left = 0\n    right = len(array) - 1\n\n    while left < right:\n        mid = (left + right) / 2\n        if array[mid] == array[mid - 1]:\n            left = mid + 1\n        elif array[mid] < array[mid - 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return array[left]\n\n# time = timeit.Timer('first_k_element(array, k)', 'from __main__ import array, k')\n# print(time.timeit(first_k_element, 'from __main__ import array, k'))\n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(first_k_element(array, 3))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def first_k(arr, k):\n    for i in range(len(arr)):\n        if i > k-1:\n            break\n        if arr[i] == arr[i-k]:\n            return i\n\nprint(first_k([1, 2, 3, 1, 2, 3], 2))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_first(arr, k):\n    for i in range(len(arr)):\n        if arr[i] == arr[i] and i > k:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    print find_first([1, 2, 2, 3, 3, 3, 4, 5], 3)\n    print find_first([1, 2, 2, 3, 3, 3, 4, 5], 5)\n    print find_first([1, 2, 2, 3, 3, 3, 4, 5], 6)\n    print find_first([1, 2, 2, 3, 3, 3, 4, 5], 7)\n    print find_first([1, 2, 2, 3, 3, 3, 4, 5], 8)\n    print find_first([1, 2, 2, 3, 3, 3, 4, 5], 9)\n    print find_first([1, 2, 2, 3, 3, 3, 4, 5], 10)\n    print find_first([1, 2, 2, 3, 3, 3, 4, 5], 11)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# Your code here\ndef firstOccurrence(self, arr, k):\n    n = len(arr)\n    if n < k:\n        return -1\n    m = 0\n    for i in range(n):\n        if arr[i] == k:\n            m += 1\n            if m == k:\n                return i\n    return -1"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def findKth(arr, k):\n\t\"\"\"\n\tInput: arr is a list of integers\n\tk is an integer\n\tOutput: the first element occurring k times in arr\n\t\"\"\"\n\t#print arr\n\t#print k\n\tif len(arr) == 0:\n\t\treturn -1\n\t\n\tif k == 1:\n\t\treturn arr[0]\n\tif k > len(arr):\n\t\treturn -1\n\n\tleft = 0\n\tright = len(arr) - 1\n\tmid = 0\n\n\twhile left <= right:\n\t\tmid = left + (right - left) / 2\n\t\tif arr[mid] == k:\n\t\t\treturn arr[mid]\n\t\telif arr[mid] < k:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\n\treturn -1"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def find_kth(arr, k):\n    '''\n    Input: arr - a list of integers\n    k - the number of times the element should be in the list\n    Output: the index of the first element\n    '''\n    # write your code here\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n\n    if k > len(arr):\n        return -1\n\n    mid = len(arr) / 2\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) / 2\n        if arr[mid] == arr[left]:\n            if mid == k:\n                return mid\n            elif mid < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        elif arr[mid] < arr[left]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    if arr[left] == arr[k]:\n        if k == left:\n            return left\n        elif k < left:\n            return find_kth(arr[:k], k)\n        else:\n            return find_kth(arr[k+1:], k-left-1)\n    else:\n        return find_kth(arr[left+1:], k)\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(find_kth(arr, 3))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_kth(arr, k):\n    assert len(arr) > 0\n    assert k > 0\n    assert k <= len(arr)\n    \n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if arr[mid] == arr[left]:\n            right = mid - 1\n        elif arr[mid] > arr[left]:\n            left = mid + 1\n        elif arr[mid] < arr[left]:\n            right = mid - 1\n        else:\n            return mid\n    return left\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    k = 3\n    assert find_kth(arr, k) == 4"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_k_th_element(arr, k):\n    if len(arr) < k:\n        return -1\n    else:\n        return arr.index(arr[arr.index(arr[0]) + k - 1]) + 1\n\ndef main():\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(find_k_th_element(arr, 3))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def findKthElement(my_array, k):\n    \"\"\"\n    For given array and k value, return the first element occurring k times.\n    :param my_array:\n    :param k:\n    :return:\n    \"\"\"\n\n    if len(my_array) <= k:\n        return my_array[0]\n\n    # sort the array\n    my_array.sort()\n\n    # find the first element\n    for i in range(len(my_array)):\n        if i == k:\n            return my_array[i]\n\n        if my_array[i] < my_array[k]:\n            return my_array[i]\n\n    return None"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef find_kth(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) / 2\n    if arr[mid] == k:\n        return arr[mid]\n    if arr[mid] < k:\n        return find_kth(arr[:mid], k)\n    else:\n        return find_kth(arr[mid:], k - arr[mid])\n\nif __name__ == '__main__':\n    arr = [3, 1, 1, 3, 2, 3, 3, 2]\n    k = 3\n    print find_kth(arr, k)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def firstOccurrence(arr, k):\n\t# This is an O(N) solution.\n\t# For the number of elements k, we need to search through the array,\n\t# and remember the first k elements we find.\n\t# The idea is that we will search for k elements at a time,\n\t# and keep track of the first k elements we find,\n\t# if they are not found in the array, we will search for the first element\n\t# in the array again.\n\t# The idea is that we will not have to search for k elements in a given array\n\t# more than once,\n\t# thus we will not need to search for k elements in the array more than once.\n\t#\n\t# Here is a solution using a stack.\n\t# For the number of elements k, we will need to search for k elements at a time.\n\t# So, we will keep track of the first k elements we find,\n\t# and when we find a new element, we will remove the first k elements\n\t# we have found, and start searching from the beginning again.\n\t# We will never search for k elements in the array more than once.\n\n\t# Here is an example.\n\t# arr = [1,2,3,4,5,6,7,8,9,10]\n\t# k = 3\n\t# FirstOccurrence(arr, k)\n\t# # arr[0]\n\t# # arr[1]\n\t# # arr[2]\n\t# # arr[3]\n\t# # arr[4]\n\t# # arr[5]\n\t# # arr[6]\n\t# # arr[7]\n\t# # arr[8]\n\t# # arr[9]\n\t# # arr[10]\n\t# # arr[11]\n\t# # arr[12]\n\t# # arr[13]\n\t# # arr[14]\n\t# # arr[15]\n\t# # arr[16]\n\t# # arr[17]\n\t# # arr[18]\n\t# # arr[19]\n\t# # arr[20]\n\t# # arr[21]\n\t# # arr[22]\n\t# # arr[23]\n\t# # arr[24]"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def find_first_k(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(array) < k:\n        return 0\n    return find_first_k(array[:k], k) + k\n\n\nif __name__ == '__main__':\n    assert find_first_k([1, 2, 3, 4], 2) == 2\n    assert find_first_k([1, 2, 3, 4, 5], 3) == 3\n    assert find_first_k([1, 2, 3, 4, 5], 4) == 4\n    assert find_first_k([1, 2, 3, 4, 5], 5) == 5\n    assert find_first_k([1, 2, 3, 4, 5], 6) == 5\n    assert find_first_k([1, 2, 3, 4, 5], 7) == 5\n    assert find_first_k([1, 2, 3, 4, 5], 8) == 5\n    assert find_first_k([1, 2, 3, 4, 5], 9) == 5"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def first_occurring(arr, k):\n    \"\"\"\n    arr: list\n    k: int\n    returns: first element occurring k times\n    \"\"\"\n    for i in range(len(arr)):\n        if k == 0:\n            return arr[i]\n        elif arr[i] == arr[i-1]:\n            k -= 1\n        else:\n            return arr[i-1]\n\n# test cases\narr = [2, 3, 2, 3, 4, 3]\nk = 2\nprint first_occurring(arr, k)\narr = [2, 3, 2, 3, 4, 3, 3, 2]\nk = 3\nprint first_occurring(arr, k)\narr = [2, 3, 2, 3, 4, 3, 3, 2, 2]\nk = 3\nprint first_occurring(arr, k)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import unittest\nfrom time import time\n\n\ndef find_kth(arr, k):\n    # write your code here\n    n = len(arr)\n    if n <= k:\n        return arr[0]\n    else:\n        pivot = arr[k - 1]\n        left = [x for x in arr[0:k] if x < pivot]\n        right = [x for x in arr[k:] if x < pivot]\n        if len(left) == 0:\n            return arr[k]\n        if len(right) == 0:\n            return arr[0]\n        return find_kth(left, k)\n\n\nclass TestCases(unittest.TestCase):\n    def test_find_kth(self):\n        arr = [1, 2, 3, 4, 5, 6, 7]\n        n = len(arr)\n        start = time()\n        print find_kth(arr, n)\n        end = time()\n        print \"Time taken: %f\" % (end - start)\n        self.assertEqual(find_kth(arr, n), 6)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def first_element_k(array, k):\n    \"\"\"\n    :type array: list[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    for i in range(k):\n        for j in range(len(array)):\n            if array[j] == i:\n                return j\n    return -1\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 5\n    print(first_element_k(array, k))\n    k = 6\n    print(first_element_k(array, k))\n    k = 7\n    print(first_element_k(array, k))\n    k = 8\n    print(first_element_k(array, k))\n    k = 9\n    print(first_element_k(array, k))\n    k = 10\n    print(first_element_k(array, k))\n    k = 11\n    print(first_element_k(array, k))\n    k = 12\n    print(first_element_k(array, k))\n    k = 13\n    print(first_element_k(array, k))\n    k = 14\n    print(first_element_k(array, k))\n    k = 15\n    print(first_element_k(array, k))\n    k = 16\n    print(first_element_k(array, k))\n    k = 17\n    print(first_element_k(array, k))\n    k = 18\n    print(first_element_k(array, k))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_first_k(arr, k):\n    for i in range(len(arr)):\n        if arr[i] == k:\n            return i\n    return -1\n\n# Your code here\nprint find_first_k([1,2,3,4,5,6], 3)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_kth(arr, k):\n    \"\"\"\n    :type arr: list[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n < k:\n        return -1\n    elif k == 1:\n        return arr[0]\n    else:\n        for i in range(k - 1):\n            arr = arr[i+1:] + arr[:i+1]\n            if arr[k-1] == arr[0]:\n                return arr[k-1]\n        return arr[k-1]\n\n# Your code here\n\n# Note:\n# A solution using a heap is possible, but its not the best solution.\n# The problem is that the heap is not always used.\n# A solution that uses a heap is probably not the best solution.\n# This solution is still faster than the one using a heap,\n# but its not the best solution.\n\n# It could be that the solution using a heap is better than the one using a heap."
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def findKth(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return binarySearch(array, 0, len(array) - 1, k)\n\ndef binarySearch(array, start, end, k):\n    if start == end:\n        return start\n    mid = (start + end) / 2\n    if array[mid] == k:\n        return mid\n    if array[mid] < k:\n        return binarySearch(array, start, mid - 1, k)\n    else:\n        return binarySearch(array, mid + 1, end, k)\n\nif __name__ == \"__main__\":\n    print findKth([1,2,3,4,5,6,7,8,9], 3)\n    print findKth([1,2,3,4,5,6,7,8,9], 2)\n    print findKth([1,2,3,4,5,6,7,8,9], 7)\n    print findKth([1,2,3,4,5,6,7,8,9], 0)\n    print findKth([1,2,3,4,5,6,7,8,9], 10)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def first_k(arr, k):\n    \"\"\"\n    :param arr:\n    :param k:\n    :return:\n    \"\"\"\n\n    # find the first k elements of arr\n    n = len(arr)\n    start = 0\n    end = n - 1\n    while start < end:\n        mid = (start + end) / 2\n        if arr[mid] == arr[start]:\n            start = mid + 1\n        else:\n            end = mid\n\n    if arr[start] == k:\n        return start\n\n    return -1\n\n\narr = [1, 3, 3, 2, 2, 4, 1, 3, 3, 2, 2, 4]\nk = 3\n\nprint first_k(arr, k)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def first_k_occurring(a, k):\n    return kth_element(a, k)\n\n\ndef kth_element(a, k):\n    if len(a) == 0:\n        return None\n    if k > len(a):\n        return None\n\n    if k == 1:\n        return a[0]\n\n    pivot_index = partition(a, k)\n\n    if pivot_index == k-1:\n        return a[k-1]\n\n    return kth_element(a[:pivot_index+1], k-1)\n\n\ndef partition(a, k):\n    pivot_index = k-1\n    pivot = a[pivot_index]\n    pivot_index = k\n\n    for i in range(k, len(a)):\n        if a[i] < pivot:\n            a[i], a[pivot_index] = a[pivot_index], a[i]\n            pivot_index -= 1\n\n    a[pivot_index], a[k] = a[k], a[pivot_index]\n\n    return pivot_index\n\n\n# If k is an integer\ndef test_first_k_occurring(a, k):\n    return first_k_occurring(a, k)\n\n\nif __name__ == \"__main__\":\n    a = [1, 3, 4, 6, 5, 1, 1, 1]\n    print(first_k_occurring(a, 2))\n    print(first_k_occurring(a, 5))\n    print(test_first_k_occurring(a, 1))\n    print(test_first_k_occurring(a, 2))\n    print(test_first_k_occurring(a, 3))\n    print(test_first_k_occurring(a, 5))\n    print(test_first_k_occurring(a, 7))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import sys\n\ndef find_k_times(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # https://www.youtube.com/watch?v=5K5l2ZzfH4U\n    # https://www.youtube.com/watch?v=bCxV4YXJUj4\n    # https://www.youtube.com/watch?v=JZdQYW9y6b8\n    # https://www.youtube.com/watch?v=0t3Zs3eoYg0\n    # https://www.youtube.com/watch?v=JzUeYv_cKVg\n    # https://www.youtube.com/watch?v=5h6aBcB_pB0\n    # https://www.youtube.com/watch?v=e-9UeQkKlG4\n    # https://www.youtube.com/watch?v=dHt9jbk_sZ0\n    # https://www.youtube.com/watch?v=V_Zf-YpVdXc\n    # https://www.youtube.com/watch?v=aOzs-2kcWQ0\n    # https://www.youtube.com/watch?v=nWfv4K_rNnY\n    # https://www.youtube.com/watch?v=8bVbQD8wU-0\n    # https://www.youtube.com/watch?v=6ZvXsM2Nvw0\n    # https://www.youtube.com/watch?v=WbD6BJzJ5qM\n    # https://www.youtube.com/watch?v=nZl2ZL6f8LQ\n    # https://www.youtube.com/watch?v=d8eZtM2vQQ0\n    # https://www.youtube.com/watch?v=HrW0QjFbwOQ\n    # https://www.youtube.com/watch?v=XZ3fD3tZY"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def firstOccurringElement(a, k):\n    # write your code here\n    for i in range(len(a)):\n        if i < len(a) - k:\n            if a[i] == a[i + k]:\n                return a[i]\n    return None"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def first_k(arr, k):\n    for i in range(0, len(arr)):\n        if arr[i] == k:\n            return i\n\n    return -1\n\nprint(first_k([1,2,3,4,5], 2))\nprint(first_k([1,2,3,4,5], 3))\nprint(first_k([1,2,3,4,5], 4))\nprint(first_k([1,2,3,4,5], 5))\nprint(first_k([1,2,3,4,5], 6))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def first_k_occurring(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # Your code here\n    if len(arr) < k:\n        return -1\n    elif len(arr) == k:\n        return arr[0]\n    elif len(arr) > k:\n        return first_k_occurring(arr[:k], k)\n    else:\n        return -1\n\nif __name__ == '__main__':\n    print(first_k_occurring([1,2,3,4,5,6,7,8,9], 3))\n    print(first_k_occurring([1,2,3,4,5,6,7,8,9], 9))\n    print(first_k_occurring([1,2,3,4,5,6,7,8,9], 10))\n    print(first_k_occurring([1,2,3,4,5,6,7,8,9], 5))\n    print(first_k_occurring([1,2,3,4,5,6,7,8,9], 4))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_kth(arr, k):\n    \"\"\"\n    :type arr: list[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    l = len(arr)\n    if l < k:\n        return -1\n    pivot = arr[(l - 1) / 2]\n    if pivot < k:\n        return find_kth(arr[:l - k], k)\n    if pivot == k:\n        return k\n    return find_kth(arr[l - k:], k - 1)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import sys\n\ndef find_k_first(arr, k):\n    if len(arr) == 0:\n        return -1\n\n    first = arr[0]\n    for i in range(1, k):\n        if arr[i]!= first:\n            return -1\n\n    return first\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 3:\n        print(\"Usage: {0} <number of occurrences> <array>\".format(sys.argv[0]))\n        sys.exit(1)\n\n    arr = map(int, sys.argv[2].split(','))\n    k = int(sys.argv[1])\n\n    print(\"{0} occurs {1} time in {2}\".format(arr[0], k, arr))\n    print(\"First {0} occurrences: {1}\".format(k, find_k_first(arr, k)))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def first_k(arr, k):\n    # write your code here\n    if not arr or k < 1:\n        return -1\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == k:\n            return arr[i]\n        elif arr[i] > k:\n            break\n    return -1\n\ndef main():\n    arr = [1, 2, 2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 8]\n    print first_k(arr, 3)\n    arr = [1, 2, 2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9]\n    print first_k(arr, 4)\n    arr = [1, 2, 2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10]\n    print first_k(arr, 4)\n    arr = [1, 2, 2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 11]\n    print first_k(arr, 4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def first_k_elements(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    \n    # store the first element and its index in a list\n    res = [None, None]\n    res[0] = arr[0]\n    res[1] = 0\n    \n    # for each element in the array\n    for i in range(1, len(arr)):\n        # check if the element is already in the list\n        if res[0] == arr[i]:\n            # increment the index\n            res[1] += 1\n        # otherwise, check if the element is the kth element in the list\n        elif res[1] == k:\n            # if so, return the element\n            return arr[i]\n        # otherwise, store the element in the list and its index\n        else:\n            res[1] = 1\n            res[0] = arr[i]\n    \n    # if the kth element is not found\n    return None"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "# TODO:\n#   - Use a hash table to optimize the search\n#   - Write a function to check for duplicates in the array\n\ndef firstOccurrence(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not array or len(array) < k:\n        return None\n    for i in range(0, len(array) - k + 1):\n        if array[i:i + k] == array[:k]:\n            return i\n    return None\n\ndef test_firstOccurrence():\n    assert firstOccurrence([0, 1, 2, 2, 3], 3) == 0\n    assert firstOccurrence([1, 1, 2, 2, 3], 3) == 1\n    assert firstOccurrence([0, 0, 1, 1, 2, 2, 2, 3], 3) == 0\n    assert firstOccurrence([0, 1, 2, 2, 2, 2, 2, 2], 3) == 2\n    assert firstOccurrence([0, 1, 2, 2, 2, 2, 2, 2], 2) == None\n    assert firstOccurrence([0, 1, 2, 2, 2, 2, 2, 2], 1) == None\n    assert firstOccurrence([0, 1, 2, 2, 2, 2, 2, 2], 0) == None\n    assert firstOccurrence([0, 1, 2, 2, 2, 2, 2, 2], -1) == None\n    assert firstOccurrence([], 0) == None\n    assert firstOccurrence([], -1) == None\n\nif __name__ == \"__main__\":\n    test_firstOccurrence()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def first_element(arr, k):\n    \"\"\"\n    Input:\n    arr: an array, containing integers\n    k: an integer\n    Output:\n    the first element occurring k times in arr\n    \"\"\"\n    # your code here\n    counter = 0\n    for i in range(len(arr)):\n        if arr[i] == k:\n            counter += 1\n        if counter == k:\n            return arr[i]\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [2,3,4,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2,1,1,2,3,4,3,2"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def first_occurrence(arr, k):\n    \"\"\"\n    Input: arr is an array of integers, k is an integer.\n    Output: a list of the first k integers in arr.\n    \"\"\"\n    counts = [0] * len(arr)\n    for i in range(len(arr)):\n        counts[arr[i]] += 1\n    \n    for i in range(len(counts)):\n        if counts[i] == k:\n            return arr[i]\n    return None\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 2\n    print first_occurrence(arr, k)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def findKth(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k > len(array):\n        return len(array)\n    if k == 1:\n        return array[0]\n    mid = len(array) / 2\n    left = findKth(array[:mid], k)\n    right = findKth(array[mid:], k-1)\n    return array[left] if left < mid else array[right]\n\n\nif __name__ == \"__main__\":\n    print findKth([1, 2, 3, 4, 5], 3)"
    },
    {
      "rank": 72,
      "score": 7.0,
      "candidate": "def findFirstOccur(a, k):\n    \"\"\"\n    :type a: list\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not a:\n        return -1\n    if k == 1:\n        return a[0]\n    if k == 2:\n        return min(a[0], a[1])\n    if k == 3:\n        return min(a[0], min(a[1], a[2]))\n    else:\n        return findFirstOccur(a[k-2:], k-1)\n\nprint(findFirstOccur([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def find_kth(a, k):\n    \"\"\"\n    :type a: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not a:\n        return -1\n    if k > len(a):\n        return find_kth(a[-1::-1], k)\n    if k == 1:\n        return a[0]\n    if k == len(a):\n        return a[-1]\n    if len(a) == 1:\n        return a[0]\n    if k == 2:\n        return min(a[0], a[1])\n    if k == 3:\n        return min(min(a[0], a[1]), a[2])\n    i = 0\n    j = len(a) - 1\n    while i < j:\n        m = i + (j - i) / 2\n        if a[m] == k - 1:\n            return a[m]\n        elif a[m] == k - 2:\n            return min(a[m], a[m + 1])\n        elif a[m] < k - 2:\n            i = m + 1\n        else:\n            j = m - 1\n    return a[j]\n\n\ndef main():\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_kth(a, 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def firstOccurrence(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    count = 0\n    for i in range(len(array)):\n        if count == k:\n            return i\n        else:\n            if array[i] == count:\n                count += 1\n    return -1\n\ndef main():\n    import unittest\n\n    class FirstOccurrenceTest(unittest.TestCase):\n\n        def test_firstOccurrence(self):\n            self.assertEqual(firstOccurrence([1, 2, 3, 1, 2, 3, 1, 2, 3], 3), 0)\n            self.assertEqual(firstOccurrence([1, 2, 3, 1, 2, 3, 1, 2, 3], 2), 2)\n            self.assertEqual(firstOccurrence([1, 2, 3, 1, 2, 3, 1, 2, 3], 1), 1)\n            self.assertEqual(firstOccurrence([1, 2, 3, 1, 2, 3, 1, 2, 3], 0), -1)\n            self.assertEqual(firstOccurrence([1, 2, 3, 1, 2, 3, 1, 2, 3], 5), -1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def find_kth_element(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # Your Code Goes Here\n    \n    if len(arr) == 0:\n        return 0\n    \n    if k == 1:\n        return arr[0]\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if k == 2:\n        return min(arr)\n    \n    if k > len(arr):\n        return arr[-1]\n    \n    if k == len(arr):\n        return arr[-1]\n    \n    mid = len(arr) / 2\n    \n    if k > mid:\n        return find_kth_element(arr[:mid], k)\n    else:\n        return find_kth_element(arr[mid:], k - mid)\n    \n\nprint(find_kth_element([1,2,3,4,5], 2))\nprint(find_kth_element([1,2,3,4,5,6,7,8,9], 2))\nprint(find_kth_element([1,2,3,4,5,6,7,8,9], 5))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def find_kth(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        m = (i + j) / 2\n        if m == k:\n            return arr[m]\n        elif m > k:\n            j = m - 1\n        else:\n            i = m + 1\n    return arr[i]\n\n\n\n# Your FindKth solution here."
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def find_kth(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n    while j >= i:\n        if arr[j] == arr[k]:\n            i += 1\n        elif arr[j] > arr[k]:\n            j -= 1\n        else:\n            j -= 1\n        if i >= k:\n            return arr[j]"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# http://www.geeksforgeeks.org/write-a-python-function-to-find-the-first-element-occurring-k-times-in-a-given-array/\n\ndef findFirstOccurring(array, k):\n    # Returns the index of the first element occurring k times\n    # If the element does not exist, returns -1\n    # If k is not valid, returns -1\n    # If the array is empty, returns -1\n    # If the array is a single element, returns the index of that element\n    # If the array is a single element, returns the index of that element\n    if not array or array.__len__() == 0:\n        return -1\n    if not array:\n        return 0\n    if array.__len__() == 1:\n        return array.__len__() - 1\n    # For each element in the array\n    for i in range(array.__len__()):\n        # If the element occurs k times\n        if array[i] == k:\n            # If the element occurs k times, returns the index of that element\n            return i\n        # If the element does not occur k times,\n        # continue to check the next element\n        if i + 1 >= array.__len__():\n            # If the element occurs k times, returns the index of that element\n            return i\n    return -1\n\n\ndef main():\n    # Test case 1\n    # array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # k = 3\n    # print findFirstOccurring(array, k)\n    # Test case 2\n    # array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # k = 2\n    # print findFirstOccurring(array, k)\n    # Test case 3\n    # array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # k = 5\n    # print findFirstOccurring(array, k)\n    # Test case 4\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 4\n    print findFirstOccurring(array,"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def find_kth(a, k):\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return a[0]\n    elif k == 1:\n        return a[0]\n    else:\n        l = 1\n        r = len(a) - 1\n        while l <= r:\n            m = (l + r) / 2\n            if a[m] == k:\n                return a[m]\n            elif a[m] > k:\n                r = m - 1\n            else:\n                l = m + 1\n        return a[l - 1]\n\n\nprint(find_kth([1,2,3,4,5,6,7,8,9], 2))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def find_kth_element(arr, k):\n    \"\"\"\n    Input: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\n    Output: 3\n    \"\"\"\n\n    # base case\n    if len(arr) == 0:\n        return 0\n\n    # find the last element in arr\n    last = arr[-1]\n\n    # if arr[-1] is the kth element\n    if arr[-1] == k:\n        return last\n\n    # if k is not the kth element\n    if k > last:\n        return find_kth_element(arr[:-1], k)\n\n    # if k is the kth element\n    else:\n        return find_kth_element(arr[:-1], k-1)\n\n# find_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n\nprint(find_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n\n# >>> 3\n# >>> 3"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def findKth(arr, k):\n    # write your code here\n    if not arr or k < 1:\n        return -1\n\n    l = len(arr)\n    if l == 1:\n        return arr[0]\n    elif l == 2:\n        if k == 1:\n            return arr[0]\n        elif k == 2:\n            return arr[1]\n        else:\n            return -1\n\n    if k > l:\n        return -1\n\n    mid = l / 2\n    left = findKth(arr[:mid], k)\n    right = findKth(arr[mid:], k - 1)\n\n    if left == -1 and right == -1:\n        return -1\n\n    if left == -1:\n        return right\n\n    if right == -1:\n        return left\n\n    if left > right:\n        return left\n\n    return right"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def find_kth(arr, k):\n    \"\"\"\n    Find the kth element in an array arr.\n    :param arr: Array to find kth element from.\n    :param k: kth element to find.\n    :return: kth element of arr.\n    \"\"\"\n    # TODO: Implement the function.\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print find_kth(arr, 4)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Example 1:\n# Input: [1,1,1,2,2,3], k = 2\n# Output: 2\n# Explanation: The first two elements are both 1.\n# Example 2:\n# Input: [1,2,3,1,2,3,1], k = 3\n# Output: 1\n# Explanation: The first three elements are all 1.\n# Example 3:\n# Input: [1,1,1,2,2,3], k = 4\n# Output: Not found.\n# Explanation: The first four elements are all 1.\n\nclass Solution(object):\n    def firstUnique(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) < k:\n            return -1\n        \n        first_k_index = -1\n        for i in range(len(nums)):\n            if nums[i] == nums[i-k]:\n                if first_k_index == -1:\n                    first_k_index = i\n            elif first_k_index!= -1:\n                return first_k_index\n        \n        return first_k_index"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def findKth(array, k):\n    if len(array) <= 1:\n        return array[0]\n    if len(array) == 2:\n        return array[0] if k == 1 else array[1]\n    if k == 1:\n        return array[0]\n    if k == 2:\n        return min(array[0], array[1])\n    if k == 3:\n        return min(array[0], min(array[1], array[2]))\n    if k % 2 == 0:\n        return findKth(array[:k/2], k/2)\n    else:\n        return findKth(array[k/2:], k/2)\n\n\n# Test Cases\n\n# input: [1,2,3,4,5], k = 3\n# output: 1\n# expected: [1,2,3]\n\n# input: [1,2,3,4,5], k = 5\n# output: 5\n# expected: [1,2,3,4,5]\n\n# input: [1,2,3,4,5], k = 6\n# output: 5\n# expected: [1,2,3,4,5]\n\n# input: [1,2,3,4,5], k = 7\n# output: 1\n# expected: [1]\n\n# input: [1,2,3,4,5], k = 8\n# output: 5\n# expected: [1,2,3,4,5]\n\n# input: [1,2,3,4,5], k = 9\n# output: 5\n# expected: [1,2,3,4,5]\n\n# input: [1,2,3,4,5], k = 10\n# output: 5\n# expected: [1,2,3,4,5]\n\n# input: [1,2,3,4,5], k = 11\n# output: 1\n# expected: [1]\n\n# input: [1,2,3,4,5], k = 12\n# output: 5\n# expected: [1,2,3,4,5]\n\n# input: [1,2,3,4"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def first_k(a, k):\n    \"\"\"\n    :param a: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == k:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert first_k([1, 1, 2, 3, 4], 2) == 1, \"First 2\"\n    assert first_k([1, 1, 2, 3, 4], 3) == 0, \"First 3\"\n    assert first_k([1, 1, 2, 3, 4], 5) == 0, \"First 5\"\n    assert first_k([1, 1, 2, 3, 4], 0) == 0, \"First 0\"\n    assert first_k([1, 1, 2, 3, 4], 10) == 0, \"First 10\""
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# A function to find the first element occurring k times in an array\n# Input:\n#   - arr: The array to be searched\n#   - k: The number of times the element needs to be found\n# Output:\n#   - The first element occurring k times\n#   - Return -1 if k times element is not found\ndef find_kth_element(arr, k):\n    \"\"\"\n    Input:\n    arr: The array to be searched\n    k: The number of times the element needs to be found\n    Output:\n    The first element occurring k times\n    Return -1 if k times element is not found\n    \"\"\"\n    # Initialize the first element to -1\n    first = -1\n    # Initialize the index to -1\n    index = -1\n    # Initialize the number of times element is found\n    num = 0\n    # Keep iterating while there are elements in the array\n    while index < len(arr) - 1:\n        # If the element at the index is greater than the element at the index+1\n        # Then increment the index by 1 and keep iterating\n        if arr[index] > arr[index+1]:\n            index += 1\n        # If the element at the index is equal to the element at the index+1\n        # Then increment the index by 1 and keep iterating\n        elif arr[index] == arr[index+1]:\n            index += 1\n            # If the element at the index+1 is greater than the element at the index\n            # Then increment the index by 1 and keep iterating\n            if arr[index+1] > arr[index]:\n                index += 1\n            # If the element at the index+1 is equal to the element at the index\n            # Then increment the index by 1 and keep iterating\n            elif arr[index+1] == arr[index]:\n                index += 1\n                # If the element at the index+1 is less than the element at the index\n                # Then increment the index by 1 and keep iterating\n                if arr[index+1] < arr[index]:\n                    index += 1\n                # If the element at the index+1 is equal to the element at the index\n                # Then increment the index by 1 and keep iterating\n                elif"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def first_k_element(array, k):\n    \"\"\"\n    Write a function to find the first element occurring k times in a given array.\n\n    Input:\n    array: an array of integers.\n    k: an integer.\n\n    Output:\n    an integer.\n    \"\"\"\n    i = 0\n    while i < len(array):\n        if array[i] % k == 0:\n            return i\n        i += 1\n    return -1\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert first_k_element([1, 2, 3, 4, 5, 6, 7, 8], 3) == 3, \"1st\"\n    assert first_k_element([1, 2, 3, 4, 5, 6, 7, 8], 4) == 4, \"2nd\"\n    assert first_k_element([1, 2, 3, 4, 5, 6, 7, 8], 5) == 5, \"3rd\"\n    assert first_k_element([1, 2, 3, 4, 5, 6, 7, 8], 6) == 6, \"4th\"\n    assert first_k_element([1, 2, 3, 4, 5, 6, 7, 8], 7) == 7, \"5th\"\n    assert first_k_element([1, 2, 3, 4, 5, 6, 7, 8], 8) == 8, \"6th\"\n    assert first_k_element([1, 2, 3, 4, 5, 6, 7, 8], 9) == -1, \"7th\""
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def first_k_elements(arr, k):\n    \"\"\"\n    :param arr: an array\n    :param k: number of elements to be found\n    :return: first k elements of arr\n    \"\"\"\n    counter = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[counter]:\n            counter += 1\n        elif counter == k - 1:\n            return arr[counter]\n        else:\n            counter = 0\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]\n    print(first_k_elements(arr, 3))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_first_k(A, k):\n    \"\"\"\n    :type A: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if len(A) == 0:\n        return 0\n    if len(A) == 1:\n        return A[0]\n    max_count = 0\n    min_count = len(A)\n    for i in range(len(A)):\n        if k < A[i]:\n            break\n        if k > A[i]:\n            max_count = max(max_count, k)\n            min_count = min(min_count, k)\n    if min_count == k:\n        return A[0]\n    if min_count == k - 1:\n        return A[min_count]\n    if min_count > k - 1:\n        return find_first_k(A[min_count:k], k)\n    if max_count > k - 1:\n        return find_first_k(A[k - 1:max_count], k - 1)\n    return find_first_k(A[min_count:max_count], k - 1)\n\nif __name__ == '__main__':\n    A = [1, 2, 3, 4, 5, 6, 7]\n    k = 3\n    print(find_first_k(A, k))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# TODO:\n# 1. Change the function name to find_k_elem\n# 2. Make sure that the function does not return the same element multiple times\n# 3. Return the first element occurring k times\n\ndef find_k_elem(arr, k):\n    # YOUR CODE HERE\n    pass\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_k_elem([1, 2, 3, 1, 2, 3], 3) == 1, \"Find 3\"\n    assert find_k_elem([1, 2, 3, 1, 2, 3, 4], 3) == 1, \"Find 3\"\n    assert find_k_elem([1, 2, 3, 1, 2, 3], 1) == 1, \"Find 1\"\n    assert find_k_elem([1, 2, 3, 1, 2, 3], 2) == 2, \"Find 2\"\n    assert find_k_elem([1, 2, 3, 1, 2, 3], 3) == 3, \"Find 3\"\n    assert find_k_elem([1, 2, 3, 1, 2, 3], 4) == 3, \"Find 4\""
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def findKthElement(arr, k):\n    # write your code here\n    if k == 1:\n        return arr[0]\n    if len(arr) == 0:\n        return None\n    if k == len(arr):\n        return arr[-1]\n    \n    mid = len(arr) / 2\n    if len(arr) % 2 == 1:\n        return arr[mid]\n    else:\n        return findKthElement(arr[:mid], k - 1) + findKthElement(arr[mid:], k - 1)\n\narr = [1, 2, 3, 4, 5]\n\nprint(findKthElement(arr, 3))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def find_kth(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif k == 1:\n        return arr[0]\n    else:\n        i = 0\n        while i < len(arr) - k + 1:\n            j = i + k - 1\n            if arr[i] < arr[j]:\n                i += 1\n            else:\n                return arr[i]"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def kth_element(arr, k):\n    \"\"\"\n    Write a python function to find the first element occurring k times in a given array.\n    :param arr:\n    :param k:\n    :return:\n    \"\"\"\n    # O(n)\n    # O(n)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def findFirstK(a, k):\n    # write your code here\n    if k == 1:\n        return a[0]\n    if k > len(a):\n        return -1\n\n    for i in range(len(a)):\n        if a[i] == k - 1:\n            return a[i]\n        elif a[i] > k - 1:\n            return findFirstK(a[i+1:], k - 1)\n        elif a[i] < k - 1:\n            return findFirstK(a[:i], k - 1)\n\n# test cases\na = [1,2,3,4]\nk = 3\nprint(findFirstK(a, k))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def find_kth_element(arr, k):\n    \"\"\"\n    arr:  An array of integers\n    k:    The number of times the element must occur\n    \"\"\"\n    # Write your code here\n    assert k >= 0\n\n    if k == 0:\n        return arr[0]\n\n    if k == 1:\n        return min(arr)\n\n    if len(arr) < k:\n        return arr[0]\n\n    # Get the index of the first element that occurs k times\n    # If there are less than k elements, return the first element\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[index]:\n            index += 1\n        if index == k:\n            return arr[i]\n    return arr[0]\n\n\n\n# Testing\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\nk = 1\nprint(find_kth_element(arr, k))\nk = 2\nprint(find_kth_element(arr, k))\nk = 3\nprint(find_kth_element(arr, k))\nk = 4\nprint(find_kth_element(arr, k))\nk = 5\nprint(find_kth_element(arr, k))\nk = 6\nprint(find_kth_element(arr, k))\nk = 7\nprint(find_kth_element(arr, k))\nk = 8\nprint(find_kth_element(arr, k))\nk = 9\nprint(find_kth_element(arr, k))\nk = 10\nprint(find_kth_element(arr, k))\nk = 11\nprint(find_kth_element(arr, k))\nk = 12\nprint(find_kth_element(arr, k))\nk = 13\nprint(find_kth_element(arr, k))\nk = 14\nprint(find_kth_element(arr, k))\nk = 15\nprint(find_kth_element(arr, k))\nk = 16\nprint(find_k"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_kth_element(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return None\n    if k == 1:\n        return arr[0]\n    \n    pivot = arr[0]\n    \n    for i in range(1, k):\n        if arr[i] <= pivot:\n            pivot = pivot + arr[i]\n        else:\n            arr[i-1] = arr[i-1] + arr[i]\n    \n    return pivot\n\nclass Solution(object):\n    def findKthLargest(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not arr or k == 1:\n            return arr[0]\n        \n        pivot = arr[0]\n        \n        for i in range(1, k):\n            if arr[i] <= pivot:\n                pivot = pivot + arr[i]\n            else:\n                arr[i-1] = arr[i-1] + arr[i]\n        \n        return pivot"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def findKth(arr, k):\n    return arr.index(arr[k])\n\ndef main():\n    # your code goes here\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    k = 4\n    print(findKth(arr, k))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def findKth(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] == k else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0] == k and arr[1] == k else arr[1] if arr[1] == k and arr[2] == k else arr[2] if arr[2] == k and arr[3] == k else arr[3] if arr[3] == k and arr[4] == k else arr[4] if arr[4] == k and arr[5] == k else arr[5] if arr[5] == k and arr[6] == k else arr[6] if arr[6] == k and arr[7] == k else arr[7] if arr[7] == k and arr[8] == k else arr[8] if arr[8] == k and arr[9] == k else arr[9] if arr[9] == k and arr[10] == k else arr[10] if arr[10] == k and arr[11] == k else arr[11] if arr[11] == k and arr[12] == k else arr[12] if arr[12] == k and arr[13] == k else arr[13] if arr[13] == k and arr[14] == k else arr[14] if arr[14] == k and arr[15] == k else arr[15] if arr[15] == k and arr[16] == k else arr[16] if arr[16] == k and arr[17] == k else arr[17] if arr[17] == k and arr[18] == k else arr[18] if arr[18] == k and arr[19] == k else arr[19] if arr[19] == k and arr[20] == k else arr[20] if arr[20] == k and arr[21] == k else"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# --------------------------------------------\n# Find the first k elements in an array\n# --------------------------------------------\n\ndef first_k(arr, k):\n    return arr.index(arr[0])\n\n\n# --------------------------------------------\n# Test\n# --------------------------------------------\n\ndef main():\n    print first_k([1,2,3,4,5,6,7,8,9], 3)\n    print first_k([1,2,3,4,5,6,7,8,9,10], 3)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def first_k_element(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(arr)):\n        if arr[i] in arr[:i + k]:\n            result = arr[i]\n            break\n    return result\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    k = 2\n    print(first_k_element(arr, k))"
    }
  ]
}