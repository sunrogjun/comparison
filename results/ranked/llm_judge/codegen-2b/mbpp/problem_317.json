{
  "timestamp": "2025-09-14T19:43:32.719417",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 317,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotateRight(self, head, k):\n        if not head or not head.next:\n            return head\n        \n        p = head\n        while p:\n            p = p.next\n            k -= 1\n            \n        p = head\n        while k:\n            q = p.next\n            p.next = q.next\n            q.next = p\n            p = q\n            k -= 1\n        return head\n        \n    def rotateRight2(self, head, k):\n        if not head or not head.next:\n            return head\n        \n        p = head\n        while p:\n            p = p.next\n            k -= 1\n            \n        q = p.next\n        while k:\n            q.next = p.next\n            p.next = q\n            p = q\n            q = p.next\n            k -= 1\n        return p\n        \n    def rotateRight3(self, head, k):\n        if not head or not head.next:\n            return head\n        \n        p = head\n        while p:\n            p = p.next\n            k -= 1\n            \n        p = head\n        while k:\n            q = p.next\n            p.next = q.next\n            q.next = p\n            p = q\n            k -= 1\n        return head"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while k > 0:\n            p = p.next\n            k -= 1\n        p.next = None\n        temp = p.next\n        p.next = head\n        head = temp\n        return dummy.next\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    print Solution().rotateRight(head, 2)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def rotate(list, times):\n    if times > len(list):\n        return list\n    else:\n        return rotate_left(list[:times], times-1) + list[times:]\n\ndef rotate_left(list, times):\n    if times == 0:\n        return list\n    else:\n        return rotate_left(list[1:], times-1) + [list[0]]\n\ndef rotate_right(list, times):\n    if times == 0:\n        return list\n    else:\n        return [list[-1]] + rotate_right(list[:-1], times-1)\n\ndef rotate_both(list, times):\n    if times == 0:\n        return list\n    else:\n        return rotate_both(list[1:], times-1) + [list[0]]\n\nprint rotate([1, 2, 3], 2)\nprint rotate([1, 2, 3], 3)\nprint rotate([1, 2, 3], 4)\nprint rotate([1, 2, 3], 5)\nprint rotate([1, 2, 3], 6)\nprint rotate([1, 2, 3], 7)\nprint rotate([1, 2, 3], 8)\nprint rotate([1, 2, 3], 9)\nprint rotate([1, 2, 3], 10)\nprint rotate([1, 2, 3], 11)\nprint rotate([1, 2, 3], 12)\nprint rotate([1, 2, 3], 13)\nprint rotate([1, 2, 3], 14)\nprint rotate([1, 2, 3], 15)\nprint rotate([1, 2, 3], 16)\nprint rotate([1, 2, 3], 17)\nprint rotate([1, 2, 3], 18)\nprint rotate([1, 2, 3], 19)\nprint rotate([1, 2, 3], 20)\nprint rotate([1, 2, 3], 21)\nprint rotate([1, 2, 3], 22)\nprint rotate([1, 2, 3], 23)\nprint rotate([1, 2, 3], 24)\nprint rotate([1, 2, 3], 25)\nprint rotate([1, 2, 3], 26)\nprint rotate([1, 2, 3], 27)\nprint rotate([1, 2,"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head: return None\n        tail = head\n        for i in range(k):\n            if tail:\n                tail = tail.next\n            else:\n                break\n        newhead = head.next\n        head.next = None\n        while newhead:\n            tail.next = newhead\n            newhead = newhead.next\n            tail = tail.next\n        return newhead\n\n    def rotateRight2(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head: return None\n        if not k: return head\n        if k > len(head.next): k = len(head.next)\n        newhead = head\n        tail = head\n        for i in range(k):\n            if tail:\n                tail = tail.next\n            else:\n                break\n        while newhead:\n            newhead.next = tail\n            tail = newhead\n            newhead = newhead.next\n        return head"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/discuss/81418/Python-solution-using-O(n)-time-and-O(1)-space\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if head is None:\n            return None\n        slow = head\n        fast = head.next\n        for i in range(k):\n            slow = slow.next\n        while fast:\n            slow.next = fast.next\n            fast = fast.next\n            slow = slow.next\n        slow.next = head\n        return slow\n\n# test cases\n# rotate a list of 2 items to the left\n# rotate a list of 2 items to the right\n# rotate a list of 3 items to the left\n# rotate a list of 3 items to the right\n# rotate a list of 4 items to the left\n# rotate a list of 4 items to the right"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not k: return head\n        dummy = ListNode(-1)\n        dummy.next = head\n        cur = dummy\n        while k > 0:\n            if k % 2:\n                cur = cur.next\n                k = k / 2\n            else:\n                cur = cur.next.next\n                k = k / 2\n        cur.next = dummy.next\n        return dummy.next"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, times):\n        \"\"\"\n        :type head: ListNode\n        :type times: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None or times == 0:\n            return head\n\n        p = head\n        n = head.next\n        while n is not None:\n            p = n\n            n = n.next\n        \n        p.next = head\n        head = p.next\n        p.next = None\n        \n        times %= len(head.next)\n        while times!= 0:\n            n = head\n            while n.next is not None and len(n.next) > 1:\n                n = n.next\n                n.next = n.next.next\n                n.next.next = n\n            head = head.next\n            head.next = n\n            \n            times -= 1\n            \n        return head"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n\n        if k == 0:\n            return head\n        \n        node = head\n        while node.next is not None:\n            node = node.next\n        \n        if k > 1:\n            k -= 1\n            node = head\n            while k > 0:\n                node = node.next\n                k -= 1\n        \n        node.next = None\n        return head\n\nif __name__ == \"__main__\":\n    s = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {integer} numRotation\n    # @return {ListNode}\n    def rotateRight(self, head, numRotation):\n        if not head or numRotation == 0:\n            return head\n        \n        l = self.rotateLeft(head, numRotation)\n        return l\n    \n    def rotateLeft(self, head, numRotation):\n        if not head or numRotation == 0:\n            return head\n        \n        curr = head\n        for i in range(numRotation):\n            curr = curr.next\n        \n        l = ListNode(curr.val)\n        curr.next = l\n        l.next = head\n        return l\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    \n    s = Solution()\n    print s.rotateRight(head, 2)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # Note:\n        #  1. n is the number of elements in the list.\n        #  2. k is the number of elements to be rotated to the left.\n        #  3. n is the number of elements to be rotated to the left.\n        #  4. k is the number of elements to be rotated to the left.\n        #  5. k is the number of elements to be rotated to the left.\n        #  6. k is the number of elements to be rotated to the left.\n        #  7. k is the number of elements to be rotated to the left.\n        #  8. k is the number of elements to be rotated to the left.\n        #  9. k is the number of elements to be rotated to the left.\n        #  10. k is the number of elements to be rotated to the left.\n        #  11. k is the number of elements to be rotated to the left.\n        #  12. k is the number of elements to be rotated to the left.\n        #  13. k is the number of elements to be rotated to the left.\n        #  14. k is the number of elements to be rotated to the left.\n        #  15. k is the number of elements to be rotated to the left.\n        #  16. k is the number of elements to be rotated to the left.\n        #  17. k is the number of elements to be rotated to the left.\n        #  18. k is the number of elements to be rotated to the left.\n        #  19. k is the number of elements to be rotated to the left.\n        #  20. k is the number of elements to be rotated to the left.\n        #  21. k is the number of elements to be rotated to the left.\n        #  22. k is the number of elements to be rotated to the left.\n        #  23. k is the number of elements to be rotated to the left."
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, times):\n        \"\"\"\n        :type head: ListNode\n        :type times: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None or times <= 0:\n            return head\n        if head.next is None:\n            return head\n        \n        # reverse the list\n        temp = head\n        head = head.next\n        head.next = None\n        \n        # reverse the list\n        while head.next is not None:\n            temp = head\n            head = head.next\n            head.next = temp.next\n            temp.next = None\n        \n        # rotate the list\n        temp = head\n        head = head.next\n        while times > 0:\n            temp = head\n            head = temp.next\n            temp.next = head.next\n            head.next = temp\n            times -= 1\n        \n        # return the head\n        return head"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotateRight(self, head, k):\n        if k == 0:\n            return head\n        # reverse the list\n        tail = head\n        head = head.next\n        while head is not None:\n            tail.next = head\n            head = head.next\n            tail = tail.next\n        # reverse the list back\n        head = tail\n        tail = head.next\n        while k > 0:\n            head = head.next\n            k -= 1\n        tail.next = head\n        return head"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if k < 0 or len(nums) < k:\n            return nums\n        k %= len(nums)\n        if k == 0:\n            return nums\n        return self.rotate(nums[k:], k) + nums[:k] + self.rotate(nums[k+len(nums):], len(nums) - k)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.rotate([1,2,3,4,5], 3)\n    print s.rotate([1,2,3,4,5], 4)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        n = len(nums)\n        if k == 0:\n            return nums\n        elif k == 1:\n            return nums[1:] + nums[:1]\n        else:\n            return self.rotate(nums[k-2::-1], k-1) + nums[0] + self.rotate(nums[1:k-1:-1], k-1) + nums[k:]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not k:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        k = k % len(dummy.next.next)\n        while k:\n            dummy = dummy.next\n            k -= 1\n        p = dummy.next\n        while p:\n            p.next, p = p.next.next, p.next\n        p.next = dummy.next\n        dummy.next = head\n        return dummy.next"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        slow = head\n        fast = head.next\n        k %= len(fast.next)\n        for i in range(k):\n            fast = fast.next\n            slow = slow.next\n        slow.next = head\n        head.next = None\n        return fast"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import unittest\nfrom random import randint\nfrom random import randrange\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        # Write your code here\n        nums.reverse()\n        for i in range(k):\n            nums.append(nums.pop(0))\n        nums.reverse()\n\n    def test(self):\n        nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        self.rotate(nums, 1)\n        self.rotate(nums, 2)\n        self.rotate(nums, 3)\n        self.rotate(nums, 4)\n        self.rotate(nums, 5)\n        self.rotate(nums, 6)\n        self.rotate(nums, 7)\n        self.rotate(nums, 8)\n        self.rotate(nums, 9)\n        self.rotate(nums, 10)\n        self.rotate(nums, 11)\n        self.rotate(nums, 12)\n        self.rotate(nums, 13)\n        self.rotate(nums, 14)\n        self.rotate(nums, 15)\n        self.rotate(nums, 16)\n        self.rotate(nums, 17)\n        self.rotate(nums, 18)\n        self.rotate(nums, 19)\n        self.rotate(nums, 20)\n        self.rotate(nums, 21)\n        self.rotate(nums, 22)\n        self.rotate(nums, 23)\n        self.rotate(nums, 24)\n        self.rotate(nums, 25)\n        self.rotate(nums, 26)\n        self.rotate(nums, 27)\n        self.rotate(nums, 28)\n        self.rotate(nums, 29)\n        self.rotate("
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # https://leetcode.com/problems/rotate-list/discuss/82909/Efficient-Java-Solution-with-Java-8-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss/74808/C++-and-Java-Solution-with-C-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss/85156/Java-and-C#.2C.2C.2C-Java-and-C-Solution-with-C-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss/85156/Java-and-C-Solution-with-C-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss/85156/Java-and-C-Solution-with-C-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss/85156/Java-and-C-Solution-with-C-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss/85156/Java-and-C-Solution-with-C-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss/85156/Java-and-C-Solution-with-C-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss/85156/Java-and-C-Solution-with-C-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss/85156/Java-and-C-Solution-with-C-and-Python\n        # https://leetcode.com/problems/rotate-list-ii/discuss"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotateLeft(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = head\n        while p.next:\n            p = p.next\n        k = k % len(p.next.next)\n        head.next = head.next.next[k:] + head.next\n        head.next.next = head\n        return head"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not k:\n            return head\n\n        dummy = ListNode(0)\n        dummy.next = head\n        head = dummy\n\n        while k > 0:\n            head = head.next\n            k = k - 1\n\n        while head.next:\n            head = head.next\n            dummy.next = head.next\n\n        dummy.next = None\n        return dummy.next\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n\n    print Solution().rotateRight(head, 2)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/rotate-list/problem\n# https://www.hackerrank.com/challenges/rotate-list/submissions/code/2827071\n\n# Example\n# A = [1, 2, 3]\n# B = [4, 5, 6]\n# rotate(A, 2) = [4, 5, 6, 1, 2, 3]\n# rotate(B, 2) = [3, 2, 1, 4, 5, 6]\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotate(self, head, times):\n        \"\"\"\n        :type head: ListNode\n        :type times: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or times <= 0:\n            return head\n        \n        cur = head\n        prev = None\n        while cur is not None:\n            next = cur.next\n            cur.next = prev\n            prev = cur\n            cur = next\n        \n        cur = prev\n        prev = None\n        while cur is not None:\n            next = cur.next\n            cur.next = prev\n            prev = cur\n            cur = next\n        \n        if times % 2 == 0:\n            head = prev\n        else:\n            head = prev.next\n        \n        return head"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        temp = head\n        while k > 0:\n            k -= 1\n            temp = temp.next\n        \n        while temp:\n            temp = temp.next\n            temp.next = dummy.next\n            dummy.next = temp\n        return dummy.next\n\n    def rotateRight2(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        temp = dummy.next\n        while k > 0:\n            k -= 1\n            temp = temp.next\n            temp.next = dummy.next\n        return dummy.next\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def rotate_list(list, n):\n    \"\"\"\n    :type list: List[int]\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    # Rotate the list n times\n    for i in range(n):\n        # Copy the list to a new list\n        new_list = list[:]\n        # Reverse the list\n        new_list.reverse()\n        # Add the list to the list\n        list.extend(new_list)\n    return list\n\nif __name__ == '__main__':\n    # Test cases\n    list = [1, 2, 3, 4, 5]\n    n = 1\n    print(rotate_list(list, n))\n    n = 2\n    print(rotate_list(list, n))\n    n = 3\n    print(rotate_list(list, n))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/description/\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head == None or head.next == None:\n            return head\n        \n        pre = head\n        cur = head.next\n        for i in range(k):\n            pre = pre.next\n            cur = cur.next\n            \n        pre.next = cur.next\n        cur.next = head\n        head.next = None\n        \n        return cur\n    \n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head == None or head.next == None:\n            return head\n        \n        pre = head\n        cur = head.next\n        for i in range(k):\n            pre = pre.next\n            cur = cur.next\n            \n        pre.next = cur.next\n        cur.next = head\n        head.next = None\n        \n        return cur"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        i = 1\n        while i < k:\n            dummy = dummy.next\n            i += 1\n        dummy.next = None\n        while dummy.next:\n            dummy = dummy.next\n            head = head.next\n        head.next = dummy.next\n        dummy.next = None\n        return dummy.next"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution:\n    def rotate(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or k == 0:\n            return head\n\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while p.next:\n            p = p.next\n        p.next = None\n\n        p = dummy\n        while k > 0:\n            if k % 2 == 0:\n                p = p.next\n                k = k / 2\n            else:\n                p.next = p.next.next\n                p = p.next\n                k = k / 2\n        head = dummy.next\n        return head"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/\n\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        # https://leetcode.com/problems/rotate-list/discuss/104472/Java-Solution-with-explanation-with-explanation-with-explanation-with-explanation\n        # 1. [1]\n        # 2. [2]\n        # 3. [3]\n        # 4. [4]\n        # 5. [5]\n        # 6. [6]\n        # 7. [7]\n        # 8. [8]\n        # 9. [9]\n        # 10. [10]\n        # 11. [11]\n        # 12. [12]\n        # 13. [13]\n        # 14. [14]\n        # 15. [15]\n        # 16. [16]\n        # 17. [17]\n        # 18. [18]\n        # 19. [19]\n        # 20. [20]\n        # 21. [21]\n        # 22. [22]\n        # 23. [23]\n        # 24. [24]\n        # 25. [25]\n        # 26. [26]\n        # 27. [27]\n        # 28. [28]\n        # 29. [29]\n        # 30. [30]\n        # 31. [31]\n        # 32. [32]\n        # 33. [33]\n        # 34. [34]\n        # 35. [35]\n        # 36. [36]\n        # 37. [37]\n        # 38. [38]\n        # 39. [39]\n        # 40. [40]\n        # 41. [41]\n        # 42. [42]\n        # 43. [43]\n        # 44. [44]\n        # 45. [45]\n        # 46. [46]\n        # 47. [47]"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        head = dummy\n        while k > 0:\n            head = head.next\n            k = k % len(head.next)\n        while head.next is not None:\n            head = head.next\n        head.next = dummy.next\n        dummy.next = None\n        return head"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums or nums == []:\n            return\n        k %= len(nums)\n        if k == 0:\n            return\n        nums.reverse()\n        for i in range(k):\n            nums.append(nums.pop())\n        nums.reverse()\n\n\nif __name__ == \"__main__\":\n    Solution().rotate([1, 2, 3, 4, 5], 1)\n    Solution().rotate([1, 2, 3, 4, 5], 2)\n    Solution().rotate([1, 2, 3, 4, 5], 3)"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not k:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while k > 0:\n            curr = curr.next\n            k -= 1\n        curr.next = head\n        return dummy.next"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        nums.reverse()\n        for i in range(k):\n            nums.append(nums.pop(0))\n        nums.reverse()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        cur_next = cur\n        while k > 0:\n            cur_next = cur.next\n            cur.next = cur_next.next\n            cur = cur_next\n            k -= 1\n\n        return dummy.next"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "# https://www.youtube.com/watch?v=cVQ-vQZkV5k\n# https://www.youtube.com/watch?v=K5w-p6sxRQA\n# https://www.youtube.com/watch?v=Jg-wgxL-vYQ\n# https://www.youtube.com/watch?v=d5tR7lKk8f8\n# https://www.youtube.com/watch?v=3YQi7c_JfVc\n# https://www.youtube.com/watch?v=hG7gJ-jH2JI\n\n# Solution:\n\n# 1. Create a new list, append the original list to the new list and then reverse the new list.\n# 2. Then append the original list to the new list and then reverse the new list.\n# 3. Then append the original list to the new list and then reverse the new list.\n# 4. Then append the original list to the new list and then reverse the new list.\n# 5. Then append the original list to the new list and then reverse the new list.\n# 6. Then append the original list to the new list and then reverse the new list.\n# 7. Then append the original list to the new list and then reverse the new list.\n# 8. Then append the original list to the new list and then reverse the new list.\n# 9. Then append the original list to the new list and then reverse the new list.\n# 10. Then append the original list to the new list and then reverse the new list.\n# 11. Then append the original list to the new list and then reverse the new list.\n# 12. Then append the original list to the new list and then reverse the new list.\n# 13. Then append the original list to the new list and then reverse the new list.\n# 14. Then append the original list to the new list and then reverse the new list.\n# 15. Then append the original list to the new list and then reverse the new list.\n# 16. Then append the original list to the new list and then reverse the new list.\n# 17. Then append the original list to the new list and then reverse the new list.\n# 18. Then append the original list to the new"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        k %= len(nums)\n        if k == 0:\n            return nums\n        if k == 1:\n            return nums[::-1]\n        for i in range(len(nums)):\n            res.append(nums[i])\n            nums[i] = nums[-i-1]\n        res[0] = nums[-k]\n        return res\n\n\nif __name__==\"__main__\":\n    print(Solution().rotate([1,2,3,4,5], 2))"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def rotate_left(list, num):\n    if num > len(list):\n        return list\n    elif num == 0:\n        return list\n    else:\n        return rotate_left(list[num:], num-1) + list[:num] + rotate_left(list[num+1:], num)\n\n\ndef test():\n    assert rotate_left([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 6) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 7) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 8) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 9) == [5, 4, 3, 2, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 10) == [5, 4, 3, 2, 1]\n\n\ndef main():\n    test()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if not head or k == 0:\n            return head\n        p = head\n        while p.next:\n            p = p.next\n            k -= 1\n        p.next = head\n        head = p.next\n        p.next = None\n        head = head.next\n        for i in range(k):\n            head = head.next\n        return head"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        nums.reverse()\n        nums.insert(0, nums[-1])\n        nums.pop()\n        nums.reverse()\n        return nums\n\n\nif __name__==\"__main__\":\n    assert Solution().rotate([1,2,3,4,5], 1) == [5,4,3,2,1]\n    assert Solution().rotate([1,2,3,4,5], 2) == [5,4,3,2,1]\n    assert Solution().rotate([1,2,3,4,5], 3) == [5,4,3,2,1]"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        head = dummy\n        k %= len(head.next.next)\n        n = len(head.next)\n        while k:\n            head.next, head.next.next = head.next.next, head.next\n            k -= 1\n        return dummy.next\n\n\nif __name__ == '__main__':\n    # n1 = ListNode(1)\n    # n2 = ListNode(2)\n    # n3 = ListNode(3)\n    # n4 = ListNode(4)\n    # n5 = ListNode(5)\n    # n6 = ListNode(6)\n    # n7 = ListNode(7)\n    # n8 = ListNode(8)\n    # n9 = ListNode(9)\n    # n10 = ListNode(10)\n    # n11 = ListNode(11)\n    # n12 = ListNode(12)\n    # n13 = ListNode(13)\n    # n14 = ListNode(14)\n    # n15 = ListNode(15)\n    # n16 = ListNode(16)\n    # n17 = ListNode(17)\n    # n18 = ListNode(18)\n    # n19 = ListNode(19)\n    # n20 = ListNode(20)\n    # n21 = ListNode(21)\n    # n22 = ListNode(22)\n    # n23 = ListNode(23)\n    # n24 = ListNode(24)\n    # n25 = ListNode(25)\n    # n26 = ListNode(26)\n    # n27 = ListNode(27)\n    # n28 = ListNode(28)\n    # n29 = ListNode(29)\n    # n30 = ListNode"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/discuss/76686/Python-Solution-with-Explanation\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums:\n            return\n\n        # Swap the first element with the last one\n        nums[0], nums[-1] = nums[-1], nums[0]\n\n        # Rotate the rest\n        for i in range(1, len(nums)):\n            nums[i], nums[-i] = nums[-i], nums[i]\n\n        # Reverse the last k elements\n        i = 0\n        while i < k:\n            nums[i], nums[-k + i] = nums[-k + i], nums[i]\n            i += 1\n\n        # Reverse the first k elements\n        i = k - 1\n        while i >= 0:\n            nums[i], nums[k - i] = nums[k - i], nums[i]\n            i -= 1\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    k = 3\n    Solution().rotate(nums, k)\n    print nums"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        n = 0\n        while head:\n            head = head.next\n            n += 1\n        n = n % k\n        if n == 0:\n            return head\n        curr = head\n        for i in range(n):\n            curr = curr.next\n        head = curr\n        while curr:\n            prev = curr.next\n            curr.next = curr.next.next\n            curr.next = prev\n            curr = prev\n        return head\n\n# Note:\n#\n# 1. Recursive\n# 2. k = n"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not k:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        for i in range(k):\n            cur = cur.next\n        while cur.next:\n            cur = cur.next\n        cur.next = head\n        return dummy.next"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "# https://www.hackerrank.com/challenges/rotate-list/problem\n\n# Complete the rotateList function below.\ndef rotateList(self, n):\n    # Complete this function\n    length = len(self)\n    if length <= 1:\n        return self\n\n    new_list = []\n    for i in range(n):\n        new_list.append(self.pop(0))\n\n    for i in range(length - n):\n        new_list.append(self.pop(0))\n\n    for i in range(n):\n        new_list.append(self.pop(0))\n\n    for i in range(length - n - 1, -1, -1):\n        new_list.append(self.pop(0))\n\n    return new_list"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def rotate(list, n):\n    for i in range(n):\n        list.append(list.pop(0))\n\nif __name__ == \"__main__\":\n    print rotate([1, 2, 3], 2)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def rotate(list, n):\n    if n < 1:\n        return list\n    return rotate_left(list, n-1) + [list[0]] + rotate_right(list, n-1)\n\ndef rotate_right(list, n):\n    return list[:n] + list[n+1:]\n\ndef rotate_left(list, n):\n    return list[-n:] + list[:-n]\n\ndef test():\n    assert rotate(list=[1,2,3,4,5,6], 3) == [5,6,4,3,2,1]\n    assert rotate(list=[1,2,3], 3) == [1,2,3]\n    assert rotate(list=[1,2,3,4,5,6], 5) == [4,5,6,3,2,1]\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/rotate-list/problem\n\ndef rotate_list(list, num):\n    \"\"\"\n    Rotate list by given number of items to the left.\n\n    Arguments:\n    list -- A list of integers\n    num -- A positive integer, the number of items to rotate\n\n    Return:\n    A list of rotated integers\n    \"\"\"\n    \n    if len(list) < num:\n        return list\n\n    # Iterate over the list and calculate the first index of the element to rotate.\n    first_index = len(list) - num\n    for i in range(first_index):\n        # Loop over the remaining elements in the list to find the index of the element to rotate.\n        for j in range(i + 1, first_index):\n            if list[i] > list[j]:\n                # Swap the elements if the first element to rotate is greater than the second element to rotate.\n                list[i], list[j] = list[j], list[i]\n                break\n    return list\n\nprint(rotate_list([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import deque\n\ndef rotate_left(lst, n):\n    \"\"\"\n    :type lst: List[int]\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n == 0 or n == len(lst):\n        return lst\n    lst_new = deque(lst)\n    for i in range(n):\n        lst_new.rotate(1)\n    return lst_new\n\nif __name__ == \"__main__\":\n    assert rotate_left([1,2,3], 0) == [1, 2, 3]\n    assert rotate_left([1,2,3], 1) == [2, 3, 1]\n    assert rotate_left([1,2,3], 2) == [3, 1, 2]\n    assert rotate_left([1,2,3], 3) == [1, 2, 3]\n    assert rotate_left([1,2,3], 4) == [2, 3, 1]\n    assert rotate_left([1,2,3], 5) == [3, 1, 2]\n    assert rotate_left([1,2,3], 6) == [1, 2, 3]\n    assert rotate_left([1,2,3], 7) == [2, 3, 1]\n    assert rotate_left([1,2,3], 8) == [3, 1, 2]"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from collections import deque\n\ndef rotate(lst, n):\n    \"\"\"\n    rotate(lst, n) -> [1, 2, 3, 4,..., n]\n    Rotate a list by n items to the left.\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if n == 0:\n        return lst\n    lst = lst[:]\n    while n > 0:\n        lst.append(lst.pop(0))\n        n -= 1\n    return lst\n\ndef rotate_recursive(lst, n):\n    \"\"\"\n    rotate_recursive(lst, n) -> [1, 2, 3, 4,..., n]\n    Rotate a list by n items to the left.\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if n == 0:\n        return lst\n    return rotate_recursive(lst[::-1], n-1) + lst[::-1]\n\ndef rotate_iterative(lst, n):\n    \"\"\"\n    rotate_iterative(lst, n) -> [1, 2, 3, 4,..., n]\n    Rotate a list by n items to the left.\n\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if n == 0:\n        return lst\n    dummy = deque()\n    for i in range(n):\n        dummy.appendleft(lst.pop())\n    return dummy"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param num, a list of int\n    # @param k, an integer\n    # @return a list of int\n    def rotate(self, num, k):\n        res = []\n        for i in range(0, len(num)):\n            res.append(num[i])\n        res = res[k:] + res[:k]\n        return res\n\n\nif __name__ == '__main__':\n    print Solution().rotate([1, 2, 3], 2)\n    print Solution().rotate([1, 2, 3, 4, 5], 3)\n    print Solution().rotate([1, 2, 3], -2)\n    print Solution().rotate([1, 2, 3, 4, 5], -3)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def rotate(list, times):\n    if not list or times < 1:\n        return list\n    if times == 1:\n        return list[:1] + list[2:] + list[:2]\n    return rotate(list[1:], times - 1) + [list[0]] + rotate(list[:-1], times - 1)\n\nif __name__ == '__main__':\n    print(rotate([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/rotate-list/problem\n\nimport sys\n\ndef rotate(lst, n):\n    if not lst:\n        return lst\n\n    return lst[n:] + lst[:n]\n\ndef main():\n    n = int(sys.stdin.readline())\n    lst = list(map(int, sys.stdin.readline().split()))\n    print(rotate(lst, n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 2.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#\n#     def __repr__(self):\n#         if self:\n#             return \"{} -> {}\".format(self.val, repr(self.next))\n#         else:\n#             return \"null\"\n#\n# class Solution:\n#     # @param head, a ListNode\n#     # @param k, an integer\n#     # @return a ListNode\n#     def rotateRight(self, head, k):\n#         if not head:\n#             return None\n#         dummy = ListNode(-1)\n#         dummy.next = head\n#         i = 1\n#         while i < k:\n#             dummy = dummy.next\n#             i += 1\n#         dummy.next = head.next\n#         head.next = None\n#         while dummy.next:\n#             dummy = dummy.next\n#             head = head.next\n#         return dummy.next\n#\n#     def rotateRight(self, head, k):\n#         if not head:\n#             return None\n#         dummy = ListNode(-1)\n#         dummy.next = head\n#         i = 1\n#         while i < k:\n#             dummy = dummy.next\n#             i += 1\n#         dummy.next = head.next\n#         head.next = None\n#         while dummy.next:\n#             dummy = dummy.next\n#             head = head.next\n#         return dummy.next\n#\n#     def rotateRight(self, head, k):\n#         if not head:\n#             return None\n#         dummy = ListNode(-1)\n#         dummy.next = head\n#         i = 1\n#         while i < k:\n#             dummy = dummy.next\n#             i += 1\n#         dummy.next = head.next\n#         head.next = None\n#         while dummy.next:\n#             dummy = dummy.next\n#             head = head.next"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\n\"\"\"\n\nGiven a list, rotate the list to the left by k places, where k is non-negative.\n\nExample 1:\n\nInput: nums = [1,2,3], k = 2\nOutput: [3,1,2]\nExplanation:\nrotate 1 places to the left: [3,1,2]\nrotate 2 places to the left: [2,3,1]\nrotate 3 places to the left: [1,2,3]\n\nExample 2:\n\nInput: nums = [1,2,3,4], k = 1\nOutput: [1,2,3,4]\nExplanation:\nrotate 1 places to the left: [1,2,3,4]\nrotate 2 places to the left: [2,3,4,1]\nrotate 3 places to the left: [3,4,1,2]\nrotate 4 places to the left: [4,1,2,3]\n\nExample 3:\n\nInput: nums = [1], k = 1\nOutput: [1]\nExplanation:\nrotate 1 places to the left: [1]\nrotate 2 places to the left: []\nrotate 3 places to the left: []\n\nExample 4:\n\nInput: nums = [1,2,3], k = 0\nOutput: [1,2,3]\nExplanation:\nrotate 1 places to the left: [1,2,3]\nrotate 2 places to the left: [2,3,1]\nrotate 3 places to the left: [3,1,2]\n\nExample 5:\n\nInput: nums = [1,2,3,4], k = 3\nOutput: [1,2,3,4]\nExplanation:\nrotate 1 places to the left: [1,2,3,4]\nrotate 2 places to the left: [2,3,4,1]\nrotate 3 places to the left: [3,4,1,2]\nrotate 4 places to the left: [4,1,2,3]"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "import random\n\n\ndef rotate_list(list_to_rotate, num_items):\n    \"\"\"\n    Rotate list by specified number of items to the left direction.\n    :param list_to_rotate: A list to be rotated.\n    :param num_items: Number of items to rotate.\n    :return: A new list rotated by specified number of items to the left direction.\n    \"\"\"\n    # TODO: Implement rotate_list method.\n    pass\n\n\ndef test_rotate_list():\n    \"\"\"\n    Test rotate_list function.\n    \"\"\"\n    # TODO: Test rotate_list function.\n    pass\n\n\nif __name__ == '__main__':\n    test_rotate_list()"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param nums: a list of integers\n    # @param k: an integer\n    # @return: nothing\n    def rotate(self, nums, k):\n        # write your code here\n        if not nums or len(nums) == 1:\n            return nums\n        if k == 0:\n            return nums\n        \n        n = len(nums)\n        \n        for i in range(0, k):\n            nums.append(nums.pop(0))\n        for i in range(0, n - k):\n            nums[i] = nums[n - k + i]\n        \n        return nums"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param nums, a list of integer\n    # @param k, an integer\n    # @return a list of integer\n    def rotate(self, nums, k):\n        n = len(nums)\n        if k == 0:\n            return nums\n        elif k % n == 0:\n            return nums\n        else:\n            return self.rotate(nums[0:n-k], k) + nums[n-k:] + self.rotate(nums[0:k], n-k)\n\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5,6,7,8,9]\n    k = 2\n    print Solution().rotate(nums, k)"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if k == 0:\n            return head\n        while head and k > 0:\n            head = self.rotateLeft(head, k)\n            k -= 1\n        return head\n\n    def rotateLeft(self, head, k):\n        node = head\n        while k > 0 and node:\n            k -= 1\n            node = node.next\n        if not node:\n            return None\n        while node.next:\n            node = node.next\n            node.next = node.next.next\n        node.next = head\n        return node\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    print Solution().rotateRight(head, 3)"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums or k == 0:\n            return\n        k = k % len(nums)\n        nums.reverse()\n        nums.insert(k, nums.pop(0))\n        nums.reverse()"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if head is None or head.next is None:\n            return head\n        \n        # k is the number of nodes to move to the right\n        k = k % len(head.next.next)\n        \n        # move k nodes to the left\n        # move one node at a time\n        # move right\n        # move left\n        # move left\n        # move right\n        # move left\n        # move right\n        # move left\n        # move right\n        \n        while k > 0:\n            head.next = head.next.next\n            k -= 1\n        return head"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param head, a list node\n    # @param k,  an integer\n    # @return a list node\n    def rotateRight(self, head, k):\n        if head == None or head.next == None:\n            return head\n        \n        new_head = head.next\n        \n        while k!= 0:\n            if k%2 == 1:\n                head = head.next\n                k = k/2\n            else:\n                head, new_head = new_head, head.next\n                k = k/2\n        \n        return new_head"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        for i in range(k):\n            fast = fast.next\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        fast = slow.next\n        slow.next = None\n        while fast:\n            slow = slow.next\n            fast = fast.next\n        return dummy.next\n\nif __name__ == '__main__':\n    n1 = ListNode(1)\n    n2 = ListNode(2)\n    n3 = ListNode(3)\n    n4 = ListNode(4)\n    n5 = ListNode(5)\n    n6 = ListNode(6)\n    n7 = ListNode(7)\n    n8 = ListNode(8)\n    n1.next = n2\n    n2.next = n3\n    n3.next = n4\n    n4.next = n5\n    n5.next = n6\n    n6.next = n7\n    n7.next = n8\n    n8.next = None\n\n    head = n1\n    k = 2\n    res = Solution().rotateRight(head, k)\n    while res:\n        print res.val,\n        res = res.next\n    print\n    head = n1\n    k = 3\n    res = Solution().rotateRight(head, k)\n    while res:\n        print res.val,\n        res = res.next\n    print\n    head = n1\n    k = 4\n    res = Solution().rotateRight(head, k)\n    while res:\n        print res.val,\n        res = res.next\n    print\n    head = n1\n    k ="
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None or k == 0:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        head = dummy\n        \n        while k > 0:\n            head = head.next\n            k -= 1\n        head.next = head.next.next\n        return dummy.next"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums or k == 0:\n            return\n\n        n = len(nums)\n        if n == 1:\n            return\n\n        if k % n > 0:\n            k = k % n\n\n        # k >= n/2\n        if k > (n / 2):\n            k = n - k\n\n        # k < 0\n        if k < 0:\n            k = -k\n\n        # k == 0\n        if k == 0:\n            return\n\n        for i in range(k):\n            nums[i], nums[n-1-i] = nums[n-1-i], nums[i]\n\n        return\n\nclass Solution2(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums or k == 0:\n            return\n\n        n = len(nums)\n        if k == n:\n            return\n\n        # k >= n/2\n        if k > (n / 2):\n            k = n - k\n\n        # k < 0\n        if k < 0:\n            k = -k\n\n        # k == 0\n        if k == 0:\n            return\n\n        # k > n/2\n        if k > n/2:\n            for i in range(n - k - 1, -1, -1):\n                nums[i], nums[n-1-k-i] = nums[n-1-k-i], nums[i]\n\n            return\n\n        # k < n/2\n        for i in range(k):\n            nums[i], nums[n-1-k-i] = nums[n-1-k-i], nums[i]\n\n        return\n\n\nif __name__ == '__main__':"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "from collections import deque\n\ndef rotate(list, times):\n    \"\"\"\n    Rotate the list by specified number of items to the left direction.\n    :param list: the list to be rotated\n    :param times: the number of times to rotate\n    :return: the rotated list\n    \"\"\"\n    if times <= 0:\n        return list\n\n    # get the list head\n    head = list[0]\n    # get the list tail\n    tail = list[-1]\n\n    # get the new list\n    new_list = list[:]\n\n    # get the length of the list\n    length = len(new_list)\n\n    # get the index of the head\n    head_index = 0\n    # get the index of the tail\n    tail_index = length - 1\n\n    # get the index of the new head\n    new_head_index = 0\n\n    # get the index of the new tail\n    new_tail_index = length - 1\n\n    # get the index of the middle of the list\n    middle_index = length / 2\n\n    for i in range(0, times):\n        # rotate the list\n        new_head_index = head_index\n        new_tail_index = tail_index\n\n        # get the next index of the head\n        head_index = (head_index + 1) % length\n        # get the next index of the tail\n        tail_index = (tail_index - 1) % length\n\n        # get the next index of the middle\n        middle_index = (middle_index + 1) % length\n\n        # get the next element from the head\n        new_head = new_list[new_head_index]\n        # get the next element from the tail\n        new_tail = new_list[new_tail_index]\n\n        # swap the element\n        new_list[new_head_index] = new_head\n        new_list[new_tail_index] = new_tail\n\n    # return the rotated list\n    return new_list\n\n\ndef test_rotate(list, times):\n    \"\"\"\n    Test the function with the given list and times\n    :param list: the list to be rotated\n    :param times: the number of times to rotate\n    \"\"\"\n    #"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def rotateRight(self, head, times):\n        \"\"\"\n        :type head: ListNode\n        :type times: int\n        :rtype: ListNode\n        \"\"\"\n        if head == None:\n            return head\n        if times == 0:\n            return head\n        \n        slow = head\n        fast = head\n        for i in range(times):\n            fast = fast.next\n        while fast!= None:\n            slow = slow.next\n            fast = fast.next\n        \n        slow.next = head\n        head = slow.next\n        \n        return head"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "from collections import deque\n\nclass Solution:\n    # @param head, a list node\n    # @param k, an integer\n    # @return a list node\n    def rotateRight(self, head, k):\n        d = deque()\n        d.append(head)\n        while len(d) > 1:\n            cur = d.popleft()\n            next = cur.next\n            cur.next = next.next\n            next.next = cur\n            d.append(next)\n        if k == 1:\n            return head\n        cur = head\n        while k > 0:\n            next = cur.next\n            cur.next = next.next\n            next.next = cur\n            cur = next\n            k -= 1\n        return head\n\n    # @param head, a list node\n    # @param k, an integer\n    # @return a list node\n    def rotateRight_2(self, head, k):\n        cur = head\n        for i in range(k):\n            cur = cur.next\n        while k > 0:\n            next = cur.next\n            cur.next = next.next\n            next.next = cur\n            cur = next\n            k -= 1\n        return head\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.rotateRight(head,k)"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/discuss/93861/Java-O(1)-Space-O(n)-Time-Solution\n\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums or k == 0:\n            return\n\n        if k % 2 == 1:\n            k = k - 1\n\n        # reverse list from the end to the begining\n        nums.reverse()\n        # rotate k times\n        for i in range(k):\n            nums.reverse()\n        # reverse list from the begining to the end\n        nums.reverse()\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5, 6]\n    k = 3\n    sol.rotate(nums, k)\n    print(nums)\n    # [5, 6, 1, 2, 3, 4]"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if not head:\n            return None\n        if k == 0:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while k > 0:\n            cur = cur.next\n            k -= 1\n        \n        cur.next = head\n        return dummy.next"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or k == 0:\n            return head\n\n        dummy = ListNode(-1)\n        dummy.next = head\n        new_head = dummy\n        while k:\n            new_head = new_head.next\n            k -= 1\n        new_head.next = head\n        head = dummy.next\n\n        return new_head\n\n\nif __name__ == \"__main__\":\n    n1 = ListNode(1)\n    n2 = ListNode(2)\n    n3 = ListNode(3)\n    n4 = ListNode(4)\n    n5 = ListNode(5)\n    n6 = ListNode(6)\n    n7 = ListNode(7)\n    n8 = ListNode(8)\n    n1.next = n2\n    n2.next = n3\n    n3.next = n4\n    n4.next = n5\n    n5.next = n6\n    n6.next = n7\n    n7.next = n8\n\n    solution = Solution()\n    head = n1\n    head = solution.rotateRight(head, 2)\n    while head:\n        print(head.val)\n        head = head.next"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport unittest\n\n\nclass MyTestCase(unittest.TestCase):\n    def test_rotate_left(self):\n        self.assertEqual(rotate_left([1, 2, 3]), [3, 2, 1])\n        self.assertEqual(rotate_left([1, 2, 3, 4, 5, 6, 7]), [7, 6, 5, 4, 3, 2, 1])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {integer} n\n    # @return {ListNode}\n    def rotateRight(self, head, n):\n        if not head: return None\n        if n == 0: return head\n        slow = head\n        fast = head\n        while n > 0:\n            if fast:\n                fast = fast.next\n                n -= 1\n            else:\n                slow = slow.next\n                n -= 1\n        if not fast: return head\n        slow.next = head\n        head.next = None\n        fast.next = None\n        return slow\n\n    # @param {ListNode} head\n    # @param {integer} n\n    # @return {ListNode}\n    def rotateRight2(self, head, n):\n        if not head: return None\n        if n == 0: return head\n        slow = head\n        fast = head\n        while n > 0:\n            if fast:\n                fast = fast.next\n                n -= 1\n            else:\n                slow = slow.next\n                n -= 1\n        if not fast: return head\n        slow.next = head.next\n        head.next = None\n        head.next = fast\n        return slow\n\n# @param {ListNode} head\n# @param {integer} n\n# @return {ListNode}\ndef rotateRight(head, n):\n    if not head: return None\n    if n == 0: return head\n    slow = head\n    fast = head\n    while n > 0:\n        if fast:\n            fast = fast.next\n            n -= 1\n        else:\n            slow = slow.next\n            n -= 1\n    if not fast: return head\n    slow.next = head.next\n    head.next = None\n    head.next = fast\n    return slow\n\n# @param {ListNode} head\n# @param {integer} n\n# @return {ListNode}\ndef rotateRight2(head, n):\n    if not head: return None\n    if"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        # swap two elements\n        nums[0], nums[k] = nums[k], nums[0]\n        # move elements to right\n        for i in range(1, k):\n            nums[i], nums[k-i] = nums[k-i], nums[i]\n\n\n\n# for test\n# nums = [1, 2, 3, 4, 5]\n# k = 3\n# expected output\n# [5, 4, 3, 2, 1]\n# nums = [1, 2, 3, 4, 5]\n# k = 3\n# expected output\n# [5, 4, 3, 2, 1]"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        nums.reverse()\n        for i in range(k):\n            nums.reverse()\n        nums.reverse()\n        return nums\n\nif __name__ == '__main__':\n    so = Solution()\n    print(so.rotate([1, 2, 3, 4, 5], 2))\n    print(so.rotate([1, 2, 3, 4, 5], 1))\n    print(so.rotate([1, 2, 3, 4, 5], 3))\n    print(so.rotate([1, 2, 3, 4, 5], 0))\n    print(so.rotate([1, 2, 3, 4, 5], -1))\n    print(so.rotate([1, 2, 3, 4, 5], -2))\n    print(so.rotate([1, 2, 3, 4, 5], -3))\n    print(so.rotate([1, 2, 3, 4, 5], -4))\n    print(so.rotate([1, 2, 3, 4, 5], -5))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution:\n    def rotateRight(self, head: ListNode, times: int) -> ListNode:\n        \"\"\"\n        Time Complexity: O(n)\n        Space Complexity: O(1)\n        \"\"\"\n        if not head or not times:\n            return head\n\n        slow = head\n        fast = head.next\n        head.next = None\n\n        for _ in range(times):\n            slow = slow.next\n            fast = fast.next\n\n        fast.next = head\n        head.next = slow\n        return head\n\n    def rotateLeft(self, head: ListNode, times: int) -> ListNode:\n        \"\"\"\n        Time Complexity: O(n)\n        Space Complexity: O(1)\n        \"\"\"\n        if not head or not times:\n            return head\n\n        slow = head\n        fast = head.next\n        head.next = None\n\n        for _ in range(times):\n            slow = slow.next\n            fast = fast.next\n\n        fast.next = head\n        head.next = slow\n        return head"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if not head or k == 0:\n            return head\n\n        p = head\n        while p.next:\n            p = p.next\n        head = p\n        while k > 0:\n            k -= 1\n            p = head\n            while p.next:\n                p = p.next\n                head = head.next\n            head.next = p.next\n            p.next = None\n            head = p\n\n        return head\n\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateLeft(self, head, k):\n        if not head or k == 0:\n            return head\n\n        p = head\n        while p.next:\n            p = p.next\n        head = p\n        while k > 0:\n            k -= 1\n            p = head\n            while p.next:\n                p = p.next\n                head = head.next\n            head.next = p.next\n            p.next = None\n            head = p\n\n        return head\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    print Solution().rotateRight(head, 1).val\n    print Solution().rotateRight(head, 2).val\n    print Solution().rotateLeft(head, 1).val\n    print Solution().rotateLeft(head, 2).val"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/\n\nimport unittest\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        k %= len(nums)\n        if k == 0:\n            return\n\n        # rotate by 1\n        if k == 1:\n            nums.reverse()\n            return\n\n        # rotate by 2\n        if k == 2:\n            nums.reverse()\n            nums.reverse()\n            return\n\n        # rotate by 3\n        if k == 3:\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            return\n\n        # rotate by 4\n        if k == 4:\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            return\n\n        # rotate by 5\n        if k == 5:\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            return\n\n        # rotate by 6\n        if k == 6:\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            return\n\n        # rotate by 7\n        if k == 7:\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            return\n\n        # rotate by 8\n        if k == 8:\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            nums.reverse()\n            return\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self."
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {integer} n\n    # @return {ListNode}\n    def rotateRight(self, head, n):\n        if not head or not n:\n            return head\n\n        dummy = ListNode(-1)\n        dummy.next = head\n\n        cur = dummy\n        while n > 0:\n            cur = cur.next\n            n -= 1\n\n        while cur.next:\n            cur = cur.next\n            cur.next = cur.next.next\n\n        return dummy.next\n\n    # @param {ListNode} head\n    # @param {integer} n\n    # @return {ListNode}\n    def rotateLeft(self, head, n):\n        if not head or not n:\n            return head\n\n        dummy = ListNode(-1)\n        dummy.next = head\n\n        cur = dummy\n        while n > 0:\n            cur = cur.next\n            cur = cur.next\n            n -= 1\n\n        while cur.next:\n            cur = cur.next\n            cur.next = cur.next.next\n\n        return dummy.next\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n\n    res = sol.rotateRight(head, 2)\n    while res:\n        print(res.val)\n        res = res.next"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums or len(nums) == 1:\n            return\n\n        if k == 0:\n            return\n\n        k %= len(nums)\n\n        if k == 0:\n            return\n\n        # rotate by k-1, k-2, k-3,...\n        # k-1 is the last one\n        # k-2 is the next to last one\n        # k-3 is the third to last one\n        #...\n        # k is the last one\n        for i in range(k-1):\n            nums[-1], nums[0] = nums[0], nums[-1]\n            nums[-2], nums[-1] = nums[-1], nums[-2]\n\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums or len(nums) == 1:\n            return\n\n        if k == 0:\n            return\n\n        k %= len(nums)\n\n        if k == 0:\n            return\n\n        # rotate by k-1, k-2, k-3,...\n        # k-1 is the last one\n        # k-2 is the next to last one\n        # k-3 is the third to last one\n        #...\n        # k is the last one\n        for i in range(k-1):\n            nums[-1], nums[0] = nums[0], nums[-1]\n            nums[-2], nums[-1] = nums[-1], nums[-2]\n\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from utils import list_rotate\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        if n <= 1 or k == 0:\n            return\n        \n        # swap k-1 items in the first k-1 elements\n        for i in range(k-1):\n            nums[0], nums[i] = nums[i], nums[0]\n        \n        # swap the middle k-1 elements\n        for i in range(k-2, -1, -1):\n            nums[i], nums[n-1-i] = nums[n-1-i], nums[i]\n            \n        # swap the first k-1 elements\n        for i in range(k):\n            nums[i], nums[n-1-i] = nums[n-1-i], nums[i]\n        \n        # swap the last k-1 elements\n        for i in range(k-1, n):\n            nums[i], nums[n-1-i] = nums[n-1-i], nums[i]"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/rotate-list/problem\n\ndef rotateList(self, x):\n    if x <= 0:\n        return x\n\n    return rotateList(x-1, x-1) + x\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rotateList(1) == 2, \"Example1\"\n    assert rotateList(2) == 3, \"Example2\"\n    assert rotateList(3) == 2, \"Example3\"\n    assert rotateList(4) == 1, \"Example4\"\n    assert rotateList(5) == 0, \"Example5\"\n    assert rotateList(6) == 5, \"Example6\"\n    assert rotateList(7) == 6, \"Example7\"\n    assert rotateList(8) == 7, \"Example8\"\n    assert rotateList(9) == 8, \"Example9\"\n    assert rotateList(10) == 9, \"Example10\"\n    assert rotateList(11) == 10, \"Example11\"\n    assert rotateList(12) == 11, \"Example12\""
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or k == 0:\n            return head\n        p = head\n        n = 0\n        while p:\n            p = p.next\n            n += 1\n        k %= n\n        if not k:\n            return head\n        p = head\n        while n:\n            p = p.next\n            n -= 1\n        p.next = head\n        return p\n\n    def rotateRight_2(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        n = len(head.next)\n        if not k:\n            return head.next\n        p = head\n        while k > 0:\n            p = p.next\n            k -= 1\n        p.next = head\n        return p.next"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if head is None or k == 0:\n            return head\n        dummy = ListNode(-1)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        while cur:\n            cur = cur.next\n            prev = prev.next\n        prev.next = None\n        cur = dummy.next\n        dummy.next = head\n        head = cur\n        while k:\n            prev.next = cur\n            cur = cur.next\n            k -= 1\n        return dummy.next"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if not head or not k:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        slow, fast = dummy, dummy\n        for i in range(k):\n            fast = fast.next\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        fast.next = None\n        slow.next = head\n        return dummy.next\n\nif __name__ == '__main__':\n    n1 = ListNode(1)\n    n2 = ListNode(2)\n    n3 = ListNode(3)\n    n1.next = n2\n    n2.next = n3\n    n1 = Solution().rotateRight(n1, 2)\n    while n1:\n        print(n1.val)\n        n1 = n1.next"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0):\n#         self.val = val\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if not head or not k:\n            return head\n        dummy = ListNode(-1)\n        dummy.next = head\n        cur = dummy\n        for i in range(k):\n            cur = cur.next\n        last = dummy.next\n        while last:\n            cur.next = last.next\n            last.next = cur\n            last = cur\n            cur = cur.next\n        return dummy.next"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotate(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None or k == 0:\n            return head\n\n        curr = head\n        n = 1\n        while curr.next is not None:\n            curr = curr.next\n            n += 1\n\n        k %= n\n\n        if k == 0:\n            return head\n\n        if head.next is None:\n            return head\n\n        curr = head\n        for i in range(k):\n            curr = curr.next\n\n        curr.next = head\n        head.next = None\n        return curr\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n\n    k = 5\n    print Solution().rotate(head, k)\n    print head.next.next.next.next.next.next.next.val"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head == None or k == 0:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while k > 0:\n            head = head.next\n            prev.next = head\n            k -= 1\n            prev = head\n        return dummy.next"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/rotate-list/\n\nclass Solution:\n    # @param head, a list node\n    # @param k, an integer\n    # @return a list node\n    def rotateRight(self, head, k):\n        dummy = ListNode(-1)\n        dummy.next = head\n        \n        slow = dummy\n        fast = dummy\n        \n        while k > 0:\n            if k % 2 == 0:\n                slow = slow.next\n                fast = fast.next\n                k /= 2\n            else:\n                fast = fast.next\n                k = (k - 1) / 2\n        \n        while fast!= slow:\n            fast, slow = slow, slow.next\n            fast.next, slow.next = slow.next, fast.next\n        \n        return dummy.next\n    \n    # @param head, a list node\n    # @param k, an integer\n    # @return a list node\n    def rotateLeft(self, head, k):\n        dummy = ListNode(-1)\n        dummy.next = head\n        \n        slow = dummy\n        fast = dummy\n        \n        while k > 0:\n            if k % 2 == 0:\n                slow = slow.next\n                k /= 2\n            else:\n                fast = fast.next\n                k = (k - 1) / 2\n        \n        while fast!= slow:\n            fast, slow = slow, slow.next\n            fast.next, slow.next = slow.next, fast.next\n        \n        return dummy.next"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        p = head\n        n = k % (len(head.next))\n        while n:\n            p = p.next\n            n -= 1\n        p.next = head\n        return p.next\n\nif __name__ == '__main__':\n    sol = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    print(sol.rotateRight(head, 3))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n        else:\n            return \"{} -> None\".format(self.val)\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        # If list is empty or k is 0, return the original list.\n        if not head or k == 0:\n            return head\n        \n        # If k is 1, just return the list.\n        if k == 1:\n            return head\n\n        # If k is negative, just return the list.\n        if k < 0:\n            return head\n\n        # If k is 1, just return the list.\n        if k == 1:\n            return head\n\n        # If k is 2, just return the list.\n        if k == 2:\n            return head\n\n        # If k is 3, k is a number of items to the left of the current node.\n        # Just return the list.\n        if k == 3:\n            return head\n\n        # If k is greater than the number of items to the left of the current node, just return the list.\n        if k > len(head.next):\n            return head\n\n        # If k is greater than the number of items to the left of the current node, just return the list.\n        if k > len(head.next):\n            return head\n\n        # If k is greater than the number of items to the left of the current node, just return the list.\n        if k > len(head.next):\n            return head\n\n        # If k is greater than the number of items to the left of the current node, just return the list.\n        if k > len(head.next):\n            return head\n\n        # If k is greater than the number of items to the left of the current node, just return the list.\n        if k > len(head.next):\n            return"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if k % 2 == 1:\n            k = k - 1\n        l = len(nums)\n        while k:\n            k = k - l\n            nums.reverse()\n            l = l - 1"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        if k == 0:\n            return head\n        dummy = ListNode(-1)\n        dummy.next = head\n        cur = dummy\n        while k > 0:\n            k -= 1\n            cur = cur.next\n        cur.next = None\n        return dummy.next"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if head is None or head.next is None:\n            return head\n\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while p.next and p.next.next:\n            p = p.next\n        k = k % len(p.next.next)\n        p.next = p.next.next[:k]\n        p.next.next = p.next[k:]\n        return dummy.next"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        # write your code here\n        dummy = ListNode(0)\n        dummy.next = head\n        temp = dummy\n        for i in range(k):\n            temp = temp.next\n        while temp.next is not None:\n            temp = temp.next\n        head = temp.next\n        while head is not None:\n            temp = head\n            head = head.next\n            temp.next = temp.next.next\n        return dummy.next"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def rotate(lst, n):\n    if n < 0 or n >= len(lst):\n        return lst\n    new_list = lst[n:] + lst[:n]\n    return new_list\n\n# Test cases\n\n# rotate([1, 2, 3, 4, 5], 1) == [5, 4, 3, 2, 1]\n# rotate([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]\n# rotate([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\n# rotate([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2, 1]\n# rotate([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5]\n# rotate([1, 2, 3, 4, 5], -2) == [2, 3, 4, 5, 1]\n# rotate([1, 2, 3, 4, 5], -3) == [3, 4, 5, 1, 2]\n# rotate([1, 2, 3, 4, 5], -4) == [4, 5, 1, 2, 3]\n\n# rotate([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n# rotate([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\n# rotate([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\n# rotate([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]\n# rotate([1, 2, 3, 4, 5], 4) == [5, 1, 2, 3, 4]\n# rotate([1, 2, 3, 4, 5], -1) == [5, 4, 3, 2, 1]\n# rotate([1, 2, 3, 4, 5], -2) == [5, 4, 3, 2, 1]\n# rotate([1, 2, 3, 4, 5], -3) == [4, 3, 2, 1,"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = head\n        for i in range(k):\n            p = p.next\n        p.next = head\n        head = p\n        while p.next:\n            p = p.next\n            head = head.next\n        return head"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from collections import deque\n\n\nclass Solution:\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        k %= len(nums)\n        if k == 0:\n            return\n\n        q = deque(nums)\n        for i in range(k):\n            q.rotate()\n            nums[i] = q.popleft()\n            nums[len(nums) - i - 1] = q.popleft()\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.rotate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = head\n        while p.next:\n            p = p.next\n        p.next = None\n        p = head\n        while k > 0:\n            p = p.next\n            k = k % len(p.next.next)\n        p.next = head\n        return p.next"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/discuss/81227/Java-O(n)-Time-and-O(1)-Space-Solution\n\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if len(nums) == 0 or k == 0:\n            return\n\n        k %= len(nums)\n        if k == 0:\n            return\n\n        # reverse first k-1 elements\n        for i in range(k - 1):\n            nums.insert(0, nums.pop())\n\n        # reverse last k-1 elements\n        for i in range(k):\n            nums.append(nums.pop())\n\n\nif __name__ == '__main__':\n    print(Solution().rotate([1, 2, 3, 4], 1))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, times):\n        \"\"\"\n        :type head: ListNode\n        :type times: int\n        :rtype: ListNode\n        \"\"\"\n        if head == None:\n            return None\n\n        new_head = head\n        new_head_next = head.next\n        new_head_next_next = head.next.next\n        for i in range(0, times):\n            new_head_next_next = new_head_next.next\n            new_head_next = new_head_next.next\n            new_head = new_head.next\n            new_head.next = new_head_next\n\n        return new_head_next_next\n\n    def rotateRight2(self, head, times):\n        \"\"\"\n        :type head: ListNode\n        :type times: int\n        :rtype: ListNode\n        \"\"\"\n        if head == None:\n            return None\n        \n        new_head = head\n        new_head_next = head.next\n        new_head_next_next = head.next.next\n        for i in range(0, times):\n            new_head_next_next = new_head_next.next\n            new_head_next = new_head_next.next\n            new_head = new_head.next\n            new_head.next = new_head_next_next\n\n        return new_head_next_next\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.rotateRight(head,times)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @param {integer} num\n    # @return {ListNode}\n    def rotateRight(self, head, num):\n        # write your code here\n        if not head or num < 1:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        n = 1\n        while n <= num:\n            p = p.next\n            n += 1\n        \n        while p.next:\n            p = p.next\n            n -= 1\n        \n        # p.next = head\n        \n        p.next = head.next\n        head.next = dummy.next\n        return dummy.next"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/rotate-list/discuss/86594/Java-Python-C%2B%2B-O(n)-Time-O(1)-Space-O(n)\n\n\nclass Solution:\n    # @param head, a list node\n    # @param k, an integer\n    # @return a list node\n\n    def rotate_left(self, head, k):\n        if head is None or head.next is None:\n            return head\n        pre = head\n        curr = head.next\n        while k > 0:\n            if k & 1 == 0:\n                pre = curr\n                curr = curr.next\n            else:\n                curr.next = pre.next\n                pre.next = curr\n                pre = curr\n                k >>= 1\n        return pre"
    }
  ]
}