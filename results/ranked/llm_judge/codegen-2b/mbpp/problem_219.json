{
  "timestamp": "2025-09-14T18:59:19.194709",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 219,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        newstr = ''\n        for c in str:\n            if c =='':\n                newstr +=''\n            else:\n                newstr += c\n        return newstr"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def replace_space(text):\n    return text.replace(' ', '.')\n\ntext = \"  Hello world!  \"\nprint(text)\nprint(replace_space(text))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x!='', str))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "#Write your code here\n\ndef replaceBlank(string):\n    \"\"\"\n    Input: A string\n    Output: A string with all blank spaces replaced by any character\n    \"\"\"\n    return \"\".join(list(string))\n\nif __name__ == \"__main__\":\n    string = \"  \"\n    print(replaceBlank(string))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Your function will be called as follows:\n# replaceBlankSpace('I am Steve')\n\ndef replaceBlankSpace(s):\n    return s.replace(' ', '.')\n\nif __name__ == '__main__':\n    print(replaceBlankSpace('I am Steve'))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def replaceBlank(s):\n    return ''.join(s.split(' '))\n\nprint(replaceBlank('    '))\nprint(replaceBlank('   '))\nprint(replaceBlank('  '))\nprint(replaceBlank(' '))\nprint(replaceBlank(''))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '#')"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def replace_blanks(string):\n    return string.replace(' ', '.')\n\n#Test Cases\nassert replace_blanks(\"   \") == \".\"\nassert replace_blanks(\"  \") == \".\"\nassert replace_blanks(\"  a\") == \"a\"\nassert replace_blanks(\" a\") == \"a\"\nassert replace_blanks(\" a \") == \"a\"\nassert replace_blanks(\"  a  \") == \"a\"\nassert replace_blanks(\"  a  a  \") == \"a\"\nassert replace_blanks(\"  a  a  a  \") == \"a\"\nassert replace_blanks(\"  a  a  a  a  \") == \"a\"\nassert replace_blanks(\"  a  a  a  a  a  \") == \"a\""
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def replace_blanks(string):\n    return string.replace(\" \", \"\")\n\n# Sample Input\n# \"   \"\n# Sample Output\n# \"\"\n\nprint(replace_blanks(\"   \"))\nprint(replace_blanks(\"    \"))\nprint(replace_blanks(\"   \"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# TODO:\n# 1. Replace all blank spaces with''\n# 2. Replace all blank spaces with 'x'\n# 3. Replace all blank spaces with '#'\n# 4. Replace all blank spaces with '?'\n# 5. Replace all blank spaces with '.'\n# 6. Replace all blank spaces with ','\n# 7. Replace all blank spaces with''\n# 8. Replace all blank spaces with''\n# 9. Replace all blank spaces with''\n# 10. Replace all blank spaces with''\n\ndef replaceBlankSpace(str):\n    return str.replace(' ', 'x').replace(' ', '#').replace(' ', '?').replace(' ', '.').replace(' ', ',')\n\nif __name__ == '__main__':\n    print(replaceBlankSpace(\"   \"))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(['_' if s =='' else s for s in str.split(' ')])\n\nif __name__ == \"__main__\":\n    print Solution().replaceBlank(\"  \")\n    print Solution().replaceBlank(\"\")"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '*')"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '.')"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '\\n')\n\nif __name__ == '__main__':\n    solution = Solution()\n    assert solution.replaceBlank(\"\") == \"\"\n    assert solution.replaceBlank(\"   \") == \"    \"\n    assert solution.replaceBlank(\"a   \") == \"a    \"\n    assert solution.replaceBlank(\"a   b   c\") == \"a    b    c\"\n    assert solution.replaceBlank(\"a   b   c   \") == \"a    b    c   \"\n    assert solution.replaceBlank(\"   \") == \"    \""
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "#https://www.codeeval.com/open_challenges/27/\n\ndef replaceBlankSpaces(str):\n    result = str.strip()\n    result = result.replace(\" \", \"\")\n    return result\n\ndef main():\n    testCases = [\n        (\"    \", \"    \"),\n        (\"   \", \"   \"),\n        (\" \", \" \"),\n        (\"  \", \"  \"),\n        (\"abc\", \"abc\"),\n        (\" abc\", \"abc\"),\n        (\"abc  \", \"abc\"),\n        (\"abc \", \"abc\"),\n        (\"abc  \", \"abc\"),\n        (\" abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\" abc  \", \"abc\"),\n        (\" abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\"  abc  \", \"abc\"),\n        (\""
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlank(self, s):\n        res = []\n        for i in range(0, len(s)):\n            if s[i] =='':\n                res.append('_')\n            else:\n                res.append(s[i])\n        return ''.join(res)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceBlank('hello world')\n    print s.replaceBlank('hello')\n    print s.replaceBlank('  ')\n    print s.replaceBlank('')"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def replace_blank_space(s):\n    return s.replace(' ', '#')\n\n\nprint(replace_blank_space(' a  b  '))\nprint(replace_blank_space(' a  b  c  '))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def replace_blank_space(string):\n    return string.replace(' ', '*')\n\nprint(replace_blank_space('hello world'))\nprint(replace_blank_space('    '))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/replace-blank-spaces/description/\n\nclass Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return str\n\n        return str.replace(' ', '\\x00')"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '*')"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def replace_blanks(string):\n    return string.replace(' ', '+')\n\nprint(replace_blanks('   '))\nprint(replace_blanks('  a   b   c'))\nprint(replace_blanks('  a  b  c'))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c if c!='' else '_' for c in str])\n\n\nif __name__ == '__main__':\n    print Solution().replaceBlank('  ')\n    print Solution().replaceBlank('a')\n    print Solution().replaceBlank('')\n    print Solution().replaceBlank('  a')"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {string}\n    def replaceBlank(self, s):\n        result = ''\n        while s:\n            if s[0] =='':\n                result += '%'\n            else:\n                result += s[0]\n            s = s[1:]\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceBlank('hello')\n    print s.replaceBlank('he ')\n    print s.replaceBlank('he')\n    print s.replaceBlank('hello ')\n    print s.replaceBlank('hello')\n    print s.replaceBlank('hello  ')"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(s for s in str if s)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        # if str[i] == \" \":\n        #     str = str[:i] + 'a' + str[i+1:]\n        return str\n\nif __name__ == '__main__':\n    s = Solution()\n    s.replaceBlank(\"   \")\n    print s.replaceBlank(\"a\")"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(\" \", \"\")"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def replaceBlank(s):\n    return ''.join(s.split(' '))\n\ndef main():\n    s ='I am a very long string with blank spaces '\n    print s.replace(' ', '*')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "import re\n\ndef replace_space(s):\n    \"\"\"\n    Replace blank spaces in a string with any character in a string.\n    Input: A string s.\n    Output: A string with all blank spaces replaced with any character.\n    \"\"\"\n    return re.sub('\\s+', '', s)\n\nif __name__ == '__main__':\n    s =' A  B  C  '\n    print(s)\n    print(replace_space(s))\n    print(replace_space(s) == 'ABC')"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} str\n    # @param {string} replace_with\n    # @return {string}\n    def replaceBlank(self, str, replace_with):\n        str_len = len(str)\n        if str_len == 0:\n            return str\n        i = 0\n        while i < str_len:\n            if str[i] =='':\n                str[i] = replace_with\n                i += 1\n            else:\n                i += 1\n\n        return str\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceBlank(\"  hello world\", \" \")\n    print s.replaceBlank(\"  hello world  \", \" \")\n    print s.replaceBlank(\"  hello world  \", \" \")\n    print s.replaceBlank(\"  hello world\", \" \")\n    print s.replaceBlank(\"\", \" \")\n    print s.replaceBlank(\"\", \" \")\n    print s.replaceBlank(\"  \", \" \")\n    print s.replaceBlank(\"  \", \" \")"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(\" \", \"\")"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(\" \", \"\")\n\n\ndef main():\n    s = Solution()\n    print s.replaceBlank(\"   \")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/replace-all-blank-spaces/\nclass Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return \"\".join([x if x!= \" \" else \" \" for x in str])"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in str if c!='')"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', 'q')"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(\" \", \"\")\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceBlank(\"   \")\n    print s.replaceBlank(\"  a\")\n    print s.replaceBlank(\"   \")\n    print s.replaceBlank(\"a a\")\n    print s.replaceBlank(\"   \")\n    print s.replaceBlank(\"  a\")"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "# https://www.codewars.com/kata/replace-blank-spaces-with-any-character/train/python\n\ndef replaceBlankSpacesWithAnyCharacter(s):\n    return s.replace(\" \", \"\")"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# This function takes a string and returns a new string with all blank spaces replaced by any character in the string.\ndef replace_blanks(s):\n    return s.replace(\" \", \"\")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank space.\ndef replace_blanks_with_space(s):\n    return s.replace(\" \", \" \")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank space.\ndef replace_blanks_with_blank_space(s):\n    return s.replace(\" \", \"\")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank space.\ndef replace_blanks_with_blank_space(s):\n    return s.replace(\" \", \" \")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank space.\ndef replace_blanks_with_blank_space(s):\n    return s.replace(\" \", \" \")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank space.\ndef replace_blanks_with_blank_space(s):\n    return s.replace(\" \", \" \")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank space.\ndef replace_blanks_with_blank_space(s):\n    return s.replace(\" \", \" \")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank space.\ndef replace_blanks_with_blank_space(s):\n    return s.replace(\" \", \" \")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank space.\ndef replace_blanks_with_blank_space(s):\n    return s.replace(\" \", \" \")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank space.\ndef replace_blanks_with_blank_space(s):\n    return s.replace(\" \", \" \")\n\n# This function takes a string and returns a new string with all blank spaces replaced by a blank"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '*')"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "def replaceBlank(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s.replace(' ', '.')\n\nclass Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlank(self, s):\n        return s.replace(' ', '.')\n\nif __name__ == \"__main__\":\n    assert Solution().replaceBlank('   ') == '.'\n    assert Solution().replaceBlank('a  b  c') == 'abc'\n    assert Solution().replaceBlank('a  b  c  ') == 'a.b.c.'\n    assert Solution().replaceBlank('  ') == '.'"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c if c else'' for c in str)\n\n\nif __name__ == '__main__':\n    assert Solution().replaceBlank('   ') =='  ','replaceBlank'\n    assert Solution().replaceBlank('') == '','replaceBlank'\n    assert Solution().replaceBlank('a ') == 'a  ','replaceBlank'\n    assert Solution().replaceBlank('a') == 'a','replaceBlank'\n    assert Solution().replaceBlank(' a') =='a','replaceBlank'\n    assert Solution().replaceBlank('a a') == 'a a','replaceBlank'\n    assert Solution().replaceBlank('a a a') == 'a a a','replaceBlank'\n    assert Solution().replaceBlank(' a a a') =='a a a','replaceBlank'\n    assert Solution().replaceBlank('a a') == 'a a','replaceBlank'"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return''.join([s.strip() for s in str.split(' ')])"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def replace_space(s):\n    return ''.join([c if c!='' else '_' for c in s])\n\nif __name__ == '__main__':\n    s ='  abc  '\n    print(replace_space(s))\n    s =' abc   '\n    print(replace_space(s))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '*')"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return str\n        return ''.join(c for c in str if c!='')\n\nif __name__ == \"__main__\":\n    print Solution().replaceBlank(\"\")\n    print Solution().replaceBlank(\"hello\")\n    print Solution().replaceBlank(\"helo\")\n    print Solution().replaceBlank(\"hello \")\n    print Solution().replaceBlank(\"hello\\t\")\n    print Solution().replaceBlank(\"hello\\n\")\n    print Solution().replaceBlank(\"hello\\n\\r\")\n    print Solution().replaceBlank(\"hello\\r\\n\")\n    print Solution().replaceBlank(\"\\t\")\n    print Solution().replaceBlank(\"\\n\")\n    print Solution().replaceBlank(\"\\r\")"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlank(self, s):\n        return ''.join(s.split())\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceBlank(\"   \")\n    print s.replaceBlank(\"a  b  \")\n    print s.replaceBlank(\"\")"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c if c else'' for c in str])"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in str if c!='')"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def replace_blank_spaces(string):\n    return ''.join(i for i in string if i.isspace()).replace(' ', '_')\n\nprint(replace_blank_spaces(' a   b  c    '))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '#')\n\nif __name__ == '__main__':\n    assert Solution().replaceBlank(\"hello\") == \"hello\"\n    assert Solution().replaceBlank(\"\") == \"\"\n    assert Solution().replaceBlank(\"   \") == \"##\""
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def replace_spaces(s):\n    return s.replace(\" \", \"\")\n\ndef main():\n    s = \" I am a new line\"\n    print(replace_spaces(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def replace_blank(s):\n    new_s = ''\n    for c in s:\n        if c!='':\n            new_s += c\n    return new_s\n\nif __name__ == '__main__':\n    s ='  a b c d e f g h i j k l m n o p q r s t u v w x y z '\n    print s\n    print replace_blank(s)\n    print"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import re\n\ndef replace_blanks(s):\n    return re.sub('\\s+','', s)\n\nprint(replace_blanks(\"   \"))\nprint(replace_blanks(\"\"))\nprint(replace_blanks(\"  \"))\nprint(replace_blanks(\"a  \"))\nprint(replace_blanks(\"a   \"))\nprint(replace_blanks(\"   a  \"))\nprint(replace_blanks(\"a  b  \"))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(i for i in str if i!='')"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(s for s in str if s!='')"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/replace-blank-spaces\n# https://www.interviewbit.com/problems/replace-blank-spaces/\n\ndef replaceBlankSpaces(str):\n    newStr = ''\n    for c in str:\n        if c!='':\n            newStr += c\n    return newStr\n\nif __name__ == '__main__':\n    str = input()\n    print(replaceBlankSpaces(str))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlank(self, s):\n        if not s:\n            return s\n        ans = []\n        for c in s:\n            if c =='':\n                ans.append('#')\n            else:\n                ans.append(c)\n        return ''.join(ans)\n\nif __name__ == '__main__':\n    print Solution().replaceBlank('   ')\n    print Solution().replaceBlank('  a  ')\n    print Solution().replaceBlank('   a  ')\n    print Solution().replaceBlank('   a  a  a  ')\n    print Solution().replaceBlank('  a  a  a  a  ')\n    print Solution().replaceBlank('  a  a  a  a  a  a  a  ')\n    print Solution().replaceBlank('   a  a  a  a  a  a  a  a  a  a  a  ')\n    print Solution().replaceBlank('   a  a  a  a  a  a  a  a  a  a  a  a  a  ')\n    print Solution().replaceBlank('   a  a  a  a  a  a  a  a  a  a  a  a  a  a  ')\n    print Solution().replaceBlank('   a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ')\n    print Solution().replaceBlank('   a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ')\n    print Solution().replaceBlank('   a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ')\n    print Solution().replaceBlank('   a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ')"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join([chr(c) for c in str if c!=''])\n\n\nif __name__ == \"__main__\":\n    assert Solution().replaceBlank(\"\") == \"\"\n    assert Solution().replaceBlank(\"hello\") == \"helo\"\n    assert Solution().replaceBlank(\"  a  \") == \"a\"\n    assert Solution().replaceBlank(\"   a   \") == \"a\"\n    assert Solution().replaceBlank(\"a  \") == \"a\"\n    assert Solution().replaceBlank(\"a\") == \"a\""
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in str if c!='')"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def replace_blanks(s):\n    return ''.join(s.split())\n\nif __name__ == '__main__':\n    print(replace_blanks('   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('  a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('  a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('  a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('  a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('  a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('  a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('  a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('  a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('a   b   c   '))\n    print(replace_blanks('  a   b   c   '))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return str\n        return ''.join(s for s in str if s!='')"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for i in range(0, len(str)):\n            if str[i] == \" \":\n                res += \"0\"\n            else:\n                res += str[i]\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceBlank(\"a b c \")\n    print s.replaceBlank(\"\")\n    print s.replaceBlank(\"  \")\n    print s.replaceBlank(\"a  b\")\n    print s.replaceBlank(\"a b \")\n    print s.replaceBlank(\"a   b\")"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '*')\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceBlank('  '))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def replace_space(str):\n    return str.replace(' ', '*')\n\nif __name__ == '__main__':\n    str ='  '\n    print(replace_space(str))\n    str =''\n    print(replace_space(str))\n    str ='' * 10\n    print(replace_space(str))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/replace-all-blank-spaces-with-any-character/discuss/151453/Java-C%2B%2B-with-explanation\n\nclass Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = []\n        for i in str:\n            if i == \" \":\n                res.append(\"_\")\n            else:\n                res.append(i)\n        return \"\".join(res)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.replaceBlank(\"abc\"))\n    print(s.replaceBlank(\"a b c\"))\n    print(s.replaceBlank(\"a b c \"))\n    print(s.replaceBlank(\"a b c   \"))\n    print(s.replaceBlank(\"a b c    \"))\n    print(s.replaceBlank(\"a  b  c   \"))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x!='', str))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(chr(c) for c in str.strip() if c!='')\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.replaceBlank('Hello World')\n    print sol.replaceBlank('Hello')"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if len(str) == 0:\n            return str\n        result = str.strip()\n        for i in range(len(result)):\n            if result[i] =='':\n                result[i] = '#'\n        return result\n\nif __name__ == '__main__':\n    print Solution().replaceBlank('a b  c')"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import re\n\n\ndef replace_blank_spaces(string):\n    # Replace all blank spaces with any character\n    return re.sub(\"\\s+\", \" \", string)\n\nif __name__ == \"__main__\":\n    print(replace_blank_spaces(\"This is a test.\"))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlank(self, s):\n        return \"\".join([i if i!= \" \" else \"-\" for i in s])\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceBlank(\"\")\n    print s.replaceBlank(\"  \")\n    print s.replaceBlank(\"Hello World\")"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c if c!='' else '_' for c in str)\n\n\nif __name__ == '__main__':\n    print Solution().replaceBlank('hello world')"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def replace_blank(s):\n    return ''.join(s.split())\n\nprint(replace_blank('  Hello  '))\nprint(replace_blank('Hello  '))\nprint(replace_blank('Hello'))\nprint(replace_blank(''))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# Write your code below.\ndef replace_blanks(s):\n    return ''.join(ch for ch in s if ch!=' ')\n\ns ='  a   b   c   '\nprint(replace_blanks(s))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/replace-all-blank-spaces/discuss/292463/Python-O(n)-Solution\nclass Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join([''if c =='' else c for c in str])"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlank(self, s):\n        if not s:\n            return ''\n        result = []\n        for i in range(len(s)):\n            if s[i] =='':\n                result.append(s[i+1])\n            else:\n                result.append(s[i])\n        return ''.join(result)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def replace_space(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(ch for ch in s if ch!='')\n\nif __name__ == '__main__':\n    print(replace_space('   '))\n    print(replace_space('   abc  '))\n    print(replace_space('abc  '))\n    print(replace_space('   '))\n    print(replace_space('   '))\n    print(replace_space(''))\n    print(replace_space('   '))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x!='', str))\n\nif __name__ == '__main__':\n    assert Solution().replaceBlank(\"  abc   \") == \"abc\"\n    assert Solution().replaceBlank(\"\") == \"\"\n    assert Solution().replaceBlank(\"  abc   \") == \"abc\"\n    assert Solution().replaceBlank(\"   abc   \") == \"abc\""
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in str if c!='')"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(s.strip() for s in str.split())\n\n\nif __name__ == '__main__':\n    print Solution().replaceBlank(\"   \")\n    print Solution().replaceBlank(\"hello  \")\n    print Solution().replaceBlank(\"  \")\n    print Solution().replaceBlank(\"  hello\")\n    print Solution().replaceBlank(\"  hello  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution().replaceBlank(\"   hello  world  \")\n    print Solution().replaceBlank(\"   hello  world  \")\n    print Solution().replaceBlank(\"hello  world  \")\n    print Solution().replaceBlank(\"hello  world  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution().replaceBlank(\"   hello  world  \")\n    print Solution().replaceBlank(\"   hello  world  \")\n    print Solution().replaceBlank(\"hello  world  \")\n    print Solution().replaceBlank(\"hello  world  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution().replaceBlank(\"   hello  world  \")\n    print Solution().replaceBlank(\"   hello  world  \")\n    print Solution().replaceBlank(\"hello  world  \")\n    print Solution().replaceBlank(\"hello  world  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution().replaceBlank(\"   hello  world  \")\n    print Solution().replaceBlank(\"   hello  world  \")\n    print Solution().replaceBlank(\"hello  world  \")\n    print Solution().replaceBlank(\"hello  world  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution().replaceBlank(\"  hello  world  \")\n    print Solution"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, inputString):\n        \"\"\"\n        :type inputString: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in inputString if c!='')"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return str\n        return ''.join([c if c!='' else '_' for c in str])\n\n\ndef main():\n    solution = Solution()\n    print solution.replaceBlank(\"\")\n    print solution.replaceBlank(\" \")\n    print solution.replaceBlank(\" hello \")\n    print solution.replaceBlank(\"  hello \")\n    print solution.replaceBlank(\" hello world \")\n    print solution.replaceBlank(\"hello world   \")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, inputString):\n        \"\"\"\n        :type inputString: str\n        :rtype: str\n        \"\"\"\n        if not inputString:\n            return \"\"\n        return ''.join(c for c in inputString if c!='')\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceBlank(\"    \"))\n    print(s.replaceBlank(\"a  b  c\"))\n    print(s.replaceBlank(\"\"))"
    },
    {
      "rank": 82,
      "score": 4.0,
      "candidate": "def replace_blanks(s):\n    return \"\".join(s.split())\n\nif __name__ == \"__main__\":\n    s = \"  a b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "# https://www.youtube.com/watch?v=9gWgLhjxYJ0\n\ndef replace_spaces(s):\n    return ''.join([c if c!='' else '_' for c in s])\n\n\nif __name__ == '__main__':\n    test_str = 'Hello World'\n    print(replace_spaces(test_str))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a string s, return a new string where all spaces have been replaced\nby any character in the string ch.\n\"\"\"\n\nclass Solution(object):\n    def replaceBlank(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ch =''\n        return s.replace(ch, ch * len(s))\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.replaceBlank('abc')\n    print sol.replaceBlank('  ')\n    print sol.replaceBlank('')\n    print sol.replaceBlank(None)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": ""
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# Example 1:\ns = \"  \"\nprint(chars_to_string(s))\n# -> 'abc'\n\n# Example 2:\ns = \"aa bb  cc\"\nprint(chars_to_string(s))\n# -> 'abc cc'\n\n# Example 3:\ns = \" \"\nprint(chars_to_string(s))\n# ->''\n\n# Example 4:\ns = \"aa  \"\nprint(chars_to_string(s))\n# -> 'aa  '\n\n# Example 5:\ns = \"  bb  \"\nprint(chars_to_string(s))\n# -> 'abc  '\n\n# Example 6:\ns = \"  \"\nprint(chars_to_string(s))\n# ->' '\n\n# Example 7:\ns = \"a  \"\nprint(chars_to_string(s))\n# -> 'a  '\n\n# Example 8:\ns = \"a\"\nprint(chars_to_string(s))\n# -> 'a'\n\n# Example 9:\ns = \"a  \"\nprint(chars_to_string(s))\n# -> 'a  '\n\n# Example 10:\ns = \" \"\nprint(chars_to_string(s))\n# ->''\n\n# Note:\n# The string size will be at most 200.\n# The string may contain at most one space character.\n# The given string will only have lower-case letters.\n\nimport collections\n\n\nclass Solution(object):\n    def charsToString(self, chars):\n        \"\"\"\n        :type chars: str\n        :rtype: str\n        \"\"\"\n        if len(chars) == 0:\n            return ''\n        result = collections.deque()\n        for c in chars:\n            if c =='':\n                result.append(' ')\n            else:\n                result.append(c)\n        return ''.join(result)\n\n\nif __name__ == '__main__':\n    assert Solution().charsToString('a') == 'a'\n    assert Solution().charsToString('  ') ==' '\n    assert Solution().chars"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/replace-blank-spaces-with-any-character/\n# Given s, replace all blank spaces with any character.\n#\n# Example 1:\n#\n# Input: \"Hello World\"\n# Output: \"HelLo WorlD\"\n#\n# Example 2:\n#\n# Input: \"  \"\n# Output: \" \"\n#\n# Note:\n#\n# The string has length in range [1, 100].\n# The string consists of lowercase English letters only.\n#\n# Related Topics\n#\n# Design\n#\n# Similar Questions\n# Replace Blank Spaces to Make it a Palindrome\n#\nimport unittest\n# 24ms 100%\nclass Solution(object):\n    def replaceBlank(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] =='':\n                s[i] = '#'\n        return ''.join(s)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/replace-blank-spaces-with-any-character/solution/\n#\nApproach #1: Replace Blank Spaces with Any Character [Accepted]\nComplexity Analysis\nTime Complexity: O(m+n), where m is the length of s1 and n is the length of s2\nSpace Complexity: O(1)\n\n# 7ms 100%\nclass Solution {\n    public String replaceBlank(String s) {\n        if (s == null) return s;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) =='') {\n                sb.append('#');\n            } else {\n                sb.append(s"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        for i in range(len(str)):\n            if str[i] =='':\n                str[i] = 'a'\n        return str\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.replaceBlank(\"a  b  c\"))\n    print(sol.replaceBlank(\"  a  b  c  \"))\n    print(sol.replaceBlank(\"a  b  c  \"))\n    print(sol.replaceBlank(\"  \"))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def replace_blanks(string):\n    # Write your code here\n    return string.replace(\" \", \"\")\n\nprint(replace_blanks(\" I am a space \"))\n\ndef replace_blanks2(string):\n    return string.replace(\" \", \"\")\n\nprint(replace_blanks2(\" I am a space \"))\n\ndef replace_blanks3(string):\n    return string.replace(\" \", \"\")\n\nprint(replace_blanks3(\" I am a space \"))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for ch in str:\n            if ch == \" \":\n                res += \"a\"\n            else:\n                res += ch\n        return res\n\n    def replaceBlank2(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for ch in str:\n            if ch == \" \":\n                res += \"a\"\n            elif ch == \"A\":\n                res += \"a\"\n            else:\n                res += ch\n        return res\n\n    def replaceBlank3(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for ch in str:\n            if ch == \" \":\n                res += \"a\"\n            elif ch == \"A\":\n                res += \"a\"\n            elif ch == \"B\":\n                res += \"b\"\n            elif ch == \"C\":\n                res += \"c\"\n            elif ch == \"D\":\n                res += \"d\"\n            elif ch == \"E\":\n                res += \"e\"\n            elif ch == \"F\":\n                res += \"f\"\n            elif ch == \"G\":\n                res += \"g\"\n            elif ch == \"H\":\n                res += \"h\"\n            elif ch == \"I\":\n                res += \"i\"\n            elif ch == \"J\":\n                res += \"j\"\n            elif ch == \"K\":\n                res += \"k\"\n            elif ch == \"L\":\n                res += \"l\"\n            elif ch == \"M\":\n                res += \"m\"\n            elif ch == \"N\":\n                res += \"n\"\n            elif ch == \"O\":\n                res += \"o\"\n            elif ch == \"P\":\n                res += \"p\"\n            elif ch == \"Q\":\n                res += \"q\"\n            elif ch == \"R\":\n                res += \"r\""
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": ""
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a string s, replace all of its blank spaces with any character\nexcept the space character.\n\nExample 1:\n\nInput: s = \"Hello World\"\nOutput: \"HelLO World\"\nExample 2:\n\nInput: s = \"I have spaces\"\nOutput: \"H e l o w o r l d\"\nExample 3:\n\nInput: s = \"I have spaces\"\nOutput: \"I h e l o w o r l d\"\n\"\"\"\n\nclass Solution(object):\n    def replaceBlank(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c!='')\n\n    def replaceBlank2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace(' ', '_')\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceBlank('Hello World')\n    print s.replaceBlank('I have spaces')\n    print s.replaceBlank2('I have spaces')"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def replaceBlank(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c!='')\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceBlank(\"   \")"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def replaceBlank(self, s):\n        \"\"\"\n        Brute force\n\n        :param s: str\n        :return: str\n        \"\"\"\n        return ''.join(c if c!='' else '_' for c in s)\n\n    def replaceBlank2(self, s):\n        \"\"\"\n        TODO\n        :param s: str\n        :return: str\n        \"\"\"\n        if not s:\n            return s\n\n        new_s = ''\n        for c in s:\n            if c!='':\n                new_s += c\n        return new_s\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    s = f.readline()\n\n    t = Solution()\n    r = t.replaceBlank(s)\n\n    # debug\n    # r = 'hello'\n    # r =' '\n    # r =' a'\n    # r = 'aa  '\n    # r =' a '\n    # r = 'a  a'\n    # r =' a a'\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r =' aa  '\n    # r"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/replace-all-space-characters-in-a-string/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    # @param {string} s\n    # @param {string} t\n    # @return {string}\n    def replaceBlank(self, s, t):\n        return t.replace(' ', s)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @param t, a string\n    # @return a string\n    def replaceBlank(self, s, t):\n        if not s:\n            return t\n        if not t:\n            return s\n        if len(s)!= len(t):\n            return s\n        result = ''\n        for i in range(len(s)):\n            if s[i] =='' and t[i]!='':\n                result += t[i]\n            else:\n                result += s[i]\n        return result\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceBlank('', ''))\n    print(s.replaceBlank('',''))\n    print(s.replaceBlank(' ', ''))\n    print(s.replaceBlank('',''))\n    print(s.replaceBlank('','  '))\n    print(s.replaceBlank('','  \\t\\n'))\n    print(s.replaceBlank('   ','  '))\n    print(s.replaceBlank('   ','  \\t\\n'))\n    print(s.replaceBlank('   ','  '))\n    print(s.replaceBlank('   ','  \\t\\n'))\n    print(s.replaceBlank('   \\t\\n','  '))\n    print(s.replaceBlank('   \\t\\n','  \\t\\n'))\n    print(s.replaceBlank('   \\t\\n','  \\t\\n'))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def replace_blank_space(text):\n    return text.replace(\" \", \"\")\n\n#print replace_blank_space(\"a b c\")\n\n\"\"\"\nWrite a function to return a string with all lowercase letters.\n\"\"\"\n\ndef to_lower_case(text):\n    return text.lower()\n\n#print to_lower_case(\"a b c\")\n\n\"\"\"\nWrite a function to return a string with all uppercase letters.\n\"\"\"\n\ndef to_upper_case(text):\n    return text.upper()\n\n#print to_upper_case(\"a b c\")\n\n\"\"\"\nWrite a function to return a string with all letters in lowercase.\n\"\"\"\n\ndef all_lower_case(text):\n    return text.lower()\n\n#print all_lower_case(\"a b c\")\n\n\"\"\"\nWrite a function to return a string with all letters in uppercase.\n\"\"\"\n\ndef all_upper_case(text):\n    return text.upper()\n\n#print all_upper_case(\"a b c\")\n\n\"\"\"\nWrite a function to return a string with all letters in both lowercase and uppercase.\n\"\"\"\n\ndef all_lower_and_upper_case(text):\n    return text.lower() + text.upper()\n\n#print all_lower_and_upper_case(\"a b c\")\n\n\"\"\"\nWrite a function to return a string with all letters in any case.\n\"\"\"\n\ndef all_letters(text):\n    return text.lower() + text.upper() + text\n\n#print all_letters(\"a b c\")\n\n\"\"\"\nWrite a function to return a string with all digits.\n\"\"\"\n\ndef all_digits(text):\n    return text.isdigit()\n\n#print all_digits(\"12345\")\n\n\"\"\"\nWrite a function to return a string with all symbols.\n\"\"\"\n\ndef all_symbols(text):\n    return text.isalpha()\n\n#print all_symbols(\"a b c\")\n\n\"\"\"\nWrite a function to return a string with all letters, digits, and symbols.\n\"\"\"\n\ndef all_letters_digits_and_symbols(text):\n    return text.lower()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import re\n\n# Solution 1:\ndef replace_blank_space(text):\n    regex = re.compile(r'\\s+')\n    return regex.sub(' ', text)\n\n# Solution 2:\ndef replace_blank_space(text):\n    return''.join(text.split())\n\n# Test Cases\n# Test Case 1:\ntest_text =' hello  world  '\nprint(replace_blank_space(test_text))\n\n# Test Case 2:\ntest_text =' hello  world  '\nprint(replace_blank_space(test_text))\n\n# Test Case 3:\ntest_text =' hello  world  '\nprint(replace_blank_space(test_text))\n\n# Test Case 4:\ntest_text =' hello  world  '\nprint(replace_blank_space(test_text))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Write your code here\ndef replace_space(s):\n    for i in range(len(s)):\n        if s[i] == \" \":\n            s[i] = \"*\"\n    return s\n\nprint(replace_space(\"   \"))\nprint(replace_space(\"  \"))\nprint(replace_space(\" \"))\nprint(replace_space(\"   *   \"))\nprint(replace_space(\"  *   \"))\nprint(replace_space(\"   *   *   \"))\nprint(replace_space(\"  *   *   \"))\nprint(replace_space(\"   *   *   *   \"))\nprint(replace_space(\"  *   *   *   \"))\nprint(replace_space(\"   *   *   *   *   \"))\nprint(replace_space(\"  *   *   *   *   \"))\nprint(replace_space(\"   *   *   *   *   *   \"))\nprint(replace_space(\"  *   *   *   *   *   \"))\nprint(replace_space(\"   *   *   *   *   *   *   \"))\nprint(replace_space(\"  *   *   *   *   *   *   \"))\nprint(replace_space(\"   *   *   *   *   *   *   *   \"))\nprint(replace_space(\"  *   *   *   *   *   *   *   \"))\nprint(replace_space(\"   *   *   *   *   *   *   *   *   \"))\nprint(replace_space(\"  *   *   *   *   *   *   *   *   \"))\nprint(replace_space(\"   *   *   *   *   *   *   *   *   *   \"))\nprint(replace_space(\"  *   *   *   *   *   *   *   *   *   \"))\nprint(replace_space(\"   *   *   *   *   *   *   *   *   *   *   \"))\nprint(replace_space(\"  *   *   *   *   *   *   *   *   *   *   \"))\nprint(replace_space(\"   *   *   *   *   *   *   *   *   *   *   *   \"))\nprint"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @param {string} oldChar\n    # @param {string} newChar\n    # @return {string}\n    def replaceBlank(self, s, oldChar, newChar):\n        return s.replace(oldChar, newChar)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.replaceBlank(\"\", \"\", \"\"))\n    print(sol.replaceBlank(\"\", \"\", \"a\"))\n    print(sol.replaceBlank(\"\", \" \", \"\"))\n    print(sol.replaceBlank(\"\", \"\", \"ab\"))\n    print(sol.replaceBlank(\"\", \"\", \"abc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"a\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol.replaceBlank(\"\", \"a\", \"bc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol.replaceBlank(\"\", \"a\", \"bc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol.replaceBlank(\"\", \"a\", \"bc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol.replaceBlank(\"\", \"a\", \"bc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol.replaceBlank(\"\", \"a\", \"bc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol.replaceBlank(\"\", \"a\", \"bc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol.replaceBlank(\"\", \"a\", \"bc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol.replaceBlank(\"\", \"a\", \"bc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol.replaceBlank(\"\", \"a\", \"bc\"))\n    print(sol.replaceBlank(\"\", \"a\", \"b\"))\n    print(sol"
    }
  ]
}