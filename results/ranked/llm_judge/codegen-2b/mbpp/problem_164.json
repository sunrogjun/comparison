{
  "timestamp": "2025-09-14T18:34:52.126114",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 164,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {boolean}\n    def isValid(self, s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack[-1]!= '(':\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\ns = Solution()\nprint s.isValid(\"()\")\nprint s.isValid(\"(())\")\nprint s.isValid(\"()())\")\nprint s.isValid(\"()()(()())()\")\nprint s.isValid(\"()(()()(()))\")\nprint s.isValid(\"()(()(()())\")"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param s: A string\n    @return: True if s is valid, otherwise false\n    \"\"\"\n    def isValid(self, s):\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append('(')\n            elif ch == ')':\n                if len(stack) == 0:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n            else:\n                stack.append(ch)\n        return len(stack) == 0"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def validParentheses(s):\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return s[0] == '(' or s[0] == ')';\n    if s[0] == '(':\n        return validParentheses(s[1:])\n    if s[-1] == ')':\n        return validParentheses(s[:-1])\n    return False\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return validParentheses(s)\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.isValid('()') == True\n    assert s.isValid('()(') == True\n    assert s.isValid('()())') == True\n    assert s.isValid('()()()') == False\n    assert s.isValid('(()(') == False\n    assert s.isValid('()(()') == False\n    assert s.isValid('()(()())') == False\n    assert s.isValid('()(()(()))') == False"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import collections\n\nclass Solution:\n    def isValid(self, s):\n        stack = collections.deque()\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            elif c == ')':\n                return False\n        return stack.pop() == ')'\n\ns = Solution()\nprint s.isValid('()')\nprint s.isValid('()[]{}')\nprint s.isValid('(())')\nprint s.isValid('())')\nprint s.isValid('(())(')\nprint s.isValid('()(()')\nprint s.isValid('((()))')\nprint s.isValid('()(())')\nprint s.isValid('()(())(')\nprint s.isValid('()(()(()')\nprint s.isValid('()(()()(')\nprint s.isValid('()(()()()')\nprint s.isValid('()(()()()()')\nprint s.isValid('()(()()()()()')\nprint s.isValid('()(()()()()()()')\nprint s.isValid('()(()()()()()()()')\nprint s.isValid('()(()()()()()()()()')"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n            elif c == ',':\n                if len(stack) == 0:\n                    return False\n                if stack[-1]!= '(':\n                    return False\n            else:\n                return False\n        return len(stack) == 0"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "#!/bin/python\n\nclass Solution:\n    # @param {string} s\n    # @return {boolean}\n    def isValid(self, s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0\n\ns = Solution()\nprint s.isValid(\"()\")\nprint s.isValid(\"()()\")\nprint s.isValid(\"()(\")\nprint s.isValid(\"(())\")\nprint s.isValid(\"()(())\")\nprint s.isValid(\"()(()(()))\")\nprint s.isValid(\"()(()()()()(()()(()))(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def is_valid_parentheses(s):\n    stack = []\n    for char in s:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n                if len(stack) == 0:\n                    return True\n        else:\n            return False\n    return False\n\n\ndef main():\n    s
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def is_valid(s):\n    stack = []\n    for char in s:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= \"(\":\n                return False\n        else:\n            continue\n    return len(stack) == 0\n\nif __name__ == '__main__':\n    print is_valid(\"(()\")\n    print is_valid(\"(()(()))\")\n    print is_valid(\"(()((()()())))\")\n    print is_valid(\"((((()()))))\")\n    print is_valid(\"((((()()))))\")\n    print is_valid(\"()((()))\")\n    print is_valid(\"((((()())))))\")\n    print is_valid(\"()(()((()())))\")\n    print is_valid(\"()(()((()())))\")\n    print is_valid(\"()(()((()())))\")\n    print is_valid(\"()(()((()())))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")\n    print is_valid(\"()((()()))\")"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# I/O\n\ndef read_input():\n    return input().strip()\n\ndef write_output(res):\n    return 'Yes' if res else 'No'\n\n# Code\n\ndef main():\n    res = True\n    while True:\n        try:\n            s = read_input()\n        except EOFError:\n            break\n        if len(s) == 0:\n            break\n        res = res and verify_paren(s)\n    print(write_output(res))\n\ndef verify_paren(s):\n    # if s.count('(')!= s.count(')'):\n    #     return False\n    # if s.count('(')!= s.count('['):\n    #     return False\n    # if s.count('(')!= s.count('{'):\n    #     return False\n    # if s.count(')')!= s.count(']'):\n    #     return False\n    # if s.count(')')!= s.count('}'):\n    #     return False\n    return True\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                if len(stack) > 0 and c!= stack[-1]:\n                    return False\n                stack.append(c)\n        return len(stack) == 0"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param str, a string\n    # @return a boolean\n    def isValid(self, str):\n        stack = []\n        for c in str:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                continue\n        return len(stack) == 0\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isValid('()')\n    print s.isValid('(())')\n    print s.isValid('(()())')\n    print s.isValid('(((()())))')\n    print s.isValid('((()())()))')\n    print s.isValid('(()())')\n    print s.isValid('()')"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def isValidParentheses(s):\n    stack = []\n    for i in s:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\n\ns = \"(()())()\"\nprint(isValidParentheses(s))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def isValidParentheses(s):\n    if len(s) == 0:\n        return False\n    if s[0] == '(' or s[0] == '{' or s[0] == '[':\n        return isValidParentheses(s[1:])\n    if s[-1] == ')' or s[-1] == '}' or s[-1] == ']':\n        return isValidParentheses(s[:-1])\n    return True\n\nif __name__ == '__main__':\n    assert isValidParentheses('()') == False\n    assert isValidParentheses('([])') == False\n    assert isValidParentheses('((()))') == True\n    assert isValidParentheses('{([])}') == True\n    assert isValidParentheses('{([{()])}') == False\n    assert isValidParentheses('{([])}') == False\n    assert isValidParentheses('{([])}') == False\n    assert isValidParentheses('{([{}])}') == True\n    assert isValidParentheses('{()}') == True\n    assert isValidParentheses('{[()]}') == True\n    assert isValidParentheses('{([(()))}') == False\n    assert isValidParentheses('{([{()}])}') == True\n    assert isValidParentheses('{(()]}') == False\n    assert isValidParentheses('{([][])}') == True\n    assert isValidParentheses('{([][{}])}') == False\n    assert isValidParentheses('{([][][])}') == True\n    assert isValidParentheses('{(()}') == True\n    assert isValidParentheses('{([][]})') == True\n    assert isValidParentheses('{([][]}{})') == False\n    assert isValidParentheses('{([][]}{})') == False\n    assert isValidParentheses('{([][]}{})') == False"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from collections import deque\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n        stack = deque()\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    if stack.popleft()!= '(':\n                        return False\n            else:\n                if len(stack) == 0:\n                    return False\n                elif c == ')':\n                    return False\n                else:\n                    stack.append(c)\n        return len(stack) == 0"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n            else:\n                if not stack or stack.pop()!= '(':\n                    return False\n        return not stack"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import re\n\n# Definition for a Parentheses:\n# class Parentheses:\n#     def __init__(self, s):\n#         self.content = s\n#         self.count = 0\n#         self.check()\n#\n#     def check(self):\n#         stack = []\n#         for i in range(len(self.content)):\n#             if self.content[i] == '(':\n#                 stack.append(self.content[i])\n#             elif self.content[i] == ')':\n#                 if len(stack) == 0:\n#                     return False\n#                 else:\n#                     stack.pop()\n#             else:\n#                 continue\n#         return len(stack) == 0\n\nclass Solution:\n    # @param s, a string\n    # @return a boolean\n    def isValid(self, s):\n        return self.check(s)\n\n    def check(self, s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            elif s[i] == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                continue\n\n        return len(stack) == 0"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {boolean}\n    def isValid(self, s):\n        stack = []\n        for ch in s:\n            if ch == \"(\":\n                stack.append(ch)\n            elif ch == \")\":\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isValid(\"(()\")\n    print s.isValid(\"()()\")\n    print s.isValid(\"(()(()))\")\n    print s.isValid(\"(((()()))\")"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import sys\n\n# https://leetcode.com/problems/valid-parentheses/\n# https://leetcode.com/problems/valid-parentheses/discuss/231828/C%2B%2B-Python-Solution-with-detailed-explanation\n\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append('(')\n            elif ch == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(ch)\n        return not stack\n\nif __name__ == '__main__':\n    s = Solution()\n    if s.isValid('()'):\n        print('Valid')\n    else:\n        print('Invalid')"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def is_valid_parentheses(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= \"(\" or len(stack)!= 0:\n                return False\n        else:\n            return False\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    assert is_valid_parentheses(\"()\") == True\n    assert is_valid_parentheses(\"(()\") == False\n    assert is_valid_parentheses(\"(()()()\") == False"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def validate(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        else:\n            continue\n    return len(stack) == 0\n\nif __name__ == '__main__':\n    assert(validate(\"()\"))\n    assert(validate(\"(())\"))\n    assert(validate(\"(()))\"))\n    assert(validate(\"((()))\"))\n    assert(validate(\"((())))\"))\n    assert(validate(\"(((())))\"))\n    assert(validate(\"(((((())))))\"))\n    assert(validate(\"(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def valid_parentheses(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if not s: return False\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if len(stack) == 1:\n                stack.pop()\n            else:\n                stack.pop()\n                stack.pop()\n        else:\n            if not stack:\n                return False\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    assert valid_parentheses(\"()\") == True\n    assert valid_parentheses(\"(()\") == False\n    assert valid_parentheses(\"(()())\") == True\n    assert valid_parentheses(\"(())\") == False\n    assert valid_parentheses(\"()()()\") == True\n    assert valid_parentheses(\"(()())\") == False\n    assert valid_parentheses(\"()()()()()()()\") == True\n    assert valid_parentheses(\"()()()()()()()()()()\") == False"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Definition for a parenthesized expression\nclass ParenthesizedExpression:\n    def __init__(self, exp):\n        self.exp = exp\n\n    def __str__(self):\n        return str(self.exp)\n\n    def __repr__(self):\n        return str(self.exp)\n\n    def __eq__(self, other):\n        return self.exp == other.exp\n\nclass Solution:\n    # @param {string} expression\n    # @return {boolean}\n    def isValid(self, expression):\n        stack = []\n        for char in expression:\n            if char == '(':\n                stack.append(ParenthesizedExpression(stack[-1]))\n            elif char == ')':\n                if len(stack) == 0:\n                    return False\n                parent = stack.pop()\n                if not isinstance(parent, ParenthesizedExpression):\n                    return False\n            else:\n                if isinstance(stack[-1], ParenthesizedExpression):\n                    stack[-1].exp = ParenthesizedExpression(char)\n                else:\n                    stack[-1] = ParenthesizedExpression(char)\n        if len(stack)!= 0:\n            return False\n        return True"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')':\n                if not stack:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n        return not stack\n\nclass Solution2(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')':\n                if not stack:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n        return not stack\n\nif __name__ == \"__main__\":\n    assert Solution().isValid(\"()\")\n    assert Solution().isValid(\"(()\")\n    assert Solution().isValid(\"()()\")\n    assert Solution().isValid(\"()()()\")\n    assert Solution().isValid(\"()()()(\")\n    assert Solution().isValid(\"()()()()(\")\n    assert Solution().isValid(\"()()()()()(\")\n    assert Solution().isValid(\"()()()()()()(\")\n    assert Solution().isValid(\"()()()()()()()()(\")\n    assert Solution().isValid(\"()()()()()()()()()(\")\n    assert Solution().isValid(\"()()()()()()()()()()\")\n    assert Solution().isValid(\"()()()()()()()()()()()\")\n    assert Solution().isValid(\"()()()()()()()()()()()\")\n    assert Solution().isValid(\"()()()()()()()()()()()()\")\n    assert Solution().isValid(\"()()()()()()()()()()()()()\")\n    assert Solution().isValid(\"()()()()()()()()()()()()()()\")\n    assert Solution().isValid(\"()()()()()()()()()()()()()()()\")\n    assert Solution().isValid(\""
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def validParentheses(s):\n    count = 0\n    stack = []\n\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(c)\n\n    if stack:\n        return False\n\n    return True\n\ns = '(()()(()))'\n\nprint validParentheses(s)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1]!= '(':\n                    return False\n                stack.pop()\n        return not stack"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for ch in s:\n            if ch == \"(\":\n                stack.append(ch)\n            elif ch == \")\":\n                if len(stack) == 0:\n                    return False\n                if stack.pop()!= \"(\":\n                    return False\n            else:\n                if len(stack)!= 0:\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isValid(\"()\")\n    print s.isValid(\"(())\")\n    print s.isValid(\"(()(()))\")\n    print s.isValid(\"(()())\")\n    print s.isValid(\"(()()()()())\")\n    print s.isValid(\"(((((((()()))))))))\")\n    print s.isValid(\"((((((((((()()))))))))))\")\n    print s.isValid(\"((((((((((()()))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")\n    print s.isValid(\"((((((((((((()()))))))))))))\")"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isValid(\"()\")\n    print s.isValid(\"()[]{}\")\n    print s.isValid(\"(()\")\n    print s.isValid(\"((()))\")\n    print s.isValid(\"(())(()\")"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0 or stack[-1]!= '(':\n                    return False\n                stack.pop()\n            else:\n                if len(stack)!= 0 and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "# Definition for a string\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return '(' + self.s + ')'\n\n    def __repr__(self):\n        return 'String(' + self.s + ')'\n\nclass Solution:\n    # @param {string} s\n    # @return {boolean}\n    def isValid(self, s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0\n\nif __name__ == '__main__':\n    s = Solution()\n    s1 = \"()\"\n    s2 = \"()()\"\n    s3 = \"(()\"\n    s4 = \"()()()\"\n    s5 = \"(()(()))\"\n    s
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a boolean\n    def isValid(self, s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                elif len(stack) == 1:\n                    return True\n                else:\n                    stack.pop()\n        return False\n\nif __name__ == '__main__':\n    s = ')'\n    s = '()'\n    s = '()()'\n    s
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n            elif c == ',':\n                if not stack:\n                    return False\n            elif c =='':\n                if stack:\n                    return False\n        return not stack\n\nif __name__ == '__main__':\n    s = Solution()\n    s.isValid(\"()\")\n    s.isValid(\"()[]\")\n    s.isValid(\"(()(()))\")\n    s.isValid(\"()[]\")\n    s.isValid(\"()\")\n    s.isValid(\"(())\")\n    s.isValid(\"()()\")\n    s.isValid(\"()()()\")\n    s.isValid(\"(()()())\")\n    s.isValid(\"()()()(())(()())()\")\n    s.isValid(\"()()()(())(()()())(())(()())()\")"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n            elif c == '{' or c == '}':\n                return False\n            else:\n                continue\n        return len(stack) == 0\n\n\ndef main():\n    s = Solution()\n    s.isValid(\"(()\")\n    s.isValid(\"()\")\n    s.isValid(\"()[]{}\")\n    s.isValid(\"()(())\")\n    s.isValid(\"()[)]\")\n    s.isValid(\"()[]{}()\")\n    s.isValid(\"(()()())\")\n    s.isValid(\"()()()\")\n    s.isValid(\"()()\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a boolean\n    def isValid(self, s):\n        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if stack and stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n\ns = Solution()\ns.isValid(\"()\")\ns.isValid(\"(()\")\ns.isValid(\"(()()\")\ns.isValid(\"())\")"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for c in s:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= \"(\":\n                return False\n        else:\n            if len(stack) > 0:\n                stack.pop()\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    s = \"(())\"\n    print(is_valid(s))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        else:\n            continue\n    return stack == []\n\nprint(is_valid(\"()\"))\nprint(is_valid(\"()(()\"))\nprint(is_valid(\"(()()\"))\nprint(is_valid(\"(()()()\"))\nprint(is_valid(\"(()()()()))\"))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            elif c == '[' and stack and stack[-1] == '[':\n                stack.pop()\n            elif c == ']' and stack and stack[-1] == ']':\n                stack.pop()\n        return not stack\n\ns = Solution()\ns.isValid(\"()\")\ns.isValid(\"()[]\")\ns.isValid(\"(])\")\ns.isValid(\"([]\")\ns.isValid(\"(()\")\ns.isValid(\"([]\")\ns.isValid(\"([])\")\ns.isValid(\"([()\")\ns.isValid(\"([])[]\")\ns.isValid(\"([])[()]\")\ns.isValid(\"([][])\")\ns.isValid(\"[()]\")\ns.isValid(\"[()]\")\ns.isValid(\"[()[]\")\ns.isValid(\"[()][]\")\ns.isValid(\"[[]]\")\ns.isValid(\"[[]]\")\ns.isValid(\"[][]\")\ns.isValid(\"[[][]\")\ns.isValid(\"[[][]][]\")\ns.isValid(\"[[][]][]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")\ns.isValid(\"[[][]][]]\")"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n        return not stack"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        elif char =='':\n            continue\n        else:\n            return False\n    if len(stack)!= 0:\n        return False\n    return True\n\nif __name__ == '__main__':\n    s = '()()()'\n    print(is_valid_parentheses(s))\n    s = '()()()'\n    print(is_valid_parentheses(s))\n    s = '()(()()()()()()()()()()())'\n    print(is_valid_parentheses(s))\n    s
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            elif c =='':\n                if stack and stack[-1] == '(' or stack and stack[-1] == ')':\n                    stack.pop()\n                else:\n                    return False\n        return not stack"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import re\n\ndef validate(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    string = re.sub(r'(\\()', r'\\g<1>', string)\n    string = re.sub(r'(\\))', r'\\g<1>', string)\n    string = re.sub(r'(\\()', r'\\g<1>', string)\n    string = re.sub(r'(\\))', r'\\g<1>', string)\n    return string == '()'"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef is_valid_parens(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nif __name__ == '__main__':\n    s = '()(()()())((()())(()(())(()()()))()'\n    print is_valid_parens(s)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/valid-parentheses/\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for i in range(0, len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            elif s[i] == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/valid-parentheses/problem\n\ndef valid_parens(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\nif __name__ == '__main__':\n    string = input()\n    print(valid_parens(string))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(s):\n    if s == '':\n        return True\n    \n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= '(':\n                return False\n        else:\n            return False\n    \n    if len(stack) > 0:\n        return False\n    \n    return True\n\nif __name__ == '__main__':\n    s = '()'\n    print(is_valid_parentheses(s))\n    s = ')('\n    print(is_valid_parentheses(s))\n    s = '()()'\n    print(is_valid_parentheses(s))\n    s = '()(()'\n    print(is_valid_parentheses(s))\n    s = '()()()'\n    print(is_valid_parentheses(s))\n    s = '()()()'\n    print(is_valid_parentheses(s))\n    s = '()()()()'\n    print(is_valid_parentheses(s))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    stack = []\n    for c in string:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n        else:\n            stack.append(c)\n    if stack == []:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print is_valid(\"()\")\n    print is_valid(\"()())\")\n    print is_valid(\"(()()(()))\")\n    print is_valid(\"(((()()()))))\")\n    print is_valid(\"()()(()())\")\n    print is_valid(\"(((((((()()))))))\")\n    print is_valid(\"(((((((()())))))()))\")"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            elif s[i] == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n        return stack == []"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def valid_parens(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        else:\n            if len(stack) > 0 and c == stack[-1]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) > 0:\n        return False\n    return True\n\nprint(valid_parens(\"()\"))\nprint(valid_parens(\"(()()()()()()())\"))\nprint(valid_parens(\"(()))\"))\nprint(valid_parens(\"(())(()))\"))\nprint(valid_parens(\"()(()()()()()()()()))\"))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            if stack and stack[-1] == i:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\nprint(is_valid
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                continue\n        return len(stack) == 0"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "import re\n\ndef is_valid(s):\n    if re.match(r\"^[(]{1,}$\", s):\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    s = input()\n    print(is_valid(s))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(' and stack[-2] == '(':\n                    stack.pop()\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        return len(stack) == 0\n\nif __name__ == '__main__':\n    s = '(())(()()()(()))'\n    print Solution().isValid(s)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            elif s[i] == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    \"\"\"\n    Returns true if string is valid, false otherwise.\n    \"\"\"\n    stack = []\n    for i in string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nprint is_valid('()')\nprint is_valid(')(')\nprint is_valid('((()))')\nprint is_valid('((()))(())')"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n\n        stack = []\n        for char in s:\n            if char == '(' and not stack:\n                stack.append(char)\n            elif char == ')' and stack:\n                if stack.pop()!= char:\n                    return False\n            else:\n                return False\n        return True\n\ns = Solution()\nprint(s.isValid(\"(())\"))\nprint(s.isValid(\"()\"))\nprint(s.isValid(\"()[]{}()\"))\nprint(s.isValid(\"(()(()))\"))\nprint(s.isValid(\"()()()\"))\nprint(s.isValid(\"()(()()))\"))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef is_valid(s):\n    stack = []\n    for c in s:\n        if c == \"(\":\n            stack.append(\"(\");\n        elif c == \")\":\n            if stack.pop()!= \"(\":\n                return False\n        else:\n            stack.append(c)\n    return len(stack) == 0\n\nif __name__ == '__main__':\n    s = \"())()()()(())\"\n    assert is_valid(s)\n\n    s
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "class Solution:\n    def isValid(self, s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1]!= '(':\n                    return False\n                stack.pop()\n        return not stack"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for i in range(len(s)):\n            if s[i] == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n            elif s[i] == '(':\n                stack.append(s[i])\n            else:\n                if stack and stack[-1] == ')':\n                    stack.pop()\n                else:\n                    return False\n        return not stack\n\na = Solution()\nprint a.isValid(\"(()\")\nprint a.isValid(\"()(\")\nprint a.isValid(\"()()\")\nprint a.isValid(\"()()\")\nprint a.isValid(\"()(\")\nprint a.isValid(\"())\")\nprint a.isValid(\"())\")\nprint a.isValid(\"(()())\")\nprint a.isValid(\"(()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")\nprint a.isValid(\"()()()\")"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1]!= '(':\n                    return False\n                stack.pop()\n            else:\n                continue\n        return not stack\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isValid(\"()\")\n    print s.isValid(\"(())\")\n    print s.isValid(\"()())\")\n    print s.isValid(\"(()))\")"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import re\n\n\ndef is_valid(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    if not string:\n        return False\n    if re.match(r'^\\s*\\(+\\s*\\)+$', string):\n        return True\n    if re.match(r'^\\s*\\(+\\)+$', string):\n        return True\n    if re.match(r'^\\s*\\(+\\s*\\)+$', string):\n        return True\n    if re.match(r'^\\s*\\)+$', string):\n        return True\n    if re.match(r'^\\s*\\)+$', string):\n        return True\n    if re.match(r'^\\s*\\)+$', string):\n        return True\n    return False\n\nif __name__ == '__main__':\n    assert is_valid('()')\n    assert not is_valid('(')\n    assert not is_valid(')')\n    assert not is_valid('()(')\n    assert not is_valid('()()')\n    assert not is_valid('(()')\n    assert not is_valid('(())')\n    assert not is_valid('(()(')\n    assert not is_valid('(()())')\n    assert not is_valid('(()())')\n    assert not is_valid('())')\n    assert not is_valid('(())')\n    assert not is_valid('(())')\n    assert not is_valid('((()))')\n    assert not is_valid('((()()))')\n    assert not is_valid('((()()))')\n    assert not is_valid('((())')"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import collections\n\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n\n        stack = collections.deque()\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if not stack:\n                    return False\n                else:\n                    stack.pop()\n            elif c == \")\":\n                return False\n            else:\n                continue\n\n        return not stack\n\n\nif __name__ == \"__main__\":\n    print Solution().isValid(\"()\")\n    print Solution().isValid(\"()()\")\n    print Solution().isValid(\"()())\")"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef isValid(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print(\"Please provide a string.\")\n        sys.exit(0)\n    print(isValid(sys.argv[1]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    stack = []\n    for i in range(0, len(string)):\n        if string[i] == '(':\n            stack.append(i)\n        elif string[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    print is_valid('()')\n    print is_valid('()[]{}')\n    print is_valid('(()())')\n    print is_valid('(()())(()())')\n    print is_valid('(()())(()())(()())')\n    print is_valid('()()()()')\n    print is_valid('()()()()()')\n    print is_valid('()()()()()()')"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/valid-parentheses/\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                elif stack[-1]!= '(':\n                    return False\n                stack.pop()\n        return len(stack) == 0"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import re\n\n\ndef valid_parentheses(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return re.match(r'^[(]*[)]*$', s) is not None\n\n\nif __name__ == '__main__':\n    assert valid_parentheses(\"(\") is True\n    assert valid_parentheses(\"())\") is True\n    assert valid_parentheses(\"()()\") is False\n    assert valid_parentheses(\"(()())\") is False\n    assert valid_parentheses(\"()(\") is False\n    assert valid_parentheses(\"())()\") is False\n    assert valid_parentheses(\"()(()())\") is False"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n        return not stack"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "import re\n\ndef is_valid_paren(s):\n    if s is None or s == '':\n        return False\n    if re.search(r'^\\(|\\)$', s):\n        return False\n    return True\n\ndef is_valid_paren2(s):\n    if s is None or s == '':\n        return False\n    if re.search(r'^\\(|\\)$', s):\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    s = '()'\n    print(is_valid_paren2(s))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import re\n\ndef is_valid(str):\n    \"\"\"\n    :type str: str\n    :rtype: bool\n    \"\"\"\n    if not str:\n        return False\n    for i in range(len(str)):\n        if str[i] == ')':\n            if str[i-1] == '(':\n                return False\n        elif str[i] == '(':\n            if str[i-1] == ')':\n                return False\n    return True\n\nif __name__ == '__main__':\n    assert is_valid(\"()\")\n    assert is_valid(\"()())\")\n    assert not is_valid(\"(())\")\n    assert not is_valid(\"(()(()()()()()()))\")\n    assert not is_valid(\"()()()\")\n    assert not is_valid(\"(()(()(()()()()()()))\")"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                continue\n        return len(stack) == 0"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def validParentheses(string):\n    if not string:\n        return False\n    if string == '()':\n        return True\n    if string[0]!= '(' and string[-1]!= ')':\n        return False\n    return validParentheses(string[1:-1])\n\nprint(validParentheses('()'))\nprint(validParentheses('(()'))\nprint(validParentheses('()()'))\nprint(validParentheses('()(()'))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 0:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n            else:\n                if len(stack) > 0 and stack[-1]!= '(' and stack[-1]!= ')':\n                    return False\n        return len(stack) == 0\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.isValid(\"()\")\n    assert s.isValid(\"()()\")\n    assert s.isValid(\"(()())\")\n    assert s.isValid(\"(()(()))\")\n    assert s.isValid(\"()(()(()))\")\n    assert s.isValid(\"()(()(()()))\")\n    assert s.isValid(\"()(()(()())\")"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n            else:\n                if stack:\n                    return False\n        return len(stack) == 0\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.isValid(\"()\") == True\n    assert s.isValid(\"(())\") == True\n    assert s.isValid(\"((()))\") == True\n    assert s.isValid(\"()()\") == False\n    assert s.isValid(\"(()()\") == False\n    assert s.isValid(\"()(())\") == False\n    assert s.isValid(\"((()))\") == False\n    assert s.isValid(\"()()()\") == False\n    assert s.isValid(\"(()()())\") == False\n    assert s.isValid(\"(()()(()))\") == False\n    assert s.isValid(\"((())(()))\") == False\n    assert s.isValid(\"((()())\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s.isValid(\"((()()))\") == False\n    assert s"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                if stack[-1]!= '(':\n                    return False\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isValid(\"()\")\n    print s.isValid(\"(()\")\n    print s.isValid(\"()(()\")\n    print s.isValid(\"()(()(())()\")\n    print s.isValid(\"(()()()\")\n    print s.isValid(\"(()(())\")"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    \"\"\"\n    Check if a string s is valid.\n\n    :param s: string\n    :return: True if s is valid, False otherwise\n    \"\"\"\n    stack = []\n    for c in s:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        elif c == \" \":\n            if len(stack) > 0:\n                stack.pop()\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    assert is_valid(\"()\")\n    assert not is_valid(\"(()\")\n    assert is_valid(\"()())\")\n    assert not is_valid(\"()(()\")\n    assert is_valid(\"()()()\")\n    assert not is_valid(\"()()(\")"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def valid_parentheses(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\nif __name__ == '__main__':\n    print(valid_parentheses('()'))\n    print(valid_parentheses('(()))'))\n    print(valid_parentheses('()(()))'))\n    print(valid_parentheses('(()()()())((())())(()()())(()()()))'))\n    print(valid_parentheses('(((())(()))'))\n    print(valid_parentheses('((()))'))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            stack.pop()\n        elif c =='':\n            pass\n        else:\n            return False\n    return not stack\n\nprint(is_valid_parentheses('('))\nprint(is_valid_parentheses('()'))\nprint(is_valid_parentheses('()('))\nprint(is_valid_parentheses('(()))'))\nprint(is_valid_parentheses('()()'))\nprint(is_valid_parentheses('(()()'))\nprint(is_valid_parentheses('()()()'))\nprint(is_valid_parentheses('(()()()'))\nprint(is_valid_parentheses('()()()()'))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "import re\nimport sys\n\ndef verify(string):\n    # Write your code here\n    # The string should be enclosed in parentheses.\n    # The string should not contain any spaces.\n    if len(string) < 1:\n        return False\n    if string[0]!= \"(\":\n        return False\n    if string[-1]!= \")\":\n        return False\n    stack = []\n    for i in range(len(string)-1):\n        if string[i] == \"(\":\n            stack.append(string[i])\n        elif string[i] == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        string = sys.argv[1]\n    else:\n        string = input()\n    print verify(string)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    if c == stack[-1]:\n                        stack.pop()\n                    else:\n                        return False\n        return len(stack) == 0\n\nif __name__ == \"__main__\":\n    print Solution().isValid(\"()\")\n    print Solution().isValid(\"(()\")\n    print Solution().isValid(\"())\")\n    print Solution().isValid(\"(()()\")\n    print Solution().isValid(\"(()())\")\n    print Solution().isValid(\"()()()\")\n    print Solution().isValid(\"(()()()\")"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def is_valid_parens(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        else:\n            continue\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n# Your ParensValid object will be instantiated and called as such:\n# obj = ParensValid(s)\n# param_1 = obj.is_valid_parens(s)"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "import re\n\ndef is_valid(s):\n    if not isinstance(s, str):\n        return False\n    s = s.lower()\n    if not s or s.count('(')!= s.count(')'):\n        return False\n    for p in s:\n        if p not in ['(', ')', '{', '}']:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_valid('()'))\n    print(is_valid('(()))'))\n    print(is_valid('{()}'))\n    print(is_valid('()[]{}'))\n    print(is_valid('()[][][]{}'))\n    print(is_valid('{[{[]}]}'))\n    print(is_valid('{([]}'))\n    print(is_valid('{[}]{[]}'))\n    print(is_valid('{[[]}'))\n    print(is_valid('{[}]{[]}'))\n    print(is_valid('{[{[]}]{}}'))\n    print(is_valid('{[][]}'))\n    print(is_valid('{[][]{[]}'))\n    print(is_valid('{[][][]{}'))\n    print(is_valid('{[][][]{[]}'))\n    print(is_valid('{[][][]{}'))\n    print(is_valid('{[][][]{[]}'))\n    print(is_valid('{[][][]{}'))\n    print(is_valid('{[][][]{[]}'))\n    print(is_valid('{[][][]{}'))\n    print(is_valid('{[][][]{[]}'))\n    print(is_valid('{[][][]{}'))\n    print(is_valid('{[][][]{[]}'))\n    print(is_valid('{[][][]{}'))\n    print(is_valid('{[][][]{[]}'))\n    print"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "import re\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n            else:\n                if len(stack) == 0:\n                    return False\n        return len(stack) == 0\n\ns = Solution()\ns.isValid(\"(())\")\ns.isValid(\"(()()\")\ns.isValid(\"()()(()\")\ns.isValid(\"()(())\")\ns.isValid(\"(()())\")\ns.isValid(\"()()()\")\ns.isValid(\"()()(()\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()()()\")\ns.isValid(\"()()(()\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")\ns.isValid(\"()(())\")"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')':\n                if len(stack) == 0:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n            else:\n                if len(stack) > 0 and stack.pop()!= ch:\n                    return False\n        if len(stack) > 0:\n            return False\n        return True"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.isValid('()'))\n    print(s.isValid('((()))'))\n    print(s.isValid('()()()()'))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                continue\n        return len(stack) == 0\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isValid(\"(()())\")\n    print s.isValid(\"()\")\n    print s.isValid(\"(()()(()))\")\n    print s.isValid(\"()()(())\")"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def validParentheses(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '(':\n            count += 1\n        else:\n            if string[i] == ')':\n                count -= 1\n    return count == 0"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                continue\n\n        if not stack:\n            return True\n\n        return False"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                continue\n        return len(stack) == 0"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if not s:\n        return False\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        else:\n            continue\n    return len(stack) == 0\n\ns = \"()\"\nprint(is_valid(s))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n        else:\n            return False\n    if stack:\n        return False\n    return True\n\n# Test Cases\nprint(is_valid(\"()\"))\nprint(is_valid(\"((()()))))\"))\nprint(is_valid(\"((((()()))))\"))\nprint(is_valid(\"())))\"))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "from string import ascii_letters\n\n\ndef is_valid_parens(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for i, c in enumerate(s):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef test_is_valid_parens():\n    assert is_valid_parens('(())')\n    assert not is_valid_parens('(()')\n    assert not is_valid_parens('(()')\n    assert is_valid_parens('()())')\n    assert is_valid_parens('()(())')\n\n\nif __name__ == '__main__':\n    test_is_valid_parens()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def is_valid_paren(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        elif c =='':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\nif __name__ == '__main__':\n    print(is_valid_paren('(()))'))\n    print(is_valid_paren('(())(') == False)\n    print(is_valid_paren('(()((')) == False"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.isValid('(())') is True, '\"(\"(\"\")\" is valid'\n    assert s.isValid('(((())))') is False, '\"((((())))\\\" is valid'\n    assert s.isValid('()') is True, '\"\" is valid'\n    assert s.isValid('((())))') is False, '\"(((())))\\\" is valid'\n    assert s.isValid('(()))') is False, '\"(\"(()))\\\" is valid'\n    assert s.isValid('(()()))') is False, '\"(\"(()()))\\\" is valid'\n    assert s.isValid('((()()))') is False, '\"(\"(()()))\\\" is valid'\n    assert s.isValid('((()()()))') is False, '\"(\"(()()()))\\\" is valid'"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def check_parens(s):\n    if not s:\n        return False\n    open_parens = s.count('(')\n    close_parens = s.count(')')\n    if open_parens > close_parens:\n        return False\n    return True\n\nif __name__ == '__main__':\n    s
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def isValidParentheses(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for c in string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n        else:\n            if not stack or stack.pop()!= ')':\n                return False\n    return not stack\n\ndef main():\n    print isValidParentheses('()')\n    print isValidParentheses(')(')\n    print isValidParentheses('(()')\n    print isValidParentheses('(())((())(())(())()()(())(())())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())("
    },
    {
      "rank": 95,
      "score": 2.0,
      "candidate": "# TODO:\n# - Handle multiple input\n# - Handle \"(\" and \")\" in different ways\n\n\ndef valid_paren(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if s[0] == '(' and s[-1] == ')':\n        return True\n    if s[0] == ')' and s[-1] == '(':\n        return True\n    if s[0] == '(' and s[-1] == ')':\n        return True\n    if s[0] == ')' and s[-1] == '(':\n        return True\n    return False\n\n\ndef valid_paren_with_brackets(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if s[0] == '[' and s[-1] == ']':\n        return True\n    if s[0] == ']' and s[-1] == '[':\n        return True\n    if s[0] == '[' and s[-1] == ']':\n        return True\n    if s[0] == ']' and s[-1] == '[':\n        return True\n    return False\n\n\ndef valid_paren_with_brackets_and_parens(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if s[0] == '[':\n        return valid_paren_with_brackets(s[1:])\n    if s[0] == ']':\n        return valid_paren_with_brackets(s[1:])\n    if s[0] == '(' and s[-1] == ')':\n        return True\n    if s[0] == ')' and s[-1] == '(':\n        return True\n    if s[0] == '[' and s[-1] == ']':\n        return True\n    if s[0] == ']' and s[-1] == '[':\n        return True"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a boolean\n    def isValid(self, s):\n        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if not stack:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    print(Solution().isValid(\"()\"))\n    print(Solution().isValid(\"()\"))\n    print(Solution().isValid(\"(())\"))\n    print(Solution().isValid(\"()()\"))\n    print(Solution().isValid(\"(()))\"))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import re\n\ndef is_valid(string):\n    # write your code here\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(string[i])\n        elif string[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n\n#test case\nprint(is_valid(\"(\"))\nprint(is_valid(\"))\"))\nprint(is_valid(\"(()\"))\nprint(is_valid(\"()(\"));\nprint(is_valid(\"(())\"))\nprint(is_valid(\"((()))\"))\nprint(is_valid(\"((()()))\"))\nprint(is_valid(\"((()()()))\"))\nprint(is_valid(\"((()()()))\"))\nprint(is_valid(\"()((()()())))\"))\nprint(is_valid(\"()((()()()))\"))\nprint(is_valid(\"(()()))\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()(()()())\"))\nprint(is_valid(\"()(()()())\"))\nprint(is_valid(\"()(()()())\"))\nprint(is_valid(\"()(()()())\"))\nprint(is_valid(\"()(()()())\"))\nprint(is_valid(\"()()(()())\"))\nprint(is_valid(\"()()(()())\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is_valid(\"()()()()\"))\nprint(is"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def is_valid(s):\n    if s == None or s == '':\n        return False\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= '(':\n                return False\n        else:\n            if len(stack) == 0:\n                return False\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    assert is_valid(\"(())\") == False\n    assert is_valid(\"()()\") == True\n    assert is_valid(\"()(())\") == True\n    assert is_valid(\"()(()()()(()()))\") == True\n    assert is_valid(\"(((()()()()()()())))\") == True\n    assert is_valid(\"(((()()()()()()()())))\") == False\n    assert is_valid(\"()(()()()()()())()\") == False"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param s: A string\n    @return: True if the string is valid, False if not\n    \"\"\"\n    def isValid(self, s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            elif s[i] == ')':\n                if len(stack) == 0:\n                    return False\n                elif stack.pop()!= '(':\n                    return False\n            else:\n                continue\n        return len(stack) == 0\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isValid(\"(())((())(())(())(())(())(())(())(())(())(())(())(())(())()())\")\n    print s.isValid(\"()\")\n    print s.isValid(\"(()(()))\")\n    print s.isValid(\"()()\")\n    print s.isValid(\"(((())))\")\n    print s.isValid
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/valid-parentheses/\n\n\nclass Solution:\n    # @param s, a string\n    # @return a boolean\n    def isValid(self, s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                continue\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    assert Solution().isValid(\"()\") == True\n    assert Solution().isValid(\"()(\") == False\n    assert Solution().isValid(\"(()(()(()(()(()(()(()(()(()(()(()(()()))))))))))))\") == False"
    }
  ]
}