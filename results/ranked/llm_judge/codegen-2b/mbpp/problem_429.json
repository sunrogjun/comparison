{
  "timestamp": "2025-09-14T20:33:16.342594",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 429,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "#\n# This file is part of the SoftLayer Java API\n#\n# Copyright (c) 2015 SoftLayer Technologies, Inc.\n#\n# This library is free software; you can redistribute it and/or modify it under\n# the terms of the GNU Lesser General Public License as published by the Free\n# Software Foundation; either version 2.1 of the License, or (at your option)\n# any later version.\n#\n# This library is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n# details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this library; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n#\n\nimport re\n\n# This function is used to extract the adverb positions from the input sentence\ndef extract_adverbs(sentence):\n    # Get the list of adverbs and their positions in the sentence\n    adverbs = sentence.split(' ')\n    adverbs = [word for word in adverbs if re.search('[a-z]', word)]\n    adverbs = [int(re.search('[0-9]*', word).group()) for word in adverbs]\n    return adverbs"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# TODO:\n#   1) Use the helper function to find all adverbs in the sentence.\n#   2) Find the number of adverbs in the sentence.\n#   3) Find the position of the adverbs.\n#   4) Print the results.\n\n# TODO:\n#   1) Use helper function to find all adverbs in the sentence.\n#   2) Find the number of adverbs in the sentence.\n#   3) Find the position of the adverbs.\n#   4) Print the results.\n\n\ndef find_adverbs(sentence):\n    \"\"\"\n    Returns a list of all adverbs in the sentence.\n    \"\"\"\n    adverbs = []\n\n    for word in sentence:\n        if word.is_adverb():\n            adverbs.append(word)\n\n    return adverbs\n\n\ndef find_adverbs_and_positions(sentence):\n    \"\"\"\n    Returns a list of all adverbs and their positions in the sentence.\n    \"\"\"\n    adverbs = find_adverbs(sentence)\n\n    positions = []\n\n    for adverb in adverbs:\n        positions.append((adverb.position, adverb))\n\n    return positions\n\n\ndef find_adverbs_and_positions_helper(sentence):\n    \"\"\"\n    Returns a list of all adverbs and their positions in the sentence.\n    \"\"\"\n    adverbs = []\n\n    for word in sentence:\n        if word.is_adverb():\n            adverbs.append(word)\n\n    return adverbs\n\n\ndef find_adverbs_and_positions_helper_2(sentence):\n    \"\"\"\n    Returns a list of all adverbs and their positions in the sentence.\n    \"\"\"\n    adverbs = []\n\n    for word in sentence:\n        if word.is_adverb():\n            adverbs.append(word)\n\n    return adverbs"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def get_pos_adverbs(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[str]\n    \"\"\"\n    adverbs = []\n    pos = []\n    for word in sentence:\n        if word.is_adverb:\n            adverbs.append(word.word)\n        if word.is_part_of_speech:\n            pos.append(word.word)\n    return adverbs, pos\n\ndef get_adverb_positions(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[Tuple[str, int]]\n    \"\"\"\n    adverbs, pos = get_pos_adverbs(sentence)\n    positions = []\n    for i, word in enumerate(sentence):\n        if word.is_adverb and word.word in adverbs:\n            positions.append((word.word, i))\n    return positions\n\ndef get_adverbs_positions(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[Tuple[str, int]]\n    \"\"\"\n    adverbs, pos = get_pos_adverbs(sentence)\n    positions = []\n    for i, word in enumerate(sentence):\n        if word.is_adverb:\n            positions.append((word.word, i))\n    return positions\n\ndef get_pos_adverbs_positions(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[Tuple[str, int, int]]\n    \"\"\"\n    adverbs, pos = get_pos_adverbs(sentence)\n    positions = []\n    for i, word in enumerate(sentence):\n        if word.is_adverb:\n            positions.append((word.word, i, i + len(word.word)))\n    return positions\n\nif __name__ == \"__main__\":\n    sentence = \"He is a very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    positions = []\n    for word in sentence:\n        if word.endswith('s'):\n            positions.append(word)\n            adverbs.append(word[:-1])\n    return adverbs, positions\n\ndef main():\n    sentence = 'I am very good at writing english.'\n    adverbs, positions = find_adverbs(sentence)\n    print(adverbs)\n    print(positions)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# A class to represent a sentence.\nclass Sentence:\n    def __init__(self, sentence):\n        self.sentence = sentence\n\n    # Returns the sentence as a list of words.\n    def get_words(self):\n        return self.sentence.split()\n\n    # Returns the list of adverbs in the sentence.\n    def get_adverbs(self):\n        return [word for word in self.get_words() if word.endswith(\"ad\")]\n\n    # Returns the list of nouns in the sentence.\n    def get_nouns(self):\n        return [word for word in self.get_words() if not word.endswith(\"ad\")]\n\n    # Returns the list of verbs in the sentence.\n    def get_verbs(self):\n        return [word for word in self.get_words() if word.endswith(\"ing\")]\n\n# Returns the list of adverbs in the sentence.\ndef get_adverbs(sentence):\n    return sentence.get_adverbs()\n\n# Returns the list of nouns in the sentence.\ndef get_nouns(sentence):\n    return sentence.get_nouns()\n\n# Returns the list of verbs in the sentence.\ndef get_verbs(sentence):\n    return sentence.get_verbs()\n\n# Returns the list of adverbs and their positions in the sentence.\ndef get_adverbs_positions(sentence):\n    adverbs_positions = []\n\n    for i in range(len(sentence.get_adverbs())):\n        adverbs_positions.append([sentence.get_adverbs()[i], i])\n\n    return adverbs_positions\n\n# Returns the list of nouns and their positions in the sentence.\ndef get_nouns_positions(sentence):\n    nouns_positions = []\n\n    for i in range(len(sentence.get_nouns())):\n        nouns_positions.append([sentence.get_nouns()[i], i])\n\n    return nouns_positions\n\n# Returns the list of verbs and their positions in the sentence.\ndef get_verbs_positions(sentence):\n    verbs"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def find_adverbs(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[str]\n        \"\"\"\n        adverbs = []\n        for word in sentence.split(' '):\n            if word.lower() in set(['the', 'a', 'an']):\n                adverbs.append(word)\n        return adverbs\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.find_adverbs('This is a test.')"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# REF [site] >> https://www.tensorflow.org/programmers_guide/embedding_tf_keras\n# REF [site] >> https://www.tensorflow.org/tutorials/embedding_viz\n# REF [site] >> https://www.tensorflow.org/tutorials/distribute/basic\n\nimport tensorflow as tf\nimport numpy as np\n\n# REF [site] >> https://www.tensorflow.org/tutorials/distribute/basic\ndef main():\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/basic\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz_2\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz_3\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz_4\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz_5\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz_6\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz_7\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz_8\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz_9\n\t# REF [site] >> https://www.tensorflow.org/tutorials/distribute/embedding_viz_10\n\t# REF [site] >> https://www.tensorflow.org/"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef find_adverbs(sentence):\n    adverbs = defaultdict(list)\n    for word in sentence:\n        if word.endswith('s'):\n            adverbs[word[:-1]].append(word)\n    return adverbs\n\n\ndef main():\n    sentence = 'He said that he is awesome'\n    adverbs = find_adverbs(sentence)\n    print(adverbs)\n    print(adverbs['awesome'])\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Definition for an Adverb.\nclass Adverb(object):\n    def __init__(self, value, position):\n        \"\"\"\n        :type value: str\n        :type position: int\n        \"\"\"\n        self.value = value\n        \"\"\"\n        :type value: str\n        \"\"\"\n        self.position = position\n        \"\"\"\n        :type value: int\n        \"\"\"\n\nclass Solution(object):\n    def __init__(self):\n        self.adverbs = []\n\n    def addAdverb(self, adverb):\n        self.adverbs.append(adverb)\n\n    def getAdverbs(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[Adverb]\n        \"\"\"\n        self.adverbs = []\n        for word in sentence.split():\n            if word in self.adverbs:\n                self.adverbs[self.adverbs.index(word)].position += 1\n            else:\n                self.addAdverb(Adverb(word, 0))\n        return self.adverbs\n\na = Solution()\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na.addAdverb('adverb')\na."
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nProblem:\nGiven a sentence, find all adverbs in the sentence.\n\nExample:\nFor the sentence \"I ate a sandwich.\",\n\"eat\" is an adverb, and \"a\" is a noun.\n\nOutput:\n[\n  [\"eat\", 1],\n  [\"a\", 2],\n  [\"sandwich\", 3],\n]\n\nSolution:\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n- Use a stack.\n- Use a stack.\n- A stack is a list that is used to store elements in a sorted order.\n\n-"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-adverbs\n\nimport collections\n\ndef find_adverbs(sentence):\n    adverbs = collections.defaultdict(int)\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs[word] += 1\n    return adverbs\n\n\nif __name__ == '__main__':\n    sentence = input()\n    adverbs = find_adverbs(sentence)\n    for key in sorted(adverbs.keys()):\n        print(key, adverbs[key])"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# Definition for an \"adverb\".\nclass Adverb:\n    def __init__(self, word):\n        self.word = word\n        self.pos = None\n\n    def __str__(self):\n        return self.word\n\nclass Solution(object):\n    def findAdverbs(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[Adverb]\n        \"\"\"\n        adverbs = []\n        for word in sentence.split():\n            if word[-1] == '.':\n                adverbs.append(Adverb(word))\n        return adverbs\n\n    def findAdverbs2(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[Adverb]\n        \"\"\"\n        adverbs = []\n        for word in sentence.split():\n            if word[-1] == '.':\n                adverbs.append(Adverb(word))\n        return adverbs\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findAdverbs2(\"This is a test, and this is a test.\"))\n    print(s.findAdverbs2(\"This is a test, and this is a test.\"))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    adverbs_positions = []\n    for word in sentence:\n        if word[0] == '#':\n            adverbs.append(word)\n            adverbs_positions.append(word.index(word[1]))\n    return adverbs, adverbs_positions\n\ndef main():\n    sentence = 'This is a #test. #This is a #test.'\n    adverbs, adverbs_positions = find_adverbs(sentence)\n    print(adverbs)\n    print(adverbs_positions)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\ndef read_sentences(filename):\n    \"\"\"Reads a file containing a list of sentences and returns a list of sentences.\n    \"\"\"\n    with open(filename, 'r') as f:\n        sentences = f.readlines()\n    return sentences\n\ndef find_adverbs(sentence):\n    \"\"\"Finds all adverbs in a sentence and returns a list of adverbs.\n    \"\"\"\n    adverbs = []\n    for word in sentence.split():\n        if re.search(r'\\b(adverbs|adverb)\\b', word, re.IGNORECASE):\n            adverbs.append(word)\n    return adverbs\n\ndef main():\n    sentences = read_sentences('input.txt')\n    adverbs = find_adverbs(' '.join(sentences))\n    print '\\n'.join(adverbs)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith(\"s\"):\n            adverbs.append(word)\n    return adverbs\n\nif __name__ == \"__main__\":\n    sentence = \"We have a meeting tomorrow with the president.\"\n    adverbs = find_adverbs(sentence)\n    print adverbs"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def __init__(self):\n        self.positions = {}\n\n    def find_adverbs(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[int]\n        \"\"\"\n        self.positions = {}\n        for i, w in enumerate(sentence):\n            if w in self.positions:\n                self.positions[w].append(i)\n            else:\n                self.positions[w] = [i]\n        return self.positions\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.find_adverbs(\"I am a very good boy.\")\n    print s.find_adverbs(\"I am a very bad boy.\")\n    print s.find_adverbs(\"I am a very very good boy.\")\n    print s.find_adverbs(\"I am a very very bad boy.\")\n    print s.find_adverbs(\"I am a very good boy.\")\n    print s.find_adverbs(\"I am a very bad boy.\")\n    print s.find_adverbs(\"I am a very very good boy.\")\n    print s.find_adverbs(\"I am a very very bad boy.\")\n    print s.find_adverbs(\"I am a very good boy.\")\n    print s.find_adverbs(\"I am a very bad boy.\")\n    print s.find_adverbs(\"I am a very very good boy.\")\n    print s.find_adverbs(\"I am a very very bad boy.\")\n    print s.find_adverbs(\"I am a very good boy.\")\n    print s.find_adverbs(\"I am a very bad boy.\")\n    print s.find_adverbs(\"I am a very very good boy.\")\n    print s.find_adverbs(\"I am a very very bad boy.\")"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# -*- coding: utf-8 -*-\n# @Author: Gillett Hernandez\n# @Date:   2016-05-10 08:48:10\n# @Last Modified by:   Gillett Hernandez\n# @Last Modified time: 2016-08-25 14:06:21\n\nfrom nltk.corpus import brown\nimport nltk\nimport re\n\ndef parse_sentence(sentence):\n    \"\"\"\n    Parse a sentence into a list of tokens.\n\n    >>> parse_sentence(\"John likes to eat meat.\")\n    [u'John', u'likes', u'to', u'eat', u'meat.']\n    \"\"\"\n    sentence = sentence.lower()\n    sentence = sentence.split()\n    return sentence\n\ndef extract_adverbs(sentence):\n    \"\"\"\n    Extract all adverbs from a sentence.\n    \"\"\"\n    adverbs = []\n    for word in sentence:\n        if word.endswith('s'):\n            adverbs.append(word)\n    return adverbs\n\ndef extract_pos(sentence):\n    \"\"\"\n    Extract all the part-of-speech tags from a sentence.\n    \"\"\"\n    pos = []\n    for word in sentence:\n        pos.append(word.pos)\n    return pos\n\ndef extract_nouns(sentence):\n    \"\"\"\n    Extract all the nouns from a sentence.\n    \"\"\"\n    nouns = []\n    for word in sentence:\n        if word.pos == 'NN':\n            nouns.append(word)\n    return nouns\n\ndef get_adverbs(sentence):\n    \"\"\"\n    Return a list of all the adverbs in a sentence.\n    \"\"\"\n    adverbs = extract_adverbs(sentence)\n    return adverbs\n\ndef get_pos(sentence):\n    \"\"\"\n    Return a list of all the part-of-speech tags in a sentence.\n    \"\"\"\n    pos = extract_pos(sentence)\n    return pos\n\ndef get_nouns(sentence):\n    \"\"\"\n    Return a list of all the nouns in a sentence.\n    \"\"\"\n    nouns = extract_noun"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    for word in sentence:\n        if word.endswith('s'):\n            adverbs.append(word)\n    return adverbs\n\nif __name__ == '__main__':\n    adverbs = find_adverbs('Hello world')\n    print(adverbs)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/find-adverbs-and-positions/discuss/93914/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/131852/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/140917/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/140739/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/140563/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/137716/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/137714/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/137715/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/137713/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/137711/Python-solution-using-two-stack-and-a-while-loop\n# https://leetcode.com/problems/find-adverbs-and-positions/discuss/137710/Python-"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "# https://www.hackerrank.com/challenges/adverbs-and-positions\n\n# Brute force\n# Time complexity: O(n)\n# Space complexity: O(1)\n\ndef adverb_positions(sentence):\n    adverbs = []\n    for index, word in enumerate(sentence):\n        if word in adverbs:\n            adverbs[adverbs.index(word)].append(index)\n        else:\n            adverbs.append([index])\n\n    return adverbs"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "import re\n\ndef get_adverbs(sentence):\n    adverbs = []\n    for word in sentence:\n        if re.match(r'adverb', word):\n            adverbs.append(word)\n    return adverbs\n\ndef get_adverbs_positions(sentence):\n    adverbs = get_adverbs(sentence)\n    adverbs_positions = []\n    for adverb in adverbs:\n        adverbs_positions.append(adverb.index(adverb))\n    return adverbs_positions\n\ndef get_adverbs_positions_with_regex(sentence):\n    adverbs = get_adverbs(sentence)\n    adverbs_positions = []\n    for i, adverb in enumerate(adverbs):\n        adverbs_positions.append(re.findall(r'\\b(adverb)\\b', sentence[i]))\n    return adverbs_positions\n\nif __name__ == '__main__':\n    sentence = 'I am a computer programmer.'\n    adverbs = get_adverbs(sentence)\n    adverbs_positions = get_adverbs_positions(sentence)\n    adverbs_positions_with_regex = get_adverbs_positions_with_regex(sentence)\n    print('adverbs:', adverbs)\n    print('adverbs positions:', adverbs_positions)\n    print('adverbs positions with regex:', adverbs_positions_with_regex)"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def find_adverbs(sentence):\n    \"\"\"\n    >>> find_adverbs('I like green eggs and ham.')\n    [('like', 4), ('green', 4), ('eggs', 4), ('ham', 4)]\n    \"\"\"\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs.append((word[:-1], sentence.index(word) + 1))\n    return adverbs\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "__author__ = 'vovanec'\n\nimport collections\nimport re\n\ndef get_adverbs(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: collections.Iterable[str]\n    \"\"\"\n    adverbs = []\n    for word in re.split('[^a-zA-Z]', sentence):\n        if word in ['a', 'an', 'the', 'of', 'and', 'or']:\n            adverbs.append(word)\n    return adverbs\n\n\ndef main():\n    sentence = input('Enter a sentence: ')\n    adverbs = get_adverbs(sentence)\n    print('Adverbs:'+ ', '.join(adverbs))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef find_adverbs(sentence):\n    \"\"\"\n    Find all adverbs and their positions in a given sentence.\n\n    :param sentence:\n    :return:\n    \"\"\"\n    adverbs = []\n    positions = []\n    for word in sentence.split(' '):\n        if word.endswith('adverb'):\n            adverbs.append(word)\n            positions.append(len(word) - len(word.rstrip('s')))\n\n    return adverbs, positions\n\n\ndef main():\n    sentence = 'The cat sat on the mat.'\n    adverbs, positions = find_adverbs(sentence)\n    print(adverbs)\n    print(positions)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "import collections\n\n\ndef find_adverb_positions(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: collections.OrderedDict\n    \"\"\"\n    adverbs = collections.OrderedDict()\n    for word in sentence.split():\n        if word in ['are', 'is', 'were']:\n            adverbs[word] = []\n        elif word.endswith('s'):\n            adverbs[word].append(word[:-1])\n    return adverbs\n\n\ndef main():\n    sentence = \"This is an are are are are are is a are a are.\"\n    adverbs = find_adverb_positions(sentence)\n    for word in adverbs:\n        print(word, adverbs[word])\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "import re\n\ndef find_adverbs(sentence):\n    \"\"\"\n    Return a list of adverbs and their positions in sentence.\n    :param sentence: string\n    :return: list of adverbs and their positions\n    \"\"\"\n    adverbs = []\n    adverbs_positions = []\n    for i in range(0, len(sentence)):\n        if re.search(r'[a-z]{1,3}', sentence[i]):\n            adverbs.append(sentence[i])\n            adverbs_positions.append(i)\n    return adverbs, adverbs_positions\n\ndef main():\n    sentence = 'The quick brown fox jumps over the lazy dog.'\n    adverbs, adverbs_positions = find_adverbs(sentence)\n    print 'Adverbs:', adverbs\n    print 'Positions:', adverbs_positions\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef find_adverbs(sentence):\n    adverbs = defaultdict(int)\n    for word in sentence:\n        if word.is_adverb:\n            adverbs[word] += 1\n\n    return adverbs\n\nif __name__ == '__main__':\n    sentence = \"I ate a cookie and a cookie was delicious\"\n    adverbs = find_adverbs(sentence)\n    print(adverbs)"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\nsentence = \"The cat sat on the mat. The dog jumped over the fence.\"\n\n# Find all adverbs in a sentence.\n\nadverbs = set(re.findall(r\"^.*?(?<![.!?])ad(?:ver)?(?![.!?])\", sentence, re.IGNORECASE))\n\n# Find all adverbs in a sentence.\n\nadverbs = set(re.findall(r\"^.*?(?<![.!?])ad(?:ver)?(?![.!?])\", sentence, re.IGNORECASE))\n\nprint(adverbs)\n\nprint(adverbs.intersection([\"mat\", \"fence\"]))\n\nprint(adverbs.union([\"mat\", \"fence\"]))\n\nprint(adverbs.difference([\"mat\", \"fence\"]))\n\nprint(adverbs.symmetric_difference([\"mat\", \"fence\"]))\n\nprint(adverbs.difference([\"mat\", \"fence\"]).issubset(adverbs))\n\nprint(adverbs.intersection([\"mat\", \"fence\"]).issubset(adverbs))\n\nprint(adverbs.union([\"mat\", \"fence\"]).issubset(adverbs))\n\nprint(adverbs.symmetric_difference([\"mat\", \"fence\"]).issubset(adverbs))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "#!/bin/python\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i].isupper():\n            adverbs.append(sentence[i])\n    return adverbs\n\ndef main():\n    sentence = \"I am an adjective, I am an adjective, and so on.\"\n    adverbs = find_adverbs(sentence)\n    print adverbs\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def adverbs_in_sentence(sentence):\n    adverbs = []\n    adverbs_positions = []\n\n    for i in range(len(sentence)):\n        if sentence[i] == '.':\n            adverbs_positions.append(i)\n            adverbs.append(sentence[i-1:i+1])\n\n    return adverbs, adverbs_positions\n\ndef main():\n    sentence = 'the dog was hungry'\n    adverbs, adverbs_positions = adverbs_in_sentence(sentence)\n    print(adverbs)\n    print(adverbs_positions)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef find_adverbs(sentence):\n    adverbs = defaultdict(list)\n    for word in sentence:\n        if word.pos == 'ADV':\n            adverbs[word.lemma].append(word.pos)\n    return adverbs\n\nif __name__ == '__main__':\n    sentence = 'The cat is black and the dog is white'\n    adverbs = find_adverbs(sentence)\n    print(adverbs)"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "import re\n\ndef find_adverb_positions(sentence):\n    adverbs = []\n    for word in sentence.split(' '):\n        if word.lower() in ['a', 'an', 'the']:\n            adverbs.append(word)\n    return adverbs\n\nsentence = 'I am a nice person.'\n\nadverbs = find_adverb_positions(sentence)\n\nprint(adverbs)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/find-all-noun-adverbs-in-a-sentence/\n\nclass Solution:\n    # @param sentence, a list of strings\n    # @return a list of lists of integers\n    def findNounAdverbs(self, sentence):\n        words = set(word.lower() for word in sentence)\n        adverbs = []\n        for word in words:\n            if word.endswith('s'):\n                adverbs.append(word[:-1])\n            if word.endswith('ed'):\n                adverbs.append(word[:-2])\n        return adverbs"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/the-adverbs\n\n# Input Format\n# The first line contains an integer T, denoting the number of test cases.\n# The second line contains T space-separated test cases, each of which has two integers N and M.\n# The next N lines contain N space-separated words.\n# The next M lines contain M space-separated words.\n\n# Output Format\n# For each test case, output one line containing the number of adverbs found and their positions.\n# For example, if the second line is:\n# 2\n# a\n# b\n# c\n# d\n# e\n# f\n# g\n# h\n# i\n# j\n# k\n# l\n# m\n# n\n# o\n# p\n# q\n# r\n# s\n# t\n# u\n# v\n# w\n# x\n# y\n# z\n# the first line contains an integer N, denoting the number of test cases.\n# The second line contains N space-separated test cases, each of which has two integers N and M.\n# The next N lines contain N space-separated words.\n# The next M lines contain M space-separated words.\n# The output is one line per test case.\n# For example, if the second line is:\n# 2\n# a\n# b\n# c\n# d\n# e\n# f\n# g\n# h\n# i\n# j\n# k\n# l\n# m\n# n\n# o\n# p\n# q\n# r\n# s\n# t\n# u\n# v\n# w\n# x\n# y\n# z\n# the first line contains an integer N, denoting the number of test cases.\n# The second line contains N space-separated test cases, each of which has two integers N and M.\n# The next N lines contain N space-separated words.\n# The next M lines contain M space-separated words.\n# The output is one line per test case.\n# For example, if the second line is:\n# 2\n# a\n# b\n# c\n# d\n# e\n# f\n# g\n# h\n# i\n# j\n#"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('adverb'):\n            adverbs.append(word)\n\n    return adverbs\n\ndef main():\n    sentence = 'I am a man and I love to eat.'\n    adverbs = find_adverbs(sentence)\n    print(adverbs)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/adverbs-and-positions\n\ndef find_adverbs(sentence):\n    adverbs = []\n\n    for i in range(len(sentence)):\n        if sentence[i] in ['adverb', 'adverb_comparison']:\n            adverbs.append(i)\n    return adverbs\n\nif __name__ == '__main__':\n    sentence = input().strip().split(' ')\n    adverbs = find_adverbs(sentence)\n    print(len(adverbs))\n    for i in adverbs:\n        print(sentence[i])"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef find_adverbs(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[str]\n    \"\"\"\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs.append(word)\n    return adverbs\n\n\ndef find_adverbs_positions(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[Tuple[str, int]]\n    \"\"\"\n    adverbs = find_adverbs(sentence)\n    return [(w, i) for i, w in enumerate(sentence) if w in adverbs]\n\n\ndef main():\n    sentence = 'It is a good day.'\n    print(find_adverbs(sentence))\n    print(find_adverbs_positions(sentence))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "import re\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for word in sentence.split(' '):\n        if re.search(r'adverb', word):\n            adverbs.append(word)\n    return adverbs\n\ndef find_adverbs_positions(sentence):\n    adverbs = find_adverbs(sentence)\n    adverbs_positions = []\n    for i in range(len(adverbs)):\n        adverbs_positions.append(sentence.find(adverbs[i]))\n    return adverbs_positions\n\nif __name__ == '__main__':\n    sentence = 'I like to swim. I like to swim fast.'\n    adverbs = find_adverbs(sentence)\n    adverbs_positions = find_adverbs_positions(sentence)\n    print(adverbs)\n    print(adverbs_positions)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef find_adverbs(sentence):\n    adverbs = defaultdict(list)\n    for word in sentence:\n        if word.is_adverb:\n            adverbs[word.pos].append(word)\n    return adverbs\n\nif __name__ == '__main__':\n    sentence = \"I love you.\"\n    adverbs = find_adverbs(sentence)\n    print(adverbs)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import re\nfrom collections import Counter\nfrom typing import List\n\n\ndef get_adverbs_positions(sentence: str) -> List[str]:\n    \"\"\"\n    :param sentence: sentence to be analysed\n    :return: a list of adverbs and their positions\n    \"\"\"\n    adverbs_positions = []\n    adverbs_re = re.compile(r\"(?<=[\\w'])(adverb|adv|a)(?=[\\w']|$)\")\n    for m in re.finditer(adverbs_re, sentence):\n        adverbs_positions.append(m.group(1))\n    return adverbs_positions\n\n\ndef main():\n    sentence = \"\"\"My favorite food is pizza, but I also like tacos.\n    I'm also a big fan of the Internet, and I love to go to the gym.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to go to the park.\n    I love to go to the beach, and I love to"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/adverbs-in-a-sentence\n# https://www.hackerrank.com/challenges/adverbs-in-a-sentence/submissions/code/17552716\n\nimport re\n\nsentence = 'I ate a sandwich'\nsentence = 'I ate a sandwich and drank water'\nsentence = 'I ate a sandwich and drank water, and drank coffee'\nsentence = 'I ate a sandwich and drank water, and drank coffee, and drank milk'\nsentence = 'I ate a sandwich, drank water, and drank milk'\nsentence = 'I ate a sandwich, drank water, and drank coffee'\nsentence = 'I ate a sandwich, drank water, and drank coffee, and drank milk'\nsentence = 'I ate a sandwich, drank water, and drank coffee, and drank milk, and drank coffee'\nsentence = 'I ate a sandwich, drank water, and drank coffee, and drank milk, and drank coffee, and drank coffee'\n\nwords = sentence.split(' ')\n\n# for each word in the sentence\nfor word in words:\n    # if the word is an adverb\n    if re.search('[a-z]*[a-z]*[a-z]*[a-z]*', word):\n        # print the word\n        print(word)\n        # for each adverb, if the adverb is preceded by a space, print it\n        if re.search('[a-z]*[a-z]*[a-z]*[a-z]*[a-z]*', word[:-1]):\n            print(word[:-1])"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from collections import defaultdict\nfrom itertools import groupby\n\n\nclass Adverbs(object):\n    def __init__(self):\n        self.adverbs = defaultdict(int)\n\n    def add(self, word, position):\n        self.adverbs[word] += position\n\n    def get_adverbs(self):\n        return [word for word, count in self.adverbs.items() if count > 1]\n\n\ndef find_adverbs(sentence):\n    adverbs = Adverbs()\n    for word, position in groupby(sentence, lambda word: word[1]):\n        if word[0] == 'adverb':\n            adverbs.add(word[0], position)\n    return adverbs\n\n\ndef main():\n    sentence = 'How much is the air in the sky?'\n    adverbs = find_adverbs(sentence)\n    print(adverbs.get_adverbs())\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "\"\"\"\nAdverbs are words that end with a -, or which contain a - and a capital letter.\n\"\"\"\n\ndef get_adverbs(sentence):\n    adverbs = []\n    for word in sentence:\n        if word.endswith(\"-\"):\n            adverbs.append(word)\n        elif word.endswith(\"-\") and word[1] in \"Aa\":\n            adverbs.append(word)\n    return adverbs\n\n\n\"\"\"\nWe'll call the first word in a sentence \"the\" and the second word \"dog\".\n\"\"\"\n\nthe_word, dog_word = \"the\", \"dog\"\n\n\"\"\"\nThe first word in the sentence is the \"the\" word.\n\"\"\"\n\nthe_position = 0\n\n\"\"\"\nThe second word in the sentence is the \"dog\" word.\n\"\"\"\n\ndog_position = 1\n\n\ndef find_adverbs(sentence):\n    adverbs = get_adverbs(sentence)\n    return adverbs\n\n\ndef main():\n    sentence = input(\"Enter a sentence: \")\n    adverbs = find_adverbs(sentence)\n    for i in range(len(adverbs)):\n        print(\"{} {}\".format(adverbs[i], i + 1))\n    print(\"{} {}\".format(sentence, the_position + dog_position))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import re\n\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for word in sentence:\n        if word.lower() == \"adverb\":\n            adverbs.append(word)\n    return adverbs\n\n\ndef main():\n    sentence = input().strip()\n    adverbs = find_adverbs(sentence)\n    adverbs = sorted(adverbs, key=lambda w: w.lower())\n    adverbs.reverse()\n    for i in range(len(adverbs)):\n        print(adverbs[i])\n    print(\"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    for word in sentence:\n        if word.endswith('s'):\n            adverbs.append(word)\n\n    return adverbs\n\ndef main():\n    sentence = 'How many days in a year are there? How many days are there in a year?'\n    adverbs = find_adverbs(sentence)\n\n    for i, word in enumerate(adverbs):\n        print(word, i)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\nimport re\n\ndef get_adverbs_and_positions(sentence):\n    adverbs = []\n    adverbs_positions = []\n    for i in range(len(sentence)):\n        if sentence[i] == '.':\n            if sentence[i-1] =='':\n                adverbs.append(sentence[i-1:i+1])\n                adverbs_positions.append(i)\n    return adverbs, adverbs_positions\n\n\ndef main():\n    sentence = 'I went to the store and bought some bread.'\n    adverbs, adverbs_positions = get_adverbs_and_positions(sentence)\n    print 'adverbs:', adverbs\n    print 'adverbs positions:', adverbs_positions\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import re\n\ndef find_adverbs(sentence):\n    \"\"\"\n    Returns a list of tuples with the following format:\n    [(adverb, position), (adverb, position),...]\n    \"\"\"\n    adverbs = re.findall(r\"(?i)adverb\", sentence)\n    return [(adverb, i) for i, adverb in enumerate(adverbs)]\n\nif __name__ == \"__main__\":\n    sentence = \"I am a very good student. I am a very bad teacher. I am a very good teacher too.\"\n    adverbs = find_adverbs(sentence)\n    print adverbs"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nfrom collections import defaultdict\nfrom itertools import groupby\n\ndef main():\n    sentence = \"I ate a sandwich. I ate a sandwich. I ate a sandwich.\"\n    sentence = sentence.lower()\n    adverbs = [\n        \"really\", \"much\", \"so\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\", \"much\",\n        \"so\", \"much\","
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_adverbs(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[str]\n    \"\"\"\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs.append(word)\n    return adverbs\n\nif __name__ == '__main__':\n    sentence = 'I ate apple and banana.'\n    adverbs = find_adverbs(sentence)\n    print(adverbs)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef find_adverbs(sentence):\n    adverbs = set()\n    for word in sentence.split():\n        if word.endswith('s') or word.endswith('ed') or word.endswith('ing'):\n            adverbs.add(word[:-1])\n    return adverbs\n\ndef main():\n    with open('input.txt') as f:\n        sentence = f.readline().strip()\n    adverbs = find_adverbs(sentence)\n    for adverb in adverbs:\n        print(adverb, sentence.index(adverb))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\ndef find_adverbs(sentence):\n    adverbs = re.findall(r'adverb', sentence)\n    adverbs = [x.lower() for x in adverbs]\n    return adverbs\n\ndef print_adverbs(sentence):\n    adverbs = find_adverbs(sentence)\n    for adverb in adverbs:\n        print(adverb)\n\nif __name__ == '__main__':\n    sentence = 'i am a very beautiful man'\n    adverbs = find_adverbs(sentence)\n    print_adverbs(sentence)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import re\n\ndef get_adverbs(sentence):\n    pattern = re.compile(r'adverb\\s*:\\s*(.*)')\n    result = pattern.findall(sentence)\n    return result\n\ndef find_adverbs(sentence):\n    result = []\n    for i, word in enumerate(sentence.split()):\n        if word.endswith('adverb'):\n            result.append((i, word))\n    return result\n\nif __name__ == '__main__':\n    sentence = 'The dog and the cat and the fish are all good.'\n    adverbs = get_adverbs(sentence)\n    print(adverbs)\n    adverbs_pos = find_adverbs(sentence)\n    print(adverbs_pos)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import re\n\n# Returns a list of tuples (adverb, position)\ndef find_adverbs(sentence):\n    adverbs = []\n    for index, word in enumerate(sentence):\n        if re.search(r'\\bad[\\w]*\\b', word):\n            adverbs.append((word, index))\n    return adverbs\n\n# Returns a list of tuples (adverb, position)\ndef find_adverbs_from_list(sentence):\n    adverbs = []\n    for word in sentence:\n        if re.search(r'\\bad[\\w]*\\b', word):\n            adverbs.append((word, len(sentence) - 1))\n    return adverbs\n\nif __name__ == '__main__':\n    # Test 1\n    sentence = 'The cat sat on the mat.'\n    adverbs = find_adverbs(sentence)\n    assert(adverbs == [('cat', 3), ('mat', 5)])\n\n    # Test 2\n    sentence = 'The cat sat on the mat. The dog sat on the mat.'\n    adverbs = find_adverbs(sentence)\n    assert(adverbs == [('cat', 3), ('mat', 5), ('dog', 7)])\n\n    # Test 3\n    sentence = 'The cat sat on the mat. The dog sat on the mat. The cat sat on the mat.'\n    adverbs = find_adverbs(sentence)\n    assert(adverbs == [('cat', 3), ('mat', 5), ('dog', 7), ('cat', 10)])\n\n    # Test 4\n    sentence = 'The cat sat on the mat. The dog sat on the mat. The cat sat on the mat. The dog sat on the mat. The cat sat on the mat.'\n    adverbs = find_adverbs(sentence)\n    assert(adverbs == [('cat', 3), ('mat', 5), ('dog', 7), ('cat', 10), ('dog', 13)])\n\n    # Test 5\n    sentence = 'The cat sat on the mat. The dog sat on the mat. The cat sat on the mat. The dog sat on the mat. The cat sat on the mat. The dog sat on"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\n\ndef find_adverbs(sentence):\n    adverbs = []\n    adverbs_positions = []\n\n    for i in range(len(sentence)):\n        for j in range(len(sentence[i])):\n            if sentence[i][j] == \".\":\n                adverbs.append(sentence[i][:j])\n                adverbs_positions.append(i)\n\n    return adverbs, adverbs_positions\n\n\ndef main():\n    sentence = \"I ate a dog with my cat.\"\n    adverbs, adverbs_positions = find_adverbs(sentence)\n    print adverbs[0:3]\n    print adverbs_positions[0:3]\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import re\n\ndef parse_sentence(sentence):\n    \"\"\"\n    Parses the given sentence and returns a list of adverbs.\n    \"\"\"\n    adverbs = []\n    for word in re.findall(r\"\\b(ad(?:ver)?(?:s|\\s))?\\b\", sentence):\n        adverbs.append(word)\n    return adverbs\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    sentence = \"I like the food I eat. I love the food I eat.\"\n    adverbs = parse_sentence(sentence)\n    for adverb in adverbs:\n        print(adverb)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i] == 'adverb':\n            adverbs.append(i)\n    return adverbs\n\ndef find_adverbs_positions(sentence):\n    adverbs = find_adverbs(sentence)\n    adverbs_positions = {}\n    for i in range(len(sentence)):\n        if sentence[i] == 'adverb':\n            adverbs_positions[i] = adverbs[i]\n    return adverbs_positions\n\ndef main():\n    sentence = \"My dog is very cute.\"\n    adverbs_positions = find_adverbs_positions(sentence)\n    for i in range(len(sentence)):\n        if sentence[i] == 'adverb':\n            print(adverbs_positions[i])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def find_adverbs_pos(sentence):\n    adverbs = []\n    adverbs_pos = []\n    for word in sentence:\n        if word.endswith('s'):\n            adverbs.append(word)\n            adverbs_pos.append(len(adverbs))\n    return adverbs, adverbs_pos\n\n\nif __name__ == '__main__':\n    sentence = 'I am happy to see you again.'\n    adverbs, adverbs_pos = find_adverbs_pos(sentence)\n    print adverbs\n    print adverbs_pos"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import re\n\ndef find_adverbs(sentence):\n    \"\"\"\n    :param sentence: The sentence to be analysed\n    :return: A list of tuples containing the adverbs and their positions\n    \"\"\"\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i] == 'adverb' and sentence[i - 1]!= '.':\n            adverbs.append((sentence[i - 1], i))\n    return adverbs\n\ndef find_adverbs_in_sentence(sentence):\n    \"\"\"\n    :param sentence: The sentence to be analysed\n    :return: A list of tuples containing the adverbs and their positions\n    \"\"\"\n    adverbs = []\n    for i in range(len(sentence)):\n        if re.match(r\"\\s*adverb\\s*\", sentence[i]):\n            adverbs.append((sentence[i - 1], i))\n    return adverbs\n\ndef find_adverbs_in_sentence_regex(sentence):\n    \"\"\"\n    :param sentence: The sentence to be analysed\n    :return: A list of tuples containing the adverbs and their positions\n    \"\"\"\n    adverbs = []\n    for i in range(len(sentence)):\n        if re.match(r\"\\s*adverb\\s*\", sentence[i]):\n            adverbs.append((sentence[i - 1], i))\n    return adverbs\n\ndef find_adverbs_in_sentence_regex_2(sentence):\n    \"\"\"\n    :param sentence: The sentence to be analysed\n    :return: A list of tuples containing the adverbs and their positions\n    \"\"\"\n    adverbs = []\n    for i in range(len(sentence)):\n        if re.match(r\"\\s*adverb\\s*\", sentence[i]):\n            adverbs.append((sentence[i - 1], i))\n    return adverbs\n\ndef main():\n    sentence = \"The car is red. The dog is yellow.\"\n    adverbs = find_adverbs(sentence)\n    print(adverbs)\n    adverbs = find_adverbs_in_sent"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from nltk.corpus import brown\nimport re\n\ndef find_adverbs(sentence):\n    \"\"\"\n    Write a function to find all adverbs and their positions in a given sentence.\n    \"\"\"\n\n    adverbs = []\n    for word in sentence:\n        if word.lower() in ['i','me','my']:\n            adverbs.append(word)\n    return adverbs\n\ndef main():\n    \"\"\"\n    Write a function to find all adverbs and their positions in a given sentence.\n    \"\"\"\n    sentence = brown.raw('en')[:1000]\n    adverbs = find_adverbs(sentence)\n    for adverb in adverbs:\n        print(adverb, '->', sentence.index(adverb))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import re\n\n\ndef get_adverbs_and_positions(sentence):\n    \"\"\"\n    :param sentence: string\n    :return: List of tuples. Each tuple contains the word and its position in the sentence.\n    \"\"\"\n    adverbs = []\n    positions = []\n    for i, w in enumerate(sentence):\n        if w.endswith(\"s\") and len(w) > 1:\n            positions.append(i)\n            if re.match(r'ad(.*)er', w):\n                adverbs.append(w[:-1])\n    return adverbs, positions\n\n\ndef main():\n    sentence = \"I am a student and I am a student too.\"\n    adverbs, positions = get_adverbs_and_positions(sentence)\n    print adverbs\n    print positions\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def get_adverbs(sentence):\n    adverbs = []\n    for word in sentence:\n        if word.endswith('adverb'):\n            adverbs.append(word)\n    return adverbs\n\ndef get_adverb_positions(sentence):\n    adverbs = get_adverbs(sentence)\n    positions = []\n    for i, word in enumerate(sentence):\n        if word.endswith('adverb'):\n            positions.append((i, word))\n    return positions\n\ndef main():\n    sentence = 'The quick brown fox jumps over the lazy dog.'\n    adverbs = get_adverbs(sentence)\n    print(adverbs)\n    positions = get_adverb_positions(sentence)\n    print(positions)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef find_adverbs(sentence):\n    \"\"\"\n    >>> find_adverbs(\"This is an example sentence.\")\n    [('This', 0), ('is', 1), ('an', 2), ('example', 3)]\n    \"\"\"\n    result = []\n    adverbs = defaultdict(lambda: 0)\n    for i, word in enumerate(sentence):\n        if word.endswith('s'):\n            result.append((word, i))\n            adverbs[word] += 1\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "# Write your code below.\ndef get_adverbs(sentence):\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i].lower() == \"to\" or sentence[i].lower() == \"from\" or sentence[i].lower() == \"in\":\n            adverbs.append(sentence[i])\n    return adverbs\n\ndef main():\n    sentence = \"To be or not to be is the question.\"\n    adverbs = get_adverbs(sentence)\n    print adverbs\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    for word in sentence:\n        if word.lower() == \"adverb\":\n            adverbs.append(word)\n    return adverbs\n\ndef find_adverbs_positions(sentence):\n    adverbs = find_adverbs(sentence)\n    positions = []\n    for i in range(len(sentence)):\n        if adverbs[i] in sentence[i:]:\n            positions.append(i)\n    return positions\n\ndef main():\n    sentence = \"This is a test sentence.\"\n    adverbs = find_adverbs(sentence)\n    print(adverbs)\n    print(find_adverbs_positions(sentence))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\ndef findAdverbs(sentence):\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i] =='':\n            adverbs.append(i)\n    return adverbs\n\ndef findAdverbsPositions(sentence):\n    adverbs = findAdverbs(sentence)\n    adverbsPositions = []\n    for i in range(len(sentence)):\n        if sentence[i] =='':\n            for j in range(i, len(sentence)):\n                if sentence[j] =='':\n                    adverbsPositions.append(j)\n    return adverbsPositions\n\nsentence = 'I like to eat bananas and bananas are tasty.'\nprint findAdverbs(sentence)\nprint findAdverbsPositions(sentence)"
    },
    {
      "rank": 66,
      "score": 3.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-adverbs\n\n# Complete the findAdverbs function below.\ndef findAdverbs(sentence):\n    # your code goes here\n    adverbs = []\n    for word in sentence.split():\n        if word.lower() in ['ad', 'adv', 'adverb']:\n            adverbs.append(word.lower())\n    return adverbs\n\nif __name__ == '__main__':\n    sentence = input()\n    adverbs = findAdverbs(sentence)\n    for adverb in adverbs:\n        print(adverb)\n    print(\"\\n\")"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "__author__ = 'Libao Jin'\n__date__ = 'December 12, 2015'\n__email__ = 'jinlibao@126.com'\n\nclass Solution(object):\n    def allAdverbs(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        adverbs = []\n        for i in range(len(s)):\n            if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n                adverbs.append(s[i])\n            if s[i] == 'd' or s[i] == 't' or s[i] == 'w' or s[i] == 'z':\n                adverbs.append(s[i])\n        return adverbs\n\n    def allAdverbs2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        adverbs = []\n        for i in range(len(s)):\n            if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n                adverbs.append(s[i])\n            if s[i] == 'd' or s[i] == 't' or s[i] == 'w' or s[i] == 'z':\n                adverbs.append(s[i])\n        return adverbs\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.allAdverbs('aadverda')"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "# Definition for an adjective\nclass Adjective:\n    def __init__(self, word):\n        self.word = word\n        self.pos = 'JJ'\n\n# Definition for a noun\nclass Noun:\n    def __init__(self, word):\n        self.word = word\n        self.pos = 'NN'\n\nclass Sentence:\n    def __init__(self, words):\n        self.words = words\n\nclass Solution:\n    def findAdverbPositions(self, sentence: 'Sentence') -> 'List[Adjective]':\n        adverbs = []\n        for word in sentence.words:\n            if word.pos == 'JJ':\n                adverbs.append(word)\n        return adverbs\n\nif __name__ == '__main__':\n    solution = Solution()\n    sentence = Sentence(['I', 'like', 'to', 'play', 'with','my', 'best', 'friend'])\n    print(solution.findAdverbPositions(sentence))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-adverbs/\n# https://leetcode.com/problems/find-adverbs/discuss/145760/Python-DP-solution-with-O(n)-time-and-O(n)-space\n# https://leetcode.com/problems/find-adverbs/discuss/145762/DP-solution-with-O(n)-time-and-O(n)-space\n\nclass Solution(object):\n    def find_adverbs(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[str]\n        \"\"\"\n        adverbs = []\n        for i, c in enumerate(sentence):\n            if c =='' or c == '.':\n                continue\n            if c == '-':\n                adverbs.append('-')\n            elif c == ',':\n                adverbs.append(',')\n            elif c == ':':\n                adverbs.append(':')\n            elif c == '?':\n                adverbs.append('?')\n            elif c == '!':\n                adverbs.append('!')\n            else:\n                adverbs.append(c)\n        return adverbs"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "# https://www.codeeval.com/open_challenges/124/\n# https://www.codeeval.com/open_challenges/124/\n# https://www.codeeval.com/open_challenges/124/\n# https://www.codeeval.com/open_challenges/124/\n\n# This is the function you need to implement.\n#\n# input: A string with the sentence to be searched\n# output: A list of tuples in the form (adverb, position).\n#\n# Example:\n# adverb_positions = find_adverbs(sentence)\n#\n# adverb_positions = [\n#     ('very', 3),\n#     ('slightly', 3),\n#     ('somewhat', 4),\n#     ('well', 3),\n#     ('nearly', 4),\n#     ('somewhat', 4),\n#     ('somewhat', 4),\n#     ('very', 3)\n# ]\n\ndef find_adverbs(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: list[tuple[str, int]]\n    \"\"\"\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i] in ['a', 'an', 'the']:\n            adverbs.append((sentence[i], i))\n    return adverbs\n\nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        print(\"Usage: %s <file>\" % sys.argv[0])\n        sys.exit(1)\n    with open(sys.argv[1], 'r') as f:\n        sentence = f.read()\n    adverbs = find_adverbs(sentence)\n    for adverb, position in adverbs:\n        print(\"{} {}\".format(adverb, position))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def find_adverbs(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[str]\n    \"\"\"\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith(\"ly\"):\n            adverbs.append(word[:-2])\n    return adverbs\n\ndef test_find_adverbs():\n    assert find_adverbs(\"I am good at typing\") == ['good', 'at', 'typing']\n    assert find_adverbs(\"I am good at typing and writing\") == ['good', 'at', 'typing', 'and', 'writing']\n    assert find_adverbs(\"I am good at typing and writing and at typing and writing\") == ['good', 'at', 'typing', 'and', 'writing', 'at', 'typing', 'and', 'writing']\n    assert find_adverbs(\"I am good at typing and writing and at typing and writing\") == ['good', 'at', 'typing', 'and', 'writing', 'at', 'typing', 'and', 'writing']\n    assert find_adverbs(\"I am good at typing and writing and at typing and writing\") == ['good', 'at', 'typing', 'and', 'writing', 'at', 'typing', 'and', 'writing']\n\nif __name__ == '__main__':\n    test_find_adverbs()"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    for word in sentence:\n        if word.is_adverb:\n            adverbs.append(word)\n    return adverbs\n\ndef test_find_adverbs():\n    assert find_adverbs(\"Good morning. How are you?\") == [\n        'Good','morning', 'How', 'are', 'you'\n    ]\n\nif __name__ == '__main__':\n    print(find_adverbs('Good morning. How are you?'))\n    #>>> ['Good','morning', 'How', 'are', 'you']"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom itertools import combinations\n\n\ndef find_adverbs(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[str]\n    \"\"\"\n    adverbs = set()\n    for word in sentence.split():\n        for adverb in find_adverbs_with_word(word):\n            adverbs.add(adverb)\n    return adverbs\n\n\ndef find_adverbs_with_word(word):\n    \"\"\"\n    :type word: str\n    :rtype: List[str]\n    \"\"\"\n    adverbs = []\n    for comb in combinations(word, 2):\n        if comb[0] in ('a', 'an') and comb[1] in ('a', 'an'):\n            adverbs.append(comb)\n    return adverbs\n\n\nif __name__ == '__main__':\n    sentence = 'I like bananas and orange.'\n    adverbs = find_adverbs(sentence)\n    print(adverbs)"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# -*- coding: utf-8 -*-\n\nimport re\n\ndef find_adverbs(sentence):\n    \"\"\"\n    Find all adverbs in a sentence.\n\n    :param sentence: a sentence\n    :return: a list of adverbs and their positions\n    \"\"\"\n    adverbs = re.findall(r'(?<=[a-z])(?=[A-Z])', sentence)\n    adverbs = list(filter(lambda x: x is not None, adverbs))\n    adverbs = list(filter(lambda x: x!= '', adverbs))\n    return adverbs"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-adverbs-in-a-sentence/\n\nclass Solution:\n    def findAdverbPositions(self, sentence: str) -> List[List[int]]:\n        positions = []\n        for i, c in enumerate(sentence):\n            if c in '\"\\'()':\n                continue\n            if c.lower() in 'adverbs':\n                positions.append([i])\n            else:\n                for j in range(i, len(sentence)):\n                    if c == sentence[j]:\n                        positions[-1].append(j)\n        return positions"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import re\n\ndef adverb_positions(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[Tuple[str, int]]\n    \"\"\"\n    positions = []\n    for i, word in enumerate(sentence.split(' ')):\n        if re.search('(?<![a-zA-Z])adverb$', word):\n            positions.append((word, i))\n    return positions\n\nif __name__ == '__main__':\n    s = 'Good morning, I am glad to meet you.'\n    print(adverb_positions(s))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/word-search-ii/discuss/103844/Python-2-O(N)-Spiral-Search-O(N^2)-Time-and-Space-Complexity\n# https://leetcode.com/problems/word-search-ii/discuss/103844/Python-2-O(N)-Spiral-Search-O(N^2)-Time-and-Space-Complexity\n# https://leetcode.com/problems/word-search-ii/discuss/103844/Python-2-O(N)-Spiral-Search-O(N^2)-Time-and-Space-Complexity\n\n# DFS\n# Time:  O(N^2)\n# Space: O(N^2)\n\nclass Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n\n        def dfs(word, i, j):\n            if i == len(word) or j == len(word):\n                ret.append(word)\n                return\n            for k in range(i, j + 1):\n                if word[k] == '*':\n                    continue\n                if word[k] == '.':\n                    dfs(word, i, k)\n                    dfs(word, k, j)\n                    break\n                if word[k] == '.':\n                    dfs(word, i, k + 1)\n                    dfs(word, k + 1, j)\n                    break\n                if word[k] == '*':\n                    dfs(word, i, k)\n                    dfs(word, k, j + 1)\n                    break\n                if word[k] == '*':\n                    dfs(word, i + 1, k)\n                    dfs(word, k, j + 1)\n                    break\n                if word[k] == '*':\n                    dfs(word, i, k - 1)\n                    dfs(word, k - 1, j)\n                    break\n                if word[k]"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    # @param {string} s\n    # @return {integer[][]}\n    def findNounPhrases(self, s):\n        nouns = []\n        tree = TreeNode()\n        tree.val = 0\n        tree.left = []\n        tree.right = []\n        for char in s:\n            if char == 'n':\n                if tree.val == 0:\n                    tree.val = 1\n                else:\n                    tree.val = 0\n            elif char == 'w':\n                if tree.val == 1:\n                    tree.val = 2\n                else:\n                    tree.val = 1\n            elif char == 'e':\n                if tree.val == 2:\n                    tree.val = 3\n                else:\n                    tree.val = 2\n            else:\n                nouns.append(tree)\n                tree = TreeNode()\n                tree.val = 0\n        nouns.append(tree)\n        return nouns\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.findNounPhrases(\"nene\"))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "#!/bin/python\n\n# https://www.hackerrank.com/challenges/adverbs-and-positions\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n\"\"\"\nAdverbs\n\"\"\"\n\n#!/bin/python\n\n#!/bin/python\n\n#!/"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-adverbs-and-positions/discuss/83940/Python-solution-with-explanation\n\nimport collections\nclass Solution(object):\n    def find_adverbs(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[str]\n        \"\"\"\n        adverbs = collections.defaultdict(list)\n        for word in sentence.split():\n            if word.lower() in self.ADVERBS:\n                adverbs[word.lower()].append(word)\n        return [self.ADVERBS[key] for key in adverbs]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.find_adverbs(\"It is very beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s.find_adverbs(\"It is beautiful.\"))\n    print(s"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = []\n    for word in sentence:\n        if word.lower() in ['adverb', 'adjective']:\n            adverbs.append((word, sentence.index(word)))\n    return adverbs\n\ndef test_find_adverbs():\n    assert find_adverbs(['adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are']) == [('are', 0), ('are', 4), ('are', 8), ('are', 12), ('are', 16), ('are', 20), ('are', 24), ('are', 28)]\n    assert find_adverbs(['are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are']) == [('are', 0), ('are', 4), ('are', 8), ('are', 12), ('are', 16), ('are', 20), ('are', 24), ('are', 28)]\n    assert find_adverbs(['adverb', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are']) == [('are', 0), ('are', 4), ('are', 8), ('are', 12), ('are', 16), ('are', 20), ('are', 24), ('are', 28)]\n    assert find_adverbs(['adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are']) == [('are', 0), ('are', 4), ('are', 8), ('are', 12), ('are', 16), ('are', 20), ('are', 24), ('are', 28)]\n    assert find_adverbs(['adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are', 'adverbs', 'are']) == [('are', 0), ('are', 4), ('are', 8), ('are', 12), ('are', 16), ('are', 20), ('are', 24), ('are', 28)]\n    assert find_adverbs("
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# Complete the function below.\ndef find_adverbs(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[str]\n    \"\"\"\n    adverbs = []\n    for word in sentence:\n        if word in ['adverb', 'adjective']:\n            adverbs.append(word)\n    return adverbs\n\nif __name__ == '__main__':\n    sentence = 'Very good, I love you!'\n    print(find_adverbs(sentence))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# -*- coding: utf-8 -*-\n\nimport re\nimport sys\n\n# Definition for an adjective\nclass Adjective:\n    def __init__(self, pos, word):\n        self.pos = pos\n        self.word = word\n\nclass Solution(object):\n    def __init__(self):\n        self.adjectives = []\n\n    def getAdjectives(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[Adjective]\n        \"\"\"\n        for word in re.split(r'[\\'s]', sentence):\n            if word.endswith('s'):\n                word = word[:-1]\n            for pos in ['n', 'v', 'a', 'r', 'j']:\n                if word.endswith('s'):\n                    word = word[:-1]\n                if word.endswith('ed') or word.endswith('ing'):\n                    word = word[:-3]\n                if word.endswith('ed') or word.endswith('ing'):\n                    word = word[:-3]\n                if word.endswith('s'):\n                    word = word[:-1]\n                if word.endswith('ed') or word.endswith('ing'):\n                    word = word[:-3]\n                if word.endswith('ed') or word.endswith('ing'):\n                    word = word[:-3]\n                if word.endswith('ed') or word.endswith('ing'):\n                    word = word[:-3]\n                if word.endswith('ed') or word.endswith('ing'):\n                    word = word[:-3]\n                if word.endswith('ed') or word.endswith('ing'):\n                    word = word[:-3]\n                if word.endswith('ed') or word.endswith('ing'):\n                    word = word[:-3]\n                if word.endswith('ed') or word.endswith('ing'):\n                    word = word[:-3]\n                if word.endswith('ed') or word.endswith"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# Your AdverbsAndPositions function should return a dictionary.\n# The keys should be adverbs, and the values their positions.\n# The values should be an integer.\n# The values should be in ascending order.\n\ndef adverbsAndPositions(sentence):\n    adverbs = {}\n    for word in sentence:\n        if word.lower() in adverbs:\n            adverbs[word.lower()] += 1\n        else:\n            adverbs[word.lower()] = 1\n\n    return adverbs\n\nsentence = \"I ate a bagel.\"\nadverbsAndPositions(sentence)\n\nprint(adverbsAndPositions(sentence))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-all-adverbs-in-a-sentence/\n\nimport collections\nclass Solution:\n    def findAdverbs(self, sentence: str) -> collections.Iterable[str]:\n        return self.findAll(sentence, 'adverb')\n\n    def findAll(self, sentence: str, word: str) -> collections.Iterable[str]:\n        if not sentence:\n            return\n        word_list = collections.Counter(sentence.split())\n        adverbs = []\n        for word in word_list:\n            if word == word.lower():\n                adverbs.append(word)\n        return adverbs"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from collections import Counter\nimport re\n\n\nclass Adverb(object):\n    \"\"\"\n    A class that represents an adverb.\n    \"\"\"\n\n    def __init__(self, word):\n        self.word = word\n\n\ndef get_adverbs(sentence):\n    \"\"\"\n    Get all adverbs in a sentence.\n\n    :type sentence: str\n    :rtype: list[Adverb]\n    \"\"\"\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs.append(Adverb(word))\n    return adverbs\n\n\ndef get_adverb_positions(sentence):\n    \"\"\"\n    Get the position of all adverbs in a sentence.\n\n    :type sentence: str\n    :rtype: dict[Adverb, int]\n    \"\"\"\n    adverbs = get_adverbs(sentence)\n    positions = {}\n    for adverb in adverbs:\n        positions[adverb] = positions.get(adverb, 0) + 1\n    return positions\n\n\ndef get_adverb_positions_list(sentence):\n    \"\"\"\n    Get the position of all adverbs in a sentence as a list.\n\n    :type sentence: str\n    :rtype: list[int]\n    \"\"\"\n    positions = get_adverb_positions(sentence)\n    return [positions[adverb] for adverb in positions]\n\n\ndef get_adverbs_in_sentence(sentence):\n    \"\"\"\n    Get the adverbs in a sentence as a list.\n\n    :type sentence: str\n    :rtype: list[Adverb]\n    \"\"\"\n    adverbs = get_adverbs(sentence)\n    return adverbs\n\n\ndef get_adverbs_in_sentence_positions(sentence):\n    \"\"\"\n    Get the positions of all adverbs in a sentence as a list.\n\n    :type sentence: str\n    :rtype: list[int]\n    \"\"\"\n    positions = get_adverb_positions(sentence)\n    return positions\n\n\ndef get_adverbs_in_sentence_list(sentence):\n    \"\"\"\n    Get the positions of all adverbs in a"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Definition for an \"adverb\" and its position.\nclass Adverb:\n    def __init__(self, word, position):\n        self.word = word\n        self.position = position\n\nclass Solution:\n    def findAdverbs(self, sentence: str) -> List[Adverb]:\n        adverbs = []\n        word_index = 0\n        word_count = 0\n        for word in sentence.split(' '):\n            if word == 'a' or word == 'an':\n                adverbs.append(Adverb(word, word_index))\n                word_index += 1\n                word_count += 1\n            else:\n                if word_count > 0:\n                    adverbs[word_index-1].word = word\n                    adverbs[word_index-1].position = word_index\n                    word_index += 1\n                    word_count -= 1\n        return adverbs\n\nif __name__ == '__main__':\n    solution = Solution()\n    adverbs = solution.findAdverbs('a an')\n    for adverb in adverbs:\n        print(adverb.word, adverb.position)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import re\n\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for word in re.findall(r'[a-z]+', sentence):\n        if word[-1] in ['.', '!']:\n            adverbs.append(word)\n\n    return adverbs\n\n\nif __name__ == '__main__':\n    sentence = 'Hello. How are you?'\n    adverbs = find_adverbs(sentence)\n    print adverbs"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "import re\n\ndef find_adverbs(sentence):\n    adverbs = []\n    pattern = r\"(adverbs|adverb|adverbs|adverb|adverb|adverb|adverb|adverbs|adverb|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|adverbs|"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Approach 1: Iterative\n# Approach 2: Recursive\n\ndef find_all_adverbs(sentence):\n    adverbs = []\n    adverbs_pos = []\n\n    for word in sentence.split():\n        if word in adverbs:\n            adverbs_pos.append(word)\n        else:\n            adverbs.append(word)\n    return adverbs, adverbs_pos\n\ndef find_all_adverbs_iterative(sentence):\n    adverbs = []\n    adverbs_pos = []\n    for word in sentence.split():\n        if word in adverbs:\n            adverbs_pos.append(word)\n        else:\n            adverbs.append(word)\n    return adverbs, adverbs_pos\n\ndef find_all_adverbs_recursive(sentence):\n    adverbs = []\n    adverbs_pos = []\n    def recur(word):\n        if word in adverbs:\n            adverbs_pos.append(word)\n        else:\n            adverbs.append(word)\n    recur(sentence)\n    return adverbs, adverbs_pos\n\n# Approach 3: Iterative\n# Approach 4: Recursive\n\ndef find_all_adverbs_iterative(sentence):\n    adverbs = []\n    adverbs_pos = []\n    for word in sentence.split():\n        if word in adverbs:\n            adverbs_pos.append(word)\n        else:\n            adverbs.append(word)\n    return adverbs, adverbs_pos\n\ndef find_all_adverbs_recursive(sentence):\n    adverbs = []\n    adverbs_pos = []\n    def recur(word):\n        if word in adverbs:\n            adverbs_pos.append(word)\n        else:\n            adverbs.append(word)\n    recur(sentence)\n    return adverbs, adverbs_pos\n\nif __name__ == \"__main__\":\n    sentence = \"I ate breakfast. I ate breakfast.\"\n    adverbs, adverbs_pos = find_all_adverbs(sentence)\n    print(adverbs, adverbs_pos)\n\n    sentence = \"I ate breakfast"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import re\n\n# The function is required to be a function that takes the sentence as argument.\n# It should return a list of tuples containing the following data:\n# - the adverb\n# - the position of the adverb in the sentence\n# - the next adverb (or None if there are no more adverbs)\ndef get_adverb_positions(sentence):\n    # list of adverbs\n    adverbs = []\n    # list of adverbs' positions\n    positions = []\n\n    # list of adverbs' next positions (or None if there are no more adverbs)\n    next_positions = []\n\n    # initialize next positions\n    next_positions.append(None)\n\n    for i, word in enumerate(sentence):\n        # if we are at the end of the sentence\n        if i == len(sentence) - 1:\n            # if we are at the end of the sentence\n            if word == \".\" or word == \"!\" or word == \"?\" or word == \".\":\n                # if the last word is an adverb\n                if word in adverbs:\n                    # add the position of the last word\n                    positions.append((word, i))\n                    # add the next position\n                    next_positions[-1] = i + 1\n                # if the last word is not an adverb\n                else:\n                    # add the position of the last word\n                    positions.append((word, i))\n                    # add the next position\n                    next_positions[-1] = i + 1\n            else:\n                # add the position of the last word\n                positions.append((word, i))\n                # add the next position\n                next_positions[-1] = i + 1\n        # if we are not at the end of the sentence\n        else:\n            # if the current word is an adverb\n            if word in adverbs:\n                # add the position of the current word\n                positions.append((word, i))\n                # add the next position\n                next_positions[-1] = i + 1\n            # if the current word is not an adverb\n            else:\n                # add the position of the current word\n                positions.append((word, i))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Example 1\n# Given \"This is a nice day.\"\n# Return:\n# [('nice', 2), ('day', 1), ('is', 0)]\ndef find_adverbs(sentence):\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs.append((word, len(word)))\n    return adverbs\n\n# Example 2\n# Given \"This is a nice day.\"\n# Return:\n# [('nice', 2), ('day', 1)]\ndef find_adverbs2(sentence):\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs.append((word, len(word)))\n    return adverbs\n\n# Example 3\n# Given \"This is a nice day.\"\n# Return:\n# [('nice', 2), ('day', 1)]\ndef find_adverbs3(sentence):\n    adverbs = []\n    for i, word in enumerate(sentence.split()):\n        if i > 0 and word.endswith('s'):\n            adverbs.append((word, i))\n    return adverbs\n\n# Example 4\n# Given \"This is a nice day.\"\n# Return:\n# [('nice', 2), ('day', 1)]\ndef find_adverbs4(sentence):\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs.append((word, len(word)))\n    return adverbs\n\n# Example 5\n# Given \"This is a nice day.\"\n# Return:\n# [('nice', 2), ('day', 1), ('is', 0)]\ndef find_adverbs5(sentence):\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs.append((word, len(word)))\n    return adverbs\n\nif __name__ == '__main__':\n    print(find_adverbs('This is a nice day.'))\n    print(find_adverbs2('This is a nice day.'))\n    print(find_adverbs3('"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_adverbs_and_positions(sentence):\n    adverbs = []\n    positions = []\n    for word in sentence.split():\n        if word in ['the', 'a', 'an', 'an', 'a', 'the', 'and', 'or']:\n            adverbs.append(word)\n        if word.endswith('s'):\n            positions.append(word[:-1])\n    return adverbs, positions\n\ndef test_find_adverbs_and_positions():\n    assert find_adverbs_and_positions('He said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The man said \"Hello\".') == ([], ['s'])\n    assert find_adverbs_and_positions('The"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def find_adverbs(sentence):\n    adverbs = set()\n    for i in range(len(sentence)):\n        if sentence[i].isupper():\n            for j in range(i+1, len(sentence)):\n                if sentence[j] in \"aeiou\" and sentence[j]!= sentence[i]:\n                    adverbs.add(sentence[i:j+1])\n    return adverbs\n\ndef test_find_adverbs():\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == set(['over', 'jumps', 'brown'])\n    assert find_adverbs(\"The quick brown fox jumps over the lazy dog"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nA word is an adverb if it is the first word in a sentence.\n\nAdverbs are defined as adverbs that appear after a verb.\n\nFor example, the sentence \"the cow jumped over the moon.\" is valid.\n\nThe adverbs \"over\", \"on\", and \"at\" appear before the verb \"jumped\".\n\nThe adverbs \"round\", \"back\", and \"wide\" appear after the verb \"jumped\".\n\nReturn a list of all adverbs in the sentence.\n\nExample\nGiven \"the cow jumped over the moon.\" return [\"over\", \"on\", \"at\"]\n\nGiven \"the big cat sat on the mat\" return [\"wide\", \"round\"]\n\nNote\nFor the sake of simplicity, we assume that the input string is always valid.\n\nHint:\n\nThink of the string as a sequence of characters.\nConsider the string as a sequence of words.\nA word is a sequence of characters.\nEach character is a word.\n\nThe input string could be a sentence.\n\nReturn a list of all adverbs in the sentence.\n\n\"\"\"\n\ndef find_adverbs(sentence):\n    return [word for word in sentence.split(\" \") if word.is_adverb]\n\nif __name__ == '__main__':\n    sentence = \"the big cat sat on the mat.\"\n    print find_adverbs(sentence)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for an Adverb.\nclass Adverb:\n    def __init__(self, text):\n        self.text = text\n        self.pos = None\n\n    def __str__(self):\n        return self.text\n\n    def __repr__(self):\n        return self.text\n\nclass Solution:\n    # @param sentence, a list of string\n    # @return a list of Adverb\n    def findAdverbs(self, sentence):\n        # write your code here\n        # sort the sentence\n        sentence.sort()\n        # store all adverbs in a list\n        adverbs = []\n        # for each word in sentence\n        for word in sentence:\n            # if it is a adverb\n            if word in self.adverb_dict:\n                # if this word is not in adverbs list\n                if not word in adverbs:\n                    # append this word to adverbs list\n                    adverbs.append(word)\n        return adverbs\n\n    # store all adverbs in a list\n    def findAdverbs(self, sentence):\n        adverbs = []\n        for word in sentence:\n            if word in self.adverb_dict:\n                adverbs.append(word)\n        return adverbs\n\n    # @param sentence, a list of string\n    # @return a list of Adverb\n    def findAdverbs(self, sentence):\n        # store all adverbs in a list\n        adverbs = []\n        # for each word in sentence\n        for word in sentence:\n            # if it is a adverb\n            if word in self.adverb_dict:\n                # if this word is not in adverbs list\n                if not word in adverbs:\n                    # append this word to adverbs list\n                    adverbs.append(word)\n        return adverbs\n\n    # @param sentence, a list of string\n    # @return a list of Adverb\n    def findAdverbs(self, sentence):\n        # store all adverbs in a list\n        adverbs = []\n        # for each word in sentence\n        for word in sentence:\n            # if it is a adverb\n            if word in self.adverb_dict:\n                # if this word is not in adverbs list\n                if not"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\n# This is a \"good\" solution.\ndef find_adverbs_and_positions(sentence):\n    adverbs = []\n    positions = []\n    for word in sentence:\n        if word in [\"is\", \"are\", \"was\", \"were\"]:\n            adverbs.append(word)\n            positions.append(len(sentence) - len(sentence) - 1)\n    return adverbs, positions\n\n# This is a \"bad\" solution.\n# This is not an \"optimal\" solution, but it is a \"somewhat\" solution.\n# It is not very efficient.\n# It does not have a \"good\" solution.\ndef find_adverbs_and_positions2(sentence):\n    adverbs = []\n    positions = []\n    for word in sentence:\n        if word in [\"is\", \"are\", \"was\", \"were\"]:\n            adverbs.append(word)\n            positions.append(len(sentence) - len(sentence) - 1)\n    return adverbs, positions\n\n# This is a \"somewhat\" solution.\n# It is not very efficient.\n# It is not \"good\" solution.\ndef find_adverbs_and_positions3(sentence):\n    adverbs = []\n    positions = []\n    for word in sentence:\n        if word in [\"is\", \"are\", \"was\", \"were\"]:\n            adverbs.append(word)\n            positions.append(len(sentence) - len(sentence) - 1)\n    return adverbs, positions\n\n# This is a \"bad\" solution.\n# It is not an \"optimal\" solution.\n# It is not very efficient.\n# It is not \"good\" solution.\ndef find_adverbs_and_positions4(sentence):\n    adverbs = []\n    positions = []\n    for word in sentence:\n        if word in [\"is\", \"are\", \"was\", \"were\"]:\n            adverbs.append(word)\n            positions.append(len(sentence) - len(sentence) - 1)\n    return adverbs, positions\n\n# This is a \""
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/find-adverbs/discuss/81901/C-Python-O(n)-time-O(n)-space-and-recursion-solution\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution(object):\n    def findAdverbs(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        # BFS\n        # dfs(root)\n        # recursion\n        # dfs_recursion(root)\n        # dfs_recursion_2(root)\n        # dfs_recursion_3(root)\n        # dfs_recursion_4(root)\n        # dfs_recursion_5(root)\n\n        # dfs_recursion_6(root)\n        # dfs_recursion_7(root)\n        # dfs_recursion_8(root)\n        # dfs_recursion_9(root)\n        # dfs_recursion_10(root)\n\n        # dfs_recursion_11(root)\n        # dfs_recursion_12(root)\n        # dfs_recursion_13(root)\n        # dfs_recursion_14(root)\n        # dfs_recursion_15(root)\n\n        # dfs_recursion_16(root)\n        # dfs_recursion_17(root)\n        # dfs_recursion_18(root)\n        # dfs_recursion_19(root)\n        # dfs_recursion_20(root)\n\n        # dfs_recursion_21(root)\n        # dfs_recursion_22(root)\n        # dfs_recursion_23(root)\n        # dfs_recursion_24(root)\n        # dfs_recursion_25(root)\n\n        # dfs_recursion_26(root)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Define a function\ndef find_adverbs(sentence):\n    adverbs = []\n    for word in sentence.split():\n        if word.endswith('s'):\n            adverbs.append(word)\n    return adverbs\n\n# Test it\nif __name__ == '__main__':\n    assert find_adverbs('I have a dog.') == ['have', 'dog']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', 'cat']\n    assert find_adverbs('I have a cat.') == ['have', '"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Definition for an \"adverb\" or \"verb\"\nclass Adverb:\n    def __init__(self, word):\n        self.word = word\n        self.pos = None\n        self.adj = None\n\nclass Solution(object):\n    def findAdverbPositions(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[int]\n        \"\"\"\n        positions = []\n        adverbs = self.findAdverbs(sentence)\n        for i, word in enumerate(sentence):\n            if word == \"and\":\n                positions.append(i)\n            if word == \",\":\n                positions.append(i)\n            if word == \";\":\n                positions.append(i)\n            if word == \".\":\n                positions.append(i)\n            if word == \",\" and word!= \";\":\n                positions.append(i)\n        return positions\n\n    def findAdverbs(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: List[Adverb]\n        \"\"\"\n        adverbs = []\n        for word in sentence:\n            if word == \"and\" or word == \",\":\n                continue\n            if word == \";\":\n                continue\n            if word == \".\":\n                continue\n            if word == \",\":\n                continue\n            if word == \",\" and word!= \";\":\n                continue\n            if word == \"and\":\n                adverbs.append(Adverb(word))\n        return adverbs\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    sentence = \"And,, and.,, \"\n    print solution.findAdverbPositions(sentence)\n    print solution.findAdverbs(sentence)"
    }
  ]
}