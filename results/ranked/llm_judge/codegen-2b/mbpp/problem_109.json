{
  "timestamp": "2025-09-14T18:10:22.731901",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 109,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import unittest\n\ndef max_product(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    return max(t[0] * t[1] for t in tuples)\n\n\nclass TestCode(unittest.TestCase):\n    def test_max_product(self):\n        tuples = [(1, 2), (2, 3), (2, 4)]\n        self.assertEqual(max_product(tuples), 6)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def max_product(nums):\n    max_product = 0\n    for i in range(len(nums)):\n        max_product = max(max_product, nums[i][0] * nums[i][1])\n    return max_product\n\nif __name__ == \"__main__\":\n    nums = [\n        [1,2],\n        [3,4],\n        [5,6],\n        [7,8]\n    ]\n    print(max_product(nums))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Time:  O(n^2)\n# Space: O(n)\n\n# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<%s, %s>' % (self.x, self.y)\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        max_product = nums[0]\n        for i in range(1, n):\n            max_product = max(max_product, nums[i] * nums[i-1])\n        return max_product\n\nif __name__ == '__main__':\n    print Solution().maxProduct([(1,2),(3,4),(5,6)])"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {List[List[int]]} pairs\n    # @return {int}\n    def maxProduct(self, pairs):\n        result = 0\n        for pair in pairs:\n            result = max(result, self.maxProductOf(pair))\n        return result\n\n    def maxProductOf(self, pair):\n        result = 0\n        for i in range(len(pair)):\n            result = max(result, pair[i][1] * pair[i][0])\n        return result\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    pairs = [[(1, 2), (3, 4)], [(1, 2), (2, 3)], [(1, 3), (3, 1)], [(1, 2), (3, 1), (4, 2), (5, 6)]]\n    print solution.maxProduct(pairs)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n\n    def __repr__(self):\n        return str(self.x)\n\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort(key=lambda x: x[0])\n        max_prod = 1\n        for i in range(len(nums)):\n            max_prod *= nums[i][0]\n            max_prod *= nums[i][1]\n        return max_prod"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def maxProduct(tuples):\n    max = 0\n    for t in tuples:\n        max = max * t[0]\n        max = max * t[1]\n    return max"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import time\n\n\ndef max_product(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    if not tuples:\n        return 1\n\n    start = time.time()\n    result = 1\n    for t in tuples:\n        result *= t[0] * t[1]\n    print(\"Took %.4f secs to find the max product\" % (time.time() - start))\n    return result\n\n\ndef main():\n    tuples = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6),\n        (6, 7),\n        (7, 8),\n        (8, 9),\n        (9, 10),\n        (10, 11),\n        (11, 12),\n        (12, 13),\n        (13, 14),\n        (14, 15),\n        (15, 16),\n        (16, 17),\n        (17, 18),\n        (18, 19),\n        (19, 20),\n        (20, 21),\n        (21, 22),\n        (22, 23),\n        (23, 24),\n        (24, 25),\n        (25, 26),\n        (26, 27),\n        (27, 28),\n        (28, 29),\n        (29, 30),\n        (30, 31),\n        (31, 32),\n        (32, 33),\n        (33, 34),\n        (34, 35),\n        (35, 36),\n        (36, 37),\n        (37, 38),\n        (38, 39),\n        (39, 40),\n        (40, 41),\n        (41, 42),\n        (42, 43),\n        (43, 44),\n        (44, 45),\n        (45, 46),\n        (46, 47),\n        (47, 48),\n        (48, 49),\n        (49, 50),\n        (50, 51),\n        (51, 52),\n        (52, 53),\n        (53, 54),\n        (54, 55),\n        (55"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for a tuple\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __lt__(self, other):\n        return self.x < other.x\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        result = 1\n        max_result = 1\n        for num in nums:\n            max_result = max(max_result, num.y)\n            result = max(result, max_result * num.x)\n        return result"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        ans = 0\n        for i in range(len(nums) - 1):\n            j = i + 1\n            for k in range(j, len(nums)):\n                ans = max(ans, nums[i].x * nums[j].x * nums[k].x)\n        return ans"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/solution/\n# https://leetcode.com/problems/max-product-of-two-arrays/discuss/113720/C-Python-Solution\n# https://leetcode.com/problems/max-product-of-two-arrays/solution/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/solution/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/solution/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/solution/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leetcode.com/problems/max-product-of-two-arrays/\n# https://leet"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def max_product(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    n = len(tuples)\n    max_value = -float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            max_value = max(max_value, tuples[i][0] * tuples[j][1])\n    return max_value\n\n\nprint(max_product([(1, 2), (1, 3), (2, 3)]))\nprint(max_product([(1, 1), (1, 2), (2, 2)]))\nprint(max_product([(1, 1), (1, 2), (2, 1)]))\nprint(max_product([(1, 1), (1, 2), (1, 3)]))\nprint(max_product([(1, 1), (2, 2), (3, 3)]))\nprint(max_product([(1, 1), (2, 2), (3, 2)]))\nprint(max_product([(1, 1), (2, 2), (3, 1)]))\nprint(max_product([(1, 1), (2, 1), (3, 2)]))\nprint(max_product([(1, 1), (2, 1), (1, 2)]))\nprint(max_product([(1, 1), (2, 1), (1, 3)]))\nprint(max_product([(1, 1), (2, 1), (3, 1)]))\nprint(max_product([(1, 1), (2, 1), (3, 2)]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\ndef maxProduct(tuples):\n    # write your code here\n    maxProduct = 0\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                maxProduct = max(maxProduct, tuples[i][0] * tuples[j][0])\n    return maxProduct\n\nif __name__ == \"__main__\":\n    tuples = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6),\n        (6, 7),\n        (7, 8),\n        (8, 9),\n        (9, 10),\n        (10, 11),\n        (11, 12),\n        (12, 13),\n        (13, 14),\n        (14, 15),\n        (15, 16),\n        (16, 17),\n        (17, 18),\n        (18, 19),\n        (19, 20),\n        (20, 21),\n        (21, 22),\n        (22, 23),\n        (23, 24),\n        (24, 25),\n        (25, 26),\n        (26, 27),\n        (27, 28),\n        (28, 29),\n        (29, 30),\n        (30, 31),\n        (31, 32),\n        (32, 33),\n        (33, 34),\n        (34, 35),\n        (35, 36),\n        (36, 37),\n        (37, 38),\n        (38, 39),\n        (39, 40),\n        (40, 41),\n        (41, 42),\n        (42, 43),\n        (43, 44),\n        (44, 45),\n        (45, 46),\n        (46, 47),\n        (47, 48),\n        (48, 49),\n        (49, 50),\n        (50, 51),\n        (51, 52),\n        (52, 53),\n        (53, 54),\n        (54, 55),\n        (55, 56),\n        (56, 57),\n        (57, 58),\n        (58, 59),"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# The idea is to find the max product of all the pairs in the list.\n# We will use a dynamic programming algorithm to find the max product of all the pairs in the list.\n# This algorithm will return the maximum product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is to find the max product of all the pairs in the list.\n# The idea is"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# The following are the tuples that we'll be using\n\n# List of tuples to be used\n# (first, second)\ntuple_list = [\n    (1, 2),\n    (2, 3),\n    (1, 3),\n    (3, 4),\n    (2, 4),\n    (1, 4),\n    (4, 5),\n    (3, 5),\n    (2, 5),\n    (1, 5),\n    (5, 6),\n    (4, 6),\n    (3, 6),\n    (2, 6),\n    (1, 6),\n    (6, 7),\n    (5, 7),\n    (4, 7),\n    (3, 7),\n    (2, 7),\n    (1, 7),\n    (7, 8),\n    (6, 8),\n    (5, 8),\n    (4, 8),\n    (3, 8),\n    (2, 8),\n    (1, 8),\n    (8, 9),\n    (7, 9),\n    (6, 9),\n    (5, 9),\n    (4, 9),\n    (3, 9),\n    (2, 9),\n    (1, 9),\n    (9, 10),\n    (8, 10),\n    (7, 10),\n    (6, 10),\n    (5, 10),\n    (4, 10),\n    (3, 10),\n    (2, 10),\n    (1, 10),\n    (10, 11),\n    (9, 11),\n    (8, 11),\n    (7, 11),\n    (6, 11),\n    (5, 11),\n    (4, 11),\n    (3, 11),\n    (2, 11),\n    (1, 11),\n    (11, 12),\n    (10, 12),\n    (9, 12),\n    (8, 12),\n    (7, 12),\n    (6, 12),\n    (5, 12),\n    (4, 12),\n    (3, 12),\n    (2, 12),\n    (1, 12),\n    (12, 13),\n    (11, 13"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '(%s, %s)' % (self.x, self.y)\n\nclass Solution(object):\n    def __init__(self):\n        self.maxProduct = 0\n        self.maxProductTuple = None\n\n    def maxProduct(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        self.tuples = tuples\n\n        for t in tuples:\n            self.maxProduct = max(self.maxProduct, t.x * t.y)\n        return self.maxProduct\n\n    def maxProductTuple(self):\n        for t in self.tuples:\n            self.maxProduct = max(self.maxProduct, t.x * t.y)\n        return self.maxProductTuple\n\ns = Solution()\nt = (1,2)\nt = (1,3)\nt = (2,3)\nt = (1,2,3)\nt = (1,3,2)\nt = (2,3,1)\nt = (2,1,3)\nt = (1,2,3,4)\nt = (1,3,2,4)\nt = (2,3,1,4)\nt = (2,1,3,4)\nt = (1,2,3,4,5)\nt = (1,3,2,4,5)\nt = (2,3,1,4,5)\nt = (2,1,3,4,5)\nprint(s.maxProduct(t))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[tuple]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        max_product = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i][0]*nums[j][1] > max_product:\n                    max_product = nums[i][0]*nums[j][1]\n        return max_product"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def maxProduct(tuples):\n    maxProduct = 0\n    for i in range(0, len(tuples)):\n        for j in range(0, len(tuples)):\n            maxProduct = max(maxProduct, tuples[i][0] * tuples[j][1])\n    return maxProduct\n\ntuples = [(1,2), (3,4), (5,6)]\nprint(maxProduct(tuples))\n\ntuples = [(1,2), (3,4), (5,6), (7,8)]\nprint(maxProduct(tuples))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple[int, int]]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0][0] * nums[0][1]\n        if n == 2:\n            return max(nums[0][0] * nums[0][1], nums[1][0] * nums[1][1])\n        max_product = nums[0][0] * nums[0][1]\n        for i in range(1, n):\n            max_product = max(max_product, nums[i][0] * nums[i][1])\n        return max_product\n\nif __name__ == \"__main__\":\n    print Solution().maxProduct([(1, 2), (3, 4), (5, 6), (7, 8)])"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def max_product(list_of_tuples):\n    \"\"\"\n    :type list_of_tuples: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    for i in range(len(list_of_tuples)):\n        for j in range(len(list_of_tuples)):\n            if i!= j:\n                if list_of_tuples[i][0] * list_of_tuples[j][1] > max_product:\n                    max_product = list_of_tuples[i][0] * list_of_tuples[j][1]\n    return max_product\n\nif __name__ == '__main__':\n    print(max_product([(1, 2), (2, 3)]))\n    print(max_product([(1, 1), (1, 1), (1, 1)]))\n    print(max_product([(1, 2), (2, 3)]))\n    print(max_product([(1, 2), (2, 3), (3, 1)]))\n    print(max_product([(1, 2), (2, 3), (3, 1), (4, 1)]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# Example 1:\n# Input: [(1, 3), (3, 2), (2, 1)]\n# Output: 9\n# Explanation: [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1, 3), (2, 1)] is the longest list which has:\n# [(1,"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def find_max_product(list_of_tuples):\n\t\"\"\"\n\t:type list_of_tuples: List[Tuple]\n\t:rtype: int\n\t\"\"\"\n\tmax_product = 0\n\tfor i in range(0, len(list_of_tuples)):\n\t\tfor j in range(i + 1, len(list_of_tuples)):\n\t\t\tproduct = list_of_tuples[i][0] * list_of_tuples[j][0]\n\t\t\tif product > max_product:\n\t\t\t\tmax_product = product\n\treturn max_product"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/maximum-product-of-two-numbers/\n# Given a list of pairs of integers, each pair represents a starting point and the ending point of a sublist.\n# Find the maximum value of the product of all these sublists.\n# For example, given [ (1,3), (2,5), (3,6) ]\n# The maximum value of sublist [1,3], [2,5], [3,6] is 6*3*5 = 180.\n#\n# Note:\n# The length of all the given lists will be in the range of [1,10000].\n# The given lists will not have any duplicates.\n# Example 1:\n#\n# Input: [ (1,3), (2,5), (3,6) ]\n# Output: 180\n#\n# Example 2:\n#\n# Input: [ (1,1), (2,1), (2,2), (3,1), (3,2), (3,3) ]\n# Output: 6\n#\n# Example 3:\n#\n# Input: [ (1,2), (2,3), (3,4), (1,5), (1,6), (2,7), (3,8), (4,9), (5,10), (6,10), (7,10) ]\n# Output: 720\n#\n# Note:\n#\n# 1 <= The length of all the given lists will be in the range of [1,10000].\n# 2 <= The number of lists in the input list will be in the range of [1,10000].\n# All the given lists will have the same length.\n# All the given lists will not have any duplicates.\n#\n# \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n#\n# \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7b54\u6848\uff0cO(n^2)\n#\n# \u53ef\u4ee5\u53c2\u8003\uff1a\n# https://leetcode.com/problems/maximum-product-of-two-numbers/discuss/81361/C%2B"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[tuple]\n        :rtype: int\n        \"\"\"\n        res = 1\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                res = max(res, nums[i][0] * nums[j][0])\n        return res"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "from collections import namedtuple\n\n# your code goes here\nclass Pair(namedtuple('Pair', 'a b')):\n    def __lt__(self, other):\n        return self.a < other.a\n\nclass Solution(object):\n    def maxProduct(self, pairs):\n        \"\"\"\n        :type pairs: List[Pair]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(pairs)):\n            res = max(res, pairs[i].a * pairs[i].b)\n            for j in range(i+1, len(pairs)):\n                res = max(res, pairs[i].a * pairs[j].b)\n        return res\n\nif __name__ == '__main__':\n    pairs = [Pair(a, b) for a, b in [(1, 2), (2, 3), (3, 4)]]\n    pairs = [Pair(a, b) for a, b in [(1, 2), (2, 3), (3, 4), (4, 5)]]\n    s = Solution()\n    print s.maxProduct(pairs)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def maxProduct(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not tuples: return 0\n    ans = 0\n    for t in tuples:\n        ans = max(ans, max(t))\n    return ans\n\n# Note:\n# The list is already sorted in ascending order.\n# The tuple has 3 elements.\n# The maximum product is the product of the first element of the tuple.\n# The remaining two elements are the maximum products of the remaining two tuples.\n# For example, if the list is [ (1,2), (2,3), (1,2,3), (4,5), (6,7), (1,2,3,4), (1,2,3,4,5) ]\n# The maximum product is 6.\n# Example 1:\n# Input: [(1,2), (2,3), (1,2,3), (4,5), (6,7), (1,2,3,4), (1,2,3,4,5)]\n# Output: 6\n# Example 2:\n# Input: [(1,2), (2,3), (1,2,3), (4,5), (6,7), (1,2,3,4), (1,2,3,4,5)]\n# Output: 12"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums: return 0\n        n = len(nums)\n        res = 0\n        max_product = -float(\"inf\")\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i] < nums[j]:\n                    max_product = max(max_product, nums[i]*nums[j])\n        return max_product"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = max(res * nums[i], nums[i])\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.maxProduct([(1, 2), (2, 3)]))\n    print(sol.maxProduct([(1, 1), (2, 2)]))\n    print(sol.maxProduct([(1, 1), (1, 2)]))\n    print(sol.maxProduct([(1, 1), (2, 2)]))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @return an integer\n    def maxProduct(self, nums):\n        return self.maxProduct2(nums)\n\n    # @return an integer\n    def maxProduct2(self, nums):\n        if not nums:\n            return 0\n        max = nums[0]\n        for i in xrange(1, len(nums)):\n            max = max if max < nums[i] else nums[i]\n        for i in xrange(1, len(nums)):\n            max = max if max < nums[i] * nums[i-1] else nums[i] * nums[i-1]\n        return max\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [2,3,4,1,2,4]\n    print s.maxProduct2(nums)"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def max_product(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    if not tuples:\n        return 0\n    max_product = min(t[0] * t[1] for t in tuples)\n    for i in range(len(tuples) - 1):\n        for j in range(i + 1, len(tuples)):\n            t = tuples[i] + tuples[j]\n            if t[0] * t[1] > max_product:\n                max_product = t[0] * t[1]\n    return max_product\n\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    print(max_product(tuples))"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "import operator\n\ndef max_product(items):\n    \"\"\"\n    For each tuple in items, find the maximum product of the two elements.\n    :param items: list of tuples\n    :return: maximum product\n    \"\"\"\n    return max(max_product_rec(items))\n\ndef max_product_rec(items):\n    \"\"\"\n    Find the maximum product of the two elements in the tuple.\n    :param items: list of tuples\n    :return: maximum product\n    \"\"\"\n    if not items:\n        return 1\n    if len(items) == 1:\n        return max(items[0])\n    max_product_rec_helper(items)\n    return max(max_product_rec_helper(items))\n\ndef max_product_rec_helper(items):\n    if not items:\n        return 1\n    max_product = items[0][0]\n    for item in items:\n        max_product = max(max_product * item[0], max_product * item[1])\n    return max_product"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def max_product(tuples):\n    if not tuples:\n        return 0\n    max_prod = reduce(lambda x, y: x * y[0] * y[1], tuples, 1)\n    for pair in tuples:\n        max_prod = max(max_prod, pair[0] * pair[1])\n    return max_prod"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {ListNode[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        if not nums:\n            return 0\n        max_product = nums[0].val * nums[1].val\n        for i in range(2, len(nums)):\n            max_product = max(max_product, nums[i].val * nums[i - 1].val * nums[i - 2].val)\n        return max_product\n\nif __name__ == \"__main__\":\n    print Solution().maxProduct([])\n    print Solution().maxProduct([1,2,3,4])\n    print Solution().maxProduct([1,2,3])\n    print Solution().maxProduct([1])\n    print Solution().maxProduct([1,2,3,4,5,6])\n    print Solution().maxProduct([1,2,3,4,5])"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def maxProduct(tuples):\n\tmaxProduct = 0\n\tfor i in range(len(tuples)):\n\t\tfor j in range(len(tuples)):\n\t\t\tif i!= j:\n\t\t\t\tmaxProduct = max(maxProduct, tuples[i][0] * tuples[j][1])\n\treturn maxProduct\n\nprint maxProduct([(1, 2), (2, 3), (3, 1)])\nprint maxProduct([(1, 2), (2, 3), (3, 1), (2, 3)])\nprint maxProduct([(1, 2), (2, 3), (3, 1), (2, 4)])\nprint maxProduct([(1, 2), (2, 3), (3, 1), (4, 1)])"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import sys\n\ndef maxProduct(tuples):\n    maxProd = 0\n    for t in tuples:\n        maxProd = max(maxProd, maxProduct(t))\n    return maxProd\n\ndef main():\n    tuples = [(1,2),(3,4),(1,5)]\n    print maxProduct(tuples)\n\nif __name__ == \"__main__\":\n    sys.exit(main())"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport sys\n\ndef maxProduct(tuples):\n    maxProduct = 0\n    for t in tuples:\n        maxProduct = max(maxProduct, t[0] * t[1])\n    return maxProduct\n\ndef main():\n    tuples = [ (3, 4), (2, 3), (2, 3) ]\n    print(maxProduct(tuples))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print \"Please provide the file name.\"\n        exit(1)\n    file_name = sys.argv[1]\n    if not os.path.exists(file_name):\n        print \"File does not exist: %s\" % file_name\n        exit(1)\n    with open(file_name) as f:\n        for line in f:\n            t = line.strip().split(\",\")\n            print max(t)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import collections\n\ndef max_product(numbers):\n    return max(reduce(lambda x, y: x * y, [n[1] for n in numbers]))\n\ndef main():\n    numbers = [\n        (3, 3),\n        (2, 6),\n        (5, 10),\n        (1, 7),\n        (4, 9),\n        (8, 15),\n    ]\n    print(max_product(numbers))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "import sys\n\ndef maxProduct(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if len(tuples) == 0:\n        return 0\n    if len(tuples) == 1:\n        return tuples[0][0] * tuples[0][1]\n    if len(tuples) == 2:\n        return max(tuples[0][0] * tuples[0][1], tuples[1][0] * tuples[1][1])\n    \n    maxProduct = 0\n    for i in range(0, len(tuples)):\n        maxProduct = max(maxProduct, maxProduct(tuples[0:i]))\n        maxProduct = max(maxProduct, maxProduct(tuples[i:len(tuples)]))\n    return maxProduct\n\ndef main():\n    tuples = [([1, 2], [3, 4]), ([2, 3], [1, 5]), ([3, 1], [4, 5])]\n    print(maxProduct(tuples))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def maximumProduct(tuples):\n    \"\"\"\n    :type tuples: List[Tuple]\n    :rtype: int\n    \"\"\"\n    # your code here\n    max = 1\n    for i, t in enumerate(tuples):\n        for j in range(i+1, len(tuples)):\n            max = max * (t[1] - t[0]) * (tuples[j][1] - tuples[j][0])\n            if max > 1:\n                return max\n    return max"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def maxProduct(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max = arr[0][0]\n    for i in range(1, n):\n        max = max * arr[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            max = max * arr[i][j]\n    return max\n\n\narr = [[1,2],[3,4]]\nprint(maxProduct(arr))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import math\n\ndef maxProduct(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # sort the tuples by first element\n    tuples.sort(key=lambda x: x[0])\n\n    # iterate through the tuples and get the product\n    max_product = 0\n    for i in range(0, len(tuples)):\n        for j in range(i+1, len(tuples)):\n            max_product = max(max_product, tuples[i][0] * tuples[j][0])\n\n    return max_product\n\nif __name__ == \"__main__\":\n    tuples = [[1,2], [1,3], [2,3]]\n    print(maxProduct(tuples))\n    tuples = [[1,2], [2,3]]\n    print(maxProduct(tuples))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "import math\n\ndef max_product(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for tup in tuples:\n        product = 1\n        for i in range(len(tup)):\n            product *= tup[i]\n        result = max(result, product)\n    return result\n\nif __name__ == '__main__':\n    tuples = [(3,2),(2,3),(5,3),(2,1)]\n    print(max_product(tuples))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef max_product(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for t1, t2 in tuples:\n        result = max(result, t1 * t2)\n    return result\n\n\ndef main():\n    tuples = [(1, 2), (2, 3), (1, 4), (1, 5), (1, 6)]\n    print(max_product(tuples))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\n\ndef max_product(tuples):\n    \"\"\"\n    :type tuples: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if len(tuples) < 1:\n        return 0\n\n    max_val = 0\n    for i in range(len(tuples)):\n        first = tuples[i][0]\n        second = tuples[i][1]\n        product = first * second\n        if product > max_val:\n            max_val = product\n\n    return max_val\n\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    print(max_product(tuples))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/maximum-product-of-two-numbers/\n\n# Definition for a tuple:\n# class Tuple(object):\n#     def __init__(self, x):\n#         self.x = x\n#         self.y = y\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_product = float(\"-inf\")\n        for i in range(len(nums)):\n            max_product = max(max_product, self.maxProduct(nums[:i] + nums[i+1:]) * nums[i][0])\n        return max_product\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProduct([(1,2),(2,5)]))\n    print(sol.maxProduct([(1,2),(2,5),(3,6)]))\n    print(sol.maxProduct([(2,3),(2,3)]))\n    print(sol.maxProduct([(2,3),(3,5),(4,6)]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import namedtuple\nfrom itertools import product\n\n\n# A tuple with the first element as the index and the second as the value\n# the index is the first element of the tuple and the value is the second element of the tuple\n# this is the same as a tuple of (index, value)\n# for example:\n# [('a', 1), ('b', 2), ('c', 3)]\n# would be (0, 1), (1, 2), (2, 3)\n# [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\n# would be (0, 1), (1, 2), (2, 3), (3, 4), (4, 5)\n# [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]\n# would be (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)\nTuple = namedtuple('Tuple', 'index value')\n\ndef max_product(tuples):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    :param tuples:\n    :return:\n    \"\"\"\n\n    # initialise the output\n    max_product = 0\n\n    # iterate over tuples\n    for t in tuples:\n        # get the index and value\n        index, value = t\n\n        # get the max of the product\n        product = 1\n        for i in range(len(tuples)):\n            # get the product of the two elements\n            product *= (tuples[i][0] == index and tuples[i][1] == value)\n\n        # update the max product\n        max_product = max(max_product, product)\n\n    # return the max product\n    return max_product\n\nif __name__ == \"__main__\":\n    tuples = [Tuple(i, v) for i, v in product(range(3), range(1, 6))]\n    print(max_product(tuples))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def max_product(numbers):\n    \"\"\"\n    :type numbers: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(numbers)\n    max_product = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_product = max(max_product, numbers[i][j])\n    return max_product\n\nif __name__ == \"__main__\":\n    assert max_product([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 42\n    assert max_product([[1, 2, 3], [4, 5, 6], [7, 8, 9], [4, 5, 6]]) == 24"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def max_product(pairs):\n    \"\"\"\n    :type pairs: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    n = len(pairs)\n    if n == 0:\n        return 0\n    \n    product = pairs[0][0] * pairs[0][1]\n    for i in range(1, n):\n        product = max(product, pairs[i-1][0] * pairs[i-1][1] * pairs[i][0] * pairs[i][1])\n    return product"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"(%s,%s)\" % (self.x, self.y)\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n\n        max_product = 0\n        for i in range(n):\n            max_product = max(max_product, max(nums[i].x * nums[i].y, nums[i].y * nums[i].x))\n\n        return max_product"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/max-product/problem\n# Time complexity: O(n^2)\n# Space complexity: O(n^2)\n\n# For each pair, the sum of the first element of the pair and the product of the second element.\n\ndef maxProduct(tuples):\n    max_product = 0\n    for t1, t2 in tuples:\n        max_product = max(max_product, t1 * t2)\n    return max_product\n\n# tuples = [(1, 2), (2, 3), (3, 4), (4, 5)]\ntuples = [(1, 2), (1, 2), (1, 2), (1, 2)]\nprint(maxProduct(tuples))\n\n# tuples = [(1, 2), (2, 3), (3, 4), (4, 5)]\ntuples = [(1, 2), (2, 3), (3, 4)]\nprint(maxProduct(tuples))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[tuple]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            m = max(m, nums[i][0] * nums[j][0])\n    return m"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef maxProduct(list):\n    max_product = 0\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i][0]*list[j][0] > max_product:\n                max_product = list[i][0]*list[j][0]\n    return max_product\n\nif __name__ == \"__main__\":\n    list = [[3, 1, 1, 4], [1, 2, 1, 3], [1, 1, 3, 6], [4, 2, 2, 3]]\n    max_product = maxProduct(list)\n    print max_product"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def maxProduct(pairs):\n    maxProduct = 0\n    for pair in pairs:\n        product = pair[0] * pair[1]\n        if product > maxProduct:\n            maxProduct = product\n    return maxProduct\n\ndef main():\n    print(maxProduct([(2,3), (4,5)]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def max_product(tuples):\n    \"\"\"\n    :type tuples: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if len(tuples) == 0:\n        return 0\n    \n    n = len(tuples)\n    m = max(map(lambda x: len(x), tuples))\n    \n    max_product = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            max_product = max(max_product, tuples[i][0] * tuples[j][0])\n    \n    return max_product"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef max_product(list_of_tuples):\n    \"\"\"\n    Find the maximum product from a list of tuples.\n\n    For example, if the list of tuples is [(\"a\", 1), (\"b\", 2), (\"c\", 3)],\n    then the maximum product is 3.\n\n    The tuple (\"a\", 1) is a pair of the first element and the multiplicity of the\n    first element.\n\n    The tuple (\"b\", 2) is a pair of the second element and the multiplicity of the\n    second element.\n\n    The tuple (\"c\", 3) is a pair of the third element and the multiplicity of the\n    third element.\n\n    :type list_of_tuples: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not list_of_tuples:\n        return 0\n\n    # Create a dictionary to store all the pairs of tuples.\n    pairs = defaultdict(int)\n\n    # Iterate over the list of tuples and add all the pairs of tuples to the\n    # dictionary.\n    for tuple in list_of_tuples:\n        pairs[tuple] += 1\n\n    # Return the maximum product from all the pairs of tuples.\n    return max(pairs.values())"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\nimport os\nsys.path.append(os.path.dirname(os.path.abspath(__file__)) + \"/..\")\n\nfrom utils.functions import *\n\n\ndef find_max_product(pairs):\n    max_product = 0\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            max_product = max(max_product, pairs[i][0] * pairs[j][0])\n    return max_product\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print \"Usage: %s <input_file>\" % os.path.basename(__file__)\n        sys.exit(1)\n\n    input_file = sys.argv[1]\n\n    with open(input_file, \"r\") as f:\n        for line in f:\n            pairs = parse_line(line)\n            max_product = find_max_product(pairs)\n            print max_product"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import time\nstart_time = time.time()\n\ndef find_max_product(tuples):\n    max_product = 0\n    for pair in tuples:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\nprint(\"Elapsed: {0:.3f}\".format(time.time() - start_time))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def maxProduct(tuples):\n    # write your code here\n    max_product = 0\n    for t in tuples:\n        product = 1\n        for i in t:\n            product *= i\n        max_product = max(max_product, product)\n    return max_product\n\n# Test cases\ntuples = [[1, 2], [3, 4], [5, 6]]\nprint(maxProduct(tuples))\ntuples = [[1, 2], [3, 4]]\nprint(maxProduct(tuples))\ntuples = [[1, 2], [3, 4, 5]]\nprint(maxProduct(tuples))\ntuples = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maxProduct(tuples))\ntuples = [[1, 2], [3, 4], [5, 6], [7, 8]]\nprint(maxProduct(tuples))\ntuples = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\nprint(maxProduct(tuples))\ntuples = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]\nprint(maxProduct(tuples))\ntuples = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]\nprint(maxProduct(tuples))\ntuples = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]\nprint(maxProduct(tuples))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import time\n\n\ndef max_product(tuples):\n    return max(tuple(i * j for i, j in pair))\n\n\ndef time_max_product(tuples):\n    t1 = time.time()\n    result = max_product(tuples)\n    t2 = time.time()\n    print(t2 - t1)\n    return result\n\n\ndef main():\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    print(time_max_product(tuples))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def max_product(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0][0]\n    if len(nums) == 2:\n        return max(nums[0][0] * nums[1][0], nums[0][1] * nums[1][1])\n\n    max_product = nums[0][0] * nums[0][1]\n    for i in range(1, len(nums)):\n        max_product = max(max_product, nums[i][0] * nums[i][1])\n\n    return max_product\n\nprint(max_product([(1, 2), (2, 3), (3, 4)]))\nprint(max_product([(1, 2), (1, 2), (1, 3)]))\nprint(max_product([(1, 2), (2, 3), (3, 4), (1, 2)]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def max_product(tuples):\n    max_product = 0\n    for t1 in tuples:\n        for t2 in tuples:\n            if t1!= t2:\n                max_product = max(max_product, t1[0]*t2[1])\n    return max_product\n\ndef main():\n    tuples = [(1,2),(3,5),(2,3)]\n    print max_product(tuples)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def max_product(list_of_tuples):\n    \"\"\"\n    Input: list_of_tuples is a list of tuples.\n    Output: The maximum product from the list.\n    \"\"\"\n    list_of_tuples.sort()\n    product = 1\n    for t in list_of_tuples:\n        product *= t[0]\n        product *= t[1]\n    return product\n\n# Test cases\nlist_of_tuples = [\n    (1, 2),\n    (1, 3),\n    (1, 4),\n    (2, 3),\n    (2, 4),\n    (3, 4),\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n]\n\nprint(max_product(list_of_tuples))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def max_product(list_of_tuples):\n    max_product = 0\n    for tuple in list_of_tuples:\n        max_product = max(max_product, tuple[0] * tuple[1])\n    return max_product\n\ndef main():\n    test_list = [\n        ((1, 2), (2, 1)),\n        ((2, 3), (3, 2)),\n        ((3, 2), (2, 3)),\n        ((2, 1), (1, 2)),\n        ((3, 2), (2, 1)),\n        ((1, 3), (3, 1))\n    ]\n    print(max_product(test_list))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not nums: return 0\n        n = len(nums)\n        max_prod = -sys.maxsize\n        for i in xrange(n):\n            for j in xrange(i+1, n):\n                max_prod = max(max_prod, nums[i][j]*nums[j][i])\n        return max_prod"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def max_product(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(len(tuples[i])):\n            if tuples[i][j] > max_product:\n                max_product = tuples[i][j]\n    return max_product\n\nif __name__ == \"__main__\":\n    tuples = [[1,2], [3,4], [5,6], [7,8]]\n    print max_product(tuples)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def max_product(numbers):\n    \"\"\"\n    :type numbers: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    if not numbers:\n        return 0\n    max_product = numbers[0][0]\n    for number in numbers:\n        product = number[0] * number[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\nif __name__ == '__main__':\n    assert(max_product([(3, 6), (2, 9), (5, 6), (1, 2), (4, 9)]) == 144)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef max_product(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not tuples:\n        return 0\n    \n    # We will store the max product in a list, so that we can return it\n    # without recomputing it\n    max_product_list = [0] * len(tuples)\n    \n    # We will store the maximum product in a dictionary so that we can \n    # return it without recomputing it\n    max_product_dict = defaultdict(int)\n    \n    # We will store the index of the maximum product in a list so that we can \n    # return it without recomputing it\n    max_product_index_list = []\n    \n    # Iterate through the list of tuples\n    for i, t in enumerate(tuples):\n        # If this is the first tuple, we need to initialize the max product\n        if i == 0:\n            max_product_list[i] = t[0] * t[1]\n            max_product_dict[t] = max_product_list[i]\n            max_product_index_list.append(i)\n        else:\n            # If the current tuple is greater than the previous tuple, \n            # update the max product\n            if max_product_list[i] < t[0] * t[1]:\n                max_product_list[i] = t[0] * t[1]\n                max_product_dict[t] = max_product_list[i]\n                max_product_index_list.append(i)\n            elif max_product_list[i] == t[0] * t[1]:\n                max_product_dict[t] = max_product_list[i]\n                max_product_index_list.append(i)\n    \n    # Return the maximum product\n    return max_product_dict[tuples[max_product_index_list[0]]]\n\nif __name__ == \"__main__\":\n    tuples = [(1, 2), (3, 4), (2, 3), (1, 3)]"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def max_product(tuples):\n    max_product = 0\n    for pair in tuples:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import heapq\n\ndef max_product(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    if not tuples:\n        return 0\n    max_heap = []\n    for i in range(len(tuples)):\n        max_heap.append((tuples[i][0], tuples[i][1], 0))\n    for i in range(len(tuples)):\n        if i == 0:\n            continue\n        p1, p2, product = heapq.heappop(max_heap)\n        if product < 0:\n            continue\n        heapq.heappush(max_heap, (p1, p2, product*tuples[i][0]))\n        heapq.heappush(max_heap, (p2, p1, product*tuples[i][1]))\n    return heapq.heappop(max_heap)\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (2, 4), (2, 8), (3, 6)]\n    print(max_product(tuples))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import sys\n\ndef max_product(tuples):\n    \"\"\"\n    For each tuple, calculate the maximum product of the two numbers in the tuple.\n    \"\"\"\n    max_product = 0\n    for t in tuples:\n        max_product = max(max_product, t[0] * t[1])\n    return max_product\n\n\ndef main():\n    tuples = []\n    for line in sys.stdin:\n        t = tuple(map(int, line.strip().split()))\n        tuples.append(t)\n\n    print max_product(tuples)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/maximum-product-of-three-numbers/\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = 0\n        max_i = 0\n        for i in range(len(nums)):\n            max_product = max(max_product, nums[i] * nums[i+1] * nums[i+2])\n            max_i = max(max_i, i)\n        return max_product"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def maxProduct(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not tuples:\n        return 0\n    max_product = reduce(lambda x, y: max(x, y) * (len(y) + 1), tuples, 1)\n    for tup in tuples:\n        max_product = max(max_product, reduce(lambda x, y: x * y, tup, 1))\n    return max_product\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    print maxProduct(tuples)"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/maximum-product-of-two-numbers/\n# Given a list of numbers, for each number in the list,\n# find the maximum number and the maximum product between\n# it and the next number in the list.\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        max_product = 0\n        for i in range(0, len(nums) - 1):\n            max_product = max(max_product, nums[i] * nums[i + 1])\n        return max_product\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxProduct([1,2,3,4,5]))\n    print(s.maxProduct([2,3,4,5,6,7]))\n    print(s.maxProduct([2,3,4,5,6]))\n    print(s.maxProduct([1,2,3,4,5,6,7]))\n    print(s.maxProduct([7,6,5,4,3,2,1]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "import collections\n\ndef max_product(tuples):\n    return max_product_pairwise(tuples, collections.defaultdict(int))\n\ndef max_product_pairwise(tuples, dict_product):\n    if len(tuples) == 0:\n        return 1\n    max_product = 1\n    for t1, t2 in tuples:\n        if t1[0] == t2[0] and t1[1] == t2[1]:\n            max_product = max(max_product, dict_product[t1] * dict_product[t2])\n    return max_product"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "import unittest\n\ndef maxProduct(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: int\n    \"\"\"\n    product = 1\n    for i in range(len(tuples)):\n        product *= tuples[i][0]\n        product *= tuples[i][1]\n    return product\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(maxProduct([(1,2), (3,4)]), 24)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __lt__(self, other):\n        return self.x < other.x\n\n    def __str__(self):\n        return str(self.x) + \" \" + str(self.y)\n\n\ndef max_product(tuples):\n    # write your code here\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i] < tuples[j]:\n                max_product = max(max_product, tuples[i].x * tuples[j].y)\n    return max_product"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/maximum-product-of-two-numbers/discuss/299974/Python-Cython-O(1)-Solutions\n\n# O(n) time and O(n) space\n# TODO: check the correctness\ndef maxProduct(self, nums):\n    if not nums:\n        return 0\n    nums.sort()\n    max_prod = nums[0] * nums[0]\n    for i in range(1, len(nums)):\n        max_prod = max(max_prod, nums[i] * nums[i])\n    return max_prod\n\n\n# O(n) time and O(n) space\n# TODO: check the correctness\ndef maxProduct2(self, nums):\n    if not nums:\n        return 0\n    max_prod = nums[0] * nums[0]\n    for i in range(1, len(nums)):\n        max_prod = max(max_prod, nums[i] * nums[i])\n    return max_prod\n\n\n# O(n) time and O(n) space\ndef maxProduct3(self, nums):\n    if not nums:\n        return 0\n    max_prod = nums[0] * nums[0]\n    for i in range(1, len(nums)):\n        max_prod = max(max_prod, nums[i] * nums[i])\n    return max_prod"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/max-product/problem\n# https://www.hackerrank.com/challenges/max-product/problem\n\n# I have written this code in a different way, but it is the same as the one above.\n\n# My solution:\ndef maxProduct(arr):\n    max_product = arr[0][0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i][0] * arr[i][1])\n    return max_product\n\n# My solution 2:\ndef maxProduct(arr):\n    max_product = arr[0][0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i][0] * arr[i][1])\n        if arr[i][0] < arr[i-1][0]:\n            max_product = max(max_product, arr[i][0] * arr[i-1][1])\n    return max_product\n\n# My solution 3:\ndef maxProduct(arr):\n    max_product = arr[0][0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i][0] * arr[i][1])\n        if arr[i][0] < arr[i-1][0]:\n            max_product = max(max_product, arr[i-1][0] * arr[i][1])\n    return max_product\n\n# My solution 4:\ndef maxProduct(arr):\n    max_product = arr[0][0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i][0] * arr[i][1])\n        if arr[i][0] < arr[i-1][0]:\n            max_product = max(max_product, arr[i-1][0] * arr[i][1])\n    return max_product\n\n# My solution 5:\ndef maxProduct(arr):\n    max_product = arr[0][0]\n    for i in"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nfrom collections import defaultdict\n\ndef max_product(pairs):\n    max_product = 0\n    for pair in pairs:\n        product = 1\n        for i, j in pair:\n            product *= i\n        max_product = max(max_product, product)\n    return max_product\n\ndef test():\n    assert max_product([]) == 1\n    assert max_product([(1, 2), (3, 4), (5, 6)]) == 120\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "import sys\nfrom functools import reduce\n\n\ndef max_product(arr):\n    if not arr:\n        return 0\n    return max(map(max_product_helper, arr))\n\n\ndef max_product_helper(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return max(map(max_product_helper, arr)) * arr[0]\n\n\nif __name__ == \"__main__\":\n    input_arr = list(map(lambda x: map(int, x.split(\",\")), sys.stdin.readlines()))\n    print(max_product(input_arr))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# Definition for a tuple:\n# class Tuple(object):\n#     def __init__(self, x):\n#         self.x = x\n#         self.y = y\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        ans = nums[0][0]\n        for i in xrange(1, len(nums)):\n            ans = max(ans, nums[i][0]*nums[i][1])\n        return ans"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def maxProduct(tupleList):\n    \"\"\"\n    :type tupleList: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max = 0\n    for i in range(len(tupleList)):\n        for j in range(i, len(tupleList)):\n            max = max if tupleList[i][j] * tupleList[j][i] > max else tupleList[i][j] * tupleList[j][i]\n    return max\n\n# Time:  O(n^2)\n# Space: O(n^2)\n# Two pointers\n# Two pointer\n# Two pointer\n# Two pointer\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums: return 0\n        max = 0\n        for i in range(len(nums)):\n            max = max if nums[i] * nums[i] > max else nums[i] * nums[i]\n        return max"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\nimport collections\nfrom typing import List\n\nfrom solution.MaximumProductOfPairs import Solution\nfrom solution.MaximumProductOfPairs import Tuple\n\nclass TestSolution(unittest.TestCase):\n    def test_example(self):\n        self.assertEqual(Solution().maxProduct( [(0,1), (2,3)] ), 6)\n\n    def test_empty_list(self):\n        self.assertEqual(Solution().maxProduct([]), 1)\n\n    def test_single_list(self):\n        self.assertEqual(Solution().maxProduct( [(0,1)] ), 1)\n\n    def test_simple_example(self):\n        self.assertEqual(Solution().maxProduct( [(0,1), (2,3)] ), 6)\n\n    def test_example_2(self):\n        self.assertEqual(Solution().maxProduct( [(0,0), (0,1), (0,2), (0,3), (1,1), (1,2), (1,3), (2,2), (2,3), (3,3)] ), 24)\n\n    def test_example_3(self):\n        self.assertEqual(Solution().maxProduct( [(0,1), (2,3), (1,2), (1,3), (2,1), (2,2), (2,3), (3,2), (3,3)] ), 24)\n\n    def test_example_4(self):\n        self.assertEqual(Solution().maxProduct( [(1,2), (1,3), (2,3), (2,1), (3,2), (3,3)] ), 12)\n\n    def test_example_5(self):\n        self.assertEqual(Solution().maxProduct( [(0,1), (2,3), (1,2), (1,3), (2,0), (2,1), (2,2), (2,3), (3,2), (3,3)] ), 24)\n\n    def test_example_6(self):\n        self.assertEqual(Solution().maxProduct( [(1,2), (1,3), (2,3), (2,1), (3"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# O(n^2)\ndef maxProduct(tuples):\n    maxProduct = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            maxProduct = max(maxProduct, tuples[i][0] * tuples[j][0])\n    return maxProduct\n\n# O(n)\ndef maxProduct1(tuples):\n    maxProduct = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            maxProduct = max(tuples[i][0] * tuples[j][0], maxProduct)\n    return maxProduct\n\n\n# O(n)\ndef maxProduct2(tuples):\n    maxProduct = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            maxProduct = max(tuples[i][0] * tuples[j][0], maxProduct)\n    return maxProduct\n\n# O(n)\ndef maxProduct3(tuples):\n    maxProduct = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            maxProduct = max(tuples[i][0] * tuples[j][0], maxProduct)\n    return maxProduct\n\n\n# O(n)\ndef maxProduct4(tuples):\n    maxProduct = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            maxProduct = max(tuples[i][0] * tuples[j][0], maxProduct)\n    return maxProduct\n\n\n# O(n)\ndef maxProduct5(tuples):\n    maxProduct = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            maxProduct = max(tuples[i][0] * tuples[j][0], maxProduct)\n    return maxProduct\n\n\n# O(n)\ndef maxProduct6(tuples):\n    maxProduct"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n\n        max_prod = nums[0]\n        for i in range(1, n):\n            max_prod = max(nums[i] * nums[i - 1], max_prod)\n\n        return max_prod"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def maxProduct(nums):\n    if not nums:\n        return 0\n\n    max_product = nums[0]\n    for i in range(1, len(nums)):\n        max_product = max(max_product * nums[i], nums[i])\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert maxProduct([(1,2), (1,3), (2,3)]) == 6, \"One\"\n    assert maxProduct([(1,2), (2,3)]) == 6, \"Two\"\n    assert maxProduct([(1,2), (3,4), (2,3)]) == 24, \"Three\"\n    assert maxProduct([(1,2), (3,4), (5,6), (2,3)]) == 120, \"Four\"\n    assert maxProduct([(1,2), (3,4), (5,6), (7,8), (2,3)]) == 720, \"Five\"\n    assert maxProduct([(1,2), (3,4), (5,6), (7,8), (9,10), (2,3)]) == 10080, \"Six\"\n    assert maxProduct([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (2,3)]) == 40320, \"Seven\""
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\ndef maxProduct(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n    dp = defaultdict(int)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert maxProduct([[1,2],[3,4]]) == 24"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {List[List[int]]} matrix\n    # @return {int}\n    def maxProduct(self, matrix):\n        if not matrix:\n            return 0\n        max_prod = matrix[0][0]\n        for row in matrix:\n            for col in row:\n                max_prod = max(max_prod, self.maxProduct(row) * col)\n        return max_prod"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Example 1\n# In [1]: a = [(1,2),(2,3),(3,4)]\n# In [2]: max_product(a)\n# Out[2]: (4, 24)\n\n# Example 2\n# In [3]: a = [(1,2),(1,3),(2,3),(2,4),(3,4)]\n# In [4]: max_product(a)\n# Out[4]: (6, 24)\n\n# Example 3\n# In [5]: a = [(1,2),(2,3),(2,4),(3,4)]\n# In [6]: max_product(a)\n# Out[6]: (2, 24)\n\n# Example 4\n# In [7]: a = [(1,2),(1,3),(2,3),(2,4),(3,4)]\n# In [8]: max_product(a)\n# Out[8]: (2, 24)\n\n# Example 5\n# In [9]: a = [(1,2),(1,3),(2,3),(2,4),(3,4)]\n# In [10]: max_product(a)\n# Out[10]: (2, 24)\n\n# Example 6\n# In [11]: a = [(1,2),(2,3),(2,4),(3,4)]\n# In [12]: max_product(a)\n# Out[12]: (1, 24)\n\n# Example 7\n# In [13]: a = [(1,2),(2,3),(2,4),(3,4)]\n# In [14]: max_product(a)\n# Out[14]: (1, 24)\n\n# Example 8\n# In [15]: a = [(1,2),(2,3),(2,4),(3,4)]\n# In [16]: max_product(a)\n# Out[16]: (1, 24)\n\n# Example 9\n# In [17]: a = [(1,2),(2,3),(2,4),(3,4)]\n# In [18]: max_product(a)\n# Out[18]: (2, 24"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Example\n# >>> maxProduct([(1, 2), (2, 3), (3, 1), (4, 1), (1, 5), (2, 3), (1, 4), (5, 1), (2, 5), (1, 2), (5, 1), (1, 3), (2, 2), (5, 5)])\n# 6\n# >>> maxProduct([(1, 2), (2, 3), (3, 1), (4, 1), (1, 5), (2, 3), (1, 4), (5, 1), (2, 5), (1, 2), (5, 1), (1, 3), (2, 2), (5, 5)])\n# 6\n# >>> maxProduct([(1, 2), (2, 3), (3, 1), (4, 1), (1, 5), (2, 3), (1, 4), (5, 1), (2, 5), (1, 2), (5, 1), (1, 3), (2, 2), (5, 5)])\n# 6\n\n# Time:  O(n)\n# Space: O(n)\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple[int, int]]\n        :rtype: int\n        \"\"\"\n        if not nums: return 0\n        max_product = -1\n        for n, m in nums:\n            max_product = max(max_product, n * m)\n        return max_product"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import time\n\n\n# @include\ndef max_product(tuples):\n    res = 0\n    for t in tuples:\n        res = max(res, *t)\n    return res\n# @exclude\n\n\ndef max_product_iter(tuples):\n    res = 0\n    for t in tuples:\n        res = max(res, *t)\n    return res\n\n\ndef max_product_recursive(tuples):\n    res = 0\n    for t in tuples:\n        res = max(res, *t)\n        for x in t:\n            res = max(res, x * t[0])\n    return res\n\n\ndef max_product_naive(tuples):\n    res = 0\n    for t in tuples:\n        for x in t:\n            res = max(res, x * t[0])\n    return res\n\n\ndef max_product_dp(tuples):\n    res = 0\n    max_idx = 0\n    max_val = 0\n    for i in range(1, len(tuples)):\n        for j in range(i):\n            if tuples[i][j] > max_val:\n                max_val = tuples[i][j]\n                max_idx = j\n    res = max_val * tuples[0][max_idx]\n    return res\n\n\ndef main():\n    start = time.time()\n    tuples = [\n        (1, 2),\n        (3, 4),\n        (5, 6),\n        (7, 8),\n        (1, 7),\n        (2, 6),\n        (3, 5),\n        (4, 4),\n        (5, 3),\n        (6, 2),\n        (7, 1),\n        (8, 8),\n        (8, 7),\n        (8, 6),\n        (8, 5),\n        (8, 4),\n        (8, 3),\n        (8, 2),\n        (8, 1),\n        (8, 0),\n    ]\n    print(max_product_iter(tuples))\n    print(max_product_recursive(tuples))\n    print(max_"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/maximum-product-of-two-numbers/discuss/245985/Python-Python-Style-Code\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0]*nums[1], nums[1]*nums[0])\n        ans = nums[0]\n        for i in range(1, n):\n            ans = max(ans, nums[i]*nums[i-1])\n        return ans"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple[int, int]]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return max(nums)\n        ans = max(nums)\n        for i in xrange(1, n):\n            for j in xrange(i):\n                ans = max(ans, nums[i][0] * nums[j][0])\n        return ans"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums: return 0\n        max_product = -1\n        for i in xrange(len(nums)):\n            max_product = max(max_product, (nums[i] * nums[i+1]) if i+1 < len(nums) else nums[i])\n        return max_product"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        m = len(nums[0])\n        if n == 1:\n            return nums[0][0] * nums[0][1]\n        if m == 1:\n            return nums[0][0] * nums[1][0]\n        if n == 2:\n            return max(nums[0][0] * nums[0][1], nums[1][0] * nums[1][1])\n        ans = 0\n        for i in range(n):\n            for j in range(m):\n                if i == 0 or j == 0:\n                    ans = max(ans, nums[i][j] * nums[i + 1][j])\n                if i == n - 1:\n                    ans = max(ans, nums[i][j] * nums[i][j + 1])\n                if j == m - 1:\n                    ans = max(ans, nums[i][j] * nums[i][j])\n        return ans\n\n\n# Test Cases.\ndef test():\n    s = Solution()\n    print(s.maxProduct([(1, 2), (3, 4)]))\n    print(s.maxProduct([(1, 2), (3, 4), (1, 2)]))\n    print(s.maxProduct([(1, 2), (3, 4), (5, 6), (7, 8)]))\n    print(s.maxProduct([(1, 2), (3, 4), (5, 6), (7, 8), (1, 2)]))\n    print(s.maxProduct([(1, 2), (3, 4), (5, 6), (7, 8), (1, 2), (3, 4)]))\n\ntest()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\nclass Solution:\n    # @param {List[Tuple[int, int]]} matrix\n    # @return {int}\n\n    def maxProduct(self, matrix):\n        if not matrix:\n            return 0\n\n        m, n = len(matrix), len(matrix[0])\n\n        dp = [[0] * n for _ in range(m)]\n        max_prod = -1\n\n        for i in range(m):\n            for j in range(n):\n                if i > 0 and j > 0:\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n                    max_prod = max(max_prod, dp[i][j])\n\n        return max_prod\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProduct([(1, 2), (3, 4)]))\n    print(sol.maxProduct([(1, 2), (3, 4), (5, 6)]))\n    print(sol.maxProduct([(1, 1), (2, 2), (3, 3)]))\n    print(sol.maxProduct([(1, 2), (2, 3), (3, 4)]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Your code here\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        return max(self.maxProduct_helper(nums, 1, 0))\n\n    def maxProduct_helper(self, nums, prod, max_so_far):\n        if not nums:\n            return max_so_far\n\n        for i in range(len(nums)):\n            prod *= nums[i]\n            max_so_far = max(max_so_far, prod)\n\n        return max_so_far\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxProduct([2, 3, 1])\n    print s.maxProduct([3, 2, 1])\n    print s.maxProduct([3, 2, 2, 3, 2, 3])\n    print s.maxProduct([])\n    print s.maxProduct([1])"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import operator\n\ndef get_max_product(pairs):\n    \"\"\"\n    :type pairs: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(pairs)\n    max_product = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_product = max(max_product, pairs[i][0] * pairs[j][0])\n    return max_product\n\nif __name__ == \"__main__\":\n    pairs = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n    print(get_max_product(pairs))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# TODO:\n# - Implement a more efficient solution that uses a map.\n# - Implement a solution that is more efficient than the above.\n# - Test your solution.\n\ndef max_product(numbers):\n    \"\"\"\n    :type numbers: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    # TODO:\n    # - Implement a map that allows for in-place operations.\n    # - Implement a solution that is more efficient than the above.\n    # - Test your solution.\n    max_product = 0\n    max_product_map = {}\n    for i in range(len(numbers)):\n        if numbers[i][0] in max_product_map:\n            max_product = max(max_product, max_product_map[numbers[i][0]] * numbers[i][1])\n        else:\n            max_product = max(max_product, numbers[i][1] * numbers[i][0])\n            max_product_map[numbers[i][0]] = numbers[i][1]\n    return max_product\n\nif __name__ == '__main__':\n    assert(max_product([(1, 2), (2, 3), (3, 4)]) == 24)\n    assert(max_product([(1, 2), (2, 3), (3, 4), (4, 5)]) == 120)\n    assert(max_product([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 720)\n    assert(max_product([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == 5040)\n    assert(max_product([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == 40320)\n    assert(max_product([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == 362880)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 1\n\n    def __repr__(self):\n        return str(self.x) + ',' + str(self.y)\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 1\n\n        max_product = nums[0].x\n        for i in range(1, len(nums)):\n            max_product = max(max_product * nums[i].x, nums[i].x * nums[i].y)\n\n        return max_product"
    }
  ]
}