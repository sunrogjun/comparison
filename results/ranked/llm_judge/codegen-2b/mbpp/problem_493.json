{
  "timestamp": "2025-09-14T21:01:44.370418",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 493,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(1)\n    1\n    >>> cube_sum(2)\n    8\n    >>> cube_sum(3)\n    27\n    >>> cube_sum(4)\n    64\n    >>> cube_sum(5)\n    125\n    >>> cube_sum(6)\n    216\n    >>> cube_sum(7)\n    343\n    >>> cube_sum(8)\n    512\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import unittest\n\ndef sum_of_the_nth_cube(n):\n    return sum(n**3 for n in range(1,n+1))\n\nclass Test(unittest.TestCase):\n\n    def test_sum_of_the_nth_cube(self):\n        self.assertEqual(sum_of_the_nth_cube(1),1)\n        self.assertEqual(sum_of_the_nth_cube(2),8)\n        self.assertEqual(sum_of_the_nth_cube(3),27)\n        self.assertEqual(sum_of_the_nth_cube(4),64)\n        self.assertEqual(sum_of_the_nth_cube(5),243)\n        self.assertEqual(sum_of_the_nth_cube(6),1416)\n        self.assertEqual(sum_of_the_nth_cube(7),7864)\n        self.assertEqual(sum_of_the_nth_cube(8),41984)\n        self.assertEqual(sum_of_the_nth_cube(9),2432902008176640000)\n        self.assertEqual(sum_of_the_nth_cube(10),137438953472)\n        self.assertEqual(sum_of_the_nth_cube(11),87178787440)\n        self.assertEqual(sum_of_the_nth_cube(12),59502910148640)\n        self.assertEqual(sum_of_the_nth_cube(13),3585757458976)\n        self.assertEqual(sum_of_the_nth_cube(14),217839752035456)\n        self.assertEqual(sum_of_the_nth_cube(15),1455883749219120)\n        self.assertEqual(sum_of_the_nth_cube(16),8736252534407200)\n        self.assertEqual(sum_of_the_nth_cube(17),5523252253406112)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    return n**3\n\nif __name__ == '__main__':\n    print(cube_sum(5))\n    print(cube_sum(3))\n    print(cube_sum(0))\n    print(cube_sum(100))\n    print(cube_sum(10000))\n    print(cube_sum(1000000))\n    print(cube_sum(100000000))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(5)\n    120\n    \"\"\"\n    return reduce(lambda x,y: x*y, xrange(1,n+1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Write your code here\n\n# Note: The solution above is not an optimized one.\n# The code is simplified to make the test case pass.\n# Feel free to modify it.\n\ndef cube_sum(n):\n    if n <= 1:\n        return n\n    return cube_sum(n-1) + cube_sum(n-2) + cube_sum(n-3)\n\nif __name__ == '__main__':\n    print cube_sum(3)\n    print cube_sum(4)\n    print cube_sum(5)\n    print cube_sum(6)\n    print cube_sum(7)\n    print cube_sum(8)\n    print cube_sum(9)\n    print cube_sum(10)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    '''\n    >>> cube_sum(0)\n    0\n    >>> cube_sum(1)\n    1\n    >>> cube_sum(2)\n    3\n    >>> cube_sum(3)\n    8\n    >>> cube_sum(4)\n    27\n    >>> cube_sum(5)\n    128\n    >>> cube_sum(6)\n    512\n    '''\n    return sum(i**3 for i in range(n+1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    return sum(1 for i in range(1, n+1))**3\n\nif __name__ == '__main__':\n    print cube_sum(4)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sum_of_cube_numbers(n):\n    numbers = [0] * n\n    sum_of_numbers = 0\n\n    for i in range(n):\n        for j in range(i+1):\n            numbers[j] = numbers[j] * (j+1)\n        sum_of_numbers += numbers[i]\n\n    return sum_of_numbers\n\n\nif __name__ == '__main__':\n    n = int(input('Enter the number of natural numbers: '))\n    print('The sum of the cubes of the first'+ str(n) +'natural numbers is:'+ str(sum_of_cube_numbers(n)))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    Find the cube sum of first n natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result\n\nif __name__ == '__main__':\n    assert cube_sum(3) == 36\n    assert cube_sum(4) == 64\n    assert cube_sum(5) == 100\n    assert cube_sum(6) == 144\n    assert cube_sum(7) == 200\n    assert cube_sum(8) == 256\n    assert cube_sum(9) == 324\n    assert cube_sum(10) == 400\n    assert cube_sum(11) == 448\n    assert cube_sum(12) == 512\n    assert cube_sum(13) == 576\n    assert cube_sum(14) == 640\n    assert cube_sum(15) == 768\n    assert cube_sum(16) == 832\n    assert cube_sum(17) == 896\n    assert cube_sum(18) == 960\n    assert cube_sum(19) == 1024\n    assert cube_sum(20) == 1088\n    assert cube_sum(21) == 1152\n    assert cube_sum(22) == 1216\n    assert cube_sum(23) == 1280\n    assert cube_sum(24) == 1344\n    assert cube_sum(25) == 1408\n    assert cube_sum(26) == 1472\n    assert cube_sum(27) == 1536\n    assert cube_sum(28) == 1600\n    assert cube_sum(29) == 1664\n    assert cube_sum(30) == 1728\n    assert cube_sum(31) == 1792\n    assert cube_sum(32) == 1856\n    assert cube_sum(33) == 1920\n    assert cube_sum(34) == 1984\n    assert cube_sum(35) == 2048\n    assert cube_sum(36) == 2112"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def cube(n):\n    \"\"\"\n    Return the cube of n.\n    \"\"\"\n    return n ** 3\n\ndef test_cube():\n    \"\"\"\n    Test cube() function with some numbers.\n    \"\"\"\n    assert cube(1) == 1\n    assert cube(2) == 8\n    assert cube(3) == 27\n    assert cube(4) == 64\n    assert cube(5) == 125\n    assert cube(6) == 216\n    assert cube(7) == 343\n    assert cube(8) == 512\n    assert cube(9) == 729\n\ndef test_cube_n(n):\n    \"\"\"\n    Test cube() function with n.\n    \"\"\"\n    assert cube(n) == n ** 3\n\nif __name__ == \"__main__\":\n    test_cube()\n    test_cube_n(1)\n    test_cube_n(2)\n    test_cube_n(3)\n    test_cube_n(4)\n    test_cube_n(5)\n    test_cube_n(6)\n    test_cube_n(7)\n    test_cube_n(8)\n    test_cube_n(9)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(1)\n    1\n    >>> cube_sum(2)\n    8\n    >>> cube_sum(3)\n    27\n    >>> cube_sum(4)\n    64\n    >>> cube_sum(5)\n    125\n    >>> cube_sum(6)\n    216\n    >>> cube_sum(7)\n    343\n    >>> cube_sum(8)\n    512\n    >>> cube_sum(9)\n    729\n    >>> cube_sum(10)\n    1000\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        s += i**3\n    return s\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total\n\nif __name__ == \"__main__\":\n    print(cube_sum(4))\n    print(cube_sum(3))\n    print(cube_sum(0))\n    print(cube_sum(1))\n    print(cube_sum(2))\n    print(cube_sum(3))\n    print(cube_sum(4))\n    print(cube_sum(5))\n    print(cube_sum(6))\n    print(cube_sum(7))\n    print(cube_sum(8))\n    print(cube_sum(9))\n    print(cube_sum(10))\n    print(cube_sum(11))\n    print(cube_sum(12))\n    print(cube_sum(13))\n    print(cube_sum(14))\n    print(cube_sum(15))\n    print(cube_sum(16))\n    print(cube_sum(17))\n    print(cube_sum(18))\n    print(cube_sum(19))\n    print(cube_sum(20))\n    print(cube_sum(21))\n    print(cube_sum(22))\n    print(cube_sum(23))\n    print(cube_sum(24))\n    print(cube_sum(25))\n    print(cube_sum(26))\n    print(cube_sum(27))\n    print(cube_sum(28))\n    print(cube_sum(29))\n    print(cube_sum(30))\n    print(cube_sum(31))\n    print(cube_sum(32))\n    print(cube_sum(33))\n    print(cube_sum(34))\n    print(cube_sum(35))\n    print(cube_sum(36))\n    print(cube_sum(37))\n    print(cube_sum(38))\n    print(cube_sum(39))\n    print(cube_sum(40))\n    print(cube_sum(41))\n    print(cube_sum(42))\n    print(cube_sum(43))\n    print"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    return n*(n+1)*(2*n+1)\n\nprint(cube_sum(5))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Jan 11 14:07:09 2016\n\n@author: wang\n\"\"\"\n\ndef find_cube_sum(n):\n    nums = []\n    for i in range(n):\n        nums.append(i)\n    nums.append(0)\n    return sum(map(lambda x: x**3, nums))\n\nprint(find_cube_sum(5))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def cube(n):\n    \"\"\"\n    >>> cube(5)\n    120\n    >>> cube(6)\n    720\n    >>> cube(7)\n    5040\n    >>> cube(8)\n    40320\n    >>> cube(9)\n    362880\n    >>> cube(10)\n    3628800\n    >>> cube(11)\n    39916800\n    >>> cube(12)\n    479001600\n    \"\"\"\n    if n == 0:\n        return 0\n    return cube(n-1) + cube(n-2) + cube(n-3)\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Write your code here.\n# DO NOT write an if statement, a while loop, or anything else that\n# changes the value of the variable.\n# The sum should be printed on the screen.\n# Please read the code carefully to make sure you are not making any\n# changes to the variable or function names.\n\ndef cube_sum(n):\n    '''\n    n is the number of natural numbers to sum\n    '''\n    return sum(1 + i for i in range(n))\n\n# print cube_sum(3)\n\n# print cube_sum(5)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# n = 3\n# expected output = 4\ndef cube_sum(n):\n    result = 0\n    for i in range(n):\n        result = result * (i+1)\n    return result\n\n# n = 5\n# expected output = 15\ndef cube_sum(n):\n    result = 0\n    for i in range(n):\n        result = result * (i+1)\n    return result\n\n# n = 7\n# expected output = 42\ndef cube_sum(n):\n    result = 0\n    for i in range(n):\n        result = result * (i+1)\n    return result\n\n# n = 9\n# expected output = 558\ndef cube_sum(n):\n    result = 0\n    for i in range(n):\n        result = result * (i+1)\n    return result\n\nif __name__ == '__main__':\n    print cube_sum(3)\n    print cube_sum(5)\n    print cube_sum(7)\n    print cube_sum(9)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n natural numbers.\n    \"\"\"\n    s = 0\n    for i in range(1, n + 1):\n        s += i ** 3\n    return s\n\n\nif __name__ == '__main__':\n    print(cube_sum(3))\n    print(cube_sum(4))\n    print(cube_sum(5))\n    print(cube_sum(6))\n    print(cube_sum(7))\n    print(cube_sum(8))\n    print(cube_sum(9))\n    print(cube_sum(10))\n    print(cube_sum(11))\n    print(cube_sum(12))\n    print(cube_sum(13))\n    print(cube_sum(14))\n    print(cube_sum(15))\n    print(cube_sum(16))\n    print(cube_sum(17))\n    print(cube_sum(18))\n    print(cube_sum(19))\n    print(cube_sum(20))\n    print(cube_sum(21))\n    print(cube_sum(22))\n    print(cube_sum(23))\n    print(cube_sum(24))\n    print(cube_sum(25))\n    print(cube_sum(26))\n    print(cube_sum(27))\n    print(cube_sum(28))\n    print(cube_sum(29))\n    print(cube_sum(30))\n    print(cube_sum(31))\n    print(cube_sum(32))\n    print(cube_sum(33))\n    print(cube_sum(34))\n    print(cube_sum(35))\n    print(cube_sum(36))\n    print(cube_sum(37))\n    print(cube_sum(38))\n    print(cube_sum(39))\n    print(cube_sum(40))\n    print(cube_sum(41))\n    print(cube_sum(42))\n    print(cube_sum(43))\n    print(cube_sum(44))\n    print(cube_sum(45))\n    print(cube_sum(46))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef cube_sum(n):\n    \"\"\"\n    Return the cube sum of first n natural numbers.\n\n    >>> cube_sum(1)\n    1\n    >>> cube_sum(2)\n    4\n    >>> cube_sum(3)\n    9\n    >>> cube_sum(4)\n    16\n    >>> cube_sum(5)\n    25\n    \"\"\"\n    return sum([i * i for i in range(1, n + 1)])\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def cube(n):\n    \"\"\"\n    Write a function to calculate the cube of a number.\n    \"\"\"\n    return n ** 3\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Test case 1\n    assert(cube(1) == 1)\n    assert(cube(2) == 8)\n    assert(cube(3) == 27)\n    assert(cube(4) == 64)\n    assert(cube(5) == 225)\n\n    # Test case 2\n    assert(cube(6) == 216)\n    assert(cube(7) == 343)\n    assert(cube(8) == 512)\n    assert(cube(9) == 729)\n    assert(cube(10) == 1296)\n\n    # Test case 3\n    assert(cube(11) == 3024)\n    assert(cube(12) == 4320)\n    assert(cube(13) == 6144)\n    assert(cube(14) == 9216)\n    assert(cube(15) == 13056)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(1)\n    1\n    >>> cube_sum(2)\n    3\n    >>> cube_sum(3)\n    9\n    >>> cube_sum(4)\n    27\n    >>> cube_sum(5)\n    65\n    >>> cube_sum(6)\n    243\n    >>> cube_sum(7)\n    729\n    >>> cube_sum(8)\n    3135\n    >>> cube_sum(9)\n    4095\n    \"\"\"\n\n    # return n * (n + 1) / 2\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(0)\n    0\n    >>> cube_sum(1)\n    1\n    >>> cube_sum(2)\n    8\n    >>> cube_sum(3)\n    27\n    >>> cube_sum(4)\n    64\n    \"\"\"\n    return sum([i**3 for i in range(n+1)])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    return n * (n + 1) * (n + 2)\n\nif __name__ == '__main__':\n    print(cube_sum(2))\n    print(cube_sum(3))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    Return the cube sum of first n natural numbers.\n    \"\"\"\n    s = 1\n    for i in range(1, n + 1):\n        s = s * i\n    return s\n\n# Write your code here"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    return sum(i**3 for i in range(n+1))\n\nprint cube_sum(10)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(1)\n    0\n    >>> cube_sum(2)\n    3\n    >>> cube_sum(3)\n    9\n    >>> cube_sum(4)\n    27\n    >>> cube_sum(5)\n    65\n    >>> cube_sum(6)\n    243\n    >>> cube_sum(7)\n    729\n    >>> cube_sum(8)\n    3291\n    >>> cube_sum(9)\n    10787\n    >>> cube_sum(10)\n    63676\n    >>> cube_sum(11)\n    117037\n    \"\"\"\n    return sum(i ** 3 for i in range(1, n + 1))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum\n\nprint cube_sum(10)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def sum_n_cube(n):\n    sum_n_cube = 0\n    for i in range(1, n + 1):\n        sum_n_cube += i ** 3\n    return sum_n_cube\n\nif __name__ == '__main__':\n    print(sum_n_cube(3))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\n#\n# This file is part of the SoftLayer API client library, and is only\n# intended to be used for developing locally to the Cloud.\n#\n# Please note, that you must add your API key to the SoftLayer API\n# configuration file before using this file, in order for the API to\n# fetch the required information from the SoftLayer API.\n#\n# For more information please visit: http://www.softlayer.com/docs/\n#\n# Copyright (c) 2012 SoftLayer Technologies, Inc. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice,\n# this list of conditions and the following disclaimer.\n#\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n# this list of conditions and the following disclaimer in the documentation\n# and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n#\n\n\nimport SoftLayer\nimport time\nimport sys\n\n#\n# The following code is a placeholder"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(5)\n    60\n    >>> cube_sum(4)\n    16\n    >>> cube_sum(3)\n    15\n    >>> cube_sum(2)\n    12\n    >>> cube_sum(1)\n    10\n    >>> cube_sum(0)\n    1\n    >>> cube_sum(10)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def cube(n):\n    \"\"\"\n    Return the cube of the first n natural numbers.\n    \"\"\"\n    return reduce(lambda x, y: x*y, range(1, n+1))\n\ndef cube_sum(n):\n    \"\"\"\n    Return the cube sum of first n natural numbers.\n    \"\"\"\n    return reduce(lambda x, y: x+y, range(1, n+1))\n\nif __name__ == '__main__':\n    \"\"\"\n    >>> cube_sum(2)\n    24\n    >>> cube_sum(3)\n    27\n    >>> cube_sum(4)\n    64\n    >>> cube_sum(5)\n    125\n    >>> cube_sum(6)\n    216\n    >>> cube_sum(7)\n    343\n    >>> cube_sum(8)\n    512\n    >>> cube_sum(9)\n    729\n    >>> cube_sum(10)\n    1000\n    \"\"\"\n    print(cube(10))"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "def sum_of_cube(n):\n    \"\"\"\n    Sum of Cube\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum * i\n    return sum\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    n = int(input(\"Enter the number of natural numbers: \"))\n    print(\"The sum of the cubes of the natural numbers is: \" + str(sum_of_cube(n)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 9.0,
      "candidate": "def cube(n):\n    return n**3\n\ndef cube_sum(n):\n    return sum(cube(i) for i in range(n))\n\nif __name__ == '__main__':\n    print(cube_sum(3))"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "import math\n\ndef cube_sum(n):\n    \"\"\"\n    >>> cube_sum(2)\n    4\n    >>> cube_sum(3)\n    27\n    \"\"\"\n    return sum(map(lambda x: cube_sum(x), range(1, n+1)))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "def cube_sum(n):\n    s = 0\n    for i in range(n):\n        s += i**3\n    return s\n\nif __name__ == '__main__':\n    print(cube_sum(3))\n    print(cube_sum(10))"
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "from math import pow\n\ndef cube_sum(n):\n    return (pow(n, 3) - pow(n, 2)) * (n * n * n)\n\nif __name__ == '__main__':\n    print(cube_sum(5))"
    },
    {
      "rank": 37,
      "score": 9.0,
      "candidate": "def sum_of_n_cube(n):\n    \"\"\"\n    >>> sum_of_n_cube(4)\n    64\n    \"\"\"\n    return reduce(lambda x, y: x + y ** 3, range(1, n + 1), 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    n: an integer\n    returns: an integer\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nif __name__ == '__main__':\n    print cube_sum(100)"
    },
    {
      "rank": 39,
      "score": 9.0,
      "candidate": "import math\n\ndef cube_sum(n):\n    \"\"\"\n    n: integer\n    \"\"\"\n    return (math.factorial(n) ** 3)\n\nif __name__ == '__main__':\n    print(cube_sum(2))\n    print(cube_sum(3))\n    print(cube_sum(4))\n    print(cube_sum(5))\n    print(cube_sum(6))\n    print(cube_sum(7))"
    },
    {
      "rank": 40,
      "score": 9.0,
      "candidate": "import math\n\ndef cube_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + math.pow(i, 3)\n    return sum\n\nprint(cube_sum(5))\nprint(cube_sum(10))"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "import math\n\ndef cube_sum(n):\n    return sum(map(lambda x: x*x*x, range(1, n+1)))\n\nprint cube_sum(5)"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "def cube_sum(n):\n    return sum([i**3 for i in range(1, n + 1)])\n\nprint cube_sum(10)"
    },
    {
      "rank": 43,
      "score": 9.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(10)\n    2754\n    \"\"\"\n    return reduce(lambda x, y: x + y ** 3, xrange(1, n + 1))"
    },
    {
      "rank": 44,
      "score": 9.0,
      "candidate": "def cube_sum(n):\n    return sum(map(lambda x: x*x*x, range(1, n+1)))\n\ndef main():\n    print(cube_sum(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n natural numbers.\n    \"\"\"\n    s = 1\n    for i in range(1, n+1):\n        s *= i\n    return s\n\nif __name__ == \"__main__\":\n    print cube_sum(5)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    return reduce(lambda x, y: x * y * y * y, range(1, n + 1), 1)\n\nprint cube_sum(3)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def sum_of_n_natural_numbers(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nprint sum_of_n_natural_numbers(3)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(1)\n    3\n    >>> cube_sum(2)\n    9\n    >>> cube_sum(3)\n    27\n    >>> cube_sum(4)\n    243\n    >>> cube_sum(5)\n    729\n    \"\"\"\n    return reduce(lambda x, y: x * y, range(1, n + 1))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def cube(n):\n    \"\"\"\n    >>> cube(3)\n    12\n    >>> cube(4)\n    64\n    >>> cube(5)\n    2592\n    >>> cube(6)\n    12704\n    \"\"\"\n    return sum(map(lambda x: x * x, range(1, n+1)))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from itertools import count\n\ndef cube(n):\n    return sum(i ** 3 for i in range(n))\n\ndef cube_sum(n):\n    return sum(cube(i) for i in count(1, n))\n\nprint(cube_sum(5))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(1)\n    3\n    >>> cube_sum(2)\n    9\n    >>> cube_sum(3)\n    27\n    >>> cube_sum(4)\n    243\n    \"\"\"\n    return sum(range(n)) ** 3\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sum_of_first_n_naturals(n):\n  naturals = [0] * n\n  for i in range(1, n+1):\n    naturals[i-1] = i\n  return sum(naturals)\n\nprint(sum_of_first_n_naturals(5))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "# A simple function to sum all the numbers from 1 to n\ndef sum_of_first_n_naturals(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n\n# The problem is to find the sum of the first n natural numbers.\n# Note that the solution should be independent of the input\n# so we can start with a random number and keep adding numbers\n# until the sum is the same as the input.\n# We can then test if the sum is the same and if it is, we know\n# we have the correct answer.\n\n# We can also test if the sum is the same with a different function\n# which is not dependent on the input.\n\n# The correct solution is:\n# sum_of_first_n_naturals(100) == sum_of_first_n_naturals(100)\n\n# Test with 100:\nassert sum_of_first_n_naturals(100) == sum_of_first_n_naturals(100)\n\n# Test with 10:\nassert sum_of_first_n_naturals(10) == sum_of_first_n_naturals(10)\n\n# Test with 1:\nassert sum_of_first_n_naturals(1) == sum_of_first_n_naturals(1)\n\n# Test with 0:\nassert sum_of_first_n_naturals(0) == sum_of_first_n_naturals(0)\n\n# Test with -1:\nassert sum_of_first_n_naturals(-1) == sum_of_first_n_naturals(-1)\n\n# Test with -100:\nassert sum_of_first_n_naturals(-100) == sum_of_first_n_naturals(-100)\n\n# Test with -100:\nassert sum_of_first_n_naturals(-100) == sum_of_first_n_naturals(-100)\n\n# Test with -10:\nassert sum_of_first_n_naturals(-10) == sum_of_first_n_naturals(-10"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "# import time\n\ndef find_cube_sum(n):\n    \"\"\"\n    Return the cube sum of n natural numbers.\n\n    >>> find_cube_sum(5)\n    210\n    >>> find_cube_sum(10)\n    40320\n    >>> find_cube_sum(15)\n    15240\n    >>> find_cube_sum(16)\n    8128\n    >>> find_cube_sum(17)\n    1025\n    >>> find_cube_sum(18)\n    1296\n    >>> find_cube_sum(19)\n    1920\n    \"\"\"\n\n    # print(time.time())\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i * (i+1) * (i+2)\n\n    return sum\n\nif __name__ == '__main__':\n    print(find_cube_sum(5))\n    print(find_cube_sum(10))\n    print(find_cube_sum(15))\n    print(find_cube_sum(16))\n    print(find_cube_sum(17))\n    print(find_cube_sum(18))\n    print(find_cube_sum(19))\n    # print(time.time() - start)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(10)\n    55\n    >>> cube_sum(20)\n    1110\n    >>> cube_sum(30)\n    1555\n    >>> cube_sum(40)\n    2155\n    \"\"\"\n    return sum(range(n)) ** 3\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport timeit\n\ndef cube_sum(n):\n    return sum(map(lambda x: x**3, range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    t = timeit.Timer(\"cube_sum(100000)\")\n    print(\"cube sum: %s\" % t.timeit(1))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\ndef cube(n):\n    return sum(i ** 3 for i in range(n))\n\nprint(cube(5))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import time\n\n\ndef sum_of_cube(n):\n    result = 0\n    for i in range(1, n + 1):\n        result = result * i\n    return result\n\n\nif __name__ == \"__main__\":\n    t1 = time.time()\n    print(sum_of_cube(20))\n    t2 = time.time()\n    print(t2 - t1)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    n - number of numbers\n    \"\"\"\n    total = 1\n    for i in range(1, n + 1):\n        total *= i\n    return total\n\n\nif __name__ == \"__main__\":\n    print(cube_sum(10))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import math\n\n\ndef cube_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n\n\nif __name__ == '__main__':\n    assert(cube_sum(5) == 55)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def cube(n):\n    s = 1\n    for i in range(1, n):\n        s = s * i\n    return s\n\ndef main():\n    print(cube(3))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(1)\n    3\n    >>> cube_sum(2)\n    9\n    >>> cube_sum(3)\n    27\n    >>> cube_sum(4)\n    243\n    \"\"\"\n    return sum(n*n*n for n in range(1, n+1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    return sum(map(lambda x: x * x * x, range(1, n + 1)))\n\nprint cube_sum(3)\n\n\"\"\"\nOutput:\n\n>>> cube_sum(3)\n27\n\"\"\""
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sum_cube(n):\n    \"\"\"\n    >>> sum_cube(3)\n    7\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result = result * i\n    return result\n\ndef main():\n    \"\"\"\n    >>> sum_cube(3)\n    7\n    \"\"\"\n    result = 1\n    for i in range(1, 10):\n        result = result * i\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sum_cube(n):\n    return sum(i ** 3 for i in range(n))\n\n\nif __name__ == '__main__':\n    print(sum_cube(10))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "# 1. A function\n# n = 5\n# sum(1, n) = 10\n\n# 2. A class\n# class A:\n#     def __init__(self, val):\n#         self.val = val\n#     def get_val(self):\n#         return self.val\n# sum(A(1), n) = 10\n\n# 3. A method\n# class A:\n#     def __init__(self, val):\n#         self.val = val\n#     def get_val(self):\n#         return self.val\n#     def sum(self, n):\n#         return sum(self.val, n)\n# sum(A(1), n) = 10\n\n\n# 4. A class\n# class A:\n#     def __init__(self, val):\n#         self.val = val\n#     def get_val(self):\n#         return self.val\n# sum(A(1), n) = 10\n\n# 5. A method\n# class A:\n#     def __init__(self, val):\n#         self.val = val\n#     def get_val(self):\n#         return self.val\n#     def sum(self, n):\n#         return sum(self.val, n)\n\n\n# 6. A function\n# def sum(n):\n#     return sum(1, n)\n\n\n# 7. A class\n# class A:\n#     def __init__(self, val):\n#         self.val = val\n#     def get_val(self):\n#         return self.val\n# sum(A(1), n) = 10\n\n\n# 8. A method\n# class A:\n#     def __init__(self, val):\n#         self.val = val\n#     def get_val(self):\n#         return self.val\n#     def sum(self, n):\n#         return sum(self.val, n)\n\n\n# 9. A class\n# class A:\n#     def __init__(self, val):\n#         self.val = val\n#     def get_val(self):\n#         return self.val\n# sum(A(1), n)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def cube(n):\n    \"\"\"\n    @return: the cube sum of first n natural numbers\n    @rtype: int\n    \"\"\"\n    return sum(range(1, n + 1)) ** 3\n\nif __name__ == \"__main__\":\n    print cube(5)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import math\n\ndef cube_sum(n):\n    \"\"\"\n    >>> cube_sum(5)\n    125\n    >>> cube_sum(3)\n    36\n    \"\"\"\n    return reduce(lambda x, y: x * y, range(1, n + 1), 1)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    return sum(1 for i in range(n))\n\nprint(cube_sum(10))\n\n\"\"\"\nOutput:\n\n>>> cube_sum(10)\n45\n\"\"\""
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\ndef main():\n    print(\"cube_sum(10):\", cube_sum(10))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\ndef cube_sum(n):\n    \"\"\"\n    >>> cube_sum(5)\n    25\n    \"\"\"\n    return math.factorial(n)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "import math\n\ndef sum_of_n_naturals(n):\n    # http://stackoverflow.com/a/20782768/3616094\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + math.factorial(i)\n    return sum\n\ndef main():\n    n = int(input())\n    sum = sum_of_n_naturals(n)\n    print(sum)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(5)\n    50\n    >>> cube_sum(10)\n    55\n    >>> cube_sum(100)\n    10100\n    >>> cube_sum(101)\n    104\n    \"\"\"\n    return n * (n ** 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def nth_cube_sum(n):\n    \"\"\"\n    nth_cube_sum(n)\n\n    Compute the cube sum of first n natural numbers.\n    \"\"\"\n\n    result = 1\n\n    for i in range(1, n + 1):\n        result = (result * i)\n\n    return result\n\nif __name__ == '__main__':\n    print nth_cube_sum(5)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(3)\n    9\n    \"\"\"\n    a = 1\n    for i in range(1, n):\n        a = a * i\n    return a\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import sys\n\nif len(sys.argv)!= 2:\n    print \"Usage: {} n\".format(sys.argv[0])\n    exit(1)\n\nn = int(sys.argv[1])\n\ndef sum_cube(n):\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) / 6\n\nprint \"The cube sum of {} natural numbers is {}\".format(n, sum_cube(n))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(1)\n    1\n    >>> cube_sum(2)\n    8\n    >>> cube_sum(3)\n    27\n    >>> cube_sum(4)\n    64\n    >>> cube_sum(5)\n    125\n    >>> cube_sum(6)\n    216\n    >>> cube_sum(7)\n    343\n    >>> cube_sum(8)\n    512\n    >>> cube_sum(9)\n    729\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be positive\")\n    if n == 1:\n        return 1\n    return (n * (n + 1)) / 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(10)\n    2560\n    >>> cube_sum(5)\n    40320\n    >>> cube_sum(0)\n    0\n    >>> cube_sum(1)\n    1\n    >>> cube_sum(2)\n    4\n    >>> cube_sum(3)\n    9\n    >>> cube_sum(4)\n    16\n    \"\"\"\n    if n == 0:\n        return 0\n    return sum(map(lambda x: x**3, range(n)))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "import math\n\ndef sum_of_first_n_naturals(n):\n    return sum(math.factorial(x) for x in range(1, n+1))\n\nif __name__ == \"__main__\":\n    print sum_of_first_n_naturals(10)"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def cube(n):\n    return n * n * n\n\nif __name__ == '__main__':\n    print(cube(3))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(3)\n    36\n    >>> cube_sum(4)\n    64\n    \"\"\"\n    return reduce(lambda x, y: x * y, range(1, n + 1))\n\nif __name__ == '__main__':\n    print(cube_sum(3))\n    print(cube_sum(4))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    :param n: the number of natural numbers to sum\n    :return: the cube sum\n    \"\"\"\n    return sum(map(lambda x: x ** 3, range(1, n + 1)))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def cube(n):\n    \"\"\"\n    >>> cube(10)\n    5040\n    >>> cube(3)\n    30\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(5)\n    120\n    >>> cube_sum(6)\n    1260\n    >>> cube_sum(9)\n    12900\n    >>> cube_sum(10)\n    243240\n    >>> cube_sum(11)\n    459400\n    \"\"\"\n    return sum(x * x * x for x in range(1, n + 1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(2)\n    24\n    >>> cube_sum(3)\n    168\n    >>> cube_sum(4)\n    1296\n    >>> cube_sum(5)\n    10752\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += i * (i + 1) * (i + 2)\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    cube_sum(n) -> sum of first n natural numbers\n    >>> cube_sum(3)\n    120\n    \"\"\"\n    return sum(x**3 for x in range(1, n+1))\n\nprint cube_sum(3)"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "import math\n\ndef cube(n):\n    return n*(n+1)*(n+2)/6\n\ndef sum_cube(n):\n    return sum(cube(i) for i in range(1, n+1))\n\nif __name__ == \"__main__\":\n    print(sum_cube(2))\n    print(sum_cube(3))\n    print(sum_cube(4))\n    print(sum_cube(5))\n    print(sum_cube(6))\n    print(sum_cube(7))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    # YOUR CODE HERE\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n    return sum_cube\n\nprint cube_sum(10)"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    Return the cube sum of the first n natural numbers.\n    \"\"\"\n    return sum(i * i * i for i in range(1, n + 1))\n\n\nprint(cube_sum(2))\n#>>> 48\nprint(cube_sum(3))\n#>>> 825\nprint(cube_sum(4))\n#>>> 178875"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def sum_n(n):\n    \"\"\"\n    >>> sum_n(5)\n    25\n    >>> sum_n(10)\n    525\n    \"\"\"\n    numbers = range(1, n+1)\n    return sum(numbers)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "import math\n\n\ndef cube(n):\n    \"\"\"\n    Calculate the cube of a given number.\n    \"\"\"\n    return math.pow(n, 3)\n\n\ndef nth_cube(n):\n    \"\"\"\n    Calculate the nth cube of a given number.\n    \"\"\"\n    return cube(n) * cube(n) * cube(n)\n\n\ndef cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += nth_cube(i)\n    return sum\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(cube_sum(10))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "# import the timeit module and print the time it took to run the test\n# function\nimport timeit\n\n# define the function\ndef sum_cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum\n\n# get the time it took to run the test function\nprint \"The time to run the test function was:\",\nprint timeit.timeit(stmt='sum_cube(5)', setup='from __main__ import sum_cube', number=1000)\n\n# print the answer\nprint \"The answer is:\",\nprint sum_cube(5)"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def cube_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum\n\nprint(cube_sum(1))\nprint(cube_sum(2))\nprint(cube_sum(3))\nprint(cube_sum(4))\nprint(cube_sum(5))\nprint(cube_sum(6))\nprint(cube_sum(7))\nprint(cube_sum(8))\nprint(cube_sum(9))\nprint(cube_sum(10))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def find_cube(n):\n    \"\"\"\n    Find the cube sum of first n natural numbers.\n    >>> find_cube(5)\n    15\n    >>> find_cube(3)\n    18\n    >>> find_cube(4)\n    28\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**3\n    return sum\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def cube_sum(n):\n    return sum(x**3 for x in range(1, n + 1))\n\n# Write a function to find the sum of the first n natural numbers\n# that are cube sum of each other.\ndef cube_sum_recursive(n):\n    return sum(cube_sum_recursive(x) for x in range(1, n + 1))\n\n# Write a function to find the sum of the first n natural numbers\n# that are cube sum of each other.\ndef cube_sum_iterative(n):\n    return sum(cube_sum_iterative(x) for x in range(1, n + 1))\n\n# Write a function to find the sum of the first n natural numbers\n# that are cube sum of each other.\ndef cube_sum_dp(n):\n    return sum(cube_sum_dp(x) for x in range(1, n + 1))\n\n# Write a function to find the sum of the first n natural numbers\n# that are cube sum of each other.\ndef cube_sum_dp_iterative(n):\n    return sum(cube_sum_dp_iterative(x) for x in range(1, n + 1))\n\n# Write a function to find the sum of the first n natural numbers\n# that are cube sum of each other.\ndef cube_sum_dp_recursive(n):\n    return sum(cube_sum_dp_recursive(x) for x in range(1, n + 1))\n\n# Write a function to find the sum of the first n natural numbers\n# that are cube sum of each other.\ndef cube_sum_dp_iterative_recursive(n):\n    return sum(cube_sum_dp_iterative_recursive(x) for x in range(1, n + 1))\n\n# Write a function to find the sum of the first n natural numbers\n# that are cube sum of each other.\ndef cube_sum_dp_recursive_iterative(n):\n    return sum(cube_sum_dp_recursive_iterative(x) for x in range(1, n + 1))\n\n# Write a function to find the sum of the first n natural numbers\n# that are cube sum of each other."
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def cube_sum(n):\n    return sum(x ** 3 for x in range(n))\n\nif __name__ == '__main__':\n    print(cube_sum(1))\n    print(cube_sum(10))\n    print(cube_sum(100))\n    print(cube_sum(1000))\n    print(cube_sum(10000))\n    print(cube_sum(100000))\n    print(cube_sum(1000000))\n    print(cube_sum(1000000000))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def cube(n):\n    \"\"\"\n    n-th cube of a number\n    \"\"\"\n    return n ** 3\n\nprint(cube(1))\n\ndef n_cube(n):\n    \"\"\"\n    n-th cube of a number\n    \"\"\"\n    return cube(n) ** 3\n\nprint(n_cube(1))\n\ndef n_cube_sum(n):\n    \"\"\"\n    n-th cube sum of a number\n    \"\"\"\n    return cube(n) * (n + 1) * (n + 2) / 6\n\nprint(n_cube_sum(1))\n\ndef n_cube_sum_rec(n):\n    \"\"\"\n    n-th cube sum of a number\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n_cube_sum_rec(n - 1) + n_cube_sum_rec(n - 2)\n\nprint(n_cube_sum_rec(1))\n\ndef n_cube_sum_rec_2(n):\n    \"\"\"\n    n-th cube sum of a number\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n_cube_sum_rec_2(n - 1) + n_cube_sum_rec_2(n - 2)\n\nprint(n_cube_sum_rec_2(1))\n\ndef n_cube_sum_rec_3(n):\n    \"\"\"\n    n-th cube sum of a number\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n_cube_sum_rec_3(n - 1) + n_cube_sum_rec_3(n - 2)\n\nprint(n_cube_sum_rec_3(1))\n\ndef n_cube_sum_rec_4(n):\n    \"\"\"\n    n-th cube sum of a number\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n_cube_sum_rec_4(n - 1) + n_cube_sum_rec_4(n - 2)\n\nprint(n_cube_sum_rec_4(1))\n\ndef n_cube"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    >>> cube_sum(1)\n    1\n    >>> cube_sum(2)\n    8\n    >>> cube_sum(3)\n    27\n    >>> cube_sum(4)\n    64\n    >>> cube_sum(5)\n    243\n    >>> cube_sum(6)\n    1,024\n    >>> cube_sum(7)\n    1,648\n    >>> cube_sum(8)\n    2,097,200\n    >>> cube_sum(9)\n    2,623,880\n    >>> cube_sum(10)\n    3,932,825\n    >>> cube_sum(11)\n    4,062,880\n    >>> cube_sum(12)\n    5,017,728\n    >>> cube_sum(13)\n    5,874,880\n    >>> cube_sum(14)\n    6,247,600\n    >>> cube_sum(15)\n    6,938,200\n    >>> cube_sum(16)\n    7,561,840\n    >>> cube_sum(17)\n    8,163,200\n    >>> cube_sum(18)\n    9,628,800\n    >>> cube_sum(19)\n    10,243,200\n    \"\"\"\n    # TODO: add proper solution\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def get_cube_sum(n):\n    return sum(map(lambda x: x*x*x, range(1, n+1)))\n\nprint get_cube_sum(1)\nprint get_cube_sum(2)\nprint get_cube_sum(3)\nprint get_cube_sum(4)\nprint get_cube_sum(5)\nprint get_cube_sum(6)\nprint get_cube_sum(7)\nprint get_cube_sum(8)\nprint get_cube_sum(9)\nprint get_cube_sum(10)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def cube_sum(n):\n    \"\"\"\n    :param n: an integer\n    :return: the sum of the first n natural numbers.\n    \"\"\"\n    return sum(range(1, n + 1)) ** 3\n\n# Your CubeSum function should return the correct sum.\nprint(cube_sum(3))"
    }
  ]
}