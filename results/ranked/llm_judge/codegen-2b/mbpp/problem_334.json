{
  "timestamp": "2025-09-14T19:50:59.106355",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 334,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0):\n#         self.val = val\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a integer\n    def getDifference(self, head):\n        if not head:\n            return 0\n        if not head.next:\n            return head.val\n        diff = head.next.val - head.val\n        return self.getDifference(head.next.next) + diff\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    print Solution().getDifference(head)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/find-difference-between-two-numbers-in-a-linked-list/\n\n\nclass Solution(object):\n    def findDifference(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # for each node in the list, find the difference between its value and the previous node's value\n        # return the difference\n        # if the difference is greater than the m or greater than the n, return the difference\n        # if the difference is less than m or less than n, return 0\n        # else return the difference\n        # if the difference is equal to the m or equal to the n, return 0\n        # if the difference is greater than the m or greater than the n, return the difference\n        # if the difference is less than the m or less than the n, return the difference\n        # if the difference is equal to the m or equal to the n, return 0\n        # if the difference is greater than the m or greater than the n, return the difference\n        # if the difference is less than the m or less than the n, return the difference\n        # if the difference is equal to the m or equal to the n, return 0\n        # if the difference is greater than the m or greater than the n, return the difference\n        # if the difference is less than m or less than the n, return the difference\n        # if the difference is equal to the m or equal to the n, return 0\n        # if the difference is greater than the m or greater than the n, return the difference\n        # if the difference is less than the m or less than the n, return the difference\n        # if the difference is equal to the m or equal to the n, return 0\n        # if the difference is greater than the m or greater than the n, return the difference\n        # if the difference is less than the m or less than the n, return the difference\n        # if the difference is equal to the m or equal to the n, return 0\n        # if the difference is greater than the m or greater than the n, return the difference\n        # if the difference is less than the m or less than the n,"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def getDifference(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not headA:\n            return headB\n        if not headB:\n            return headA\n        diff = headA.val - headB.val\n        headA.val = diff\n        headB.val = diff\n        while headA.next and headA.next.next:\n            headA = headA.next\n            headB = headB.next\n            diff = headA.val - headB.val\n            headA.val = diff\n            headB.val = diff\n        return headA"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def getDifference(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if head == None:\n            return 0\n        diff = 0\n        curr = head\n        while curr!= None:\n            curr = curr.next\n            diff = diff + curr.val - head.val\n            head = head.next\n        return diff"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def diff(list):\n    \"\"\"\n    :param list: List of numbers.\n    :return: Difference between two consecutive numbers.\n    \"\"\"\n\n    diff = 0\n    start = 0\n    for i in range(len(list) - 1):\n        if list[i]!= list[i+1]:\n            diff += abs(list[i] - list[i+1])\n            start = i+1\n    return diff\n\ndef main():\n    list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    print(diff(list))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def diff(x,y,z):\n\treturn x-y-z\n\ndef main():\n\ta = [1,2,3,4,5]\n\tprint(diff(1,2,0))\n\tprint(diff(1,2,1))\n\tprint(diff(1,2,2))\n\tprint(diff(1,2,3))\n\tprint(diff(1,2,4))\n\tprint(diff(1,2,5))\n\nmain()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers/problem\n\n#!/bin/python\n\n# Complete the differenceBetweenTwoNumbers function below.\ndef differenceBetweenTwoNumbers(list):\n    # Complete this function\n    return list[-1] - list[0]\n\nif __name__ == '__main__':\n    n = int(input())\n    list = [int(i) for i in input().split()]\n    print(differenceBetweenTwoNumbers(list))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# -*- coding: utf-8 -*-\n# @author: vuolter\n\ndef diff(lst):\n    n = len(lst) - 1\n    if n < 1:\n        return 0\n    for i in range(n):\n        if lst[i] == lst[i + 1]:\n            return 1\n    return 0"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/difference-of-two-numbers-in-linked-list/\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def getDifference(self, head, val):\n        res = ListNode(0)\n        pre = res\n        while head is not None:\n            if head.val == val:\n                head = head.next\n                continue\n            if head.val > val:\n                pre.next = head\n                pre = head\n            else:\n                pre.next = None\n                head = head.next\n        return res.next\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef printList(head):\n    while head is not None:\n        print head.val,\n        head = head.next\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Example\n# Given 1->2->3->4->5->6->7->8->9->10, return 6\n# given 1->3->5->7->9->11->13->15->17->19->21->23->25->27->29->31->33->35->37->39->41->43->45->47->49->51->53->55->57->59->61->63->65->67->69->71->73->75->77->79->81->83->85->87->89->91->93->95->97->99->101->103->105->107->109->111->113->115->117->119->121->123->125->127->129->131->133->135->137->139->141->143->145->147->149->151->153->155->157->159->161->163->165->167->169->171->173->175->177->179->181->183->185->187->189->191->193->195->197->199->201->203->205->207->209->211->213->215->217->219->221->223->225->227->229->231->233->235->237->239->241->243->245->247->249->251->253->255->257->259->261->263->265->267->269->271->273->275->277->279->281->283->285->287->289->291->293->295->297->299->301->303->305->307->309->311->313->315->317->319->321->323->325->327->329->331->333->335->337->339->341->343->345->347->349->351->353->355->357->359->361->363->365->367->369->371->373->375->377->379->381->383->385->387->389->391->393->395->397->399->401->403->405->407->409->411->413->415->417->419->421->423->425->427->429->431->433->435->437->439->441->443->445->447->449->451->453->455->457->459->461->463->465->467->469->471->473->475->477->479->481"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers-in-a-given-list/problem\n\n# import time\n# start = time.time()\n\n# def find_diff(arr, start, end):\n    # if start == end:\n        # return start\n    # mid = (start + end) / 2\n    # if arr[mid] == arr[start]:\n        # return arr[start] - arr[end]\n    # return find_diff(arr, start, mid) - find_diff(arr, mid + 1, end)\n\n\n# arr = [1, 3, 5, 6, 7, 8, 9]\n# start = 0\n# end = len(arr) - 1\n# print(\"Starting with:\", arr[start], \"and ending with:\", arr[end])\n# print(\"Difference is:\", find_diff(arr, start, end))\n\n# print(\"Time elapsed:\", round(time.time() - start, 2), \"seconds.\")"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/dynamic-programming-solutions\n\nimport unittest\n\n\ndef diff_two_num(arr, start, end):\n    if start > end:\n        return 0\n    if start == end:\n        return arr[start]\n\n    mid = (start + end) / 2\n    return max(diff_two_num(arr, start, mid), diff_two_num(arr, mid + 1, end))\n\n\nclass TestCode(unittest.TestCase):\n    def test_diff_two_num(self):\n        self.assertEqual(diff_two_num([1, 2, 3, 4, 5, 6, 7], 0, 7), 6)\n        self.assertEqual(diff_two_num([1, 2, 3, 4, 5, 6, 7], 1, 7), 5)\n        self.assertEqual(diff_two_num([1, 2, 3, 4, 5, 6, 7], 2, 7), 4)\n        self.assertEqual(diff_two_num([1, 2, 3, 4, 5, 6, 7], 3, 7), 3)\n        self.assertEqual(diff_two_num([1, 2, 3, 4, 5, 6, 7], 4, 7), 2)\n        self.assertEqual(diff_two_num([1, 2, 3, 4, 5, 6, 7], 5, 7), 1)\n        self.assertEqual(diff_two_num([1, 2, 3, 4, 5, 6, 7], 6, 7), 0)\n        self.assertEqual(diff_two_num([1, 2, 3, 4, 5, 6, 7], 7, 7), 0)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nclass Solution(object):\n    def findDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        \n        diff = 0\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            if nums[left] + k >= nums[right]:\n                diff += nums[left] + k - nums[right]\n                left += 1\n            elif nums[right] + k >= nums[left]:\n                diff += nums[right] + k - nums[left]\n                right -= 1\n            else:\n                return diff\n        \n        return diff"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def diff(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        if not head.next:\n            return head\n        dif = head.val - head.next.val\n        new_head = head.next\n        while new_head:\n            new_head.val = dif\n            new_head = new_head.next\n        return head\n\nif __name__ == \"__main__\":\n    s = Solution()\n    l1 = ListNode(1)\n    l2 = ListNode(2)\n    l3 = ListNode(3)\n    l1.next = l2\n    l2.next = l3\n    l3.next = None\n\n    head = s.diff(l1)\n    print(head.val)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def get_diff(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    diff = 0\n    for i in range(len(list)):\n        if i == 0:\n            continue\n        diff = list[i] - list[i-1]\n        if diff == 0:\n            continue\n        return diff\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 1, 1, 1, 1]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print get_diff(l)\n    l = [1, 2, 3, 4, 5,"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# http://www.geeksforgeeks.org/difference-between-two-consecutive-numbers-in-a-given-list/\n\ndef find_difference(list, i, j):\n    # print(list[i:j])\n    return list[j] - list[i]\n\ndef find_difference_2(list, i, j):\n    # print(list[i:j])\n    return list[j] - list[i]\n\ndef main():\n    nums = [1, 2, 3, 4]\n    print(find_difference(nums, 0, 2))\n    print(find_difference(nums, 2, 4))\n    print(find_difference(nums, 3, 5))\n    print(find_difference_2(nums, 0, 2))\n    print(find_difference_2(nums, 2, 4))\n    print(find_difference_2(nums, 3, 5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers/problem\n\n# Initialize your function\ndef differenceBetweenTwoNumbers(arr):\n    # Your function should return a list\n    # Initialize your result list\n    result = []\n    # Initialize your current number\n    current_number = arr[0]\n    # For each number in the list\n    for number in arr[1:]:\n        # If the current number is greater than the previous number\n        if current_number > number:\n            # Add the current number to your result\n            result.append(current_number)\n        # Set the current number to the previous number\n        current_number = number\n    # Add the current number to your result\n    result.append(current_number)\n    # Return the result\n    return result\n\n# Your function should return a list\narr = [2, 6, 4, 8, 10, 9]\n# Your function should return:\n# [10, 8, 6, 4, 2]\ndifferenceBetweenTwoNumbers(arr)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/list-difference\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Find difference\ndifference = [numbers[i] - numbers[i+1] for i in range(len(numbers) - 1)]\n\nprint(difference)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @return {integer}\n    def getDifference(self, head):\n        if not head:\n            return 0\n        diff = head.val - head.next.val\n        while head.next.next:\n            head = head.next\n            diff += head.val - head.next.val\n        return diff"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers/problem\n\n#!/usr/bin/env python\n\n# -*- coding: utf-8 -*-\n# list = [1,2,3,4,5]\n# print(difference(list,1))\n# print(difference(list,2))\n\ndef difference(list, start):\n    if start < 1 or start > len(list):\n        return -1\n    return list[start-1] - list[start]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (['1','2','3','4','5'], 1),\n        (['3','4','5','6','7'], 3),\n        (['1','2','3','4','5'], 2),\n        (['1','2','3','4','5'], 3)\n    ]\n    for test in test_cases:\n        result = difference(test[0], test[1])\n        print(\"Difference between\", test[0], \"and\", test[1], \"is\", result)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return len(nums) - 2 * (len(nums) - 1)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers/problem\n\nnums = [2, 7, 11, 15]\n\ndef find_difference(nums):\n    start = 0\n    end = len(nums) - 1\n    difference = 0\n\n    while start < end:\n        if nums[start] + nums[end] == nums[end]:\n            end -= 1\n        else:\n            difference += nums[start] + nums[end]\n        start += 1\n        end -= 1\n    return difference\n\n# test cases\nprint(find_difference(nums))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/sorting-algorithms/problem\n# Solution: Sort the list and then find the difference between two numbers.\n# Time complexity: O(n)\n\ndef difference(list):\n    sorted_list = sorted(list)\n    difference = list[1] - list[0]\n    return difference\n\ndef main():\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n = int(input())\n    list = list(map(int, input().split()))\n    difference = difference(list)\n    print(difference)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/two-arrays-are-adjacent/problem\n\ndef find_difference(arr1, arr2):\n    diff = arr2[0] - arr1[0]\n    i = 0\n    while i < len(arr1) - 1:\n        if arr1[i] == arr1[i + 1] and arr2[i] == arr2[i + 1]:\n            diff += arr1[i] - arr2[i]\n        else:\n            break\n        i += 1\n    return diff\n\n# Test Cases\n# arr1 = [2, 3, 4, 5]\n# arr2 = [6, 7, 8, 9]\n# arr1 = [1, 2, 3, 4]\n# arr2 = [1, 2, 3, 5]\n# arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# arr1 = [2, 3, 4, 5]\n# arr2 = [6, 7, 8, 9]\n# arr1 = [1, 2, 3, 4]\n# arr2 = [1, 2, 3, 5]\n# arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# arr1 = [2, 3, 4, 5]\n# arr2 = [6, 7, 8, 9]\n# arr1 = [1, 2, 3, 4]\n# arr2 = [1, 2, 3, 5]\n# arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\narr1 = [2, 3, 4, 5]\narr2 = [6, 7, 8, 9]\n\nprint(find_difference(arr1, arr2))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\n# Complete the function below.\ndef difference(lst, start, end):\n    return lst[end] - lst[start]\n\n\nif __name__ == '__main__':\n    print(difference([1, 2, 3, 4], 0, 2))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def difference(a,b):\n    return a-b\n\ndef main():\n    a = [1,2,3,4]\n    b = [4,3,2,1]\n    print(difference(a,b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from collections import deque\n\ndef find_difference(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    q = deque()\n    for i in range(len(nums)):\n        if i == 0:\n            q.append(nums[i])\n        else:\n            q.append(nums[i] - nums[i-1])\n    return sum(q)\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    nums = [1, 2, 3]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @return {integer}\n    def getDifference(self, head):\n        if not head:\n            return 0\n        pre = head\n        cur = head.next\n        num = 0\n        while cur:\n            num += cur.val - pre.val\n            pre = cur\n            cur = cur.next\n        return num\n\nif __name__ == '__main__':\n    # head = ListNode(1)\n    head = ListNode(1, ListNode(2, ListNode(3)))\n    # head = ListNode(1)\n    # head.next = ListNode(2, ListNode(3))\n    # head.next.next = ListNode(4, ListNode(5))\n    # head.next.next.next = ListNode(6, ListNode(7))\n    # head = ListNode(1)\n    # head.next = ListNode(2)\n    # head.next.next = ListNode(3)\n    # head.next.next.next = ListNode(4)\n    # head.next.next.next.next = ListNode(5)\n    # head.next.next.next.next.next = ListNode(6)\n    # head.next.next.next.next.next.next = ListNode(7)\n    # head.next.next.next.next.next.next.next = ListNode(8)\n    # head.next.next.next.next.next.next.next.next = ListNode(9)\n    # head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "# write your code here\ndef diff(list_one, list_two):\n    d = list_two[-1] - list_one[-1]\n    d += diff(list_one[:-1], list_two[:-1])\n    return d\n\nif __name__ == '__main__':\n    test_list = [1, 2, 3]\n    print(diff(test_list, test_list[1:]))\n    test_list = [1, 2, 3, 4]\n    print(diff(test_list, test_list[1:]))\n    test_list = [1, 2, 3, 4, 5]\n    print(diff(test_list, test_list[1:]))\n    test_list = [1, 2, 3, 4, 5, 6]\n    print(diff(test_list, test_list[1:]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def findDiff(list1, list2):\n\treturn list2[-1] - list1[-1]\n\nif __name__ == '__main__':\n\tprint(findDiff([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]))\n\tprint(findDiff([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]))\n\tprint(findDiff([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def diff(a, b):\n    if a == b:\n        return 0\n    return b - a\n\ndef diff_list(a_list, b_list):\n    result = 0\n    for i in range(len(a_list)):\n        result += diff(a_list[i], b_list[i])\n    return result\n\nif __name__ == '__main__':\n    a_list = [1, 2, 3]\n    b_list = [4, 5, 6]\n    print(diff_list(a_list, b_list))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "# https://www.geeksforgeeks.org/find-the-difference-between-two-consecutive-numbers-in-a-given-list/\n\ndef findDiff(list):\n    \"\"\"\n    Find the difference between two consecutive numbers in a given list\n    :param list: the given list\n    :return: the difference between two consecutive numbers in a given list\n    \"\"\"\n    current_number = list[0]\n    prev_number = current_number\n    for i in list[1:]:\n        if i == current_number:\n            current_number = prev_number\n        else:\n            prev_number = current_number\n        current_number = i\n    return current_number - prev_number\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    print(findDiff(l))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def diff(nums, i, j):\n    if i < 0 or j < 0 or i >= len(nums) or j >= len(nums):\n        return 0\n    return nums[i] - nums[j]\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3]\n    print diff(nums, 1, 0)\n    print diff(nums, 1, 1)\n    print diff(nums, 2, 1)\n    print diff(nums, 2, 2)\n    print diff(nums, 3, 2)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers/problem\n\ndef difference(list_1, list_2):\n    return list_2[-1] - list_1[-1]\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4]\n    list_2 = [3, 4, 5, 6]\n    print(difference(list_1, list_2))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def get_difference(list_of_numbers):\n\tdifference = list_of_numbers[1] - list_of_numbers[0]\n\treturn difference\n\n\ndef main():\n\tlist_of_numbers = [4,7,6,8,3,2,4,7,9,8,5,6]\n\tdifference = get_difference(list_of_numbers)\n\tprint difference\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def find_difference(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    if len(numbers) < 2:\n        return 0\n\n    return max(map(lambda x: numbers[x + 1] - numbers[x], range(len(numbers) - 1)))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def diff(list, start, end):\n    if start == end:\n        return 0\n    if start >= len(list):\n        return 0\n    if end >= len(list):\n        return 0\n    if end > start:\n        return end - start\n    if start > end:\n        return end - start\n    return 0\n\nprint(diff([1, 2, 3, 4, 5], 0, 2))\nprint(diff([1, 2, 3, 4, 5], 1, 3))\nprint(diff([1, 2, 3, 4, 5], 1, 4))\nprint(diff([1, 2, 3, 4, 5], 1, 5))\nprint(diff([1, 2, 3, 4, 5], 2, 4))\nprint(diff([1, 2, 3, 4, 5], 2, 5))\nprint(diff([1, 2, 3, 4, 5], 3, 5))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-numbers/problem\n\ndef difference(nums):\n    dif = 0\n    for i in range(1, len(nums)):\n        dif += nums[i] - nums[i - 1]\n    return dif\n\nif __name__ == '__main__':\n    nums = [int(x) for x in input().split(' ')]\n    print(difference(nums))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import collections\n\nclass Solution(object):\n    def findDifference(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        # get the first and last element of the list\n        start, end = min(nums1), max(nums1)\n        # create a dictionary to store the result\n        result = collections.defaultdict(int)\n        # for each number in nums1, add it to the dictionary\n        for i, n in enumerate(nums1):\n            result[n] = i\n        # for each number in nums2, add it to the dictionary\n        for i, n in enumerate(nums2):\n            if n in result:\n                # if the number is in the dictionary, add its difference to the result\n                result[n] += i - result[n]\n        # return the result\n        return sum(result.values())\n\n\nif __name__ == \"__main__\":\n    nums1 = [1, 2, 3]\n    nums2 = [1, 3, 5]\n    nums1_nums2 = Solution().findDifference(nums1, nums2)\n    print nums1_nums2"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def diff(lst, i, j):\n    diff = lst[i] - lst[j]\n    return diff\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5]\n    print(diff(lst, 0, 2))\n    print(diff(lst, 1, 3))\n    print(diff(lst, 1, 4))\n    print(diff(lst, 2, 4))\n    print(diff(lst, 3, 4))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "# Write your code here\n\ndef find_diff(numbers):\n\tnumbers.sort()\n\treturn numbers[-1] - numbers[0]\n\nif __name__ == \"__main__\":\n\tnumbers = [1, 3, 5, 7, 9]\n\tprint find_diff(numbers)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @param {ListNode} n2\n    # @return {ListNode}\n    def getDifference(self, head, n2):\n        if not head:\n            return None\n        if not n2:\n            return head\n        if n2.val <= head.val:\n            return None\n        \n        # start\n        curr = head\n        end = head\n        while curr.next:\n            end = end.next\n            if curr.next.val <= n2.val:\n                break\n            curr = curr.next\n        \n        # end\n        while curr.next:\n            curr = curr.next\n            if curr.val >= n2.val:\n                break\n        \n        return end"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers/problem\n\n#!/usr/bin/python\n\nnums = []\n\n# input\nwith open(\"input.txt\") as f:\n    for line in f:\n        nums.append(int(line))\n\n# output\nwith open(\"output.txt\", \"w\") as out:\n    prev = 0\n    for i in range(len(nums)):\n        if prev!= 0:\n            out.write(str(prev - nums[i]))\n            out.write(\"\\n\")\n        prev = nums[i]\n\n# time complexity: O(n)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_difference(nums, start_index, end_index):\n    diff = nums[end_index] - nums[start_index]\n    return diff\n\n\nnums = [1, 2, 3, 4, 5]\nprint(find_difference(nums, 0, 2))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def difference(list_, index):\n\treturn list_[index] - list_[index-1]\n\nprint difference([1, 2, 3], 1)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# I/O\n\n# Complete the function below.\n\ndef diff(nums, nums2):\n    # YOUR CODE HERE\n    if len(nums) < len(nums2):\n        nums2 = nums + nums2\n    for i in range(len(nums)):\n        nums2[i] = nums[i] - nums2[i]\n    return nums2\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5]\n    nums2 = [1,2,3]\n    print(diff(nums, nums2))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_difference(list_to_find, start_index, end_index):\n    # print(list_to_find[start_index:end_index+1])\n    list_to_find = list_to_find[start_index:end_index+1]\n    if len(list_to_find) == 1:\n        return list_to_find[0] - list_to_find[0-1]\n    else:\n        return list_to_find[-1] - list_to_find[-2]\n\ndef main():\n    print(find_difference([1, 2, 3], 0, 1))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/two-lists-are-disjoint/problem\n\nfrom sys import stdin\n\nn = int(stdin.readline())\n\nfor i in range(n):\n    n1, n2 = map(int, stdin.readline().split())\n    if n1!= n2:\n        print n2 - n1"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def difference(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    current_number = numbers[0]\n    next_number = numbers[1]\n    return current_number - next_number\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]\n    assert difference(numbers) == 3"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# Write your code here\n\ndef difference(nums, start, end):\n\tresult = 0\n\twhile start < end:\n\t\tresult += nums[end] - nums[start]\n\t\tend -= 1\n\treturn result\n\ndef main():\n\tnums = [1, 2, 3, 4, 5, 6]\n\tstart = 0\n\tend = len(nums) - 1\n\tresult = difference(nums, start, end)\n\tprint result\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "# Your code here\n\nnums = [1, 2, 3]\n\ndef diff(i, j):\n    return nums[i] - nums[j]\n\nprint(diff(0, 1))\nprint(diff(1, 2))\nprint(diff(2, 3))\nprint(diff(3, 4))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers/problem\n\n# for (int i = 0; i < list.size() - 1; i++) {\n#     int j = i + 1;\n#     if (list[i] == list[j]) {\n#         diff = list[i] - list[j];\n#         return diff;\n#     }\n# }\n\ndef difference(list):\n    diff = 0\n    for i in range(1, len(list)):\n        if list[i] == list[i-1]:\n            diff = list[i] - list[i-1]\n            return diff\n    return diff\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(difference(list))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers/problem\n\n# Complete the function below.\ndef difference(list, a, b):\n    return list[a] - list[b]\n\n\nif __name__ == '__main__':\n    n = int(input())\n    list = list(map(int, input().split()))\n    a = int(input())\n    b = int(input())\n    print(difference(list, a, b))"
    },
    {
      "rank": 54,
      "score": 3.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def getDifference(self, headA, headB):\n        \"\"\"\n        :type headA: ListNode\n        :type headB: ListNode\n        :rtype: int\n        \"\"\"\n        if not headA or not headB:\n            return 0\n        d = 0\n        while headA and headB:\n            d += headA.val - headB.val\n            headA = headA.next\n            headB = headB.next\n        return d\n\n\n# Note:\n# The idea is to use the next pointer of the list.\n# But when you find the first list node, the next pointer of the second list is not null."
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    # @param head, a ListNode\n    # @return a integer\n    def getDifference(self, head):\n        if not head:\n            return 0\n        diff = 0\n        pre = head\n        while pre:\n            diff += pre.val\n            pre = pre.next\n        return diff"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def get_diff(self, head, x):\n        if head is None:\n            return 0\n        if head.val == x:\n            return 1\n        else:\n            ret = 0\n            prev = head\n            while prev.next:\n                if prev.val == x:\n                    ret += 1\n                else:\n                    break\n                prev = prev.next\n            return ret\n\n    def get_diff_2(self, head, x):\n        if head is None:\n            return 0\n        if head.val == x:\n            return 1\n        else:\n            ret = 0\n            while head:\n                if head.val == x:\n                    ret += 1\n                else:\n                    break\n                head = head.next\n            return ret\n\n    def get_diff_3(self, head, x):\n        if head is None:\n            return 0\n        if head.val == x:\n            return 1\n        else:\n            ret = 0\n            while head:\n                if head.val == x:\n                    ret += 1\n                else:\n                    break\n                head = head.next\n            return ret\n\n    def get_diff_4(self, head, x):\n        if head is None:\n            return 0\n        if head.val == x:\n            return 1\n        else:\n            ret = 0\n            while head:\n                if head.val == x:\n                    ret += 1\n                else:\n                    break\n                head = head.next\n            return ret\n\n    def get_diff_5(self, head, x):\n        if head is None:\n            return 0\n        if head.val == x:\n            return 1\n        else:\n            ret = 0\n            while head:\n                if head.val == x:\n                    ret += 1\n                else:\n                    break\n                head = head.next\n            return ret\n\n    def get_diff_6(self, head, x):\n        if head is None:\n            return 0\n        if head.val =="
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "# Your function should return the difference between the two numbers as a new list.\n\n# Example:\n# Given 1->2->3->4->5->6->7->8, and target = 8,\n# return [4, 3]\n\nclass Solution(object):\n    def get_difference(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return []\n        result = [0]\n        for i in xrange(len(nums)):\n            result.append(nums[i] - result[-1])\n        for i in xrange(len(result)):\n            if result[i] == target:\n                return result[i:]\n        return []"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "def find_difference(list_):\n    # write your code here\n    # list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return list_[-1] - list_[0]\n\nprint(find_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "from math import ceil\n\n\ndef find_diff(arr, target, start):\n    if start >= len(arr):\n        return target\n    if arr[start] == target:\n        return arr[start]\n    else:\n        return min(find_diff(arr, target, start + 1), find_diff(arr, target, start + 1))\n\n\ndef find_diff_2(arr, target, start):\n    if start >= len(arr):\n        return target\n    if arr[start] == target:\n        return arr[start]\n    else:\n        return min(find_diff_2(arr, target, start + 1), find_diff_2(arr, target, start + 1))\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4]\n    target = 2\n    print(find_diff(arr, target, 0))\n    print(find_diff_2(arr, target, 0))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def get_difference(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: int\n        \"\"\"\n        # If the list has only one node, return 0\n        if headA is None and headB is None:\n            return 0\n        # If the list has only one node, return the difference\n        if headA is None and headB is not None:\n            return headB.val - headB.next.val\n        if headA is not None and headB is None:\n            return headA.val - headA.next.val\n        # If the list has more than one node, return the difference\n        difference = 0\n        while headA is not None and headB is not None:\n            difference = difference + headA.val - headB.val\n            headA = headA.next\n            headB = headB.next\n        return difference"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def get_diff(self, head, next):\n        \"\"\"\n        :type head: ListNode\n        :type next: ListNode\n        :rtype: int\n        \"\"\"\n        prev = head\n        while prev and prev.next:\n            prev = prev.next\n            next = next.next\n        diff = next.val - prev.val\n        return diff\n\nclass Solution2(object):\n    def get_diff(self, head, next):\n        \"\"\"\n        :type head: ListNode\n        :type next: ListNode\n        :rtype: int\n        \"\"\"\n        prev = head\n        while prev and prev.next:\n            prev = prev.next\n            next = next.next\n            diff = next.val - prev.val\n            prev = prev.next\n        return diff\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    next = head.next.next\n    prev = head.next.next.next.next.next.next.next.next.next.next\n    diff = prev.val - next.val\n    print(diff)\n    s = Solution()\n    print(s.get_diff(head, next))\n    s = Solution2()\n    print(s.get_"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def get_diff(self, head):\n        p1 = head\n        p2 = head\n        while p2.next is not None:\n            p1 = p1.next\n            p2 = p2.next.next\n\n        return p1\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    p1 = head\n    p2 = head\n    while p2.next is not None:\n        p1 = p1.next\n        p2 = p2.next.next\n\n    print(Solution().get_diff(head))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/difference-of-two-numbers-in-a-linked-list/discuss/91824/Python-solution-using-dfs\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0):\n#         self.val = val\n#         self.next = None\n\nclass Solution:\n    def getDifference(self, headA, headB):\n        \"\"\"\n        :type headA: ListNode\n        :type headB: ListNode\n        :rtype: int\n        \"\"\"\n        if not headA:\n            return 0\n        if not headB:\n            return 0\n        length = 0\n        prevA = None\n        prevB = None\n        while headA and headB:\n            if headA.val < headB.val:\n                prevA = headA\n                headA = headA.next\n                length += 1\n            else:\n                prevB = headB\n                headB = headB.next\n                length += 1\n        if headA:\n            length += 1\n        if headB:\n            length += 1\n        return length"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/difference-of-two-numbers/\n# Given a list of integers, return the difference between the first and last elements in the list.\n#\n# If there are 2 elements in the list, return the difference of the 2 elements.\n# If there are more than 2 elements, return the difference of the 2 elements after the last 2 elements.\n#\n# Example 1:\n# Input: [1,2,3]\n# Output: 3\n# Example 2:\n# Input: [1,2,3,4]\n# Output: 1\n# Note:\n# The input is always valid.\n# The input list is always in ascending order.\n# You may assume the list has at least 2 elements.\n#\n# Note:\n# The input list is always in the same format as shown above.\n# You may assume the first and last element's value is not equal to each other.\n\n# https://leetcode.com/problems/difference-of-two-numbers/discuss/791/Java-O(N)-Time-O(1)-Space-Solution\n\n# 4ms 100%\nclass Solution {\n    public int diffTwoNumbers(int[] nums) {\n        if (nums.length < 2) {\n            return 0;\n        }\n        return Math.abs(nums[nums.length - 1] - nums[0]);\n    }\n}"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "# Example 1\n# Given 1->2->3->4->5->6->7->8->9->10, return 10\n\n# Example 2\n# Given 1->2->3->4->5->6->7->8->9->10, return 0\n\n# Example 3\n# Given 1->2->3->4->5->6->7->8->9->10, return 0\n\n# Note:\n# 1 <= nums.length <= 1000\n# 1 <= nums[i] <= 10^6\n# The difference between two adjacent elements in the list is guaranteed to be the same.\n# The difference between two numbers in the list is guaranteed to be the same.\n\nclass Solution(object):\n    def get_difference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        n = len(nums)\n        diff = 0\n        for i in range(1, n):\n            diff += abs(nums[i] - nums[i-1])\n        return diff"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# https://www.youtube.com/watch?v=aU6zZRUyjkU\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {ListNode} p\n    # @param {ListNode} q\n    # @return {ListNode}\n    def get_difference(self, head, p, q):\n        if not head:\n            return None\n        if p and p.next:\n            p = p.next\n        if q and q.next:\n            q = q.next\n        p_head = head\n        q_head = head\n        while p:\n            p_head = p_head.next\n            p = p.next\n        while q:\n            q_head = q_head.next\n            q = q.next\n        diff = p_head.val - q_head.val\n        return head.next if p_head else head.prev\n\n# TODO:\n# 1. test\n# 2. test with list of 2\n# 3. test with list of 3\n# 4. test with list of 4"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def findDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        l = len(nums)\n        if l < 2:\n            return 0\n        if l == 2:\n            return nums[1] - nums[0]\n        ans = nums[1] - nums[0]\n        for i in range(2, l):\n            ans += nums[i] - nums[i - 1]\n        return ans\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findDifference([1, 2, 3], 2)\n    print s.findDifference([1, 2, 3], 3)\n    print s.findDifference([1, 2, 3], 4)\n    print s.findDifference([1, 2, 3, 4], 1)\n    print s.findDifference([1, 2, 3, 4], 2)\n    print s.findDifference([1, 2, 3, 4], 3)\n    print s.findDifference([1, 2, 3, 4], 4)\n    print s.findDifference([1, 2, 3, 4], 5)\n    print s.findDifference([1, 2, 3, 4, 5], 1)\n    print s.findDifference([1, 2, 3, 4, 5], 2)\n    print s.findDifference([1, 2, 3, 4, 5], 3)\n    print s.findDifference([1, 2, 3, 4, 5], 4)\n    print s.findDifference([1, 2, 3, 4, 5], 5)"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef diff(nums, i, j):\n    d = defaultdict(int)\n    for k in range(i, j + 1):\n        d[nums[k]] += 1\n    return sum(d.values())\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    i = 0\n    j = len(nums) - 1\n    print(diff(nums, i, j))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param A, a list of integer\n    # @return an integer\n    def findDifference(self, A):\n        if len(A) < 2:\n            return 0\n\n        max_ = max(A)\n        min_ = min(A)\n\n        return max_ - min_\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findDifference([1, 2, 3, 4]))\n    print(s.findDifference([2, 3, 4]))\n    print(s.findDifference([5, 6]))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def find_diff(nums, start, end):\n    if start > end:\n        return 0\n    mid = (start + end) / 2\n    left = find_diff(nums, start, mid)\n    right = find_diff(nums, mid + 1, end)\n    return left + right + nums[mid]\n\ndef find_diff_2(nums, start, end):\n    if start > end:\n        return 0\n    mid = (start + end) / 2\n    left = find_diff_2(nums, start, mid)\n    right = find_diff_2(nums, mid + 1, end)\n    return left + right + nums[mid]\n\ndef find_diff_3(nums, start, end):\n    if start > end:\n        return 0\n    mid = (start + end) / 2\n    left = find_diff_3(nums, start, mid)\n    right = find_diff_3(nums, mid + 1, end)\n    return left + right + nums[mid]\n\ndef find_diff_4(nums, start, end):\n    if start > end:\n        return 0\n    mid = (start + end) / 2\n    left = find_diff_4(nums, start, mid)\n    right = find_diff_4(nums, mid + 1, end)\n    return left + right + nums[mid]\n\ndef find_diff_5(nums, start, end):\n    if start > end:\n        return 0\n    mid = (start + end) / 2\n    left = find_diff_5(nums, start, mid)\n    right = find_diff_5(nums, mid + 1, end)\n    return left + right + nums[mid]\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_diff(nums, 1, 8))\n    print(find_diff_2(nums, 1, 8))\n    print(find_diff_3(nums, 1, 8))\n    print(find_diff_4(n"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param A, a list of integers\n    # @return an integer\n    def findDifference(self, A):\n        # write your code here\n        if not A or len(A) == 1:\n            return 0\n\n        n = len(A)\n        left = 0\n        right = n - 1\n        max_left = -1\n        max_right = -1\n        while left < n and right < n:\n            if A[left] < A[right]:\n                max_left = max(max_left, A[left])\n                left += 1\n            elif A[left] > A[right]:\n                max_right = max(max_right, A[right])\n                right += 1\n            else:\n                return max(max_left, max_right) - min(max_left, max_right)\n        return max(max_left, max_right) - min(max_left, max_right)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findDifference([0, 1])\n    print s.findDifference([1, 2])\n    print s.findDifference([2, 2])\n    print s.findDifference([3, 3])\n    print s.findDifference([3, 4])\n    print s.findDifference([3, 4])\n    print s.findDifference([4, 4])\n    print s.findDifference([5, 5])\n    print s.findDifference([5, 5])\n    print s.findDifference([6, 6])\n    print s.findDifference([6, 7])\n    print s.findDifference([6, 7])\n    print s.findDifference([7, 7])\n    print s.findDifference([8, 8])\n    print s.findDifference([8, 9])\n    print s.findDifference([8, 9])\n    print s.findDifference([9, 9])"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-difference-between-two-numbers/problem\n\n# Note:\n# You can assume that the input list is sorted in increasing order.\n\n# Example\n# For input [1,2,3,4], the output should be:\n# find_diff(1, 3) -> 2\n# find_diff(1, 4) -> 3\n\ndef find_diff(x, y):\n    return y - x"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @param {ListNode} second\n    # @return {ListNode}\n    def getDifference(self, head, second):\n        if not head or not second:\n            return head\n        \n        if head.val == second.val:\n            return head\n        \n        if head.val > second.val:\n            return self.getDifference(second, head)\n        \n        dif = second.val - head.val\n        head = second\n        second = head.next\n        \n        while second:\n            if second.val == head.val:\n                second = second.next\n                continue\n            else:\n                second = self.getDifference(head, second)\n                return second\n        \n        return second\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    second = ListNode(2)\n    head.next = second\n    second.next = ListNode(3)\n    second.next.next = ListNode(4)\n    second.next.next.next = ListNode(5)\n    second.next.next.next.next = ListNode(6)\n    second.next.next.next.next.next = ListNode(7)\n    \n    sol = Solution()\n    \n    print(sol.getDifference(head, second))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "#!/usr/bin/python\n\n# Note: the length of the given list is [1, 50].\n\n# Example 1:\n# Input: nums = [4, 7, 7, 8, 8, 12], target = 8\n# Output: 4\n# Explanation: 8 is the first element and the difference is 4.\n# Example 2:\n# Input: nums = [4, 7, 7, 8, 8, 12], target = 10\n# Output: -3\n# Explanation: 10 is the last element and the difference is -3.\n# Example 3:\n# Input: nums = [], target = 0\n# Output: 0\n# Example 4:\n# Input: nums = [1], target = 1\n# Output: 0\n# Note:\n# 1 <= nums.length <= 50\n# 1 <= nums[i] <= 50\n# -10^9 <= target <= 10^9\n\n\nclass Solution(object):\n    def findDifference(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums or not target:\n            return 0\n\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) / 2\n            if nums[mid] > target:\n                right = mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                return mid - left + 1\n\n        return 0 if left == right else left - right"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# Your function will be called as follows:\n# nums = [1, 2, 3, 4, 5, 6]\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)\n# function(nums)"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# The function to be written.\ndef find_difference(nums):\n    if not nums:\n        return 0\n\n    result = 0\n    for i in range(len(nums)-1):\n        result += nums[i] - nums[i+1]\n    return result\n\n# Driver program to test above function\nnums = [1, 2, 3, 4]\nprint(find_difference(nums))\n\n# Driver program to test above function\nnums = [1, 2, 3, 4, 5]\nprint(find_difference(nums))\n\n# Driver program to test above function\nnums = [1, 2, 3]\nprint(find_difference(nums))\n\n# Driver program to test above function\nnums = [1, 2, 3, 4]\nprint(find_difference(nums))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# write your code here\n# x = [1, 2, 3]\n# x = [3, 2, 1]\n# x = [1, 2, 3, 4]\n# x = [1, 2, 3, 4, 5]\n# x = [1, 2, 3, 4, 5, 6]\n# x = [1, 2, 3, 4, 5, 6, 7]\n# x = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# for i in range(1, len(x) - 1):\n#     print x[i] - x[i - 1]\n#     print x[i] - x[i + 1]\n\n# for i in range(0, len(x) - 2):\n#     print x[i] - x[i + 2]\n\n# for i in range(1, len(x) - 1):\n#     print x[i] - x[i - 1]\n#     print x[i] - x[i + 1]\n\n# for i in range(0, len(x) - 2):\n#     print x[i] - x[i + 2]\n\n# for i in range(1, len(x) - 1):\n#     print x[i] - x[i - 1]\n#     print x[i] - x[i + 1]\n\n# for i in range(0, len(x) - 2):\n#     print x[i] - x[i + 2]\n\n# for i in range(1, len(x) - 1):\n#     print x[i] - x[i - 1]\n#     print x[i] - x[i + 1]\n\n# for i in range(0, len(x) - 2):\n#     print x[i] - x[i + 2]\n\n# for i in range(1, len(x) - 1):\n#     print x[i] - x[i - 1]\n#     print x[i] - x[i + 1]\n\n# for i in range(0, len(x) - 2):\n#     print x[i] - x[i + 2]\n\n# for"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "import unittest\nfrom solution import difference\n\n\nclass TestSolution(unittest.TestCase):\n    def test_difference(self):\n        self.assertEqual(difference([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]), -3)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/two-sum/problem\n\n\ndef two_sum(ar, target):\n    \"\"\"\n    :type ar: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    if len(ar) < 2:\n        return []\n\n    result = []\n    for i in range(len(ar)):\n        if i == 0:\n            result.append(ar[i])\n            continue\n\n        for j in range(len(ar)):\n            if i!= j and ar[i] + ar[j] == target:\n                result.append(ar[i])\n                break\n\n    return result\n\n\nif __name__ == \"__main__\":\n    ar = [1, 2, 3]\n    target = 2\n\n    print(two_sum(ar, target))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\n\nclass Solution:\n\t# @param head, a ListNode\n\t# @return a ListNode\n\tdef getDifference(self, head):\n\t\tif head is None:\n\t\t\treturn None\n\n\t\tdummy = ListNode(0)\n\t\tdummy.next = head\n\t\tpre = dummy\n\t\tcurr = dummy.next\n\t\twhile curr is not None:\n\t\t\t# print(curr.val, pre.val)\n\t\t\tif pre.val > curr.val:\n\t\t\t\tpre = pre.next\n\t\t\telse:\n\t\t\t\tcurr = curr.next\n\t\t\t\tpre = pre.next\n\t\t\t\t# print(curr.val, pre.val)\n\t\t\t\tif pre.val < curr.val:\n\t\t\t\t\tpre = pre.next\n\t\treturn dummy.next\n\n\nif __name__ == '__main__':\n\tl1 = ListNode(1)\n\tl2 = ListNode(3)\n\tl3 = ListNode(2)\n\tl4 = ListNode(4)\n\tl1.next = l2\n\tl2.next = l3\n\tl3.next = l4\n\tsolution = Solution()\n\tprint(solution.getDifference(l1))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @return {integer}\n    def getDifference(self, head):\n        if not head or not head.next:\n            return 0\n        head1 = head\n        head2 = head\n        while head1 and head2:\n            head1 = head1.next\n            head2 = head2.next\n            if not head1:\n                head1 = head\n            if not head2:\n                head2 = head\n        if not head1:\n            head1 = head\n        if not head2:\n            head2 = head\n        head1 = head1.next\n        head2 = head2.next\n        if head1 and head2:\n            return head1.val - head2.val\n        else:\n            return 0\n\nif __name__ == \"__main__\":\n    l1 = ListNode(1)\n    l1.next = ListNode(3)\n    l1.next.next = ListNode(5)\n    l2 = ListNode(2)\n    l2.next = ListNode(4)\n    l2.next.next = ListNode(6)\n    l2.next.next.next = ListNode(7)\n    s = Solution()\n    print(s.getDifference(l1))\n    print(s.getDifference(l2))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import sys\nimport math\nimport time\nimport collections\n\n\n# @include\ndef difference(A, i, j):\n    difference = 0\n    for k in range(i, j):\n        difference += A[k] - A[k - 1]\n    return difference\n\n\ndef main():\n    A = [1, 2, 3, 4, 5]\n    n = len(A)\n    print('n =', n)\n    print('difference(A, 1, n) =', difference(A, 1, n))\n    print('difference(A, 2, n) =', difference(A, 2, n))\n    print('difference(A, n, n) =', difference(A, n, n))\n    print('difference(A, 1, n - 1) =', difference(A, 1, n - 1))\n    print('difference(A, n, n - 1) =', difference(A, n, n - 1))\n    print('difference(A, n - 1, n) =', difference(A, n - 1, n))\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    main()\n    print('Time:', time.time() - start_time)\n    sys.exit(0)\n# @exclude\n\n\ndef test():\n    A = [1, 2, 3, 4, 5]\n    assert difference(A, 1, 2) == 3\n    assert difference(A, 2, 3) == 1\n    assert difference(A, 3, 4) == -2\n    assert difference(A, 4, 5) == -1\n    assert difference(A, 1, 4) == -3\n    assert difference(A, 3, 5) == 2\n    assert difference(A, 4, 5) == 1\n\n\ndef test_negative_inputs():\n    A = [1, 2, 3, 4, 5]\n    assert difference(A, -1, 0) == -1\n    assert difference(A, 0, -1) == -1\n    assert difference(A, -1, -1) == -1\n    assert difference(A, 0, -1) == -1\n\n\ndef test_large"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getDifference(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: int\n        \"\"\"\n        if not headA:\n            return 0\n        if not headB:\n            return 0\n        while headA and headA.next:\n            headA = headA.next\n            headB = headB.next\n        return headA.val - headB.val"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def find_difference(numbers, start, end):\n    for i in range(start, end):\n        if numbers[i]!= numbers[i-1]:\n            return numbers[i] - numbers[i-1]\n    return 0\n\ndef test_find_difference():\n    assert find_difference([1, 2, 3, 4, 5], 0, 4) == 3\n    assert find_difference([1, 2, 3, 4, 5], 0, 5) == 4\n    assert find_difference([1, 2, 3, 4, 5], 0, 6) == 5\n    assert find_difference([1, 2, 3, 4, 5], 0, 7) == 6\n\ndef test_find_difference2():\n    assert find_difference([1, 2, 3, 4, 5], 0, 4) == 3\n    assert find_difference([1, 2, 3, 4, 5], 0, 5) == 4\n    assert find_difference([1, 2, 3, 4, 5], 0, 6) == 5\n    assert find_difference([1, 2, 3, 4, 5], 0, 7) == 6\n    assert find_difference([1, 2, 3, 4, 5], 0, 8) == 7\n\ndef test_find_difference3():\n    assert find_difference([1, 2, 3, 4, 5], 0, 4) == 3\n    assert find_difference([1, 2, 3, 4, 5], 0, 5) == 4\n    assert find_difference([1, 2, 3, 4, 5], 0, 6) == 5\n    assert find_difference([1, 2, 3, 4, 5], 0, 7) == 6\n    assert find_difference([1, 2, 3, 4, 5], 0, 8) == 7\n    assert find_difference([1, 2, 3, 4, 5], 0, 9) == 8"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @param {ListNode} p\n    # @param {ListNode} q\n    # @return {ListNode}\n    def getDiff(self, head, p, q):\n        if not head:\n            return None\n        if head.val < p.val or head.val > q.val:\n            return None\n        if head.val == p.val:\n            return self.getDiff(head.next, p.next, q.next)\n        if head.val == q.val:\n            return self.getDiff(head.next, p, q.next)\n        if head.val > p.val and head.val < q.val:\n            return self.getDiff(head.next, p, q)\n        if head.val < p.val and head.val > q.val:\n            return self.getDiff(head.next, p, q.next)\n        if head.val < p.val and head.val > q.val:\n            return self.getDiff(head.next, p, q)\n        if head.val > p.val and head.val < q.val:\n            return self.getDiff(head.next, p.next, q.next)\n        return None\n\n\n    def getDiff2(self, head, p, q):\n        if not head or head.val < p.val or head.val > q.val:\n            return None\n        if head.val == p.val:\n            return self.getDiff2(head.next, p.next, q.next)\n        if head.val == q.val:\n            return self.getDiff2(head.next, p, q.next)\n        if head.val > p.val and head.val < q.val:\n            return self.getDiff2(head.next, p, q)\n        if head.val < p.val and head.val > q.val:\n            return self.getDiff2(head.next, p.next, q.next)\n        if head.val < p.val and head.val > q.val:\n            return self.getDiff2(head.next,"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# TODO:\n# - Make this function return a tuple\n# - Make this function return a list\n# - Make this function return a list of lists\n# - Make this function return a list of lists\n\n# TODO:\n# - Use the list of lists to create a list of lists\n# - Use the list of lists to create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists\n# - Create a list of lists"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/difference-between-two-numbers/problem\n\n# Complete the function below.\ndef findDifference(list):\n    # Complete this function\n    # list is a list of numbers.\n    # Your function should return the difference between the first and last number in the list.\n    \n    # Note: the first and last number in the list are different.\n    \n    # Example:\n    # Input: list = [1, 3, 5, 7, 9]\n    # Output: 2\n    \n    # Example:\n    # Input: list = [1, 3, 5, 7, 9, 11, 13, 15]\n    # Output: 7\n    \n    return list[-1] - list[0]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param A, a list of integers\n    # @return an integer\n    def findDifference(self, A):\n        # write your code here\n        if not A:\n            return 0\n        n = len(A)\n        if n == 1:\n            return A[0] - A[0]\n        else:\n            return A[n - 1] - A[n - 2]\n\nif __name__ == '__main__':\n    sol = Solution()\n    A = [1, 2, 3]\n    print(sol.findDifference(A))\n    A = [1, 2, 3, 4]\n    print(sol.findDifference(A))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def get_difference(self, head):\n        if not head: return None\n        prev, curr = head, head.next\n        while curr and curr.next:\n            prev, curr = curr, curr.next\n        diff = curr.val - prev.val\n        curr.next = None\n        return prev\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    # head = ListNode(1)\n    # print sol.get_difference(head)\n    head = ListNode(1, ListNode(2))\n    print sol.get_difference(head)\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4))))\n    print sol.get_difference(head)\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next\n    print sol.get_difference(head)\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6))))))\n    print sol.get_difference(head)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def diff(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        return len(A) - len(B)\n\n\nif __name__ == \"__main__\":\n    print Solution().diff([1, 2, 3], [2, 3, 4])"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import sys\nimport timeit\n\nsys.path.append('..')\nfrom problems.problem_01 import Solution\n\n\nclass Solution(Solution):\n    def diff_two_numbers(self, list):\n        \"\"\"\n        :type list: List[int]\n        :rtype: int\n        \"\"\"\n        if len(list) < 2:\n            return 0\n        left, right = 0, 0\n        for i in range(len(list)):\n            if i == 0:\n                left = list[i]\n            else:\n                if list[i] - left == 1:\n                    right = list[i]\n                else:\n                    return left - right\n            left = list[i]\n        return left - right\n\n\nif __name__ == '__main__':\n    start_time = timeit.default_timer()\n    test_cases = [([1, 2, 3, 4], [1, 2, 3, 4]), ([1, 2, 3, 4], [1, 2, 3, 5])]\n    for test_case in test_cases:\n        print('*' * 50)\n        print(test_case)\n        test = Solution()\n        test.run_tests(test_case)\n        print('*' * 50)\n    print('--- %s seconds ---' % (timeit.default_timer() - start_time))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def get_difference(self, head):\n        if not head:\n            return None\n        diff = head.val\n        cur = head\n        while cur.next:\n            cur = cur.next\n            diff = diff - cur.val\n        return diff"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def getDifference(self, head):\n        if not head or not head.next:\n            return head\n        difference = head.val\n        cur = head\n        while cur.next:\n            cur = cur.next\n            difference = difference - cur.val\n        return ListNode(difference)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Write your code here\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Complete the function below.\ndef find_difference(list):\n    return list[0] - list[1]\n\nif __name__ == '__main__':\n    test_cases = [\n        [[1, 2, 3, 4], 4],\n        [[1, 2, 3], 2],\n        [[1, 2], 1],\n        [[1, 2, 3], 3],\n        [[1, 2, 3, 4], 4],\n        [[1, 2, 3, 4, 5], 5],\n        [[1, 2, 3, 4, 5], 6],\n        [[1, 2, 3, 4, 5, 6], 6],\n        [[1, 2, 3, 4, 5, 6, 7], 7],\n        [[1, 2, 3, 4, 5, 6, 7, 8], 8],\n        [[1, 2, 3, 4, 5, 6, 7, 8, 9], 9],\n        [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10],\n        [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 11]\n    ]\n\n    for case in test_cases:\n        assert find_difference(case[0]) == case[1]"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-the-difference/\n\nclass Solution(object):\n    def findDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return sum(nums[i:i+k] for i in range(len(nums)-k+1))\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 3\n    print(Solution().findDifference(nums, k))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def findDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 1:\n            return nums[0] - nums[0-1]\n        if k == 0:\n            return nums[0] - nums[1]\n\n        m = 0\n        for i in range(1, n):\n            m = nums[i] - nums[i-1]\n            if m == k:\n                return m\n            elif m > k:\n                return m - k\n            elif m < k:\n                return m + k\n\n        return 0\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    nums = []\n    k = 0\n    for line in f:\n        # line = f.readline()\n        nums.append(int(line))\n    k = int(f.readline())\n\n    print \" \".join(map(str, solution.findDifference(nums, k)))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\ndef findDiff(list, start, end):\n    if start == end:\n        return end\n    mid = (start + end) / 2\n    if list[mid] >= list[end]:\n        return findDiff(list, start, mid)\n    else:\n        return findDiff(list, mid + 1, end)\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 4, 5, 6]\n    print(findDiff(list, 0, len(list) - 1))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom itertools import groupby\n\n\ndef find_diff(list_1, list_2):\n    \"\"\"\n    :type list_1: List[int]\n    :type list_2: List[int]\n    :rtype: int\n    \"\"\"\n    d = defaultdict(list)\n    for x, y in zip(list_1, list_2):\n        d[x].append(y)\n        d[y].append(x)\n\n    result = 0\n    for k, v in d.items():\n        result += len(v) - 1\n\n    return result\n\n\ndef test():\n    assert find_diff([3, 2, 1], [3, 2, 1]) == 2\n    assert find_diff([1, 3, 5, 7], [1, 3, 5, 7]) == 0\n    assert find_diff([1, 3, 5, 7], [1, 3, 5, 8]) == 2\n    assert find_diff([1, 3, 5, 7], [1, 3, 5, 7, 9]) == 2\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# A simple implementation of the solution is:\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers[i] - numbers[j]\n#\n# def get_difference(numbers, i, j):\n#     return numbers"
    }
  ]
}