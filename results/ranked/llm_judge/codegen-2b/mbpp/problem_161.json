{
  "timestamp": "2025-09-14T18:33:33.085350",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 161,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import sys\n\ndef findStd(s):\n    std_occurence = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            std_occurence += 1\n    return std_occurence\n\nif __name__ == '__main__':\n    s = sys.stdin.readline()\n    print findStd(s)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# import necessary modules\nimport sys\nimport re\n\n# TODO:\n# 1. Make sure your function returns the same number of occurences as the input list\n# 2. Do not use regular expressions, use the function directly\n\n# TODO:\n# 1. Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\n# TODO:\n# 1. Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\n# TODO:\n# 1. Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\n# TODO:\n# 1. Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\n# TODO:\n# 1. Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\n# TODO:\n# 1. Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\n# TODO:\n# 1. Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\n# TODO:\n# 1. Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\n# TODO:\n# 1. Write a function to find the occurence of characters'std' in the given string 1. list item 1. list"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "#!/bin/python\n\n# write your code here\n\ndef countStd(string):\n    std = \"std\"\n    count = 0\n    for i in string:\n        if i == std:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    string = \"std\"\n    print countStd(string)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "#https://discuss.leetcode.com/topic/24477/java-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-o-n-"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "#!/bin/python\n\n# This is the standard library\nimport re\n\n# This is the external library\nimport requests\n\n# This is my solution\ndef main():\n    # Get the text from the web\n    text = requests.get('http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=true').text\n\n    # Use re module to find the occurence of'std'\n    std = re.findall('std', text)\n    print std\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\ndef check(s,str):\n\tfor i in range(0,len(s)):\n\t\tif s[i]==str:\n\t\t\treturn True\n\treturn False\n\ndef main():\n\ts = \"std\"\n\tprint check(s,\"std\")\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\nimport sys\n\ndef main():\n    if len(sys.argv) < 2:\n        sys.exit('Please input a string')\n    string = sys.argv[1]\n    occurence = 0\n    for i in string:\n        if i =='std':\n            occurence += 1\n    print occurence\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def count(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"\n        return s.count(c)\n\n    def count_std(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return self.count(s,'std')\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.count_std('std')"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nfrom collections import Counter\n\ndef count_std(string):\n    \"\"\"\n    Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n    #print string\n    c = Counter(string)\n    std = 0\n    for c in c.keys():\n        if c =='std':\n            std = c\n    return std\n\nif __name__ == \"__main__\":\n    print count_std(\"This is std\")\n    print count_std(\"This is std is std\")\n    print count_std(\"This is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std is std"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef find_std(s):\n    return [i for i in range(len(s)) if s[i] =='s' and s[i-1] == 'd' and s[i-2] == 't' and s[i-3] == 'd']\n\ndef main():\n    s = sys.argv[1]\n    std = find_std(s)\n    print std[0]\n    print std[1]\n    print std[2]\n    print std[3]\n    print std[4]\n    print std[5]\n    print std[6]\n    print std[7]\n    print std[8]\n    print std[9]\n    print std[10]\n    print std[11]\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from collections import Counter\nimport re\n\ndef find_std(text):\n    std = re.compile(r'std')\n    # print std.findall(text)\n    return std.findall(text)\n\ndef main():\n    text ='std'\n    print find_std(text)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def stdString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return s.count('std')\n\n\nif __name__ == \"__main__\":\n    assert Solution().stdString(\"abcstd\") == 1"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "#!/bin/python\n\nimport sys\n\ndef find_std(str):\n    for i in str:\n        if i =='std':\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    str = sys.stdin.readline()\n    for i in str:\n        if find_std(i):\n            print i\n            break\n    else:\n        print \"No std found\""
    },
    {
      "rank": 14,
      "score": 8.444444444444445,
      "candidate": "import re\n\n# Complete the function below.\ndef find_std(s):\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    s ='std std std std std std std std'\n    print(find_std(s))"
    },
    {
      "rank": 15,
      "score": 3.926139092254469,
      "candidate": "import string\n\n# Complete the function below.\ndef find_std(s):\n    \"\"\"\n    :param s: str\n    :return: List[int]\n    \"\"\"\n    return [x for x in s if x.lower() =='std']\n\n# Note:\n# The function name must be 'find_std'\n# The function has a return type 'List[int]'.\n# The function accepts only one parameter, the string's'.\n# The function must return a list of integers, where each integer is the number of times the character'std' appears in the given string.\n# For example, if the string'std' appears 3 times in the given string, the function must return [3].\n# If the string'std' appears 5 times in the given string, the function must return [5].\n# If the string'std' appears 7 times in the given string, the function must return [7].\n# If the string'std' appears 9 times in the given string, the function must return [9].\n\n# Examples:\n# s ='std'\n# find_std(s) = [1]\n# s ='stdstd'\n# find_std(s) = [1, 2]\n# s ='stdstdstd'\n# find_std(s) = [1, 2, 3]\n# s ='stdstdstdstd'\n# find_std(s) = [1, 2, 3, 4]\n# s ='stdstdstdstdstd'\n# find_std(s) = [1, 2, 3, 4, 5]\n# s ='stdstdstdstdstdstd'\n# find_std(s) = [1, 2, 3, 4, 5, 6]\n# s ='stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd"
    },
    {
      "rank": 16,
      "score": 3.7896064077536957,
      "candidate": "# https://www.hackerrank.com/challenges/stdio-stdout-concurrency\n# stdin/stdout\n# https://www.hackerrank.com/challenges/stdio-stdout-concurrency-examples/problem\n\ndef main():\n    # Complete this function\n    l = list()\n    l.append(1)\n    l.append(2)\n    l.append(3)\n    l.append(4)\n    l.append(5)\n    print(l.count(1))\n    print(l.count(2))\n    print(l.count(3))\n    print(l.count(4))\n    print(l.count(5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 3.782321827907003,
      "candidate": "# https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/\n\n# I/O\n# 2 ints\n# 2 strings\n# 1 int\n# 1 string\n# 1 int\n\nclass Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # sort and remove duplicates\n        nums = sorted(set(nums))\n        # find the index of the first 0\n        i = 0\n        while i < len(nums):\n            if nums[i] == 0:\n                return [0]\n            i += 1\n        # find the index of the last 0\n        i = len(nums) - 1\n        while i >= 0:\n            if nums[i] == 0:\n                return [i + 1]\n            i -= 1\n        return [0]\n\nif __name__ == \"__main__\":\n    import sys\n    sys.setrecursionlimit(100000)\n    assert Solution().findDisappearedNumbers([0,1,0,2,1,0,3,4,1,1]) == [0, 3, 4]"
    },
    {
      "rank": 18,
      "score": 3.7690182832329846,
      "candidate": "def count_std_in_string(s):\n    return s.count('std')\n\n# Test cases\ntest_cases = [\n    ('abc', 1),\n    ('abcabcabc', 3)\n]\n\nfor test_case in test_cases:\n    print(count_std_in_string(test_case[0]))"
    },
    {
      "rank": 19,
      "score": 3.761514928204013,
      "candidate": "# Your function should return an integer\n\n# Example 1:\n\n# Input:\n# s = \"abcabcbb\"\n#\n# Output:\n# 2\n# Explanation:\n# 'bb' is in the string 2 times.\n# Example 2:\n\n# Input:\n# s = \"aa\"\n#\n# Output:\n# 0\n# Explanation:\n# 'a' is not in the string.\n# Example 3:\n\n# Input:\n# s = \"abc\"\n#\n# Output:\n# 0\n# Explanation:\n# 'c' is not in the string.\n\nclass Solution(object):\n    def findSubstring(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(s) - k + 1):\n            if s[i:i+k] == s[:k]:\n                count += 1\n        return count\n\nif __name__ == \"__main__\":\n    assert Solution().findSubstring(\"abcabcbb\", 2) == 2\n    assert Solution().findSubstring(\"aa\", 2) == 0\n    assert Solution().findSubstring(\"abc\", 2) == 0\n    assert Solution().findSubstring(\"abc\", 1) == 0"
    },
    {
      "rank": 20,
      "score": 3.738947022370758,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTest cases\n\"\"\"\n\n__author__ = 'Vin\u00edcius dos Santos Oliveira'\n__version__ = '1.0'\n__email__ = 'viniciosantos.oliveira@gmail.com'\n\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\n# Get current script directory\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\n\n# Add current script directory to the PYTHONPATH\nsys.path.append(current_dir)\n\nfrom string_utils import *\n\nif __name__ == '__main__':\n    # Read input file\n    with open(current_dir + '/input.txt') as f:\n        s = f.read()\n\n    # Write output file\n    with open(current_dir + '/output.txt', 'w') as f:\n        f.write(str(find_occurence(s)))\n\n    print('\\nScript finished successfully.\\n')"
    },
    {
      "rank": 21,
      "score": 3.732824384460777,
      "candidate": "#!/bin/python\n\nclass Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        s_len = len(s)\n        p_len = len(p)\n        if p_len == 0:\n            return True\n        elif s_len == 0:\n            return False\n        if p_len == 1:\n            if p[0] == '.':\n                return True\n            else:\n                return False\n        if p_len == 2 and p[0] == '.' and p[1] == '*':\n            return True\n        if p_len > 2 and p[0] == '.' and p[1] == '*':\n            return True\n        if p_len > 2 and p[0] == '.' and p[1] == '.':\n            return False\n        if p_len > 2 and p[0] == '*' and p[1] == '.':\n            return True\n        if p_len > 2 and p[0] == '*' and p[1] == '*':\n            return True\n        if p_len > 2 and p[0] == '*' and p[1] == '.':\n            return False\n        if p_len > 2 and p[0] == '*' and p[1] == '*':\n            return False\n        if p_len > 2 and p[0] == '*' and p[1] == '.':\n            return True\n        if p_len > 2 and p[0] == '.' and p[1] == '*':\n            return True\n        if p_len > 2 and p[0] == '*' and p[1] == '*':\n            return True\n        if p_len > 2 and p[0] == '*' and p[1] == '.':\n            return True\n        if p_len > 2 and p[0] == '*' and p[1] == '*':\n            return False\n        if p_len > 2 and p[0] == '*' and p[1] == '.'"
    },
    {
      "rank": 22,
      "score": 3.6781200142854114,
      "candidate": "import re\n\ndef find_std(str):\n    re_std = re.compile(\"std\")\n    occurences = re_std.findall(str)\n    return occurences\n\nif __name__ == \"__main__\":\n    test_string = \"std\"\n    print find_std(test_string)"
    },
    {
      "rank": 23,
      "score": 3.5285611131094576,
      "candidate": "class Solution(object):\n    def checkAnagrams(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        s = list(s)\n        t = list(t)\n        if len(s)!= len(t):\n            return False\n        s.sort()\n        t.sort()\n        return s == t"
    },
    {
      "rank": 24,
      "score": 3.5154997612479755,
      "candidate": "#!/bin/python\n\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python\n#!/bin/python"
    },
    {
      "rank": 25,
      "score": 3.501766448946012,
      "candidate": "\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\n\"\"\"\nWrite a function to check"
    },
    {
      "rank": 26,
      "score": 3.4877725635611796,
      "candidate": "#!/usr/bin/python\n\n# write your code here\ndef check_std(string):\n    result = 0\n    for i in range(len(string)):\n        if string[i] =='std':\n            result += 1\n    return result\n\nif __name__ == \"__main__\":\n    s = input(\"Enter string: \")\n    print(\"Number of occurences of'std' in the given string is: \" + str(check_std(s)))"
    },
    {
      "rank": 27,
      "score": 3.4656400595580994,
      "candidate": "import unittest\n\n\nclass Solution:\n    def countStd(self, s: str) -> int:\n        return sum(1 if s.startswith(\"std\") else 0 for s in s)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        solution = Solution()\n        self.assertEqual(solution.countStd(\"stdstdstd\"), 3)\n        self.assertEqual(solution.countStd(\"stdstdstd\"), 3)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd\"), 1)\n        self.assertEqual(solution.countStd(\"stddd"
    },
    {
      "rank": 28,
      "score": 3.4112724560515946,
      "candidate": "\"\"\"\nInput:\n\nstring: \"std\"\n\nOutput:\n\nreturn: 1\n\n\"\"\"\n\ndef stdOccurence(string):\n\tcount = 0\n\tfor i in range(0, len(string)):\n\t\tif string[i] =='s' and string[i] == 'd' and string[i] == 't' and string[i] == 'i':\n\t\t\tcount += 1\n\treturn count\n\n\n\nif __name__ == '__main__':\n\tprint stdOccurence(\"std\")"
    },
    {
      "rank": 29,
      "score": 3.410951252187612,
      "candidate": "# https://leetcode.com/problems/find-the-duplicate-number-in-an-array/\n\nclass Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # https://discuss.leetcode.com/topic/26672/short-recursive-solution-using-two-stack\n        n = len(nums)\n        if n == 0:\n            return 0\n        stack1 = []\n        stack2 = []\n        for i in range(n):\n            if nums[i] == 0:\n                stack2.append(i)\n            else:\n                while stack2 and nums[stack2[-1]] == 0:\n                    stack2.pop()\n                if stack2 and nums[stack2[-1]] == nums[i]:\n                    stack1.append(stack2[-1])\n                    stack2.pop()\n        return len(stack1)\n\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        stack = []\n        for i in range(n):\n            if nums[i] == 0:\n                stack.append(i)\n            else:\n                while stack and nums[stack[-1]] == 0:\n                    stack.pop()\n                if stack and nums[stack[-1]] == nums[i]:\n                    return stack[-1]\n                else:\n                    stack.append(i)\n        return 0"
    },
    {
      "rank": 30,
      "score": 3.406262911197099,
      "candidate": "class Solution(object):\n    def countStd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        std_index = 0\n        for i in range(len(s)):\n            if s[i] =='std':\n                std_index += 1\n                if std_index == 3:\n                    return std_index\n            elif std_index > 0:\n                std_index -= 1\n        return 0"
    },
    {
      "rank": 31,
      "score": 3.3837173645764542,
      "candidate": "def count_std(s):\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n\nprint(count_std('std'))"
    },
    {
      "rank": 32,
      "score": 3.3692332899977053,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport re\n\ndef count_std(s):\n    return len([1 for c in s if c =='std'])\n\nif __name__ == '__main__':\n    s ='std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std"
    },
    {
      "rank": 33,
      "score": 3.3238442690503462,
      "candidate": "class Solution:\n    # @return a boolean\n    def hasSubstring(self, s, t):\n        return len(t) > 0 and s.find(t)!= -1\n\n    def findSubstring(self, s):\n        n = len(s)\n        m = len(t)\n        if m == 0:\n            return 0\n\n        start = 0\n        end = 0\n        while start < n:\n            end = s.find(t, start)\n            if end!= -1:\n                if start == 0 or s[start - 1] == t[0]:\n                    if self.hasSubstring(s, t[1:]):\n                        return start\n                    start = end + 1\n                else:\n                    start = end + 1\n            else:\n                return -1\n\n        return -1\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findSubstring('abcabcabc', 'abc'))\n    print(s.findSubstring('abcabcabc', 'a'))\n    print(s.findSubstring('abcabcabc', 'ab'))\n    print(s.findSubstring('abcabcabc', 'ac'))\n    print(s.findSubstring('abcabcabc', 'c'))\n    print(s.findSubstring('abcabcabc', 'abc'))\n    print(s.findSubstring('abcabcabc', 'abcabc'))"
    },
    {
      "rank": 34,
      "score": 3.305838144420434,
      "candidate": "# https://www.hackerrank.com/challenges/find-std\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# Recursive Solution:\n\n# TODO: This is not a good solution.\n# This is a bad solution because it does not check if the input is a valid string.\n# Check if the input is valid.\n\ndef find_std(string):\n    return string.count(\"std\")\n\nif __name__ == '__main__':\n    print(find_std(\"abc std xyz std\"))\n    print(find_std(\"abc std xyz\"))\n    print(find_std(\"abc std\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std(\"abc\"))\n    print(find_std"
    },
    {
      "rank": 35,
      "score": 3.2712800217929825,
      "candidate": "#!/usr/bin/env python\n\nimport string\nimport re\n\ndef find_std_in_string(string):\n    return re.findall(r'std', string)\n\ndef find_std_in_list(list_item):\n    return [item for item in list_item if'std' in item]\n\ndef find_std_in_list_1(list_item):\n    return [item for item in list_item if'std' in item[0]]\n\ndef find_std_in_list_2(list_item):\n    return [item for item in list_item if'std' in item[1]]\n\ndef find_std_in_list_3(list_item):\n    return [item for item in list_item if'std' in item[2]]\n\ndef find_std_in_list_4(list_item):\n    return [item for item in list_item if'std' in item[3]]\n\nif __name__ == '__main__':\n    string = \"std list item 1. std list item 1. std list item 2. std list item 2. std list item 2. std list item 3. std list item 3. std list item 3. std list item 3. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std list item 4. std"
    },
    {
      "rank": 36,
      "score": 3.2483570765056164,
      "candidate": "import re\n\ndef find_std(s):\n    # write your code here\n    #return re.findall('std', s, re.MULTILINE)\n    return re.findall(r'std', s, re.MULTILINE)\n\nif __name__ == '__main__':\n    s ='std'\n    print find_std(s)"
    },
    {
      "rank": 37,
      "score": 3.1878490091728358,
      "candidate": "import re\n\n\ndef find_std(string):\n    # write your code here\n    pattern = re.compile(\"std\")\n    match = re.findall(pattern, string)\n    return len(match)\n\n\nif __name__ == \"__main__\":\n    assert find_std(\"std\") == 3\n    assert find_std(\"sstd\") == 0\n    assert find_std(\"st\") == 0\n    assert find_std(\"stds\") == 0\n    assert find_std(\"stdstds\") == 0\n    assert find_std(\"stdstdsd\") == 0"
    },
    {
      "rank": 38,
      "score": 3.180818012523817,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\n\ndef find_std_in_list(input_string):\n    std_re = re.compile('std')\n    return std_re.findall(input_string)\n\n\ndef main():\n    input_string ='std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std"
    },
    {
      "rank": 39,
      "score": 3.180697802754207,
      "candidate": "import re\n\ndef find_std_occurence(string):\n    pattern = re.compile(r\"std\")\n    return re.findall(pattern, string)\n\nif __name__ == '__main__':\n    string = \"std\"\n    print find_std_occurence(string)"
    },
    {
      "rank": 40,
      "score": 3.178556285755873,
      "candidate": "#!/bin/python\n\n#!/bin/python\n\n\nclass Solution(object):\n    def stdString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return s.count('std')"
    },
    {
      "rank": 41,
      "score": 3.1718091447842305,
      "candidate": "\"\"\"\nFor example,\nstring = \"abcdefghijklmnopqrstuvwxyz\"\n\nYour function should return the following:\n[\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],\n  ['std'],"
    },
    {
      "rank": 42,
      "score": 3.165631715701782,
      "candidate": "def find_std(string):\n    return string.count('std')\n\nif __name__ == '__main__':\n    s = 'abcstddef'\n    print find_std(s)"
    },
    {
      "rank": 43,
      "score": 3.1620419846973977,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nfrom collections import Counter\nimport string\n\ndef find_std_in_str(s):\n    \"\"\"\n    :param s: string\n    :return: list of string\n    \"\"\"\n    std = \"std\"\n    occurence = []\n    for char in s:\n        if char == std:\n            occurence.append(char)\n    return occurence\n\ndef main():\n    s = \"Hello std\"\n    print(find_std_in_str(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 3.157123666297637,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python"
    },
    {
      "rank": 45,
      "score": 3.1209811357830173,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nif len(sys.argv)!= 2:\n    print \"Wrong number of arguments\"\n    sys.exit(1)\n\ns = sys.argv[1]\n\ndef get_std_occurence(s):\n    return s.count(\"std\")\n\nprint get_std_occurence(s)"
    },
    {
      "rank": 46,
      "score": 3.104431797502378,
      "candidate": "# Your function should return the number of occurrences of'std' in the given string.\n\n# Example 1:\n# Input: \"abcstdbcde\"\n# Output: 2\n# Explanation:'std' occurs 3 times:\n# [\n#  \"stdbcde\",\n#  \"std\"\n# ]\n\n# Example 2:\n# Input: \"abcdef\"\n# Output: 1\n# Explanation:'std' occurs 1 time:\n# [\n#  \"std\"\n# ]\n\n\nclass Solution(object):\n    def countStd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(s)):\n            if s[i] =='std':\n                count += 1\n        return count"
    },
    {
      "rank": 47,
      "score": 3.0984306179345618,
      "candidate": "import re\n\n# test 1\n# std ='std'\n# std ='stddef'\n# std ='stdexcept'\n# std ='std::string'\n# std ='std::stringstream'\n# std ='std::istream'\n# std ='std::istringstream'\n# std ='std::ostream'\n# std ='std::ostringstream'\n# std ='std::ostringstream'\n# std ='std::ios'\n# std ='std::ios_base'\n# std ='std::iostream'\n# std ='std::iostream'\n# std ='std::istreambuf_iterator'\n# std ='std::ostreambuf_iterator'\n# std ='std::istreambuf'\n# std ='std::ostreambuf'\n# std ='std::streambuf'\n# std ='std::stringbuf'\n# std ='std::streamsize'\n# std ='std::streamoff'\n# std ='std::streamsize'\n# std ='std::streamoff'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std ='std::istreambuf'\n# std = '"
    },
    {
      "rank": 48,
      "score": 3.085684140594985,
      "candidate": "from collections import Counter\nfrom string import ascii_lowercase\n\n\ndef count_std(s):\n    return Counter(ascii_lowercase).get(s[::-1])\n\n\nif __name__ == '__main__':\n    s ='std'\n    print(count_std(s))"
    },
    {
      "rank": 49,
      "score": 3.055461294854933,
      "candidate": "def find_std(s):\n    return [s.find('std') for i in range(len(s))]\n\n\ndef main():\n    test_cases = [\n        (\"abcdefghijklmnopqrstuvwxyz\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226"
    },
    {
      "rank": 50,
      "score": 3.045880388267751,
      "candidate": "import re\n\ndef find_std(string):\n    # your code here\n    std = ['std','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin','stderr','stdout','stderr','stdin', '"
    },
    {
      "rank": 51,
      "score": 3.043523534119086,
      "candidate": "#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python\n\n#!/bin/python"
    },
    {
      "rank": 52,
      "score": 3.033764102343962,
      "candidate": "# https://leetcode.com/problems/find-all-numbers-disappeared-in-a-string/description/\n\nclass Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums.sort()\n        res = []\n        for i in range(len(nums)):\n            if nums[i]!= i + 1:\n                res.append(i + 1)\n            if nums[i]!= i:\n                nums[i] = nums[i] - 1\n        return res\n\ndef main():\n    solution = Solution()\n    nums = [1,2,3]\n    print solution.findDisappearedNumbers(nums)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 2.993251387631033,
      "candidate": "class Solution(object):\n    def findSubstring(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(p)):\n            res += s.count(p[i], i, i+p[i].length())\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().findSubstring(\"abcabcabc\", \"abc\") == 6\n    assert Solution().findSubstring(\"abcabcabc\", \"abcdef\") == 0\n    assert Solution().findSubstring(\"abcabcabc\", \"abcdefgh\") == 0\n    assert Solution().findSubstring(\"abcabcabc\", \"abcdefghi\") == 0"
    },
    {
      "rank": 54,
      "score": 2.982086980445024,
      "candidate": "class Solution:\n    def find_std(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        return str.count('std')\n\n# Note:\n# std is not in the string.\n# std is in the string.\n# std is in the string.\n# std is in the string.\n# std is in the string.\n# std is in the string.\n# std is in the string.\n# std is in the string.\n# std is in the string."
    },
    {
      "rank": 55,
      "score": 2.963994939209833,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return an integer\n    def count(self, s):\n        return sum([1 for c in s if c =='std'])\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.count('std'))"
    },
    {
      "rank": 56,
      "score": 2.94217585880588,
      "candidate": "class Solution(object):\n    def findSubstring(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        start = 0\n        for i in range(len(p)):\n            while s[start] == p[i]:\n                start += 1\n            if start == len(s):\n                return count\n            count += 1\n            start += 1\n        return count\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.findSubstring(\"abc\", \"bc\"))"
    },
    {
      "rank": 57,
      "score": 2.930867849414408,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# -------------------------------------------------------------------------------\n# Name:       Python List\n# Purpose:    A simple Python list\n# Author:     Eugene\n# Created:    2016-06-09\n# Copyright:  2016-06-09\n# Licence:    MIT\n# -------------------------------------------------------------------------------\n\nclass List(object):\n    def __init__(self, lst):\n        self.__data = lst\n\n    def __str__(self):\n        return str(self.__data)\n\n    def __repr__(self):\n        return str(self.__data)\n\n    def __len__(self):\n        return len(self.__data)\n\n    def __iter__(self):\n        return iter(self.__data)\n\n    def __getitem__(self, index):\n        return self.__data[index]\n\n    def __setitem__(self, index, value):\n        self.__data[index] = value\n\n    def __delitem__(self, index):\n        del self.__data[index]\n\n    def __contains__(self, item):\n        return item in self.__data\n\n    def append(self, item):\n        self.__data.append(item)\n\n    def insert(self, index, item):\n        self.__data.insert(index, item)\n\n    def remove(self, item):\n        self.__data.remove(item)\n\n    def index(self, item):\n        return self.__data.index(item)\n\n    def count(self, item):\n        return self.__data.count(item)\n\n    def extend(self, lst):\n        self.__data.extend(lst)\n\n    def pop(self, index=-1):\n        return self.__data.pop(index)\n\n    def sort(self, cmp=None, key=None, reverse=False):\n        self.__data.sort(cmp=cmp, key=key, reverse=reverse)\n\n    def reverse(self):\n        self.__data.reverse()\n\n    def __add__(self, other):\n        return self.__"
    },
    {
      "rank": 58,
      "score": 2.9071705116680913,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport os\nimport re\n\n# Complete the function below.\ndef findOccurence(str, pattern):\n    count = 0\n    for i in str:\n        if i == pattern:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    pattern ='std'\n    n = len(pattern)\n    test_cases = int(input())\n\n    for t in range(test_cases):\n        string = input()\n        result = findOccurence(string, pattern)\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()"
    },
    {
      "rank": 59,
      "score": 2.890164056081244,
      "candidate": "def find_std_in_list(std_list):\n    for i in std_list:\n        if i =='std':\n            return True\n    return False\n\n#Test cases\nstd_list = ['std','std','std','std','std','std']\nprint(find_std_in_list(std_list))"
    },
    {
      "rank": 60,
      "score": 2.887111849756732,
      "candidate": "#!/bin/python\n\n#Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\ndef check(s):\n    for i in range(len(s)):\n        if s[i:i+3] == \"std\":\n            return True\n    return False\n\nprint check(\"abcdefgh\")"
    },
    {
      "rank": 61,
      "score": 2.8829315215254097,
      "candidate": "def find_std_in_string(string):\n    for i in range(len(string)):\n        if string[i] =='std':\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print find_std_in_string(\"std\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")\n    print find_std_in_string(\"stdfdsfds\")"
    },
    {
      "rank": 62,
      "score": 2.882923312638332,
      "candidate": "#!/bin/python\n\n#\n#  Write a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n#\n\n#\n#\n#\n#\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    },
    {
      "rank": 63,
      "score": 2.8541531251033616,
      "candidate": "import re\n\ndef count_std(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum([1 for char in s if char =='std'])\n\nif __name__ == \"__main__\":\n    s = \"std\"\n    print count_std(s)"
    },
    {
      "rank": 64,
      "score": 2.8504963247670663,
      "candidate": "class Solution(object):\n    def stdOccurrences(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for c in s:\n            if c =='std':\n                count += 1\n        return count\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.stdOccurrences('stdstdstd')\n    print s.stdOccurrences('abcdefghijklmnopqrstuvwxyz')"
    },
    {
      "rank": 65,
      "score": 2.8494481522053556,
      "candidate": "#!/usr/bin/python\n\ndef find_std_in_string(string):\n    \n    # write your code here\n    \n    occurence = 0\n    for i in range(0, len(string)):\n        if string[i] =='std':\n            occurence += 1\n    return occurence\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_std_in_string(\"abcstd\") == 1, \"One std in the string\"\n    assert find_std_in_string(\"std\") == 0, \"No std in the string\"\n    assert find_std_in_string(\"abcstd\") == 1, \"One std in the string\"\n    assert find_std_in_string(\"abc\") == 0, \"No std in the string\"\n    assert find_std_in_string(\"abcabc\") == 3, \"Three std in the string\"\n    assert find_std_in_string(\"abcabcabc\") == 6, \"Six std in the string\"\n    assert find_std_in_string(\"abcabcabcabcabcabcabcabc\") == 12, \"Twelve std in the string\"\n    assert find_std_in_string(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 66,
      "score": 2.8453938120743927,
      "candidate": "# Example 1\n# \"std\" = \"stdstd\"\n# returns: 2\n# Example 2\n# \"std\" = \"std\"\n# returns: 1\n# Example 3\n# \"st\" = \"st\"\n# returns: 0\n\ndef std_occurence(s):\n    return s.count('std')\n\nprint(std_occurence(\"stdstd\"))\nprint(std_occurence(\"std\"))\nprint(std_occurence(\"st\"))"
    },
    {
      "rank": 67,
      "score": 2.8074588597918417,
      "candidate": "import re\n\n# https://www.hackerrank.com/challenges/list-all-occurrences/problem\n\ndef list_all_occurrences(string):\n    return list(filter(lambda x: x.find(\"std\")!= -1, string))\n\nif __name__ == '__main__':\n    string = input().strip()\n    print(list_all_occurrences(string))"
    },
    {
      "rank": 68,
      "score": 2.769680614520106,
      "candidate": "\"\"\"\nNote:\n    The input string is always valid, however, the length of the string is always less or equal to 10000.\n\"\"\"\n\nclass Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        result = 0\n        word_len = len(words)\n        for i in range(len(s) - word_len + 1):\n            for j in range(word_len):\n                if s[i:i+j] in words:\n                    result += 1\n        return result"
    },
    {
      "rank": 69,
      "score": 2.768291153593769,
      "candidate": "import re\n\ndef find_std(string):\n    std_pattern = re.compile(r'std')\n    count = 0\n    for std in std_pattern.findall(string):\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    string ='std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std"
    },
    {
      "rank": 70,
      "score": 2.7671351232148718,
      "candidate": "#!/usr/bin/env python\n\ndef find_std_in_string(string):\n    for char in string:\n        if char =='std':\n            return True\n    return False\n\n# Test Cases\n# std\n# std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std"
    },
    {
      "rank": 71,
      "score": 2.765262807032524,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def numOccur(self, s):\n        return self.numOccur_1(s)\n\n    def numOccur_1(self, s):\n        count = 0\n        for i in range(len(s)):\n            if s[i] =='std':\n                count += 1\n        return count\n\n    # @param {string} s\n    # @return {integer}\n    def numOccur(self, s):\n        count = 0\n        for i in range(len(s)):\n            if s[i] =='std':\n                count += 1\n        return count\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.numOccur(\"std\"))"
    },
    {
      "rank": 72,
      "score": 2.760412881077355,
      "candidate": "def std_occurence(string):\n    count = 0\n    for char in string:\n        if char =='std':\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    test_case = 'abcdefgh'\n    print std_occurence(test_case)"
    },
    {
      "rank": 73,
      "score": 2.749121478207732,
      "candidate": "class Solution(object):\n    def findSubstring(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        if not s or not t:\n            return 0\n        if len(s) < len(t):\n            return 0\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                if j!= 0:\n                    i += 1\n                else:\n                    j += 1\n        return j"
    },
    {
      "rank": 74,
      "score": 2.7408648908631763,
      "candidate": "import string\n\n\ndef std_occurance(string):\n    return string.count('std')\n\n\nif __name__ == '__main__':\n    s ='std'\n    print(std_occurance(s))"
    },
    {
      "rank": 75,
      "score": 2.7278086377374087,
      "candidate": "# https://oj.leetcode.com/problems/find-character-in-string/\n\n# 2.1\nclass Solution(object):\n    def findCharacter(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"\n        return s.find(c)\n\n# 2.2\nclass Solution(object):\n    def findCharacter(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"\n        if c =='std':\n            return 0\n        elif c =='s':\n            return 1\n        elif c == 'd':\n            return 2\n        elif c == 't':\n            return 3\n        elif c == 'r':\n            return 4\n        elif c == 'e':\n            return 5\n        elif c == 'n':\n            return 6\n        elif c == 'w':\n            return 7\n        elif c == 'x':\n            return 8\n        elif c == 'y':\n            return 9\n        else:\n            return -1\n\n# 2.3\nclass Solution(object):\n    def findCharacter(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"\n        for i in range(0, len(s)):\n            if s[i] == c:\n                return i\n        return -1\n\n# 2.4\nclass Solution(object):\n    def findCharacter(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"\n        if c =='std':\n            return 0\n        elif c =='s':\n            return 1\n        elif c == 'd':\n            return 2\n        elif c == 't':\n            return 3\n        elif c == 'r':\n            return 4\n        elif c == 'e':\n            return 5\n        elif c == 'n':\n            return 6\n        elif c == 'w':\n            return 7"
    },
    {
      "rank": 76,
      "score": 2.718856235379514,
      "candidate": "\"\"\"\nSample Input\n\nstd\n\nSample Output\n\n0\n\"\"\"\n\ndef std_occurence(string):\n    occurence = 0\n    for i in range(0, len(string)):\n        if string[i] =='s':\n            occurence += 1\n    return occurence\n\nif __name__ == \"__main__\":\n    string = \"std\"\n    print std_occurence(string)"
    },
    {
      "rank": 77,
      "score": 2.6996806550405976,
      "candidate": "class Solution(object):\n    def count(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: int\n        \"\"\"\n        return sum([s.count(c) for s in s])\n\nif __name__ == \"__main__\":\n    assert Solution().count(\"std\", \"std\") == 1"
    },
    {
      "rank": 78,
      "score": 2.6991466938853015,
      "candidate": "def std(s):\n    for i in range(len(s)):\n        if s[i] =='std':\n            return i\n    return -1\n\nprint std('list item 1. list item 1. list item 2. list item 2. list item 2. list item 2. list item')"
    },
    {
      "rank": 79,
      "score": 2.677440122697438,
      "candidate": "import re\n\ndef std_occurence(string):\n    # your code here\n    pattern = re.compile('std')\n    result = re.findall(pattern, string)\n    return result\n\nif __name__ == '__main__':\n    string ='std'\n    result = std_occurence(string)\n    print(result)"
    },
    {
      "rank": 80,
      "score": 2.6615389998470205,
      "candidate": "def find_std(string):\n    result = []\n    for i in range(len(string)):\n        if string[i] =='std':\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    print(find_std('abcstdabc'))\n    print(find_std('abcstdabcabc'))"
    },
    {
      "rank": 81,
      "score": 2.6400778958026456,
      "candidate": "\"\"\"\nInput:\n\n\"\"\"\n\n\"\"\"\nOutput:\n\n\"\"\"\n\n\"\"\"\nConstraints:\n\n\"\"\"\n\n\"\"\"\nSample Input\n\nstd\n\nSample Output\n\n0\n\"\"\"\n\n\"\"\"\nConstraints:\n\n\"\"\"\n\ndef find_occurence(string,char):\n\t\n\tcount=0\n\t\n\tfor i in range(len(string)):\n\t\tif string[i]==char:\n\t\t\tcount=count+1\n\t\n\treturn count\n\nif __name__ == '__main__':\n\t\n\tstring=raw_input()\n\t\n\tprint find_occurence(string,'std')"
    },
    {
      "rank": 82,
      "score": 2.5957531985534064,
      "candidate": "from string import ascii_lowercase\n\ndef is_std(s):\n    for c in s:\n        if c in ascii_lowercase:\n            return True\n    return False\n\nif __name__ == '__main__':\n    s ='std'\n    print(is_std(s))"
    },
    {
      "rank": 83,
      "score": 2.580391238388681,
      "candidate": "#!/usr/bin/env python\n\nimport string\n\ndef find_std_in_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    std_list = ['std','std::','std::string','std::wstring','std::u16string','std::u32string','std::u64string','std::u8string','std::string_view','std::wstring_view','std::u16string_view','std::u32string_view','std::u64string_view','std::u8string_view']\n    count = 0\n    for i in string:\n        for j in std_list:\n            if i == j:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    string ='std::string'\n    print(find_std_in_string(string))"
    },
    {
      "rank": 84,
      "score": 2.5459879622393946,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\n# Complete the'stdString' function below.\ndef stdString(s):\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for ti in range(0, t):\n        s = input()\n\n        result = stdString(s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()"
    },
    {
      "rank": 85,
      "score": 2.493584439832788,
      "candidate": "#!/bin/python\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\n\n\"\"\"\n\nWrite a function to find the occurence of characters"
    },
    {
      "rank": 86,
      "score": 2.4711445355220496,
      "candidate": "from collections import Counter\n\ndef find_occurence(string):\n    cnt = Counter(string)\n    return cnt['std']\n\nif __name__ == '__main__':\n    print(find_occurence('std'))"
    },
    {
      "rank": 87,
      "score": 2.446832512996986,
      "candidate": "class Solution(object):\n    def countLetter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([ord(c) for c in s if c =='s'])"
    },
    {
      "rank": 88,
      "score": 2.4245032112888487,
      "candidate": "# Complete the function below.\ndef find_std_in_str(s):\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    assert(find_std_in_str('stdstdstd') == 1), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert(find_std_in_str('stddddd') == 0), \"Wrong std\"\n    assert"
    },
    {
      "rank": 89,
      "score": 2.4018966879596646,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python"
    },
    {
      "rank": 90,
      "score": 2.389578175014489,
      "candidate": "# Write your code here\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring(s, t):\n#     return s.find(t)!= -1\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring2(s, t):\n#     return t in s\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring3(s, t):\n#     return t in s\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring4(s, t):\n#     return t in s\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring5(s, t):\n#     return s.find(t)!= -1\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring6(s, t):\n#     return s.find(t)!= -1\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring7(s, t):\n#     return s.find(t)!= -1\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring8(s, t):\n#     return s.find(t)!= -1\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring9(s, t):\n#     return s.find(t)!= -1\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring10(s, t):\n#     return s.find(t)!= -1\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring11(s, t):\n#     return s.find(t)!= -1\n\n# \"\"\"\n# Check if a string contains a substring\n# \"\"\"\n# def is_substring12(s, t):\n#     return s.find(t)!= -1\n\n# \"\"\"\n# Check if a"
    },
    {
      "rank": 91,
      "score": 2.3359069755507846,
      "candidate": "def std_occurence(s):\n    return s.count('std')\n\n\n#Test\nprint(std_occurence('aabbccdd'))\nprint(std_occurence('aaabbccdd'))\nprint(std_occurence('bbbbb'))\nprint(std_occurence('aaaaabbbb'))"
    },
    {
      "rank": 92,
      "score": 2.293848149332354,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def findSubstring(self, s):\n        if len(s) < 2:\n            return 0\n        n = len(s)\n        s_len = len(s)\n        dp = [[0] * s_len for i in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if s[i:j+1] == s[j]:\n                    dp[i][j] = dp[i+1][j-1] + 1\n        return sum(dp[0])"
    },
    {
      "rank": 93,
      "score": 2.287625906893272,
      "candidate": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        words_len = len(words)\n        if words_len == 0:\n            return 0\n        if words_len == 1:\n            return s.count(words[0])\n\n        max_substring_len = 0\n        for word in words:\n            max_substring_len = max(max_substring_len, len(s.replace(word, \"\")))\n\n        max_substring_len = max(max_substring_len, len(s))\n        max_substring_len = max(max_substring_len, len(s.split(words[0])))\n        max_substring_len = max(max_substring_len, len(s.split(words[0]).replace(words[0], \"\")))\n\n        return sum([s.count(words[i]) for i in range(words_len)])"
    },
    {
      "rank": 94,
      "score": 2.260739004816286,
      "candidate": "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def findStd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if s[0] =='s' and s[1] == 't' and s[2] == 'd':\n            return 3\n        elif s[0] =='s' and s[1] == 't':\n            return 2\n        elif s[0] =='s':\n            return 1\n        else:\n            return 0\n\nif __name__ == \"__main__\":\n    print Solution().findStd(\"std\")\n    print Solution().findStd(\"stdddd\")\n    print Solution().findStd(\"stdstddd\")"
    },
    {
      "rank": 95,
      "score": 2.137541083743484,
      "candidate": "class Solution:\n    # @param {string} str\n    # @return {integer}\n    def count(self, str):\n        return str.count('std')\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.count('std')"
    },
    {
      "rank": 96,
      "score": 2.118479922318633,
      "candidate": "#!/usr/bin/python\n\ndef find_std(str):\n    std_occurance = 0\n    for i in str:\n        if i =='std':\n            std_occurance += 1\n    return std_occurance\n\nif __name__ == '__main__':\n    str = 'abcstddef'\n    print find_std(str)"
    },
    {
      "rank": 97,
      "score": 2.043359877671101,
      "candidate": "#!/bin/python\n\n#!/bin/python\n\n# Complete the occurences function below.\ndef occurences(s, c):\n    # your code here\n    return\n\nif __name__ == '__main__':\n    s ='std'\n    c ='st'\n    print occurences(s, c)"
    },
    {
      "rank": 98,
      "score": 2.020164938060112,
      "candidate": "# https://www.hackerrank.com/challenges/find-std\n# https://www.hackerrank.com/challenges/find-std/problem\n# https://www.hackerrank.com/contests/w16/challenges/find-std-substring-in-string\n# https://www.hackerrank.com/contests/w16/challenges/find-std-substring-in-string\n# https://www.hackerrank.com/contests/w16/challenges/find-std-substring-in-string-2\n# https://www.hackerrank.com/contests/w16/challenges/find-std-substring-in-string-3\n\n# -*- coding:utf-8 -*-\n\nfrom collections import Counter\n\n# Complete the findStd function below.\ndef findStd(s):\n    return Counter(s).most_common(1)[0][0]\n\nif __name__ == '__main__':\n    s ='stdstdstdstd'\n    print(findStd(s))"
    },
    {
      "rank": 99,
      "score": 2.006215542699554,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n\n\"\"\"\nGiven a string, find all the \"std\" in it.\n\nExample 1:\n\nInput:\n\"stdlib\"\n\nOutput:\n[\"std\", \"lib\"]\n\nExample 2:\n\nInput:\n\"the sky is blue\"\n\nOutput:\n[\"blue\", \"sky\", \"the\"]\n\"\"\"\n\n# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param {string} s\n    # @return {integer[]}\n    def findStd(self, s):\n        std_count = 0\n        for c in s:\n            if c =='std':\n                std_count += 1\n        return [std_count] + self.findStd(s[std_count:])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findStd(\"stdlib\")"
    },
    {
      "rank": 100,
      "score": 1.6901274479551278,
      "candidate": "def find_std(s):\n    return s.find('std')\n\nif __name__ == '__main__':\n    s ='std'\n    print(find_std(s))\n    s ='stdstd'\n    print(find_std(s))\n    s ='std std'\n    print(find_std(s))\n    s ='stdstdstd'\n    print(find_std(s))\n    s ='std std std'\n    print(find_std(s))\n    s ='std std std std'\n    print(find_std(s))\n    s ='stdstdstdstdstdstdstdstdstdstdstd'\n    print(find_std(s))\n    s ='std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std std"
    }
  ]
}