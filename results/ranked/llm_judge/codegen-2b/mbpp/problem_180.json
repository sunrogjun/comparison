{
  "timestamp": "2025-09-14T18:42:05.271213",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 180,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# TODO:\n#   - add a test for a month with less than 30 days\n#   - add a test for a month with 30 days but only one day is not 30\n#   - add a test for a month with 30 days and more than 30 days\n\n\nclass Solution:\n    def checkIsHappy(self, month: str) -> bool:\n        if len(month)!= 3:\n            return False\n        nums = [0] * 10\n        for i in range(10):\n            nums[i] = i\n        for i in range(1, 11):\n            nums[i] = (nums[(i - 1) % 10] + i) % 10\n        for i in range(1, 11):\n            nums[i] = (nums[i] + i) % 10\n        for i in range(1, 11):\n            nums[i] = (nums[i] + i) % 10\n        nums[0] = 0\n        for i in range(1, 11):\n            if nums[i] == nums[(i + 1) % 10]:\n                return False\n        return True"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/30-days-of-the-month/problem\n#!/usr/bin/python\n\ndef is_30_days_of_the_month(month):\n    \"\"\"\n    :type month: str\n    :rtype: bool\n    \"\"\"\n    if len(month)!= 3:\n        return False\n    \n    if month[2]!= '0':\n        return False\n    \n    if month[0] not in \"JanFebMarAprMayJunJulAugSepOctNovDec\":\n        return False\n    \n    return True\n\nif __name__ == '__main__':\n    for i in range(1, 31):\n        print(is_30_days_of_the_month(str(i)))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import re\n\n\ndef is_30_days(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    pattern = re.compile('^(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)$')\n    return pattern.match(month_name) is not None"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/30-days-of-the-month/problem\n\n# 30 days of the month\n# 30 days of the week\n# 30 days of the year\n# 30 days of the month\n# 30 days of the month in reverse order\n\n# Week of the year\n\n# Week of the year\n\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the year\n# Date of the year in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in reverse order\n\n# Date of the month\n# Date of the month in reverse order\n# Date of the month\n# Date of the month in"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nclass Month:\n    \"\"\"\n    month class\n    \"\"\"\n    def __init__(self, month):\n        self.month = month\n        self.days = []\n    def addday(self, day):\n        self.days.append(day)\n\n\ndef check(month):\n    \"\"\"\n    check month and return the count of 30 days\n    \"\"\"\n    m = Month(month)\n    for i in range(1, 31):\n        m.addday(i)\n    return len(m.days) == 30\n\nif __name__ == '__main__':\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June')\n    # Month = Month('June"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# #############################################################################\n#\n#  Copyright (c) 2016, Oleg Borschuk\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are met:\n#\n#  * Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n#\n#  * Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n#  * Neither the name of Image Engine Design nor the names of any\n#    other contributors to this software may be used to endorse or promote products\n#    derived from this software without specific prior written permission.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n#############################################################################\n\nimport sys\n\nfrom IECore import *\n\nif __name__ == \"__main__\":"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/30-days/problem\n\n# First, find the number of days in the month.\n\ndef month_length(month):\n    if month == \"January\":\n        return 31\n    elif month == \"February\":\n        return 28\n    elif month == \"March\":\n        return 31\n    elif month == \"April\":\n        return 30\n    elif month == \"May\":\n        return 31\n    elif month == \"June\":\n        return 30\n    elif month == \"July\":\n        return 31\n    elif month == \"August\":\n        return 31\n    elif month == \"September\":\n        return 30\n    elif month == \"October\":\n        return 31\n    elif month == \"November\":\n        return 30\n    elif month == \"December\":\n        return 31\n\n# Now, check if the month contains 30 days or not.\n\ndef month_contains_30(month):\n    # Check if the month has 30 days.\n    if month_length(month) == 30:\n        return True\n    else:\n        return False\n\n# Check if the month contains 30 days.\n\nif __name__ == \"__main__\":\n    month = input().strip()\n    if month_contains_30(month):\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/month-name-contains-30-days/discuss/453075/Python-Code-Solution-Solution-using-recursion-and-iteration-with-explanation\n\n# 1.\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days in the first and last three months\n# 30 days in a month is the sum of the days"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/day-of-the-month/\n# Given a month string, return true if it is 30 days, or false otherwise.\n\n# Example 1:\n# Input: \"February\"\n# Output: true\n# Example 2:\n# Input: \"January\"\n# Output: false\n# Example 3:\n# Input: \"December\"\n# Output: true\n\n# 2017.04.01 Rewrite\nclass Solution(object):\n    def isLeapYear(self, year):\n        if year % 400 == 0:\n            return True\n        elif year % 100 == 0:\n            return False\n        elif year % 4 == 0:\n            return True\n        else:\n            return False\n\n    def isMonth30(self, month):\n        if self.isLeapYear(month):\n            return False\n        if month == \"January\" or month == \"February\" or month == \"March\" or month == \"April\" or month == \"May\":\n            return True\n        elif month == \"June\" or month == \"July\" or month == \"August\" or month == \"September\" or month == \"October\" or month == \"November\" or month == \"December\":\n            return False\n        else:\n            return False\n\n# 2017.04.01 Rewrite\nclass Solution(object):\n    def isMonth30(self, month):\n        if month.isalpha():\n            if month == \"January\" or month == \"February\" or month == \"March\" or month == \"April\" or month == \"May\":\n                return True\n            elif month == \"June\" or month == \"July\" or month == \"August\" or month == \"September\" or month == \"October\" or month == \"November\" or month == \"December\":\n                return False\n            else:\n                return False\n        else:\n            if month == \"January\" or month == \"February\" or month == \"March\" or month == \"April\" or month == \"May\" or month == \"June\" or month == \"July\" or month == \"August\" or month == \"September\" or month == \"October\" or month == \"November\" or month == \"December\":\n                return True\n            else:\n                return False"
    },
    {
      "rank": 10,
      "score": 8.0,
      "candidate": "from collections import Counter\n\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\ndef check_month(month_name):\n    month_dict = Counter(month_name)\n    if 30 in month_dict:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(check_month('May'))\n    print(check_month('January'))\n    print(check_month('June'))\n    print(check_month('December'))\n    print(check_month('December'))"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "# TODO:\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# - write a function that takes a month name as input and returns true or false\n# -"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def is_30_days(month_name):\n\tmonth_name = month_name.lower()\n\tif len(month_name)!= 3:\n\t\treturn False\n\tif month_name.find('jan') > -1:\n\t\treturn False\n\tif month_name.find('feb') > -1:\n\t\treturn False\n\tif month_name.find('mar') > -1:\n\t\treturn False\n\tif month_name.find('apr') > -1:\n\t\treturn False\n\tif month_name.find('may') > -1:\n\t\treturn False\n\tif month_name.find('jun') > -1:\n\t\treturn False\n\tif month_name.find('jul') > -1:\n\t\treturn False\n\tif month_name.find('aug') > -1:\n\t\treturn False\n\tif month_name.find('sep') > -1:\n\t\treturn False\n\tif month_name.find('oct') > -1:\n\t\treturn False\n\tif month_name.find('nov') > -1:\n\t\treturn False\n\tif month_name.find('dec') > -1:\n\t\treturn False\n\treturn True\n\nprint is_30_days('may')\nprint is_30_days('apr')\nprint is_30_days('jul')\nprint is_30_days('oct')\nprint is_30_days('nov')\nprint is_30_days('feb')\nprint is_30_days('mar')\nprint is_30_days('apr')\nprint is_30_days('jun')\nprint is_30_days('sep')\nprint is_30_days('dec')\nprint is_30_days('mar')\nprint is_30_days('feb')\nprint is_30_days('mar')"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/30-days-of-the-month\n\ndef check_month(month):\n    count = 0\n    for i in range(1, 31):\n        if month == str(i):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    month = input().strip()\n    count = check_month(month)\n    print(count)"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def is_30_days(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    return len(month_name) == 3 and month_name in [\n        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n    ]\n\nprint(is_30_days(\"January\"))\nprint(is_30_days(\"February\"))\nprint(is_30_days(\"March\"))\nprint(is_30_days(\"April\"))\nprint(is_30_days(\"May\"))\nprint(is_30_days(\"June\"))\nprint(is_30_days(\"July\"))\nprint(is_30_days(\"August\"))\nprint(is_30_days(\"September\"))\nprint(is_30_days(\"October\"))\nprint(is_30_days(\"November\"))\nprint(is_30_days(\"December\"))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/30-days-of-the-month/problem\n\n#!/bin/python\n\nmonth = input()\n\nif month == \"January\":\n    if input() == \"30\":\n        print \"true\"\n    else:\n        print \"false\"\nelse:\n    if input() == \"30\":\n        print \"false\"\n    else:\n        print \"true\""
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "import re\n\ndef month_has_30_days(month):\n    return month in ( 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' )\n\nif __name__ == '__main__':\n    assert month_has_30_days('Jan')\n    assert month_has_30_days('Feb')\n    assert month_has_30_days('Mar')\n    assert month_has_30_days('Apr')\n    assert month_has_30_days('May')\n    assert month_has_30_days('Jun')\n    assert month_has_30_days('Jul')\n    assert month_has_30_days('Aug')\n    assert month_has_30_days('Sep')\n    assert month_has_30_days('Oct')\n    assert month_has_30_days('Nov')\n    assert month_has_30_days('Dec')"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def is_30_days(month_name):\n\tif month_name == 'January':\n\t\treturn True\n\telif month_name == 'February':\n\t\treturn True\n\telif month_name == 'March':\n\t\treturn True\n\telif month_name == 'April':\n\t\treturn True\n\telif month_name == 'May':\n\t\treturn True\n\telif month_name == 'June':\n\t\treturn True\n\telif month_name == 'July':\n\t\treturn True\n\telif month_name == 'August':\n\t\treturn True\n\telif month_name == 'September':\n\t\treturn True\n\telif month_name == 'October':\n\t\treturn True\n\telif month_name == 'November':\n\t\treturn True\n\telif month_name == 'December':\n\t\treturn True\n\telse:\n\t\treturn False\n\nif __name__ == '__main__':\n\tprint(is_30_days('June'))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "import re\n\ndef is_30_days(month):\n    if len(month) == 3:\n        month = month[:1] + month[2:]\n    month_regex = re.compile(\"^\" + month + \"$\")\n    return bool(month_regex.match(\"01\") or month_regex.match(\"03\") or month_regex.match(\"05\") or month_regex.match(\"07\") or month_regex.match(\"08\") or month_regex.match(\"10\") or month_regex.match(\"12\"))\n\ndef main():\n    for month in (\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"):\n        print(\"{0}: {1}\".format(month, is_30_days(month)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "import re\n\n\ndef is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n\n\ndef check_month_30_days(month_name):\n    if len(month_name)!= 3:\n        raise ValueError('Invalid month name')\n\n    if not is_leap_year(int(month_name[0:2])):\n        raise ValueError('Invalid month name')\n\n    if int(month_name[2:]) not in range(1, 32):\n        raise ValueError('Invalid month name')\n\n\ndef main():\n    check_month_30_days('january')\n    check_month_30_days('february')\n    check_month_30_days('march')\n    check_month_30_days('april')\n    check_month_30_days('may')\n    check_month_30_days('june')\n    check_month_30_days('july')\n    check_month_30_days('august')\n    check_month_30_days('september')\n    check_month_30_days('october')\n    check_month_30_days('november')\n    check_month_30_days('december')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "import re\n\n\ndef check_month(month_name):\n    '''\n    :type month_name: str\n    :rtype: bool\n    '''\n    if re.search(r'^\\d+$', month_name):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(check_month('January'))\n    print(check_month('December'))\n    print(check_month('December'))\n    print(check_month('November'))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "import re\n\ndef check_month(month):\n    if month == 'January':\n        return False\n    elif month == 'February':\n        return False\n    elif month == 'March':\n        return False\n    elif month == 'April':\n        return False\n    elif month == 'May':\n        return False\n    elif month == 'June':\n        return False\n    elif month == 'July':\n        return False\n    elif month == 'August':\n        return False\n    elif month == 'September':\n        return False\n    elif month == 'October':\n        return False\n    elif month == 'November':\n        return False\n    elif month == 'December':\n        return False\n    else:\n        return True\n\ndef main():\n    while True:\n        month = input('Enter the month name: ')\n        if check_month(month):\n            print('The month name is not 30 days')\n        else:\n            print('The month name is 30 days')\n            break\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def is_30_days(month):\n    return len(month) == 3 and month in ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')\n\nprint(is_30_days('April'))\nprint(is_30_days('January'))\nprint(is_30_days('February'))\nprint(is_30_days('March'))\nprint(is_30_days('April'))\nprint(is_30_days('December'))\nprint(is_30_days('May'))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/30-days-of-the-month\n\n# TODO\n# - Implement a new function\n# - Test the function\n\n# - Test:\n
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "import re\n\n\ndef is_30_days(month):\n    \"\"\"\n    :type month: str\n    :rtype: bool\n    \"\"\"\n    month_re = re.compile(r'^([a-z]{3})([a-z]{3})([a-z]{3})([a-z]{3})$')\n    if month_re.match(month):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_30_days('august'))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "# https://www.geeksforgeeks.org/check-if-a-month-contains-30-days/\n\ndef is_30_days(month):\n    return len(month) == 3 and month.endswith('th')\n\nif __name__ == '__main__':\n    print is_30_days('May')\n    print is_30_days('April')\n    print is_30_days('November')\n    print is_30_days('December')\n    print is_30_days('June')"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def check_30_days(month):\n    if len(month)!= 3:\n        return False\n    if month[2]!= '0':\n        return False\n    if int(month[:2]) < 1 or int(month[:2]) > 12:\n        return False\n    if month[:2] == '0':\n        return False\n    if month[:3] == 'Jan':\n        return False\n    if month[:3] == 'Feb':\n        return False\n    if month[:3] == 'Mar':\n        return False\n    if month[:3] == 'Apr':\n        return False\n    if month[:3] == 'May':\n        return False\n    if month[:3] == 'Jun':\n        return False\n    if month[:3] == 'Jul':\n        return False\n    if month[:3] == 'Aug':\n        return False\n    if month[:3] == 'Sep':\n        return False\n    if month[:3] == 'Oct':\n        return False\n    if month[:3] == 'Nov':\n        return False\n    if month[:3] == 'Dec':\n        return True\n    return False\n\nif __name__ == '__main__':\n    month = 'Dec'\n    print(check_30_days(month))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nclass Solution(object):\n    def isValid(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if month[2] == '0':\n            return False\n        if int(month[0:2]) > 12 or int(month[0:2]) < 1:\n            return False\n        if int(month[0:2]) > 12:\n            return False\n        if int(month[0:2]) < 1:\n            return False\n        return True\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isValid(\"1st\")\n    print s.isValid(\"jan\")\n    print s.isValid(\"01\")\n    print s.isValid(\"12\")\n    print s.isValid(\"1\")\n    print s.isValid(\"1st\")\n    print s.isValid(\"1st\")\n    print s.isValid(\"01\")\n    print s.isValid(\"12\")\n    print s.isValid(\"1\")\n    print s.isValid(\"12\")\n    print s.isValid(\"01\")\n    print s.isValid(\"jan\")\n    print s.isValid(\"jan\")"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def check_month(month):\n    if month == 'January':\n        return True\n    elif month == 'February':\n        return True\n    elif month == 'March':\n        return True\n    elif month == 'April':\n        return True\n    elif month == 'May':\n        return True\n    elif month == 'June':\n        return True\n    elif month == 'July':\n        return True\n    elif month == 'August':\n        return True\n    elif month == 'September':\n        return True\n    elif month == 'October':\n        return True\n    elif month == 'November':\n        return True\n    elif month == 'December':\n        return True\n    else:\n        return False\n\n# Check for 30 days\nprint(check_month('April'))\nprint(check_month('June'))\nprint(check_month('December'))\nprint(check_month('June'))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/30-days-of-the-month/problem\n\ndef is_30days(month):\n    if month == \"January\" or month == \"February\" or month == \"March\" or month == \"April\" or month == \"May\":\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    month = input().strip()\n    month_list = month.split(\" \")\n    if len(month_list) == 1:\n        print(is_30days(month))\n    else:\n        for i in range(len(month_list)):\n            if is_30days(month_list[i]):\n                print(month_list[i])\n                break"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "import re\n\ndef is_30_days(month_name):\n    return re.match(r'^(january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|"
    },
    {
      "rank": 31,
      "score": 2.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def is_leap_year(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 400 == 0 or year % 4 == 0:\n            return True\n        else:\n            return False\n\n    def is_leap_month(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        return self.is_leap_year(month) and month % 4 == 0\n\n    def is_leap_month_name(self, month_name):\n        \"\"\"\n        :type month_name: str\n        :rtype: bool\n        \"\"\"\n        return self.is_leap_month(self.to_int(month_name))\n\n\nif __name__ == \"__main__\":\n    Solution().is_leap_month_name(\"February\")"
    },
    {
      "rank": 32,
      "score": 1.0,
      "candidate": "def check_month(month):\n    if month == 'January':\n        return True\n    elif month == 'February':\n        return True\n    elif month == 'March':\n        return True\n    elif month == 'April':\n        return True\n    elif month == 'May':\n        return True\n    elif month == 'June':\n        return True\n    elif month == 'July':\n        return True\n    elif month == 'August':\n        return True\n    elif month == 'September':\n        return True\n    elif month == 'October':\n        return True\n    elif month == 'November':\n        return True\n    elif month == 'December':\n        return True\n    else:\n        return False\n\n# Test Cases\nprint(check_month('April'))\nprint(check_month('April'))\nprint(check_month('August'))\nprint(check_month('March'))\nprint(check_month('August'))\nprint(check_month('December'))\nprint(check_month('January'))\nprint(check_month('December'))\nprint(check_month('February'))\nprint(check_month('December'))\nprint(check_month('December'))"
    },
    {
      "rank": 33,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/month-with-30-days/description/\n\nclass Solution(object):\n    def is_leap_year(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 4!= 0:\n            return False\n        return year % 100 == 0 or year % 400 == 0"
    },
    {
      "rank": 34,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/168047/Python-Solution-using-Python-2-and-list\n# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/251736/Python-Solution-with-List-and-Recursion-with-Python-2-and-3-6\n\nclass Solution(object):\n    def isLeapYear(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            if year % 4 == 0:\n                return True\n            else:\n                return False\n\n    def is30DaysMonth(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month == 2 and self.isLeapYear(year):\n            return True\n        elif month == 2 and not self.isLeapYear(year):\n            return False\n        elif month == 3 and self.isLeapYear(year):\n            return True\n        elif month == 3 and not self.isLeapYear(year):\n            return False\n        elif month == 4 and self.isLeapYear(year):\n            return True\n        elif month == 4 and not self.isLeapYear(year):\n            return False\n        elif month == 5 and self.isLeapYear(year):\n            return True\n        elif month == 5 and not self.isLeapYear(year):\n            return False\n        elif month == 6 and self.isLeapYear(year):\n            return True\n        elif month == 6 and not self.isLeapYear(year):\n            return False\n        elif month == 7 and self.isLeapYear(year):\n            return True\n        elif month == 7 and not self.isLeapYear(year):\n            return False\n        elif month == 8 and self.isLeapYear(year):\n            return True\n        elif month"
    },
    {
      "rank": 35,
      "score": 1.0,
      "candidate": "def is_30days(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if len(month_name)!= 3:\n        return False\n    if month_name.isdigit() is False:\n        return False\n    if int(month_name) not in range(1, 13):\n        return False\n    if int(month_name) in range(1, 4):\n        return True\n    if int(month_name) in range(5, 9):\n        return False\n    if int(month_name) in range(10, 13):\n        return True\n    if int(month_name) in range(14, 17):\n        return False\n    if int(month_name) in range(18, 21):\n        return True\n    if int(month_name) in range(22, 26):\n        return False\n    if int(month_name) in range(27, 30):\n        return True\n    return False\n\nif __name__ == '__main__':\n    print(is_30days('March'))\n    print(is_30days('April'))\n    print(is_30days('May'))\n    print(is_30days('June'))\n    print(is_30days('July'))\n    print(is_30days('August'))\n    print(is_30days('September'))\n    print(is_30days('October'))\n    print(is_30days('November'))\n    print(is_30days('December'))"
    },
    {
      "rank": 36,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def isValid(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        return True if month in ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec') else False\n\n    def isValid30(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        return True if month in ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec') else False\n\n\nif __name__ == \"__main__\":\n    print Solution().isValid(\"Jan\")\n    print Solution().isValid(\"Feb\")\n    print Solution().isValid(\"Mar\")\n    print Solution().isValid(\"Apr\")\n    print Solution().isValid(\"May\")\n    print Solution().isValid(\"Jun\")\n    print Solution().isValid(\"Jul\")\n    print Solution().isValid(\"Aug\")\n    print Solution().isValid(\"Sep\")\n    print Solution().isValid(\"Oct\")\n    print Solution().isValid(\"Nov\")\n    print Solution().isValid(\"Dec\")"
    },
    {
      "rank": 37,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/113861/Python-DP-Solution\n# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/113864/Python-DP-Solution-3-lines\n# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/113867/Python-DP-Solution-3-lines\n# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/113868/Python-DP-Solution-2-lines\n# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/113869/Python-DP-Solution-1-line\n# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/113870/Python-DP-Solution-1-line\n# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/113871/Python-DP-Solution-2-lines\n# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/113872/Python-DP-Solution-1-line\n\nfrom typing import List\n\n\nclass Solution:\n    def contains30Days(self, month: str) -> bool:\n        days = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"]\n        for i in range(len(days)):\n            if month in days[i:]:\n                return True\n        return False"
    },
    {
      "rank": 38,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/valid-month/\n\n\nclass Solution(object):\n    def valid_month(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == 'December':\n            return False\n        elif month == 'January':\n            return True\n        elif month == 'February':\n            return False\n        elif month == 'March':\n            return True\n        elif month == 'April':\n            return True\n        elif month == 'May':\n            return True\n        elif month == 'June':\n            return True\n        elif month == 'July':\n            return True\n        elif month == 'August':\n            return True\n        elif month == 'September':\n            return True\n        elif month == 'October':\n            return True\n        elif month == 'November':\n            return True\n        elif month == 'December':\n            return True\n        else:\n            return False"
    },
    {
      "rank": 39,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-month-name-contains-30-days/\n\nclass Solution(object):\n    def check_month(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if not month[0].isdigit() or not month[1].isdigit() or not month[2].isdigit():\n            return False\n        if int(month[0]) > 12 or int(month[1]) > 12 or int(month[2]) > 12:\n            return False\n        if int(month[0]) < 1 or int(month[1]) < 1 or int(month[2]) < 1:\n            return False\n        return month[0] == month[1] == month[2]\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.check_month('jan') == False\n    assert s.check_month('feb') == False\n    assert s.check_month('mar') == False\n    assert s.check_month('apr') == False\n    assert s.check_month('may') == False\n    assert s.check_month('jun') == False\n    assert s.check_month('jul') == False\n    assert s.check_month('aug') == False\n    assert s.check_month('sep') == False\n    assert s.check_month('oct') == False\n    assert s.check_month('nov') == False\n    assert s.check_month('dec') == False\n    assert s.check_month('jan-feb') == False\n    assert s.check_month('feb-mar') == False\n    assert s.check_month('mar-apr') == False\n    assert s.check_month('apr-may') == False\n    assert s.check_month('may-jun') == False\n    assert s.check_month('jun-jul') == False\n    assert s.check_month('jul-aug') == False\n    assert s.check_month('aug-sep') == False\n    assert s.check"
    },
    {
      "rank": 40,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isLastMonth30Days(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == 'December':\n            return True\n        if month == 'February':\n            return True\n        if month == 'January':\n            return True\n        if month == 'March':\n            return True\n        if month == 'May':\n            return True\n        if month == 'June':\n            return True\n        if month == 'July':\n            return True\n        if month == 'August':\n            return True\n        if month == 'September':\n            return True\n        if month == 'October':\n            return True\n        if month == 'November':\n            return True\n        if month == 'December':\n            return True\n        return False"
    },
    {
      "rank": 41,
      "score": 1.0,
      "candidate": "def check_30_days(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    month_name = month_name.lower()\n    if month_name == 'january':\n        return True\n    elif month_name == 'february':\n        return True\n    elif month_name =='march':\n        return True\n    elif month_name == 'april':\n        return True\n    elif month_name =='may':\n        return True\n    elif month_name == 'june':\n        return True\n    elif month_name == 'july':\n        return True\n    elif month_name == 'august':\n        return True\n    elif month_name =='september':\n        return True\n    elif month_name == 'october':\n        return True\n    elif month_name == 'november':\n        return True\n    elif month_name == 'december':\n        return True\n    else:\n        return False\n\nprint(check_30_days('june'))\nprint(check_30_days('march'))\nprint(check_30_days('may'))\nprint(check_30_days('july'))\nprint(check_30_days('august'))\nprint(check_30_days('september'))\nprint(check_30_days('october'))\nprint(check_30_days('november'))\nprint(check_30_days('december'))"
    },
    {
      "rank": 42,
      "score": 1.0,
      "candidate": "# -*- coding: utf-8 -*-\n#\n# check_month_30s_name.py\n#\n# This file is part of NEST.\n#\n# Copyright (C) 2004 The NEST Initiative\n#\n# NEST is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# NEST is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with NEST.  If not, see <http://www.gnu.org/licenses/>.\n\n'''\ncheck_month_30s_name.py\n------------------\n\nThis script checks whether the given month name contains 30 days or not.\n\nThis script is intended to be run from the command line.\n\nInputs:\n    month_name: A string, the name of the month to be checked.\n\nOutput:\n    True or False, depending on whether the month name contains 30 days or not.\n'''\n\n# import the necessary modules\nimport math\nimport re\nimport sys\n\n# define the names of the days of the month\nday_names = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n\n# define the names of the months\nmonth_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n# define a regular expression that matches the month name\nregexp_month_name = re.compile('(January|February|March|April|May|June|July|August|September|October|November|December)', re.IGNORECASE)\n\n# define a regular expression that matches the day name\nregexp_day_name = re.compile('(Sunday|Monday|Tuesday|Wednesday|Thursday|"
    },
    {
      "rank": 43,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/day-of-month-of-month-name/\n# http://www.cnblogs.com/grandyang/p/4598558.html\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        d = {'JAN':31, 'FEB':28, 'MAR':31, 'APR':30, 'MAY':31, 'JUN':30, 'JUL':31, 'AUG':31, 'SEP':30, 'OCT':31, 'NOV':30, 'DEC':31}\n        return s in d"
    },
    {
      "rank": 44,
      "score": 1.0,
      "candidate": "def is_30_days(month_name):\n    if month_name == \"January\":\n        return True\n    elif month_name == \"February\":\n        return True\n    elif month_name == \"March\":\n        return True\n    elif month_name == \"April\":\n        return True\n    elif month_name == \"May\":\n        return True\n    elif month_name == \"June\":\n        return True\n    elif month_name == \"July\":\n        return True\n    elif month_name == \"August\":\n        return True\n    elif month_name == \"September\":\n        return True\n    elif month_name == \"October\":\n        return True\n    elif month_name == \"November\":\n        return True\n    elif month_name == \"December\":\n        return True\n    else:\n        return False\n\n\nprint is_30_days(\"November\")"
    },
    {
      "rank": 45,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isLeapYear(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 100 == 0 and year % 400 == 0:\n            return True\n        else:\n            return False\n\n    def isLeapYear2(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 4 == 0 and year % 100!= 0:\n            return True\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    Solution().isLeapYear(2016)"
    },
    {
      "rank": 46,
      "score": 1.0,
      "candidate": "# 30 days in a month\nm30 = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]\n\ndef check_month_30(month):\n    if month in m30:\n        return True\n    else:\n        return False\n\n# 30 days in a month\nm30 = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]\n\ndef check_month_30(month):\n    if month in m30:\n        return True\n    else:\n        return False\n\n# 30 days in a month\nm30 = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]\n\ndef check_month_30(month):\n    if month in m30:\n        return True\n    else:\n        return False\n\n# 30 days in a month\nm30 = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]\n\ndef check_month_30(month):\n    if month in m30:\n        return True\n    else:\n        return False\n\n# 30 days in a month\nm30 = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]\n\ndef check_month_30(month):\n    if month in m30:\n        return True\n    else:\n        return False\n\n# 30 days in a month\nm30 = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\","
    },
    {
      "rank": 47,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-month-name-contains-30-days/discuss/231300/Python-solution-with-explanation\n\nclass Solution(object):\n    def checkIsValid(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n        if month in days:\n            return True\n        else:\n            return False\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.checkIsValid(month)"
    },
    {
      "rank": 48,
      "score": 1.0,
      "candidate": "# Definition for a month.\nclass Month:\n    def __init__(self, month_name):\n        self.month_name = month_name\n        self.day_count = 0\n\n    def get_day_count(self):\n        return self.day_count\n\nclass Solution(object):\n    def check_month(self, month_name):\n        \"\"\"\n        :type month_name: str\n        :rtype: bool\n        \"\"\"\n        month = Month(month_name)\n        for i in range(1, 32):\n            month.day_count += (i % 10) == 3\n        return month.day_count == 30\n\nif __name__ == \"__main__\":\n    assert Solution().check_month('January') == True\n    assert Solution().check_month('February') == False\n    assert Solution().check_month('November') == True\n    assert Solution().check_month('December') == False"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "def is_30_days_in_a_month(month_name):\n    if len(month_name)!= 3:\n        return False\n    if month_name[0]!= 'J' and month_name[1]!= 'F' and month_name[2]!= 'A':\n        return False\n    if int(month_name[0]) > 12 or int(month_name[1]) > 12 or int(month_name[2]) > 12:\n        return False\n    if month_name[0] == 'J':\n        if month_name[1] == 'F':\n            if month_name[2] == 'A':\n                return True\n    elif month_name[0] == 'F':\n        if month_name[1] == 'A':\n            if month_name[2] == 'J':\n                return True\n    elif month_name[0] == 'A':\n        if month_name[1] == 'J':\n            if month_name[2] == 'F':\n                return True\n    return False\n\nif __name__ == '__main__':\n    print(is_30_days_in_a_month('JAN'))\n    print(is_30_days_in_a_month('FEB'))\n    print(is_30_days_in_a_month('MAR'))\n    print(is_30_days_in_a_month('APR'))\n    print(is_30_days_in_a_month('MAY'))\n    print(is_30_days_in_a_month('JUN'))\n    print(is_30_days_in_a_month('JUL'))\n    print(is_30_days_in_a_month('AUG'))\n    print(is_30_days_in_a_month('SEP'))\n    print(is_30_days_in_a_month('OCT'))\n    print(is_30_days_in_a_month('NOV'))\n    print(is_30_days_in_a_month('DEC'))"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "def check_if_month_contains_30_days(month_name):\n    if month_name.lower() in ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']:\n        return True\n    else:\n        return False\n\n# Test Cases\nprint(check_if_month_contains_30_days('march'))\nprint(check_if_month_contains_30_days('february'))\nprint(check_if_month_contains_30_days('may'))\nprint(check_if_month_contains_30_days('june'))\nprint(check_if_month_contains_30_days('april'))\nprint(check_if_month_contains_30_days('september'))\nprint(check_if_month_contains_30_days('october'))\nprint(check_if_month_contains_30_days('november'))\nprint(check_if_month_contains_30_days('december'))"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/check-if-month-contains-30-days/discuss/91447/Python-solution-using-dictionary\nclass Solution(object):\n    def isMonth30Days(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        monthDict = {'Jan': 31, 'Feb': 29, 'Mar': 31, 'Apr': 30, 'May': 31, 'Jun': 30,\n                     'Jul': 31, 'Aug': 31, 'Sep': 30, 'Oct': 31, 'Nov': 30, 'Dec': 31}\n        return monthDict.get(month, -1) == 30"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\n# Write your code here\n\ndef check_month(month):\n    if month == 'January':\n        return True\n    elif month == 'February':\n        return True\n    elif month == 'March':\n        return True\n    elif month == 'April':\n        return True\n    elif month == 'May':\n        return True\n    elif month == 'June':\n        return True\n    elif month == 'July':\n        return True\n    elif month == 'August':\n        return True\n    elif month == 'September':\n        return True\n    elif month == 'October':\n        return True\n    elif month == 'November':\n        return True\n    elif month == 'December':\n        return True\n    return False\n\n# test cases\n\nprint check_month('January')\nprint check_month('February')\nprint check_month('March')\nprint check_month('April')\nprint check_month('May')\nprint check_month('June')\nprint check_month('July')\nprint check_month('August')\nprint check_month('September')\nprint check_month('October')\nprint check_month('November')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint check_month('December')\nprint"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "def is_30_days_month(month_name):\n\t\"\"\"\n\t:type month_name: str\n\t:rtype: bool\n\t\"\"\"\n\tif len(month_name)!= 3:\n\t\treturn False\n\tif month_name[2] not in 'ABCD':\n\t\treturn False\n\tif month_name[0] == 'J' or month_name[0] == 'F':\n\t\treturn False\n\tif month_name[0] == 'A':\n\t\treturn False\n\tif month_name[0] == 'M':\n\t\treturn False\n\tif month_name[0] == 'N':\n\t\treturn False\n\tif month_name[0] == 'L':\n\t\treturn False\n\tif month_name[0] == 'P':\n\t\treturn False\n\tif month_name[0] == 'S':\n\t\treturn False\n\tif month_name[0] == 'U':\n\t\treturn False\n\tif month_name[0] == 'V':\n\t\treturn False\n\tif month_name[0] == 'X':\n\t\treturn False\n\tif month_name[0] == 'Z':\n\t\treturn False\n\tif month_name[0] == 'W':\n\t\treturn False\n\tif month_name[0] == 'Y':\n\t\treturn False\n\tif month_name[0] == 'Q':\n\t\treturn False\n\tif month_name[0] == 'T':\n\t\treturn False\n\tif month_name[0] == 'T':\n\t\treturn False\n\tif month_name[0] == 'U':\n\t\treturn False\n\tif month_name[0] == 'V':\n\t\treturn False\n\tif month_name[0] == 'W':\n\t\treturn False\n\tif month_name[0] == 'X':\n\t\treturn False\n\tif month_name[0] == 'Y':\n\t\treturn False\n\tif month_name[0] == 'Z':\n\t\treturn False\n\tif month_name[0] == 'W':\n\t\treturn False\n\tif month_name[0] == 'X':\n\t\treturn False\n\tif month_name[0] == 'Y':\n\t\treturn False\n\tif month_"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/valid-month-name/\n\nclass Solution(object):\n    def is_valid_month(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if s.isalpha():\n            return False\n        if s == 'January':\n            return True\n        if s == 'February':\n            return True\n        if s == 'March':\n            return True\n        if s == 'April':\n            return True\n        if s == 'May':\n            return True\n        if s == 'June':\n            return True\n        if s == 'July':\n            return True\n        if s == 'August':\n            return True\n        if s == 'September':\n            return True\n        if s == 'October':\n            return True\n        if s == 'November':\n            return True\n        if s == 'December':\n            return True\n        return False\n\n# test\n# s = 'June'\n# print(Solution().is_valid_month(s))\n# s = 'January'\n# print(Solution().is_valid_month(s))\n# s = 'February'\n# print(Solution().is_valid_month(s))\n# s = 'March'\n# print(Solution().is_valid_month(s))\n# s = 'April'\n# print(Solution().is_valid_month(s))\n# s = 'May'\n# print(Solution().is_valid_month(s))\n# s = 'June'\n# print(Solution().is_valid_month(s))\n# s = 'July'\n# print(Solution().is_valid_month(s))\n# s = 'August'\n# print(Solution().is_valid_month(s))\n# s = 'September'\n# print(Solution().is_valid_month(s))\n# s = 'October'\n# print(Solution().is_valid_month(s))\n# s = 'November'\n# print(Solution().is_valid_month(s))\n# s = 'December'\n# print(Solution().is_valid_month(s))"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "from datetime import datetime\n\n# 30 days in a month\nMONTHS = {\n    'Jan': 31,\n    'Feb': 28,\n    'Mar': 31,\n    'Apr': 30,\n    'May': 31,\n    'Jun': 30,\n    'Jul': 31,\n    'Aug': 31,\n    'Sep': 30,\n    'Oct': 31,\n    'Nov': 30,\n    'Dec': 31\n}\n\n\ndef month_contains_30_days(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    month_name = month_name.lower()\n    if month_name not in MONTHS:\n        return False\n    return MONTHS[month_name] == 30\n\n\ndef test_month_contains_30_days():\n    assert month_contains_30_days('january')\n    assert month_contains_30_days('february')\n    assert not month_contains_30_days('march')\n    assert not month_contains_30_days('april')\n    assert not month_contains_30_days('may')\n    assert not month_contains_30_days('june')\n    assert not month_contains_30_days('july')\n    assert not month_contains_30_days('august')\n    assert month_contains_30_days('september')\n    assert month_contains_30_days('october')\n    assert month_contains_30_days('november')\n    assert month_contains_30_days('december')\n\n\nif __name__ == '__main__':\n    test_month_contains_30_days()"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def checkValid(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        elif len(month) == 3:\n            if month[0] == 'A':\n                if month[1] == 'P' or month[1] == 'S':\n                    if month[2] == 'U':\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            elif month[0] == 'J':\n                if month[1] == 'N' or month[1] == 'L':\n                    if month[2] == 'A':\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            elif month[0] == 'F':\n                if month[1] == 'E':\n                    if month[2] == 'B':\n                        return True\n                    else:\n                        return False\n                elif month[1] == 'R':\n                    if month[2] == 'A':\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    print Solution().checkValid('FEB')\n    print Solution().checkValid('feb')\n    print Solution().checkValid('Feb')\n    print Solution().checkValid('Feb')\n    print Solution().checkValid('February')\n    print Solution().checkValid('February')\n    print Solution().checkValid('february')\n    print Solution().checkValid('F')"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/check-if-month-contains-30-days/discuss/59062/Python-Python-Python-2-days-per-month-and-30-days-per-month\n# https://oj.leetcode.com/problems/check-if-month-contains-30-days/discuss/82944/Python-Python-Python-2-days-per-month-and-30-days-per-month\n# https://oj.leetcode.com/problems/check-if-month-contains-30-days/discuss/82944/Python-Python-Python-2-days-per-month-and-30-days-per-month\n\n\n# DP\n# 11ms\nclass Solution(object):\n    def isLeapYear(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        return (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))\n\n    def checkMonth30Days(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if not self.isLeapYear(int(month)):\n            return False\n        return month in ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def validMonthName(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s)!= 12:\n            return False\n        if s[0]!= 'J' and s[1]!= 'F' and s[2]!= 'M' and s[3]!= 'A' and s[4]!= 'M' and s[5]!= 'J' and s[6]!= 'J' and s[7]!= 'A' and s[8]!= 'S' and s[9]!= 'O' and s[10]!= 'N' and s[11]!= 'D':\n            return False\n\n        if s[0] == 'J' and s[1] == 'F' and s[2] == 'M' and s[3] == 'A' and s[4] == 'M' and s[5] == 'J' and s[6] == 'J' and s[7] == 'A' and s[8] == 'S' and s[9] == 'O' and s[10] == 'N' and s[11] == 'D':\n            return False\n\n        for i in range(1, 13):\n            if s[i]!= '0' and s[i]!= '1' and s[i]!= '2' and s[i]!= '3' and s[i]!= '4' and s[i]!= '5' and s[i]!= '6' and s[i]!= '7' and s[i]!= '8' and s[i]!= '9':\n                return False\n\n        return True\n\n\nif __name__ == \"__main__\":\n    assert Solution().validMonthName(\"JAN\") == True\n    assert Solution().validMonthName(\"MAY\") == True\n    assert Solution().validMonthName(\"JUL\") == True\n    assert Solution().validMonthName(\"JUN\") == True\n    assert Solution().validMonthName(\"JULY\") == True\n    assert Solution().validMonthName(\"JUNE\") == True\n    assert Solution().validMonthName(\"DEC\") == False"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isLeapYear(self, year):\n        if year % 4!= 0:\n            return False\n        if year % 100!= 0:\n            if year % 400 == 0:\n                return True\n            return False\n        return True\n\n    def isLeapMonth(self, month):\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            return True\n        if month == 4 or month == 6 or month == 9 or month == 11:\n            return False\n        if self.isLeapYear(year):\n            if month == 2:\n                return True\n        return False\n\n    def isLeapYearMonth(self, month, year):\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            return True\n        if month == 4 or month == 6 or month == 9 or month == 11:\n            return False\n        if self.isLeapYear(year):\n            if month == 2:\n                return True\n        return False\n\n    # @param month, a string\n    # @return a boolean\n    def checkLeapYear(self, month):\n        if not month:\n            return False\n        year = 0\n        for i in range(len(month)):\n            year += int(month[i]) * (i + 1)\n        return self.isLeapYear(year)\n\n    # @param month, a string\n    # @return a boolean\n    def isLeapMonth(self, month):\n        if not month:\n            return False\n        year = 0\n        for i in range(len(month)):\n            year += int(month[i]) * (i + 1)\n        return self.isLeapYear(year)\n\n    # @param month, a string\n    # @return a boolean\n    def isLeapMonth2(self, month):\n        if not"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "import re\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month\n    if month.count('M') == 30:\n        return True\n    else:\n        return False\n\ndef check_30(month):\n    # 30 days in a month"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "def check_30(month):\n    if month in [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]:\n        return True\n    else:\n        return False\n\nprint(check_30(\"May\"))\nprint(check_30(\"June\"))\nprint(check_30(\"September\"))\nprint(check_30(\"December\"))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isLeapYear(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month > 12:\n            return False\n        return (month % 2) == 0\n\n    def isLeapYear_1(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month > 12:\n            return False\n        return (month % 2) == 0 and ((month % 4) == 0 or (month % 4) == 1)\n\n    def isLeapYear_2(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month > 12:\n            return False\n        return (month % 2) == 0 and ((month % 4) == 0 and (month % 100)!= 0)\n\n    def isLeapYear_3(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if month > 12:\n            return False\n        return (month % 2) == 0 and ((month % 4) == 0 and (month % 100) == 0)\n\n\nif __name__ == \"__main__\":\n    assert Solution().isLeapYear(3) == True\n    assert Solution().isLeapYear(9) == False\n    assert Solution().isLeapYear(10) == True\n    assert Solution().isLeapYear(12) == True\n    assert Solution().isLeapYear(15) == True\n    assert Solution().isLeapYear(21) == False\n    assert Solution().isLeapYear(23) == False\n    assert Solution().isLeapYear(29) == True\n    assert Solution().isLeapYear(30) == True\n    assert Solution().isLeapYear(31) == False"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-month-contains-30-days/discuss/131629/Python-Python-Solution-using-recursion\n\nclass Solution(object):\n    def checkIsLeap(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 2:\n            return False\n        return self.is_leap_month(month)\n\n    def is_leap_month(self, month):\n        if month[0] == 'F':\n            return False\n        return month[0] == 'L' or month[0] == 'l' or month[0] == 'G' or month[0] == 'g'\n\n\ndef main():\n    solution = Solution()\n    assert solution.checkIsLeap('FEB')\n    assert not solution.checkIsLeap('JAN')\n    assert solution.checkIsLeap('MAY')\n    assert not solution.checkIsLeap('JAN')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def is_leap_year(year):\n    return (year % 4 == 0) and (year % 100!= 0) or (year % 400 == 0)\n\ndef month_30_days(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 30\n    elif month == 2:\n        return is_leap_year(year)\n    else:\n        return 0\n\n# test cases\n\n# first case\ntest_cases = [\n    (1, 30),\n    (2, 29),\n    (3, 30),\n    (4, 30),\n    (5, 30),\n    (6, 30),\n    (7, 30),\n    (8, 30),\n    (9, 30),\n    (10, 30),\n    (11, 30),\n    (12, 30),\n    (13, 30),\n    (14, 30),\n    (15, 30),\n    (16, 30),\n    (17, 30),\n    (18, 30),\n    (19, 30),\n    (20, 30),\n    (21, 30),\n    (22, 30),\n    (23, 30),\n    (24, 30),\n    (25, 30),\n    (26, 30),\n    (27, 30),\n    (28, 30),\n    (29, 30)\n]\n\n# second case\ntest_cases.append([1, 29])\n\n# third case\ntest_cases.append([2, 28])\n\n# fourth case\ntest_cases.append([3, 29])\n\n# fifth case\ntest_cases.append([4, 30])\n\n# sixth case\ntest_cases.append([5, 30])\n\n# seventh case\ntest_cases.append([6, 30])\n\n# eighth case\ntest_cases.append([7, 30])\n\n# ninth case\ntest_cases.append([8, 30])\n\n# tenth case\ntest_cases.append([9, 30])\n\n# eleventh case\ntest_cases.append([10, 30])\n\n# twelfth case\ntest_cases.append([11, 30])\n\n# thirteenth case\ntest_cases.append"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a boolean\n    def isValid(self, s):\n        return False\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isValid(\"April\")\n    print s.isValid(\"April\")\n    print s.isValid(\"April\")\n    print s.isValid(\"May\")\n    print s.isValid(\"June\")\n    print s.isValid(\"July\")\n    print s.isValid(\"August\")\n    print s.isValid(\"September\")\n    print s.isValid(\"October\")\n    print s.isValid(\"November\")\n    print s.isValid(\"December\")\n    print s.isValid(\"January\")\n    print s.isValid(\"February\")\n    print s.isValid(\"March\")\n    print s.isValid(\"April\")\n    print s.isValid(\"May\")\n    print s.isValid(\"June\")\n    print s.isValid(\"July\")\n    print s.isValid(\"August\")\n    print s.isValid(\"September\")\n    print s.isValid(\"October\")\n    print s.isValid(\"November\")\n    print s.isValid(\"December\")\n    print s.isValid(\"\")\n    print s.isValid(\"\")\n    print s.isValid(\"\")\n    print s.isValid(\"\")\n    print s.isValid(\"\")\n    print s.isValid(\"\")\n    print s.isValid(\"\")\n    print s.isValid(\"\")\n    print s.isValid(\"\")\n    print s.isValid(\"\")"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from datetime import datetime\n\ndef is_leap(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\ndef is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\ndef is_leap_month(month):\n    if month == 2 and is_leap_year(year):\n        return True\n    elif month == 2 and is_leap_year(year) == False:\n        return False\n    elif month == 4 and is_leap_year(year):\n        return True\n    elif month == 4 and is_leap_year(year) == False:\n        return False\n    elif month == 6 and is_leap_year(year):\n        return True\n    elif month == 6 and is_leap_year(year) == False:\n        return False\n    elif month == 9 and is_leap_year(year):\n        return True\n    elif month == 9 and is_leap_year(year) == False:\n        return False\n    elif month == 11 and is_leap_year(year):\n        return True\n    elif month == 11 and is_leap_year(year) == False:\n        return False\n    else:\n        return False\n\ndef is_leap_month_name(month_name):\n    if month_name == 'January':\n        if is_leap_month(1):\n            return True\n        else:\n            return False\n    elif month_name == 'February':\n        if is_leap_month(2):\n            return True\n        else:\n            return False\n    elif month_name == 'March':\n        if is_leap_month(3):\n            return True\n        else:\n            return False\n    elif month_name == '"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-month-name-contains-30-days/\n\nclass Solution(object):\n    def isLeapYear(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def isLeapYear_1(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def isLeapYear_2(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def isLeapYear_3(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def isLeapYear_4(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n\n    def isLeapYear_5(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def is_30_days(name):\n    return name.isdigit() and int(name) == 30\n\nif __name__ == \"__main__\":\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_30_days(\"February\"))\n    print(is_"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-month-name-contains-30-days/\n# \n# time:O(1)\n# space:O(1)\n# \n# score:35.00(2ms)\n# time:O(n)\n# space:O(n)\n# \n# 1. count the number of days in the month\n# 2. find the number of days in the month in the year\n# 3. check if the sum of the days is 30\n# \n\nclass Solution(object):\n    def checkIfMonthNameContains30Days(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        month_name = month\n        return sum(map(int, month_name)) == 30"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def month_has_30_days(month_name):\n    if month_name == 'January':\n        return True\n    elif month_name == 'February':\n        return True\n    elif month_name == 'March':\n        return True\n    elif month_name == 'April':\n        return True\n    elif month_name == 'May':\n        return True\n    elif month_name == 'June':\n        return True\n    elif month_name == 'July':\n        return True\n    elif month_name == 'August':\n        return True\n    elif month_name == 'September':\n        return True\n    elif month_name == 'October':\n        return True\n    elif month_name == 'November':\n        return True\n    elif month_name == 'December':\n        return True\n    else:\n        return False\n\n\n# test cases\n\nprint month_has_30_days('January')\nprint month_has_30_days('February')\nprint month_has_30_days('March')\nprint month_has_30_days('April')\nprint month_has_30_days('May')\nprint month_has_30_days('June')\nprint month_has_30_days('July')\nprint month_has_30_days('August')\nprint month_has_30_days('September')\nprint month_has_30_days('October')\nprint month_has_30_days('November')\nprint month_has_30_days('December')"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/valid-month-name/\n# Definition for valid month name.\nclass Solution:\n    # @param month: A string\n    # @return: A boolean\n    def isValid(self, month):\n        month = month.lower()\n        return 'jan' in month or 'feb' in month or'mar' in month or 'apr' in month or'may' in month or 'jun' in month or 'jul' in month or 'aug' in month or'sep' in month or 'oct' in month or 'nov' in month or 'dec' in month\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isValid(\"jan\")\n    print s.isValid(\"feb\")\n    print s.isValid(\"mar\")\n    print s.isValid(\"apr\")\n    print s.isValid(\"may\")\n    print s.isValid(\"jun\")\n    print s.isValid(\"jul\")\n    print s.isValid(\"aug\")\n    print s.isValid(\"sep\")\n    print s.isValid(\"oct\")\n    print s.isValid(\"nov\")\n    print s.isValid(\"dec\")"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def is_leap(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n\n\ndef check_leap_month(month, year):\n    if month == 'February':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'January':\n        if is_leap(year):\n            return False\n        else:\n            return True\n    elif month == 'July':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'April':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'March':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'October':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'June':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'May':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'September':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'August':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'April':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'December':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    elif month == 'November':\n        if is_leap(year):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\ndef check_month(month):\n    if month == 'February':\n        return check_leap_month(month, 2016"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "# Todo:\n# - check for leap year\n# - check for 30 days\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30 day month\n# - check for other 30"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-valid-month-name/\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) < 3:\n            return False\n        if s[0] == 'M' and s[1] == 'a' and s[2] == 'r':\n            return False\n        if s[0] == 'M' and s[1] == 'o' and s[2] == 'n':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] == 'n':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] == 't':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] == 'h':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] == 'n':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] =='s':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] == 't':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] == 'h':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] == 'n':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] =='s':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] == 't':\n            return False\n        if s[0] == 'M' and s[1] == 'u' and s[2] == 'h':\n            return False\n        if s[0] == 'M'"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\ndef is_leap_year(year):\n    if year % 100 == 0:\n        return year % 400 == 0\n    elif year % 4 == 0:\n        return year % 100!= 0\n    else:\n        return False\n\ndef is_leap_month(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    elif month == 2 and is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef is_leap_day(day):\n    return is_leap_month(month) and (day == 29 or day == 30 or day == 31)\n\ndef is_leap_month_day(month, day):\n    return is_leap_month(month) and is_leap_day(day)\n\ndef is_leap_month_day_num(month, day, num):\n    if is_leap_month_day(month, day):\n        return num == 30\n    else:\n        return False\n\ndef is_leap_month_day_num_leap_day(month, day, num):\n    if is_leap_month_day(month, day):\n        return num == 30 and is_leap_day(day)\n    else:\n        return False\n\ndef is_leap_month_day_num_not_leap_day(month, day, num):\n    if is_leap_month_day(month, day):\n        return num == 30 and not is_leap_day(day)\n    else:\n        return False\n\ndef is_leap_month_day_num_not_leap_day_leap_day(month, day, num):\n    if is_leap_month_day(month, day):\n        return num == 30 and not is_leap_day(day) and is_leap_day(day)\n    else:\n        return False\n\ndef is_leap_month_day_num_not_leap_day_leap_day_leap_day(month,"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def is_30_days(month):\n    return len(month) == 3 and month == \"Jan\" or month == \"Feb\" or month == \"Mar\" or month == \"Apr\" or month == \"May\" or month == \"Jun\" or month == \"Jul\" or month == \"Aug\" or month == \"Sep\" or month == \"Oct\" or month == \"Nov\" or month == \"Dec\"\n\n\nif __name__ == '__main__':\n    print(is_30_days(\"May\"))\n    print(is_30_days(\"April\"))\n    print(is_30_days(\"December\"))\n    print(is_30_days(\"April\"))\n    print(is_30_days(\"Jan\"))\n    print(is_30_days(\"May\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"May\"))\n    print(is_30_days(\"Jan\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))\n    print(is_30_days(\"Feb\"))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# Definition for a valid month name.\nclass Month(object):\n    def __init__(self, month_name):\n        self.month_name = month_name\n        self.days = 30\n\nclass Solution(object):\n    def checkIfMonthContains30Days(self, month):\n        \"\"\"\n        :type month: Month\n        :rtype: bool\n        \"\"\"\n        if month.month_name == 'January' or month.month_name == 'February' or month.month_name == 'March' or month.month_name == 'April' or month.month_name == 'May' or month.month_name == 'June' or month.month_name == 'July' or month.month_name == 'August' or month.month_name == 'September' or month.month_name == 'October' or month.month_name == 'November' or month.month_name == 'December':\n            return True\n        else:\n            return False\n\nif __name__ == '__main__':\n    month = Month('December')\n    print month.days\n    print Solution().checkIfMonthContains30Days(month)"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def is_leap_year(year):\n    return ((year % 4) == 0) and ((year % 100)!= 0) or ((year % 400) == 0)\n\ndef check_leap(month):\n    if is_leap_year(month):\n        return 30\n    else:\n        return 28\n\ndef is_leap_month(month):\n    return check_leap(month) == 30\n\ndef check_month(month):\n    if is_leap_month(month):\n        return 30\n    else:\n        return 29\n\ndef is_leap_day(day):\n    return day == 30 or (day == 29 and is_leap_month(day))\n\ndef check_day(day):\n    return is_leap_day(day)\n\ndef is_leap_week(week):\n    if is_leap_month(week):\n        return 30\n    else:\n        return 28\n\ndef is_leap_weekday(weekday):\n    return is_leap_day(weekday)\n\ndef is_leap_month_weekday(weekday):\n    if is_leap_month(weekday):\n        return 30\n    else:\n        return 28\n\ndef check_weekday(weekday):\n    if is_leap_weekday(weekday):\n        return 30\n    else:\n        return 29\n\ndef is_leap_year_weekday(weekday):\n    if is_leap_weekday(weekday):\n        return 30\n    else:\n        return 29\n\ndef check_year_weekday(weekday):\n    if is_leap_year_weekday(weekday):\n        return 30\n    else:\n        return 29\n\ndef is_leap_month_weekday(weekday):\n    if is_leap_month_weekday(weekday):\n        return 30\n    else:\n        return 29\n\ndef check_month_weekday(weekday):\n    if is_leap_month_weekday(weekday):\n        return 30\n    else:\n        return 29\n\ndef is_leap_weekday_month(weekday):"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from collections import Counter\n\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\ndef check_month(month):\n    cnt = Counter(month)\n    if sum(cnt.values()) == 30:\n        return True\n    return False\n\ndef check_month_list(month_list):\n    if any(check_month(m) for m in month_list):\n        return True\n    return False\n\ndef check_month_dict(month_dict):\n    if any(check_month(month) for month in month_dict.values()):\n        return True\n    return False\n\nif __name__ == '__main__':\n    print(check_month('January'))\n    print(check_month_list(['January', 'December']))\n    print(check_month_dict(months))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution:\n    # @return a boolean\n    def isPM(self, month):\n        return month.find(\"PM\")!= -1\n\n    def checkValid(self, month):\n        if len(month)!= 3:\n            return False\n        return month.find(\"30\") == -1 and self.isPM(month)\n\n    def checkValidPM(self, month):\n        if len(month)!= 3:\n            return False\n        return month.find(\"30\")!= -1 and self.isPM(month)\n\nif __name__ == \"__main__\":\n    assert Solution().checkValid(\"April\") == True\n    assert Solution().checkValidPM(\"April\") == True\n    assert Solution().checkValid(\"February\") == False\n    assert Solution().checkValidPM(\"February\") == False"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# -*- coding: utf-8 -*-\n\n#include <iostream>\n#include <cctype>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\n\nclass Solution {\npublic:\n    bool is30Days(string monthName) {\n        int day = 0;\n        for (int i = 0; i < monthName.size(); i++) {\n            if (isdigit(monthName[i])) {\n                day = day * 10 + monthName[i] - '0';\n            }\n        }\n        return day == 30;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    Solution s;\n    cout << s.is30Days(\"February\") << endl;\n    return 0;\n}"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def check_if_month_has_30_days(month_name):\n    if len(month_name) == 3:\n        return True\n    elif len(month_name) == 4:\n        if month_name[0] == 'F' and month_name[1] == 'e':\n            return True\n        elif month_name[0] == 'A' and month_name[1] == 'p':\n            return True\n    elif len(month_name) == 5:\n        if month_name[0] == 'J' and month_name[1] == 'u':\n            return True\n        elif month_name[0] == 'J' and month_name[2] == 'u':\n            return True\n        elif month_name[0] == 'A' and month_name[1] == 'p':\n            return True\n        elif month_name[0] == 'A' and month_name[2] == 'p':\n            return True\n    elif len(month_name) == 6:\n        if month_name[0] == 'J' and month_name[1] == 'u' and month_name[2] == 'n':\n            return True\n        elif month_name[0] == 'A' and month_name[1] == 'p' and month_name[2] == 'n':\n            return True\n        elif month_name[0] == 'J' and month_name[3] == 'u' and month_name[4] == 'n':\n            return True\n        elif month_name[0] == 'A' and month_name[3] == 'p' and month_name[4] == 'n':\n            return True\n        elif month_name[0] == 'J' and month_name[5] == 'u' and month_name[6] == 'n':\n            return True\n        elif month_name[0] == 'A' and month_name[5] == 'p' and month_name[6] == 'n':\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def check_30_days(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        # 30 days in a month\n        days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n        # 30 days in a year\n        days_in_year = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\n        # get the month name\n        month = month.lower()\n        # print month\n        # check the 30 days in a month\n        if month in days:\n            return True\n        # check the 30 days in a year\n        elif month in days_in_year:\n            return True\n        else:\n            return False"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def checkValid(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if month.isdigit():\n            return True\n        if month.isalpha():\n            return False\n        if month == 'Jan':\n            return True\n        if month == 'Feb':\n            return True\n        if month == 'Mar':\n            return True\n        if month == 'Apr':\n            return True\n        if month == 'May':\n            return True\n        if month == 'Jun':\n            return True\n        if month == 'Jul':\n            return True\n        if month == 'Aug':\n            return True\n        if month == 'Sep':\n            return True\n        if month == 'Oct':\n            return True\n        if month == 'Nov':\n            return True\n        if month == 'Dec':\n            return True\n        return False\n\nif __name__ == '__main__':\n    print Solution().checkValid('Jan')"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-month-name-contains-30-days/discuss/226692/Python-Solution\nclass Solution(object):\n    def checkIsValid(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        return month in [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\n    def checkIsValid1(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if month[0] == '0':\n            return False\n        return month[2] == '0' or month[2] == '1'\n\n    def checkIsValid2(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if month[0] == '0':\n            return False\n        if month[2] == '0':\n            return False\n        return month[2] == '1'\n\nif __name__ == \"__main__\":\n    print Solution().checkIsValid(\"January\")"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/month-days/\n# time:O(n)\n# space:O(1)\n# score:28.90(30ms)\nclass Solution(object):\n    def checkIfMonth30(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        month = month.lower()\n        if month in ['jan', 'feb','mar', 'apr','may', 'jun', 'jul', 'aug','sep', 'oct', 'nov', 'dec']:\n            return True\n        if len(month)!= 2:\n            return False\n        if len(month) == 2 and len(month)!= 1:\n            return False\n        return month.isdigit()\n\n\nif __name__ == \"__main__\":\n    print Solution().checkIfMonth30(\"feb\")\n    print Solution().checkIfMonth30(\"jul\")\n    print Solution().checkIfMonth30(\"aug\")\n    print Solution().checkIfMonth30(\"dec\")\n    print Solution().checkIfMonth30(\"jan\")\n    print Solution().checkIfMonth30(\"mar\")\n    print Solution().checkIfMonth30(\"feb\")\n    print Solution().checkIfMonth30(\"oct\")"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/month-name-with-30-days/discuss/85933/Python-C%2B%2B-O(1)-Time-Solution\n\nclass Solution(object):\n    def check_30_days(self, month_name):\n        \"\"\"\n        :type month_name: str\n        :rtype: bool\n        \"\"\"\n        return month_name.upper() == 'JANUARY' or month_name.upper() == 'FEBRUARY' or month_name.upper() == 'MARCH' or month_name.upper() == 'APRIL' or month_name.upper() == 'MAY' or month_name.upper() == 'JUNE' or month_name.upper() == 'JULY' or month_name.upper() == 'AUGUST' or month_name.upper() == 'SEPTEMBER' or month_name.upper() == 'OCTOBER' or month_name.upper() == 'NOVEMBER' or month_name.upper() == 'DECEMBER'\n\n\nif __name__ == '__main__':\n    print(Solution().check_30_days('JANUARY'))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def checkIfMonth30(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if month.isalpha():\n            return True\n        if not month.isdigit():\n            return False\n        if int(month) > 12:\n            return False\n        if month == '0':\n            return False\n        if month == '1':\n            return True\n        if month == '2':\n            return True\n        if month == '3':\n            return True\n        if month == '4':\n            return True\n        if month == '5':\n            return True\n        if month == '6':\n            return True\n        if month == '7':\n            return True\n        if month == '8':\n            return True\n        if month == '9':\n            return True\n        if month == '10':\n            return True\n        if month == '11':\n            return True\n        if month == '12':\n            return True\n        return False\n\na = Solution()\nprint(a.checkIfMonth30('jan'))\nprint(a.checkIfMonth30('feb'))\nprint(a.checkIfMonth30('mar'))\nprint(a.checkIfMonth30('apr'))\nprint(a.checkIfMonth30('may'))\nprint(a.checkIfMonth30('jun'))\nprint(a.checkIfMonth30('jul'))\nprint(a.checkIfMonth30('aug'))\nprint(a.checkIfMonth30('sep'))\nprint(a.checkIfMonth30('oct'))\nprint(a.checkIfMonth30('nov'))\nprint(a.checkIfMonth30('dec'))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# TODO: write a function to check whether the given month name contains 30 days or not.\n\n# Example 1:\n# Input: \"February\"\n# Output: True\n# Explanation: The month \"February\" contains 30 days.\n\n# Example 2:\n# Input: \"January\"\n# Output: False\n# Explanation: The month \"January\" does not contain 30 days.\n\n# Note:\n# The month name is guaranteed to be alphanumeric,\n# and won't contain special characters like '.' or ','.\n# Please do not use any built-in library to check whether the month name\n# contains 30 days or not.\n\nclass Solution(object):\n    def isLeapYear(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month.isalpha():\n            month = month.lower()\n            if month == 'jan' or month == 'feb' or month =='mar' or month == 'apr' or month =='may' or month == 'jun' or month == 'jul' or month == 'aug' or month =='sep' or month == 'oct' or month == 'nov' or month == 'dec':\n                return True\n            else:\n                return False\n        else:\n            return False"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasValid30Days(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if not month.isdigit():\n            return False\n        if not month.isalpha():\n            return False\n        if not month.isdigit():\n            return False\n        if not month.isalpha():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():\n            return False\n        if month.isdigit():"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def is_30days(month):\n    if len(month) == 3:\n        return False\n    elif len(month) == 2:\n        return True\n    else:\n        return False\n\n\n# Test Cases\nprint(is_30days('jan'))\nprint(is_30days('feb'))\nprint(is_30days('mar'))\nprint(is_30days('apr'))\nprint(is_30days('may'))\nprint(is_30days('jun'))\nprint(is_30days('jul'))\nprint(is_30days('aug'))\nprint(is_30days('sep'))\nprint(is_30days('oct'))\nprint(is_30days('nov'))\nprint(is_30days('dec'))\nprint(is_30days('jan'))\nprint(is_30days('feb'))\nprint(is_30days('mar'))\nprint(is_30days('apr'))\nprint(is_30days('may'))\nprint(is_30days('jun'))\nprint(is_30days('jul'))\nprint(is_30days('aug'))\nprint(is_30days('sep'))\nprint(is_30days('oct'))\nprint(is_30days('nov'))\nprint(is_30days('dec'))\nprint(is_30days('jan'))\nprint(is_30days('feb'))\nprint(is_30days('mar'))\nprint(is_30days('apr'))\nprint(is_30days('may'))\nprint(is_30days('jun'))\nprint(is_30days('jul'))\nprint(is_30days('aug'))\nprint(is_30days('sep'))\nprint(is_30days('oct'))\nprint(is_30days('nov'))\nprint(is_30days('dec'))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def is30Days(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == 'January':\n            return True\n        elif month == 'February':\n            return True\n        elif month == 'March':\n            return True\n        elif month == 'April':\n            return True\n        elif month == 'May':\n            return True\n        elif month == 'June':\n            return True\n        elif month == 'July':\n            return True\n        elif month == 'August':\n            return True\n        elif month == 'September':\n            return True\n        elif month == 'October':\n            return True\n        elif month == 'November':\n            return True\n        elif month == 'December':\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    print Solution().is30Days(\"April\")"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isLeapYear(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        return month in [\n            \"JANUARY\",\n            \"FEBRUARY\",\n            \"MARCH\",\n            \"APRIL\",\n            \"MAY\",\n            \"JUNE\",\n            \"JULY\",\n            \"AUGUST\",\n            \"SEPTEMBER\",\n            \"OCTOBER\",\n            \"NOVEMBER\",\n            \"DECEMBER\"\n        ]\n\n    def isLeapYear2(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if self.isLeapYear(month):\n            return True\n        else:\n            return False\n\ns = Solution()\nprint(s.isLeapYear(\"FEBRUARY\"))\nprint(s.isLeapYear2(\"FEBRUARY\"))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def checkMonth30(self, s):\n        \"\"\"\n        :param s: str\n        :return: bool\n        \"\"\"\n        dic = {\n            \"January\": True,\n            \"February\": True,\n            \"March\": True,\n            \"April\": True,\n            \"May\": True,\n            \"June\": True,\n            \"July\": True,\n            \"August\": True,\n            \"September\": True,\n            \"October\": True,\n            \"November\": True,\n            \"December\": True,\n            \"Jan\": True,\n            \"Feb\": True,\n            \"Mar\": True,\n            \"Apr\": True,\n            \"May\": True,\n            \"Jun\": True,\n            \"Jul\": True,\n            \"Aug\": True,\n            \"Sep\": True,\n            \"Oct\": True,\n            \"Nov\": True,\n            \"Dec\": True,\n            \"January\": False,\n            \"February\": False,\n            \"March\": False,\n            \"April\": False,\n            \"May\": False,\n            \"June\": False,\n            \"July\": False,\n            \"August\": False,\n            \"September\": False,\n            \"October\": False,\n            \"November\": False,\n            \"December\": False,\n            \"Jan\": False,\n            \"Feb\": False,\n            \"Mar\": False,\n            \"Apr\": False,\n            \"May\": False,\n            \"Jun\": False,\n            \"Jul\": False,\n            \"Aug\": False,\n            \"Sep\": False,\n            \"Oct\": False,\n            \"Nov\": False,\n            \"Dec\": False\n        }\n        return dic.get(s, False)\n\n\nif __name__ == \"__main__\":\n    print Solution().checkMonth30(\"January\")"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# https://www.hackerearth.com/practice/algorithms/datatypes/datetime/\n\nimport unittest\n\ndef check_if_month_contains_30_days(month_name):\n    \"\"\"\n    Check whether the given month name contains 30 days or not.\n    :param month_name:\n    :return: True if month name contains 30 days, otherwise False.\n    \"\"\"\n    days = 30\n    for day in month_name:\n        if day.isdigit():\n            days = int(day)\n    return days == 30\n\n\nclass TestCheckIfMonthContains30Days(unittest.TestCase):\n    def test_check_if_month_contains_30_days(self):\n        self.assertTrue(check_if_month_contains_30_days(\"February\"))\n        self.assertTrue(check_if_month_contains_30_days(\"January\"))\n        self.assertFalse(check_if_month_contains_30_days(\"February\"))\n        self.assertFalse(check_if_month_contains_30_days(\"April\"))\n        self.assertFalse(check_if_month_contains_30_days(\"September\"))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# https://www.codeeval.com/open_challenges/102/\n# Problem: Check whether month has 30 days\n# Status: Accepted\n# Difficulty: Easy\n# Brief example:\n# Input:\n# \"January\"\n# \"February\"\n# \"March\"\n# \"April\"\n# \"May\"\n# \"June\"\n# \"July\"\n# \"August\"\n# \"September\"\n# \"October\"\n# \"November\"\n# \"December\"\n# Output:\n# True\n# False\n# False\n# False\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n\ndef check_if_month_has_30_days(month_name):\n    if (month_name == 'January'):\n        return True\n    elif (month_name == 'February'):\n        return True\n    elif (month_name == 'March'):\n        return True\n    elif (month_name == 'April'):\n        return True\n    elif (month_name == 'May'):\n        return True\n    elif (month_name == 'June'):\n        return True\n    elif (month_name == 'July'):\n        return True\n    elif (month_name == 'August'):\n        return True\n    elif (month_name == 'September'):\n        return True\n    elif (month_name == 'October'):\n        return True\n    elif (month_name == 'November'):\n        return True\n    elif (month_name == 'December'):\n        return True\n    else:\n        return False\n\n# Check whether month has 30 days or not\ncheck_if_month_has_30_days('January')\ncheck_if_month_has_30_days('February')\ncheck_if_month_has_30_days('March')\ncheck_if_month_has_30_days('April')\ncheck_if_month_has_30_days('May')\ncheck_if_month_has_30_days('June')\ncheck_if_month_has_30_days('July')\ncheck_if_month_has_30_days('August')"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Definition for a month.\nclass Month:\n    def __init__(self, month_name):\n        self.month_name = month_name\n        self.days = 30\n\n    def get_days(self):\n        return self.days\n\nclass Solution(object):\n    def is_leap_year(self, year):\n        if year % 400 == 0:\n            return True\n        elif year % 100 == 0:\n            return False\n        elif year % 4 == 0:\n            return True\n        else:\n            return False\n        \n    def check_leap_year(self, month, year):\n        if month == 2 and self.is_leap_year(year):\n            return True\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return True\n        else:\n            return False\n\n    def check_leap_month(self, month):\n        if month == 2:\n            return True\n        else:\n            return False\n    \n    def check_leap_year_and_month(self, month, year):\n        if month == 2 and self.is_leap_year(year):\n            return True\n        else:\n            return False\n    \n    def is_leap_year_and_month(self, month, year):\n        if month == 2 and self.is_leap_year(year):\n            return True\n        else:\n            return False\n    \n    def check_leap_year_and_month_and_day(self, month, year, day):\n        if month == 2 and self.is_leap_year(year) and self.check_leap_year_and_month(month) and day == 30:\n            return True\n        else:\n            return False\n        \n    def is_leap_year_and_month_and_day(self, month, year, day):\n        if month == 2 and self.is_leap_year(year) and self.check_leap_year_and_month(month) and day == 30:\n            return True\n        else:\n            return False\n    \n    def is_leap_year_and_month_and_"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def check_if_month_contains_30_days(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    # write your code here\n    if len(month_name) == 3:\n        return True\n    else:\n        return False\n\n# Test Cases\nprint check_if_month_contains_30_days('Aug')\n#>>> True\nprint check_if_month_contains_30_days('May')\n#>>> False"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def is_leap_year(year):\n    return (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))\n\ndef is_leap_month(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]\n\ndef is_leap_month_name(month_name):\n    if len(month_name) == 3:\n        return is_leap_month(int(month_name))\n    return is_leap_year(int(month_name))\n\ndef check_if_leap_month(month_name):\n    if len(month_name) == 3:\n        return is_leap_month(int(month_name))\n    return is_leap_year(int(month_name))\n\ndef main():\n    assert(check_if_leap_month('February') == True)\n    assert(check_if_leap_month('February') == True)\n    assert(check_if_leap_month('February') == True)\n    assert(check_if_leap_month('February') == True)\n    assert(check_if_leap_month('January') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February') == False)\n    assert(check_if_leap_month('February')"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def is_30_days(month_name):\n    if month_name == \"January\":\n        return True\n    elif month_name == \"February\":\n        return True\n    elif month_name == \"March\":\n        return True\n    elif month_name == \"April\":\n        return True\n    elif month_name == \"May\":\n        return True\n    elif month_name == \"June\":\n        return True\n    elif month_name == \"July\":\n        return True\n    elif month_name == \"August\":\n        return True\n    elif month_name == \"September\":\n        return True\n    elif month_name == \"October\":\n        return True\n    elif month_name == \"November\":\n        return True\n    elif month_name == \"December\":\n        return True\n    else:\n        return False\n\n\nprint(is_30_days(\"December\"))"
    }
  ]
}