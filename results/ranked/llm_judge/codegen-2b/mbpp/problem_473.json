{
  "timestamp": "2025-09-14T20:52:45.484087",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 473,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        i = 0\n        j = 0\n        result = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                result.append(nums1[i])\n                i += 1\n            else:\n                result.append(nums2[j])\n                j += 1\n        return result"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {list} A list of integers\n    # @param {list} B list of integers\n    # @return {list}\n    def removeDuplicates(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # write your code here\n        res = []\n        for i in range(len(A)):\n            if A[i] == B[i]:\n                continue\n            else:\n                res.append(A[i])\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeDuplicates([1,2,3,2,1], [1,1,1,2,2]))\n    print(s.removeDuplicates([1,1,2,2,3], [1,1,1,1,2]))\n    print(s.removeDuplicates([1,2,3], [1,1,1]))\n    print(s.removeDuplicates([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution:\n    def removeElement(self, A, B):\n        \"\"\"\n        :type A: List[Tuple]\n        :type B: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        return filter(lambda x: x!= B, A)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def remove_matching_tuples(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    \n    # write your code here\n    a_tuple = tuple(a)\n    b_tuple = tuple(b)\n    \n    if a_tuple == b_tuple:\n        return []\n    \n    if len(a)!= len(b):\n        return []\n    \n    for i in range(len(a)):\n        if a_tuple[i]!= b_tuple[i]:\n            return [a_tuple[i]]\n    \n    return [a_tuple[i] for i in range(len(a)) if a_tuple[i]!= b_tuple[i]]"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        result = []\n        for i in xrange(len(nums1)):\n            if nums1[i] == nums2[i]:\n                continue\n            else:\n                result.append(nums1[i])\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeElement([(1,2,3)], [(1,2,3)])\n    print s.removeElement([(1,2,3)], [(1,2)])\n    print s.removeElement([(1,2,3)], [(2,3)])\n    print s.removeElement([(1,2,3)], [(3,4)])"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        result = []\n        i = 0\n        while i < len(nums1):\n            while i < len(nums1) and nums1[i]!= nums2[i]:\n                i += 1\n            if i >= len(nums1):\n                break\n            result.append(nums1[i])\n            i += 1\n        return result"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        result = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i].x == nums2[j].x:\n                i += 1\n                j += 1\n            else:\n                if nums1[i].x < nums2[j].x:\n                    i += 1\n                else:\n                    j += 1\n                result.append(nums1[i])\n        return result\n\n# Note:\n# This problem is the same as #1176."
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        i = 0\n        j = 0\n        k = 0\n        n1 = len(nums1)\n        n2 = len(nums2)\n        while i < n1 and j < n2:\n            if nums1[i] == nums2[j]:\n                i += 1\n                j += 1\n            else:\n                if k < j:\n                    nums1[k] = nums2[j]\n                k += 1\n                j += 1\n        nums1[k:] = nums2[j:]\n        return nums1"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import collections\nimport random\n\nclass Solution(object):\n    def removeElement(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # return A[:]\n        return self.removeElementTwo(A, B)\n\n    def removeElementTwo(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # return A[:]\n        A.sort()\n        B.sort()\n\n        nA = len(A)\n        nB = len(B)\n\n        # return A[:]\n        return self.removeElementThree(A, B, nA, nB)\n\n    def removeElementThree(self, A, B, nA, nB):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # return A[:]\n        nA = len(A)\n        nB = len(B)\n\n        if nA == 0 or nB == 0:\n            return []\n\n        # return A[:]\n        if nA == 1 or nB == 1:\n            return A[:1] + B[:1]\n\n        if nA > nB:\n            return A[:nB] + B[nB:]\n\n        if nB > nA:\n            return A[:nA] + B[nA:]\n\n        # return A[:]\n        return A[:nA] + B[nB:]\n\n    def removeElementWithRandom(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # return A[:]\n        return self.removeElementWithRandomTwo(A, B)\n\n    def removeElementWithRandomTwo(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List["
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        d = defaultdict(list)\n        for i in nums1:\n            d[i].append(i)\n        for i in nums2:\n            d[i].remove(i)\n        return [x for x in nums1 if x in d]"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def remove(a, b):\n    if a == b:\n        return a\n    else:\n        return a\n\ndef remove_tuples(a, b):\n    return [remove(a, b) for a in a]\n\nif __name__ == '__main__':\n    a = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    b = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    c = remove_tuples(a, b)\n    print(c)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/remove-duplicates/\n\nclass Solution(object):\n    def removeDuplicates(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ret = []\n        for i in range(len(A)):\n            if A[i] == B[i]:\n                continue\n            elif A[i]!= B[i]:\n                ret.append(A[i])\n            else:\n                ret.append(B[i])\n        return ret"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/remove-duplicates-from-sorted-list/discuss/79225/Java-O(n)-Solutions-with-Java-and-Python-in-Python\n# https://leetcode.com/problems/remove-duplicates-from-sorted-list/discuss/83770/Java-O(n)-Solutions-with-Java-and-Python-in-Python\n# https://leetcode.com/problems/remove-duplicates-from-sorted-list/discuss/83770/Java-O(n)-Solutions-with-Java-and-Python-in-Python\n# https://leetcode.com/problems/remove-duplicates-from-sorted-list/discuss/83770/Java-O(n)-Solutions-with-Java-and-Python-in-Python\n# https://leetcode.com/problems/remove-duplicates-from-sorted-list/discuss/83770/Java-O(n)-Solutions-with-Java-and-Python-in-Python\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def removeDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        prev = None\n        while head:\n            if head.val == prev.val:\n                head = head.next\n            else:\n                prev = head\n                head = head.next\n        return prev\n\ns = Solution()\nhead = ListNode(1, ListNode(2, ListNode(3, ListNode(1, ListNode(4, ListNode(5, ListNode(1, ListNode(6, ListNode(1, ListNode(7, ListNode(1, ListNode(8, ListNode(1, ListNode(9, ListNode(1, ListNode(10))))))))))))))))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/\n# https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/356729/Python-Solution-with-Python-3-2-and-Python-3-4\nclass Solution(object):\n    def removeDuplicates(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        # remove duplicates from the first list\n        nums1 = self.removeDuplicates(nums1)\n\n        # remove duplicates from the second list\n        nums2 = self.removeDuplicates(nums2)\n\n        # return the total number of elements\n        return len(nums1) + len(nums2) - len(set(nums1) & set(nums2))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param A: List of List of integers\n    # @param B: List of List of integers\n    # @return: void\n    def remove(self, A, B):\n        if not A or not B:\n            return\n        \n        # remove the elements in the first list\n        for i in range(len(A)):\n            for j in range(len(B)):\n                if A[i][0] == B[j][0]:\n                    A[i] = A[i][1:]\n                    B[j] = B[j][1:]\n        \n        # remove the elements in the second list\n        for i in range(len(A)):\n            for j in range(len(B)):\n                if A[i][1] == B[j][1]:\n                    A[i] = A[i][0]\n                    B[j] = B[j][0]\n        \n        # return the result\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return\n        return"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        if not nums1 or not nums2:\n            return nums1 or nums2\n        if len(nums1) > len(nums2):\n            return self.removeElement(nums2, nums1)\n        if len(nums1) == len(nums2):\n            return nums1\n        result = []\n        for num in nums1:\n            if num not in nums2:\n                result.append(num)\n        return result"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {list<tuple<int>} A, B\n    # @return {list<tuple<int>>}\n    def removeElement(self, A, B):\n        # Write your code here\n        ans = []\n        for i in range(len(A)):\n            if i == len(B) or A[i]!= B[i]:\n                ans.append(A[i])\n        return ans\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.removeElement([(1, 2), (2, 3), (3, 4), (3, 5)], [(1, 2)])\n    print solution.removeElement([(1, 2), (2, 3), (3, 4), (3, 5), (4, 5)], [(1, 2)])\n    print solution.removeElement([(1, 2), (2, 3), (3, 4), (3, 5), (4, 5)], [(1, 2), (2, 3)])"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def remove_tuples(a, b):\n    \"\"\"\n    :type a: List[tuple]\n    :type b: List[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    return [x for x in a if x not in b]\n\nclass Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums.sort()\n        return [nums[0]] + remove_tuples(nums[1:], nums)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def remove_tuples(t1, t2):\n\t\"\"\"\n\tInput:\n\t\tt1 = [1, 2, 3]\n\t\tt2 = [1, 2, 3]\n\tOutput:\n\t\t[1, 2, 3]\n\t\"\"\"\n\treturn [x for x in t1 if x not in t2]\n\ndef main():\n\tt1 = [1, 2, 3]\n\tt2 = [1, 2, 3]\n\tremove_tuples(t1, t2)\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        # https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/272836/Python-Sorted-Array-Remove-Duplicates-Sorted\n        # https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/257735/Java-Python-Remove-Duplicates-Sorted\n        # https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/257736/Java-Python-Remove-Duplicates-Sorted\n        # https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/257736/Java-Python-Remove-Duplicates-Sorted\n        # https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/257736/Java-Python-Remove-Duplicates-Sorted\n        # https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/257736/Java-Python-Remove-Duplicates-Sorted\n        # https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/257736/Java-Python-Remove-Duplicates-Sorted\n        # https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/257736/Java-Python-Remove-Duplicates-Sorted\n        # https://leetcode.com/problems/remove-du"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a, b')\n\ndef remove_tuples(a, b):\n    \"\"\"\n    :type a: List[Tuple]\n    :type b: List[Tuple]\n    :rtype: List[Tuple]\n    \"\"\"\n    return [t for t in a if t not in b]\n\nif __name__ == '__main__':\n    a = [(1, 2), (1, 3), (2, 3), (2, 4), (3, 4)]\n    b = [(1, 2), (1, 3), (2, 3), (2, 4)]\n    print(remove_tuples(a, b))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                nums1[j] = nums1[i]\n                i += 1\n                j += 1\n        return nums1"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {List[List[int]]} first\n    # @param {List[List[int]]} second\n    # @return {void} Do not return anything, modify first argument in-place instead.\n    def removeMatching(self, first, second):\n        # write your code here\n        first.sort(key=lambda x: x[1])\n        second.sort(key=lambda x: x[1])\n        \n        for i in xrange(len(first)):\n            if first[i][0] == second[i][0]:\n                first[i] = first[i][1:]\n        \n        for i in xrange(len(second)):\n            if second[i][0] == first[i][0]:\n                second[i] = second[i][1:]\n        \n        for i in xrange(len(first)):\n            if first[i][0] == second[-1][0]:\n                first[i] = first[i][1:]\n                \n        return"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "import collections\n\ndef remove_duplicate(a, b):\n    # write your code here\n    d = collections.defaultdict(list)\n    for t in a:\n        d[t].append(1)\n    for t in b:\n        d[t].append(1)\n    for t in d:\n        if len(d[t]) > 1:\n            del d[t][0]\n    return [x for x in a if x in d]"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def remove_matching(a, b):\n    if a[0] == b[0]:\n        return [a[1]]\n    elif a[0] < b[0]:\n        return [a[1]] + remove_matching(a[1:], b[1:])\n    else:\n        return remove_matching(a[1:], b[1:])\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3]\n    b = [3, 4, 5]\n    c = remove_matching(a, b)\n    print(c)"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "class Solution:\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1 = list(nums1)\n        nums2 = list(nums2)\n\n        for num in nums1:\n            if num in nums2:\n                nums1.remove(num)\n        return nums1"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "import unittest\n\nclass Solution(unittest.TestCase):\n    def test(self):\n        self.assertEqual(remove_duplicates([1,1,1,2,2,3]), [1,2,3])\n        self.assertEqual(remove_duplicates([1,1,2,2,3]), [1,2,3])\n        self.assertEqual(remove_duplicates([1,2,3]), [1,2,3])\n        self.assertEqual(remove_duplicates([1,2]), [1,2])\n        self.assertEqual(remove_duplicates([1,2,3,3,3,4]), [1,2,3,4])\n        self.assertEqual(remove_duplicates([1,2,3,3,3,4,4,4,4]), [1,2,3,4])\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution(object):\n    def removeDuplicates(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        while i < len(nums1):\n            if nums1[i] == nums2[i]:\n                i += 1\n            else:\n                nums1[i] = nums1[i]\n                nums2[i] = nums2[i]\n        return len(nums1)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeDuplicates([1,2,2,3,3,4,4], [1,1,2,2,3,3,4])\n    print s.removeDuplicates([1,2,2,3,3,4,4], [1,1,2,2,3,3,4,4])\n    print s.removeDuplicates([1,2,2,3,3,4,4], [1,1,2,2,3,3,4,5])"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def remove_matching_tuples(tuples1, tuples2):\n    \"\"\"\n    :type tuples1: List[Tuple]\n    :type tuples2: List[Tuple]\n    :rtype: List[Tuple]\n    \"\"\"\n    result = []\n    for tuple1 in tuples1:\n        for tuple2 in tuples2:\n            if tuple1 == tuple2:\n                result.append(tuple1)\n                break\n    return result\n\nif __name__ == '__main__':\n    tuples1 = [(1, 2), (1, 3), (1, 4)]\n    tuples2 = [(1, 2), (2, 4), (3, 5)]\n    print(remove_matching_tuples(tuples1, tuples2))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def remove(a, b):\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            del a[i]\n            del b[i]\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3]\n    remove(a, b)\n    print(a)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def remove_matching(tuple_1, tuple_2):\n    return [x for x in tuple_1 if x not in tuple_2]\n\nif __name__ == '__main__':\n    print(remove_matching((1, 2, 3), (1, 2, 3, 4)))\n    print(remove_matching((1, 2), (1, 2, 3, 4)))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def remove_matching_tuples(s, t):\n    return list(filter(lambda x: x[0]!= x[1], zip(s, t)))\n\nif __name__ == '__main__':\n    s = (1, 3)\n    t = (2, 4)\n    print(remove_matching_tuples(s, t))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef remove_matching(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    d = defaultdict(list)\n    for i in range(len(a)):\n        d[a[i]].append(i)\n    for i in range(len(b)):\n        d[b[i]].append(i)\n\n    return [a[i] for i in range(len(a)) if i not in d[b[i]]]\n\nif __name__ == '__main__':\n    print remove_matching([1, 2, 3], [2, 3, 4])\n    print remove_matching([1, 2, 3], [3, 4, 5])"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import sys\n\n__author__ = 'Daniel'\n\n\ndef remove_tuple(t1, t2):\n    \"\"\"\n    :type t1: List[Tuple]\n    :type t2: List[Tuple]\n    :rtype: List[Tuple]\n    \"\"\"\n    if len(t1) == 0 or len(t2) == 0:\n        return []\n    if t1[0] == t2[0]:\n        return remove_tuple(t1[1:], t2[1:])\n    else:\n        return t1\n\n\nif __name__ == '__main__':\n    t1 = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n    t2 = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n    print(remove_tuple(t1, t2))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def remove_matching_tuples(t1, t2):\n    for i in range(len(t1)):\n        if t1[i] == t2[i]:\n            del t1[i]\n            del t2[i]\n\nif __name__ == '__main__':\n    t1 = [(1,2), (2,3), (3,4), (4,5), (5,6)]\n    t2 = [(1,2), (2,3), (3,5)]\n    remove_matching_tuples(t1, t2)\n    print t1\n    print t2"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import unittest\n\n# My solution\ndef remove_matching(s, t):\n    \"\"\"\n    :type s: List[str]\n    :type t: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [x for x in s if x not in t]\n\nclass Test(unittest.TestCase):\n    def test(self):\n        s = ['hello', 'world']\n        t = ['hello', 'world']\n        self.assertEqual(remove_matching(s, t), [])\n        self.assertEqual(remove_matching(t, s), [])\n\n        s = ['hello', 'world']\n        t = ['hello', 'world', 'hello']\n        self.assertEqual(remove_matching(s, t), ['world'])\n        self.assertEqual(remove_matching(t, s), ['hello'])\n\n        s = ['hello', 'world', 'hello']\n        t = ['hello', 'world']\n        self.assertEqual(remove_matching(s, t), ['hello'])\n        self.assertEqual(remove_matching(t, s), ['world'])\n\n        s = ['hello', 'world']\n        t = ['hello', 'world']\n        self.assertEqual(remove_matching(s, t), [])\n        self.assertEqual(remove_matching(t, s), [])\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution:\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        result = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                result.append(nums1[i])\n                i += 1\n            else:\n                result.append(nums2[j])\n                j += 1\n        return result"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def remove_match(first, second):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in first if x not in second]"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def remove_matching(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in a if x not in b]\n\nclass Solution:\n    def remove_matching(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(len(a)):\n            if a[i] not in b:\n                res.append(a[i])\n        return res\n\na = [1, 2, 2, 3, 3, 3]\nb = [3, 3, 3, 3, 3, 3]\nc = Solution().remove_matching(a, b)\nprint(c)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import unittest\n\nclass Solution(unittest.TestCase):\n    def test_remove_duplicates(self):\n        self.assertEqual(remove_duplicates([1,1,2,2,3], [1,2,2]), [1,3])\n        self.assertEqual(remove_duplicates([1,1,2,2,3], [1,3]), [1,2,3])\n        self.assertEqual(remove_duplicates([1,1,2,2,3], [1,2,3]), [1,2,3])\n        self.assertEqual(remove_duplicates([1,1,2,2,3], [1,2,3,2,3]), [1,2,3])\n        self.assertEqual(remove_duplicates([1,1,2,2,3], [1,2,3,2,3,2]), [1,2,3])\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def remove_tuples(t1, t2):\n    \"\"\"\n    :type t1: List[int]\n    :type t2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    m = set(t1)\n    n = set(t2)\n    return [x for x in t2 if x not in m and x not in n]\n\nt1 = [1, 2, 3, 4, 5, 6]\nt2 = [2, 3, 4, 5, 6, 7]\nprint(remove_tuples(t1, t2))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def remove_matching(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if a == b:\n        return []\n    else:\n        return a[1:] + b[:-1]\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5, 6]\n    print(remove_matching(a, b))\n    a = [1, 2, 3, 4, 5]\n    b = [3, 4, 5, 6, 7]\n    print(remove_matching(a, b))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def remove_tuples(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    \n    # remove the matching tuples from a\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            a.pop(i)\n    # remove the matching tuples from b\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            b.pop(i)\n    return a\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6]\n    b = [1, 2, 3, 4, 5, 6]\n    \n    print(remove_tuples(a, b))\n    print(a)\n    print(b)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n    def __hash__(self):\n        return hash(self.x) ^ hash(self.y)\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if nums1 is None or nums2 is None:\n            return nums1\n        if len(nums1) == 0 or len(nums2) == 0:\n            return nums1\n        result = []\n        for i in range(len(nums1)):\n            if nums1[i] not in nums2:\n                result.append(nums1[i])\n        return result\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums1 = [1,2,3,4]\n    nums2 = [1,2,3]\n    print(sol.removeElement(nums1, nums2))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b')\n\n\nclass Solution(object):\n    def remove_duplicates(self, A, B):\n        \"\"\"\n        :type A: List[Tuple]\n        :type B: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not A or not B:\n            return 0\n\n        T = Tuple(a=A[0], b=B[0])\n        N = len(A)\n        M = len(B)\n\n        for i in range(N):\n            for j in range(M):\n                if Tuple(a=A[i], b=B[j]) == T:\n                    A.pop(i)\n                    B.pop(j)\n                    break\n            else:\n                T = Tuple(a=A[i], b=B[0])\n                break\n\n        return len(A)\n\n\nif __name__ == '__main__':\n    A = [Tuple(a=1, b=2), Tuple(a=1, b=2), Tuple(a=1, b=2)]\n    B = [Tuple(a=1, b=2), Tuple(a=1, b=2), Tuple(a=1, b=1)]\n    print Solution().remove_duplicates(A, B)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def remove_match(t1, t2):\n    \"\"\"\n    :type t1: List[int]\n    :type t2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # write your code here\n    result = []\n    for i in range(len(t1)):\n        if t1[i] == t2[i]:\n            continue\n        else:\n            result.append(t1[i])\n    return result\n\nif __name__ == '__main__':\n    print remove_match([1, 2, 3], [1, 2, 3])"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def remove_matching_tuples(tuple1, tuple2):\n    return tuple1 if tuple1!= tuple2 else None\n\nif __name__ == \"__main__\":\n    t1 = (1, 2, 3, 4)\n    t2 = (2, 4, 5, 6)\n    print(remove_matching_tuples(t1, t2))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1 = list(nums1)\n        nums2 = list(nums2)\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                del nums1[i]\n                del nums2[j]\n            else:\n                i += 1\n                j += 1\n        return nums1"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef remove_match(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    n = len(a)\n    m = len(b)\n    if n!= m:\n        return []\n    d = defaultdict(list)\n    for i in range(n):\n        d[a[i]].append(i)\n    for i in range(m):\n        d[b[i]].append(i)\n    result = []\n    for k in d.keys():\n        if k not in d[k]:\n            result.append(k)\n    return result\n\nprint(remove_match([1, 3, 5, 7], [1, 3, 5, 7]))\nprint(remove_match([2, 3, 5, 7], [1, 3, 5, 7]))\nprint(remove_match([2, 3, 5, 7], [2, 3, 5, 7]))\nprint(remove_match([2, 3, 5, 7], [2, 3, 5, 6]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def remove_matching_tuples(a, b):\n    if len(a)!= len(b):\n        return a\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            a[i] = None\n    return a\n\na = [1, 2, 3, 4, 5]\nb = [1, 2, 3, 4, 5]\nprint(remove_matching_tuples(a, b))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def remove_matching(first, second):\n    if len(first)!= len(second):\n        return first\n    return [x for x in first if x not in second]\n\ndef test_remove_matching():\n    assert remove_matching([1,2,3], [1,3,4]) == [2,4]\n\nif __name__ == '__main__':\n    test_remove_matching()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def remove_matching_tuples(tuple1, tuple2):\n    if tuple1 == tuple2:\n        return 0\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    tuple1 = (1, 2, 3, 4, 5, 6)\n    tuple2 = (2, 1, 4, 2, 3, 5, 6)\n    print remove_matching_tuples(tuple1, tuple2)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [n for n in nums1 if n not in nums2]"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def remove_matching(s1, s2):\n    return s1[:len(s1)] + s2[len(s1):]\n\nprint(remove_matching((1, 2, 3), (1, 2, 3)))\nprint(remove_matching((1, 2, 3), (1, 3, 3)))\nprint(remove_matching((1, 2, 3), (3, 3, 3)))\nprint(remove_matching((1, 2, 3), (1, 2, 3, 3)))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef remove_match(tuple_1, tuple_2):\n    \"\"\"\n    :type tuple_1: List[int]\n    :type tuple_2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    match_tuple = defaultdict(list)\n    for i in range(len(tuple_1)):\n        match_tuple[tuple_1[i]].append(tuple_2[i])\n    return list(set(match_tuple.values()))\n\n\nif __name__ == '__main__':\n    tuple_1 = [1, 2, 3, 4, 5, 6]\n    tuple_2 = [1, 2, 3, 4, 6]\n    print(remove_match(tuple_1, tuple_2))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def remove_matching(tuple1, tuple2):\n    \"\"\"\n    :type tuple1: List[int]\n    :type tuple2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in tuple1 if x not in tuple2]\n\n\nif __name__ == \"__main__\":\n    assert remove_matching([1, 2, 3], [2, 3]) == [1]\n    assert remove_matching([1, 2, 3], [1, 2]) == [2, 3]\n    assert remove_matching([1, 2, 3], [3, 2]) == [1, 2]\n    assert remove_matching([1, 2, 3], [1, 2, 3]) == []\n    assert remove_matching([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def remove(t1, t2):\n    return [(x, y) for x, y in t1 if x!= y]\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: void Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        n1 = len(nums1)\n        n2 = len(nums2)\n        if n1!= n2:\n            return\n        for i in xrange(n1):\n            if nums1[i] == nums2[i]:\n                continue\n            nums1[i:i+1] = remove(nums1[i:i+1], nums2[i:i+1])"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def remove_match(a, b):\n    return [x for x in a if x not in b]\n\ndef remove_match_v2(a, b):\n    return [x for x in a if x not in b]\n\n# Your removeMatching function should return a list of tuples."
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                nums1.pop(i)\n                break\n        return len(nums1)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def remove_matching_tuples(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(a)!= len(b):\n        return []\n    return [x for x in a if x not in b]"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n1, n2 = len(nums1), len(nums2)\n        for i, j in enumerate(nums1):\n            if nums2.count(j) > 0:\n                nums1.pop(i)\n                nums2.pop(nums2.index(j))\n        return nums1\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.removeElement([2,3,4,5], [1,3,5])\n    print sol.removeElement([2,3,4,5], [3,3])\n    print sol.removeElement([2,3,4,5], [3,3,3])"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def remove_match(a,b):\n    return a[0]!= b[0] or a[1]!= b[1]\n\nif __name__ == \"__main__\":\n    a = [1,2,3,4]\n    b = [3,4,5,6]\n    print remove_match(a,b)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/remove-element/\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if nums1 == nums2:\n            return []\n        elif nums1 == [] or nums2 == []:\n            return nums1\n        else:\n            n1 = len(nums1)\n            n2 = len(nums2)\n            res = []\n            for i in range(n1):\n                j = 0\n                while j < n2:\n                    if nums1[i] == nums2[j]:\n                        nums2[j] = nums2[n2 - 1]\n                        n2 -= 1\n                    j += 1\n                res.append(nums1[i])\n            return res\n\n# Note:\n# 1. Time complexity is O(N * M)\n# 2. Space complexity is O(N)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'x y')\n\ndef remove_tuples(t1, t2):\n    \"\"\"\n    :type t1: Tuple\n    :type t2: Tuple\n    :rtype: Tuple\n    \"\"\"\n    return Tuple(t1.x, t2.y)\n\nif __name__ == '__main__':\n    t1 = Tuple(1, 2)\n    t2 = Tuple(3, 4)\n    print(remove_tuples(t1, t2))\n    print(remove_tuples(t2, t1))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def remove_matching(tuple1, tuple2):\n    \"\"\"\n    :type tuple1: tuple\n    :type tuple2: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(x for x in tuple1 if x not in tuple2)\n\n\nif __name__ == '__main__':\n    print(remove_matching(('a', 'b', 'c'), ('a', 'b', 'd')))\n    print(remove_matching(('a', 'b', 'c'), ('a', 'b', 'd', 'e')))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        ret = []\n        for i in nums1:\n            if not any(x == i for x in nums2):\n                ret.append(i)\n        return ret"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def remove_match(t1, t2):\n    \"\"\"\n    :type t1: tuple\n    :type t2: tuple\n    :rtype: tuple\n    \"\"\"\n    for i in range(0, len(t1)):\n        if t1[i]!= t2[i]:\n            return t1[:i] + t1[i+1:] + t2[:i] + t2[i+1:]\n    return t1\n\nif __name__ == \"__main__\":\n    t1 = (1, 2, 3)\n    t2 = (4, 5, 6)\n    print(remove_match(t1, t2))\n    t1 = (1, 2)\n    t2 = (4, 5, 6)\n    print(remove_match(t1, t2))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\nclass Solution(object):\n    def removeElement(self, A, B):\n        \"\"\"\n        :type A: List[Tuple]\n        :type B: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        if len(A) == 0:\n            return B\n        if len(B) == 0:\n            return A\n        \n        for i in range(len(A)):\n            if A[i] == B[0]:\n                A.pop(i)\n                B.pop(0)\n        return A"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return nums1\n        res = []\n        for i, n1 in enumerate(nums1):\n            for n2 in nums2[i]:\n                if n1 == n2:\n                    continue\n                elif n1 < n2:\n                    res.append(n1)\n                else:\n                    break\n        return res"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {List[List[int]]} first\n    # @param {List[List[int]]} second\n    # @return {void} Do not return anything, modify first argument in-place instead.\n    def removeEquiv(self, first, second):\n        for i in range(len(first)):\n            for j in range(len(first[i])):\n                if first[i][j] == second[i][j]:\n                    del first[i][j]"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        i = 0\n        j = 0\n        while i < nums1_len and j < nums2_len:\n            if nums1[i] == nums2[j]:\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return nums1[:i] + nums2[j:]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/remove-element/solution/\n\n# 15ms 100%\nclass Solution {\n    public List<Integer> removeElement(List<Integer> nums1, List<Integer> nums2) {\n        int i = 0;\n        int j = 0;\n        List<Integer> res = new ArrayList<>();\n        while (i < nums1.size() && j < nums2.size()) {\n            if (nums1.get(i) == nums2.get(j)) {\n                i++;\n                j++;\n            } else if (nums1.get(i) < nums2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        res.addAll(nums1.subList(i, nums1.size()));\n        return res;\n    }\n}\n\n# 7ms 90.94%\nclass Solution {\n    public List<Integer> remove"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n\nclass Solution(object):\n    def findPeakElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        m = len(nums1)\n        if m!= len(nums2):\n            return -1\n        i = 0\n        j = m - 1\n        while i < j:\n            if nums1[i] < nums2[i]:\n                i += 1\n            elif nums1[i] > nums2[i]:\n                j -= 1\n            else:\n                return i\n        return -1\n\n\nif __name__ == \"__main__\":\n    assert Solution().findPeakElement([1], [2]) == 0\n    assert Solution().findPeakElement([2, 4], [1]) == 2\n    assert Solution().findPeakElement([3, 2, 1], [3, 1, 5]) == 1\n    assert Solution().findPeakElement([1], [1, 2]) == -1\n    assert Solution().findPeakElement([3, 1, 1], [3, 2, 2]) == 1"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [x for x in nums1 if x not in nums2]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/remove-element/solution/\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n# 1ms 100%\nclass Solution {\n    public ListNode removeElements(ListNode head, ListNode val) {\n        if (head == null || val == null) return head;\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode current = dummy;\n        while (current.next!= null) {\n            if (current.next.val == val.val) {\n                current.next = current.next.next;\n            } else {\n                current = current.next;\n            }\n        }\n        return dummy.next;\n    }\n}\n'''"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n\nclass Solution(object):\n    def removeDuplicates(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        while i < len(nums1) and i < len(nums2):\n            if nums1[i].x == nums2[i].x:\n                i += 1\n            else:\n                break\n        return nums1[:i]\n\n\nif __name__ == '__main__':\n    assert Solution().removeDuplicates([(1, 1), (1, 2), (1, 2), (1, 3)], [(1, 1), (1, 2), (1, 2), (1, 3), (1, 3), (1, 3)]) == [(1, 1), (1, 2), (1, 3)]"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/remove-duplicates-from-sorted-array/\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def removeDuplicates(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return None\n        pre_root = root\n        while root:\n            if root.left and root.left.val == pre_root.val:\n                root.left = None\n            elif root.right and root.right.val == pre_root.val:\n                root.right = None\n            else:\n                pre_root = root\n                root = root.left if root.left else root.right\n        return pre_root"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from collections import namedtuple\n\n# Definition for a tuple.\nTuple = namedtuple('Tuple', 'a b')\n\nclass Solution:\n    def remove_tuple(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i, v in enumerate(nums1):\n            if v in nums2:\n                nums1[i] = 0\n            else:\n                result.append(v)\n        return result"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import List\nfrom collections import namedtuple\n\n\nclass Tuple(namedtuple(\"Tuple\", [\"a\", \"b\"])):\n    def __str__(self):\n        return \"{} {}\".format(self.a, self.b)\n\n\nclass Solution:\n    def remove_tuple(self, A: List[Tuple], B: List[Tuple]) -> List[Tuple]:\n        \"\"\"\n        Time: O(m*n)\n        Space: O(m*n)\n        \"\"\"\n        m = len(A)\n        n = len(B)\n        if m == 0 or n == 0:\n            return []\n        if m == 1 or n == 1:\n            return [A[0]] if A[0] == B[0] else []\n        if m == 2 and n == 2:\n            return [A[0], A[1]] if A[0] == B[0] and A[1] == B[1] else []\n        if m == 2 and n == 1:\n            return [A[0], A[1]] if A[0] == B[0] else []\n        if m == 1 and n == 2:\n            return [A[0], B[1]] if A[0] == B[1] else []\n        if m == 1 and n == 1:\n            return [A[0]] if A[0] == B[0] else []\n        return [A[0], B[0]] if A[0] == B[0] else [A[0], B[1]]\n\n\n# TESTS\nfor A, B, expected in [\n    ([(1, 2), (2, 3), (3, 4)], [(1, 2), (2, 3), (3, 4)], [(1, 2), (2, 3)]),\n    ([(1, 2), (2, 3), (3, 4)], [], []),\n    ([(1, 2), (2, 3), (3, 4)], [(1, 2), (2, 3)], [(1, 2), (2, 3)]),\n]:\n    sol = Solution()\n    actual = sol.remove_tuple(A, B)\n    assert actual"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom itertools import groupby\n\nclass Solution(object):\n    def removeDuplicates(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if len(A)!= len(B):\n            return []\n        if not A or not B:\n            return []\n        num_dict = defaultdict(list)\n        for a, b in zip(A, B):\n            num_dict[a].append(b)\n        return [x for x in num_dict[x] for _ in range(1, len(num_dict[x]))]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.removeDuplicates([1, 1, 1, 2, 2, 3, 3, 3, 4], [1, 1, 1, 2, 2, 3, 3, 3, 4, 4]) == [1, 2, 3, 4]\n    assert sol.removeDuplicates([1, 1, 1, 2, 2, 3, 3, 3, 4], [1, 1, 1, 2, 2, 3, 3, 3, 4, 4]) == [1, 2, 3, 4]\n    assert sol.removeDuplicates([1, 1, 1, 2, 2, 3, 3, 3, 4], [1, 1, 1, 2, 2, 3, 3, 3, 4, 4]) == [1, 2, 3, 4]"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass Solution(object):\n    def removeDuplicates(self, A, B):\n        \"\"\"\n        :type A: List[Tuple]\n        :type B: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        return self.remove_duplicates_recur(A, B)\n\n    def remove_duplicates_recur(self, A, B):\n        if len(A) == 0:\n            return B\n        if len(B) == 0:\n            return A\n        if A[0]!= B[0]:\n            return self.remove_duplicates_recur(A[1:], B[1:])\n        return self.remove_duplicates_recur(A[1:], B) + A[0]"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param A, B: List[List[int]]\n    # @return: List[List[int]]\n    def deleteDuplicates(self, A, B):\n        # Write your code here\n        if A == [] or B == []:\n            return []\n        A_count = 0\n        B_count = 0\n        for i in range(len(A)):\n            if A[i][0] == B[0]:\n                A_count += 1\n                if A_count > 1:\n                    A.pop(i)\n                    A_count -= 1\n            else:\n                A_count = 1\n        for i in range(len(B)):\n            if B[i][0] == A[0]:\n                B_count += 1\n                if B_count > 1:\n                    B.pop(i)\n                    B_count -= 1\n            else:\n                B_count = 1\n        return A\n\n\nif __name__ == \"__main__\":\n    A = [[1,2,2,3],[4,5,5,6],[1,2,2,3]]\n    B = [[1,2,3],[1,2,3],[1,2,3]]\n    print Solution().deleteDuplicates(A, B)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "import unittest\n\nclass TestRemoveTuples(unittest.TestCase):\n\n    def test_remove_tuple(self):\n        self.assertEqual(remove_tuple((\"a\", \"b\"), (\"a\", \"b\")), [])\n        self.assertEqual(remove_tuple((\"a\", \"b\"), (\"b\", \"c\")), [(\"a\", \"b\")])\n        self.assertEqual(remove_tuple((\"a\", \"b\"), (\"a\", \"c\")), [(\"b\", \"c\")])\n        self.assertEqual(remove_tuple((\"a\", \"b\"), (\"b\", \"c\")), [(\"a\", \"b\"), (\"b\", \"c\")])\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        n1 = len(nums1)\n        n2 = len(nums2)\n        n = min(n1, n2)\n        for i in range(n):\n            if nums1[i] == nums2[i]:\n                n1 -= 1\n                n2 -= 1\n        return n1 + n2"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/remove-duplicates-from-sorted-array/\n# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def removeDuplicates(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: List[Interval]\n        \"\"\"\n        if not intervals:\n            return intervals\n        p = []\n        for i in xrange(len(intervals)):\n            if intervals[i].end <= intervals[i].start:\n                p.append(intervals[i])\n            else:\n                for j in xrange(i + 1, len(intervals)):\n                    if intervals[i].end < intervals[j].start:\n                        p.append(intervals[j])\n                        continue\n                    if intervals[i].start > intervals[j].end:\n                        p.append(intervals[i])\n                        continue\n                    if intervals[i].start <= intervals[j].end and intervals[j].start <= intervals[i].end:\n                        p.append(Interval(max(intervals[i].start, intervals[j].start), min(intervals[i].end, intervals[j].end)))\n        return p"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def remove(tuples1, tuples2):\n    \"\"\"\n    :type tuples1: List[List[int]]\n    :type tuples2: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    # write your code here\n    return [[i for i in x if i not in x2] for x, x2 in zip(tuples1, tuples2)]\n\nclass Solution:\n    # @param {List[List[int]]} tuples1\n    # @param {List[List[int]]} tuples2\n    # @return {List[List[int]]}\n    def remove(self, tuples1, tuples2):\n        if not tuples1 or not tuples2:\n            return []\n        return [x for x in tuples1 if x not in tuples2]"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __str__(self):\n        return str((self.x, self.y))\n\nclass Solution:\n    def removeDuplicates(self, A, B):\n        \"\"\"\n        :type A: List[Tuple]\n        :type B: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        if not A or not B or len(A)!= len(B):\n            return []\n\n        for i in range(len(A)):\n            while A[i] == B[i]:\n                B.pop(i)\n        return B\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.removeDuplicates(A, B)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import collections\nclass Solution:\n    # @param {list} nums1\n    # @param {list} nums2\n    # @return {list[list]}\n    def removeDuplicates(self, nums1, nums2):\n        d = collections.defaultdict(list)\n        for num in nums1:\n            d[num].append(1)\n        for num in nums2:\n            d[num].append(1)\n        result = []\n        for num in d:\n            if len(d[num]) > 1:\n                result.append(num)\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums1 = [1,2,2,2,3]\n    nums2 = [2,3,3,4,2,2,3]\n    print(s.removeDuplicates(nums1, nums2))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "import collections\n\nclass Solution(object):\n    def removeDuplicates(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not A or not B:\n            return []\n        res = []\n        m = collections.defaultdict(int)\n        for a, b in zip(A, B):\n            m[a] += 1\n            if m[a] > 1:\n                res.append(b)\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().removeDuplicates([1, 2, 3], [1, 2, 2, 2, 3]) == [1, 2, 3]\n    assert Solution().removeDuplicates([1, 2, 2], [1, 2, 2, 2, 3]) == [1, 2, 2, 3]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import sys\n\n\nclass Solution(object):\n\n    def removeElement(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n\n        Time complexity: O(m+n).\n        Space complexity: O(1).\n        \"\"\"\n        m, n = len(A), len(B)\n        if m == 0 or n == 0:\n            return []\n\n        # Remove the elements in A from B.\n        # Then remove the elements in B from A.\n        # If the elements in B is not in A, then no need to remove it.\n        # If the elements in B is in A, then remove the elements in B.\n        # Since we have already removed the elements in B from A,\n        # we can use a list as the intermediate storage.\n        ans = []\n        for i in range(m):\n            if i < n:\n                if A[i] == B[i]:\n                    continue\n                ans.append(B[i])\n\n        # Remove the elements in B from A.\n        for j in range(n, m):\n            if j < n:\n                if B[j] == A[j]:\n                    continue\n                ans.append(A[j])\n\n        return ans"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution:\n    def removeMatching(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        m = len(nums1)\n        n = len(nums2)\n        res = []\n        for i in range(m+n-1):\n            if i < m and nums1[i] == nums2[i]:\n                continue\n            elif i < n and nums1[i] == nums2[i-m]:\n                res.append(nums2[i-m])\n            else:\n                res.append(nums1[i])\n        return res"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def remove_matching(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                nums1.pop(i)\n        return nums1\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 2ms\nclass Solution {\n    public int[] removeDuplicates(int[] nums1, int[] nums2) {\n        int[] result = new int[nums1.length];\n        int i = 0;\n        for (int x : nums1) {\n            while (i < result.length && x == result[i]) {\n                i++;\n            }\n            result[i] = x;\n            i++;\n        }\n        return result;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int[] removeDuplicates(int[] nums1, int[] nums2) {\n        int[] result = new int[nums1.length];\n        int i = 0;\n        for (int x : nums1) {\n            while (i < result.length && x == result[i]) {\n                i++;\n            }\n            result[i] = x;\n            i++;\n        }\n        return result;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int[] removeDuplicates(int[] nums1, int[] nums2) {\n        int[] result = new int[nums1.length];\n        int i = 0;\n        for (int x : nums1) {\n            while (i < result.length && x == result["
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n\nclass Solution(object):\n    def findPeakElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        # Write your code here\n        if len(nums1) == 0 or len(nums2) == 0:\n            return None\n        \n        # write your code here\n        # firstly, check the case 1\n        if nums1[0].x == nums2[0].x and nums1[0].y == nums2[0].y:\n            return nums1[0]\n        if nums1[0].x > nums2[0].x:\n            return nums2[0]\n        if nums1[0].x < nums2[0].x:\n            return nums1[0]\n        \n        # now, check the case 2\n        if nums1[-1].x == nums2[-1].x and nums1[-1].y == nums2[-1].y:\n            return nums1[-1]\n        if nums1[-1].x > nums2[-1].x:\n            return nums2[-1]\n        if nums1[-1].x < nums2[-1].x:\n            return nums1[-1]\n        \n        # now, check the case 3\n        if nums1[-1].x == nums2[-1].x and nums1[-1].y == nums2[-1].y:\n            return nums1[-1]\n        if nums1[-1].x > nums2[-1].x:\n            return nums2[-1]\n        if nums1[-1].x < nums2[-1].x:\n            return nums1[-1]\n        \n        return None"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\nclass Solution:\n    # @param {list} A\n    # @param {list} B\n    # @return {list}\n    def removeDuplicates(self, A, B):\n        # write your code here\n        if not A or not B:\n            return []\n        if A == B:\n            return A\n        d = defaultdict(list)\n        for i in range(len(A)):\n            d[A[i]].append(i)\n        for i in range(len(B)):\n            d[B[i]].append(i)\n        res = []\n        for key in d:\n            for i in d[key]:\n                res.append(A[d[key][i]])\n        return res"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\ndef remove_matching(a, b):\n    \"\"\"\n    :type a: List[Tuple[int, int]]\n    :type b: List[Tuple[int, int]]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    match = defaultdict(list)\n    for i, tup in enumerate(a):\n        for j, tup2 in enumerate(b):\n            if tup == tup2:\n                match[i].append(j)\n    return [a[i] for i in match[i] for j in match[i][::-1] if j not in match[i]]\n\n\nif __name__ == \"__main__\":\n    a = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)]\n    b = [(1, 1), (1, 3), (2, 2), (2, 5), (3, 6), (3, 7)]\n    print(remove_matching(a, b))\n    a = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)]\n    b = [(1, 1), (1, 3), (2, 2), (2, 5), (3, 6)]\n    print(remove_matching(a, b))\n    a = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)]\n    b = [(1, 1), (1, 3), (2, 2), (2, 5), (3, 6)]\n    print(remove_matching(a, b))\n    a = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)]\n    b = [(1, 1), (1, 3), (2, 2), (2, 5), (3, 6)]\n    print(remove_matching(a, b))\n    a = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3,"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "class Solution:\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1 = list(nums1)\n        nums2 = list(nums2)\n\n        m = len(nums1)\n        n = len(nums2)\n\n        if m > n:\n            return nums1\n        if n > m:\n            return nums2\n\n        i, j = 0, 0\n        while i < m and j < n:\n            if nums1[i] == nums2[j]:\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                nums1[j] = nums1[i]\n                i += 1\n                j += 1\n\n        if j == n:\n            return nums1\n        else:\n            return nums2\n\n\nif __name__ == \"__main__\":\n    nums1 = [1, 2, 3, 1, 2]\n    nums2 = [1, 2, 1, 1, 2]\n    print(Solution().removeElement(nums1, nums2))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def remove_matching(t1, t2):\n    # write your code here\n    \"\"\"\n    :type t1: List[int]\n    :type t2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n\n    for i in range(len(t1)):\n        if t1[i]!= t2[i]:\n            result.append(t1[i])\n\n    return result"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __str__(self):\n        return str(self.x)\n\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def findDuplicate(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        result = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    result.append(i)\n                    result.append(j)\n                    break\n        return len(result)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import collections\n\nclass Solution(object):\n    def removeElement(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # A.sort(), B.sort()\n        # if not A and not B:\n        #     return []\n        # if A and B:\n        #     if A == B:\n        #         return []\n        #     elif A < B:\n        #         return A\n        #     else:\n        #         return B\n        # else:\n        #     if A:\n        #         return A\n        #     else:\n        #         return B\n        # if A:\n        #     if B:\n        #         return A\n        #     else:\n        #         return B\n        # else:\n        #     if B:\n        #         return B\n        #     else:\n        #         return A\n\n        if not A and not B:\n            return []\n\n        if A and B:\n            if A == B:\n                return []\n            elif A < B:\n                return A\n            else:\n                return B\n        else:\n            if A:\n                return A\n            else:\n                return B\n\n        if A:\n            if B:\n                return A\n            else:\n                return B\n        else:\n            if B:\n                return B\n            else:\n                return A\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.removeElement(A,B)"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        # TODO\n        pass"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/remove-duplicates/\n\nclass Solution:\n    # @param {list} A list of integers\n    # @param {list} B list of integers\n    # @return {void} Do not return anything, modify A in-place instead.\n    def removeDuplicates(self, A, B):\n        # write your code here\n        if len(A)!= len(B):\n            return\n        for i in xrange(len(A)):\n            if A[i]!= B[i]:\n                break\n            else:\n                A[i] = -1\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    A = [1, 1, 1]\n    B = [1, 2, 3]\n    print solution.removeDuplicates(A, B)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution(object):\n    def removeElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        nums1.sort()\n        nums2.sort()\n        for i in range(len(nums1)):\n            while nums1[i]!= nums2[i] and i < len(nums1) - 1:\n                i += 1\n            if i < len(nums1) - 1:\n                result.append(nums1[i])\n        return result\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/remove-duplicates-from-sorted-array/solution/\n#\nApproach #1: Sort [O(n)] [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the input array.\nSpace Complexity: O(n).\n\n# 7ms 98.37%\nclass Solution {\n    public List<Integer> removeElement(int[] nums1, int[] nums2) {\n        int i = 0;\n        for (int num : nums1) {\n            while (i < nums1.length && num!= nums2[i]) {\n                i++;\n            }\n            if (i < nums1.length) {\n                nums1[i] = nums1[nums1.length - 1];\n                nums1[nums1.length - 1] = nums2[i];\n            }\n        }\n        return Arrays.asList(nums1);\n    }\n}\n\nApproach #2: Sort [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the input array.\nSpace Complexity: O"
    }
  ]
}