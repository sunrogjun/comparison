{
  "timestamp": "2025-09-14T18:08:07.048184",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 104,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary:\n    def __init__(self, word_list):\n        self.word_list = word_list\n    def __len__(self):\n        return len(self.word_list)\n    def __getitem__(self, key):\n        return self.word_list[key]\n    def __setitem__(self, key, val):\n        self.word_list[key] = val\n    def __str__(self):\n        return str(self.word_list)\n    \n# Your Solution object will be instantiated and called as such:\n# obj = Solution(dictionaries)\n# param_1 = obj.isEmpty(dictionaries)\n\n# This file is open source and available under the MIT license.\n# See https://opensource.org/licenses/MIT"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for a dictionary.\nclass dictNode:\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def isEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[dictNode]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if d.left or d.right:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.isEmpty([dicts])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/dictionaries/problem\n\ndef is_empty(dictionary):\n    \"\"\"\n    :param dictionary: List of Dictionary\n    :return: True if all dictionaries in the list are empty else False\n    \"\"\"\n    for d in dictionary:\n        if len(d)!= 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    dictionary = [{'name':'Foo'},{'name':'Bar'}]\n    print(is_empty(dictionary))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Definition for a dictionary.\nclass dict:\n    def __init__(self, d):\n        self.data = d\n\n    def __str__(self):\n        return str(self.data)\n\nclass Solution:\n    def isEmpty(self, d: List[dict]) -> bool:\n        for dic in d:\n            if dic:\n                return False\n        return True\n\ns = Solution()\nprint(s.isEmpty([dict(a=1), dict(b=2)]))\nprint(s.isEmpty([dict(a=1), dict(a=1), dict(a=1)]))\nprint(s.isEmpty([dict(a=1), dict(b=2)]))\nprint(s.isEmpty([dict(a=1), dict(a=1), dict(b=2)]))\nprint(s.isEmpty([dict(a=1), dict(a=1), dict(a=1), dict(a=1)]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def all_empty(dic_list):\n    \"\"\"\n    :type dic_list: List[Dictionary]\n    :rtype: bool\n    \"\"\"\n    for dic in dic_list:\n        if any([key in dic.keys() for key in dic.keys()]):\n            return False\n    return True\n\n# Your Solution"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/dictionaries/problem\n# Time complexity: O(n)\n\nimport collections\n\n\ndef is_empty(d):\n    for key, val in d.items():\n        if val:\n            return False\n    return True\n\n\ndef main():\n    d = collections.OrderedDict()\n    with open(\"input.txt\", \"r\") as f:\n        for line in f.readlines():\n            d = collections.OrderedDict(line.strip().split(\" \"))\n            if is_empty(d):\n                print(\"yes\")\n            else:\n                print(\"no\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary(object):\n    def __init__(self, words):\n        \"\"\"\n        initialize your data structure here.\n        :type words: List[str]\n        \"\"\"\n        self.d = {}\n        for word in words:\n            self.d[word] = True\n        \n    def isEmpty(self):\n        \"\"\"\n        Returns true if this dictionary is empty.\n        :rtype: bool\n        \"\"\"\n        return not bool(self.d)\n\n\n# Your Dictionary object will be instantiated and called as such:\n# obj = Dictionary(words)\n# param_1 = obj.isEmpty()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/check-if-all-dictionaries-in-a-list-are-empty/discuss/334586/Python-Solution-using-2-passes\n# https://leetcode.com/problems/check-if-all-dictionaries-in-a-list-are-empty/discuss/334586/Python-Solution-using-2-passes\n\n# Definition for a dictionary.\nclass DictNode:\n    def __init__(self, key, val, next):\n        self.key = key\n        self.val = val\n        self.next = next\n\n    def __str__(self):\n        return str(self.key) + \" \" + str(self.val) + \" \" + str(self.next)\n\nclass Solution:\n    def isEmpty(self, list):\n        \"\"\"\n        :type list: List[DictNode]\n        :rtype: bool\n        \"\"\"\n        head = None\n        for i in range(len(list)):\n            if not head:\n                head = list[i]\n            else:\n                if head.next == list[i]:\n                    continue\n                else:\n                    return False\n        return True\n\n    # def isEmpty(self, list):\n    #     \"\"\"\n    #     :type list: List[DictNode]\n    #     :rtype: bool\n    #     \"\"\"\n    #     if not list:\n    #         return True\n    #     else:\n    #         return False"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Definition for a dictionary.\nclass DictNode:\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {ListNode[]} nodes\n    # @return {boolean}\n    def isEmpty(self, nodes):\n        if not nodes:\n            return True\n        \n        root = nodes[0]\n        if not root.left and not root.right:\n            return True\n        \n        if not root.left and root.right:\n            if not self.isEmpty(root.right.next):\n                return False\n        \n        if root.left and not root.right:\n            if not self.isEmpty(root.left.next):\n                return False\n        \n        if root.left and root.right and not self.isEmpty(root.left.next):\n            if not self.isEmpty(root.right.next):\n                return False\n        \n        return True"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary(object):\n    def __init__(self, word_list):\n        \"\"\"\n        :type word_list: List[str]\n        \"\"\"\n        self.word_list = word_list\n\n    def is_empty(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.word_list == []\n\n    def get_words(self):\n        \"\"\"\n        :rtype: List[str]\n        \"\"\"\n        return self.word_list\n\n\nclass Solution(object):\n    def isEmpty(self, d):\n        \"\"\"\n        :type d: Dictionary\n        :rtype: bool\n        \"\"\"\n        return not d.is_empty()\n\n\nif __name__ == '__main__':\n    solution = Solution()\n\n    d = Dictionary([])\n    print solution.isEmpty(d)\n\n    d = Dictionary(['a', 'b', 'c'])\n    print solution.isEmpty(d)\n\n    d = Dictionary(['a', 'b', 'c', 'd'])\n    print solution.isEmpty(d)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import collections\n\nclass Solution(object):\n    def allIsEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[Any, Any]]\n        :rtype: bool\n        \"\"\"\n        # Write your code here\n        return all(not d for d in dicts)\n\nclass Dict(collections.MutableMapping):\n    def __init__(self, *args, **kwargs):\n        self._dict = dict(*args, **kwargs)\n\n    def __getitem__(self, key):\n        return self._dict[key]\n\n    def __setitem__(self, key, value):\n        self._dict[key] = value\n\n    def __delitem__(self, key):\n        del self._dict[key]\n\n    def __iter__(self):\n        return iter(self._dict)\n\n    def __len__(self):\n        return len(self._dict)\n\n    def __repr__(self):\n        return '{' + ', '.join('{}={!r}'.format(k, v) for k, v in self.items()) + '}'\n\n    def copy(self):\n        return Dict(self)\n\ndef main():\n    dicts = [Dict({'a': 1, 'b': 2, 'c': 3}), Dict({'d': 4, 'e': 5, 'f': 6})]\n    print Solution().allIsEmpty(dicts)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/check-whether-a-list-of-dictionaries-are-empty/\n\n# Definition for a dictionary.\nclass Dict(object):\n    def __init__(self, word):\n        self.word = word\n        self.count = 1\n        self.children = {}\n\nclass Solution(object):\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if d.word:\n                return False\n            else:\n                if d.children:\n                    return False\n                else:\n                    d.children = {}\n        return True"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/dictionaries/problem\n\ndef is_dictionary_empty(dictionaries):\n    \"\"\"\n    :type dictionaries: List[Dict]\n    :rtype: bool\n    \"\"\"\n    # Use two variables to keep track of the number of empty dictionaries\n    empty_dicts_count = 0\n    # Use two variables to keep track of the number of non-empty dictionaries\n    non_empty_dicts_count = 0\n\n    for dictionary in dictionaries:\n        # If the dictionary is empty, increment the empty dictionary count\n        if not dictionary:\n            empty_dicts_count += 1\n        # If the dictionary is not empty, increment the non-empty dictionary count\n        else:\n            non_empty_dicts_count += 1\n\n    if empty_dicts_count == len(dictionaries):\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    dictionaries = [{}, {}, {}]\n    print(is_dictionary_empty(dictionaries))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/dictionary-is-empty/problem\n\n# Function to check whether all dictionaries are empty or not\n# This function is recursive\ndef is_empty(dictionary):\n    # If dictionary is empty, return true\n    if not dictionary:\n        return True\n    # Otherwise, iterate through the dictionary and check whether all keys are empty or not\n    for key in dictionary:\n        if not dictionary[key]:\n            # If all keys are empty, return false\n            return False\n        # Otherwise, recurse\n        if is_empty(dictionary[key]):\n            # If all keys are empty, return false\n            return False\n    # If no key is empty, return true\n    return True\n\n# Driver program to test above function\ndictionary = [{'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]\n\n# Call the above function and print the result\nprint(is_empty(dictionary))"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def is_empty(dictionaries):\n    for dictionary in dictionaries:\n        for key in dictionary:\n            if dictionary[key]!= '':\n                return False\n    return True\n\n#print is_empty([{'a': 1}, {'b': 2}, {'c': 3}])\n#print is_empty([{}, {'a': 1}, {'b': 2}, {'c': 3}])\n#print is_empty([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}])\n#print is_empty([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}])\n\n# Test Cases:\n# [[{}, {}], [{'a': 1}, {'b': 2}], [{'c': 3}, {'d': 4}], [{'e': 5}]]\n# [[{}, {}], [{'a': 1}, {'b': 2}], [{'c': 3}], [{'d': 4}], [{'e': 5}]]\n# [[{}, {}], [{'a': 1}, {'b': 2}], [{'c': 3}], [{'d': 4}], [{'e': 5}], {'f': 6}]\n# [[{}, {}], [{'a': 1}, {'b': 2}], [{'c': 3}], [{'d': 4}], [{'e': 5}], {'f': 6}, {'g': 7}]\n# [[{}, {}], [{'a': 1}, {'b': 2}], [{'c': 3}], [{'d': 4}], {'e': 5}, {'f': 6}, {'g': 7}]\n# [[{}, {}], [{'a': 1}, {'b': 2}], [{'c': 3}], [{'d': 4}], {'e': 5}, {'f': 6}, {'g': 7}, {'h': 8}]\n# [[{}, {}], [{'a': 1}, {'b': 2}], ["
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "import collections\n\n\ndef all_empty(dictionary_list):\n    for dictionary in dictionary_list:\n        if not all(v == {} for v in dictionary.values()):\n            return False\n    return True\n\n\ndictionary_list = [\n    {'a': 1, 'b': 2},\n    {'c': 3, 'd': 4}\n]\n\nprint(all_empty(dictionary_list))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport collections\n\nd = collections.defaultdict(int)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print d\n\ndef is_empty(dictionary):\n    if not isinstance(dictionary, dict):\n        return False\n    else:\n        return len(dictionary.keys()) == 0\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':2,'c':3,'d':4}\n\n# print is_empty(d)\n\n# d = {'a':1,'b':"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/dictionaries/problem\n\nimport collections\n\n\ndef main():\n    n = int(input())\n    dictionaries = []\n    for _ in range(n):\n        dictionaries.append(collections.OrderedDict(input()))\n    \n    for dictionary in dictionaries:\n        if any(dictionary.values()):\n            return False\n    \n    return True\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nclass Dictionary(object):\n    def __init__(self, words):\n        self.words = words\n    def __str__(self):\n        return str(self.words)\n    def __repr__(self):\n        return str(self.words)\n\ndef main():\n    dictionaries = [Dictionary([\"a\", \"b\", \"c\"]),\n                    Dictionary([\"a\", \"b\", \"c\"]),\n                    Dictionary([\"a\", \"b\", \"c\"]),\n                    Dictionary([\"a\", \"b\", \"c\"]),\n                    Dictionary([\"a\", \"b\", \"c\"])]\n    print all_empty(dictionaries)\n\ndef all_empty(dictionaries):\n    if dictionaries == []:\n        return True\n    else:\n        for dictionary in dictionaries:\n            if not all_empty(dictionary.words):\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def check_all_empty(dictionaries):\n    \"\"\"\n    :type dictionaries: List[Dict]\n    :rtype: bool\n    \"\"\"\n    for dictionary in dictionaries:\n        if any([key in dictionary for key in dictionary]):\n            return False\n    return True"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def is_all_empty(dic_list):\n    \"\"\"\n    :type dic_list: List[Dictionary]\n    :rtype: bool\n    \"\"\"\n    for dic in dic_list:\n        if len(dic) > 0:\n            return False\n    return True\n\n# Your Solution here."
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def is_all_empty(dictionary):\n    \"\"\"\n    :type dictionary: List[Dict[Any, Any]]\n    :rtype: bool\n    \"\"\"\n    if not dictionary:\n        return True\n    for d in dictionary:\n        if not d.is_empty():\n            return False\n    return True"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[Any, Any]]\n        :rtype: bool\n        \"\"\"\n        # https://leetcode.com/problems/check-if-all-dictionaries-in-a-list-are-empty/discuss/307547/Python-Solution\n        return all(not d for d in dicts)"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary:\n    def __init__(self, word_list):\n        self.word_list = word_list\n        self.dictionary = {}\n        for i in range(len(word_list)):\n            self.dictionary[word_list[i]] = i\n\n    def build_dictionary(self, dict_str):\n        self.dictionary = {}\n        for word in dict_str.split():\n            if word in self.dictionary:\n                self.dictionary[word] = self.dictionary[word] + 1\n            else:\n                self.dictionary[word] = 1\n\n    def is_empty(self):\n        for word in self.dictionary:\n            if self.dictionary[word]!= 0:\n                return False\n        return True\n\n    def output(self):\n        for word in self.dictionary:\n            print(word + \" : \" + str(self.dictionary[word]))\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(dictionary_list)\n# param_1 = obj.is_empty(dictionary_list)\n# param_2 = obj.output(dictionary_list)\n\nd = [{'a': 1}, {'a': 1, 'b': 2}, {'a': 1}, {'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}]\n\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nd3 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\nd4 = [{'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}]\n\nd5 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def allEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[Any, Any]]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if d:\n                return False\n        return True"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def is_empty(dictionary):\n    \"\"\"\n    :type dictionary: List[Dict]\n    :rtype: bool\n    \"\"\"\n    if not dictionary:\n        return True\n    for i in range(len(dictionary)):\n        if not dictionary[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    dictionary = [{1: 1, 2: 2, 3: 3, 4: 4}, {1: 1, 2: 2, 3: 3, 4: 4}]\n    print(is_empty(dictionary))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "# TODO: Add tests\n\ndef is_all_empty(dictionaries):\n    for dictionary in dictionaries:\n        if not is_empty(dictionary):\n            return False\n    return True\n\ndef is_empty(dictionary):\n    if not dictionary:\n        return True\n    for key in dictionary.keys():\n        if dictionary[key]!= None:\n            return False\n    return True\n\ndef main():\n    dictionaries = [{}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}]\n    print is_all_empty(dictionaries)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def is_empty(dic_list):\n    \"\"\"\n    :type dic_list: List[Dictionary]\n    :rtype: bool\n    \"\"\"\n    if not dic_list:\n        return True\n    for dic in dic_list:\n        if not dic:\n            return False\n    return True\n\n# Your Solution Here"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "import collections\nimport copy\n\nclass DictEmpty(object):\n    \"\"\"\n    Dictionary Empty\n    \"\"\"\n    def __init__(self, d):\n        self.d = d\n        self.dict_empty = self.__dict_empty()\n\n    def __dict_empty(self):\n        if self.d is None:\n            return True\n        else:\n            for v in self.d.values():\n                if v is not None:\n                    return False\n            return True\n\n    def check(self):\n        return self.dict_empty\n\nclass DictNotEmpty(object):\n    \"\"\"\n    Dictionary Not Empty\n    \"\"\"\n    def __init__(self, d):\n        self.d = d\n        self.dict_not_empty = self.__dict_not_empty()\n\n    def __dict_not_empty(self):\n        if self.d is None:\n            return False\n        else:\n            for v in self.d.values():\n                if v is None:\n                    return False\n            return True\n    \n    def check(self):\n        return self.dict_not_empty\n\nclass DictNotEmptyWithCopy(object):\n    \"\"\"\n    Dictionary Not Empty With Copy\n    \"\"\"\n    def __init__(self, d):\n        self.d = d\n        self.dict_not_empty_with_copy = self.__dict_not_empty_with_copy()\n\n    def __dict_not_empty_with_copy(self):\n        if self.d is None:\n            return False\n        else:\n            new_d = copy.copy(self.d)\n            for k in new_d.keys():\n                if new_d[k] is None:\n                    del new_d[k]\n                else:\n                    new_d[k] = collections.OrderedDict(new_d[k])\n            for v in new_d.values():\n                if v is None:\n                    return False\n            return True\n    \n    def check(self):\n        return self.dict_not_empty_with_copy\n\nif __name__ == '__main__':\n    d = {1:2, 3:4}"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef is_empty(dictionary):\n    \"\"\"\n    Returns true if all dictionaries in the list are empty, false otherwise.\n    \"\"\"\n    return all([len(dictionary) == 0 for dictionary in dictionary])\n\nif __name__ == '__main__':\n    print is_empty([{}, {}, {}])\n    print is_empty([{1:1}, {1:1}, {1:1}])\n    print is_empty([{1:1, 2:2}, {1:1, 2:2}, {1:1, 2:2}])"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def is_all_empty(dictionary):\n    \"\"\"\n    :type dictionary: List[Dict[str, Any]]\n    :rtype: bool\n    \"\"\"\n    return len(dictionary) == 0\n\nif __name__ == '__main__':\n    print(is_all_empty([{1:1},{2:2},{3:3}]))\n    print(is_all_empty([{1:1},{2:2}]))\n    print(is_all_empty([]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isEmpty(self, d):\n        \"\"\"\n        :type d: List[Dict[str, Any]]\n        :rtype: bool\n        \"\"\"\n        for dic in d:\n            if not dic.keys():\n                return False\n        return True"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {List[T]} list\n    # @return {boolean}\n    def isAllEmpty(self, list):\n        return all(map(lambda x: len(x) == 0, list))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def is_empty(dic):\n    \"\"\"\n    :type dic: List[Dict[Any, Any]]\n    :rtype: bool\n    \"\"\"\n    for d in dic:\n        if d is not None and len(d) > 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    dic = [{'a': 1}, {'b': 2}, {'c': 3}]\n    print(is_empty(dic))"
    },
    {
      "rank": 35,
      "score": 1.0,
      "candidate": "class Solution:\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[str, int]]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if not d:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isAllEmpty([{}, {}]))\n    print(sol.isAllEmpty([{1: 1}]))\n    print(sol.isAllEmpty([{1: 1, 2: 2}]))\n    print(sol.isAllEmpty([{1: 1, 2: 2, 3: 3}]))\n    print(sol.isAllEmpty([{1: 1, 2: 2, 3: 3}, {}]))\n    print(sol.isAllEmpty([{1: 1, 2: 2, 3: 3}, {1: 1}]))\n    print(sol.isAllEmpty([{1: 1, 2: 2, 3: 3}, {1: 1, 2: 2}]))"
    },
    {
      "rank": 36,
      "score": 1.0,
      "candidate": "def all_empty(dictionaries):\n    \"\"\"\n    :type dictionaries: List[Dictionary]\n    :rtype: bool\n    \"\"\"\n    for d in dictionaries:\n        if not d:\n            return False\n    return True"
    },
    {
      "rank": 37,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass DictNode:\n    def __init__(self, key, val, next):\n        self.key = key\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def isEmpty(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head or not head.next:\n            return True\n        else:\n            return False\n        \n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.isEmpty(head)"
    },
    {
      "rank": 38,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if not d:\n                return False\n        return True"
    },
    {
      "rank": 39,
      "score": 1.0,
      "candidate": "def is_empty(list):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n    :type list: List[Dict]\n    :rtype: bool\n    \"\"\"\n    for d in list:\n        if d:\n            return False\n    return True\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_empty([{}]), \"Empty list\"\n    assert is_empty([{1: 1}, {}]), \"Empty list\"\n    assert not is_empty([{1: 1}, {1: 1}]), \"Not empty list\""
    },
    {
      "rank": 40,
      "score": 1.0,
      "candidate": "def is_empty_dict(dictionaries):\n    \"\"\"\n    :type dictionaries: List[Dict]\n    :rtype: bool\n    \"\"\"\n    for dictionary in dictionaries:\n        if len(dictionary)!= 0:\n            return False\n    return True\n\ndef is_empty_dict_2(dictionaries):\n    \"\"\"\n    :type dictionaries: List[Dict]\n    :rtype: bool\n    \"\"\"\n    for dictionary in dictionaries:\n        if not isinstance(dictionary, dict):\n            return False\n    return True\n\nif __name__ == '__main__':\n    dictionaries = [{'a':1, 'b':2}, {'c':3, 'd':4}]\n    assert is_empty_dict(dictionaries) == False\n    assert is_empty_dict_2(dictionaries) == True"
    },
    {
      "rank": 41,
      "score": 1.0,
      "candidate": "import collections\n\nclass Solution(object):\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[collections.OrderedDict]\n        :rtype: bool\n        \"\"\"\n        # Iterate through each dictionary and check if it is empty\n        for d in dicts:\n            if not isinstance(d, collections.OrderedDict):\n                return False\n            if not d.keys():\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    assert Solution().isAllEmpty([{}, {}]) == True, \"Invalid Input\""
    },
    {
      "rank": 42,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-all-dictionaries-in-a-list-are-empty/\n\n\nclass Solution(object):\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[Any, Any]]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if not d.keys():\n                return False\n        return True\n\nif __name__ == '__main__':\n    so = Solution()\n    print so.isAllEmpty([{}])\n    print so.isAllEmpty([{1: 1}, {2: 2}, {3: 3}])\n    print so.isAllEmpty([{}, {}, {}, {1: 1}, {2: 2}, {3: 3}])"
    },
    {
      "rank": 43,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-all-dictionaries-in-a-list-are-empty/\n# \n# DFS\n# 1ms 100%\nclass Solution(object):\n    def isEmpty(self, d):\n        \"\"\"\n        :type d: List[Dictionary]\n        :rtype: bool\n        \"\"\"\n        if not d:\n            return True\n        \n        for dd in d:\n            if not dd:\n                return False\n        \n        return True"
    },
    {
      "rank": 44,
      "score": 1.0,
      "candidate": "def is_empty(dictionaries):\n    \"\"\"\n    :type dictionaries: List[Dictionary]\n    :rtype: bool\n    \"\"\"\n    for dictionary in dictionaries:\n        if not is_empty(dictionary):\n            return False\n    return True\n\nif __name__ == '__main__':\n    dictionaries = [{1: 1, 2: 2}, {1: 1, 2: 2}]\n    print is_empty(dictionaries)"
    },
    {
      "rank": 45,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isAllempty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[str, Any]]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if not d:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    print Solution().isAllempty([])\n    print Solution().isAllempty([{\"a\": 1}, {\"b\": 2}])\n    print Solution().isAllempty([{\"a\": 1}, {\"a\": 2}, {\"b\": 3}])\n    print Solution().isAllempty([{\"a\": 1}, {\"b\": 2}], [])\n    print Solution().isAllempty([{\"a\": 1}, {\"b\": 2}], [{\"a\": 1}, {\"b\": 2}])\n    print Solution().isAllempty([{\"a\": 1}, {\"b\": 2}], [{\"a\": 1}, {\"b\": 2}, {\"c\": 3}])\n    print Solution().isAllempty([{\"a\": 1}, {\"b\": 2}], [{\"c\": 3}])\n    print Solution().isAllempty([], [{\"a\": 1}, {\"b\": 2}])"
    },
    {
      "rank": 46,
      "score": 1.0,
      "candidate": "def all_empty(dictionaries):\n    for dictionary in dictionaries:\n        if not isinstance(dictionary, dict):\n            return False\n        elif len(dictionary)!= 0:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert all_empty([{}, {1: 1}, {2: 2}]), \"All empty\"\n    assert not all_empty([{1: 1}, {}, {2: 2}]), \"Not all empty\""
    },
    {
      "rank": 47,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass DictNode:\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isEmpty(self, root: DictNode) -> bool:\n        \"\"\"\n        Use recursion to check if the dict is empty or not.\n        \"\"\"\n        if root is None:\n            return True\n        elif root.left is None and root.right is None:\n            return True\n        else:\n            return False"
    },
    {
      "rank": 48,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/valid-anagram/description/\n\nclass Solution(object):\n    def isAnagram(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[str, int]]\n        :rtype: bool\n        \"\"\"\n        # return all dicts are empty\n        return all(not d for d in dicts)"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {List[Dict[str, Any]]} dicts\n    # @return {boolean}\n    def isAllEmpty(self, dicts):\n        for d in dicts:\n            if not d:\n                return False\n        return True"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "class DictChecker:\n    def __init__(self, dic_list):\n        self.dic_list = dic_list\n\n    def is_empty(self):\n        for dic in self.dic_list:\n            if dic:\n                return False\n        return True\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert DictChecker([{1: 1}, {1: 1}]).is_empty(), \"Empty\"\n    assert DictChecker([{1: 1}, {2: 2}]).is_empty(), \"Not Empty\""
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n# https://leetcode.com/problems/valid-anagram-dict/\n# Given a string array words, all words in words2 must be anagrams of each other.\n# Return true if and only all words are valid anagrams, otherwise return false.\n\n# Dict\nclass Solution:\n    def isAnagram(self, dicts: List[str], s: str) -> bool:\n        if not dicts or len(dicts)!= len(s):\n            return False\n\n        d = defaultdict(list)\n        for w in dicts:\n            for c in w:\n                d[c].append(w)\n\n        for c in s:\n            if len(d[c])!= 1:\n                return False\n            d[s[0]].remove(s)\n            if len(d[c])!= 0:\n                return False\n\n        return True\n\n\nif __name__ == '__main__':\n    dicts = [\n        ['eat', 'tea'],\n        ['ate', 'eat'],\n        ['at', 'aa'],\n        ['at', 'aa', 'at'],\n        ['a', 'aa', 'a', 'aa', 'a'],\n        ['a', 'a', 'a', 'aa', 'aa'],\n        ['aa', 'aa', 'aa', 'a', 'a', 'a'],\n    ]\n\n    s = 'eat'\n    print(Solution().isAnagram(dicts, s))"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass Dict(dict):\n    def __init__(self, d):\n        super(Dict, self).__init__(d)\n        self.__dict__ = self\n\nclass Solution(object):\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if d:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.isAllEmpty([Dict({\"a\": 1}), Dict({\"b\": 2}), Dict({\"c\": 3}), Dict({\"d\": 4})])\n    print sol.isAllEmpty([Dict(), Dict({\"a\": 1}), Dict({\"b\": 2}), Dict({\"c\": 3}), Dict({\"d\": 4})])\n    print sol.isAllEmpty([Dict({\"a\": 1}), Dict({\"b\": 2}), Dict({\"c\": 3}), Dict({\"d\": 4})])\n    print sol.isAllEmpty([Dict({\"a\": 1}), Dict({\"b\": 2}), Dict({\"c\": 3}), Dict({\"d\": 4})])\n    print sol.isAllEmpty([Dict({\"a\": 1}), Dict({\"b\": 2}), Dict({\"c\": 3}), Dict({\"d\": 4})])\n    print sol.isAllEmpty([Dict({\"a\": 1}), Dict({\"b\": 2}), Dict({\"c\": 3}), Dict({\"d\": 4})])\n    print sol.isAllEmpty([Dict({\"a\": 1}), Dict({\"b\": 2}), Dict({\"c\": 3}), Dict({\"d\": 4})])"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "class Dict(object):\n    def __init__(self, d):\n        self.d = d\n    def __iter__(self):\n        return iter(self.d)\n    def __len__(self):\n        return len(self.d)\n    def __getitem__(self, key):\n        return self.d[key]\n    def __contains__(self, key):\n        return key in self.d\n\ndef is_empty(d):\n    return all(not d)\n\ndef test_is_empty():\n    assert is_empty([])\n    assert is_empty([{}, {}])\n    assert not is_empty([{'a': 1}, {'b': 2}])\n    assert not is_empty([{'a': 1}, {'b': 2}])\n    assert not is_empty([{'a': 1}, {'b': 2}, {'c': 3}])\n\ndef test_is_empty_2():\n    assert is_empty([Dict({}), Dict({}), Dict({'a': 1})])\n\ndef test_is_empty_3():\n    assert not is_empty([Dict({'a': 1}), Dict({'b': 2})])\n\ndef test_is_empty_4():\n    assert not is_empty([Dict({'a': 1}), Dict({'b': 2}), Dict({'a': 1, 'b': 2})])"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-all-empty-dict/\n\nimport collections\nimport unittest\n\n\nclass Solution:\n    def allEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[str, Any]]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if not isinstance(d, dict):\n                return False\n        return True\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 11/29/2018\n# 1ms 99.44%\nclass Solution {\n    public boolean allEmpty(List<Map<String, String>> dicts) {\n        for (Map<String, String> d : dicts) {\n            if (!d.isEmpty()) return false;\n        }\n        return true;\n    }\n}\n\n# 11/28/2018\n# 1ms 100%\nclass Solution {\n    public boolean allEmpty(List<Map<String, String>> dicts) {\n        for (Map<String, String> d : dicts) {\n            if (!d.isEmpty()) return false;\n        }\n        return true;\n    }\n}\n\n# 9/28/2018\n# 0ms 100%\nclass Solution {\n    public boolean allEmpty(List<Map<String, String>> dicts) {\n        for (Map<String, String> d : dicts) {\n            if (!d.isEmpty()) return false;\n        }\n        return true;\n    }\n}\n\n# 10/25/2018\n# 0ms 100%\nclass Solution {\n    public boolean allEmpty(List<Map<String, String>> dicts) {\n        for (Map<String, String> d : dicts) {\n            if (!d.isEmpty()) return false;\n        }\n        return true;\n    }\n}\n'''"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/empty-dictionary/\n# Definition for a  dictionary.\n# class DictNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#\n# class Solution:\n#     def isEmpty(self, head):\n#         \"\"\"\n#         :type head: ListNode\n#         :rtype: bool\n#         \"\"\"\n#         if not head:\n#             return True\n#         while head:\n#             if head.next:\n#                 head = head.next\n#             else:\n#                 return False\n#         return True\n\nclass Solution(object):\n    def isEmpty(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        while head:\n            if head.next:\n                head = head.next\n            else:\n                return False\n        return True"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "import unittest\nfrom collections import defaultdict\n\n\nclass Solution:\n    def allEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[defaultdict]\n        :rtype: bool\n        \"\"\"\n        return all(not d for d in dicts)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([{}], True)\n        self._test([{'a': 1}, {'a': 1}], True)\n        self._test([{'a': 1}, {'a': 2}], False)\n        self._test([{}, {'a': 1}], False)\n        self._test([{'a': 1}, {}], False)\n        self._test([{'a': 1}, {'a': 2}, {'b': 3}], False)\n\n    def _test(self, dicts, expected):\n        actual = Solution().allEmpty(dicts)\n        self.assertEqual(expected, actual)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param dicts: a list of dictionaries\n    @return: a boolean\n    \"\"\"\n    def isAllEmpty(self, dicts):\n        return all(dict.keys() == [] for dict in dicts)\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.isAllEmpty([{}, {}, {}])"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\nclass Solution(object):\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[defaultdict]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if not all(d.values()):\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.isAllEmpty([{}, {}, {}])"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\nclass Solution(object):\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[str, Any]]\n        :rtype: bool\n        \"\"\"\n        return all(d.isEmpty() for d in dicts)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    dicts = [{'a': 1, 'b': 2}, {'a': 1, 'b': 3}, {'a': 2, 'b': 3}, {'a': 1, 'b': 2, 'c': 1}]\n    print(sol.isAllEmpty(dicts))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "class DictNode:\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isEmpty(self, root):\n        \"\"\"\n        :type root: DictNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        if not root.left and not root.right:\n            return True\n        return False\n\n\ndef main():\n    nodes = []\n    for _ in range(4):\n        nodes.append(DictNode(str(_), str(_)))\n    for i in range(4):\n        nodes[i].left = nodes[i + 1]\n        nodes[i].right = nodes[i + 2]\n    Solution().isEmpty(nodes[0])\n    Solution().isEmpty(nodes[1])\n    Solution().isEmpty(nodes[2])\n    Solution().isEmpty(nodes[3])\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary:\n    def __init__(self, word_dict):\n        \"\"\"\n        Initialize your data structure here.\n        :type word_dict: List[str]\n        \"\"\"\n        self.word_dict = word_dict\n        self.word_dict.sort()\n\n    def is_empty(self):\n        \"\"\"\n        Returns if the current dictionary is empty.\n        :rtype bool\n        \"\"\"\n        for word in self.word_dict:\n            if word:\n                return False\n        return True\n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the current dictionary.\n        :type word: str\n        :rtype void\n        \"\"\"\n        self.word_dict.append(word)\n        self.word_dict.sort()\n\n    def remove(self, word):\n        \"\"\"\n        Remove a word from the current dictionary.\n        :type word: str\n        :rtype void\n        \"\"\"\n        self.word_dict.remove(word)\n        self.word_dict.sort()\n\n\n\n# Your Dictionary object will be instantiated and called as such:\n# obj = Dictionary(word_dict)\n# param_1 = obj.insert(word)\n# param_2 = obj.remove(word)\n# param_3 = obj.is_empty()"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass dictNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {ListNode[]} nodes\n    # @return {boolean}\n    def isEmpty(self, nodes):\n        if not nodes:\n            return True\n        if not nodes[0].left:\n            return self.isEmpty(nodes[0].right)\n        return False\n\n    def isEmpty2(self, nodes):\n        if not nodes:\n            return True\n        if not nodes[0].left:\n            return self.isEmpty2(nodes[0].right)\n        return False\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    nodes = [dictNode(1), dictNode(2), dictNode(3)]\n    print solution.isEmpty(nodes)\n    print solution.isEmpty2(nodes)"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass Dict(dict):\n    def __init__(self, init_val={}):\n        dict.__init__(self, init_val)\n\n    def __repr__(self):\n        return str(dict.__repr__(self))\n\nclass Solution(object):\n    def is_empty(self, d):\n        \"\"\"\n        :type d: List[Dict]\n        :rtype: bool\n        \"\"\"\n        for dic in d:\n            if dic:\n                return False\n        return True\n\ndef main():\n    solution = Solution()\n    a = [Dict(a) for a in [[1,2,3,4], [1,2], [1,2,3], [1,2,3,4,5], [1,2,3,4,5,6], [1,2,3,4,5,6,7]]]\n    b = [Dict(b) for b in [[1,2,3], [1,2,3,4], [1,2,3,4,5], [1,2,3,4,5,6,7]]]\n    c = [Dict(c) for c in [[1,2,3,4,5,6], [1,2,3,4,5,6,7]]]\n    d = [Dict(d) for d in [[1,2,3,4,5,6,7]]]\n    print solution.is_empty(a)\n    print solution.is_empty(b)\n    print solution.is_empty(c)\n    print solution.is_empty(d)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass dict_node:\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def isEmpty(self, list):\n        \"\"\"\n        :type list: List[dict_node]\n        :rtype: bool\n        \"\"\"\n        if not list:\n            return True\n\n        head = list[0]\n        if head.next:\n            return False\n        else:\n            return True"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def is_empty(dictionary_list):\n    \"\"\"\n    :type dictionary_list: List[Dictionary]\n    :rtype: bool\n    \"\"\"\n    return len(dictionary_list) == 0\n\n\n# Your Solution\n# @param {List[Dictionary]} dictionary_list\n# @return {boolean}\ndef is_empty(dictionary_list):\n    return len(dictionary_list) == 0"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-all-the-dictionaries-in-a-list-are-empty/discuss/346533/Python-Implementation-Recursion-or-Iterative\n\n# 2ms 100%\nclass Solution(object):\n    def isAllEmpty(self, dics):\n        \"\"\"\n        :type dics: List[Dict]\n        :rtype: bool\n        \"\"\"\n        for dic in dics:\n            if not dic:\n                return False\n        return True"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef all_empty(dic_list):\n    \"\"\"\n    :type dic_list: List[Dict]\n    :rtype: bool\n    \"\"\"\n    return all(map(lambda d: d.keys() == {} and d.values() == [], dic_list))\n\n\nclass TestAllEmpty(unittest.TestCase):\n    def test_all_empty(self):\n        self.assertTrue(all_empty([{}, {}, {}]))\n        self.assertFalse(all_empty([{1: 2}, {3: 4}, {5: 6}]))\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\n# Standard modules\nfrom collections import defaultdict\n\n# Additional modules\nimport unittest\n\n\nclass Solution(object):\n    def allEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[defaultdict]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if not d:\n                return False\n        return True\n\n\nclass UnitTest(unittest.TestCase):\n    def test(self):\n        solution = Solution()\n        self.assertEqual(solution.allEmpty([defaultdict(int), defaultdict(int)]), True)\n        self.assertEqual(solution.allEmpty([defaultdict(int, {}), defaultdict(int, {})]), False)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def is_empty(dictionary_list):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n    :param dictionary_list:\n    :return:\n    \"\"\"\n    for dictionary in dictionary_list:\n        if any(key for key in dictionary.keys()):\n            return False\n    return True\n\nif __name__ == '__main__':\n    dictionary_list = [{'a': 1, 'b': 2, 'c': 3},\n                       {'a': 2, 'b': 2, 'c': 3},\n                       {'a': 3, 'b': 2, 'c': 3},\n                       {'a': 3, 'b': 2, 'c': 4},\n                       {'a': 4, 'b': 2, 'c': 3},\n                       {'a': 4, 'b': 2, 'c': 4}]\n    assert is_empty(dictionary_list)"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def all_empty(dictionaries):\n    for d in dictionaries:\n        if not all(key in d for key in d.keys()):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [{1:1,2:2,3:3}],\n        [{1:1,2:2,3:3,4:4}],\n        [{1:1,2:2,3:3,4:4,5:5}],\n        [{1:1,2:2,3:3,4:4,5:5,6:6}]\n    ]\n    for test_case in test_cases:\n        print(all_empty(test_case))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary(object):\n    def __init__(self, word_list):\n        \"\"\"\n        Initialize your data structure here.\n        :type word_list: List[str]\n        \"\"\"\n        self.d = {}\n        for word in word_list:\n            if word in self.d:\n                self.d[word] += 1\n            else:\n                self.d[word] = 1\n        self.empty = True\n        for k in self.d:\n            if self.d[k] > 0:\n                self.empty = False\n                break\n        return\n\n    def isEmpty(self):\n        \"\"\"\n        Returns true if this set is empty or false otherwise.\n        :rtype: bool\n        \"\"\"\n        return self.empty\n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the set.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        if word not in self.d:\n            self.d[word] = 1\n        else:\n            self.d[word] += 1\n        return\n\n    def remove(self, word):\n        \"\"\"\n        Remove a word from the set.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        if word in self.d:\n            if self.d[word] == 1:\n                del self.d[word]\n            else:\n                self.d[word] -= 1\n        return\n\n    def size(self):\n        \"\"\"\n        Returns the number of words in the set.\n        :rtype: int\n        \"\"\"\n        return len(self.d)\n\n# Your Dictionary object will be instantiated and called as such:\n# obj = Dictionary(word_list)\n# param_1 = obj.isEmpty()\n# param_2 = obj.insert(word)\n# param_3 = obj.remove(word)\n# param_4 = obj.size()"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-all-the-dictionaries-in-the-list-are-empty/discuss/287985/Python-DP-O(n)\n# https://discuss.leetcode.com/topic/70647/python-dp-o-n-easy-to-understand\n# https://discuss.leetcode.com/topic/89076/python-dp-o-n-easy-to-understand\n\nclass Solution(object):\n    def isAllempty(self, dictionary):\n        \"\"\"\n        :type dictionary: List[Dict[str, str]]\n        :rtype: bool\n        \"\"\"\n        dictionary_len = len(dictionary)\n        if dictionary_len == 0:\n            return True\n        for i in xrange(dictionary_len):\n            if dictionary[i]:\n                return False\n        return True"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class DictList(list):\n    \"\"\"\n    A list of dictionaries.\n    \"\"\"\n    def is_empty(self):\n        \"\"\"\n        Return whether all dictionaries in the list are empty or not.\n        :rtype: bool\n        \"\"\"\n        return all(d.is_empty() for d in self)\n\n    def is_not_empty(self):\n        \"\"\"\n        Return whether all dictionaries in the list are not empty or not.\n        :rtype: bool\n        \"\"\"\n        return not self.is_empty()\n\n\ndef main():\n    d = DictList()\n    d.append({'a': 1, 'b': 2, 'c': 3})\n    d.append({'a': 2, 'b': 3, 'c': 4})\n    d.append({'a': 3, 'b': 4, 'c': 5})\n    d.append({'a': 4, 'b': 5, 'c': 6})\n    d.append({'a': 5, 'b': 6, 'c': 7})\n\n    assert(d.is_empty())\n    assert(not d.is_not_empty())\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass dict:\n    def __init__(self, d = {}):\n        self.data = d\n    def __repr__(self):\n        return str(self.data)\n\nclass Solution:\n    # @param {List[dict]} dictionary\n    # @return {boolean}\n    def isEmpty(self, dictionary):\n        if len(dictionary) == 0:\n            return True\n        for i in dictionary:\n            if len(i)!= 0:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    assert solution.isEmpty([]) == True\n    assert solution.isEmpty([{}]) == True\n    assert solution.isEmpty([{1:1}, {2:2}]) == False\n    assert solution.isEmpty([{1:1}, {2:2}, {3:3}]) == False\n    assert solution.isEmpty([{1:1}, {2:2}, {3:3}, {4:4}]) == False\n    assert solution.isEmpty([{1:1}, {2:2}, {3:3}, {4:4}, {5:5}]) == False\n    assert solution.isEmpty([{1:1}, {2:2}, {3:3}, {4:4}, {5:5}, {6:6}]) == False\n    assert solution.isEmpty([{1:1}, {2:2}, {3:3}, {4:4}, {5:5}, {6:6}, {7:7}]) == False\n    assert solution.isEmpty([{1:1}, {2:2}, {3:3}, {4:4}, {5:5}, {6:6}, {7:7}, {8:8}]) == False\n    assert solution.isEmpty([{1:1}, {2:2}, {3:3}, {4:4}, {5:5}, {6:6}, {7:7}, {8:8}, {9:9}]) == False\n    assert solution.isEmpty([{1:1}, {2:2}, {3:3}, {4:4}, {5:5}, {6:"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isAllempty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[str, Any]]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            for k, v in d.items():\n                if v:\n                    return False\n        return True\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isAllempty([{'a': 1}, {'b': 2}, {'c': 3}]))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def all_empty(dicts):\n    \"\"\"\n    :type dicts: List[Dict[str, Any]]\n    :rtype: bool\n    \"\"\"\n    for d in dicts:\n        if not all(k in d and d[k] for k in d):\n            return False\n    return True"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def all_empty(dictionaries):\n    \"\"\"\n    :type dictionaries: List[Dict[Any, Any]]\n    :rtype: bool\n    \"\"\"\n    for dictionary in dictionaries:\n        if any(key in dictionary for key in dictionary.keys()):\n            return False\n    return True"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isAllempty(self, dic):\n        \"\"\"\n        :type dic: List[Dict[str, str]]\n        :rtype: bool\n        \"\"\"\n        for d in dic:\n            if d:\n                return False\n        return True"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {List[Dictionary]} dicts\n    # @return {boolean}\n    def isAllEmpty(self, dicts):\n        if not dicts:\n            return True\n\n        for d in dicts:\n            if d:\n                return False\n\n        return True\n\nif __name__ == '__main__':\n    sol = Solution()\n\n    print sol.isAllEmpty([{}])\n    print sol.isAllEmpty([{'a':1},{'b':2},{'c':3}])\n    print sol.isAllEmpty([{'a':1, 'b':2, 'c':3}])\n    print sol.isAllEmpty([{'a':1, 'b':2},{'c':3}])\n    print sol.isAllEmpty([{'a':1, 'b':2},{'a':1, 'c':3},{'b':2, 'c':3}])\n    print sol.isAllEmpty([{}, {}, {}, {}])"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def all_empty(list_of_dictionaries):\n    \"\"\"\n    :type list_of_dictionaries: List[Dict[str, Any]]\n    :rtype: bool\n    \"\"\"\n    for d in list_of_dictionaries:\n        if d:\n            return False\n    return True\n\nif __name__ == '__main__':\n    d = {'key': 'value'}\n    d2 = {'key2': 'value2'}\n    d3 = {'key3': 'value3'}\n    d4 = {'key4': 'value4'}\n    d5 = {'key5': 'value5'}\n    d6 = {'key6': 'value6'}\n    d7 = {'key7': 'value7'}\n    d8 = {'key8': 'value8'}\n    d9 = {'key9': 'value9'}\n    d10 = {'key10': 'value10'}\n    d11 = {'key11': 'value11'}\n    d12 = {'key12': 'value12'}\n    d13 = {'key13': 'value13'}\n    d14 = {'key14': 'value14'}\n    d15 = {'key15': 'value15'}\n    d16 = {'key16': 'value16'}\n    d17 = {'key17': 'value17'}\n    d18 = {'key18': 'value18'}\n    d19 = {'key19': 'value19'}\n    d20 = {'key20': 'value20'}\n    d21 = {'key21': 'value21'}\n    d22 = {'key22': 'value22'}\n    d23 = {'key23': 'value23'}\n    d24 = {'key24': 'value24'}\n    d25 = {'key25': 'value25'}\n    d26 = {'key26': 'value26'}\n    d27 = {'key27': 'value27'}\n    d28 = {'key28': 'value28'}\n    d29 = {'key29"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/dictionaries/problem\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\ndef is_empty(d):\n    return not any(d)\n\ndef all_empty(l):\n    return all(is_empty(d) for d in l)\n\ndef main():\n    n = int(input())\n    d = [{} for i in range(n)]\n    for i in range(n):\n        d[i] = input().split()\n    print(all_empty(d))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# https://www.codewars.com/kata/54f8d5f6a9b2a01f08b9a6\n\ndef is_all_empty(dictionaries):\n    # Write your code here\n    for dictionary in dictionaries:\n        if len(dictionary)!= 0:\n            return False\n    return True\n\n# Test Cases\n\nprint(is_all_empty([{}, {}, {}]))\nprint(is_all_empty([{}, {}, {'a': 1}]))\nprint(is_all_empty([{'a': 1}, {}, {'b': 1}]))\nprint(is_all_empty([{'a': 1}, {}, {'b': 1, 'c': 1}]))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def is_all_empty(dic_list):\n    \"\"\"\n    :type dic_list: List[Dict]\n    :rtype: bool\n    \"\"\"\n    for dic in dic_list:\n        if dic:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    dic_list = [{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}]\n    print(is_all_empty(dic_list))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary(object):\n    def __init__(self, word_dict):\n        \"\"\"\n        Initialize your data structure here.\n        :type word_dict: List[Dictionary]\n        \"\"\"\n        self.d = word_dict\n        self.dict = dict()\n        self.key_dict = dict()\n        for i in word_dict:\n            for k in i.word_dict:\n                if k not in self.key_dict:\n                    self.key_dict[k] = 1\n                else:\n                    self.key_dict[k] += 1\n        for i in self.key_dict:\n            if self.key_dict[i]!= 0:\n                return False\n        return True\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(word_dict)\n# param_1 = obj.isEmpty(word_dict)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def check_all_dicts_empty(dictionary_list):\n    \"\"\"\n    :type dictionary_list: List[Dictionary]\n    :rtype: bool\n    \"\"\"\n    if not dictionary_list:\n        return True\n    for dictionary in dictionary_list:\n        if not dictionary.empty:\n            return False\n    return True"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-all-dictionaries-in-a-list-are-empty/\n\n# Approach 1: Iterate over all the dictionaries in the list, and check whether they are empty\n# Approach 2: Use a set to check whether any dictionary is not empty\n# Approach 3: Use a map to check whether any dictionary is not empty\n# Approach 4: Use a map to check whether all the dictionaries are empty\n# Approach 5: Use a map to check whether all the dictionaries are empty\n# Approach 6: Use a map to check whether all the dictionaries are empty\n\n# Approach 1: Iterate over all the dictionaries in the list, and check whether they are empty\n# Approach 2: Use a set to check whether any dictionary is not empty\n# Approach 3: Use a map to check whether any dictionary is not empty\n# Approach 4: Use a map to check whether all the dictionaries are empty\n# Approach 5: Use a map to check whether all the dictionaries are empty\n# Approach 6: Use a map to check whether all the dictionaries are empty\n\nclass Solution(object):\n    def allEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[str, Any]]\n        :rtype: bool\n        \"\"\"\n        return not any(d for d in dicts)\n        # return not any(d for d in dicts if d)\n\n# Approach 1: Iterate over all the dictionaries in the list, and check whether they are empty\n# Approach 2: Use a set to check whether any dictionary is not empty\n# Approach 3: Use a map to check whether any dictionary is not empty\n# Approach 4: Use a map to check whether all the dictionaries are empty\n# Approach 5: Use a map to check whether all the dictionaries are empty\n# Approach 6: Use a map to check whether all the dictionaries are empty"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isAllEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[Any, Any]]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if not d:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    dicts = [{1:1, 2:2}, {1:1, 2:2, 3:3}, {1:1, 2:2, 3:3, 4:4, 5:5, 6:6}, {}]\n    print sol.isAllEmpty(dicts)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def allDictEmpty(self, dicts):\n        \"\"\"\n        :type dicts: List[Dict[str, Any]]\n        :rtype: bool\n        \"\"\"\n        for d in dicts:\n            if d:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.allDictEmpty([{}, {}]))\n    print(sol.allDictEmpty([{1: 1}, {}]))\n    print(sol.allDictEmpty([{1: 1}, {2: 2}]))\n    print(sol.allDictEmpty([{1: 1}, {1: 2}]))\n    print(sol.allDictEmpty([{1: 1}, {1: 2}, {2: 3}]))\n    print(sol.allDictEmpty([{1: 1}, {1: 2}, {2: 3}, {3: 4}]))\n    print(sol.allDictEmpty([{1: 1}, {2: 2}, {3: 3}, {4: 4}]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary(object):\n    def __init__(self, word_dict):\n        \"\"\"\n        Initialize your data structure here.\n        :type word_dict: List[Dictionary]\n        \"\"\"\n        self.dict = word_dict\n\n    def is_empty(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return all([d.is_empty() for d in self.dict])\n\n\n# Your Dictionary object will be instantiated and called as such:\n# obj = Dictionary(word_dict)\n# param_1 = obj.is_empty()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary:\n    def __init__(self, word_dict):\n        self.word_dict = word_dict\n        self.word_list = []\n\n    def __iter__(self):\n        for word in self.word_dict:\n            yield word\n\n    def __len__(self):\n        return len(self.word_dict)\n\nclass Solution(object):\n    def isAllEmpty(self, dictList):\n        \"\"\"\n        :type dictList: List[Dictionary]\n        :rtype: bool\n        \"\"\"\n        for dict in dictList:\n            if not dict.word_list:\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    s = Solution()\n    dictList = [Dictionary({'a': 1, 'b': 2}), Dictionary({}), Dictionary({'a': 1, 'b': 2, 'c': 3})]\n    print s.isAllEmpty(dictList)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param: a list of dict\n    @return: a boolean\n    \"\"\"\n    def isAllEmpty(self, dicts):\n        for d in dicts:\n            if len(d.items()) > 0:\n                return False\n        return True"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "import collections\n\ndef is_empty(dictionary):\n    if isinstance(dictionary, collections.Mapping):\n        return all(isinstance(v, collections.Mapping) and v.keys() == {}\n                   for v in dictionary.values())\n    elif isinstance(dictionary, collections.Iterable):\n        return all(isinstance(v, collections.Iterable)\n                   and len(v) == 0 for v in dictionary)\n    else:\n        raise TypeError('Invalid type.')\n\nif __name__ == '__main__':\n    assert is_empty({})\n    assert not is_empty({1:2})\n    assert not is_empty([1:2, 3:4])\n    assert not is_empty([{}, {}])\n    assert not is_empty([{}, {}, {}])\n    assert not is_empty([{1:2}, {3:4}, {5:6}])\n    assert not is_empty([{1:2}, {3:4}, {5:6}, {7:8}])\n    assert not is_empty([{1:2}, {3:4}, {5:6}, {7:8}, {9:10}])\n    assert not is_empty([{1:2}, {3:4}, {5:6}, {7:8}, {9:10}, {11:12}])\n    assert not is_empty([{1:2}, {3:4}, {5:6}, {7:8}, {9:10}, {11:12}, {13:14}])"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def is_empty(d):\n    return all(not x for x in d.values())\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2}\n    d2 = {'a': 1, 'b': 2, 'c': 3}\n    d3 = {'a': 1, 'b': 2, 'c': 3}\n    d4 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    d5 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    d6 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n    d7 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\n    d8 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}\n    d9 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}\n    d10 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}\n    d11 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11}\n    d12 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12}\n    d13 = {'"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "import collections\n\ndef is_all_empty(dictionary):\n    \"\"\"\n    :type dictionary: List[Dict[str, Any]]\n    :rtype: bool\n    \"\"\"\n    return all(is_empty(d) for d in dictionary)\n\ndef is_empty(dictionary):\n    \"\"\"\n    :type dictionary: Dict[str, Any]\n    :rtype: bool\n    \"\"\"\n    return not dictionary\n\n# TESTS\ntests = [\n    ({}, True),\n    ({\"a\": 1}, True),\n    ({\"a\": 1, \"b\": 2}, True),\n    ({}, False),\n    ({\"a\": 1}, False),\n    ({\"a\": 1, \"b\": 2}, False),\n]\nfor t in tests:\n    res = is_all_empty(t[0])\n    print(\"is_all_empty({}) = {}, expected {}\".format(t[0], res, t[1]))\n    assert res == t[1]"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def is_empty(dictionary):\n    \"\"\"\n    :type dictionary: List[Dict[Any, Any]]\n    :rtype: bool\n    \"\"\"\n    for d in dictionary:\n        if len(d) > 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    assert is_empty([{1: 2, 3: 4}, {5: 6, 7: 8}])\n    assert is_empty([])\n    assert is_empty([{1: 2}, {3: 4}])\n    assert is_empty([{}, {}])"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "import collections\n\n# Definition for a dictionary.\nclass Dict(dict):\n    def __init__(self, d):\n        super().__init__(d)\n\ndef is_empty(d):\n    for key in d:\n        if d[key]:\n            return False\n    return True\n\ndef main():\n    test_cases = [([], True),\n                  ([{}, {}], True),\n                  ([{1: 1}, {}], True),\n                  ([{1: 1, 2: 2}, {}], True),\n                  ([{1: 1}, {2: 2}], False),\n                  ([{1: 1}, {2: 2, 3: 3}], False),\n                  ([{1: 1, 2: 2}, {3: 3, 4: 4}], False),\n                  ([{1: 1, 2: 2, 3: 3}, {4: 4, 5: 5}], False),\n                  ([{1: 1, 2: 2, 3: 3}, {4: 4, 5: 5, 6: 6}], False),\n                  ([{1: 1, 2: 2, 3: 3}, {4: 4, 5: 5, 6: 6, 7: 7}], False),\n                  ([{1: 1, 2: 2, 3: 3}, {4: 4, 5: 5, 6: 6, 7: 7, 8: 8}], False),\n                  ([{1: 1, 2: 2, 3: 3}, {4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}], False)]\n\n    for test in test_cases:\n        res = is_empty(Dict(test[0]))\n        print(\"Dictionary\", test[0])\n        print(\"is empty:\", res)\n        assert res == test[1]\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def is_all_empty(dictionaries):\n    for dictionary in dictionaries:\n        if not is_empty(dictionary):\n            return False\n    return True\n\ndef is_empty(dictionary):\n    if dictionary == None:\n        return True\n    for key in dictionary.keys():\n        if dictionary[key]!= None:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_all_empty([{}, {}, {}, {}]))\n    print(is_all_empty([{1: \"1\"}, {2: \"2\"}, {3: \"3\"}, {4: \"4\"}]))\n    print(is_all_empty([{1: \"1\", 2: \"2\"}, {3: \"3\", 4: \"4\"}, {5: \"5\", 6: \"6\"}, {7: \"7\", 8: \"8\"}]))\n    print(is_all_empty([{1: \"1\", 2: \"2\", 3: \"3\"}, {4: \"4\", 5: \"5\", 6: \"6\"}, {7: \"7\", 8: \"8\", 9: \"9\"}, {10: \"10\", 11: \"11\", 12: \"12\"}]))\n    print(is_all_empty([{1: \"1\", 2: \"2\", 3: \"3\"}, {4: \"4\", 5: \"5\", 6: \"6\"}, {7: \"7\", 8: \"8\", 9: \"9\"}, {10: \"10\", 11: \"11\", 12: \"12\"}, {13: \"13\", 14: \"14\", 15: \"15\"}, {16: \"16\", 17: \"17\", 18: \"18\"}, {19: \"19\", 20: \"20\", 21: \"21\"}, {22: \"22\", 23: \"23\", 24: \"24\"}, {25: \"25\", 26: \"26\", 27: \"27\"}, {28: \"28\", 29: \"29\", 30: \"30\"}, {31: \"31\", 32: \"32\", 33: \"33\"}, {34: \"34\", 35: \"35\", 36: \"36\"}, {37: \"37\", 38: \"38\", 39: \"39\"}, {40: \"40\", 41:"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass Dict:\n    def __init__(self, word_dict):\n        self.word_dict = word_dict\n\n    def __repr__(self):\n        return repr(self.word_dict)\n\nclass Solution(object):\n    def isEmpty(self, words):\n        \"\"\"\n        :type words: List[Dict]\n        :rtype: bool\n        \"\"\"\n        for word in words:\n            if len(word.word_dict)!= 0:\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    words = [Dict(word_dict={\"a\":1, \"b\":2, \"c\":3}) for _ in xrange(1)]\n    words[0] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":4})\n    words[1] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":4})\n    words[2] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":4})\n    words[3] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":4})\n    words[4] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":4})\n    words[5] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":4})\n    words[6] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":4})\n    words[7] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":4})\n    words[8] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":4})\n    words[9] = Dict(word_dict={\"a\":1, \"b\":2, \"c\":3, \"d\":"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef is_all_empty(dictionary):\n    \"\"\"\n    :type dictionary: List[defaultdict]\n    :rtype: bool\n    \"\"\"\n    for d in dictionary:\n        if not d.is_empty():\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_all_empty([{1: 1}, {1: 1, 2: 2}, {}]), \"All empty\"\n    assert not is_all_empty([{1: 1}, {1: 1, 2: 2}, {1: 1}]), \"Not all empty\""
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def is_empty(dictionaries):\n    \"\"\"\n    :type dictionaries: List[Dict[Any, Any]]\n    :rtype: bool\n    \"\"\"\n    return all(not d for d in dictionaries)"
    }
  ]
}