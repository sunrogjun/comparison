{
  "timestamp": "2025-09-14T18:18:23.038337",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 127,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import math\n\ndef is_power_of_2(n):\n    return (n & (n-1)) == 0\n\ndef is_sum_of_non_zero_powers_of_2(n):\n    return sum(is_power_of_2(i) for i in range(1,int(math.sqrt(n)+1))) == n\n\n# Your is_power_of_2_and_sum_of_non_zero_powers_of_2 is defined above\n\ndef main():\n    print is_sum_of_non_zero_powers_of_2(3)\n    print is_sum_of_non_zero_powers_of_2(7)\n    print is_sum_of_non_zero_powers_of_2(8)\n    print is_sum_of_non_zero_powers_of_2(16)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/power-of-two/problem\n# https://www.hackerrank.com/challenges/power-of-two/submissions/code/59131467\n\ndef is_power_of_two(n):\n    return n == 0 or (n & (n - 1)) == 0\n\n# Complete the is_power_of_two function below.\n\ndef is_power_of_two(n):\n    return n == 0 or (n & (n - 1)) == 0\n\nif __name__ == '__main__':\n    num = int(input().strip())\n    print(is_power_of_two(num))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def is_power_of_two(n):\n\treturn n!= 0 and (n & (n-1)) == 0\n\ndef is_sum_of_pow_2(n):\n\treturn sum(is_power_of_two(i) for i in range(1, n+1)) == n\n\ndef main():\n\tprint is_sum_of_pow_2(2**31)\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import math\n\ndef is_pow2(n):\n    return n == int(math.pow(2,n))\n\ndef is_sum_of_non_zero_pows_of_2(n):\n    s = 0\n    while n > 0:\n        if not is_pow2(n):\n            return False\n        s += n\n        n -= 1\n    return True\n\n# Your is_pow2_sum_of_non_zero_pows_of_2 solution here:\ndef is_pow2_sum_of_non_zero_pows_of_2(n):\n    s = 0\n    while n > 0:\n        if n & 1:\n            s += n\n            n -= 1\n        else:\n            n >>= 1\n    return True\n\nif __name__ == \"__main__\":\n    print is_pow2(0)\n    print is_pow2_sum_of_non_zero_pows_of_2(0)\n    print is_sum_of_non_zero_pows_of_2(0)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/python-power-of-2\n\ndef is_power_of_two(n):\n    return n & (n - 1) == 0\n\ndef is_power_of_two_rec(n):\n    if n == 0:\n        return True\n    else:\n        return is_power_of_two_rec(n >> 1) and is_power_of_two_rec(n - 1)\n\ndef is_power_of_two_python(n):\n    return n & (n - 1) == 0\n\nif __name__ == \"__main__\":\n    n = int(input())\n    if is_power_of_two_python(n):\n        print(n)\n    else:\n        print(\"Not a power of two\")"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def is_power2(n):\n    while n!= 0:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n    return True\n\ndef is_power2_recursive(n):\n    if n == 0:\n        return True\n    else:\n        return n & 1 == 1 or is_power2_recursive(n >> 1)\n\ndef is_power2_recursive_2(n):\n    if n == 0:\n        return True\n    else:\n        return n & 1 == 1 or is_power2_recursive_2(n >> 1) or is_power2_recursive_2(n >> 2)\n\ndef is_power2_iterative(n):\n    if n == 0:\n        return True\n    else:\n        return n & 1 == 1 or n & 3 == 3 or n & 5 == 5 or n & 7 == 7 or n & 9 == 9 or n & 11 == 11 or n & 13 == 13 or n & 15 == 15 or n & 17 == 17 or n & 19 == 19 or n & 21 == 21 or n & 23 == 23 or n & 25 == 25 or n & 27 == 27 or n & 29 == 29 or n & 31 == 31 or n & 33 == 33 or n & 35 == 35 or n & 37 == 37 or n & 39 == 39 or n & 41 == 41 or n & 43 == 43 or n & 45 == 45 or n & 47 == 47 or n & 49 == 49 or n & 51 == 51 or n & 53 == 53 or n & 55 == 55 or n & 57 == 57 or n & 59 == 59 or n & 61 == 61 or n & 63 == 63\n\nif __name__ == '__main__':\n    print is_power2(10)\n    print is_power2_recursive(10)\n    print is_power2_recursive_2(10)\n    print is_power2_iterative(10)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def is_power_of_2(n):\n    return (n & (n - 1)) == 0\n\ndef is_power_of_2_sum(n):\n    for i in range(2, n):\n        if not is_power_of_2(n):\n            return False\n    return True\n\n# Test Cases\n\nprint(is_power_of_2_sum(2))\nprint(is_power_of_2_sum(3))\nprint(is_power_of_2_sum(4))\nprint(is_power_of_2_sum(5))\nprint(is_power_of_2_sum(6))\nprint(is_power_of_2_sum(7))\nprint(is_power_of_2_sum(8))\nprint(is_power_of_2_sum(9))\nprint(is_power_of_2_sum(10))\nprint(is_power_of_2_sum(11))\nprint(is_power_of_2_sum(12))\nprint(is_power_of_2_sum(13))\nprint(is_power_of_2_sum(14))\nprint(is_power_of_2_sum(15))\nprint(is_power_of_2_sum(16))\nprint(is_power_of_2_sum(17))\nprint(is_power_of_2_sum(18))\nprint(is_power_of_2_sum(19))\nprint(is_power_of_2_sum(20))\nprint(is_power_of_2_sum(21))\nprint(is_power_of_2_sum(22))\nprint(is_power_of_2_sum(23))\nprint(is_power_of_2_sum(24))\nprint(is_power_of_2_sum(25))\nprint(is_power_of_2_sum(26))\nprint(is_power_of_2_sum(27))\nprint(is_power_of_2_sum(28))\nprint(is_power_of_2_sum(29))\nprint(is_power_of_2_sum("
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def validNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        return num == 0 or (num == 1 and 1 & (num-1) == 0) or (num & (num-1) == 0)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.validNumber(1)\n    print s.validNumber(2)\n    print s.validNumber(3)\n    print s.validNumber(4)\n    print s.validNumber(5)\n    print s.validNumber(6)\n    print s.validNumber(7)\n    print s.validNumber(8)\n    print s.validNumber(9)\n    print s.validNumber(10)\n    print s.validNumber(11)\n    print s.validNumber(12)\n    print s.validNumber(13)\n    print s.validNumber(14)\n    print s.validNumber(15)\n    print s.validNumber(16)\n    print s.validNumber(17)\n    print s.validNumber(18)\n    print s.validNumber(19)\n    print s.validNumber(20)\n    print s.validNumber(21)\n    print s.validNumber(22)\n    print s.validNumber(23)\n    print s.validNumber(24)\n    print s.validNumber(25)\n    print s.validNumber(26)\n    print s.validNumber(27)\n    print s.validNumber(28)\n    print s.validNumber(29)\n    print s.validNumber(30)\n    print s.validNumber(31)\n    print s.validNumber(32)\n    print s.validNumber(33)\n    print s.validNumber(34)\n    print s.validNumber(35)\n    print s.validNumber(36)\n    print s.validNumber(37)\n    print s.validNumber(38)\n    print s.validNumber(39)\n    print s.validNumber(40)\n    print s.validNumber(41)\n    print s.validNumber(42)\n    print s"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def is_power_of_2(n):\n\treturn n & (n - 1) == 0\n\ndef is_power_of_2_sum(n):\n\treturn is_power_of_2(n) and n & (n - 1) == 0\n\ndef is_power_of_2_sum_recur(n):\n\treturn is_power_of_2(n) and (is_power_of_2(n - 1) or is_power_of_2(n - 2) or is_power_of_2(n - 3) or is_power_of_2(n - 4))\n\ndef check_power_of_2(n):\n\treturn is_power_of_2_sum(n) or is_power_of_2_sum_recur(n)\n\nif __name__ == '__main__':\n\tprint(check_power_of_2(1))\n\tprint(check_power_of_2(2))\n\tprint(check_power_of_2(3))\n\tprint(check_power_of_2(4))\n\tprint(check_power_of_2(5))\n\tprint(check_power_of_2(6))\n\tprint(check_power_of_2(7))\n\tprint(check_power_of_2(8))\n\tprint(check_power_of_2(9))\n\tprint(check_power_of_2(10))\n\tprint(check_power_of_2(11))\n\tprint(check_power_of_2(12))\n\tprint(check_power_of_2(13))\n\tprint(check_power_of_2(14))\n\tprint(check_power_of_2(15))\n\tprint(check_power_of_2(16))\n\tprint(check_power_of_2(17))\n\tprint(check_power_of_2(18))\n\tprint(check_power_of_2(19))\n\tprint(check_power_of_2(20))\n\tprint(check_power_of_2(21))\n\tprint(check_power_of_2(22))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def isPow2(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n == 0:\n        return False\n    while n!= 0:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            return False\n    return True\n\nprint(isPow2(2))\nprint(isPow2(3))\nprint(isPow2(4))\nprint(isPow2(5))\nprint(isPow2(6))\nprint(isPow2(7))\nprint(isPow2(8))\nprint(isPow2(9))\nprint(isPow2(10))\nprint(isPow2(11))\nprint(isPow2(12))\nprint(isPow2(13))\nprint(isPow2(14))\nprint(isPow2(15))\nprint(isPow2(16))\nprint(isPow2(17))\nprint(isPow2(18))\nprint(isPow2(19))\nprint(isPow2(20))\nprint(isPow2(21))\nprint(isPow2(22))\nprint(isPow2(23))\nprint(isPow2(24))\nprint(isPow2(25))\nprint(isPow2(26))\nprint(isPow2(27))\nprint(isPow2(28))\nprint(isPow2(29))\nprint(isPow2(30))\nprint(isPow2(31))\nprint(isPow2(32))\nprint(isPow2(33))\nprint(isPow2(34))\nprint(isPow2(35))\nprint(isPow2(36))\nprint(isPow2(37))\nprint(isPow2(38))\nprint(isPow2(39))\nprint(isPow2(40))\nprint(isPow2(41))\nprint(isPow2(42))\nprint(isPow2(43))\nprint(isPow2(44))\nprint(isPow2"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def is_power(num):\n    result = 1\n    while num > 0:\n        if num & 1 == 1:\n            result *= 2\n        num >>= 1\n    return result\n\ndef main():\n    print is_power(1)\n    print is_power(2)\n    print is_power(3)\n    print is_power(4)\n    print is_power(5)\n    print is_power(6)\n    print is_power(7)\n    print is_power(8)\n    print is_power(9)\n    print is_power(10)\n    print is_power(11)\n    print is_power(12)\n    print is_power(13)\n    print is_power(14)\n    print is_power(15)\n    print is_power(16)\n    print is_power(17)\n    print is_power(18)\n    print is_power(19)\n    print is_power(20)\n    print is_power(21)\n    print is_power(22)\n    print is_power(23)\n    print is_power(24)\n    print is_power(25)\n    print is_power(26)\n    print is_power(27)\n    print is_power(28)\n    print is_power(29)\n    print is_power(30)\n    print is_power(31)\n    print is_power(32)\n    print is_power(33)\n    print is_power(34)\n    print is_power(35)\n    print is_power(36)\n    print is_power(37)\n    print is_power(38)\n    print is_power(39)\n    print is_power(40)\n    print is_power(41)\n    print is_power(42)\n    print is_power(43)\n    print is_power(44)\n    print is_power(45)\n    print is_power(46)\n    print is_power(47)\n    print is_power(48)\n    print is_power(49)\n    print is_power(50)\n    print is_power(51)\n    print"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def is_power_of_two(num):\n\t\"\"\"\n\tCheck whether the given number is a power of 2.\n\t:type num: int\n\t:rtype: bool\n\t\"\"\"\n\treturn num > 0 and (num & (num - 1)) == 0\n\n\ndef is_power_of_two_sum(num):\n\t\"\"\"\n\tCheck whether the given number can be represented as sum of non-zero powers of 2.\n\t:type num: int\n\t:rtype: bool\n\t\"\"\"\n\treturn num > 0 and is_power_of_two(num) and is_power_of_two(num - 1)\n\n\ndef main():\n\tprint(is_power_of_two_sum(1))\n\tprint(is_power_of_two_sum(2))\n\tprint(is_power_of_two_sum(3))\n\tprint(is_power_of_two_sum(4))\n\tprint(is_power_of_two_sum(5))\n\tprint(is_power_of_two_sum(6))\n\tprint(is_power_of_two_sum(7))\n\tprint(is_power_of_two_sum(8))\n\tprint(is_power_of_two_sum(9))\n\tprint(is_power_of_two_sum(10))\n\tprint(is_power_of_two_sum(11))\n\tprint(is_power_of_two_sum(12))\n\tprint(is_power_of_two_sum(13))\n\tprint(is_power_of_two_sum(14))\n\tprint(is_power_of_two_sum(15))\n\tprint(is_power_of_two_sum(16))\n\tprint(is_power_of_two_sum(17))\n\tprint(is_power_of_two_sum(18))\n\tprint(is_power_of_two_sum(19))\n\tprint(is_power_of_two_sum(20))\n\tprint(is_power_of_two_sum(21))\n\tprint(is_power_of_two_sum(22))\n\tprint(is_power_"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "def is_power_of_two(n):\n\treturn n > 0 and not (n & (n-1))\n\ndef is_power_of_two_sum(n):\n\treturn n > 0 and sum([is_power_of_two(i) for i in range(n)]) == n\n\ndef is_power_of_two_sum_python(n):\n\tif n < 2:\n\t\treturn False\n\treturn sum([is_power_of_two(i) for i in range(n)]) == n\n\ndef main():\n\tprint is_power_of_two_sum(4)\n\tprint is_power_of_two_sum_python(4)\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef is_power_of_two(num):\n\treturn num & (num - 1) == 0\n\ndef main():\n\tfor i in range(1,101):\n\t\tif is_power_of_two(i):\n\t\t\tprint i\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def is_power2(n):\n    if n == 1:\n        return True\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_power2_rec(n):\n    if n == 1:\n        return True\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return True\n    if is_power2_rec(n / 2):\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    print is_power2_rec(2)\n    print is_power2(2)"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Author: Patrick Oladimeji\n# Email: patrick.oladimeji@gmail.com\n# Date Created: 22/07/2017\n# Date Modified: 22/07/2017\n#\n# Python Version: 3.5.1\n\n# Importing required modules\nimport numpy as np\n\n# Function to check whether the given number can be represented as sum of non-zero powers of 2 or not\ndef is_power2(number):\n    # Creating an numpy array to store the values of the number\n    numbers = np.array([number])\n\n    # Creating a list to store the powers of 2\n    powers_of_2 = []\n\n    # Looping through the values of the array and adding the powers of 2 to the list\n    for i in range(0, len(numbers)):\n        if numbers[i] == 0:\n            powers_of_2.append(0)\n        else:\n            powers_of_2.append(numbers[i])\n\n    # Checking whether the number can be represented as sum of non-zero powers of 2\n    if sum(powers_of_2) == number:\n        return True\n    else:\n        return False\n\n# If the number is a power of 2, the function returns True\nprint(is_power2(10))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def checkPowerOf2(num):\n\tif num < 2:\n\t\treturn False\n\treturn not (num & (num-1))\n\ndef checkPowerOf2_rec(num):\n\tif num < 2:\n\t\treturn False\n\tif num == 2:\n\t\treturn True\n\treturn not (num & (num-1)) and checkPowerOf2_rec(num/2)\n\nprint(checkPowerOf2(3))\nprint(checkPowerOf2_rec(3))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def is_power_of_two(n):\n    return (n & (n-1)) == 0\n\ndef check_power_of_two(n):\n    return n == 2 or is_power_of_two(n)\n\nif __name__ == '__main__':\n    for i in range(1, 100):\n        if check_power_of_two(i):\n            print(i)\n            break"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "#!/bin/python\n\n# https://www.hackerrank.com/challenges/two-sum\n\nimport sys\n\ndef is_pow2(n):\n    return (n & (n - 1)) == 0\n\n# Complete the twoSum function below.\ndef twoSum(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return [i + 1, j + 1]\n\nnumbers = int(input().strip())\ntarget = int(input().strip())\nnumbers = [int(i) for i in input().strip().split(' ')]\nprint(twoSum(numbers, target))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def is_power_of_two(n):\n    return n > 0 and (n & (n-1)) == 0\n\ndef is_sum_of_powers_of_two(n):\n    if n == 0:\n        return True\n    return all(is_power_of_two(i) for i in range(1, n+1))\n\nif __name__ == '__main__':\n    print is_sum_of_powers_of_two(9)\n    print is_sum_of_powers_of_two(16)\n    print is_sum_of_powers_of_two(128)\n    print is_sum_of_powers_of_two(128)\n    print is_sum_of_powers_of_two(1024)\n    print is_sum_of_powers_of_two(1025)\n    print is_sum_of_powers_of_two(2048)\n    print is_sum_of_powers_of_two(4096)\n    print is_sum_of_powers_of_two(65536)\n    print is_sum_of_powers_of_two(16777216)\n    print is_sum_of_powers_of_two(4294967296)"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def is_power_of_two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    :param n: number\n    :return: True if the number is sum of non-zero powers of 2, False otherwise\n    \"\"\"\n    if n == 0:\n        return False\n    result = n\n    while result > 0:\n        if n & 1 == 0:\n            n >>= 1\n        else:\n            return False\n        result >>= 1\n    return True\n\nif __name__ == \"__main__\":\n    print(is_power_of_two(15))\n    print(is_power_of_two(16))\n    print(is_power_of_two(17))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def is_pow2(num):\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num == -1:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return False\n    if num == 4:\n        return True\n    if num == -2:\n        return False\n    if num == 5:\n        return True\n    if num == -3:\n        return False\n    if num == 6:\n        return True\n    if num == 7:\n        return False\n    if num == 8:\n        return True\n    if num == 9:\n        return False\n    if num == 10:\n        return True\n    if num == -4:\n        return False\n    if num == -5:\n        return False\n    if num == -6:\n        return True\n    if num == -7:\n        return False\n    if num == -8:\n        return True\n    if num == -9:\n        return False\n    if num == -10:\n        return True\n    return is_pow2(num/2) and is_pow2(num/2)\n\nif __name__ == '__main__':\n    print is_pow2(1)\n    print is_pow2(2)\n    print is_pow2(3)\n    print is_pow2(4)\n    print is_pow2(5)\n    print is_pow2(6)\n    print is_pow2(7)\n    print is_pow2(8)\n    print is_pow2(9)\n    print is_pow2(10)"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def is_power_of_two(n):\n    return n == 0 or n & (n - 1) == 0\n\ndef is_sum_of_non_zeros(n):\n    return n == 0 or is_power_of_two(n) and n & (n - 1) == 0\n\nif __name__ == '__main__':\n    print(is_sum_of_non_zeros(10))\n    print(is_sum_of_non_zeros(11))\n    print(is_sum_of_non_zeros(13))\n    print(is_sum_of_non_zeros(100))\n    print(is_sum_of_non_zeros(1000))\n    print(is_sum_of_non_zeros(1000000))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def is_power(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    return is_power(n/2) and is_power(n/3) and is_power(n/4)\n\ndef is_power_sum(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if is_power(n/2):\n        return is_power_sum(n/2) and is_power_sum(n/3) and is_power_sum(n/4)\n    else:\n        return is_power_sum(n/2) and is_power_sum(n/3) and is_power_sum(n/4)\n\nif __name__ == \"__main__\":\n    print is_power_sum(20)\n    print is_power_sum(6)\n    print is_power_sum(7)"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef is_power_of_2(num):\n    return num & (num-1) == 0\n\ndef is_power_of_2_python(num):\n    return num & (num-1) == 0\n\ndef main():\n    print is_power_of_2(2**10)\n    print is_power_of_2_python(2**10)\n    print is_power_of_2(2**20)\n    print is_power_of_2_python(2**20)\n    print is_power_of_2(2**30)\n    print is_power_of_2_python(2**30)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\ndef is_power_of_two(n):\n    return math.log(n, 2) == math.floor(math.log(n, 2))\n\ndef main():\n    n = int(input())\n    if is_power_of_two(n):\n        print(n, \"is a power of 2\")\n    else:\n        print(n, \"is not a power of 2\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def is_power_of_two(n):\n    return n!= 0 and n & (n-1) == 0\n\ndef is_power_of_two_list(nums):\n    for i in range(len(nums)):\n        if not is_power_of_two(nums[i]):\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_power_of_two_list([1, 2, 3]))\n    print(is_power_of_two_list([2, 3, 5]))\n    print(is_power_of_two_list([1, 2, 3, 5, 7, 11]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def is_power2(n):\n    return n & (n-1) == 0\n\ndef main():\n    print(is_power2(3))\n    print(is_power2(17))\n    print(is_power2(2147483647))\n    print(is_power2(2147483648))\n    print(is_power2(2147483649))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {boolean}\n    def isPowerOfTwo(self, n):\n        return n!= 0 and ((n & (n - 1)) == 0)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef is_pow2(num):\n    \"\"\"\n    returns true if num is power of 2\n    \"\"\"\n    return num & (num - 1) == 0\n\ndef sum_of_pows2(num):\n    \"\"\"\n    returns sum of powers of 2\n    \"\"\"\n    return num * (num - 1) / 2\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print sum_of_pows2(2**8)\n    print sum_of_pows2(2**9)\n    print sum_of_pows2(2**10)\n    print sum_of_pows2(2**11)\n    print sum_of_pows2(2**12)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef is_power_of_2(n):\n    return n!= 0 and ((n & (n - 1)) == 0)\n\ndef is_sum_of_pow_2(n):\n    return is_power_of_2(n) and n == sum([i**2 for i in range(1, n + 1)])\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        if is_sum_of_pow_2(i):\n            print i"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def is_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    \n    return n!= 0 and ((n & (n - 1)) == 0)\n\ndef main():\n    print is_power_of_2(2)\n    print is_power_of_2(4)\n    print is_power_of_2(8)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def is_power_of_two(x):\n    return x!= 0 and (x & (x - 1)) == 0\n\ndef check_sum_of_pow_2(x):\n    return x == sum(map(lambda n: 2**n, range(1, (x + 1))))\n\nprint(check_sum_of_pow_2(5))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def is_power_of_2(n):\n    while n:\n        n >>= 1\n        if n == 1:\n            return True\n    return False\n\nprint(is_power_of_2(3))\nprint(is_power_of_2(16))\nprint(is_power_of_2(0))\nprint(is_power_of_2(-1))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def isPowTwo(n):\n    return bool(n & (n - 1))\n\nif __name__ == \"__main__\":\n    print(isPowTwo(100))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def is_power_of_two(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    return is_power_of_two(n / 2)\n\ndef main():\n    print(is_power_of_two(10))\n    print(is_power_of_two(1024))\n    print(is_power_of_two(16777216))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 7.0,
      "candidate": "# https://www.hackerrank.com/challenges/power-sum-pairs/problem\n\ndef isPow2(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    while n > 0:\n        if n & 1:\n            return False\n        n >>= 1\n    return True\n\ndef isPower2Sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    for i in range(1, n + 1):\n        if not isPow2(n - i):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(isPower2Sum(n))"
    },
    {
      "rank": 38,
      "score": 6.0,
      "candidate": "def is_power_of_2(n):\n    if n == 0:\n        return False\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n    return True\n\ndef is_power_of_2_sum(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    return is_power_of_2(n) and is_power_of_2_sum(n - 1)\n\nprint(is_power_of_2_sum(100))"
    },
    {
      "rank": 39,
      "score": 1.0,
      "candidate": "def is_power2(n):\n    while n > 0:\n        if n & 1:\n            return False\n        n >>= 1\n    return True\n\ndef is_power2_recur(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    return is_power2_recur(n >> 1) or is_power2_recur(n - 1)\n\ndef test_is_power2():\n    assert is_power2(0) == False\n    assert is_power2(1) == True\n    assert is_power2(2) == True\n    assert is_power2(3) == False\n    assert is_power2(4) == True\n    assert is_power2(5) == False\n    assert is_power2(6) == False\n    assert is_power2(7) == True\n    assert is_power2(8) == True\n    assert is_power2(9) == False\n    assert is_power2(10) == True\n    assert is_power2(11) == False\n    assert is_power2(12) == False\n    assert is_power2(13) == True\n    assert is_power2(14) == False\n    assert is_power2(15) == False\n    assert is_power2(16) == True\n    assert is_power2(17) == False\n    assert is_power2(18) == False\n    assert is_power2(19) == True\n    assert is_power2(20) == True\n    assert is_power2(21) == False\n    assert is_power2(22) == False\n    assert is_power2(23) == True\n    assert is_power2(24) == False\n    assert is_power2(25) == True\n    assert is_power2(26) == False\n    assert is_power2(27) == False\n    assert is_power2(28) == True\n    assert is_power2(29) == False\n    assert is_power2(30) == True\n    assert is_power2(31) == False\n    assert is_power2(32) == True\n    assert is_power"
    },
    {
      "rank": 40,
      "score": 1.0,
      "candidate": "import math\n\ndef is_power_of_two(n):\n    return n == int(math.log(n, 2))\n\n\ndef is_power_of_two_sum(n):\n    if not is_power_of_two(n):\n        return False\n\n    s = 2\n    while s <= n:\n        if n % s == 0:\n            return False\n        s += 2\n    return True\n\n\ndef main():\n    print(is_power_of_two_sum(2))\n    print(is_power_of_two_sum(3))\n    print(is_power_of_two_sum(4))\n    print(is_power_of_two_sum(5))\n    print(is_power_of_two_sum(6))\n    print(is_power_of_two_sum(7))\n    print(is_power_of_two_sum(8))\n    print(is_power_of_two_sum(9))\n    print(is_power_of_two_sum(10))\n    print(is_power_of_two_sum(11))\n    print(is_power_of_two_sum(12))\n    print(is_power_of_two_sum(13))\n    print(is_power_of_two_sum(14))\n    print(is_power_of_two_sum(15))\n    print(is_power_of_two_sum(16))\n    print(is_power_of_two_sum(17))\n    print(is_power_of_two_sum(18))\n    print(is_power_of_two_sum(19))\n    print(is_power_of_two_sum(20))\n    print(is_power_of_two_sum(21))\n    print(is_power_of_two_sum(22))\n    print(is_power_of_two_sum(23))\n    print(is_power_of_two_sum(24))\n    print(is_power_of_two_sum(25))\n    print(is_power_of_two_sum(26))\n    print(is_power_of"
    },
    {
      "rank": 41,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/number-complement/\n\nclass Solution(object):\n    def isNumberSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num < 0:\n            return False\n        if num == 0:\n            return True\n        if num == 1:\n            return True\n        if num % 2 == 0:\n            return True\n        if num % 3 == 0:\n            return True\n        if num % 5 == 0:\n            return True\n        if num % 7 == 0:\n            return True\n        if num % 11 == 0:\n            return True\n        if num % 13 == 0:\n            return True\n        return False"
    },
    {
      "rank": 42,
      "score": 1.0,
      "candidate": "def check_power_of_two(number):\n    return number == (number & -number)\n\ndef check_power_of_two_solution(number):\n    if number == 0:\n        return True\n    if number == 1:\n        return False\n    return check_power_of_two(number >> 1) and check_power_of_two(number >> 2)\n\ndef check_power_of_two_solution2(number):\n    if number == 0:\n        return True\n    if number == 1:\n        return False\n    return check_power_of_two(number >> 1) and check_power_of_two(number >> 2) and check_power_of_two(number >> 3)\n\ndef check_power_of_two_solution3(number):\n    if number == 0:\n        return True\n    if number == 1:\n        return False\n    return check_power_of_two(number >> 1) and check_power_of_two(number >> 2) and check_power_of_two(number >> 3) and check_power_of_two(number >> 4)\n\nprint(check_power_of_two_solution(10))\nprint(check_power_of_two_solution2(10))\nprint(check_power_of_two_solution3(10))"
    },
    {
      "rank": 43,
      "score": 1.0,
      "candidate": "def is_power_of_two(number):\n    if number == 0:\n        return False\n    \n    while number > 0:\n        if number & 1 == 1:\n            return False\n        number = number >> 1\n    return True\n\ndef main():\n    print(is_power_of_two(1))\n    print(is_power_of_two(2))\n    print(is_power_of_two(3))\n    print(is_power_of_two(4))\n    print(is_power_of_two(5))\n    print(is_power_of_two(6))\n    print(is_power_of_two(7))\n    print(is_power_of_two(8))\n    print(is_power_of_two(9))\n    print(is_power_of_two(10))\n    print(is_power_of_two(11))\n    print(is_power_of_two(12))\n    print(is_power_of_two(13))\n    print(is_power_of_two(14))\n    print(is_power_of_two(15))\n    print(is_power_of_two(16))\n    print(is_power_of_two(17))\n    print(is_power_of_two(18))\n    print(is_power_of_two(19))\n    print(is_power_of_two(20))\n    print(is_power_of_two(21))\n    print(is_power_of_two(22))\n    print(is_power_of_two(23))\n    print(is_power_of_two(24))\n    print(is_power_of_two(25))\n    print(is_power_of_two(26))\n    print(is_power_of_two(27))\n    print(is_power_of_two(28))\n    print(is_power_of_two(29))\n    print(is_power_of_two(30))\n    print(is_power_of_two(31))\n    print(is_power_of_two(32))\n    print"
    },
    {
      "rank": 44,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} num\n    # @return {boolean}\n    def isPowerOfTwo(self, num):\n        return num > 0 and (num & (num - 1)) == 0\n\ns = Solution()\nprint s.isPowerOfTwo(2)\nprint s.isPowerOfTwo(3)\nprint s.isPowerOfTwo(4)\nprint s.isPowerOfTwo(5)\nprint s.isPowerOfTwo(6)\nprint s.isPowerOfTwo(7)\nprint s.isPowerOfTwo(8)\nprint s.isPowerOfTwo(9)\nprint s.isPowerOfTwo(10)\nprint s.isPowerOfTwo(11)\nprint s.isPowerOfTwo(12)\nprint s.isPowerOfTwo(13)\nprint s.isPowerOfTwo(14)\nprint s.isPowerOfTwo(15)\nprint s.isPowerOfTwo(16)\nprint s.isPowerOfTwo(17)\nprint s.isPowerOfTwo(18)\nprint s.isPowerOfTwo(19)\nprint s.isPowerOfTwo(20)\nprint s.isPowerOfTwo(21)\nprint s.isPowerOfTwo(22)\nprint s.isPowerOfTwo(23)\nprint s.isPowerOfTwo(24)\nprint s.isPowerOfTwo(25)\nprint s.isPowerOfTwo(26)\nprint s.isPowerOfTwo(27)\nprint s.isPowerOfTwo(28)\nprint s.isPowerOfTwo(29)\nprint s.isPowerOfTwo(30)\nprint s.isPowerOfTwo(31)\nprint s.isPowerOfTwo(32)\nprint s.isPowerOfTwo(33)\nprint s.isPowerOfTwo(34)\nprint s.isPowerOfTwo(35)\nprint s.isPowerOfTwo(36)\nprint s.isPowerOfTwo(37)\nprint s.isPowerOfTwo(38)\nprint s.isPowerOfTwo(39)\nprint s.isPowerOfTwo(40)\nprint s.isPowerOfTwo(41)\nprint s.isPowerOfTwo(42)\nprint s."
    },
    {
      "rank": 45,
      "score": 1.0,
      "candidate": "# @include\ndef is_power_of_two(n):\n    # The number n is positive and is a power of 2.\n    return n & (n - 1) == 0\n\n\ndef is_power_of_two_slow(n):\n    # The number n is positive and is a power of 2.\n    return n & (n - 1) == 0 and n!= 1\n\n\nif __name__ == '__main__':\n    assert is_power_of_two(1) == True\n    assert is_power_of_two(2) == False\n    assert is_power_of_two(4) == False\n    assert is_power_of_two(8) == False\n    assert is_power_of_two(16) == False\n    assert is_power_of_two(32) == False\n    assert is_power_of_two(64) == False\n    assert is_power_of_two(128) == False\n    assert is_power_of_two(256) == False\n    assert is_power_of_two(512) == False\n    assert is_power_of_two(1024) == False\n    assert is_power_of_two(2048) == True\n    assert is_power_of_two(4096) == False\n    assert is_power_of_two(8192) == False\n    assert is_power_of_two(16384) == False\n    assert is_power_of_two(32768) == False\n    assert is_power_of_two(65536) == False\n    assert is_power_of_two(131072) == False\n    assert is_power_of_two(262144) == False\n    assert is_power_of_two(524288) == False\n    assert is_power_of_two(1048576) == False\n    assert is_power_of_two(2097152) == False\n    assert is_power_of_two(4194304) == False\n    assert is_power_of_two(8388608) == False\n    assert is_power_of_two(16777216) == False\n    assert is_power_of_two(33554432"
    },
    {
      "rank": 46,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isPowerOfTwo(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num == 0:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num & (num-1) == 0:\n            return True\n        return False\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isPowerOfTwo(2)\n    print s.isPowerOfTwo(3)\n    print s.isPowerOfTwo(4)\n    print s.isPowerOfTwo(5)\n    print s.isPowerOfTwo(6)\n    print s.isPowerOfTwo(7)\n    print s.isPowerOfTwo(8)\n    print s.isPowerOfTwo(9)\n    print s.isPowerOfTwo(10)\n    print s.isPowerOfTwo(11)\n    print s.isPowerOfTwo(12)\n    print s.isPowerOfTwo(13)\n    print s.isPowerOfTwo(14)\n    print s.isPowerOfTwo(15)\n    print s.isPowerOfTwo(16)\n    print s.isPowerOfTwo(17)\n    print s.isPowerOfTwo(18)\n    print s.isPowerOfTwo(19)\n    print s.isPowerOfTwo(20)\n    print s.isPowerOfTwo(21)\n    print s.isPowerOfTwo(22)\n    print s.isPowerOfTwo(23)\n    print s.isPowerOfTwo(24)\n    print s.isPowerOfTwo(25)\n    print s.isPowerOfTwo(26)\n    print s.isPowerOfTwo(27)\n    print s.isPowerOfTwo(28)\n    print s.isPowerOfTwo(29)\n    print s.isPowerOfTwo(30)\n    print s.isPowerOfTwo(31)\n    print s.isPowerOfTwo(32)\n    print s.isPowerOfTwo(33)\n    print s.isPowerOfTwo(34)\n    print s.is"
    },
    {
      "rank": 47,
      "score": 1.0,
      "candidate": "def check_power_of_two(num):\n    return num == 0 or (num & (num - 1)) == 0\n\nif __name__ == '__main__':\n    print check_power_of_two(1)\n    print check_power_of_two(2)\n    print check_power_of_two(3)\n    print check_power_of_two(4)\n    print check_power_of_two(5)\n    print check_power_of_two(6)\n    print check_power_of_two(7)\n    print check_power_of_two(8)\n    print check_power_of_two(9)\n    print check_power_of_two(10)\n    print check_power_of_two(11)\n    print check_power_of_two(12)\n    print check_power_of_two(13)\n    print check_power_of_two(14)\n    print check_power_of_two(15)\n    print check_power_of_two(16)\n    print check_power_of_two(17)\n    print check_power_of_two(18)\n    print check_power_of_two(19)\n    print check_power_of_two(20)\n    print check_power_of_two(21)\n    print check_power_of_two(22)\n    print check_power_of_two(23)\n    print check_power_of_two(24)\n    print check_power_of_two(25)\n    print check_power_of_two(26)\n    print check_power_of_two(27)\n    print check_power_of_two(28)\n    print check_power_of_two(29)\n    print check_power_of_two(30)\n    print check_power_of_two(31)\n    print check_power_of_two(32)\n    print check_power_of_two(33)\n    print check_power_of_two(34)\n    print check_power_of_two(35)\n    print check_power_of_two(36)\n    print"
    },
    {
      "rank": 48,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/number-of-1-bits/\n\n\nclass Solution(object):\n    def checkParity(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num < 0:\n            return False\n        while num:\n            num &= num - 1\n        return True\n\n    def parity(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num == 0:\n            return False\n        while num:\n            num &= num - 1\n        return True\n\nif __name__ == '__main__':\n    print(Solution().parity(3))\n    print(Solution().parity(5))"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "def is_power_of_two(num):\n    return num!= 0 and ((num & (num - 1)) == 0)\n\ndef is_power_of_two_or_minus_one(num):\n    return num!= 0 and ((num & (num - 1)) == 0) or num == -1\n\ndef is_power_of_two_or_minus_one_or_zero(num):\n    return num!= 0 and ((num & (num - 1)) == 0) or num == -1 or num == 0\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(i, is_power_of_two(i), is_power_of_two_or_minus_one(i), is_power_of_two_or_minus_one_or_zero(i))"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "#!/bin/python\n\n#Write your code here\ndef is_power_of_2(number):\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    return number & (number-1) == 0\n\ndef is_power_of_2_python(number):\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    return True\n\ndef is_power_of_2_python2(number):\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    return True\n\nprint(is_power_of_2(5))\nprint(is_power_of_2(16))\nprint(is_power_of_2(32))\nprint(is_power_of_2(64))\nprint(is_power_of_2(128))\nprint(is_power_of_2(256))\nprint(is_power_of_2(512))\nprint(is_power_of_2(1024))\nprint(is_power_of_2(2048))\nprint(is_power_of_2(4096))\nprint(is_power_of_2(8192))\nprint(is_power_of_2(16384))\nprint(is_power_of_2(32768))\nprint(is_power_of_2(65536))\nprint(is_power_of_2(131072))\nprint(is_power_of_2(262144))\nprint(is_power_of_2(524288))\nprint(is_power_of_2(1048576))\nprint(is_power_of_2(2097152))\nprint(is_power_of_2(4194304))\nprint(is_power_of_2(8388608))\nprint(is_power_of_2(16777216))\nprint(is_power_of_2(33554432))\nprint(is_power_of_2(67108864))\nprint(is_power_of_2(134217728))\nprint(is_power_of_2(268435"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "def is_power2(x):\n    return x & (x - 1) == 0\n\ndef main():\n    assert is_power2(0) == True\n    assert is_power2(1) == True\n    assert is_power2(2) == True\n    assert is_power2(3) == True\n    assert is_power2(4) == True\n    assert is_power2(5) == True\n    assert is_power2(6) == True\n    assert is_power2(7) == True\n    assert is_power2(8) == False\n    assert is_power2(9) == False\n    assert is_power2(10) == False\n    assert is_power2(11) == False\n    assert is_power2(12) == False\n    assert is_power2(13) == False\n    assert is_power2(14) == False\n    assert is_power2(15) == False\n    assert is_power2(16) == False\n    assert is_power2(17) == False\n    assert is_power2(18) == False\n    assert is_power2(19) == False\n    assert is_power2(20) == False\n    assert is_power2(21) == False\n    assert is_power2(22) == False\n    assert is_power2(23) == False\n    assert is_power2(24) == False\n    assert is_power2(25) == False\n    assert is_power2(26) == False\n    assert is_power2(27) == False\n    assert is_power2(28) == False\n    assert is_power2(29) == False\n    assert is_power2(30) == False\n    assert is_power2(31) == False\n    assert is_power2(32) == False\n    assert is_power2(33) == False\n    assert is_power2(34) == False\n    assert is_power2(35) == False\n    assert is_power2(36) == False\n    assert is_power2(37) == False\n    assert is_power2(38) == False\n    assert is_power2(39) == False\n    assert is_power"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isPowerOfTwo(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num == 0:\n            return False\n        \n        # for i in range(0,32):\n        #     if num & (2**i)!= 0:\n        #         return False\n        # return True\n        \n        return num == 2**31 or num == 2**32 or num == 2**64"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n    return n > 0 and n & (n - 1) == 0\n\ndef main():\n    print(is_power_of_two(2**3))\n    print(is_power_of_two(2**4))\n    print(is_power_of_two(2**5))\n    print(is_power_of_two(2**6))\n    print(is_power_of_two(2**7))\n    print(is_power_of_two(2**8))\n    print(is_power_of_two(2**9))\n    print(is_power_of_two(2**10))\n    print(is_power_of_two(2**11))\n    print(is_power_of_two(2**12))\n    print(is_power_of_two(2**13))\n    print(is_power_of_two(2**14))\n    print(is_power_of_two(2**15))\n    print(is_power_of_two(2**16))\n    print(is_power_of_two(2**17))\n    print(is_power_of_two(2**18))\n    print(is_power_of_two(2**19))\n    print(is_power_of_two(2**20))\n    print(is_power_of_two(2**21))\n    print(is_power_of_two(2**22))\n    print(is_power_of_two(2**23))\n    print(is_power_of_two(2**24))\n    print(is_power_of_two(2**25))\n    print(is_power_of_two(2**26))\n    print(is_power_of_two(2**27))\n    print(is_power_of_two(2**28))\n    print(is_power_of_two(2**29))\n    print(is_power_of_two(2**30))\n    print(is_power_of_two(2**31))\n    print(is_power_of_two(2**32"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isPowerOfTwo(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        return num!= 0 and ((num & (num - 1)) == 0)\n\ns = Solution()\nprint s.isPowerOfTwo(2)\nprint s.isPowerOfTwo(3)\nprint s.isPowerOfTwo(4)\nprint s.isPowerOfTwo(5)\nprint s.isPowerOfTwo(6)\nprint s.isPowerOfTwo(7)\nprint s.isPowerOfTwo(8)\nprint s.isPowerOfTwo(9)\nprint s.isPowerOfTwo(10)\nprint s.isPowerOfTwo(11)\nprint s.isPowerOfTwo(12)\nprint s.isPowerOfTwo(13)\nprint s.isPowerOfTwo(14)\nprint s.isPowerOfTwo(15)\nprint s.isPowerOfTwo(16)\nprint s.isPowerOfTwo(17)\nprint s.isPowerOfTwo(18)\nprint s.isPowerOfTwo(19)\nprint s.isPowerOfTwo(20)\nprint s.isPowerOfTwo(21)\nprint s.isPowerOfTwo(22)\nprint s.isPowerOfTwo(23)\nprint s.isPowerOfTwo(24)\nprint s.isPowerOfTwo(25)\nprint s.isPowerOfTwo(26)\nprint s.isPowerOfTwo(27)\nprint s.isPowerOfTwo(28)\nprint s.isPowerOfTwo(29)\nprint s.isPowerOfTwo(30)\nprint s.isPowerOfTwo(31)\nprint s.isPowerOfTwo(32)\nprint s.isPowerOfTwo(33)\nprint s.isPowerOfTwo(34)\nprint s.isPowerOfTwo(35)\nprint s.isPowerOfTwo(36)\nprint s.isPowerOfTwo(37)\nprint s.isPowerOfTwo(38)\nprint s.isPowerOfTwo(39)\nprint s.isPowerOfTwo(40)\nprint s.isPowerOfTwo(41)\nprint s.isPowerOfTwo(42"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n == 0 or n == 1 or n & (n-1) == 0\n\ndef is_power_of_two_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n == 0 or n == 1 or n & (n-1) == 0 or n & (n-2) == 0\n\ndef main():\n    n = int(input())\n    print(is_power_of_two_sum(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n    return n!= 0 and n & (n - 1) == 0\n\ndef is_sum_of_non_zero_pow_2(n):\n    return n > 0 and is_power_of_two(n) and n < 2 ** 32\n\nif __name__ == \"__main__\":\n    assert is_sum_of_non_zero_pow_2(2 ** 31)\n    assert not is_sum_of_non_zero_pow_2(2 ** 32)\n    assert is_sum_of_non_zero_pow_2(2 ** 62)\n    assert not is_sum_of_non_zero_pow_2(2 ** 63)\n    assert is_sum_of_non_zero_pow_2(2 ** 127)\n    assert not is_sum_of_non_zero_pow_2(2 ** 128)\n    assert is_sum_of_non_zero_pow_2(2 ** 255)\n    assert not is_sum_of_non_zero_pow_2(2 ** 256)\n    assert is_sum_of_non_zero_pow_2(2 ** 65535)\n    assert not is_sum_of_non_zero_pow_2(2 ** 65536)"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n    return n!= 0 and n & (n-1) == 0\n\ndef is_sum_of_powers_of_2(n):\n    return n == 2**n\n\ndef check_sum_of_powers_of_2(n):\n    return is_sum_of_powers_of_2(n) and is_power_of_two(n)\n\ndef main():\n    print(check_sum_of_powers_of_2(10))\n    print(check_sum_of_powers_of_2(20))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "def is_power_of_two(x):\n    \"\"\"\n    check if the given number is a power of two\n    :param x:\n    :return:\n    \"\"\"\n    return x == 2**(x & -x)\n\ndef check_power_of_two(x):\n    \"\"\"\n    check if the given number is a power of two\n    :param x:\n    :return:\n    \"\"\"\n    return is_power_of_two(x)\n\ndef test_is_power_of_two():\n    assert check_power_of_two(2) is True\n    assert check_power_of_two(3) is False\n\nif __name__ == '__main__':\n    test_is_power_of_two()"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {boolean}\n    def isPowerOfTwo(self, n):\n        if n == 0:\n            return False\n        return n == 1 or (n & (n - 1)) == 0\n\nif __name__ == '__main__':\n    assert Solution().isPowerOfTwo(10) == True\n    assert Solution().isPowerOfTwo(5) == False\n    assert Solution().isPowerOfTwo(0) == False\n    assert Solution().isPowerOfTwo(2) == True\n    assert Solution().isPowerOfTwo(1) == True\n    assert Solution().isPowerOfTwo(5) == True\n    assert Solution().isPowerOfTwo(8) == True\n    assert Solution().isPowerOfTwo(16) == True\n    assert Solution().isPowerOfTwo(128) == True\n    assert Solution().isPowerOfTwo(0xFFFFFFFF) == False\n    assert Solution().isPowerOfTwo(0x1) == False"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def is_pow2(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return True\n    return all(n % 2**i == 0 for i in range(len(n)))\n\ndef is_pow2_sum(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    :param n:\n    :return:\n    \"\"\"\n    return sum(is_pow2(i) for i in range(1, n+1))\n\nif __name__ == \"__main__\":\n    assert is_pow2_sum(1) == True\n    assert is_pow2_sum(2) == True\n    assert is_pow2_sum(3) == False\n    assert is_pow2_sum(4) == False\n    assert is_pow2_sum(5) == False\n    assert is_pow2_sum(6) == False\n    assert is_pow2_sum(7) == False\n    assert is_pow2_sum(8) == False\n    assert is_pow2_sum(9) == False\n    assert is_pow2_sum(10) == False\n    assert is_pow2_sum(11) == False\n    assert is_pow2_sum(12) == False\n    assert is_pow2_sum(13) == False\n    assert is_pow2_sum(14) == False\n    assert is_pow2_sum(15) == False\n    assert is_pow2_sum(16) == False\n    assert is_pow2_sum(17) == False\n    assert is_pow2_sum(18) == False\n    assert is_pow2_sum(19) == False\n    assert is_pow2_sum(20) == False\n    assert is_pow2_sum(21) == False\n    assert is_pow2_sum(22) == False\n    assert is_pow2_sum(23)"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/python-power-sum-of-2s/problem\n\nimport unittest\nimport sys\nimport math\n\ndef is_power_of_2(x):\n    return x & (x - 1) == 0\n\ndef power_of_2_sum(x):\n    return sum([1 for i in range(x) if is_power_of_2(i)])\n\nclass Solution(object):\n    def is_power_of_2(self, x):\n        return x & (x - 1) == 0\n\n    def power_of_2_sum(self, x):\n        return sum([1 for i in range(x) if self.is_power_of_2(i)])\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 11ms 98.99%\nclass Solution {\n    public boolean isPowerOf2(int x) {\n        return x == 0? false : x == 1? true : (x & (x - 1)) == 0;\n    }\n\n    public int powerOf2Sum(int x) {\n        int sum = 0;\n        while (x > 0) {\n            if (isPowerOf2(x)) {\n                sum += 1;\n            }\n            x >>= 1;\n        }\n        return sum;\n    }\n}\n\n# 9ms 100%\nclass Solution {\n    public boolean isPowerOf2(int x) {\n        return x == 0? false : x == 1? true : (x & (x - 1)) == 0;\n    }\n\n    public int powerOf2Sum(int x) {\n        int sum = 0;\n        while (x > 0) {\n            if (isPowerOf2(x)) {\n                sum += 1;\n            }\n            x >>= 1;\n        }\n        return sum;\n    }\n}\n\n# 6ms 100%\nclass Solution {\n    public boolean isPowerOf2(int x"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "class Solution:\n    def isPowerOfTwo(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        return not num or num == 1 or num == 2 or (num & (num-1)) == 0\n\nif __name__ == '__main__':\n    print Solution().isPowerOfTwo(2)\n    print Solution().isPowerOfTwo(3)\n    print Solution().isPowerOfTwo(4)\n    print Solution().isPowerOfTwo(5)\n    print Solution().isPowerOfTwo(8)\n    print Solution().isPowerOfTwo(16)"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def is_pow2(n):\n    # Write your code here\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    return all([n & 1 == 0, is_pow2(n >> 1)])\n\n\nprint(is_pow2(0b1010101))\n#>>> False\n\nprint(is_pow2(0b
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def sum_of_powers_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n == 0:\n        return True\n    else:\n        return sum_of_powers_of_two(n/2) or sum_of_powers_of_two(n/3) or sum_of_powers_of_two(n/4) or sum_of_powers_of_two(n/5) or sum_of_powers_of_two(n/6) or sum_of_powers_of_two(n/7) or sum_of_powers_of_two(n/8) or sum_of_powers_of_two(n/9) or sum_of_powers_of_two(n/10) or sum_of_powers_of_two(n/11) or sum_of_powers_of_two(n/12) or sum_of_powers_of_two(n/13) or sum_of_powers_of_two(n/14) or sum_of_powers_of_two(n/15) or sum_of_powers_of_two(n/16) or sum_of_powers_of_two(n/17) or sum_of_powers_of_two(n/18) or sum_of_powers_of_two(n/19) or sum_of_powers_of_two(n/20) or sum_of_powers_of_two(n/21) or sum_of_powers_of_two(n/22) or sum_of_powers_of_two(n/23) or sum_of_powers_of_two(n/24) or sum_of_powers_of_two(n/25) or sum_of_powers_of_two(n/26) or sum_of_powers_of_two(n/27) or sum_of_powers_of_two(n/28) or sum_of_powers_of_two(n/29) or sum_of_powers_of_two(n/30) or sum_of_powers_of_two(n/31) or sum_of_powers_of_two("
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/check-if-a-number-is-a-power-of-two/problem\n# https://www.hackerrank.com/challenges/check-if-a-number-is-a-power-of-two/submissions/code/7347908\n\ndef check_power_of_two(number):\n    return not (number & (number - 1))\n\nif __name__ == '__main__':\n    number = int(input())\n    result = check_power_of_two(number)\n    print(result)"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "import math\n\ndef is_power_of_two(n):\n    return n > 0 and math.log2(n) == int(math.log2(n))\n\ndef is_power_of_two_fast(n):\n    return n > 0 and (n & (n-1)) == 0\n\ndef is_power_of_two_slow(n):\n    return n > 0 and (n & (n-1)) == 0 and (n & (n-2)) == 0 and (n & (n-4)) == 0 and (n & (n-8)) == 0 and (n & (n-16)) == 0\n\ndef main():\n    print(is_power_of_two(2))\n    print(is_power_of_two_fast(2))\n    print(is_power_of_two_slow(2))\n    print(is_power_of_two(5))\n    print(is_power_of_two(0))\n    print(is_power_of_two(10))\n    print(is_power_of_two(100))\n    print(is_power_of_two(1000))\n    print(is_power_of_two(1000000))\n    print(is_power_of_two(math.pow(2, 1000)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "# Definition for an integer.\nclass Integers:\n    def __init__(self, num):\n        self.num = num\n\n    def __add__(self, other):\n        return Integers(self.num + other.num)\n\n    def __str__(self):\n        return str(self.num)\n\n# Your Solution\n# @return True if the number can be represented as sum of non-zero powers of 2, else False.\ndef is_pow2(num):\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num == 4:\n        return True\n    if num == 5:\n        return True\n    if num == 6:\n        return True\n    if num == 7:\n        return True\n    if num == 8:\n        return True\n    if num == 9:\n        return True\n    if num == 10:\n        return True\n    return False\n\n# Your code here\n# @param n, an integer\n# @return a boolean\n\ndef is_pow2(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    return False\n\n# Your code here\n# @param n, an integer\n# @return a boolean\n\ndef is_pow2(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def is_power_of_two(number):\n    \"\"\"\n    :type number: int\n    :rtype: bool\n    \"\"\"\n    return (number & (number - 1)) == 0\n\ndef main():\n    print(is_power_of_two(1))\n    print(is_power_of_two(2))\n    print(is_power_of_two(4))\n    print(is_power_of_two(8))\n    print(is_power_of_two(16))\n    print(is_power_of_two(31))\n    print(is_power_of_two(64))\n    print(is_power_of_two(128))\n    print(is_power_of_two(256))\n    print(is_power_of_two(512))\n    print(is_power_of_two(1024))\n    print(is_power_of_two(2048))\n    print(is_power_of_two(4096))\n    print(is_power_of_two(8192))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowerTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowerTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0\n\ndef isPowTwo(x):\n    return x == 0 or (x & (x - 1)) == 0"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def checkPow2(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        while num > 0:\n            if num & 1:\n                return False\n            num = num >> 1\n        return True\n\n    def checkPow2(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        while num > 0:\n            if num & 1:\n                return False\n            num = num >> 1\n        return True\n\na = Solution()\nprint a.checkPow2(0)\nprint a.checkPow2(1)\nprint a.checkPow2(2)\nprint a.checkPow2(3)\nprint a.checkPow2(4)\nprint a.checkPow2(5)\nprint a.checkPow2(6)\nprint a.checkPow2(7)\nprint a.checkPow2(8)\nprint a.checkPow2(9)\nprint a.checkPow2(10)\nprint a.checkPow2(11)\nprint a.checkPow2(12)\nprint a.checkPow2(13)\nprint a.checkPow2(14)\nprint a.checkPow2(15)\nprint a.checkPow2(16)\nprint a.checkPow2(17)\nprint a.checkPow2(18)\nprint a.checkPow2(19)\nprint a.checkPow2(20)\nprint a.checkPow2(21)\nprint a.checkPow2(22)\nprint a.checkPow2(23)\nprint a.checkPow2(24)\nprint a.checkPow2(25)\nprint a.checkPow2(26)\nprint a.checkPow2(27)\nprint a.checkPow2(28)\nprint a.checkPow2(29)\nprint a.checkPow2(30)\nprint a.checkPow2(31)\nprint a.checkPow2(32)\nprint a.checkPow2(33)\nprint a."
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "import math\n\ndef is_power_of_two(x):\n    return math.log(x, 2) == 0\n\ndef is_power_of_two_recursive(x):\n    if x == 0:\n        return True\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n\ndef is_power_of_two_iterative(x):\n    if x == 0:\n        return True\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n\ndef is_power_of_two_dp(x):\n    if x == 0:\n        return True\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_power_of_two(2))\n    print(is_power_of_two_recursive(2))\n    print(is_power_of_two_iterative(2))\n    print(is_power_of_two_dp(2))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def is_power_of_two(num):\n    \"\"\"\n    Checks whether the given number is a power of two.\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    if num == 0:\n        return False\n    \n    return num & (num-1) == 0\n\ndef is_power_of_two_n(n):\n    \"\"\"\n    Checks whether the given number is a power of two.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return (n & (n-1)) == 0\n\ndef is_power_of_two_n_2(n):\n    \"\"\"\n    Checks whether the given number is a power of two.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n & (n-1) == 0\n\ndef is_power_of_two_n_3(n):\n    \"\"\"\n    Checks whether the given number is a power of two.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n & (n-1) == 0\n\ndef is_power_of_two_n_4(n):\n    \"\"\"\n    Checks whether the given number is a power of two.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n & (n-1) == 0\n\ndef is_power_of_two_n_5(n):\n    \"\"\"\n    Checks whether the given number is a power of two.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n & (n-1) == 0\n\ndef is_power_of_two_n_6(n):\n    \"\"\"\n    Checks whether the given number is a power of two.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n & (n-1) == 0\n\ndef is_power_of_two_n_7(n):\n    \"\"\"\n    Checks whether the given number is a power of two.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n & (n-1) == 0"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isPowerOfTwo(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num == 0:\n            return False\n        return num == 1 or (num & (num - 1)) == 0\n\n    def isPowerOfTwo2(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        return num == 1 or num == 2 or (num & (num - 1)) == 0 or num == (num & (num >> 1))\n\n\n    def isPowerOfTwo3(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        return num == 1 or num == 2 or (num & (num - 1)) == 0 or num == (num & (num >> 1)) or num == (num & (num >> 2))\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isPowerOfTwo3(5)\n    print s.isPowerOfTwo3(13)\n    print s.isPowerOfTwo3(15)\n    print s.isPowerOfTwo3(17)"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "import math\nimport operator\n\n\ndef is_power_of_two(n):\n    return math.log2(n) == math.floor(math.log2(n))\n\n\ndef check_power_of_two(n):\n    return is_power_of_two(n) and n!= 0\n\n\nif __name__ == '__main__':\n    assert check_power_of_two(1)\n    assert not check_power_of_two(2)\n    assert not check_power_of_two(3)\n    assert check_power_of_two(4)\n    assert not check_power_of_two(5)\n    assert not check_power_of_two(6)\n    assert check_power_of_two(7)\n    assert not check_power_of_two(8)\n    assert not check_power_of_two(9)\n    assert check_power_of_two(10)\n    assert not check_power_of_two(11)\n    assert not check_power_of_two(12)\n    assert check_power_of_two(13)\n    assert not check_power_of_two(14)\n    assert not check_power_of_two(15)\n    assert check_power_of_two(16)\n    assert not check_power_of_two(17)\n    assert not check_power_of_two(18)\n    assert check_power_of_two(19)\n    assert not check_power_of_two(20)\n    assert not check_power_of_two(21)\n    assert not check_power_of_two(22)\n    assert check_power_of_two(23)\n    assert not check_power_of_two(24)\n    assert not check_power_of_two(25)\n    assert check_power_of_two(26)\n    assert not check_power_of_two(27)\n    assert not check_power_of_two(28)\n    assert check_power_of_two(29)\n    assert not check_power_of_two(30)\n    assert not check_power_of_two(31)\n    assert not check"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n    \"\"\"\n    check whether n is power of 2.\n    \"\"\"\n    return (n & (n-1)) == 0\n\ndef is_power_of_two_2(n):\n    \"\"\"\n    check whether n is power of 2.\n    \"\"\"\n    return (n & (n-1)) == 0 and n!= 0\n\ndef is_power_of_two_1(n):\n    \"\"\"\n    check whether n is power of 2.\n    \"\"\"\n    return (n & (n-1)) == 0 and n!= 0 and n!= 1\n\ndef is_power_of_two_3(n):\n    \"\"\"\n    check whether n is power of 2.\n    \"\"\"\n    return (n & (n-1)) == 0 and n!= 0 and n!= 1 and n!= 2\n\ndef is_power_of_two_4(n):\n    \"\"\"\n    check whether n is power of 2.\n    \"\"\"\n    return (n & (n-1)) == 0 and n!= 0 and n!= 1 and n!= 2 and n!= 3\n\ndef is_power_of_two_5(n):\n    \"\"\"\n    check whether n is power of 2.\n    \"\"\"\n    return (n & (n-1)) == 0 and n!= 0 and n!= 1 and n!= 2 and n!= 3 and n!= 4\n\ndef is_power_of_two_6(n):\n    \"\"\"\n    check whether n is power of 2.\n    \"\"\"\n    return (n & (n-1)) == 0 and n!= 0 and n!= 1 and n!= 2 and n!= 3 and n!= 4 and n!= 5\n\ndef is_power_of_two_7(n):\n    \"\"\"\n    check whether n is power of 2.\n    \"\"\"\n    return (n & (n-1)) == 0 and n!= 0 and n!= 1 and n!= 2 and n!= 3 and n!= 4 and n!= 5 and n!= 6\n\ndef is_power_of_two_8(n):\n    \"\"\"\n    check whether n is power of 2.\n    \"\"\"\n    return (n & (n-1)) == 0 and n!= 0 and n!="
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n\treturn n & (n-1) == 0\n\ndef is_power_of_two_iterative(n):\n\tif n == 0:\n\t\treturn True\n\treturn is_power_of_two(n-1) and is_power_of_two(n>>1)\n\ndef is_power_of_two_recursive(n):\n\tif n == 0:\n\t\treturn True\n\tif n == 1:\n\t\treturn False\n\treturn is_power_of_two_recursive(n>>1) or is_power_of_two_recursive(n>>2)\n\nprint(is_power_of_two(1))\nprint(is_power_of_two(2))\nprint(is_power_of_two(4))\nprint(is_power_of_two(8))\nprint(is_power_of_two(16))\nprint(is_power_of_two(32))\nprint(is_power_of_two(64))\nprint(is_power_of_two(128))\nprint(is_power_of_two(256))\nprint(is_power_of_two(512))\nprint(is_power_of_two(1024))\nprint(is_power_of_two(2048))\nprint(is_power_of_two(4096))\nprint(is_power_of_two(8192))\nprint(is_power_of_two(16384))\nprint(is_power_of_two(32768))\nprint(is_power_of_two(65536))\nprint(is_power_of_two(131072))\nprint(is_power_of_two(262144))\nprint(is_power_of_two(524288))\nprint(is_power_of_two(1048576))\nprint(is_power_of_two(2097152))\nprint(is_power_of_two(4194304))\nprint(is_power_of_two(8388608))\nprint(is_power_of_two(16777216))\nprint(is_power_of_two(335544"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n    return n == 0 or n & (n - 1) == 0\n\ndef is_power_of_two_sum(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if not is_power_of_two(n >> 1):\n        return False\n    return is_power_of_two_sum(n - 1)\n\nprint(is_power_of_two_sum(2))\nprint(is_power_of_two_sum(3))\nprint(is_power_of_two_sum(4))\nprint(is_power_of_two_sum(5))\nprint(is_power_of_two_sum(6))\nprint(is_power_of_two_sum(7))\nprint(is_power_of_two_sum(8))\nprint(is_power_of_two_sum(9))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def is_power_of_two(num):\n    return num == 0 or (num & (num-1)) == 0\n\ndef is_power_of_two_recursive(num):\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n    return is_power_of_two_recursive(num/2) or is_power_of_two_recursive(num*2-1)\n\ndef is_power_of_two(num):\n    return num == 0 or (num & (num-1)) == 0\n\ndef is_power_of_two_recursive(num):\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n    return is_power_of_two_recursive(num/2) or is_power_of_two_recursive(num*2-1)\n\n# test cases\n# 1\n# print is_power_of_two(1)\n# print is_power_of_two(2)\n# print is_power_of_two(4)\n# print is_power_of_two(8)\n# print is_power_of_two(16)\n# print is_power_of_two(32)\n# print is_power_of_two(64)\n# print is_power_of_two(128)\n# print is_power_of_two(256)\n# print is_power_of_two(512)\n# print is_power_of_two(1024)\n# print is_power_of_two(2048)\n# print is_power_of_two(4096)\n# print is_power_of_two(8192)\n# print is_power_of_two(16384)\n# print is_power_of_two(32768)\n# print is_power_of_two(65536)\n# print is_power_of_two(131072)\n# print is_power_of_two(262144)\n# print is_power_of_two(524288)\n# print is_power_of_two(1048576)\n# print is_power_of_two(20"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {boolean}\n    def isPowerOfTwo(self, n):\n        if n <= 0:\n            return False\n        if n == 1:\n            return True\n        return pow(2, n - 1) > 0\n\n    def isPowerOfTwo2(self, n):\n        if n < 2:\n            return False\n        return pow(2, n - 1) > 0\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isPowerOfTwo(1)\n    print s.isPowerOfTwo(2)\n    print s.isPowerOfTwo(3)\n    print s.isPowerOfTwo(4)\n    print s.isPowerOfTwo(5)\n    print s.isPowerOfTwo(6)\n    print s.isPowerOfTwo(7)\n    print s.isPowerOfTwo(8)\n    print s.isPowerOfTwo(9)\n    print s.isPowerOfTwo(10)\n    print s.isPowerOfTwo(11)\n    print s.isPowerOfTwo(12)\n    print s.isPowerOfTwo(13)\n    print s.isPowerOfTwo(14)\n    print s.isPowerOfTwo(15)\n    print s.isPowerOfTwo(16)\n    print s.isPowerOfTwo(17)\n    print s.isPowerOfTwo(18)\n    print s.isPowerOfTwo(19)\n    print s.isPowerOfTwo(20)\n    print s.isPowerOfTwo(21)\n    print s.isPowerOfTwo(22)\n    print s.isPowerOfTwo(23)\n    print s.isPowerOfTwo(24)\n    print s.isPowerOfTwo(25)\n    print s.isPowerOfTwo(26)\n    print s.isPowerOfTwo(27)\n    print s.isPowerOfTwo(28)\n    print s.isPowerOfTwo(29)\n    print s.isPowerOfTwo(30)\n    print s.isPowerOfTwo(31)\n    print s.isPowerOfTwo(32)\n    print s"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def is_power_of_2(n):\n    return n > 0 and (n & (n-1)) == 0\n\ndef is_power_of_2_sum(n):\n    return n > 0 and (n & (n-1)) == 0 and all(is_power_of_2(x) for x in range(1,n+1))\n\ndef main():\n    n = int(input())\n    print(is_power_of_2_sum(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n    return n & (n-1) == 0\n\ndef is_power_of_two_sum(n):\n    sum = 0\n    while n > 0:\n        if not is_power_of_two(n):\n            return False\n        sum += n\n        n >>= 1\n    return True\n\nif __name__ == '__main__':\n    print(is_power_of_two_sum(1))\n    print(is_power_of_two_sum(4))\n    print(is_power_of_two_sum(6))\n    print(is_power_of_two_sum(16))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nif __name__ == \"__main__\":\n    print(is_power_of_two(0))\n    print(is_power_of_two(1))\n    print(is_power_of_two(2))\n    print(is_power_of_two(3))\n    print(is_power_of_two(4))\n    print(is_power_of_two(5))\n    print(is_power_of_two(6))\n    print(is_power_of_two(7))\n    print(is_power_of_two(8))\n    print(is_power_of_two(9))\n    print(is_power_of_two(10))\n    print(is_power_of_two(11))\n    print(is_power_of_two(12))\n    print(is_power_of_two(13))\n    print(is_power_of_two(14))\n    print(is_power_of_two(15))\n    print(is_power_of_two(16))\n    print(is_power_of_two(17))\n    print(is_power_of_two(18))\n    print(is_power_of_two(19))\n    print(is_power_of_two(20))\n    print(is_power_of_two(21))\n    print(is_power_of_two(22))\n    print(is_power_of_two(23))\n    print(is_power_of_two(24))\n    print(is_power_of_two(25))\n    print(is_power_of_two(26))\n    print(is_power_of_two(27))\n    print(is_power_of_two(28))\n    print(is_power_of_two(29))\n    print(is_power_of_two(30))\n    print(is_power_of_two(31))\n    print(is_power_of_two(32))\n    print(is_power_of"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def is_pow_of_two(n):\n    return n & (n - 1) == 0\n\n# your code here\n\n# https://www.hackerrank.com/challenges/two-sum-pairs/problem\n# https://www.hackerrank.com/challenges/two-sum-pairs/submissions/code/5661528\n\n# for(int i = 1; i < 10; i++)\n# {\n#     for(int j = i+1; j < 10; j++)\n#     {\n#         if(is_pow_of_two(i) && is_pow_of_two(j) && (i+j) == 0)\n#         {\n#             print(i + \" \" + j);\n#         }\n#     }\n# }"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isPow2(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num == 0:\n            return False\n        \n        if num == 1:\n            return True\n        \n        if num == 2:\n            return True\n        \n        if num == 3:\n            return True\n        \n        if num == 4:\n            return True\n        \n        if num == 5:\n            return True\n        \n        if num == 6:\n            return True\n        \n        if num == 7:\n            return True\n        \n        if num == 8:\n            return True\n        \n        if num == 9:\n            return True\n        \n        if num == 10:\n            return True\n        \n        if num == 11:\n            return True\n        \n        if num == 12:\n            return True\n        \n        if num == 13:\n            return True\n        \n        if num == 14:\n            return True\n        \n        if num == 15:\n            return True\n        \n        if num == 16:\n            return True\n        \n        if num == 17:\n            return True\n        \n        if num == 18:\n            return True\n        \n        if num == 19:\n            return True\n        \n        if num == 20:\n            return True\n        \n        if num == 21:\n            return True\n        \n        if num == 22:\n            return True\n        \n        if num == 23:\n            return True\n        \n        if num == 24:\n            return True\n        \n        if num == 25:\n            return True\n        \n        if num == 26:\n            return True\n        \n        if num == 27:\n            return True\n        \n        if num == 28:\n            return True\n        \n        if num == 29:\n            return True\n        \n        if num == 30:\n            return True\n        \n        if num == 31:\n            return True\n        \n        if num == 32:\n            return True\n        \n        if num == 33:\n            return True\n        \n        if num == 34:\n            return True\n        \n        if num == 35:\n            return True\n        \n        if num == 36"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} num\n    # @return {boolean}\n    def isPowerOfTwo(self, num):\n        return num > 0 and ((num & (num-1)) == 0)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def is_power_of_2(number):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    :type number: int\n    :rtype: bool\n    \"\"\"\n    if number == 0:\n        return True\n    elif number == 1:\n        return False\n    elif number % 2 == 0:\n        return is_power_of_2(number / 2)\n    else:\n        return is_power_of_2(number / 2) and not is_power_of_2(number / 2 + 1)\n\nprint(is_power_of_2(1))\nprint(is_power_of_2(2))\nprint(is_power_of_2(3))\nprint(is_power_of_2(4))\nprint(is_power_of_2(5))\nprint(is_power_of_2(6))\nprint(is_power_of_2(7))\nprint(is_power_of_2(8))\nprint(is_power_of_2(9))\nprint(is_power_of_2(10))\nprint(is_power_of_2(11))\nprint(is_power_of_2(12))\nprint(is_power_of_2(13))\nprint(is_power_of_2(14))\nprint(is_power_of_2(15))\nprint(is_power_of_2(16))\nprint(is_power_of_2(17))\nprint(is_power_of_2(18))\nprint(is_power_of_2(19))\nprint(is_power_of_2(20))\nprint(is_power_of_2(21))\nprint(is_power_of_2(22))\nprint(is_power_of_2(23))\nprint(is_power_of_2(24))\nprint(is_power_of_2(25))\nprint(is_power_of_2(26))\nprint(is_power_of_2(27))\nprint(is_power_of_2(28))\nprint(is_power_of_2"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def is_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return not (n & (n-1))\n\n\ndef is_power_of_2_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return is_power_of_2(n) and n & (n-1) == 0\n\n\ndef test_is_power_of_2():\n    assert is_power_of_2(1) == True\n    assert is_power_of_2(2) == True\n    assert is_power_of_2(3) == False\n    assert is_power_of_2(4) == False\n    assert is_power_of_2(5) == True\n    assert is_power_of_2(6) == False\n    assert is_power_of_2(7) == False\n    assert is_power_of_2(8) == True\n    assert is_power_of_2(9) == False\n    assert is_power_of_2(10) == True\n    assert is_power_of_2(20) == True\n    assert is_power_of_2(200) == True\n    assert is_power_of_2(300) == False\n    assert is_power_of_2(400) == True\n    assert is_power_of_2(500) == False\n    assert is_power_of_2(600) == True\n    assert is_power_of_2(700) == False\n    assert is_power_of_2(800) == True\n    assert is_power_of_2(900) == False\n    assert is_power_of_2(1000) == True\n    assert is_power_of_2(2000) == True\n    assert is_power_of_2(20000) == True\n    assert is_power_of_2(30000) == False\n    assert is_power_of_2(40000) == True\n    assert is_power_of_2(50000) == False\n    assert is_power_of_2(60000) == True"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {boolean}\n    def isPowerOfTwo(self, n):\n        if n == 0:\n            return False\n        for i in xrange(1, n):\n            if n % i == 0:\n                return False\n        return True\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.isPowerOfTwo(1)\n    print solution.isPowerOfTwo(2)\n    print solution.isPowerOfTwo(3)\n    print solution.isPowerOfTwo(4)\n    print solution.isPowerOfTwo(5)\n    print solution.isPowerOfTwo(6)\n    print solution.isPowerOfTwo(7)\n    print solution.isPowerOfTwo(8)\n    print solution.isPowerOfTwo(9)\n    print solution.isPowerOfTwo(10)\n    print solution.isPowerOfTwo(100)\n    print solution.isPowerOfTwo(1000)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def isPow2(n):\n    return n == (n & -n)\n\ndef isPow2_v2(n):\n    return n == (n & -n) and not n & 1\n\ndef isPow2_v3(n):\n    return n == (n & -n) and not n & 1 and not n & (n-1)\n\ndef isPow2_v4(n):\n    return n == (n & -n) and not n & 1 and not n & (n-1) and not n & (n-2)\n\ndef isPow2_v5(n):\n    return n == (n & -n) and not n & 1 and not n & (n-1) and not n & (n-2) and not n & (n-3)\n\ndef isPow2_v6(n):\n    return n == (n & -n) and not n & 1 and not n & (n-1) and not n & (n-2) and not n & (n-3) and not n & (n-4)\n\ndef isPow2_v7(n):\n    return n == (n & -n) and not n & 1 and not n & (n-1) and not n & (n-2) and not n & (n-3) and not n & (n-4) and not n & (n-5)\n\ndef isPow2_v8(n):\n    return n == (n & -n) and not n & 1 and not n & (n-1) and not n & (n-2) and not n & (n-3) and not n & (n-4) and not n & (n-5) and not n & (n-6)\n\ndef isPow2_v9(n):\n    return n == (n & -n) and not n & 1 and not n & (n-1) and not n & (n-2) and not n & (n-3) and not n & (n-4) and not n & (n-5) and not n & (n-6) and not n & (n-7)\n\nif __name__ == \""
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {integer} x\n    # @return {boolean}\n    def isPowerOfTwo(self, x):\n        if x == 0:\n            return False\n        if x == 1:\n            return True\n        if x % 2 == 0:\n            return self.isPowerOfTwo(x / 2)\n        else:\n            return False\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isPowerOfTwo(4)\n    print s.isPowerOfTwo(5)\n    print s.isPowerOfTwo(9)\n    print s.isPowerOfTwo(10)\n    print s.isPowerOfTwo(100)\n    print s.isPowerOfTwo(1000)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "#!/bin/python\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/challenges/power-of-two/problem\n\n#!/bin/python\n\n# This is a demo of the solution for the problem:\n# https://www.hackerrank.com/"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-number-is-power-of-two/discuss/262556/Python-solution-using-integer-division\n\nclass Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        return n > 0 and n & (n-1) == 0"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def is_pow2(num):\n    return num == 0 or num == 1 or num == 2 or num == 4 or num == 8 or num == 16 or num == 32 or num == 64 or num == 128 or num == 256 or num == 512 or num == 1024 or num == 2048 or num == 4096 or num == 8192 or num == 16384 or num == 32768 or num == 65536 or num == 131072 or num == 262144 or num == 524288 or num == 1048576 or num == 2097152 or num == 4194304 or num == 8388608 or num == 16777216 or num == 33554432 or num == 67108864 or num == 134217728 or num == 268435456 or num == 536870912 or num == 1073741824 or num == 2147483648 or num == 4294967296 or num == 8589934592 or num == 17179869184 or num == 34359738368 or num == 68719476736 or num == 137438953472 or num == 274877906944 or num == 549755813888 or num == 1099511627776 or num == 2199023255552 or num == 4398046511104 or num == 8796093022208 or num == 17592186044416 or num == 35184372088832 or num == 70368744177664 or num == 140737488355328 or num == 281474976710656 or num == 562949953421312 or num == 1125899906842624 or num == 2251799813685248 or num == 4503599627370496 or num == 9007199254740992 or num == 18014398509481984 or num == 36028797018963968 or num == 72057594037927936 or num == 144115188075855872 or num == 288230376151711744 or num == 576460752303423488 or num == 1152921504606846976 or num == 2305843009213693952 or num == 4611686018427387904 or num == 9223372036854775808 or num == 18446744073709551616 or num == 4294967296\n\nif"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def is_power_of_two(number):\n\twhile number!= 0:\n\t\tnumber = number & (number - 1)\n\treturn number == 0\n\ndef is_power_of_two_recursive(number):\n\tif number == 0:\n\t\treturn True\n\treturn is_power_of_two_recursive(number >> 1) and is_power_of_two_recursive(number >> 2) and is_power_of_two_recursive(number >> 3) and is_power_of_two_recursive(number >> 4) and is_power_of_two_recursive(number >> 5) and is_power_of_two_recursive(number >> 6) and is_power_of_two_recursive(number >> 7)\n\ndef is_power_of_two_iterative(number):\n\tnumber = number & (number - 1)\n\twhile number!= 0:\n\t\tnumber = number >> 1\n\treturn number == 0\n\nif __name__ == \"__main__\":\n\tassert is_power_of_two(2) == True\n\tassert is_power_of_two(3) == False\n\tassert is_power_of_two_recursive(2) == True\n\tassert is_power_of_two_recursive(3) == False\n\tassert is_power_of_two_iterative(2) == True\n\tassert is_power_of_two_iterative(3) == False"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def is_power_of_two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    :param n: number to check\n    :return: True if the number can be represented as sum of non-zero powers of 2. False otherwise\n    \"\"\"\n    # Check whether n is a power of 2\n    if n < 2:\n        return False\n    # Check whether n is a power of 2\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            return False\n    return True\n\nif __name__ == '__main__':\n    # Test case\n    assert is_power_of_two(3) is True, \"Test case #1\"\n    assert is_power_of_two(4) is True, \"Test case #2\"\n    assert is_power_of_two(5) is False, \"Test case #3\"\n    assert is_power_of_two(2147483647) is True, \"Test case #4\"\n    assert is_power_of_two(2147483648) is False, \"Test case #5\"\n    assert is_power_of_two(2147483649) is False, \"Test case #6\""
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isPowerOfTwo(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num <= 0:\n            return False\n        if num == 1:\n            return True\n        \n        for i in range(2, int(math.log(num, 2)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def isPowerOfTwo_rec(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num <= 0:\n            return False\n        if num == 1:\n            return True\n        \n        if num & (num - 1) == 0:\n            return True\n        \n        return self.isPowerOfTwo_rec(num >> 1)\n        \n    def isPowerOfTwo_dp(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num <= 0:\n            return False\n        if num == 1:\n            return True\n        \n        if num & (num - 1) == 0:\n            return True\n        \n        return self.isPowerOfTwo_dp(num >> 1) or self.isPowerOfTwo_dp(num >> 2) or self.isPowerOfTwo_dp(num >> 3) or self.isPowerOfTwo_dp(num >> 4) or self.isPowerOfTwo_dp(num >> 5) or self.isPowerOfTwo_dp(num >> 6) or self.isPowerOfTwo_dp(num >> 7) or self.isPowerOfTwo_dp(num >> 8) or self.isPowerOfTwo_dp(num >> 9) or self.isPowerOfTwo_dp(num >> 10) or self.isPowerOfTwo_dp(num >> 11) or self.isPowerOfTwo_dp(num >> 12) or self.isPowerOfTwo_dp(num >> 13) or self.isPowerOfTwo_dp("
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def is_power_of_two(num):\n    return num == 0 or (num & (num-1)) == 0\n\ndef is_power_of_two_rec(num):\n    if num == 0:\n        return True\n    return num & (num - 1) == 0 and is_power_of_two_rec(num >> 1)\n\nif __name__ == '__main__':\n    print is_power_of_two(2)\n    print is_power_of_two_rec(2)"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import math\n\ndef is_power_of_two(n):\n    return n > 0 and math.log2(n) == math.floor(math.log2(n))\n\nif __name__ == '__main__':\n    print(is_power_of_two(100))\n    print(is_power_of_two(1024))\n    print(is_power_of_two(2048))\n    print(is_power_of_two(2049))\n    print(is_power_of_two(2048))\n    print(is_power_of_two(2147483647))\n    print(is_power_of_two(2147483648))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def is_power_of_2(n):\n    return n & (n - 1) == 0\n\ndef check_power_of_2(n):\n    return (n & (n - 1)) == 0\n\ndef is_power_of_2_recursive(n):\n    if n == 1:\n        return True\n    return n & (n - 1) == 0 and is_power_of_2(n >> 1)\n\nif __name__ == '__main__':\n    assert check_power_of_2(0), '0 is not a power of 2'\n    assert not check_power_of_2(1), '1 is a power of 2'\n    assert is_power_of_2(2), '2 is a power of 2'\n    assert not is_power_of_2(3), '3 is not a power of 2'\n    assert is_power_of_2_recursive(2), '2 is a power of 2'\n    assert not is_power_of_2_recursive(3), '3 is not a power of 2'\n    assert is_power_of_2(4), '4 is a power of 2'\n    assert not is_power_of_2(5), '5 is not a power of 2'\n    assert is_power_of_2(16), '16 is a power of 2'\n    assert not is_power_of_2(17), '17 is not a power of 2'\n    assert not check_power_of_2(2 ** 32 - 1), '2 ** 32 - 1 is not a power of 2'\n    assert check_power_of_2(2 ** 32), '2 ** 32 is a power of 2'\n    assert not check_power_of_2(2 ** 32 + 1), '2 ** 32 + 1 is not a power of 2'\n    assert check_power_of_2(2 ** 64 - 1), '2 ** 64 - 1 is a power of 2'\n    assert not check_power_of_2(2 ** 64), '2 ** 64 is not a power of 2'\n    assert check_power_of_2(2 ** 128 - 1), '2 ** 128 - 1 is a power of 2'"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Example\n# Given num = 10, return True.\n# Given num = 9, return False.\n\n# Example\n# Given num = 2^n, return True.\n# Given num = 2^n + 1, return True.\n# Given num = 2^n - 1, return False.\n\n# Note\n# The given number is always positive.\n\nclass Solution(object):\n    def canThreeSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) < 3:\n            return False\n        nums.sort()\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            if target - nums[i] == nums[i+1] - target:\n                return True\n        return False"
    }
  ]
}