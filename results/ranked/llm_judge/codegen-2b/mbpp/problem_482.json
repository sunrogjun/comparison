{
  "timestamp": "2025-09-14T20:56:54.166442",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 482,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def hexagon(num):\n    # return list of hexagon coordinates\n    # num = int(num)\n    # hexagon = [[0,0],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1],[0,-1]]\n    hexagon = [[0,0],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1],[0,-1]]\n    hexagon = [list(row) for row in hexagon]\n    # hexagon = [[0,0],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1],[0,-1]]\n    # print(hexagon)\n    return hexagon\n\ndef test_hexagon():\n    # test = hexagon(1)\n    # print(test)\n    # print(test[0])\n    # print(test[1])\n    # print(test[2])\n    # print(test[3])\n    # print(test[4])\n    # print(test[5])\n    # print(test[6])\n    # print(test[7])\n    # print(test[8])\n    # print(test[9])\n    # print(test[10])\n    # print(test[11])\n    # print(test[12])\n    # print(test[13])\n    # print(test[14])\n    # print(test[15])\n    # print(test[16])\n    # print(test[17])\n    # print(test[18])\n    # print(test[19])\n    # print(test[20])\n    # print(test[21])\n    # print(test[22])\n    # print(test[23])\n    # print(test[24])\n    # print(test[25])\n    # print(test[26])\n    # print(test[27])\n    # print(test[28])\n    # print(test[29])\n    # print(test[30])\n    # print(test[31])\n    # print(test[32])\n    # print(test[33])"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/hexagons/problem\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y, x1, y1, x2, y2\n\n# x, y,"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import math\n\ndef get_hexagon_coords(width, height):\n    '''\n    :type width: int\n    :type height: int\n    :rtype: list\n    '''\n    hexagon_coords = []\n    for i in range(0, width):\n        for j in range(0, height):\n            hexagon_coords.append((i*2, j*2))\n    return hexagon_coords\n\ndef get_hexagon_points(hexagon_coords, width, height):\n    '''\n    :type hexagon_coords: list\n    :type width: int\n    :type height: int\n    :rtype: list\n    '''\n    points = []\n    for i in range(0, width):\n        for j in range(0, height):\n            points.append((hexagon_coords[i*height+j][0] + hexagon_coords[i*height+j][1], hexagon_coords[i*height+j][0] - hexagon_coords[i*height+j][1]))\n    return points\n\ndef get_hexagon_points_2(hexagon_coords, width, height):\n    '''\n    :type hexagon_coords: list\n    :type width: int\n    :type height: int\n    :rtype: list\n    '''\n    points = []\n    for i in range(0, width):\n        for j in range(0, height):\n            points.append((hexagon_coords[i*height+j][0] + hexagon_coords[i*height+j][1], hexagon_coords[i*height+j][0] - hexagon_coords[i*height+j][1]))\n    return points\n\ndef get_hexagon_points_3(hexagon_coords, width, height):\n    '''\n    :type hexagon_coords: list\n    :type width: int\n    :type height: int\n    :rtype: list\n    '''\n    points = []\n    for i in range(0, width):\n        for j in range(0, height):\n            points.append(("
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def grid_hexagon(height, width):\n    \"\"\"\n    :param height: Height of the grid\n    :param width: Width of the grid\n    :return: list of lists containing 6 tuples of x, y point coordinates\n    \"\"\"\n    points = []\n    for y in range(0, height):\n        for x in range(0, width):\n            points.append((x, y))\n    return points"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import sys\n\ndef get_hexagon(grid_size):\n    \"\"\"\n    :param grid_size: size of the grid\n    :return: list of lists of hexagon coordinates\n    \"\"\"\n    hexagon_coords = [[[0,0], [1,0], [2,0], [3,0], [4,0], [5,0], [0,1], [1,1], [2,1], [3,1], [4,1], [5,1], [0,2], [1,2], [2,2], [3,2], [4,2], [5,2], [0,3], [1,3], [2,3], [3,3], [4,3], [5,3], [0,4], [1,4], [2,4], [3,4], [4,4], [5,4], [0,5], [1,5], [2,5], [3,5], [4,5], [5,5], [0,6], [1,6], [2,6], [3,6], [4,6], [5,6], [0,7], [1,7], [2,7], [3,7], [4,7], [5,7], [0,8], [1,8], [2,8], [3,8], [4,8], [5,8], [0,9], [1,9], [2,9], [3,9], [4,9], [5,9], [0,10], [1,10], [2,10], [3,10], [4,10], [5,10], [0,11], [1,11], [2,11], [3,11], [4,11], [5,11], [0,12], [1,12], [2,12], [3,12], [4,12], [5,12], [0,13], [1,13], [2,13], [3,13], [4,13], [5,13], [0,14], [1,14], [2,14], [3,14], [4,14], [5,14], [0,15], [1,15"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def calc_hexagon_coordinates(height, width):\n    # TODO: Implement this function\n    #\n    # @param height the height of the grid\n    # @param width the width of the grid\n    # @return a list of lists of 6 tuples of x, y point coordinates\n    pass\n\nif __name__ == \"__main__\":\n    # Test cases\n    print calc_hexagon_coordinates(2, 2)\n    print calc_hexagon_coordinates(3, 3)\n    print calc_hexagon_coordinates(4, 4)\n    print calc_hexagon_coordinates(5, 5)\n    print calc_hexagon_coordinates(6, 6)\n    print calc_hexagon_coordinates(7, 7)\n    print calc_hexagon_coordinates(8, 8)\n    print calc_hexagon_coordinates(9, 9)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# The hexagon has six sides and is divided into four by the side length.\n# The coordinate system starts at the origin (0, 0).\n# The hexagon is defined by a point (x, y) on the side with index 0,\n# a point (x, y) on the side with index 1, a point (x, y) on the side with index 2,\n# a point (x, y) on the side with index 3, a point (x, y) on the side with index 4,\n# and finally a point (x, y) on the side with index 5.\n# The x and y coordinates must be integers.\n#\n# The function should return a list of lists containing 6 lists of x and y coordinates.\n# Each list contains 6 integers between 0 and the side length.\n# The first list in the list should contain the coordinates of the top-left corner of the hexagon.\n# The second list in the list should contain the coordinates of the top-right corner of the hexagon.\n# The third list in the list should contain the coordinates of the bottom-right corner of the hexagon.\n# The fourth list in the list should contain the coordinates of the bottom-left corner of the hexagon.\n# The fifth list in the list should contain the coordinates of the center of the hexagon.\n# The sixth list in the list should contain the coordinates of the top-center of the hexagon.\n# The seventh list in the list should contain the coordinates of the bottom-center of the hexagon.\n# The eighth list in the list should contain the coordinates of the top-center of the hexagon.\n# The ninth list in the list should contain the coordinates of the bottom-center of the hexagon.\n\n# Example\n#\n# Input:\n# [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]\n#\n# Output:\n# [[0, 0], [0, 1], [0, 2], [1, 3], [2, 4], [3, 5]]\n#\n# Explanation:\n# The hexagon has 6 sides and is divided into 4 by the side length.\n# The coordinate system starts at the origin (0, 0).\n# The hexagon is defined by a point (x, y)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Your code here\n\ndef grid(rows, cols):\n    return [[(i+1, j+1) for j in range(cols)] for i in range(rows)]\n\ndef hexagon(rows, cols):\n    \"\"\"\n    returns a list of lists of tuples of coordinates for hexagon grid\n    \"\"\"\n    hexagon = []\n    for r in range(rows):\n        for c in range(cols):\n            if r == 0 or c == 0 or r == rows-1 or c == cols-1:\n                hexagon.append([(r, c)]*2)\n            else:\n                hexagon.append([(r, c), (r+1, c), (r, c+1), (r+1, c+1), (r+1, c), (r, c)]*2)\n    return hexagon\n\ndef print_hexagon(hexagon):\n    \"\"\"\n    print the hexagon\n    \"\"\"\n    for row in hexagon:\n        print(row)\n\ndef main():\n    print(\"Hello, world!\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from numpy import *\nfrom random import *\nimport timeit\n\n\ndef generate_hexagon(n):\n    \"\"\"\n    Generate n random points in a hexagon and return the coordinates\n    :param n:\n    :return:\n    \"\"\"\n    x = zeros((n, 2))\n    y = zeros((n, 2))\n    for i in range(n):\n        x[i] = randint(0, n * 1.0) / n\n        y[i] = randint(0, n * 1.0) / n\n    return x, y\n\n\ndef generate_hexagon_grid(n):\n    \"\"\"\n    Generate n random points in a hexagon and return the coordinates\n    :param n:\n    :return:\n    \"\"\"\n    x = zeros((n, 2))\n    y = zeros((n, 2))\n    for i in range(n):\n        x[i] = randint(0, n * 1.0) / n\n        y[i] = randint(0, n * 1.0) / n\n    return x, y\n\n\ndef generate_hexagon_grid_list(n):\n    \"\"\"\n    Generate n random points in a hexagon and return the coordinates\n    :param n:\n    :return:\n    \"\"\"\n    x = zeros((n, 2))\n    y = zeros((n, 2))\n    for i in range(n):\n        x[i] = randint(0, n * 1.0) / n\n        y[i] = randint(0, n * 1.0) / n\n    return x, y\n\n\ndef generate_hexagon_grid_list2(n):\n    \"\"\"\n    Generate n random points in a hexagon and return the coordinates\n    :param n:\n    :return:\n    \"\"\"\n    x = zeros((n, 2))\n    y = zeros((n, 2))\n    for i in range(n):\n        x[i] = randint(0, n * 1.0) / n\n        y[i] = randint(0, n * 1.0) / n\n    return x, y\n\n\ndef generate_hexagon_grid_"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/hexagons/problem\n\nimport math\nimport sys\nimport timeit\nimport random\n\ndef hexagon(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test(x, y):\n    return hexagon(x, y)\n\ndef test1(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test2(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test3(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test4(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test5(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test6(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test7(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test8(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test9(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test10(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test11(x, y):\n    return [[x, y, x+y, x-y, x-y+y, x+y+y]]\n\ndef test"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/hexagons/problem\n\n# Problem Statement\n# A hexagon is a polygon with 6 vertices (i.e. 6 sides) and is defined by its center point (the vertex that is at the origin) and its edge points (the vertices that are at 90 degrees from the center).\n# The coordinates of a hexagon are given by the coordinates of its 4 vertices.\n# Return a list of lists of coordinates.\n\n# Sample Input\n# [[0, 0], [1, 0], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 27], [2, 28], [2, 29], [2, 30], [2, 31], [2, 32], [2, 33], [2, 34], [2, 35], [2, 36], [2, 37], [2, 38], [2, 39], [2, 40], [2, 41], [2, 42], [2, 43], [2, 44], [2, 45], [2, 46], [2, 47], [2, 48], [2, 49], [2, 50], [2, 51], [2, 52], [2, 53], [2, 54], [2, 55], [2, 56], [2, 57], [2, 58], [2, 59], [2, 60], [2, 61], [2, 62], [2, 63], [2, 64], [2, 65], [2, 66], [2, 67], [2, 68], [2, 69], [2, 70], [2, 71], [2, 72], [2, 73], [2, 74], [2, 75], [2, 76], [2,"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import random\n\n\ndef hexagon(n=10):\n    '''\n    Generate a list of n-by-n hexagon coordinates.\n    :param n: int, number of points to generate\n    :return: list of list of coordinates\n    '''\n\n    points = []\n    for i in range(0, n):\n        for j in range(0, n):\n            if i == 0 and j == 0:\n                points.append([0, 0])\n            elif i == 0:\n                points.append([0, j])\n            elif j == 0:\n                points.append([i, 0])\n            else:\n                points.append([i, j])\n\n    return points\n\n\ndef generate_random(n=10):\n    '''\n    Generate a list of n-by-n hexagon coordinates.\n    :param n: int, number of points to generate\n    :return: list of list of coordinates\n    '''\n    points = []\n    for i in range(0, n):\n        for j in range(0, n):\n            if random.randint(0, 1):\n                points.append([random.randint(0, n), random.randint(0, n)])\n            else:\n                points.append([random.randint(0, n), random.randint(0, n)])\n    return points\n\n\ndef print_points(points):\n    '''\n    Print the list of points.\n    :param points: list of list of coordinates\n    '''\n    for point in points:\n        print(point)\n\n\ndef main():\n    '''\n    Run the program.\n    '''\n\n    print(\"Generating random points...\")\n    points = generate_random(10)\n    print_points(points)\n\n    print(\"Generating hexagon points...\")\n    points = hexagon()\n    print_points(points)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def write_hexagon_grid(width, height):\n    \"\"\"\n    Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    \"\"\"\n    grid = [[(0, 0), (1, 0), (0, 1), (1, 1), (0, 2), (1, 2), (0, 3), (1, 3), (0, 4), (1, 4), (0, 5), (1, 5), (0, 6), (1, 6), (0, 7), (1, 7), (0, 8), (1, 8), (0, 9), (1, 9), (0, 10), (1, 10), (0, 11), (1, 11), (0, 12), (1, 12), (0, 13), (1, 13), (0, 14), (1, 14), (0, 15), (1, 15), (0, 16), (1, 16), (0, 17), (1, 17), (0, 18), (1, 18), (0, 19), (1, 19), (0, 20), (1, 20), (0, 21), (1, 21), (0, 22), (1, 22), (0, 23), (1, 23), (0, 24), (1, 24), (0, 25), (1, 25), (0, 26), (1, 26), (0, 27), (1, 27), (0, 28), (1, 28), (0, 29), (1, 29), (0, 30), (1, 30), (0, 31), (1, 31), (0, 32), (1, 32), (0, 33), (1, 33), (0, 34), (1, 34), (0, 35), (1, 35), (0, 36), (1, 36), (0, 37), (1, 37), (0, 38), (1, 38), (0, 39), (1, 39), (0, 40), (1, 40), (0, 41), (1, 41), (0, 42), (1, 42), (0, 43), (1, 43), (0, 44), (1, 44), (0, 45), (1"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def hexagon_coords(n):\n    \"\"\"\n    Input: n is the number of hexagons.\n    Output: A list of lists of 6-tuples.\n    \"\"\"\n    return [\n        [-1, -1, 0, 0, 0, 0],\n        [-1, 1, 0, 0, 0, 0],\n        [1, -1, 0, 0, 0, 0],\n        [1, 1, 0, 0, 0, 0],\n        [-1, 1, 0, 0, 0, 0],\n        [1, 1, 0, 0, 0, 0],\n        ]\n\ndef hexagon_coord_list(n):\n    \"\"\"\n    Input: n is the number of hexagons.\n    Output: A list of lists of 6-tuples.\n    \"\"\"\n    return [\n        [-1, -1, 0, 0, 0, 0],\n        [-1, 1, 0, 0, 0, 0],\n        [1, -1, 0, 0, 0, 0],\n        [1, 1, 0, 0, 0, 0],\n        [-1, 1, 0, 0, 0, 0],\n        [1, 1, 0, 0, 0, 0],\n        ]\n\ndef hexagon_coord_list_2(n):\n    \"\"\"\n    Input: n is the number of hexagons.\n    Output: A list of lists of 6-tuples.\n    \"\"\"\n    return [\n        [-1, -1, 0, 0, 0, 0],\n        [-1, 1, 0, 0, 0, 0],\n        [1, -1, 0, 0, 0, 0],\n        [1, 1, 0, 0, 0, 0],\n        [-1, 1, 0, 0, 0, 0],\n        [1, 1, 0, 0, 0, 0],\n        ]\n\ndef hexagon_coord_list_3(n):\n    \"\"\"\n    Input: n is the number of hexagons.\n    Output: A list of lists of 6-tuples.\n    \"\"\"\n    return [\n        [-1, -1, 0, 0, 0, 0],\n        [-1, 1"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def hexagon(rows, columns):\n    # Your code here\n    coordinates = [[0,0],[0,1],[1,1],[1,0],[0,-1],[-1,-1]]\n    return coordinates\n\ndef test():\n    assert hexagon(2,2) == [[0,0],[0,1],[1,1],[1,0],[0,-1],[-1,-1]]\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Hexagon:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef __str__(self):\n\t\treturn \"Hexagon(x = {0}, y = {1})\".format(self.x, self.y)\n\n\tdef __eq__(self, other):\n\t\tif not isinstance(other, Hexagon):\n\t\t\treturn False\n\t\treturn self.x == other.x and self.y == other.y\n\n\tdef __ne__(self, other):\n\t\treturn not self.__eq__(other)\n\n\tdef __hash__(self):\n\t\treturn hash((self.x, self.y))\n\n\nclass HexagonGrid:\n\tdef __init__(self):\n\t\tself.hexagons = []\n\t\tself.hexagon_coordinates = []\n\t\tself.x_coordinates = []\n\t\tself.y_coordinates = []\n\n\tdef add_hexagon(self, hexagon):\n\t\tself.hexagons.append(hexagon)\n\t\tself.hexagon_coordinates.append(hexagon)\n\t\tself.x_coordinates.append(hexagon.x)\n\t\tself.y_coordinates.append(hexagon.y)\n\n\tdef get_grid_of_hexagons(self):\n\t\treturn self.hexagon_coordinates\n\n\tdef get_grid_of_x_coordinates(self):\n\t\treturn self.x_coordinates\n\n\tdef get_grid_of_y_coordinates(self):\n\t\treturn self.y_coordinates\n\n\nclass HexagonGridGenerator:\n\tdef __init__(self):\n\t\tself.grid = HexagonGrid()\n\n\tdef generate_hexagon_grid(self, number_of_hexagons):\n\t\tfor i in range(number_of_hexagons):\n\t\t\tx = (i + 1) * 10\n\t\t\ty = (i + 1) * 10\n\t\t\thexagon = Hexagon(x, y)\n\t\t\tself.grid.add_hexagon(hexagon)\n\n\tdef get_hexagon_grid(self):\n\t\treturn self.grid\n\n\nif __name__ == \"__main__\":\n\thexagon_grid_generator = Hexagon"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/hexagons/problem\n#\n# Sample Input:\n#\n# 6\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# Sample Output:\n# [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[0,3],[1,3],[2,3],[3,3],[4,3],[5,3],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[0,5],[1,5],[2,5],[3,5],[4,5],[5,5]]\n# Sample Input:\n#\n# 6\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# Sample Output:\n# [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[0,3],[1,3],[2,3],[3,3],[4,3],[5,3],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[0,5],[1,5],[2,5],[3,5],[4,5],[5,5]]\n# Sample Input:\n#\n# 6\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# 1 1 1 1 1 1\n# Sample Output:\n# [[0,0],[1"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/hexagons/problem\n\n# Input Format\n# First line has 3 space-separated integers n, m, and p, where n is the number of hexagons and m is the number of points in each hexagon and p is the number of points in the entire grid.\n# Second line has n space-separated integers x1, y1, x2, y2, x3, y3,... xn, yn, where each integer is a point's coordinates in the form (x, y).\n# Third line has n space-separated integers x1, y1, x2, y2, x3, y3,... xn, yn, where each integer is a point's coordinates in the form (x, y).\n# The final line has a single integer p, where p is the number of points in the entire grid.\n\nn, m, p = map(int, raw_input().split())\nx = map(int, raw_input().split())\ny = map(int, raw_input().split())\n\n# Output Format\n# For each point in the grid, print a list of 6 coordinates in the form (x, y).\n\n# Constraints\n# 1\u2264n\u2264100\n# 1\u2264m\u2264100\n# 1\u2264p\u2264100\n# 1\u2264x1\u2264100\n# 1\u2264y1\u2264100\n# 1\u2264x2\u2264100\n# 1\u2264y2\u2264100\n# 1\u2264x3\u2264100\n# 1\u2264y3\u2264100\n# 1\u2264xn\u2264100\n# 1\u2264yn\u2264100\n\n# Example\n# Input:\n# 4 4 2\n# 1 2 3 4\n# 5 6 7 8\n# 9 10 11 12\n# 13 14 15 16\n# 17 18 19 20\n# Input:\n# 4 2\n# 1 2 3 4\n# 5 6 7 8\n# 9 10 11 12\n# 13 14 15 16\n# 17 18 19 20\n# Input:\n# 4 2\n# 1 2 3 4\n# 5 6 7 8\n# 9 10 11 12\n# 13 14 15 16\n# 17 18 19 20\n# Input:\n# 4 2"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def hexagon_coordinates(num_of_hexagon):\n    \"\"\"\n    :param num_of_hexagon: number of hexagons in the grid\n    :return: list of lists of 6 tuples of x, y point coordinates\n    \"\"\"\n    coordinates = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[0,3],[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[8,3],[9,3],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[6,4],[7,4],[8,4],[9,4],[0,5],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[0,6],[1,6],[2,6],[3,6],[4,6],[5,6],[6,6],[7,6],[8,6],[9,6],[0,7],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,7],[8,7],[9,7],[0,8],[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[8,8],[9,8],[0,9],[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9],[9,9]]\n    return coordinates\n\nif __name__ == \"__main__\":\n    print hexagon_coordinates(10)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def hexagon(num):\n    \"\"\"\n    Input: num = a number, an integer\n    Output: a list of lists of coordinates\n    \"\"\"\n    result = [[0,0],[0,num/2],[num/2,num/2],[num/2,0],[0,0],[0,num/2],[num/2,num/2],[num/2,0]]\n    return result\n\n\ndef print_hexagon(num):\n    \"\"\"\n    Input: num = a number, an integer\n    Output: a list of lists of coordinates\n    \"\"\"\n    result = [[0,0],[0,num/2],[num/2,num/2],[num/2,0],[0,0],[0,num/2],[num/2,num/2],[num/2,0]]\n    return result\n\n\ndef print_hexagon_2(num):\n    \"\"\"\n    Input: num = a number, an integer\n    Output: a list of lists of coordinates\n    \"\"\"\n    result = [[0,0],[0,num/2],[num/2,num/2],[num/2,0],[0,0],[0,num/2],[num/2,num/2],[num/2,0]]\n    return result\n\n\ndef print_hexagon_3(num):\n    \"\"\"\n    Input: num = a number, an integer\n    Output: a list of lists of coordinates\n    \"\"\"\n    result = [[0,0],[0,num/2],[num/2,num/2],[num/2,0],[0,0],[0,num/2],[num/2,num/2],[num/2,0]]\n    return result\n\ndef print_hexagon_4(num):\n    \"\"\"\n    Input: num = a number, an integer\n    Output: a list of lists of coordinates\n    \"\"\"\n    result = [[0,0],[0,num/2],[num/2,num/2],[num/2,0],[0,0],[0,num/2],[num/2,num/2],[num/2,0]]\n    return result\n\n\ndef print_hexagon_5(num):\n    \"\"\"\n    Input: num = a number, an integer\n    Output: a list of lists of coordinates\n    \"\"\""
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# http://www.geeksforgeeks.org/write-a-function-to-calculate-a-grid-of-hexagon-coordinates-where-function-returns-a-list-of-lists-containing-6-tuples-of-x-y-point-coordinates/\n# http://www.geeksforgeeks.org/write-a-function-to-calculate-a-grid-of-hexagon-coordinates-where-function-returns-a-list-of-lists-containing-6-tuples-of-x-y-point-coordinates/\n\ndef write_hexagon_coordinates(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    x, y = 0, 0\n    for i in range(m):\n        for j in range(n):\n            result.append([x, y])\n            x += 1\n        y += 1\n        x = 0\n    return result\n\nif __name__ == '__main__':\n    print(write_hexagon_coordinates(5, 6))\n    print(write_hexagon_coordinates(7, 3))\n    print(write_hexagon_coordinates(6, 8))\n    print(write_hexagon_coordinates(6, 8))\n    print(write_hexagon_coordinates(6, 8))\n    print(write_hexagon_coordinates(6, 8))\n    print(write_hexagon_coordinates(6, 8))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    # @param grid, a list of lists of Point\n    # @return a list of lists of Point\n    def hexagonCoordinates(self, grid):\n        if not grid:\n            return []\n        if len(grid[0]) == 0:\n            return []\n        \n        # get the total number of hexagon\n        total_hexagon = len(grid)*len(grid[0])\n        \n        # calculate the number of each hexagon\n        hexagon_count = [0 for i in range(total_hexagon)]\n        for i in range(total_hexagon):\n            for j in range(len(grid)):\n                for k in range(len(grid[0])):\n                    hexagon_count[i] += 1\n        \n        # calculate the number of each hexagon by the rule of 6\n        for i in range(total_hexagon):\n            if hexagon_count[i] % 6 == 0:\n                hexagon_count[i] = 6\n            else:\n                hexagon_count[i] = hexagon_count[i]/6\n        \n        # calculate the x and y coordinates of each hexagon\n        hexagon_x = []\n        hexagon_y = []\n        for i in range(total_hexagon):\n            x = 0\n            y = 0\n            for j in range(len(grid)):\n                for k in range(len(grid[0])):\n                    x += grid[j][k].x*hexagon_count[i]\n                    y += grid[j][k].y*hexagon_count[i]\n            hexagon_x.append(x)\n            hexagon_y.append(y)\n        \n        return [[Point(x,y) for y in range(len(grid[0]))] for x in range(len(grid))]"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\n\ndef hexagon_coordinates(length):\n    \"\"\"\n    :type length: int\n    :rtype: list of lists of tuples of ints\n    \"\"\"\n    return [[(0, 0), (length, 0), (length, length), (0, length), (0, 0), (length, 0)],\n            [[0, 0], [length, 0], [length, length], [0, length], [0, 0], [length, 0]],\n            [[0, 0], [length, 0], [length, length], [0, length], [0, 0], [length, 0]],\n            [[0, 0], [length, 0], [length, length], [0, length], [0, 0], [length, 0]],\n            [[length, 0], [length, length], [length, length], [length, 0], [length, 0], [length, length]],\n            [[0, 0], [length, 0], [length, length], [0, length], [0, 0], [length, 0]]]\n\n\ndef grid_coordinates(length, width):\n    \"\"\"\n    :type length: int\n    :type width: int\n    :rtype: list of lists of tuples of ints\n    \"\"\"\n    return [[(0, 0), (length, 0), (length, width), (width, 0), (0, 0), (length, 0)],\n            [[0, 0], [length, 0], (length, width), (width, 0), (0, 0), (length, 0)],\n            [[0, 0], (length, 0), (length, width), (width, 0), (0, 0), (length, 0)],\n            [[length, 0], (length, width), (length, width), (width, 0), (0, 0), (length, 0)],\n            [[length, 0], (length, width), (length, width), (width, 0), (0, 0), (length, 0)],\n            [[length, 0], (length, width), (length, width), (width, 0), (0, 0), (length, 0)]],\n\n            [[0, 0], [length, 0], (length, width), (width, 0), ("
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/hexagons/problem\n\nimport math\n\ndef calc_hexagon_coordinates(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    # n - number of hexagons\n    # x - x coordinates of hexagons\n    # y - y coordinates of hexagons\n    # r - radius of hexagon\n    # r2 - square of radius\n    # nr - number of rows\n    # nc - number of columns\n    # l - number of lines\n    # t - number of triangles\n    #\n    # r - radius of hexagon\n    # r2 - square of radius\n    # nr - number of rows\n    # nc - number of columns\n    # l - number of lines\n    # t - number of triangles\n    #\n    # r - radius of hexagon\n    # r2 - square of radius\n    # nr - number of rows\n    # nc - number of columns\n    # l - number of lines\n    # t - number of triangles\n    #\n    # r - radius of hexagon\n    # r2 - square of radius\n    # nr - number of rows\n    # nc - number of columns\n    # l - number of lines\n    # t - number of triangles\n    #\n    # r - radius of hexagon\n    # r2 - square of radius\n    # nr - number of rows\n    # nc - number of columns\n    # l - number of lines\n    # t - number of triangles\n\n    # nr = n\n    # nc = n\n    # l = 1\n    # t = 1\n    # r = 1\n\n    # nr = n\n    # nc = n\n    # l = 1\n    # t = 1\n    # r = 1\n    # r2 = 1\n\n    # nr = n\n    # nc = n\n    # l = 1\n    # t = 1\n    # r = 1\n    # r2 = 1\n\n    # nr = n\n    # nc = n\n    # l = 1\n    # t = 1\n    # r = 1\n    # r2 = 1"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "import math\nimport random\n\ndef hexagon(side, radius, n):\n    \"\"\"\n    :param side: the side of a hexagon\n    :param radius: the radius of a hexagon\n    :param n: the number of hexagons\n    :return: a list of hexagon coordinates\n    \"\"\"\n    hexagons = []\n    for i in range(n):\n        x = side * math.sin(2*math.pi*i/n)\n        y = side * math.cos(2*math.pi*i/n)\n        hexagons.append((x,y))\n    return hexagons\n\ndef print_hexagon(hexagon):\n    \"\"\"\n    :param hexagon: a list of hexagon coordinates\n    :return: the coordinates of the hexagon\n    \"\"\"\n    print hexagon[0][0], hexagon[0][1], hexagon[1][0], hexagon[1][1], hexagon[2][0], hexagon[2][1], hexagon[3][0], hexagon[3][1], hexagon[4][0], hexagon[4][1], hexagon[5][0], hexagon[5][1], hexagon[6][0], hexagon[6][1], hexagon[7][0], hexagon[7][1]\n\ndef get_hexagon_coordinates(side, radius, n):\n    \"\"\"\n    :param side: the side of a hexagon\n    :param radius: the radius of a hexagon\n    :param n: the number of hexagons\n    :return: a list of hexagon coordinates\n    \"\"\"\n    hexagons = hexagon(side, radius, n)\n    return hexagons\n\ndef main():\n    \"\"\"\n    :return:\n    \"\"\"\n    side = int(input(\"Enter the side of a hexagon: \"))\n    radius = int(input(\"Enter the radius of a hexagon: \"))\n    n = int(input(\"Enter the number of hexagons: \"))\n    hexagons = get_hexagon_coordinates(side, radius, n)\n    print_hexagon(hexagons)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "from math import sqrt, pi, acos\n\ndef get_hexagon_coordinates(radius):\n    \"\"\"\n    Calculate coordinates of hexagon for given radius.\n    :param radius: radius of the hexagon\n    :return: list of coordinates\n    \"\"\"\n    # calculate the radius of the hexagon\n    r = radius / sqrt(3)\n\n    # calculate the number of hexagon\n    n = 12\n\n    # calculate the coordinates of hexagon\n    hexagon_coords = []\n    for i in range(0, n):\n        theta = (2 * pi) / n * i\n        x = r * (1 + sqrt(3) / 2 * cos(theta))\n        y = r * (1 + sqrt(3) / 2 * sin(theta))\n        hexagon_coords.append((x, y))\n\n    return hexagon_coords\n\n\ndef get_hexagon_coordinates_from_list(hexagon_coords):\n    \"\"\"\n    Calculate coordinates of hexagon for given list of coordinates.\n    :param hexagon_coords: list of coordinates\n    :return: list of coordinates\n    \"\"\"\n    # calculate the radius of the hexagon\n    r = sqrt(sum(x**2 for x in hexagon_coords)) / sqrt(3)\n\n    # calculate the number of hexagon\n    n = len(hexagon_coords)\n\n    # calculate the coordinates of hexagon\n    hexagon_coords = []\n    for i in range(0, n):\n        theta = (2 * pi) / n * i\n        x = r * (1 + sqrt(3) / 2 * cos(theta))\n        y = r * (1 + sqrt(3) / 2 * sin(theta))\n        hexagon_coords.append((x, y))\n\n    return hexagon_coords\n\n\ndef get_hexagon_coordinates_from_file(filename):\n    \"\"\"\n    Calculate coordinates of hexagon for given list of coordinates.\n    :param hexagon_coords: list of coordinates\n    :return: list of coordinates\n    \"\"\"\n    # read hexagon coordinates from file\n    with open(filename, '"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def write_hexagon_coordinates(number_of_hexagon):\n    x_coordinates = []\n    y_coordinates = []\n\n    for i in range(0, number_of_hexagon):\n        x_coordinates.append((i % 3) * 3)\n        y_coordinates.append((i // 3) * 3)\n\n    return x_coordinates, y_coordinates\n\ndef write_hexagon_coordinates_list(number_of_hexagon):\n    x_coordinates = []\n    y_coordinates = []\n\n    for i in range(0, number_of_hexagon):\n        x_coordinates.append((i % 3) * 3)\n        y_coordinates.append((i // 3) * 3)\n\n    return x_coordinates, y_coordinates\n\nif __name__ == '__main__':\n    number_of_hexagon = int(input(\"Enter number of hexagon: \"))\n\n    x_coordinates, y_coordinates = write_hexagon_coordinates(number_of_hexagon)\n    print(\"x_coordinates:\", x_coordinates)\n    print(\"y_coordinates:\", y_coordinates)\n\n    x_coordinates_list, y_coordinates_list = write_hexagon_coordinates_list(number_of_hexagon)\n    print(\"x_coordinates_list:\", x_coordinates_list)\n    print(\"y_coordinates_list:\", y_coordinates_list)\n\n    print(\"The total number of points in the list is:\", len(x_coordinates_list) * len(y_coordinates_list))\n\n    print(\"x_coordinates_list_copy:\", x_coordinates_list[:])\n    print(\"y_coordinates_list_copy:\", y_coordinates_list[:])"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef hexagon(x, y):\n    \"\"\"\n    Calculate hexagon coordinates.\n    \"\"\"\n    x_coord = x\n    y_coord = y\n    hexagon_x_coord = []\n    hexagon_y_coord = []\n    hexagon_points = []\n\n    # Calculate hexagon coordinates\n    for i in range(1, 5):\n        x_coord = x_coord + math.cos((math.pi * 2) / 6)\n        y_coord = y_coord + math.sin((math.pi * 2) / 6)\n        hexagon_x_coord.append(x_coord)\n        hexagon_y_coord.append(y_coord)\n\n        # Add hexagon points to list\n        hexagon_points.append((x_coord, y_coord))\n\n    return hexagon_points\n\n# Test\n\nif __name__ == '__main__':\n    x_coord = 10\n    y_coord = 10\n    hexagon_points = hexagon(x_coord, y_coord)\n    print hexagon_points"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def grid(num_rows, num_cols, height):\n    \"\"\"\n    :param num_rows: number of rows in the grid\n    :param num_cols: number of columns in the grid\n    :param height: height of the grid\n    :return: list of lists containing 6 tuples of x, y point coordinates\n    \"\"\"\n    grid = []\n    for row in range(num_rows):\n        row_grid = []\n        for col in range(num_cols):\n            row_grid.append([])\n        grid.append(row_grid)\n    for row in range(num_rows):\n        for col in range(num_cols):\n            row_grid = grid[row]\n            for i in range(num_cols - 1):\n                row_grid[i].append((row + i * height, col + i * height))\n            row_grid[num_cols - 1].append((row + num_cols * height, col + num_cols * height))\n    return grid\n\n# Test\nif __name__ == '__main__':\n    print(grid(3, 4, 4))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "# https://www.codeeval.com/open_challenges/41/\n\nimport sys\n\ndef parse(string):\n    return [int(x) for x in string.split(\",\")]\n\ndef main(argv):\n    for line in sys.stdin:\n        point_list = parse(line)\n        point_list = [x for x in point_list if x % 2 == 0]\n        point_list = [[x, y] for x in range(0, len(point_list)) for y in range(0, len(point_list))]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y in point_list]\n        point_list = [[x, y] for x in point_list for y"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef generate_hexagon(radius, num_points):\n    \"\"\"\n    Generate a list of hexagon coordinates given a radius and number of points.\n    :param radius: The radius of the hexagon\n    :param num_points: The number of hexagon points\n    :return: A list of lists containing 6 tuples of x, y point coordinates\n    \"\"\"\n    hexagon_coords = []\n    for i in range(num_points):\n        y = radius * sqrt(2 - (i / float(num_points)))\n        x = radius * i\n        hexagon_coords.append((x, y))\n    return hexagon_coords\n\n\ndef generate_hexagon_2(radius, num_points):\n    \"\"\"\n    Generate a list of hexagon coordinates given a radius and number of points.\n    :param radius: The radius of the hexagon\n    :param num_points: The number of hexagon points\n    :return: A list of lists containing 6 tuples of x, y point coordinates\n    \"\"\"\n    hexagon_coords = []\n    for i in range(num_points):\n        x = radius * i\n        y = radius * (1 - (2 * i / float(num_points)))\n        hexagon_coords.append((x, y))\n    return hexagon_coords\n\n\ndef generate_hexagon_3(radius, num_points):\n    \"\"\"\n    Generate a list of hexagon coordinates given a radius and number of points.\n    :param radius: The radius of the hexagon\n    :param num_points: The number of hexagon points\n    :return: A list of lists containing 6 tuples of x, y point coordinates\n    \"\"\"\n    hexagon_coords = []\n    for i in range(num_points):\n        x = radius * (1 - (2 * i / float(num_points)))\n        y = radius * (1 - (2 * i / float(num_points)))\n        hexagon_coords.append((x, y))\n    return hexagon_coords\n\n\ndef generate_hexagon_4(radius, num_points):\n    \"\"\"\n    Generate a list of hexagon coordinates given a radius and"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport math\n\ndef points_to_hexagon(width, height):\n    x = math.ceil(width/2)\n    y = math.ceil(height/2)\n    hexagon_coords = []\n    for x_coords in range(0, x+1):\n        for y_coords in range(0, y+1):\n            hexagon_coords.append((x_coords, y_coords))\n    return hexagon_coords\n\ndef hexagon_to_points(hexagon_coords):\n    points = []\n    for x_coords in range(0, len(hexagon_coords)):\n        for y_coords in range(0, len(hexagon_coords)):\n            points.append((hexagon_coords[x_coords][0], hexagon_coords[y_coords][1]))\n    return points\n\ndef points_to_hexagon_coords(points):\n    hexagon_coords = []\n    for point in points:\n        hexagon_coords.append((point[0], point[1]))\n    return hexagon_coords\n\ndef hexagon_to_points_coords(hexagon_coords):\n    points = []\n    for x_coords in range(0, len(hexagon_coords)):\n        for y_coords in range(0, len(hexagon_coords)):\n            points.append((hexagon_coords[x_coords][0], hexagon_coords[y_coords][1]))\n    return points\n\ndef main():\n    hexagon_coords = points_to_hexagon(10, 5)\n    points = hexagon_to_points(hexagon_coords)\n    hexagon_coords = points_to_hexagon_coords(points)\n    points = hexagon_to_points_coords(hexagon_coords)\n    return points\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "import math\n\n\ndef grid_coords(n):\n    \"\"\"\n    :param n: the number of hexagon points\n    :return: a list of lists of hexagon coordinates\n    \"\"\"\n    # print n\n    # print math.ceil(n / 2)\n    # print math.ceil(math.sqrt(n))\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2\n    # print math.ceil(math.sqrt(n)) / 2"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import math\n\ndef hexagon(radius, x, y):\n    # calculate the length of a side of a hexagon\n    side = math.sqrt(radius**2 - radius**2 * math.sin(math.radians(90)))\n    # calculate the number of hexagon points\n    num_of_points = radius / side\n    # calculate the number of hexagon points\n    num_of_points_y = num_of_points / 2\n    # calculate the y point of the first hexagon point\n    first_y = radius / 2 * math.cos(math.radians(90))\n    # calculate the x point of the first hexagon point\n    first_x = radius / 2 * math.sin(math.radians(90))\n    # calculate the y point of the first hexagon point\n    first_y = radius / 2 * math.sin(math.radians(90))\n    # calculate the x point of the second hexagon point\n    second_x = radius / 2 * math.cos(math.radians(90))\n    # calculate the y point of the second hexagon point\n    second_y = radius / 2 * math.sin(math.radians(90))\n    # calculate the x point of the second hexagon point\n    second_x = radius / 2 * math.cos(math.radians(90))\n    # calculate the y point of the third hexagon point\n    third_y = radius / 2 * math.sin(math.radians(90))\n    # calculate the x point of the third hexagon point\n    third_x = radius / 2 * math.cos(math.radians(90))\n    # calculate the y point of the third hexagon point\n    third_y = radius / 2 * math.sin(math.radians(90))\n    # calculate the x point of the fourth hexagon point\n    fourth_x = radius / 2 * math.cos(math.radians(90))\n    # calculate the y point of the fourth hexagon point\n    fourth_y = radius / 2 * math.sin(math.radians(90))\n    # calculate the x point of the fourth hexagon point\n    fourth_x = radius / 2 * math.cos(math.radians(90))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "import math\n\ndef write_grid(width, height, num_points):\n    \"\"\"\n    :type width: int\n    :type height: int\n    :type num_points: int\n    :rtype: List[List[int]]\n    \"\"\"\n    grid = []\n    for i in range(num_points):\n        grid.append([])\n        for j in range(num_points):\n            grid[i].append((width/2) + (math.sin(i*2*math.pi/num_points)*width/2)*j,\n                           (height/2) + (math.cos(i*2*math.pi/num_points)*height/2)*j)\n    return grid\n\nif __name__ == '__main__':\n    print(write_grid(2, 2, 6))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import math\n\ndef get_hexagon(n, r):\n    \"\"\"\n    Input:\n        n = number of points to return\n        r = radius of the hexagon\n    Output:\n        list of hexagon coordinates\n    \"\"\"\n    h = r / math.sqrt(3)\n    #h = r/2\n    x = [h*math.cos(i*math.pi/6) for i in range(0,6)]\n    y = [h*math.sin(i*math.pi/6) for i in range(0,6)]\n    return x, y\n\ndef get_hexagon_points(n, r):\n    \"\"\"\n    Input:\n        n = number of points to return\n        r = radius of the hexagon\n    Output:\n        list of hexagon coordinates\n    \"\"\"\n    hexagon_points = []\n    for i in range(0, n):\n        x, y = get_hexagon(i, r)\n        hexagon_points.append((x, y))\n    return hexagon_points\n\ndef get_hexagon_points_2(n, r):\n    \"\"\"\n    Input:\n        n = number of points to return\n        r = radius of the hexagon\n    Output:\n        list of hexagon coordinates\n    \"\"\"\n    hexagon_points = []\n    for i in range(0, n):\n        x = [i*r*math.cos(i*math.pi/6), i*r*math.sin(i*math.pi/6)]\n        y = [i*r*math.cos(i*math.pi/6), i*r*math.sin(i*math.pi/6)]\n        hexagon_points.append((x, y))\n    return hexagon_points\n\ndef get_hexagon_points_3(n, r):\n    \"\"\"\n    Input:\n        n = number of points to return\n        r = radius of the hexagon\n    Output:\n        list of hexagon coordinates\n    \"\"\"\n    hexagon_points = []\n    for i in range(0, n):\n        x = [i*r*math.cos(i*math.pi/6), i*r*math"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import math\n\ndef hexagon_coordinates(height, width, angle):\n    \"\"\"\n    :param height: height of the grid\n    :param width: width of the grid\n    :param angle: angle of the hexagon\n    :return: list of lists of hexagon coordinates\n    \"\"\"\n    #calculate the size of the grid\n    x = height / 2\n    y = width / 2\n    \n    #calculate the angle of the hexagon\n    angle = math.radians(angle)\n    \n    #calculate the coordinates of the hexagon\n    x = x + math.cos(angle) * x\n    y = y + math.sin(angle) * y\n    \n    #calculate the coordinates of the hexagon\n    x = x + math.cos(angle) * x\n    y = y + math.sin(angle) * y\n    \n    #calculate the coordinates of the hexagon\n    x = x + math.cos(angle) * x\n    y = y + math.sin(angle) * y\n    \n    #calculate the coordinates of the hexagon\n    x = x + math.cos(angle) * x\n    y = y + math.sin(angle) * y\n    \n    #calculate the coordinates of the hexagon\n    x = x + math.cos(angle) * x\n    y = y + math.sin(angle) * y\n    \n    #calculate the coordinates of the hexagon\n    x = x + math.cos(angle) * x\n    y = y + math.sin(angle) * y\n    \n    #calculate the coordinates of the hexagon\n    x = x + math.cos(angle) * x\n    y = y + math.sin(angle) * y\n    \n    #calculate the coordinates of the hexagon\n    x = x + math.cos(angle) * x\n    y = y + math.sin(angle) * y\n    \n    #calculate the coordinates of the hexagon\n    x = x + math.cos(angle) * x\n    y = y + math.sin(angle) * y\n    \n    #calculate the coordinates of the hexagon\n    x"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def get_hexagon_coordinates(n):\n    \"\"\"\n    :param n: number of hexagon rows\n    :return: list of lists of coordinates\n    \"\"\"\n    coordinates = [[(i, 0) for i in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == 0:\n                coordinates[i][j] = ((i+1)*n - j - 1, j)\n            elif j % 2 == 0:\n                coordinates[i][j] = ((i+1)*n - j - 1, n-1 - j)\n    return coordinates\n\n\ndef test_get_hexagon_coordinates():\n    assert get_hexagon_coordinates(3) == [[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)], [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)], [(0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2)]]\n\n\nif __name__ == \"__main__\":\n    test_get_hexagon_coordinates()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def get_hexagon(x_point, y_point, width, height):\n    \"\"\"\n    Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    \"\"\"\n    grid_x = []\n    grid_y = []\n    for x in range(0, width):\n        for y in range(0, height):\n            if x % 2 == 0:\n                grid_x.append(x_point + x)\n                grid_y.append(y_point + y)\n            else:\n                grid_x.append(x_point + x)\n                grid_y.append(y_point - y)\n    return grid_x, grid_y\n\nprint get_hexagon(0, 0, 10, 10)\n\n# Output\n# [[0, 0], [0, 1], [0, 2], [1, 2], [1, 1], [1, 0], [2, 0], [2, 1], [2, 2]]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import math\n\ndef grid(radius, n):\n    \"\"\"\n    Write a function grid that returns a list of lists containing 6 tuples of x, y point coordinates.\n\n    :param radius: The radius of the hexagon.\n    :param n: The number of hexagon in the grid.\n    :return: A list of lists containing 6 tuples of x, y point coordinates.\n    \"\"\"\n    x = [0, radius, radius, radius, radius, 0]\n    y = [0, 0, radius, radius, radius, radius]\n\n    hexagons = []\n    for i in range(n):\n        for j in range(6):\n            x[j] += x[j+1]\n            y[j] += y[j+1]\n            hexagons.append([x[j], y[j]])\n        for j in range(6):\n            x[j] += x[j+1]\n            y[j] -= y[j+1]\n            hexagons.append([x[j], y[j]])\n\n    return hexagons\n\n\nif __name__ == \"__main__\":\n    print(grid(5, 3))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def hexagon_coordinates(n):\n    result = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            result.append((i, j))\n    return result\n\nprint(hexagon_coordinates(6))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def hexagon_coordinates(num_of_hexagon):\n    \"\"\"\n    :param num_of_hexagon: number of hexagon\n    :return: list of lists of hexagon coordinates\n    \"\"\"\n    hexagon_coordinates = []\n\n    for i in range(num_of_hexagon):\n        hexagon_coordinates.append([(i/6)*6, (i/6)*6])\n        hexagon_coordinates.append([(i/6)*6 + 1, (i/6)*6])\n        hexagon_coordinates.append([(i/6)*6, (i/6)*6 + 1])\n        hexagon_coordinates.append([(i/6)*6 + 1, (i/6)*6 + 1])\n\n    return hexagon_coordinates\n\ndef main():\n    print(hexagon_coordinates(6))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def get_grid_coordinates(radius, num_of_cols, num_of_rows):\n    x = [0] * num_of_cols\n    y = [0] * num_of_rows\n    for row in range(num_of_rows):\n        for col in range(num_of_cols):\n            x[col] = col * radius\n            y[row] = row * radius\n    return x, y\n\ndef get_hexagon_coordinates(radius, num_of_cols, num_of_rows):\n    x = [0] * num_of_cols\n    y = [0] * num_of_rows\n    for row in range(num_of_rows):\n        for col in range(num_of_cols):\n            x[col] = col * radius\n            y[row] = row * radius\n    hex_coordinates = []\n    for row in range(num_of_rows):\n        for col in range(num_of_cols):\n            hex_coordinates.append((x[col], y[row]))\n    return hex_coordinates\n\ndef get_hexagon_coordinates_with_offset(radius, num_of_cols, num_of_rows):\n    x = [0] * num_of_cols\n    y = [0] * num_of_rows\n    for row in range(num_of_rows):\n        for col in range(num_of_cols):\n            x[col] = col * radius\n            y[row] = row * radius\n    hex_coordinates = []\n    for row in range(num_of_rows):\n        for col in range(num_of_cols):\n            hex_coordinates.append((x[col], y[row]))\n    for row in range(num_of_rows):\n        for col in range(num_of_cols):\n            hex_coordinates.append((x[col], y[row] + radius))\n    return hex_coordinates\n\ndef get_hexagon_coordinates_with_offset_and_center(radius, num_of_cols, num_of_rows):\n    x"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\ndef hexagon_coordinates(rows=3, cols=3):\n    coordinates = [[(x, y) for x in range(cols)] for y in range(rows)]\n    return coordinates\n\ndef main():\n    print(hexagon_coordinates())\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import math\n\ndef hexagon_coordinates(height):\n    \"\"\"\n    :type height: int\n    :rtype: list of lists of tuples of ints\n    \"\"\"\n    \n    #returns a list of lists of tuples of ints, where each tuple is (x, y)\n    #this list is ordered such that the first tuple is the top-left, and the last tuple is the bottom-right\n    #this is an example of how to use this function:\n    #returns [[(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)], [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)], [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)]]\n    \n    #start at the bottom-left corner and move up to the top-right corner, and then move to the next corner and so on\n    #returns [[(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)], [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)], [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)]]\n    \n    #returns [[(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)], [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)], [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)]]\n    \n    #returns [[(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)], [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)], [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)]]\n    \n    #returns [[(0, 0), (0, 1), (1, 1), (1, 0), (0"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\ndef hexagon_coordinates(width, height):\n    \"\"\"\n    :param width: number\n    :param height: number\n    :return: list of lists\n    \"\"\"\n    # 1st hexagon\n    x1 = (width/2) - (width/6)\n    y1 = (height/2) - (height/6)\n    x2 = (width/2) + (width/6)\n    y2 = (height/2) + (height/6)\n    x3 = (width/2) - (width/6)\n    y3 = (height/2) - (height/6)\n    x4 = (width/2) - (width/6)\n    y4 = (height/2) + (height/6)\n    x5 = (width/2) + (width/6)\n    y5 = (height/2) + (height/6)\n    x6 = (width/2) - (width/6)\n    y6 = (height/2) + (height/6)\n    x7 = (width/2) + (width/6)\n    y7 = (height/2) - (height/6)\n    x8 = (width/2) - (width/6)\n    y8 = (height/2) - (height/6)\n    x9 = (width/2) + (width/6)\n    y9 = (height/2) - (height/6)\n    x10 = (width/2) - (width/6)\n    y10 = (height/2) + (height/6)\n    x11 = (width/2) + (width/6)\n    y11 = (height/2) + (height/6)\n    x12 = (width/2) + (width/6)\n    y12 = (height/2) - (height/6)\n    x13 = (width/2) - (width/6)\n    y13 = (height/2) + (height/6)\n    x14 = (width/2) - (width/6)\n    y14 = (height/2) + (height/6)\n    x15 = (width/2) + (width"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef hexagon_coordinates(number):\n    \"\"\"\n    Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    :param number: number of hexagon coordinates\n    :return: a list of lists of 6 tuples of x, y point coordinates\n    \"\"\"\n    if number <= 0:\n        return []\n    else:\n        x = []\n        y = []\n        for i in range(0, number):\n            x.append(i * 2)\n            y.append(i * 2)\n            x.append(i * 2)\n            y.append(i * 2 + 1)\n            x.append(i * 2 + 1)\n            y.append(i * 2)\n            x.append(i * 2 + 1)\n            y.append(i * 2 + 1)\n            x.append(i * 2)\n            y.append(i * 2 + 1)\n        return x, y\n\ndef print_hexagon_coordinates(number):\n    \"\"\"\n    Print a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    :param number: number of hexagon coordinates\n    \"\"\"\n    if number <= 0:\n        return\n    else:\n        for i in range(0, number):\n            print(x[i], y[i])\n\nif __name__ == \"__main__\":\n    # Test case 1\n    print(hexagon_coordinates(6))\n    # Test case 2\n    print(hexagon_coordinates(20))\n    # Test case 3\n    print_hexagon_coordinates(4)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import math\n\ndef hexagon_coordinates(side_length, num_of_hexagon):\n    hexagon_list = []\n    for i in range(0, num_of_hexagon):\n        x = side_length / 2\n        y = side_length * math.sqrt(3) / 2\n        hexagon_list.append((x, y))\n\n    return hexagon_list\n\n\nif __name__ == '__main__':\n    print(hexagon_coordinates(1, 3))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import math\n\n# your code goes here\n\ndef generate_hexagon_grid(width, height, n):\n    grid = []\n    for x in range(width):\n        for y in range(height):\n            grid.append([x, y])\n\n    for i in range(n):\n        x = int(math.sqrt(width))\n        y = int(math.sqrt(height))\n        while x <= y:\n            grid.append([x, y])\n            x += 1\n            y += 1\n\n    return grid\n\n\n# https://www.hackerrank.com/challenges/hexagon-grid/problem\n\nif __name__ == \"__main__\":\n    width = int(input())\n    height = int(input())\n    n = int(input())\n    grid = generate_hexagon_grid(width, height, n)\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            print(grid[i][j][0], grid[i][j][1])"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# https://en.wikipedia.org/wiki/Hexagon\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_grid\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/Hexagon_coordinates\n# https://en.wikipedia.org/wiki/"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def grid(num_rows, num_cols):\n    return [[(i+1)*j, i*j] for i in range(num_rows) for j in range(num_cols)]\n\nprint(grid(3,3))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def hexagon_grid(num_of_hexagon):\n    \"\"\"\n    Input:\n        num_of_hexagon = number of hexagon to be generated\n    Output:\n        returns a list of lists containing 6 tuples of x, y point coordinates\n    \"\"\"\n    grid = []\n    for i in range(0, num_of_hexagon):\n        grid.append(\n            [\n                [i, i],\n                [i, -i],\n                [-i, -i],\n                [-i, i],\n                [i, -i],\n                [i, i],\n            ]\n        )\n    return grid\n\nif __name__ == \"__main__\":\n    print(hexagon_grid(5))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import math\nimport os\nimport random\n\ndef generate_hexagon_points(side_length, num_points):\n    \"\"\"\n    Generate a list of hexagon points.\n\n    :param side_length: side length of hexagon\n    :param num_points: number of hexagon points\n    :return: a list of hexagon points\n    \"\"\"\n    hexagon_points = []\n    for x in range(0, num_points):\n        x_coord = side_length * math.cos((x * 2 * math.pi) / num_points)\n        y_coord = side_length * math.sin((x * 2 * math.pi) / num_points)\n        hexagon_points.append((x_coord, y_coord))\n    return hexagon_points\n\ndef generate_hexagon_points_random(side_length, num_points):\n    \"\"\"\n    Generate a list of hexagon points.\n\n    :param side_length: side length of hexagon\n    :param num_points: number of hexagon points\n    :return: a list of hexagon points\n    \"\"\"\n    hexagon_points = []\n    for x in range(0, num_points):\n        x_coord = side_length * random.random()\n        y_coord = side_length * random.random()\n        hexagon_points.append((x_coord, y_coord))\n    return hexagon_points\n\ndef generate_hexagon_points_random_in_circle(side_length, num_points):\n    \"\"\"\n    Generate a list of hexagon points.\n\n    :param side_length: side length of hexagon\n    :param num_points: number of hexagon points\n    :return: a list of hexagon points\n    \"\"\"\n    hexagon_points = []\n    for x in range(0, num_points):\n        x_coord = side_length * random.random()\n        y_coord = side_length * random.random()\n        hexagon_points.append((x_coord, y_coord))\n    return hexagon_points\n\ndef generate_hexagon_points_random_in_circle_with_offset(side_length, num_points, offset_x, offset_"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def hexagon(n):\n    result = []\n    for i in range(0, n):\n        x = i / (n / 2)\n        y = i % (n / 2)\n        if i % 2 == 0:\n            x = x + 1\n        result.append([x, y])\n    return result\n\n\ndef hexagon_matrix(n):\n    result = []\n    for i in range(0, n):\n        result.append(hexagon(n))\n    return result\n\ndef main():\n    print(hexagon_matrix(6))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def calculate_hexagon_coordinates(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    hexagon_coordinates = []\n    for i in range(0, n):\n        for j in range(0, n):\n            if i == 0 or j == 0 or i == n-1 or j == n-1:\n                hexagon_coordinates.append([j,i])\n            else:\n                hexagon_coordinates.append([j-1,i])\n                hexagon_coordinates.append([j-1,i+1])\n                hexagon_coordinates.append([j,i+1])\n                hexagon_coordinates.append([j+1,i+1])\n                hexagon_coordinates.append([j+1,i])\n                hexagon_coordinates.append([j+1,i-1])\n                hexagon_coordinates.append([j,i-1])\n                hexagon_coordinates.append([j-1,i-1])\n    return hexagon_coordinates"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import math\n\ndef hexagon_coordinates(n):\n    x, y = (0, 0)\n    for i in range(n):\n        x = x + math.cos(math.radians(360.0 / n))\n        y = y + math.sin(math.radians(360.0 / n))\n        yield (x, y)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/hexagon-grid/problem\n\nimport math\n\ndef grid_coordinates(n):\n    x_coordinates = []\n    y_coordinates = []\n    for i in range(n):\n        x_coordinates.append([math.floor(i/2), i%2])\n        y_coordinates.append([math.floor(i/2), i%2])\n    return [[x_coordinates, y_coordinates]]\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(grid_coordinates(n))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def hexagon(height):\n    return [[(x, y) for y in range(0, height)] for x in range(0, height)]\n\ndef hexagon_coordinates(height):\n    hexagon_coordinates = hexagon(height)\n    for i in range(0, height):\n        for j in range(0, height):\n            hexagon_coordinates[i][j] = (hexagon_coordinates[i][j][0] + hexagon_coordinates[i][j][2], hexagon_coordinates[i][j][1] + hexagon_coordinates[i][j][3])\n    return hexagon_coordinates\n\ndef grid_coordinates(height):\n    grid_coordinates = [[(x, y) for y in range(0, height)] for x in range(0, height)]\n    for i in range(0, height):\n        for j in range(0, height):\n            grid_coordinates[i][j] = (grid_coordinates[i][j][0] + grid_coordinates[i][j][2], grid_coordinates[i][j][1] + grid_coordinates[i][j][3])\n    return grid_coordinates\n\ndef main():\n    height = int(input())\n    print(hexagon_coordinates(height))\n    print(grid_coordinates(height))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def hexagon_coordinates(num_of_hexagon):\n    \"\"\"\n    :param num_of_hexagon: the number of hexagon\n    :return: the list of hexagon coordinates\n    \"\"\"\n    hexagon_coordinates = [[(0, 0), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1), (-1, -1)],\n                           [(0, 0), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1), (-1, -1)],\n                           [(0, 0), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1), (-1, -1)]]\n    return hexagon_coordinates[num_of_hexagon - 1]\n\ndef test_hexagon_coordinates(num_of_hexagon):\n    \"\"\"\n    Test function\n    \"\"\"\n    result = hexagon_coordinates(num_of_hexagon)\n    assert result == [[(0, 0), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1), (-1, -1)],\n                      [(0, 0), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1), (-1, -1)],\n                      [(0, 0), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1), (-1, -1)]]\n    return result\n\nif __name__ == '__main__':\n    test_hexagon_coordinates(6)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def generate_hexagon_grid(num_points):\n    \"\"\"\n    Function to generate a list of lists of hexagon coordinates\n\n    :param num_points: number of points to generate\n    :return: list of lists of hexagon coordinates\n    \"\"\"\n    grid = []\n    for x in range(0, num_points):\n        row = []\n        for y in range(0, num_points):\n            row.append((x, y))\n        grid.append(row)\n    return grid\n\ndef generate_hexagon_coordinates(num_points):\n    \"\"\"\n    Function to generate a list of hexagon coordinates\n\n    :param num_points: number of points to generate\n    :return: list of hexagon coordinates\n    \"\"\"\n    hexagon_grid = generate_hexagon_grid(num_points)\n    hexagon_coordinates = []\n    for row in hexagon_grid:\n        for point in row:\n            hexagon_coordinates.append((point[0], point[1]))\n    return hexagon_coordinates\n\ndef get_hexagon_coordinates(num_points):\n    \"\"\"\n    Function to calculate a grid of hexagon coordinates\n\n    :param num_points: number of points to generate\n    :return: list of lists of hexagon coordinates\n    \"\"\"\n    hexagon_coordinates = generate_hexagon_coordinates(num_points)\n    return hexagon_coordinates\n\nif __name__ == \"__main__\":\n    grid = generate_hexagon_grid(5)\n    hexagon_coordinates = generate_hexagon_coordinates(5)\n    print(grid)\n    print(hexagon_coordinates)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import numpy as np\n\n\ndef hexagon_coordinates(n):\n    \"\"\"\n    Returns the coordinates of the hexagon grid.\n    :param n: the number of hexagons.\n    :return: a list of lists of tuples containing coordinates of hexagon.\n    \"\"\"\n    result = []\n    for i in range(0, n):\n        result.append([\n            [i * 2, 0],\n            [i * 2, -1],\n            [i * 2 + 1, 0],\n            [i * 2 + 1, 1],\n            [i * 2, 1],\n            [i * 2, -1]\n        ])\n    return result\n\n\nif __name__ == '__main__':\n    print(hexagon_coordinates(3))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import random\n\ndef calculate_hexagon_coordinates(x, y):\n    \"\"\"\n    Calculate a grid of hexagon coordinates where each hexagon is a 6-tuple of x, y point coordinates.\n    :param x: The x-coordinate of the center of the hexagon.\n    :param y: The y-coordinate of the center of the hexagon.\n    :return: A list of lists containing 6 tuples of x, y point coordinates.\n    \"\"\"\n    \n    # Generate a random hexagon with 6 points.\n    hexagon = [random.randint(0, x), random.randint(0, y),\n               random.randint(0, x), random.randint(0, y),\n               random.randint(0, x), random.randint(0, y)]\n    # Calculate the coordinates of the hexagon.\n    hexagon_coords = [x * 2, y * 2,\n                      x * 2 + x, y * 2 + y,\n                      x * 2 + x + x, y * 2 + y]\n    # Return the coordinates of the hexagon.\n    return hexagon, hexagon_coords\n\ndef test_calculate_hexagon_coordinates():\n    # Test 1: Test with x = 3, y = 3.\n    x, y = 3, 3\n    hexagon, hexagon_coords = calculate_hexagon_coordinates(x, y)\n    # Test 2: Test with x = 3, y = 3.\n    x, y = 3, 3\n    hexagon, hexagon_coords = calculate_hexagon_coordinates(x, y)\n    # Test 3: Test with x = 5, y = 5.\n    x, y = 5, 5\n    hexagon, hexagon_coords = calculate_hexagon_coordinates(x, y)\n    # Test 4: Test with x = 5, y = 5.\n    x, y = 5, 5\n    hexagon, hexagon_coords = calculate_hexagon_coordinates(x, y)\n    # Test 5: Test with x = 7, y = 7.\n    x, y = 7, 7\n    hexagon, hexagon_coords"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import math\n\ndef hexagon_coordinates(radius, height):\n    # radius = 10\n    # height = 10\n    \n    x_count = math.ceil(radius / height)\n    y_count = math.ceil(radius / height)\n    \n    x_pos = 0\n    y_pos = 0\n    \n    hex_coordinates = []\n    for x in range(x_count):\n        for y in range(y_count):\n            hex_coordinates.append((x_pos, y_pos))\n            x_pos = x_pos + height\n        y_pos = y_pos + height\n    \n    return hex_coordinates\n\nif __name__ == \"__main__\":\n    print hexagon_coordinates(10, 10)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "# Write your code below\n\ndef hexagon(n):\n    return [[i, j] for i in range(0, n) for j in range(i+1, n, -1)]\n\nhexagon(5)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def hexagon_coordinates(radius, n):\n    \"\"\"\n    :param radius: radius of the hexagon\n    :param n: number of hexagons\n    :return: list of lists of points\n    \"\"\"\n    if n < 0:\n        return []\n    else:\n        coordinates = []\n        for i in range(n):\n            a = (i + 1) * radius\n            b = radius * math.sqrt(3) / 2.0\n            c = (i + 2) * radius\n            d = radius * math.sqrt(3) / 2.0\n            coordinates.append([a, b, c, d])\n        return coordinates\n\nprint(hexagon_coordinates(3, 10))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef generate_hexagon_coords(side_length):\n    \"\"\"\n    Generate hexagon coordinates from side length.\n    :param side_length: side length of hexagon\n    :return: list of list of coordinates\n    \"\"\"\n    hexagon_coords = []\n    for i in range(0, side_length, 6):\n        hexagon_coords.append([i, side_length - i])\n    return hexagon_coords\n\ndef get_hexagon_coordinates(hexagon_coords, side_length):\n    \"\"\"\n    Get coordinates for hexagon.\n    :param hexagon_coords: list of lists containing 6 tuples of x, y point coordinates\n    :param side_length: side length of hexagon\n    :return: list of list of coordinates\n    \"\"\"\n    hexagon_coordinates = []\n    for hexagon_coord in hexagon_coords:\n        hexagon_coordinates.append(hexagon_coord[0] * side_length, hexagon_coord[1] * side_length)\n    return hexagon_coordinates\n\ndef get_hexagon_coordinates_list(hexagon_coords, side_length):\n    \"\"\"\n    Get coordinates for hexagon list.\n    :param hexagon_coords: list of lists containing 6 tuples of x, y point coordinates\n    :param side_length: side length of hexagon\n    :return: list of list of coordinates\n    \"\"\"\n    hexagon_coordinates_list = []\n    for hexagon_coord in hexagon_coords:\n        hexagon_coordinates_list.append([hexagon_coord[0] * side_length, hexagon_coord[1] * side_length])\n    return hexagon_coordinates_list\n\ndef get_hexagon_coordinates_list_2(hexagon_coords, side_length):\n    \"\"\"\n    Get coordinates for hexagon list.\n    :param hexagon_coords: list of lists containing 6 tuples of x, y point coordinates\n    :param side_length: side length of hexagon\n    :return: list of list of coordinates\n    \"\"\"\n    hexagon_coordinates_list = []\n    for hex"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def hexagon_coords(number):\n    \"\"\"\n    :param number: a number of hexagon points\n    :return: list of lists of x, y point coordinates\n    \"\"\"\n\n    # list of tuples of x, y points\n    coords = []\n\n    # x points\n    x_points = []\n\n    # y points\n    y_points = []\n\n    # number of hexagon points\n    n = number\n\n    # calculate x and y points\n    for i in range(0, n):\n        x_points.append(i * (1.0 / n))\n        y_points.append(i * (1.0 / n))\n\n    # calculate coords\n    for i in range(0, n):\n        for j in range(0, n):\n            x = i * (1.0 / n)\n            y = j * (1.0 / n)\n            coords.append((x, y))\n\n    # return coords\n    return coords\n\n\nif __name__ == \"__main__\":\n    # number of hexagon points\n    number = 20\n\n    # calculate hexagon coordinates\n    coords = hexagon_coords(number)\n\n    # print hexagon coordinates\n    for i in range(0, len(coords)):\n        print coords[i]\n\n    # print hexagon coordinates\n    for i in range(0, len(coords)):\n        for j in range(0, len(coords[i])):\n            print coords[i][j]\n\n    # print hexagon coordinates\n    for i in range(0, len(coords)):\n        for j in range(0, len(coords[i])):\n            print coords[i][j][0]\n\n    # print hexagon coordinates\n    for i in range(0, len(coords)):\n        for j in range(0, len(coords[i])):\n            print coords[i][j][1]"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def hex_coordinates(n):\n    \"\"\"\n    :param n: number of hexagon points\n    :return: list of lists of hexagon points coordinates\n    \"\"\"\n    \n    # generate coordinates\n    coordinates = [[(x, y) for x in range(0, n+1)] for y in range(0, n+1)]\n    \n    # calculate coordinates for each hexagon\n    for i in range(0, n):\n        for j in range(0, n):\n            for k in range(0, n):\n                # calculate the coordinates\n                coordinates[i][j][k] = ((i*n + j*n/2 + k) % (n*n), (i*n + j*n/2 + k) % (n*n))\n    \n    return coordinates\n\nif __name__ == \"__main__\":\n    \n    n = 5\n    \n    coordinates = hex_coordinates(n)\n    \n    print coordinates"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def write_grid(grid):\n    \n    # list of lists of hexagon coordinates\n    hexagon_coordinates = []\n    \n    # iterate through the grid\n    for x in range(len(grid)):\n        for y in range(len(grid[x])):\n            # if the grid is not empty, add hexagon coordinates to the list\n            if grid[x][y] == 1:\n                hexagon_coordinates.append([x, y, x + 1, y + 1, x - 1, y - 1, x + 2, y - 2, x - 2, y + 2])\n                \n    return hexagon_coordinates\n\n# input\ngrid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\n# output\nprint(write_grid(grid))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport math\nimport numpy as np\n\ndef hexagon_grid(num_of_hexagon, nx, ny):\n    nx = int(nx)\n    ny = int(ny)\n    # Generate coordinates for a hexagon\n    hexagon_coords = []\n    for i in range(nx):\n        for j in range(ny):\n            hexagon_coords.append([i, j])\n    # Generate coordinates for a hexagon\n    for i in range(nx - 1):\n        for j in range(ny - 1):\n            if (j % 2 == 0):\n                hexagon_coords.append([i, j + 1])\n            else:\n                hexagon_coords.append([i, j - 1])\n    # Generate coordinates for a hexagon\n    for i in range(nx - 1):\n        for j in range(ny - 1):\n            if (i % 2 == 0):\n                hexagon_coords.append([i + 1, j])\n            else:\n                hexagon_coords.append([i - 1, j])\n    # Generate coordinates for a hexagon\n    for i in range(nx - 1):\n        for j in range(ny - 1):\n            if (j % 2 == 0):\n                hexagon_coords.append([i, j + 1])\n            else:\n                hexagon_coords.append([i, j - 1])\n    # Generate coordinates for a hexagon\n    for i in range(nx - 1):\n        for j in range(ny - 1):\n            if (i % 2 == 0):\n                hexagon_coords.append([i + 1, j + 1])\n            else:\n                hexagon_coords.append([i + 1, j - 1])\n    # Generate coordinates for a hexagon\n    for i in range(nx - 1):\n        for j in range(ny - 1):\n            if (j % 2 == 0):\n                hexagon_coords.append([i + 1, j + 1])\n            else:\n                hexagon_coords.append([i + 1, j - 1])"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "class HexagonGrid:\n    \n    def __init__(self, grid_width, grid_height):\n        self.grid_width = grid_width\n        self.grid_height = grid_height\n        self.hexagon_width = int(grid_width / 2)\n        self.hexagon_height = int(grid_height / 2)\n        self.hexagon_points = []\n        self.hexagon_points = self.generate_hexagon_points()\n        self.hexagon_points = self.flatten_hexagon_points()\n\n    def generate_hexagon_points(self):\n        # Generate all hexagon points in a grid of width, height\n        hexagon_points = []\n        for x in range(0, self.grid_width):\n            for y in range(0, self.grid_height):\n                x_offset = (x * self.hexagon_width) - (self.hexagon_width / 2)\n                y_offset = (y * self.hexagon_height) - (self.hexagon_height / 2)\n                hexagon_points.append([x_offset, y_offset])\n        return hexagon_points\n\n    def flatten_hexagon_points(self):\n        # Flatten the hexagon points into a list of lists\n        hexagon_point_lists = []\n        for point in self.hexagon_points:\n            hexagon_point_lists.append([point[0], point[1]])\n        return hexagon_point_lists\n\n\ndef main():\n    hexagon_grid = HexagonGrid(16, 16)\n    print(hexagon_grid.hexagon_points)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def grid(num_points):\n    \"\"\"\n    Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    \"\"\"\n    # Your Code Here\n    hexagon = [[0,0],[0,1],[1,1],[1,0],[0,-1],[-1,0]]\n    list_of_lists = [[0,0],[0,1],[1,1],[1,0],[0,-1],[-1,0]]\n    result = []\n    for i in range(0,num_points):\n        result.append(list(hexagon))\n    return result\n\n#Test Cases\nprint(grid(1))\nprint(grid(2))\nprint(grid(3))\nprint(grid(4))\nprint(grid(5))\nprint(grid(6))\nprint(grid(7))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\n\n# This function will be used to calculate the coordinates of hexagon\ndef coordinates(n):\n    # n is the number of hexagon, so the result will be the total number of points\n    # The coordinates will be calculated by the equation:\n    # x = (a * n + b) / 2\n    # y = (a * n + b) * (n - 1) / 2\n    # where a and b are the coordinates of the hexagon's center\n    # n is the number of hexagon, so the result will be the total number of points\n    # The coordinates will be calculated by the equation:\n    # x = (a * n + b) * (n - 1) / 2\n    # y = (a * n + b) / 2\n    # where a and b are the coordinates of the hexagon's center\n    # n is the number of hexagon, so the result will be the total number of points\n    # The coordinates will be calculated by the equation:\n    # x = (a * n + b) * (n - 1) / 2\n    # y = (a * n + b) / 2\n    # where a and b are the coordinates of the hexagon's center\n    # n is the number of hexagon, so the result will be the total number of points\n    # The coordinates will be calculated by the equation:\n    # x = (a * n + b) * (n - 1) / 2\n    # y = (a * n + b) / 2\n    # where a and b are the coordinates of the hexagon's center\n    # n is the number of hexagon, so the result will be the total number of points\n    # The coordinates will be calculated by the equation:\n    # x = (a * n + b) * (n - 1) / 2\n    # y = (a * n + b) / 2\n    # where a and b are the coordinates of the hexagon's center\n    # n is the number of hexagon, so the result will be the total number of points\n    # The coordinates will be calculated by the equation:\n    # x = (a * n + b) * (n - 1) / 2\n    # y = (a * n + b) / 2\n    # where a and"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def hexagon_coordinates(n):\n    \"\"\"\n    :param n: int\n    :return: list of lists\n    \"\"\"\n    if n <= 0:\n        return []\n\n    coordinates = [[0, 0], [0, -1], [0, n], [1, 0], [0, 1], [1, 1], [1, n], [n, n], [n, n - 1], [n - 1, n], [n - 1, n - 1], [n, n - 1], [n - 1, 0], [n, 0], [n - 1, -1], [n, -1], [n - 1, n - 2], [n, n - 2], [n - 2, n], [n - 2, n - 1], [n - 2, n - 2], [0, n - 2], [n, n - 2], [n - 2, n - 3], [n - 3, n - 2], [n - 3, n - 3], [n - 3, 0], [n - 3, n], [n - 3, n - 1], [n - 3, n - 2], [n - 3, n - 3], [0, n - 3], [n, n - 3], [n - 3, n - 4], [n - 4, n - 3], [n - 4, n - 4], [0, n - 4], [n, n - 4], [n - 4, n - 5], [n - 5, n - 4], [n - 5, n - 5], [0, n - 5], [n, n - 5], [n - 5, n - 6], [n - 6, n - 5], [n - 6, n - 6], [0, n - 6], [n, n - 6], [n - 6, n - 7], [n - 7, n - 6], [n - 7, n - 7], [0, n - 7], [n, n - 7], [n - 7, n - 8], [n - 8, n - 7], [n - 8, n - 8], [0, n - 8], [n, n - 8], [n - 8, n - 9], [n - 9, n - 8], [n - 9, n - 9"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def calc_hexagon_coordinates(radius):\n    \"\"\"\n    :param radius: radius of the hexagon\n    :return: list of lists containing 6 tuples of x, y point coordinates\n    \"\"\"\n    # TODO: Implement function\n    # This is a simple implementation for the purpose of this lab. You can use your own logic to solve this problem.\n    # The solution will be displayed to the student.\n    return [[0, 0], [radius, 0], [radius, radius], [0, radius], [0, 0], [radius, 0]]\n\n\ndef main():\n    print(calc_hexagon_coordinates(1))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import math\n\ndef hexagon_grid(n):\n    n = int(n)\n    return [[(i, j) for i in range(n + 1)] for j in range(n + 1)]\n\n\ndef get_hexagon_points(hexagon_grid, n):\n    points = []\n    for i in range(n):\n        points.append([])\n        for j in range(n):\n            points[i].append((hexagon_grid[i][j][0] + hexagon_grid[i][j][2]) / 2)\n            points[i].append((hexagon_grid[i][j][1] + hexagon_grid[i][j][3]) / 2)\n    return points\n\n\ndef get_hexagon_points_grid(hexagon_grid, n):\n    points = []\n    for i in range(n):\n        points.append([])\n        for j in range(n):\n            points[i].append((i * hexagon_grid[0][0][0] + j * hexagon_grid[0][0][1] + hexagon_grid[0][0][2]) / 2)\n            points[i].append((i * hexagon_grid[0][1][0] + j * hexagon_grid[0][1][1] + hexagon_grid[0][1][2]) / 2)\n    return points\n\n\ndef get_hexagon_points_grid2(hexagon_grid, n):\n    points = []\n    for i in range(n):\n        points.append([])\n        for j in range(n):\n            points[i].append((i * hexagon_grid[i][j][0] + j * hexagon_grid[i][j][1] + hexagon_grid[i][j][2]) / 2)\n            points[i].append((i * hexagon_grid[i][j][0] + j * hexagon_grid[i][j][1] + hexagon_grid[i][j][3]) / 2)\n    return points\n\n\ndef get_hexagon_points_grid3(hexagon_grid, n):\n    points = []\n    for i in range(n):\n        points.append"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# import timeit\n\n# start = timeit.default_timer()\n\n# def getHexagonCoordinates(numRows, numCols):\n#     \"\"\"\n#     :type numRows: int\n#     :type numCols: int\n#     :rtype: list\n#     \"\"\"\n#     # print(numRows, numCols)\n#     result = []\n#     for i in range(numRows):\n#         for j in range(numCols):\n#             result.append((i * numCols, j * numRows))\n#     return result\n\n# end = timeit.default_timer()\n# print(end - start)\n\n# start = timeit.default_timer()\n# result = getHexagonCoordinates(2, 3)\n# end = timeit.default_timer()\n# print(end - start)\n\n# start = timeit.default_timer()\n# result = getHexagonCoordinates(2, 4)\n# end = timeit.default_timer()\n# print(end - start)\n\n# start = timeit.default_timer()\n# result = getHexagonCoordinates(5, 5)\n# end = timeit.default_timer()\n# print(end - start)\n\n# start = timeit.default_timer()\n# result = getHexagonCoordinates(6, 6)\n# end = timeit.default_timer()\n# print(end - start)\n\n# start = timeit.default_timer()\n# result = getHexagonCoordinates(7, 7)\n# end = timeit.default_timer()\n# print(end - start)\n\n# start = timeit.default_timer()\n# result = getHexagonCoordinates(8, 8)\n# end = timeit.default_timer()\n# print(end - start)\n\n# start = timeit.default_timer()\n# result = getHexagonCoordinates(9, 9)\n# end = timeit.default_timer()\n# print(end - start)\n\n# start = timeit.default_timer()\n# result = getHexagonCoord"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "import math\n\ndef get_hexagon_coordinates(num_of_hexagons):\n    hexagon_coordinates = []\n    for row in range(num_of_hexagons):\n        for col in range(num_of_hexagons):\n            if (row % 2 == 0 and col % 2 == 0):\n                hexagon_coordinates.append([row, col])\n    return hexagon_coordinates\n\ndef get_hexagon_coordinates_list(num_of_hexagons):\n    hexagon_coordinates_list = []\n    for row in range(num_of_hexagons):\n        for col in range(num_of_hexagons):\n            if (row % 2 == 0 and col % 2 == 0):\n                hexagon_coordinates_list.append([row, col])\n    return hexagon_coordinates_list\n\ndef get_hexagon_coordinates_list_with_odd_number_of_hexagons(num_of_hexagons):\n    hexagon_coordinates_list = []\n    for row in range(num_of_hexagons):\n        for col in range(num_of_hexagons):\n            if (row % 2 == 0 and col % 2 == 0):\n                hexagon_coordinates_list.append([row, col])\n    hexagon_coordinates_list_with_odd_number_of_hexagons = []\n    for row in range(num_of_hexagons):\n        for col in range(num_of_hexagons):\n            if (row % 2 == 0 and col % 2 == 0):\n                hexagon_coordinates_list_with_odd_number_of_hexagons.append([row, col])\n    return hexagon_coordinates_list_with_odd_number_of_hexagons\n\ndef get_hexagon_coordinates_with_odd_number_of_hexagons(num_of_hexagons):\n    hexagon_coordinates_list = []\n    for row in range(num_of_hexagons):\n        for col in range(num_of_hexagons):\n            if (row % 2 == 0 and col % 2 == 0):\n                hexagon_coordinates_list.append([row, col"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from math import ceil\nimport numpy as np\n\ndef get_hexagon_coordinates(num_of_hexagons):\n    \"\"\"\n    :param num_of_hexagons: number of hexagons\n    :return: list of lists of coordinates of hexagons\n    \"\"\"\n    x = np.array([[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]])\n    y = np.array([[0, 0], [1, 0], [1, 1], [2, 1], [2, 2], [0, 2]])\n    return [[x[i], y[i]] for i in range(0, num_of_hexagons)]\n\ndef get_hexagon_coordinates_of_even_size(num_of_hexagons):\n    \"\"\"\n    :param num_of_hexagons: number of hexagons\n    :return: list of lists of coordinates of hexagons\n    \"\"\"\n    x = np.array([[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]])\n    y = np.array([[0, 0], [1, 0], [1, 1], [2, 1], [2, 2], [0, 2]])\n    even_size = ceil(num_of_hexagons / 2)\n    return [[x[i], y[i]] for i in range(0, even_size)]\n\ndef get_hexagon_coordinates_of_odd_size(num_of_hexagons):\n    \"\"\"\n    :param num_of_hexagons: number of hexagons\n    :return: list of lists of coordinates of hexagons\n    \"\"\"\n    x = np.array([[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]])\n    y = np.array([[0, 0], [1, 0], [1, 1], [2, 1], [2, 2], [0, 2]])\n    odd_size = ceil(num_of_hexagons / 2) - 1\n    return [[x[i], y[i"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def calculate_hexagon_coordinates(size):\n    \"\"\"\n    :param size: the size of the grid\n    :return: a list of lists of x, y point coordinates\n    \"\"\"\n\n    # the list of tuples containing x and y coordinates for the grid\n    grid_coordinates = []\n\n    # the list of lists containing 6 tuples of x, y point coordinates\n    hexagon_coordinates = [[[0, 1], [1, 0], [0, -1], [-1, 0], [0, 1], [1, 0]],\n                           [[0, 2], [2, 0], [0, -2], [-2, 0], [0, 2], [2, 0]],\n                           [[0, 3], [3, 0], [0, -3], [-3, 0], [0, 3], [3, 0]],\n                           [[0, 4], [4, 0], [0, -4], [-4, 0], [0, 4], [4, 0]],\n                           [[0, 5], [5, 0], [0, -5], [-5, 0], [0, 5], [5, 0]],\n                           [[0, 6], [6, 0], [0, -6], [-6, 0], [0, 6], [6, 0]]]\n\n    # the number of hexagons in the grid\n    num_hexagons = len(hexagon_coordinates)\n\n    # the number of points in the grid\n    num_points = int(size ** 0.5)\n\n    # the number of points to be generated per hexagon\n    num_points_per_hexagon = num_points / num_hexagons\n\n    # the total number of points in the grid\n    total_num_points = num_points * num_hexagons\n\n    # the list of lists containing 6 tuples of x, y point coordinates\n    grid_coordinates.append(hexagon_coordinates[0])\n\n    for i in range(1, num_hexagons):\n        # the list of lists containing 6 tuples of x, y point coordinates\n        grid_coordinates.append([])\n\n        for j in range(num_points_per_hexagon):\n            x = (i - 1) * num_points_per_"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def hexagon(x, y):\n    return [[x, y, x + 1, y + 1, x + 1, y], [x, y, x - 1, y + 1, x - 1, y], [x, y, x - 1, y - 1, x - 1, y - 1], [x, y, x + 1, y - 1, x + 1, y - 1], [x, y, x + 1, y + 1, x + 1, y], [x, y, x - 1, y - 1, x - 1, y - 1]]\n\n# Test case 1\nx = 1\ny = 1\nprint(hexagon(x, y))\n\n# Test case 2\nx = 1\ny = 3\nprint(hexagon(x, y))\n\n# Test case 3\nx = 3\ny = 1\nprint(hexagon(x, y))\n\n# Test case 4\nx = 2\ny = 4\nprint(hexagon(x, y))\n\n# Test case 5\nx = 2\ny = 5\nprint(hexagon(x, y))\n\n# Test case 6\nx = 3\ny = 4\nprint(hexagon(x, y))\n\n# Test case 7\nx = 3\ny = 5\nprint(hexagon(x, y))\n\n# Test case 8\nx = 4\ny = 3\nprint(hexagon(x, y))\n\n# Test case 9\nx = 4\ny = 4\nprint(hexagon(x, y))\n\n# Test case 10\nx = 4\ny = 5\nprint(hexagon(x, y))\n\n# Test case 11\nx = 5\ny = 3\nprint(hexagon(x, y))\n\n# Test case 12\nx = 5\ny = 4\nprint(hexagon(x, y))\n\n# Test case 13\nx = 5\ny = 5\nprint(hexagon(x, y))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import math\n\ndef hexagon_coordinates(num_points, radius):\n    \"\"\"\n    :type num_points: int\n    :type radius: int\n    :rtype: List[List[int]]\n    \"\"\"\n    points = [[0, 0], [radius, 0], [radius, radius], [0, radius], [0, 0]]\n    triangle = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, 0], [0, radius]]\n    triangles = [[0, 0], [radius, 0], [0, -radius]]\n    triangles = [[0, 0], [radius, radius], [0, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, 0], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius, radius], [radius, -radius]]\n    triangles = [[0, 0], [radius"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def generate_grid(row, col):\n    return [[(x, y) for y in range(row)] for x in range(col)]\n\ndef calculate_grid(row, col):\n    grid = generate_grid(row, col)\n    return [[x, y] for row in grid for x, y in row]\n\ndef test_grid():\n    grid = calculate_grid(4, 3)\n    assert grid == [[(0, 0), (0, 2), (2, 0), (2, 2)], [(0, 1), (0, 3), (2, 1), (2, 3)], [(1, 0), (1, 2), (3, 0), (3, 2)], [(1, 1), (1, 3), (3, 1), (3, 3)]]\n\ndef test_grid_2():\n    grid = calculate_grid(5, 3)\n    assert grid == [[(0, 0), (0, 2), (2, 0), (2, 2)], [(0, 1), (0, 3), (2, 1), (2, 3)], [(1, 0), (1, 2), (3, 0), (3, 2)], [(1, 1), (1, 3), (3, 1), (3, 3)], [(2, 0), (2, 2), (4, 0), (4, 2)], [(2, 1), (2, 3), (4, 1), (4, 3)]]\n\ndef test_grid_3():\n    grid = calculate_grid(5, 4)\n    assert grid == [[(0, 0), (0, 2), (2, 0), (2, 2)], [(0, 1), (0, 3), (2, 1), (2, 3)], [(1, 0), (1, 2), (3, 0), (3, 2)], [(1, 1), (1, 3), (3, 1), (3, 3)], [(2, 0), (2, 2), (4, 0), (4, 2)], [(2, 1), (2, 3), (4, 1), (4, 3)]]\n\ndef test_grid_4():\n    grid = calculate_grid(5, 5)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def get_hexagon(x, y, side):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :type side: int\n    :rtype: List[List[int]]\n    \"\"\"\n    hexagon = []\n\n    for i in range(side):\n        for j in range(side):\n            if i == 0:\n                hexagon.append([x + j * side, y + i * side])\n            elif i == side - 1:\n                hexagon.append([x + j * side, y + side - i])\n            elif j == 0:\n                hexagon.append([x + i * side, y + j * side])\n            elif j == side - 1:\n                hexagon.append([x + i * side, y + side - j])\n\n    return hexagon\n\ndef get_hexagon_grid(side):\n    \"\"\"\n    :type side: int\n    :rtype: List[List[List[int]]]\n    \"\"\"\n    hexagon_grid = []\n    for i in range(side):\n        hexagon_grid.append([])\n        for j in range(side):\n            hexagon_grid[i].append(get_hexagon(i, j, side))\n\n    return hexagon_grid\n\n\ndef test_get_hexagon():\n    assert get_hexagon(0, 0, 1) == [[0, 0]]\n    assert get_hexagon(1, 0, 1) == [[0, 1]]\n    assert get_hexagon(2, 0, 1) == [[0, 2]]\n    assert get_hexagon(3, 0, 1) == [[1, 0]]\n    assert get_hexagon(4, 0, 1) == [[1, 1]]\n    assert get_hexagon(5, 0, 1) == [[1, 2]]\n    assert get_hexagon(6, 0, 1) == [[2, 0]]\n    assert get_hexagon(7, 0, 1) == [[2, 1]]\n    assert get_hexagon(8, 0, 1) == [[2, 2]]\n\ndef test_get_hexagon_grid():\n    assert get_hexagon_grid(1) =="
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Write your code here\n\ndef get_hexagon_coords(num_of_hexagon):\n    \"\"\"\n    :param num_of_hexagon:\n    :return:\n    \"\"\"\n    return [[(x + 1) * 2, y * 3] for x in range(num_of_hexagon) for y in range(num_of_hexagon)]\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_hexagon_coords(2) == [[1, 1], [1, 2], [2, 1], [2, 2], [3, 1], [3, 2], [4, 1], [4, 2], [5, 1], [5, 2], [6, 1], [6, 2], [7, 1], [7, 2], [8, 1], [8, 2], [9, 1], [9, 2], [10, 1], [10, 2], [11, 1], [11, 2], [12, 1], [12, 2], [13, 1], [13, 2], [14, 1], [14, 2], [15, 1], [15, 2], [16, 1], [16, 2], [17, 1], [17, 2], [18, 1], [18, 2], [19, 1], [19, 2], [20, 1], [20, 2], [21, 1], [21, 2], [22, 1], [22, 2], [23, 1], [23, 2], [24, 1], [24, 2], [25, 1], [25, 2], [26, 1], [26, 2], [27, 1], [27, 2], [28, 1], [28, 2], [29, 1], [29, 2], [30, 1], [30, 2], [31, 1], [31, 2], [32, 1], [32, 2], [33, 1], [33, 2], [34, 1], [34, 2], [35, 1], [35, 2], [36, 1], [36, 2], [37, 1], [37, 2], [38, 1], [38, 2"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def coordinates(x, y):\n    # return [(x, y), (x, y+1), (x+1, y), (x+1, y+1), (x, y+2), (x+1, y+2)]\n    return [[(x, y), (x+1, y), (x+1, y+1)], [(x, y), (x+1, y), (x+1, y+1)], [(x, y+1), (x+1, y+1), (x+1, y+2)]]\n\ndef coordinates_with_radius(x, y, radius):\n    # return [(x, y), (x+1, y), (x+1, y+1), (x, y+1), (x+1, y+1), (x+1, y+2)]\n    return [[(x, y), (x+1, y), (x+1, y+1)], [(x, y), (x+1, y), (x+1, y+1)], [(x, y+1), (x+1, y+1), (x+1, y+2)]]\n\ndef hexagon_coordinates(radius):\n    x_range = range(0, radius * 2 + 1)\n    y_range = range(0, radius * 2 + 1)\n    # print(x_range)\n    # print(y_range)\n    coordinates = []\n    for x in x_range:\n        for y in y_range:\n            coordinates.append(coordinates_with_radius(x, y, radius))\n    return coordinates\n\nif __name__ == '__main__':\n    print(coordinates(2, 2))\n    print(coordinates(3, 3))\n    print(coordinates(2, 4))\n    print(coordinates(3, 4))\n    print(coordinates(4, 2))\n    print(coordinates(4, 3))\n    print(coordinates(4, 4))\n    print(coordinates_with_radius(3, 3, 3))\n    print(coordinates_with_radius(3, 3, 4))\n    print(coordinates_with_radius("
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def hexagon(x, y, radius, n):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :type radius: int\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    if radius == 0:\n        return [[x, y]]\n    if radius == 1:\n        return [[x, y], [x, y + 1], [x + 1, y], [x + 1, y + 1], [x, y + 2], [x + 1, y + 2], [x + 2, y + 1], [x + 2, y]]\n    if radius == 2:\n        return [[x, y], [x + 1, y], [x + 1, y + 1], [x, y + 1], [x + 2, y], [x + 2, y + 1], [x + 1, y + 2], [x, y + 2], [x + 2, y + 2]]\n    if radius == 3:\n        return [[x, y], [x + 1, y], [x + 1, y + 1], [x, y + 1], [x + 2, y], [x + 2, y + 1], [x + 1, y + 2], [x, y + 2], [x + 2, y + 2]]\n    if radius == 4:\n        return [[x, y], [x, y + 1], [x + 1, y + 1], [x + 1, y], [x + 2, y + 1], [x + 2, y], [x + 1, y + 2], [x, y + 2], [x + 2, y + 2]]\n    if radius == 5:\n        return [[x, y], [x + 1, y], [x + 1, y + 1], [x + 2, y], [x + 2, y + 1], [x + 1, y + 2], [x, y + 2], [x + 2, y + 2]]\n    if radius == 6:\n        return [[x, y], [x + 1, y + 1], [x + 1, y + 2], [x + 2, y + 1], [x + 2, y + 2], [x + 1, y + 3"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def generate_hexagon(n):\n    \"\"\"\n    Generate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    \"\"\"\n    hexagons = []\n    for i in range(0, n):\n        for j in range(0, n):\n            x = i / (n - 1.0)\n            y = j / (n - 1.0)\n            hexagons.append([x, y])\n    return hexagons\n\ndef get_hexagon_coords(hexagon_grid):\n    \"\"\"\n    Get the coordinates of the hexagon grid.\n    \"\"\"\n    coords = []\n    for i in range(0, len(hexagon_grid)):\n        for j in range(0, len(hexagon_grid[i])):\n            coords.append(hexagon_grid[i][j])\n    return coords\n\ndef get_hexagon_coords_list(hexagon_grid):\n    \"\"\"\n    Get the coordinates of the hexagon grid.\n    \"\"\"\n    coords_list = []\n    for i in range(0, len(hexagon_grid)):\n        for j in range(0, len(hexagon_grid[i])):\n            coords_list.append(hexagon_grid[i][j])\n    return coords_list\n\ndef get_hexagon_area(hexagon_grid):\n    \"\"\"\n    Get the area of the hexagon grid.\n    \"\"\"\n    area = 0\n    for i in range(0, len(hexagon_grid)):\n        for j in range(0, len(hexagon_grid[i])):\n            area += (hexagon_grid[i][j][0] * hexagon_grid[i][j][1])\n    return area\n\ndef get_hexagon_area_list(hexagon_grid):\n    \"\"\"\n    Get the area of the hexagon grid.\n    \"\"\"\n    area_list = []\n    for i in range(0, len(hexagon_grid)):\n        for j in range(0, len(hexagon_grid[i])):\n            area_list.append((hexagon_grid[i][j]["
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def hexagon_grid(radius):\n    \"\"\"\n    Input:\n        radius: int, radius of a hexagon\n\n    Output:\n        list of lists of points in hexagon\n    \"\"\"\n    x = []\n    y = []\n\n    # calculate points for hexagon\n    for i in range(0, 6):\n        x.append(radius * math.sin(2 * math.pi * i / 6))\n        y.append(radius * math.cos(2 * math.pi * i / 6))\n\n    return x, y\n\n\n# Test cases\nprint(\"Test 1:\")\nx, y = hexagon_grid(1)\nprint(\"x:\", x)\nprint(\"y:\", y)\n\nprint(\"Test 2:\")\nx, y = hexagon_grid(2)\nprint(\"x:\", x)\nprint(\"y:\", y)\n\nprint(\"Test 3:\")\nx, y = hexagon_grid(3)\nprint(\"x:\", x)\nprint(\"y:\", y)\n\nprint(\"Test 4:\")\nx, y = hexagon_grid(4)\nprint(\"x:\", x)\nprint(\"y:\", y)\n\nprint(\"Test 5:\")\nx, y = hexagon_grid(5)\nprint(\"x:\", x)\nprint(\"y:\", y)\n\nprint(\"Test 6:\")\nx, y = hexagon_grid(6)\nprint(\"x:\", x)\nprint(\"y:\", y)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "import math\nimport itertools\n\ndef grid(radius):\n    \"\"\"\n    Calculate the coordinates of a grid of hexagon points.\n\n    Inputs:\n        radius (int): The radius of the hexagon.\n\n    Returns:\n        list: A list of lists containing hexagon coordinates.\n    \"\"\"\n    # Create a list of all hexagon points.\n    hexagon_points = [\n        (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0),\n        (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1),\n        (0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2),\n        (0, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3),\n        (0, 4), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4),\n        (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5),\n    ]\n    # Calculate the coordinates of the points in a hexagon.\n    hexagon_points_x = [\n        (x, 0) for x in range(0, 6)\n    ]\n    hexagon_points_y = [\n        (0, y) for y in range(0, 6)\n    ]\n    # Create a list of lists of coordinates of hexagon points.\n    hexagon_coordinates = []\n    for x in range(0, 6):\n        for y in range(0, 6):\n            # Calculate the coordinates of the hexagon point.\n            point_x = hexagon_points_x[x]\n            point_y = hexagon_points_y[y]\n            # Calculate the coordinates of the hexagon point in a hexagon.\n            hexagon_point_x = math.cos(math.radians(x * 90)) * radius\n            hexagon_point_y = math.sin(math.radians(y * 90)) *"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def get_hexagon_coordinates(height, width):\n    \"\"\"\n    :param height: Height of grid\n    :param width: Width of grid\n    :return: list of lists of coordinates\n    \"\"\"\n    return [[(x * width, y * height) for y in range(0, height)] for x in range(0, width)]\n\n\ndef check_coordinates(coordinates):\n    \"\"\"\n    :param coordinates: coordinates to check\n    :return: True if coordinates are valid\n    \"\"\"\n    for i in range(0, len(coordinates)):\n        if (coordinates[i][0] < 0 or coordinates[i][0] >= len(coordinates[0])):\n            return False\n        if (coordinates[i][1] < 0 or coordinates[i][1] >= len(coordinates[0][0])):\n            return False\n    return True\n\ndef test_coordinates(coordinates):\n    for i in range(0, len(coordinates)):\n        if (coordinates[i][0] < 0 or coordinates[i][0] >= len(coordinates[0])):\n            return False\n        if (coordinates[i][1] < 0 or coordinates[i][1] >= len(coordinates[0][0])):\n            return False\n    return True\n\ndef check_coordinates_validity(coordinates):\n    \"\"\"\n    :param coordinates: coordinates to check\n    :return: True if coordinates are valid\n    \"\"\"\n    for i in range(0, len(coordinates)):\n        if (coordinates[i][0] < 0 or coordinates[i][0] >= len(coordinates[0])):\n            return False\n        if (coordinates[i][1] < 0 or coordinates[i][1] >= len(coordinates[0][0])):\n            return False\n    return True\n\ndef test_coordinates_validity(coordinates):\n    \"\"\"\n    :param coordinates: coordinates to check\n    :return: True if coordinates are valid\n    \"\"\"\n    for i in range(0, len(coordinates)):\n        if (coordinates[i][0] < 0 or coordinates[i][0] >= len(coordinates[0])):\n            return"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def get_hexagon_coordinates(height):\n    \"\"\"\n    Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    :param height:\n    :return:\n    \"\"\"\n    return [\n        [0, 0],\n        [0, height - 1],\n        [height - 1, 0],\n        [height - 1, height - 1],\n        [0, height - 1],\n        [0, 0]\n    ]\n\nif __name__ == \"__main__\":\n    print(get_hexagon_coordinates(6))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Import the required libraries\nimport math\n\n# Function to calculate coordinates of hexagon\ndef coordinates(n):\n    # Create an empty list to store the coordinates of the hexagon\n    coordinates = []\n\n    # Calculate coordinates of hexagon\n    for i in range(0, n):\n        # Calculate x-coordinate\n        x = math.floor(math.sqrt(3) * (n - i) + 1)\n        # Calculate y-coordinate\n        y = math.floor(2 * (n - i) / 3)\n\n        # Append the coordinates to the list\n        coordinates.append((x, y))\n\n    # Return the coordinates of the hexagon\n    return coordinates\n\n# Test the function\ncoordinates(10)\n\n# Output the coordinates of the hexagon\nprint(coordinates)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def hexToGrid(self, hexagonGrid):\n        \"\"\"\n        :type hexagonGrid: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not hexagonGrid:\n            return []\n        \n        max_x = 0\n        max_y = 0\n        for row in hexagonGrid:\n            max_x = max(max_x, len(row))\n            max_y = max(max_y, len(row))\n        \n        return self.hexagonToGrid(hexagonGrid, max_x, max_y)\n    \n    def hexagonToGrid(self, hexagonGrid, max_x, max_y):\n        if not hexagonGrid:\n            return []\n        \n        grid = []\n        for row in hexagonGrid:\n            grid_row = []\n            for i in range(max_x):\n                grid_row.append((i, 0))\n            \n            for j in range(max_y):\n                grid_row.append((0, j))\n            \n            for j in range(max_y):\n                grid_row.append((max_x-1, j))\n            \n            for j in range(max_y):\n                grid_row.append((max_x-1, j))\n            \n            for j in range(max_y):\n                grid_row.append((0, j))\n            \n            for i in range(max_x):\n                grid_row.append((i, max_y-1))\n            \n            for j in range(max_y):\n                grid_row.append((i, max_y-1))\n            \n            for j in range(max_y):\n                grid_row.append((i, 0))\n            \n            grid.append(grid_row)\n        \n        return grid"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def generateHex(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if n == 0:\n            return []\n        result = []\n        for i in range(0, n + 1):\n            result.append([])\n            for j in range(0, n + 1):\n                if i == 0:\n                    result[i].append((j, 0))\n                elif j == 0:\n                    result[i].append((j, n))\n                elif i == n and j == n:\n                    result[i].append((j, 0))\n                else:\n                    result[i].append((j, i))\n        return result\n\n\nif __name__ == \"__main__\":\n    assert Solution().generateHex(0) == []\n    assert Solution().generateHex(1) == [[(0, 0)]]\n    assert Solution().generateHex(2) == [[(0, 0), (0, 1)], [(0, 1), (1, 0)], [(1, 0), (1, 1)]]\n    assert Solution().generateHex(3) == [[(0, 0), (0, 1), (0, 2)], [(0, 1), (1, 0), (1, 1)], [(1, 0), (1, 1), (1, 2)]]\n    assert Solution().generateHex(4) == [[(0, 0), (0, 1), (0, 2), (0, 3)], [(0, 1), (1, 0), (1, 1), (1, 2)], [(1, 0), (1, 1), (1, 2), (1, 3)], [(1, 1), (2, 0), (2, 1), (2, 2)], [(2, 0), (2, 1), (2, 2), (2, 3)]]\n    assert Solution().generateHex(5) == [[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)], [(0, 1), (1, 0), (1, 1), (1, 2), (1, 3"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "import math\n\ndef hexagon(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\n\ndef hexagon_coordinates(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_2(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_3(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_4(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_5(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_6(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_7(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_8(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\n\ndef hexagon_coordinates_9(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\n\ndef hexagon_coordinates_10(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_11(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_12(side_length):\n    return [[i, side_length - i] for i in range(1, side_length)]\n\ndef hexagon_coordinates_13(side_length):\n    return [[i, side"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/hexagons/problem\n\nimport math\n\ndef read_hexagons(n):\n    \"\"\"\n    Reads in a list of hexagon coordinates in the form of [x, y]\n    \"\"\"\n    # Input format is [x1, y1], [x2, y2], [x3, y3],... [xn, yn]\n    hexagons = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        hexagons.append([x, y])\n    return hexagons\n\ndef hexagon_coordinates(n):\n    \"\"\"\n    Calculate the coordinates for each hexagon\n    \"\"\"\n    # Calculate the total number of hexagons\n    total_hexagons = int(math.ceil(math.sqrt(n)))\n\n    # Calculate the number of hexagons in each row\n    hexagon_rows = int(math.ceil(total_hexagons / 2))\n\n    # Calculate the number of hexagons in each column\n    hexagon_columns = hexagon_rows\n\n    # Calculate the number of hexagons in the top row\n    top_row_hexagons = int(math.ceil(total_hexagons / hexagon_columns))\n\n    # Calculate the number of hexagons in the bottom row\n    bottom_row_hexagons = int(math.floor(total_hexagons / hexagon_columns))\n\n    # Calculate the number of hexagons in the left column\n    left_column_hexagons = int(math.ceil(total_hexagons / top_row_hexagons))\n\n    # Calculate the number of hexagons in the right column\n    right_column_hexagons = int(math.floor(total_hexagons / top_row_hexagons))\n\n    # Calculate the coordinates for each hexagon\n    hexagon_coordinates = []\n\n    # Calculate the coordinates for the top row\n    for i in range(top_row_hexagons):\n        hexagon_coordinates.append([i * hexagon_columns, 0])\n\n    # Calculate the coordinates for the bottom row\n    for i in range(bottom_row_hexagons):"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def get_hexagon_coordinates(n):\n    \"\"\"\n    :param n: number of hexagons\n    :return: list of lists of coordinates for hexagon\n    \"\"\"\n    hexagon_coordinates = []\n\n    for i in range(0, n):\n        hexagon_coordinates.append([i * 2 + 1, i * 2 + 2])\n\n        for j in range(0, n):\n            if i!= j:\n                hexagon_coordinates.append([i * 2 + 1, j * 2 + 1])\n                hexagon_coordinates.append([i * 2 + 1, j * 2 + 2])\n                hexagon_coordinates.append([i * 2 + 2, j * 2 + 1])\n                hexagon_coordinates.append([i * 2 + 2, j * 2 + 2])\n\n    return hexagon_coordinates\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_hexagon_coordinates(6) == [[0, 1], [0, 2], [0, 3], [1, 1], [1, 2], [1, 3]], \"Example\"\n    assert get_hexagon_coordinates(4) == [[0, 1], [1, 1], [1, 2], [2, 1]], \"Example\"\n    assert get_hexagon_coordinates(5) == [[0, 1], [1, 1], [1, 2], [1, 3], [2, 1]], \"Example\"\n    assert get_hexagon_coordinates(6) == [[0, 1], [1, 1], [1, 2], [1, 3], [2, 1], [2, 2]], \"Example\""
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "import math\n\ndef get_hexagon_coordinates(x_size, y_size):\n    hexagon_coordinates = [[0, 0], [0, y_size], [x_size, y_size], [x_size, 0], [0, 0]]\n    hexagon_coordinates = [map(int, coords) for coords in hexagon_coordinates]\n    return hexagon_coordinates\n\ndef get_grid_coordinates(hexagon_coordinates, x_size, y_size):\n    grid_coordinates = []\n    for i in range(0, x_size):\n        for j in range(0, y_size):\n            grid_coordinates.append([i, j])\n\n    grid_coordinates = [map(int, coords) for coords in grid_coordinates]\n    return grid_coordinates\n\ndef get_hexagon_points(hexagon_coordinates, x_size, y_size):\n    points = []\n    for i in range(0, x_size):\n        for j in range(0, y_size):\n            points.append(hexagon_coordinates[i][j])\n\n    return points\n\ndef get_grid_points(grid_coordinates, x_size, y_size):\n    points = []\n    for i in range(0, x_size):\n        for j in range(0, y_size):\n            points.append(grid_coordinates[i][j])\n\n    return points\n\ndef get_neighbour_points(grid_coordinates, x_size, y_size):\n    neighbour_points = []\n    for i in range(0, x_size):\n        for j in range(0, y_size):\n            neighbour_points.append([i, j])\n    neighbour_points = [map(int, coords) for coords in neighbour_points]\n    return neighbour_points\n\ndef get_hexagon_neighbour_points(hexagon_coordinates, x_size, y_size):\n    neighbour_points = []\n    for i in range(0, x_size):\n        for j in range(0, y_size):"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import random\n\n\ndef generate_hexagon(side, n):\n    \"\"\"\n    Generate hexagon coordinates.\n    :param side: side length\n    :param n: number of hexagon coordinates\n    :return: list of list of coordinates\n    \"\"\"\n    result = [[(side, side)] for _ in range(n)]\n    for i in range(n):\n        result[i][0] = side * (i / n)\n        result[i][1] = side * (1 + (i % n) / n)\n    return result\n\n\ndef test_generate_hexagon():\n    \"\"\"\n    Test function generate_hexagon.\n    :return: None\n    \"\"\"\n    assert generate_hexagon(3, 2) == [[(1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (9, 3), (10, 3), (11, 3), (12, 3), (13, 3), (14, 3), (15, 3), (16, 3), (17, 3), (18, 3), (19, 3), (20, 3), (21, 3), (22, 3), (23, 3), (24, 3), (25, 3), (26, 3), (27, 3), (28, 3), (29, 3), (30, 3), (31, 3), (32, 3), (33, 3), (34, 3), (35, 3), (36, 3), (37, 3), (38, 3), (39, 3), (40, 3), (41, 3), (42, 3), (43, 3), (44, 3), (45, 3), (46, 3), (47, 3), (48, 3), (49, 3), (50, 3), (51, 3), (52, 3), (53, 3), (54, 3), (55, 3), (56, 3), (57, 3), (58, 3), (59, 3), (60, 3), (61, 3), (62, 3), (63, 3), (64, 3), (65, 3), (66, 3), (67, 3), (68, 3),"
    }
  ]
}