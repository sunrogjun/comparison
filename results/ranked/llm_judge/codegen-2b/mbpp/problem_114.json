{
  "timestamp": "2025-09-14T18:12:37.514087",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 114,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findMaxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        s = s.replace('0', '').replace('1', '')\n        s = [int(x) for x in s]\n        max_diff = 0\n        for i in xrange(len(s)):\n            if s[i] == 0:\n                max_diff = max(max_diff, i - s[i - 1] - 1)\n            else:\n                max_diff = max(max_diff, i - s[i - 1])\n        return max_diff"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        num_zeros = 0\n        num_ones = 0\n        max_diff = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                num_zeros += 1\n            else:\n                num_ones += 1\n            if num_zeros > num_ones:\n                max_diff = max(max_diff, num_zeros - num_ones)\n            elif num_zeros < num_ones:\n                max_diff = max(max_diff, num_ones - num_zeros)\n        return max_diff\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxSubstringDiff(\"110010\")\n    print s.maxSubstringDiff(\"11111111\")\n    print s.maxSubstringDiff(\"1100001\")\n    print s.maxSubstringDiff(\"1\")\n    print s.maxSubstringDiff(\"11\")\n    print s.maxSubstringDiff(\"10011\")\n    print s.maxSubstringDiff(\"111010\")\n    print s.maxSubstringDiff(\"111011\")"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findMaxDifference(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                result = max(result, i - (i & -i))\n            else:\n                result = max(result, i + 1 - (i & -i))\n        return result"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if s[i] == '0' and s[j] == '0':\n                    res = max(res, j - i)\n                elif s[i] == '1' and s[j] == '0':\n                    res = max(res, j - i + 1)\n        return res\n\nif __name__ == \"__main__\":\n    print Solution().maxSubstringDiff(\"1101\")"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import sys\nimport os\n\nsys.path.append(os.path.join(os.path.dirname(__file__), '..'))\nimport lcs\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(lcs.lcs(sys.argv[1]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findMaxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) < 2:\n            return 0\n        count = [0] * (len(s) + 1)\n        for i in range(len(s) + 1):\n            count[i] = 0\n            for j in range(i + 1):\n                if s[j] == '0':\n                    count[i] += 1\n                elif s[j] == '1':\n                    count[i] -= 1\n        return max(count)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return self.maxSubstringDiff_1(s)\n\n    def maxSubstringDiff_1(self, s):\n        l = len(s)\n        if l == 0:\n            return 0\n        ret = 0\n        for i in xrange(l):\n            ret = max(ret, self.count0(s, i, i+1))\n            ret = max(ret, self.count1(s, i, i+1))\n        return ret\n\n    def count0(self, s, start, end):\n        count = 0\n        for i in xrange(start, end):\n            if s[i] == '0':\n                count += 1\n        return count\n\n    def count1(self, s, start, end):\n        count = 0\n        for i in xrange(start, end):\n            if s[i] == '1':\n                count += 1\n        return count\n\nif __name__ == \"__main__\":\n    print Solution().maxSubstringDiff(\"11000111\")"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def maxDiff(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return max([0] + [1] * len(s)) - sum(1 for i in s if i == '0')\n\nif __name__ == '__main__':\n    s = '1101'\n    print(maxDiff(s))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxDiff(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        binary = binary.replace('1', '')\n        binary = binary.replace('0', '')\n        binary = '1' + binary\n        return len(binary) - len(binary.replace('0', ''))\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    binary = '111010111'\n    print sol.maxDiff(binary)\n    binary = '101010101'\n    print sol.maxDiff(binary)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        counts = [0] * 32\n        for i in xrange(len(s)):\n            counts[ord(s[i]) - ord('0')] += 1\n        max_count = 0\n        for i in xrange(len(counts)):\n            if counts[i] > max_count:\n                max_count = counts[i]\n        return max_count"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def findMaxDiff(self, s):\n        count = [0] * len(s)\n        for i in range(len(s)):\n            count[i] = s[i] == \"0\"\n        return max(0, max(map(max, map(max, zip(count, count[1:]) if count[1:] else [0] * (len(count) - 1), count))) - 1)\n\n\nif __name__ == \"__main__\":\n    assert Solution().findMaxDiff(\"11\") == 2\n    assert Solution().findMaxDiff(\"1100\") == 2\n    assert Solution().findMaxDiff(\"1010111\") == 3\n    assert Solution().findMaxDiff
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/max-difference-in-binary-string/problem\n\ndef get_max_difference(s):\n    return max(get_difference(s[:i], s[i:]) for i in range(len(s)))\n\n\ndef get_difference(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            count += 1\n        else:\n            count -= 1\n    return count\n\n\nif __name__ == '__main__':\n    s = input()\n    print(get_max_difference(s))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution:\n    def maxSubstringDiff(self, s: str) -> int:\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        n = len(s)\n        substring = 0\n        for i in range(n):\n            if s[i] == '0':\n                substring += 1\n            else:\n                substring -= 1\n            if substring > 0:\n                return max(substring, self.maxSubstringDiff(s[:i] + '1' + s[i + 1:]))\n        return substring"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import re\nfrom collections import Counter\n\n\nclass Solution:\n    def maxSubstringDiff(self, s: str) -> int:\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        max_diff = 0\n        for i in range(len(s)):\n            cnt = Counter(s[i:])\n            if cnt['0'] == cnt['1']:\n                max_diff = max(max_diff, cnt['1'] - cnt['0'])\n        return max_diff\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.maxSubstringDiff(\"1111\"))\n    print(s.maxSubstringDiff(\"1110\"))\n    print(s.maxSubstringDiff(\"10101\"))\n    print(s.maxSubstringDiff(\"1010\"))\n    print(s.maxSubstringDiff(\"1010\"))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        dp = [0] * (len(s) + 1)\n        for i in xrange(len(s) + 1):\n            dp[i] = i\n        for i in xrange(len(s)):\n            for j in xrange(i + 1, len(s) + 1):\n                if s[i] == '0':\n                    dp[j] = max(dp[j], dp[j - 1] + 1)\n                elif s[i] == '1':\n                    dp[j] = max(dp[j], dp[j - 1] - 1)\n        return dp[len(s) - 1]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maxSubstringDiff(\"1101\")"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from collections import Counter\nfrom collections import defaultdict\n\nclass Solution(object):\n    def maxSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        sub_dict = defaultdict(int)\n        for i in xrange(len(s)):\n            if s[i] == '0':\n                sub_dict[i] += 1\n            else:\n                sub_dict[i] -= 1\n            if sub_dict[i] > 0:\n                return i\n        return 0\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxSubstring('11')"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findMaxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if s == \"0\":\n            return 0\n        if s == \"1\":\n            return 1\n        dp = [1, 1]\n        for i in xrange(len(s)):\n            dp[0] = max(dp[0], dp[1] + 1)\n            dp[1] = max(dp[0], dp[1] + 1)\n            if s[i] == \"0\":\n                dp[1] = max(dp[0], dp[1] + 1)\n            else:\n                dp[0] = max(dp[0], dp[1] + 1)\n        return max(dp)\n\n\nif __name__ == \"__main__\":\n    print Solution().findMaxDiff
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxZeroOne(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i in range(len(binaryString)):\n            if binaryString[i] == '0':\n                ret = max(ret, i - len(binaryString) + 1)\n            elif binaryString[i] == '1':\n                ret = max(ret, i - len(binaryString) + 1)\n        return ret\n\nif __name__ == '__main__':\n    print Solution().maxZeroOne('1011')"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findMaxSubBitOne(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in xrange(len(binaryString)):\n            if binaryString[i] == '1':\n                count += 1\n            else:\n                count -= 1\n        return count\n\nif __name__ == '__main__':\n    binaryString = '1101'\n    binaryString = '1101101'\n    binaryString = '11011011'\n    binaryString = '1111111111'\n    binaryString = '1111111111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '110110111'\n    binaryString = '1101"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param s: A binary string\n    @return: An integer\n    \"\"\"\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in xrange(1, n+1):\n            dp[i] = max(dp[i-1], dp[i-2] + (s[i-1] == '1'))\n        for i in xrange(1, n+1):\n            dp[i] = max(dp[i], dp[i-1] + (s[i-1] == '1'))\n        return dp[n]"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return max(0, max(self.maxDiffForSub(s, 0), self.maxDiffForSub(s, 1)))\n\n    def maxDiffForSub(self, s, pos):\n        if len(s) == 0:\n            return 0\n\n        if pos == len(s):\n            return 1\n\n        max_diff = 0\n        for i in range(pos, len(s)):\n            if s[i] == '1':\n                max_diff = max(max_diff, self.maxDiffForSub(s, i + 1))\n            else:\n                max_diff = max(max_diff, self.maxDiffForSub(s, i + 1) + 1)\n\n        return max_diff\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxDiff('110010')\n    print s.maxDiff('111011')\n    print s.maxDiff('111011')\n    print s.maxDiff('111011')"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "from collections import deque\n\ndef max_substring_diff(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    if not binary_string:\n        return 0\n    if len(binary_string) == 1:\n        return 1 if binary_string[0] == '1' else 0\n    diffs = [0] * len(binary_string)\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            for j in range(i, len(binary_string)):\n                diffs[j] = max(diffs[j], i - j)\n    return max(diffs)\n\n\nif __name__ == '__main__':\n    binary_string = '111000111'\n    binary_string = '1'\n    binary_string = '1110101'\n    binary_string = '11101010'\n    binary_string = '111010101'\n    binary_string = '101001101'\n    binary_string = '0110001'\n    binary_string = '001110101'\n    binary_string = '011110010'\n    binary_string = '111010111'\n    binary_string = '011010101'\n    binary_string = '011010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in xrange(len(s)):\n            if s[i] == '0':\n                count += 1\n            elif s[i] == '1':\n                count -= 1\n        return max(0, count)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maxDiff(\"1101\")"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findMaxDifference(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                result = max(result, i - i)\n            else:\n                result = max(result, i)\n        return result"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in xrange(len(s)):\n            if s[i] == '0':\n                result = max(result, i)\n            else:\n                result = max(result, i - 1)\n        return result"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return max(self.maxSubstringDiffHelper(s, 0, 0), self.maxSubstringDiffHelper(s, 1, 0))\n\n    def maxSubstringDiffHelper(self, s, c, i):\n        \"\"\"\n        :type s: str\n        :type c: int\n        :type i: int\n        :rtype: int\n        \"\"\"\n        if i == len(s):\n            return 0\n        if s[i] == '1':\n            return max(self.maxSubstringDiffHelper(s, c + 1, i + 1), self.maxSubstringDiffHelper(s, c + 1, i))\n        else:\n            return max(self.maxSubstringDiffHelper(s, c, i + 1), self.maxSubstringDiffHelper(s, c, i))\n\nif __name__ == '__main__':\n    print(Solution().maxSubstringDiff('11'))\n    print(Solution().maxSubstringDiff('1101'))\n    print(Solution().maxSubstringDiff('1010101'))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n        s = s.strip('0')\n        ans = 0\n        for i in xrange(len(s)):\n            if s[i] == '1':\n                ans = max(ans, i - s.rfind('0'))\n            else:\n                ans = max(ans, len(s) - s.rfind('1'))\n        return ans\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxSubstringDiff
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def maxZeroOneSubstring(self, s):\n        num_zero = 0\n        num_one = 0\n        for i in xrange(len(s)):\n            if s[i] == '0':\n                num_zero += 1\n            else:\n                num_one += 1\n            if num_zero > num_one:\n                return num_zero\n            if num_one > num_zero:\n                return num_one\n        return max(num_zero, num_one)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxZeroOneSubstring('11')\n    print s.maxZeroOneSubstring('1011')\n    print s.maxZeroOneSubstring('10001')\n    print s.maxZeroOneSubstring('1010')\n    print s.maxZeroOneSubstring('111001010')\n    print s.maxZeroOneSubstring
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxDiff(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        return max(sum(1 for c in binary if c == '0'), sum(1 for c in binary if c == '1'))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nclass Solution:\n    # @param {string} s\n    # @return {integer}\n    def maxSubstringDiff(self, s):\n        diff = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                diff = max(diff, len(s) - i)\n            elif s[i] == '1':\n                diff = max(diff, i)\n        return diff\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maxSubstringDiff(\"1010\")\n    print s.maxSubstringDiff(\"10101\")\n    print s.maxSubstringDiff(\"1101\")"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findMaxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return max(self.findMaxDiff1(s), self.findMaxDiff2(s))\n\n    def findMaxDiff1(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        l = len(s)\n        max_diff = 0\n        for i in range(l):\n            if s[i] == '0':\n                max_diff = max(max_diff, i - l + 1)\n            elif s[i] == '1':\n                max_diff = max(max_diff, i - 1)\n        return max_diff\n\n    def findMaxDiff2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        l = len(s)\n        max_diff = 0\n        for i in range(l):\n            if s[i] == '0':\n                max_diff = max(max_diff, i - l + 1)\n                max_diff = max(max_diff, i - l + 2)\n            elif s[i] == '1':\n                max_diff = max(max_diff, i - 1)\n            max_diff = max(max_diff, i - 1)\n        return max_diff\n\na = Solution()\nprint a.findMaxDiff(\"1101\")\nprint a.findMaxDiff(\"11101\")\nprint a.findMaxDiff(\"111011111\")"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        m = len(s)\n        if m == 0:\n            return 0\n        p = [0] * m\n        for i in xrange(m):\n            p[i] = 1\n            for j in xrange(i+1, m):\n                if s[j] == '0':\n                    p[j] = 1\n                else:\n                    p[j] = p[j-1] + 1\n            for j in xrange(i+1, m):\n                if s[j] == '1':\n                    p[j] = max(p[j], p[j-1] + 1)\n        return max(p)\n\n\nif __name__ == '__main__':\n    print Solution().maxSubstringDiff('101')\n    print Solution().maxSubstringDiff('11')\n    print Solution().maxSubstringDiff('1101')"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def maxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = [0] * (len(s) + 1)\n        for i in xrange(len(s)):\n            for j in xrange(i, len(s)):\n                if s[i] == '1' and s[j] == '0':\n                    count[j] += 1\n                elif s[i] == '1' and s[j] == '1':\n                    count[j] -= 1\n        return max(max(count[i] for i in xrange(len(s))), max(count[i] for i in xrange(len(s) - 1)))\n\n\nif __name__ == '__main__':\n    print Solution().maxDiff('1011')\n    print Solution().maxDiff('0101')\n    print Solution().maxDiff('1101')\n    print Solution().maxDiff('10011')\n    print Solution().maxDiff('0110011')\n    print Solution().maxDiff('1101101')"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def findMaximumDifference(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return self.maxDiff(num)\n\n    def maxDiff(self, num):\n        n = len(num)\n        res = 0\n        for i in range(1, n+1):\n            if num[i-1] == '0':\n                res = max(res, i-n)\n            elif num[i-1] == '1':\n                res = max(res, n-i)\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findMaximumDifference(\"110010\")\n    print s.findMaximumDifference(\"110101\")\n    print s.findMaximumDifference(\"11010111\")"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def max_diff_sub_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return max(sum([1 for x in s if x == '0']) - sum([1 for x in s if x == '1']), 0)\n\nprint(max_diff_sub_string(\"10011\"))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        return max(self.maxSubstringDiff(s[:i] + s[i+1:]), self.maxSubstringDiff(s[:i] + \"0\" + s[i+1:]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return an integer\n    def maxSubStringDiff(self, s):\n        if len(s) == 0:\n            return 0\n        max_diff = 0\n        max_index = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                if max_index == 0:\n                    max_index = i\n                else:\n                    max_diff = max(max_diff, i - max_index)\n            elif s[i] == '1':\n                if max_index == 0:\n                    max_index = i\n                else:\n                    max_diff = max(max_diff, i - max_index)\n        return max_diff\n\nif __name__ == '__main__':\n    print Solution().maxSubStringDiff('000011101')"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def max_substring_diff(string):\n    # write your code here\n    string = list(string)\n    length = len(string)\n    \n    diffs = [0]*(length+1)\n    for i in range(length+1):\n        diffs[i] = 0\n        \n    for i in range(1, length+1):\n        for j in range(0, length-i+1):\n            if string[j:j+i] == \"1\":\n                diffs[j] = max(diffs[j], i-1)\n    return diffs[0]"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import string\nimport sys\n\ndef get_max_diff(s):\n    max_diff = 0\n    for i in range(0, len(s)):\n        if s[i] == '0':\n            max_diff = max(max_diff, len(string.join(s[:i], '0')) - 1)\n        elif s[i] == '1':\n            max_diff = max(max_diff, len(string.join(s[:i], '1')) - 1)\n    return max_diff\n\nif __name__ == \"__main__\":\n    s = sys.stdin.readline()\n    print get_max_diff(s)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import sys\nimport math\nimport operator\n\ndef find_max_diff(s):\n    max_diff = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            for j in range(i+1, len(s)):\n                if s[j] == '1':\n                    max_diff = max(max_diff, i-j)\n                    break\n    return max_diff\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print find_max_diff(s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def maxSubstringDiff(self, s):\n        diff = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                diff = max(diff, i-len(s))\n            elif s[i] == '1':\n                diff = max(diff, len(s)-i)\n        return diff"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from collections import Counter\nfrom string import ascii_lowercase\n\n\ndef max_substring_diff(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    binary_string = \"1\" + binary_string + \"0\"\n    diff = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == \"1\":\n            count = Counter(binary_string[i:])\n            if count[0] > 1:\n                diff += count[0] - 1\n        if binary_string[i] == \"0\":\n            diff += count[0]\n    return diff\n\n\nif __name__ == \"__main__\":\n    binary_string = \"0100101\"\n    print(max_substring_diff(binary_string))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import sys\n\ndef max_substring_difference(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    return sum(1 for x in binary_string if x == '1') - sum(1 for x in binary_string if x == '0')\n\n\nif __name__ == \"__main__\":\n    binary_string = sys.stdin.readline().strip()\n    print(max_substring_difference(binary_string))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def findMaxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return max(sum([1 for char in s if char == '0']) - sum([1 for char in s if char == '1']) + 1, 0)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findMaxDiff('110111101010111')"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import sys\n\ndef findMaxDiff(b):\n    # 1. Find the number of 1s in the binary string.\n    # 2. Find the number of 0s in the binary string.\n    # 3. Find the number of 1s and 0s in the binary string.\n    num1s = sum(map(int, b.replace('0', '1')))\n    num0s = sum(map(int, b.replace('1', '0')))\n    num1s0s = num1s + num0s\n    return num1s0s\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage:./{} <binary string>\".format(sys.argv[0]))\n        sys.exit()\n    \n    b = sys.argv[1]\n    print(findMaxDiff(b))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import string\n\ndef findMaxDiff(s):\n    counts = [0] * 256\n    for c in s:\n        counts[ord(c)] += 1\n\n    return max(map(lambda c: abs(ord(c) - counts[ord(c)]), string.lowercase))\n\nprint findMaxDiff('1011')"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import sys\n\ndef main():\n    print max_substring_diff(sys.argv[1])\n\ndef max_substring_diff(s):\n    sub_string_count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            sub_string_count += 1\n        else:\n            sub_string_count -= 1\n    return sub_string_count\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string} binaryString\n    # @return {integer}\n    def maxDiff(self, binaryString):\n        diff = 0\n        for i in range(0, len(binaryString)):\n            if binaryString[i] == '0':\n                diff = max(diff, i - self.numOfZeros(binaryString, i))\n            elif binaryString[i] == '1':\n                diff = max(diff, self.numOfZeros(binaryString, i) - i)\n        return diff\n    \n    def numOfZeros(self, binaryString, i):\n        count = 0\n        while i >= 0 and binaryString[i] == '0':\n            count += 1\n            i -= 1\n        return count"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import sys\nimport operator\nimport itertools\n\ndef find_max_diff(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    return max(max(itertools.starmap(int, itertools.product(*[1 if x == \"0\" else 0 for x in binary_string]))), max(itertools.starmap(int, itertools.product(*[0 if x == \"1\" else 0 for x in binary_string]))))\n\nif __name__ == \"__main__\":\n    with open(sys.argv[1], 'r') as f:\n        binary_string = f.read()\n\n    print find_max_diff(binary_string)"
    },
    {
      "rank": 50,
      "score": 3.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        s = s.upper()\n        if s[0] == '0':\n            return 1\n        if s[0] == '1':\n            return 0\n        max_sub_string_diff = 0\n        for i in range(1, len(s)):\n            if s[i] == '1':\n                if max_sub_string_diff < len(s) - i:\n                    max_sub_string_diff = len(s) - i\n            elif s[i] == '0':\n                max_sub_string_diff = max(max_sub_string_diff, len(s) - i)\n        return max_sub_string_diff\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/max-substring-difference/solution/\n#\nApproach 1: Two Pointers\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the string s.\nSpace Complexity: O(1)\n\n# 7ms 100%\nclass Solution {\n    public int maxSubstringDiff(String s) {\n        int ans = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            int j = i;\n            while (j < n && s.charAt(j) == s.charAt(j - 1)) j++;\n            ans = Math.max(ans, j - i);\n        }\n        return ans;\n    }\n}\n\nApproach 2: DP\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the string s.\nSpace Complexity: O(1)\n\n# 7ms 100%\nclass Solution {\n    public int"
    },
    {
      "rank": 51,
      "score": 3.0,
      "candidate": "import sys\nimport unittest\nimport collections\n\nclass Solution(object):\n    def findMaxSubArray(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        n = len(s)\n        max_d = 0\n        dp = [0] * (n + 1)\n        for i in range(n):\n            dp[i+1] = dp[i] + 1 if s[i] == '1' else 0\n            max_d = max(max_d, dp[i+1])\n        return max_d\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/maximum-subarray-sum/solution/\n\n# Approach 1: Dynamic Programming\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(N)\n# https://discuss.leetcode.com/topic/25983/java-o-n-o-1-space-o-1-time\n\n# Approach 2: DP\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(N)\n# https://discuss.leetcode.com/topic/25983/java-o-n-o-1-space-o-1-time\n\n# Approach 3: DP + Sliding Window\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(N)\n# https://discuss.leetcode.com/topic/25983/java-o-n-o-1-space-o-1-time\n\n# Approach 4: Dynamic Programming + Sliding Window\n# Complexity Analysis\n# Time Complexity: O(N)\n# Space Complexity: O(N)\n# https://discuss.leetcode.com/topic/25983/java-o-n-o-1-space-o"
    },
    {
      "rank": 52,
      "score": 3.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def maxZeroOneSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        max_diff = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                max_diff = max(max_diff, len(s) - i)\n            elif s[i] == '1':\n                max_diff = max(max_diff, i - len(s) + 1)\n        return max_diff\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/maximum-zero-one-substring/solution/\n\n# 2ms 100%\nclass Solution {\n    public int maxZeroOneSubstring(String s) {\n        int result = 0;\n        int i = 0;\n        int j = 0;\n        while (i < s.length() && j < s.length()) {\n            if (s.charAt(i) == '0') {\n                while (j < s.length() && s.charAt(j)!= '0') j++;\n                result = Math.max(result, j - i);\n            } else {\n                while (j < s.length() && s.charAt(j) == '1') j++;\n                result = Math.max(result, i - j);\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}\n'''"
    },
    {
      "rank": 53,
      "score": 3.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        diff = 0\n        for i in range(len(s)):\n            diff = max(diff, 1)\n            if s[i] == '0':\n                diff = max(diff, 1)\n            else:\n                diff = max(diff, 0)\n        return diff\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/maximum-substring-with-one-bit-difference/solution/\n#\nApproach #1: Brute Force [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the string.\nSpace Complexity: O(1), the space required for the output.\n\n# 5ms 100%\nclass Solution {\n    public int maxSubstringDiff(String s) {\n        int maxDiff = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '0') {\n                maxDiff = Math.max(maxDiff, 1);\n            } else {\n                maxDiff = Math.max(maxDiff, 0);\n            }\n            if (i > 0) {\n                maxDiff = Math.max(maxDiff, 1);\n            }\n        }\n        return maxDiff;\n    }\n}\n\n# 7ms 100%\nclass Solution {\n    public int maxSubstringDiff(String s) {\n        int[] dp = new int[s.length() + 1];\n        dp[0] = 0;\n        for (int i = 1; i < dp.length; i++) {\n            dp[i] = dp[i - 1] + (i == 1 || s.charAt(i - 2) == '0')? 1 : 0;\n        }\n        int max"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return self.maxSubstringDiff1(s)\n\n    def maxSubstringDiff1(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        counts = {0: 0, 1: 0}\n        for i in xrange(len(s)):\n            if s[i] == '1':\n                counts[1] += 1\n            else:\n                counts[0] += 1\n        diff = 0\n        for i in counts:\n            diff = max(diff, counts[i])\n        return diff"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def maxZeroOneDiff(self, s):\n        if s == \"0\":\n            return 0\n        elif s == \"1\":\n            return 1\n        else:\n            count = 0\n            for i in xrange(len(s)):\n                if s[i] == \"1\":\n                    count += 1\n                else:\n                    count -= 1\n                if count < 0:\n                    return i\n            return len(s)"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def findMaxSubstring(self, s):\n        dp = [[0] * len(s) for i in range(len(s))]\n        for i in range(len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if s[i] == s[j] and dp[i][j - i] < dp[i + 1][j]:\n                    dp[i][j] = dp[i + 1][j]\n                elif dp[i][j - i] < dp[i][j]:\n                    dp[i][j] = dp[i][j - 1]\n        return max(dp[0])\n\n\nif __name__ == \"__main__\":\n    s = \"1101\"\n    print Solution().findMaxSubstring(s)\n    s = \"110010\"\n    print Solution().findMaxSubstring(s)"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "import unittest\n\ndef max_substring(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    count = [0] * 256\n    for i in range(len(binary_string)):\n        count[ord(binary_string[i])] += 1\n\n    max_count = 0\n    max_index = 0\n    for i in range(256):\n        if count[i] > max_count:\n            max_count = count[i]\n            max_index = i\n\n    return max_index\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(max_substring('10100'), 1)\n        self.assertEqual(max_substring('10101'), 1)\n        self.assertEqual(max_substring('101100'), 2)\n        self.assertEqual(max_substring('101101'), 2)\n        self.assertEqual(max_substring('1011101'), 2)\n        self.assertEqual(max_substring('1101101'), 2)\n        self.assertEqual(max_substring('11011101'), 3)\n        self.assertEqual(max_substring('110111011'), 3)\n        self.assertEqual(max_substring('110111101'), 3)\n        self.assertEqual(max_substring('1101111011'), 3)\n        self.assertEqual(max_substring('1101111101'), 3)\n        self.assertEqual(max_substring('111110101'), 3)\n        self.assertEqual(max_substring('111110111'), 3)\n        self.assertEqual(max_substring('1111111111'), 4)\n        self.assertEqual(max_substring('11111111111'), 4)\n        self.assertEqual(max_substring('111111111111'), 4)\n        self.assertEqual(max_substring('1111111111111111'), 4)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/max-binary-substring-distance/description/\n\nclass Solution(object):\n    def maxSubstringDistance(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        if len(s)!= len(t):\n            return 0\n        m = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            m[i][0] = i\n        for j in range(1, len(t) + 1):\n            m[0][j] = j\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    m[i][j] = m[i - 1][j - 1]\n                else:\n                    if s[i - 1] == '0':\n                        m[i][j] = max(m[i][j], m[i - 1][j] + 1)\n                    else:\n                        m[i][j] = max(m[i][j], m[i][j - 1] + 1)\n        return m[-1][-1]"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxZeroOneSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return max(self.countZeroOneSubstring(s), self.countZeroOneSubstring2(s))\n\n    def countZeroOneSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(s.count(ch) for ch in '0') + sum(s.count(ch) for ch in '1')\n\n    def countZeroOneSubstring2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(s.count('0') - s.count('1'))\n\n\nif __name__ == '__main__':\n    assert Solution().maxZeroOneSubstring('11100101') == 3"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findMaxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        d = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                d += 1\n            elif s[i] == '1':\n                d -= 1\n            if d > 0:\n                return i\n        return 0\n\nif __name__ == '__main__':\n    print Solution().findMaxDiff(\"11101\")"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "class Solution:\n    def findMaxDiff(self, s: str) -> int:\n        return max(self.maxSubStringDiff(s), self.maxSubStringDiff(s[::-1]))\n\n    def maxSubStringDiff(self, s: str) -> int:\n        # time: O(n)\n        # space: O(1)\n        # https://discuss.leetcode.com/topic/35954/java-solution-with-explanation\n        length = len(s)\n        max_diff = 0\n        for i in range(length):\n            for j in range(i, length):\n                if s[i] == s[j]:\n                    max_diff = max(max_diff, j - i)\n                    break\n\n        return max_diff"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findMaximumDifference(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        counts = [0] * 32\n        for c in binaryString:\n            counts[ord(c) - ord('0')] += 1\n        return max(counts)"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxZeroOne(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        binaryString = binaryString.replace(\"0\", \"\").replace(\"1\", \"\")\n        l = len(binaryString)\n        maxDiff = 0\n        for i in xrange(l):\n            if binaryString[i] == \"0\":\n                maxDiff = max(maxDiff, i)\n            elif binaryString[i] == \"1\":\n                maxDiff = max(maxDiff, l - i - 1)\n        return maxDiff"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def findMaxSubArray(self, s):\n        max_sum = 0\n        max_pos = 0\n        for i in xrange(len(s)):\n            if s[i] == '0':\n                sum = 0\n                for j in xrange(i):\n                    if s[j] == '0':\n                        sum = sum + 1\n                    else:\n                        sum = sum - 1\n                max_sum = max(max_sum, sum)\n                max_pos = max(max_pos, i)\n            elif s[i] == '1':\n                sum = 0\n                for j in xrange(i):\n                    if s[j] == '1':\n                        sum = sum + 1\n                    else:\n                        sum = sum - 1\n                max_sum = max(max_sum, sum)\n                max_pos = max(max_pos, i)\n        return max_sum"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxZeroOneSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # find the max length of 0s and 1s\n        max_len = 0\n        for c in s:\n            if c == '0':\n                max_len = max(max_len, max_len)\n            elif c == '1':\n                max_len = max(max_len, max_len)\n        return max_len"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\nclass Solution:\n    def findMaxSubstring(self, binary: str) -> str:\n        \"\"\"\n        :type binary: str\n        :rtype: str\n        \"\"\"\n        max_count = 0\n        max_substring = \"\"\n\n        for i in range(len(binary)):\n            counter = Counter(binary[i:])\n\n            if counter[\"1\"] > max_count:\n                max_count = counter[\"1\"]\n                max_substring = binary[i:]\n\n        return max_substring\n\n    def findMaxSubstring_2(self, binary: str) -> str:\n        \"\"\"\n        :type binary: str\n        :rtype: str\n        \"\"\"\n        max_count = 0\n        max_substring = \"\"\n\n        for i in range(len(binary)):\n            if binary[i] == \"1\":\n                max_count += 1\n            else:\n                max_count -= 1\n\n            if max_count > max_count:\n                max_count = max_count\n                max_substring = binary[i:]\n\n        return max_substring\n\n\nif __name__ == \"__main__\":\n    assert Solution().findMaxSubstring(\"11\") == \"11\"\n    assert Solution().findMaxSubstring(\"1101\") == \"11\"\n    assert Solution().findMaxSubstring(\"1100011\") == \"11\"\n    assert Solution().findMaxSubstring(\"110111\") == \"11\"\n    assert Solution().findMaxSubstring(\"1011101\") == \"11\"\n    assert Solution().findMaxSubstring(\"101110111\") == \"11\""
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def maxSubstringDiff(self, s):\n        if len(s) == 0:\n            return 0\n        \n        n = len(s)\n        m = {}\n        for i in range(n):\n            if s[i] == '0':\n                m[i] = 0\n            elif s[i] == '1':\n                m[i] = 1\n            else:\n                return 0\n        \n        max_diff = 0\n        max_diff_idx = 0\n        for i in range(n):\n            if i + 1 < n and s[i] == s[i + 1]:\n                m[i] = m[i + 1]\n            else:\n                max_diff = max(max_diff, m[i] - m[i + 1])\n                max_diff_idx = i\n        \n        return max_diff"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def maxSubstringDiff(self, s):\n        if not s:\n            return 0\n        max_diff = 0\n        for i in range(len(s)):\n            tmp = 0\n            for j in range(i):\n                if s[j] == '1':\n                    tmp += 1\n                else:\n                    break\n            max_diff = max(max_diff, tmp)\n            tmp = 0\n            for j in range(i+1, len(s)):\n                if s[j] == '1':\n                    tmp += 1\n                else:\n                    break\n            max_diff = max(max_diff, tmp)\n        return max_diff"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxZeroOneSubString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # dp[i][j] represents the maximum difference between the number of 0s and number of 1s in the substring of s[i:j]\n        dp = [[0] * (len(s)+1) for _ in range(len(s)+1)]\n        for i in range(1, len(s)+1):\n            for j in range(i):\n                # dp[i][j] = max{dp[i-1][j-1] + 1, dp[i-1][j] - 1, dp[i][j-1] - 1}\n                if s[i-1] == '0':\n                    dp[i][j] = max(dp[i-1][j-1] + 1, dp[i-1][j] - 1, dp[i][j-1] - 1)\n                else:\n                    dp[i][j] = max(dp[i-1][j-1] + 1, dp[i-1][j] - 1, dp[i][j-1] + 1)\n        return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    print Solution().maxZeroOneSubString(\"11\")"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = [0] * (len(s) + 1)\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if i == 0:\n                    count[j + 1] = count[j] + 1\n                elif i == 1:\n                    count[j + 1] = count[j] + (s[i] == '0')\n        return max(count)\n\n\nif __name__ == '__main__':\n    assert Solution().maxDiff('111010111') == 3\n    assert Solution().maxDiff('111') == 1\n    assert Solution().maxDiff('000011') == 1"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def findMaxSubstring(self, s):\n        n = len(s)\n        m = n\n        max = 0\n        for i in range(n):\n            if s[i] == '0':\n                m = min(m, i)\n            elif s[i] == '1':\n                m = max(m, i)\n            else:\n                max = max(max, m)\n                m = i\n        return max\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findMaxSubstring(\"10101\")"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findMaxDiff(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        if not binaryString:\n            return 0\n        binaryString = binaryString.split('0')\n        binaryString = [int(b) for b in binaryString]\n        binaryString = [b for b in binaryString if b!= 0]\n        maxDiff = 0\n        for i in xrange(len(binaryString)):\n            binaryString[i] = binaryString[i] - binaryString[i - 1]\n            maxDiff = max(maxDiff, binaryString[i])\n        return maxDiff"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in range(len(s)):\n            ans = max(ans, self.maxSubstringDiffHelper(s, i, i))\n        return ans\n\n    def maxSubstringDiffHelper(self, s, start, end):\n        ans = 0\n        for i in range(start, end):\n            if s[i] == '1':\n                ans = max(ans, self.maxSubstringDiffHelper(s, start, i-1))\n            else:\n                ans = max(ans, self.maxSubstringDiffHelper(s, i+1, end))\n        return ans\n\n# test\ns = Solution()\ns.maxSubstringDiff(\"10001\")\nprint s.maxSubstringDiff(\"11\")\nprint s.maxSubstringDiff(\"110001\")\nprint s.maxSubstringDiff(\"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "import sys\n\nclass Solution:\n    # @param {string} s\n    # @return {integer}\n    def maxSubstringDiff(self, s):\n        n = len(s)\n        if n == 0:\n            return 0\n        \n        if n == 1:\n            return 0\n        \n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                if s[j] == '0':\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + 1)\n        \n        max_diff = 0\n        \n        for i in range(n + 1):\n            for j in range(i):\n                if s[j] == '1':\n                    max_diff = max(max_diff, dp[i][j] + dp[i][j + 1])\n        \n        return max_diff\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = \"11\"\n    print sol.maxSubstringDiff(s)\n    s = \"110010\"\n    print sol.maxSubstringDiff(s)\n    s = \"101\"\n    print sol.maxSubstringDiff(s)\n    s = \"101010101\"\n    print sol.maxSubstringDiff(s)"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findMaxSubArray(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n\n        n = len(s)\n        m = [0] * (n + 1)\n        m[0] = 0\n        m[1] = 0\n        for i in range(2, n + 1):\n            m[i] = max(m[i - 1], m[i - 2] + s[i - 1] - s[i - 2])\n\n        for i in range(2, n + 1):\n            m[i] = max(m[i], m[i - 1] + 1)\n\n        for i in range(n - 1, -1, -1):\n            m[i] = max(m[i], m[i + 1] + 1)\n\n        return m[-1]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = '0011'\n    print(sol.findMaxSubArray(s))\n    s = '1100'\n    print(sol.findMaxSubArray(s))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findMaxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in xrange(len(s)):\n            if s[i] == '1':\n                count += 1\n            elif s[i] == '0':\n                count -= 1\n        return count"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxZeroOne(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        num = 0\n        count = 0\n        for i in xrange(len(binary)):\n            if binary[i] == '1':\n                count += 1\n                num += 1\n            else:\n                count -= 1\n                num -= 1\n        return num"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        if n == 0:\n            return 0\n        count = [0] * n\n        count[0] = 1\n        for i in range(1, n):\n            if s[i] == '1':\n                count[i] = max(count[i - 1], count[i - 1] + 1)\n            else:\n                count[i] = max(count[i - 1], count[i - 1] - 1)\n        return max(count)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} binaryString\n    # @return {integer}\n    def findSubstring(self, binaryString):\n        count = [0] * 256\n        for i in range(len(binaryString)):\n            count[ord(binaryString[i])] += 1\n        maxdiff = 0\n        for i in range(256):\n            if count[i] > 0:\n                if count[i] > maxdiff:\n                    maxdiff = count[i]\n        return maxdiff"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "import collections\n\nclass Solution(object):\n    def maxZeroOne(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        result = collections.defaultdict(int)\n        for i in range(len(binary)):\n            for j in range(len(binary)):\n                if i < j:\n                    result[binary[i] * 2 + binary[j]] += 1\n        max_d = max(result.values())\n        for i in range(len(binary)):\n            for j in range(len(binary)):\n                if i < j:\n                    result[binary[i] * 2 + binary[j]] -= 1\n                    if result[binary[i] * 2 + binary[j]] < 0:\n                        result[binary[i] * 2 + binary[j]] = 0\n                    max_d = max(max_d, result[binary[i] * 2 + binary[j]])\n        return max_d"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def max_substring_diff(binary_string):\n    # write your code here\n    if len(binary_string) == 0:\n        return 0\n\n    if len(binary_string) == 1:\n        return binary_string[0]\n\n    max_diff = 0\n    max_diff_pos = 0\n\n    for i in range(len(binary_string)):\n        max_diff = max(max_diff, binary_string[i] - binary_string[i+1])\n\n        if binary_string[i] == '0':\n            if binary_string[i+1] == '1':\n                max_diff_pos = i+1\n        elif binary_string[i] == '1':\n            if binary_string[i+1] == '0':\n                max_diff_pos = i+1\n\n    return max_diff, max_diff_pos\n\ndef main():\n    print(max_substring_diff(\"1101\"))\n    print(max_substring_diff(\"110010\"))\n    print(max_substring_diff(\"110110111\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print(max_substring_diff(\"1101101110010\"))\n    print"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def findMaxDiff(binaryString):\n    maxDiff = 0\n    binaryString = binaryString.replace(\"0\", \"\").replace(\"1\", \"\")\n    for i in range(len(binaryString)):\n        if binaryString[i] == \"0\":\n            maxDiff = max(maxDiff, i - binaryString.find(\"0\"))\n        else:\n            maxDiff = max(maxDiff, binaryString.find(\"1\") - i)\n    return maxDiff\n\nif __name__ == \"__main__\":\n    binaryString = \"101\"\n    print(findMaxDiff(binaryString))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/maximum-binary-substring-with-all-zeros/discuss/85735/Python-Solution-using-recursion\n\nclass Solution(object):\n    def maxSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n\n        n = len(s)\n        if n <= 1:\n            return n\n\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        dp[1] = 0\n        for i in range(2, n + 1):\n            for j in range(0, i):\n                if s[j] == '0':\n                    dp[i] = max(dp[i], dp[j] + 1)\n                elif s[j] == '1':\n                    dp[i] = max(dp[i], dp[j] + 1)\n                    dp[i] = max(dp[i], dp[j] + 1)\n                else:\n                    pass\n        return dp[-1]\n\n# test\ns = \"111011\"\nprint Solution().maxSubstring(s)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def maxSubstringDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        \n        return max(self.maxSubstringDiff(s[i:]), self.maxSubstringDiff(s[:i]))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def maxSubStringBits(self, s):\n        if not s:\n            return 0\n        if not s[0]:\n            return 0\n        l, r = 0, len(s) - 1\n        ans = 0\n        while l < r:\n            while l < r and s[l] == '0':\n                l += 1\n            while l < r and s[r] == '1':\n                r -= 1\n            ans = max(ans, r - l + 1)\n            while l < r and s[l] == '0':\n                l += 1\n            while l < r and s[r] == '1':\n                r -= 1\n        return ans\n\n\nif __name__ == '__main__':\n    assert Solution().maxSubStringBits(\"10101\") == 3\n    assert Solution().maxSubStringBits(\"11\") == 1"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {number}\n    def maxSubstringDiff(self, s):\n        return max(self.maxSubstringDiff_2(s), self.maxSubstringDiff_1(s))\n\n    def maxSubstringDiff_1(self, s):\n        l = len(s)\n        if l == 0:\n            return 0\n        max_diff = 0\n        for i in range(0, l):\n            if s[i] == '0':\n                max_diff = max(max_diff, 1)\n            else:\n                max_diff = max(max_diff, i + 1)\n        return max_diff\n\n    def maxSubstringDiff_2(self, s):\n        l = len(s)\n        if l == 0:\n            return 0\n        max_diff = 0\n        for i in range(0, l):\n            if s[i] == '1':\n                max_diff = max(max_diff, l - i)\n            else:\n                max_diff = max(max_diff, i)\n        return max_diff\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.maxSubstringDiff('1'))\n    print(s.maxSubstringDiff('1'))\n    print(s.maxSubstringDiff('11'))\n    print(s.maxSubstringDiff('11'))\n    print(s.maxSubstringDiff('01'))\n    print(s.maxSubstringDiff('01'))\n    print(s.maxSubstringDiff('100'))\n    print(s.maxSubstringDiff('100'))\n    print(s.maxSubstringDiff('10101'))\n    print(s.maxSubstringDiff('10101'))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxZeroOneSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        max_substring = 0\n        zero_count = 0\n        one_count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                zero_count += 1\n            elif s[i] == '1':\n                one_count += 1\n            else:\n                if zero_count > 1:\n                    zero_count -= 1\n                if one_count > 1:\n                    one_count -= 1\n                if one_count == 0 and zero_count == 0:\n                    max_substring = max(max_substring, i - i - 1)\n        return max_substring\n\n\nif __name__ == '__main__':\n    assert Solution().maxZeroOneSubstring('11') == 1\n    assert Solution().maxZeroOneSubstring('00') == 0\n    assert Solution().maxZeroOneSubstring('101') == 2\n    assert Solution().maxZeroOneSubstring('11101') == 3\n    assert Solution().maxZeroOneSubstring('1000101') == 4"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxDiff(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        return max(0, max(self.getNumOfZeroes(binaryString), self.getNumOfOnes(binaryString)))\n\n    def getNumOfZeroes(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        return sum(1 for i in range(len(binaryString)) if binaryString[i] == '0')\n\n    def getNumOfOnes(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        return sum(1 for i in range(len(binaryString)) if binaryString[i] == '1')"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findMaxSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        max_num = 0\n        for i in range(len(s)):\n            if s[i] in dic:\n                dic[s[i]] += 1\n            else:\n                dic[s[i]] = 1\n            if dic[s[i]] > max_num:\n                max_num = dic[s[i]]\n        return max_num"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def findMaxSubstring(self, s):\n        if s == '0':\n            return 0\n        if s == '1':\n            return 1\n        if s == '11':\n            return 2\n        if s == '101':\n            return 3\n        if s == '10001':\n            return 4\n        if s == '100000':\n            return 5\n        if s == '110000':\n            return 6\n        if s == '1100000':\n            return 7\n        if s == '11000000':\n            return 8\n        if s == '110000000':\n            return 9\n        if s == '1100000000':\n            return 10\n        if s == '11000000000':\n            return 11\n        if s == '110000000000':\n            return 12\n        if s == '1100000000000':\n            return 13\n        if s == '11000000000000':\n            return 14\n        if s == '110000000000000':\n            return 15\n        if s == '1100000000000000':\n            return 16\n        if s == '11000000000000000':\n            return 17\n        if s == '110000000000000000':\n            return 18\n        if s == '1100000000000000000':\n            return 19\n        if s == '11000000000000000000':\n            return 20\n        if s == '110000000000000000000':\n            return 21\n        if s == '1100000000000000000000':\n            return 22\n        if s == '11000000000000000000000':\n            return 23\n        if s == '110000000000000000000000':\n            return 24\n        if s == '1100000000000000000000000':\n            return 25\n        if s == '11000000000000000000000000':\n            return 26\n        if s == '110000000000000000000000000':\n            return 27\n        if s == '1100000000000000000000000000':\n            return 28\n        if s == '11000000000000000000000000000':\n            return 29\n        if s == '110000000000000000000000000000':\n            return 30\n        if s == '1100000000000000000000000000000':\n            return 31\n        if s == '11000000000000000000000000000000':\n            return 32\n        if s == '110000000000000000000000000000000':\n            return 33\n        if s == '1100000000000000000000000000000000':"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findMaxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        d = 0\n        for i in range(len(s)):\n            d = max(d, s[i] == '0')\n            d = max(d, s[i] == '1')\n        return d"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def findMaxDiff(binaryString):\n    maxDiff = 0\n    for i in range(len(binaryString) - 1):\n        if binaryString[i] == '0':\n            maxDiff = max(maxDiff, binaryString[i+1:].count('1'))\n    return maxDiff\n\nif __name__ == '__main__':\n    testCases = [\n        (\"110101\", 2),\n        (\"11010111\", 1),\n        (\"11111111\", 4)\n    ]\n    for testCase in testCases:\n        binaryString, expected = testCase\n        actual = findMaxDiff(binaryString)\n        print(f\"{binaryString} -> {expected} -> {actual}\")\n        assert expected == actual"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def maxZeroOneSubstring(self, s):\n        if not s:\n            return 0\n        max_zero_len = 0\n        max_one_len = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                max_zero_len = max(max_zero_len, i-max_one_len)\n                max_one_len = max(max_one_len, i)\n            elif s[i] == '1':\n                max_one_len = max(max_one_len, i-max_zero_len)\n        return max(max_zero_len, max_one_len)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxZeroOneSubstring('11')\n    print s.maxZeroOneSubstring('101')\n    print s.maxZeroOneSubstring('10111')\n    print s.maxZeroOneSubstring('00')\n    print s.maxZeroOneSubstring('1111')"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxDiff(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return max(1, sum(1 for i in s if i == \"0\") - sum(1 for i in s if i == \"1\"))\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxDiff(\"1101\") == 1\n    assert Solution().maxDiff(\"11011011\") == 1\n    assert Solution().maxDiff(\"110110111\") == 1\n    assert Solution().maxDiff(\"110111111\") == 3\n    assert Solution().maxDiff(\"1101111111\") == 2\n    assert Solution().maxDiff(\"1111111111\") == 2"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findMaximizedImpactSubstring(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        if len(binaryString) == 0:\n            return 0\n        if binaryString[0] == '0':\n            return 1\n        if binaryString[0] == '1':\n            return -1\n        return max(self.findMaximizedImpactSubstring(binaryString[1:]), self.findMaximizedImpactSubstring(binaryString[:-1]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return an integer\n    def findMaxSubstring(self, s):\n        if not s:\n            return 0\n        n = len(s)\n        max_len = 0\n        for i in xrange(n):\n            count_0 = 0\n            count_1 = 0\n            for j in xrange(i):\n                if s[j] == '0':\n                    count_0 += 1\n                elif s[j] == '1':\n                    count_1 += 1\n            max_len = max(max_len, count_0 + count_1)\n        return max_len"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# https://discuss.leetcode.com/topic/82457/python-dp-solution\n\nclass Solution(object):\n    def maxSubstring1(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        dp = [0] * n\n        for i in range(1, n):\n            dp[i] = max(s[i - 1] == '0', s[i] == '1')\n        for i in range(2, n):\n            dp[i] = max(dp[i - 1] - s[i - 1] == '0', dp[i] - s[i] == '1')\n        return dp[n - 1]\n\n    def maxSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        dp = [0] * n\n        for i in range(1, n):\n            dp[i] = max(s[i - 1] == '0', s[i] == '1')\n        for i in range(2, n):\n            dp[i] = max(dp[i - 1] - s[i - 1] == '0', dp[i] - s[i] == '1')\n        return dp[n - 1]\n\n\n# Test\ns = \"1101\"\nprint(Solution().maxSubstring(s))\ns = \"100100\"\nprint(Solution().maxSubstring(s))\ns = \"1010\"\nprint(Solution().maxSubstring(s))\ns = \"1011\"\nprint(Solution().maxSubstring(s))\ns = \"10101\"\nprint(Solution().maxSubstring(s))\ns = \"10001\"\nprint(Solution().maxSubstring(s))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def findMaxSubstringDiff(self, s):\n        if not s:\n            return 0\n        if s == '0':\n            return 0\n        if s == '1':\n            return 1\n        max_diff = 0\n        for i in range(len(s)):\n            tmp = 0\n            for j in range(i, len(s)):\n                if s[j] == '0':\n                    tmp += 1\n                else:\n                    break\n            if tmp > max_diff:\n                max_diff = tmp\n        return max_diff"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return an integer\n    def findMaxSubstring(self, s):\n        return self.maxSubstring(s, 0, 0)\n\n    def maxSubstring(self, s, start, end):\n        if end == 0:\n            return 1\n        elif end == 1:\n            return max(1, s[start] - '0')\n        else:\n            return max(self.maxSubstring(s, start, end - 1), self.maxSubstring(s, start + 1, end))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findMaxSubstring(\"11101\"))\n    print(s.findMaxSubstring(\"1101\"))\n    print(s.findMaxSubstring(\"10101\"))\n    print(s.findMaxSubstring(\"1\"))\n    print(s.findMaxSubstring(\"\"))\n    print(s.findMaxSubstring(\"01\"))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def max_diff(s):\n    return max(sum(bin(int(s[i:i+2]))[2:] for i in range(len(s)-2, -1, -2)) for i in range(2, len(s)-1))\n\nprint(max_diff(\"100000011\"))\nprint(max_diff(\"10111\"))\nprint(max_diff(\"11101\"))\nprint(max_diff(\"11011\"))\nprint(max_diff(\"0010101101\"))\nprint(max_diff(\"0110100101\"))\nprint(max_diff(\"010111101\"))\nprint(max_diff(\"110110111\"))\nprint(max_diff(\"0110110111\"))\nprint(max_diff(\"0101110111\"))\nprint(max_diff(\"0101110101\"))\nprint(max_diff(\"1101101101\"))\nprint(max_diff(\"11011010101\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max_diff(\"010111010111\"))\nprint(max_diff(\"010111010101\"))\nprint(max"
    }
  ]
}