{
  "timestamp": "2025-09-14T18:52:42.965000",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 204,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def decode(data):\n    \"\"\"\n    >>> decode([1, 1, 1, 2, 2, 1])\n    [1, 1, 2, 1]\n    \"\"\"\n    result = []\n    prev = 0\n    for index, value in enumerate(data):\n        if value == prev:\n            continue\n        result.append(prev)\n        prev = value\n    result.append(prev)\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def decode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dic = {}\n        curr = head\n        while curr:\n            val = curr.val\n            if val in dic:\n                curr = curr.next\n                continue\n            dic[val] = curr\n            curr = curr.next\n        \n        curr = head\n        res = ListNode(0)\n        while curr:\n            val = curr.val\n            if val in dic:\n                res.next = dic[val]\n                res = res.next\n                curr = curr.next\n            else:\n                res.next = curr\n                curr = curr.next\n                res = res.next\n                curr = curr.next\n        return res"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Definition for a run-length encoded string.\nclass RLEncoder:\n    def __init__(self, s):\n        self.s = s\n        self.encoded = []\n        self.length = 0\n        self.last_id = None\n\n    def encode(self, id):\n        if self.last_id is None:\n            self.length += 1\n        else:\n            self.encoded[self.last_id] += 1\n        self.last_id = id\n    \n    def decode(self):\n        if self.length == 0:\n            return self.s\n        else:\n            return self.s[:self.encoded[0]] + ''.join([str(e) for e in self.encoded[1:]])\n\n\ndef run_length_encoding(s):\n    rle = RLEncoder(s)\n    for c in s:\n        rle.encode(c)\n    return rle.decode()\n\nprint(run_length_encoding('abbc'))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import sys\n\ndef main():\n    if len(sys.argv)!= 2:\n        sys.exit(\"usage: {} <rle_list>\".format(sys.argv[0]))\n\n    rle_list = sys.argv[1]\n    decoded_list = []\n    for i, rle in enumerate(rle_list):\n        if rle == '0':\n            decoded_list.append(0)\n        elif rle == '1':\n            decoded_list.append(1)\n        else:\n            decoded_list.append(int(rle) - 1)\n    print(' '.join(map(str, decoded_list)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import collections\n\nclass Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        def decode(c, l):\n            if c == '+':\n                return l[-1] + decode(l[-2], l[:-2])\n            if c == '0':\n                return l[-1]\n            if c == '1':\n                return decode(l[-1], l[:-1])\n            if c == '2':\n                return decode(l[-2], l[:-2])\n            if c == '3':\n                return decode(l[-3], l[:-3])\n            if c == '4':\n                return decode(l[-4], l[:-4])\n            if c == '5':\n                return decode(l[-5], l[:-5])\n            if c == '6':\n                return decode(l[-6], l[:-6])\n            if c == '7':\n                return decode(l[-7], l[:-7])\n            if c == '8':\n                return decode(l[-8], l[:-8])\n            if c == '9':\n                return decode(l[-9], l[:-9])\n            if c == 'A':\n                return decode(l[-10], l[:-10])\n            if c == 'B':\n                return decode(l[-11], l[:-11])\n            if c == 'C':\n                return decode(l[-12], l[:-12])\n            if c == 'D':\n                return decode(l[-13], l[:-13])\n            if c == 'E':\n                return decode(l[-14], l[:-14])\n            if c == 'F':\n                return decode(l[-15], l[:-15])\n            raise Exception('Invalid run-length code')\n\n        decode_table = collections.defaultdict(str)\n        for i, c in enumerate(s):\n            decode_table[c] = decode_table[c] + str(i)\n        return ''.join(decode_table[c] for c"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Definition for a run-length encoded vector.\nclass RunLength:\n    def __init__(self, items):\n        self.items = items\n        self.len = len(items)\n        self.count = 0\n        self.s = 0\n\n    def __len__(self):\n        return self.len\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.count == self.len:\n            raise StopIteration\n\n        self.count += 1\n        return self.items[self.s]\n\n    def __repr__(self):\n        return ''.join(str(x) for x in self)\n\n\n# Your RLEIterator object will be instantiated and called as such:\n# rleIterator = RLEIterator(rleList)\n# while rleIterator.hasNext():\n#     val = rleIterator.next()\n#    ...\nclass RLEIterator:\n    def __init__(self, rleList):\n        self.rleList = rleList\n        self.pos = 0\n\n    def hasNext(self):\n        return self.pos < len(self.rleList)\n\n    def next(self):\n        return self.rleList[self.pos]\n\n\n# Your RLEIterator object will be instantiated and called as such:\n# rleIterator = RLEIterator(rleList)\n# while rleIterator.hasNext():\n#     val = rleIterator.next()\n#    ...\nclass RLEIterator:\n    def __init__(self, rleList):\n        self.rleList = rleList\n        self.pos = 0\n\n    def hasNext(self):\n        return self.pos < len(self.rleList)\n\n    def next(self):\n        return self.rleList[self.pos]\n\n\n# Your RLEIterator object will be instantiated and called as such:\n# rleIterator = RLEIterator(rleList)\n# while rleIterator.hasNext():\n#     val = rleIterator.next()\n#    ...\nclass RLEIterator:\n    def __init__(self, rleList):\n        self.rleList = r"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/decode-ways-to-string/\n\nclass Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        def dfs(s, i):\n            if i >= len(s):\n                return []\n            if s[i] == '0':\n                return []\n            if s[i] == '1':\n                return [s[i]]\n            res = []\n            res.extend(dfs(s, i + 1))\n            res.extend(dfs(s, i + 2))\n            return res\n        return dfs(s, 0)\n\nif __name__ == '__main__':\n    s = \"1010\"\n    print(Solution().decode(s))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        curr = 0\n        for i, ch in enumerate(s):\n            if ch == '1':\n                curr += 1\n            else:\n                ans.append(curr)\n                curr = 0\n                if i+1 < len(s):\n                    curr += 1\n        ans.append(curr)\n        return ans\n\n\nif __name__ == '__main__':\n    print Solution().decode(\"1\")\n    print Solution().decode(\"11\")\n    print Solution().decode(\"1101\")\n    print Solution().decode(\"11001\")"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import sys\nfrom collections import defaultdict\n\n# https://www.youtube.com/watch?v=W4i_7J4mNdY\n\ndef run_length_decode(data):\n    \"\"\"\n    :type data: List[str]\n    :rtype: List[str]\n    \"\"\"\n    data = list(data)\n    d = defaultdict(int)\n    for i in range(0, len(data)):\n        d[data[i]] += 1\n        if d[data[i]] == 1:\n            data[i] = data[i] * 2\n        else:\n            data[i] = data[i] / 2\n    return data\n\nif __name__ == '__main__':\n    data = [\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',\n        'a',"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import sys\n\ndef decode(data):\n    length = 0\n    for i in range(0, len(data)):\n        if data[i] == '+':\n            length += 1\n        elif data[i] == '-':\n            length += -1\n        else:\n            print(\"Error: Invalid data\")\n            sys.exit(1)\n    return length\n\n\nif __name__ == '__main__':\n    data = input()\n    length = decode(data)\n    print(length)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\n\ndef rle(lst):\n    \"\"\"\n    Run-length encoding.\n    \"\"\"\n    # Initialize\n    ret = []\n    for i in lst:\n        if i in ret:\n            ret[ret.index(i)].append(i)\n        else:\n            ret.append([i])\n\n    return ret\n\n\nif __name__ == \"__main__\":\n    # Sample Input\n    # [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    # Sample Output\n    # [1, 2, 3, 1, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    sample_input = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    sample_output = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n    # Test\n    # rle(sample_input) == sample_output\n    # rle(sample_output) == sample_input\n\n    # Test with RLE\n    print rle(sample_input) == sample_output\n    print rle(sample_output) == sample_input\n    print rle(rle(sample_input)) == sample_output\n    print rle(rle(rle(sample_input))) == sample_output"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef decode_rle(rle):\n    \"\"\"\n    >>> decode_rle([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef read_int(line):\n    \"\"\"Reads an integer from a line of input.\"\"\"\n    return int(line.strip())\n\ndef read_line(line):\n    \"\"\"Reads a line from input.\"\"\"\n    return line.strip()\n\ndef print_line(line):\n    \"\"\"Prints a line to output.\"\"\"\n    print line\n\ndef decode(line):\n    \"\"\"Decodes a run-length encoded list.\"\"\"\n    return [1] * line\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    for line in sys.stdin:\n        line = read_line(line)\n        decode(line)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef decode(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: List[int]\n    \"\"\"\n    def run_length_decode(l):\n        # type: (List[int]) -> List[int]\n        \"\"\"\n        :type l: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # dictionary of size = len(l)\n        d = defaultdict(int)\n\n        # count run lengths\n        for i in range(len(l)):\n            d[l[i]] += 1\n\n        # return the decoded list\n        return [d[x] for x in l]\n\n    return run_length_decode(list_)\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4]\n    print(decode(l))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import unittest\n\n# https://www.codeeval.com/open_challenges/105/\n\ndef decode(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[int]\n    \"\"\"\n    # TODO: implement\n    return []\n\n\nclass TestCodeEval(unittest.TestCase):\n    def test_sample_tests(self):\n        self.assertEqual(decode(\"\"), [])\n        self.assertEqual(decode(\"0\"), [0])\n        self.assertEqual(decode(\"1\"), [1])\n        self.assertEqual(decode(\"11\"), [1, 1])\n        self.assertEqual(decode(\"1110\"), [1, 1, 2])\n        self.assertEqual(decode(\"11100\"), [1, 1, 3])\n        self.assertEqual(decode(\"11101\"), [1, 1, 3, 1])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://www.geeksforgeeks.org/run-length-encoding-of-string-in-python/\n# https://www.geeksforgeeks.org/run-length-encoding-of-string-in-python/\n# https://www.geeksforgeeks.org/run-length-encoding-of-string/\n# https://www.geeksforgeeks.org/run-length-encoding-of-string/\n# https://www.geeksforgeeks.org/run-length-encoding-of-string/\n# https://www.geeksforgeeks.org/run-length-encoding-of-string/\n\n\ndef rle_decode(input_list):\n    \"\"\"\n    >>> rle_decode(['1', '1', '1', '1', '1', '1', '0'])\n    '0101'\n    >>> rle_decode(['1', '1', '1', '1', '1', '1', '1'])\n    '0111'\n    >>> rle_decode(['1', '0', '0', '1', '0', '0', '1'])\n    '0101'\n    >>> rle_decode(['1', '1', '1', '1', '1', '1', '1'])\n    '0111'\n    >>> rle_decode(['1', '1', '1', '1', '1', '1', '1', '1'])\n    '0111'\n    \"\"\"\n    output_list = []\n    current_run_length = 0\n    for char in input_list:\n        if char == '0':\n            current_run_length = 0\n        else:\n            current_run_length += 1\n        output_list.append(char)\n        if current_run_length == 2:\n            output_list.pop()\n            output_list.append('1')\n    return ''.join(output_list)\n\n\ndef rle_decode_iter(input_list):\n    \"\"\"\n    >>> rle_decode_iter(['1', '1', '1', '1', '1', '1', '"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/decode-run-length-encoded\ndef decode(data):\n    \"\"\"\n    Decode the given run-length encoded data.\n\n    Returns the decoded list.\n    \"\"\"\n    result = []\n    for i in range(0, len(data)):\n        if data[i] == '1':\n            result.append(data[i])\n        elif data[i] == '0':\n            result.append('0')\n        else:\n            result.append(data[i])\n    return result\n\n\nif __name__ == '__main__':\n    with open('./sample.txt') as f:\n        data = f.read()\n        print(decode(data))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def decode(encoded):\n    \"\"\"\n    Encoded is a list of integers, where each integer is the number of times\n    the previous integer appeared in the sequence. For example, [1, 2, 1, 1, 3]\n    represents the sequence [1, 2, 1, 1, 3].\n\n    The run-length encoding of a sequence is the number of times that the same\n    integer appears in the sequence. For example, [1, 1, 1, 1, 2, 3, 3, 2, 1]\n    represents the sequence [1, 1, 1, 1, 2, 3, 3, 2, 1].\n\n    Return the sequence as a list of integers.\n\n    Example:\n\n    >>> decode([1, 1, 1, 1, 2, 3, 3, 2, 1])\n    [1, 2, 3, 1, 2]\n    \"\"\"\n    return [int(i) for i in encoded]\n\n\nif __name__ == '__main__':\n    print(decode([1, 1, 1, 1, 2, 3, 3, 2, 1]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# -*- coding: utf-8 -*-\n# from __future__ import print_function\n\nimport sys\n\n\n# @include\ndef run_length_encode(L):\n    counts = [0] * len(L)\n    for i in range(len(L)):\n        counts[i] += 1 if L[i] else -1\n    return [counts[i] for i in range(len(L))]\n# @exclude\n\n\ndef main():\n    for s in sys.stdin:\n        L = list(map(int, s.strip().split()))\n        print(run_length_encode(L))\n        # print(L)\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n        # print(run_length_encode(L))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 9.98495306357382,
      "candidate": "import sys\nimport os\nimport unittest\n\n#-----------------------------------------------------------------------------------------------------------------------\n# Support Functions\n#-----------------------------------------------------------------------------------------------------------------------\n\ndef decode_rle(rle_list):\n    \"\"\"\n    Decode a run-length encoded list.\n\n    :param rle_list: List of integers.\n    :return: List of integers.\n    \"\"\"\n    decoded_list = []\n    for value in rle_list:\n        if value == 0:\n            decoded_list.append(decode_rle(rle_list[value:])[0])\n        else:\n            decoded_list.append(value)\n    return decoded_list\n\n\ndef encode_rle(list):\n    \"\"\"\n    Encode a list of integers.\n\n    :param list: List of integers.\n    :return: List of integers.\n    \"\"\"\n    return [0] + [1] * len(list) + [0] * (len(list) - len(list) % 2)\n\n\ndef run_length_encode(list):\n    \"\"\"\n    Run-length encode a list of integers.\n\n    :param list: List of integers.\n    :return: List of integers.\n    \"\"\"\n    encoded_list = []\n    for value in list:\n        if encoded_list:\n            if encoded_list[-1] == value:\n                encoded_list[-1] += 1\n            else:\n                encoded_list.append(1)\n                encoded_list.append(value)\n        else:\n            encoded_list.append(1)\n            encoded_list.append(value)\n    return encoded_list\n\n\ndef run_length_decode(rle_list):\n    \"\"\"\n    Run-length decode a list of integers.\n\n    :param rle_list: List of integers.\n    :return: List of integers.\n    \"\"\"\n    decoded_list = []\n    for value in rle_list:\n        if value == 0:\n            decoded_list.append(run_length_decode(rle_list[value:])[0])\n        else:\n            decoded_list.append(rle_list[value])\n    return"
    },
    {
      "rank": 21,
      "score": 9.95142772139694,
      "candidate": "# Definition for a run-length encoded vector.\nclass RLE(object):\n    def __init__(self, v, l):\n        self.v = v\n        self.l = l\n\nclass Solution(object):\n    def runLengthDecode(self, input):\n        \"\"\"\n        :type input: str\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i in xrange(0, len(input)):\n            if input[i] == '1':\n                result.append(1)\n            elif input[i] == '0':\n                result.append(0)\n            else:\n                result.append(input[i])\n                result[-1] += 1\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.runLengthDecode(\"10\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    assert s.runLengthDecode(\"011110011\") == [1, 2, 1, 1, 2, 1, 2, 1, 2, 1]\n    assert s.runLengthDecode(\"011110011\") == [1, 2, 1, 1, 2, 1, 2, 1, 2, 1]\n    assert s.runLengthDecode(\"011110011\") == [1, 2, 1, 1, 2, 1, 2, 1, 2, 1]\n    assert s.runLengthDecode(\"011110011\") == [1, 2, 1, 1, 2, 1, 2, 1, 2, 1]\n    assert s.runLengthDecode(\"011110011\") == [1, 2, 1, 1, 2, 1, 2, 1, 2, 1]\n    assert s.runLengthDecode(\"011110011\") == [1, 2, 1, 1, 2, 1, 2, 1, 2, 1]\n    assert s.runLengthDecode(\"011110011\") == [1, 2, 1, 1, 2, 1, 2, 1, 2, 1]\n    assert s.runLengthDecode(\"011110011\") == [1, 2, 1, 1, 2, 1"
    },
    {
      "rank": 22,
      "score": 9.941928993508103,
      "candidate": "# Definition for a run-length encoded vector.\nclass RLE(object):\n    def __init__(self, l):\n        self.len = len(l)\n        self.data = l\n        self.delta = 1\n        self.prev = 0\n        self.sz = 1\n        self.run = 0\n        self.run_end = 0\n        for i in range(self.len):\n            if self.delta == 0:\n                break\n            if self.delta == 1:\n                self.sz += 1\n                self.run = 1\n            else:\n                self.run += 1\n                self.run_end = self.run\n                self.sz += 1\n                self.delta = 0\n        self.run_end = self.run_end + 1\n        self.sz += 1\n        self.delta = 0\n        self.prev = self.run_end\n\nclass Solution(object):\n    def decode(self, l):\n        \"\"\"\n        :type l: List[int]\n        :rtype: List[int]\n        \"\"\"\n        r = []\n        for i in range(len(l)):\n            if l[i] == 0:\n                r.append(0)\n            else:\n                r.append(l[i] + r[-1])\n        return r\n\n\nif __name__ == \"__main__\":\n    assert Solution().decode([0,1,1,0,2,1,1,0]) == [0,1,1,0,2,2,1,0]\n    assert Solution().decode([0,1,1,0,2,1,1,0,3,2,2,1,1,0]) == [0,1,1,0,2,2,1,0,3,2,2,1,2,2,1,0]"
    },
    {
      "rank": 23,
      "score": 9.905173953795655,
      "candidate": "# Definition for a run-length encoded string.\nclass RunLengthEncodedString:\n    def __init__(self, str):\n        self.str = str\n        self.length = len(str)\n        self.prev = -1\n        self.list = []\n        for i in range(self.length):\n            if i == self.length - 1 or self.str[i]!= self.str[i + 1]:\n                if self.prev!= -1:\n                    self.list.append(self.prev)\n                self.prev = i\n        self.list.append(self.prev)\n\n    def decode(self):\n        res = []\n        for i in range(self.length - 1):\n            res.append(self.list[i] + 1)\n            res.append(self.list[i + 1] - self.list[i] - 1)\n        return res\n\n\n# Your RunLengthEncodedString object will be instantiated and called as such:\n# obj = RunLengthEncodedString(s)\n# param_1 = obj.decode()\n\ns = \"abc\"\nobj = RunLengthEncodedString(s)\nprint(obj.decode())"
    },
    {
      "rank": 24,
      "score": 9.901662478081343,
      "candidate": "import sys\n\ndef decode(data):\n    \"\"\"\n    Decode a run-length encoded given list.\n    \n    :param data: A string containing the run-length encoded data.\n    :return: A list of the decoded values.\n    \"\"\"\n    # Use a buffer to store the decoded data.\n    buf = []\n    # Keep track of the number of bits we have read.\n    bits_read = 0\n    # Keep track of the number of bits we have written.\n    bits_written = 0\n    # The number of bytes we have read so far.\n    bytes_read = 0\n    for c in data:\n        # If we have not read a byte yet, read it.\n        if bytes_read == 0:\n            # Read a byte, increment the number of bytes read.\n            bytes_read += 1\n            # If the current byte is not a 0, add it to the buffer.\n            if c!= 0:\n                buf.append(c)\n        # If we have read a byte, but the number of bits we have written\n        # is greater than the number of bits we have read, write 1.\n        elif bits_written >= bits_read:\n            buf.append(1)\n            bits_written += 1\n        # If we have read a byte and the number of bits we have written\n        # is less than the number of bits we have read, write 0.\n        else:\n            buf.append(0)\n            bits_written += 1\n    # Return the decoded data.\n    return buf\n\nif __name__ == '__main__':\n    # Test the decode function.\n    test_cases = [\n        (\"a\", \"a\"),\n        (\"aa\", \"aa\"),\n        (\"aaa\", \"aaa\"),\n        (\"aaaa\", \"aaaa\"),\n        (\"aaaaa\", \"aaaaa\"),\n        (\"aaaaaa\", \"aaaaa\"),\n        (\"aaaaaaa\", \"aaaaa\"),\n        (\"aaaaaaaa\", \"aaaaa\"),\n        (\"aaaaaaaaa\", \"aaaaa\"),\n        (\"aaaaaaaaaa\", \"aaaaa\"),\n        (\"aaaaaaaaaaa\", \"aaaaa\"),\n        (\"aaaaaaaaaaaa\", \"aaaaa\"),\n        (\"aaaaaaaaaaaaa\", \"aaaaa\"),\n        (\"aaaaaaaa"
    },
    {
      "rank": 25,
      "score": 9.87013080214249,
      "candidate": "import sys\nimport unittest\n\n\ndef decode_rle(rle_list):\n    \"\"\"\n    :type rle_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    decode = [0] * len(rle_list)\n\n    for i in range(len(rle_list)):\n        if i == 0 or rle_list[i]!= rle_list[i - 1]:\n            decode[i] = 1\n        else:\n            decode[i] = decode[i - 1] + 1\n    return decode\n\n\nclass TestDecodeRle(unittest.TestCase):\n    def test_decode_rle(self):\n        self.assertEqual(decode_rle([0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0"
    },
    {
      "rank": 26,
      "score": 9.804393503500492,
      "candidate": "# Definition for a run-length encoded sequence.\nclass RunLength:\n    def __init__(self, lst):\n        self.lst = lst\n        self.len = len(self.lst)\n\n    def __repr__(self):\n        return 'RunLength({0})'.format(self.lst)\n\n\nclass Solution:\n    def runLengthDecode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: RunLength\n        \"\"\"\n        if not s:\n            return None\n        lst = []\n        for i in range(len(s)):\n            if s[i] == '1':\n                lst.append(i)\n                lst.append(1)\n            elif s[i] == '0':\n                lst.append(i)\n                lst.append(0)\n            else:\n                i += 1\n                while s[i] == '1':\n                    lst.append(i)\n                    lst.append(1)\n                    i += 1\n                while s[i] == '0':\n                    lst.append(i)\n                    lst.append(0)\n                    i += 1\n        return RunLength(lst)\n\n\n# Note:\n# 1. There are many ways to solve this problem, but this is my favorite.\n# 2. The complexity is O(n), where n is the length of the input string.\n# 3. Time complexity is O(n), where n is the length of the input string."
    },
    {
      "rank": 27,
      "score": 9.789262041694494,
      "candidate": "from collections import Counter\nimport sys\n\nclass Solution(object):\n    def __init__(self):\n        self.counter = Counter()\n\n    def runLengthEncode(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        self.counter.update(nums)\n        nums.sort()\n        i = 0\n        count = 0\n        last = nums[0]\n        while i < len(nums):\n            if nums[i]!= last:\n                count += 1\n                last = nums[i]\n            i += 1\n        return count\n\n    def runLengthDecode(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1]:\n                count += 1\n        return count\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.runLengthEncode([1,3,4,5]))\n    print(sol.runLengthDecode([1,3,4,5]))"
    },
    {
      "rank": 28,
      "score": 9.777500714417844,
      "candidate": "# -*- coding: utf-8 -*-\n\nimport re\nimport sys\n\n\ndef run_length_decode(string):\n    \"\"\"\n    Given a string of run-length encoded characters, decode the string\n    and return a list of characters.\n\n    >>> run_length_decode('1abc3abc')\n    ['a', 'b', 'c']\n    >>> run_length_decode('1abc3abc3abc')\n    ['a', 'b', 'c', 'c']\n    >>> run_length_decode('1abc3abc3abc3abc3abc')\n    ['a', 'b', 'c', 'c', 'c', 'c']\n    >>> run_length_decode('1abc3abc3abc3abc3abc3abc')\n    ['a', 'b', 'c', 'c', 'c', 'c', 'c']\n    >>> run_length_decode('1abc3abc3abc3abc3abc3abc3abc3abc3abc')\n    ['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c']\n    >>> run_length_decode('1abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc')\n    ['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']\n    >>> run_length_decode('1abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc')\n    ['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']\n    >>> run_length_decode('1abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc')\n    ['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']\n    >>> run_length_decode('1abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc3abc')"
    },
    {
      "rank": 29,
      "score": 9.771359255699423,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef run_length_decode(l):\n    \"\"\"\n    Decode a list of integers to a list of integers.\n    \"\"\"\n    # Initialize the output list.\n    out = []\n    # Iterate through the input list and build the output list.\n    for i in range(len(l)):\n        # If the current element is not 0, append it to the output list.\n        if l[i]!= 0:\n            out.append(l[i])\n        # If the current element is 0, append the previous element to the output list.\n        else:\n            out.append(out[-1])\n    return out\n\n\n# Test case 1:\n# Input: [0, 1, 1, 0, 1]\n# Output: [0, 1, 1, 0, 1]\n#\n# Test case 2:\n# Input: [1, 1, 1, 1, 1, 1]\n# Output: [1, 1, 1, 1, 1, 1]\n#\n# Test case 3:\n# Input: [1, 1, 1, 1, 1, 1, 1]\n# Output: [1, 1, 1, 1, 1, 1]\n#\n# Test case 4:\n# Input: [0, 0, 1, 1, 1, 1, 1]\n# Output: [0, 0, 1, 1, 1, 1, 1]\n#\n# Test case 5:\n# Input: [0, 1, 1, 1, 1, 1, 1, 1]\n# Output: [0, 1, 1, 1, 1, 1, 1, 1]\n#\n# Test case 6:\n# Input: [1, 1, 1, 1, 1, 1, 1, 1, 1]\n# Output: [1, 1, 1, 1, 1, 1, 1, 1, 1]\n#\n# Test case 7:\n# Input: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n# Output: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n#\n# Test case 8:\n# Input: [1, 1, 1,"
    },
    {
      "rank": 30,
      "score": 9.763839237718791,
      "candidate": "class RLEList:\n    def __init__(self, lst):\n        self.data = []\n        self.data.append(0)\n        self.last = 0\n        self.last_data = None\n        self.size = len(lst)\n        self.append(lst)\n\n    def append(self, lst):\n        for i in range(0, len(lst)):\n            self.data.append(self.data[i] + lst[i])\n        self.last = len(lst)\n        self.last_data = lst\n\n    def __str__(self):\n        return str(self.data)\n\n    def __repr__(self):\n        return str(self.data)\n\n    def __len__(self):\n        return len(self.data)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.last_data is not None:\n            self.last_data = None\n            self.last = self.last - 1\n        if self.last == 0:\n            self.last_data = None\n            self.last = self.size - 1\n        self.last_data = self.last_data + [self.data[self.last]]\n        self.data[self.last] = 0\n        self.last = self.last - 1\n        return self.last_data[0]\n\n\ndef rle_decode(lst):\n    \"\"\"\n    Given a list, return the decoded string.\n    \"\"\"\n    rle_list = RLEList(lst)\n    return str(rle_list)\n\n\nif __name__ == \"__main__\":\n    lst = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,"
    },
    {
      "rank": 31,
      "score": 9.747283222863654,
      "candidate": "# Definition for a run-length encoded string.\nclass RLEString(object):\n    def __init__(self, s):\n        self.s = s\n        self.len = len(s)\n        self.runs = []\n        self.last_run_start = 0\n        self.last_run_end = 0\n\n    def add_run(self, start, end):\n        if start == self.last_run_start:\n            self.last_run_end = end\n        else:\n            self.runs.append((start, end))\n            self.last_run_start = start\n            self.last_run_end = end\n\n    def __str__(self):\n        res = \"\"\n        for run in self.runs:\n            res += \" \"*run[0] + \"-\"*(run[1]-run[0]) + \" \"*(self.len-run[1])\n        return res\n\n    def encode(self):\n        res = \"\"\n        for run in self.runs:\n            res += \" \"*run[0] + \"-\"*(run[1]-run[0]) + \" \"*(self.len-run[1])\n        return res\n\n    def decode(self):\n        res = \"\"\n        for run in self.runs:\n            res += \" \"*run[0] + \"-\"*(run[1]-run[0]) + \" \"*(self.len-run[1])\n        return res\n\n\n# Your RLEString object will be instantiated and called as such:\n# obj = RLEString(s)\n# param_1 = obj.decode()\n# param_2 = obj.encode()"
    },
    {
      "rank": 32,
      "score": 9.729049703065847,
      "candidate": "def run_length_decode(data):\n    \"\"\"\n    >>> run_length_decode([1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 1])\n    [1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 1]\n    >>> run_length_decode([1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1])\n    [1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1]\n    >>> run_length_decode([1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
      "rank": 33,
      "score": 9.697665432474222,
      "candidate": "# https://www.hackerrank.com/challenges/rle/problem\n\ndef decode(l):\n    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return [l[0]]\n    else:\n        result = []\n        for i in range(0, len(l)):\n            if l[i] == 0:\n                result.append(l[i+1])\n            else:\n                result.append(l[i])\n        return result\n\n\n# TODO:\n#  - Complete\n\nif __name__ == '__main__':\n    # Test cases\n    test_cases = [\n        [1],\n        [1, 0],\n        [1, 2, 3, 0],\n    ]\n\n    for test in test_cases:\n        print(\"Decode:\", test)\n        print(\"\\n\".join(map(lambda x: str(x), decode(test))))"
    },
    {
      "rank": 34,
      "score": 9.660432686784862,
      "candidate": "# Definition for a run-length encoded string.\nclass RLEString(object):\n    def __init__(self, str):\n        \"\"\"\n        :type str: str\n        \"\"\"\n        self.runs = []\n        for i in range(len(str)):\n            if i == 0:\n                self.runs.append(str[i:])\n            else:\n                if str[i] == str[i-1]:\n                    self.runs[-1] += str[i]\n                else:\n                    self.runs.append(str[i])\n\n    def __str__(self):\n        return ''.join(self.runs)\n\n\nclass Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        rle = RLEString(s)\n        rle.decode()\n        return rle\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = 'AAAAABBBBBB'\n    rle = sol.decode(s)\n    print rle"
    },
    {
      "rank": 35,
      "score": 9.647528640246492,
      "candidate": "class Solution(object):\n    def __init__(self):\n        self.cache = {}\n\n    def decode(self, encoded):\n        \"\"\"\n        :type encoded: List[int]\n        :rtype: List[int]\n        \"\"\"\n        self.cache.clear()\n        l = len(encoded)\n        if l == 0:\n            return []\n\n        # first item is the length of the run\n        run = encoded[0]\n        if run == 0:\n            return [0]\n\n        # second item is the number of times the run repeats\n        repeat = encoded[1]\n        if repeat == 0:\n            return []\n\n        # now we know the length of the run and the number of times it repeats\n        # the first item is the length of the run\n        # the second item is the number of times the run repeats\n        # the rest of the list is the run itself\n        return [run, repeat] + encoded[2:]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decode([0, 1, 0]))\n    print(sol.decode([1, 1, 1, 1, 1]))\n    print(sol.decode([1, 1, 1, 1, 1, 1]))\n    print(sol.decode([1, 1, 1, 1, 1, 1, 1]))\n    print(sol.decode([1, 1, 1, 1, 1, 1, 1, 1]))"
    },
    {
      "rank": 36,
      "score": 9.618629888281092,
      "candidate": "import collections\nimport sys\n\n\nclass RLEList:\n    \"\"\"\n    A run-length encoded list.\n    \"\"\"\n\n    def __init__(self, lst):\n        \"\"\"\n        Initialize a run-length encoded list.\n\n        :type lst: list\n        :param lst: the list to be encoded\n        \"\"\"\n        self._lst = lst\n        self._rle_lst = collections.defaultdict(int)\n        for i in range(1, len(lst) + 1):\n            self._rle_lst[lst[i - 1]] += 1\n            self._rle_lst[lst[i]] += self._rle_lst[lst[i - 1]]\n\n    def decode(self):\n        \"\"\"\n        Decode a run-length encoded list.\n\n        :rtype: list\n        :return: the decoded list\n        \"\"\"\n        return [self._lst[i] for i in range(1, len(self._lst) + 1)\n                if self._rle_lst[self._lst[i]] == 1]\n\n\ndef main():\n    \"\"\"\n    Main function used for testing.\n    \"\"\"\n    rle_lst = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]\n    rle_lst_decode = [[1, 1, 1, 1, 1], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]\n    rle_lst = RLEList(rle_lst)\n    rle_lst_decode = RLEList(rle_lst_decode)\n    assert rle_lst.decode() == rle_lst_decode.decode()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 9.535339310917468,
      "candidate": "# Definition for a run-length encoded string.\nclass RunLengthEncodedString(object):\n    def __init__(self, s):\n        \"\"\"\n        :type s: str\n        \"\"\"\n        self.lens = list(map(lambda x: len(x), s))\n        self.data = list(map(lambda x: s[x], xrange(0, len(s))))\n\n    def get_next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        cur = 0\n        for i in xrange(1, len(self.lens)):\n            if self.lens[i] == self.lens[i-1] + 1:\n                cur += self.data[i]\n            else:\n                yield cur\n                cur = 0\n                self.data[i] = self.data[i-1] + 1\n        yield cur\n        cur = 0\n        for i in xrange(len(self.lens) - 1, -1, -1):\n            if self.lens[i] == self.lens[i+1] + 1:\n                cur += self.data[i]\n            else:\n                yield cur\n                cur = 0\n                self.data[i] = self.data[i+1] + 1\n\n\n# Your RunLengthEncodedString object will be instantiated and called as such:\n# obj = RunLengthEncodedString(s)\n# param_1 = obj.get_next()\n# param_2 = obj.get_next()"
    },
    {
      "rank": 38,
      "score": 9.516582697482633,
      "candidate": "# https://www.hackerearth.com/problem/algorithm/run-length-encoding/\n\n# import time\n# start = time.time()\n\n# def run_length_decode(list):\n    # if not list:\n        # return []\n    # if not is_run_length_encoded(list):\n        # return list\n    # new_list = []\n    # current_pos = 0\n    # for i in range(0, len(list)):\n        # if list[i] == list[current_pos]:\n            # current_pos += 1\n        # else:\n            # if current_pos > 0:\n                # new_list.append(current_pos)\n            # current_pos = i + 1\n    # new_list.append(current_pos)\n    # return new_list\n\n\n# def is_run_length_encoded(list):\n    # if not list:\n        # return False\n    # if not is_run_length_encoded(list[:-1]):\n        # return False\n    # return True\n\n\n# if __name__ == '__main__':\n    # list = [1, 1, 2, 1, 3, 1, 2, 3, 4, 2, 5, 1, 2, 4, 5, 6, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 8, 3, 4, 5, 6, 7, 8, 9, 3, 4, 5, 6, 7, 8, 9, 10]\n    # print(run_length_decode(list))\n    # print(is_run_length_encoded(list))\n    # print(run_length_decode(list))\n    # print(is_run_length_encoded(list))\n    # print(run_length_decode(list))\n    # print(is_run_length_encoded(list))\n    # print(run_length_decode(list))\n    # print(is_run_length_encoded(list))\n    # print(run_length_decode(list))\n    # print(is_run_length_encoded(list))"
    },
    {
      "rank": 39,
      "score": 9.497593217886118,
      "candidate": "def decode_rle(encoded):\n    \"\"\"\n    Input:\n        encoded: List of integers, each representing a run-length\n    Output:\n        Decoded list\n    \"\"\"\n    decoded = []\n    current_run = 0\n    current_value = 0\n    for i in encoded:\n        if i == current_run:\n            current_run += 1\n        else:\n            decoded.append(current_value)\n            current_run = i\n            current_value = 1\n    decoded.append(current_value)\n    return decoded\n\ndef test_rle():\n    assert decode_rle([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert decode_rle([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert decode_rle([2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert decode_rle([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert decode_rle([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nif __name__ == \"__main__\":\n    test_rle()"
    },
    {
      "rank": 40,
      "score": 9.406832445439179,
      "candidate": "# Definition for a run-length encoded sequence.\nclass RLE(object):\n    def __init__(self, lst):\n        self.length = len(lst)\n        self.data = lst\n    def __str__(self):\n        return ''.join(['{0}:{1}'.format(i, len(self.data)) for i in self.data])\n\n# O(n) time, O(n) space\ndef decode(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in xrange(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            result += 1\n        else:\n            result += 1 + lst[i+1]\n    return result\n\n# O(n) time, O(1) space\ndef decode_rl(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(1 for i in lst if i == i+1)\n\n# O(n) time, O(n) space\ndef decode_rl_dec(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in xrange(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            result += 1\n        else:\n            result += 1 + lst[i+1]\n    return result\n\n# O(n) time, O(n) space\ndef decode_rl_dec_2(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in xrange(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            result += 1\n        else:\n            result += 1 + lst[i+1]\n    return result\n\nif __name__ == '__main__':\n    lst = [1, 2, 2"
    },
    {
      "rank": 41,
      "score": 9.401605761790348,
      "candidate": "from collections import defaultdict\nimport itertools\nimport operator\n\n\ndef rle(lst):\n    \"\"\"Run-length encode a list.\"\"\"\n    return list(itertools.chain(*[itertools.repeat(x, n) for x, n in itertools.groupby(lst)]))\n\n\ndef decode_rle(rle_list):\n    \"\"\"Decode a run-length encoded list.\"\"\"\n    d = defaultdict(list)\n    for n in rle_list:\n        d[n].append(n)\n    return dict(d)\n\n\ndef main():\n    \"\"\"Write a function to decode a run-length encoded given list.\"\"\"\n    rle_list = rle([1, 3, 4, 4, 5, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
      "rank": 42,
      "score": 9.37902076404568,
      "candidate": "class Solution(object):\n    def decode(self, lst):\n        \"\"\"\n        :type lst: List[int]\n        :rtype: List[int]\n        \"\"\"\n        def decode(lst):\n            res = []\n            for i in range(len(lst)):\n                if lst[i] == 0:\n                    res.append(lst[i + 1])\n                else:\n                    res.append(res[i] + lst[i + 1])\n            return res\n\n        return decode(lst)\n\nclass Solution(object):\n    def decode(self, lst):\n        \"\"\"\n        :type lst: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        cur = 0\n        for i in range(len(lst)):\n            if lst[i] == 0:\n                cur += 1\n            else:\n                cur += lst[i]\n            res.append(cur)\n        return res"
    },
    {
      "rank": 43,
      "score": 8.960776850863066,
      "candidate": "# Definition for a run-length encoded string.\nclass RLEString:\n    def __init__(self, str):\n        self.str = str\n        self.length = len(str)\n        self.runs = [0] * self.length\n        self.max_run_length = 0\n        self.run_start = 0\n        self.run_end = 0\n        self.last_run_length = 0\n\n    def append_char(self, ch):\n        self.runs[self.run_end] = self.runs[self.run_end] + 1\n        if self.runs[self.run_end] > self.last_run_length:\n            self.last_run_length = self.runs[self.run_end]\n            self.run_start = self.run_end\n            self.run_end += 1\n        elif self.runs[self.run_end] == self.last_run_length:\n            self.run_end += 1\n        else:\n            self.run_end += 1\n            self.runs[self.run_end] = 0\n        self.max_run_length = max(self.max_run_length, self.last_run_length)\n\n    def __str__(self):\n        res = \"\"\n        for i in range(self.run_start, self.run_end):\n            res += self.str[i]\n        return res\n\n    def __len__(self):\n        return self.run_end\n\n    def __iter__(self):\n        return self\n\n    def next(self):\n        if self.run_end >= self.length:\n            raise StopIteration\n        res = self.str[self.run_start:self.run_end]\n        self.run_end += 1\n        self.runs[self.run_end] = 0\n        self.last_run_length = 0\n        return res\n\n    def __next__(self):\n        return self.next()\n\n\ndef rle_decode(string):\n    res = \"\"\n    for c in string:\n        if c == \"0\":\n            res += \"0\"\n        elif c == \"1\":\n            res"
    },
    {
      "rank": 44,
      "score": 8.951996511378214,
      "candidate": "class Solution:\n    # @param nums, a list of integer\n    # @return a list of integer\n    def runLengthDecode(self, nums):\n        result = []\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                result.append(nums[i+1])\n            else:\n                result.append(nums[i+1] + 1)\n        return result"
    },
    {
      "rank": 45,
      "score": 8.928108538188557,
      "candidate": "def decode(encoded_list):\n    \"\"\"\n    :type encoded_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    decoded_list = []\n\n    current_value = 0\n\n    for i in range(len(encoded_list)):\n        if encoded_list[i] == 0:\n            decoded_list.append(current_value)\n            current_value = 0\n        else:\n            current_value += 1\n\n    if current_value > 0:\n        decoded_list.append(current_value)\n\n    return decoded_list"
    },
    {
      "rank": 46,
      "score": 8.766374336394824,
      "candidate": "class Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 0\n            else:\n                d[s[i]] += 1\n        res = []\n        for key in d:\n            res.append(d[key])\n        return res\n\n# Note:\n#  The first element of each row of the input is the number of times the previous row is repeated.\n#  The last element of each row is the number of times the previous row is repeated.\n#  The number of rows is N."
    },
    {
      "rank": 47,
      "score": 8.764097291320297,
      "candidate": "# Definition for a run-length encoded string.\n# class RLEString(object):\n#     def __init__(self, s):\n#         self.s = s\n#         self.len = len(s)\n#         self.counts = [0] * (self.len + 1)\n#         self.counts[0] = 0\n#         self.counts[1] = 1\n#         for i in range(2, self.len + 1):\n#             if self.s[i - 1] == self.s[i - 2]:\n#                 self.counts[i] = self.counts[i - 1]\n#             else:\n#                 self.counts[i] = self.counts[i - 1] + 1\n#                 self.counts[i + 1] = 1\n#         print self.counts\n#         print self.s\n#         for i in range(self.len + 1):\n#             print self.counts[i]\n#         print self.s\n#         print self.counts\n#\n#     def encode(self):\n#         return self.s\n#\n#     def decode(self):\n#         return self.s\n#\n# if __name__ == '__main__':\n#     s = 'aabcccdddeeeffgghhiiii'\n#     rle = RLEString(s)\n#     print rle.encode()\n#     rle.decode()\n#     print rle.decode()\n#     rle.decode()\n#     print rle.decode()\n#     rle.decode()\n#     print rle.decode()\n#     rle.decode()\n#     print rle.decode()"
    },
    {
      "rank": 48,
      "score": 8.74652714328613,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef decode(run_list):\n    \"\"\"\n    Decode run-length encoded list.\n    \"\"\"\n    if not run_list:\n        return []\n    dictionary = dict()\n    for i in range(0, len(run_list)):\n        if run_list[i] in dictionary:\n            dictionary[run_list[i]] += 1\n        else:\n            dictionary[run_list[i]] = 1\n    decoded = []\n    for key in dictionary:\n        decoded.append(key)\n        decoded.append(dictionary[key])\n    return decoded\n\ndef main():\n    try:\n        with open(sys.argv[1]) as f:\n            run_list = f.readlines()\n    except IOError:\n        print(\"Input file not found!\")\n        sys.exit(1)\n\n    print(decode(run_list))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.715672270888268,
      "candidate": "import sys\n\ndef decode(lst):\n    d = {}\n    for i,c in enumerate(lst):\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n\ndef print_decoded(d):\n    for c,n in d.items():\n        print(c, n, sep='\\t')\n\ndef main():\n    with open(sys.argv[1]) as f:\n        lines = f.readlines()\n    lst = [x.strip() for x in lines]\n    d = decode(lst)\n    print_decoded(d)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 50,
      "score": 8.71257796583453,
      "candidate": "class Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        n = len(s)\n        if n == 0:\n            return []\n        run = 0\n        res = []\n        for i in xrange(n):\n            if s[i] == '1':\n                run += 1\n            else:\n                if run > 0:\n                    res.append(run)\n                    run = 0\n                res.append(i - run)\n        if run > 0:\n            res.append(run)\n        return res"
    },
    {
      "rank": 51,
      "score": 8.658181662017673,
      "candidate": "def decode(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not l:\n        return []\n    d = {}\n    for i in range(0, len(l)):\n        if l[i] not in d:\n            d[l[i]] = 1\n        else:\n            d[l[i]] += 1\n    return [d[i] for i in range(1, len(l)+1)]"
    },
    {
      "rank": 52,
      "score": 8.646297619761931,
      "candidate": "def run_length_decode(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            res.append(lst[i])\n    return res"
    },
    {
      "rank": 53,
      "score": 8.623489258827814,
      "candidate": "from collections import Counter\nimport sys\n\ndef rle(l):\n    \"\"\"\n    >>> rle([1, 1, 2, 2, 3])\n    [1, 1, 2, 2, 3]\n    >>> rle([1, 1, 2, 2, 3, 2])\n    [1, 1, 2, 2, 3]\n    \"\"\"\n    rle = []\n    for i in l:\n        if i == 0:\n            rle.append(i)\n        else:\n            rle.append(i-rle[-1])\n    return rle\n\ndef main(args):\n    with open(args[0]) as f:\n        l = [int(x) for x in f.read().strip().split(' ')]\n        rle(l)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"
    },
    {
      "rank": 54,
      "score": 8.60836011493815,
      "candidate": "#!/usr/bin/env python\n\ndef decode_run_length_encoding(input):\n    \"\"\"\n    Decode the run-length encoding of a list\n    >>> decode_run_length_encoding([1,2,1,2,2,3,2,2])\n    [1, 2, 1, 2, 2, 3, 2, 2]\n    >>> decode_run_length_encoding([1,2,1,2,2,3,2,2,1,2,1,2])\n    [1, 2, 1, 2, 2, 3, 2, 2, 1, 2, 1, 2]\n    \"\"\"\n    dic = {}\n    for i in range(len(input)):\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n\n    res = []\n    for i in dic:\n        res.append(i)\n\n    return res"
    },
    {
      "rank": 55,
      "score": 8.568424790498517,
      "candidate": "from collections import deque\n\n\ndef decode(encoded_list):\n    \"\"\"\n    Decode a run-length encoded list.\n\n    The encoded_list is a list of numbers, where each number is a run-length.\n    For example, [3,2,3,3] is encoded as [3,2,3,3] with a length of 3.\n\n    :param encoded_list: A list of numbers, where each number is a run-length.\n    :return: A list of integers.\n    \"\"\"\n    decoded_list = []\n\n    for i, item in enumerate(encoded_list):\n        if item == 0:\n            decoded_list.append(decoded_list[i - 1] + 1)\n        else:\n            decoded_list.append(decoded_list[i - 1] + 1)\n\n    return decoded_list\n\n\ndef main():\n    \"\"\"\n    Simple tests.\n    \"\"\"\n    print(decode([3, 2, 3, 3]))\n    print(decode([0, 2, 3, 3]))\n    print(decode([3, 0, 3, 3]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.563784332710163,
      "candidate": "from __future__ import print_function\nfrom collections import deque\nimport sys\n\ndef decode_rl(lst):\n    \"\"\"\n    Decode a run-length encoded list.\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append(lst[i])\n        elif lst[i] == lst[i-1]:\n            result.append(lst[i])\n        else:\n            result.append(lst[i] - 1)\n    return result\n\ndef decode_rl2(lst):\n    \"\"\"\n    Decode a run-length encoded list.\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    d = deque()\n    for i in lst:\n        if i == 0:\n            d.append(i)\n        else:\n            while d and d[-1] == i-1:\n                d.pop()\n            d.append(i)\n    for i in range(len(d)):\n        result.append(d[i])\n    return result\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6]\n    print(decode_rl(lst))\n    print(decode_rl2(lst))\n    print(decode_rl(sys.argv[1:]))\n    print(decode_rl2(sys.argv[1:]))\n    print(decode_rl2(decode_rl(sys.argv[1:])))"
    },
    {
      "rank": 57,
      "score": 8.562291593043321,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\ndef main():\n    \n    if len(sys.argv)!= 2:\n        print \"Usage: %s <file>\" % sys.argv[0]\n        sys.exit(1)\n    \n    with open(sys.argv[1], \"rb\") as f:\n        \n        for line in f:\n            \n            # skip lines\n            if not line.strip():\n                continue\n            \n            # read line\n            l = line.strip().split(\" \")\n            \n            # skip first line\n            if len(l) < 2:\n                continue\n            \n            # read run length\n            rl = int(l[0])\n            \n            # skip lines without run length\n            if rl < 0:\n                continue\n            \n            # skip lines without run length\n            if rl > 0:\n                \n                # read list\n                l = l[1:]\n                \n                # decode list\n                for i in range(rl):\n                    \n                    # read index\n                    idx = int(l.pop(0))\n                    \n                    # print index\n                    print \"%d\" % idx\n            \n            # skip lines without run length\n            if rl > 0:\n                continue\n            \n            # read list\n            l = l[1:]\n            \n            # decode list\n            for i in range(rl):\n                \n                # read index\n                idx = int(l.pop(0))\n                \n                # print index\n                print \"%d\" % idx\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.557838480002037,
      "candidate": "from collections import deque\n\ndef decode_rle(rle_list):\n    \"\"\"\n    Decode the run-length encoded list.\n\n    :param rle_list: A list of integers.\n    :return: A list of integers.\n    \"\"\"\n    d = {}\n    for i in rle_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    result = []\n    while d:\n        result.append(min(d, key=d.get))\n        del d[min(d, key=d.get)]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    rle_list = [1, 2, 4, 5, 6, 7, 9, 10, 11]\n    print(decode_rle(rle_list))"
    },
    {
      "rank": 59,
      "score": 8.530592684263809,
      "candidate": "from collections import defaultdict\n\nclass Solution:\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        counts = defaultdict(int)\n        for c in s:\n            counts[c] += 1\n        for c in counts:\n            result.append(counts[c])\n        return result\n\n\nif __name__ == \"__main__\":\n    assert Solution().decode(\"\") == []\n    assert Solution().decode(\"a\") == [1]\n    assert Solution().decode(\"aa\") == [1, 1]\n    assert Solution().decode(\"aaa\") == [1, 1, 1]\n    assert Solution().decode(\"aaaabbbbcccc\") == [1, 2, 3, 1, 2, 3]\n    assert Solution().decode(\"aaabbbbcccc\") == [1, 1, 1, 2, 2, 2, 2, 3, 3, 3]"
    },
    {
      "rank": 60,
      "score": 8.46672875199146,
      "candidate": "def decode(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    counts = {}\n    for c in s:\n        counts[c] = counts.get(c, 0) + 1\n\n    output = []\n    for k in counts:\n        if counts[k] == 1:\n            output.append(k)\n        else:\n            for i in range(counts[k]):\n                output.append(k)\n    return output"
    },
    {
      "rank": 61,
      "score": 8.439990360280927,
      "candidate": "from collections import deque\n\ndef rle_decode(input_list):\n    \"\"\"\n    Decode a run-length encoded list.\n    \n    :param input_list: List of integers.\n    :return: List of integers.\n    \"\"\"\n    output_list = []\n    \n    for i in range(len(input_list)):\n        if i + 1 < len(input_list) and input_list[i] == input_list[i + 1]:\n            output_list.append(input_list[i])\n            i += 1\n        else:\n            output_list.append(input_list[i])\n    \n    return output_list\n\ndef rle_decode_iter(input_list):\n    \"\"\"\n    Decode a run-length encoded list using a generator.\n    \n    :param input_list: List of integers.\n    :return: List of integers.\n    \"\"\"\n    output_list = []\n    \n    for i in range(len(input_list)):\n        if i + 1 < len(input_list) and input_list[i] == input_list[i + 1]:\n            output_list.append(input_list[i])\n            i += 1\n        else:\n            yield output_list\n            output_list = [input_list[i]]\n    \n    yield output_list\n\ndef rle_decode_recursive(input_list):\n    \"\"\"\n    Decode a run-length encoded list using a recursive function.\n    \n    :param input_list: List of integers.\n    :return: List of integers.\n    \"\"\"\n    if len(input_list) == 0:\n        return []\n    \n    if len(input_list) == 1:\n        return [input_list[0]]\n    \n    if len(input_list) == 2:\n        return [input_list[0], input_list[1]]\n    \n    output_list = []\n    \n    for i in range(2, len(input_list)):\n        output_list.append(input_list[i - 1])\n        if input_list[i] == input_list[i - 1]:\n            output"
    },
    {
      "rank": 62,
      "score": 8.420681104322934,
      "candidate": "def decode(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for i in range(len(l)):\n        if i == 0:\n            res.append(l[i])\n        else:\n            res.append(l[i] + l[i-1])\n    return res"
    },
    {
      "rank": 63,
      "score": 8.371952721458065,
      "candidate": "# Definition for a run-length encoded string.\nclass RLEString:\n    def __init__(self, s):\n        self.s = s\n        self.counts = {}\n        self.rle = 0\n\n    def __str__(self):\n        return self.s\n\n    def __repr__(self):\n        return str(self)\n\n    def __len__(self):\n        return len(self.s)\n\n    def __iter__(self):\n        return iter(self.s)\n\n    def __eq__(self, other):\n        return self.s == other.s\n\n    def __ne__(self, other):\n        return self.s!= other.s\n\n    def __hash__(self):\n        return hash(self.s)\n\n    def __add__(self, other):\n        if not isinstance(other, RLEString):\n            return NotImplemented\n        self.counts.update(other.counts)\n        self.rle += other.rle\n        return self\n\n    def __radd__(self, other):\n        if not isinstance(other, RLEString):\n            return NotImplemented\n        self.counts.update(other.counts)\n        self.rle += other.rle\n        return self\n\n    def __mul__(self, other):\n        if not isinstance(other, int):\n            return NotImplemented\n        result = RLEString(self.s)\n        for i in range(self.rle):\n            result.counts[self.s[i]] += 1\n        for i in range(other):\n            result.counts[self.s[i]] += 1\n        result.rle = result.rle + other\n        return result\n\n    def __rmul__(self, other):\n        if not isinstance(other, int):\n            return NotImplemented\n        result = RLEString(self.s)\n        for i in range(self.rle):\n            result.counts[self.s[i]] += 1\n        for i in range(other):\n            result.counts[self.s[i]] += 1\n        result.rle = result."
    },
    {
      "rank": 64,
      "score": 8.367030690430646,
      "candidate": "from collections import deque\n\ndef decode(input):\n    \"\"\"\n    :type input: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # Deque for storing the sequence of numbers\n    d = deque()\n\n    # For each number in the input,\n    # If the number is zero, push it onto the deque and\n    # increment the count by 1.\n    # If the number is one, push it onto the deque and\n    # increment the count by 2.\n    # If the number is two, push it onto the deque and\n    # increment the count by 3.\n    # If the number is three, push it onto the deque and\n    # increment the count by 4.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    # increment the count by 3.\n    # If the number is greater than three, push it onto the deque and\n    #"
    },
    {
      "rank": 65,
      "score": 8.345772018790708,
      "candidate": "# Definition for a run-length encoded string.\nclass RLE(object):\n    def __init__(self, s):\n        self.runs = []\n        self.length = len(s)\n        self.last = -1\n        for i in xrange(len(s)):\n            if i == self.last + 1:\n                self.runs.append(self.last)\n            else:\n                self.runs.append(i)\n            self.last = i\n\nclass Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        rle = RLE(s)\n        decoded = []\n        for i in xrange(len(s)):\n            if i == 0:\n                decoded.append(rle.runs[0])\n                continue\n            if rle.runs[i]!= rle.runs[i - 1] + 1:\n                decoded.append(rle.runs[i])\n            else:\n                decoded.append(rle.runs[i - 1])\n        return decoded\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.decode(\"1B2K3L\")\n    print s.decode(\"1K1B2K2L1K1B2K3L\")\n    print s.decode(\"1K1B2K2L1K1B2K3L1K1B2K2L1K1B2K3L\")\n    print s.decode(\"1K1B2K2L1K1B2K3L1K1B2K2L1K1B2K3L\")"
    },
    {
      "rank": 66,
      "score": 8.31736729190706,
      "candidate": "class Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        counts = {}\n        for i in range(0, len(s)):\n            if s[i] in counts:\n                counts[s[i]] += 1\n            else:\n                counts[s[i]] = 1\n        res = []\n        for i in range(0, len(s)):\n            if s[i] in counts:\n                res.append(counts[s[i]])\n            else:\n                res.append(1)\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = 'AAAABBBBBBBBBB'\n    print(sol.decode(s))\n\n    s
    },
    {
      "rank": 67,
      "score": 8.315048753910833,
      "candidate": "#!/usr/bin/python\n\nimport sys\n\ndef decode_run_length_encoding(l):\n  # write your code here\n  # return the decoded list\n  return [1] * (len(l) - 1) + [0] + l[:-1]\n\ndef main():\n  with open(sys.argv[1], 'r') as f:\n    l = f.readlines()\n  print decode_run_length_encoding(l)\n\nif __name__ == '__main__':\n  main()"
    },
    {
      "rank": 68,
      "score": 8.292433650027714,
      "candidate": "import collections\n\ndef decode_rle(string):\n    \"\"\"\n    Decode the given string of run-length encoded values.\n\n    Input:\n        string: a string of run-length encoded values.\n\n    Output:\n        The decoded string.\n    \"\"\"\n    decoded = []\n    current_value = 0\n    for i in range(0, len(string)):\n        if string[i] == '1':\n            current_value += 1\n        else:\n            decoded.append(current_value)\n            current_value = 0\n    decoded.append(current_value)\n    return decoded\n\n\ndef decode_rle2(string):\n    \"\"\"\n    Decode the given string of run-length encoded values.\n\n    Input:\n        string: a string of run-length encoded values.\n\n    Output:\n        The decoded string.\n    \"\"\"\n    decoded = []\n    current_value = 0\n    for i in range(0, len(string)):\n        if string[i] == '1':\n            current_value += 1\n            decoded.append(current_value)\n        else:\n            current_value = decoded[-1]\n            decoded.append(current_value)\n    return decoded\n\n\ndef decode_rle3(string):\n    \"\"\"\n    Decode the given string of run-length encoded values.\n\n    Input:\n        string: a string of run-length encoded values.\n\n    Output:\n        The decoded string.\n    \"\"\"\n    decoded = []\n    current_value = 0\n    for i in range(0, len(string)):\n        if string[i] == '1':\n            current_value += 1\n            decoded.append(current_value)\n        else:\n            current_value = decoded[-1]\n            decoded.append(current_value)\n    return decoded\n\n\ndef main():\n    print(decode_rle(\"1\"))\n    print(decode_rle2(\"1\"))\n    print(decode_rle3(\"1\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.291516605816332,
      "candidate": "import sys\n\ndef decode(encoded):\n    \"\"\"\n    Encoded is a string.\n    Decode it and return a list of integers.\n    \"\"\"\n    decoded = []\n    current = 0\n    for i in range(len(encoded)):\n        if encoded[i] == '1':\n            current += 1\n        else:\n            decoded.append(current)\n            current = 0\n    decoded.append(current)\n    return decoded\n\nif __name__ == \"__main__\":\n    encoded = sys.argv[1]\n    decoded = decode(encoded)\n    print decoded"
    },
    {
      "rank": 70,
      "score": 8.28951789708591,
      "candidate": "class Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        i = 0\n        for c in s:\n            if c == '+':\n                res.append(i)\n                i += 1\n            else:\n                res.append(res[i-1])\n                i += 1\n        return res"
    },
    {
      "rank": 71,
      "score": 8.095399837888998,
      "candidate": "from collections import defaultdict\n\ndef decode(lst):\n    \"\"\"Decode run-length encoded list.\n\n    >>> decode([1, 1, 2, 3, 1, 1, 4, 3, 3, 2, 1, 1])\n    [1, 2, 3, 4, 3, 2, 1]\n\n    >>> decode([0, 0, 0, 1, 1, 1, 2, 2, 3, 4])\n    [0, 0, 0, 1, 1, 1, 2, 2, 3, 4]\n\n    >>> decode([0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4])\n    [0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4]\n    \"\"\"\n    dict = defaultdict(int)\n    for i in lst:\n        dict[i] += 1\n        if dict[i] == 1:\n            del dict[i]\n    return [dict[i] for i in lst]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.006143048307962,
      "candidate": "def decode_run_length_encoding(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    prev = 0\n    for curr in lst:\n        if curr == prev:\n            result.append(curr)\n        else:\n            result.append(curr - prev)\n            prev = curr\n    return result"
    },
    {
      "rank": 73,
      "score": 7.862641193174742,
      "candidate": "# Definition for a run-length encoded run.\nclass Run:\n    def __init__(self, value, count):\n        self.value = value\n        self.count = count\n\n    def __repr__(self):\n        return \"Run({}, {})\".format(self.value, self.count)\n\nclass Solution:\n    def decodeRun(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        runs = []\n        curr = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                runs.append(Run(curr, 1))\n                curr += 1\n            else:\n                runs[-1].count += 1\n                curr = 0\n        return runs\n\ns = Solution()\n#print s.decodeRun(\"10\")\n#print s.decodeRun(\"1110\")\n#print s.decodeRun(\"100110\")\n#print s.decodeRun(\"1010010\")\n#print s.decodeRun(\"1011010\")\nprint s.decodeRun(\"101101101\")\nprint s.decodeRun(\"10110110101\")\nprint s.decodeRun(\"1011011010101\")\nprint s.decodeRun(\"101101101010101\")\nprint s.decodeRun(\"10110110101010101\")\nprint s.decodeRun(\"1011011010101010101\")"
    },
    {
      "rank": 74,
      "score": 7.813061963707371,
      "candidate": "# Definition for a run-length encoded vector.\nclass RunLength(object):\n    def __init__(self, vector):\n        self.vector = vector\n        self.len = len(vector)\n        self.counts = {}\n\n    def __len__(self):\n        return self.len\n\n    def __getitem__(self, idx):\n        if idx not in self.counts:\n            self.counts[idx] = 1\n        else:\n            self.counts[idx] += 1\n\n        if self.counts[idx] == 1:\n            return self.vector[idx]\n        else:\n            return self.vector[idx] + self.counts[idx]\n\n    def __iter__(self):\n        return iter(self.vector)\n\n    def __repr__(self):\n        return str(self.vector)\n\n    def __str__(self):\n        return str(self.vector)\n\ndef decode(vector):\n    \"\"\"\n    :type vector: List[int]\n    :rtype: RunLength\n    \"\"\"\n    if vector == []:\n        return RunLength([])\n\n    i = 0\n    rle_vector = []\n    while i < len(vector):\n        if vector[i] == 0:\n            rle_vector.append(vector[i])\n            i += 1\n        else:\n            count = vector[i]\n            rle_vector.append(vector[i] + count)\n            i += 1\n\n    return RunLength(rle_vector)\n\n\n\nif __name__ == \"__main__\":\n    vector = [0, 1, 0, 1, 1]\n    rle = RunLength(vector)\n    print(rle)\n    decode(vector)\n    print(rle)"
    },
    {
      "rank": 75,
      "score": 7.797753303564119,
      "candidate": "from collections import defaultdict\nimport sys\n\n\nclass Solution:\n    def decode(self, encoded):\n        \"\"\"\n        :type encoded: str\n        :rtype: List[int]\n        \"\"\"\n        decoded = defaultdict(int)\n        for c in encoded:\n            if c == '+':\n                decoded[c] += 1\n            elif c == '-':\n                decoded[c] -= 1\n            else:\n                decoded[c] += 1\n        return [decoded[c] for c in range(256)]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    encoded = '+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+B+A+"
    },
    {
      "rank": 76,
      "score": 3.394803203876848,
      "candidate": "# Definition for a run-length encoded vector.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def runLengthDecode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        count = 0\n        curr = head\n        while curr:\n            count += 1\n            curr = curr.next\n        curr = head\n        for i in range(count-1):\n            curr = curr.next\n        curr.next = None\n        curr = head\n        last = head\n        while curr:\n            if curr.next:\n                last = curr\n                while curr.next and curr.next.val == curr.val+1:\n                    curr = curr.next\n                if curr.val!= curr.next.val:\n                    curr.next = curr.next.next\n                else:\n                    curr.val += 1\n                    curr.next = curr.next.next\n            else:\n                last = curr\n                break\n        return last"
    },
    {
      "rank": 77,
      "score": 3.250883224473006,
      "candidate": "class Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        if not s: return []\n        decode = {0: [0]}\n        i = 0\n        while i < len(s):\n            c = s[i]\n            if c == '_':\n                i += 1\n                continue\n            while i < len(s) and s[i] == c:\n                i += 1\n            decode[c] = decode[c] + [i]\n        return decode[s[0]]"
    },
    {
      "rank": 78,
      "score": 3.128316858278339,
      "candidate": "class Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        if s == '':\n            return []\n        d = {}\n        for i, c in enumerate(s):\n            if c not in d:\n                d[c] = i\n            else:\n                d[c] = d[c] + 1\n        r = []\n        for i, c in d.items():\n            r.append(i)\n        return r"
    },
    {
      "rank": 79,
      "score": 3.081020992348699,
      "candidate": "class Solution:\n    # @param {string} str\n    # @return {string}\n    def decode(self, s):\n        d = {}\n        i = 0\n        for c in s:\n            if c in d:\n                d[c] += 1\n            else:\n                d[c] = 1\n            i += 1\n            if i >= len(s):\n                break\n        return ''.join([chr(k) for k in sorted(d.keys())])\n\nif __name__ == '__main__':\n    print Solution().decode('1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z1')\n    print Solution().decode('1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z1')\n    print Solution().decode('1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z1')"
    },
    {
      "rank": 80,
      "score": 3.049215308967281,
      "candidate": "# Definition for a run-length encoded sequence.\n# https://leetcode.com/problems/decode-ways/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param {string[]} encoded\n    # @return {integer[]}\n    def decode(self, encoded):\n        if encoded == []:\n            return []\n\n        def dfs(encoded, curr, curr_len):\n            if curr_len == 0:\n                return [curr]\n\n            if curr_len == 1:\n                if curr == '0':\n                    return []\n                else:\n                    return [curr]\n\n            new_curr_len = curr_len - 1\n            if encoded[curr_len - 1] == '1':\n                new_curr_len = curr_len - 1\n            else:\n                new_curr_len = curr_len\n\n            return dfs(encoded, curr + '0', new_curr_len) + dfs(encoded, curr + '1', new_curr_len)\n\n        return dfs(encoded, '', len(encoded))\n\n\nif __name__ == '__main__':\n    encoded = [ '01', '001', '101', '11', '10', '100', '110', '111', '011']\n    print(encoded)\n    print(Solution().decode(encoded))"
    },
    {
      "rank": 81,
      "score": 3.0428420702974925,
      "candidate": "# https://leetcode.com/problems/decode-ways/\n\n\nclass Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        # write your code here\n        r = []\n        for i in range(len(s)):\n            if s[i] == '1':\n                r.append('1')\n            elif s[i] == '0':\n                if len(r) == 0:\n                    break\n                else:\n                    r[-1] += '0'\n            else:\n                if len(r) > 0:\n                    r[-1] += s[i]\n                else:\n                    r.append(s[i])\n        return r\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.decode('11')"
    },
    {
      "rank": 82,
      "score": 3.0277306474274663,
      "candidate": "from typing import List\n\nclass Solution:\n    def decode(self, s: str) -> List[int]:\n        \"\"\"\n        Do not return anything, modify argument instead.\n        \"\"\"\n        decoded = []\n        run_lengths = {}\n        for i, c in enumerate(s):\n            if c not in run_lengths:\n                run_lengths[c] = i\n            else:\n                run_lengths[c] += 1\n                decoded.append(run_lengths[c])\n                run_lengths[c] = i + 1\n        return decoded"
    },
    {
      "rank": 83,
      "score": 3.02426938733701,
      "candidate": "class Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        if not s: return []\n        ret = []\n        ret_idx = 0\n        for i in range(1, len(s)):\n            if s[i-1] == '+':\n                ret.append(ret_idx)\n                ret_idx += 1\n            else:\n                ret_idx += 1\n        return ret"
    },
    {
      "rank": 84,
      "score": 3.001278364160615,
      "candidate": "def runlength_decode(encoded):\n    \"\"\"\n    :type encoded: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(len(encoded)):\n        if encoded[i] == 0:\n            result.append(encoded[i+1])\n            i += 1\n        else:\n            result.append(encoded[i+1] + 1)\n    return result\n\n# Your Solution\n# TODO: Write code to solve this problem.\n\nif __name__ == '__main__':\n    import unittest\n    unittest.main()"
    },
    {
      "rank": 85,
      "score": 2.953585255834046,
      "candidate": "# Definition for a run-length encoded string.\n# class RLEncodedString(object):\n#     def __init__(self, s):\n#         self.s = s\n#         self.len = len(s)\n#         self.count = 0\n#         self.cnt = 0\n#         self.idx = 0\n#     def __str__(self):\n#         return \"RLEncodedString(\" + str(self.s) + \", \" + str(self.count) + \", \" + str(self.cnt) + \", \" + str(self.idx) + \")\"\n\nclass Solution(object):\n    def decode(self, encoded):\n        \"\"\"\n        :type encoded: str\n        :rtype: str\n        \"\"\"\n        if encoded == \"\":\n            return \"\"\n        if encoded == \"0\":\n            return \"\"\n        r = 0\n        w = 0\n        for c in encoded:\n            if c == \"1\":\n                r += 1\n                w = 0\n            elif c == \"2\":\n                r += 1\n                w = 1\n            elif c == \"3\":\n                r += 2\n                w = 1\n            elif c == \"4\":\n                r += 3\n                w = 2\n            elif c == \"5\":\n                r += 4\n                w = 3\n            elif c == \"6\":\n                r += 5\n                w = 4\n            elif c == \"7\":\n                r += 6\n                w = 5\n            elif c == \"8\":\n                r += 7\n                w = 6\n            elif c == \"9\":\n                r += 8\n                w = 7\n            elif c == \"10\":\n                r += 9\n                w = 8\n            elif c == \"11\":\n                r += 10\n                w = 9\n            elif c == \"12\":\n                r += 11\n                w = 10\n            elif c == \"13\":\n                r += 12\n                w = 11\n            elif c == \"14\":\n                r += 13\n                w = 12\n            elif c == \"15\":\n                r += 14\n                w = 13\n            elif c == \"16\":"
    },
    {
      "rank": 86,
      "score": 2.941461656319166,
      "candidate": "from collections import deque\n\n\nclass RLEList:\n    def __init__(self, list_):\n        self.list = list_\n\n    def __str__(self):\n        return str(self.list)\n\n    def __repr__(self):\n        return str(self.list)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if len(self.list) == 0:\n            raise StopIteration\n\n        while len(self.list) > 1:\n            if self.list[0] == self.list[1]:\n                self.list = self.list[1:]\n            else:\n                break\n\n        return self.list.pop(0)\n\n    def __len__(self):\n        return len(self.list)\n\n\ndef decode(rle_list):\n    \"\"\"\n    Decode a run-length encoded list.\n    :param rle_list: Run-length encoded list.\n    :return: Decoded list.\n    \"\"\"\n    rle_list = RLEList(rle_list)\n\n    for i in range(len(rle_list)):\n        if rle_list[i] == 0:\n            continue\n        else:\n            rle_list.list.append(rle_list[i] - 1)\n\n    return rle_list\n\n\ndef test_decode():\n    assert decode([\"1\"]) == [\"1\"]\n    assert decode([\"1\", \"1\"]) == [\"1\", \"1\"]\n    assert decode([\"1\", \"1\", \"0\"]) == [\"1\", \"1\", \"0\"]\n    assert decode([\"1\", \"1\", \"0\", \"0\", \"0\"]) == [\"1\", \"1\", \"0\", \"0\", \"0\"]\n    assert decode([\"1\", \"1\", \"1\"]) == [\"1\", \"1\", \"1\"]\n    assert decode([\"1\", \"1\", \"1\", \"1\"]) == [\"1\", \"1\", \"1\", \"1\"]\n\n\ndef test_decode_iter():\n    assert list(decode([\"1\"])) == [\"1\"]\n    assert list(decode([\"1\", \""
    },
    {
      "rank": 87,
      "score": 2.927076562551681,
      "candidate": "class Solution:\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        n = len(s)\n        d = [0] * n\n        for i in range(1, n):\n            d[i] = d[i - 1] + 1\n        for i in range(n - 1, -1, -1):\n            d[i] += d[i + 1]\n        result = []\n        for i in range(n):\n            result.append(d[i] - 1)\n        return result\n\n    def decode2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        n = len(s)\n        d = [0] * n\n        for i in range(1, n):\n            d[i] = d[i - 1] + 1\n        for i in range(n - 1, -1, -1):\n            d[i] += d[i + 1]\n        result = []\n        i = 0\n        while i < n:\n            if d[i] == 0:\n                result.append(s[i])\n                i += 1\n            else:\n                d[i] -= 1\n        return result\n\n\nif __name__ == \"__main__\":\n    print Solution().decode2(\"1a1b2\")"
    },
    {
      "rank": 88,
      "score": 2.924724076102678,
      "candidate": "# https://leetcode.com/problems/decode-ways/\n\nclass Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        def decode(s):\n            if len(s) == 1:\n                return s[0]\n            n, s = s[0], s[1:]\n            ret = 0\n            for i in range(len(s)):\n                ret += n\n                n, s = s[i], s[i+1:]\n                if n == 0:\n                    return decode(s)\n            return ret\n\n        return decode(s)"
    },
    {
      "rank": 89,
      "score": 2.918084463350558,
      "candidate": "from __future__ import annotations\n\n\ndef rle_decode(data: str) -> list[int]:\n    \"\"\"\n    :type data: str\n    :rtype: list[int]\n    \"\"\"\n    length = 0\n    return_list = []\n\n    for i in data:\n        if i == \"R\":\n            return_list.append(length)\n            length += 1\n        else:\n            return_list.append(length)\n            return_list.append(i)\n            length += 1\n\n    return return_list\n\n\n# Your RLEDecoder object will be instantiated and called as such:\n# obj = RLEDecoder()\n# param_1 = obj.decode(data)"
    },
    {
      "rank": 90,
      "score": 2.8802064405386774,
      "candidate": "def decode(run_length_encoding):\n    # write your code here\n    pass"
    },
    {
      "rank": 91,
      "score": 2.870432445431588,
      "candidate": "#!/usr/bin/env python\n# coding=utf-8\n\nimport unittest\n\n# Definition for a run-length encoded string.\nclass RLEString(object):\n    def __init__(self, s):\n        \"\"\"\n        :type s: str\n        \"\"\"\n        self.data = s\n        self.len = len(s)\n        self.counts = [0] * 256\n        self.rle = 0\n\n    def add(self, ch):\n        self.counts[ord(ch)] += 1\n        self.rle += 1\n        if self.rle >= 255:\n            self.rle -= 255\n            self.counts[ord(self.data[self.rle])] += 1\n        self.data += ch\n\n    def __len__(self):\n        return self.len\n\n    def __str__(self):\n        return self.data\n\n    def __eq__(self, other):\n        return self.data == other.data\n\n\nclass Test(unittest.TestCase):\n\n    def test(self):\n        s = RLEString(\"aab\")\n        s.add('a')\n        s.add('b')\n        s.add('a')\n        s.add('b')\n        s.add('a')\n        s.add('b')\n        s.add('a')\n        s.add('b')\n        s.add('a')\n        s.add('b')\n        s.add('a')\n        s.add('b')\n        s.add('a')\n        s.add('b')\n        s.add('a')\n        self.assertEqual(s, RLEString(\"aababbaaabbbb\"))\n        self.assertEqual(RLEString(\"aababbaaabbbb\").add('a'), RLEString(\"aabbaaabbbb\"))\n        self.assertEqual(RLEString(\"aababbaaabbbb\").add('b'), RLEString(\"aababbaaabbbb\"))\n        self.assertEqual(RLEString(\"aababbaaabbbb\").add('a'), RLEString(\"aabbaaabbbb\"))\n        self.assertEqual(RLEString"
    },
    {
      "rank": 92,
      "score": 2.849840327520299,
      "candidate": "# Definition for a run-length encoded list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def decode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        res = ListNode(0, head)\n        cur = res\n        pre = None\n        while head:\n            head = head.next\n            if head:\n                if pre:\n                    pre.next = head\n                else:\n                    cur.next = head\n                pre = cur\n                cur = ListNode(0, head)\n            else:\n                cur.val += 1\n                pre = None\n        return res"
    },
    {
      "rank": 93,
      "score": 2.8307694999235102,
      "candidate": "# Definition for a run-length encoded vector.\n# https://leetcode.com/problems/decode-ways/\nclass Solution(object):\n    def decode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        if not s:\n            return []\n        r = 0\n        for i, c in enumerate(s):\n            if c == '0':\n                r += 1\n            else:\n                r += -1\n            if r == 0:\n                r = 1\n        return list(range(r))"
    },
    {
      "rank": 94,
      "score": 2.8244867265306617,
      "candidate": "from __future__ import annotations\n\nimport collections\n\nfrom typing import List\n\n\nclass Solution:\n    def decode(self, s: str) -> List[str]:\n        \"\"\"\n        https://leetcode.com/problems/decode-string/\n        \"\"\"\n        decoded = []\n        prev = \"\"\n        for c in s:\n            if c == \"0\":\n                decoded.append(prev)\n                prev = \"\"\n            else:\n                prev = prev + c\n        decoded.append(prev)\n        return list(reversed(decoded))\n\n\ndef main():\n    sol = Solution()\n    print(sol.decode(\"1\"))\n    print(sol.decode(\"11\"))\n    print(sol.decode(\"110\"))\n    print(sol.decode(\"1110\"))\n    print(sol.decode(\"1110\"))\n    print(sol.decode(\"11101\"))\n    print(sol.decode(\"1110101\"))\n    print(sol.decode(\"111010101\"))\n    print(sol.decode(\"11101010101\"))\n    print(sol.decode(\"1110101010101\"))\n    print(sol.decode(\"111010101010101\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 95,
      "score": 2.746792219916394,
      "candidate": "class Solution:\n    def decode(self, encoded):\n        \"\"\"\n        :type encoded: str\n        :rtype: List[int]\n        \"\"\"\n        encoded = encoded.split(' ')\n        res = []\n        for i in range(len(encoded)):\n            if encoded[i] == '1':\n                res.append(res[-1] + 1)\n            else:\n                res.append(res[-1])\n        return res"
    },
    {
      "rank": 96,
      "score": 2.694789087507244,
      "candidate": "import os\n\n# @include\ndef decode(run_length_encoding):\n    if not run_length_encoding:\n        return []\n    result = []\n    current_run_length = 0\n    for c in run_length_encoding:\n        if c == '+':\n            current_run_length += 1\n        elif c == '-':\n            current_run_length -= 1\n        else:\n            result.append(current_run_length)\n            current_run_length = 0\n    result.append(current_run_length)\n    return result\n# @exclude\n\n\ndef simple_test():\n    assert decode([]) == []\n    assert decode([\"+\"]) == [1]\n    assert decode([\"+\", \"+\", \"-\"]) == [3, 1, -1]\n    assert decode([\"+\", \"+\", \"-\"]) == [3, 1, -1]\n    assert decode([\"+\", \"+\", \"+\", \"+\"]) == [3, 2, 2, 1]\n    assert decode([\"+\", \"+\", \"+\", \"+\", \"+\"]) == [3, 2, 2, 1, 1]\n    assert decode([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\"]) == [3, 2, 2, 1, 1, 1, 1]\n    assert decode([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\"]) == [3, 2, 2, 1, 1, 1, 1, 1]\n    assert decode([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\"]) == [3, 2, 2, 1, 1, 1, 1, 1, 1]\n    assert decode([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\"]) == [3, 2, 2, 1, 1, 1, 1, 1, 1, 1]\n    assert decode([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\"]) == [3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1]\n    assert decode([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\","
    },
    {
      "rank": 97,
      "score": 2.6341212629669704,
      "candidate": "# https://leetcode.com/problems/decode-ways/\n\nclass Solution:\n    # @param {List[int]} nums\n    # @return {List[int]}\n    def decode(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        prev = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                prev = 0\n            else:\n                prev += nums[i]\n            res.append(prev)\n        return res"
    },
    {
      "rank": 98,
      "score": 2.568770541871742,
      "candidate": "# -*- coding: utf-8 -*-\n#\n# Author: https://github.com/snake\n#\n\nimport unittest\nfrom collections import deque\nfrom my.rle import rle_decode\nfrom my.rle import rle_encode\n\n__author__ ='snake'\n\n\nclass TestRle(unittest.TestCase):\n    def test_rle_encode(self):\n        self.assertEqual(rle_encode(deque(range(1, 10))), '10010')\n        self.assertEqual(rle_encode(deque(range(1, 100))), '100100100')\n\n    def test_rle_decode(self):\n        self.assertEqual(rle_decode(rle_encode(deque(range(1, 10)))), deque(range(1, 10)))\n        self.assertEqual(rle_decode(rle_encode(deque(range(1, 100)))), deque(range(1, 100)))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 99,
      "score": 2.503107771349777,
      "candidate": "from collections import defaultdict\n\n\ndef decode_rle(runs):\n    \"\"\"\n    Decode a run-length encoded list.\n\n    Run-length encoded list is a list of integers with the same value.\n    \"\"\"\n    runs = list(runs)\n    decoded_list = []\n    for i, run in enumerate(runs):\n        if run > 0:\n            decoded_list.append(i)\n            decoded_list.append(run)\n        else:\n            decoded_list.append(i)\n    return decoded_list\n\n\ndef test_decode_rle():\n    assert decode_rle(range(1, 7)) == [0, 1, 2, 3, 4, 5, 6]\n    assert decode_rle([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
      "rank": 100,
      "score": 2.345063723977564,
      "candidate": "from typing import List\n\n\nclass Solution(object):\n    def decode(self, s: str) -> List[str]:\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        ans = []\n        curr_char = ''\n        for c in s:\n            if c == '0':\n                ans.append(curr_char)\n                curr_char = ''\n            else:\n                curr_char += c\n        ans.append(curr_char)\n        return ans"
    }
  ]
}