{
  "timestamp": "2025-09-14T18:43:48.889021",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 184,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def firstPosition(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n\n        i = 0\n        while i < len(head.next) and head.val > head.next.val:\n            i += 1\n            head = head.next\n\n        if i == len(head.next):\n            return 0\n\n        while i > 0 and head.val < head.next.val:\n            i -= 1\n            head = head.next\n\n        return i\n\ns = Solution()\n\nprint s.firstPosition([1,2,3])\nprint s.firstPosition([1,2,4,5,6])"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Your code should be self-contained.\n# DO NOT import other modules.\n\ndef binary_search(arr, target, low=0, high=len(arr)):\n    if low >= high:\n        return -1\n    mid = low + (high - low) // 2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search(arr, target, low, mid - 1)\n    else:\n        return binary_search(arr, target, mid + 1, high)\n\ndef find(arr, target):\n    return binary_search(arr, target)\n\n# Your code should be self-contained.\n# DO NOT import other modules.\n\ndef main():\n    arr = [10, 5, 7, 6, 9, 1, 3, 8]\n    print(find(arr, 9))\n    print(find(arr, 5))\n    print(find(arr, 7))\n    print(find(arr, 1))\n    print(find(arr, 0))\n    print(find(arr, 10))\n    print(find(arr, 3))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/sorted-array-search/problem\n\ndef find_first_index(arr, value):\n    for i in range(0, len(arr)):\n        if arr[i] == value:\n            return i\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(find_first_index(arr, 8))\n    print(find_first_index(arr, 6))\n    print(find_first_index(arr, 1))\n    print(find_first_index(arr, -1))\n    print(find_first_index(arr, 0))\n    print(find_first_index(arr, 7))\n    print(find_first_index(arr, 9))\n    print(find_first_index(arr, 9))\n    print(find_first_index(arr, None))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_first(arr, elem):\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return i\n    return -1\n\narr = [6, 4, 7, 5, 2, 1, 8, 3]\nprint(find_first(arr, 6))\nprint(find_first(arr, 7))\nprint(find_first(arr, 8))\nprint(find_first(arr, 9))\nprint(find_first(arr, 5))\nprint(find_first(arr, 4))\nprint(find_first(arr, 3))\nprint(find_first(arr, 2))\nprint(find_first(arr, 1))\nprint(find_first(arr, 0))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def findFirst(self, head, val):\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        slow = slow.next\n        while slow:\n            if slow.val == val:\n                return slow\n            slow = slow.next\n        return None"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_pos(arr, val):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 6, 7, 8, 10, 11, 12]\n    print(find_pos(arr, 10))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def first_position_of_element(arr, e):\n    \"\"\"\n    :type arr: List[int]\n    :type e: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(arr) and arr[i] < e:\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(first_position_of_element(arr, 9))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    lo, hi = 0, len(arr)-1\n    while lo <= hi:\n        mid = lo + (hi-lo)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n\nprint(find([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], 16))\nprint(find([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], 16.0))\nprint(find([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], '16'))\nprint(find([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], '16.0'))\nprint(find([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], '16'))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Define a function to find the first element\ndef find(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n    return -1\n\n\n# Test it out\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n# print find(arr, 3)\n# print find(arr, 7)\n# print find(arr, -1)\n# print find(arr, -5)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/first-position-of-an-element-in-sorted-array\n#\n# Input:\n# n = 1\n# arr = [1,2,3,4,5,6,7]\n# arr = [4,2,6,8,10,5,1]\n# arr = [6,2,3,1,4,8,5]\n# arr = [1,2,3,4,5,6,7]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr = [6,2,3,1,4,8,5]\n# arr ="
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# @include\ndef first_pos(arr, e):\n    # type: (List[int], int) -> int\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == e:\n            return mid\n        elif arr[mid] > e:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n# @exclude\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(first_pos(arr, 3))\n    arr = [1, 2, 3, 4, 5, 6]\n    print(first_pos(arr, 3))\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(first_pos(arr, 7))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import unittest\n\nfrom solution import firstPositionInSortedArray\n\n\nclass TestFirstPositionInSortedArray(unittest.TestCase):\n    def test_firstPositionInSortedArray(self):\n        self.assertEqual(firstPositionInSortedArray([4, 5, 6, 7, 0, 1, 2]), 0)\n        self.assertEqual(firstPositionInSortedArray([2, 1, 3, 4, 5, 6, 7]), 2)\n        self.assertEqual(firstPositionInSortedArray([7, 6, 5, 4, 3, 2, 1]), 0)\n        self.assertEqual(firstPositionInSortedArray([2, 1, 3, 4, 5, 6, 7]), 0)\n        self.assertEqual(firstPositionInSortedArray([-1, -2, -3, -4, -5, -6, -7]), 0)\n        self.assertEqual(firstPositionInSortedArray([-2, -1, 0, 1, 2, 3, 4]), 0)\n        self.assertEqual(firstPositionInSortedArray([-7, -6, -5, -4, -3, -2, -1]), 0)\n        self.assertEqual(firstPositionInSortedArray([-7, -6, -5, -4, -3, -2, -1, 0]), 0)\n        self.assertEqual(firstPositionInSortedArray([-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]), 0)\n        self.assertEqual(firstPositionInSortedArray([-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 0)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 13,
      "score": 9.370583536698913,
      "candidate": "# You can use any python function here, for example:\n# python find_first_element(sorted_array, 1)\n# python find_first_element(sorted_array, 3)\n\ndef find_first_element(sorted_array, element):\n    \"\"\"\n    Find the first position of element in a sorted array.\n\n    :param sorted_array: The sorted array.\n    :param element: The element to be searched.\n    :return: The first position of element in a sorted array.\n    \"\"\"\n\n    # If the array is empty, return -1.\n    if len(sorted_array) == 0:\n        return -1\n\n    # If the element is greater than the first element, return -1.\n    if sorted_array[0] > element:\n        return -1\n\n    # If the element is less than the last element, return the index of the first element.\n    if element < sorted_array[0]:\n        return 0\n\n    # Find the first element greater than the element.\n    for i in range(0, len(sorted_array) - 1):\n        if sorted_array[i] < element and sorted_array[i + 1] > element:\n            return i\n\n    # Return -1 if the element is not found.\n    return -1\n\nif __name__ == \"__main__\":\n    print find_first_element([1, 2, 3], 1)\n    print find_first_element([1, 2, 3], 4)\n    print find_first_element([1, 2, 3], 3)\n    print find_first_element([1, 2, 3], 5)\n    print find_first_element([1, 2, 3], 7)\n    print find_first_element([1, 2, 3], 10)"
    },
    {
      "rank": 14,
      "score": 9.234050852198141,
      "candidate": "def find(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end) / 2\n        if arr[mid] > target:\n            end = mid - 1\n        elif arr[mid] < target:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [2, 5, 7, 8, 10, 11, 13]\n    target = 9\n    print(find(arr, target))\n    target = 2\n    print(find(arr, target))\n    target = 1\n    print(find(arr, target))"
    },
    {
      "rank": 15,
      "score": 9.205959372648458,
      "candidate": "def first_occurrence(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(arr) and arr[i]!= target:\n        i += 1\n    return i\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    print(first_occurrence(arr, 2))\n    print(first_occurrence(arr, 5))\n    print(first_occurrence(arr, 1))"
    },
    {
      "rank": 16,
      "score": 9.177268828905222,
      "candidate": "import math\nimport time\n\ndef binary_search(arr, val):\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] > val:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n\n\ndef first_pos(arr, val):\n    return binary_search(arr, val)\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 4, 6, 9, 10, 15]\n    start = time.time()\n    result = first_pos(arr, 10)\n    end = time.time()\n    print \"Python first_pos:\", result, \"Time:\", end - start, \"Seconds\"\n    assert result == 4\n    assert first_pos(arr, 3) == -1\n    assert first_pos(arr, 20) == -1\n    assert first_pos(arr, 0) == 0\n    assert first_pos(arr, -1) == 0\n    assert first_pos(arr, arr[-1]) == -1\n    assert first_pos(arr, arr[-1] + 1) == -1\n    assert first_pos(arr, arr[-1] - 1) == -1\n    assert first_pos(arr, arr[-1] + arr[-1]) == -1"
    },
    {
      "rank": 17,
      "score": 9.122564458729856,
      "candidate": "def first_position(arr, val):\n    if len(arr) == 0:\n        return 0\n    else:\n        for i in range(0, len(arr)):\n            if arr[i] == val:\n                return i\n        return -1\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(first_position(arr, 2))"
    },
    {
      "rank": 18,
      "score": 8.973005557553902,
      "candidate": "def find_first_element(arr, key):\n    for i in range(len(arr)):\n        if key == arr[i]:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(find_first_element(arr, 8))"
    },
    {
      "rank": 19,
      "score": 8.95994420569242,
      "candidate": "def find(a, x):\n    i = 0\n    while i < len(a) and a[i] < x:\n        i += 1\n    return i\n\ndef main():\n    print(find([2, 5, 7, 9, 10], 10))\n    print(find([2, 5, 7, 9, 10], 2))\n    print(find([2, 5, 7, 9, 10], 3))\n    print(find([2, 5, 7, 9, 10], 7))\n    print(find([2, 5, 7, 9, 10], 9))\n    print(find([2, 5, 7, 9, 10], 10))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 8.946210893390457,
      "candidate": "#!/usr/bin/python\n\ndef findFirst(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if len(arr) == 0:\n        return -1\n\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [5,7,3,6,2,4]\n    print(findFirst(arr, 7))"
    },
    {
      "rank": 21,
      "score": 8.932217008005624,
      "candidate": "def firstPosition(arr, val):\n    \"\"\"\n    :type arr: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) / 2\n        if val < arr[mid]:\n            end = mid - 1\n        elif val > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 6, 7, 8]\n    print(firstPosition(arr, 7))"
    },
    {
      "rank": 22,
      "score": 8.910084504002544,
      "candidate": "# Write your code here\ndef first_position(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n        elif arr[i] > val:\n            return i\n    return len(arr)\n\na = [1, 2, 3, 4, 5]\nprint(first_position(a, 5))\nprint(first_position(a, 0))\nprint(first_position(a, 7))"
    },
    {
      "rank": 23,
      "score": 8.85571690049604,
      "candidate": "def find_pos(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    pos = 0\n    while pos < len(arr) and arr[pos] < target:\n        pos += 1\n    return pos\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(find_pos(arr, 6))"
    },
    {
      "rank": 24,
      "score": 8.850707355641543,
      "candidate": "def find_position(a, x):\n    \"\"\"\n    :param a: sorted array\n    :param x: element to search for\n    :return: first position of x, or -1 if not found\n    \"\"\"\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n    return -1\n\ndef test():\n    assert find_position([3,4,5,1], 1) == 0\n    assert find_position([3,4,5,1], 3) == 2\n    assert find_position([3,4,5,1], 5) == -1\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 25,
      "score": 8.8281618090209,
      "candidate": "def find_first_index(array, target):\n    \"\"\"\n    :type array: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    \n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
      "rank": 26,
      "score": 8.81367773444215,
      "candidate": "def find_pos(arr, val):\n    if arr is None or len(arr) == 0:\n        return -1\n\n    # binary search\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if arr[mid] < val:\n            low = mid + 1\n        elif arr[mid] > val:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_pos(arr, 4))\n    print(find_pos(arr, 5))"
    },
    {
      "rank": 27,
      "score": 8.76828871349479,
      "candidate": "import sys\n\n# Complete the firstPosition function below.\ndef firstPosition(arr, val):\n    i = 0\n    while i < len(arr) and arr[i] < val:\n        i = i + 1\n    return i\n\nif __name__ == '__main__':\n    fptr = open(sys.argv[1], 'r')\n    arr = []\n    for line in fptr:\n        arr.append(line.strip())\n    fptr.close()\n    print firstPosition(arr, int(sys.argv[2]))"
    },
    {
      "rank": 28,
      "score": 8.750282588864879,
      "candidate": "def first_position(arr, val):\n    \"\"\"\n    :type arr: list\n    :type val: int\n    :rtype: int\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] > val:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n\nif __name__ == \"__main__\":\n    print(first_position([1, 5, 6, 8, 9], 5))\n    print(first_position([1, 5, 6, 8, 9], 7))\n    print(first_position([1, 5, 6, 8, 9], 3))"
    },
    {
      "rank": 29,
      "score": 8.715724466237427,
      "candidate": "def first_position(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    \n    i = 0\n    while i < len(arr) and arr[i] < target:\n        i += 1\n    return i\n\n\ndef first_position2(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    \n    i = 0\n    while i < len(arr) and arr[i] < target:\n        i += 1\n    return i\n\nif __name__ == '__main__':\n    assert first_position([1, 2, 3, 4, 5], 3) == 3\n    assert first_position([1, 2, 3, 4, 5], 6) == 0\n    assert first_position([1, 2, 3, 4, 5], 7) == 0\n    assert first_position([1, 2, 3, 4, 5], 0) == 0\n    assert first_position([1, 2, 3, 4, 5], 5) == 0\n    assert first_position([1, 2, 3, 4, 5], 2) == 2\n    assert first_position([1, 2, 3, 4, 5], 1) == 0\n    assert first_position([1, 2, 3, 4, 5], 0) == 0"
    },
    {
      "rank": 30,
      "score": 8.692801520950061,
      "candidate": "def find_first(arr, val):\n    left, right = 0, len(arr)-1\n    while left < right:\n        mid = (left + right) / 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(find_first(arr, 3))\n    print(find_first(arr, 7))"
    },
    {
      "rank": 31,
      "score": 8.632293453617281,
      "candidate": "def find_first_in_sorted_array(sorted_array, target):\n    \"\"\"\n    :param sorted_array: A sorted array\n    :param target: The element to be searched for\n    :return: The first position of the target in the sorted array\n    \"\"\"\n    return find_first_element(sorted_array, target, 0, len(sorted_array))\n\ndef find_first_element(sorted_array, target, start, end):\n    \"\"\"\n    :param sorted_array: A sorted array\n    :param target: The element to be searched for\n    :param start: The start index of the search\n    :param end: The end index of the search\n    :return: The first position of the target in the sorted array\n    \"\"\"\n    if start == end:\n        if sorted_array[start] == target:\n            return start\n    else:\n        mid = (start + end) / 2\n        if sorted_array[mid] == target:\n            return mid\n        elif sorted_array[mid] > target:\n            return find_first_element(sorted_array, target, start, mid)\n        else:\n            return find_first_element(sorted_array, target, mid + 1, end)\n\nif __name__ == \"__main__\":\n    sorted_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"First position of 4 in sorted array: {}\".format(find_first_in_sorted_array(sorted_array, 4)))\n    print(\"First position of 5 in sorted array: {}\".format(find_first_in_sorted_array(sorted_array, 5)))\n    print(\"First position of 9 in sorted array: {}\".format(find_first_in_sorted_array(sorted_array, 9)))\n    print(\"First position of 7 in sorted array: {}\".format(find_first_in_sorted_array(sorted_array, 7)))\n    print(\"First position of 8 in sorted array: {}\".format(find_first_in_sorted_array(sorted_array, 8)))"
    },
    {
      "rank": 32,
      "score": 8.616253589228675,
      "candidate": "def find_first(arr, val):\n    return arr.index(val)\n\ndef test_find_first():\n    arr = [3, 1, 2, 4, 5, 7, 6]\n    assert(find_first(arr, 7) == 4)\n    assert(find_first(arr, 1) == 0)\n\nif __name__ == '__main__':\n    test_find_first()"
    },
    {
      "rank": 33,
      "score": 8.610076160146226,
      "candidate": "import math\n\ndef find_first(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_first(arr, 5))\n    print(find_first(arr, 1))\n    print(find_first(arr, 5.5))\n    print(find_first(arr, 7.5))\n    print(find_first(arr, 1.5))\n    print(find_first(arr, 0))\n    print(find_first(arr, -1))"
    },
    {
      "rank": 34,
      "score": 8.606486429141842,
      "candidate": "def find(arr, val):\n    \"\"\"\n    :type arr: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
      "rank": 35,
      "score": 8.60156811074208,
      "candidate": "def find_first_pos(arr, target):\n    if not arr or not arr[0]:\n        return -1\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        m = (l + r) / 2\n        if arr[m] == target:\n            return m\n        elif arr[m] < target:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(find_first_pos(arr, 6))"
    },
    {
      "rank": 36,
      "score": 8.565425580227462,
      "candidate": "def find(a, x):\n    \"\"\"\n    Returns the index of the first element in array a that is equal to x.\n    If no such element is found, returns -1.\n    \"\"\"\n    return a.index(x)\n\ndef find2(a, x):\n    \"\"\"\n    Returns the index of the first element in array a that is equal to x.\n    If no such element is found, returns -1.\n    \"\"\"\n    if x in a:\n        return a.index(x)\n    return -1\n\ndef main():\n    a = [2, 3, 5, 7, 11, 13]\n    print(find(a, 4))\n    print(find2(a, 4))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.548876241946822,
      "candidate": "def first_position(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = start + (end - start) / 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return -1"
    },
    {
      "rank": 38,
      "score": 8.542875062379007,
      "candidate": "def find_first_position(arr, value):\n    \"\"\"\n    :type arr: List[int]\n    :type value: int\n    :rtype: int\n    \"\"\"\n    \n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end) / 2\n        if arr[mid] > value:\n            end = mid - 1\n        elif arr[mid] < value:\n            start = mid + 1\n        else:\n            return mid\n    return start"
    },
    {
      "rank": 39,
      "score": 8.53012858503943,
      "candidate": "def first_position_in_sorted_array(array, element):\n    \"\"\"\n    :type array: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    return first_position_in_sorted_array_recursive(array, element, 0, len(array) - 1)\n\n\ndef first_position_in_sorted_array_recursive(array, element, first, last):\n    if first == last:\n        if array[first] == element:\n            return first\n        else:\n            return -1\n\n    mid = (first + last) // 2\n    if array[mid] == element:\n        return mid\n    elif array[mid] < element:\n        return first_position_in_sorted_array_recursive(array, element, first, mid - 1)\n    else:\n        return last_position_in_sorted_array_recursive(array, element, mid + 1, last)\n\n\ndef last_position_in_sorted_array_recursive(array, element, first, last):\n    if first == last:\n        if array[first] == element:\n            return first\n        else:\n            return -1\n\n    mid = (first + last) // 2\n    if array[mid] == element:\n        return mid\n    elif array[mid] < element:\n        return last_position_in_sorted_array_recursive(array, element, first, mid - 1)\n    else:\n        return first_position_in_sorted_array_recursive(array, element, mid + 1, last)\n\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    element = 4\n    print(first_position_in_sorted_array(array, element))\n    element = 7\n    print(first_position_in_sorted_array(array, element))\n    element = 8\n    print(first_position_in_sorted_array(array, element))\n    element = 0\n    print(first_position_in_sorted_array(array, element))\n    element ="
    },
    {
      "rank": 40,
      "score": 8.499905739299377,
      "candidate": "def first_position(arr, val):\n    \"\"\"\n    Find the first position of val in arr.\n\n    Example\n    -------\n    >>> first_position([3, 6, 1, 4, 7], 3)\n    0\n    >>> first_position([3, 6, 1, 4, 7], 5)\n    4\n    >>> first_position([3, 6, 1, 4, 7], 8)\n    5\n    >>> first_position([3, 6, 1, 4, 7], 0)\n    0\n    >>> first_position([3, 6, 1, 4, 7], 7)\n    5\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) / 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\n\nif __name__ == \"__main__\":\n    print first_position([3, 6, 1, 4, 7], 3)\n    print first_position([3, 6, 1, 4, 7], 5)\n    print first_position([3, 6, 1, 4, 7], 8)\n    print first_position([3, 6, 1, 4, 7], 0)\n    print first_position([3, 6, 1, 4, 7], 7)"
    },
    {
      "rank": 41,
      "score": 8.478208546788407,
      "candidate": "def first_position_of_element(a, element):\n    \"\"\"\n    :type a: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    if len(a) == 0:\n        return -1\n\n    pivot = a[0]\n    i = 0\n    while i < len(a):\n        if a[i] < pivot:\n            i += 1\n        elif a[i] > pivot:\n            j = i\n            while j < len(a):\n                if a[j] < pivot:\n                    j += 1\n                else:\n                    break\n            i = j\n        else:\n            return i\n    return -1\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(first_position_of_element(a, 6))"
    },
    {
      "rank": 42,
      "score": 8.437695832075478,
      "candidate": "# +++your code here+++\n# Example:\n# For input a = [6,7,8,10,11,12],\n# your function should return the index position of the first number that is greater than or equal to the given element.\n# If the element is not found in the array, return -1.\n# Hint:\n# What are all of the possible values the element can have?\n# What if element is not found in the array?\n# What if element is at the end of the array?\n# What if element is at the beginning of the array?\n# How would you handle the case when the element is not found in the array?\n# How would you handle the case when the element is at the end of the array?\n# How would you handle the case when the element is at the beginning of the array?\n\ndef find_pos(a, e):\n    for i in range(len(a)):\n        if a[i] > e:\n            return i\n    return -1\n\ndef find_pos_sorted(a, e):\n    if len(a) == 0:\n        return -1\n    if a[0] > e:\n        return 0\n    return find_pos(a, e)\n\nif __name__ == '__main__':\n    a = [6, 7, 8, 10, 11, 12]\n    print find_pos_sorted(a, 10)\n    print find_pos_sorted(a, 6)\n    print find_pos_sorted(a, 13)\n    print find_pos_sorted(a, 7)\n    print find_pos_sorted(a, 9)\n    print find_pos_sorted(a, 2)\n    print find_pos_sorted(a, 11)\n    print find_pos_sorted(a, 3)\n    print find_pos_sorted(a, 13)\n    print find_pos_sorted(a, 8)\n    print find_pos_sorted(a, 10)\n    print find_pos_sorted(a, 5)\n    print find_pos_sorted(a, 15)\n    print find_pos_sorted(a, 4)\n    print find_pos_s"
    },
    {
      "rank": 43,
      "score": 8.408439383654278,
      "candidate": "# Import Modules\nimport time\nfrom math import ceil\n\n\n# Function to find the position of an element in a sorted array\ndef find_pos(arr, val):\n    \"\"\"\n    Find the position of the first element in a sorted array.\n    \"\"\"\n    # If the array is empty, return -1\n    if len(arr) == 0:\n        return -1\n    # If the first element is greater than the element to be searched for,\n    # return the position of the first greater element\n    if arr[0] > val:\n        return 0\n    # If the first element is less than the element to be searched for,\n    # return the position of the first lesser element\n    if arr[0] < val:\n        return len(arr)\n\n    # If the first element is equal to the element to be searched for,\n    # return the position of the first equal element\n    return find_pos(arr[1:], val) + 1\n\n\n# Function to find the position of an element in a sorted array\ndef find_pos_iter(arr, val):\n    \"\"\"\n    Find the position of the first element in a sorted array.\n    \"\"\"\n    # If the array is empty, return -1\n    if len(arr) == 0:\n        return -1\n    # If the first element is greater than the element to be searched for,\n    # return the position of the first greater element\n    if arr[0] > val:\n        return 0\n    # If the first element is less than the element to be searched for,\n    # return the position of the first lesser element\n    if arr[0] < val:\n        return len(arr)\n\n    # If the first element is equal to the element to be searched for,\n    # return the position of the first equal element\n    return find_pos_iter(arr[1:], val) + 1\n\n\n# Function to find the position of an element in a sorted array\ndef find_pos_iter_2(arr, val):\n    \"\"\"\n    Find the position of the first element in a sorted array.\n    \"\"\"\n    # If the array is empty, return -1\n    if len(arr) == 0:\n        return -1\n    # If the first element is greater than the element"
    },
    {
      "rank": 44,
      "score": 8.386620303250325,
      "candidate": "def first_position(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n\n    return -1"
    },
    {
      "rank": 45,
      "score": 8.375312293858853,
      "candidate": "def first_position(arr, val):\n    \"\"\"\n    :param arr: an unsorted array\n    :param val: an element in the array\n    :return: an integer\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    first = 0\n    last = len(arr) - 1\n    while first <= last:\n        mid = (first + last) / 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(first_position(arr, 6))"
    },
    {
      "rank": 46,
      "score": 8.351614956112536,
      "candidate": "#!/usr/bin/env python\n\ndef find(arr, value):\n    # Write your code here\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) / 2\n        if arr[mid] == value:\n            return mid\n        elif arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
      "rank": 47,
      "score": 8.331556294201176,
      "candidate": "\"\"\"\nWe have a sorted array, and we want to find the first position of an element.\n\nThe array is sorted in ascending order, so we can use binary search to find the position.\n\nFor example, if the array is [4, 7, 2, 8, 1, 9],\nthe first position of 7 is at index 2.\n\"\"\"\n\ndef binary_search(array, element):\n    left, right = 0, len(array)-1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if array[mid] < element:\n            left = mid + 1\n        elif array[mid] > element:\n            right = mid - 1\n        else:\n            return mid\n    return -1\n\n\"\"\"\nTest cases\n\"\"\"\n\nassert binary_search([4, 7, 2, 8, 1, 9], 7) == 2\nassert binary_search([4, 7, 2, 8, 1, 9], 9) == -1\nassert binary_search([4, 7, 2, 8, 1, 9], 0) == 0\nassert binary_search([4, 7, 2, 8, 1, 9], 5) == -1\nassert binary_search([4, 7, 2, 8, 1, 9], 4) == 0\nassert binary_search([4, 7, 2, 8, 1, 9], 3) == -1\nassert binary_search([4, 7, 2, 8, 1, 9], 6) == -1\nassert binary_search([4, 7, 2, 8, 1, 9], 7) == 2\nassert binary_search([4, 7, 2, 8, 1, 9], 8) == -1\nassert binary_search([4, 7, 2, 8, 1, 9], 1) == 1\nassert binary_search([4, 7, 2, 8, 1, 9], 2) == 1\nassert binary_search([4, 7, 2, 8, 1, 9], 3) == 1\nassert binary_search([4, 7, 2, 8, 1, 9], 4) == 2\nassert binary_search([4, 7, 2, 8, 1, 9], 5) == 1\nassert binary_search([4, 7, 2, 8, 1, 9], 6) =="
    },
    {
      "rank": 48,
      "score": 8.327375965969855,
      "candidate": "def first_position_of_elem(arr, elem):\n    # YOUR CODE HERE\n    i = 0\n    while i < len(arr) and arr[i] < elem:\n        i = i + 1\n    return i\n\n\n\nif __name__ == \"__main__\":\n    arr = [1, 5, 2, 6, 3, 7, 4, 8]\n    print(first_position_of_elem(arr, 2))"
    },
    {
      "rank": 49,
      "score": 8.327367757082776,
      "candidate": "def find_first_pos(arr, target):\n    # write your code here\n    if not arr or not target:\n        return -1\n    \n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1"
    },
    {
      "rank": 50,
      "score": 8.298597569547805,
      "candidate": "#!/usr/bin/env python\n\ndef first_position(arr, elem):\n    \"\"\"\n    Find the first position of elem in arr and return the index.\n    If elem is not present in arr, return -1.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] < elem:\n            start = mid + 1\n        elif arr[mid] > elem:\n            end = mid - 1\n        else:\n            return mid\n    return -1\n\nif __name__ == '__main__':\n    arr = [3, 4, 1, 2]\n    print(first_position(arr, 3))\n    print(first_position(arr, 5))\n    print(first_position(arr, 7))\n    print(first_position(arr, 1))\n    print(first_position(arr, 2))\n    print(first_position(arr, 4))\n    print(first_position(arr, 0))\n    print(first_position(arr, 8))\n    print(first_position(arr, -1))"
    },
    {
      "rank": 51,
      "score": 8.2938925966498,
      "candidate": "def first_position_in_sorted_array(nums, target):\n    if len(nums) == 0:\n        return 0\n    \n    left = 0\n    right = len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) / 2\n        if nums[mid] < target:\n            left = mid + 1\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            return mid\n    \n    return -1\n\nnums = [3,4,5,1,2,6,7]\ntarget = 4\nprint(first_position_in_sorted_array(nums, target))"
    },
    {
      "rank": 52,
      "score": 8.289838256518838,
      "candidate": "def first_position(arr, element):\n    \"\"\"\n    :type arr: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(arr) and arr[i] < element:\n        i = i + 1\n    return i\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(first_position(arr, 1))\n    print(first_position(arr, 8))\n    print(first_position(arr, 100))\n    print(first_position(arr, -1))\n    print(first_position(arr, 0))\n    print(first_position(arr, 10))\n    print(first_position(arr, -1))"
    },
    {
      "rank": 53,
      "score": 8.251903304236286,
      "candidate": "def find_first(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [1,3,2,4,5,3,6,7]\nprint(find_first(arr, 2))"
    },
    {
      "rank": 54,
      "score": 8.214125058964552,
      "candidate": "def first_position(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 9, 11, 13, 15]\n    val = 9\n    print first_position(arr, val)"
    },
    {
      "rank": 55,
      "score": 8.212735598038213,
      "candidate": "#!/usr/bin/python\n\ndef first_position(arr, val):\n    idx = 0\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return idx\n        elif arr[i] < val:\n            idx += 1\n    return idx\n\nprint first_position([4,2,5,1,3], 5)"
    },
    {
      "rank": 56,
      "score": 8.211579567659316,
      "candidate": "def find(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    # binary search\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        m = (l + r) / 2\n        if arr[m] == target:\n            return m\n        elif arr[m] > target:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\n\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    target = 3\n    print(find(arr, target))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.209707251476969,
      "candidate": "def first_position(arr, target):\n    \"\"\"\n    :param arr: A list of integers\n    :param target: An integer to be searched in the list\n    :return: The first position of the target in arr or -1 if not found\n    \"\"\"\n    # base case\n    if len(arr) == 0:\n        return -1\n    # binary search\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] < target:\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            return mid\n    return -1"
    },
    {
      "rank": 58,
      "score": 8.2048573255218,
      "candidate": "import random\nimport math\n\ndef first_pos_of_element(arr, element):\n    # Write your code here\n    pos = 0\n    while pos < len(arr) and arr[pos] < element:\n        pos += 1\n    return pos\n\ndef main():\n    arr = [3, 2, 1, 5, 4, 6]\n    print first_pos_of_element(arr, 5)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.172253082181854,
      "candidate": "import random\n\ndef find_first_element(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n    return -1\n\ndef find_first_element_sorted(arr, val):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) / 2\n        if arr[mid] < val:\n            low = mid + 1\n        elif arr[mid] > val:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n\ndef test_find_first_element(arr):\n    assert find_first_element(arr, 1) == 0\n    assert find_first_element(arr, 4) == 2\n    assert find_first_element(arr, 3) == -1\n\ndef test_find_first_element_sorted(arr):\n    assert find_first_element_sorted(arr, 1) == 0\n    assert find_first_element_sorted(arr, 4) == 2\n    assert find_first_element_sorted(arr, 3) == -1\n\ndef main():\n    arr = [4, 5, 6, 7, 1, 2, 3, 8, 9, 10]\n    test_find_first_element(arr)\n    test_find_first_element_sorted(arr)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.163300679823958,
      "candidate": "import random\n\ndef first_pos(arr, val):\n    \"\"\"\n    Returns the index of the first element in arr that is equal to val.\n    \"\"\"\n\n    # If the array is empty, return -1\n    if len(arr) == 0:\n        return -1\n\n    # Find the first element that is greater than val\n    i = 0\n    while i < len(arr) and arr[i] < val:\n        i += 1\n\n    return i\n\n\n# Test Cases\n\narr = [2, 5, 7, 3, 6, 1]\n\n# print first_pos(arr, 5)\n\nprint first_pos(arr, 3)"
    },
    {
      "rank": 61,
      "score": 8.144125099485041,
      "candidate": "# TODO\n# Use binary search\n# Use a range for the index\n# Use a binary search for the index\n# Use a binary search for the element\n# Use a linear search\n# Use a quick sort\n# Use a merge sort\n# Use a quick sort for the index\n# Use a quick sort for the element\n\ndef find_first_in_sorted(arr, element):\n    \"\"\"\n    :type arr: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    index = 0\n    while index < len(arr) and arr[index] < element:\n        index += 1\n    return index"
    },
    {
      "rank": 62,
      "score": 8.143591138329747,
      "candidate": "def find_first(arr, key):\n    \"\"\"\n    :type arr: List[int]\n    :type key: int\n    :rtype: int\n    \"\"\"\n    # your code goes here\n    return 0\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print find_first(arr, 4)\n    print find_first(arr, 8)\n    print find_first(arr, 1)\n    print find_first(arr, 2)\n    print find_first(arr, 3)\n    print find_first(arr, 5)\n    print find_first(arr, 7)\n    print find_first(arr, 10)\n    print find_first(arr, 9)\n    print find_first(arr, 9)"
    },
    {
      "rank": 63,
      "score": 8.105983444291466,
      "candidate": "def find(array, elem):\n    for i in range(0, len(array)):\n        if array[i] == elem:\n            return i\n    return -1\n\n# Input: array = [1, 2, 3, 4, 5, 6, 7, 8, 9], elem = 6\n# Output: 4\n# Expected: Find the first position of 6 in array and return its position\n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nelem = 6\nprint(find(array, elem))"
    },
    {
      "rank": 64,
      "score": 8.08452234024709,
      "candidate": "def findFirstPos(arr, val):\n    idx = 0\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n        if arr[i] > val:\n            break\n        idx += 1\n    return -1\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(findFirstPos(arr, 1))\n    print(findFirstPos(arr, 3))\n    print(findFirstPos(arr, 9))\n    print(findFirstPos(arr, 10))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.024835682833125,
      "candidate": "def first_position(arr, val):\n    return arr.index(val)\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print first_position(arr, 5)"
    },
    {
      "rank": 66,
      "score": 7.990432406683839,
      "candidate": "def first_pos(arr, val):\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = start + (end - start) / 2\n        if arr[mid] == val:\n            return mid\n\n        if arr[mid] > val:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 5, 7, 8, 10]\n    print(first_pos(arr, 8))"
    },
    {
      "rank": 67,
      "score": 7.938028884277233,
      "candidate": "def find_first(a, x):\n    return binary_search(a, x)\n\ndef binary_search(a, x):\n    i = 0\n    j = len(a)\n    while i < j:\n        mid = (i + j) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            i = mid + 1\n        else:\n            j = mid\n    return -1\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6, 7]\n    print find_first(a, 7)\n    print find_first(a, 1)\n    print find_first(a, 8)\n    print find_first(a, 9)\n    print find_first(a, 2)\n    print find_first(a, 0)\n    print find_first(a, -1)\n    print find_first(a, -4)\n    print find_first(a, -5)\n    print find_first(a, -6)"
    },
    {
      "rank": 68,
      "score": 7.915588979966494,
      "candidate": "def find_position(arr, val):\n    \"\"\"\n    :param arr: List of integers.\n    :param val: Integer to find.\n    :return: Position of the element.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] < val:\n            low = mid + 1\n        elif arr[mid] > val:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [2, 5, 6, 7, 8, 10]\n    print(find_position(arr, 5))"
    },
    {
      "rank": 69,
      "score": 7.8912769574414305,
      "candidate": "import time\nstart_time = time.time()\n\ndef firstPosition(arr, target):\n    return arr.index(target)\n\nprint \"Python Version:\", firstPosition(arr, target)\nprint \"Time elapsed:\", time.time() - start_time"
    },
    {
      "rank": 70,
      "score": 7.868947655733293,
      "candidate": "# http://www.geeksforgeeks.org/find-first-occurrence-of-a-given-element-in-a-sorted-array/\n\n\ndef first_occurrence(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return -1\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
      "rank": 71,
      "score": 7.84634113240411,
      "candidate": "def first_position(arr, val):\n    \"\"\"\n    :param arr: the sorted array\n    :param val: the element to find\n    :return: the first position of the element\n    \"\"\"\n    if not arr:\n        return None\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n    return None\n\ndef first_position_2(arr, val):\n    \"\"\"\n    :param arr: the sorted array\n    :param val: the element to find\n    :return: the first position of the element\n    \"\"\"\n    if not arr:\n        return None\n    if arr[0] == val:\n        return 0\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == val:\n                return i\n        return None\n\ndef first_position_3(arr, val):\n    \"\"\"\n    :param arr: the sorted array\n    :param val: the element to find\n    :return: the first position of the element\n    \"\"\"\n    if not arr:\n        return None\n    i = 0\n    while i < len(arr):\n        if arr[i] == val:\n            return i\n        i += 1\n    return None\n\nif __name__ == '__main__':\n    assert first_position([1, 3, 4, 5], 4) == 3\n    assert first_position([1, 2, 3, 4, 5], 2) == 0\n    assert first_position([1, 2, 3, 4, 5], 5) == 4\n    assert first_position([1, 2, 3, 4, 5], 6) == None\n    assert first_position([1, 2, 3, 4, 5], 1) == 0\n    assert first_position([1, 2, 3, 4, 5], 0) == 0\n    assert first_position([1, 2, 3, 4, 5], 7) == None\n    assert first_position([1, 2, 3, 4, 5], 6) == None"
    },
    {
      "rank": 72,
      "score": 7.834022619458933,
      "candidate": "def findFirst(arr, val):\n    \"\"\"\n    Find the first position of val in arr.\n\n    Input: arr is a sorted array and val is the element we are looking for.\n\n    Output: The index of the first occurrence of val.\n    \"\"\"\n\n    if not arr:\n        return -1\n\n    # Binary search\n    lo = 0\n    hi = len(arr) - 1\n\n    while lo <= hi:\n        mid = lo + ((hi - lo) >> 1)\n        if arr[mid] == val:\n            return mid\n\n        if arr[mid] > val:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 5, 2, 3, 4, 5]\n    print(\"First position of 5 is \" + str(findFirst(arr, 5)))"
    },
    {
      "rank": 73,
      "score": 7.780351419995229,
      "candidate": "def find_first(arr, element):\n    \"\"\"\n    :type arr: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    # Your code here\n    if arr is None or len(arr) == 0:\n        return -1\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_first(arr, 1))\n    print(find_first(arr, 9))\n    print(find_first(arr, 10))\n    print(find_first(arr, -1))\n    print(find_first(arr, 11))"
    },
    {
      "rank": 74,
      "score": 7.738292593776799,
      "candidate": "#!/usr/bin/env python\n\ndef find(arr, target):\n    if len(arr) == 0:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) / 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 8\n\nprint(find(arr, target))"
    },
    {
      "rank": 75,
      "score": 7.7320703513377165,
      "candidate": "def first_position(arr, val):\n    \"\"\"\n    :type arr: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    pos = 0\n    while pos < len(arr) and arr[pos] < val:\n        pos += 1\n    return pos\n\nprint first_position([1, 3, 2, 5, 6, 7, 8, 9], 8)\nprint first_position([1, 3, 2, 5, 6, 7, 8, 9], 2)\nprint first_position([1, 3, 2, 5, 6, 7, 8, 9], 3)\nprint first_position([1, 3, 2, 5, 6, 7, 8, 9], 4)\nprint first_position([1, 3, 2, 5, 6, 7, 8, 9], 5)\nprint first_position([1, 3, 2, 5, 6, 7, 8, 9], 6)\nprint first_position([1, 3, 2, 5, 6, 7, 8, 9], 7)\nprint first_position([1, 3, 2, 5, 6, 7, 8, 9], 8)"
    },
    {
      "rank": 76,
      "score": 7.705183449260731,
      "candidate": "def find(a, x):\n    \"\"\"\n    Find the first position of x in a.\n    Input:\n    a: a sorted list\n    x: element to be searched\n    Output:\n    first position of x\n    \"\"\"\n    return bisect_left(a, x)\n\ndef bisect_left(a, x):\n    \"\"\"\n    Find the first position of x in a.\n    Input:\n    a: a sorted list\n    x: element to be searched\n    Output:\n    first position of x\n    \"\"\"\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + ((hi - lo) >> 1)\n        if x < a[mid]:\n            hi = mid\n        elif x > a[mid]:\n            lo = mid + 1\n        else:\n            return mid\n    return lo\n\nif __name__ == \"__main__\":\n    a = [10,3,6,1,8,4,7,2,5,9]\n    print(find(a, 6))"
    },
    {
      "rank": 77,
      "score": 7.5819855281879285,
      "candidate": "def firstPosition(a, x):\n    \"\"\"\n    :type a: List[int]\n    :type x: int\n    :rtype: int\n    \"\"\"\n    # return a.index(x)\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n    return -1\n\ndef main():\n    # your code goes here\n    a = [1,2,3,4]\n    print firstPosition(a,2)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 7.562924366763077,
      "candidate": "def first_position(arr, val):\n    \"\"\"\n    :type arr: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\ndef first_position_2(arr, val):\n    \"\"\"\n    :type arr: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\nif __name__ == '__main__':\n    print(first_position([4, 2, 5, 3], 5))\n    print(first_position([4, 2, 5, 3], 2))\n    print(first_position_2([4, 2, 5, 3], 5))\n    print(first_position_2([4, 2, 5, 3], 2))"
    },
    {
      "rank": 79,
      "score": 7.4878043221155455,
      "candidate": "#!/usr/bin/env python\n\n# Complete the firstMissingPos function below.\ndef firstMissingPos(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[i] <= len(nums):\n            nums[nums[i]-1] = nums[i]\n            nums[i] = -1\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    print firstMissingPos([1, 2, 0, 1, 3, 4, 5])"
    },
    {
      "rank": 80,
      "score": 7.464609382504557,
      "candidate": "def find_first_pos(arr, val):\n    \"\"\"\n    :type arr: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    first_pos = 0\n    for i in range(len(arr)):\n        if arr[i] == val:\n            first_pos = i\n            break\n    return first_pos\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(find_first_pos(arr, 4))\n    print(find_first_pos(arr, 6))\n    print(find_first_pos(arr, 5))"
    },
    {
      "rank": 81,
      "score": 3.0,
      "candidate": "def findFirst(a, x):\n    \"\"\"\n    :type a: List[int]\n    :type x: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    j = len(a)\n    while i < j:\n        m = (i + j) / 2\n        if a[m] == x:\n            return m\n        elif a[m] > x:\n            j = m\n        elif a[m] < x:\n            i = m + 1\n    return -1\n\n\n# Your FindFirst function will be called like this:\n# def your_function(nums, x):\ndef findFirst(a, x):\n    \"\"\"\n    :type a: List[int]\n    :type x: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    j = len(a)\n    while i < j:\n        m = (i + j) / 2\n        if a[m] == x:\n            return m\n        elif a[m] > x:\n            j = m\n        elif a[m] < x:\n            i = m + 1\n    return -1"
    },
    {
      "rank": 82,
      "score": 3.0,
      "candidate": "# https://leetcode.com/problems/first-position-of-element-in-sorted-array/discuss/83816/Python-Python-solution-with-explanation\n\nclass Solution:\n    # @param nums, a list of integer\n    # @param target, an integer\n    # @return an integer\n    def firstPosition(self, nums, target):\n        # write your code here\n        # if nums is empty, return -1\n        # if target is not in nums, return -1\n        # if target is in nums, return the first index of target\n        # if target is in nums, return the first index of target\n        # if target is not in nums, return -1\n        # return -1\n        if nums is None or len(nums) == 0:\n            return -1\n        if target in nums:\n            return nums.index(target)\n        # if target is not in nums, return -1\n        # if target is in nums, return the first index of target\n        # if target is in nums, return the first index of target\n        # if target is not in nums, return -1\n        # return -1\n        return -1\n\n\nif __name__ == \"__main__\":\n    print(Solution().firstPosition([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "\"\"\"\nFind the first position of an element in a sorted array.\nInput:\n    array: an array of integers\n    element: an integer\nOutput:\n    a positive integer which is the first position of the element\n\"\"\"\n\ndef find_first_pos(array, element):\n    # write your code here\n    i = 0\n    while i < len(array):\n        if array[i] == element:\n            return i\n        else:\n            i += 1\n    return -1\n\n\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nInput:\n    array: an array of integers\n    element: an integer\nOutput:\n    a positive integer which is the first position of the element\n\"\"\"\n\ndef find_first_pos_binary(array, element):\n    # write your code here\n    i = 0\n    while i < len(array):\n        if array[i] == element:\n            return i\n        else:\n            i += 1\n    return -1\n\n\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nInput:\n    array: an array of integers\n    element: an integer\nOutput:\n    a positive integer which is the first position of the element\n\"\"\"\n\ndef find_first_pos_iterative(array, element):\n    # write your code here\n    i = 0\n    while i < len(array):\n        if array[i] == element:\n            return i\n        else:\n            i += 1\n    return -1\n\n\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nInput:\n    array: an array of integers\n    element: an integer\nOutput:\n    a positive integer which is the first position of the element\n\"\"\"\n\ndef find_first_pos_dp(array, element):\n    # write your code here\n    i = 0\n    j = 0\n    while i < len(array):\n        if array[i] == element:\n            return i\n        elif array[i] < element:\n            i += 1\n        elif array[i] > element:\n            j += 1\n            if j == len(array):\n                return i\n            i"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "def find(arr, val):\n    \"\"\"\n    :type arr: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if arr[mid] < val:\n            lo = mid + 1\n        elif arr[mid] > val:\n            hi = mid - 1\n        else:\n            return mid\n    return lo\n\n\nclass Solution(object):\n    def findFirst(self, arr, val):\n        \"\"\"\n        :type arr: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        if not arr or not arr[0]:\n            return 0\n        return find(arr, val)"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        p1 = headA\n        p2 = headB\n        while p1!= None and p2!= None:\n            if p1 == p2:\n                return p1\n            p1 = p1.next\n            p2 = p2.next\n        return None\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.getIntersectionNode(headA,headB)"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "def find_pos(arr, val):\n    # write your code here\n    return arr.index(val)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print find_pos(arr, 3)\n    print find_pos(arr, 7)\n    print find_pos(arr, 6)\n    print find_pos(arr, 1)\n    print find_pos(arr, 4)\n    print find_pos(arr, 2)\n    print find_pos(arr, 0)\n    print find_pos(arr, -1)\n    print find_pos(arr, -2)\n    print find_pos(arr, -3)"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def find_first(a, x):\n    \"\"\"\n    :type a: List[int]\n    :type x: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(a) and a[i] < x:\n        i = i + 1\n    return i - 1\n\n# Your FindFirst function will be called like this:\n# i, j = FindFirst(nums, val)\n# return i, j\n\n# Note:\n# You may assume all elements in the array are non-negative and will not\n# contain any duplicate numbers.\n\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} val\n    # @return {integer[]}\n    def findFirst(self, nums, val):\n        res = []\n        i, j = 0, 0\n        while i < len(nums):\n            if nums[i] >= val:\n                res.append(j)\n                j += 1\n            else:\n                i += 1\n        return res"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def find(arr, val):\n    # write your code here\n    return binary_search(arr, val, 0, len(arr) - 1)\n\n\ndef binary_search(arr, val, start, end):\n    if start == end:\n        if arr[start] == val:\n            return start\n\n    if start < end:\n        mid = (start + end) / 2\n        if arr[mid] < val:\n            return binary_search(arr, val, start, mid - 1)\n        else:\n            return binary_search(arr, val, mid + 1, end)\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 9, 12]\n    print find(arr, 3)\n    print find(arr, 1)\n    print find(arr, 2)\n    print find(arr, 4)\n    print find(arr, 13)\n    print find(arr, -1)\n    print find(arr, 0)\n    print find(arr, 5)\n    print find(arr, 6)\n    print find(arr, 7)\n    print find(arr, 8)"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def first_pos(arr, val):\n    return arr.index(val)\n\ndef first_pos_2(arr, val):\n    i = 0\n    while i < len(arr) and arr[i] < val:\n        i += 1\n    return i\n\ndef first_pos_3(arr, val):\n    return bisect.bisect_left(arr, val)\n\n\n# test cases\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(first_pos(arr, 5))\nprint(first_pos_2(arr, 5))\nprint(first_pos_3(arr, 5))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# Note: The array is already sorted\n# So the first element is in the first index\ndef first_occurrence(arr, target):\n    if len(arr) == 0:\n        return -1\n    else:\n        idx = 0\n        while idx < len(arr):\n            if arr[idx] == target:\n                return idx\n            else:\n                idx += 1\n    return -1\n\n\n# Test Cases\n\narr = [2, 3, 4, 1, 2, 3, 4]\ntarget = 1\n\nprint(first_occurrence(arr, target))\n\narr = [2, 3, 4, 1, 2, 3, 4, 1, 2]\ntarget = 1\n\nprint(first_occurrence(arr, target))\n\narr = [2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\ntarget = 4\n\nprint(first_occurrence(arr, target))\n\narr = [2, 3, 4, 1, 2, 3, 4]\ntarget = 4\n\nprint(first_occurrence(arr, target))\n\narr = [2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\ntarget = 5\n\nprint(first_occurrence(arr, target))"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def first_position(arr, target):\n    # write your code here\n    return arr.index(target)\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5]\n    print first_position(arr, 5)\n    print first_position(arr, 6)\n    print first_position(arr, 6)\n    print first_position(arr, -1)\n    print first_position(arr, 0)\n    print first_position(arr, 4)\n    print first_position(arr, 0)\n    print first_position(arr, 1)\n    print first_position(arr, 2)\n    print first_position(arr, 0)\n    print first_position(arr, 0)\n    print first_position(arr, 0)\n    print first_position(arr, 0)\n    print first_position(arr, 0)"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def find_first(sorted_array, value):\n    # write your code here\n    return\n\n\nif __name__ == '__main__':\n    a = [1, 5, 6, 8, 2, 2, 3]\n    find_first(a, 2)\n\n    a = [1, 5, 6, 8, 2, 2, 3]\n    find_first(a, 3)\n\n    a = [1, 5, 6, 8, 2, 2, 3]\n    find_first(a, 0)\n\n    a = [1, 5, 6, 8, 2, 2, 3]\n    find_first(a, 7)\n\n    a = [1, 5, 6, 8, 2, 2, 3]\n    find_first(a, 9)\n\n    a = [1, 5, 6, 8, 2, 2, 3]\n    find_first(a, 4)\n\n    a = [1, 5, 6, 8, 2, 2, 3]\n    find_first(a, -1)\n\n    a = [1, 5, 6, 8, 2, 2, 3]\n    find_first(a, -2)\n\n    a = [1, 5, 6, 8, 2, 2, 3]\n    find_first(a, -4)"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "\"\"\"\nExample\nGiven nums = [5, 7, 7, 8],\nreturn 1.\n\"\"\"\n\nclass Solution(object):\n    def firstUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1]:\n                return i\n        return len(nums)"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "import random\n\n# @include\ndef first_index_in_sorted_array(arr, key):\n    # We are looking for the first element greater than the key.\n    # We can use binary search to find the first element greater than the key.\n    lo = 0\n    hi = len(arr)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if arr[mid] > key:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n# @exclude\n\n\ndef main():\n    arr = [random.randrange(0, 100) for _ in range(100)]\n    print(first_index_in_sorted_array(arr, 50))\n    print(first_index_in_sorted_array(arr, -1))\n    print(first_index_in_sorted_array(arr, 100))\n    print(first_index_in_sorted_array(arr, 0))\n    print(first_index_in_sorted_array(arr, -100))\n    print(first_index_in_sorted_array(arr, -50))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def find_pos(arr, val):\n    \"\"\"\n    :type arr: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    return arr.find(val)\n\n# Your FindPos solution here."
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def first_position(arr, element):\n    \"\"\"\n    :type arr: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    # TODO: write your code here\n    i = 0\n    while i < len(arr) and arr[i] < element:\n        i += 1\n    return i\n\n\n# Your FirstPosition solution's C++/Python version:\n#\n# def first_position(arr, element):\n#     \"\"\"\n#     :type arr: List[int]\n#     :type element: int\n#     :rtype: int\n#     \"\"\"\n#     i = 0\n#     while i < len(arr) and arr[i] < element:\n#         i += 1\n#     return i\n\n\n# Your FirstPosition solution's C++/Python version:\n#\n# def first_position(arr, element):\n#     \"\"\"\n#     :type arr: List[int]\n#     :type element: int\n#     :rtype: int\n#     \"\"\"\n#     i = 0\n#     while i < len(arr) and arr[i] < element:\n#         i += 1\n#     return i\n\n\n# Your FirstPosition solution's C++/Python version:\n#\n# def first_position(arr, element):\n#     \"\"\"\n#     :type arr: List[int]\n#     :type element: int\n#     :rtype: int\n#     \"\"\"\n#     i = 0\n#     while i < len(arr) and arr[i] < element:\n#         i += 1\n#     return i\n\n\n# Your FirstPosition solution's C++/Python version:\n#\n# def first_position(arr, element):\n#     \"\"\"\n#     :type arr: List[int]\n#     :type element: int\n#     :rtype: int\n#     \"\"\"\n#     i = 0\n#     while i < len(arr) and arr[i] < element:\n#         i += 1\n#     return i"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# https://www.hackerrank.com/challenges/sorted-array-insertion/problem\n\ndef insertion_sort(arr):\n    # YOUR CODE HERE\n    for i in range(1, len(arr)):\n        j = i\n        while j > 0 and arr[j-1] > arr[j]:\n            arr[j] = arr[j-1]\n            j -= 1\n        arr[j] = arr[i]\n    return arr\n\n# print insertion_sort([1, 3, 2, 5, 4, 2, 1, 3])\n\narr = [1, 3, 2, 5, 4, 2, 1, 3]\nprint insertion_sort(arr)"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "class Solution:\n    # @param A, a list of integers\n    # @param e, an integer\n    # @return an integer\n    def find(self, A, e):\n        # Write your code here\n        if A is None or len(A) == 0:\n            return -1\n        l = 0\n        r = len(A) - 1\n        while l <= r:\n            m = (l + r) / 2\n            if A[m] == e:\n                return m\n            elif A[m] > e:\n                r = m - 1\n            else:\n                l = m + 1\n        return -1\n\nif __name__ == \"__main__\":\n    assert Solution().find([1, 3, 6, 7], 7) == 1\n    assert Solution().find([1, 3, 6, 7], 2) == -1\n    assert Solution().find([1, 3, 6, 7], 8) == -1\n    assert Solution().find([1, 3, 6, 7], 0) == -1\n    assert Solution().find([1, 3, 6, 7], 1) == 0\n    assert Solution().find([1, 3, 6, 7], 3) == 2\n    assert Solution().find([1, 3, 6, 7], 5) == -1\n    assert Solution().find([1, 3, 6, 7], 6) == 3\n    assert Solution().find([1, 3, 6, 7], 7) == 3\n    assert Solution().find([1, 3, 6, 7], 8) == -1\n    assert Solution().find([1, 3, 6, 7], 9) == -1"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def find_first_pos(array, val):\n    \"\"\"\n    :type array: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    n = len(array)\n    i = 0\n    while i < n:\n        if array[i] > val:\n            return i\n        i += 1\n    return -1\n\n\"\"\"\nFind the first position of val in array\n\"\"\"\n\ndef find_first_pos_with_array(array, val):\n    n = len(array)\n    i = 0\n    while i < n:\n        if array[i] == val:\n            return i\n        i += 1\n    return -1\n\n\"\"\"\nFind the first position of val in array\n\"\"\"\n\ndef find_first_pos_with_list(array, val):\n    n = len(array)\n    i = 0\n    while i < n:\n        if val == array[i]:\n            return i\n        i += 1\n    return -1\n\n\"\"\"\nFind the first position of val in array\n\"\"\"\n\ndef find_first_pos_with_dict(array, val):\n    n = len(array)\n    i = 0\n    while i < n:\n        if val == array[i]:\n            return i\n        i += 1\n    return -1\n\n\"\"\"\nFind the first position of val in array\n\"\"\"\n\ndef find_first_pos_with_set(array, val):\n    n = len(array)\n    i = 0\n    while i < n:\n        if val == array[i]:\n            return i\n        i += 1\n    return -1\n\n\"\"\"\nFind the first position of val in array\n\"\"\"\n\ndef find_first_pos_with_list_with_dict(array, val):\n    n = len(array)\n    i = 0\n    while i < n:\n        if val == array[i]:\n            return i\n        i += 1\n    return -1\n\n\"\"\"\nFind the first position of val in array\n\"\"\"\n\ndef find_first_pos_with_list_with_set(array, val):\n    n = len(array)\n    i = 0\n    while"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# Example\n\ndef first_position(arr, val):\n    \"\"\"\n    :param arr: The sorted array.\n    :param val: The element to find.\n    :return: The first position of the element.\n    \"\"\"\n    return arr.index(val)\n\n\n\n# Test Cases\n\n# arr = [1,2,3,4,5,6,7]\n# val = 2\n# first_position(arr, val)\n# arr = [1,2,3,4,5,6,7]\n# val = 7\n# first_position(arr, val)\n\n# arr = [1,2,3,4,5,6,7]\n# val = -1\n# first_position(arr, val)\n\n# arr = [1,2,3,4,5,6,7]\n# val = 0\n# first_position(arr, val)\n\n# arr = [1,2,3,4,5,6,7]\n# val = -1\n# first_position(arr, val)\n\n# arr = [1,2,3,4,5,6,7]\n# val = 7\n# first_position(arr, val)"
    }
  ]
}