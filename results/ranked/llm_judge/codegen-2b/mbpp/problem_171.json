{
  "timestamp": "2025-09-14T18:38:01.294950",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 171,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/find-all-numbers-in-a-string/#/description\n# https://leetcode.com/problems/find-all-numbers-in-a-string/discuss/133539/Find-all-numbers-in-a-string-with-regex-solution\n# https://leetcode.com/problems/find-all-numbers-in-a-string/solution/\n\n# no need to use regex to find numbers\n# from collections import defaultdict\n# from re import finditer, sub\n# import itertools\n\nclass Solution(object):\n    def countNumbers(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        # no need to use regex to find numbers\n        # use defaultdict to save the count\n        # and defaultdict(int) to initialize default value\n        # defaultdict(int) has the same effect as defaultdict(lambda: 0)\n        # https://leetcode.com/problems/find-all-numbers-in-a-string/#/discussion/2488/\n        numbers = defaultdict(int)\n        for c in s:\n            numbers[c] += 1\n        return [numbers[c] for c in sorted(numbers)]\n\nif __name__ == \"__main__\":\n    s = \"ABACACABACAC\"\n    print s\n    print Solution().countNumbers(s)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/count-and-say/\n\nimport re\n\ndef count_and_say(s):\n    count = 0\n    char_set = set()\n    for c in s:\n        if c.isupper():\n            count += 1\n            char_set.add(c)\n        elif c.islower():\n            count += 1\n            char_set.add(c)\n        elif c in '!@#$%^&*()-_=+[]{}|\\\\:;<>,./?':\n            count += 1\n            char_set.add(c)\n        elif c.isdigit():\n            count += 1\n            char_set.add(c)\n    return count, char_set\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        return self.countAndSay_1(n)\n\n    def countAndSay_1(self, n):\n        if n == 0:\n            return ''\n        return self.countAndSay_1(n - 1) + str(n) + self.countAndSay_1(n - 1)\n\nif __name__ == '__main__':\n    print Solution().countAndSay(3)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def get_values(s):\n    pattern = r'[A-Za-z0-9]+'\n    regex = re.compile(pattern)\n    matches = regex.findall(s)\n    return matches\n\ndef main():\n    s = 'hello, world'\n    print get_values(s)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def count_char(string, regex):\n    regex = '.*' + regex + '.*'\n    return len(re.findall(regex, string))\n\nif __name__ == '__main__':\n    string = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'\n    regex = '[A-Z][a-z]*'\n    print(count_char(string, regex))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def main():\n    regex = r'[A-Za-z0-9]+'\n    string = 'I am a test string'\n    print(re.findall(regex, string))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import re\n\ndef get_number_of_chars(string):\n    num = 0\n    for char in string:\n        if char.isalpha():\n            num += 1\n    return num\n\ndef get_numeric_chars(string):\n    numeric_chars = 0\n    for char in string:\n        if char.isdigit():\n            numeric_chars += 1\n    return numeric_chars\n\ndef get_special_chars(string):\n    special_chars = 0\n    for char in string:\n        if char.isalpha() or char.isdigit():\n            special_chars += 1\n    return special_chars\n\ndef get_uppercase_chars(string):\n    uppercase_chars = 0\n    for char in string:\n        if char.isupper():\n            uppercase_chars += 1\n    return uppercase_chars\n\ndef get_lowercase_chars(string):\n    lowercase_chars = 0\n    for char in string:\n        if char.islower():\n            lowercase_chars += 1\n    return lowercase_chars\n\ndef main():\n    test_case = int(input())\n    for i in range(test_case):\n        string = input()\n        print(get_number_of_chars(string))\n        print(get_numeric_chars(string))\n        print(get_special_chars(string))\n        print(get_uppercase_chars(string))\n        print(get_lowercase_chars(string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import re\n\n# The code below is an example of the same problem in python:\n# https://stackoverflow.com/questions/11751161/regex-find-uppercase-lowercase-special-characters-numeric-in-python\n\n# We can use re.search to find all instances of a pattern in a string\ndef find_all(pattern, string):\n    return re.findall(pattern, string)\n\n# The code below is an example of how to find uppercase, lowercase and special characters using regex\ndef find_all_special(pattern, string):\n    return re.findall(pattern, string)\n\n# The code below is an example of how to find all the numeric values in a string\ndef find_all_numeric(pattern, string):\n    return re.findall(pattern, string)\n\n# The code below is an example of how to find uppercase, lowercase, special characters and numeric values using regex\ndef find_all_special_numeric(pattern, string):\n    return re.findall(pattern, string)\n\n# The code below is an example of how to find all the uppercase, lowercase, special characters and numeric values using regex\ndef find_all_special_numeric_upper(pattern, string):\n    return re.findall(pattern, string)\n\n# The code below is an example of how to find all the uppercase, lowercase, special characters and numeric values using regex\ndef find_all_special_numeric_lower(pattern, string):\n    return re.findall(pattern, string)\n\n# The code below is an example of how to find all the uppercase, lowercase, special characters and numeric values using regex\ndef find_all_special_numeric_special(pattern, string):\n    return re.findall(pattern, string)\n\n# The code below is an example of how to find all the uppercase, lowercase, special characters and numeric values using regex\ndef find_all_special_numeric_upper_lower(pattern, string):\n    return re.findall(pattern, string)\n\n# The code below is an example of how to find all the uppercase, lowercase, special characters and numeric values using regex"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef count_words(text):\n    words = defaultdict(int)\n    for word in text.split():\n        if word.isalpha():\n            words[word] += 1\n        elif word.isdigit():\n            words[word] += 1\n        else:\n            words[word[0]] += 1\n    return words\n\ndef main():\n    text = \"Python is a widely used general-purpose programming language, originally developed by Guido van Rossum. Python was originally developed as an extension of the Basic programming language, by Brain Software Technologies, Inc., in November of 1989. Python is a new programming language designed for programmers familiar with Python 2.0 and above. It was created by Guido van Rossum in 1989 and is the successor of the BASIC programming language.\"\n    print(count_words(text))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def count_characters(string):\n    count = 0\n    for c in string:\n        if c.isalpha():\n            count += 1\n        elif c.isdigit():\n            count += 1\n        elif c.isupper():\n            count += 1\n        elif c.islower():\n            count += 1\n        else:\n            count += 1\n    return count\n\ndef main():\n    string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    print(count_characters(string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_uppercase(text):\n    pattern = r'[A-Z]|[a-z]'\n    return len(re.findall(pattern, text))\n\ndef find_lowercase(text):\n    pattern = r'[a-z]|[A-Z]'\n    return len(re.findall(pattern, text))\n\ndef find_special(text):\n    pattern = r'[^A-Za-z0-9]'\n    return len(re.findall(pattern, text))\n\ndef find_numeric(text):\n    pattern = r'[0-9]'\n    return len(re.findall(pattern, text))\n\nprint(find_uppercase('Aa1Bb2Cc3Dd4Ee'))\nprint(find_lowercase('aa1bB2Cc3Dd4eE'))\nprint(find_special('a!@#$%^&*()-_=+[]{}|;:<>,./?'))\nprint(find_numeric('1 2 3 4 5 6 7 8 9'))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Write a function to find uppercase, lowercase, special character and numeric values using regex.\n#\n# Input\n#\n# The first line of input contains a single integer T denoting the number of test cases.\n# The second line of input contains T lines each containing an integer N denoting the size of the input string.\n# The next N lines of input contain N space-separated words.\n# The last line of input contains a single integer denoting the number of characters in the input string.\n#\n# Output\n#\n# For each test case, output the number of uppercase, lowercase, special character and numeric values.\n#\n# Constraints\n#\n# 1 <= T <= 100\n# 1 <= N <= 1000\n# 0 <= N <= 100\n# 0 <= N <= 10^9\n# 0 <= N <= 10^9\n#\n# Sample Input\n#\n# 2\n# 10\n# a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t"
    },
    {
      "rank": 12,
      "score": 9.370583536698913,
      "candidate": "def extract_data(filename):\n    with open(filename) as f:\n        data = f.read().splitlines()\n        data = [x.strip() for x in data if x.strip()]\n    return data\n\ndef uppercase(data):\n    return [x.upper() for x in data if x.isupper()]\n\ndef lowercase(data):\n    return [x.lower() for x in data if x.islower()]\n\ndef special(data):\n    return [x.isalpha() for x in data if x.isalpha()]\n\ndef num(data):\n    return [x.isdigit() for x in data if x.isdigit()]\n\ndef main():\n    data = extract_data('test.txt')\n    uppercase_data = uppercase(data)\n    lowercase_data = lowercase(data)\n    special_data = special(data)\n    num_data = num(data)\n    print(uppercase_data)\n    print(lowercase_data)\n    print(special_data)\n    print(num_data)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 9.234050852198141,
      "candidate": "# I think it's easy to understand, but not efficient\n\ndef is_number(s):\n    \"\"\"\n    Check if a string is a number\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_special(s):\n    \"\"\"\n    Check if a string is a special character\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return s in '!@#$%^&*()_+=-[]{}|;:,./<>?'\n\ndef is_lowercase(s):\n    \"\"\"\n    Check if a string is lowercase\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return all(x.islower() for x in s)\n\ndef is_uppercase(s):\n    \"\"\"\n    Check if a string is uppercase\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return all(x.isupper() for x in s)\n\ndef is_special_char(s):\n    \"\"\"\n    Check if a string is special character\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return all(is_special(x) for x in s)\n\ndef is_number_or_special(s):\n    \"\"\"\n    Check if a string is number or special character\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return is_number(s) or is_special(s)\n\ndef is_numeric(s):\n    \"\"\"\n    Check if a string is numeric\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return is_number(s)\n\ndef is_lowercase_or_numeric(s):\n    \"\"\"\n    Check if a string is lowercase or numeric\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return is_lowercase(s) or is_numeric(s)\n\ndef is_uppercase_or_numeric(s):\n    \"\"\"\n    Check if a string is uppercase or numeric\n    :"
    },
    {
      "rank": 14,
      "score": 9.21346272767743,
      "candidate": "def count(str):\n    return len(str.lower()) - len(str.upper())\n\n\ndef uppercase(str):\n    return str.upper()\n\n\ndef lowercase(str):\n    return str.lower()\n\n\ndef special(str):\n    return ''.join(['[a-zA-Z]', '0-9'])\n\n\ndef numeric(str):\n    return ''.join(['[0-9]', 'a-zA-Z'])\n\n\ndef main():\n    # print(count('hello'))\n    print(uppercase('hello'))\n    print(lowercase('HELLO'))\n    print(special('hello'))\n    print(numeric('hello'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 9.205959372648458,
      "candidate": "import re\n\n\ndef count_numbers(string):\n    return len(re.findall('\\d+', string))\n\n\ndef count_special_chars(string):\n    return len(re.findall('[A-Za-z]', string))\n\n\ndef count_uppercase(string):\n    return len(re.findall('[A-Z]', string))\n\n\ndef count_lowercase(string):\n    return len(re.findall('[a-z]', string))\n\n\nif __name__ == '__main__':\n    string = 'abc123'\n    print('Count numbers: {}'.format(count_numbers(string)))\n    print('Count special characters: {}'.format(count_special_chars(string)))\n    print('Count uppercase characters: {}'.format(count_uppercase(string)))\n    print('Count lowercase characters: {}'.format(count_lowercase(string)))"
    },
    {
      "rank": 16,
      "score": 9.177268828905222,
      "candidate": "import re\n\ndef find_special_char(text):\n    return re.findall('[A-Za-z0-9]+', text)\n\ndef find_numeric(text):\n    return re.findall('\\d+', text)\n\ndef find_lowercase(text):\n    return re.findall('[a-z]+', text)\n\ndef find_uppercase(text):\n    return re.findall('[A-Z]+', text)\n\ndef find_special(text):\n    return re.findall('[^A-Za-z0-9]+', text)\n\ndef main():\n    text = 'the quick brown fox jumps over the lazy dog'\n    print('special =', find_special_char(text))\n    print('numeric =', find_numeric(text))\n    print('lowercase =', find_lowercase(text))\n    print('uppercase =', find_uppercase(text))\n    print('special =', find_special(text))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 9.122564458729856,
      "candidate": "# Regex\ndef num_words(str):\n    num_re = r'^[0-9]+$'\n    special_char_re = r'^[a-zA-Z_]*$'\n    lower_case_re = r'^[a-z]*$'\n    upper_case_re = r'^[A-Z]*$'\n    \n    # Split by space and filter\n    words = str.split()\n    \n    # Check for num words\n    num_words = []\n    for word in words:\n        if re.match(num_re, word):\n            num_words.append(word)\n    \n    # Check for special characters\n    special_words = []\n    for word in words:\n        if re.match(special_char_re, word):\n            special_words.append(word)\n    \n    # Check for lowercase letters\n    lower_case_words = []\n    for word in words:\n        if re.match(lower_case_re, word):\n            lower_case_words.append(word)\n    \n    # Check for uppercase letters\n    upper_case_words = []\n    for word in words:\n        if re.match(upper_case_re, word):\n            upper_case_words.append(word)\n    \n    # Return list of words\n    return num_words + special_words + lower_case_words + upper_case_words\n\n# Test\nif __name__ == '__main__':\n    \n    # Test 1\n    test_1 = \"one two three\"\n    num_words = num_words(test_1)\n    print num_words\n    \n    # Test 2\n    test_2 = \"abc_123\"\n    num_words = num_words(test_2)\n    print num_words\n    \n    # Test 3\n    test_3 = \"one_two_three\"\n    num_words = num_words(test_3)\n    print num_words\n    \n    # Test 4\n    test_4 = \"one_two_three_four\"\n    num_words = num_words(test_4)\n    print num_words"
    },
    {
      "rank": 18,
      "score": 8.973005557553902,
      "candidate": "from collections import Counter\n\ndef get_unique_words(word_list):\n    words = []\n    for word in word_list:\n        words.append(word.strip())\n    return set(words)\n\ndef get_word_frequency(word_list):\n    words = get_unique_words(word_list)\n    word_frequency = Counter(words)\n    return word_frequency\n\ndef get_word_regex(word_list):\n    words = get_unique_words(word_list)\n    word_regex = []\n    for word in words:\n        word_regex.append(r'\\b' + word + r'\\b')\n    return word_regex\n\ndef get_word_frequency_from_regex(word_regex):\n    word_frequency = []\n    for word_regex in word_regex:\n        word_frequency.append(re.findall(word_regex, 'abcdefghijklmnopqrstuvwxyz'))\n    return word_frequency\n\ndef get_numeric_words(word_list):\n    words = get_unique_words(word_list)\n    numeric_words = []\n    for word in words:\n        if word.isdigit():\n            numeric_words.append(word)\n    return set(numeric_words)\n\ndef get_numeric_regex(word_list):\n    words = get_unique_words(word_list)\n    numeric_words = []\n    for word in words:\n        if word.isdigit():\n            numeric_words.append(r'\\b' + word + r'\\b')\n    return numeric_words\n\ndef get_numeric_frequency_from_regex(word_regex):\n    numeric_frequency = []\n    for word_regex in word_regex:\n        numeric_frequency.append(re.findall(word_regex, '1234567890'))\n    return numeric_frequency\n\ndef get_word_count(word_list):\n    return len(word_list)\n\ndef get_word_count_from_regex(word_regex):"
    },
    {
      "rank": 19,
      "score": 8.95994420569242,
      "candidate": "import re\n\ndef is_special(s):\n    return re.search(r\"[^a-zA-Z0-9]\", s) is not None\n\ndef is_num(s):\n    return re.search(r\"[^0-9]\", s) is not None\n\ndef is_lower(s):\n    return re.search(r\"[a-z]\", s) is not None\n\ndef is_upper(s):\n    return re.search(r\"[A-Z]\", s) is not None\n\ndef is_alpha(s):\n    return re.search(r\"[a-zA-Z]\", s) is not None\n\ndef main():\n    with open(\"input.txt\", \"r\") as f:\n        data = f.read()\n    for s in data.split(\"\\n\"):\n        if is_num(s):\n            print(s, \"is a number\")\n        elif is_special(s):\n            print(s, \"is a special character\")\n        elif is_lower(s):\n            print(s, \"is a lowercase character\")\n        elif is_upper(s):\n            print(s, \"is an uppercase character\")\n        elif is_alpha(s):\n            print(s, \"is an alpha character\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 20,
      "score": 8.946210893390457,
      "candidate": "def uppercase(text):\n    return re.findall(r\"[A-Z]\", text)\n\ndef lowercase(text):\n    return re.findall(r\"[a-z]\", text)\n\ndef special(text):\n    return re.findall(r\"[^a-zA-Z0-9]\", text)\n\ndef numeric(text):\n    return re.findall(r\"[0-9]\", text)\n\ndef main():\n    text = 'Hello World'\n    print uppercase(text)\n    print lowercase(text)\n    print special(text)\n    print numeric(text)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 8.932217008005624,
      "candidate": "import re\n\n\ndef get_data():\n    \"\"\"\n    Return a list of tuples with the data.\n    \"\"\"\n    data = []\n    data.append(('abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz'))\n    data.append(('!@#$%^&*()_+=-123', '!@#$%^&*()_+=-123', '!@#$%^&*()_+=-123', '!@#$%^&*()_+=-123'))\n    data.append(('a b c d e f g h i j k l m n o p q r s t u v w x y z', 'a b c d e f g h i j k l m n o p q r s t u v w x y z', 'a b c d e f g h i j k l m n o p q r s t u v w x y z', 'a b c d e f g h i j k l m n o p q r s t u v w x y z'))\n    data.append(('1234567890', '1234567890', '1234567890', '1234567890'))\n    data.append(('1 2 3 4 5 6 7 8 9 0', '1 2 3 4 5 6 7 8 9 0', '1 2 3 4 5 6 7 8 9 0', '1 2 3 4 5 6 7 8 9 0'))\n    data.append(('a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a"
    },
    {
      "rank": 22,
      "score": 8.910084504002544,
      "candidate": "def find_special_char(string):\n\tspecial_char = re.findall(r\"[a-zA-Z0-9]\", string)\n\tuppercase = re.findall(r\"[A-Z]\", string)\n\tlowercase = re.findall(r\"[a-z]\", string)\n\treturn special_char, uppercase, lowercase\n\nif __name__ == '__main__':\n\tstring = \"The quick brown fox jumps over the lazy dog\"\n\tspecial_char, uppercase, lowercase = find_special_char(string)\n\tprint special_char\n\tprint uppercase\n\tprint lowercase"
    },
    {
      "rank": 23,
      "score": 8.85571690049604,
      "candidate": "import re\n\ndef is_special_character(s):\n    return re.match(r'[a-zA-Z0-9@$+_-]', s) is not None\n\ndef is_numeric(s):\n    return re.match(r'[0-9]', s) is not None\n\ndef is_lowercase(s):\n    return re.match(r'[a-z]', s) is not None\n\ndef is_uppercase(s):\n    return re.match(r'[A-Z]', s) is not None\n\ndef main():\n    s = 'Special character is @'\n    print(s)\n    print(is_special_character(s))\n\n    s = 'Numeric is 4'\n    print(s)\n    print(is_numeric(s))\n\n    s = 'Lowercase is a'\n    print(s)\n    print(is_lowercase(s))\n\n    s = 'Uppercase is A'\n    print(s)\n    print(is_uppercase(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 8.850707355641543,
      "candidate": "import re\n\ndef find_special_chars(text):\n    \"\"\"\n    :type text: str\n    :rtype: list[str]\n    \"\"\"\n    return re.findall(r\"[A-Za-z]\", text)\n\ndef find_numeric_values(text):\n    \"\"\"\n    :type text: str\n    :rtype: list[str]\n    \"\"\"\n    return re.findall(r\"[0-9]\", text)\n\ndef find_lowercase_values(text):\n    \"\"\"\n    :type text: str\n    :rtype: list[str]\n    \"\"\"\n    return re.findall(r\"[a-z]\", text)\n\ndef find_uppercase_values(text):\n    \"\"\"\n    :type text: str\n    :rtype: list[str]\n    \"\"\"\n    return re.findall(r\"[A-Z]\", text)\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    print(find_special_chars(\"Hello, world!\"))\n    print(find_numeric_values(\"Hello, world!\"))\n    print(find_lowercase_values(\"Hello, world!\"))\n    print(find_uppercase_values(\"Hello, world!\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.8281618090209,
      "candidate": "def get_count(string):\n    count = 0\n    for ch in string:\n        if ch.isalpha():\n            count += 1\n    return count\n\ndef main():\n    string = 'aabbbbccccdddddeeeee'\n    print(get_count(string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 8.81367773444215,
      "candidate": "import re\n\ndef count_numeric(string):\n    numeric = 0\n    for char in string:\n        if char.isdigit():\n            numeric += 1\n    return numeric\n\ndef count_special(string):\n    special = 0\n    for char in string:\n        if char.isupper():\n            special += 1\n        if char.islower():\n            special += 1\n        if char.isdigit():\n            special += 1\n    return special\n\ndef count_uppercase(string):\n    uppercase = 0\n    for char in string:\n        if char.isupper():\n            uppercase += 1\n    return uppercase\n\ndef count_lowercase(string):\n    lowercase = 0\n    for char in string:\n        if char.islower():\n            lowercase += 1\n    return lowercase\n\ndef count_numbers(string):\n    numbers = 0\n    for char in string:\n        if char.isdigit():\n            numbers += 1\n    return numbers\n\ndef count_letters(string):\n    letters = 0\n    for char in string:\n        if char.isalpha():\n            letters += 1\n    return letters\n\nprint(count_numeric(\"asdf\"))\nprint(count_special(\"asdf\"))\nprint(count_uppercase(\"asdf\"))\nprint(count_lowercase(\"asdf\"))\nprint(count_numbers(\"asdf\"))\nprint(count_letters(\"asdf\"))"
    },
    {
      "rank": 27,
      "score": 8.76828871349479,
      "candidate": "import re\n\ndef uppercase_lowercase_special(regex):\n    \"\"\"\n    Input: regex\n    Output: list of tuples containing\n    [1] The regex pattern\n    [2] The regex group\n    [3] The group value\n    \"\"\"\n    pattern = re.compile(regex)\n    groups = pattern.groups()\n    return [pattern, groups[0], groups[1]]\n\nif __name__ == \"__main__\":\n    print(uppercase_lowercase_special('[a-z]*'))\n    print(uppercase_lowercase_special('[a-z]*'))\n    print(uppercase_lowercase_special('[^a-z]*'))\n    print(uppercase_lowercase_special('[^a-z]*'))\n    print(uppercase_lowercase_special('[A-Z]*'))\n    print(uppercase_lowercase_special('[^A-Z]*'))\n    print(uppercase_lowercase_special('[0-9]*'))\n    print(uppercase_lowercase_special('[^0-9]*'))"
    },
    {
      "rank": 28,
      "score": 8.750282588864879,
      "candidate": "def uppercase_lowercase(string):\n    pattern = r'[A-Z]*|[a-z]*|[!-~]*|[0-9]*|[^a-zA-Z!-~0-9]*'\n    return [re.findall(pattern, s) for s in string]\n\ndef special_char(string):\n    pattern = r'[^a-zA-Z!-~0-9]*'\n    return [re.findall(pattern, s) for s in string]\n\ndef number(string):\n    pattern = r'[0-9]*'\n    return [re.findall(pattern, s) for s in string]\n\ndef main():\n    string = 'Hello world, this is a test.'\n    print(uppercase_lowercase(string))\n    print(special_char(string))\n    print(number(string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 8.715724466237427,
      "candidate": "import re\n\n\ndef count_words(text):\n    pattern = r'[A-Z]{4,}'\n    pattern = re.compile(pattern)\n    matches = pattern.findall(text)\n    count = 0\n    for match in matches:\n        if match.isupper():\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    text = 'This is a test'\n    print(count_words(text))"
    },
    {
      "rank": 30,
      "score": 8.692801520950061,
      "candidate": "# write your code below\n\n\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_special(s):\n    return s in set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n\n\ndef is_lowercase(s):\n    return s.islower()\n\n\ndef is_uppercase(s):\n    return s.isupper()\n\n\ndef is_special_case(s):\n    return is_special(s) or is_lowercase(s) or is_uppercase(s)\n\n\ndef is_number_or_special_case(s):\n    return is_number(s) or is_special_case(s)\n\n\ndef is_number_or_special(s):\n    return is_number(s) or is_special(s)\n\n\ndef is_number_or_special_case_or_lowercase(s):\n    return is_number_or_special_case(s) or is_lowercase(s)\n\n\ndef is_number_or_special_case_or_uppercase(s):\n    return is_number_or_special_case(s) or is_uppercase(s)\n\n\ndef main():\n    print(is_number_or_special_case('abcd'))\n    print(is_number_or_special_case_or_lowercase('abcd'))\n    print(is_number_or_special_case_or_uppercase('abcd'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.632293453617281,
      "candidate": "import re\n\ndef count_characters(str):\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n        elif i.islower():\n            count += 1\n        elif i.isdigit():\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    str = \"Hello world!\"\n    print(count_characters(str))"
    },
    {
      "rank": 32,
      "score": 8.625262456968262,
      "candidate": "import re\n\ndef count_characters(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    return len(text)\n\ndef count_upper(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    return len([1 for c in text if c.isupper()])\n\ndef count_lower(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    return len([1 for c in text if c.islower()])\n\ndef count_special(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    return len([1 for c in text if c.isspace()])\n\ndef count_numeric(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    return len([1 for c in text if c.isdigit()])\n\ndef main():\n    text = \"Hello world\"\n    print(\"Count characters:\", count_characters(text))\n    print(\"Count upper:\", count_upper(text))\n    print(\"Count lower:\", count_lower(text))\n    print(\"Count special:\", count_special(text))\n    print(\"Count numeric:\", count_numeric(text))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.625142247198651,
      "candidate": "import re\n\ndef main():\n    with open('data.txt') as f:\n        content = f.read()\n    # print(content)\n    # print(re.findall('[A-Z]', content))\n    # print(re.findall('[a-z]', content))\n    # print(re.findall('[^a-z]', content))\n    # print(re.findall('[^a-z]', content))\n    # print(re.findall('[0-9]', content))\n    # print(re.findall('[^0-9]', content))\n    # print(re.findall('[^a-zA-Z]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9]', content))\n    # print(re.findall('[^a-zA-Z0-9"
    },
    {
      "rank": 34,
      "score": 8.616253589228675,
      "candidate": "# Complete the function below.\ndef is_valid(s):\n    return True if re.match(r'[a-zA-Z0-9]+',s) else False\n\nif __name__ == '__main__':\n    s = input()\n    print(is_valid(s))\n    print(is_valid(s))"
    },
    {
      "rank": 35,
      "score": 8.610076160146226,
      "candidate": "# I know this is hacky but I don't have time to write a function for this problem.\n\n# A regex to find all numbers\nnumber_regex = r\"(\\d+)\".replace(\"\\d\", \"[0-9]\")\n\n# A regex to find all uppercase letters\nuppercase_regex = r\"([A-Z])\".replace(\"[A-Z]\", \"[a-z]\")\n\n# A regex to find all lowercase letters\nlowercase_regex = r\"([a-z])\".replace(\"[a-z]\", \"[A-Z]\")\n\n# A regex to find all special characters\nspecial_regex = r\"([!,@,#,$,%,^,&,*,?,_,~])\".replace(\"[!,@,#,$,%,^,&,*,?,_,~]\", \"[!,@,#,$,%,^,&,*,?,_,~]\")\n\n# A regex to find all uppercase and lowercase letters\nboth_regex = r\"([A-Za-z])\".replace(\"[A-Za-z]\", \"[A-Za-z]\")\n\n# A regex to find all numbers and uppercase and lowercase letters\nall_regex = number_regex + uppercase_regex + lowercase_regex + both_regex\n\n# A regex to find all numbers and special characters\nall_regex = number_regex + special_regex\n\n# A regex to find all numbers and uppercase and lowercase letters\nall_regex = number_regex + uppercase_regex + lowercase_regex + both_regex\n\n# A regex to find all numbers and special characters\nall_regex = number_regex + special_regex\n\n# A regex to find all numbers and uppercase and lowercase letters\nall_regex = number_regex + uppercase_regex + lowercase_regex + both_regex\n\n# A regex to find all numbers and special characters\nall_regex = number_regex + special_regex\n\n# A regex to find all numbers and uppercase and lowercase letters\nall_regex = number_regex + uppercase"
    },
    {
      "rank": 36,
      "score": 8.606486429141842,
      "candidate": "class Solution(object):\n    def countNumbers(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = 0\n        for c in s:\n            if c.isalpha():\n                n += 1\n            elif c.isdigit():\n                n += 3\n            else:\n                n += 4\n        return n\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.countNumbers(\"Aa1.2\")\n    print s.countNumbers(\"Aa1.2z\")\n    print s.countNumbers(\"Aa1.2z\")\n    print s.countNumbers(\"Aa1.2z\")"
    },
    {
      "rank": 37,
      "score": 8.60156811074208,
      "candidate": "import re\n\n\ndef get_string(s):\n    return ''.join([c for c in s if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'])\n\n\ndef get_number(s):\n    return re.findall(r'\\d', s)\n\n\ndef is_special(s):\n    return re.findall(r'[A-Za-z@#$%^&+=]', s)\n\n\ndef is_uppercase(s):\n    return re.findall(r'[A-Z]', s)\n\n\ndef is_lowercase(s):\n    return re.findall(r'[a-z]', s)\n\n\ndef is_number(s):\n    return re.findall(r'\\d', s)\n\n\ndef main():\n    # This is a simple example\n    s = 'Hello World!'\n    print('Uppercase: {}'.format(get_string(s)))\n    print('Lowercase: {}'.format(get_string(s).lower()))\n    print('Special: {}'.format(is_special(s)))\n    print('Numeric: {}'.format(is_number(s)))\n    print('Uppercase: {}'.format(is_uppercase(s)))\n    print('Lowercase: {}'.format(is_lowercase(s)))\n    print('Number: {}'.format(is_number(s)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.565425580227462,
      "candidate": "def main():\n    #tests = [\n    #    ('hello', ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']),\n    #    ('hello', ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']),\n    #    ('HELLO', ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']),\n    #    ('hellO', ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']),\n    #    ('HELLO', ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']),\n    #    ('HELLO', ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']),\n    #    ('HELLO', ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']),\n    #    ('HELLO', ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']),\n    #    ('HELLO', ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']),\n    #    ('HELLO', ['HELL"
    },
    {
      "rank": 39,
      "score": 8.548876241946822,
      "candidate": "import re\n\ndef is_uppercase(s):\n    return re.match(r'^[A-Z]', s)\n\ndef is_lowercase(s):\n    return re.match(r'^[a-z]', s)\n\ndef is_special(s):\n    return re.match(r'^[!@#$%^&*()_+|-=`~;,.<>/]+', s)\n\ndef is_numeric(s):\n    return re.match(r'^[0-9]*$', s)\n\ndef find_numbers(s):\n    return re.findall(r'[0-9]*', s)\n\ndef find_special(s):\n    return re.findall(r'[!@#$%^&*()_+|-=`~;,.<>/]+', s)\n\ndef find_uppercase(s):\n    return re.findall(r'[A-Z]', s)\n\ndef find_lowercase(s):\n    return re.findall(r'[a-z]', s)\n\ndef find_letters(s):\n    return re.findall(r'[a-zA-Z]', s)\n\ndef find_numbers(s):\n    return re.findall(r'[0-9]*', s)\n\ndef find_special(s):\n    return re.findall(r'[!@#$%^&*()_+|-=`~;,.<>/]+', s)\n\ndef find_all(s):\n    return re.findall(r'[A-Za-z]', s)\n\nif __name__ == '__main__':\n    s = 'Hello World! How are you?'\n    print('uppercase:', is_uppercase(s))\n    print('lowercase:', is_lowercase(s))\n    print('special:', is_special(s))\n    print('numeric:', is_numeric(s))\n    print('letters:', find_letters(s))\n    print('numbers:', find_numbers(s))\n    print"
    },
    {
      "rank": 40,
      "score": 8.542875062379007,
      "candidate": "def count_num(s):\n    \"\"\"\n    Count the number of numbers in a string\n    \"\"\"\n    return re.findall('\\d+', s)\n\ndef count_num_and_letter(s):\n    \"\"\"\n    Count the number of numbers and letters in a string\n    \"\"\"\n    return re.findall('[a-zA-Z]+', s)\n\ndef count_uppercase(s):\n    \"\"\"\n    Count the number of uppercase letters in a string\n    \"\"\"\n    return re.findall('[A-Z]+', s)\n\ndef count_lowercase(s):\n    \"\"\"\n    Count the number of lowercase letters in a string\n    \"\"\"\n    return re.findall('[a-z]+', s)\n\ndef count_special(s):\n    \"\"\"\n    Count the number of special characters in a string\n    \"\"\"\n    return re.findall('[^a-zA-Z0-9]+', s)\n\ndef count_letter(s):\n    \"\"\"\n    Count the number of letters in a string\n    \"\"\"\n    return re.findall('[a-zA-Z]+', s)\n\ndef count_numeric(s):\n    \"\"\"\n    Count the number of numbers in a string\n    \"\"\"\n    return re.findall('[0-9]+', s)\n\nif __name__ == '__main__':\n    print(count_num('abc123'))\n    print(count_num_and_letter('abc123'))\n    print(count_uppercase('abc123'))\n    print(count_lowercase('abc123'))\n    print(count_special('abc123'))\n    print(count_letter('abc123'))\n    print(count_numeric('abc123'))"
    },
    {
      "rank": 41,
      "score": 8.53012858503943,
      "candidate": "import re\n\ndef is_number(s):\n    \"\"\"\n    Check whether the given string is numeric.\n\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return re.match(r'^[0-9]+$', s)\n\ndef is_special(s):\n    \"\"\"\n    Check whether the given string is special character.\n\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return re.match(r'^[a-zA-Z]+$', s)\n\ndef is_lowercase(s):\n    \"\"\"\n    Check whether the given string is lowercase.\n\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return re.match(r'^[a-z]+$', s)\n\ndef is_uppercase(s):\n    \"\"\"\n    Check whether the given string is uppercase.\n\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return re.match(r'^[A-Z]+$', s)\n\ndef is_valid_string(s):\n    \"\"\"\n    Check whether the given string is valid.\n\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return re.match(r'^[a-zA-Z0-9]+$', s)\n\nif __name__ == '__main__':\n    s = 'Hello, my name is john!'\n    print(is_number(s))\n    print(is_special(s))\n    print(is_lowercase(s))\n    print(is_uppercase(s))\n    print(is_valid_string(s))"
    },
    {
      "rank": 42,
      "score": 8.499905739299377,
      "candidate": "# https://www.hackerrank.com/challenges/regex-matching-a-regex/problem\n\nimport re\n\ndef find_words(s):\n    regex = re.compile(r'\\w+')\n    words = regex.findall(s)\n    return words\n\ndef main():\n    s = input()\n    words = find_words(s)\n    print(len(words))\n    for word in words:\n        print(word)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.478208546788407,
      "candidate": "import re\n\ndef count_num_letters(s):\n    num_letters = 0\n    for c in s:\n        if c.isalpha():\n            num_letters += 1\n    return num_letters\n\ndef count_special_char(s):\n    special_char = 0\n    for c in s:\n        if c.isalpha() or c.isdigit():\n            special_char += 1\n    return special_char\n\ndef count_lowercase(s):\n    lowercase = 0\n    for c in s:\n        if c.islower():\n            lowercase += 1\n    return lowercase\n\ndef count_uppercase(s):\n    uppercase = 0\n    for c in s:\n        if c.isupper():\n            uppercase += 1\n    return uppercase\n\ndef count_numeric(s):\n    numeric = 0\n    for c in s:\n        if c.isdigit():\n            numeric += 1\n    return numeric\n\ndef count_special_char_and_num_letters(s):\n    special_char_num_letters = 0\n    for c in s:\n        if c.isalpha():\n            special_char_num_letters += 1\n        if c.isdigit():\n            special_char_num_letters += 1\n    return special_char_num_letters\n\ndef count_special_char_and_numeric(s):\n    special_char_numeric = 0\n    for c in s:\n        if c.isalpha():\n            special_char_numeric += 1\n        if c.isdigit():\n            special_char_numeric += 1\n    return special_char_numeric\n\ndef count_special_char_and_lowercase(s):\n    special_char_lowercase = 0\n    for c in s:\n        if c.isalpha():\n            special_char_lowercase += 1\n        if c.islower():\n            special_char_lowercase += 1\n    return special_char_lowercase\n\ndef count_special_char_and_uppercase(s):\n    special_char_uppercase = 0\n    for c in s:\n        if c"
    },
    {
      "rank": 44,
      "score": 8.437695832075478,
      "candidate": "import re\n\ndef uppercase(s):\n    pattern = r'[A-Z]*'\n    return re.findall(pattern, s)\n\ndef lowercase(s):\n    pattern = r'[a-z]*'\n    return re.findall(pattern, s)\n\ndef special(s):\n    pattern = r'[A-Za-z0-9]*'\n    return re.findall(pattern, s)\n\ndef numeric(s):\n    pattern = r'[0-9]*'\n    return re.findall(pattern, s)\n\n\ndef main():\n    print(uppercase('Hello, world!'))\n    print(lowercase('Hello, world!'))\n    print(special('Hello, world!'))\n    print(numeric('Hello, world!'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.408439383654278,
      "candidate": "def uppercase_lowercase_special_numeric_regex(string):\n    #Write your code here\n    pass\n\nif __name__ == \"__main__\":\n    string = \"I am a number 0.123\"\n    print(uppercase_lowercase_special_numeric_regex(string))"
    },
    {
      "rank": 46,
      "score": 8.386620303250325,
      "candidate": "import re\n\n\ndef count_char(string):\n    return re.findall(\"[A-Za-z0-9]+\", string)\n\n\ndef count_upper(string):\n    return re.findall(\"[A-Z]+\", string)\n\n\ndef count_lower(string):\n    return re.findall(\"[a-z]+\", string)\n\n\ndef count_special(string):\n    return re.findall(\"[^A-Za-z0-9]+\", string)\n\n\ndef count_numeric(string):\n    return re.findall(\"[0-9]+\", string)\n\n\nif __name__ == \"__main__\":\n    print(count_char(\"Hello World\"))\n    print(count_upper(\"Hello World\"))\n    print(count_lower(\"Hello World\"))\n    print(count_special(\"Hello World\"))\n    print(count_numeric(\"Hello World\"))"
    },
    {
      "rank": 47,
      "score": 8.375312293858853,
      "candidate": "from string import ascii_uppercase, ascii_lowercase, ascii_letters, digits\nimport re\n\n\ndef count_special_characters(text):\n    regex = re.compile(r'[\\W_]+')\n    return len(regex.findall(text))\n\n\ndef count_uppercase(text):\n    regex = re.compile(r'[A-Z]+')\n    return len(regex.findall(text))\n\n\ndef count_lowercase(text):\n    regex = re.compile(r'[a-z]+')\n    return len(regex.findall(text))\n\n\ndef count_numeric(text):\n    regex = re.compile(r'[0-9]+')\n    return len(regex.findall(text))\n\n\ndef count_letters(text):\n    regex = re.compile(r'[a-zA-Z]+')\n    return len(regex.findall(text))\n\n\nif __name__ == '__main__':\n    text = 'Some text with special characters and numbers'\n    print(count_special_characters(text))\n    print(count_uppercase(text))\n    print(count_lowercase(text))\n    print(count_numeric(text))\n    print(count_letters(text))"
    },
    {
      "rank": 48,
      "score": 8.351614956112536,
      "candidate": "def regex_search(string, pattern):\n    return any(pattern.search(s) for s in string)\n\ndef main():\n    string = input().strip()\n    pattern = input().strip()\n    print(regex_search(string, pattern))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.331556294201176,
      "candidate": "#!/bin/python\n\ndef find_char_with_regex(string, regex):\n    # write your code here\n    regex = r'^[a-zA-Z0-9]+$'\n    result = []\n    for char in string:\n        if re.match(regex, char):\n            result.append(char)\n    return result\n\nif __name__ == \"__main__\":\n    string = \"this is a test string\"\n    print(find_char_with_regex(string, regex))"
    },
    {
      "rank": 50,
      "score": 8.327375965969855,
      "candidate": "import re\n\ndef get_num_or_not(s):\n    if re.match(r'^[0-9]+$', s):\n        return 'numeric'\n    elif re.match(r'^[a-zA-Z]+$', s):\n        return 'alphanumeric'\n    elif re.match(r'^[a-zA-Z0-9]+$', s):\n        return 'alphanumeric or special'\n    else:\n        return 'not special'\n\nif __name__ == '__main__':\n    s = '1234ABcdABcd1234'\n    print(get_num_or_not(s))\n    s = 'AbCdA'\n    print(get_num_or_not(s))"
    },
    {
      "rank": 51,
      "score": 8.327367757082776,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\ndef is_special(s):\n    special_chars = '!@#$%^&*()_+=-[]{}|;:\\'\",<.>/?\\t\\n\\r'\n    return any(s.upper() in special_chars for s in s)\n\ndef is_numeric(s):\n    return re.search('[0-9]', s)\n\ndef is_uppercase(s):\n    return re.search('[A-Z]', s)\n\ndef is_lowercase(s):\n    return re.search('[a-z]', s)\n\ndef is_special_char(s):\n    special_chars = '!@#$%^&*()_+=-[]{}|;:\\'\",<.>/?\\t\\n\\r'\n    return any(s in special_chars for s in s)\n\ndef main():\n    test_cases = [\n        ['abc', 'abc', True, True, True, True],\n        ['abc123', 'abc123', True, True, False, True],\n        ['Abc123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False, True, False, False],\n        ['ABC123', 'abc123', False"
    },
    {
      "rank": 52,
      "score": 8.298597569547805,
      "candidate": "#!/usr/bin/env python\n\ndef count_char(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n        if char.islower():\n            count += 1\n        if char.isdigit():\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    test_cases = [\n        (\"aA\", 3),\n        (\"Hello\", 1),\n        (\"Hello world!\", 2)\n    ]\n    for test_case in test_cases:\n        print(count_char(test_case[0]))"
    },
    {
      "rank": 53,
      "score": 8.2938925966498,
      "candidate": "import re\n\ndef get_char_count(string):\n    char_count = 0\n    for char in string:\n        if char.isalpha():\n            char_count += 1\n    return char_count\n\ndef get_special_count(string):\n    special_count = 0\n    for char in string:\n        if char.isalpha() or char.isdigit():\n            special_count += 1\n    return special_count\n\ndef get_numeric_count(string):\n    numeric_count = 0\n    for char in string:\n        if char.isdigit():\n            numeric_count += 1\n    return numeric_count\n\ndef get_lowercase_count(string):\n    lowercase_count = 0\n    for char in string:\n        if char.islower():\n            lowercase_count += 1\n    return lowercase_count\n\ndef get_uppercase_count(string):\n    uppercase_count = 0\n    for char in string:\n        if char.isupper():\n            uppercase_count += 1\n    return uppercase_count\n\ndef get_count(string):\n    char_count = get_char_count(string)\n    special_count = get_special_count(string)\n    numeric_count = get_numeric_count(string)\n    lowercase_count = get_lowercase_count(string)\n    uppercase_count = get_uppercase_count(string)\n    total_count = char_count + special_count + numeric_count + lowercase_count + uppercase_count\n    return total_count\n\ndef get_max(string):\n    max_count = 0\n    for char in string:\n        if char.isdigit():\n            char_count = get_char_count(string)\n            if char_count > max_count:\n                max_count = char_count\n    return max_count\n\ndef get_min(string):\n    min_count = 9999999999\n    for char in string:\n        if char.isdigit():\n            char_count = get_char_count(string)\n            if char_count < min_count:\n                min"
    },
    {
      "rank": 54,
      "score": 8.289838256518838,
      "candidate": "import re\n\ndef uppercase():\n    pattern = re.compile('[A-Z]')\n    match = pattern.findall('hello world')\n    print(match)\n    return\n\ndef lowercase():\n    pattern = re.compile('[a-z]')\n    match = pattern.findall('hello world')\n    print(match)\n    return\n\ndef special_char():\n    pattern = re.compile('[^a-zA-Z0-9]')\n    match = pattern.findall('hello world')\n    print(match)\n    return\n\ndef numeric():\n    pattern = re.compile('[0-9]')\n    match = pattern.findall('hello world')\n    print(match)\n    return\n\nif __name__ == '__main__':\n    uppercase()\n    lowercase()\n    special_char()\n    numeric()"
    },
    {
      "rank": 55,
      "score": 8.251903304236286,
      "candidate": "import re\n\ndef count_chars(string):\n    \"\"\"\n    Count all characters in a string.\n    \"\"\"\n    return len(string)\n\ndef count_upper(string):\n    \"\"\"\n    Count all upper-case letters in a string.\n    \"\"\"\n    return len([True for c in string if c.isupper()])\n\ndef count_lower(string):\n    \"\"\"\n    Count all lower-case letters in a string.\n    \"\"\"\n    return len([True for c in string if c.islower()])\n\ndef count_special(string):\n    \"\"\"\n    Count all special characters in a string.\n    \"\"\"\n    return len([True for c in string if c.isspace()])\n\ndef count_numeric(string):\n    \"\"\"\n    Count all numeric characters in a string.\n    \"\"\"\n    return len([True for c in string if c.isdigit()])\n\ndef count_words(string):\n    \"\"\"\n    Count all words in a string.\n    \"\"\"\n    return len([True for c in string if c.isalnum()])\n\ndef count_words_regex(string):\n    \"\"\"\n    Count all words in a string using regex.\n    \"\"\"\n    return len(re.findall(r'\\w+', string))\n\ndef main():\n    string = \"Python is a widely used general-purpose, high-level programming language.\"\n    print(\"Count all characters:\", count_chars(string))\n    print(\"Count all upper-case letters:\", count_upper(string))\n    print(\"Count all lower-case letters:\", count_lower(string))\n    print(\"Count all special characters:\", count_special(string))\n    print(\"Count all numeric characters:\", count_numeric(string))\n    print(\"Count all words:\", count_words(string))\n    print(\"Count all words using regex:\", count_words_regex(string))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.214125058964552,
      "candidate": "import re\n\ndef find_special_char(text):\n    regex = re.compile(r'[A-Z]')\n    return regex.findall(text)\n\ndef find_lowercase(text):\n    regex = re.compile(r'[a-z]')\n    return regex.findall(text)\n\ndef find_uppercase(text):\n    regex = re.compile(r'[A-Z]')\n    return regex.findall(text)\n\ndef find_numeric(text):\n    regex = re.compile(r'[0-9]')\n    return regex.findall(text)\n\ndef main():\n    text = 'abcdefg1234567890'\n    print(find_special_char(text))\n    print(find_lowercase(text))\n    print(find_uppercase(text))\n    print(find_numeric(text))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.212735598038213,
      "candidate": "import re\n\ndef find_special_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isalpha():\n            count += 1\n        elif char.isdigit():\n            count += 2\n        elif char.islower():\n            count += 3\n        elif char.isupper():\n            count += 4\n    return count\n\n\nif __name__ == '__main__':\n    print find_special_chars('ABC')"
    },
    {
      "rank": 58,
      "score": 8.211579567659316,
      "candidate": "import re\n\ndef count_number(s):\n    n = re.findall(r'\\d+', s)\n    if n:\n        return len(n)\n    else:\n        return 0\n\ndef count_special(s):\n    s = s.lower()\n    return re.findall(r'[a-z]+', s)\n\ndef count_lower(s):\n    s = s.lower()\n    return re.findall(r'[a-z]+', s)\n\ndef count_upper(s):\n    s = s.lower()\n    return re.findall(r'[A-Z]+', s)\n\ndef count_all(s):\n    s = s.lower()\n    return re.findall(r'[A-Z]+', s) + re.findall(r'[a-z]+', s) + re.findall(r'[0-9]+', s)\n\ndef main():\n    s = 'Hello world!'\n    print(count_number(s))\n    print(count_special(s))\n    print(count_lower(s))\n    print(count_upper(s))\n    print(count_all(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 59,
      "score": 8.209707251476969,
      "candidate": "import re\n\ndef count_characters(string):\n    \"\"\"\n    Write a function to count the number of characters in a string.\n    \"\"\"\n    return len(string)\n\n\ndef count_special_chars(string):\n    \"\"\"\n    Write a function to count the number of special characters in a string.\n    \"\"\"\n    return len(re.findall(\"[A-Za-z0-9]\", string))\n\n\ndef count_numeric_chars(string):\n    \"\"\"\n    Write a function to count the number of numeric characters in a string.\n    \"\"\"\n    return len(re.findall(\"[0-9]\", string))\n\n\ndef count_uppercase_chars(string):\n    \"\"\"\n    Write a function to count the number of uppercase characters in a string.\n    \"\"\"\n    return len(re.findall(\"[A-Z]\", string))\n\n\ndef count_lowercase_chars(string):\n    \"\"\"\n    Write a function to count the number of lowercase characters in a string.\n    \"\"\"\n    return len(re.findall(\"[a-z]\", string))\n\n\ndef count_special_chars_and_numeric_chars(string):\n    \"\"\"\n    Write a function to count the number of special characters and numeric characters in a string.\n    \"\"\"\n    return count_special_chars(string) + count_numeric_chars(string) + count_uppercase_chars(string) + count_lowercase_chars(string)\n\n\nif __name__ == \"__main__\":\n    string = \"This is a test of the Regex module.\"\n    print(count_special_chars(string))\n    print(count_numeric_chars(string))\n    print(count_uppercase_chars(string))\n    print(count_lowercase_chars(string))\n    print(count_special_chars_and_numeric_chars(string))"
    },
    {
      "rank": 60,
      "score": 8.2048573255218,
      "candidate": "import re\n\ndef get_special_char_num(string):\n    return {\n        '0': string.count('0'),\n        '1': string.count('1'),\n        '2': string.count('2'),\n        '3': string.count('3'),\n        '4': string.count('4'),\n        '5': string.count('5'),\n        '6': string.count('6'),\n        '7': string.count('7'),\n        '8': string.count('8'),\n        '9': string.count('9')\n    }\n\ndef get_number(string):\n    return {\n        '0': string.count('0'),\n        '1': string.count('1'),\n        '2': string.count('2'),\n        '3': string.count('3'),\n        '4': string.count('4'),\n        '5': string.count('5'),\n        '6': string.count('6'),\n        '7': string.count('7'),\n        '8': string.count('8'),\n        '9': string.count('9')\n    }\n\ndef get_uppercase(string):\n    return {\n        'A': string.count('A'),\n        'B': string.count('B'),\n        'C': string.count('C'),\n        'D': string.count('D'),\n        'E': string.count('E'),\n        'F': string.count('F'),\n        'G': string.count('G'),\n        'H': string.count('H'),\n        'I': string.count('I'),\n        'J': string.count('J'),\n        'K': string.count('K'),\n        'L': string.count('L'),\n        'M': string.count('M'),\n        'N': string.count('N'),\n        'O': string.count('O'),\n        'P': string.count('P'),\n        'Q': string.count('Q'),\n        'R': string.count('R'),\n        'S': string.count('S'),\n        'T': string.count('T'),\n        'U': string.count('U'),\n        'V': string."
    },
    {
      "rank": 61,
      "score": 8.172253082181854,
      "candidate": "import re\n\ndef is_numeric(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_special(s):\n    return re.match(r\"[A-Za-z0-9]\", s)\n\ndef is_lower(s):\n    return re.match(r\"[a-z]\", s)\n\ndef is_upper(s):\n    return re.match(r\"[A-Z]\", s)\n\ndef is_special_case(s):\n    return is_numeric(s) or is_special(s) or is_lower(s) or is_upper(s)\n\ndef is_alphanumeric(s):\n    return re.match(r\"[A-Za-z]\", s)\n\ndef is_alphanumeric_case(s):\n    return is_alphanumeric(s) or is_special_case(s)\n\ndef is_all_lowercase(s):\n    return re.match(r\"[a-z]\", s)\n\ndef is_all_uppercase(s):\n    return re.match(r\"[A-Z]\", s)\n\ndef is_all_special_case(s):\n    return is_special_case(s) or is_numeric(s) or is_lower(s) or is_upper(s)\n\ndef is_all_alphanumeric(s):\n    return re.match(r\"[A-Za-z]\", s) or is_special_case(s)\n\ndef is_all_alphanumeric_case(s):\n    return is_alphanumeric(s) or is_special_case(s)\n\ndef is_all_lowercase_case(s):\n    return is_all_lowercase(s) or is_lower(s) or is_upper(s)\n\ndef is_all_uppercase_case(s):\n    return is_all_uppercase(s) or is_upper(s) or is_lower(s)\n\ndef is_all_special_case_case(s):\n    return is_all_special_case(s)"
    },
    {
      "rank": 62,
      "score": 8.163300679823958,
      "candidate": "import re\n\ndef count_number_of_char(s):\n    number_of_char = 0\n    for c in s:\n        if c.isdigit() or c.isalpha() or c.isupper() or c.islower():\n            number_of_char += 1\n    return number_of_char\n\n\ndef main():\n    test_cases = [\n        [\"aaabc\", 3],\n        [\"aaacb\", 2],\n        [\"aaabcabcabc\", 3],\n        [\"aaabcabcabcabcabcabcabc\", 6]\n    ]\n\n    for test in test_cases:\n        print(f\"Number of upper case: {count_number_of_char(test[0])}\")\n        print(f\"Number of lower case: {count_number_of_char(test[1])}\")\n        print(f\"Number of special character: {count_number_of_char(test[2])}\")\n        print(f\"Number of numeric: {count_number_of_char(test[3])}\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.144125099485041,
      "candidate": "import re\n\ndef get_char(data, pattern):\n    \"\"\"\n    @param data: string\n    @param pattern: regular expression\n    @return: a list of tuples of matched characters\n    \"\"\"\n    matches = re.findall(pattern, data)\n    return [(char, i) for i, char in enumerate(matches)]\n\ndef get_char_count(data, pattern):\n    \"\"\"\n    @param data: string\n    @param pattern: regular expression\n    @return: a list of tuples of matched characters and their counts\n    \"\"\"\n    matches = re.findall(pattern, data)\n    return [(char, len(matches)) for char in matches]\n\ndef get_char_count_by_list(data, patterns):\n    \"\"\"\n    @param data: string\n    @param patterns: list of regular expressions\n    @return: a list of tuples of matched characters and their counts\n    \"\"\"\n    matches = []\n    for pattern in patterns:\n        matches.extend(re.findall(pattern, data))\n    return [(char, len(matches)) for char in matches]\n\ndef get_char_count_by_regex(data, patterns):\n    \"\"\"\n    @param data: string\n    @param patterns: regular expressions\n    @return: a list of tuples of matched characters and their counts\n    \"\"\"\n    matches = []\n    for pattern in patterns:\n        matches.extend(re.findall(pattern, data))\n    return [(char, len(matches)) for char in matches]\n\ndef get_char_count_by_regex_list(data, patterns):\n    \"\"\"\n    @param data: string\n    @param patterns: regular expressions\n    @return: a list of tuples of matched characters and their counts\n    \"\"\"\n    matches = []\n    for pattern in patterns:\n        matches.extend(re.findall(pattern, data))\n    return [(char, len(matches)) for char in matches]\n\ndef get_char_count_by_regex_set(data, patterns):\n    \"\"\"\n    @param data: string\n    @param patterns: regular expressions\n    @return: a list"
    },
    {
      "rank": 64,
      "score": 8.143591138329747,
      "candidate": "import re\n\ndef count_uppercase(string):\n    return len([c for c in string if c.isupper()])\n\ndef count_lowercase(string):\n    return len([c for c in string if c.islower()])\n\ndef count_special(string):\n    return len([c for c in string if c.isalpha()])\n\ndef count_numeric(string):\n    return len([c for c in string if c.isdigit()])\n\ndef uppercase_letters(string):\n    return [c for c in string if c.isupper()]\n\ndef lowercase_letters(string):\n    return [c for c in string if c.islower()]\n\ndef special_letters(string):\n    return [c for c in string if c.isalpha()]\n\ndef numeric_letters(string):\n    return [c for c in string if c.isdigit()]\n\ndef find_uppercase(string):\n    return re.findall('[A-Z]', string)\n\ndef find_lowercase(string):\n    return re.findall('[a-z]', string)\n\ndef find_special(string):\n    return re.findall('[^a-zA-Z]', string)\n\ndef find_numeric(string):\n    return re.findall('[0-9]', string)\n\ndef find_letters(string):\n    return re.findall('[a-zA-Z]', string)\n\ndef main():\n    string = 'Some text with uppercase letters and special characters.'\n    print(count_uppercase(string))\n    print(count_lowercase(string))\n    print(count_special(string))\n    print(count_numeric(string))\n    print(uppercase_letters(string))\n    print(lowercase_letters(string))\n    print(special_letters(string))\n    print(numeric_letters(string))\n    print(find_uppercase(string))\n    print(find_lowercase(string))\n    print(find_special(string))\n    print(find_numeric(string))\n    print(find_letters"
    },
    {
      "rank": 65,
      "score": 8.121884567141883,
      "candidate": "import re\n\n# Your code here\n\ndef find_numbers(text):\n    numbers = re.findall(r'\\d+', text)\n    return numbers\n\ndef find_special(text):\n    special = re.findall(r'[a-zA-Z]+', text)\n    return special\n\ndef find_uppercase(text):\n    uppercase = re.findall(r'[A-Z]+', text)\n    return uppercase\n\ndef find_lowercase(text):\n    lowercase = re.findall(r'[a-z]+', text)\n    return lowercase\n\ndef main():\n    text = 'This is a test'\n    print(find_numbers(text))\n    print(find_special(text))\n    print(find_uppercase(text))\n    print(find_lowercase(text))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 8.105983444291466,
      "candidate": "import re\n\ndef find_uppercase(s):\n    pattern = re.compile('[A-Z]')\n    return pattern.findall(s)\n\ndef find_lowercase(s):\n    pattern = re.compile('[a-z]')\n    return pattern.findall(s)\n\ndef find_special(s):\n    pattern = re.compile('[^a-zA-Z0-9]')\n    return pattern.findall(s)\n\ndef find_numeric(s):\n    pattern = re.compile('[0-9]')\n    return pattern.findall(s)\n\ndef main():\n    s = 'this is a test'\n    print find_uppercase(s)\n    print find_lowercase(s)\n    print find_special(s)\n    print find_numeric(s)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 8.08452234024709,
      "candidate": "import re\n\ndef is_special_character(string):\n    return re.search('[^a-zA-Z0-9]', string) is not None\n\ndef is_numeric(string):\n    return re.search('[^0-9]', string) is not None\n\ndef is_lowercase(string):\n    return re.search('[A-Z]', string) is not None\n\ndef is_uppercase(string):\n    return re.search('[a-z]', string) is not None\n\ndef get_special_character_count(string):\n    return len(re.findall('[^a-zA-Z0-9]', string))\n\ndef get_numeric_count(string):\n    return len(re.findall('[^0-9]', string))\n\ndef get_lowercase_count(string):\n    return len(re.findall('[a-z]', string))\n\ndef get_uppercase_count(string):\n    return len(re.findall('[A-Z]', string))\n\ndef main():\n    string ='some text that contains lowercase, uppercase, special character and numeric characters'\n    print(is_special_character(string))\n    print(is_numeric(string))\n    print(is_lowercase(string))\n    print(is_uppercase(string))\n    print(get_special_character_count(string))\n    print(get_numeric_count(string))\n    print(get_lowercase_count(string))\n    print(get_uppercase_count(string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 68,
      "score": 8.024835682833125,
      "candidate": "# https://www.hackerrank.com/challenges/regex-matching-characters/problem\n\n# I/O\n# 1. Read input from STDIN.\n# 2. Convert input to lowercase.\n# 3. Count the number of times that a character appears in the input.\n# 4. Print the number of times that a character appears in the input.\n# 5. For each character in the input, print the number of times that the character appears in the input.\n# 6. Print the number of characters in the input.\n# 7. Print the number of times that a character is a uppercase character.\n# 8. Print the number of times that a character is a lowercase character.\n# 9. Print the number of times that a character is a special character.\n# 10. Print the number of times that a character is a numeric character.\n\nimport re\n\ndef main():\n    # I/O\n    # Read input from STDIN.\n    # Convert input to lowercase.\n    # Count the number of times that a character appears in the input.\n    # Print the number of times that a character appears in the input.\n    # For each character in the input, print the number of times that the character appears in the input.\n    # Print the number of characters in the input.\n    # Print the number of times that a character is a uppercase character.\n    # Print the number of times that a character is a lowercase character.\n    # Print the number of times that a character is a special character.\n    # Print the number of times that a character is a numeric character.\n    #\n    # Constraints\n    # 1 <= length of the input <= 50\n    # 1 <= input[i] <= 10^6\n    #\n    # Sample Input\n    # 4\n    # a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2"
    },
    {
      "rank": 69,
      "score": 7.990432406683839,
      "candidate": "def num_digit(s):\n    \"\"\"\n    Find the number of digits in a string.\n    :param s: string\n    :return: number of digits in the string\n    \"\"\"\n    return len([ch for ch in s if ch.isdigit()])\n\ndef u_lower(s):\n    \"\"\"\n    Check if the string is uppercase.\n    :param s: string\n    :return: true if the string is uppercase\n    \"\"\"\n    return s.isupper()\n\ndef l_lower(s):\n    \"\"\"\n    Check if the string is lowercase.\n    :param s: string\n    :return: true if the string is lowercase\n    \"\"\"\n    return s.islower()\n\ndef special_char(s):\n    \"\"\"\n    Check if the string is special character.\n    :param s: string\n    :return: true if the string is special character\n    \"\"\"\n    return any([ch.isalpha() for ch in s])\n\ndef num_digit_s(s):\n    \"\"\"\n    Check if the string is digit.\n    :param s: string\n    :return: true if the string is digit\n    \"\"\"\n    return any([ch.isdigit() for ch in s])\n\ndef u_lower_s(s):\n    \"\"\"\n    Check if the string is uppercase.\n    :param s: string\n    :return: true if the string is uppercase\n    \"\"\"\n    return any([ch.isupper() for ch in s])\n\ndef l_lower_s(s):\n    \"\"\"\n    Check if the string is lowercase.\n    :param s: string\n    :return: true if the string is lowercase\n    \"\"\"\n    return any([ch.islower() for ch in s])\n\ndef special_char_s(s):\n    \"\"\"\n    Check if the string is special character.\n    :param s: string\n    :return: true if the string is special character\n    \"\"\"\n    return any([ch.isalpha() for ch in s])\n\ndef num_digit_s_lower(s):\n    \"\"\"\n    Check if the string is digit and lowercase.\n    :param s: string\n    :return: true"
    },
    {
      "rank": 70,
      "score": 7.938028884277233,
      "candidate": "import re\n\ndef find_all(s, sub):\n    return re.findall(sub, s)\n\n\ndef main():\n    numbers = find_all(input(\"Enter string: \"), r'\\d+')\n    specials = find_all(input(\"Enter string: \"), r'[a-zA-Z]')\n    uppercase = find_all(input(\"Enter string: \"), r'[A-Z]')\n    lowercase = find_all(input(\"Enter string: \"), r'[a-z]')\n    print(\"Numbers:\", numbers)\n    print(\"Specials:\", specials)\n    print(\"Uppercase:\", uppercase)\n    print(\"Lowercase:\", lowercase)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 7.915588979966494,
      "candidate": "import re\n\ndef count_regex(string):\n    pattern = re.compile('[a-zA-Z0-9]')\n    match = pattern.findall(string)\n    count = 0\n    for m in match:\n        if m == m.lower():\n            count += 1\n        elif m == m.upper():\n            count += 1\n        elif m == m.capitalize():\n            count += 1\n        elif m == m.isdigit():\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    string = \"aBc123\"\n    print(count_regex(string))"
    },
    {
      "rank": 72,
      "score": 7.8912769574414305,
      "candidate": "import re\n\ndef count_special_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    regex = re.compile('[A-Za-z0-9]')\n    return len(regex.findall(str))\n\ndef count_lowercase(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    regex = re.compile('[a-z]')\n    return len(regex.findall(str))\n\ndef count_uppercase(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    regex = re.compile('[A-Z]')\n    return len(regex.findall(str))\n\ndef count_numeric(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    regex = re.compile('[0-9]')\n    return len(regex.findall(str))\n\nif __name__ == '__main__':\n    print count_special_char('HELLO WORLD')\n    print count_lowercase('Hello World')\n    print count_uppercase('Hello World')\n    print count_numeric('123')\n    print count_numeric('Hello')"
    },
    {
      "rank": 73,
      "score": 7.868947655733293,
      "candidate": "import re\n\ndef count_regex(string):\n    count = 0\n    pattern = re.compile('[A-Z]')\n    if pattern.match(string):\n        count += 1\n    pattern = re.compile('[a-z]')\n    if pattern.match(string):\n        count += 1\n    pattern = re.compile('[^A-Za-z0-9]')\n    if pattern.match(string):\n        count += 1\n    pattern = re.compile('[0-9]')\n    if pattern.match(string):\n        count += 1\n    return count\n\ndef main():\n    string = 'Python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'A python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'A python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'Python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'a python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'a python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'Python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'a python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'A Python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'A Python is a widely used general-purpose computer programming language.'\n    print('uppercase: ', count_regex(string))\n    string = 'A Python is a widely used general-purpose computer programming language.'\n    print('uppercase"
    },
    {
      "rank": 74,
      "score": 7.84634113240411,
      "candidate": "import re\n\ndef count_numeric(text):\n    return re.findall(r'\\d+', text)\n\ndef count_lowercase(text):\n    return re.findall(r'[a-z]+', text)\n\ndef count_uppercase(text):\n    return re.findall(r'[A-Z]+', text)\n\ndef count_special(text):\n    return re.findall(r'[^a-zA-Z0-9]+', text)\n\ndef count_all(text):\n    return [count_numeric(text), count_lowercase(text), count_uppercase(text), count_special(text)]\n\ndef main():\n    text = \"a1b2c3d4\"\n    print(count_all(text))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 75,
      "score": 7.834022619458933,
      "candidate": "import re\n\ndef main():\n    pattern = re.compile(r'[A-Za-z0-9]+')\n    print(pattern.match('abc123').groups())\n    print(pattern.match('abc123').group(0))\n    print(pattern.match('abc123').group(1))\n    print(pattern.match('abc123').group(2))\n    print(pattern.match('abc123').group(3))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 7.780351419995229,
      "candidate": "import re\n\ndef check_char(ch):\n    return ch in string.ascii_lowercase + string.ascii_uppercase + string.digits\n\ndef check_num(num):\n    return num.isdigit()\n\ndef check_special(ch):\n    return ch in string.punctuation +''\n\ndef check_lower(ch):\n    return ch.islower()\n\ndef check_upper(ch):\n    return ch.isupper()\n\ndef check_lower_num(num):\n    return num.isnumeric() and check_lower(num)\n\ndef check_upper_num(num):\n    return num.isnumeric() and check_upper(num)\n\ndef check_special_num(num):\n    return num.isnumeric() and check_special(num)\n\ndef check_num_lower(num):\n    return num.isnumeric() and check_lower(num)\n\ndef check_num_upper(num):\n    return num.isnumeric() and check_upper(num)\n\ndef check_num_special(num):\n    return num.isnumeric() and check_special(num)\n\ndef check_num_lower_num(num):\n    return num.isnumeric() and check_lower_num(num)\n\ndef check_num_upper_num(num):\n    return num.isnumeric() and check_upper_num(num)\n\ndef check_num_special_num(num):\n    return num.isnumeric() and check_special_num(num)\n\ndef check_regex(string):\n    regex = re.compile(r'[a-zA-Z]+')\n    if regex.search(string):\n        return True\n    return False\n\ndef check_all(string):\n    lower = check_char(string)\n    upper = check_char(string.upper())\n    num = check_num(string)\n    special = check_special(string)\n    lower_num = check_lower_num(string)\n    upper_num = check_upper_num(string)\n    special_num = check_special_num(string)\n    num"
    },
    {
      "rank": 77,
      "score": 7.738292593776799,
      "candidate": "import re\n\ndef main():\n    # uppercase\n    upper = re.findall(r\"^[A-Z]\", \"hello\")\n    assert upper == [\"HELLO\", \"Hello\"]\n\n    # lowercase\n    lower = re.findall(r\"^[a-z]\", \"hello\")\n    assert lower == [\"hello\", \"hello\"]\n\n    # special character\n    special = re.findall(r\"^[A-Za-z0-9]\", \"hello\")\n    assert special == [\"HELLO\", \"HELLO\", \"HELLO\", \"HELLO\", \"HELLO\", \"HELLO\", \"HELLO\"]\n\n    # numeric\n    numeric = re.findall(r\"^[0-9]\", \"hello\")\n    assert numeric == [\"HELLO\", \"HELLO\", \"HELLO\", \"HELLO\", \"HELLO\", \"HELLO\", \"HELLO\"]\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 7.7320703513377165,
      "candidate": "from collections import Counter\n\ndef count_characters(string):\n    # Count characters and return a dictionary of character counts.\n    # print('string:', string)\n    return Counter(string)\n\ndef find_numeric_characters(string):\n    # Find all the numeric characters in the string.\n    # print('string:', string)\n    return [ch for ch in string if ch.isdigit()]\n\ndef find_special_characters(string):\n    # Find all the special characters in the string.\n    # print('string:', string)\n    return [ch for ch in string if ch.isupper() or ch.islower() or ch.isdigit()]\n\ndef find_uppercase_characters(string):\n    # Find all the uppercase characters in the string.\n    # print('string:', string)\n    return [ch for ch in string if ch.isupper()]\n\ndef find_lowercase_characters(string):\n    # Find all the lowercase characters in the string.\n    # print('string:', string)\n    return [ch for ch in string if ch.islower()]\n\ndef find_all_characters(string):\n    # Find all the characters in the string.\n    # print('string:', string)\n    return [ch for ch in string]\n\ndef find_all_numeric_characters(string):\n    # Find all the numeric characters in the string.\n    # print('string:', string)\n    return [ch for ch in string if ch.isdigit()]\n\ndef find_all_special_characters(string):\n    # Find all the special characters in the string.\n    # print('string:', string)\n    return [ch for ch in string if ch.isupper() or ch.islower() or ch.isdigit()]\n\ndef find_all_uppercase_characters(string):\n    # Find all the uppercase characters in the string.\n    # print('string:', string)\n    return [ch for ch in string if ch.isupper()]\n\ndef find_all_lowercase_characters(string):\n    # Find all the lowercase characters in the string."
    },
    {
      "rank": 79,
      "score": 7.705183449260731,
      "candidate": "def find_uppercase(string):\n    return re.search(r'[A-Z]', string)\n\ndef find_lowercase(string):\n    return re.search(r'[a-z]', string)\n\ndef find_special_char(string):\n    return re.search(r'[!@#$%^&*()_+=-]', string)\n\ndef find_numeric(string):\n    return re.search(r'[0-9]', string)\n\nprint find_uppercase(\"Hello World\")\nprint find_lowercase(\"Hello World\")\nprint find_special_char(\"Hello World\")\nprint find_numeric(\"Hello World\")"
    },
    {
      "rank": 80,
      "score": 7.5819855281879285,
      "candidate": "# import the function\nfrom __future__ import print_function\nfrom regex_functions import *\n\n# get the string from user\nstring = input('Please enter a string: ')\n\n# print the results\nprint('\\nUppercase:', uppercase(string))\nprint('Lowercase:', lowercase(string))\nprint('Special:', special(string))\nprint('Numeric:', numeric(string))"
    },
    {
      "rank": 81,
      "score": 7.562924366763077,
      "candidate": "def find_numbers(str):\n    return re.findall(\"\\d\", str)\n\ndef find_special_char(str):\n    return re.findall(\"[a-zA-Z]\", str)\n\ndef find_lowercase(str):\n    return re.findall(\"[a-z]\", str)\n\ndef find_uppercase(str):\n    return re.findall(\"[A-Z]\", str)\n\ndef find_all(str):\n    return re.findall(\"[a-zA-Z]*\", str)\n\ndef main():\n    print find_all(input())\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 7.4878043221155455,
      "candidate": "import re\n\ndef uppercase_lowercase(text):\n    return re.findall('[A-Z]', text)\n\ndef special_characters(text):\n    return re.findall('[a-zA-Z]', text)\n\ndef numeric_characters(text):\n    return re.findall('[0-9]', text)\n\ndef main():\n    text = \"Hello World! I am a regular expression testing program.\"\n    print(uppercase_lowercase(text))\n    print(special_characters(text))\n    print(numeric_characters(text))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 7.464609382504557,
      "candidate": "import re\n\ndef count_characters(string):\n    return len(string)\n\ndef count_uppercase(string):\n    return re.search(r'[A-Z]', string).group()\n\ndef count_lowercase(string):\n    return re.search(r'[a-z]', string).group()\n\ndef count_special(string):\n    return re.search(r'[^a-zA-Z0-9]', string).group()\n\ndef count_numeric(string):\n    return re.search(r'[0-9]', string).group()\n\ndef main():\n    string = 'This is a test string'\n    print('Length of string is {}'.format(count_characters(string)))\n    print('Uppercase characters are {}'.format(count_uppercase(string)))\n    print('Lowercase characters are {}'.format(count_lowercase(string)))\n    print('Special characters are {}'.format(count_special(string)))\n    print('Numeric characters are {}'.format(count_numeric(string)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "def is_special(char):\n    return char =='' or char == '.' or char == '!' or char == '?'\n\ndef is_numeric(char):\n    return char >= '0' and char <= '9'\n\ndef is_lowercase(char):\n    return char >= 'a' and char <= 'z'\n\ndef is_uppercase(char):\n    return char >= 'A' and char <= 'Z'\n\ndef is_special_char(char):\n    return is_special(char) or is_numeric(char) or is_lowercase(char) or is_uppercase(char)\n\ndef is_word(string):\n    return all(is_special_char(char) for char in string)\n\ndef is_number(string):\n    return all(is_numeric(char) for char in string)\n\ndef is_letter(string):\n    return all(is_lowercase(char) for char in string)\n\ndef is_alpha(string):\n    return all(is_uppercase(char) for char in string)\n\ndef is_alpha_numeric(string):\n    return all(is_alpha(char) or is_numeric(char) for char in string)\n\ndef is_alpha_numeric_word(string):\n    return all(is_alpha_numeric(char) for char in string)\n\nif __name__ == \"__main__\":\n    print(is_special_char(\"a\"))\n    print(is_number(\"123\"))\n    print(is_letter(\"a\"))\n    print(is_number(\"123\"))\n    print(is_letter(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is_special_char(\"a\"))\n    print(is"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "import re\n\ndef uppercase_lowercase_special_characters(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'[a-zA-Z]', s)\n\ndef uppercase_lowercase_special_characters_2(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'[a-zA-Z0-9]', s)\n\ndef uppercase_lowercase_special_characters_3(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'[a-zA-Z0-9]', s)\n\ndef uppercase_lowercase_special_characters_4(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'[a-zA-Z0-9]', s)\n\ndef uppercase_lowercase_special_characters_5(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'[a-zA-Z0-9]', s)\n\ndef uppercase_lowercase_special_characters_6(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'[a-zA-Z0-9]', s)\n\ndef uppercase_lowercase_special_characters_7(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'[a-zA-Z0-9]', s)\n\ndef uppercase_lowercase_special_characters_8(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "import re\n\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_special(s):\n    return (s =='' or s == '\\t' or s == '\\n')\n\ndef is_lowercase(s):\n    return re.search('[a-z]', s) is not None\n\ndef is_uppercase(s):\n    return re.search('[A-Z]', s) is not None\n\ndef is_special_case(s):\n    return (is_number(s) or is_special(s)) and not is_lowercase(s) and not is_uppercase(s)\n\ndef is_special_number(s):\n    return (is_special(s) and not is_lowercase(s) and not is_uppercase(s))\n\ndef is_special_case_number(s):\n    return (is_number(s) and not is_lowercase(s) and not is_uppercase(s)) and not is_special(s)\n\ndef is_special_case_number_with_space(s):\n    return (is_number(s) and not is_lowercase(s) and not is_uppercase(s)) and not is_special(s) and s!= ''\n\ndef is_special_case_number_with_space_and_comma(s):\n    return (is_number(s) and not is_lowercase(s) and not is_uppercase(s)) and not is_special(s) and s!= ''\n\ndef is_special_case_number_with_comma(s):\n    return (is_number(s) and not is_lowercase(s) and not is_uppercase(s)) and not is_special(s) and s!= ''\n\ndef is_special_case_number_with_comma_and_space(s):\n    return (is_number(s) and not is_lowercase(s) and not is_uppercase(s)) and not is_special(s) and s!= ''\n\ndef is_special_case"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def is_special_character(s):\n    return \" \" in s or \"-\" in s\n\ndef is_numeric(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_lowercase(s):\n    return s.islower()\n\ndef is_uppercase(s):\n    return s.isupper()\n\ndef is_special_character(s):\n    return \" \" in s or \"-\" in s\n\ndef is_numeric(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_lowercase(s):\n    return s.islower()\n\ndef is_uppercase(s):\n    return s.isupper()\n\ndef is_special_character(s):\n    return \" \" in s or \"-\" in s\n\ndef is_numeric(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_lowercase(s):\n    return s.islower()\n\ndef is_uppercase(s):\n    return s.isupper()\n\ndef is_special_character(s):\n    return \" \" in s or \"-\" in s\n\ndef is_numeric(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_lowercase(s):\n    return s.islower()\n\ndef is_uppercase(s):\n    return s.isupper()\n\ndef is_special_character(s):\n    return \" \" in s or \"-\" in s\n\ndef is_numeric(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_lowercase(s):\n    return s.islower()\n\ndef is_uppercase(s):\n    return s.isupper()\n\ndef is_special_character(s):\n    return \" \" in s or \"-\" in s\n\ndef is_numeric(s):\n    try:\n        float(s)"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "import re\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    # print(find_all())\n\n\ndef find_all():\n    \"\"\"\n    find all character and number using regex\n    \"\"\"\n    string = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'\n    result = []\n\n    for i in string:\n        result.append(re.findall(r'[A-Za-z0-9]', i))\n\n    return result\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "import re\n\ndef uppercase_lowercase_special(text):\n    regex = re.compile('[A-Z]{3,}')\n    return regex.findall(text)\n\ndef uppercase_lowercase_numeric(text):\n    regex = re.compile('[A-Z0-9]{3,}')\n    return regex.findall(text)\n\ndef uppercase_lowercase_special_numeric(text):\n    regex = re.compile('[A-Z0-9]{3,}|[A-Z]{3,}')\n    return regex.findall(text)\n\ndef uppercase_lowercase_special_numeric_test(text):\n    regex = re.compile('[A-Z0-9]{3,}|[A-Z]{3,}')\n    return regex.findall(text)\n\nif __name__ == '__main__':\n    text = 'hello, world'\n    print(uppercase_lowercase_special(text))\n    print(uppercase_lowercase_numeric(text))\n    print(uppercase_lowercase_special_numeric(text))\n    print(uppercase_lowercase_special_numeric_test(text))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# https://www.hackerrank.com/challenges/regex-matching/problem\n\nimport re\n\n\ndef count_regex(string):\n    regex_pattern = re.compile(\"[a-zA-Z]+|[0-9]+\")\n    matches = regex_pattern.findall(string)\n    return len(matches)\n\n\ndef main():\n    test_cases = [\n        [\"Hello\", 0, 0, 0],\n        [\"Hello World\", 0, 1, 1],\n        [\"Hello World\", 1, 1, 1],\n        [\"Hello World\", 2, 1, 1],\n        [\"Hello World\", 3, 1, 1],\n        [\"Hello World\", 4, 1, 1],\n        [\"Hello World\", 5, 1, 1],\n        [\"Hello World\", 6, 1, 1],\n        [\"Hello World\", 7, 1, 1],\n        [\"Hello World\", 8, 1, 1],\n        [\"Hello World\", 9, 1, 1],\n        [\"Hello World\", 10, 1, 1],\n        [\"Hello World\", 11, 1, 1],\n        [\"Hello World\", 12, 1, 1],\n        [\"Hello World\", 13, 1, 1],\n        [\"Hello World\", 14, 1, 1],\n        [\"Hello World\", 15, 1, 1],\n        [\"Hello World\", 16, 1, 1],\n        [\"Hello World\", 17, 1, 1],\n        [\"Hello World\", 18, 1, 1],\n        [\"Hello World\", 19, 1, 1],\n        [\"Hello World\", 20, 1, 1],\n        [\"Hello World\", 21, 1, 1],\n        [\"Hello World\", 22, 1, 1],\n        [\"Hello World\", 23, 1, 1],\n        [\"Hello World\", 24, 1, 1],\n        [\"Hello World\", 25, 1, 1],\n        [\"Hello World\", 26, 1, 1],\n        [\"Hello World\", 27, 1, 1],\n        [\"Hello World\", 28, 1, 1],\n        [\"Hello World\", 29, 1, 1],\n        [\"Hello World\", 30, 1, 1],\n        [\"Hello World\", 31, 1, 1],\n        [\"Hello World\", 32, 1, 1],\n        [\"Hello World\", 33,"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "# Define the regular expression for matching uppercase and lowercase letters.\n# The regex is based on the following Python code:\n# https://stackoverflow.com/questions/479915/how-do-you-check-if-a-string-is-all-uppercase-lowercase-or-numeric\n# You can replace the following code with any regex you like.\n# Note that the regex is case insensitive.\n# regex = \"^[A-Z][a-z]*$\"\nregex = \"^[A-Za-z]*$\"\n\n# Define a function to match uppercase and lowercase letters.\ndef is_alphanumeric(char):\n    # Return True if the char is uppercase or lowercase.\n    if char.isupper() or char.islower():\n        return True\n    else:\n        return False\n\n# Define a function to match special characters.\ndef is_special(char):\n    # Return True if the char is a special character.\n    if char in [\"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"=\", \"+\", \",\", \"-\", \".\", \"/\", \"[\", \"]\", \"{\", \"}\", \":\", \";\", \"<\", \">\", \"?\", \"\\\"\", \"~\"]:\n        return True\n    else:\n        return False\n\n# Define a function to match numeric characters.\ndef is_numeric(char):\n    # Return True if the char is numeric.\n    if char.isdigit():\n        return True\n    else:\n        return False\n\n# Define a function to match uppercase and lowercase letters.\ndef is_alphanumeric_and_special(char):\n    # Return True if the char is uppercase or lowercase and special character.\n    if is_alphanumeric(char) and is_special(char):\n        return True\n    else:\n        return False\n\n# Define a function to match uppercase and lowercase letters.\ndef is_alphanumeric_and_numeric(char):\n    # Return True if the char is uppercase or lowercase and numeric.\n    if is_alphanumeric("
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def find_special_char(input_string):\n    \"\"\"\n    :type input_string: str\n    :rtype: tuple\n    \"\"\"\n    regex = r'^[a-zA-Z0-9_\\+\\-\\*\\=\\(\\)\\[\\]\\{\\}\\/\\?\\!&]*$'\n    pattern = re.compile(regex)\n    match = pattern.match(input_string)\n    if match:\n        return (True, match.group())\n    else:\n        return (False, 0)\n\n\ndef find_numeric(input_string):\n    \"\"\"\n    :type input_string: str\n    :rtype: tuple\n    \"\"\"\n    regex = r'^[0-9]+$'\n    pattern = re.compile(regex)\n    match = pattern.match(input_string)\n    if match:\n        return (True, match.group())\n    else:\n        return (False, 0)\n\n\ndef find_lowercase(input_string):\n    \"\"\"\n    :type input_string: str\n    :rtype: tuple\n    \"\"\"\n    regex = r'^[a-z]+$'\n    pattern = re.compile(regex)\n    match = pattern.match(input_string)\n    if match:\n        return (True, match.group())\n    else:\n        return (False, 0)\n\n\ndef find_uppercase(input_string):\n    \"\"\"\n    :type input_string: str\n    :rtype: tuple\n    \"\"\"\n    regex = r'^[A-Z]+$'\n    pattern = re.compile(regex)\n    match = pattern.match(input_string)\n    if match:\n        return (True, match.group())\n    else:\n        return (False, 0)\n\n\ndef find_special_char_regex(input_string):\n    \"\"\"\n    :type input_string: str\n    :rtype: tuple\n    \"\"\"\n    regex = r'^[a-zA-Z0-9_\\+\\-\\*\\=\\(\\)\\[\\]\\{\\}\\/\\?\\!&]*"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def count_char(input_string):\n    num_of_lowercase = 0\n    num_of_uppercase = 0\n    num_of_special_char = 0\n    num_of_numeric_char = 0\n    for i in range(len(input_string)):\n        if input_string[i] == 'a' or input_string[i] == 'A':\n            num_of_uppercase += 1\n        elif input_string[i] == 'A' or input_string[i] == 'a':\n            num_of_lowercase += 1\n        elif input_string[i] =='' or input_string[i] == '-' or input_string[i] == '_':\n            pass\n        elif input_string[i] == '0' or input_string[i] == '1' or input_string[i] == '2' or input_string[i] == '3' or input_string[i] == '4' or input_string[i] == '5' or input_string[i] == '6' or input_string[i] == '7' or input_string[i] == '8' or input_string[i] == '9':\n            num_of_numeric_char += 1\n        elif input_string[i] == '[' or input_string[i] == ']' or input_string[i] == '{' or input_string[i] == '}' or input_string[i] == '(' or input_string[i] == ')':\n            pass\n        else:\n            num_of_special_char += 1\n    return num_of_uppercase, num_of_lowercase, num_of_special_char, num_of_numeric_char\n\ndef count_char_regex(input_string):\n    regex_list = [r'[A-Z]', r'[a-z]', r'[\\s]', r'\\d']\n    num_of_uppercase = 0\n    num_of_lowercase = 0\n    num_of_special_char = 0\n    num_of_numeric_char = 0\n    for i"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "# https://www.geeksforgeeks.org/how-to-check-whether-a-given-character-is-lowercase-uppercase-special-or-numeric/\n# https://www.geeksforgeeks.org/how-to-check-whether-a-given-character-is-lowercase-uppercase-special-or-numeric/\n# https://www.geeksforgeeks.org/how-to-check-whether-a-given-character-is-lowercase-uppercase-special-or-numeric/\n# https://www.geeksforgeeks.org/check-whether-a-given-character-is-lowercase-uppercase-special-or-numeric/\n\n# TODO: Check whether a given character is lowercase uppercase special or numeric\n\nclass Solution(object):\n    def isUpper(self, c):\n        return c >= 65 and c <= 90\n\n    def isLower(self, c):\n        return c >= 97 and c <= 122\n\n    def isSpecial(self, c):\n        return c == 32 or c == 9 or c == 10 or c == 13 or c == 127\n\n    def isNumeric(self, c):\n        return c >= 48 and c <= 57\n\n    def isChar(self, c):\n        return self.isUpper(c) or self.isLower(c) or self.isSpecial(c) or self.isNumeric(c)\n\n    def isSpecialOrNumeric(self, c):\n        return self.isSpecial(c) or self.isNumeric(c)\n\n    def isSpecialChar(self, c):\n        return self.isLower(c) or self.isUpper(c) or self.isSpecial(c)\n\n    def isLowerOrSpecialChar(self, c):\n        return self.isLower(c) or self.isSpecial(c)\n\n    def isLowerOrSpecialOrNumericChar(self, c):\n        return self.isLower(c) or self.isSpecial(c) or self.isNumeric(c)\n\n    def isLowerOrSpecialOrNumericOrSpecialChar(self, c):\n        return self.isLower(c) or self.isSpecial(c) or self"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n == 0:\n            return '1'\n        if n == 1:\n            return '1'\n        if n == 2:\n            return '11'\n        if n == 3:\n            return '21'\n        if n == 4:\n            return '1211'\n        if n == 5:\n            return '1221'\n        if n == 6:\n            return '111221'\n        if n == 7:\n            return '111222'\n        if n == 8:\n            return '2112211'\n        if n == 9:\n            return '2112212'\n        if n == 10:\n            return '21221112'\n        if n == 11:\n            return '21221221'\n        if n == 12:\n            return '22122112'\n        if n == 13:\n            return '22122122'\n        if n == 14:\n            return '21212221'\n        if n == 15:\n            return '212212221'\n        if n == 16:\n            return '221221222'\n        if n == 17:\n            return '212122221'\n        if n == 18:\n            return '2122122222'\n        if n == 19:\n            return '2121222221'\n        if n == 20:\n            return '2212222221'\n        if n == 21:\n            return '2212222222'\n        if n == 22:\n            return '2222222221'\n        if n == 23:\n            return '2222222222'\n        if n == 24:\n            return '21221222222'\n        if n == 25:\n            return '21212212222'\n        if n == 26:\n            return '221221222222'\n        if n == 27:\n            return '222212222222'\n        if n == 28:\n            return '222212222222'\n        if n == 29:\n            return '222222222222'\n        if n == 30"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "import re\n\ndef is_special_character(s):\n    return re.search(r'[^A-Za-z0-9]', s) is not None\n\ndef is_numeric(s):\n    return re.search(r'[^0-9]', s) is None\n\ndef is_lowercase(s):\n    return re.search(r'[A-Z]', s) is not None\n\ndef is_uppercase(s):\n    return re.search(r'[a-z]', s) is not None\n\ndef is_special_character(s):\n    return re.search(r'[^A-Za-z0-9]', s) is not None\n\ndef is_numeric(s):\n    return re.search(r'[^0-9]', s) is None\n\ndef is_lowercase(s):\n    return re.search(r'[A-Z]', s) is not None\n\ndef is_uppercase(s):\n    return re.search(r'[a-z]', s) is not None\n\ndef is_special_character(s):\n    return re.search(r'[^A-Za-z0-9]', s) is not None\n\ndef is_numeric(s):\n    return re.search(r'[^0-9]', s) is None\n\ndef is_lowercase(s):\n    return re.search(r'[A-Z]', s) is not None\n\ndef is_uppercase(s):\n    return re.search(r'[a-z]', s) is not None\n\ndef is_special_character(s):\n    return re.search(r'[^A-Za-z0-9]', s) is not None\n\ndef is_numeric(s):\n    return re.search(r'[^0-9]', s) is None\n\ndef is_lowercase(s):\n    return re.search(r'[A-Z]', s) is not None\n\ndef is_uppercase(s):\n    return re.search(r'[a-z"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "from collections import defaultdict\nfrom re import match, I\nfrom itertools import count\n\ndef get_words(text):\n    \"\"\"\n    :type text: str\n    :rtype: List[str]\n    \"\"\"\n    words = defaultdict(list)\n    for word in text.split():\n        if match(I, word):\n            words['special'].append(word)\n        elif match(I, '0' + word):\n            words['numeric'].append(word)\n        else:\n            words['lower'].append(word)\n    return words\n\n\ndef get_lower(text):\n    \"\"\"\n    :type text: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for word in text.lower().split():\n        if match(I, word):\n            words.append(word)\n    return words\n\n\ndef get_upper(text):\n    \"\"\"\n    :type text: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for word in text.upper().split():\n        if match(I, word):\n            words.append(word)\n    return words\n\n\ndef get_numeric(text):\n    \"\"\"\n    :type text: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for word in text.split():\n        if match(I, '0' + word):\n            words.append(word)\n    return words\n\n\ndef get_special(text):\n    \"\"\"\n    :type text: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for word in text.split():\n        if match(I, word):\n            words.append(word)\n    return words\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_words('Hello World!') == ['lower','special', 'numeric', 'upper'], 'lower'\n    assert get_lower('Hello World!') == ['h', 'ello', 'll', 'o', 'r', 'l', 'd'], 'lower'\n    assert get_upper('Hello"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "import re\n\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_special_char(s):\n    return s in ('_', '*', '^', '?', '+', '{', '}', '(', ')', '[', ']', '$', '.')\n\ndef is_lowercase(s):\n    return re.search('[a-z]', s) is not None\n\ndef is_uppercase(s):\n    return re.search('[A-Z]', s) is not None\n\ndef is_special_char(s):\n    return s in ('_', '*', '^', '?', '+', '{', '}', '(', ')', '[', ']', '$', '.')\n\ndef is_digit(s):\n    return re.search('[0-9]', s) is not None\n\ndef is_special_char(s):\n    return s in ('_', '*', '^', '?', '+', '{', '}', '(', ')', '[', ']', '$', '.')\n\ndef is_lowercase(s):\n    return re.search('[a-z]', s) is not None\n\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_special_char(s):\n    return s in ('_', '*', '^', '?', '+', '{', '}', '(', ')', '[', ']', '$', '.')\n\ndef is_digit(s):\n    return re.search('[0-9]', s) is not None\n\ndef is_special_char(s):\n    return s in ('_', '*', '^', '?', '+', '{', '}', '(', ')', '[', ']', '$', '.')\n\ndef is_digit(s):\n    return re.search('[0-9]', s) is not None\n\ndef is_special_char(s):"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def is_digit(s):\n    return re.match(r'\\d', s) is not None\n\ndef is_special_char(s):\n    return re.match(r'[a-zA-Z]', s) is not None\n\ndef is_lowercase(s):\n    return re.match(r'[a-z]', s) is not None\n\ndef is_uppercase(s):\n    return re.match(r'[A-Z]', s) is not None\n\ndef is_special_char_num(s):\n    return re.match(r'[0-9]', s) is not None\n\ndef is_numeric(s):\n    return re.match(r'[0-9]', s) is not None\n\ndef uppercase(s):\n    return s.upper()\n\ndef lowercase(s):\n    return s.lower()\n\ndef special_char(s):\n    return s.replace(' ', '')\n\ndef special_char_num(s):\n    return s.replace(' ', '').replace('-', '')\n\ndef num(s):\n    return s.replace(' ', '').replace('-', '').replace('.', '')\n\ndef main():\n    string = 'Hello World'\n    print('string = {}'.format(string))\n    print('is_digit = {}'.format(is_digit(string)))\n    print('is_special_char = {}'.format(is_special_char(string)))\n    print('is_lowercase = {}'.format(is_lowercase(string)))\n    print('is_uppercase = {}'.format(is_uppercase(string)))\n    print('is_special_char_num = {}'.format(is_special_char_num(string)))\n    print('is_numeric = {}'.format(is_numeric(string)))\n    print('uppercase = {}'.format(uppercase(string)))\n    print('lowercase = {}'.format(lowercase(string)))\n    print('special_char = {}'.format(special_char(string)))\n    print('special_char_num = {}'.format(special_char_"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def find_uppercase_lowercase_special(text):\n    \"\"\"\n    :type text: str\n    :rtype: list[str]\n    \"\"\"\n    return [re.findall(r'\\w', text)]\n\n\ndef find_uppercase_lowercase_special_2(text):\n    \"\"\"\n    :type text: str\n    :rtype: list[str]\n    \"\"\"\n    return [re.findall(r'\\w', text)]\n\n\ndef find_uppercase_lowercase_special_3(text):\n    \"\"\"\n    :type text: str\n    :rtype: list[str]\n    \"\"\"\n    return [re.findall(r'\\w', text)]\n\n\ndef find_uppercase_lowercase_special_4(text):\n    \"\"\"\n    :type text: str\n    :rtype: list[str]\n    \"\"\"\n    return [re.findall(r'\\w', text)]\n\n\ndef find_numeric(text):\n    \"\"\"\n    :type text: str\n    :rtype: list[str]\n    \"\"\"\n    return [re.findall(r'[0-9]+', text)]\n\n\nif __name__ == '__main__':\n    assert find_uppercase_lowercase_special('') == []\n    assert find_uppercase_lowercase_special('aA') == [('a', 'A')]\n    assert find_uppercase_lowercase_special('AA') == [('a', 'A'), ('A', 'a')]\n    assert find_uppercase_lowercase_special('AAA') == [('a', 'A'), ('A', 'a'), ('a', 'A')]\n    assert find_uppercase_lowercase_special('AAB') == [('a', 'A'), ('A', 'a'), ('a', 'A'), ('b', 'B')]\n    assert find_uppercase_lowercase_special('BAAB') == [('b', 'B'), ('a', 'A'), ('a', 'A'), ('a', 'A'), ('b', 'B')]\n    assert find_uppercase_lowercase_special('AABB"
    }
  ]
}