{
  "timestamp": "2025-09-14T17:26:48.348534",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 11,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-duplicate-number/problem\n#\n# Use a hash table to store the hash values of the numbers and find the first duplicate.\n#\n# Note:\n# The array size will not exceed 100,000.\n# The first duplicate number will always be unique.\n#\n# For example,\n# Given [1,2,3,4,5],\n# return 2.\n#\n# The hash table will be:\n# 1 -> 0\n# 2 -> 1\n# 3 -> 2\n# 4 -> 2\n# 5 -> 3\n\n# Time:  O(n)\n# Space: O(n)\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        hash_table = dict()\n        for i in range(len(nums)):\n            if i not in hash_table:\n                hash_table[i] = i\n            elif hash_table[i]!= i:\n                return hash_table[i]\n        return -1"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    # @param intervals, a list of Interval\n    # @return an integer\n    def findDuplicate(self, intervals):\n        if not intervals:\n            return -1\n        intervals.sort(key=lambda x: x.start)\n        result = [0]\n        for i in xrange(1, len(intervals)):\n            if intervals[i].start == intervals[i-1].end:\n                result[-1] = i\n            elif intervals[i].start < intervals[i-1].end:\n                result[-1] = i\n                return intervals[i-1].end\n        return intervals[-1].end"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        m = len(nums)\n        if m == 0:\n            return -1\n\n        i = 0\n        while i < m:\n            j = i + 1\n            while j < m:\n                if nums[i] == nums[j]:\n                    return i\n                j += 1\n            i += 1\n        return -1"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    return nums[i]"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                return i + 1\n\n# Note:\n# 1.  It is guaranteed that the input array is sorted.\n# 2.  If the input array is empty, return 0.\n# 3.  If the input array is length 1, return the index of the first element.\n# 4.  If the input array is length 2, return the index of the first duplicate element.\n# 5.  If the input array is length 3, return the index of the first duplicate element.\n# 6.  If the input array is length 4, return the index of the first duplicate element.\n# 7.  If the input array is length 5, return the index of the first duplicate element.\n# 8.  If the input array is length 6, return the index of the first duplicate element.\n# 9.  If the input array is length 7, return the index of the first duplicate element.\n# 10. If the input array is length 8, return the index of the first duplicate element.\n# 11. If the input array is length 9, return the index of the first duplicate element.\n# 12. If the input array is length 10, return the index of the first duplicate element.\n# 13. If the input array is length 11, return the index of the first duplicate element.\n# 14. If the input array is length 12, return the index of the first duplicate element.\n# 15. If the input array is length 13, return the index of the first duplicate element.\n# 16. If the input array is length 14, return the index of the first duplicate element.\n# 17. If the input array is length 15, return the index of the first duplicate element.\n# 18. If the input array is length 16, return the index of the first duplicate element.\n# 19. If the input array is length 17, return the index of the first duplicate element.\n# 20. If the input array is"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def find_duplicate(nums, start):\n            for i in range(start, len(nums)):\n                if nums[i]!= nums[start]:\n                    return i\n            return start\n\n        if len(nums) == 0:\n            return -1\n\n        start = 0\n        while start < len(nums):\n            end = find_duplicate(nums, start)\n            if end == start:\n                break\n            else:\n                start = end + 1\n        return start\n\n# test\n# n = [1, 2, 3, 3, 3, 4]\n# n = [1, 1, 2, 2, 3, 3, 3, 4]\n# n = [1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4]\n# n = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findDuplicate(self, nums):\n        return self.find_duplicate(nums)\n\n    def find_duplicate(self, nums):\n        m = len(nums)\n        if m <= 1:\n            return -1\n\n        n = nums[0]\n        for i in range(1, m):\n            if nums[i]!= n:\n                return i\n            n = nums[i]\n        return -1"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for an interval.\nclass Interval(object):\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def __str__(self):\n        return \"[%s, %s]\" % (self.start, self.end)\n\n    def __repr__(self):\n        return str(self)\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        first = None\n        for i in range(len(nums)):\n            if first is None:\n                first = i\n            elif first < i:\n                first = nums[i]\n            elif first > i:\n                break\n        return first\n\nif __name__ == \"__main__\":\n    print Solution().firstDuplicate([1,1,2,2,3,4])"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                return nums[i]\n    return -1\n\nclass Solution:\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(nums)):\n            while i < len(nums) and nums[i] == nums[i-1]:\n                i += 1\n            if i < len(nums):\n                return nums[i]\n        return -1\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 1]\n    print Solution().first_duplicate(nums)\n    nums = [1, 1, 1, 1, 1]\n    print Solution().first_duplicate(nums)\n    nums = [1, 1, 1, 1, 1, 1, 1, 1]\n    print Solution().first_duplicate(nums)\n    nums = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    print Solution().first_duplicate(nums)\n    nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    print Solution().first_duplicate(nums)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i, val in enumerate(nums):\n        if val == nums[i]:\n            return i\n    return -1\n\n\nif __name__ == '__main__':\n    #print first_duplicate([1,1,2,2,3,3])\n    print(first_duplicate([1,1,2,2,3,3]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/first-duplicate-number/discuss/86716/Python-with-O(n)-Time-and-O(1)-Space-Solution\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        l = len(nums)\n        if l < 2:\n            return -1\n\n        for i in range(1, l):\n            if nums[i] == nums[i-1]:\n                continue\n            j = i-1\n            while j >= 0 and nums[i]!= nums[j]:\n                j = j - 1\n            if j >= 0:\n                return i\n        return -1"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums) - 1):\n            if nums[i]!= nums[i+1]:\n                return i + 1\n        return len(nums)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-duplicate-element-in-array/problem\n\n# Definition for an  array of integers.\nclass Array(object):\n    def __init__(self, nums):\n        self.nums = nums\n\n# Complete the firstDuplicate function below.\ndef firstDuplicate(self, nums):\n    # Your firstDuplicate function should return the index of the first\n    # duplicate element in the given array. If no duplicate is found,\n    # return -1.\n    \n    # This is a brute force solution.\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] == nums[j]:\n                return i\n    return -1\n\nif __name__ == '__main__':\n    nums = Array([1, 3, 2, 2, 3])\n    print(firstDuplicate(nums))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-duplicate-number\n\nimport math\n\n# https://www.hackerrank.com/challenges/first-duplicate-number/problem\ndef first_duplicate(arr):\n    # Initialize the array\n    arr = [int(x) for x in arr]\n\n    # Find the duplicate index\n    index = 0\n    while index < len(arr) - 1:\n        if arr[index] == arr[index + 1]:\n            # The first duplicate is at index + 1\n            index += 1\n        else:\n            # The first duplicate is at index + 1\n            index = arr[index]\n\n    # Return the index of the first duplicate\n    return index\n\n# https://www.hackerrank.com/challenges/first-duplicate-number/submissions/code/338836\ndef first_duplicate_submission():\n    # https://www.hackerrank.com/challenges/first-duplicate-number/problem\n    arr = [int(x) for x in input().split()]\n    print(first_duplicate(arr))\n\n# https://www.hackerrank.com/challenges/first-duplicate-number/submissions/code/63795\ndef first_duplicate_submission2():\n    # https://www.hackerrank.com/challenges/first-duplicate-number/problem\n    arr = [int(x) for x in input().split()]\n    print(first_duplicate(arr))\n\n# https://www.hackerrank.com/challenges/first-duplicate-number/submissions/code/144938\ndef first_duplicate_submission3():\n    # https://www.hackerrank.com/challenges/first-duplicate-number/problem\n    arr = [int(x) for x in input().split()]\n    print(first_duplicate(arr))\n\n# https://www.hackerrank.com/challenges/first-duplicate-number/submissions/code/182626\ndef first_duplicate_submission4():"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# https://discuss.leetcode.com/topic/63398/short-solution-using-recursion-and-stack\n# https://discuss.leetcode.com/topic/63398/short-solution-using-recursion-and-stack\n# https://discuss.leetcode.com/topic/63398/short-solution-using-recursion-and-stack\n# https://discuss.leetcode.com/topic/63398/short-solution-using-recursion-and-stack\n# https://discuss.leetcode.com/topic/63398/short-solution-using-recursion-and-stack\n# https://discuss.leetcode.com/topic/63398/short-solution-using-recursion-and-stack\n\n# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution(object):\n    def findDuplicate(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals:\n            return -1\n        \n        stack = [0]\n        for i in xrange(len(intervals)):\n            while stack[-1] > intervals[i].end:\n                stack.pop()\n            stack.append(intervals[i].start)\n        \n        return stack[-1]"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-duplicate-number/problem\n\ndef findDuplicate(nums):\n    for i in range(len(nums)):\n        if nums[i] == nums[i+1]:\n            return i+1\n    return -1\n\n\nif __name__ == \"__main__\":\n    nums = [2,3,3,4,5,5,5,6,7,8,9]\n    print(findDuplicate(nums))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/first-unique-number/\n# Given an array of integers A, return the first number in A that is not unique.\n#\n# Example 1:\n# Input: [1,3,4,7,8,8]\n# Output: 8\n#\n# Example 2:\n# Input: [0,1,2,3,4,5,6,7]\n# Output: 2\n#\n# Note:\n# The input array will not contain any duplicate numbers.\n# Example 3:\n# Input: [1,2,3,4]\n# Output: 1\n#\n# Example 4:\n# Input: [1,1,1,2]\n# Output: 2\n#\n# Example 5:\n# Input: [1,1,2,2,3]\n# Output: 3\n#\n# Note:\n# The input array will only contain numbers from 0 to 9.\n#\n\n# @param A: an integer array\n# @return: the first number that is not unique in A\n\nclass Solution(object):\n    def firstDuplicate(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        # https://oj.leetcode.com/discuss/5956/python-solution-with-explanation\n        # https://www.youtube.com/watch?v=zWzw0DQ1vX0\n        # https://www.youtube.com/watch?v=V2Qy5nx-Qw8\n        # https://www.youtube.com/watch?v=e6Fj6oZtN8U\n        # https://www.youtube.com/watch?v=HVpfRzS9uFc\n        # https://www.youtube.com/watch?v=JL2fk5tjDQc\n        # https://www.youtube.com/watch?v=nXcw7Yc4wX8\n        # https://www.youtube.com/watch?v=xYbHZ2aK1wM\n        # https://www.youtube.com/watch?v=cY"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        while i < len(nums):\n            if nums[i] == nums[i-1]:\n                i += 1\n            else:\n                break\n        return i\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.firstDuplicate([1,1,2,2,3,4,4,5,5,6])"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                return i\n        return len(nums)\n\n\nif __name__ == '__main__':\n    print(Solution().firstDuplicate([1, 2, 2, 3, 1, 4]))\n    print(Solution().firstDuplicate([1, 2, 2, 3, 1, 4, 4]))\n    print(Solution().firstDuplicate([1, 2, 2, 3, 1, 4, 4, 4]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# https://discuss.leetcode.com/topic/2355/c-o-n-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            m = (l + r) / 2\n            if nums[m] == nums[l]:\n                l += 1\n            elif nums[m] < nums[l]:\n                if m + 1 == r:\n                    return m\n                r = m\n            else:\n                l = m + 1\n        return l\n\n# Note:\n# In python, there are several ways to solve this problem.\n# 1. use a binary search, but the result is not guaranteed to be unique\n# 2. use a hash table, but the result is not guaranteed to be unique\n# 3. use a map, but the result is not guaranteed to be unique"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findDuplicate(self, nums):\n        if not nums:\n            return -1\n        # return self.findDuplicate2(nums, 0, len(nums) - 1)\n        return self.findDuplicate3(nums, 0, len(nums) - 1)\n\n    def findDuplicate2(self, nums, start, end):\n        if start == end:\n            return start\n        mid = start + (end - start) / 2\n        if nums[mid] == nums[start]:\n            return mid\n        elif nums[mid] < nums[start]:\n            return self.findDuplicate2(nums, mid + 1, end)\n        else:\n            return self.findDuplicate2(nums, start, mid - 1)\n\n    def findDuplicate3(self, nums, start, end):\n        if start == end:\n            return start\n        mid = start + (end - start) / 2\n        if nums[mid] == nums[start]:\n            return mid\n        elif nums[mid] < nums[start]:\n            return self.findDuplicate3(nums, mid + 1, end)\n        else:\n            return self.findDuplicate3(nums, start, mid - 1)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1, 1, 2]\n    print s.findDuplicate(nums)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution:\n    # @return an integer\n    def firstDuplicate(self, nums):\n        if len(nums) == 0:\n            return -1\n        \n        # find the first element of the first duplicate\n        # if there is no duplicate, return -1\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                return i\n        return -1\n\nif __name__ == \"__main__\":\n    print Solution().firstDuplicate([1,2,3,4,5,6])"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "class Solution:\n\t# @param {integer[]} nums\n\t# @return {integer}\n\tdef findDuplicate(self, nums):\n\t\t# base case\n\t\tif len(nums) <= 1:\n\t\t\treturn 0\n\t\t# store the first index of each duplicate\n\t\tfirstDupIndex = [0] * len(nums)\n\t\t# go through each element\n\t\tfor i in xrange(1, len(nums)):\n\t\t\t# if the current element is a duplicate of the previous element,\n\t\t\t# store the index of the previous element\n\t\t\tif nums[i] == nums[i-1]:\n\t\t\t\tfirstDupIndex[i] = firstDupIndex[i-1]\n\t\t\telse:\n\t\t\t\t# if the current element is not a duplicate of the previous element,\n\t\t\t\t# store the first index of the current element\n\t\t\t\tfirstDupIndex[i] = i\n\t\t# return the first index of the first duplicate element\n\t\treturn firstDupIndex[-1]\n\nif __name__ == '__main__':\n\ts = Solution()\n\tnums = [1,2,2,3,3,4,4,4,4]\n\tprint s.findDuplicate(nums)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # The idea is to look for the first different element in the array\n    # If there is a duplicate, it will look for the first different\n    # element and add 1 to it\n    # Then, find the first element in the array that is different from the\n    # first element of the array, and return that value\n    # If there is no duplicate, return the value of the first element\n    # If there is no element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1\n    # If there is no different element, return -1"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/duplicate-number/\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        \n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i + 1]:\n                i += 1\n            else:\n                break\n        \n        return i"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def firstDuplicate(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    return arr[0]\n\nif __name__ == '__main__':\n    assert firstDuplicate([1, 2, 3, 4, 5]) == 1\n    assert firstDuplicate([1, 2, 3, 4, 5, 6]) == 6\n    assert firstDuplicate([1, 1, 1, 1, 1, 1]) == 1"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/find-duplicate-number/\n# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\t# @param head, a ListNode\n\t# @return a ListNode\n\tdef findDuplicate(self, head):\n\t\tif head is None or head.next is None:\n\t\t\treturn None\n\t\tslow = head\n\t\tfast = head\n\t\twhile fast.next and fast.val == fast.next.val:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next.next\n\t\tfast = head\n\t\twhile fast.next and fast.val == fast.next.val:\n\t\t\tslow = slow.next\n\t\t\tfast = fast.next\n\t\treturn slow\n\nif __name__ == '__main__':\n\ts = Solution()\n\tl = ListNode(1)\n\tl.next = ListNode(1)\n\tl.next.next = ListNode(1)\n\tl.next.next.next = ListNode(2)\n\tl.next.next.next.next = ListNode(3)\n\tprint s.findDuplicate(l)"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                return i + 1\n        return -1"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        \n        for i in range(0, len(nums) - 1):\n            if nums[i] == nums[i+1]:\n                return i\n        \n        return -1"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # https://discuss.leetcode.com/topic/1155/c-in-python-with-explanation/2\n        if len(nums) < 2:\n            return -1\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i+1]:\n                j = i + 2\n                while j < len(nums):\n                    if nums[j]!= nums[i]:\n                        break\n                    j += 1\n                if j == len(nums):\n                    return i\n                i = j\n            else:\n                i += 1\n        return -1"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "# @author: Junaid Umashankar\n\ndef find_duplicates(arr):\n    \"\"\"\n    Find the first duplicate element in the array arr\n    Input:\n        arr: list of integers\n        Output:\n            None\n    \"\"\"\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return None"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in xrange(len(nums)):\n            if nums[i] == nums[i+1]:\n                return i+1\n        return len(nums)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param num, a list of integer\n    # @return an integer\n    def firstDuplicate(self, num):\n        if len(num) == 0:\n            return -1\n        if len(num) == 1:\n            return 0\n        for i in range(1, len(num)):\n            if num[i] == num[i - 1]:\n                continue\n            else:\n                return i\n        return len(num) - 1"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findDuplicate(self, nums):\n        if not nums:\n            return -1\n        if len(nums) == 1:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) / 2\n            if nums[mid] == nums[left]:\n                return mid\n            elif nums[mid] > nums[left]:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1,1,1,2,2,3]\n    print s.findDuplicate(nums)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        low = 0\n        high = len(nums) - 1\n        while low <= high:\n            mid = (low + high) / 2\n            if nums[mid] == nums[mid - 1]:\n                return nums[mid]\n            elif nums[mid] < nums[mid - 1]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    print(Solution().firstDuplicate([1, 1, 2, 2, 3, 3, 3, 3]))\n    print(Solution().firstDuplicate([1, 1, 1, 2, 2, 2, 3, 3]))\n    print(Solution().firstDuplicate([1, 1, 2, 2, 3, 3, 3, 3]))\n    print(Solution().firstDuplicate([3, 3, 3, 3, 3, 3]))\n    print(Solution().firstDuplicate([1, 1, 1, 1]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/find-first-duplicate-number/description/\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(nums)):\n            if nums[i] == nums[i]:\n                while i < len(nums) and nums[i] == nums[i]:\n                    i += 1\n                return i\n        return -1\n\n\nif __name__ == \"__main__\":\n    print(Solution().firstDuplicate([1, 2, 3, 4, 5, 5, 6, 7, 7]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums: return -1\n        low = 0\n        high = len(nums) - 1\n        while low <= high:\n            mid = (low + high) / 2\n            if nums[mid] == nums[mid - 1]:\n                low = mid + 1\n            elif nums[mid] == nums[mid + 1]:\n                high = mid - 1\n            else:\n                return mid\n        return -1\n\n\nif __name__ == \"__main__\":\n    print Solution().firstDuplicate([1, 1, 2, 2, 3, 4])"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    # @param A, a list of integer\n    # @return an integer\n    def findDuplicate(self, A):\n        if A is None or len(A) == 0:\n            return -1\n        n = len(A)\n        l = 0\n        r = n - 1\n        while l <= r:\n            m = (l + r) / 2\n            if A[m] == A[m-1]:\n                l = m + 1\n            elif A[m] < A[m-1]:\n                r = m - 1\n            else:\n                l = m + 1\n        return l"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "class Solution:\n    # @return an integer\n    def findDuplicate(self, nums):\n        if nums is None: return None\n        if len(nums) <= 1: return 0\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            mid = (start + end) // 2\n            if nums[mid] == nums[mid + 1]:\n                return mid + 1\n            elif nums[mid] < nums[mid + 1]:\n                start = mid + 1\n            else:\n                end = mid\n        return None\n\n\nif __name__ == '__main__':\n    print(Solution().findDuplicate([1, 2, 3, 4]))\n    print(Solution().findDuplicate([1, 2, 2, 3, 3]))\n    print(Solution().findDuplicate([1, 1, 2, 2, 3, 3, 3]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n\n        # use the same way as the first duplicate in a string\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i+1]:\n                i += 1\n            else:\n                break\n\n        return i\n\n\nif __name__ == \"__main__\":\n    print Solution().firstDuplicate([1,1,2,2,3,3,3,4,4,5])"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findDuplicate(self, nums):\n        n = len(nums)\n        if n < 2:\n            return -1\n        \n        for i in range(n - 1):\n            if nums[i] == nums[i + 1]:\n                j = i + 1\n                while j < n and nums[j] == nums[i]:\n                    j += 1\n                if j < n:\n                    return j\n        return -1\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findDuplicate([0, 1, 1, 2, 2, 3, 3, 3])"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param nums, a list of integer\n    # @return an integer\n    def firstDuplicate(self, nums):\n        n = len(nums)\n        if n < 2:\n            return -1\n        \n        left = 0\n        right = n - 1\n        while left < right:\n            mid = (left + right) / 2\n            if nums[mid] == nums[left] or nums[mid] == nums[right]:\n                return nums[mid]\n            elif nums[mid] < nums[left]:\n                left = mid + 1\n            elif nums[mid] > nums[right]:\n                right = mid - 1\n        return nums[left]"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findDuplicate(self, nums):\n        if not nums or len(nums) < 2:\n            return None\n        for i in range(len(nums)):\n            if nums[i]!= nums[i - 1]:\n                return nums[i]\n        return nums[-1]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.findDuplicate([3, 1, 2, 3, 4]))\n    print(s.findDuplicate([1, 1, 2, 3, 4]))\n    print(s.findDuplicate([1, 1, 3, 4, 5]))\n    print(s.findDuplicate([1, 2, 2, 3, 4, 5]))\n    print(s.findDuplicate([1, 2, 2, 4, 5]))\n    print(s.findDuplicate([1, 2, 3, 3, 5]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def firstDuplicate(self, nums):\n        if not nums:\n            return -1\n        \n        l, r = 0, len(nums) - 1\n        while l < r:\n            if nums[l]!= nums[r]:\n                if nums[l] == nums[r - 1]:\n                    r -= 1\n                else:\n                    l += 1\n            else:\n                return l\n        return -1\n\nif __name__ == \"__main__\":\n    print Solution().firstDuplicate([1, 1, 2, 2, 3, 4, 4])\n    print Solution().firstDuplicate([])"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            if nums[l]!= nums[r]:\n                if nums[l] == nums[r - 1]:\n                    return nums[r]\n                else:\n                    l += 1\n            else:\n                r -= 1\n        return nums[r]\n\nif __name__ == '__main__':\n    print(Solution().firstDuplicate([3, 3, 4, 4, 4]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef find_dup(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                if i == j:\n                    return arr[i]\n                else:\n                    return arr[i] + arr[j]\n\nif __name__ == \"__main__\":\n    arr = [int(i) for i in sys.stdin.read().split()]\n    print find_dup(arr)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def firstDuplicate(nums):\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] == nums[j]:\n                return i\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    print firstDuplicate(nums)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            mid = start + (end - start) / 2\n            if nums[start] == nums[mid]:\n                if nums[start]!= nums[end]:\n                    end = mid\n                else:\n                    start = mid + 1\n                    end = mid\n            elif nums[start] < nums[mid]:\n                start = mid + 1\n            else:\n                end = mid\n        return nums[start]"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Write your code here\n        if not nums:\n            return -1\n        n = len(nums)\n        if n == 1:\n            return 0\n        for i in range(n):\n            if nums[i] == nums[i + 1]:\n                return i\n        return n - 1\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.firstDuplicate([3, 2, 2])\n    print s.firstDuplicate([3, 3, 3, 1, 2])\n    print s.firstDuplicate([0, 0])\n    print s.firstDuplicate([0, 0, 0])\n    print s.firstDuplicate([0, 0, 0, 0, 0])"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/first-unique-number/description/\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # use a map to store the results\n        nums_map = {}\n        for i in nums:\n            if i in nums_map:\n                return i\n            else:\n                nums_map[i] = 1\n        return -1"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-unique-element\ndef firstDuplicate(nums):\n    for i in range(len(nums)):\n        if i > 0 and nums[i] == nums[i-1]:\n            return nums[i]\n    return None\n\n# Your function will be called as the main body of the program.\nnums = [1,2,3,2,4,3,4,1,2]\nprint(firstDuplicate(nums))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return -1\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i + 1]:\n                while i < len(nums) - 1 and nums[i] == nums[i + 1]:\n                    i += 1\n                if i < len(nums) - 1:\n                    return i\n                else:\n                    return -1\n            else:\n                i += 1\n        return -1\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [1, 1, 1, 2, 2, 3]\n    print(sol.findDuplicate(nums))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/first-unique-number/\n\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n\n        first_index = 0\n        for i in xrange(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                first_index = i\n                break\n        return first_index\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.firstDuplicate([1,2,3,1,4,4,5,4])\n    print s.firstDuplicate([1,2,3,4,4,5,6])"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 1, 2, 2, 3, 4]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return -1\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 1, 4, 5, 6]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def firstDuplicate(arr):\n\t\"\"\"\n\tWrite a function firstDuplicate that takes an array of integers as input and returns the index of the first duplicate element.\n\t\"\"\"\n\t# Your code here\n\n\t# This is the only way to check for duplicate elements in a sorted array\n\t# For example, if you have an array of [0, 1, 2, 3, 4]\n\t# The first duplicate is [1, 2, 3, 4, 5]\n\t# Since [1, 2, 3, 4, 5] is not a duplicate\n\t# The first duplicate is [1, 2, 3, 4]\n\t# Since [1, 2, 3, 4] is a duplicate\n\t# The first duplicate is None\n\n\t# The solution is to loop through the array and compare the elements with each other\n\tfor i in range(len(arr)):\n\t\t# If the current element is not the first duplicate\n\t\tif arr[i]!= arr[i-1]:\n\t\t\t# If the current element is the first duplicate\n\t\t\tif arr[i] == arr[i-1]:\n\t\t\t\t# Print the index of the first duplicate\n\t\t\t\tprint(i)\n\t\t\t\treturn i\n\narr = [0, 1, 2, 3, 4]\n\nfirstDuplicate(arr)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(nums)):\n            if nums[i] == nums[i-1]:\n                nums[i] += nums[i-1]\n        for i in range(len(nums)):\n            if nums[i] == nums[i-1]:\n                return i\n        return len(nums)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param nums, a list of integer\n    # @return an integer\n    def firstDuplicate(self, nums):\n        n = len(nums)\n        if n == 0:\n            return None\n        if n == 1:\n            return 0\n        for i in range(1, n):\n            if nums[i]!= nums[i - 1]:\n                return i\n        return n - 1\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    print(Solution().firstDuplicate(nums))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def firstDuplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if not nums:\n        return -1\n    if not nums[0]:\n        return 0\n\n    idx = 1\n    for i in range(1, len(nums)):\n        if nums[idx] == nums[i]:\n            idx += 1\n        else:\n            return idx\n\n    return -1\n\nif __name__ == '__main__':\n    nums = [1, 1, 2, 2, 2]\n    print(firstDuplicate(nums))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-duplicate\ndef first_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return -1\n\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(first_duplicate(arr))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef first_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    for n in nums:\n        if d[n] > 1:\n            return n"
    },
    {
      "rank": 63,
      "score": 3.0,
      "candidate": "import unittest\n\ndef first_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if len(nums) == 1:\n        return 0\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        if nums[left] == nums[right]:\n            return nums[left]\n        elif nums[left] < nums[right]:\n            left += 1\n        else:\n            right -= 1\n    return nums[left]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n        self.assertEqual(first_duplicate([1, 1, 2, 2, 3, 3, 4, 4]), 2)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/first-duplicate-element-in-a-sorted-array/solution/\n#\nApproach #1: Sort [2,1,3,1,2,3,4]\nComplexity Analysis\nTime Complexity: O(N), where N is the length of the array.\nSpace Complexity: O(N).\n\n# 7ms 99.85%\nclass Solution {\n    public int firstDuplicate(int[] nums) {\n        if(nums == null || nums.length == 0) return -1;\n        int left = 0;\n        int right = nums.length - 1;\n        while(left < right) {\n            if(nums[left] == nums[right]) {\n                return nums[left];\n            } else if(nums[left] < nums[right]) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        return nums[left];\n    }\n}\n\n# 7ms 99.85%\nclass Solution {\n    public int firstDuplicate(int[] nums) {\n        if(n"
    },
    {
      "rank": 64,
      "score": 3.0,
      "candidate": "# https://oj.leetcode.com/problems/first-unique-character-in-a-string/\n# Given an array of characters, find the first unique character in the array.\n# For example,\n# Given 'abc', the first unique character is 'a'\n# Given 'aa', the first unique character is 'a'\n# Given 'aaa', the first unique character is 'a'\n# Return the first unique character.\n\n# DFS\n# time: O(n)\n# space: O(1)\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def firstUniqChar(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        n = len(nums)\n        for i in range(n - 1):\n            if nums[i] == nums[i+1]:\n                return nums[i]\n        return nums[0]"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def firstDuplicate(self, nums):\n        if not nums:\n            return -1\n        n = len(nums)\n        i = 0\n        while i < n:\n            if nums[i]!= nums[i-1]:\n                i += 1\n                break\n            else:\n                i += 1\n        return i"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/first-unique-number/\n# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\n# http://www.cnblogs.com/yuzhangcmu/archive/2012/12/18/2429093.html\n# \u6ce8\u610f: \u4f1a\u8ba4\u4e3a\u53ea\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7b49\u4ef7\n# \u5982\u679c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7b49\u4ef7\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n# \u6ce8\u610f: \u4ece\u90a3\u7ed3\u5c3e\u5f00\u59cb\uff0c\u6240\u6709\u5143\u7d20\u90fd\u6bd4\u8f83\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\n# \u4ece\u7b2c\u4e8c\u4e2a\u5f00\u59cb\uff0c\u6240\u6709\u5143\u7d20\u90fd\u6bd4\u8f83\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5c31\u662f\u7b2c\u4e8c\u4e2a\u5143\u7d20\n# \u5982\u679c\u7b2c\u4e00\u4e2a\u5143\u7d20\u6bd4\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7b49\u4ef7\uff0c\u90a3\u4e48\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u5143\u7d20\n\nclass Solution:\n    # @param {Interval[]} intervals\n    # @return {number}\n    def findDuplicate(self, intervals):\n        if len(intervals) <= 1:\n            return -1\n        \n        start = intervals[0].start\n        end = intervals[0].end"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-duplicate-number/discuss/183534/Java-Solution-in-O(n)-Time-and-O(1)-Space-Time\nclass Solution:\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    return i\n        return -1\n\nif __name__ == '__main__':\n    assert Solution().findDuplicate([1, 1, 1, 2]) == 2\n    assert Solution().findDuplicate([1, 1, 2, 2]) == -1\n    assert Solution().findDuplicate([1, 2, 3, 4]) == -1\n    assert Solution().findDuplicate([1, 1, 2, 2, 2, 3, 3, 3]) == 1"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\nimport unittest\n\n\n# @include\ndef find_duplicate(nums):\n    # We assume that nums is sorted in ascending order.\n    # We also assume that the first element is always different from\n    # the second element.\n    i = 0\n    j = 1\n    while i < len(nums) and j < len(nums):\n        if nums[i] == nums[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return j\n# @exclude\n\n\nclass Test(unittest.TestCase):\n    def test_find_duplicate(self):\n        self.assertEqual(find_duplicate([1, 1]), 2)\n        self.assertEqual(find_duplicate([1, 2, 3]), 2)\n        self.assertEqual(find_duplicate([1, 2, 3, 2, 1]), 3)\n        self.assertEqual(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1]), 7)\n        self.assertEqual(find_duplicate([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), -1)\n        self.assertEqual(find_duplicate([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), -1)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # dp[i] is the index of the first duplicate after i, or -1 if there is none\n        # dp[i] = j if there is a duplicate starting at j and ending at i\n        # dp[i] = -1 if there is no duplicate starting at i\n        dp = [None] * (len(nums) + 1)\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    dp[j] = i\n                    break\n        return dp[0] if dp[0]!= -1 else -1"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        lo, hi = 0, len(nums) - 1\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if nums[mid] == nums[mid + 1]:\n                return nums[mid]\n            elif nums[mid] < nums[mid + 1]:\n                lo = mid + 1\n            else:\n                hi = mid"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        n = len(nums)\n        if n == 1:\n            return 0\n        first = 0\n        for i in range(n-1):\n            if nums[i]!= nums[i+1]:\n                if nums[i] == nums[first]:\n                    first += 1\n                else:\n                    first = i+1\n        return first"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    # @param intervals, a list of Interval\n    # @return an integer\n    def findDuplicate(self, intervals):\n        if not intervals:\n            return -1\n        if not intervals[0].end:\n            return 0\n        start = intervals[0].start\n        end = intervals[0].end\n        for i in range(1, len(intervals)):\n            if intervals[i].start < start:\n                start = intervals[i].start\n            if intervals[i].end > end:\n                end = intervals[i].end\n        if end == start:\n            return -1\n        return start"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def find_first_duplicate(arr):\n    # Write your code here\n    if arr is None or len(arr) == 0:\n        return None\n    \n    i = 0\n    j = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    \n    return arr[i]\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_first_duplicate([2, 3, 2]) == 2, \"2 is the first duplicate\"\n    assert find_first_duplicate([1, 1, 1, 2, 2]) == 2, \"2 is the first duplicate\"\n    assert find_first_duplicate([1, 2, 3]) == 3, \"3 is the first duplicate\"\n    assert find_first_duplicate([1, 2, 2]) == 2, \"2 is the first duplicate\"\n    assert find_first_duplicate([1, 2]) == 2, \"2 is the first duplicate\"\n    assert find_first_duplicate([1]) == 1, \"1 is the first duplicate\"\n    assert find_first_duplicate([]) == None, \"Empty array is not a duplicate\"\n    assert find_first_duplicate([\"1\", \"2\", \"2\"]) == 2, \"2 is the first duplicate\"\n    assert find_first_duplicate([\"1\", \"2\", \"1\"]) == 2, \"2 is the first duplicate\"\n    assert find_first_duplicate([\"1\", \"2\", \"3\"]) == 3, \"3 is the first duplicate\"\n    assert find_first_duplicate([\"1\", \"2\", \"3\", \"3\"]) == 3, \"3 is the first duplicate\""
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # O(n)\n        for i in range(len(nums)):\n            if nums[i] == nums[i + 1]:\n                return i + 1\n\n        # O(n^2)\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    return i\n\n        return -1\n\n\nif __name__ == \"__main__\":\n    assert Solution().findDuplicate([1, 1, 2, 3, 4, 4]) == 3, \"Case 1\"\n    assert Solution().findDuplicate([1, 1, 2, 3, 4, 4, 5]) == 4, \"Case 2\"\n    assert Solution().findDuplicate([1, 2, 3, 4, 5, 6, 7, 8, 8]) == 8, \"Case 3\"\n    assert Solution().findDuplicate([1, 1, 1, 1, 2, 2, 3, 3, 4]) == 1, \"Case 4\""
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# Example 1:\n# Input: [1,2,3]\n# Output: null\n# Example 2:\n# Input: [1,1,2,3]\n# Output: 2\n# Example 3:\n# Input: [1,1,1]\n# Output: 0\n\n# Solution 1:\n# 1. Hash table\n# 2. Use hash table to store the hash value and compare with the next element.\n# 3. Compare hash value with previous element, if the value is same, continue to next element.\n# 4. If the value is different, return the first different element.\n# 5. Return the first element which has not been compared with.\ndef firstDuplicate(nums):\n    nums = list(nums)\n    nums_hash = {}\n    for i in range(len(nums)):\n        nums_hash[nums[i]] = i\n    for i in range(len(nums) - 1):\n        if nums_hash[nums[i]] == nums_hash[nums[i + 1]]:\n            continue\n        else:\n            return nums[i + 1]\n    return None\n\n# Solution 2:\n# 1. Hash table\n# 2. Use hash table to store the hash value and compare with the next element.\n# 3. Compare hash value with previous element, if the value is same, continue to next element.\n# 4. If the value is different, return the first different element.\n# 5. Return the first element which has not been compared with.\ndef firstDuplicate(nums):\n    nums = list(nums)\n    nums_hash = {}\n    for i in range(len(nums)):\n        nums_hash[nums[i]] = i\n    for i in range(len(nums) - 1):\n        if nums_hash[nums[i]] == nums_hash[nums[i + 1]]:\n            continue\n        else:\n            return nums[i + 1]\n    return None"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/first-unique-number/discuss/203429/Using-Python-solutions-with-O(1)-time-and-O(n)-space\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def first_duplicate(start, end):\n            for i in range(start, end):\n                if i > start and nums[i] == nums[i - 1]:\n                    return i\n            return -1\n\n        if not nums:\n            return -1\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            dup = first_duplicate(start, end)\n            if dup!= -1:\n                return dup\n            start += 1\n            end -= 1\n        return -1\n\nif __name__ == '__main__':\n    print(Solution().firstDuplicate([1, 1, 2, 3, 3, 3, 4, 4, 4, 4]))\n    print(Solution().firstDuplicate([1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]))\n    print(Solution().firstDuplicate([1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5]))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    # @param intervals, a list of Interval\n    # @return an integer\n    def findDuplicate(self, intervals):\n        if not intervals:\n            return -1\n        interval_l = sorted(intervals, key=lambda x: x.start)\n        interval_r = sorted(intervals, key=lambda x: x.end, reverse=True)\n        i = 0\n        while i < len(interval_l) - 1:\n            if interval_l[i].end == interval_r[i].start:\n                return interval_l[i].start\n            i += 1\n        return -1"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    def findDuplicate(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals: return -1\n        interval_set = set()\n        for i in intervals:\n            interval_set.add(Interval(i.start, i.end))\n        interval_set.discard(Interval(0, 0))\n        for i in interval_set:\n            if i.start == i.end: return i.start\n        return -1"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def first_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # the idea is to find the first element which is not the same as the previous element\n    # and then iterate the rest of the elements until we find a different one\n    i = 0\n    while i < len(nums):\n        if nums[i]!= nums[i+1]:\n            return i\n        i += 1\n    return -1\n\n\n# Your FirstDupElement solution\n# Time:  O(n)\n# Space: O(n)\ndef first_duplicate(nums):\n    return first_duplicate_solution(nums)\n\n\n# your code here\ndef first_duplicate_solution(nums):\n    return first_duplicate_solution_s(nums)\n\n\ndef first_duplicate_solution_s(nums):\n    # use the same idea as the first_duplicate\n    i = 0\n    while i < len(nums):\n        if nums[i]!= nums[i+1]:\n            return i\n        i += 1\n    return -1"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/find-duplicate-number/\n# Given an array of integers, find the first duplicate number and return its index.\n# The array may contain duplicates, and there are at most two of them.\n# Example:\n# Input: [1,2,3,4]\n# Output: 2\n# Explanation: The 2nd number (3) is a duplicate of the 1st number (4).\n# Note:\n# 1 <= A.length <= 10000\n# A[i] is an integer in the range of [0, 10000].\n\nclass Solution:\n    # @param A, a list of integers\n    # @return an integer\n    def findDuplicate(self, A):\n        # write your code here\n        n = len(A)\n        if n <= 2:\n            return 0\n\n        # get the 2nd number\n        b = A[1]\n        for i in range(2, n):\n            if A[i] == b:\n                return i\n            else:\n                b = A[i]"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "class Solution:\n    # @return an integer\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(nums)):\n            if nums[i] == nums[result]:\n                result += 1\n            else:\n                result = 0\n        return result\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findDuplicate([1, 2, 3, 2, 3, 4, 3]))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findDuplicate(self, nums):\n        if not nums:\n            return -1\n        \n        # find the first duplicate element\n        for i in range(len(nums)):\n            j = i + 1\n            while j < len(nums):\n                if nums[i] == nums[j]:\n                    return nums[i]\n                j += 1\n        \n        return -1\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findDuplicate([1,1,2,2,3,3])\n    print s.findDuplicate([1,1,2,2,3,3,3])\n    print s.findDuplicate([1,1,2,2,3,3,3,3])\n    print s.findDuplicate([1,1,2,2,3,3,3,3,3])\n    print s.findDuplicate([1,1,2,2,3,3,3,3,3,3])\n    print s.findDuplicate([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums: return -1\n        for i in range(len(nums)):\n            if nums[i] == nums[i-1]:\n                for j in range(i+1, len(nums)):\n                    if nums[i] == nums[j]:\n                        return i\n        return -1"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n# @include\ndef first_duplicate(arr):\n    # A dict of {index: index} is used to track the indices of the\n    # duplicates of each element in the given array.\n    # Initially, all indices are -1, which means there are no duplicates.\n    duplicates = defaultdict(lambda: -1)\n    for i in range(len(arr)):\n        # Set the index of the current element as its value.\n        duplicates[i] = i\n\n    # Iterate through the given array, set the value of the index of the\n    # current element as its value if it is a duplicate of the value of the\n    # index of the previous element.\n    for i in range(len(arr)):\n        if arr[i] in duplicates:\n            duplicates[i] = duplicates[i]\n    return next(iter(duplicates.values()))\n# @exclude\n\ndef first_duplicate(arr):\n    # @include\n    def first_duplicate(arr):\n        # A dict of {index: index} is used to track the indices of the\n        # duplicates of each element in the given array.\n        # Initially, all indices are -1, which means there are no duplicates.\n        duplicates = defaultdict(lambda: -1)\n        for i in range(len(arr)):\n            # Set the index of the current element as its value.\n            duplicates[i] = i\n\n        # Iterate through the given array, set the value of the index of the\n        # current element as its value if it is a duplicate of the value of the\n        # index of the previous element.\n        for i in range(len(arr)):\n            if arr[i] in duplicates:\n                duplicates[i] = duplicates[i]\n        return next(iter(duplicates.values()))\n    # @exclude\n    return first_duplicate(arr)\n\nif __name__ == '__main__':\n    arr = [1, 1, 2, 3, 3]\n    print(first_duplicate(arr))\n    arr = [1, 1,"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        lo, hi = 0, len(nums) - 1\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if nums[mid]!= nums[hi]:\n                if nums[mid] < nums[hi]:\n                    lo = mid + 1\n                else:\n                    hi = mid - 1\n            else:\n                lo, hi = mid, hi\n        return lo"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/first-unique-number/\n# https://leetcode.com/problems/first-unique-number/\n# https://discuss.leetcode.com/topic/15706/java-solution-using-dynamic-programming\n\n# Note: the input array is sorted.\n\n# Example:\n# Input: [1,2,3,4]\n# Output: 3\n# Explanation: The first 4 numbers are all different.\n# The first number, 1, is repeated twice, so it is not a duplicate number.\n# The second number, 2, is a duplicate number.\n# The third number, 3, is a duplicate number.\n# The fourth number, 4, is not a duplicate number.\n# Note:\n# The size of the input array will be in the range [0, 1000].\n# The input array may contain duplicates, and they are allowed.\n\n# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def firstUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        \n        nums.sort()\n        idx = 0\n        while idx < len(nums):\n            if nums[idx]!= nums[idx+1]:\n                return idx\n            idx += 1\n        return -1"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-duplicate-number-ii/discuss/107780/Python-and-Java-solutions\n\n# 2ms 100%\nclass Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(nums)):\n            if nums[i] == nums[i-1]:\n                nums[i] = nums[i-1]\n                nums[i-1] = -1\n        for i in range(len(nums)):\n            if nums[i] == nums[i-1]:\n                return i\n        return -1"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/find-duplicate-number/\n\n# 1. Create a list of numbers.\n# 2. Find the first duplicate number.\n# 3. If found, print the first number. Otherwise, print -1.\n# 4. If there are no duplicates, print -1.\n# 5. If there are no duplicates, print -1.\n\n# Time:  O(n)\n# Space: O(1)\n\n# DP solution.\n# Time:  O(n)\n# Space: O(1)\n# DP solution.\n# Time:  O(n)\n# Space: O(1)\n# DP solution.\n# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if nums[i] == nums[j]:\n                    dp[j] = i + 1\n        for i in range(n):\n            if dp[i]!= i + 1:\n                return i + 1\n        return -1"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/first-unique-number/\n# Given an array of integers, find the first duplicate number and return its index.\n#\n# For example,\n# Given [1,2,3,1,2,3,4] return 2 (the 2nd number is a duplicate of the 1st number).\n#\n# Note:\n# Your algorithm should run in O(n) time and uses constant space.\n#\n# Follow up:\n# Could you solve it with constant space complexity?\n#\n# Companies\n# Google\n# Related Topics\n# Math\n# Similar Questions\n# First Unique Number\n#\n\nimport unittest\n# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n# http://www.cnblogs.com/zuoyuan/p/3749097.html\nclass Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        m = {}\n        for i in range(n):\n            if nums[i] in m:\n                return m[nums[i]]\n            m[nums[i]] = i\n        return n\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n        s = Solution()\n        self.assertEqual(s.findDuplicate([1,2,3,1,2,3,4]), 2)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/first-unique-number/solution/\n#\n# Approach #1: Brute Force\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n#\n# Backtracking\n#\n# 1. Initialize the array to be empty\n# 2. Initialize the result to be -1\n#"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n#\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # return self.find_duplicate(nums)\n        return self.find_duplicate_2(nums)\n\n    def find_duplicate_2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Use a dictionary to store the intervals\n        # and check the interval if it's duplicate\n        # if it's duplicate, then return the index\n        # if it's not duplicate, return -1\n        intervals = {}\n        for index, num in enumerate(nums):\n            if num not in intervals:\n                intervals[num] = [index, index]\n            else:\n                intervals[num].append(index)\n        for num in intervals:\n            if intervals[num][1] - intervals[num][0] > 1:\n                return intervals[num][0]\n        return -1"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i, n in enumerate(nums):\n            if n == nums[i]:\n                j = i + 1\n                while j < len(nums) and nums[j] == nums[i]:\n                    j += 1\n                if j!= len(nums):\n                    return j\n        return -1\n\n\nif __name__ == '__main__':\n    print Solution().firstDuplicate([1, 1, 1, 2, 2, 3, 3, 4, 4])"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        d = defaultdict(int)\n        for n in nums:\n            d[n] += 1\n        for k, v in d.items():\n            if v > 1:\n                return k\n        return -1\n\nif __name__ == '__main__':\n    assert Solution().firstDuplicate([0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4]) == 3"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums: return None\n        \n        # find the first duplicate\n        start = 0\n        while start < len(nums) and nums[start]!= nums[start+1]:\n            start += 1\n            \n        # find the last duplicate\n        end = len(nums) - 1\n        while end > start and nums[end] == nums[end-1]:\n            end -= 1\n            \n        # return the first duplicate\n        return nums[start] if start < end else nums[end]"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/duplicate-subarray-sum\n# https://www.hackerrank.com/challenges/duplicate-subarray-sum/problem\n\nimport sys\n\n\ndef find_first_duplicate_subarray_sum(arr):\n    \"\"\"\n    :param arr: List of integers\n    :return: List of integers\n    \"\"\"\n    # Base Case\n    if len(arr) == 0:\n        return -1\n    # Iterate over the array and find the first duplicate\n    for i in range(0, len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            # Found a duplicate, now we can check if the sum of the first and the second subarray\n            # is equal to the sum of the first subarray.\n            if arr[i] + arr[i + 1] == arr[i] + arr[i + 2]:\n                return arr[i]\n    return -1\n\n\ndef main():\n    \"\"\"\n    Sample Input\n    [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    Sample Output\n    3\n    \"\"\"\n    arr = [int(i) for i in sys.stdin.readline().strip()]\n    print(find_first_duplicate_subarray_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def firstDuplicate(self, nums):\n        if not nums or len(nums) == 1:\n            return -1\n        i = 0\n        while i < len(nums):\n            if nums[i] == nums[i+1]:\n                i += 1\n            else:\n                break\n        return i\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([1,2,2,1], 1)\n        self._test([1,2,3,4,4,3,2,1], 4)\n\n    def _test(self, nums, expected):\n        actual = Solution().firstDuplicate(nums)\n        self.assertEquals(expected, actual)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n#\n# class Solution:\n#     # @param intervals, a list of Interval\n#     # @return an integer\n#     def findDuplicate(self, intervals):\n#         if not intervals: return -1\n#         start = intervals[0].start\n#         end = intervals[0].end\n#         for i in xrange(1, len(intervals)):\n#             if start == intervals[i].start:\n#                 end = intervals[i].end\n#             else:\n#                 start = end\n#         return start\n\nclass Solution:\n    # @param intervals, a list of Interval\n    # @return an integer\n    def findDuplicate(self, intervals):\n        if not intervals: return -1\n        start = intervals[0].start\n        end = intervals[0].end\n        for i in xrange(1, len(intervals)):\n            if intervals[i].start == start:\n                end = intervals[i].end\n            else:\n                start = end\n        return start"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # dp[i] is the first element of nums[:i] that is duplicated.\n        # dp[i] = nums[:i] == nums[i:]\n        # dp[0] = -1\n        dp = [None] * len(nums)\n        for i in range(len(nums)):\n            if dp[i] is None:\n                dp[i] = i\n            elif dp[i]!= i:\n                dp[i] = -1\n        for i in range(len(nums)):\n            if dp[i] == i:\n                for j in range(i+1, len(nums)):\n                    if nums[i] == nums[j]:\n                        dp[j] = i\n        return dp[0] if dp[0]!= -1 else -1"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/duplicate-subsequence/\n\nclass Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return -1\n        hash = {}\n        for i in range(n):\n            if nums[i] in hash:\n                return i\n            hash[nums[i]] = i\n        for i in range(n):\n            if nums[i] in hash:\n                j = hash[nums[i]]\n                if i == j:\n                    continue\n                while nums[i] == nums[j]:\n                    j += 1\n                if j > i:\n                    return j\n        return -1"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        l = len(nums)\n        if l < 2:\n            return -1\n        h = {}\n        for i in range(l):\n            if nums[i] in h:\n                return h[nums[i]]\n            h[nums[i]] = i\n        return -1"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Your function should return 0 if no duplicate exists, otherwise it should return the index of the first duplicate element.\n\n# Example 1:\n# Input: [1,2,3,4,5]\n# Output: 2\n# Example 2:\n# Input: [0,1,2,3,4,5]\n# Output: 0\n# Example 3:\n# Input: [7,7,7,7,7,7]\n# Output: -1\n# Example 4:\n# Input: [0]\n# Output: 0\n# Note:\n# The length of the given array won't exceed 10,000.\n# The range of numbers in the given array is [-1e7, 1e7].\n# Example 1:\n# Input: [1,2,3,4,5]\n# Output: 2\n# Example 2:\n# Input: [0,1,2,3,4,5]\n# Output: 0\n# Example 3:\n# Input: [7,7,7,7,7,7]\n# Output: -1\n# Example 4:\n# Input: [0]\n# Output: 0\n\n\nclass Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # if len(nums) < 2:\n        #     return 0\n        # index = 0\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[index]:\n        #         index += 1\n        # return index\n\n        if len(nums) == 0:\n            return 0\n        # if len(nums) < 2:\n        #     return 0\n        # index = 0\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[index]:\n        #         index += 1\n        # return index\n\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[0]:\n        #         return 0\n        # return 1\n\n        # for i in range(1, len(nums)):"
    }
  ]
}