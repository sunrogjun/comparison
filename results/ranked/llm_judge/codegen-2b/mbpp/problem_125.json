{
  "timestamp": "2025-09-14T18:17:28.599222",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 125,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill/problem\n\n# Brute force\n# https://www.hackerrank.com/challenges/electricity-bill/submissions/code/21573939\n\ndef electricity_bill(k, n):\n    # Write your code here\n    \n    bill = 0\n    \n    for i in range(n):\n        bill += k * (i + 1)\n    \n    return bill\n\nif __name__ == '__main__':\n    k = int(input())\n    n = int(input())\n    \n    print(electricity_bill(k, n))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def calculate_bill(kWh_today, kWh_total):\n    \"\"\"\n    Input:\n    kWh_today: the amount of energy today, in kWh\n    kWh_total: the total of energy today, in kWh\n\n    Output:\n    bill: the energy bill, in $/kWh\n    \"\"\"\n    return kWh_total / kWh_today\n\ndef calculate_bill_with_price(kWh_today, kWh_total, price_per_kwh):\n    \"\"\"\n    Input:\n    kWh_today: the amount of energy today, in kWh\n    kWh_total: the total of energy today, in kWh\n    price_per_kwh: the price per kWh\n\n    Output:\n    bill: the energy bill, in $/kWh\n    \"\"\"\n    return kWh_total * price_per_kwh / kWh_today\n\ndef calculate_bill_with_price_and_kwh_today(kWh_today, kWh_total, price_per_kwh, kwh_today_kwh):\n    \"\"\"\n    Input:\n    kWh_today: the amount of energy today, in kWh\n    kWh_total: the total of energy today, in kWh\n    price_per_kwh: the price per kWh\n    kwh_today_kwh: the amount of energy in kWh today\n\n    Output:\n    bill: the energy bill, in $/kWh\n    \"\"\"\n    return kWh_total * price_per_kwh / kWh_total + kWh_today_kwh * price_per_kwh / kWh_total\n\nif __name__ == '__main__':\n    kWh_today = 0\n    kWh_total = 0\n    price_per_kwh = 0\n    kwh_today_kwh = 0\n    kwh_total_kwh = 0\n\n    kWh_today = int(input(\"Enter the amount of energy today, in kWh: \"))\n    kWh_total = int(input(\"Enter the total of energy today, in kWh: \"))\n    price_per_kwh = float(input(\"Enter the price per kWh: \"))\n    kwh_today_kwh = int(input(\"Enter the amount of energy in kWh today, in kWh"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# write your code here\n# https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n\ndef electricity_bill(cost, period):\n    # write your code here\n    \n    # initialise your variables here\n    total = 0\n    \n    # calculate electricity bill for all the years\n    for i in range(0,period):\n        total += cost\n    \n    # return the electricity bill\n    return total\n\nif __name__ == '__main__':\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://www.hackerrank.com/challenges/power-consumption-bill-calculator\n    # https://"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "\"\"\"\nThe input is in the form of an array of integers.\n\nExample:\n    Input:\n        [6, 10, 15]\n    Output:\n        6.66\n\"\"\"\ndef calculate_bill(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total / 12\n\n\"\"\"\nThe input is in the form of an array of integers.\n\nExample:\n    Input:\n        [4, 7, 8, 8]\n    Output:\n        8.75\n\"\"\"\ndef calculate_bill_1(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total / 12\n\n\"\"\"\nThe input is in the form of an array of integers.\n\nExample:\n    Input:\n        [8, 6, 7, 9]\n    Output:\n        8.75\n\"\"\"\ndef calculate_bill_2(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total / 12\n\n\"\"\"\nThe input is in the form of an array of integers.\n\nExample:\n    Input:\n        [8, 6, 7, 9]\n    Output:\n        8.75\n\"\"\"\ndef calculate_bill_3(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total / 12\n\n\"\"\"\nThe input is in the form of an array of integers.\n\nExample:\n    Input:\n        [8, 6, 7, 9]\n    Output:\n        8.75\n\"\"\"\ndef calculate_bill_4(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total / 12\n\n\"\"\"\nThe input is in the form of an array of integers.\n\nExample:\n    Input:\n        [8, 6, 7, 9]\n    Output:\n        8.75\n\"\"\"\ndef calculate_bill_5(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total / 12\n\n\"\"\"\nThe input is in the form of an array of integers.\n\nExample:\n    Input:\n        [8, 6, 7, 9]"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def electricity_bill(monthly_consumption, initial_price, monthly_price, annual_price):\n    \"\"\"\n    :type monthly_consumption: int\n    :type initial_price: int\n    :type monthly_price: int\n    :type annual_price: int\n    :rtype: float\n    \"\"\"\n    return annual_price * (monthly_consumption / monthly_price)\n\nif __name__ == '__main__':\n    print electricity_bill(500, 100, 50, 1000)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill/problem\n\ndef electricity_bill(k, n, p):\n    \"\"\"\n    :type k: int\n    :type n: int\n    :type p: float\n    :rtype: float\n    \"\"\"\n    return (k * p) * (n + 1) / (p + 1)\n\nif __name__ == '__main__':\n    k = int(input())\n    n = int(input())\n    p = float(input())\n    print(electricity_bill(k, n, p))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill/problem\n\ndef electricity_bill(n, k):\n    \"\"\"\n    n: number of people\n    k: number of rooms\n    \"\"\"\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here\n    \n    # TODO: Implement this function\n    \n    # Your code here"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import math\nimport os\n\ndef electricity_bill(start_date, end_date, kwh_price, day_price, monthly_price, kWh_count, day_count, monthly_count):\n    \"\"\"\n    :type start_date: str\n    :type end_date: str\n    :type kwh_price: float\n    :type day_price: float\n    :type monthly_price: float\n    :type kWh_count: int\n    :type day_count: int\n    :type monthly_count: int\n    :rtype: float\n    \"\"\"\n    if start_date == end_date:\n        return 0.0\n\n    bill_cal = {}\n    bill_cal['monthly_price'] = monthly_price\n    bill_cal['kwh_price'] = kwh_price\n    bill_cal['day_price'] = day_price\n    bill_cal['kwh_count'] = kWh_count\n    bill_cal['day_count'] = day_count\n    bill_cal['monthly_count'] = monthly_count\n\n    bill_cal['kwh_price'] = bill_cal['kwh_price'] / bill_cal['kwh_count']\n    bill_cal['day_price'] = bill_cal['day_price'] / bill_cal['day_count']\n    bill_cal['monthly_price'] = bill_cal['monthly_price'] / bill_cal['monthly_count']\n\n    bill_cal['kwh_price'] = bill_cal['kwh_price'] * bill_cal['monthly_count']\n    bill_cal['day_price'] = bill_cal['day_price'] * bill_cal['monthly_count']\n    bill_cal['monthly_price'] = bill_cal['monthly_price'] * bill_cal['monthly_count']\n\n    bill_cal['kwh_price'] = bill_cal['kwh_price'] + bill_cal['monthly_price']\n    bill_cal['day_price'] = bill_cal['day_price'] + bill_cal['monthly_price']\n    bill_cal['monthly_price'] = bill_cal['monthly_price'] + bill_cal['"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def electricity_bill(monthly_consumption, monthly_price, monthly_number_of_vehicles, monthly_number_of_passengers, monthly_number_of_kms_per_vehicle, monthly_number_of_kms_per_passenger):\n    \"\"\"\n    monthly_consumption: int, the monthly consumption of electricity in kiloWatt-hours.\n    monthly_price: float, the monthly price of electricity in dollars.\n    monthly_number_of_vehicles: int, the number of vehicles used in the month.\n    monthly_number_of_passengers: int, the number of passengers used in the month.\n    monthly_number_of_kms_per_vehicle: int, the number of kilometers per vehicle used in the month.\n    monthly_number_of_kms_per_passenger: int, the number of kilometers per passenger used in the month.\n    \n    return: float, the electricity bill in dollars.\n    \"\"\"\n    \n    if monthly_consumption < 0 or monthly_consumption > monthly_price * monthly_number_of_vehicles * monthly_number_of_passengers * monthly_number_of_kms_per_vehicle * monthly_number_of_kms_per_passenger:\n        return -1\n    else:\n        return monthly_consumption * monthly_price / 1000\n\n# Tests\n#print electricity_bill(10, 3.2, 2, 1, 1, 1)\n#print electricity_bill(10, 3.2, 2, 1, 2, 1)\n#print electricity_bill(10, 3.2, 2, 1, 1, 2)\n#print electricity_bill(10, 3.2, 2, 1, 2, 2)\n#print electricity_bill(10, 3.2, 2, 1, 1, 1)\n#print electricity_bill(10, 3.2, 2, 1, 1, 2)\n#print electricity_bill(10, 3.2, 2, 1, 2, 1)\n#print electricity_bill(10, 3.2, 2, 1, 2, 2)\n#print electricity_bill(10, 3.2, 2, 1, 1, 1)\n#"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill/problem\n# https://www.hackerrank.com/challenges/electricity-bill/submissions/code/3f0f1f3f5f2f3f4f6f7f8f9fafbfcfcfd0d1\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n)\n\ndef calculate_electricity_bill(n, k):\n    \"\"\"\n    Calculates the electricity bill of a customer based on the input parameters.\n    :param n: Customer count\n    :param k: Customer's electricity bill\n    :return: Electricity bill\n    \"\"\"\n    electricity_bill = 0\n    for i in range(n):\n        electricity_bill += k\n        k -= 1\n    return electricity_bill\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(calculate_electricity_bill(n, k))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill/problem\n\ndef calculate_electricity_bill(start_amount, end_amount, monthly_payment,\n    no_of_months):\n    \"\"\"\n    Calculate electricity bill.\n    \n    @param start_amount: The start amount of electricity.\n    @param end_amount: The end amount of electricity.\n    @param monthly_payment: The monthly payment of electricity.\n    @param no_of_months: The number of months of electricity.\n    \n    @return: The total amount of electricity.\n    \"\"\"\n    total_amount = 0\n    for i in range(1, no_of_months+1):\n        total_amount += monthly_payment * (i - 1)\n    return total_amount + end_amount\n\n# Driver Code\nif __name__ == \"__main__\":\n    start_amount = int(input())\n    end_amount = int(input())\n    monthly_payment = int(input())\n    no_of_months = int(input())\n    print(calculate_electricity_bill(start_amount, end_amount, monthly_payment,\n        no_of_months))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/electric-bill/discuss/3713/Java-solution-using-the-map-and-list\n\nclass Solution(object):\n    def calculateElectricityBill(self, costs):\n        \"\"\"\n        :type costs: List[int]\n        :rtype: float\n        \"\"\"\n        total = 0\n        costs.sort()\n        for cost in costs:\n            total += cost\n        total += costs[-1]\n        return total"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def electricity_bill(price, period):\n    \"\"\"\n    :type price: float\n    :type period: int\n    :rtype: float\n    \"\"\"\n    return price * (period ** (1/12))\n\n\n# https://www.hackerrank.com/challenges/electricity-bill/problem"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def electricity_bill(kWh, price, period):\n    \"\"\"\n    Input:\n    kWh: the total kWh of electricity purchased in a period\n    price: the average price of electricity in a period\n    period: the period in days\n    Output:\n    electricity_bill: the total kWh of electricity purchased in a period\n    \"\"\"\n    return kWh / price / period\n\n\ndef test():\n    \"\"\"\n    Test cases.\n    \"\"\"\n    assert electricity_bill(100, 1, 1) == 0.01\n    assert electricity_bill(100, 1, 2) == 0.04\n    assert electricity_bill(100, 1, 3) == 0.08\n    assert electricity_bill(100, 1, 4) == 0.12\n    assert electricity_bill(100, 1, 5) == 0.16\n    assert electricity_bill(100, 1, 6) == 0.21\n    assert electricity_bill(100, 1, 7) == 0.25\n    assert electricity_bill(100, 1, 8) == 0.31\n    assert electricity_bill(100, 1, 9) == 0.37\n    assert electricity_bill(100, 1, 10) == 0.43\n    assert electricity_bill(100, 1, 11) == 0.49\n    assert electricity_bill(100, 1, 12) == 0.56\n    assert electricity_bill(100, 1, 13) == 0.63\n    assert electricity_bill(100, 1, 14) == 0.70\n    assert electricity_bill(100, 1, 15) == 0.77\n    assert electricity_bill(100, 1, 16) == 0.84\n    assert electricity_bill(100, 1, 17) == 0.92\n    assert electricity_bill(100, 1, 18) == 1.00\n    assert electricity_bill(100, 1, 19) == 1.08\n    assert electricity_bill(100, 1, 20) == 1.16\n    assert electricity_bill(100, 1, 21) == 1.24\n    assert electricity_bill(100, 1, 22) == 1.32\n    assert electricity_bill(100, 1, 23) == 1.40\n    assert electricity_bill(100, 1, 24) == 1.48\n    assert"
    },
    {
      "rank": 15,
      "score": 9.989610448658114,
      "candidate": "import math\n\n# your code goes here\ndef calculate_electricity_bill(price, cost, value):\n    return value * price / cost\n\nif __name__ == '__main__':\n    price = float(input(\"Enter electricity price: \"))\n    cost = float(input(\"Enter electricity cost: \"))\n    value = float(input(\"Enter value of electricity: \"))\n\n    print(\"Electricity bill is: {}\".format(calculate_electricity_bill(price, cost, value)))"
    },
    {
      "rank": 16,
      "score": 9.96646199810741,
      "candidate": "# https://www.hackerrank.com/challenges/energy-bill-calculator/problem\n\ndef calculate_electricity_bill(cost, usage):\n    \"\"\"\n    Input\n    cost: The cost of electricity in dollars\n    usage: The amount of electricity used in dollars\n    Output\n    The total amount of electricity bill in dollars\n    \"\"\"\n    bill = cost * usage\n    return bill\n\n\nif __name__ == '__main__':\n    # your code goes here\n    cost = int(input())\n    usage = int(input())\n    print(calculate_electricity_bill(cost, usage))"
    },
    {
      "rank": 17,
      "score": 9.934524872858905,
      "candidate": "def electricity_bill(price, amount, month, year):\n    \"\"\"\n    For given price, amount and month, calculate the\n    electricity bill for that month.\n    \n    price - price of electricity in $/kwh\n    amount - amount of electricity purchased in $\n    month - month of the purchase\n    year - year of the purchase\n    \n    returns - electricity bill in $\n    \"\"\"\n    \n    month_total = 0\n    month_total += amount * price\n    \n    month_total += amount * price * (month - 1)\n    \n    month_total += amount * price * (month - 1) * (month - 2)\n    \n    month_total += amount * price * (month - 1) * (month - 2) * (month - 3)\n    \n    month_total += amount * price * (month - 1) * (month - 2) * (month - 3) * (month - 4)\n    \n    month_total += amount * price * (month - 1) * (month - 2) * (month - 3) * (month - 4) * (month - 5)\n    \n    month_total += amount * price * (month - 1) * (month - 2) * (month - 3) * (month - 4) * (month - 5) * (month - 6)\n    \n    month_total += amount * price * (month - 1) * (month - 2) * (month - 3) * (month - 4) * (month - 5) * (month - 6) * (month - 7)\n    \n    month_total += amount * price * (month - 1) * (month - 2) * (month - 3) * (month - 4) * (month - 5) * (month - 6) * (month - 7) * (month - 8)\n    \n    month_total += amount * price * (month - 1) * (month - 2) * (month - 3) * (month - 4) * (month - 5) * (month - 6) * (month - 7) * (month - 8) * (month - 9)\n    \n    month_total += amount * price * (month - 1) * (month - 2) * (month - 3) * (month -"
    },
    {
      "rank": 18,
      "score": 9.932100282484738,
      "candidate": "\"\"\"\nDefinition for an account.\n\"\"\"\nclass Account:\n    def __init__(self, name):\n        self.name = name\n        self.value = 0\n        self.next = None\n\n\"\"\"\nDefinition for a customer.\n\"\"\"\nclass Customer:\n    def __init__(self, name, account):\n        self.name = name\n        self.account = account\n        self.balance = 0\n\n\"\"\"\nDefinition for a supplier.\n\"\"\"\nclass Supplier:\n    def __init__(self, name, account):\n        self.name = name\n        self.account = account\n        self.balance = 0\n\n\"\"\"\nDefinition for an energy unit.\n\"\"\"\nclass EnergyUnit:\n    def __init__(self, name, cost, volume):\n        self.name = name\n        self.cost = cost\n        self.volume = volume\n\n\"\"\"\nDefinition for an energy flow.\n\"\"\"\nclass EnergyFlow:\n    def __init__(self, source, destination, amount):\n        self.source = source\n        self.destination = destination\n        self.amount = amount\n\n\"\"\"\nDefinition for a cost.\n\"\"\"\nclass Cost:\n    def __init__(self, unit, amount):\n        self.unit = unit\n        self.amount = amount\n\n\"\"\"\nMain function.\n\"\"\"\ndef main():\n    pass\n\n\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef electricity_bill(customer, supplier, energy_unit, energy_flow, cost):\n    customer_account = Account(customer.name)\n    supplier_account = Account(supplier.name)\n    customer_balance = 0\n    supplier_balance = 0\n    for unit in energy_unit:\n        customer_account.value += unit.volume * unit.cost\n        customer_balance += unit.volume * unit.cost\n    for flow in energy_flow:\n        if flow.source.name == customer.name:\n            if flow.destination.name == supplier.name:\n                supplier_account.value -= flow.amount\n                supplier_balance += flow.amount\n    customer_account.value += supplier_balance * cost.unit.cost\n    return customer_account"
    },
    {
      "rank": 19,
      "score": 9.931969731321207,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill\ndef electricityBill(n, k, p):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :type p: float\n    :rtype: float\n    \"\"\"\n    return p * (float(n) / k)\n\nif __name__ == \"__main__\":\n    n, k, p = map(int, input().split())\n    print(electricityBill(n, k, p))"
    },
    {
      "rank": 20,
      "score": 9.913287868364899,
      "candidate": "def calculate_electricity_bill(electricity_price, period):\n    \"\"\"\n    electricity_price: float, the price of electricity in dollars per unit of time\n    period: integer, the period in months\n    returns: float, the calculated electricity bill in dollars\n    \"\"\"\n    \n    # calculate the energy in kWh for the given period\n    energy_kwh = electricity_price * period\n    \n    # calculate the bill in dollars\n    bill = energy_kwh * 0.001\n    \n    return bill\n\nif __name__ == \"__main__\":\n    print calculate_electricity_bill(0.2, 12)\n    print calculate_electricity_bill(0.2, 1)\n    print calculate_electricity_bill(0.2, 0)\n    print calculate_electricity_bill(0.2, 3)\n    print calculate_electricity_bill(0.2, 9)\n    print calculate_electricity_bill(0.2, 15)\n    print calculate_electricity_bill(0.2, 30)\n    print calculate_electricity_bill(0.2, 60)\n    print calculate_electricity_bill(0.2, 120)\n    print calculate_electricity_bill(0.2, 240)\n    print calculate_electricity_bill(0.2, 365)\n    print calculate_electricity_bill(0.2, 365*2)\n    print calculate_electricity_bill(0.2, 365*3)\n    print calculate_electricity_bill(0.2, 365*4)\n    print calculate_electricity_bill(0.2, 365*5)\n    print calculate_electricity_bill(0.2, 365*6)\n    print calculate_electricity_bill(0.2, 365*7)\n    print calculate_electricity_bill(0.2, 365*8)\n    print calculate_electricity_bill(0.2, 365*9)\n    print calculate_electricity_bill(0.2, 365*10)\n    print calculate_electricity_bill(0.2, 365*11)\n    print calculate_electricity_bill(0.2, 365*12)\n    print calculate_electricity_"
    },
    {
      "rank": 21,
      "score": 9.849701636700642,
      "candidate": "# Calculate electricity bill\n# Define variables\nelectricity_price = 8.25\nelectricity_consumption = 2000\n\n# Calculate electricity bill\nelectricity_bill = electricity_consumption * electricity_price\n\n# Print the electricity bill\nprint(\"Electricity bill is: {}\".format(electricity_bill))"
    },
    {
      "rank": 22,
      "score": 9.846369540907558,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill/problem\n\n\ndef electricity_bill(price, amount):\n    \"\"\"\n    :type price: int\n    :type amount: int\n    :rtype: int\n    \"\"\"\n    return amount * price\n\n\nif __name__ == '__main__':\n    price = int(input())\n    amount = int(input())\n    print(electricity_bill(price, amount))"
    },
    {
      "rank": 23,
      "score": 9.765536855160976,
      "candidate": "def calculate_electricity_bill(price, rate):\n    \"\"\"\n    @param price: price of electricity in dollars\n    @param rate: electricity rate in dollars/kwh\n    @return: electricity bill in dollars\n    \"\"\"\n    return price * rate\n\nif __name__ == '__main__':\n    print calculate_electricity_bill(100.00, 0.10)\n    print calculate_electricity_bill(100.00, 0.00)\n    print calculate_electricity_bill(100.00, 0.20)\n    print calculate_electricity_bill(100.00, 0.30)\n    print calculate_electricity_bill(100.00, 0.40)\n    print calculate_electricity_bill(100.00, 0.50)\n    print calculate_electricity_bill(100.00, 0.60)\n    print calculate_electricity_bill(100.00, 0.70)\n    print calculate_electricity_bill(100.00, 0.80)\n    print calculate_electricity_bill(100.00, 0.90)\n    print calculate_electricity_bill(100.00, 1.00)\n    print calculate_electricity_bill(100.00, 1.10)\n    print calculate_electricity_bill(100.00, 1.20)\n    print calculate_electricity_bill(100.00, 1.30)\n    print calculate_electricity_bill(100.00, 1.40)\n    print calculate_electricity_bill(100.00, 1.50)\n    print calculate_electricity_bill(100.00, 1.60)\n    print calculate_electricity_bill(100.00, 1.70)\n    print calculate_electricity_bill(100.00, 1.80)\n    print calculate_electricity_bill(100.00, 1.90)\n    print calculate_electricity_bill(100.00, 2.00)"
    },
    {
      "rank": 24,
      "score": 9.736673018098848,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill\n\n# The input format is:\n# [amount of electricity, price of electricity, number of users, number of devices, number of energy sources]\n# The output format is:\n# [electricity, cost of electricity]\n\ndef calculate_electricity_bill(electricity, price_electricity, number_of_users, number_of_devices, number_of_energy_sources):\n    # Returns the total electricity bill\n    return electricity * price_electricity * number_of_users * number_of_devices * number_of_energy_sources\n\n\ndef main():\n    electricity, price_electricity, number_of_users, number_of_devices, number_of_energy_sources = map(int, input().split())\n    print(calculate_electricity_bill(electricity, price_electricity, number_of_users, number_of_devices, number_of_energy_sources))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 9.693263830602788,
      "candidate": "# https://www.hackerrank.com/challenges/calculate-electricity-bill/problem\n\ndef calculate_electricity_bill(price, kw, pv, qv, mv):\n    \"\"\"\n    Calculates the electricity bill of an electric vehicle with price,\n    kw, pv, qv, and mv.\n    \"\"\"\n    # Write your code here\n    cost = 0\n    cost = cost + price\n    cost = cost + kw\n    cost = cost + pv\n    cost = cost + qv\n    cost = cost + mv\n    return cost\n\nif __name__ == \"__main__\":\n    price = int(input())\n    kw = int(input())\n    pv = int(input())\n    qv = int(input())\n    mv = int(input())\n    print(calculate_electricity_bill(price, kw, pv, qv, mv))"
    },
    {
      "rank": 26,
      "score": 9.679162857538252,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass ElectricityBill(object):\n    \"\"\"\n    Electricity bill class.\n    \"\"\"\n    def __init__(self, price_per_kwh, price_per_kwatt):\n        \"\"\"\n        Create a electricity bill.\n        \"\"\"\n        self.price_per_kwh = price_per_kwh\n        self.price_per_kwatt = price_per_kwatt\n        self.bill = 0.0\n\n    def calculate_bill(self, kwh, kwatt):\n        \"\"\"\n        Calculate electricity bill.\n        \"\"\"\n        self.bill = kwh * self.price_per_kwh + kwatt * self.price_per_kwatt\n        return self.bill\n\n\ndef main():\n    \"\"\"\n    Test electricity bill.\n    \"\"\"\n    bill = ElectricityBill(1.0, 1.0)\n    print \"Electricity bill for 1 kwh and 1 kwatt is: %s\" % bill.calculate_bill(1.0, 1.0)\n    bill = ElectricityBill(1.0, 1.5)\n    print \"Electricity bill for 1 kwh and 1.5 kwatt is: %s\" % bill.calculate_bill(1.0, 1.5)\n    bill = ElectricityBill(1.5, 1.0)\n    print \"Electricity bill for 1.5 kwh and 1 kwh is: %s\" % bill.calculate_bill(1.5, 1.0)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 9.653100079016605,
      "candidate": "\"\"\"\nThis is the input for this problem.\n\"\"\"\ndata = [\n    [2000, 6.5],\n    [2000, 5.4],\n    [2000, 4.8],\n    [2000, 5.2],\n    [2000, 6.5],\n    [2000, 4.8],\n    [2000, 5.4],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 5.2],\n    [2000, 4.8],\n    [2000, 5.2],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 4.8],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 5.4],\n    [2000, 5.4],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 5.4],\n    [2000, 5.4],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 6.5],\n    [2000, 5.4],\n    [2000, 5.4],\n    [2000, 6.5],\n    [2000, 6.5],"
    },
    {
      "rank": 28,
      "score": 9.575580665041686,
      "candidate": "# Write your code here\ndef electricity_bill(price, amt):\n    return price*amt\n\nif __name__ == \"__main__\":\n    print electricity_bill(10, 5)"
    },
    {
      "rank": 29,
      "score": 9.571228622793447,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill/problem\n\n# Initialize variables\n\n# The input will be a list of tuples. Each tuple will represent a line of input.\n# Each tuple will contain three integers representing the amount of energy in kilowatts,\n# the day of the year, and the cost of electricity in dollars.\n# The input will be sorted in descending order of the amount of energy.\n# You can assume that the cost of electricity is fixed and is equal to $0.10 per kWh.\n# You can assume that the electricity bill is accurate to two decimal places.\n\n# The output should be a string representing the total cost of electricity in dollars.\n\n# For example:\n\n# Input: [(1, 1, 0.10)]\n# Output: \"0.08\"\n\n# Input: [(1, 2, 0.10)]\n# Output: \"0.12\"\n\n# Input: [(1, 3, 0.10)]\n# Output: \"0.15\"\n\n# Input: [(1, 4, 0.10)]\n# Output: \"0.16\"\n\n# Input: [(1, 5, 0.10)]\n# Output: \"0.18\"\n\n# Input: [(1, 6, 0.10)]\n# Output: \"0.20\"\n\n# Input: [(1, 7, 0.10)]\n# Output: \"0.20\"\n\n# Input: [(1, 8, 0.10)]\n# Output: \"0.20\"\n\n# Input: [(1, 9, 0.10)]\n# Output: \"0.20\"\n\n# Input: [(1, 10, 0.10)]\n# Output: \"0.20\"\n\n# Input: [(1, 11, 0.10)]\n# Output: \"0.20\"\n\n# Input: [(1, 12, 0.10)]\n# Output: \"0.20\"\n\n# Input: [(1, 13, 0.10)]\n# Output: \"0.20\"\n\n# Input: [(1, 14, 0.10)]\n# Output: \"0.20\"\n\n# Input: [(1, 15, 0.10)]\n# Output: \"0.20\"\n\n# Input:"
    },
    {
      "rank": 30,
      "score": 8.85482609974248,
      "candidate": "import math\n\ndef calculate_electricity_bill(price, monthly_consumption, yearly_consumption):\n    \"\"\"\n    Write a function to calculate electricity bill.\n\n    The input is a price per unit and monthly consumption. The output is the\n    total electricity bill.\n    \"\"\"\n    total_bill = 0\n    monthly_consumption = float(monthly_consumption)\n    yearly_consumption = float(yearly_consumption)\n\n    for month in range(12):\n        if monthly_consumption > 0:\n            total_bill += math.floor((monthly_consumption * month) / 12)\n            monthly_consumption = monthly_consumption - math.floor((monthly_consumption * month) / 12)\n        else:\n            total_bill += math.floor((monthly_consumption * month) / 12)\n\n    total_bill += math.floor((yearly_consumption * 12) / 12)\n\n    return total_bill\n\nif __name__ == \"__main__\":\n    print calculate_electricity_bill(\n        price=float(raw_input(\"Enter price per unit: \")),\n        monthly_consumption=float(raw_input(\"Enter monthly consumption: \")),\n        yearly_consumption=float(raw_input(\"Enter yearly consumption: \"))\n    )"
    },
    {
      "rank": 31,
      "score": 8.824191652444275,
      "candidate": "# https://www.hackerrank.com/challenges/electricity-bill/problem\n\ndef electricity_bill(electricity_price, number_of_days):\n    \"\"\"\n    Input: Electricity price and number of days\n    Output: Electricity bill\n    \"\"\"\n    electricity_bill = electricity_price * number_of_days\n    return electricity_bill\n\nif __name__ == '__main__':\n    electricity_price = float(input().strip())\n    number_of_days = int(input().strip())\n    electricity_bill = electricity_bill(electricity_price, number_of_days)\n    print(electricity_bill)"
    },
    {
      "rank": 32,
      "score": 8.715665041793654,
      "candidate": "def calculate_bill(monthly_consumption, monthly_bill, monthly_amount_of_electricity):\n    \"\"\"\n    :type monthly_consumption: float\n    :type monthly_bill: float\n    :type monthly_amount_of_electricity: float\n    :rtype: float\n    \"\"\"\n    total_bill = monthly_consumption * monthly_bill\n    total_bill += monthly_amount_of_electricity * monthly_bill\n    return total_bill"
    },
    {
      "rank": 33,
      "score": 8.70520287779698,
      "candidate": "import re\nfrom math import log10, exp\n\nclass ElectricityBill:\n\n    def __init__(self):\n        self.electricity_bill = 0.0\n        self.electricity_bill_year = 0.0\n        self.electricity_bill_month = 0.0\n\n    def calculate(self, year, month, hours):\n        \"\"\"\n        :param year: The year of the bill.\n        :param month: The month of the bill.\n        :param hours: The number of hours of the bill.\n        :return: Electricity bill in $.\n        \"\"\"\n        electricity_bill_year = 0.0\n        electricity_bill_month = 0.0\n        for month in range(1, 13):\n            if month == month:\n                electricity_bill_month += hours / (12.0 * month)\n            else:\n                electricity_bill_month += hours / (12.0 * month + 1)\n        electricity_bill_year = electricity_bill_month * month\n        electricity_bill = electricity_bill_year / 12.0\n        self.electricity_bill = electricity_bill\n        self.electricity_bill_year = electricity_bill_year\n        self.electricity_bill_month = electricity_bill_month\n        return electricity_bill\n\n    def print_electricity_bill(self):\n        print(\"Electricity bill for {0} is {1} $\".format(self.electricity_bill_year, self.electricity_bill))\n\nif __name__ == \"__main__\":\n    electricity_bill = ElectricityBill()\n    electricity_bill.calculate(2013, 10, 36)\n    electricity_bill.print_electricity_bill()"
    },
    {
      "rank": 34,
      "score": 8.674757019833338,
      "candidate": "def electricity_bill(kwh_consumed, bill_days):\n    \"\"\"\n    Electricity bill.\n\n    :param kwh_consumed: Consumption in kWh.\n    :param bill_days: Number of days.\n    :return: Electricity bill.\n    \"\"\"\n    return kwh_consumed * bill_days\n\nif __name__ == '__main__':\n    print(electricity_bill(1000, 10))\n    print(electricity_bill(2000, 10))\n    print(electricity_bill(3000, 10))"
    },
    {
      "rank": 35,
      "score": 8.67195167471482,
      "candidate": "import math\n\ndef calculate_electricity_bill(price, period):\n    \"\"\"\n    :type price: float\n    :type period: int\n    :rtype: float\n    \"\"\"\n    if price < 0 or period < 1:\n        raise ValueError('Invalid inputs')\n\n    return round(price * (math.pow(1 + (period / 365.0), -0.6)), 2)\n\ndef main():\n    \"\"\"\n    Main\n    \"\"\"\n    print calculate_electricity_bill(100, 1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.596361256648514,
      "candidate": "import math\n\n# Complete the electricityBill function below.\ndef electricityBill(price, quantity, period):\n    \"\"\"\n    Returns the amount of electricity that will cost the person in $price\n    during $period.\n    \"\"\"\n    return (price * quantity) / (1 + math.exp(-price * period))\n\nif __name__ == \"__main__\":\n    print(electricityBill(0.15, 1000, 0))"
    },
    {
      "rank": 37,
      "score": 8.58352440728759,
      "candidate": "def calculate_electricity_bill(price_per_kwh, kWh):\n    \"\"\"\n    price_per_kwh: the price per kWh.\n    kWh: the number of kWh.\n    \"\"\"\n    return price_per_kwh * kWh\n\ndef test():\n    assert calculate_electricity_bill(0.5, 0) == 0.0\n    assert calculate_electricity_bill(0.5, 1) == 0.5\n    assert calculate_electricity_bill(0.5, 3) == 1.0\n    assert calculate_electricity_bill(0.5, 4) == 1.5\n    assert calculate_electricity_bill(0.5, 5) == 2.0\n    assert calculate_electricity_bill(0.5, 10) == 2.5\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 38,
      "score": 8.5456352139868,
      "candidate": "def calculate_electricity_bill(price, cost, number_of_months):\n    \"\"\"\n    Calculate electricity bill.\n    Input:\n        price = monthly price of electricity\n        cost = monthly cost of electricity\n        number_of_months = number of months of the year\n    Output:\n        Electricity bill in dollars\n    \"\"\"\n    electricity_bill = cost * number_of_months / 12\n    return electricity_bill\n\nif __name__ == \"__main__\":\n    print calculate_electricity_bill(10, 200, 4)\n    print calculate_electricity_bill(15, 200, 6)\n    print calculate_electricity_bill(25, 200, 8)"
    },
    {
      "rank": 39,
      "score": 8.544435964467734,
      "candidate": "def calculate_electricity_bill(price, amount):\n    \"\"\"\n    :type price: float\n    :type amount: float\n    :rtype: float\n    \"\"\"\n    return price * amount\n\nif __name__ == '__main__':\n    print(calculate_electricity_bill(1, 0.2))\n    print(calculate_electricity_bill(1, 0.5))\n    print(calculate_electricity_bill(1, 1))\n    print(calculate_electricity_bill(1, 2))\n    print(calculate_electricity_bill(1, 10))\n    print(calculate_electricity_bill(1, 100))"
    },
    {
      "rank": 40,
      "score": 8.537198205237443,
      "candidate": "# The cost of electricity is 4$ per kWh.\n# The cost of gas is 4$ per MWh.\n# The cost of electricity bills is $4 per kWh.\n# The cost of gas bills is $4 per MWh.\n\ndef electricity_bill(kWh, gas):\n    return kWh * 4\n\ndef gas_bill(MWh, kWh):\n    return MWh * 4\n\nif __name__ == '__main__':\n    kWh = int(input(\"Enter the kWh of electricity: \"))\n    gas = int(input(\"Enter the MWh of gas: \"))\n    print(electricity_bill(kWh, gas))\n    print(gas_bill(gas, kWh))"
    },
    {
      "rank": 41,
      "score": 8.512193880482934,
      "candidate": "def calculate_electricity_bill(price_per_kwh, number_of_kwhs):\n    \"\"\"\n    :type price_per_kwh: float\n    :type number_of_kwhs: int\n    :rtype: float\n    \"\"\"\n    return price_per_kwh * number_of_kwhs\n\nif __name__ == '__main__':\n    print(calculate_electricity_bill(10, 5))\n    print(calculate_electricity_bill(100, 5))\n    print(calculate_electricity_bill(1000, 5))\n    print(calculate_electricity_bill(1000, 10))\n    print(calculate_electricity_bill(1000, 50))\n    print(calculate_electricity_bill(1000, 500))\n    print(calculate_electricity_bill(1000, 5000))\n    print(calculate_electricity_bill(1000, 50000))\n    print(calculate_electricity_bill(1000, 500000))"
    },
    {
      "rank": 42,
      "score": 8.37888149952191,
      "candidate": "import math\n\ndef calculate_bill(price, cost, number_of_years):\n    \"\"\"\n    price -- price per 100 watt\n    cost -- cost per 100 watt\n    number_of_years -- number of years of usage\n    \"\"\"\n    bill = 0\n    for year in range(number_of_years):\n        bill += ((cost * 100) * math.pow(1 + (price / 100), year))\n    return bill\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    # Test 1\n    price = 0\n    cost = 0\n    number_of_years = 1\n    print calculate_bill(price, cost, number_of_years)\n\n    # Test 2\n    price = 10\n    cost = 100\n    number_of_years = 1\n    print calculate_bill(price, cost, number_of_years)\n\n    # Test 3\n    price = 10\n    cost = 100\n    number_of_years = 2\n    print calculate_bill(price, cost, number_of_years)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.360135409679444,
      "candidate": "# https://www.codeeval.com/open_challenges/110/\n\nimport math\n\ndef calculate_bill(kWh, month, day, month_day, hours):\n    \"\"\"\n    :param kWh:\n    :param month:\n    :param day:\n    :param month_day:\n    :param hours:\n    :return:\n    \"\"\"\n    if month == 1:\n        month_day = month_day + day\n        day = 1\n    else:\n        day = day + 1\n    bill = kWh * (month_day / (day * hours))\n    return bill\n\n\nif __name__ == '__main__':\n    with open(\"day_hours.txt\", \"r\") as f:\n        line = f.readline().strip()\n        hours = line.split(\" \")\n        kWh = float(hours[0])\n        month = int(hours[1])\n        day = int(hours[2])\n        month_day = int(hours[3])\n        bill = calculate_bill(kWh, month, day, month_day, hours)\n        print(bill)"
    },
    {
      "rank": 44,
      "score": 8.357864979206104,
      "candidate": "def electricity_bill(price, monthly_consumption, monthly_price, monthly_bill_rate):\n    \"\"\"\n    electricity_bill(price, monthly_consumption, monthly_price, monthly_bill_rate)\n    \n    Compute the electricity bill for a given price and consumption per month.\n    \"\"\"\n    total_bill = 0\n    for i in range(0, monthly_consumption):\n        total_bill += monthly_price * (i + 1)\n    return price * total_bill / monthly_consumption\n\nif __name__ == '__main__':\n    price = float(input(\"Enter the price of electricity: \"))\n    monthly_consumption = int(input(\"Enter the consumption of electricity per month: \"))\n    monthly_price = float(input(\"Enter the price of electricity per month: \"))\n    monthly_bill_rate = float(input(\"Enter the bill rate per month: \"))\n    print(electricity_bill(price, monthly_consumption, monthly_price, monthly_bill_rate))"
    },
    {
      "rank": 45,
      "score": 8.336621405927875,
      "candidate": "import math\n\n# your code goes here\n\n# calculate total\ndef calculate_total(electricity_bill):\n    return electricity_bill + electricity_bill *.05\n\n\n# calculate monthly total\ndef calculate_monthly_total(electricity_bill, month):\n    return electricity_bill + electricity_bill *.05 * month\n\n\n# calculate yearly total\ndef calculate_yearly_total(electricity_bill, year):\n    return electricity_bill + electricity_bill *.05 * 12 * year\n\n\n# calculate monthly and yearly total\ndef calculate_monthly_and_yearly_total(electricity_bill, month, year):\n    return electricity_bill + electricity_bill *.05 * month + electricity_bill *.05 * 12 * year\n\n\nif __name__ == '__main__':\n    print calculate_total(1.50)\n    print calculate_monthly_total(1.50, 2)\n    print calculate_yearly_total(1.50, 2000)\n    print calculate_monthly_and_yearly_total(1.50, 2, 2000)"
    },
    {
      "rank": 46,
      "score": 8.315465588575703,
      "candidate": "def calculate_electricity_bill(price_per_kwh, annual_consumption, kWh_consumed):\n    \"\"\"\n    :type price_per_kwh: float\n    :type annual_consumption: float\n    :type kWh_consumed: float\n    :rtype: float\n    \"\"\"\n    return annual_consumption * price_per_kwh * kWh_consumed\n\nif __name__ == '__main__':\n    price_per_kwh = float(input(\"Enter the price per kWh: \"))\n    annual_consumption = float(input(\"Enter the annual consumption: \"))\n    kwh_consumed = float(input(\"Enter the kWh consumed: \"))\n    print(calculate_electricity_bill(price_per_kwh, annual_consumption, kWh_consumed))"
    },
    {
      "rank": 47,
      "score": 8.314687490456954,
      "candidate": "class ElectricityBill(object):\n\n    def __init__(self, cost_per_kwh, monthly_consumption):\n        self.cost_per_kwh = cost_per_kwh\n        self.monthly_consumption = monthly_consumption\n\n    def calculate_electricity_bill(self):\n        return self.cost_per_kwh * self.monthly_consumption\n\n\nif __name__ == \"__main__\":\n    cost_per_kwh = float(input(\"Cost per kWh: \"))\n    monthly_consumption = float(input(\"Monthly consumption: \"))\n\n    electricity_bill = ElectricityBill(cost_per_kwh, monthly_consumption)\n    print(\"Electricity bill: %.2f\" % electricity_bill.calculate_electricity_bill())"
    },
    {
      "rank": 48,
      "score": 8.310275657847763,
      "candidate": "# https://www.codeeval.com/open_challenges/113/\n\ndef calculate_electricity_bill(kWh, month_of_year, day_of_month):\n    \"\"\"\n    :param kWh: An integer for kWh\n    :param month_of_year: An integer for month of year\n    :param day_of_month: An integer for day of month\n    :return: An integer for the calculated electricity bill\n    \"\"\"\n    return kWh / (month_of_year - 1) + (month_of_year - day_of_month) * 1.2\n\nif __name__ == '__main__':\n    import sys\n    f = open(sys.argv[1], 'r')\n    for line in f:\n        kWh = int(line.strip())\n        month_of_year = int(line.strip().split('=')[1])\n        day_of_month = int(line.strip().split('=')[2])\n        print calculate_electricity_bill(kWh, month_of_year, day_of_month)"
    },
    {
      "rank": 49,
      "score": 8.292017281577394,
      "candidate": "import math\n\ndef calculate_electricity_bill(electricity_usage, monthly_consumption, yearly_consumption):\n    \"\"\"\n    electricity_usage: float, the amount of energy you used in one month\n    monthly_consumption: float, the amount of energy you used in one month\n    yearly_consumption: float, the amount of energy you used in one year\n    returns: float, the amount of energy you used in one month\n    \"\"\"\n    if yearly_consumption <= 0:\n        raise ValueError(\"The yearly consumption must be greater than 0.\")\n    return electricity_usage * monthly_consumption / yearly_consumption\n\nif __name__ == \"__main__\":\n    print calculate_electricity_bill(8.0, 1.0, 1.0)"
    },
    {
      "rank": 50,
      "score": 8.27626561126718,
      "candidate": "#!/usr/bin/env python\n\n# Imports\nimport math\n\n# Constants\nk = 1000  # K\n\n# Calculate the electricity bill\ndef calculate_electricity_bill(price_per_kwh, number_of_kwh):\n    \"\"\"\n    Calculate the electricity bill for a given price per kWh and\n    number of kWh.\n\n    :param price_per_kwh: Price per kWh\n    :param number_of_kwh: Number of kWh\n    :return: Electricity Bill\n    \"\"\"\n    electricity_bill = 0\n    for k in range(0, number_of_kwh):\n        electricity_bill += price_per_kwh * k\n    return electricity_bill\n\nif __name__ == '__main__':\n    print calculate_electricity_bill(k, 10)"
    },
    {
      "rank": 51,
      "score": 8.26381091315501,
      "candidate": "def electricity_bill(price_per_kwh, bill_duration):\n    \"\"\"\n    :type price_per_kwh: float\n    :type bill_duration: int\n    :rtype: float\n    \"\"\"\n    return price_per_kwh * bill_duration\n\nif __name__ == '__main__':\n    price_per_kwh = float(input('Enter price per kWh: '))\n    bill_duration = int(input('Enter bill duration in days: '))\n    print('Your electricity bill is: {}'.format(electricity_bill(price_per_kwh, bill_duration)))"
    },
    {
      "rank": 52,
      "score": 8.254906284358777,
      "candidate": "def calculate_bill(price, price_time_period):\n    \"\"\"\n    :type price: float\n    :type price_time_period: int\n    :rtype: float\n    \"\"\"\n    # 1. Calculate the total cost\n    total_cost = price * price_time_period\n    # 2. Calculate the per month electricity\n    per_month_electricity = total_cost / price_time_period\n    # 3. Calculate the per day electricity\n    per_day_electricity = total_cost / price_time_period / 24\n    # 4. Calculate the total electricity\n    total_electricity = per_month_electricity + per_day_electricity\n    return total_electricity\n\n\nif __name__ == \"__main__\":\n    price = 2.99\n    price_time_period = 7\n    print calculate_bill(price, price_time_period)"
    },
    {
      "rank": 53,
      "score": 8.247869578158786,
      "candidate": "from math import sqrt\n\ndef calculate_electricity_bill(price_per_kwh, cost_per_kwh, cost_per_person,\n                               number_of_people, number_of_kwhs, number_of_people_per_kwh):\n    \"\"\"\n    For electric bill, we need to know:\n    cost_per_person - the cost of one person\n    cost_per_kwh - the cost of one kWh\n    number_of_people - the number of people who use the electricity\n    number_of_kwhs - the number of kWhs used\n    \"\"\"\n\n    electric_bill = cost_per_person * number_of_people\n    electric_bill += cost_per_kwh * number_of_kwhs\n    electric_bill += price_per_kwh * number_of_kwhs\n\n    return electric_bill\n\n\ndef calculate_electric_bill_with_no_people(price_per_kwh, cost_per_kwh,\n                                           cost_per_person,\n                                           number_of_kwhs, number_of_kwhs_per_person):\n    \"\"\"\n    For electric bill, we need to know:\n    cost_per_person - the cost of one person\n    cost_per_kwh - the cost of one kWh\n    number_of_people - the number of people who use the electricity\n    number_of_kwhs - the number of kWhs used\n    \"\"\"\n\n    electric_bill = cost_per_kwh * number_of_kwhs\n    electric_bill += cost_per_person * number_of_kwhs_per_person\n    electric_bill += price_per_kwh * number_of_kwhs_per_person\n\n    return electric_bill\n\n\ndef calculate_electric_bill_with_one_person(price_per_kwh, cost_per_kwh,\n                                            cost_per_person,\n                                            number_of_kwhs, number_of_people,\n                                            number_of_kwhs_per_person):\n    \"\"\"\n    For electric bill, we need to know:\n    cost_per_"
    },
    {
      "rank": 54,
      "score": 8.072552350752884,
      "candidate": "class Solution:\n    # @param {integer} cost\n    # @param {integer} price\n    # @return {integer}\n    def calculateElectricityBill(self, cost, price):\n        if cost <= 0 or price <= 0:\n            return 0\n        if cost == price:\n            return 1\n        else:\n            return cost / price\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.calculateElectricityBill(1, 1)\n    print s.calculateElectricityBill(5, 10)\n    print s.calculateElectricityBill(5, 4)\n    print s.calculateElectricityBill(10, 5)\n    print s.calculateElectricityBill(10, 10)\n    print s.calculateElectricityBill(10, 15)\n    print s.calculateElectricityBill(10, 20)"
    },
    {
      "rank": 55,
      "score": 8.048999408070562,
      "candidate": "from math import sqrt\n\ndef get_electricity_bill(price, per_kwh, bill_amount, month, year):\n    \"\"\"\n    Input:\n        price: price per kwh\n        per_kwh: per kwh\n        bill_amount: bill amount\n        month: month\n        year: year\n    Output:\n        Electricity bill\n    \"\"\"\n    if month < 7:\n        bill_amount = bill_amount * (1 + (month * 0.2) / 12)\n    else:\n        bill_amount = bill_amount * (1 + (month * 0.2) / 12) + (month * 0.2) / 12\n    return bill_amount * price * per_kwh\n\n\nif __name__ == '__main__':\n    bill_amount = input('Enter electricity bill amount: ')\n    price = input('Enter price per kwh: ')\n    per_kwh = input('Enter per kwh: ')\n    month = input('Enter month: ')\n    year = input('Enter year: ')\n    electricity_bill = get_electricity_bill(price, per_kwh, bill_amount, month, year)\n    print('Electricity bill is {0}'.format(electricity_bill))"
    },
    {
      "rank": 56,
      "score": 8.045514952304677,
      "candidate": "def calculate_bill(price, cost):\n    \"\"\"\n    Input price and cost, and return the electricity bill.\n    \"\"\"\n    if price < cost:\n        return 0\n    else:\n        return price - cost\n\nif __name__ == '__main__':\n    print calculate_bill(3, 0.3)\n    print calculate_bill(3, 0.15)\n    print calculate_bill(3, 0.2)\n    print calculate_bill(3, 0.35)\n    print calculate_bill(3, 0.4)"
    },
    {
      "rank": 57,
      "score": 7.950793200942879,
      "candidate": "def calculate_bill(price, period):\n    \"\"\"\n    Write a function to calculate electricity bill.\n\n    :param price: The price of electricity for the day.\n    :param period: The period of electricity.\n    :return: The electricity bill.\n    \"\"\"\n    return price * period\n\n\nif __name__ == '__main__':\n    # print calculate_bill(100, 1)\n    print calculate_bill(100, 2)"
    },
    {
      "rank": 58,
      "score": 3.796479619338843,
      "candidate": "# write your code below\ndef calculate_electricity_bill(electricity_consumption,\n                               electricity_price,\n                               bill_amount):\n    \"\"\"\n    :type electricity_consumption: float\n    :type electricity_price: float\n    :type bill_amount: float\n    :rtype: float\n    \"\"\"\n    return electricity_consumption * electricity_price * bill_amount"
    },
    {
      "rank": 59,
      "score": 3.6790615106681783,
      "candidate": "import math\n\ndef calculate_bill(price, quantity, period, days):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \n    Inputs:\n    price -- price per kilo watt hour\n    quantity -- amount of kwh in a period\n    period -- number of days in a period\n    days -- number of days in a year\n    \n    Output:\n    Electricity bill\n    \"\"\"\n    \n    # calculate the annual kWh\n    annual_kwh = float(quantity) / period\n    \n    # calculate the monthly kWh\n    monthly_kwh = annual_kwh / days\n    \n    # calculate the yearly kWh\n    yearly_kwh = monthly_kwh / period\n    \n    # calculate the yearly kWh\n    annual_kwh = yearly_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    annual_kwh = annual_kwh\n    \n    # calculate the annual kWh\n    ann"
    },
    {
      "rank": 60,
      "score": 3.6613557235803667,
      "candidate": "import math\nimport re\n\n# Input\n# Electricity Bill\n# Electricity Price\n# Electricity Consumption\n\ndef electricity_bill(price, consumption):\n    return round(((consumption * price) / 100), 2)\n\n# Output\n# Electricity Bill\n\ndef electricity_bill_output(price, consumption):\n    return 'Electricity Bill:'+ str(round(((consumption * price) / 100), 2))\n\n# Input\n# Electricity Price\n# Electricity Consumption\n\ndef electricity_price(price, consumption):\n    return round(((price * consumption) / 100), 2)\n\n# Output\n# Electricity Price\n\ndef electricity_price_output(price, consumption):\n    return 'Electricity Price:'+ str(round(((price * consumption) / 100), 2))\n\n# Input\n# Electricity Consumption\n\ndef electricity_consumption(consumption):\n    return round((consumption / 100), 2)\n\n# Output\n# Electricity Consumption\n\ndef electricity_consumption_output(consumption):\n    return 'Electricity Consumption:'+ str(round((consumption / 100), 2))\n\n# Input\n# Electricity Price\n# Electricity Price\n\ndef electricity_price_and_consumption(price, consumption):\n    return round(((price * consumption) / 100), 2)\n\n# Output\n# Electricity Price\n# Electricity Price\n\ndef electricity_price_and_consumption_output(price, consumption):\n    return 'Electricity Price:'+ str(round(((price * consumption) / 100), 2))\n\n# Input\n# Electricity Price\n# Electricity Price\n\ndef electricity_price_and_consumption_with_price_and_consumption(price, consumption):\n    return 'Electricity Price:'+ str(round(((price * consumption) / 100), 2))\n\n# Output\n# Electricity Price\n# Electricity Price\n\ndef electricity_price_and_consumption_with_price_and_consumption_output(price, consumption):\n    return 'Electricity Price:'+ str(round(((price * consumption) / 100), 2))\n\n# Input\n# Electricity Price\n# Electricity Price\n\ndef electricity_price_and_consumption_with_price_and_consumption_with_price(price, consumption):"
    },
    {
      "rank": 61,
      "score": 3.635494439238852,
      "candidate": "# pylint: disable=invalid-name\n\nimport math\n\n\"\"\"\nDefinition for an interval.\n\"\"\"\nclass Interval(object):\n    \"\"\"\n    Represents an interval.\n    \"\"\"\n    def __init__(self, start, end):\n        \"\"\"\n        Initialize an interval.\n        :param start: The start time of the interval.\n        :param end: The end time of the interval.\n        \"\"\"\n        self.start = start\n        self.end = end\n        \n    def __str__(self):\n        \"\"\"\n        String representation of an interval.\n        :return: A string representation of an interval.\n        \"\"\"\n        return '<Interval: %s, %s>' % (self.start, self.end)\n        \n    def __repr__(self):\n        \"\"\"\n        Represent an interval.\n        :return: A string representation of an interval.\n        \"\"\"\n        return str(self)\n\n\"\"\"\nDefinition for a date.\n\"\"\"\nclass Date(object):\n    \"\"\"\n    Represents a date.\n    \"\"\"\n    def __init__(self, year, month, day):\n        \"\"\"\n        Initialize a date.\n        :param year: The year of the date.\n        :param month: The month of the date.\n        :param day: The day of the date.\n        \"\"\"\n        self.year = year\n        self.month = month\n        self.day = day\n        \n    def __str__(self):\n        \"\"\"\n        String representation of a date.\n        :return: A string representation of a date.\n        \"\"\"\n        return '<Date: %s-%s-%s>' % (self.year, self.month, self.day)\n        \n    def __repr__(self):\n        \"\"\"\n        Represent a date.\n        :return: A string representation of a date.\n        \"\"\"\n        return str(self)\n\n\"\"\"\nDefinition for a monthly electricity bill.\n\"\"\"\nclass MonthlyElectricityBill(object):\n    \"\"\"\n    Represents a monthly electricity bill.\n    \"\"\"\n    def __init__(self, start, end, total_bill):\n        \"\"\"\n        Initialize a monthly electricity bill."
    },
    {
      "rank": 62,
      "score": 3.443329794673259,
      "candidate": "# import python libraries\nimport math\n\n# import external libraries\nimport pandas as pd\nimport numpy as np\n\n# import internal libraries\nfrom. import utility\nfrom. import electricity_bill\n\n\ndef calculate_electricity_bill(electricity_data, number_of_months=1):\n    \"\"\"\n    Calculate electricity bill for a given time period.\n\n    Parameters\n    ----------\n    electricity_data : DataFrame\n        DataFrame with the following columns:\n        - `electricity_price` (float)\n        - `electricity_consumed` (integer)\n        - `electricity_consumed_in_kw` (integer)\n        - `electricity_consumed_in_mwh` (integer)\n        - `electricity_consumed_in_kwh` (integer)\n\n    number_of_months : int, default: 1\n        Number of months for which to calculate electricity bill.\n\n    Returns\n    -------\n    electricity_bill : DataFrame\n        DataFrame with the following columns:\n        - `electricity_bill_kwh_yearly` (float)\n        - `electricity_bill_kwh_monthly` (float)\n        - `electricity_bill_mwh_yearly` (float)\n        - `electricity_bill_mwh_monthly` (float)\n\n    Examples\n    --------\n    >>> electricity_data = pd.DataFrame(\n   ...     {\n   ...         'electricity_price': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n   ...         'electricity_consumed': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100],\n   ...         'electricity_consumed_in_kw': [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n   ...         'electricity_consumed_in_mwh': [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n   ...         'electricity_consumed_in_kwh': [1000, 1000, 1000, 1000,"
    },
    {
      "rank": 63,
      "score": 3.4194844046626143,
      "candidate": "# calculate electricity bill\n# input: base price, number of years, unit\n# output: electricity bill\n\ndef electricity_bill(base_price, years, unit):\n    return base_price * years * unit\n\n# calculate total electricity bill for a list of electricity bills\n# input: electricity bills\n# output: total electricity bill\n\ndef total_electricity_bill(electricity_bills):\n    return sum(electricity_bills)\n\n# calculate total electricity bill for a list of electricity bills\n# input: electricity bills\n# output: total electricity bill\n\ndef total_electricity_bill(electricity_bills):\n    return sum(electricity_bills)\n\n# calculate total electricity bill for a list of electricity bills\n# input: electricity bills\n# output: total electricity bill\n\ndef total_electricity_bill(electricity_bills):\n    return sum(electricity_bills)\n\n# calculate total electricity bill for a list of electricity bills\n# input: electricity bills\n# output: total electricity bill\n\ndef total_electricity_bill(electricity_bills):\n    return sum(electricity_bills)"
    },
    {
      "rank": 64,
      "score": 3.353418076881346,
      "candidate": "# Import the module\nimport math\n\n# Define the function\ndef calculate_electricity_bill(year, month, day, cost_per_kwh, cost_per_month):\n    \"\"\"\n    Calculate electricity bill.\n    \n    Arguments:\n        year: The year.\n        month: The month.\n        day: The day.\n        cost_per_kwh: The cost per kWh.\n        cost_per_month: The cost per month.\n    \n    Returns:\n        The electricity bill.\n    \"\"\"\n    if month == 1:\n        return (cost_per_kwh * day)\n    elif month == 2:\n        return (cost_per_kwh * day * 2)\n    elif month == 3:\n        return (cost_per_kwh * day * 3)\n    elif month == 4:\n        return (cost_per_kwh * day * 4)\n    elif month == 5:\n        return (cost_per_kwh * day * 5)\n    elif month == 6:\n        return (cost_per_kwh * day * 6)\n    elif month == 7:\n        return (cost_per_kwh * day * 7)\n    elif month == 8:\n        return (cost_per_kwh * day * 8)\n    elif month == 9:\n        return (cost_per_kwh * day * 9)\n    elif month == 10:\n        return (cost_per_kwh * day * 10)\n    elif month == 11:\n        return (cost_per_kwh * day * 11)\n    elif month == 12:\n        return (cost_per_kwh * day * 12)\n    else:\n        raise ValueError('Invalid month.')\n\n# Test the function\nif __name__ == '__main__':\n    # Test the function with the example\n    print('Test the function with the example')\n    print('Year:', calculate_electricity_bill(2017, 1, 1, 100, 1000))\n    print('Month:', calculate_electricity_bill(2017, 1, 1, 100, 1000))\n    print('Day:', calculate_electricity_bill(2017,"
    },
    {
      "rank": 65,
      "score": 3.3175406293980263,
      "candidate": "def electricity_bill(year, month, day):\n    \"\"\"\n    electricity_bill(year, month, day) -> float\n    \n    electricity_bill returns the electricity bill for the given year, month and day.\n    \"\"\"\n    \n    if month == 1:\n        if day == 1:\n            return 1.8\n        elif day == 2:\n            return 3.8\n        elif day == 3:\n            return 5.8\n        elif day == 4:\n            return 8.8\n        elif day == 5:\n            return 11.8\n        elif day == 6:\n            return 14.8\n        elif day == 7:\n            return 17.8\n        elif day == 8:\n            return 21.8\n        elif day == 9:\n            return 25.8\n        elif day == 10:\n            return 29.8\n        elif day == 11:\n            return 33.8\n        elif day == 12:\n            return 37.8\n        elif day == 13:\n            return 42.8\n        elif day == 14:\n            return 47.8\n        elif day == 15:\n            return 53.8\n        elif day == 16:\n            return 58.8\n        elif day == 17:\n            return 64.8\n        elif day == 18:\n            return 70.8\n        elif day == 19:\n            return 76.8\n        elif day == 20:\n            return 82.8\n        elif day == 21:\n            return 88.8\n        elif day == 22:\n            return 94.8\n        elif day == 23:\n            return 100.8\n        elif day == 24:\n            return 106.8\n        elif day == 25:\n            return 112.8\n        elif day == 26:\n            return 118.8\n        elif day == 27:\n            return 124.8\n        elif day == 28:\n            return 130.8\n        elif day == 29:\n            return 136.8\n        elif day == 30:\n            return 143.8\n        elif day == 31:\n            return 149.8\n        elif day == 32:\n            return 155.8"
    },
    {
      "rank": 66,
      "score": 3.2785060713832976,
      "candidate": "import math\n\ndef calculate_electricity_bill(price, period):\n    \"\"\"\n    Calculate the electricity bill.\n\n    Inputs:\n    price -- the price of electricity\n    period -- the period of electricity\n    Outputs:\n    electricity_bill -- the amount of electricity bill\n    \"\"\"\n    electricity_bill = 0\n    for i in range(0, period):\n        electricity_bill += price\n    return electricity_bill\n\ndef test_calculate_electricity_bill():\n    assert calculate_electricity_bill(10000, 12) == 12500\n\nif __name__ == '__main__':\n    test_calculate_electricity_bill()"
    },
    {
      "rank": 67,
      "score": 3.2630208042015734,
      "candidate": "def calculate_bill(price_per_kwh, kwh_consumed, total_kwh_produced, annual_consumption, price_per_kwh_month):\n    \"\"\"\n    :type price_per_kwh: float\n    :type kwh_consumed: int\n    :type total_kwh_produced: int\n    :type annual_consumption: float\n    :type price_per_kwh_month: float\n    :rtype: float\n    \"\"\"\n    return annual_consumption * price_per_kwh * kwh_consumed / total_kwh_produced\n\n\ndef main():\n    \"\"\"\n    Sample Input\n    1\n    2\n    4\n    0.1\n    \"\"\"\n    price_per_kwh = float(input())\n    kwh_consumed = int(input())\n    total_kwh_produced = int(input())\n    annual_consumption = float(input())\n    price_per_kwh_month = float(input())\n\n    bill = calculate_bill(price_per_kwh, kwh_consumed, total_kwh_produced, annual_consumption, price_per_kwh_month)\n\n    print(\"Bill is {0:.2f}\".format(bill))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 68,
      "score": 3.1615501478886388,
      "candidate": "def calculate_electricity_bill(price, monthly_consumption, monthly_price):\n    \"\"\"\n    :type price: float\n    :type monthly_consumption: float\n    :type monthly_price: float\n    :rtype: float\n    \"\"\"\n    return monthly_price * monthly_consumption\n\nif __name__ == '__main__':\n    print calculate_electricity_bill(10000, 0.12, 0.01)"
    },
    {
      "rank": 69,
      "score": 3.1393561068397617,
      "candidate": "def electricity_bill(kWh, day):\n    \"\"\"\n    Calculate electricity bill for given kWh and day.\n\n    :param kWh: total kWh charged\n    :param day: day of the year\n    :return: electricity bill\n    \"\"\"\n    return kWh / day\n\ndef test_electricity_bill():\n    assert electricity_bill(30, 10) == 11.5\n    assert electricity_bill(50, 10) == 11.5\n    assert electricity_bill(60, 10) == 11.5\n    assert electricity_bill(80, 10) == 11.5\n    assert electricity_bill(100, 10) == 11.5\n\nif __name__ == '__main__':\n    test_electricity_bill()"
    },
    {
      "rank": 70,
      "score": 3.1122537670373522,
      "candidate": "# Importing libraries\nimport math\n\n# Calculating electricity bill\ndef electricity_bill(electricity_kwh, cost_per_kwh, cost_per_month):\n    \"\"\"\n    Calculating electricity bill.\n\n    Electricity bill is calculated as follows:\n\n    E_bill = cost_per_kwh * electricity_kwh\n\n    Inputs:\n    electricity_kwh - number of kWh of electricity purchased\n    cost_per_kwh - cost per kWh\n    cost_per_month - cost per month\n\n    Outputs:\n    E_bill - electricity bill\n    \"\"\"\n    E_bill = cost_per_kwh * electricity_kwh\n    return E_bill\n\n# Calculating electricity bill\ndef electricity_bill_python(electricity_kwh, cost_per_kwh, cost_per_month):\n    \"\"\"\n    Calculating electricity bill.\n\n    Electricity bill is calculated as follows:\n\n    E_bill = cost_per_kwh * electricity_kwh\n\n    Inputs:\n    electricity_kwh - number of kWh of electricity purchased\n    cost_per_kwh - cost per kWh\n    cost_per_month - cost per month\n\n    Outputs:\n    E_bill - electricity bill\n    \"\"\"\n    E_bill = cost_per_kwh * electricity_kwh\n    return E_bill\n\n# Calculating electricity bill\ndef electricity_bill_python_2(electricity_kwh, cost_per_kwh, cost_per_month):\n    \"\"\"\n    Calculating electricity bill.\n\n    Electricity bill is calculated as follows:\n\n    E_bill = cost_per_kwh * electricity_kwh\n\n    Inputs:\n    electricity_kwh - number of kWh of electricity purchased\n    cost_per_kwh - cost per kWh\n    cost_per_month - cost per month\n\n    Outputs:\n    E_bill - electricity bill\n    \"\"\"\n    E_bill = cost_per_kwh * electricity_kwh\n    return E_bill\n\n# Calculating electricity bill\ndef electricity_bill_python_3(electricity_kwh, cost_per_kwh, cost_per_month):\n    \"\"\"\n    Calculating electricity"
    },
    {
      "rank": 71,
      "score": 3.089811345852045,
      "candidate": "import math\n\ndef calculate_electricity_bill(price, quantity):\n    \"\"\"\n    :type price: float\n    :type quantity: int\n    :rtype: float\n    \"\"\"\n    # calculate monthly price\n    monthly_price = price * quantity\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price = monthly_price * 0.06\n    # calculate monthly price\n    monthly_price"
    },
    {
      "rank": 72,
      "score": 3.084650331423723,
      "candidate": "import math\n\ndef calculate_electricity_bill(price_per_kwh, annual_consumption, number_of_years):\n    \"\"\"\n    Calculate the electricity bill.\n    :param price_per_kwh: the price per kwh\n    :param annual_consumption: the annual consumption\n    :param number_of_years: the number of years\n    :return: the electricity bill\n    \"\"\"\n    return annual_consumption * price_per_kwh ** number_of_years\n\nif __name__ == '__main__':\n    price_per_kwh = float(input(\"Price per kW: \"))\n    annual_consumption = float(input(\"Annual consumption: \"))\n    number_of_years = int(input(\"Number of years: \"))\n\n    electricity_bill = calculate_electricity_bill(price_per_kwh, annual_consumption, number_of_years)\n    print(\"Electricity bill is %.2f\" % electricity_bill)"
    },
    {
      "rank": 73,
      "score": 3.0476967135752426,
      "candidate": "def calc_electricity_bill(price_per_kwh, n, days):\n    \"\"\"\n    Input\n    price_per_kwh: price per kWh\n    n: number of energy sources\n    days: number of days in a year\n    Output\n    electricity_bill: the total electricity bill\n    \"\"\"\n    electricity_bill = 0\n    for i in range(days):\n        electricity_bill += price_per_kwh * n\n    return electricity_bill\n\ndef test_calc_electricity_bill():\n    assert calc_electricity_bill(10, 3, 365) == 10 * 3\n    assert calc_electricity_bill(0, 1, 365) == 0\n    assert calc_electricity_bill(5, 2, 365) == 5 * 3\n    assert calc_electricity_bill(10, 2, 365) == 10 * 3\n\nif __name__ == '__main__':\n    test_calc_electricity_bill()"
    },
    {
      "rank": 74,
      "score": 3.0417433462196573,
      "candidate": "# import time\n# from datetime import datetime\n# from datetime import timedelta\n# from math import ceil\n# from decimal import Decimal\n# import random\n\n\ndef electricity_bill(month_start, month_end, month_days, per_day, per_month):\n    \"\"\"\n    electricity_bill(month_start, month_end, month_days, per_day, per_month)\n    Calculate electricity bill of a month.\n    month_start: start of the month.\n    month_end: end of the month.\n    month_days: number of days in the month.\n    per_day: price of electricity per day.\n    per_month: price of electricity per month.\n    return: the total electricity bill of a month.\n    \"\"\"\n    total_bill = Decimal(0)\n\n    for day in range(1, month_days + 1):\n        total_bill += Decimal(per_day)\n\n    for month in range(month_start, month_end):\n        total_bill += Decimal(per_month) * Decimal(month)\n\n    return total_bill\n\n\ndef test_electricity_bill():\n    \"\"\"\n    test electricity_bill()\n    \"\"\"\n    # month_start = 1\n    # month_end = 12\n    # month_days = 31\n    # per_day = 0.5\n    # per_month = 2.0\n    # total_bill = electricity_bill(month_start, month_end, month_days, per_day, per_month)\n    # print total_bill\n\n    # month_start = 1\n    # month_end = 12\n    # month_days = 31\n    # per_day = 0.5\n    # per_month = 2.0\n    # total_bill = electricity_bill(month_start, month_end, month_days, per_day, per_month)\n    # print total_bill\n\n    # month_start = 1\n    # month_end = 12\n    # month_days = 31\n    # per_day = 0.5\n    # per_month = 2.0\n    # total_bill = electricity_bill(month_start, month_end, month_days"
    },
    {
      "rank": 75,
      "score": 3.039457133910266,
      "candidate": "# I/O\nimport csv\n\n# Library\nimport numpy as np\n\n# Constants\nONE_DAY = 24 * 60 * 60\n\ndef calculate_electricity_bill(price, monthly_consumption, monthly_production,\n                               price_per_kwh, kWh_per_month):\n    \"\"\"\n    Calculate electricity bill.\n\n    :param price: The price of electricity per kwh.\n    :type price: float\n    :param monthly_consumption: The monthly consumption of electricity.\n    :type monthly_consumption: float\n    :param monthly_production: The monthly production of electricity.\n    :type monthly_production: float\n    :param price_per_kwh: The price per kwh of electricity.\n    :type price_per_kwh: float\n    :param kWh_per_month: The kWh per month of electricity.\n    :type kWh_per_month: float\n    :return: The electricity bill in cents.\n    :rtype: float\n    \"\"\"\n    electricity_bill = 0.0\n    if monthly_consumption < 0:\n        electricity_bill = 0.0\n    elif monthly_consumption == 0:\n        electricity_bill = 0.0\n    else:\n        electricity_bill = (monthly_consumption * price_per_kwh) / \\\n            (monthly_consumption + monthly_production) * kWh_per_month\n    return electricity_bill\n\n\ndef main():\n    \"\"\"\n    Main program function.\n    \"\"\"\n    filename = 'electricity_bill_data.csv'\n    with open(filename, 'r') as csvfile:\n        electricity_bill_reader = csv.reader(csvfile)\n        electricity_bill = 0.0\n        for row in electricity_bill_reader:\n            price = row[0]\n            monthly_consumption = row[1]\n            monthly_production = row[2]\n            price_per_kwh = row[3]\n            kwh_per_month = row[4]\n            electricity_bill = calculate_electricity_bill(price,\n                                                          monthly_consumption,"
    },
    {
      "rank": 76,
      "score": 3.029037128015807,
      "candidate": "def calculate_electricity_bill(price, period, days):\n    \"\"\"\n    :type price: float\n    :type period: int\n    :type days: int\n    :rtype: float\n    \"\"\"\n    #TODO: Implement this method.\n    return 0"
    },
    {
      "rank": 77,
      "score": 3.0021987863562583,
      "candidate": "def calculate_bill(electricity_usage, price):\n    \"\"\"\n    Input: \n        electricity_usage: A list of the amount of electricity used in units of \n            people per day.\n        price: The hourly rate of electricity in dollars per hour.\n    Output: \n        A float representing the amount of money that would be needed to \n            consume electricity for the given number of people per day.\n    \"\"\"\n    return electricity_usage * price\n\nif __name__ == '__main__':\n    electricity_usage = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0]\n    price = 0.01\n    print calculate_bill(electricity_usage, price)"
    },
    {
      "rank": 78,
      "score": 2.9941961933626886,
      "candidate": "# Your code here.\n\ndef calculate_electricity_bill(monthly_consumption, monthly_price,\n                               annual_consumption, annual_price):\n    \"\"\"\n    electricity_bill(monthly_consumption, monthly_price, annual_consumption, annual_price) -> float\n    Input: month consumption, monthly price, annual consumption and annual price\n    Output: electricity bill\n    \"\"\"\n    # Your code here.\n\n    # calculate monthly electricity bill\n    monthly_bill = monthly_consumption * monthly_price\n    # calculate annual electricity bill\n    annual_bill = annual_consumption * annual_price\n\n    return monthly_bill + annual_bill\n\n\n\nif __name__ == '__main__':\n    print calculate_electricity_bill(4, 10, 3, 20)"
    },
    {
      "rank": 79,
      "score": 2.9690356477204563,
      "candidate": "# Write your code below\n\n\ndef electricity_bill(kWh, month, year, day, hour):\n    \"\"\"\n    :type kWh: int\n    :type month: int\n    :type year: int\n    :type day: int\n    :type hour: int\n    :rtype: float\n    \"\"\"\n    return kWh * month / 365.0\n\n\n# Your code below:\n\nelectricity_bill(1, 1, 2015, 1, 1)\n\nprint electricity_bill(1, 1, 2015, 1, 1)"
    },
    {
      "rank": 80,
      "score": 2.9405463504963905,
      "candidate": "# import the function\nfrom math import floor\n\n# the input should be a list of tuples\n# each tuple is of the form (month, amount of electricity sold, amount of electricity purchased)\n# the amount of electricity sold and purchased should be integers\n# if the amount of electricity sold is less than the amount of electricity purchased, the amount of electricity purchased should be 0\n# if the amount of electricity sold is equal to the amount of electricity purchased, the amount of electricity purchased should be the same as the amount of electricity purchased\n# if the amount of electricity sold is greater than the amount of electricity purchased, the amount of electricity purchased should be the same as the amount of electricity purchased\ndef calculate_electricity_bill(electricity_sold, electricity_purchased):\n    # calculate the number of months\n    months = int(floor(electricity_sold / electricity_purchased))\n    # calculate the electricity bill\n    electricity_bill = electricity_purchased * months\n    # calculate the monthly electricity bill\n    electricity_bill_monthly = electricity_bill / months\n    # return the electricity bill\n    return electricity_bill, electricity_bill_monthly\n\n# test cases\n# electricity_sold = [('January', 12), ('February', 25), ('March', 30), ('April', 22), ('May', 20), ('June', 15), ('July', 18)]\n# electricity_purchased = [('January', 12), ('February', 25), ('March', 30), ('April', 22), ('May', 20), ('June', 15), ('July', 18)]\n# electricity_sold = [('January', 12), ('February', 25), ('March', 30), ('April', 22), ('May', 20), ('June', 15), ('July', 18)]\n# electricity_purchased = [('January', 12), ('February', 25), ('March', 30), ('April', 22), ('May', 20), ('June', 15), ('July', 18)]\n# electricity_sold = [('January', 12), ('February', 25), ('March', 30), ('April', 22), ('May', 20), ('June', 15), ('July', 18)]\n# electricity_purchased = [('January', 12), ('February', 25), ('March', 30), ('April', 22), ('May', 20), ('June', 15"
    },
    {
      "rank": 81,
      "score": 2.9201666400345587,
      "candidate": "# The input is an integer N representing the number of years, followed by N space-separated integers representing the amounts of energy in each year.\n\n# Example 1:\n# Input: \"3 2 1\"\n# Output: \"$2.00 $0.50 $0.10\"\n# Example 2:\n# Input: \"5 1 2 3 4 5\"\n# Output: \"$2.00 $0.30 $0.25 $0.35 $0.20 $0.10\"\n\n# Note:\n# Each amount is guaranteed to be greater than 0.\n\n# Companies\n# Amazon\n# Related Topics\n# Math\n# Similar Questions\n# Energy Bill\n#\n\nclass Solution(object):\n    def calculateElectricityBill(self, cost):\n        \"\"\"\n        :type cost: str\n        :rtype: str\n        \"\"\"\n        cost = cost.split()\n        cost = map(int, cost)\n        total = 0\n        for i in xrange(len(cost)):\n            total += cost[i] * (i + 1)\n        return \"$%.2f\" % (total / 12)\n\n    # @return a string\n    def calculateElectricityBill2(self, cost):\n        cost = cost.split()\n        cost = map(int, cost)\n        total = 0\n        for i in xrange(len(cost)):\n            total += cost[i] * (i + 1)\n        return \"$%.2f\" % (total / 12)"
    },
    {
      "rank": 82,
      "score": 2.90554108822987,
      "candidate": "def electricity_bill(electricity_kwh, bill_day, bill_month, bill_year):\n    \"\"\"\n    Electricity bill is calculated as follows.\n    \n    Electricity bill is calculated as follows.\n    \n    For the given inputs, calculate the total bill in dollars.\n    \"\"\"\n\n    total_bill = electricity_kwh * bill_month * bill_year\n\n    return total_bill\n\n\nif __name__ == \"__main__\":\n    electricity_kwh = int(input(\"Enter electricity consumption in kWh: \"))\n    bill_day = int(input(\"Enter the day of the bill: \"))\n    bill_month = int(input(\"Enter the month of the bill: \"))\n    bill_year = int(input(\"Enter the year of the bill: \"))\n    print(\"The total bill is: $%.2f\" % electricity_bill(electricity_kwh, bill_day, bill_month, bill_year))"
    },
    {
      "rank": 83,
      "score": 2.874571687588891,
      "candidate": "# In[ ]:\n\n# https://www.reddit.com/r/dailyprogrammer/comments/3fqe7x/20151016_challenge_210_easy_electricity_bill/\n\n# In[ ]:\n\n# TODO: Write your code below\n# Input:\n#    month: A month number, 1 <= month <= 12\n#    day: A day number, 1 <= day <= 31\n#    hour: A hour number, 1 <= hour <= 23\n#    minute: A minute number, 0 <= minute <= 59\n#    second: A second number, 0 <= second <= 59\n# Output:\n#    A dictionary of electricity bill data.\n#    'bill': A float value of the electricity bill, 1.0 <= bill <= 11.999\n#    'bill_unit': A string of the unit of the electricity bill, e.g. 'kWh'\n#    'bill_day': The number of days, 1 <= bill_day <= 31\n#    'bill_month': The number of months, 1 <= bill_month <= 12\n#    'bill_year': The number of years, 1 <= bill_year <= 9999\n\n# In[ ]:\n\n# TODO: Copy-paste the following code\n\n# Output:\n#    A dictionary of electricity bill data.\n#    'bill': A float value of the electricity bill, 1.0 <= bill <= 11.999\n#    'bill_unit': A string of the unit of the electricity bill, e.g. 'kWh'\n#    'bill_day': The number of days, 1 <= bill_day <= 31\n#    'bill_month': The number of months, 1 <= bill_month <= 12\n#    'bill_year': The number of years, 1 <= bill_year <= 9999\n\n# In[ ]:\n\n# TODO: Write your code below\n# Input:\n#    month: A month number, 1 <= month <= 12\n#    day: A day number, 1 <= day <= 31\n#    hour: A hour number, 1 <= hour <= 23\n#    minute: A minute number, 0 <= minute <= 59\n#    second: A second number, 0 <= second <= 59\n# Output:\n#    A dictionary of electricity bill data."
    },
    {
      "rank": 84,
      "score": 2.8591052769629597,
      "candidate": "from collections import deque\n\nclass ElectricityBill(object):\n    \"\"\"\n    Calculate electricity bill for a series of electricity consumption.\n    \"\"\"\n    def __init__(self, consumption):\n        \"\"\"\n        @param consumption: a list of tuples (period, consumption)\n        \"\"\"\n        self.consumption = consumption\n        self.total = 0\n        self.period = 0\n        self.last_consumption = 0\n        self.total_consumption = 0\n        self.total_period = 0\n        self.total_consumption_last_period = 0\n        self.total_consumption_last_period_period = 0\n        self.total_consumption_last_period_consumption = 0\n\n    def calculate_electricity_bill(self):\n        \"\"\"\n        Calculate the electricity bill for the consumption.\n        \"\"\"\n        for period, consumption in self.consumption:\n            if consumption > 0:\n                self.total += consumption\n                self.total_consumption += consumption\n                self.total_consumption_last_period += consumption\n                self.total_consumption_last_period_consumption += consumption\n                self.total_consumption_last_period_period += consumption\n                self.period = period\n            else:\n                break\n        if consumption > 0:\n            self.total_consumption_last_period_consumption = consumption\n            self.total_consumption_last_period_period = period\n            self.total_consumption_last_period = consumption\n            self.total_consumption += consumption\n        return self.total\n\n    def calculate_bill_for_period(self, period):\n        \"\"\"\n        Calculate the electricity bill for the consumption for a period.\n        \"\"\"\n        self.period = period\n        self.total_consumption_last_period = 0\n        self.total_consumption_last_period_period = 0\n        self.total_consumption_last_period_consumption = 0\n        self.total_consumption = 0\n        self.total_consumption_last_period_consumption = 0\n        self.total_consumption_last_period_period = 0\n        self.total_consumption_last_period = 0\n        self"
    },
    {
      "rank": 85,
      "score": 2.831393494153172,
      "candidate": "# import the necessary packages\nimport math\nimport datetime\nimport pandas as pd\n\n# import the function to calculate the day\nfrom day_tracker import day\n\n\n# this is the function to calculate the bill\ndef electricity_bill(price, period, date=None):\n    \"\"\"\n    :param price: the price of electricity\n    :type price: float\n    :param period: the period of the electricity\n    :type period: str\n    :param date: the start date of the electricity\n    :type date: str\n    :return: the electricity bill\n    :rtype: float\n    \"\"\"\n\n    # check the date is given\n    if date is None:\n        date = datetime.datetime.now()\n\n    # calculate the total electricity used\n    total_electricity = price * period\n\n    # calculate the day electricity used\n    electricity_used = day(date, total_electricity)\n\n    # calculate the electricity bill\n    bill = electricity_used / period\n\n    # return the electricity bill\n    return bill\n\n\n# testing the function\nif __name__ == '__main__':\n    # calculate the electricity bill\n    print(electricity_bill(3.5,'month'))\n    print(electricity_bill(3.5, 'year'))\n    print(electricity_bill(3.5, 'year'))\n    print(electricity_bill(3.5,'month'))\n    print(electricity_bill(3.5,'month'))\n    print(electricity_bill(3.5,'month'))"
    },
    {
      "rank": 86,
      "score": 2.7997362059647894,
      "candidate": "import math\n\n\"\"\"\nThe input is a list of tuples (price, quantity).\n\nFor example:\n[(10, 10), (15, 10), (10, 20)]\n\nThe output is the total price for all the electricity.\n\nYou have to return a float.\n\nExample:\n\nelectricity_bill( [(10, 10), (15, 10), (10, 20)]) -> 24.5\n\nNote:\n\nThe price and quantity are integers.\n\"\"\"\ndef electricity_bill(tuples):\n    price_sum = 0\n    quantity_sum = 0\n\n    for price, quantity in tuples:\n        price_sum += price * quantity\n        quantity_sum += quantity\n\n    return price_sum / quantity_sum\n\n\"\"\"\nThe input is a list of tuples (price, quantity).\n\nFor example:\n[(10, 10), (15, 10), (10, 20)]\n\nThe output is the total price for all the electricity.\n\nYou have to return a float.\n\nExample:\n\nelectricity_bill( [(10, 10), (15, 10), (10, 20)]) -> 24.5\n\nNote:\n\nThe price and quantity are integers.\n\"\"\"\ndef electricity_bill2(tuples):\n    price_sum = 0\n    quantity_sum = 0\n\n    for price, quantity in tuples:\n        price_sum += price * quantity\n        quantity_sum += quantity\n\n    return price_sum / quantity_sum\n\n\"\"\"\nThe input is a list of tuples (price, quantity).\n\nFor example:\n[(10, 10), (15, 10), (10, 20)]\n\nThe output is the total price for all the electricity.\n\nYou have to return a float.\n\nExample:\n\nelectricity_bill( [(10, 10), (15, 10), (10, 20)]) -> 24.5\n\nNote:\n\nThe price and quantity are integers.\n\"\"\"\ndef electricity_bill3(tuples):\n    price_sum = 0\n    quantity_sum = 0\n\n    for price, quantity in tuples:\n        price_sum += price * quantity\n        quantity_sum += quantity\n\n    return price_sum / quantity_sum\n\n\"\"\""
    },
    {
      "rank": 87,
      "score": 2.7981260140479707,
      "candidate": "import math\n\ndef calculate_electricity_bill(electricity_consumption, total_consumption, day_length):\n    \"\"\"\n    :type electricity_consumption: int\n    :type total_consumption: int\n    :type day_length: int\n    :rtype: float\n    \"\"\"\n    return electricity_consumption * (total_consumption / day_length)\n\nif __name__ == '__main__':\n    print calculate_electricity_bill(2, 3, 5)"
    },
    {
      "rank": 88,
      "score": 2.784244471258649,
      "candidate": "def electricity_bill(kWh, monthly_consumption, annual_consumption):\n    \"\"\"\n    Electricity bill is the sum of kWh for the month and the annual consumption.\n\n    kWh: integer, the sum of kWh for the month and the annual consumption.\n    monthly_consumption: integer, the annual consumption for the month.\n    annual_consumption: integer, the annual consumption for the entire life.\n\n    Return a float.\n\n    \"\"\"\n    return kWh + monthly_consumption + annual_consumption"
    },
    {
      "rank": 89,
      "score": 2.758216362426382,
      "candidate": "class ElectricityBill:\n    \"\"\"\n    Class to store the electricity bill data.\n    \"\"\"\n    def __init__(self, charge, kwh):\n        self.charge = charge\n        self.kwh = kwh\n\n    def get_charge(self):\n        \"\"\"\n        Get the charge of the electricity bill.\n        \"\"\"\n        return self.charge\n\n    def get_kwh(self):\n        \"\"\"\n        Get the kwh of the electricity bill.\n        \"\"\"\n        return self.kwh\n\n    def get_kwh_per_kwh(self):\n        \"\"\"\n        Get the kwh per kwh of the electricity bill.\n        \"\"\"\n        return self.kwh / self.kwh\n\n    def get_kwh_per_charge(self):\n        \"\"\"\n        Get the kwh per charge of the electricity bill.\n        \"\"\"\n        return self.kwh / self.charge\n\n    def get_kwh_per_kwh_per_charge(self):\n        \"\"\"\n        Get the kwh per kwh per charge of the electricity bill.\n        \"\"\"\n        return self.kwh_per_kwh / self.charge\n\n    def get_kwh_per_kwh_per_charge_per_charge(self):\n        \"\"\"\n        Get the kwh per kwh per charge per charge of the electricity bill.\n        \"\"\"\n        return self.kwh_per_kwh_per_charge / self.charge\n\ndef get_electricity_bill(charge, kwh):\n    \"\"\"\n    Get the electricity bill data.\n    \"\"\"\n    return ElectricityBill(charge, kwh)"
    },
    {
      "rank": 90,
      "score": 2.7412661567413594,
      "candidate": "class Solution:\n    def calculateElectricityBill(self, cost):\n        \"\"\"\n        :type cost: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        total = 0\n        for cost_i in cost:\n            total += cost_i\n        \n        return total"
    },
    {
      "rank": 91,
      "score": 2.6904669903902754,
      "candidate": "import math\n\ndef calculate_electricity_bill(electricity_price, monthly_consumption,\n                              total_consumption):\n    \"\"\"\n    electricity_price: float\n    monthly_consumption: float\n    total_consumption: float\n    \"\"\"\n    # calculate the daily electricity bill\n    total_bill = electricity_price * monthly_consumption\n    # calculate the total consumption\n    total_consumption = total_consumption + total_bill\n    # calculate the monthly electricity bill\n    total_monthly_bill = total_consumption / total_consumption\n    # calculate the yearly electricity bill\n    total_yearly_bill = total_monthly_bill * 12\n    return total_yearly_bill\n\nif __name__ == '__main__':\n    electricity_price = float(input('What is the electricity price? '))\n    monthly_consumption = float(input('What is the monthly consumption? '))\n    total_consumption = float(input('What is the total consumption? '))\n    total_bill = calculate_electricity_bill(electricity_price,\n                                            monthly_consumption,\n                                            total_consumption)\n    print('The total electricity bill is {0}'.format(total_bill))"
    },
    {
      "rank": 92,
      "score": 2.6391364650142655,
      "candidate": "import math\n\n\"\"\"\nCalculate electricity bill.\n\"\"\"\ndef calculate_electricity_bill(price_per_kwh, cost_per_month):\n    \"\"\"\n    Calculate electricity bill.\n    \"\"\"\n    monthly_cost = cost_per_month * 12\n    kwh_consumed = price_per_kwh * 12\n    return monthly_cost - kwh_consumed\n\n\"\"\"\nWrite a function to calculate gas usage.\n\"\"\"\ndef calculate_gas_usage(price_per_kwh, cost_per_month):\n    \"\"\"\n    Calculate gas usage.\n    \"\"\"\n    monthly_cost = cost_per_month * 12\n    kwh_consumed = price_per_kwh * 12\n    return monthly_cost - kwh_consumed\n\n\"\"\"\nWrite a function to calculate gas price.\n\"\"\"\ndef calculate_gas_price(electric_price, gas_consumption):\n    \"\"\"\n    Calculate gas price.\n    \"\"\"\n    return gas_consumption + electric_price\n\n\"\"\"\nWrite a function to calculate electricity price.\n\"\"\"\ndef calculate_electricity_price(gas_price, gas_consumption, electricity_price):\n    \"\"\"\n    Calculate electricity price.\n    \"\"\"\n    return gas_price + electricity_price\n\n\"\"\"\nWrite a function to calculate electricity price.\n\"\"\"\ndef calculate_electricity_price(electric_price, gas_consumption, electricity_price):\n    \"\"\"\n    Calculate electricity price.\n    \"\"\"\n    return gas_consumption + electricity_price\n\n\"\"\"\nWrite a function to calculate gas price.\n\"\"\"\ndef calculate_gas_price(electric_price, gas_consumption, electricity_price):\n    \"\"\"\n    Calculate gas price.\n    \"\"\"\n    return gas_consumption + electricity_price\n\n\"\"\"\nWrite a function to calculate gas price.\n\"\"\"\ndef calculate_gas_price(electric_price, gas_consumption, electricity_price):\n    \"\"\"\n    Calculate gas price.\n    \"\"\"\n    return gas_consumption + electricity_price\n\n\"\"\"\nWrite a function to calculate gas price.\n\"\"\"\ndef calculate_gas_price(electric_price, gas_consumption,"
    },
    {
      "rank": 93,
      "score": 2.5644826182561977,
      "candidate": "import math\n\n# your code goes here\ndef calculate_electricity_bill(year, month, day, hour, minute):\n    \"\"\"\n    :type year: int\n    :type month: int\n    :type day: int\n    :type hour: int\n    :type minute: int\n    :rtype: float\n    \"\"\"\n    # your code goes here\n    a = float(hour)\n    b = float(minute)\n    c = float(day)\n    d = float(month)\n    e = float(year)\n    electricity_bill = a + b / 60 + c * (math.sin(d * math.pi / 180) + 1)\n    return electricity_bill\n\n\nif __name__ == '__main__':\n    print calculate_electricity_bill(2015, 10, 23, 20, 30)"
    },
    {
      "rank": 94,
      "score": 2.50507276170841,
      "candidate": "import math\n\nclass ElectricityBill(object):\n    def __init__(self):\n        self.kwh = 0.0\n        self.price = 0.0\n        self.consumption = 0.0\n        self.price_per_kwh = 0.0\n        self.consumption_per_kwh = 0.0\n        self.bill_amount = 0.0\n        self.consumption_amount = 0.0\n\n    def calculate(self, kwh, price, consumption):\n        self.kwh = kwh\n        self.price = price\n        self.consumption = consumption\n\n    def calculate_bill(self, price_per_kwh, consumption_per_kwh):\n        self.price_per_kwh = price_per_kwh\n        self.consumption_per_kwh = consumption_per_kwh\n\n    def calculate_bill_amount(self, price_per_kwh, consumption_per_kwh, bill_amount):\n        self.price_per_kwh = price_per_kwh\n        self.consumption_per_kwh = consumption_per_kwh\n        self.bill_amount = bill_amount\n\n    def calculate_consumption_amount(self, price_per_kwh, consumption_per_kwh, consumption_amount):\n        self.price_per_kwh = price_per_kwh\n        self.consumption_per_kwh = consumption_per_kwh\n        self.consumption_amount = consumption_amount\n\n    def calculate_consumption_per_kwh(self, price_per_kwh, consumption_per_kwh, consumption_amount):\n        self.price_per_kwh = price_per_kwh\n        self.consumption_per_kwh = consumption_per_kwh\n        self.consumption_amount = consumption_amount\n\n    def calculate_consumption_per_kwh_and_bill_amount(self, price_per_kwh, consumption_per_kwh, consumption_amount, bill_amount):\n        self.price_per_kwh = price_per_kwh\n        self.consumption_per_kwh = consumption_per_kwh\n        self.cons"
    },
    {
      "rank": 95,
      "score": 2.4750372305124606,
      "candidate": "# Calculate electricity bill\ndef electricity_bill(electricity_price, gas_price, amount_of_gas, total_gas_consumed):\n    \"\"\"\n    Electricity bill is the amount of energy (kWh) purchased per month.\n    :param electricity_price: Price of electricity (kWh/KWh)\n    :param gas_price: Price of gas (kWh/KWh)\n    :param amount_of_gas: Amount of gas purchased (kWh)\n    :param total_gas_consumed: Total amount of gas consumed (kWh)\n    :return: Electricity bill in kWh\n    \"\"\"\n    return electricity_price * amount_of_gas + gas_price * total_gas_consumed\n\n\n# Test cases\nif __name__ == '__main__':\n    print(\"Electricity bill for 5 kWh of gas and 10 kWh of electricity is \" + str(electricity_bill(1.5, 1.5, 5, 10)))"
    },
    {
      "rank": 96,
      "score": 2.258285332019396,
      "candidate": "# import math\n# import datetime\n\n# from itertools import groupby\n\n# def electricity_bill(electricity, price_per_kwh, start_date, end_date):\n#     \"\"\"\n#     electricity: electricity usage on a day\n#     price_per_kwh: the price per kWh\n#     start_date: start date\n#     end_date: end date\n#     \"\"\"\n#     total = 0\n#     for k, g in groupby(sorted(electricity), key=lambda x: x[0]):\n#         if k == start_date:\n#             total += sum(g)\n#             continue\n#         elif k == end_date:\n#             break\n#         else:\n#             total += sum(g)\n#     return total * price_per_kwh\n\n# def electricity_bill(electricity, price_per_kwh, start_date, end_date):\n#     \"\"\"\n#     electricity: electricity usage on a day\n#     price_per_kwh: the price per kWh\n#     start_date: start date\n#     end_date: end date\n#     \"\"\"\n#     total = 0\n#     for k, g in groupby(sorted(electricity), key=lambda x: x[0]):\n#         if k == start_date:\n#             total += sum(g)\n#             continue\n#         elif k == end_date:\n#             break\n#         else:\n#             total += sum(g)\n#     return total * price_per_kwh\n\ndef electricity_bill(electricity, price_per_kwh, start_date, end_date):\n    \"\"\"\n    electricity: electricity usage on a day\n    price_per_kwh: the price per kWh\n    start_date: start date\n    end_date: end date\n    \"\"\"\n    total = 0\n    for k, g in groupby(sorted(electricity), key=lambda x: x[0]):\n        if k == start_date:\n            total += sum(g)\n            continue\n        elif k == end_date:\n            break\n        else:\n            total += sum(g"
    },
    {
      "rank": 97,
      "score": 2.177289494797147,
      "candidate": "# https://en.wikipedia.org/wiki/Electricity_bill\n# https://www.wins.com/electricity/electricity-bill/\n\ndef electricity_bill(kWh, month, year):\n    \"\"\"\n    :type kWh: int\n    :type month: int\n    :type year: int\n    :rtype: float\n    \"\"\"\n    # kWh = (month * 365) + (month / 2)\n    # month = month + 1\n    # month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month / 2)\n    month = month + 1\n    month = month + (month"
    },
    {
      "rank": 98,
      "score": 2.1573418467316965,
      "candidate": "# Your code here.\n\ndef calculate_electricity_bill(year, month, days):\n    \"\"\"\n    :type year: int\n    :type month: int\n    :type days: int\n    :rtype: float\n    \"\"\"\n    # 1. Calculate day of month.\n    day_of_month = month * 30 + days\n    # 2. Calculate month and year.\n    month = month + 1\n    year = year + 1\n    # 3. Calculate days in month.\n    days_in_month = 30 if month == 2 or month == 4 or month == 6 or month == 9 or month == 11 else 30\n    # 4. Calculate days in year.\n    days_in_year = 365 if month == 2 or month == 4 or month == 6 or month == 9 or month == 11 else 366\n    # 5. Calculate electricity bill.\n    electricity_bill = days_in_year * (day_of_month/days_in_month) * 0.8\n    return electricity_bill"
    },
    {
      "rank": 99,
      "score": 2.145345366721616,
      "candidate": "def electricity_bill(year, month, day):\n    \"\"\"\n    Electricity bill is calculated in the following way:\n    monthly_consumption = total_consumption * 0.18 + 0.06 * consumption_of_one_month\n    electricity_bill = monthly_consumption * number_of_months\n    \"\"\"\n    monthly_consumption = 0.18 * (month - 1) + 0.06 * month\n    electricity_bill = monthly_consumption * month\n    return electricity_bill\n\n\n\nprint electricity_bill(2016, 1, 1)"
    },
    {
      "rank": 100,
      "score": 1.87350960524141,
      "candidate": "def calculate_electricity_bill(price, cost, rate):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n    bill = price * cost * rate\n    return bill"
    }
  ]
}