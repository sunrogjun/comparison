{
  "timestamp": "2025-09-14T18:56:39.936258",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 213,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def count_set_bits(x):\n    \"\"\"\n    >>> count_set_bits(0)\n    0\n    >>> count_set_bits(1)\n    1\n    >>> count_set_bits(2)\n    2\n    >>> count_set_bits(3)\n    3\n    >>> count_set_bits(4)\n    4\n    >>> count_set_bits(5)\n    5\n    >>> count_set_bits(6)\n    6\n    >>> count_set_bits(7)\n    7\n    >>> count_set_bits(8)\n    8\n    >>> count_set_bits(9)\n    9\n    >>> count_set_bits(10)\n    10\n    >>> count_set_bits(11)\n    11\n    >>> count_set_bits(12)\n    12\n    >>> count_set_bits(13)\n    13\n    >>> count_set_bits(14)\n    14\n    >>> count_set_bits(15)\n    15\n    >>> count_set_bits(16)\n    16\n    >>> count_set_bits(17)\n    17\n    >>> count_set_bits(18)\n    18\n    >>> count_set_bits(19)\n    19\n    >>> count_set_bits(20)\n    20\n    >>> count_set_bits(21)\n    21\n    >>> count_set_bits(22)\n    22\n    >>> count_set_bits(23)\n    23\n    >>> count_set_bits(24)\n    24\n    >>> count_set_bits(25)\n    25\n    >>> count_set_bits(26)\n    26\n    >>> count_set_bits(27)\n    27\n    >>> count_set_bits(28)\n    28\n    >>> count_set_bits(29)\n    29\n    >>> count_set_bits(30)\n    30\n    >>> count_set_bits(31)\n    31\n    >>> count_set_bits(32)\n    32\n    >>> count_set_bits(33)\n    33\n    >>> count_set_bits(34)\n    34\n    >>> count_set_bits("
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def count_set_bits(n):\n    bits = 0\n    while n:\n        n &= n-1\n        bits += 1\n    return bits\n\n# Test case 1\nprint count_set_bits(0)\n# Test case 2\nprint count_set_bits(1)\n# Test case 3\nprint count_set_bits(2)\n# Test case 4\nprint count_set_bits(3)\n# Test case 5\nprint count_set_bits(4)\n# Test case 6\nprint count_set_bits(5)\n# Test case 7\nprint count_set_bits(6)\n# Test case 8\nprint count_set_bits(7)\n# Test case 9\nprint count_set_bits(8)\n# Test case 10\nprint count_set_bits(9)\n# Test case 11\nprint count_set_bits(10)\n# Test case 12\nprint count_set_bits(11)\n# Test case 13\nprint count_set_bits(12)\n# Test case 14\nprint count_set_bits(13)\n# Test case 15\nprint count_set_bits(14)\n# Test case 16\nprint count_set_bits(15)\n# Test case 17\nprint count_set_bits(16)\n# Test case 18\nprint count_set_bits(17)\n# Test case 19\nprint count_set_bits(18)\n# Test case 20\nprint count_set_bits(19)\n# Test case 21\nprint count_set_bits(20)\n# Test case 22\nprint count_set_bits(21)\n# Test case 23\nprint count_set_bits(22)\n# Test case 24\nprint count_set_bits(23)\n# Test case 25\nprint count_set_bits(24)\n# Test case 26\nprint count_set_bits(25)\n# Test case 27\nprint count_set_bits(26)\n# Test case 28\nprint count_set_bits(27)\n# Test case 29\nprint count_set_bits(28)\n# Test case 30\nprint count_set_bits(29)\n# Test case 31\nprint count_set_bits(30)\n# Test case 32\nprint count_"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_bits(n):\n    bits = 0\n    while n > 0:\n        bits += n & 1\n        n >>= 1\n    return bits\n\nif __name__ == '__main__':\n    #print count_bits(0)\n    print count_bits(1)\n    print count_bits(2)\n    print count_bits(3)\n    print count_bits(4)\n    print count_bits(5)\n    print count_bits(6)\n    print count_bits(7)\n    print count_bits(8)\n    print count_bits(9)\n    print count_bits(10)\n    print count_bits(11)\n    print count_bits(12)\n    print count_bits(13)\n    print count_bits(14)\n    print count_bits(15)\n    print count_bits(16)\n    print count_bits(17)\n    print count_bits(18)\n    print count_bits(19)\n    print count_bits(20)\n    print count_bits(21)\n    print count_bits(22)\n    print count_bits(23)\n    print count_bits(24)\n    print count_bits(25)\n    print count_bits(26)\n    print count_bits(27)\n    print count_bits(28)\n    print count_bits(29)\n    print count_bits(30)\n    print count_bits(31)\n    print count_bits(32)\n    print count_bits(33)\n    print count_bits(34)\n    print count_bits(35)\n    print count_bits(36)\n    print count_bits(37)\n    print count_bits(38)\n    print count_bits(39)\n    print count_bits(40)\n    print count_bits(41)\n    print count_bits(42)\n    print count_bits(43)\n    print count_bits(44)\n    print count_bits(45)\n    print count_bits(46)\n    print count_bits(47)\n    print count_bits(48)\n    print count_bits(49)\n    print count_bits(50)\n    print"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def count_bits(num):\n    bits = 0\n    while num:\n        num &= num - 1\n        bits += 1\n    return bits\n\nprint count_bits(0)\nprint count_bits(1)\nprint count_bits(2)\nprint count_bits(3)\nprint count_bits(4)\nprint count_bits(5)\nprint count_bits(6)\nprint count_bits(7)\nprint count_bits(8)\nprint count_bits(9)\nprint count_bits(10)\nprint count_bits(11)\nprint count_bits(12)\nprint count_bits(13)\nprint count_bits(14)\nprint count_bits(15)\nprint count_bits(16)\nprint count_bits(17)\nprint count_bits(18)\nprint count_bits(19)\nprint count_bits(20)\nprint count_bits(21)\nprint count_bits(22)\nprint count_bits(23)\nprint count_bits(24)\nprint count_bits(25)\nprint count_bits(26)\nprint count_bits(27)\nprint count_bits(28)\nprint count_bits(29)\nprint count_bits(30)\nprint count_bits(31)\nprint count_bits(32)\nprint count_bits(33)\nprint count_bits(34)\nprint count_bits(35)\nprint count_bits(36)\nprint count_bits(37)\nprint count_bits(38)\nprint count_bits(39)\nprint count_bits(40)\nprint count_bits(41)\nprint count_bits(42)\nprint count_bits(43)\nprint count_bits(44)\nprint count_bits(45)\nprint count_bits(46)\nprint count_bits(47)\nprint count_bits(48)\nprint count_bits(49)\nprint count_bits(50)\nprint count_bits(51)\nprint count_bits(52)\nprint count_bits(53)\nprint count_bits(54)\nprint count_bits(55)\nprint count_bits(56)\nprint count_bits(57)\nprint count_bits(58)\nprint count_"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def count_bits(n):\n    \"\"\"\n    >>> count_bits(0)\n    0\n    >>> count_bits(1)\n    1\n    >>> count_bits(2)\n    2\n    >>> count_bits(3)\n    2\n    >>> count_bits(4)\n    3\n    >>> count_bits(5)\n    3\n    >>> count_bits(6)\n    3\n    >>> count_bits(7)\n    4\n    >>> count_bits(8)\n    4\n    >>> count_bits(9)\n    4\n    >>> count_bits(10)\n    5\n    >>> count_bits(11)\n    5\n    >>> count_bits(12)\n    5\n    >>> count_bits(13)\n    5\n    >>> count_bits(14)\n    6\n    >>> count_bits(15)\n    6\n    >>> count_bits(16)\n    6\n    >>> count_bits(17)\n    6\n    >>> count_bits(18)\n    6\n    >>> count_bits(19)\n    6\n    >>> count_bits(20)\n    7\n    >>> count_bits(21)\n    7\n    >>> count_bits(22)\n    7\n    >>> count_bits(23)\n    7\n    >>> count_bits(24)\n    8\n    >>> count_bits(25)\n    8\n    >>> count_bits(26)\n    8\n    >>> count_bits(27)\n    8\n    >>> count_bits(28)\n    8\n    >>> count_bits(29)\n    8\n    >>> count_bits(30)\n    9\n    >>> count_bits(31)\n    9\n    >>> count_bits(32)\n    9\n    >>> count_bits(33)\n    9\n    >>> count_bits(34)\n    9\n    >>> count_bits(35)\n    9\n    >>> count_bits(36)\n    9\n    >>> count_bits(37)\n    9\n    >>> count_bits(38)\n    10\n    >>> count_bits(39)\n    10\n    >>> count_bits(40)\n    10\n    >>> count_bits(41)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/count-set-bits/discuss/88803/Python-Solution-with-O(1)-Time-Complexity\n\nclass Solution(object):\n    def countSetBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        while num!= 0:\n            cnt += num & 1\n            num >>= 1\n        return cnt\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countSetBits(5))\n    print(sol.countSetBits(10))\n    print(sol.countSetBits(100))\n    print(sol.countSetBits(1000))\n    print(sol.countSetBits(10000))\n    print(sol.countSetBits(100000))\n    print(sol.countSetBits(1000000))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def count_set_bits(x):\n    \"\"\"\n    :param x: Integer\n    :return: Number of set bits\n    \"\"\"\n    count = 0\n    while x:\n        x &= x - 1\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_set_bits(2))\n    print(count_set_bits(4))\n    print(count_set_bits(5))\n    print(count_set_bits(7))\n    print(count_set_bits(15))\n    print(count_set_bits(16))\n    print(count_set_bits(32))\n    print(count_set_bits(1000))\n    print(count_set_bits(100000000))\n    print(count_set_bits(0))\n    print(count_set_bits(1023))\n    print(count_set_bits(1025))\n    print(count_set_bits(1048576))\n    print(count_set_bits(1048577))\n    print(count_set_bits(1048576))\n    print(count_set_bits(1048578))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def count_bits(num):\n    \"\"\"\n    >>> count_bits(0)\n    0\n    >>> count_bits(1)\n    1\n    >>> count_bits(2)\n    2\n    >>> count_bits(3)\n    2\n    >>> count_bits(4)\n    3\n    >>> count_bits(5)\n    3\n    >>> count_bits(6)\n    3\n    >>> count_bits(7)\n    4\n    >>> count_bits(8)\n    4\n    >>> count_bits(9)\n    4\n    >>> count_bits(10)\n    5\n    >>> count_bits(11)\n    5\n    >>> count_bits(12)\n    5\n    >>> count_bits(13)\n    5\n    >>> count_bits(14)\n    6\n    >>> count_bits(15)\n    6\n    >>> count_bits(16)\n    6\n    >>> count_bits(17)\n    7\n    >>> count_bits(18)\n    7\n    >>> count_bits(19)\n    7\n    >>> count_bits(20)\n    8\n    >>> count_bits(21)\n    8\n    >>> count_bits(22)\n    8\n    >>> count_bits(23)\n    8\n    >>> count_bits(24)\n    9\n    >>> count_bits(25)\n    9\n    >>> count_bits(26)\n    9\n    >>> count_bits(27)\n    9\n    >>> count_bits(28)\n    9\n    >>> count_bits(29)\n    9\n    >>> count_bits(30)\n    10\n    >>> count_bits(31)\n    10\n    >>> count_bits(32)\n    10\n    >>> count_bits(33)\n    10\n    >>> count_bits(34)\n    11\n    >>> count_bits(35)\n    11\n    >>> count_bits(36)\n    11\n    >>> count_bits(37)\n    11\n    >>> count_bits(38)\n    12\n    >>> count_bits(39)\n    12\n    >>> count_bits(40)\n    12\n    >>> count_bits(41)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def count_bits(n):\n    \"\"\"\n    >>> count_bits(0)\n    0\n    >>> count_bits(1)\n    1\n    >>> count_bits(2)\n    2\n    >>> count_bits(3)\n    3\n    >>> count_bits(4)\n    4\n    >>> count_bits(5)\n    5\n    >>> count_bits(6)\n    6\n    >>> count_bits(7)\n    7\n    >>> count_bits(8)\n    8\n    >>> count_bits(9)\n    9\n    >>> count_bits(10)\n    10\n    >>> count_bits(11)\n    11\n    >>> count_bits(12)\n    12\n    >>> count_bits(13)\n    13\n    >>> count_bits(14)\n    14\n    >>> count_bits(15)\n    15\n    >>> count_bits(16)\n    16\n    >>> count_bits(17)\n    17\n    >>> count_bits(18)\n    18\n    >>> count_bits(19)\n    19\n    >>> count_bits(20)\n    20\n    >>> count_bits(21)\n    21\n    >>> count_bits(22)\n    22\n    >>> count_bits(23)\n    23\n    >>> count_bits(24)\n    24\n    >>> count_bits(25)\n    25\n    >>> count_bits(26)\n    26\n    >>> count_bits(27)\n    27\n    >>> count_bits(28)\n    28\n    >>> count_bits(29)\n    29\n    >>> count_bits(30)\n    30\n    >>> count_bits(31)\n    31\n    >>> count_bits(32)\n    32\n    >>> count_bits(33)\n    33\n    >>> count_bits(34)\n    34\n    >>> count_bits(35)\n    35\n    >>> count_bits(36)\n    36\n    >>> count_bits(37)\n    37\n    >>> count_bits(38)\n    38\n    >>> count_bits(39)\n    39\n    >>> count_bits(40)\n    40\n    >>> count_bits(41)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    count_set_bits(n) -> int\n\n    >>> count_set_bits(0)\n    0\n    >>> count_set_bits(1)\n    0\n    >>> count_set_bits(2)\n    1\n    >>> count_set_bits(3)\n    1\n    >>> count_set_bits(4)\n    2\n    >>> count_set_bits(5)\n    2\n    >>> count_set_bits(6)\n    3\n    >>> count_set_bits(7)\n    3\n    >>> count_set_bits(8)\n    4\n    >>> count_set_bits(9)\n    4\n    >>> count_set_bits(10)\n    5\n    >>> count_set_bits(11)\n    5\n    >>> count_set_bits(12)\n    6\n    >>> count_set_bits(13)\n    6\n    >>> count_set_bits(14)\n    7\n    >>> count_set_bits(15)\n    7\n    >>> count_set_bits(16)\n    8\n    >>> count_set_bits(17)\n    8\n    >>> count_set_bits(18)\n    9\n    >>> count_set_bits(19)\n    9\n    >>> count_set_bits(20)\n    10\n    >>> count_set_bits(21)\n    10\n    >>> count_set_bits(22)\n    11\n    >>> count_set_bits(23)\n    11\n    >>> count_set_bits(24)\n    12\n    >>> count_set_bits(25)\n    12\n    >>> count_set_bits(26)\n    13\n    >>> count_set_bits(27)\n    13\n    >>> count_set_bits(28)\n    14\n    >>> count_set_bits(29)\n    14\n    >>> count_set_bits(30)\n    15\n    >>> count_set_bits(31)\n    15\n    >>> count_set_bits(32)\n    16\n    >>> count_set_bits(33)\n    16\n    >>> count_set_bits(34)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def count_bits(num):\n    \"\"\"\n    Given a number num, return the number of bits that are set in num.\n    \"\"\"\n    return sum(bin(num).count('1'))\n\ndef test():\n    assert count_bits(0) == 0\n    assert count_bits(1) == 1\n    assert count_bits(2) == 1\n    assert count_bits(3) == 2\n    assert count_bits(4) == 1\n    assert count_bits(5) == 2\n    assert count_bits(6) == 2\n    assert count_bits(7) == 2\n    assert count_bits(8) == 2\n    assert count_bits(9) == 3\n    assert count_bits(10) == 2\n    assert count_bits(11) == 3\n    assert count_bits(12) == 3\n    assert count_bits(13) == 3\n    assert count_bits(14) == 3\n    assert count_bits(15) == 4\n    assert count_bits(16) == 3\n    assert count_bits(17) == 4\n    assert count_bits(18) == 4\n    assert count_bits(19) == 4\n    assert count_bits(20) == 4\n    assert count_bits(21) == 4\n    assert count_bits(22) == 4\n    assert count_bits(23) == 4\n    assert count_bits(24) == 4\n    assert count_bits(25) == 4\n    assert count_bits(26) == 4\n    assert count_bits(27) == 4\n    assert count_bits(28) == 4\n    assert count_bits(29) == 4\n    assert count_bits(30) == 4\n    assert count_bits(31) == 4\n    assert count_bits(32) == 4\n    assert count_bits(33) == 4\n    assert count_bits(34) == 4\n    assert count_bits(35) == 4\n    assert count_bits(36) == 4\n    assert count_bits(37) == 4\n    assert count_bits(38) == 4\n    assert count_bits(39) == 4\n    assert count_bits(40) == 4\n    assert count_bits(41) =="
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def count_bits(n):\n    \"\"\"\n    >>> count_bits(1)\n    1\n    >>> count_bits(2)\n    2\n    >>> count_bits(3)\n    3\n    >>> count_bits(4)\n    4\n    >>> count_bits(5)\n    5\n    >>> count_bits(6)\n    6\n    >>> count_bits(7)\n    7\n    >>> count_bits(8)\n    8\n    >>> count_bits(9)\n    9\n    >>> count_bits(10)\n    10\n    >>> count_bits(11)\n    11\n    >>> count_bits(12)\n    12\n    >>> count_bits(13)\n    13\n    >>> count_bits(14)\n    14\n    >>> count_bits(15)\n    15\n    >>> count_bits(16)\n    16\n    >>> count_bits(17)\n    17\n    >>> count_bits(18)\n    18\n    >>> count_bits(19)\n    19\n    >>> count_bits(20)\n    20\n    >>> count_bits(21)\n    21\n    >>> count_bits(22)\n    22\n    >>> count_bits(23)\n    23\n    >>> count_bits(24)\n    24\n    >>> count_bits(25)\n    25\n    >>> count_bits(26)\n    26\n    >>> count_bits(27)\n    27\n    >>> count_bits(28)\n    28\n    >>> count_bits(29)\n    29\n    >>> count_bits(30)\n    30\n    >>> count_bits(31)\n    31\n    >>> count_bits(32)\n    32\n    >>> count_bits(33)\n    33\n    >>> count_bits(34)\n    34\n    >>> count_bits(35)\n    35\n    >>> count_bits(36)\n    36\n    >>> count_bits(37)\n    37\n    >>> count_bits(38)\n    38\n    >>> count_bits(39)\n    39\n    >>> count_bits(40)\n    40\n    >>> count_bits(41)\n    41\n    >>> count_bits(42)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from __future__ import print_function\n\ndef count_bits(x):\n    count = 0\n    while x:\n        x &= x - 1\n        count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(count_bits(0b00000001))\n    print(count_bits(0b00001000))\n    print(count_bits(0b11110000))\n    print(count_bits(0b11111111))\n    print(count_bits(0b1111111111111111))\n    print(count_bits(0b1111111111111111111111111111111111111111111111111111111111111111))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef count_set_bits(n):\n    \"\"\"\n    >>> count_set_bits(0)\n    0\n    >>> count_set_bits(1)\n    1\n    >>> count_set_bits(2)\n    2\n    >>> count_set_bits(3)\n    2\n    >>> count_set_bits(4)\n    3\n    >>> count_set_bits(5)\n    3\n    >>> count_set_bits(6)\n    3\n    >>> count_set_bits(7)\n    3\n    >>> count_set_bits(8)\n    4\n    >>> count_set_bits(9)\n    4\n    >>> count_set_bits(10)\n    4\n    >>> count_set_bits(11)\n    4\n    >>> count_set_bits(12)\n    4\n    >>> count_set_bits(13)\n    4\n    >>> count_set_bits(14)\n    4\n    >>> count_set_bits(15)\n    4\n    >>> count_set_bits(16)\n    5\n    >>> count_set_bits(17)\n    5\n    >>> count_set_bits(18)\n    5\n    >>> count_set_bits(19)\n    5\n    >>> count_set_bits(20)\n    5\n    >>> count_set_bits(21)\n    5\n    >>> count_set_bits(22)\n    5\n    >>> count_set_bits(23)\n    5\n    >>> count_set_bits(24)\n    6\n    >>> count_set_bits(25)\n    6\n    >>> count_set_bits(26)\n    6\n    >>> count_set_bits(27)\n    6\n    >>> count_set_bits(28)\n    6\n    >>> count_set_bits(29)\n    6\n    >>> count_set_bits(30)\n    6\n    >>> count_set_bits(31)\n    6\n    >>> count_set_bits(32)\n    7\n    >>> count_set_bits(33)\n    7\n    >>> count_set_bits(34)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def count_bits(x):\n    \"\"\"\n    >>> count_bits(0)\n    0\n    >>> count_bits(1)\n    1\n    >>> count_bits(2)\n    2\n    >>> count_bits(3)\n    3\n    >>> count_bits(4)\n    4\n    >>> count_bits(5)\n    5\n    >>> count_bits(6)\n    6\n    >>> count_bits(7)\n    7\n    >>> count_bits(8)\n    8\n    >>> count_bits(9)\n    9\n    >>> count_bits(10)\n    10\n    >>> count_bits(11)\n    11\n    >>> count_bits(12)\n    12\n    >>> count_bits(13)\n    13\n    >>> count_bits(14)\n    14\n    >>> count_bits(15)\n    15\n    >>> count_bits(16)\n    16\n    >>> count_bits(17)\n    17\n    >>> count_bits(18)\n    18\n    >>> count_bits(19)\n    19\n    >>> count_bits(20)\n    20\n    >>> count_bits(21)\n    21\n    >>> count_bits(22)\n    22\n    >>> count_bits(23)\n    23\n    >>> count_bits(24)\n    24\n    >>> count_bits(25)\n    25\n    >>> count_bits(26)\n    26\n    >>> count_bits(27)\n    27\n    >>> count_bits(28)\n    28\n    >>> count_bits(29)\n    29\n    >>> count_bits(30)\n    30\n    >>> count_bits(31)\n    31\n    >>> count_bits(32)\n    32\n    >>> count_bits(33)\n    33\n    >>> count_bits(34)\n    34\n    >>> count_bits(35)\n    35\n    >>> count_bits(36)\n    36\n    >>> count_bits(37)\n    37\n    >>> count_bits(38)\n    38\n    >>> count_bits(39)\n    39\n    >>> count_bits(40)\n    40\n    >>> count_bits(41)"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def count_bits(n):\n    return sum(bin(n).count('1') == 1 for n in range(2 ** 32))\n\n\nif __name__ == '__main__':\n    print(count_bits(0xffffffffffffffff))\n    print(count_bits(0x00000000ffffffff))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import operator\n\ndef count_bits(n):\n    \"\"\"\n    >>> count_bits(1)\n    1\n    >>> count_bits(2)\n    2\n    >>> count_bits(3)\n    3\n    >>> count_bits(4)\n    4\n    >>> count_bits(5)\n    5\n    >>> count_bits(6)\n    6\n    >>> count_bits(7)\n    7\n    >>> count_bits(8)\n    8\n    >>> count_bits(9)\n    9\n    >>> count_bits(10)\n    10\n    \"\"\"\n    return sum(map(operator.__pow__, [2] + range(3, n + 1), [n]))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    >>> count_set_bits(0)\n    0\n    >>> count_set_bits(1)\n    0\n    >>> count_set_bits(2)\n    1\n    >>> count_set_bits(3)\n    1\n    >>> count_set_bits(4)\n    2\n    >>> count_set_bits(5)\n    2\n    >>> count_set_bits(6)\n    3\n    >>> count_set_bits(7)\n    3\n    >>> count_set_bits(8)\n    4\n    >>> count_set_bits(9)\n    4\n    >>> count_set_bits(10)\n    5\n    >>> count_set_bits(11)\n    5\n    >>> count_set_bits(12)\n    6\n    >>> count_set_bits(13)\n    6\n    >>> count_set_bits(14)\n    7\n    >>> count_set_bits(15)\n    7\n    >>> count_set_bits(16)\n    8\n    >>> count_set_bits(17)\n    8\n    >>> count_set_bits(18)\n    9\n    >>> count_set_bits(19)\n    9\n    >>> count_set_bits(20)\n    10\n    >>> count_set_bits(21)\n    10\n    >>> count_set_bits(22)\n    11\n    >>> count_set_bits(23)\n    11\n    >>> count_set_bits(24)\n    12\n    >>> count_set_bits(25)\n    12\n    >>> count_set_bits(26)\n    13\n    >>> count_set_bits(27)\n    13\n    >>> count_set_bits(28)\n    14\n    >>> count_set_bits(29)\n    14\n    >>> count_set_bits(30)\n    15\n    >>> count_set_bits(31)\n    15\n    >>> count_set_bits(32)\n    16\n    >>> count_set_bits(33)\n    16\n    >>> count_set_bits(34)\n    17\n    >>> count_set_bits("
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def count_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nif __name__ == \"__main__\":\n    print(count_bits(0b101))\n    print(count_bits(0b10))\n    print(count_bits(0b11))\n    print(count_bits(0b1110))\n    print(count_bits(0b11111))\n    print(count_bits(0b1111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b111111111111111111111111111111111111111111111111111111111111111111))\n    print(count_bits(0b11111111"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from __future__ import division\n\ndef count_bits(x):\n    \"\"\"\n    Count the number of set bits in x.\n    \"\"\"\n    return bin(x).count('1')\n\n\ndef main():\n    \"\"\"\n    Main function for testing.\n    \"\"\"\n    print('Count bits: {}'.format(count_bits(1)))\n    print('Count bits: {}'.format(count_bits(0b10101010)))\n    print('Count bits: {}'.format(count_bits(0b11100100)))\n    print('Count bits: {}'.format(count_bits(0b11111111)))\n    print('Count bits: {}'.format(count_bits(0b1111111111111111)))\n    print('Count bits: {}'.format(count_bits(0b11111111111111111111111111111111)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def set_bits(num):\n    \"\"\"\n    >>> set_bits(0)\n    0\n    >>> set_bits(1)\n    2\n    >>> set_bits(2)\n    2\n    >>> set_bits(3)\n    2\n    >>> set_bits(4)\n    2\n    >>> set_bits(5)\n    3\n    >>> set_bits(6)\n    3\n    >>> set_bits(7)\n    3\n    >>> set_bits(8)\n    4\n    >>> set_bits(9)\n    4\n    >>> set_bits(10)\n    4\n    >>> set_bits(11)\n    4\n    >>> set_bits(12)\n    4\n    >>> set_bits(13)\n    5\n    >>> set_bits(14)\n    5\n    >>> set_bits(15)\n    5\n    >>> set_bits(16)\n    6\n    >>> set_bits(17)\n    6\n    >>> set_bits(18)\n    6\n    >>> set_bits(19)\n    6\n    >>> set_bits(20)\n    6\n    >>> set_bits(21)\n    7\n    >>> set_bits(22)\n    7\n    >>> set_bits(23)\n    7\n    >>> set_bits(24)\n    8\n    >>> set_bits(25)\n    8\n    >>> set_bits(26)\n    8\n    >>> set_bits(27)\n    8\n    >>> set_bits(28)\n    9\n    >>> set_bits(29)\n    9\n    >>> set_bits(30)\n    9\n    >>> set_bits(31)\n    9\n    >>> set_bits(32)\n    10\n    >>> set_bits(33)\n    10\n    >>> set_bits(34)\n    10\n    >>> set_bits(35)\n    10\n    >>> set_bits(36)\n    11\n    >>> set_bits(37)\n    11\n    >>> set_bits(38)\n    11\n    >>> set_bits(39)\n    11\n    >>> set_bits(40)\n    12\n    >>> set_bits(41)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef count_bits(num):\n    # Your code here\n    num = num - 1\n    count = 0\n    while num > 0:\n        count += num & 1\n        num >>= 1\n    return count\n\n\nif __name__ == '__main__':\n    print count_bits(0)\n    print count_bits(1)\n    print count_bits(1)\n    print count_bits(2)\n    print count_bits(3)\n    print count_bits(4)\n    print count_bits(5)\n    print count_bits(6)\n    print count_bits(7)\n    print count_bits(8)\n    print count_bits(9)\n    print count_bits(10)\n    print count_bits(11)\n    print count_bits(12)\n    print count_bits(13)\n    print count_bits(14)\n    print count_bits(15)\n    print count_bits(16)\n    print count_bits(17)\n    print count_bits(18)\n    print count_bits(19)\n    print count_bits(20)\n    print count_bits(21)\n    print count_bits(22)\n    print count_bits(23)\n    print count_bits(24)\n    print count_bits(25)\n    print count_bits(26)\n    print count_bits(27)\n    print count_bits(28)\n    print count_bits(29)\n    print count_bits(30)\n    print count_bits(31)\n    print count_bits(32)\n    print count_bits(33)\n    print count_bits(34)\n    print count_bits(35)\n    print count_bits(36)\n    print count_bits(37)\n    print count_bits(38)\n    print count_bits(39)\n    print count_bits(40)\n    print count_bits(41)\n    print count_bits(42)\n    print count_bits(43)\n    print count_bits(44)\n    print count_bits(45)\n    print count_bits(46)\n    print count_bits(47"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def bits(number):\n    \"\"\"\n    >>> bits(2)\n    1\n    >>> bits(10)\n    4\n    >>> bits(100)\n    25\n    >>> bits(1000)\n    501\n    >>> bits(12345)\n    769\n    \"\"\"\n    return number & (number - 1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def count_bits(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    bits = 0\n    while num:\n        bits += 1\n        num &= num - 1\n    return bits\n\n# Test cases\nprint count_bits(0)\nprint count_bits(1)\nprint count_bits(2)\nprint count_bits(3)\nprint count_bits(4)\nprint count_bits(5)\nprint count_bits(6)\nprint count_bits(7)\nprint count_bits(8)\nprint count_bits(9)\nprint count_bits(10)\nprint count_bits(11)\nprint count_bits(12)\nprint count_bits(13)\nprint count_bits(14)\nprint count_bits(15)\nprint count_bits(16)\nprint count_bits(17)\nprint count_bits(18)\nprint count_bits(19)\nprint count_bits(20)\nprint count_bits(21)\nprint count_bits(22)\nprint count_bits(23)\nprint count_bits(24)\nprint count_bits(25)\nprint count_bits(26)\nprint count_bits(27)\nprint count_bits(28)\nprint count_bits(29)\nprint count_bits(30)\nprint count_bits(31)\nprint count_bits(32)\nprint count_bits(33)\nprint count_bits(34)\nprint count_bits(35)\nprint count_bits(36)\nprint count_bits(37)\nprint count_bits(38)\nprint count_bits(39)\nprint count_bits(40)\nprint count_bits(41)\nprint count_bits(42)\nprint count_bits(43)\nprint count_bits(44)\nprint count_bits(45)\nprint count_bits(46)\nprint count_bits(47)\nprint count_bits(48)\nprint count_bits(49)\nprint count_bits(50)\nprint count_bits(51)\nprint count_bits(52)\nprint count_bits(53)\nprint count_bits(54)\nprint count_bits(55)\nprint count_bits(56"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(bin(n).count('1') - (n & (n - 1)))\n\n\nif __name__ == '__main__':\n    print(count_set_bits(1))\n    print(count_set_bits(2))\n    print(count_set_bits(3))\n    print(count_set_bits(4))\n    print(count_set_bits(5))\n    print(count_set_bits(6))\n    print(count_set_bits(7))\n    print(count_set_bits(8))\n    print(count_set_bits(9))\n    print(count_set_bits(10))\n    print(count_set_bits(11))\n    print(count_set_bits(12))\n    print(count_set_bits(13))\n    print(count_set_bits(14))\n    print(count_set_bits(15))\n    print(count_set_bits(16))\n    print(count_set_bits(17))\n    print(count_set_bits(18))\n    print(count_set_bits(19))\n    print(count_set_bits(20))\n    print(count_set_bits(21))\n    print(count_set_bits(22))\n    print(count_set_bits(23))\n    print(count_set_bits(24))\n    print(count_set_bits(25))\n    print(count_set_bits(26))\n    print(count_set_bits(27))\n    print(count_set_bits(28))\n    print(count_set_bits(29))\n    print(count_set_bits(30))\n    print(count_set_bits(31))\n    print(count_set_bits(32))\n    print(count_set_bits(33))\n    print(count_set_bits(34))\n    print(count_set_bits(35))\n    print(count_set_bits(36))\n    print(count_set_bits(37))\n    print("
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def count_set_bits(number):\n    \"\"\"\n    >>> count_set_bits(3)\n    2\n    >>> count_set_bits(5)\n    3\n    >>> count_set_bits(0)\n    0\n    \"\"\"\n    if number == 0:\n        return 0\n    count = 0\n    while number > 0:\n        count += number & 1\n        number >>= 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef count_set_bits(x):\n    \"\"\"\n    count_set_bits(x) -> int\n    \n    counts the number of set bits of a number\n    \n    >>> count_set_bits(0)\n    0\n    >>> count_set_bits(1)\n    0\n    >>> count_set_bits(2)\n    1\n    >>> count_set_bits(3)\n    2\n    >>> count_set_bits(4)\n    3\n    >>> count_set_bits(5)\n    4\n    >>> count_set_bits(6)\n    5\n    >>> count_set_bits(7)\n    6\n    >>> count_set_bits(8)\n    7\n    >>> count_set_bits(9)\n    8\n    >>> count_set_bits(10)\n    9\n    >>> count_set_bits(11)\n    10\n    >>> count_set_bits(12)\n    11\n    >>> count_set_bits(13)\n    12\n    >>> count_set_bits(14)\n    13\n    >>> count_set_bits(15)\n    14\n    >>> count_set_bits(16)\n    15\n    >>> count_set_bits(17)\n    16\n    >>> count_set_bits(18)\n    17\n    >>> count_set_bits(19)\n    18\n    >>> count_set_bits(20)\n    19\n    >>> count_set_bits(21)\n    20\n    >>> count_set_bits(22)\n    21\n    >>> count_set_bits(23)\n    22\n    >>> count_set_bits(24)\n    23\n    >>> count_set_bits(25)\n    24\n    >>> count_set_bits(26)\n    25\n    >>> count_set_bits(27)\n    26\n    >>> count_set_bits(28)\n    27\n    >>> count_set_bits(29)\n    28\n    >>> count_set_bits(30)\n    29\n    >>> count_set_bits(31)\n    30\n    >>> count_set_bits(32)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def count_bits(num):\n    \"\"\"\n    >>> count_bits(0)\n    0\n    >>> count_bits(1)\n    1\n    >>> count_bits(2)\n    3\n    >>> count_bits(3)\n    4\n    >>> count_bits(4)\n    5\n    >>> count_bits(5)\n    7\n    >>> count_bits(6)\n    9\n    >>> count_bits(7)\n    11\n    >>> count_bits(8)\n    13\n    >>> count_bits(9)\n    15\n    >>> count_bits(10)\n    17\n    >>> count_bits(11)\n    19\n    >>> count_bits(12)\n    21\n    >>> count_bits(13)\n    23\n    >>> count_bits(14)\n    25\n    >>> count_bits(15)\n    27\n    >>> count_bits(16)\n    29\n    >>> count_bits(17)\n    31\n    >>> count_bits(18)\n    33\n    >>> count_bits(19)\n    35\n    >>> count_bits(20)\n    37\n    >>> count_bits(21)\n    39\n    >>> count_bits(22)\n    41\n    >>> count_bits(23)\n    43\n    >>> count_bits(24)\n    45\n    >>> count_bits(25)\n    47\n    >>> count_bits(26)\n    49\n    >>> count_bits(27)\n    51\n    >>> count_bits(28)\n    53\n    >>> count_bits(29)\n    55\n    >>> count_bits(30)\n    57\n    >>> count_bits(31)\n    59\n    >>> count_bits(32)\n    61\n    >>> count_bits(33)\n    63\n    >>> count_bits(34)\n    65\n    >>> count_bits(35)\n    67\n    >>> count_bits(36)\n    69\n    >>> count_bits(37)\n    71\n    >>> count_bits(38)\n    73\n    >>> count_bits(39)\n    75\n    >>> count_bits(40)\n    77\n    >>> count_bits(41)"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def count_bits(number):\n    \"\"\"\n    Input: number = 1\n    Output: 6\n    \"\"\"\n    count = 0\n    for i in range(0, len(str(number))):\n        if number[i] == '1':\n            count += 1\n    return count\n\nprint count_bits(1)\nprint count_bits(2)\nprint count_bits(3)\nprint count_bits(4)\nprint count_bits(5)\nprint count_bits(6)\nprint count_bits(7)\nprint count_bits(8)\nprint count_bits(9)\nprint count_bits(10)\nprint count_bits(11)\nprint count_bits(12)\nprint count_bits(13)\nprint count_bits(14)\nprint count_bits(15)\nprint count_bits(16)\nprint count_bits(17)\nprint count_bits(18)\nprint count_bits(19)\nprint count_bits(20)\nprint count_bits(21)\nprint count_bits(22)\nprint count_bits(23)\nprint count_bits(24)\nprint count_bits(25)\nprint count_bits(26)\nprint count_bits(27)\nprint count_bits(28)\nprint count_bits(29)\nprint count_bits(30)\nprint count_bits(31)\nprint count_bits(32)\nprint count_bits(33)\nprint count_bits(34)\nprint count_bits(35)\nprint count_bits(36)\nprint count_bits(37)\nprint count_bits(38)\nprint count_bits(39)\nprint count_bits(40)\nprint count_bits(41)\nprint count_bits(42)\nprint count_bits(43)\nprint count_bits(44)\nprint count_bits(45)\nprint count_bits(46)\nprint count_bits(47)\nprint count_bits(48)\nprint count_bits(49)\nprint count_bits(50)\nprint count_bits(51)\nprint count_bits(52)\nprint count_bits(53)\nprint count_bits(54)\nprint count_bits(55)\nprint count_"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def countSetBits(num):\n    \"\"\"\n    Input:\n        num: an integer\n    Output:\n        a list of integers\n    \"\"\"\n    count = 0\n    for i in range(1, num + 1):\n        if num & i == i:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    for num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "import unittest\n\n#\n# Problem #2: Count the number of 1 bits\n#\n# Define a function count_bits(n) that takes a positive integer n as its input,\n# and returns the number of 1 bits in n.\n#\n# For example, if n is 3, the function should return 2, because there are two\n# 1 bits in 3, and one 1 bit in the sum of those two 1 bits.\n#\n# Note: The input n will be in the range [0, 2^31 - 1].\n#\n\ndef count_bits(n):\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n\nclass TestProblem2(unittest.TestCase):\n    def test_count_bits(self):\n        self.assertEqual(count_bits(0), 0)\n        self.assertEqual(count_bits(1), 0)\n        self.assertEqual(count_bits(2), 1)\n        self.assertEqual(count_bits(3), 2)\n        self.assertEqual(count_bits(4), 2)\n        self.assertEqual(count_bits(5), 3)\n        self.assertEqual(count_bits(6), 3)\n        self.assertEqual(count_bits(7), 4)\n        self.assertEqual(count_bits(8), 4)\n        self.assertEqual(count_bits(9), 5)\n        self.assertEqual(count_bits(10), 5)\n        self.assertEqual(count_bits(11), 6)\n        self.assertEqual(count_bits(12), 6)\n        self.assertEqual(count_bits(13), 7)\n        self.assertEqual(count_bits(14), 7)\n        self.assertEqual(count_bits(15), 8)\n        self.assertEqual(count_bits(16), 8)\n        self.assertEqual(count_bits(17), 9)\n        self.assertEqual(count_bits(18), 9)\n        self.assertEqual(count_bits(19), 10)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    Count the number of set bits in a given integer n.\n    >>> count_set_bits(0)\n    0\n    >>> count_set_bits(1)\n    1\n    >>> count_set_bits(2)\n    2\n    >>> count_set_bits(3)\n    3\n    >>> count_set_bits(4)\n    4\n    >>> count_set_bits(5)\n    5\n    >>> count_set_bits(6)\n    6\n    >>> count_set_bits(7)\n    7\n    >>> count_set_bits(8)\n    8\n    >>> count_set_bits(9)\n    9\n    >>> count_set_bits(10)\n    10\n    >>> count_set_bits(11)\n    11\n    >>> count_set_bits(12)\n    12\n    >>> count_set_bits(13)\n    13\n    >>> count_set_bits(14)\n    14\n    >>> count_set_bits(15)\n    15\n    >>> count_set_bits(16)\n    16\n    >>> count_set_bits(17)\n    17\n    >>> count_set_bits(18)\n    18\n    >>> count_set_bits(19)\n    19\n    >>> count_set_bits(20)\n    20\n    >>> count_set_bits(21)\n    21\n    >>> count_set_bits(22)\n    22\n    >>> count_set_bits(23)\n    23\n    >>> count_set_bits(24)\n    24\n    >>> count_set_bits(25)\n    25\n    >>> count_set_bits(26)\n    26\n    >>> count_set_bits(27)\n    27\n    >>> count_set_bits(28)\n    28\n    >>> count_set_bits(29)\n    29\n    >>> count_set_bits(30)\n    30\n    >>> count_set_bits(31)\n    31\n    >>> count_set_bits(32)\n    32\n    >>> count_set_bits(33)\n    33\n    >>> count_set_bits("
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def count_set_bits(number):\n    \"\"\"\n    Count the number of bits set to 1 in the given number.\n\n    >>> count_set_bits(0b101)\n    3\n    >>> count_set_bits(0b11)\n    2\n    >>> count_set_bits(0b1)\n    1\n    >>> count_set_bits(0b1101)\n    5\n    >>> count_set_bits(0b11011101)\n    7\n    >>> count_set_bits(0b110111011101)\n    9\n    \"\"\"\n    count = 0\n    while number!= 0:\n        count += number & 1\n        number >>= 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def count_set_bits(num):\n    \"\"\"\n    >>> count_set_bits(0x00)\n    0\n    >>> count_set_bits(0x01)\n    1\n    >>> count_set_bits(0x3F)\n    2\n    >>> count_set_bits(0x7F)\n    7\n    >>> count_set_bits(0xFF)\n    15\n    >>> count_set_bits(0x00FF)\n    255\n    >>> count_set_bits(0xFF00)\n    511\n    >>> count_set_bits(0xFF0000)\n    1023\n    >>> count_set_bits(0xFFFF0000)\n    2047\n    >>> count_set_bits(0xFFFFFFFF)\n    4095\n    >>> count_set_bits(0xFFFFFFFFFFFFFFFF)\n    65535\n    \"\"\"\n    return sum([1 for x in bin(num) if x == '1'])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nfrom __future__ import division\n\ndef count_bits(n):\n    \"\"\"\n    Count the bits in the number n.\n    \"\"\"\n    if n == 0:\n        return 0\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    assert count_bits(0) == 0\n    assert count_bits(1) == 1\n    assert count_bits(2) == 2\n    assert count_bits(3) == 1\n    assert count_bits(4) == 2\n    assert count_bits(5) == 1\n    assert count_bits(6) == 2\n    assert count_bits(7) == 1\n    assert count_bits(8) == 3\n    assert count_bits(16) == 4\n    assert count_bits(17) == 2\n    assert count_bits(31) == 5\n    assert count_bits(32) == 3\n    assert count_bits(63) == 6\n    assert count_bits(64) == 4\n    assert count_bits(256) == 8\n    assert count_bits(257) == 3\n    assert count_bits(512) == 7\n    assert count_bits(513) == 2\n    assert count_bits(1000) == 9\n    assert count_bits(1001) == 4"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/count-bits/\n\nclass Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        while num > 0:\n            cnt += num & 1\n            num >>= 1\n        return cnt\n\n# Note:\n# https://leetcode.com/discuss/55/easy-to-understand-python-solution-for-count-bits-of-a-number"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# The Python version of this challenge was written by\n#  David M. Doolin\n#  dmdoolin@pobox.com\n#  http://www.dmdoolin.com/challenges/bitcount\n\n# I'm going to try to do something like this, but I don't know how to do it\n#  in the way that I'm currently writing it.  For now, I'm going to write\n#  a solution that uses a bitwise operation to do the work.  I'm not sure\n#  if there is a more efficient way to do this.  I'm going to try some\n#  other ways to do this.\n\n# I'm going to use the same approach as in the bitwise challenge, but\n#  I'm going to use a counter instead of a list.  I'm going to try to do\n#  something like this:\n\n#       for i in range(1, 10):\n#           count = 0\n#           for j in range(0, i):\n#               count = count + (i & j)\n#           print i, count\n\n#  This will print out 1, 2, 3, 4, 5, 6, 7, 8, 9, 15.  The idea is that\n#  we're going to count the number of set bits in the number, then we'll\n#  print out the number of set bits.  I'm not sure how to do this with\n#  a bitwise operation.  I'm going to try some other ways of doing this.\n\n# I'm going to write a bitwise solution that uses a counter.  I'm going\n#  to try some other ways to do this.  I'm going to try some other ways\n#  to do this.\n\n# I'm going to write a bitwise solution that uses a counter.  I'm going\n#  to try some other ways to do this.\n\n# I'm going to write a bitwise solution that uses a counter.  I'm going\n#  to try some other ways to do this.\n\n# I'm going to write a bitwise solution that uses a counter.  I'm going\n#  to try some other ways to do this.\n\n# I'm going to write a bitwise solution"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "def set_bits(num):\n    count = 0\n    for i in range(32):\n        if num & 1:\n            count += 1\n        num >>= 1\n    return count\n\ndef main():\n    for num in range(1,1000):\n        print num, set_bits(num)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def setBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nif __name__ == '__main__':\n    for n in range(1, 101):\n        print(setBits(n))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    cnt = 0\n    while n:\n        cnt += n & 1\n        n >>= 1\n    return cnt\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def count_bits(n):\n    return sum(bin(n).count('1') - bin(n).count('0'))\n\nif __name__ == '__main__':\n    print count_bits(3)\n    print count_bits(4)\n    print count_bits(5)\n    print count_bits(5)\n    print count_bits(5)\n    print count_bits(5)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def count_set_bits(x):\n    count = 0\n    while x:\n        count += (x & 1)\n        x >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print count_set_bits(5)\n    print count_set_bits(0x3)\n    print count_set_bits(0x7ffffff)\n    print count_set_bits(0x7fffffff)\n    print count_set_bits(0xffffffff)\n    print count_set_bits(0xfffffffff)\n    print count_set_bits(0xffffffffff)\n    print count_set_bits(0xfffffffffff)\n    print count_set_bits(0xffffffffffff)\n    print count_set_bits(0xfffffffffffff)\n    print count_set_bits(0xffffffffffffff)\n    print count_set_bits(0xfffffffffffffff)\n    print count_set_bits(0xffffffffffffffff)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def count_bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\nif __name__ == '__main__':\n    for i in range(1, 10):\n        print(count_bits(i))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/count-bits/\nclass Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        bits = 0\n        while num > 0:\n            bits += num & 1\n            num >>= 1\n        return bits"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    For the number n, count the number of bits set to 1.\n    \"\"\"\n    cnt = 0\n    while n > 0:\n        cnt += n & 1\n        n >>= 1\n    return cnt\n\n\nprint count_set_bits(7)\nprint count_set_bits(3)\nprint count_set_bits(4)\nprint count_set_bits(1)\nprint count_set_bits(0)\nprint count_set_bits(-1)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    count_set_bits(n) -> int\n    \n    Count the number of bits set to 1 in n.\n    \"\"\"\n    return sum(bin(n).count(\"1\") - bin(n).count(\"0\"))\n\n\ndef count_set_bits_2(n):\n    \"\"\"\n    count_set_bits_2(n) -> int\n    \n    Count the number of bits set to 1 in n.\n    \"\"\"\n    return sum(bin(n).count(\"1\"))\n\n\ndef count_set_bits_3(n):\n    \"\"\"\n    count_set_bits_3(n) -> int\n    \n    Count the number of bits set to 1 in n.\n    \"\"\"\n    return sum(bin(n).count(\"1\") % 2)\n\n\nif __name__ == \"__main__\":\n    for n in range(10):\n        print(count_set_bits(n))\n        print(count_set_bits_2(n))\n        print(count_set_bits_3(n))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def count_set_bits(num):\n    \"\"\"\n    Count the set bits of a given number.\n    \"\"\"\n    count = 0\n    for i in range(32):\n        if num & (1 << i):\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print count_set_bits(1)\n    print count_set_bits(2)\n    print count_set_bits(3)\n    print count_set_bits(4)\n    print count_set_bits(5)\n    print count_set_bits(6)\n    print count_set_bits(7)\n    print count_set_bits(8)\n    print count_set_bits(9)\n    print count_set_bits(10)\n    print count_set_bits(11)\n    print count_set_bits(12)\n    print count_set_bits(13)\n    print count_set_bits(14)\n    print count_set_bits(15)\n    print count_set_bits(16)\n    print count_set_bits(17)\n    print count_set_bits(18)\n    print count_set_bits(19)\n    print count_set_bits(20)\n    print count_set_bits(21)\n    print count_set_bits(22)\n    print count_set_bits(23)\n    print count_set_bits(24)\n    print count_set_bits(25)\n    print count_set_bits(26)\n    print count_set_bits(27)\n    print count_set_bits(28)\n    print count_set_bits(29)\n    print count_set_bits(30)\n    print count_set_bits(31)\n    print count_set_bits(32)\n    print count_set_bits(33)\n    print count_set_bits(34)\n    print count_set_bits(35)\n    print count_set_bits(36)\n    print count_set_bits(37)\n    print count_set_bits(38)\n    print count_set_bits(39)\n    print count_set_bits(40)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import unittest\n\ndef count_bits(number):\n    \"\"\"\n    Given a number, return the number of set bits.\n    >>> count_bits(0)\n    0\n    >>> count_bits(1)\n    1\n    >>> count_bits(2)\n    2\n    >>> count_bits(3)\n    2\n    >>> count_bits(4)\n    3\n    >>> count_bits(5)\n    3\n    >>> count_bits(6)\n    3\n    >>> count_bits(7)\n    4\n    >>> count_bits(8)\n    4\n    >>> count_bits(9)\n    4\n    >>> count_bits(10)\n    5\n    >>> count_bits(11)\n    5\n    >>> count_bits(12)\n    5\n    >>> count_bits(13)\n    5\n    >>> count_bits(14)\n    6\n    >>> count_bits(15)\n    6\n    >>> count_bits(16)\n    6\n    >>> count_bits(17)\n    6\n    >>> count_bits(18)\n    6\n    >>> count_bits(19)\n    6\n    >>> count_bits(20)\n    6\n    >>> count_bits(21)\n    6\n    >>> count_bits(22)\n    6\n    >>> count_bits(23)\n    6\n    >>> count_bits(24)\n    6\n    >>> count_bits(25)\n    6\n    >>> count_bits(26)\n    6\n    >>> count_bits(27)\n    6\n    >>> count_bits(28)\n    6\n    >>> count_bits(29)\n    6\n    >>> count_bits(30)\n    6\n    >>> count_bits(31)\n    6\n    >>> count_bits(32)\n    7\n    >>> count_bits(33)\n    7\n    >>> count_bits(34)\n    7\n    >>> count_bits(35)\n    7\n    >>> count_bits(36)\n    7\n    >>> count_bits(37)\n    7\n    >>> count_bits(38)\n    7\n    >>> count_bits(39)\n    7"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def count_bits(x):\n    \"\"\"\n    Input:\n        x: integer\n\n    Output:\n        A list of the number of set bits.\n    \"\"\"\n    count = 0\n    while x:\n        x &= x - 1\n        count += 1\n    return count\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print count_bits(0b1111)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def count_set_bits(n):\n    # write your code here\n    result = 0\n    while n > 0:\n        result += n & 1\n        n >>= 1\n    return result\n\n\nif __name__ == '__main__':\n    print(count_set_bits(1))\n    print(count_set_bits(0b111011))\n    print(count_set_bits(0b111011 + 0b111011))\n    print(count_set_bits(0b111011 + 0b111011 + 0b111011))\n    print(count_set_bits(0b111011 + 0b111011 + 0b111011 + 0b111011))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def count_set_bits(n):\n    count = 0\n    while n > 0:\n        n = n & (n - 1)\n        count = count + 1\n    return count\n\ndef main():\n    print count_set_bits(3)\n    print count_set_bits(3)\n    print count_set_bits(3)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def bits(n):\n    \"\"\"\n    >>> bits(1)\n    1\n    >>> bits(2)\n    2\n    >>> bits(3)\n    1\n    >>> bits(4)\n    2\n    >>> bits(5)\n    3\n    >>> bits(6)\n    2\n    >>> bits(7)\n    3\n    >>> bits(8)\n    4\n    >>> bits(9)\n    3\n    >>> bits(10)\n    4\n    >>> bits(11)\n    3\n    >>> bits(12)\n    4\n    >>> bits(13)\n    4\n    >>> bits(14)\n    4\n    >>> bits(15)\n    4\n    >>> bits(16)\n    5\n    >>> bits(17)\n    5\n    >>> bits(18)\n    5\n    >>> bits(19)\n    5\n    >>> bits(20)\n    5\n    >>> bits(21)\n    5\n    >>> bits(22)\n    5\n    >>> bits(23)\n    5\n    >>> bits(24)\n    5\n    >>> bits(25)\n    5\n    >>> bits(26)\n    5\n    >>> bits(27)\n    5\n    >>> bits(28)\n    5\n    >>> bits(29)\n    5\n    >>> bits(30)\n    5\n    >>> bits(31)\n    5\n    >>> bits(32)\n    6\n    >>> bits(33)\n    6\n    >>> bits(34)\n    6\n    >>> bits(35)\n    6\n    >>> bits(36)\n    6\n    >>> bits(37)\n    6\n    >>> bits(38)\n    6\n    >>> bits(39)\n    6\n    >>> bits(40)\n    6\n    >>> bits(41)\n    6\n    >>> bits(42)\n    6\n    >>> bits(43)\n    6\n    >>> bits(44)\n    6\n    >>> bits(45)\n    6\n    >>> bits(46)\n    6\n    >>> bits(47)\n    6\n    >>> bits(48)\n    6\n    >>> bits(49)\n    6\n    >>> bits(50)\n    6\n    >>>"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def count_bits(num):\n    bits = 0\n    while num:\n        num &= num - 1\n        bits += 1\n    return bits\n\ndef main():\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # nums = [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # nums = [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1]\n    # nums = [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1]\n    nums = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    print(\"The number of set bits is: {}\".format(count_bits(nums)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def count_bits(n):\n    \"\"\"\n    Counts the number of bits set in n.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\nprint(count_bits(0x0011))\nprint(count_bits(0x1111))\nprint(count_bits(0x1011))\nprint(count_bits(0x001110101))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def count_bits(x):\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    return count\n\ndef main():\n    x = int(input())\n    print(count_bits(x))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# You can use the math module to calculate the number of bits.\n# I tried to write this using bitwise operators but didn't get it to work.\n# I got the idea from https://www.youtube.com/watch?v=qe9Q8qhH1_Y\n\n# input: number\n# output: number of set bits\ndef number_of_set_bits(number):\n    # Create a number of bits for the result.\n    bits = 0\n    # Set the number of bits to the number of bits.\n    bits = number\n    # Loop through the bits and set the bit as True if it's True.\n    for i in range(0, bits):\n        if number & 1 == 1:\n            number = number ^ 1\n        else:\n            number = number >> 1\n        bits = bits + 1\n    # Return the number of set bits.\n    return bits\n\n# Example\nprint number_of_set_bits(3)\nprint number_of_set_bits(0)\nprint number_of_set_bits(5)\nprint number_of_set_bits(7)\nprint number_of_set_bits(20)\nprint number_of_set_bits(21)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def count_bits(x):\n    \"\"\"\n    Count the number of bits set in x.\n    \"\"\"\n    count = 0\n    while x:\n        x &= x - 1\n        count += 1\n    return count\n\ndef main():\n    \"\"\"\n    Write a program to count the number of set bits in a given number.\n    \"\"\"\n    for i in range(1, 101):\n        print(count_bits(i))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def count_bits(n):\n    bits = 0\n    while n > 0:\n        n = n & (n - 1)\n        bits += 1\n    return bits\n\n\nprint(count_bits(1))\nprint(count_bits(2))\nprint(count_bits(3))\nprint(count_bits(5))\nprint(count_bits(0))\nprint(count_bits(10))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def count_bits(num):\n    \"\"\"\n    count_bits(num) -> Returns the number of bits set to 1 in num.\n    \"\"\"\n    count = 0\n    for i in range(32):\n        if num & 1:\n            count += 1\n        num >>= 1\n    return count"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def set_bits(number):\n    \"\"\"\n    >>> set_bits(10)\n    2\n    \"\"\"\n    count = 0\n    while number > 0:\n        count += number & 1\n        number >>= 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/count-set-bits/\n\nclass Solution(object):\n    def countSetBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        bits = 0\n        while num > 0:\n            num &= num - 1\n            bits += 1\n        return bits"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from __future__ import print_function\n\ndef count_bits(n):\n    \"\"\"\n    Count the number of bits set in the given number.\n    >>> count_bits(3)\n    2\n    >>> count_bits(10)\n    6\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def count_bits(num):\n    count = 0\n    while num > 0:\n        if num & 1:\n            count += 1\n        num >>= 1\n    return count\n\nif __name__ == \"__main__\":\n    print(count_bits(2))\n    print(count_bits(0b01101))\n    print(count_bits(0b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def count_bits(num):\n    \"\"\"\n    count_bits(num) -> int\n    num is an integer\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\nprint count_bits(5)\n#>>> 3"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def count_bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\nif __name__ == '__main__':\n    n = int(input())\n    print(count_bits(n))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def count_bits(number):\n    \"\"\"\n    Returns the number of bits set to 1 in the number.\n    \"\"\"\n    count = 0\n    while number > 0:\n        count += number & 1\n        number >>= 1\n    return count\n\ndef main():\n    number = 0b110000\n    print count_bits(number)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# Write a function to count set bits of a given number\ndef set_bits(num):\n    # Count the number of 1s in the binary representation\n    # of the number\n    count = 0\n    while num > 0:\n        num = num & (num - 1)\n        count = count + 1\n    return count\n\n# Test Cases\nprint(set_bits(1))\nprint(set_bits(0))\nprint(set_bits(1))\nprint(set_bits(1))\nprint(set_bits(2))\nprint(set_bits(3))\nprint(set_bits(2147483647))\nprint(set_bits(2147483648))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef count_set_bits(n):\n    if n == 0:\n        return 0\n    else:\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\nif __name__ == '__main__':\n    print count_set_bits(0x3)\n    print count_set_bits(0x7)\n    print count_set_bits(0xf)\n    print count_set_bits(0x1a)\n    print count_set_bits(0x3fffff)\n    print count_set_bits(0xffffffff)\n    print count_set_bits(0xffffffffffffffff)\n    print count_set_bits(0xffffffffffffffffffffffffffffffff)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def count_bits(number):\n    \"\"\"\n    Return the number of bits set in the given number.\n    \"\"\"\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\nprint count_bits(0xFFFFFFFF)\nprint count_bits(0x7FFFFFFF)\nprint count_bits(0xFFFFFFF0)\nprint count_bits(0xFFFFFFFFFFFFFFFF)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef count_set_bits(number):\n    \"\"\"\n    Return the number of set bits in a number\n    \"\"\"\n    count = 0\n    while number > 0:\n        if number & 1 == 1:\n            count += 1\n        number >>= 1\n    return count\n\nif __name__ == '__main__':\n    print count_set_bits(2)\n    print count_set_bits(1)\n    print count_set_bits(3)\n    print count_set_bits(2147483647)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def count_set_bits(num):\n    count = 0\n    while num > 0:\n        num &= num - 1\n        count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_set_bits(2))\n    print(count_set_bits(3))\n    print(count_set_bits(4))\n    print(count_set_bits(7))\n    print(count_set_bits(15))\n    print(count_set_bits(256))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def count_bits(n):\n    return bin(n).count('1')\n\nn = 100\nprint(count_bits(n))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "# https://www.geeksforgeeks.org/count-set-bits/\ndef count_set_bits(num):\n    \"\"\"\n    count set bits of a given number\n    :param num: a given number\n    :return: set of bits\n    \"\"\"\n    result = 0\n    for i in range(32):\n        if num & 1 == 1:\n            result += 1\n        num >>= 1\n    return result\n\nif __name__ == '__main__':\n    print(count_set_bits(0xFFFFFFFF))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def count_bits(num):\n    \"\"\"\n    Count the number of bits set in the given number.\n    \"\"\"\n    num = bin(num)\n    return sum(1 for i in num if i == '1')\n\ndef count_bits_2(num):\n    \"\"\"\n    Count the number of bits set in the given number.\n    \"\"\"\n    num = bin(num)\n    return sum(1 for i in num if i == '1')\n\nif __name__ == '__main__':\n    print(count_bits(4))\n    print(count_bits_2(4))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def countSetBits(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    while x:\n        count += (x & 1)\n        x >>= 1\n    return count\n\nif __name__ == \"__main__\":\n    x = int(input())\n    print(countSetBits(x))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "from __future__ import division\n\nclass Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        num = num - 1\n        count = 0\n        while num:\n            count += num & 1\n            num >>= 1\n        return count"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef count_bits(num):\n    bits = 0\n    while num > 0:\n        bits += num & 1\n        num >>= 1\n    return bits\n\n# print(count_bits(0xffff))\n# print(count_bits(0xffffffff))\n# print(count_bits(0x12345678))\n# print(count_bits(0x11111111))\n# print(count_bits(0x55555555))\n# print(count_bits(0xaaaaaaaa))\n# print(count_bits(0x5555555555555555))\n# print(count_bits(0x555555555555555555555555555555))\n# print(count_bits(0x5555555555555555555555555555555555555555555555))\n# print(count_bits(0x
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def count_bits(num):\n    \"\"\"\n    >>> count_bits(3)\n    2\n    >>> count_bits(0)\n    0\n    >>> count_bits(4)\n    1\n    >>> count_bits(5)\n    1\n    >>> count_bits(6)\n    2\n    >>> count_bits(7)\n    1\n    \"\"\"\n    count = 0\n    while num:\n        num &= num - 1\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    Count set bits in a given number.\n    :param n: an integer\n    :return: the number of set bits\n    \"\"\"\n    result = 0\n    while n > 0:\n        n &= n - 1\n        result += 1\n    return result\n\n\nif __name__ == '__main__':\n    assert count_set_bits(0) == 0\n    assert count_set_bits(1) == 0\n    assert count_set_bits(2) == 1\n    assert count_set_bits(3) == 1\n    assert count_set_bits(4) == 2\n    assert count_set_bits(5) == 2\n    assert count_set_bits(6) == 2\n    assert count_set_bits(7) == 2\n    assert count_set_bits(8) == 3\n    assert count_set_bits(9) == 3\n    assert count_set_bits(10) == 3\n    assert count_set_bits(11) == 3\n    assert count_set_bits(12) == 3\n    assert count_set_bits(13) == 3\n    assert count_set_bits(14) == 3\n    assert count_set_bits(15) == 3\n    assert count_set_bits(16) == 4\n    assert count_set_bits(17) == 4\n    assert count_set_bits(18) == 4\n    assert count_set_bits(19) == 4\n    assert count_set_bits(20) == 4\n    assert count_set_bits(21) == 4\n    assert count_set_bits(22) == 4\n    assert count_set_bits(23) == 4\n    assert count_set_bits(24) == 4\n    assert count_set_bits(25) == 4\n    assert count_set_bits(26) == 4\n    assert count_set_bits(27) == 4\n    assert count_set_bits(28) == 4\n    assert count_set_bits(29) == 4\n    assert count_set_bits(30) == 4\n    assert count_set_bits(31) == 4\n    assert count_set_bits(32)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    s = 0\n    while n > 0:\n        if n & 1:\n            s += 1\n        n >>= 1\n    return s\n\nclass Solution:\n    # @param {integer} n\n    # @return {integer}\n    def countSetBits(self, n):\n        # write your code here\n        res = 0\n        while n > 0:\n            res += n & 1\n            n >>= 1\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().countSetBits(3)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def count_bits(x):\n    count = 0\n    while x > 0:\n        count += x & 1\n        x >>= 1\n    return count\n\ndef main():\n    assert count_bits(0) == 0\n    assert count_bits(1) == 1\n    assert count_bits(2) == 2\n    assert count_bits(3) == 1\n    assert count_bits(4) == 2\n    assert count_bits(5) == 1\n    assert count_bits(6) == 2\n    assert count_bits(7) == 1\n    assert count_bits(8) == 3\n    assert count_bits(9) == 1\n    assert count_bits(10) == 2\n    assert count_bits(11) == 1\n    assert count_bits(12) == 2\n    assert count_bits(13) == 1\n    assert count_bits(14) == 2\n    assert count_bits(15) == 1\n    assert count_bits(16) == 3\n    assert count_bits(17) == 1\n    assert count_bits(18) == 2\n    assert count_bits(19) == 1\n    assert count_bits(20) == 2\n    assert count_bits(21) == 1\n    assert count_bits(22) == 2\n    assert count_bits(23) == 1\n    assert count_bits(24) == 3\n    assert count_bits(25) == 1\n    assert count_bits(26) == 2\n    assert count_bits(27) == 1\n    assert count_bits(28) == 2\n    assert count_bits(29) == 1\n    assert count_bits(30) == 2\n    assert count_bits(31) == 1\n    assert count_bits(32) == 3\n    assert count_bits(33) == 1\n    assert count_bits(34) == 2\n    assert count_bits(35) == 1\n    assert count_bits(36) == 2\n    assert count_bits(37) == 1\n    assert count_bits(38) == 2\n    assert count_bits(39) == 1\n    assert count_bits(40) == 2\n    assert count_bits(41) == 1\n    assert count_bits(42"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def countSetBits(n):\n    \"\"\"\n    >>> countSetBits(0)\n    0\n    >>> countSetBits(1)\n    1\n    >>> countSetBits(2)\n    3\n    >>> countSetBits(3)\n    3\n    >>> countSetBits(4)\n    5\n    >>> countSetBits(5)\n    5\n    >>> countSetBits(6)\n    7\n    >>> countSetBits(7)\n    7\n    >>> countSetBits(8)\n    9\n    >>> countSetBits(9)\n    9\n    >>> countSetBits(10)\n    11\n    >>> countSetBits(11)\n    11\n    >>> countSetBits(12)\n    13\n    >>> countSetBits(13)\n    13\n    >>> countSetBits(14)\n    15\n    >>> countSetBits(15)\n    15\n    >>> countSetBits(16)\n    17\n    >>> countSetBits(17)\n    17\n    >>> countSetBits(18)\n    19\n    >>> countSetBits(19)\n    19\n    >>> countSetBits(20)\n    21\n    >>> countSetBits(21)\n    21\n    >>> countSetBits(22)\n    23\n    >>> countSetBits(23)\n    23\n    >>> countSetBits(24)\n    25\n    >>> countSetBits(25)\n    25\n    >>> countSetBits(26)\n    27\n    >>> countSetBits(27)\n    27\n    >>> countSetBits(28)\n    29\n    >>> countSetBits(29)\n    29\n    >>> countSetBits(30)\n    31\n    >>> countSetBits(31)\n    31\n    >>> countSetBits(32)\n    33\n    >>> countSetBits(33)\n    33\n    >>> countSetBits(34)\n    35\n    >>> countSetBits(35)\n    35\n    >>> countSetBits(36)\n    37\n    >>> countSetBits(37)\n    37\n    >>> countSetB"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def count_set_bits(num):\n    \"\"\"\n    >>> count_set_bits(0)\n    0\n    >>> count_set_bits(1)\n    1\n    >>> count_set_bits(2)\n    2\n    >>> count_set_bits(3)\n    1\n    >>> count_set_bits(4)\n    3\n    >>> count_set_bits(5)\n    2\n    >>> count_set_bits(6)\n    3\n    >>> count_set_bits(7)\n    2\n    >>> count_set_bits(8)\n    4\n    >>> count_set_bits(9)\n    3\n    >>> count_set_bits(10)\n    4\n    >>> count_set_bits(11)\n    3\n    >>> count_set_bits(12)\n    4\n    >>> count_set_bits(13)\n    3\n    >>> count_set_bits(14)\n    4\n    >>> count_set_bits(15)\n    4\n    >>> count_set_bits(16)\n    5\n    >>> count_set_bits(17)\n    4\n    >>> count_set_bits(18)\n    5\n    >>> count_set_bits(19)\n    4\n    >>> count_set_bits(20)\n    5\n    >>> count_set_bits(21)\n    4\n    >>> count_set_bits(22)\n    5\n    >>> count_set_bits(23)\n    4\n    >>> count_set_bits(24)\n    5\n    >>> count_set_bits(25)\n    5\n    >>> count_set_bits(26)\n    5\n    >>> count_set_bits(27)\n    5\n    >>> count_set_bits(28)\n    6\n    >>> count_set_bits(29)\n    5\n    >>> count_set_bits(30)\n    6\n    >>> count_set_bits(31)\n    6\n    >>> count_set_bits(32)\n    7\n    >>> count_set_bits(33)\n    6\n    >>> count_set_bits(34)\n    7\n    >>> count_set_bits("
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def count_set_bits(n):\n    # Write your code here\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nif __name__ == '__main__':\n    print count_set_bits(0b100000000)\n    print count_set_bits(0b100000001)\n    print count_set_bits(0b010101010)\n    print count_set_bits(0b000001010)\n    print count_set_bits(0b11111111)\n    print count_set_bits(0b11111110)\n    print count_set_bits(0b1111111111111111)\n    print count_set_bits(0b11111111111111111111111111111111)\n    print count_set_bits(0b11111111111111111111111111111111111111111111111111111111)\n    print count_set_bits(0b11111111111111111111111111111111111111111111111111111111111111111111111111111111)\n    print count_set_bits(0b
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\ndef set_bits(n):\n    \"\"\"\n    >>> set_bits(0)\n    0\n    >>> set_bits(1)\n    1\n    >>> set_bits(2)\n    1\n    >>> set_bits(3)\n    2\n    >>> set_bits(4)\n    2\n    >>> set_bits(5)\n    3\n    >>> set_bits(6)\n    3\n    >>> set_bits(7)\n    4\n    >>> set_bits(8)\n    4\n    >>> set_bits(9)\n    5\n    >>> set_bits(10)\n    5\n    >>> set_bits(11)\n    6\n    >>> set_bits(12)\n    6\n    >>> set_bits(13)\n    7\n    >>> set_bits(14)\n    7\n    >>> set_bits(15)\n    8\n    >>> set_bits(16)\n    8\n    >>> set_bits(17)\n    9\n    >>> set_bits(18)\n    9\n    >>> set_bits(19)\n    10\n    >>> set_bits(20)\n    10\n    >>> set_bits(21)\n    11\n    >>> set_bits(22)\n    11\n    >>> set_bits(23)\n    12\n    >>> set_bits(24)\n    12\n    >>> set_bits(25)\n    13\n    >>> set_bits(26)\n    13\n    >>> set_bits(27)\n    14\n    >>> set_bits(28)\n    14\n    >>> set_bits(29)\n    15\n    >>> set_bits(30)\n    15\n    >>> set_bits(31)\n    16\n    >>> set_bits(32)\n    16\n    >>> set_bits(33)\n    17\n    >>> set_bits(34)\n    17\n    >>> set_bits(35)\n    18\n    >>> set_bits(36)\n    18\n    >>> set_bits(37)\n    19\n    >>> set_bits(38)\n    19\n    >>> set_bits(39)\n    20\n    >>> set_bits(40)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def count_set_bits(num):\n    \"\"\"\n    Count the number of set bits in the given number.\n    \"\"\"\n    count = 0\n    while num:\n        count += num & -num\n        num = num & (num - 1)\n    return count\n\nif __name__ == \"__main__\":\n    assert count_set_bits(0) == 0\n    assert count_set_bits(1) == 1\n    assert count_set_bits(2) == 1\n    assert count_set_bits(3) == 2\n    assert count_set_bits(4) == 2\n    assert count_set_bits(5) == 2\n    assert count_set_bits(6) == 2\n    assert count_set_bits(7) == 2\n    assert count_set_bits(8) == 3\n    assert count_set_bits(9) == 3\n    assert count_set_bits(10) == 3\n    assert count_set_bits(20) == 3\n    assert count_set_bits(50) == 3\n    assert count_set_bits(100) == 4\n    assert count_set_bits(1000) == 5\n    assert count_set_bits(2000) == 5\n    assert count_set_bits(10000) == 6\n    assert count_set_bits(20000) == 6\n    assert count_set_bits(40000) == 7\n    assert count_set_bits(80000) == 8\n    assert count_set_bits(100000) == 9\n    assert count_set_bits(200000) == 10\n    assert count_set_bits(1000000) == 11\n    assert count_set_bits(2000000) == 12\n    assert count_set_bits(10000000) == 13\n    assert count_set_bits(20000000) == 14\n    assert count_set_bits(100000000) == 15\n    assert count_set_bits(200000000) == 16\n    assert count_set_bits(1000000000) == 17\n    assert count_set_bits(2000000000) == 18\n    assert count_set_bits(10000000000) == 19\n    assert count_set_bits(20000000000) == 20\n    assert count_set"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def count_set_bits(x):\n    \"\"\"\n    :param x: an integer\n    :return: the number of set bits of x\n    \"\"\"\n    return sum(bin(x).count('1'))\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_set_bits(1) == 0, \"1 has no set bits\"\n    assert count_set_bits(0) == 0, \"0 has no set bits\"\n    assert count_set_bits(7) == 3, \"7 has 3 set bits\"\n    assert count_set_bits(0b10101) == 2, \"0b10101 has 2 set bits\"\n    assert count_set_bits(0b1011) == 1, \"0b1011 has 1 set bit\"\n    assert count_set_bits(0b1101) == 1, \"0b1101 has 1 set bit\"\n    assert count_set_bits(0b110110111) == 5, \"0b110110111 has 5 set bits\""
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n\nif __name__ == \"__main__\":\n    print(count_set_bits(0))\n    print(count_set_bits(1))\n    print(count_set_bits(2))\n    print(count_set_bits(3))\n    print(count_set_bits(4))\n    print(count_set_bits(5))\n    print(count_set_bits(6))\n    print(count_set_bits(7))\n    print(count_set_bits(8))\n    print(count_set_bits(9))\n    print(count_set_bits(10))\n    print(count_set_bits(11))\n    print(count_set_bits(12))\n    print(count_set_bits(13))\n    print(count_set_bits(14))\n    print(count_set_bits(15))\n    print(count_set_bits(16))\n    print(count_set_bits(17))\n    print(count_set_bits(18))\n    print(count_set_bits(19))\n    print(count_set_bits(20))\n    print(count_set_bits(21))\n    print(count_set_bits(22))\n    print(count_set_bits(23))\n    print(count_set_bits(24))\n    print(count_set_bits(25))\n    print(count_set_bits(26))\n    print(count_set_bits(27))\n    print(count_set_bits(28))\n    print(count_set_bits(29))\n    print(count_set_bits(30))\n    print(count_set_bits(31))\n    print(count_set_bits(32))\n    print(count_set_bits(33))\n    print(count_set_bits(34))\n    print(count_set_bits(35))\n    print(count_"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def count_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nprint count_bits(1)\n#>>> 1\nprint count_bits(2)\n#>>> 2\nprint count_bits(3)\n#>>> 1\nprint count_bits(4)\n#>>> 3\nprint count_bits(5)\n#>>> 1\nprint count_bits(6)\n#>>> 2\nprint count_bits(7)\n#>>> 1\nprint count_bits(8)\n#>>> 3\nprint count_bits(9)\n#>>> 1\nprint count_bits(10)\n#>>> 2\nprint count_bits(11)\n#>>> 1\nprint count_bits(12)\n#>>> 2\nprint count_bits(13)\n#>>> 1\nprint count_bits(14)\n#>>> 2\nprint count_bits(15)\n#>>> 1\nprint count_bits(16)\n#>>> 2\nprint count_bits(17)\n#>>> 1\nprint count_bits(18)\n#>>> 2\nprint count_bits(19)\n#>>> 1\nprint count_bits(20)\n#>>> 2\nprint count_bits(21)\n#>>> 1\nprint count_bits(22)\n#>>> 2\nprint count_bits(23)\n#>>> 1\nprint count_bits(24)\n#>>> 2\nprint count_bits(25)\n#>>> 1\nprint count_bits(26)\n#>>> 2\nprint count_bits(27)\n#>>> 1\nprint count_bits(28)\n#>>> 2\nprint count_bits(29)\n#>>> 1\nprint count_bits(30)\n#>>> 2\nprint count_bits(31)\n#>>> 1\nprint count_bits(32)\n#>>> 2\nprint count_bits(33)\n#>>> 1\nprint count_bits(34)\n#>>> 2\nprint count_bits(35)\n#>>> 1\nprint count_bits(36)\n#>>> 2\nprint count_bits(37)\n#>>> 1\nprint count_bits(38)\n#>>> 2\nprint count_bits(39)\n#>>> 1\nprint count_bits(40)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def count_set_bits(number):\n    \"\"\"\n    Given a number, count the number of set bits in the number.\n    \"\"\"\n    bits = 0\n    while number:\n        bits += number & 1\n        number >>= 1\n    return bits\n\n\nif __name__ == \"__main__\":\n    assert count_set_bits(0) == 0\n    assert count_set_bits(1) == 1\n    assert count_set_bits(2) == 2\n    assert count_set_bits(3) == 1\n    assert count_set_bits(4) == 2\n    assert count_set_bits(5) == 1\n    assert count_set_bits(6) == 2\n    assert count_set_bits(7) == 1\n    assert count_set_bits(8) == 3\n    assert count_set_bits(9) == 2\n    assert count_set_bits(10) == 3\n    assert count_set_bits(12) == 2\n    assert count_set_bits(128) == 32\n    assert count_set_bits(1000) == 33\n    assert count_set_bits(2 ** 32 - 1) == 33\n    assert count_set_bits(2 ** 64 - 1) == 64"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    >>> count_set_bits(0)\n    0\n    >>> count_set_bits(1)\n    0\n    >>> count_set_bits(2)\n    1\n    >>> count_set_bits(3)\n    1\n    >>> count_set_bits(4)\n    2\n    >>> count_set_bits(5)\n    2\n    >>> count_set_bits(6)\n    3\n    >>> count_set_bits(7)\n    3\n    >>> count_set_bits(8)\n    4\n    >>> count_set_bits(9)\n    4\n    \"\"\"\n    bits = 0\n    while n:\n        bits += n & 1\n        n >>= 1\n    return bits"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from __future__ import print_function\n\nclass Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        while num:\n            count += num & 1\n            num = num >> 1\n        return count\n\ndef main():\n    solution = Solution()\n    print(solution.countBits(0))\n    print(solution.countBits(1))\n    print(solution.countBits(2))\n    print(solution.countBits(3))\n    print(solution.countBits(4))\n    print(solution.countBits(5))\n    print(solution.countBits(6))\n    print(solution.countBits(7))\n    print(solution.countBits(8))\n    print(solution.countBits(9))\n    print(solution.countBits(10))\n    print(solution.countBits(11))\n    print(solution.countBits(12))\n    print(solution.countBits(13))\n    print(solution.countBits(14))\n    print(solution.countBits(15))\n    print(solution.countBits(16))\n    print(solution.countBits(17))\n    print(solution.countBits(18))\n    print(solution.countBits(19))\n    print(solution.countBits(20))\n    print(solution.countBits(21))\n    print(solution.countBits(22))\n    print(solution.countBits(23))\n    print(solution.countBits(24))\n    print(solution.countBits(25))\n    print(solution.countBits(26))\n    print(solution.countBits(27))\n    print(solution.countBits(28))\n    print(solution.countBits(29))\n    print(solution.countBits(30))\n    print(solution.countBits(31))\n    print(solution.countB"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def count_set_bits(x):\n    \"\"\"\n    x = 7\n    >>> count_set_bits(x)\n    4\n    \"\"\"\n    # count set bits\n    return sum(x & 1)\n\n\ndef count_set_bits2(x):\n    \"\"\"\n    x = 7\n    >>> count_set_bits2(x)\n    4\n    \"\"\"\n    # count set bits\n    return sum(x & 1)\n\n\ndef count_set_bits3(x):\n    \"\"\"\n    x = 7\n    >>> count_set_bits3(x)\n    4\n    \"\"\"\n    # count set bits\n    return sum(x & 1)\n\n\ndef count_set_bits4(x):\n    \"\"\"\n    x = 7\n    >>> count_set_bits4(x)\n    4\n    \"\"\"\n    # count set bits\n    return sum(x & 1)\n\n\ndef count_set_bits5(x):\n    \"\"\"\n    x = 7\n    >>> count_set_bits5(x)\n    4\n    \"\"\"\n    # count set bits\n    return sum(x & 1)\n\n\ndef count_set_bits6(x):\n    \"\"\"\n    x = 7\n    >>> count_set_bits6(x)\n    4\n    \"\"\"\n    # count set bits\n    return sum(x & 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/set-bits/problem\n#\n# Given an integer, return the number of set bits in the integer.\n#\n# For example, given input 2, return 2.\n#\n# The number of set bits of an integer is the number of positions at which the\n# number's bits are non-zero.\n#\n# For example, given input 4, return 3.\n#\n# Follow up:\n# What if we are not allowed to use the built-in function log()?\n# In this case, the log function should return the largest possible integer less\n# than or equal to the value of the input.\n#\n# Note:\n# The input is guaranteed to fit within the 32-bit signed integer range.\n# The input will be within the range of a 32-bit signed integer.\n#\n# Follow up:\n# What are the runtime and space complexity of your solution?\n#\n#\n#\n#\n#\n\ndef count_set_bits(n):\n    return sum(1 << i for i in range(32) if n & (1 << i))\n\nprint(count_set_bits(4))\nprint(count_set_bits(2))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def count_set_bits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nif __name__ == '__main__':\n    assert count_set_bits(0) == 0\n    assert count_set_bits(1) == 1\n    assert count_set_bits(2) == 2\n    assert count_set_bits(3) == 1\n    assert count_set_bits(4) == 2\n    assert count_set_bits(5) == 1\n    assert count_set_bits(6) == 2\n    assert count_set_bits(7) == 1\n    assert count_set_bits(8) == 2\n    assert count_set_bits(9) == 1\n    assert count_set_bits(10) == 2\n    assert count_set_bits(11) == 1\n    assert count_set_bits(12) == 2\n    assert count_set_bits(13) == 1\n    assert count_set_bits(14) == 2\n    assert count_set_bits(15) == 1\n    assert count_set_bits(16) == 2\n    assert count_set_bits(17) == 1\n    assert count_set_bits(18) == 2\n    assert count_set_bits(19) == 1\n    assert count_set_bits(20) == 2\n    assert count_set_bits(21) == 1\n    assert count_set_bits(22) == 2\n    assert count_set_bits(23) == 1\n    assert count_set_bits(24) == 2\n    assert count_set_bits(25) == 1\n    assert count_set_bits(26) == 2\n    assert count_set_bits(27) == 1\n    assert count_set_bits(28) == 2\n    assert count_set_bits(29) == 1\n    assert count_set_bits(30) == 2\n    assert count_set_bits(31) == 1\n    assert count_set_bits(32) == 2\n    assert count_set_bits(33) == 1"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def count_set_bits(x):\n    bits = 0\n    while x:\n        x &= x - 1\n        bits += 1\n    return bits\n\nif __name__ == \"__main__\":\n    assert count_set_bits(0) == 0\n    assert count_set_bits(1) == 1\n    assert count_set_bits(2) == 2\n    assert count_set_bits(3) == 2\n    assert count_set_bits(4) == 3\n    assert count_set_bits(5) == 3\n    assert count_set_bits(6) == 3\n    assert count_set_bits(7) == 3\n    assert count_set_bits(8) == 4\n    assert count_set_bits(9) == 4\n    assert count_set_bits(10) == 4\n    assert count_set_bits(11) == 4\n    assert count_set_bits(12) == 4\n    assert count_set_bits(13) == 4\n    assert count_set_bits(14) == 4\n    assert count_set_bits(15) == 4\n    assert count_set_bits(16) == 5\n    assert count_set_bits(17) == 5\n    assert count_set_bits(18) == 5\n    assert count_set_bits(19) == 5\n    assert count_set_bits(20) == 5\n    assert count_set_bits(21) == 5\n    assert count_set_bits(22) == 5\n    assert count_set_bits(23) == 5\n    assert count_set_bits(24) == 6\n    assert count_set_bits(25) == 6\n    assert count_set_bits(26) == 6\n    assert count_set_bits(27) == 6\n    assert count_set_bits(28) == 6\n    assert count_set_bits(29) == 6\n    assert count_set_bits(30) == 6\n    assert count_set_bits(31) == 6\n    assert count_set_bits(32) == 7\n    assert count_set_bits(33) == 7\n    assert count_set_bits(34) == 7\n    assert count_set_bits"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from __future__ import print_function\n\ndef count_bits(number):\n    \"\"\"Count the bits in a given number.\n\n    :param number: An integer\n    :return: The number of bits in the number\n    \"\"\"\n\n    bits = 0\n    while number > 0:\n        bits += 1\n        number >>= 1\n\n    return bits\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n\n    print(count_bits(2))\n    print(count_bits(4))\n    print(count_bits(8))\n    print(count_bits(16))\n    print(count_bits(32))\n    print(count_bits(64))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import sys\n\n\ndef count_set_bits(num):\n    \"\"\"\n    Write a function to count the number of set bits in a given number.\n    \"\"\"\n    # the number of bits in a number is equal to the number of 1's in the number\n    num_bits = len(bin(num)) - 2\n\n    # the number of set bits in a number is equal to the number of 1's in the number\n    num_set_bits = num_bits - int(bin(num)[2:])\n\n    # return the number of set bits in the number\n    return num_set_bits\n\n\ndef main():\n    \"\"\"\n    Main function to test the program.\n    \"\"\"\n\n    # test if the number is a negative number\n    num = -1\n\n    # the number of set bits is equal to the number of 1's in the number\n    print(\"The number of set bits is {}\".format(count_set_bits(num)))\n\n    # test if the number is zero\n    num = 0\n\n    # the number of set bits is equal to the number of 1's in the number\n    print(\"The number of set bits is {}\".format(count_set_bits(num)))\n\n    # test if the number is a positive number\n    num = 1\n\n    # the number of set bits is equal to the number of 1's in the number\n    print(\"The number of set bits is {}\".format(count_set_bits(num)))\n\n    # test if the number is a negative number\n    num = -2\n\n    # the number of set bits is equal to the number of 1's in the number\n    print(\"The number of set bits is {}\".format(count_set_bits(num)))\n\n    # test if the number is zero\n    num = 0\n\n    # the number of set bits is equal to the number of 1's in the number\n    print(\"The number of set bits is {}\".format(count_set_bits(num)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "#\n# 1. Implement a function count_bits(n), which takes a positive integer n as input and returns the number of bits set in n.\n#\n# For example, if n = 2, return 1. If n = 5, return 2. If n = 23, return 7.\n#\n# 2. The input number can be in any range.\n#\n\ndef count_bits(n):\n    if n == 0:\n        return 0\n\n    bits = 0\n    while n > 0:\n        bits += 1\n        n >>= 1\n    return bits\n\n#\n# 3. Write a function to check if a number is a power of two.\n#\n# For example, is_power_of_two(0) returns false, is_power_of_two(1) returns true, is_power_of_two(2) returns true,\n# is_power_of_two(3) returns false, is_power_of_two(4) returns true, is_power_of_two(5) returns false,\n# is_power_of_two(6) returns true, is_power_of_two(7) returns false, is_power_of_two(8) returns true,\n# is_power_of_two(9) returns false, is_power_of_two(10) returns true, is_power_of_two(1024) returns true,\n# is_power_of_two(1025) returns false.\n#\n\ndef is_power_of_two(n):\n    return n & (n - 1) == 0\n\n#\n# 4. Write a function to find the largest palindrome made from the product of two 3-digit numbers.\n#\n# For example, find_palindrome(1684) returns 987.\n#\n\ndef find_palindrome(n):\n    return (n * n) >> 1\n\n#\n# 5. Write a function to find the smallest number greater than 1 that is evenly divisible by each of the numbers from 1 to 20.\n#\n# For example, find_divisible_20(4) returns 10.\n#\n\ndef find_divisible_20(n):\n    return (n * n) // 20\n\n#"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# from https://en.wikipedia.org/wiki/Set-theoretical_number\ndef count_set_bits(n):\n    \"\"\"\n    count set bits of a given number\n    :param n: number\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    # n is a positive integer\n    count = 0\n    while n > 0:\n        n &= n - 1\n        count += 1\n    return count\n\n# Sample Input\n# 3\n# Sample Output\n# 3\n\n# Test\n# 3\n# 3"
    }
  ]
}