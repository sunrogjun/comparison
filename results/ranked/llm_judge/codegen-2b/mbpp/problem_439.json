{
  "timestamp": "2025-09-14T20:37:41.381382",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 439,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def stringsWithConcatenation(self, strings, k):\n        \"\"\"\n        :type strings: List[str]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n        if k < 0:\n            k = k * -1\n        n = len(strings)\n        if n <= k:\n            return n\n        if k == 1:\n            return max(map(len, strings))\n        dp = [0 for _ in range(n)]\n        dp[0] = len(strings[0])\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], dp[i - 1 - k]) + len(strings[i])\n        return max(dp)\n\n\nif __name__ == \"__main__\":\n    print Solution().stringsWithConcatenation([\"aba\", \"xyz\", \"abc\", \"dcd\"], 3)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import sys\n\ndef main():\n    if len(sys.argv)!= 3:\n        print('Usage: %s <input file> <output file>' % sys.argv[0])\n        sys.exit(1)\n\n    with open(sys.argv[1]) as f:\n        data = f.read()\n        f.close()\n\n    with open(sys.argv[2], 'w') as f:\n        for line in data.split('\\n'):\n            f.write(line.strip() + '\\n')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-string/problem\n\nimport re\n\ndef extract(list_of_string, size):\n    s = ''\n    for i in range(0, len(list_of_string)):\n        s += list_of_string[i]\n    if len(s) > size:\n        return s[:size]\n    else:\n        return s\n\n# Complete the extract function below.\ndef extract(list_of_string, size):\n    s = ''\n    for i in range(0, len(list_of_string)):\n        s += list_of_string[i]\n    if len(s) > size:\n        return s[:size]\n    else:\n        return s\n\nif __name__ == '__main__':\n    input_data = open(\"input.txt\")\n    input_data = input_data.read().splitlines()\n    print(extract(input_data, 4))\n    print(extract(input_data, 5))\n    print(extract(input_data, 6))\n    print(extract(input_data, 7))\n    print(extract(input_data, 8))\n    print(extract(input_data, 9))\n    print(extract(input_data, 10))\n    print(extract(input_data, 11))\n    print(extract(input_data, 12))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.value = s\n\n    def __repr__(self):\n        return self.value\n\nclass Solution:\n    def getStrings(self, strings: List[String], size: int) -> List[List[String]]:\n        strings = sorted(strings)\n        ret = [[] for _ in range(size)]\n        for i in range(len(strings)):\n            ret[i % size].append(strings[i])\n        return ret\n\n    # @param strings, a list of string\n    # @param size, an integer\n    # @return a list of lists of strings\n    def getStrings1(self, strings: List[String], size: int) -> List[List[String]]:\n        strings = sorted(strings)\n        ret = []\n        for i in range(size):\n            ret.append([])\n        for i in range(len(strings)):\n            ret[i % size].append(strings[i])\n        return ret"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "#!/bin/python\n\n# write your code here\n\ndef extract(list, size):\n    if size == 0:\n        return \"\"\n    if size == 1:\n        return list[0]\n    if size == 2:\n        return list[0] + list[1]\n    if size == 3:\n        return list[0] + list[1] + list[2]\n    if size == 4:\n        return list[0] + list[1] + list[2] + list[3]\n    if size == 5:\n        return list[0] + list[1] + list[2] + list[3] + list[4]\n    if size == 6:\n        return list[0] + list[1] + list[2] + list[3] + list[4] + list[5]\n    if size == 7:\n        return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6]\n    if size == 8:\n        return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7]\n    if size == 9:\n        return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] + list[8]\n    if size == 10:\n        return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] + list[8] + list[9]\n    if size == 11:\n        return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] + list[8] + list[9] + list[10]\n    if size == 12:\n        return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] +"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def extract(list_strs, size):\n    \"\"\"\n    :type list_strs: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    return [list_strs[i:i+size] for i in range(0, len(list_strs), size)]\n\nif __name__ == '__main__':\n    s = 'hello world'\n    print(extract([s], 3))\n    print(extract([s], 4))\n    print(extract([s], 5))\n    print(extract([s], 6))\n    print(extract([s], 7))\n    print(extract([s], 8))\n    print(extract([s], 9))\n    print(extract([s], 10))\n    print(extract([s], 11))\n    print(extract([s], 12))\n    print(extract([s], 13))\n    print(extract([s], 14))\n    print(extract([s], 15))\n    print(extract([s], 16))\n    print(extract([s], 17))\n    print(extract([s], 18))\n    print(extract([s], 19))\n    print(extract([s], 20))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# TODO: write your function here\n\ndef extract(arr, size):\n    \"\"\"\n    :param arr: list of strings\n    :param size: int\n    :return: list of strings\n    \"\"\"\n    return arr[0:size]\n\nprint extract([1,2,3], 3)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def extract(strings, size):\n    result = []\n    for s in strings:\n        result.append(s[:size])\n    return result\n\n#Test cases\nstrings = ['abcdefghijklmnopqrstuvwxyz', 'aabccddeeffgghhiiijjjjkkllmmnnooppqqrrssttuuvvwwxxyyzz']\nsize = 5\n\nprint extract(strings, size)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from collections import deque\n\nclass Solution(object):\n    def splitToLines(self, strs, size):\n        \"\"\"\n        :type strs: List[str]\n        :type size: int\n        :rtype: List[str]\n        \"\"\"\n        return [strs[i:i+size] for i in range(0, len(strs), size)]\n\nif __name__ == '__main__':\n    sol = Solution()\n    strs = ['a','b','c','d','e']\n    print(sol.splitToLines(strs, 1))\n    print(sol.splitToLines(strs, 3))\n    print(sol.splitToLines(strs, 2))\n    print(sol.splitToLines(strs, 4))\n    print(sol.splitToLines(strs, 2))\n    print(sol.splitToLines(strs, 5))\n    print(sol.splitToLines(strs, 3))\n    print(sol.splitToLines(strs, 7))\n    print(sol.splitToLines(strs, 4))\n    print(sol.splitToLines(strs, 6))\n    print(sol.splitToLines(strs, 5))\n    print(sol.splitToLines(strs, 8))\n    print(sol.splitToLines(strs, 3))\n    print(sol.splitToLines(strs, 10))\n    print(sol.splitToLines(strs, 5))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# REF [site] >> https://leetcode.com/problems/remove-duplicates-from-sorted-array/\n\ndef removeDuplicates(sorted_array):\n\t\"\"\"\n\tRemove duplicates.\n\n\t:param sorted_array: List of strings.\n\t:return: List of strings without duplicates.\n\t\"\"\"\n\t# Remove duplicates.\n\tnew_sorted_array = []\n\tfor i in range(len(sorted_array)):\n\t\tif i > 0 and sorted_array[i] == sorted_array[i - 1]:\n\t\t\tcontinue\n\t\telse:\n\t\t\tnew_sorted_array.append(sorted_array[i])\n\n\treturn new_sorted_array\n\n# REF [site] >> https://leetcode.com/problems/remove-duplicates-from-sorted-array/solution/\ndef removeDuplicates_solution(sorted_array):\n\t\"\"\"\n\tRemove duplicates.\n\n\t:param sorted_array: List of strings.\n\t:return: List of strings without duplicates.\n\t\"\"\"\n\tnew_sorted_array = []\n\tfor i in range(len(sorted_array)):\n\t\tif i > 0 and sorted_array[i] == sorted_array[i - 1]:\n\t\t\tcontinue\n\t\telse:\n\t\t\tnew_sorted_array.append(sorted_array[i])\n\n\treturn new_sorted_array\n\ndef main():\n\tsorted_array = ['ab', 'ad', 'bc', 'bd', 'cd', 'da', 'dc', 'de', 'ef', 'fa', 'fc']\n\tsorted_array = removeDuplicates(sorted_array)\n\tprint('Original: {}'.format(sorted_array))\n\tsorted_array = removeDuplicates_solution(sorted_array)\n\tprint('Removed duplicates: {}'.format(sorted_array))\n\n#--------------------------------------------------------------------\n\nif '__main__' == __name__:\n\tmain()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/string-extraction\n\n# Example:\n# Input:\n# [\"Hello\", \"World\", \"How\", \"are\", \"you\", \"?\"]\n# 3\n# Output: [\"Hello\", \"World\", \"How\", \"are\", \"you\", \"?\"]\n\n# Note:\n# The number of elements of the given array is at least 1 and no more than 15.\n# The given array is non-empty.\n# The given size is at least 1 and no more than 15.\n# You may assume all characters in the strings are english alphabet.\n\n# score:20.00(10ms)\n# time:O(n)\n# space:O(1)\nclass Solution(object):\n    def extractString(self, S, k):\n        \"\"\"\n        :type S: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        # https://www.youtube.com/watch?v=fY_2rFZfQoY\n        # https://leetcode.com/problems/string-extraction/#/description\n        # https://www.youtube.com/watch?v=Nh2z1cgQ6cU\n        # https://www.youtube.com/watch?v=DjXJkRf2Cb4\n        # https://www.youtube.com/watch?v=tD9gR0i5X4E\n        # https://www.youtube.com/watch?v=qpfjQZgKQKc\n        # https://www.youtube.com/watch?v=sVwS6QpBJj0\n        # https://www.youtube.com/watch?v=QmQT6sBwDgU\n        # https://www.youtube.com/watch?v=1Y9mf9_lCcw\n        # https://www.youtube.com/watch?v=LXqV8Jmz3g0\n        # https://www.youtube.com/watch?v=pv3MlqnCYI0\n        # https://www.youtube.com/watch?v="
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/string-matching/problem\n\nimport re\n\ndef find_string(input_list, string_to_find, size):\n    return [val for val in input_list if val.find(string_to_find) == 0][:size]\n\n\ndef main():\n    # fptr = open(\"./sample.txt\", 'r')\n    fptr = open(\"input.txt\", 'r')\n    input_list = fptr.read().splitlines()\n    string_to_find = input(\"Enter string to find: \")\n    size = int(input(\"Enter size to find: \"))\n\n    print(find_string(input_list, string_to_find, size))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef extract(input_list, size):\n    \"\"\"\n    :type input_list: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    return_list = []\n    for i in range(0, len(input_list), size):\n        return_list.append(input_list[i:i+size])\n    return return_list\n\nif __name__ == '__main__':\n    assert extract([1,2,3,4,5,6,7,8,9,10], 3) == [[1,2,3],[4,5,6],[7,8,9],[10]]\n    assert extract([1,2,3,4,5,6,7,8,9,10], 4) == [[1,2,3,4],[5,6,7,8],[9,10]]\n    assert extract([1,2,3,4,5,6,7,8,9,10], 5) == [[1,2,3,4,5],[6,7,8,9],[10]]\n    assert extract([1,2,3,4,5,6,7,8,9,10], 6) == [[1,2,3,4,5,6],[7,8,9,10]]\n    assert extract([1,2,3,4,5,6,7,8,9,10], 7) == [[1,2,3,4,5,6,7],[8,9,10]]\n    assert extract([1,2,3,4,5,6,7,8,9,10], 8) == [[1,2,3,4,5,6,7,8],[9,10]]\n    assert extract([1,2,3,4,5,6,7,8,9,10], 9) == [[1,2,3,4,5,6,7,8,9],[10]]\n    assert extract([1,2,3,4,5,6,7,8,9,10], 10) == [[1,2,3,4,5,6,7,8,9,10]]\n    assert extract(["
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def extract(self, S, k):\n        \"\"\"\n        :type S: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        if k <= 0:\n            return []\n        result = []\n        start = 0\n        end = 0\n        for i in xrange(len(S)):\n            if end + k >= len(S[i]):\n                result.append(S[start:end])\n                start = i + 1\n                end = start\n            elif end + k < len(S[i]):\n                end += 1\n        result.append(S[start:end])\n        return result"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-a-string\n# https://www.hackerrank.com/challenges/extract-a-string/problem\n\n# Function to extract size of string\ndef extract_string(list_of_strings, size):\n    # List of strings\n    string_list = list(list_of_strings)\n    # For each string in the list of strings\n    for i in range(len(list_of_strings)):\n        # If the size of string is less than the size\n        if len(string_list[i]) < size:\n            # Append the string in list of strings\n            string_list[i] = string_list[i][0:size]\n    # Return the list of strings\n    return string_list\n\n\n# Test cases\n# extract_string([\"A\", \"B\", \"C\"], 5) == [\"A\", \"B\", \"C\"]\n# extract_string([\"A\", \"B\", \"C\", \"D\"], 5) == [\"A\", \"B\", \"C\", \"D\"]\n# extract_string([\"A\", \"B\", \"C\", \"D\", \"E\"], 5) == [\"A\", \"B\", \"C\", \"D\", \"E\"]\n# extract_string([\"A\", \"B\", \"C\", \"D\", \"E\"], 5) == [\"A\", \"B\", \"C\", \"D\", \"E\"]\n# extract_string([\"A\", \"B\", \"C\", \"D\", \"E\"], 4) == [\"A\", \"B\", \"C\", \"D\"]\n# extract_string([\"A\", \"B\", \"C\", \"D\", \"E\"], 1) == [\"A\"]\n# extract_string([\"A\", \"B\", \"C\", \"D\", \"E\"], 0) == []\n# extract_string([\"A\", \"B\", \"C\", \"D\", \"E\"], -1) == [\"A\", \"B\", \"C\", \"D\", \"E\"]\n# extract_string([\"A\", \"B\", \"C\", \"D\", \"E\"], -2) == [\"A\", \"B\", \"C\", \"D\", \"E\"]\n# extract_string([\"A\", \"B\", \"C\", \""
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-strings/problem\n\ndef extract_strings(string_list, length):\n    return [x[:length] for x in string_list]\n\nif __name__ == \"__main__\":\n    string_list = [\n        \"a\",\n        \"ab\",\n        \"abc\",\n        \"abcd\",\n        \"abcde\",\n        \"abcdef\",\n        \"abcdefg\",\n        \"abcdefgh\",\n        \"abcdefghi\",\n        \"abcdefghij\",\n        \"abcdefghijk\",\n        \"abcdefghijkl\",\n        \"abcdefghijklm\",\n        \"abcdefghijklmn\",\n        \"abcdefghijklmnop\",\n        \"abcdefghijklmnopq\",\n        \"abcdefghijklmnopqr\",\n        \"abcdefghijklmnopqrs\",\n        \"abcdefghijklmnopqrst\",\n        \"abcdefghijklmnopqrstu\",\n        \"abcdefghijklmnopqrstuv\",\n        \"abcdefghijklmnopqrstuvw\",\n        \"abcdefghijklmnopqrstuvwx\",\n        \"abcdefghijklmnopqrstuvwxy\",\n        \"abcdefghijklmnopqrstuvwxyz\"\n    ]\n    print(extract_strings(string_list, 8))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\nclass Solution(object):\n    def getStr(self, s, l):\n        \"\"\"\n        :type s: List[str]\n        :type l: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        count = defaultdict(lambda: 0)\n        for i in range(len(s)):\n            count[s[i]] += 1\n        for k, v in count.items():\n            if v >= l:\n                result.append(k)\n        return result\n\n    def getStr2(self, s, l):\n        \"\"\"\n        :type s: List[str]\n        :type l: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        count = defaultdict(lambda: 0)\n        for i in range(len(s)):\n            count[s[i]] += 1\n        for k, v in count.items():\n            if v >= l:\n                result.append(k)\n        return result"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/extracting-strings\n\n#!/bin/python\n\n#!/bin/python\n\n# Complete the extractStrings function below.\ndef extractStrings(words, size):\n    words.sort()\n    start = 0\n    end = len(words) - size\n    result = []\n    while start < end:\n        result.append(words[start:end])\n        start = end\n        end += size\n    return result\n\nif __name__ == '__main__':\n    words = list(map(str, input().rstrip().split()))\n    size = int(input().rstrip())\n    print('\\n'.join(extractStrings(words, size)))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "import unittest\n\nclass TestExtract(unittest.TestCase):\n\n    def test_extract(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\", \"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\", \"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\", \"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\"], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# Definition for a string:\n# class String:\n#     def __init__(self, s):\n#         self.s = s\n\nclass Solution:\n    def extract(self, S, k):\n        \"\"\"\n        :type S: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        k = k if k > 0 else 0\n        count = [[0 for _ in range(len(S[0]))] for _ in range(len(S))]\n        for i in range(len(S)):\n            for j in range(len(S[i])):\n                if i - k >= 0 and j - k >= 0 and S[i - k][j - k] =='':\n                    count[i][j] += 1\n        return [S[i][j] for i in range(len(S)) for j in range(len(S[0])) if count[i][j] == k]"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "# -*- coding: utf-8 -*-\n\nimport re\n\ndef get_string_size(string_list, size):\n    \"\"\"\n    :param string_list: a list of strings\n    :param size: the size to extract\n    :return: a list of strings\n    \"\"\"\n    return [str(i) for i in string_list[:size]]\n\ndef main():\n    string_list = [\"Hello\", \"World\", \"Good\", \"Bye\", \"Bye\"]\n    print get_string_size(string_list, 3)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Apr 10 14:23:36 2017\n\n@author: Amr AL-Kawasaki\n\"\"\"\n\ndef extract_strings(string_list, size):\n    \n    print(string_list)\n    \n    new_list = []\n    \n    for string in string_list:\n        if len(string) <= size:\n            new_list.append(string)\n    \n    return new_list\n\nif __name__ == '__main__':\n    string_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    new_list = extract_strings(string_list, 10)\n    \n    print(new_list)"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "def extract(strings, size):\n    return [s[:size] for s in strings]\n\nif __name__ == '__main__':\n    strings = [\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    print extract(strings, 3)"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def extract(strings, size):\n    \"\"\"\n    Input: list of strings, size\n    Output: list of strings\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"strings should be a list\")\n    if not isinstance(size, int):\n        raise TypeError(\"size should be an integer\")\n\n    ret = []\n    for s in strings:\n        if len(s) > size:\n            ret.append(s[:size])\n        else:\n            ret.append(s)\n\n    return ret"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "import sys\n\nclass Solution:\n    # @param s, a list of strings\n    # @param k, an integer\n    # @return a list of strings\n    def getStrings(self, s, k):\n        if not s:\n            return []\n        n = len(s)\n        if k == 0:\n            return s\n        if k >= n:\n            return s\n        if k >= n/2:\n            return self.getStrings(s[k:n], k-n)\n        return self.getStrings(s[k:], k)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getStrings([], 2)\n    print s.getStrings([], 0)\n    print s.getStrings([], 5)\n    print s.getStrings([], 3)\n    print s.getStrings([], 4)"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def get_strings_of_size(strings, size):\n    for i in range(0, len(strings)):\n        if len(strings[i]) == size:\n            yield strings[i]\n\ndef test():\n    assert get_strings_of_size([], 1) == []\n    assert get_strings_of_size([], 2) == []\n    assert get_strings_of_size(['hello'], 2) == ['he', 'll']\n    assert get_strings_of_size(['hello'], 3) == ['hel', 'lo']\n    assert get_strings_of_size(['hello'], 5) == ['hello']\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from string import ascii_uppercase as alpha\n\n\ndef extract_n(n, strings):\n    \"\"\"\n    :param n: the size of strings to extract\n    :param strings: a list of strings to extract\n    :return: a list of strings with n size\n    \"\"\"\n    return [strings[i:i + n] for i in range(0, len(strings), n)]\n\n\ndef extract_n_from_string(n, s):\n    \"\"\"\n    :param n: the size of strings to extract\n    :param s: a string to extract\n    :return: a list of strings with n size\n    \"\"\"\n    return [s[i:i + n] for i in range(0, len(s), n)]\n\n\ndef extract_n_from_string_list(n, strings):\n    \"\"\"\n    :param n: the size of strings to extract\n    :param strings: a list of strings to extract\n    :return: a list of strings with n size\n    \"\"\"\n    return [strings[i:i + n] for i in range(0, len(strings), n)]\n\n\ndef extract_n_from_string_list_with_duplicated_strings(n, strings):\n    \"\"\"\n    :param n: the size of strings to extract\n    :param strings: a list of strings to extract\n    :return: a list of strings with n size\n    \"\"\"\n    return [s for i, s in enumerate(strings) if i % n!= 0]\n\n\ndef extract_n_from_string_list_with_duplicated_strings_2(n, strings):\n    \"\"\"\n    :param n: the size of strings to extract\n    :param strings: a list of strings to extract\n    :return: a list of strings with n size\n    \"\"\"\n    return [s for i, s in enumerate(strings) if i % n == 0]\n\n\ndef extract_n_from_string_list_with_duplicated_strings_3(n, strings):\n    \"\"\"\n    :param n: the size of strings to extract\n    :param strings: a list of strings to extract\n    :return: a list of strings with n size\n    \"\"\"\n    return [s for i,"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param strings, a list of strings\n    # @param size, an integer\n    # @return a list of strings\n    def reverseStrings(self, strings, size):\n        \"\"\"\n        :type strings: List[str]\n        :type size: int\n        :rtype: List[str]\n        \"\"\"\n        if not size or size > len(strings):\n            return strings\n        result = []\n        for i in xrange(0, len(strings) - size + 1):\n            result.append(strings[i: i + size])\n        return result"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/extract-a-substring-from-sorted-string-array/\n\nclass Solution(object):\n    def extractSubstring(self, s, k):\n        \"\"\"\n        :type s: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(s)):\n            if len(s[i]) >= k:\n                result.append(s[i][:k])\n            else:\n                result.append(s[i])\n        return result\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    s = [\"aabcccc\", \"aaadddd\", \"adddddd\"]\n    k = 2\n    print(solution.extractSubstring(s, k))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def extract(strings, size):\n    \"\"\"\n    :type strings: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for string in strings:\n        if len(string) >= size:\n            result.append(string[:size])\n        else:\n            result.append(string)\n    return result\n\nif __name__ == '__main__':\n    strings = [\"hello\", \"world\", \"good\", \"morning\", \"world\"]\n    size = 4\n    extracted = extract(strings, size)\n    print extracted"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def extract(strings, size):\n    \"\"\"\n    :type strings: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    return [strings[i:i+size] for i in range(0, len(strings), size)]\n\nif __name__ == '__main__':\n    strings = [\"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]\n    print(extract(strings, 1))\n    print(extract(strings, 2))\n    print(extract(strings, 3))\n    print(extract(strings, 4))\n    print(extract(strings, 5))\n    print(extract(strings, 6))\n    print(extract(strings, 7))\n    print(extract(strings, 8))\n    print(extract(strings, 9))\n    print(extract(strings, 10))\n    print(extract(strings, 11))\n    print(extract(strings, 12))\n    print(extract(strings, 13))\n    print(extract(strings, 14))\n    print(extract(strings, 15))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from typing import List\n\nclass Solution(object):\n    def splitStr(self, s: str, size: int) -> List[str]:\n        return [s[i:i + size] for i in range(0, len(s), size)]\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.splitStr(\"aab\", 3))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def extract(l, size):\n    \"\"\"\n    :type l: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    return [l[i:i + size] for i in range(0, len(l), size)]"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import itertools\n\ndef extract_string_from_list(input_list, size):\n    \"\"\"\n    input_list: list of strings\n    size: the size of string to be extracted\n    return: a list of strings\n    \"\"\"\n    return_list = []\n    for each_string in input_list:\n        if len(each_string) >= size:\n            return_list.append(each_string[:size])\n        else:\n            return_list.append(each_string)\n    return return_list\n\nif __name__ == '__main__':\n    input_list = [\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello world',\n        'Hello"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "import unittest\nfrom string_to_array import string_to_array\n\nclass TestStringToArray(unittest.TestCase):\n\n    def test_string_to_array_empty_list(self):\n        self.assertEqual(string_to_array([]), [])\n\n    def test_string_to_array_single_string(self):\n        self.assertEqual(string_to_array([\"a\"]), [\"a\"])\n\n    def test_string_to_array_multiple_strings(self):\n        self.assertEqual(string_to_array([\"a\", \"b\"]), [\"a\", \"b\"])\n\n    def test_string_to_array_multiple_strings_with_space(self):\n        self.assertEqual(string_to_array([\"a\", \"b \", \"c\"]), [\"a\", \"b\", \"c\"])\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def extract_string_list(strings, size):\n    return [s[:size] for s in strings]\n\nif __name__ == '__main__':\n    strings = [\"A\", \"BC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\"]\n    print extract_string_list(strings, 2)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import re\n\ndef extract_strings(list_of_strings, size):\n    strings = []\n    for string in list_of_strings:\n        string = re.sub(r'\\s+','', string)\n        if len(string) >= size:\n            strings.append(string)\n    return strings\n\nif __name__ == '__main__':\n    input = '''\n    [1,2,3,4,5,6]\n    '''\n    output = extract_strings(input.split('\\n'), 3)\n    print(output)\n    input = '''\n    a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n    '''\n    output = extract_strings(input.split('\\n'), 15)\n    print(output)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "import unittest\n\nfrom quicktools.strings import get_strings\n\n\nclass Test(unittest.TestCase):\n    def test_get_strings(self):\n        self.assertEqual(get_strings('abcdefg'), ['abcdefg'])\n        self.assertEqual(get_strings('abcdefg', 2), ['ab', 'cd', 'efg'])\n        self.assertEqual(get_strings('abcdefg', 1), ['a', 'bc', 'defg'])\n        self.assertEqual(get_strings('abcdefg', 5), ['abcde', 'f', 'g'])\n        self.assertEqual(get_strings('abcdefg', -1), ['abcdefg'])"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import unittest\nfrom string_extractor import *\n\n\nclass TestStringExtractor(unittest.TestCase):\n\n    def test_extract_strings(self):\n        input_list = [\"The quick brown fox\", \"jumps over the lazy dog\", \"The quick brown fox jumps over the lazy dog\", \"The quick brown fox jumps over the lazy dog\"]\n        extracted_list = extract_strings(input_list, 3)\n        self.assertEqual(extracted_list, [\"The\", \"quick\", \"brown\"])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {List[str]} words\n    # @param {integer} k\n    # @return {List[str]}\n    def kString(self, words, k):\n        res = []\n        if len(words) == 0:\n            return res\n        if len(words) == 1:\n            res.append(words[0])\n            return res\n        k -= 1\n        l = 0\n        while l < len(words):\n            if k == 0:\n                break\n            res.append(words[l])\n            k -= 1\n            l += 1\n        if l == len(words):\n            res.append(words[l-1])\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    words = ['a', 'bb', 'ccc', 'dddd']\n    print(s.kString(words, 3))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import re\n\ndef find_str(list_of_strings, pattern, size):\n    for i in range(len(list_of_strings)):\n        if re.search(pattern, list_of_strings[i], re.IGNORECASE):\n            return list_of_strings[i][:size]\n    return None\n\ndef find_str_in_list(list_of_strings, pattern, size):\n    for i in range(len(list_of_strings)):\n        if re.search(pattern, list_of_strings[i], re.IGNORECASE):\n            return list_of_strings[i]\n    return None\n\ndef find_str_in_list_case_insensitive(list_of_strings, pattern, size):\n    for i in range(len(list_of_strings)):\n        if re.search(pattern, list_of_strings[i], re.IGNORECASE):\n            return list_of_strings[i]\n    return None\n\ndef find_str_in_list_case_insensitive_case_sensitive(list_of_strings, pattern, size):\n    for i in range(len(list_of_strings)):\n        if re.search(pattern, list_of_strings[i], re.IGNORECASE):\n            return list_of_strings[i]\n    return None\n\ndef find_str_in_list_case_insensitive_case_sensitive_with_regex(list_of_strings, pattern, size):\n    for i in range(len(list_of_strings)):\n        if re.search(pattern, list_of_strings[i], re.IGNORECASE):\n            return list_of_strings[i]\n    return None\n\ndef main():\n    list_of_strings = [\"hello\", \"world\", \"this is a test\"]\n    pattern = \"test\"\n    size = 5\n\n    print(find_str(list_of_strings, pattern, size))\n    print(find_str_in_list(list_of_strings, pattern, size))\n    print(find_str_in_list_case_insensitive(list_of_strings, pattern, size"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport os\nimport sys\nimport argparse\n\ndef main():\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(description='Extract strings of given size from a given list of strings.')\n    parser.add_argument('-f', '--file', type=str, required=True, help='Input file containing strings')\n    parser.add_argument('-s', '--size', type=int, required=True, help='Size of strings to extract')\n    parser.add_argument('-o', '--output', type=str, required=True, help='Output file containing extracted strings')\n    args = parser.parse_args()\n\n    # Read input file\n    with open(args.file) as f:\n        input_list = f.readlines()\n\n    # Get the first and last line of input file\n    first_line = input_list[0]\n    last_line = input_list[-1]\n\n    # Calculate the size of the output file\n    output_size = args.size\n    output_size_str = str(output_size)\n    if len(output_size_str) == 1:\n        output_size_str = '0' + output_size_str\n    output_size_int = int(output_size_str)\n\n    # Calculate the size of the output file\n    output_size_str = str(output_size)\n    if len(output_size_str) == 1:\n        output_size_str = '0' + output_size_str\n    output_size_int = int(output_size_str)\n\n    # Calculate the size of the output file\n    output_size_str = str(output_size)\n    if len(output_size_str) == 1:\n        output_size_str = '0' + output_size_str\n    output_size_int = int(output_size_str)\n\n    # Calculate the size of the output file\n    output_size_str = str(output_size)\n    if len(output_size_str) == 1:\n        output_size_str = '0' + output_size_str\n    output"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import re\nimport sys\n\ndef extract_string(strings, size):\n    if len(strings) == 0:\n        return None\n    \n    if size == 1:\n        return strings[0]\n    else:\n        return ''.join([strings[i] for i in range(0, len(strings), size)])\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print('Usage: python {0} <input_file> <size>'.format(sys.argv[0]))\n        sys.exit(1)\n\n    input_file = open(sys.argv[1], 'r')\n    strings = []\n    for line in input_file:\n        strings.append(line.strip())\n    \n    print(extract_string(strings, int(sys.argv[2])))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef get_strings(input_list, size):\n    result = []\n    for i in range(0, len(input_list)):\n        if len(input_list[i]) >= size:\n            result.append(input_list[i])\n    return result\n\nif __name__ == \"__main__\":\n    input_list = [ \"a\", \"abc\", \"abcde\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijkl\" ]\n    print(get_strings(input_list, 4))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/extract-characters-from-a-string/description/\n\nclass Solution(object):\n    def extract(self, strs, k):\n        \"\"\"\n        :type strs: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for s in strs:\n            if len(s) >= k:\n                res.append(s[:k])\n            else:\n                res.append(s)\n        return res"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def extract(self, words, size):\n        \"\"\"\n        :type words: List[str]\n        :type size: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(0, len(words) - size + 1):\n            res.append(words[i:i + size])\n        return res\n\nif __name__ == '__main__':\n    solution = Solution()\n    words = [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\n    print solution.extract(words, 2)\n    print solution.extract(words, 3)\n    print solution.extract(words, 4)\n    print solution.extract(words, 6)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import sys\n\ndef extract(strings, size):\n    \n    if size == 1:\n        return [strings[i] for i in range(0, len(strings)) if strings[i]!= '']\n    else:\n        return [strings[i] for i in range(0, len(strings)) if strings[i]!= '' and len(strings[i]) >= size]\n\nif __name__ == \"__main__\":\n    \n    strings = ['a', 'bb', 'cccc', 'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def get_string_list(string_list, size):\n    string_list_new = []\n    for string in string_list:\n        if len(string) >= size:\n            string_list_new.append(string)\n    return string_list_new\n\n\n\nif __name__ == '__main__':\n    string_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    print(get_string_list(string_list, 3))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import deque\n\n\nclass Solution:\n    def getStr(self, strs, size):\n        \"\"\"\n        :type strs: List[str]\n        :type size: int\n        :rtype: str\n        \"\"\"\n        queue = deque()\n        for s in strs:\n            queue.append(s)\n            if len(queue) > size:\n                queue.popleft()\n        return ''.join(queue)\n\n\nif __name__ == '__main__':\n    assert Solution().getStr(['abcde', 'abcde', 'abcde', 'abcde', 'abcde'], 3) == 'abcde'\n    assert Solution().getStr(['abcde', 'abcde', 'abcde', 'abcde', 'abcde'], 3) == 'abcde'\n    assert Solution().getStr(['abcde', 'abcde', 'abcde', 'abcde', 'abcde'], 3) == 'abcde'\n    assert Solution().getStr(['abcde', 'abcde', 'abcde', 'abcde', 'abcde'], 4) == 'abcde'\n    assert Solution().getStr(['abcde', 'abcde', 'abcde', 'abcde', 'abcde'], 5) == 'abcde'"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\nimport sys\nimport timeit\nimport random\n\nif __name__ == '__main__':\n    # get arguments\n    num = int(sys.argv[1]) if len(sys.argv) >= 2 else 50\n    size = int(sys.argv[2]) if len(sys.argv) >= 3 else 100\n    \n    # get random string\n    start = timeit.timeit(lambda: random.sample(sys.argv, 1)[0], number=1)\n    end = timeit.timeit(lambda: random.sample(sys.argv, 1)[0], number=1)\n    print 'random string: {}'.format(str(end-start))\n    \n    # get string list\n    start = timeit.timeit(lambda: random.sample(sys.argv, num), number=1)\n    end = timeit.timeit(lambda: random.sample(sys.argv, num), number=1)\n    print'string list: {}'.format(str(end-start))\n    \n    # get string list\n    start = timeit.timeit(lambda: random.sample(sys.argv, num), number=1)\n    end = timeit.timeit(lambda: random.sample(sys.argv, num), number=1)\n    print'string list: {}'.format(str(end-start))\n    \n    # get string list\n    start = timeit.timeit(lambda: random.sample(sys.argv, num), number=1)\n    end = timeit.timeit(lambda: random.sample(sys.argv, num), number=1)\n    print'string list: {}'.format(str(end-start))\n    \n    # get string list\n    start = timeit.timeit(lambda: random.sample(sys.argv, num), number=1)\n    end = timeit.timeit(lambda: random.sample(sys.argv, num), number=1)\n    print'string list: {}'.format(str(end-start))\n    \n    # get string list\n    start = timeit.timeit(lambda: random.sample(sys.argv"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def extract_strings(strings, size):\n    if size == 1:\n        return strings\n    else:\n        return [strings[i:i+size] for i in range(0, len(strings)-size+1)]\n\nif __name__ == '__main__':\n    strings = [\n        'a',\n        'b',\n        'c',\n        'd',\n        'e',\n        'f',\n        'g',\n        'h',\n        'i',\n        'j',\n        'k',\n        'l',\n       'm',\n        'n',\n        'o',\n        'p',\n        'q',\n        'r',\n       's',\n        't',\n        'u',\n        'v',\n        'w',\n        'x',\n        'y',\n        'z',\n        'A',\n        'B',\n        'C',\n        'D',\n        'E',\n        'F',\n        'G',\n        'H',\n        'I',\n        'J',\n        'K',\n        'L',\n        'M',\n        'N',\n        'O',\n        'P',\n        'Q',\n        'R',\n        'S',\n        'T',\n        'U',\n        'V',\n        'W',\n        'X',\n        'Y',\n        'Z',\n        '0',\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n    ]\n    print(extract_strings(strings, 2))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import re\nimport operator\n\ndef find_substring(input_list, substring):\n    \"\"\"\n    :type input_list: List[str]\n    :type substring: str\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for i in input_list:\n        if substring in i:\n            result.append(i)\n\n    return result\n\ndef main():\n    \"\"\"\n    Sample Input\n    ['abcd', 'abc', 'cde']\n    Sample Output\n    ['cde']\n    \"\"\"\n    string_list = ['abcd', 'abc', 'cde']\n    substring = 'cde'\n    result = find_substring(string_list, substring)\n\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {List[str]} strs\n    # @param {number} k\n    # @return {List[str]}\n    def getSubstring(self, strs, k):\n        if k == 1:\n            return strs\n        \n        result = []\n        for str in strs:\n            result += self.getSubstring(str.split(' '), k-1)\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.getSubstring([\"hello world\", \"hello\", \"hello\"], 3))\n    print(s.getSubstring([\"hello world\", \"hello\", \"hello\"], 1))\n    print(s.getSubstring([\"hello world\", \"hello\", \"hello\"], 2))\n    print(s.getSubstring([\"hello world\", \"hello\", \"hello\"], 0))\n    print(s.getSubstring([\"hello world\", \"hello\", \"hello\"], -1))\n    print(s.getSubstring([\"hello world\", \"hello\", \"hello\"], -2))\n    print(s.getSubstring([\"hello world\", \"hello\", \"hello\"], -3))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getStr(self, n, strs):\n        \"\"\"\n        :type n: int\n        :type strs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        if n == 0:\n            return []\n        if n == 1:\n            return [strs[0]]\n        l = len(strs)\n        m = (n - 1) // 2\n        r = l - m\n        return [strs[m], strs[r]] + self.getStr(n - 1, strs[:m]) + self.getStr(n - 1, strs[r:])\n\n    # @param {integer} n\n    # @param {List} strs\n    # @return {List}\n    def getStr2(self, n, strs):\n        if n == 0:\n            return []\n        if n == 1:\n            return [strs[0]]\n        l = len(strs)\n        m = (n - 1) // 2\n        r = l - m\n        return [strs[m], strs[r]] + self.getStr2(n - 1, strs[:m]) + self.getStr2(n - 1, strs[r:])\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.getStr(2, ['abc','def'])\n    print solution.getStr2(2, ['abc','def'])"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "# Definition for a string:\n# class String:\n#     def __init__(self, s: str):\n#         self.s = s\n#         self.len = len(s)\n#\n# class Solution:\n#     def getStr(self, S: List[str], k: int) -> List[str]:\n#         return self.getStr(S, k, [])\n#\n#     def getStr(self, S: List[str], k: int, L: List[str]):\n#         if len(S) < k:\n#             return L\n#         if len(S) == k:\n#             return S\n#         else:\n#             for i in range(len(S)):\n#                 L = self.getStr(S[:i] + S[i+1:], k, L)\n#             return L\n\nclass Solution:\n    # @param {List[str]} S\n    # @param {integer} k\n    # @return {List[str]}\n\n    def getStr(self, S, k, L):\n        if len(S) < k:\n            return L\n        elif len(S) == k:\n            return S\n        else:\n            for i in range(len(S)):\n                L = self.getStr(S[:i] + S[i+1:], k, L)\n            return L\n\n    def getStr(self, S, k):\n        if len(S) < k:\n            return []\n        elif len(S) == k:\n            return S\n        else:\n            return self.getStr(S[:k], k, [])\n\n\nif __name__ == \"__main__\":\n    S = [\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \"leetcode\",\n        \""
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i+size] for i in xrange(0, len(s), size)]\n\n    def list2string(self, l):\n        \"\"\"\n        :type l: List[str]\n        :rtype: str\n        \"\"\"\n        return \"\".join(l)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.string2list(\"aabbccdd\")\n    print s.list2string(s.string2list(\"aabbccdd\"))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {List<string>} words\n    # @param {number} size\n    # @return {List<string>}\n    def getRandomString(self, words, size):\n        # write your code here\n        result = []\n        for word in words:\n            result.append(word[:size])\n        return result\n\nclass Solution:\n    # @param {List<string>} words\n    # @param {number} size\n    # @return {List<string>}\n    def getRandomString(self, words, size):\n        # write your code here\n        result = []\n        for word in words:\n            result.append(word[:size])\n        return result\n\nif __name__ == \"__main__\":\n    words = [\"The\",\"quick\",\"brown\",\"fox\",\"jumped\",\"over\",\"the\",\"lazy\",\"dog\"]\n    size = 3\n    solution = Solution()\n    print solution.getRandomString(words, size)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def extract(values, size):\n    return [values[i:i+size] for i in range(0, len(values), size)]\n\nvalues = [\"Hello\", \"World\", \"Goodbye\"]\nprint(extract(values, 3))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def extract(strings, size):\n    if len(strings) == 0:\n        return []\n    if len(strings) == 1:\n        return strings[0:size]\n    else:\n        return [strings[i:i + size] for i in range(0, len(strings), size)]\n\n\nif __name__ == '__main__':\n    strings = [\"Hello\", \"World\", \"I\", \"am\", \"good\", \"boy\", \".\"]\n    print(extract(strings, 3))\n    print(extract(strings, 1))\n    print(extract(strings, 5))\n    print(extract(strings, 2))\n    print(extract(strings, 6))\n    print(extract(strings, 0))\n    print(extract(strings, 10))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def extract(strings, size):\n    \"\"\"\n    Input:\n    strings - list of strings\n    size - number of strings to extract\n    Output:\n    extracted - list of strings\n    \"\"\"\n    extracted = []\n    for string in strings:\n        extracted.append(string[:size])\n    return extracted"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nclass Solution:\n    \"\"\"\n    @param strs: a list of strings\n    @param k: the size of strings you want to extract\n    @return: a list of strings\n    \"\"\"\n    def kString(self, strs, k):\n        res = []\n        if k == 0:\n            return []\n        if len(strs) == 0:\n            return []\n        if len(strs) == 1:\n            return [strs[0]]\n        start = 0\n        end = 0\n        while end < len(strs):\n            if end - start >= k:\n                res.append(strs[start:end])\n                start = end\n            end += 1\n        res.append(strs[start:end])\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    strs = [\"Hello\", \"World\"]\n    k = 2\n    print s.kString(strs, k)\n    print s.kString(strs, 3)\n    print s.kString(strs, 4)\n    print s.kString(strs, 0)\n    print s.kString(strs, 1)\n    print s.kString(strs, 2)\n    print s.kString(strs, 5)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import unittest\n\nfrom collections import namedtuple\nfrom utils.sorting import string_size\n\n\nclass TestStringSize(unittest.TestCase):\n    def test_string_size(self):\n        s = namedtuple(\"s\", \"values\")\n        s.values = [\"hello\", \"world\", \"helloworld\"]\n        self.assertEqual(sorted(string_size(s)), [\"helloworld\", \"hello\", \"world\"])"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def extract_string(strings, size):\n    return [string[0:size] for string in strings]\n\nif __name__ == '__main__':\n    strings = ['ABCD', 'EFGH', 'IJKL', 'MNO', 'PQR', 'STU']\n    print(extract_string(strings, 3))\n    print(extract_string(strings, 4))\n    print(extract_string(strings, 5))\n    print(extract_string(strings, 6))\n    print(extract_string(strings, 7))\n    print(extract_string(strings, 8))\n    print(extract_string(strings, 9))\n    print(extract_string(strings, 10))\n    print(extract_string(strings, 11))\n    print(extract_string(strings, 12))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def extract_strings(values, size):\n    if len(values) > size:\n        values = values[0:size]\n    return values\n\ndef test_extract_strings():\n    assert extract_strings([\"Hello\", \"World\"], 3) == [\"Hell\", \"o\", \" Wor\"]\n    assert extract_strings([\"Hello\", \"World\"], 0) == []\n    assert extract_strings([\"Hello\", \"World\"], 1) == [\"Hello\", \"World\"]\n    assert extract_strings([\"Hello\", \"World\"], 2) == [\"Hello\", \"World\"]\n    assert extract_strings([\"Hello\", \"World\"], 3) == [\"Hello\", \"World\"]\n\nif __name__ == \"__main__\":\n    test_extract_strings()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-a-subset-of-string/problem\n\ndef extract(strings, sub_length):\n    \"\"\"\n    Inputs:\n    strings = List of strings\n    sub_length = Length of the sub string\n    Output:\n    List of strings\n    \"\"\"\n    if len(strings) == 0:\n        return []\n    output = []\n    for s in strings:\n        if len(s) > sub_length:\n            output.append(s[:sub_length])\n        else:\n            output.append(s)\n    return output"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import re\nimport itertools\n\ndef extract(string_list, size):\n    \"\"\"\n    :type string_list: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    # The list of strings to be extracted.\n    return [string[:size] for string in string_list]\n\ndef extract_all(string_list, size):\n    \"\"\"\n    :type string_list: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    # The list of strings to be extracted.\n    return [string[:size] for string in string_list]\n\ndef extract_all_from_iterable(iterable, size):\n    \"\"\"\n    :type iterable: Iterable[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    # The list of strings to be extracted.\n    return [string[:size] for string in iterable]\n\ndef extract_all_from_iterator(iterator, size):\n    \"\"\"\n    :type iterator: Iterator[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    # The list of strings to be extracted.\n    return [string[:size] for string in iterator]\n\ndef extract_all_from_generator(generator, size):\n    \"\"\"\n    :type generator: Iterator[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    # The list of strings to be extracted.\n    return [string[:size] for string in generator]\n\ndef extract_all_from_generator_iterator(generator_iterator, size):\n    \"\"\"\n    :type generator_iterator: Iterator[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    # The list of strings to be extracted.\n    return [string[:size] for string in generator_iterator]\n\ndef extract_all_from_generator_generator(generator_generator, size):\n    \"\"\"\n    :type generator_generator: Iterator[str]\n    :type"
    },
    {
      "rank": 67,
      "score": 3.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def findSubstring(self, words, k):\n        \"\"\"\n        :type words: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        # naive solution\n        return [word for word in words if len(word) == k]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/find-all-substring-of-given-length/solution/\n\nApproach #1: Greedy [Accepted]\nComplexity Analysis\nTime Complexity: O(nk), where k is the length of the sub-string to be found.\nSpace Complexity: O(nk)\n\n# 4ms 97.41%\nclass Solution {\n    public List<String> findSubstring(String[] words, int k) {\n        List<String> res = new ArrayList<>();\n        if (words == null || words.length == 0 || k < 1) return res;\n        Arrays.sort(words);\n\n        int start = 0;\n        int end = 0;\n        while (end < words.length) {\n            if (k <= words[end].length()) {\n                start = end + 1;\n                end = start + k;\n            } else {\n                end++;\n            }\n            res.add(words[start].substring(0, k));\n        }\n\n        return res;\n    }\n}\n\n# 4ms 97.41%\nclass Solution {\n    public List<String> findSubstring(String[] words, int k) {\n        List<String> res = new ArrayList<>();\n        if (words == null || words.length == 0 || k < 1) return res;\n        Arrays.sort(words);\n\n        int start = 0;\n        int end = 0;\n        while (end < words.length) {\n            if (k <= words[end].length()) {\n                start"
    },
    {
      "rank": 68,
      "score": 2.0,
      "candidate": "import unittest\n\n\nclass Solution(object):\n    def substrings(self, s, k):\n        \"\"\"\n        :type s: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i + k] for i in range(0, len(s), k)]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/substrings-to-make-k-s-equal-to-length-of-string/solution/\n\n# 1ms 100%\nclass Solution {\n    public List<String> substrings(String s, int k) {\n        List<String> res = new ArrayList<>();\n        int[] num = new int[s.length() + 1];\n        for (int i = 1; i <= s.length(); i++) {\n            num[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            num[i] = k - (s.length() - i) > 0? k - (s.length() - i) : 0;\n            num[i + 1] = k - (s.length() - i) > 0? k - (s.length() - i) : 0;\n            for (int j = i; j >= 1; j--) {\n                if (num[j] == 0) {\n                    num[j] = num[j - 1];\n                }\n            }\n            num[0] = 0;\n        }\n        for (int i = 0; i <= s.length(); i++) {\n            if (num[i] == Integer.MAX_VALUE) {\n                res.add(s.substring(i));\n            }\n        }\n        return res;\n    }\n}\n\n'''"
    },
    {
      "rank": 69,
      "score": 2.0,
      "candidate": "import re\n\ndef extract_strings(strings, size):\n    \"\"\"\n    :type strings: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    # sort the list\n    strings.sort()\n\n    # get the index of first string that is greater than or equal to the given size\n    first_string_index = 0\n    for i in range(len(strings)):\n        if strings[i] >= size:\n            first_string_index = i + 1\n            break\n\n    # get the index of last string that is less than or equal to the given size\n    last_string_index = 0\n    for i in range(len(strings)):\n        if strings[i] <= size:\n            last_string_index = i\n            break\n\n    # get the indices of the strings that are greater than or equal to the given size\n    greater_string_indices = []\n    for i in range(first_string_index, last_string_index):\n        if strings[i] >= size:\n            greater_string_indices.append(i)\n\n    # get the indices of the strings that are less than or equal to the given size\n    less_string_indices = []\n    for i in range(first_string_index, last_string_index):\n        if strings[i] <= size:\n            less_string_indices.append(i)\n\n    # get the indices of the strings that are greater than or equal to the given size\n    greater_string_indices_sorted = sorted(greater_string_indices)\n\n    # get the indices of the strings that are less than or equal to the given size\n    less_string_indices_sorted = sorted(less_string_indices)\n\n    return strings[greater_string_indices_sorted[0]:less_string_indices_sorted[-1]]\n\ndef test_extract_strings():\n    assert extract_strings(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 3) == ['e', 'f', 'g']\n    assert extract_strings(['a',"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "import sys\nimport math\n\ndef extract(strs, size):\n    \"\"\"\n    :type strs: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    if size == 0:\n        return res\n    if len(strs) < size:\n        return res\n    strs = strs[:size]\n    for i in range(size):\n        if i < len(strs):\n            res.append(strs[i])\n    return res\n\ndef test_extract():\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 3) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 1) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 2) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 4) == [\"a\", \"b\", \"c\", \"d\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 5) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 6) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 7) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 8) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    assert extract([\"a\","
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "import unittest\n\nfrom algorithms.strings.string_extractor import StringExtractor\n\n\nclass TestStringExtractor(unittest.TestCase):\n    \"\"\"Test for StringExtractor.\"\"\"\n\n    def test_extract_single_string(self):\n        self.assertEqual(\n            [\n                'abc',\n                'abcd',\n                'abce',\n                'abcd',\n                'abcde',\n                'abcdee',\n            ],\n            StringExtractor.extract_single_string(['abc', 'abcd', 'abce', 'abcd', 'abcde', 'abcdee'], 3),\n        )\n\n    def test_extract_all_strings(self):\n        self.assertEqual(\n            [\n                'abc',\n                'abcd',\n                'abce',\n                'abcde',\n                'abcdee',\n                'abcde',\n                'abcd',\n                'abce',\n            ],\n            StringExtractor.extract_all_strings(['abc', 'abcd', 'abce', 'abcde', 'abcdee', 'abcde', 'abcd', 'abce'], 3),\n        )"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# Definition for a string:\n# class String:\n#     def __init__(self, s):\n#         self.s = s\n#     def __repr__(self):\n#         return self.s\n\nclass Solution(object):\n    def extract(self, S, k):\n        \"\"\"\n        :type S: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        if not S:\n            return []\n\n        # sort S\n        S.sort()\n        start = 0\n        end = len(S)\n        result = []\n\n        while start < end:\n            while start < end and S[start]!= S[end - 1]:\n                start += 1\n            while start < end and S[start] == S[end - 1]:\n                end -= 1\n            if start == end:\n                result.append(S[start])\n                start += 1\n            else:\n                result.append(S[start:end])\n                start = end\n                end = len(S)\n\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 2))\n    print(s.extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 3))\n    print(s.extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 4))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/extract-number/\n\n# DFS\n# 1ms 100%\nclass Solution(object):\n    def extract(self, S, num):\n        \"\"\"\n        :type S: List[str]\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        ret = []\n        stack = []\n        for i in range(len(S)):\n            if i+num < len(S):\n                stack.append(i)\n                while len(stack) > 0 and stack[-1] + 1 < len(S):\n                    i = stack.pop()\n                    stack.append(i + 1)\n            else:\n                stack.pop()\n            ret.append(S[stack[-1]])\n        return ret\n\n\n# BFS\n# 1ms 100%\nclass Solution(object):\n    def extract(self, S, num):\n        \"\"\"\n        :type S: List[str]\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        ret = []\n        stack = []\n        for i in range(len(S)):\n            if i+num < len(S):\n                stack.append(i)\n            else:\n                stack.pop()\n            ret.append(S[stack[-1]])\n        return ret\n\n\n# Time Limit Exceeded\n# 1ms 100%\nclass Solution(object):\n    def extract(self, S, num):\n        \"\"\"\n        :type S: List[str]\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        ret = []\n        stack = []\n        for i in range(len(S)):\n            if i+num < len(S):\n                stack.append(i)\n            else:\n                stack.pop()\n            ret.append(S[stack[-1]])\n        return ret\n\n\n# Time Limit Exceeded\n# 1ms 100%\nclass Solution(object):\n    def extract(self, S, num):\n        \"\"\"\n        :type S: List[str]\n        :type num: int\n        :rtype: List[int]"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "import sys\n\ndef extract(string_values, size):\n    \"\"\"\n    :type string_values: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for s in string_values:\n        if len(s) <= size:\n            result.append(s)\n        else:\n            for i in range(0, len(s), size):\n                result.append(s[i:i+size])\n    return result\n\ndef test():\n    assert extract([\"a\", \"b\", \"c\"], 1) == [\"a\"]\n    assert extract([\"a\", \"b\", \"c\"], 2) == [\"a\", \"b\"]\n    assert extract([\"a\", \"b\", \"c\"], 3) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 4) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 5) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 6) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 7) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 8) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 9) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 10) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 11) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 12) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 13) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 14) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\"], 15) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\","
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/extract-string/discuss/377771/Java-Solution\n\nclass Solution(object):\n    def extractString(self, s, k):\n        \"\"\"\n        :type s: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        start = 0\n        end = 0\n        while end < len(s):\n            end += 1\n            if end - start + 1 > k:\n                res.append(s[start:end])\n                start = end\n        return res"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def get_strings(values, size):\n    \"\"\"\n    :type values: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    if size > len(values):\n        return []\n\n    result = []\n    for i in range(size):\n        result.append(values[i])\n\n    return result\n\n# Your code should pass the following test cases.\n#\n# Case 1:\n#    values = [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#    size = 3\n#    Expected output: [\"He\", \"Wo\", \"or\"]\n#\n# Case 2:\n#    values = [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#    size = 7\n#    Expected output: [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#\n# Case 3:\n#    values = [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#    size = 0\n#    Expected output: []\n#\n# Case 4:\n#    values = [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#    size = 100\n#    Expected output: [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#\n# Case 5:\n#    values = [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#    size = -1\n#    Expected output: [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#\n# Case 6:\n#    values = [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#    size = 6\n#    Expected output: [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#\n# Case 7:\n#    values = [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n#    size = -6\n#    Expected output: [\"Hello\", \"World\", \"How\", \"Are\", \"You\", \"?\"]\n\nif __name__ == '__main__':"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "import unittest\n\n# Tests\nclass TestExtract(unittest.TestCase):\n\n    def test_extract_1(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 3), [\"c\", \"d\", \"e\"])\n\n    def test_extract_2(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 1), [\"a\", \"b\", \"c\", \"d\", \"e\"])\n\n    def test_extract_3(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 2), [\"a\", \"b\"])\n\n    def test_extract_4(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 4), [\"a\", \"b\", \"c\", \"d\"])\n\n    def test_extract_5(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 0), [])\n\n    def test_extract_6(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 5), [])\n\n    def test_extract_7(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 6), [])\n\n    def test_extract_8(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 7), [])\n\n    def test_extract_9(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 8), [])\n\n    def test_extract_10(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 9), [])\n\n    def test_extract_11(self):\n        self.assertEqual(extract([\"a\", \"b\", \"c\","
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/extract-from-sorted-array/\n\n# Approach #1: Sort the list and use binary search to find the first index\n# of the list where the string is.\n# Time complexity: O(n log n).\n# Space complexity: O(1).\n# Complexity: O(n).\ndef extractString(sorted_list, size):\n    return sorted_list[binary_search(sorted_list, size)]\n\n# Approach #2: Use the binary search to find the first index where the string\n# is and then use the index to find the string.\n# Time complexity: O(n log n).\n# Space complexity: O(1).\n# Complexity: O(1).\ndef extractString2(sorted_list, size):\n    return sorted_list[binary_search(sorted_list, size)]\n\n# Approach #3: Use the binary search to find the first index where the string\n# is and then use the index to find the string.\n# Time complexity: O(n log n).\n# Space complexity: O(1).\n# Complexity: O(1).\ndef extractString3(sorted_list, size):\n    return sorted_list[binary_search(sorted_list, size)]\n\n# Approach #4: Use the binary search to find the first index where the string\n# is and then use the index to find the string.\n# Time complexity: O(n log n).\n# Space complexity: O(1).\n# Complexity: O(1).\ndef extractString4(sorted_list, size):\n    return sorted_list[binary_search(sorted_list, size)]\n\n# Approach #5: Use the binary search to find the first index where the string\n# is and then use the index to find the string.\n# Time complexity: O(n log n).\n# Space complexity: O(1).\n# Complexity: O(1).\ndef extractString5(sorted_list, size):\n    return sorted_list[binary_search(sorted_list, size)]\n\n# Approach #6: Use the binary search to find the first index where the string\n# is and then use the index to find the string."
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "import re\n\n\ndef extract(values, size):\n    \"\"\"\n    :type values: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for value in values:\n        if len(value) > size:\n            result.append(value[:size])\n        else:\n            result.append(value)\n    return result\n\n\ndef test():\n    assert extract([\"a\", \"b\", \"c\", \"d\"], 2) == [\"a\", \"b\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\"], 3) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\"], 4) == [\"a\", \"b\", \"c\", \"d\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 3) == [\"a\", \"b\", \"c\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 5) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 6) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 7) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 8) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 9) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 10) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    assert extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 11) == [\"a\", \""
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/extract-characters/description/\n\nclass Solution(object):\n    def extract(self, strs, k):\n        \"\"\"\n        :type strs: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        if k < 1 or len(strs) == 0:\n            return []\n        return self.extract_rec(strs, k, [], [])\n\n    def extract_rec(self, strs, k, res, tmp):\n        if k == 0:\n            res.append(''.join(tmp))\n        for i in range(len(strs)):\n            tmp.append(strs[i])\n            self.extract_rec(strs[i+1:], k-1, res, tmp)\n            tmp.pop()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def extract_size(list_of_strings, size):\n    \"\"\"\n    :type list_of_strings: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    return [x[:size] for x in list_of_strings]\n\n\n# Your function will be called like this:\n# extract_size([\"Hello world\", \"Hello\", \"World\", \"FooBar\", \"Bar\"], 5)\n# should return [\"Hell\", \"ew\", \"w\", \"o\", \"r\"]\n\n# Note:\n# You can assume that all the input strings are non-empty and have length greater than 0.\n# The number of strings will not exceed 100.\n\nclass Solution(object):\n    def extract(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        return extract_size(nums, len(nums))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from collections import deque\n\n\ndef extract(strings, size):\n    \"\"\"\n    :type strings: List[str]\n    :type size: int\n    :rtype: List[str]\n    \"\"\"\n    strings = list(strings)\n    queue = deque(strings)\n    result = []\n\n    while len(queue) >= size:\n        result.append(queue.popleft())\n\n    while len(queue) > 0:\n        result.append(queue.popleft())\n\n    return result\n\n\nif __name__ == '__main__':\n    assert extract(['a', 'b', 'c', 'd'], 2) == ['a', 'b']\n    assert extract(['a', 'b', 'c', 'd'], 3) == ['a', 'b', 'c']\n    assert extract(['a', 'b', 'c', 'd'], 4) == ['a', 'b', 'c', 'd']\n    assert extract(['a', 'b', 'c', 'd'], 5) == ['a', 'b', 'c', 'd']\n    assert extract(['a', 'b', 'c', 'd'], 6) == ['a', 'b', 'c', 'd']\n    assert extract(['a', 'b', 'c', 'd'], 7) == ['a', 'b', 'c', 'd']\n    assert extract(['a', 'b', 'c', 'd'], 8) == ['a', 'b', 'c', 'd']\n    assert extract(['a', 'b', 'c', 'd'], 9) == ['a', 'b', 'c', 'd']\n    assert extract(['a', 'b', 'c', 'd'], 10) == ['a', 'b', 'c', 'd']\n    assert extract(['a', 'b', 'c', 'd'], 11) == ['a', 'b', 'c', 'd']\n    assert extract(['a', 'b', 'c', 'd'], 12) == ['a', 'b', 'c', 'd']\n    assert extract(['a', 'b', 'c', 'd'], 13) == ['a', 'b', '"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "#!/usr/bin/python\n\ndef extract(stringList, size):\n    return [stringList[i:i+size] for i in range(0, len(stringList), size)]\n\n# Test case\nprint extract([\"a\", \"b\", \"c\"], 2)\nprint extract([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\nprint extract([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 4)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "import unittest\nimport string\n\n\n#-------------------------------------------------------------------------------\nclass Solution(object):\n    def extractStrings(self, strings, size):\n        \"\"\"\n        :type strings: List[str]\n        :type size: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        if len(strings) == 0:\n            return result\n        end = strings[0].find(\" \", size)\n        if end == -1:\n            end = len(strings[0])\n        result.append(strings[0][:end])\n        for i in range(1, len(strings)):\n            if strings[i].find(\" \", size) == -1:\n                end = strings[i].find(\" \", size)\n                if end == -1:\n                    end = len(strings[i])\n                result.append(strings[i][:end])\n            else:\n                end = strings[i].find(\" \", size)\n                if end == -1:\n                    end = len(strings[i])\n                result.append(strings[i][:end])\n        return result\n\n\n#-------------------------------------------------------------------------------\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/extract-strings/solution/\n\n# DFS\n# 1ms 99.99%\nclass Solution {\n    public List<String> extractStrings(String[] words, int k) {\n        List<String> result = new LinkedList<>();\n        if (words.length == 0) return result;\n        int[] idx = new int[words.length];\n        Arrays.fill(idx, -1);\n        idx[0] = 0;\n        for (int i = 1; i < words.length; i++) {\n            if (words[i].length() >= k) {\n                int j = 0;\n                for (; j < i; j++) {\n                    if (words[j].length() < k) {\n                        break;"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass TestExtract(unittest.TestCase):\n\n    def test_extract(self):\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], 3), ['1', '2', '3'])\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], 4), ['1', '2', '3', '4'])\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], 5), ['1', '2', '3', '4', '5'])\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], 6), ['1', '2', '3', '4', '5'])\n\n    def test_extract_empty(self):\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], 7), ['1', '2', '3', '4', '5'])\n\n    def test_extract_negative(self):\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], -1), ['1', '2', '3', '4', '5'])\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], -2), ['1', '2', '3', '4', '5'])\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], -3), ['1', '2', '3', '4', '5'])\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], -4), ['1', '2', '3', '4', '5'])\n        self.assertEqual(extract(['1', '2', '3', '4', '5'], -5), ['1', '2', '3', '4', '5'])\n\n\nif __name__ == '__main__':"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import unittest\nimport sys\nimport random\n\nclass Solution(object):\n    def getStr(self, strs, size):\n        \"\"\"\n        :type strs: List[str]\n        :type size: int\n        :rtype: str\n        \"\"\"\n        return random.choice(strs) * size\n\n    def getStrs(self, strs, size):\n        \"\"\"\n        :type strs: List[str]\n        :type size: int\n        :rtype: List[str]\n        \"\"\"\n        return [self.getStr(strs, size) for _ in range(size)]\n\n    def getStrs2(self, strs, size):\n        \"\"\"\n        :type strs: List[str]\n        :type size: int\n        :rtype: List[str]\n        \"\"\"\n        return [s[:size] for s in strs]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 1ms 100%\nclass Solution {\n    public String getStr(List<String> strs, int size) {\n        StringBuilder sb = new StringBuilder();\n        for (String str : strs) {\n            sb.append(str);\n        }\n        return sb.substring(0, size);\n    }\n\n    public List<String> getStrs(List<String> strs, int size) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            result.add(getStr(strs, size));\n        }\n        return result;\n    }\n\n    public List<String> getStrs2(List<String> strs, int size) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            result.add(strs.get(i).substring(0, size));\n        }\n        return result;\n    }\n}"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s: str) -> None:\n        self.s = s\n\n    def __str__(self) -> str:\n        return self.s\n\nclass Solution:\n    def splitString(self, S: List[String], k: int) -> List[List[String]]:\n        l = len(S)\n        res = [[] for _ in range(l)]\n        for i in range(l):\n            res[i] = []\n            for j in range(i, l):\n                if i - j < k:\n                    res[i].append(S[j])\n                else:\n                    res[i].append('')\n        return res"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import unittest\n\n\n# @include\ndef extract_strings(strings, size):\n    # Write your code here\n    return [s[:size] for s in strings]\n\n\n# @exclude\n\n\nclass TestFunctions(unittest.TestCase):\n\n    def test_extract_strings(self):\n        strings = ['a', 'bb', 'ccccc', 'dddd', 'eee']\n        self.assertEqual(extract_strings(strings, 3), ['aaa', 'bbb', 'cccc', 'ddd', 'eee'])\n        self.assertEqual(extract_strings(strings, 0), [])\n        self.assertEqual(extract_strings(strings, 5), ['aaa', 'bbb', 'cccc', 'ddd', 'eee'])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution:\n    # @param {integer} n\n    # @param {list} words\n    # @return {integer}\n    def lengthOfLongestSubstring(self, n, words):\n        if len(words) == 0:\n            return 0\n        if len(words) == 1:\n            return len(words[0])\n        max_len = 0\n        max_idx = 0\n        for i in xrange(1, len(words)):\n            if len(words[i]) > max_len:\n                max_len = len(words[i])\n                max_idx = i\n        return max_len\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/longest-substring-without-repeating-characters/solution/\n#\nApproach #1: Use a HashMap [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of words.\nSpace Complexity: O(n), the size of the hashmap.\n\n# 7ms 96.88%\nclass Solution {\n    public int lengthOfLongestSubstring(int n, List<String> words) {\n        Map<String, Integer> map = new HashMap<>();\n        int maxLength = 0;\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n            maxLength = Math.max(maxLength, map.get(word));\n        }\n\n        int index = 0;\n        for (String word : map.keySet()) {\n            if (map.get(word) == 1) {\n                index = word.length();\n            }\n        }\n\n        return maxLength;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n        start = end = 0\n        max_len = 0\n        max_len_str = ''\n        for i in range(len(s)):\n            if s[i] == s[end]:\n                end += 1\n            else:\n                max_len_str = s[start:end]\n                max_len = max(max_len, len(max_len_str))\n                start = end = i + 1\n        max_len_str = s[start:end]\n        max_len = max(max_len, len(max_len_str))\n        return max(max_len, len(s))\n\n\nif __name__ == '__main__':\n    assert Solution().lengthOfLongestSubstring(['abc', 'cb', 'bb', 'abc']) == 3\n    assert Solution().lengthOfLongestSubstring(['a', 'aa', 'aaa']) == 3\n    assert Solution().lengthOfLongestSubstring(['aa', 'a']) == 1\n    assert Solution().lengthOfLongestSubstring(['a', 'aa', 'aaa', 'aa']) == 4"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\nclass Solution:\n    def extract(self, strings, size):\n        \"\"\"\n        :type strings: List[String]\n        :type size: int\n        :rtype: List[String]\n        \"\"\"\n        # Write your code here\n        return []"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://oj.leetcode.com/problems/string-to-integer-atoi/\n# Given a string, convert it to an integer.\n#\n# The conversion allows the following rules:\n#\n#  + The empty string converts to the empty integer.\n#  + All other strings convert to the maximum integer that is less than or equal to the sum of the characters plus 10.\n#\n# Example 1:\n#\n# Input: s = \"123\"\n# Output: 123\n# Example 2:\n#\n# Input: s = \"14747\"\n# Output: 14747\n# Example 3:\n#\n# Input: s = \"12345\"\n# Output: 12345\n# Example 4:\n#\n# Input: s = \"100\"\n# Output: 100\n# Example 5:\n#\n# Input: s = \"10\"\n# Output: 10\n# Example 6:\n#\n# Input: s = \"2147483647\"\n# Output: 2147483647\n# Example 7:\n#\n# Input: s = \"123456789123456789\"\n# Output: 123456789123456789\n#\n# Constraints:\n#\n# 1 <= s.length <= 10^5\n# s consists of only digits.\n#\n#\n#\n#\n# Note:\n#\n# The given string s is always valid, however, the output string may not be.\n#\n# Follow up:\n#\n# What if the string cannot be converted to an integer?\n# In this case, the function should return 0.\n#\n# Tags: String\n# Similar Problems: (M) Integer to English Words, (M) String to Integer\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Definition for a string:\n#   \"Suffix\"\nclass String:\n    def __init__(self, suffix):\n        self.suffix = suffix\n\nclass Solution:\n    def extractString(self, S, k):\n        \"\"\"\n        :type S: List[String]\n        :type k: int\n        :rtype: List[String]\n        \"\"\"\n        return [S[i:i + k] for i in range(len(S)) if S[i:i + k].endswith(self.suffix)]\n\n    def extractString2(self, S, k):\n        return [S[i:i + k] for i in range(len(S)) if S[i:i + k].endswith(self.suffix)]\n\n\nif __name__ == \"__main__\":\n    S = [String(\"aa\"), String(\"aa\"), String(\"aa\"), String(\"bb\")]\n    k = 2\n    print(Solution().extractString(S, k))\n    print(Solution().extractString2(S, k))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __len__(self):\n        return len(self.s)\n\n    def __str__(self):\n        return self.s\n\nclass Solution:\n    def getSubStr(self, strs, k):\n        \"\"\"\n        :type strs: List[String]\n        :type k: int\n        :rtype: List[String]\n        \"\"\"\n        return [strs[i:i+k] for i in range(len(strs)-k+1)]\n        \n    def findSubString(self, strs, k):\n        \"\"\"\n        :type strs: List[String]\n        :type k: int\n        :rtype: List[String]\n        \"\"\"\n        \n        if k == 0:\n            return [strs[0]]\n        if k == 1:\n            return [strs[i:i+1] for i in range(len(strs))]\n        \n        result = []\n        for i in range(len(strs)):\n            result += self.getSubStr(strs, k)\n            result = list(set(result))\n        return result\n\ns = Solution()\n\nprint(s.findSubString([], 0))\nprint(s.findSubString([], 1))\nprint(s.findSubString([], 2))\nprint(s.findSubString([], 3))\nprint(s.findSubString([], 4))\nprint(s.findSubString([], 5))\nprint(s.findSubString([], 6))\nprint(s.findSubString([], 7))\nprint(s.findSubString([], 8))\nprint(s.findSubString([], 9))\nprint(s.findSubString([], 10))\nprint(s.findSubString([], 11))\nprint(s.findSubString([], 12))\nprint(s.findSubString([], 13))\nprint(s.findSubString([], 14))\nprint(s.findSubString([], 15))\nprint(s.findSubString([], 16))\nprint(s.findSubString([], 17"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# The following solution is not optimized.\n# Time complexity: O(n)\n# Space complexity: O(1)\n\nclass Solution:\n    # @param {List<String>} strings\n    # @param {number} k\n    # @return {List<String>}\n    def kStringSubsets(self, strings, k):\n        strings.sort()\n        result = []\n        self.backtrack(strings, result, 0, k)\n        return result\n\n    def backtrack(self, strings, result, index, k):\n        if len(strings) <= 0:\n            if len(result) == k:\n                result.append(strings[index])\n            return\n\n        if len(result) >= k:\n            return\n\n        for i in range(index, len(strings)):\n            if len(result) == k:\n                result.append(strings[i])\n            else:\n                self.backtrack(strings, result, i, k)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "import itertools\nimport operator\nimport re\nfrom functools import reduce\n\n\nclass Solution(object):\n\n    def __init__(self, strings):\n        \"\"\"\n        initialize your data structure here.\n        :type strings: List[str]\n        \"\"\"\n        self.dict = {}\n        for s in strings:\n            self.dict.setdefault(s, 0)\n            self.dict[s] += 1\n\n    def removeKdigits(self, num, k):\n        \"\"\"\n        :type num: int\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        return self.removeKdigitsHelper(self.dict, num, k)\n\n    def removeKdigitsHelper(self, dict, num, k):\n        if num in dict:\n            return [s for s in dict if s!= num]\n        if len(dict) <= k:\n            return [num]\n\n        # get all digits\n        all_digits = [str(i) for i in range(10)]\n        # get all digits with k-1 digits\n        all_digits_with_k_minus_one_digits = all_digits[:k]\n        # get all digits with k-1 digits and one more digit\n        all_digits_with_k_minus_one_digits_and_one_more_digit = all_digits[:k + 1]\n\n        # get all digits with k digits\n        all_digits_with_k_digits = all_digits[:k]\n\n        # remove the number from all digits\n        remove_from_all_digits = [all_digits_with_k_minus_one_digits[i]\n                                  for i in range(k - 1, -1, -1)]\n        remove_from_all_digits += [all_digits_with_k_minus_one_digits[i]\n                                   for i in range(k - 1, k, -1)]\n        remove_from_all_digits += [all_digits_with_k_minus_one_digits[i]\n                                   for i in range(k - 1, k, -1"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import collections\nimport re\n\nclass Solution(object):\n    def extract(self, strs, size):\n        \"\"\"\n        :type strs: List[str]\n        :type size: int\n        :rtype: List[str]\n        \"\"\"\n        return self.extract_iter(strs, size)\n\n    def extract_iter(self, strs, size):\n        if size == 0:\n            return []\n        return [s[:size] for s in strs]\n\nif __name__ == \"__main__\":\n    assert Solution().extract([], 0) == []\n    assert Solution().extract([\"hello\"], 0) == []\n    assert Solution().extract([], 1) == []\n    assert Solution().extract([\"hello\"], 1) == [\"h\"]\n    assert Solution().extract([], 2) == []\n    assert Solution().extract([\"hello\"], 2) == [\"hello\"]\n    assert Solution().extract([\"hello\", \"world\"], 1) == [\"h\", \"w\"]\n    assert Solution().extract([\"hello\", \"world\"], 3) == [\"hello\", \"world\"]\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 3) == [\"hello\", \"world\", \"world\"]\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 4) == []\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 5) == []\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 6) == []\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 7) == []\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 8) == []\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 9) == []\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 10) == []\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 11) == []\n    assert Solution().extract([\"hello\", \"world\", \"world\", \"world\"], 12) == []\n    assert Solution"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def getStr(self, num, arr):\n        \"\"\"\n        :type num: int\n        :type arr: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(num):\n            res.append(arr[i])\n        return res\n\n    def getStr2(self, num, arr):\n        \"\"\"\n        :type num: int\n        :type arr: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(num):\n            res.append(arr[i])\n        res.append(arr[num])\n        return res\n\n    def getStr3(self, num, arr):\n        \"\"\"\n        :type num: int\n        :type arr: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(num):\n            res.append(arr[i])\n        res.append(arr[num])\n        res.append(arr[2*num])\n        return res\n\n    def getStr4(self, num, arr):\n        \"\"\"\n        :type num: int\n        :type arr: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(num):\n            res.append(arr[i])\n        res.append(arr[num])\n        res.append(arr[2*num])\n        res.append(arr[3*num])\n        return res\n\n    def getStr5(self, num, arr):\n        \"\"\"\n        :type num: int\n        :type arr: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(num):\n            res.append(arr[i])\n        res.append(arr[num])\n        res.append(arr[2*num])\n        res.append(arr[3*num])\n        res.append(arr[4*num])\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().getStr(4, [\"hello\","
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution(object):\n    def getStr(self, strs, size):\n        \"\"\"\n        :type strs: List[str]\n        :type size: int\n        :rtype: List[str]\n        \"\"\"\n        return [strs[i:i + size] for i in range(0, len(strs), size)]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 7ms 91.88%\nclass Solution {\n    public List<String> getStr(List<String> strs, int size) {\n        return strs.stream().filter(s -> s.length() >= size).collect(Collectors.toList());\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public List<String> getStr(List<String> strs, int size) {\n        List<String> res = new ArrayList<>();\n        strs.forEach(s -> {\n            if (s.length() > size) {\n                res.add(s.substring(0, size));\n            } else if (s.length() < size) {\n                res.add(s);\n            } else {\n                res.add(s);\n            }\n        });\n        return res;\n    }\n}\n'''"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def removeDuplicates(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        if len(A) == 0:\n            return 0\n        \n        # initialize\n        i = 0\n        j = 0\n        num = len(A)\n        while j < num:\n            if A[j]!= A[i]:\n                A[i] = A[j]\n                i += 1\n            j += 1\n            \n        return i\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/remove-duplicates-from-sorted-array/solution/\n#\nApproach #1: Sort [2, 3, 3]\nComplexity Analysis\nTime Complexity: O(n log n)\nSpace Complexity: O(1)\n\n# 12ms 100%\nclass Solution {\n    public int removeDuplicates(int[] A) {\n        int j = 0;\n        for (int i = 1; i < A.length; i++) {\n            if (A[i]!= A[j]) {\n                A[++j] = A[i];\n            }\n        }\n        return j + 1;\n    }\n}\n\n# 8ms 100%\nclass Solution {\n    public int removeDuplicates(int[] A) {\n        int j = 0;\n        for (int i = 1; i < A.length; i++) {\n            if (A[i]!= A[j]) {\n                A[++j] = A[i];\n            }\n        }\n        return j + 1;\n    }\n}\n\n# 7ms 100%\nclass Solution {\n    public int removeDuplicates(int[] A) {\n        int j = 0;\n        for (int i = 1; i < A.length; i++) {\n            if (A[i]!= A["
    }
  ]
}