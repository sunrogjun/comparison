{
  "timestamp": "2025-09-14T19:27:41.318197",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 282,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer} a\n    # @param {integer} b\n    # @param {integer} c\n    # @return {integer}\n    def thirdSide(self, a, b, c):\n        # write your code here\n        if a + b > c:\n            if a + c > b:\n                if b + c > a:\n                    return a + b + c\n                else:\n                    return a + c + b\n            else:\n                if b + c > a:\n                    return a + b + c\n                else:\n                    return a + c + b\n        else:\n            if a + c > b:\n                if b + c > a:\n                    return b + c + a\n                else:\n                    return b + a + c\n            else:\n                if c + b > a:\n                    return b + c + a\n                else:\n                    return b + a + c\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.thirdSide(1, 2, 3)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef find_third_side(a, b, c):\n    \"\"\"\n    >>> find_third_side(1, 2, 3)\n    3.0\n    >>> find_third_side(1, 3, 4)\n    3.0\n    >>> find_third_side(4, 3, 1)\n    3.0\n    >>> find_third_side(2, 2, 2)\n    2.0\n    \"\"\"\n    return (a + b + c) / 2.0\n\ndef main():\n    \"\"\"\n    >>> main()\n    3.0\n    >>> main()\n    2.0\n    >>> main()\n    2.0\n    \"\"\"\n    print(find_third_side(1, 2, 3))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/right-angled-triangle/problem\n\ndef right_angled_triangle(n):\n    \"\"\"\n    >>> right_angled_triangle(1)\n    3\n    >>> right_angled_triangle(2)\n    5\n    >>> right_angled_triangle(3)\n    7\n    >>> right_angled_triangle(4)\n    9\n    >>> right_angled_triangle(5)\n    11\n    >>> right_angled_triangle(6)\n    13\n    \"\"\"\n    return (n*(n+1))/2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def thirdSide(self, sides):\n        \"\"\"\n        :type sides: List[int]\n        :rtype: int\n        \"\"\"\n        return sides[2] - sides[0] - sides[1]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.thirdSide([4,3,5])\n    print s.thirdSide([5,3,4])"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Definition for a right angled triangle\nclass Triangle(object):\n    def __init__(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return \"a = %d, b = %d, c = %d\" % (self.a, self.b, self.c)\n\n# Your code here\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: int\n        \"\"\"\n        if triangle.a == triangle.b or triangle.b == triangle.c or triangle.c == triangle.a:\n            return 0\n        else:\n            return triangle.a + triangle.b + triangle.c\n\na = Triangle(1, 2, 3)\ns = Solution()\nprint s.thirdSide(a)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\ndef right_angle(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    s = math.sqrt((b-a)**2 + (c-b)**2)\n    return (s + a) / 2\n\nif __name__ == \"__main__\":\n    assert right_angle(1, 2, 3) == 1.414\n    assert right_angle(3, 4, 5) == 2.8284"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def side_of_right_angled_triangle(a, b, c):\n    return abs(a + b - c)\n\ndef main():\n    a = 0\n    b = 0\n    c = 0\n    print side_of_right_angled_triangle(a, b, c)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef get_sides(a, b, c):\n    \"\"\"\n    Returns the sum of sides of the triangle.\n\n    :param a: The first side of the triangle\n    :param b: The second side of the triangle\n    :param c: The third side of the triangle\n    :return: The sum of sides\n    \"\"\"\n    return (a + b + c) / 2\n\n\ndef get_sides_recursive(a, b, c):\n    \"\"\"\n    Returns the sum of sides of the triangle.\n\n    :param a: The first side of the triangle\n    :param b: The second side of the triangle\n    :param c: The third side of the triangle\n    :return: The sum of sides\n    \"\"\"\n    if a + b + c == 0:\n        return 0\n    return a + b + c\n\n\ndef get_sides_iterative(a, b, c):\n    \"\"\"\n    Returns the sum of sides of the triangle.\n\n    :param a: The first side of the triangle\n    :param b: The second side of the triangle\n    :param c: The third side of the triangle\n    :return: The sum of sides\n    \"\"\"\n    if a + b + c == 0:\n        return 0\n    return a + b + c\n\n\ndef get_sides_recursive_iterative(a, b, c):\n    \"\"\"\n    Returns the sum of sides of the triangle.\n\n    :param a: The first side of the triangle\n    :param b: The second side of the triangle\n    :param c: The third side of the triangle\n    :return: The sum of sides\n    \"\"\"\n    if a + b + c == 0:\n        return 0\n    return a + b + c\n\n\ndef main():\n    a, b, c = map(float, input().split())\n    print(\"{} + {} + {} = {}\".format(a, b, c, get_sides(a, b, c)))\n    print(\"{} + {} + {} = {}\".format(a, b, c, get_sides_iterative(a, b, c)))\n    print(\"{} + {} + {} = {}\".format(a, b, c,"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def triangleArea(self, points):\n        \"\"\"\n        O(n^2)\n        :param points: a list of points\n        :return: the area of a triangle\n        \"\"\"\n        if len(points) <= 2:\n            return 0\n        l = len(points)\n        area = 0\n        for i in range(l):\n            a = points[i]\n            b = points[(i + 1) % l]\n            c = points[(i + 2) % l]\n            area += (a[0] + b[0] + c[0]) * (a[1] - b[1]) / 2.0\n        return area\n\nif __name__ == \"__main__\":\n    print Solution().triangleArea([[0,0],[0,1],[1,0]])"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\n\ndef side(a, b, c):\n    \"\"\"\n    >>> side(2, 3, 4)\n    3.0\n    >>> side(3, 2, 4)\n    3.0\n    >>> side(3, 4, 2)\n    3.0\n    >>> side(3, 4, 3)\n    4.0\n    >>> side(3, 4, 4)\n    4.0\n    >>> side(3, 4, 5)\n    5.0\n    >>> side(3, 4, 6)\n    5.0\n    \"\"\"\n    return math.sqrt(a**2 + b**2 + c**2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport math\n\n\ndef find_sides(a, b, c):\n    \"\"\"\n    Find the third side of a right angled triangle.\n\n    :param a: the length of one side of the triangle\n    :param b: the length of the other side of the triangle\n    :param c: the length of the third side of the triangle\n    :return: the third side of the triangle\n    \"\"\"\n    s = (a + b + c) / 2\n    return s\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a = input(\"Enter the length of the first side of the triangle: \")\n    b = input(\"Enter the length of the second side of the triangle: \")\n    c = input(\"Enter the length of the third side of the triangle: \")\n    print(\"The third side of the triangle is: {}\".format(find_sides(a, b, c)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef third_side(a, b, c):\n    \"\"\"\n    Find the third side of a right angled triangle.\n\n    https://www.codeeval.com/open_challenges/3/\n    \"\"\"\n\n    s = (b * b - a * a) / (2 * a * c)\n    if s < 0:\n        return 0\n    if s > sqrt(3):\n        return 0\n    return s\n\n\nif __name__ == '__main__':\n    import sys\n\n    if (len(sys.argv) <= 3):\n        print(\"Give me three numbers (a, b, c)\")\n    else:\n        a, b, c = map(float, sys.argv[1:])\n        print(third_side(a, b, c))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef third_side(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return sqrt(a * a - b * b - c * c)\n\n\nif __name__ == '__main__':\n    assert third_side(1, 2, 3) == 1.41421\n    assert third_side(2, 3, 4) == 1.41421\n    assert third_side(3, 4, 5) == 1.41421\n    assert third_side(4, 5, 6) == 1.41421\n    assert third_side(5, 6, 7) == 1.41421\n    assert third_side(6, 7, 8) == 1.41421\n    assert third_side(7, 8, 9) == 1.41421\n    assert third_side(8, 9, 10) == 1.41421\n    assert third_side(9, 10, 11) == 1.41421\n    assert third_side(10, 11, 12) == 1.41421\n    assert third_side(11, 12, 13) == 1.41421\n    assert third_side(12, 13, 14) == 1.41421\n    assert third_side(13, 14, 15) == 1.41421\n    assert third_side(14, 15, 16) == 1.41421\n    assert third_side(15, 16, 17) == 1.41421\n    assert third_side(16, 17, 18) == 1.41421\n    assert third_side(17, 18, 19) == 1.41421\n    assert third_side(18, 19, 20) == 1.41421\n    assert third_side(19, 20, 21) == 1.41421\n    assert third_side(20, 21, 22) == 1.41421\n    assert third_side(21, 22, 23) == 1.41421\n    assert third_side(22, 23, 24) == 1.41421\n    assert third_side(23, 24, 25) == 1.41421\n    assert third_side(24, 25, 26) == 1"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# Definition for a right angled triangle.\n# class Triangle:\n#     def __init__(self, p1, p2, p3):\n#         self.p1 = p1\n#         self.p2 = p2\n#         self.p3 = p3\n\nclass Solution:\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: float\n        \"\"\"\n        if triangle == []:\n            return 0\n        p1 = triangle[0][0]\n        p2 = triangle[1][1]\n        p3 = triangle[2][2]\n        a = p2 - p1\n        b = p3 - p1\n        c = p1 - p2 - p3\n        return abs(a * b - b * c) / 2.0"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import math\n\n\ndef find_side(a, b, c):\n    \"\"\"\n    Returns the side of the triangle.\n    \"\"\"\n\n    return (a + b + c) / 2\n\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Returns the area of the triangle.\n    \"\"\"\n\n    return math.sqrt(a * b * c)\n\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"\n    Returns the perimeter of the triangle.\n    \"\"\"\n\n    return 2 * (a + b + c)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n\n    a = float(input(\"Enter the first side of the triangle: \"))\n    b = float(input(\"Enter the second side of the triangle: \"))\n    c = float(input(\"Enter the third side of the triangle: \"))\n\n    side_1 = find_side(a, b, c)\n    side_2 = find_side(b, a, c)\n    side_3 = find_side(c, b, a)\n\n    print(\"The area of the triangle is {0:.3f}\".format(triangle_area(a, b, c)))\n    print(\"The perimeter of the triangle is {0:.3f}\".format(triangle_perimeter(a, b, c)))\n    print(\"Side 1 is {0:.3f}\".format(side_1))\n    print(\"Side 2 is {0:.3f}\".format(side_2))\n    print(\"Side 3 is {0:.3f}\".format(side_3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/triangle/problem\n# Time complexity: O(n^2)\n# Space complexity: O(1)\n\ndef third_side(A, B, C):\n    \"\"\"\n    Returns the third side of a right angled triangle.\n\n    A right angled triangle is a right-angled triangle where the second side\n    is equal to the third side.\n\n    For example, the right-angled triangle with the vertices (1, 1), (5, 10),\n    and (15, 23) is represented by the points (2, 7), (14, 18), and (24, 30).\n\n    The third side is equal to the distance between the midpoints of the sides.\n    \"\"\"\n    mid1 = (A + B)/2\n    mid2 = (C + B)/2\n    mid3 = (A + C)/2\n    return abs(mid1 - mid2) + abs(mid2 - mid3)\n\n\nif __name__ == \"__main__\":\n    A, B, C = map(int, input().split())\n    print(third_side(A, B, C))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getThirdSide(self, side1, side2, side3):\n        \"\"\"\n        :type side1: int\n        :type side2: int\n        :type side3: int\n        :rtype: int\n        \"\"\"\n        # same as triangle\n        if side1 + side2 > side3:\n            return (side1 + side2) / 2\n        elif side1 + side2 < side3:\n            return (side3 - side1) / 2\n        else:\n            return side2\n\nif __name__ == \"__main__\":\n    Solution().getThirdSide(1,2,3)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/triangle-area/problem\n\nimport math\n\ndef find_third_side(side1, side2, side3):\n    \"\"\"\n    side1: The length of side 1\n    side2: The length of side 2\n    side3: The length of side 3\n    \"\"\"\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        return 0\n\n    a = side1 + side2 + side3\n    b = side1 * side2\n    c = side1 * side3\n    d = side2 * side3\n    e = side1 * side2 * side3\n\n    return (a*b*c - b*d*e + c*d*a - c*b*d) / (a*b*c - b*d*e + c*d*a - c*b*d)\n\n# test cases\n\nprint find_third_side(4, 5, 1)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\n# Triangle\n#\n# Triangle(a, b, c) is the right angled triangle with\n# a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a <= b and b <= c\n#\n# Right_angled_triangle(a, b, c) is the right angled triangle\n# with a"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef side_of_triangle(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: sides of a right angled triangle\n    Output:\n        a: third side of a right angled triangle\n    \"\"\"\n    return sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2))\n\nprint side_of_triangle(10, 7, 9)"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def side(a, b, c):\n    \"\"\"\n    :param a: The length of a side\n    :param b: The length of a side\n    :param c: The length of a side\n    :return: The length of the third side\n    \"\"\"\n    return a + b - c\n\nif __name__ == \"__main__\":\n    print(side(3, 4, 5))"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def side3(a,b,c):\n    return a + b - c\n\ndef main():\n    a, b, c = map(int, input().split())\n    return side3(a, b, c)\n\nif __name__ == '__main__':\n    print(main())"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "def third_side(a, b, c):\n    \"\"\"\n    >>> third_side(5, 4, 3)\n    2\n    >>> third_side(1, 1, 1)\n    1\n    >>> third_side(6, 4, 8)\n    4\n    \"\"\"\n    return (a + b) * (c - a) / 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "import math\n\ndef side_three(a, b, c):\n    \"\"\"\n    Returns the third side of a right angled triangle.\n    \"\"\"\n    return abs(math.sqrt(a**2 - b**2) - c)\n\nif __name__ == \"__main__\":\n    print side_three(6, 7, 8)"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def side3(a, b, c):\n    \"\"\"\n    a, b and c are the three sides of a right angled triangle\n    \"\"\"\n    return a+b-c\n\nprint side3(3, 4, 5)"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "import math\n\n\ndef third_side(a, b, c):\n    \"\"\"\n    :param a: The length of side 1\n    :param b: The length of side 2\n    :param c: The length of side 3\n    :return: The length of side 3\n    \"\"\"\n    s1 = (a + b + c) / 2\n    s2 = (a + b - c) / 2\n    s3 = (a - b + c) / 2\n    s4 = (a - b - c) / 2\n\n    if (s1 + s2 + s3) == 0:\n        return s3\n    elif (s1 + s2 + s4) == 0:\n        return s4\n    elif (s1 + s3 + s4) == 0:\n        return s1\n    elif (s1 + s3 + s2) == 0:\n        return s2\n\n    if s1 > s2:\n        if s1 > s3:\n            return s1\n        else:\n            return s2\n    elif s2 > s3:\n        return s2\n    else:\n        return s3\n\n\ndef main():\n    \"\"\"\n    Test cases.\n    \"\"\"\n    assert third_side(2, 3, 4) == 5, \"Case 1\"\n    assert third_side(4, 5, 6) == 7, \"Case 2\"\n    assert third_side(6, 7, 8) == 9, \"Case 3\"\n    assert third_side(1, 2, 3) == 3, \"Case 4\"\n    assert third_side(1, 2, 5) == 5, \"Case 5\"\n    assert third_side(1, 2, 10) == 10, \"Case 6\"\n    assert third_side(2, 3, 4) == 5, \"Case 7\"\n    assert third_side(2, 3, 5) == 5, \"Case 8\"\n    assert third_side(2, 3, 10) == 10, \"Case 9\"\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef side_of_triangle(a, b, c):\n    \"\"\"\n    Compute the side of a right angled triangle.\n\n    :param a: the length of side a\n    :param b: the length of side b\n    :param c: the length of side c\n    :return: the length of side c\n    \"\"\"\n    return sqrt(a**2 + b**2 - c**2)\n\n\nif __name__ == '__main__':\n    a, b, c = input().split()\n    a, b, c = [float(i) for i in [a, b, c]]\n    print(side_of_triangle(a, b, c))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "import math\n\ndef get_sides(a, b, c):\n    return a + b + c\n\ndef get_area(a, b, c):\n    return math.sqrt(get_sides(a, b, c) * 0.5)\n\ndef get_perimeter(a, b, c):\n    return a + b + c\n\ndef get_sides_from_triangle(a, b, c):\n    return a + b + c\n\ndef get_area_from_triangle(a, b, c):\n    return math.sqrt(a * b * c)\n\ndef get_perimeter_from_triangle(a, b, c):\n    return a + b + c\n\nprint \"Area of a right angled triangle is: \" + str(get_area(2, 3, 4))\n\nprint \"Sides of a right angled triangle are: \" + str(get_sides(2, 3, 4))\n\nprint \"Perimeter of a right angled triangle is: \" + str(get_perimeter(2, 3, 4))\n\nprint \"Area of a triangle is: \" + str(get_area(3, 5, 6))\n\nprint \"Sides of a triangle is: \" + str(get_sides(3, 5, 6))\n\nprint \"Perimeter of a triangle is: \" + str(get_perimeter(3, 5, 6))\n\nprint \"Area of a triangle is: \" + str(get_area_from_triangle(3, 5, 6))\n\nprint \"Sides of a triangle is: \" + str(get_sides_from_triangle(3, 5, 6))\n\nprint \"Perimeter of a triangle is: \" + str(get_perimeter_from_triangle(3, 5, 6))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def third_side(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\nif __name__ == '__main__':\n    assert third_side(1, 1, 1) == 1\n    assert third_side(1, 1, 2) == 1\n    assert third_side(1, 2, 2) == 2\n    assert third_side(2, 1, 2) == 2\n    assert third_side(2, 2, 1) == 2\n    assert third_side(2, 2, 2) == 2\n    assert third_side(2, 3, 4) == 2\n    assert third_side(4, 3, 2) == 2\n    assert third_side(4, 4, 3) == 3\n    assert third_side(4, 4, 4) == 4"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        if triangle == []:\n            return 0\n        \n        a = triangle[0]\n        b = triangle[1]\n        c = triangle[2]\n        \n        s1 = (a + b + c) / 2\n        s2 = (a + b - c) / 2\n        s3 = (a + c - b) / 2\n        \n        return max(s1, s2, s3)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import math\n\ndef find_third_side(a, b, c):\n    \"\"\"\n    Given the lengths of the sides of a triangle, return the length of the\n    third side.\n\n    For example:\n\n        >>> find_third_side(1, 2, 3)\n        5\n        >>> find_third_side(2, 4, 3)\n        2\n        >>> find_third_side(3, 1, 2)\n        4\n    \"\"\"\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\nif __name__ == \"__main__\":\n    print(find_third_side(1, 2, 3))\n    print(find_third_side(2, 4, 3))\n    print(find_third_side(3, 1, 2))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def get_side(a, b, c):\n    \"\"\"\n    Input: a, b, c\n    Output: side\n    \"\"\"\n    if a + b > c:\n        if a + c > b:\n            return c\n        else:\n            return b\n    else:\n        if a + c > b:\n            return b\n        else:\n            return a\n\ndef get_sides(a, b, c):\n    \"\"\"\n    Input: a, b, c\n    Output: side1, side2, side3\n    \"\"\"\n    side1 = get_side(a, b, c)\n    side2 = get_side(a, b, c)\n    side3 = get_side(a, b, c)\n    return side1, side2, side3\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    side1, side2, side3 = get_sides(a, b, c)\n    print(\"Side 1: \", side1)\n    print(\"Side 2: \", side2)\n    print(\"Side 3: \", side3)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "import math\n\ndef right_angle_triangle(side1, side2, side3):\n    return (side1 + side2 + side3) / 2\n\ndef main():\n    side1 = int(input('Enter side 1: '))\n    side2 = int(input('Enter side 2: '))\n    side3 = int(input('Enter side 3: '))\n    print('The third side of this triangle is: {0}'.format(right_angle_triangle(side1, side2, side3)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def find_third_side(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return a + b + c\n\nif __name__ == '__main__':\n    a = float(input('Input a: '))\n    b = float(input('Input b: '))\n    c = float(input('Input c: '))\n    print(find_third_side(a, b, c))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getThirdSide(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if not points or len(points) == 1:\n            return []\n        p1, p2, p3 = points\n        # solve the triangle\n        a = p1[1] - p2[1]\n        b = p2[0] - p1[0]\n        c = p3[0] - p1[0]\n        # get the angle a/b/c\n        # get the angle from the angle of the triangle\n        # 1/2 * (a/b + a/c + b/c)\n        # or 1/2 * (a/b - a/c + b/c)\n        # or 1/2 * (a/b - a/c + c/a)\n        # or 1/2 * (a/b - a/c + c/b)\n        # or 1/2 * (a/b - a/c + a/b + b/c)\n        # or 1/2 * (a/b - a/c + a/b - b/c)\n        # or 1/2 * (a/b - a/c + a/b + c/a)\n        # or 1/2 * (a/b - a/c + a/b - c/b)\n        # or 1/2 * (a/b - a/c + a/b - c/b + c/a)\n        # or 1/2 * (a/b - a/c + c/a - b/c)\n        # or 1/2 * (a/b - a/c + c/b - b/c)\n        # or 1/2 * (a/b - a/c + c/b - c/a)\n        # or 1/2 * (a/b - a/c + a/a - b/b + c/c)\n        # or 1/2 * (a/b - a/c + a/a - b/b - c/c)\n        # or 1/2 *"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def triangle_side(a, b, c):\n    \"\"\"\n    Calculate the side of a triangle using the three sides.\n\n    Input:\n    a, b, c: the three sides of the triangle.\n\n    Output:\n    a, b, c: the three sides of the triangle.\n    \"\"\"\n    return (a + b + c) / 2\n\ndef right_angled_triangle(a, b, c):\n    \"\"\"\n    Check if the right angled triangle exists.\n\n    Input:\n    a, b, c: the three sides of the triangle.\n\n    Output:\n    True if the triangle exists, False otherwise.\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef main():\n    print triangle_side(10, 20, 30)\n    print triangle_side(5, 10, 20)\n    print right_angled_triangle(10, 20, 30)\n    print right_angled_triangle(5, 10, 20)\n    print right_angled_triangle(10, 20, 5)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef side_of_right_angled_triangle(p, q, r):\n    \"\"\"\n    :param p: Point p\n    :param q: Point q\n    :param r: Point r\n    :return: The side of the triangle\n    \"\"\"\n    return sqrt((p.x - q.x) ** 2 + (p.y - q.y) ** 2)\n\n\nif __name__ == '__main__':\n    p, q, r = (1, 1), (2, 2), (3, 3)\n    print(side_of_right_angled_triangle(p, q, r))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/triangle-side/problem\n\ndef triangle_side(a, b, c):\n    \"\"\"\n    >>> triangle_side(1, 2, 3)\n    3\n    >>> triangle_side(2, 3, 4)\n    5\n    >>> triangle_side(3, 4, 5)\n    7\n    \"\"\"\n    # Check if a, b, and c are valid numbers\n    try:\n        a = int(a)\n    except ValueError:\n        raise ValueError('The first number is not a valid number.')\n    try:\n        b = int(b)\n    except ValueError:\n        raise ValueError('The second number is not a valid number.')\n    try:\n        c = int(c)\n    except ValueError:\n        raise ValueError('The third number is not a valid number.')\n\n    # Check if a, b, and c are not negative\n    if a < 0 or b < 0 or c < 0:\n        raise ValueError('Negative numbers are not allowed.')\n\n    # Check if a, b, and c are greater than or equal to 1\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError('Triangle sides cannot be zero or negative.')\n\n    # Calculate the side of the triangle\n    return (a + b + c) / 2\n\n\n# Test Cases\nprint('triangle_side(1, 2, 3) =', triangle_side(1, 2, 3))\nprint('triangle_side(2, 3, 4) =', triangle_side(2, 3, 4))\nprint('triangle_side(3, 4, 5) =', triangle_side(3, 4, 5))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def side3(a,b,c):\n    \"\"\"\n    :param a: The length of side 1\n    :param b: The length of side 2\n    :param c: The length of side 3\n    :return: The length of side 3\n    \"\"\"\n\n    # if a + b > c, c = a + b, and side3 = a + b + c\n    if a + b > c:\n        return a + b + c\n    # if b + c > a, c = b + c, and side3 = a + b + c\n    if b + c > a:\n        return b + c + c\n    # if a + c > b, c = a + c, and side3 = a + b + c\n    if a + c > b:\n        return a + c + c\n\n\nif __name__ == '__main__':\n    a = float(input(\"Please enter a: \"))\n    b = float(input(\"Please enter b: \"))\n    c = float(input(\"Please enter c: \"))\n    print side3(a,b,c)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import math\n\ndef find_side(side_length):\n    \"\"\"\n    :type side_length: float\n    :rtype: float\n    \"\"\"\n    return math.sqrt(side_length**2 - side_length**2 / 3)\n\nif __name__ == '__main__':\n    assert find_side(2) == 1.41421\n    assert find_side(5) == 3"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def get_sides(a, b, c):\n    return a + b - c\n\ndef get_sides_2(a, b, c):\n    return a + b - c, a - b + c, b - a + c\n\n\ndef get_sides_3(a, b, c):\n    return a + b - c, a - b + c, b - a + c, a + b - c\n\n\ndef get_sides_4(a, b, c):\n    return a + b - c, a - b + c, b - a + c, a + b - c\n\nif __name__ == \"__main__\":\n    a, b, c = input().split()\n    print(get_sides(int(a), int(b), int(c)))\n    print(get_sides_2(int(a), int(b), int(c)))\n    print(get_sides_3(int(a), int(b), int(c)))\n    print(get_sides_4(int(a), int(b), int(c)))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_sides(a, b, c):\n    s = (b ** 2 - a ** 2) / (2 * c)\n    return s\n\n\nif __name__ == \"__main__\":\n    a, b, c = input().split()\n    print(find_sides(int(a), int(b), int(c)))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def find_third_side(p1, p2, p3):\n    return abs((p1[0] - p2[0]) * (p2[1] - p3[1]) - (p1[1] - p2[1]) * (p2[0] - p3[0]))\n\n\nif __name__ == \"__main__\":\n    assert find_third_side((2, 2), (3, 2), (4, 2)) == 1\n    assert find_third_side((1, 1), (2, 2), (3, 2)) == 2\n    assert find_third_side((1, 1), (2, 2), (3, 3)) == 3"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def side3(a,b,c):\n    \"\"\"\n    >>> side3(1,2,3)\n    3\n    >>> side3(4,5,6)\n    2\n    >>> side3(7,8,9)\n    1\n    \"\"\"\n    return a+b-c\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_third_side(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    s = (b ** 2 + c ** 2 - a ** 2) / 2\n    return math.sqrt(s ** 2 - b ** 2 - c ** 2)\n\n\nif __name__ == \"__main__\":\n    assert find_third_side(1, 2, 3) == 3, \"first\"\n    assert find_third_side(4, 7, 11) == 5, \"second\"\n    assert find_third_side(4, 6, 5) == 7, \"third\""
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import namedtuple\nimport math\n\n\nPoint = namedtuple('Point', ['x', 'y'])\n\ndef third_side(a, b, c):\n    \"\"\"\n    :type a: Point\n    :type b: Point\n    :type c: Point\n    :rtype: float\n    \"\"\"\n    return (a.x + b.x + c.x) / 2\n\n\nif __name__ == '__main__':\n    a = Point(1, 1)\n    b = Point(3, 1)\n    c = Point(2, 2)\n    print third_side(a, b, c)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def triangle_sides(a, b, c):\n    \"\"\"\n    >>> triangle_sides(2, 3, 4)\n    3\n    >>> triangle_sides(1, 2, 3)\n    2\n    >>> triangle_sides(1, 2, 4)\n    2\n    \"\"\"\n    return abs(a + b - c)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def find_third_side(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: coordinates of three points of a right angled triangle\n    Output:\n        the third side of a right angled triangle\n    Explanation:\n        For a right angled triangle, the third side is the longest side.\n    \"\"\"\n\n    # Check if a, b, and c are all in the range [1, 100]\n    if not (1 <= a <= 100 and 1 <= b <= 100 and 1 <= c <= 100):\n        raise ValueError(\"Invalid Input\")\n\n    # Calculate the length of side 1\n    side1_len = (a + b + c) / 2\n\n    # Calculate the length of side 2\n    side2_len = (a + c) / 2\n\n    # Calculate the length of side 3\n    side3_len = (b + c) / 2\n\n    # Return the length of the longest side\n    if side1_len >= side2_len and side1_len >= side3_len:\n        return side1_len\n    elif side2_len >= side1_len and side2_len >= side3_len:\n        return side2_len\n    else:\n        return side3_len"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def third_side(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a+b+c)/2\n\nif __name__ == '__main__':\n    print(third_side(1, 2, 3))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "import math\n\n\ndef side_of_triangle(a, b, c):\n    \"\"\"\n    Find the side of the triangle with given a, b, and c\n    Input: a, b, and c are the sides of the triangle\n    Output: the side of the triangle\n    \"\"\"\n    # Calculate the area of the triangle\n    area = (a + b + c) / 2\n\n    # Calculate the sides of the triangle\n    side_a = a / 2\n    side_b = b / 2\n    side_c = c / 2\n\n    # Calculate the angle of the triangle\n    angle = math.degrees(math.atan2(side_b, side_c))\n\n    # Calculate the third side of the triangle\n    third_side = side_a + side_b + side_c\n\n    return third_side\n\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    assert side_of_triangle(2, 3, 5) == 3\n    assert side_of_triangle(10, 3, 5) == 5\n    assert side_of_triangle(3, 10, 5) == 5\n    assert side_of_triangle(5, 3, 10) == 5\n    assert side_of_triangle(3, 5, 10) == 10\n    assert side_of_triangle(5, 3, 10) == 10\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "import math\n\ndef find_third_side(p1, p2, p3):\n    \"\"\"\n    :param p1: A point\n    :param p2: A point\n    :param p3: A point\n    :return: A number\n    \"\"\"\n    a = (p1[0] - p2[0]) * (p1[0] - p3[0])\n    b = (p1[1] - p2[1]) * (p1[1] - p3[1])\n    c = (p1[0] - p2[0]) * (p1[1] - p3[1])\n    d = (p1[0] - p3[0]) * (p1[1] - p2[1])\n\n    return math.sqrt(a + b + c) / 2\n\nif __name__ == \"__main__\":\n    p1 = (1, 1)\n    p2 = (3, 1)\n    p3 = (3, 2)\n    print(find_third_side(p1, p2, p3))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def thirdSide(a, b, c):\n    \"\"\"\n    >>> thirdSide(1, 2, 3)\n    3\n    >>> thirdSide(2, 3, 4)\n    5\n    >>> thirdSide(1, 2, 1)\n    Traceback (most recent call last):\n       ...\n    ValueError: a, b, and c must be greater than 0\n    >>> thirdSide(0, 1, 3)\n    Traceback (most recent call last):\n       ...\n    ValueError: a, b, and c must be greater than 0\n    >>> thirdSide(1, 0, 3)\n    Traceback (most recent call last):\n       ...\n    ValueError: a, b, and c must be greater than 0\n    >>> thirdSide(1, 2, 0)\n    Traceback (most recent call last):\n       ...\n    ValueError: a, b, and c must be greater than 0\n    >>> thirdSide(0, 1, 0)\n    Traceback (most recent call last):\n       ...\n    ValueError: a, b, and c must be greater than 0\n    >>> thirdSide(3, 4, 1)\n    Traceback (most recent call last):\n       ...\n    ValueError: a, b, and c must be greater than 0\n    >>> thirdSide(1, 3, 4)\n    Traceback (most recent call last):\n       ...\n    ValueError: a, b, and c must be greater than 0\n    >>> thirdSide(3, 4, 4)\n    Traceback (most recent call last):\n       ...\n    ValueError: a, b, and c must be greater than 0\n    >>> thirdSide(3, 4, 5)\n    Traceback (most recent call last):\n       ...\n    ValueError: a, b, and c must be greater than 0\n    >>> thirdSide(1, 1, 1)\n    1\n    >>> thirdSide(1, 1, 2)\n    3\n    >>> thirdSide(1, 1, 3)\n    5\n    >>> thirdSide(1, 2, 1)\n    3\n    >>> thirdSide(1, 2, 2)\n    5\n    >>> thirdSide(1, 2, 3)\n    7"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def get_side(a,b,c):\n    return (a+b+c)/2\n\ndef get_side_three(a,b,c):\n    return max(a,b,c)\n\nif __name__ == '__main__':\n    assert get_side(1,2,3) == 1\n    assert get_side(1,2,4) == 2\n    assert get_side(1,3,4) == 2\n    assert get_side_three(1,2,3) == 3\n    assert get_side_three(1,2,4) == 3\n    assert get_side_three(1,3,4) == 3\n    assert get_side_three(1,4,4) == 3\n    assert get_side_three(1,3,5) == 4\n    assert get_side_three(1,4,5) == 4\n    assert get_side_three(1,5,5) == 4\n    assert get_side_three(2,3,4) == 3\n    assert get_side_three(2,3,5) == 4\n    assert get_side_three(2,4,5) == 4\n    assert get_side_three(2,5,5) == 4\n    assert get_side_three(3,4,5) == 4\n    assert get_side_three(3,5,5) == 4\n    assert get_side_three(4,5,5) == 4\n    assert get_side_three(5,5,5) == 4"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def side_of_triangle(a, b, c):\n    \"\"\"\n    >>> side_of_triangle(1, 2, 3)\n    2\n    >>> side_of_triangle(1, 2, 1)\n    1\n    >>> side_of_triangle(1, 2, 0)\n    Traceback (most recent call last):\n    ValueError: The input points are not valid.\n    \"\"\"\n    # check if the points are valid\n    if a < b or b < c or c < a:\n        raise ValueError(\"The input points are not valid.\")\n    if a == b or b == c or c == a:\n        return 0\n    # calculate the perimeter\n    p = a + b + c\n    # calculate the area\n    area = p * (p - a) * (p - b) * (p - c)\n    # calculate the third side\n    return area / 3\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_third_side(a, b, c):\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    print find_third_side(1, 2, 3)\n    print find_third_side(5, 10, 15)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef third_side(a,b,c):\n    \"\"\"\n    For a right angled triangle, the third side is the same as the side\n    of the triangle, but rotated 90 degrees clockwise.\n    \"\"\"\n    return a + b + c\n\ndef main():\n    \"\"\"\n    >>> third_side(1,2,3)\n    6\n    >>> third_side(3,2,1)\n    6\n    >>> third_side(1,2,2)\n    5\n    \"\"\"\n    print third_side(1,2,3)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "# Definition for a point\nclass Point:\n\tdef __init__(self, x=0.0, y=0.0):\n\t\tself.x = x\n\t\tself.y = y\n\nclass Solution:\n\t# @param triangle, a list of points\n\t# @return an integer\n\tdef thirdSide(self, triangle):\n\t\tif triangle is None or len(triangle) < 3:\n\t\t\treturn 0\n\t\ta, b, c = triangle\n\t\t\n\t\t# solve the system of equations\n\t\tx1 = (a.x + b.x + c.x) / 2.0\n\t\ty1 = (a.y + b.y + c.y) / 2.0\n\t\tx2 = (a.x + c.x + b.x) / 2.0\n\t\ty2 = (a.y + c.y + b.y) / 2.0\n\t\tx3 = (b.x + c.x + a.x) / 2.0\n\t\ty3 = (b.y + c.y + a.y) / 2.0\n\t\t\n\t\t# solve the system of equations\n\t\ta1 = (y1 - y2) / (x1 - x2)\n\t\ta2 = (y1 - y3) / (x1 - x3)\n\t\tb1 = (x1 - x2) / (y1 - y2)\n\t\tb2 = (x1 - x3) / (y1 - y3)\n\t\t\n\t\t# solve the system of equations\n\t\tx = (a1 * b2 - b1 * a2) / (a1 - b1)\n\t\ty = (a2 * b1 - b2 * a1) / (a2 - b2)\n\t\t\n\t\treturn x\n\nif __name__ == '__main__':\n\ttriangle = [Point(1, 1), Point(4, 5), Point(3, 2)]\n\ts = Solution()\n\tprint(s.thirdSide(triangle))"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "from math import sqrt\n\ndef get_sides(a,b,c):\n    s1 = (a + b + c) / 2\n    s2 = (a + b + c) / 2\n    s3 = (a + b + c) / 2\n    return s1, s2, s3\n\ndef get_sides_sqrt(a,b,c):\n    s1 = sqrt(a + b + c)\n    s2 = sqrt(a + b + c)\n    s3 = sqrt(a + b + c)\n    return s1, s2, s3\n\ndef get_sides_sqrt2(a,b,c):\n    s1 = sqrt(a + b + c)\n    s2 = sqrt(a + b + c)\n    s3 = sqrt(a + b + c)\n    return s1, s2, s3\n\ndef get_sides_sqrt3(a,b,c):\n    s1 = sqrt(a + b + c)\n    s2 = sqrt(a + b + c)\n    s3 = sqrt(a + b + c)\n    return s1, s2, s3\n\ndef get_sides_sqrt4(a,b,c):\n    s1 = sqrt(a + b + c)\n    s2 = sqrt(a + b + c)\n    s3 = sqrt(a + b + c)\n    return s1, s2, s3\n\ndef get_sides_sqrt5(a,b,c):\n    s1 = sqrt(a + b + c)\n    s2 = sqrt(a + b + c)\n    s3 = sqrt(a + b + c)\n    return s1, s2, s3\n\ndef get_sides_sqrt6(a,b,c):\n    s1 = sqrt(a + b + c)\n    s2 = sqrt(a + b + c)\n    s3 = sqrt(a + b + c)\n    return s1, s2, s3\n\ndef get_sides_sqrt7(a,b"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        a, b, c = points[0][0], points[1][0], points[2][0]\n        ab = a - b\n        bc = b - c\n        ca = c - a\n        return math.sqrt(ab ** 2 + bc ** 2 + ca ** 2) / 2"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle.\nclass Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def is_right_angled(self):\n        return self.a + self.b > self.c\n\nclass Solution:\n    def thirdSide(self, triangle: 'Triangle') -> 'int':\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: int\n        \"\"\"\n        a, b, c = triangle.a, triangle.b, triangle.c\n        if a + b > c:\n            if a + c > b:\n                return a\n            else:\n                return b\n        elif a + c > b:\n            if a + b > c:\n                return a\n            else:\n                return c\n        else:\n            return b"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "def get_sides(p1, p2, p3):\n    \"\"\"\n    p1 is the first point of the triangle.\n    p2 is the second point of the triangle.\n    p3 is the third point of the triangle.\n    \"\"\"\n    # The sides are the same as the opposite sides\n    return p1, p2, p3\n\ndef get_side(p1, p2, p3):\n    \"\"\"\n    p1 is the first point of the triangle.\n    p2 is the second point of the triangle.\n    p3 is the third point of the triangle.\n    \"\"\"\n    # The sides are the same as the opposite sides\n    return p1, p2, p3\n\ndef get_sides_2(p1, p2, p3):\n    \"\"\"\n    p1 is the first point of the triangle.\n    p2 is the second point of the triangle.\n    p3 is the third point of the triangle.\n    \"\"\"\n    # The sides are the same as the opposite sides\n    return p1, p2, p3\n\ndef get_side_2(p1, p2, p3):\n    \"\"\"\n    p1 is the first point of the triangle.\n    p2 is the second point of the triangle.\n    p3 is the third point of the triangle.\n    \"\"\"\n    # The sides are the same as the opposite sides\n    return p1, p2, p3\n\ndef get_sides_3(p1, p2, p3):\n    \"\"\"\n    p1 is the first point of the triangle.\n    p2 is the second point of the triangle.\n    p3 is the third point of the triangle.\n    \"\"\"\n    # The sides are the same as the opposite sides\n    return p1, p2, p3\n\ndef get_side_3(p1, p2, p3):\n    \"\"\"\n    p1 is the first point of the triangle.\n    p2 is the second point of the triangle.\n    p3 is the third point of the triangle.\n    \"\"\"\n    # The sides are the same as the opposite sides\n    return p1, p2, p3\n\ndef get_sides_4(p1, p2,"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def get_sides(a, b, c):\n    return a, b, c\n\n\ndef get_sides_new(a, b, c):\n    return a, b, c"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Point(object):\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        if len(points) < 3:\n            return float(\"inf\")\n\n        a = points[0].a - points[1].a\n        b = points[0].b - points[1].b\n        c = points[0].c - points[1].c\n\n        d = points[1].a - points[2].a\n        e = points[1].b - points[2].b\n        f = points[1].c - points[2].c\n\n        denominator = a * e - b * d\n        if denominator == 0:\n            return float(\"inf\")\n\n        numerator = c * e - b * f\n        if numerator == 0:\n            return float(\"inf\")\n\n        return (a * f - b * c) / denominator\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.thirdSide(points)"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "# Definition for a right-angled triangle.\n# class Triangle:\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n#\n#     def area(self):\n#         return self.a * self.b / 2 + self.b * self.c / 2 + self.c * self.a / 2\n#\n#\n# class Solution:\n#     def getThirdSide(self, triangle: 'Triangle') -> int:\n#         \"\"\"\n#         :type triangle: Triangle\n#         :rtype: int\n#         \"\"\"\n#         return triangle.area() / 2"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "# Definition for a right-angled triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        return abs(triangle.a + triangle.b + triangle.c - 2 * triangle.s)\n\n\nif __name__ == \"__main__\":\n    assert Solution().thirdSide(Triangle(3, 4, 5)) == 6.0\n    assert Solution().thirdSide(Triangle(1, 1, 1)) == 0.0"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\nclass Triangle(object):\n    def __init__(self, a, b, c):\n        \"\"\"\n        a: the length of side 1\n        b: the length of side 2\n        c: the length of side 3\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        return self.a + self.b + self.c\n\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: int\n        \"\"\"\n        # (a + b + c)/2\n        # (a + b + c)/2\n        # (a + b + c)/2\n        # (a + b + c)/2\n        return triangle.area() / 2"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "# Definition for a right-angled triangle.\n# class Triangle:\n#     def __init__(self, p1, p2, p3):\n#         self.p1 = p1\n#         self.p2 = p2\n#         self.p3 = p3\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: float\n        \"\"\"\n        if not triangle or triangle[0][0] == triangle[1][1] or triangle[0][1] == triangle[1][0]:\n            return float('inf')\n\n        a = triangle[0][0]\n        b = triangle[0][1]\n        c = triangle[1][0]\n        d = triangle[1][1]\n        e = triangle[2][0]\n        f = triangle[2][1]\n\n        s = ((a+b+c)*(a+b+d)*(a+c+d)*(a+c+e)*(a+d+f)*(b+d+f)*(c+e+f))/8\n\n        return s if s < float('inf') else float('inf')"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        if triangle.a == triangle.b and triangle.b == triangle.c:\n            return triangle.a\n        if triangle.a == triangle.b or triangle.b == triangle.c or triangle.a == triangle.c:\n            return triangle.b\n        if triangle.a + triangle.b == triangle.c:\n            return triangle.b\n        if triangle.b + triangle.c == triangle.a:\n            return triangle.a\n        if triangle.b + triangle.c == triangle.a:\n            return triangle.c\n        if triangle.b + triangle.a == triangle.c:\n            return triangle.a\n        if triangle.c + triangle.a == triangle.b:\n            return triangle.b\n        return triangle.a"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "# Definition for a point.\n# class Point(object):\n#     def __init__(self, a=0, b=0, c=0):\n#         self.x = a\n#         self.y = b\n#         self.z = c\n\nclass Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: Point\n        \"\"\"\n        if not points:\n            return Point(0, 0, 0)\n        p1 = points[0]\n        p2 = points[1]\n        p3 = points[2]\n        a = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x)\n        b = (p3.x - p1.x) * (p1.y - p2.y) - (p3.y - p1.y) * (p1.x - p2.x)\n        c = (p1.x - p2.x) * (p2.y - p3.y) - (p1.y - p2.y) * (p2.x - p3.x)\n        return Point((a * b - c * c) / (b * b), (a * c - b * c) / (b * b))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Point(object):\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        p1 = points[0]\n        p2 = points[1]\n        p3 = points[2]\n        if p1.a == p2.a and p2.a == p3.a and p1.b == p2.b and p2.b == p3.b and p1.c == p2.c and p2.c == p3.c:\n            return float(p1.a + p2.b + p3.c) / 2.0\n        else:\n            return None"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        if len(points)!= 3:\n            return None\n        a, b, c = points\n        r = a + b - c\n        if r == 0:\n            return None\n        p = (b * b - a * a) / (2 * r)\n        q = (a * a - b * b) / (2 * r)\n        return (p + q) / 2.0"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        return triangle.a + triangle.b - triangle.c"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getThirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        l = triangle[0][0]\n        r = triangle[0][1]\n        b = triangle[1][1]\n        c = triangle[1][0]\n\n        if abs(l - r) > abs(b - c):\n            if abs(r - b) > abs(l - c):\n                return r\n            else:\n                return b\n        elif abs(b - c) > abs(r - l):\n            return c\n        else:\n            return l\n\n\nif __name__ == \"__main__\":\n    assert Solution().getThirdSide([[1, 2], [3, 4], [5, 6]]) == 2"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def third_side(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return (a * b + c) / 2\n\n\nif __name__ == '__main__':\n    assert third_side(5, 3, 4) == 3"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Point(object):\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        if not points:\n            return 0\n        p1, p2, p3 = points\n        a = p2.a - p1.a\n        b = p2.b - p1.b\n        c = p2.c - p1.c\n        if a == 0:\n            return b * b - c * c\n        if b == 0:\n            return a * a - c * c\n        if c == 0:\n            return a * a - b * b\n        return a * a + b * b - c * c"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle.\n# class Triangle:\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        # The formula is:\n        # a * b * c / (a + b + c)\n        # The formula is:\n        # (a + b + c) / 3\n        # The formula is:\n        # (a + b + c) / 2\n        # The formula is:\n        # (a + b + c) / 4\n        return (triangle.a + triangle.b + triangle.c) / 4.0\n\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        # The formula is:\n        # a * b * c / (a + b + c)\n        # The formula is:\n        # (a + b + c) / 3\n        # The formula is:\n        # (a + b + c) / 2\n        # The formula is:\n        # (a + b + c) / 4\n        return (triangle.a + triangle.b + triangle.c) / 4.0\n\n\nif __name__ == '__main__':\n    t = Triangle(1, 2, 3)\n    print(Solution().thirdSide(t))\n    t = Triangle(1, 2, 4)\n    print(Solution().thirdSide(t))\n    t = Triangle(1, 3, 4)\n    print(Solution().thirdSide(t))\n    t = Triangle(1, 3, 5)\n    print(Solution().thirdSide(t))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        return (triangle[1] - triangle[0]) / 2 * (triangle[2] - triangle[0]) / (triangle[2] - triangle[1])\n\nif __name__ == '__main__':\n    triangle = [1, 2, 3]\n    print Solution().thirdSide(triangle)"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        check points[0] to points[2]\n        :type points: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if len(points)!= 3:\n            return None\n        if points[0][0] == points[1][0] and points[1][0] == points[2][0]:\n            return points[1][1]\n        if points[0][0] == points[1][1] and points[1][1] == points[2][1]:\n            return points[2][0]\n        if points[0][0] == points[2][0] and points[1][0] == points[2][1]:\n            return points[2][1]\n\n        # find the point with smallest y\n        if points[0][0] < points[1][0] and points[1][0] < points[2][0]:\n            return points[1][1]\n        elif points[0][0] > points[1][0] and points[1][0] > points[2][0]:\n            return points[2][1]\n        elif points[0][0] > points[1][0] and points[1][0] < points[2][0]:\n            return points[0][1]\n        else:\n            return points[2][1]\n\n\nif __name__ == \"__main__\":\n    assert Solution().thirdSide([[0, 0], [0, 1], [1, 0]]) == 1"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle.\n# class Triangle:\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n#\n#     def area(self):\n#         return self.a * self.b / 2\n#\n#\n# def third_side(triangle):\n#     \"\"\"\n#     :type triangle: Triangle\n#     :rtype: int\n#     \"\"\"\n#     a = triangle.a\n#     b = triangle.b\n#     c = triangle.c\n#\n#     if a > b > c:\n#         return (a + b + c) / 2\n#     elif a > c > b:\n#         return (a + c + b) / 2\n#     else:\n#         return (b + a + c) / 2\n\nclass Solution:\n    # @param triangle, a list of points\n    # @return an integer\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[Point]\n        :rtype: int\n        \"\"\"\n        a, b, c = triangle[0], triangle[1], triangle[2]\n        s = (a + b + c) / 2\n        if s <= 0:\n            return 0\n        elif s <= b or s <= a or s <= c:\n            return s\n        elif s <= c or s <= b or s <= a:\n            return s\n        else:\n            return s\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    triangle = [Point(1, 3), Point(3, 4), Point(5, 1)]\n    print(sol.thirdSide(triangle))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def getThirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        l = triangle[0][0]\n        r = triangle[0][1]\n        b = triangle[1][1]\n        a = triangle[1][0]\n        #print triangle, l, r, b, a\n        if a >= l and a >= r:\n            return a\n        elif b >= l and b >= r:\n            return b\n        elif l >= a and l >= r:\n            return l\n        elif r >= a and r >= r:\n            return r\n        else:\n            return 0"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        return (triangle.b + triangle.c) / 2.0\n\n\nif __name__ == \"__main__\":\n    t = Triangle(1, 2, 3)\n    print t\n    s = Solution()\n    print s.thirdSide(t)"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Point:\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution:\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: Point\n        \"\"\"\n        a = points[0].a\n        b = points[0].b\n        c = points[0].c\n        for p in points[1:]:\n            a, b, c = a + p.a, b + p.b, c + p.c\n        return Point(a, b, c)"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "import math\n\n\ndef get_sides(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3: points of the triangle\n    Returns: the sides of the triangle\n    \"\"\"\n    return (p1[0] - p2[0], p1[1] - p2[1])\n\n\ndef get_sides2(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3: points of the triangle\n    Returns: the sides of the triangle\n    \"\"\"\n    return (p2[0] - p1[0], p2[1] - p1[1])\n\n\ndef get_sides3(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3: points of the triangle\n    Returns: the sides of the triangle\n    \"\"\"\n    return (p3[0] - p2[0], p3[1] - p2[1])\n\n\ndef get_sides4(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3: points of the triangle\n    Returns: the sides of the triangle\n    \"\"\"\n    return (p3[0] - p1[0], p3[1] - p1[1])\n\n\ndef get_sides5(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3: points of the triangle\n    Returns: the sides of the triangle\n    \"\"\"\n    return (p1[0] - p3[0], p1[1] - p3[1])\n\n\ndef get_sides6(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3: points of the triangle\n    Returns: the sides of the triangle\n    \"\"\"\n    return (p1[0] - p2[0], p1[1] - p2[1])\n\n\ndef get_sides7(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3: points of the triangle\n    Returns: the sides of the triangle\n    \"\"\"\n    return (p2[0] - p1[0], p2["
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) < 3:\n            return 0\n        area = 0\n        for i in range(0, len(points) - 2):\n            area += (points[i + 1][0] - points[i][0]) * (points[i + 2][1] - points[i + 1][1])\n        area /= 2\n        return area"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\nclass Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        return abs(self.a + self.b + self.c) / 2\n\n# Your Triangle object will be instantiated and called as such:\n# triangle = Triangle(a,b,c)\n# param_1 = triangle.area()\n\ndef right_angle_triangle(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return abs(a + b + c) / 2\n\nif __name__ == \"__main__\":\n    t = Triangle(2, 4, 6)\n    print(t.area())\n    print(right_angle_triangle(2, 4, 6))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def get_side(a, b, c):\n    return a + b - c\n\ndef get_side2(a, b, c):\n    return a + b + c\n\ndef get_side3(a, b, c):\n    return a - b + c\n\ndef get_side4(a, b, c):\n    return a - b - c\n\ndef get_side5(a, b, c):\n    return a + b - c\n\ndef get_side6(a, b, c):\n    return a + b + c\n\ndef get_side7(a, b, c):\n    return a - b - c\n\ndef get_side8(a, b, c):\n    return a - b + c\n\ndef get_side9(a, b, c):\n    return a + b - c\n\ndef get_side10(a, b, c):\n    return a + b + c\n\ndef get_side11(a, b, c):\n    return a - b + c\n\ndef get_side12(a, b, c):\n    return a - b - c\n\ndef get_side13(a, b, c):\n    return a + b + c\n\ndef get_side14(a, b, c):\n    return a - b - c\n\ndef get_side15(a, b, c):\n    return a + b - c\n\ndef get_side16(a, b, c):\n    return a - b + c\n\ndef get_side17(a, b, c):\n    return a + b - c\n\ndef get_side18(a, b, c):\n    return a - b - c\n\ndef get_side19(a, b, c):\n    return a + b + c\n\ndef get_side20(a, b, c):\n    return a - b + c\n\ndef get_side21(a, b, c):\n    return a + b + c\n\ndef get_side22(a, b, c):\n    return a - b - c\n\ndef get_side23(a, b, c):\n    return a + b + c\n\ndef get_side24("
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         \"\"\"\n#         a, b and c should be integers, greater than zero\n#         \"\"\"\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: int\n        \"\"\"\n        # a = triangle.a\n        # b = triangle.b\n        # c = triangle.c\n        #\n        # # check if triangle is valid\n        # if a <= 0 or b <= 0 or c <= 0:\n        #     return 0\n        #\n        # # check if triangle is equilateral\n        # if a == b == c:\n        #     return 0\n        #\n        # # check if triangle is rightangled\n        # if a + b > c or b + c > a or c + a > b:\n        #     return 0\n        #\n        # # get the side of the triangle\n        # side = min(a, b, c)\n        #\n        # # get the side of the right angled triangle\n        # right_side = (a + b) / 2\n        #\n        # # check if right angled triangle\n        # if side == right_side:\n        #     return side\n        #\n        # # check if right angled triangle\n        # if side == right_side:\n        #     return side\n        #\n        # # check if right angled triangle\n        # if side == right_side:\n        #     return side\n        #\n        # # return the third side\n        # return side"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n# Definition for a point\nclass Point(object):\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return str((self.a, self.b, self.c))\n\nclass Solution(object):\n    def thirdSide(self, p1, p2, p3):\n        \"\"\"\n        :param p1:\n        :param p2:\n        :param p3:\n        :return:\n        \"\"\"\n        # two lines\n        a = p1.a - p2.a\n        b = p1.b - p2.b\n        c = p1.c - p2.c\n        # solve for x\n        x = (a*p3.b - b*p3.a) / (a*p3.c - c*p3.b)\n        # solve for y\n        y = (b*p3.c - c*p3.a) / (a*p3.c - c*p3.b)\n        return Point(x, y)\n\nif __name__ == \"__main__\":\n    print Solution().thirdSide(Point(1, 1, 1), Point(2, 2, 2), Point(3, 3, 3))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         \"\"\"\n#         :type a: int\n#         :type b: int\n#         :type c: int\n#         \"\"\"\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: int\n        \"\"\"\n        # A right angle triangle\n        if triangle.a + triangle.b!= triangle.c or triangle.a + triangle.c!= triangle.b or triangle.b + triangle.c!= triangle.a:\n            return None\n        \n        # A right angle triangle\n        if triangle.a + triangle.b!= triangle.c or triangle.a + triangle.c!= triangle.b or triangle.b + triangle.c!= triangle.a:\n            return None\n        \n        return triangle.a + triangle.b\n\nif __name__ == \"__main__\":\n    triangle = Triangle(1, 3, 4)\n    print(Solution().thirdSide(triangle))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution:\n    # @return an integer\n    def getThirdSide(self, V):\n        return (V[0] + V[1]) / 2.0\n\n\nif __name__ == \"__main__\":\n    assert Solution().getThirdSide([3,4,5]) == 4.0"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle.\n# class Triangle:\n#     def __init__(self, p, q, r):\n#         self.p, self.q, self.r = p, q, r\n#\n#     def area(self):\n#         return self.p * (self.r + self.q) / 2\n#\n#     def perim(self):\n#         return self.p + self.q + self.r\n\nclass Solution:\n    # @param triangle, a list of points\n    # @return an integer\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[Point]\n        :rtype: int\n        \"\"\"\n        p = triangle[0]\n        q = triangle[1]\n        r = triangle[2]\n        # check for right angle\n        if p.x == q.x and p.y == r.y:\n            return 0\n        # check for left angle\n        if p.x == q.x and q.y == r.y:\n            return 0\n        # check for equilateral\n        if p.x == q.x and p.y == r.y:\n            return p.y - r.y\n        return 0\n\n\ndef main():\n    # Triangle = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Triangle = [[0, 0, 0], [1, 1, 1], [1, 2, 3]]\n    Solution().thirdSide(Triangle)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: int\n        \"\"\"\n        # base case\n        if len(triangle) < 3:\n            return 0\n\n        # a, b, c\n        a, b, c = triangle[0], triangle[1], triangle[2]\n        # left side\n        if a + b > c:\n            # triangle is right-angled\n            if a + c > b:\n                # a is the larger side\n                return a\n            else:\n                # b is the larger side\n                return b\n        else:\n            # triangle is left-angled\n            if b + c > a:\n                # a is the larger side\n                return a\n            else:\n                # b is the larger side\n                return b\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.thirdSide(triangle)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        a, b, c = triangle.a, triangle.b, triangle.c\n        if a + b > c:\n            if a + c > b:\n                if a + b > c:\n                    return max(a, b, c)\n                else:\n                    return max(max(a, b), c)\n            else:\n                return max(max(a, b), c)\n        else:\n            if a + c > b:\n                return max(max(a, b), c)\n            else:\n                return max(max(a, b), c)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle\nclass Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return '{} {} {} {}'.format(self.a, self.b, self.c, self.area())\n\n    def area(self):\n        return (self.b ** 2 + self.c ** 2 - self.a ** 2) / 2\n\n\nclass Solution:\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: int\n        \"\"\"\n        return self.area(triangle)\n\n    def area(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: int\n        \"\"\"\n        return triangle.a * triangle.b - triangle.c * triangle.b\n\n\nif __name__ == '__main__':\n    assert Solution().thirdSide(Triangle(3, 4, 5)) == 3\n    assert Solution().thirdSide(Triangle(3, 4, 4)) == 4\n    assert Solution().thirdSide(Triangle(3, 4, 7)) == 3"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Point(object):\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        sides = [p.a for p in points]\n        sides.sort()\n        return sides[2] - sides[1]"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution:\n    def triangleArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        \n        if not points:\n            return 0\n        \n        if len(points) == 1:\n            return points[0][0]\n        \n        x1, y1 = points[0]\n        x2, y2 = points[1]\n        x3, y3 = points[2]\n        \n        a = y2 - y1\n        b = x2 - x1\n        c = y3 - y2\n        \n        area = a*b + b*c + c*a\n        \n        return area / 2"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Definition for a right angled triangle.\n# class Triangle:\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\n#     def area(self):\n#         return 0.5 * abs(self.a + self.b + self.c -\n#                          sqrt(pow(self.a - self.b, 2) +\n#                              pow(self.b - self.c, 2) +\n#                              pow(self.c - self.a, 2)))\n\n# Definition for a point.\n# class Point:\n#     def __init__(self, a=0, b=0):\n#         self.x = a\n#         self.y = b\n\nclass Solution:\n    # @param triangle, a list of points\n    # @return an integer\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: List[Point]\n        :rtype: int\n        \"\"\"\n        if triangle == []:\n            return None\n        a, b, c = triangle[0].x, triangle[0].y, triangle[1].y\n        d, e, f = triangle[1].x, triangle[1].y, triangle[2].y\n        g, h, i = triangle[2].x, triangle[2].y, triangle[0].x\n        return int(0.5 * abs(a + b + c -\n                             sqrt(pow(d - e, 2) +\n                                 pow(b - f, 2) +\n                                 pow(c - g, 2))))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    triangle = [\n        Point(1, 1),\n        Point(1, 2),\n        Point(2, 1)\n    ]\n    print(s.thirdSide(triangle))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def triangleArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        def side(a, b, c):\n            return (a + b + c) / 2\n\n        def get_area(p1, p2, p3):\n            return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p3[0] - p1[0]) * (p2[1] - p1[1])\n\n        if len(points)!= 3:\n            return 0\n\n        a = side(points[0][0], points[1][0], points[2][0])\n        b = side(points[0][1], points[1][1], points[2][1])\n        c = side(points[0][2], points[1][2], points[2][2])\n        area = get_area(points[0], points[1], points[2])\n        return area / 2\n\n\nif __name__ == \"__main__\":\n    assert Solution().triangleArea([[0, 0], [0, 1], [1, 1]]) == 1\n    assert Solution().triangleArea([[0, 0], [0, 1], [1, 0]]) == 1\n    assert Solution().triangleArea([[0, 0], [1, 1], [0, 1]]) == 1\n    assert Solution().triangleArea([[1, 1], [0, 1], [1, 0]]) == 1\n    assert Solution().triangleArea([[1, 0], [1, 1], [0, 1]]) == 1\n    assert Solution().triangleArea([[0, 1], [0, 0], [1, 0]]) == 1"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def thirdSide(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) < 3:\n            return 0\n        m = max(points, key=lambda x: x[2])\n        a = points[0][2] - m[2]\n        b = points[1][2] - m[2]\n        c = points[2][2] - m[2]\n        # print a,b,c\n        if abs(a) < 1e-6:\n            if abs(b) < 1e-6:\n                return c\n            else:\n                return b\n        elif abs(b) < 1e-6:\n            return a\n        else:\n            return (a + b) / 2\n\n\nif __name__ == \"__main__\":\n    assert Solution().thirdSide([[0, 0, 0], [1, 1, 1], [0, 0, 1]]) == 1"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Definition for a right-angled triangle.\n# class Point:\n#     def __init__(self, a=0, b=0, c=0):\n#         self.x = a\n#         self.y = b\n#         self.z = c\n\nclass Solution:\n    def thirdSide(self, triangle):\n        \"\"\"\n        :type triangle: Point\n        :rtype: Point\n        \"\"\"\n        # http://stackoverflow.com/a/1207848/636361\n        b = triangle.z\n        a = triangle.x\n        c = triangle.y\n        # get the midpoint\n        mid = Point(a+b, b+c, 0)\n        # get the two sides\n        s1 = Point(a, b, 0)\n        s2 = Point(b, c, 0)\n        # get the angle of s1 and s2\n        angle = s1.angle(s2)\n        # get the angle of s1 and mid\n        midangle = s1.angle(mid)\n        # get the angle of mid and s2\n        angle2 = mid.angle(s2)\n        # get the angle of mid and midangle\n        thirdangle = midangle + angle2\n        # get the angle of s1 and s2 and thirdangle\n        angle3 = s1.angle(s2) + thirdangle\n        # get the angle of s1 and midangle and angle\n        thirdangle2 = s1.angle(midangle) + angle\n        # get the angle of midangle and s1 and thirdangle\n        thirdangle3 = midangle.angle(s1) + thirdangle2\n        # get the angle of midangle and s2 and angle3\n        thirdangle4 = midangle.angle(s2) + angle3\n        # get the angle of s1 and s2 and thirdangle4\n        thirdangle5 = s1.angle(s2) + thirdangle4\n        # get the angle of midangle and midangle and thirdangle5\n        thirdangle6 = midangle.angle(midangle) + thirdangle5\n        # get the angle of s1 and midangle and thirdangle6\n        thirdangle7 = s1.angle(midangle) + thirdangle"
    }
  ]
}