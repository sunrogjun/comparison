{
  "timestamp": "2025-09-14T18:27:44.155661",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 148,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from collections import namedtuple\n\n__author__ = 'Danyang'\n\n\nclass Month(namedtuple('Month', 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec')):\n    @classmethod\n    def get(cls, month):\n        if month <= 2:\n            return cls(month, month + 1, month, month + 2, month + 3, month + 4, month + 5, month + 6, month + 7, month + 8, month + 9)\n        else:\n            return cls(month, month - 1, month, month - 2, month - 3, month - 4, month - 5, month - 6, month - 7, month - 8, month - 9)\n\n\ndef print_season(month, day):\n    \"\"\"\n    :param month: month number\n    :param day: day number\n    :return: month name\n    \"\"\"\n    if day <= 30:\n        return Month.get(month).jan\n    elif day <= 59:\n        return Month.get(month).feb\n    elif day <= 89:\n        return Month.get(month).mar\n    elif day <= 120:\n        return Month.get(month).apr\n    elif day <= 150:\n        return Month.get(month).may\n    elif day <= 181:\n        return Month.get(month).jun\n    elif day <= 212:\n        return Month.get(month).jul\n    elif day <= 242:\n        return Month.get(month).aug\n    elif day <= 273:\n        return Month.get(month).sep\n    elif day <= 304:\n        return Month.get(month).oct\n    elif day <= 334:\n        return Month.get(month).nov\n    elif day <= 365:\n        return Month.get(month).dec\n    else:\n        return Month.get(month).dec\n\n\ndef main():\n    month = int(input())\n    day = int(input())\n    print(print_season(month, day))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def print_season(month, day):\n    if day >= 1 and day <= 31:\n        if month == 1:\n            print \"Spring\"\n        elif month == 2:\n            print \"Summer\"\n        elif month == 3:\n            print \"Fall\"\n        elif month == 4:\n            print \"Winter\"\n        elif month == 5:\n            print \"Winter\"\n        elif month == 6:\n            print \"Winter\"\n        elif month == 7:\n            print \"Spring\"\n        elif month == 8:\n            print \"Summer\"\n        elif month == 9:\n            print \"Fall\"\n        elif month == 10:\n            print \"Spring\"\n        elif month == 11:\n            print \"Summer\"\n        elif month == 12:\n            print \"Winter\"\n        elif month == 1:\n            print \"Spring\"\n        elif month == 2:\n            print \"Summer\"\n        elif month == 3:\n            print \"Fall\"\n        elif month == 4:\n            print \"Winter\"\n        elif month == 5:\n            print \"Winter\"\n        elif month == 6:\n            print \"Winter\"\n        elif month == 7:\n            print \"Spring\"\n        elif month == 8:\n            print \"Summer\"\n        elif month == 9:\n            print \"Fall\"\n        elif month == 10:\n            print \"Spring\"\n        elif month == 11:\n            print \"Summer\"\n        elif month == 12:\n            print \"Winter\"\n        elif month == 1:\n            print \"Spring\"\n        elif month == 2:\n            print \"Summer\"\n        elif month == 3:\n            print \"Fall\"\n        elif month == 4:\n            print \"Winter\"\n        elif month == 5:\n            print \"Winter\"\n        elif month == 6:\n            print \"Winter\"\n        elif month == 7:\n            print \"Spring\"\n        elif month == 8:\n            print \"Summer\"\n        elif month == 9:\n            print \"Fall\"\n        elif month == 10:\n            print \"Spring\"\n        elif month == 11:\n            print \"Summer\""
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/day-of-the-week-in-a-given-month/\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import sys\n\ndef season(month, day):\n    if day == 1:\n        if month == 1:\n            return'spring'\n        elif month == 2:\n            return'summer'\n        elif month == 3:\n            return 'autumn'\n        elif month == 4:\n            return 'winter'\n        else:\n            return'spring'\n    else:\n        if day < 3:\n            return'spring'\n        elif day < 5:\n            return'summer'\n        elif day < 8:\n            return 'autumn'\n        elif day < 11:\n            return 'winter'\n        else:\n            return'spring'\n\nif __name__ == '__main__':\n    if len(sys.argv) < 3:\n        print 'usage: python {} month day'.format(sys.argv[0])\n    else:\n        print season(int(sys.argv[1]), int(sys.argv[2]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Definition for a season.\nclass Season(object):\n    def __init__(self, month, day):\n        self.month = month\n        self.day = day\n\n    def __repr__(self):\n        return 'Season({}, {})'.format(self.month, self.day)\n\n# Your Season object will be instantiated and called as such:\n# obj = Season(month,day)\n# param_1 = obj.month\n# param_2 = obj.day\n# param_3 = obj.__repr__()\n\n\nclass Solution(object):\n    def getSeason(self, month, day):\n        \"\"\"\n        :type month: int\n        :type day: int\n        :rtype: str\n        \"\"\"\n        if day <= 2:\n            return 'winter'\n        elif day <= 4:\n            return'spring'\n        elif day <= 6:\n            return'summer'\n        elif day <= 8:\n            return 'fall'\n        else:\n            return 'winter'\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.getSeason(2,1)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import datetime\n\ndef print_season(month, day):\n    \"\"\"\n    month: integer\n    day: integer\n    \"\"\"\n    if day == 1:\n        print(\"Winter\")\n    elif day == 8:\n        print(\"Spring\")\n    elif day == 15:\n        print(\"Summer\")\n    elif day == 22:\n        print(\"Autumn\")\n    elif day == 30:\n        print(\"Winter\")\n    elif day == 1:\n        print(\"Spring\")\n    elif day == 8:\n        print(\"Summer\")\n    elif day == 15:\n        print(\"Autumn\")\n    elif day == 22:\n        print(\"Winter\")\n    elif day == 30:\n        print(\"Spring\")\n    elif day == 1:\n        print(\"Spring\")\n    elif day == 8:\n        print(\"Summer\")\n    elif day == 15:\n        print(\"Autumn\")\n    elif day == 22:\n        print(\"Winter\")\n    elif day == 30:\n        print(\"Spring\")\n    elif day == 1:\n        print(\"Spring\")\n    elif day == 8:\n        print(\"Summer\")\n    elif day == 15:\n        print(\"Autumn\")\n    elif day == 22:\n        print(\"Winter\")\n    elif day == 30:\n        print(\"Spring\")\n    elif day == 1:\n        print(\"Spring\")\n    elif day == 8:\n        print(\"Summer\")\n    elif day == 15:\n        print(\"Autumn\")\n    elif day == 22:\n        print(\"Winter\")\n    elif day == 30:\n        print(\"Spring\")\n    elif day == 1:\n        print(\"Spring\")\n    elif day == 8:\n        print(\"Summer\")\n    elif day == 15:\n        print(\"Autumn\")\n    elif day == 22:\n        print(\"Winter\")\n    elif day == 30:\n        print(\"Spring\")\n    elif day == 1:\n        print(\"Spring\")\n    elif day == 8:\n        print(\"Summer\")\n    elif day == 15:\n        print(\"Autumn\")\n    elif day == 22:\n        print(\"Winter"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\nimport datetime\n\ndef print_season(month, day):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    :param month: Month\n    :param day: Day\n    :return: Season\n    \"\"\"\n    if month == 1:\n        return \"Spring\"\n    elif month == 2:\n        return \"Summer\"\n    elif month == 3:\n        return \"Autumn\"\n    elif month == 4:\n        return \"Winter\"\n    else:\n        return \"Unknown\"\n\nif __name__ == \"__main__\":\n    try:\n        month = int(sys.argv[1])\n        day = int(sys.argv[2])\n        print print_season(month, day)\n    except:\n        print \"Usage: python %s <month> <day>\" % sys.argv[0]"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "print(\"The season is\", month_to_season(month, day))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/the-season/problem\n\ndef print_season(month, day):\n    if month == 12 and day > 29:\n        return \"Winter\"\n    elif month > 12:\n        return \"Spring\"\n    elif month > 6:\n        return \"Summer\"\n    elif month > 0:\n        return \"Fall\"\n    else:\n        return \"Winter\"\n\nprint_season(12, 30)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import sys\n\ndef get_season(month, day):\n    if day == 1:\n        return 'winter' if month == 1 else'spring' if month == 2 else'summer' if month == 3 else 'fall' if month == 4 else 'winter'\n    elif day == 15:\n        return'spring' if month == 1 else'summer' if month == 2 else 'fall' if month == 3 else 'winter'\n    elif day == 31:\n        return 'fall' if month == 1 else'spring' if month == 2 else'summer' if month == 3 else 'winter'\n    elif day == 45:\n        return 'fall' if month == 1 else'spring' if month == 2 else'summer' if month == 3 else 'winter'\n    elif day == 60:\n        return'summer' if month == 1 else'spring' if month == 2 else 'fall' if month == 3 else 'winter'\n    elif day == 75:\n        return'summer' if month == 1 else'spring' if month == 2 else 'fall' if month == 3 else 'winter'\n    elif day == 80:\n        return'summer' if month == 1 else'spring' if month == 2 else 'fall' if month == 3 else 'winter'\n    elif day == 85:\n        return'summer' if month == 1 else'spring' if month == 2 else 'fall' if month == 3 else 'winter'\n    elif day == 90:\n        return'summer' if month == 1 else'spring' if month == 2 else 'fall' if month == 3 else 'winter'\n    elif day == 95:\n        return'summer' if month == 1 else'spring' if month == 2 else 'fall' if month == 3 else 'winter'\n    elif day == 100:\n        return'summer' if month == 1 else'spring' if month == 2 else 'fall' if month == 3 else 'winter'\n    elif day == 105:\n        return'summer' if month == 1 else'spring' if month == 2 else 'fall' if month == 3 else 'winter'\n    elif day == 120:\n        return'summer' if month == 1 else'spring'"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def print_season(month, day):\n    \"\"\"\n    month: integer\n    day: integer\n    \"\"\"\n    if day == 1:\n        print('Winter')\n    elif day == 21:\n        print('Spring')\n    elif day == 31:\n        print('Summer')\n    elif day == 41:\n        print('Autumn')\n    elif day == 51:\n        print('Winter')\n    else:\n        print('Unknown')\n\nprint_season(1, 1)\nprint_season(1, 21)\nprint_season(1, 31)\nprint_season(1, 41)\nprint_season(1, 51)\nprint_season(2, 1)\nprint_season(2, 21)\nprint_season(2, 31)\nprint_season(2, 41)\nprint_season(2, 51)\nprint_season(3, 1)\nprint_season(3, 21)\nprint_season(3, 31)\nprint_season(3, 41)\nprint_season(3, 51)\nprint_season(4, 1)\nprint_season(4, 21)\nprint_season(4, 31)\nprint_season(4, 41)\nprint_season(4, 51)\nprint_season(5, 1)\nprint_season(5, 21)\nprint_season(5, 31)\nprint_season(5, 41)\nprint_season(5, 51)\nprint_season(6, 1)\nprint_season(6, 21)\nprint_season(6, 31)\nprint_season(6, 41)\nprint_season(6, 51)\nprint_season(7, 1)\nprint_season(7, 21)\nprint_season(7, 31)\nprint_season(7, 41)\nprint_season(7, 51)\nprint_season(8, 1)\nprint_season(8, 21)\nprint_season(8, 31)\nprint_season(8, 41)\nprint_season(8, 51)\nprint_season(9, 1)\nprint_season(9, 21)\nprint_season(9, 31)\nprint_season(9, 41)\nprint_season(9, 51)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def season(month, day):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return \"Spring\"\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return \"Summer\"\n    elif month == 2:\n        return \"Fall\"\n    elif month == 1 or month == 2 or month == 4 or month == 6 or month == 7 or month == 8 or month == 9 or month == 10 or month == 12:\n        return \"Winter\"\n    else:\n        return \"Unknown\""
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/print-season/problem\n# import time\n# start_time = time.time()\n# # Complete the printSeason function below.\n# def printSeason(month, day):\n#     if day > 30:\n#         print(\"Spring\")\n#     elif day > 21:\n#         print(\"Summer\")\n#     elif day > 14:\n#         print(\"Autumn\")\n#     elif day > 7:\n#         print(\"Winter\")\n#     elif day > 1:\n#         print(\"Winter\")\n#     elif day == 1:\n#         print(\"Winter\")\n#     elif day == 7:\n#         print(\"Winter\")\n#     elif day == 14:\n#         print(\"Autumn\")\n#     elif day == 21:\n#         print(\"Summer\")\n#     elif day == 30:\n#         print(\"Spring\")\n#     else:\n#         print(\"Fall\")\n# printSeason(1, 1)\n# # If you do not know the month and day, you can use the \"time\" module to convert the time and print the season\n# # start_time = time.time()\n# # printSeason(1, 1)\n# # print(\"--- %s seconds ---\" % (time.time() - start_time))\n\ndef printSeason(month, day):\n    if day > 30:\n        print(\"Spring\")\n    elif day > 21:\n        print(\"Summer\")\n    elif day > 14:\n        print(\"Autumn\")\n    elif day > 7:\n        print(\"Winter\")\n    elif day > 1:\n        print(\"Winter\")\n    elif day == 1:\n        print(\"Winter\")\n    elif day == 7:\n        print(\"Winter\")\n    elif day == 14:\n        print(\"Autumn\")\n    elif day == 21:\n        print(\"Summer\")\n    elif day == 30:\n        print(\"Spring\")\n    else:\n        print(\"Fall\")\n\nprintSeason(1, 1)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/season-of-the-winter-snowman/problem\n\nimport sys\n\n\ndef print_season(month, day):\n    if day == 1:\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            print(\"Winter\")\n        elif month == 2:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif day == 15:\n        if month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            print(\"Winter\")\n        elif month == 2:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif day == 16:\n        if month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            print(\"Winter\")\n        elif month == 2:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif day == 17:\n        if month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            print(\"Winter\")\n        elif month == 2:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif day == 18:\n        if month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            print(\"Winter\")\n        elif month == 2:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif day == 19:\n        if month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            print(\"Winter\")\n        elif month == 2:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif day == 20:\n        if month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            print(\"Winter\")\n        elif month == 2:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif day == 21:\n        if"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def print_season(month, day):\n    if day == 1:\n        return \"spring\"\n    elif day == 21:\n        return \"summer\"\n    elif day == 30:\n        return \"fall\"\n    elif day == 31:\n        return \"winter\"\n    elif day > 31:\n        return \"spring\"\n    else:\n        return \"summer\"\n\ndef main():\n    print_season(1, 1)\n    print_season(2, 2)\n    print_season(3, 3)\n    print_season(4, 4)\n    print_season(5, 5)\n    print_season(6, 6)\n    print_season(7, 7)\n    print_season(8, 8)\n    print_season(9, 9)\n    print_season(10, 10)\n    print_season(11, 11)\n    print_season(12, 12)\n    print_season(1, 2)\n    print_season(2, 3)\n    print_season(3, 4)\n    print_season(4, 5)\n    print_season(5, 6)\n    print_season(6, 7)\n    print_season(7, 8)\n    print_season(8, 9)\n    print_season(9, 10)\n    print_season(10, 11)\n    print_season(11, 12)\n    print_season(12, 1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/py-calendar-and-time\n\n# Complete the printSeason function below.\ndef printSeason(day, month):\n    if month == 1:\n        print('Spring')\n    elif month == 2:\n        print('Summer')\n    elif month == 3:\n        print('Fall')\n    elif month == 4:\n        print('Winter')\n    elif month == 5:\n        print('Spring')\n    elif month == 6:\n        print('Summer')\n    elif month == 7:\n        print('Fall')\n    elif month == 8:\n        print('Winter')\n    elif month == 9:\n        print('Spring')\n    elif month == 10:\n        print('Summer')\n    elif month == 11:\n        print('Fall')\n    elif month == 12:\n        print('Winter')\n    else:\n        print('Error')\n\ndef printSeason(day, month):\n    if month == 1:\n        print('Spring')\n    elif month == 2:\n        print('Summer')\n    elif month == 3:\n        print('Fall')\n    elif month == 4:\n        print('Winter')\n    elif month == 5:\n        print('Spring')\n    elif month == 6:\n        print('Summer')\n    elif month == 7:\n        print('Fall')\n    elif month == 8:\n        print('Winter')\n    elif month == 9:\n        print('Spring')\n    elif month == 10:\n        print('Summer')\n    elif month == 11:\n        print('Fall')\n    elif month == 12:\n        print('Winter')\n    else:\n        print('Error')\n\n# Your printSeason function should accept three parameters:\n# day: day of the week (1-7),\n# month: month of the year (1-12),\n# and day as an integer (0-31).\n# It should return a string representing the season.\n# Hint: If you have trouble understanding this, take a look at the\n# following link: https://www.hackerrank.com/challenges/py-calendar-and-time"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def print_season(month, day):\n    if month == 1:\n        print \"Spring\"\n    elif month == 2:\n        print \"Summer\"\n    elif month == 3:\n        print \"Fall\"\n    elif month == 4:\n        print \"Winter\"\n    elif month == 5:\n        print \"Spring\"\n    elif month == 6:\n        print \"Summer\"\n    elif month == 7:\n        print \"Fall\"\n    elif month == 8:\n        print \"Winter\"\n    elif month == 9:\n        print \"Spring\"\n    elif month == 10:\n        print \"Summer\"\n    elif month == 11:\n        print \"Fall\"\n    elif month == 12:\n        print \"Winter\"\n    else:\n        print \"Invalid month\"\n\nif __name__ == '__main__':\n    print_season(1, 1)\n    print_season(2, 1)\n    print_season(3, 1)\n    print_season(4, 1)\n    print_season(5, 1)\n    print_season(6, 1)\n    print_season(7, 1)\n    print_season(8, 1)\n    print_season(9, 1)\n    print_season(10, 1)\n    print_season(11, 1)\n    print_season(12, 1)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# I worked on this challenge with:\n# This challenge took me [#] hours.\n#\n#\n\n# These are the months.\nMONTHS = ['January', 'February', 'March', 'April', 'May', 'June',\n          'July', 'August', 'September', 'October', 'November', 'December']\n\n\ndef print_season(month, day):\n    \"\"\"\n    For the given month and day, print out the correct season.\n    :param month: month of the date\n    :param day: day of the date\n    :return: the season (e.g. 'Winter')\n    \"\"\"\n    if day == 1:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"th\")\n    elif day == 2:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"nd\")\n    elif day == 3:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"rd\")\n    elif day == 4:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"th\")\n    elif day == 5:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"th\")\n    elif day == 6:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"th\")\n    elif day == 7:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"th\")\n    elif day == 8:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"th\")\n    elif day == 9:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"th\")\n    elif day == 10:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"th\")\n    elif day == 11:\n        print(MONTHS[month - 1] + \" \" + str(day) + \"th\")\n    elif day == 12:"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "import sys\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: None\n    \"\"\"\n    if day == 1:\n        print(\"Spring\")\n    elif day == 15:\n        print(\"Summer\")\n    elif day == 30:\n        print(\"Fall\")\n    elif day == 31:\n        print(\"Winter\")\n    elif day == 30:\n        print(\"Winter\")\n    elif day == 31:\n        print(\"Winter\")\n    elif day == 30:\n        print(\"Winter\")\n    elif day == 31:\n        print(\"Winter\")\n    elif day == 29:\n        print(\"Winter\")\n    elif day == 28:\n        print(\"Winter\")\n    elif day == 27:\n        print(\"Winter\")\n    elif day == 26:\n        print(\"Winter\")\n    elif day == 25:\n        print(\"Winter\")\n    elif day == 24:\n        print(\"Winter\")\n    elif day == 23:\n        print(\"Winter\")\n    elif day == 22:\n        print(\"Winter\")\n    elif day == 21:\n        print(\"Winter\")\n    elif day == 20:\n        print(\"Winter\")\n    elif day == 19:\n        print(\"Winter\")\n    elif day == 18:\n        print(\"Winter\")\n    elif day == 17:\n        print(\"Winter\")\n    elif day == 16:\n        print(\"Winter\")\n    elif day == 15:\n        print(\"Winter\")\n    elif day == 14:\n        print(\"Winter\")\n    elif day == 13:\n        print(\"Winter\")\n    elif day == 12:\n        print(\"Winter\")\n    elif day == 11:\n        print(\"Winter\")\n    elif day == 10:\n        print(\"Winter\")\n    elif day == 9:\n        print(\"Winter\")\n    elif day == 8:\n        print(\"Winter\")\n    elif day == 7:\n        print(\"Winter\")\n    elif day == 6:\n        print(\"Winter\")\n    elif day == 5:\n        print(\"Winter\")\n    elif day == 4:"
    },
    {
      "rank": 20,
      "score": 9.994331165610069,
      "candidate": "def print_season(month, day):\n    if month == 1:\n        return \"Winter\"\n    elif month == 2:\n        return \"Spring\"\n    elif month == 3:\n        return \"Summer\"\n    elif month == 4:\n        return \"Autumn\"\n    elif month == 5:\n        return \"Winter\"\n    elif month == 6:\n        return \"Spring\"\n    elif month == 7:\n        return \"Summer\"\n    elif month == 8:\n        return \"Autumn\"\n    elif month == 9:\n        return \"Winter\"\n    elif month == 10:\n        return \"Spring\"\n    elif month == 11:\n        return \"Summer\"\n    elif month == 12:\n        return \"Autumn\"\n    else:\n        return \"Not a valid month\"\n\ndef main():\n    print_season(1, 1)\n    print_season(1, 2)\n    print_season(1, 3)\n    print_season(1, 4)\n    print_season(1, 5)\n    print_season(1, 6)\n    print_season(1, 7)\n    print_season(1, 8)\n    print_season(1, 9)\n    print_season(1, 10)\n    print_season(1, 11)\n    print_season(1, 12)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 9.98495306357382,
      "candidate": "def print_season(month, day):\n    if month == 1:\n        print('Spring')\n    elif month == 2:\n        print('Summer')\n    elif month == 3:\n        print('Autumn')\n    elif month == 4:\n        print('Winter')\n    elif month == 5:\n        print('Spring')\n    elif month == 6:\n        print('Summer')\n    elif month == 7:\n        print('Autumn')\n    elif month == 8:\n        print('Winter')\n    elif month == 9:\n        print('Spring')\n    elif month == 10:\n        print('Summer')\n    elif month == 11:\n        print('Autumn')\n    elif month == 12:\n        print('Winter')\n    else:\n        print('Invalid month')\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print('Enter the month and day:')\n    month = int(input())\n    day = int(input())\n    print_season(month, day)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 9.95142772139694,
      "candidate": "# https://www.hackerrank.com/challenges/print-the-season/problem\n\n#!/bin/python\n\n# Time Complexity: O(1)\n# Space Complexity: O(1)\n\n# Write a function that takes a month and day as input and prints the season.\n# If the month is February and the day is 29, print \"Spring\".\n# If the month is February and the day is 30, print \"Summer\".\n# If the month is February and the day is 31, print \"Fall\".\n# If the month is February and the day is 1, print \"Winter\".\n# If the month is February and the day is 2, print \"Winter\".\n# If the month is February and the day is 3, print \"Winter\".\n# If the month is February and the day is 4, print \"Winter\".\n# If the month is February and the day is 5, print \"Winter\".\n# If the month is February and the day is 6, print \"Winter\".\n# If the month is February and the day is 7, print \"Winter\".\n# If the month is February and the day is 8, print \"Winter\".\n# If the month is February and the day is 9, print \"Winter\".\n# If the month is February and the day is 10, print \"Winter\".\n# If the month is February and the day is 11, print \"Winter\".\n# If the month is February and the day is 12, print \"Winter\".\n# If the month is February and the day is 1, print \"Winter\".\n# If the month is February and the day is 2, print \"Spring\".\n# If the month is February and the day is 3, print \"Summer\".\n# If the month is February and the day is 4, print \"Summer\".\n# If the month is February and the day is 5, print \"Summer\".\n# If the month is February and the day is 6, print \"Summer\".\n# If the month is February and the day is 7, print \"Summer\".\n# If the month is February and the day is 8, print \"Summer\".\n# If the month is February and the day is 9, print \"Summer\".\n# If the month is February and the day is 10, print \"Summer\".\n# If the month is February and the day is 11, print \"Summer\"."
    },
    {
      "rank": 23,
      "score": 9.922023229801196,
      "candidate": "month = {'Jan':1, 'Feb':2, 'Mar':3, 'Apr':4, 'May':5, 'Jun':6, 'Jul':7, 'Aug':8, 'Sep':9, 'Oct':10, 'Nov':11, 'Dec':12}\n\ndef print_season(month, day):\n    if day < 31:\n        print('Jan')\n    elif day < 61:\n        print('Feb')\n    elif day < 91:\n        print('Mar')\n    elif day < 121:\n        print('Apr')\n    elif day < 152:\n        print('May')\n    elif day < 182:\n        print('Jun')\n    elif day < 213:\n        print('Jul')\n    elif day < 244:\n        print('Aug')\n    elif day < 274:\n        print('Sep')\n    elif day < 305:\n        print('Oct')\n    elif day < 335:\n        print('Nov')\n    elif day < 366:\n        print('Dec')\n\ndef main():\n    print_season(month[input('Enter month: ')], int(input('Enter day: ')))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 9.901655582616199,
      "candidate": "import collections\n\ndef season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return \"Spring\"\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return \"Summer\"\n    elif month == 2:\n        return \"Fall\"\n    else:\n        return \"Winter\"\n\ndef test_season(month, day):\n    assert season(month, day) == \"Spring\"\n    assert season(1, 1) == \"Spring\"\n    assert season(1, 31) == \"Spring\"\n    assert season(1, 32) == \"Fall\"\n    assert season(2, 1) == \"Summer\"\n    assert season(2, 29) == \"Summer\"\n    assert season(2, 30) == \"Fall\"\n    assert season(3, 1) == \"Spring\"\n    assert season(3, 31) == \"Spring\"\n    assert season(3, 32) == \"Fall\"\n    assert season(4, 1) == \"Summer\"\n    assert season(4, 30) == \"Summer\"\n    assert season(4, 31) == \"Fall\"\n    assert season(5, 1) == \"Spring\"\n    assert season(5, 31) == \"Spring\"\n    assert season(5, 32) == \"Fall\"\n    assert season(6, 1) == \"Spring\"\n    assert season(6, 30) == \"Spring\"\n    assert season(6, 31) == \"Fall\"\n    assert season(7, 1) == \"Spring\"\n    assert season(7, 30) == \"Spring\"\n    assert season(7, 31) == \"Fall\"\n    assert season(8, 1) == \"Spring\"\n    assert season(8, 30) == \"Spring\"\n    assert season(8, 31) == \"Fall\"\n    assert season(9, 1) == \"Spring\"\n    assert season(9, 30) == \"Spring\"\n    assert season(9, 31) == \"Fall\"\n    assert season(10, 1) == \""
    },
    {
      "rank": 25,
      "score": 9.874416912804335,
      "candidate": "def print_season(month, day):\n    if day == 1:\n        if month == 3 or month == 5 or month == 8 or month == 10:\n            print('Spring')\n        elif month == 6 or month == 9 or month == 11:\n            print('Summer')\n        elif month == 2:\n            print('Autumn')\n        elif month == 4 or month == 7:\n            print('Winter')\n        else:\n            print('Unknown')\n    elif day == 2:\n        if month == 3:\n            print('Spring')\n        elif month == 5:\n            print('Summer')\n        elif month == 8:\n            print('Autumn')\n        elif month == 10:\n            print('Winter')\n        else:\n            print('Unknown')\n    elif day == 3:\n        if month == 3:\n            print('Spring')\n        elif month == 5:\n            print('Summer')\n        elif month == 8:\n            print('Autumn')\n        elif month == 10:\n            print('Winter')\n        else:\n            print('Unknown')\n    elif day == 4:\n        if month == 3:\n            print('Spring')\n        elif month == 5:\n            print('Summer')\n        elif month == 8:\n            print('Autumn')\n        elif month == 10:\n            print('Winter')\n        else:\n            print('Unknown')\n    elif day == 5:\n        if month == 3:\n            print('Spring')\n        elif month == 5:\n            print('Summer')\n        elif month == 8:\n            print('Autumn')\n        elif month == 10:\n            print('Winter')\n        else:\n            print('Unknown')\n    elif day == 6:\n        if month == 3:\n            print('Spring')\n        elif month == 5:\n            print('Summer')\n        elif month == 8:\n            print('Autumn')\n        elif month == 10:\n            print('Winter')\n        else:\n            print('Unknown')\n    elif day == 7:\n        if month == 3:\n            print('Spring')\n        elif month == 5:\n            print('Summer')"
    },
    {
      "rank": 26,
      "score": 9.798746820104979,
      "candidate": "def print_season(month, day):\n    '''\n    month is a tuple of the month number as an integer and a string as a\n    month name.\n    day is an integer.\n    '''\n    # Write your code here\n    if day < 7:\n        print \"Spring\"\n    elif day < 14:\n        print \"Summer\"\n    elif day < 21:\n        print \"Autumn\"\n    elif day < 28:\n        print \"Winter\"\n    elif day < 31:\n        print \"Winter\"\n    elif day < 32:\n        print \"Winter\"\n    elif day < 37:\n        print \"Spring\"\n    elif day < 42:\n        print \"Summer\"\n    elif day < 48:\n        print \"Autumn\"\n    elif day < 52:\n        print \"Winter\"\n    elif day < 57:\n        print \"Winter\"\n    elif day < 58:\n        print \"Winter\"\n    elif day < 63:\n        print \"Spring\"\n    elif day < 68:\n        print \"Summer\"\n    elif day < 73:\n        print \"Autumn\"\n    elif day < 78:\n        print \"Winter\"\n    elif day < 83:\n        print \"Winter\"\n    elif day < 88:\n        print \"Spring\"\n    elif day < 93:\n        print \"Summer\"\n    elif day < 98:\n        print \"Autumn\"\n    elif day < 103:\n        print \"Winter\"\n    elif day < 108:\n        print \"Winter\"\n    elif day < 113:\n        print \"Spring\"\n    elif day < 118:\n        print \"Summer\"\n    elif day < 123:\n        print \"Autumn\"\n    elif day < 128:\n        print \"Winter\"\n    elif day < 133:\n        print \"Winter\"\n    elif day < 138:\n        print \"Spring\"\n    elif day < 143:\n        print \"Summer\"\n    elif day < 148:\n        print \"Autumn\"\n    elif day < 153:\n        print \"Winter\"\n    elif day < 158:\n        print \"Winter\"\n    elif"
    },
    {
      "rank": 27,
      "score": 9.782326508325069,
      "candidate": "from collections import namedtuple\n\n__author__ = 'Daniel'\n\n\nclass Date(namedtuple('Date','month day')):\n    \"\"\"\n    A class representing a date.\n    \"\"\"\n\n    def __str__(self):\n        \"\"\"\n        Return the date in the format day/month/year.\n        \"\"\"\n        return \"{}/{}/{}\".format(self.day, self.month, self.year)\n\n\ndef get_season(date):\n    \"\"\"\n    Get the season for a given date.\n    :param date: The date.\n    :return: The season.\n    \"\"\"\n    if date.month == 1:\n        return \"Spring\"\n    elif date.month == 2:\n        return \"Summer\"\n    elif date.month == 3:\n        return \"Autumn\"\n    elif date.month == 4:\n        return \"Winter\"\n    else:\n        return \"Unknown\"\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    date = Date(5, 1, 2015)\n    print(get_season(date))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 9.777500714417844,
      "candidate": "months = {1: \"January\", 2: \"February\", 3: \"March\", 4: \"April\", 5: \"May\", 6: \"June\", 7: \"July\", 8: \"August\", 9: \"September\", 10: \"October\", 11: \"November\", 12: \"December\"}\n\ndef print_season(month, day):\n    if day in range(1, 32):\n        print(months[month])\n    else:\n        print(\"Invalid day\")\n\ndef main():\n    print_season(1, 1)\n    print_season(2, 1)\n    print_season(2, 28)\n    print_season(3, 1)\n    print_season(3, 30)\n    print_season(4, 1)\n    print_season(4, 30)\n    print_season(5, 1)\n    print_season(5, 31)\n    print_season(6, 1)\n    print_season(6, 30)\n    print_season(7, 1)\n    print_season(7, 31)\n    print_season(8, 1)\n    print_season(8, 31)\n    print_season(9, 1)\n    print_season(9, 30)\n    print_season(10, 1)\n    print_season(10, 31)\n    print_season(11, 1)\n    print_season(11, 30)\n    print_season(12, 1)\n    print_season(12, 31)\n    print_season(1, 31)\n    print_season(2, 31)\n    print_season(3, 31)\n    print_season(4, 31)\n    print_season(5, 31)\n    print_season(6, 31)\n    print_season(7, 31)\n    print_season(8, 31)\n    print_season(9, 31)\n    print_season(10, 31)\n    print_season(11, 31)\n    print_season(12, 31)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 9.771359255699423,
      "candidate": "import datetime\n\n\ndef print_season(month, day):\n    \"\"\"\n    :param month: Month of the year\n    :param day: Day of the month\n    :return: Season\n    \"\"\"\n    if day < 7:\n        return \"winter\"\n    elif day < 14:\n        return \"spring\"\n    elif day < 21:\n        return \"summer\"\n    elif day < 28:\n        return \"autumn\"\n    elif day < 35:\n        return \"winter\"\n    elif day < 42:\n        return \"spring\"\n    elif day < 49:\n        return \"summer\"\n    elif day < 56:\n        return \"autumn\"\n    elif day < 63:\n        return \"winter\"\n    else:\n        return \"spring\"\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    now = datetime.datetime.now()\n    print(print_season(now.month, now.day))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 9.747731750234102,
      "candidate": "import sys\n\n\ndef get_season(month, day):\n    if day == 1:\n        if month == 1:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 3:\n            return \"Fall\"\n        elif month == 4:\n            return \"Winter\"\n        elif month == 5:\n            return \"Spring\"\n        elif month == 6:\n            return \"Summer\"\n        elif month == 7:\n            return \"Fall\"\n        elif month == 8:\n            return \"Winter\"\n        elif month == 9:\n            return \"Spring\"\n        elif month == 10:\n            return \"Summer\"\n        elif month == 11:\n            return \"Fall\"\n        elif month == 12:\n            return \"Winter\"\n        else:\n            return \"Unknown\"\n    elif day == 2:\n        if month == 1:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 3:\n            return \"Fall\"\n        elif month == 4:\n            return \"Winter\"\n        elif month == 5:\n            return \"Spring\"\n        elif month == 6:\n            return \"Summer\"\n        elif month == 7:\n            return \"Fall\"\n        elif month == 8:\n            return \"Winter\"\n        elif month == 9:\n            return \"Spring\"\n        elif month == 10:\n            return \"Summer\"\n        elif month == 11:\n            return \"Fall\"\n        elif month == 12:\n            return \"Winter\"\n        else:\n            return \"Unknown\"\n    elif day == 3:\n        if month == 1:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 3:\n            return \"Fall\"\n        elif month == 4:\n            return \"Winter\"\n        elif month == 5:\n            return \"Spring\"\n        elif month == 6:\n            return \"Summer\"\n        elif month == 7:\n            return \"Fall\"\n        elif month == 8:\n            return \"Winter\"\n        elif month == 9:"
    },
    {
      "rank": 31,
      "score": 9.715692759871498,
      "candidate": "from datetime import date\n\ndef print_season(month, day):\n    if (month == 1):\n        if (day == 1):\n            print(\"Winter\")\n        elif (day == 2):\n            print(\"Spring\")\n        elif (day == 3):\n            print(\"Summer\")\n        elif (day == 4):\n            print(\"Autumn\")\n        elif (day == 5):\n            print(\"Winter\")\n        elif (day == 6):\n            print(\"Spring\")\n        elif (day == 7):\n            print(\"Summer\")\n        elif (day == 8):\n            print(\"Autumn\")\n        elif (day == 9):\n            print(\"Winter\")\n        elif (day == 10):\n            print(\"Spring\")\n        elif (day == 11):\n            print(\"Summer\")\n        elif (day == 12):\n            print(\"Autumn\")\n    elif (month == 2):\n        if (day == 1):\n            print(\"Spring\")\n        elif (day == 2):\n            print(\"Summer\")\n        elif (day == 3):\n            print(\"Autumn\")\n        elif (day == 4):\n            print(\"Winter\")\n        elif (day == 5):\n            print(\"Spring\")\n        elif (day == 6):\n            print(\"Summer\")\n        elif (day == 7):\n            print(\"Autumn\")\n        elif (day == 8):\n            print(\"Winter\")\n        elif (day == 9):\n            print(\"Spring\")\n        elif (day == 10):\n            print(\"Summer\")\n        elif (day == 11):\n            print(\"Autumn\")\n        elif (day == 12):\n            print(\"Winter\")\n    elif (month == 3):\n        if (day == 1):\n            print(\"Spring\")\n        elif (day == 2):\n            print(\"Summer\")\n        elif (day == 3):\n            print(\"Autumn\")\n        elif (day == 4):\n            print(\"Winter\")\n        elif (day == 5):\n            print(\"Spring\")\n        elif (day == 6):\n            print(\"Summer\")\n        elif (day == 7):\n            print(\"Autumn"
    },
    {
      "rank": 32,
      "score": 9.697665432474222,
      "candidate": "def get_season(month, day):\n    if month == 1:\n        return 'Spring'\n    elif month == 2:\n        return 'Summer'\n    elif month == 3:\n        return 'Fall'\n    elif month == 4:\n        return 'Winter'\n    elif month == 5:\n        return 'Spring'\n    elif month == 6:\n        return 'Summer'\n    elif month == 7:\n        return 'Fall'\n    elif month == 8:\n        return 'Winter'\n    elif month == 9:\n        return 'Spring'\n    elif month == 10:\n        return 'Summer'\n    elif month == 11:\n        return 'Fall'\n    elif month == 12:\n        return 'Winter'\n\ndef print_season(month, day):\n    print get_season(month, day)\n\n# Test cases\nprint get_season(1, 1)\nprint get_season(2, 1)\nprint get_season(2, 28)\nprint get_season(3, 1)\nprint get_season(3, 28)\nprint get_season(3, 29)\nprint get_season(4, 1)\nprint get_season(4, 28)\nprint get_season(4, 29)\nprint get_season(5, 1)\nprint get_season(5, 28)\nprint get_season(5, 29)\nprint get_season(6, 1)\nprint get_season(6, 28)\nprint get_season(6, 29)\nprint get_season(7, 1)\nprint get_season(7, 28)\nprint get_season(7, 29)\nprint get_season(8, 1)\nprint get_season(8, 28)\nprint get_season(8, 29)\nprint get_season(9, 1)\nprint get_season(9, 28)\nprint get_season(9, 29)\nprint get_season(10, 1)\nprint get_season(10, 28)\nprint get_season(10, 29)\nprint get_season(11, 1)\nprint get_season(11, 28)\nprint get_season(11, 29)\nprint get_season(12,"
    },
    {
      "rank": 33,
      "score": 9.660432686784862,
      "candidate": "# https://www.hackerrank.com/challenges/print-season/problem\n\nimport datetime\n\n# Returns the number of days in the given month and day\n# https://www.hackerrank.com/challenges/print-season/problem#sample-code\ndef daysInMonth(month, day):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    elif month == 2:\n        if day < 29:\n            return 29\n        elif day == 29:\n            return 28\n        else:\n            return 30\n    else:\n        return 31\n\n# Returns the season for the given month and day\n# https://www.hackerrank.com/challenges/print-season/problem#sample-code\ndef season(month, day):\n    if month == 1:\n        if day < 29:\n            return \"winter\"\n        elif day == 29:\n            return \"spring\"\n        else:\n            return \"summer\"\n    elif month == 3:\n        if day < 29:\n            return \"spring\"\n        elif day == 29:\n            return \"summer\"\n        else:\n            return \"winter\"\n    elif month == 5:\n        if day < 29:\n            return \"summer\"\n        elif day == 29:\n            return \"fall\"\n        else:\n            return \"winter\"\n    elif month == 7:\n        if day < 29:\n            return \"fall\"\n        elif day == 29:\n            return \"winter\"\n        else:\n            return \"spring\"\n    elif month == 8:\n        if day < 29:\n            return \"winter\"\n        elif day == 29:\n            return \"spring\"\n        else:\n            return \"summer\"\n    elif month == 10:\n        if day < 29:\n            return \"summer\"\n        elif day == 29:\n            return \"fall\"\n        else:\n            return \"winter\"\n    elif month == 12:\n        if day < 29:"
    },
    {
      "rank": 34,
      "score": 9.618629888281092,
      "candidate": "def print_season(month, day):\n    if day < 15:\n        return 'winter'\n    elif day < 30:\n        return'spring'\n    elif day < 45:\n        return'summer'\n    elif day < 60:\n        return 'fall'\n    elif day < 75:\n        return 'winter'\n    elif day < 90:\n        return'spring'\n    elif day < 105:\n        return'summer'\n    elif day < 120:\n        return 'fall'\n    elif day < 135:\n        return 'winter'\n    elif day < 150:\n        return'spring'\n    elif day < 165:\n        return'summer'\n    elif day < 180:\n        return 'fall'\n    elif day < 195:\n        return 'winter'\n    elif day < 210:\n        return'spring'\n    elif day < 225:\n        return'summer'\n    elif day < 240:\n        return 'fall'\n    elif day < 255:\n        return 'winter'\n    elif day < 270:\n        return'spring'\n    elif day < 285:\n        return'summer'\n    elif day < 300:\n        return 'fall'\n    elif day < 315:\n        return 'winter'\n    elif day < 330:\n        return'spring'\n    elif day < 345:\n        return'summer'\n    elif day < 360:\n        return 'fall'\n    elif day < 375:\n        return 'winter'\n    elif day < 390:\n        return'spring'\n    elif day < 405:\n        return'summer'\n    elif day < 420:\n        return 'fall'\n    elif day < 435:\n        return 'winter'\n    elif day < 450:\n        return'spring'\n    elif day < 465:\n        return'summer'\n    elif day < 480:\n        return 'fall'\n    elif day < 495:\n        return 'winter'\n    elif day < 510:\n        return'spring'\n    elif day < 525:\n        return'summer'\n    el"
    },
    {
      "rank": 35,
      "score": 9.535339310917468,
      "candidate": "def get_season(month, day):\n    \"\"\"\n    Input: month is an integer between 1 and 12, day is an integer between 1 and 31\n    Output: a string representing the season for the given month and day\n    \"\"\"\n\n    if month == 1:\n        return \"Spring\"\n    elif month == 2:\n        return \"Summer\"\n    elif month == 3:\n        return \"Autumn\"\n    elif month == 4:\n        return \"Winter\"\n    elif month == 5:\n        return \"Winter\"\n    elif month == 6:\n        return \"Winter\"\n    elif month == 7:\n        return \"Winter\"\n    elif month == 8:\n        return \"Spring\"\n    elif month == 9:\n        return \"Spring\"\n    elif month == 10:\n        return \"Summer\"\n    elif month == 11:\n        return \"Autumn\"\n    elif month == 12:\n        return \"Autumn\"\n\n\n\n# Test Cases\n\n# month = 1, day = 1\n# expected output = \"Spring\"\n# month = 1, day = 2\n# expected output = \"Autumn\"\n# month = 1, day = 22\n# expected output = \"Spring\"\n# month = 1, day = 23\n# expected output = \"Autumn\"\n# month = 2, day = 1\n# expected output = \"Spring\"\n# month = 2, day = 2\n# expected output = \"Summer\"\n# month = 2, day = 22\n# expected output = \"Autumn\"\n# month = 2, day = 23\n# expected output = \"Autumn\"\n# month = 3, day = 1\n# expected output = \"Autumn\"\n# month = 3, day = 2\n# expected output = \"Autumn\"\n# month = 3, day = 22\n# expected output = \"Autumn\"\n# month = 3, day = 23\n# expected output = \"Autumn\"\n# month = 4, day = 1\n# expected output = \"Autumn\"\n# month = 4, day = 2\n# expected output = \"Autumn\"\n# month = 4, day = 22\n# expected output = \"Autumn\"\n# month = 4, day = 23\n# expected output = \"Autumn"
    },
    {
      "rank": 36,
      "score": 9.44216185946266,
      "candidate": "def get_month(month):\n    \"\"\"\n    Given a month as a string, return the number of the month.\n    \"\"\"\n    if month == \"Jan\":\n        return 1\n    elif month == \"Feb\":\n        return 2\n    elif month == \"Mar\":\n        return 3\n    elif month == \"Apr\":\n        return 4\n    elif month == \"May\":\n        return 5\n    elif month == \"Jun\":\n        return 6\n    elif month == \"Jul\":\n        return 7\n    elif month == \"Aug\":\n        return 8\n    elif month == \"Sep\":\n        return 9\n    elif month == \"Oct\":\n        return 10\n    elif month == \"Nov\":\n        return 11\n    elif month == \"Dec\":\n        return 12\n    else:\n        return \"Invalid Input\"\n\ndef get_day(day):\n    \"\"\"\n    Given a day as a string, return the number of the day.\n    \"\"\"\n    if day == \"Mon\":\n        return 1\n    elif day == \"Tue\":\n        return 2\n    elif day == \"Wed\":\n        return 3\n    elif day == \"Thu\":\n        return 4\n    elif day == \"Fri\":\n        return 5\n    elif day == \"Sat\":\n        return 6\n    elif day == \"Sun\":\n        return 7\n    else:\n        return \"Invalid Input\"\n\ndef get_season(month, day):\n    \"\"\"\n    Given the month and day, return the season.\n    \"\"\"\n    if month == 1:\n        return \"Spring\"\n    elif month == 2:\n        return \"Summer\"\n    elif month == 3:\n        return \"Fall\"\n    elif month == 4:\n        return \"Winter\"\n    else:\n        return \"Invalid Input\"\n\ndef print_season(month, day):\n    \"\"\"\n    Given the month and day, print the season.\n    \"\"\"\n    print(\"The season for \" + str(day) + \" \" + str(month) + \" is \" + get_season(get_month(month), get_day(day)))\n\ndef main():\n    \"\"\"\n    Write the main function below and run it"
    },
    {
      "rank": 37,
      "score": 9.385323721784511,
      "candidate": "# https://www.codeeval.com/open_challenges/156/\n\ndef print_season(month, day):\n    if day == 1:\n        if month == 3:\n            print \"Spring\"\n        elif month == 4:\n            print \"Summer\"\n        elif month == 5:\n            print \"Fall\"\n        elif month == 6:\n            print \"Winter\"\n        elif month == 7:\n            print \"Spring\"\n        elif month == 8:\n            print \"Summer\"\n        elif month == 9:\n            print \"Fall\"\n        elif month == 10:\n            print \"Winter\"\n        elif month == 11:\n            print \"Spring\"\n        elif month == 12:\n            print \"Summer\"\n    elif day == 31:\n        if month == 3:\n            print \"Spring\"\n        elif month == 4:\n            print \"Summer\"\n        elif month == 5:\n            print \"Fall\"\n        elif month == 6:\n            print \"Winter\"\n        elif month == 7:\n            print \"Spring\"\n        elif month == 8:\n            print \"Summer\"\n        elif month == 9:\n            print \"Fall\"\n        elif month == 10:\n            print \"Winter\"\n        elif month == 11:\n            print \"Spring\"\n        elif month == 12:\n            print \"Summer\"\n    elif day == 30:\n        if month == 3:\n            print \"Spring\"\n        elif month == 4:\n            print \"Summer\"\n        elif month == 5:\n            print \"Fall\"\n        elif month == 6:\n            print \"Winter\"\n        elif month == 7:\n            print \"Spring\"\n        elif month == 8:\n            print \"Summer\"\n        elif month == 9:\n            print \"Fall\"\n        elif month == 10:\n            print \"Winter\"\n        elif month == 11:\n            print \"Spring\"\n        elif month == 12:\n            print \"Summer\"\n    elif day == 29:\n        if month == 3:\n            print \"Spring\"\n        elif month == 4:\n            print \"Summer\"\n        elif month == 5:"
    },
    {
      "rank": 38,
      "score": 9.275534510344526,
      "candidate": "# https://www.hackerrank.com/challenges/print-season/problem\n\ndef print_season(month, day):\n    if day > 30:\n        month += 1\n        day = day - 31\n\n    if month > 12:\n        month = month - 12\n        year = year + 1\n\n    if day == 1:\n        print(str(year) + '.' + str(month) + '.' + str(day))\n    elif day == 28:\n        print(str(year) + '.' + str(month) + '.' + str(day))\n    else:\n        print(str(year) + '.' + str(month) + '.' + str(day))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nprint(print_season(1, 1))\nprint(print_season(1, 28))\nprint(print_season(2, 1))\nprint(print_season(2, 29))\nprint(print_season(3, 1))\nprint(print_season(3, 30))\nprint(print_season(3, 31))\nprint(print_season(4, 1))\nprint(print_season(4, 30))\nprint(print_season(4, 31))\nprint(print_season(5, 1))\nprint(print_season(5, 30))\nprint(print_season(5, 31))\nprint(print_season(6, 1))\nprint(print_season(6, 30))\nprint(print_season(6, 31))\nprint(print_season(7, 1))\nprint(print_season(7, 30))\nprint(print_season(7, 31))\nprint(print_season(8, 1))\nprint(print_season(8, 30))\nprint(print_season(8, 31))\nprint(print_season(9, 1))\nprint(print_season(9, 30))\nprint(print_season(9, 31))\nprint(print_season(10, 1))\nprint(print_season(10, 30))\nprint(print_season(10, 31))\nprint(print_season(11, 1))\nprint(print_season(11, 30))"
    },
    {
      "rank": 39,
      "score": 9.259523134747651,
      "candidate": "# https://leetcode.com/problems/day-of-week-of-the-month/\n# time complexity: O(n)\n# space complexity: O(1)\n\nclass Solution(object):\n    def getSeason(self, month, day):\n        \"\"\"\n        :type month: int\n        :type day: int\n        :rtype: str\n        \"\"\"\n        if day == 1:\n            return \"Spring\"\n        elif day == 2:\n            return \"Summer\"\n        elif day == 3:\n            return \"Fall\"\n        elif day == 4:\n            return \"Winter\"\n        else:\n            return \"Unknown\""
    },
    {
      "rank": 40,
      "score": 9.196422297243725,
      "candidate": "# https://www.hackerrank.com/challenges/print-season/problem\n\nfrom datetime import date\n\ndef print_season(month, day):\n    if month == 3:\n        if day < 20:\n            print('Spring')\n        elif day < 40:\n            print('Summer')\n        elif day < 60:\n            print('Autumn')\n        elif day < 80:\n            print('Winter')\n        else:\n            print('Winter')\n    elif month == 6:\n        if day < 20:\n            print('Winter')\n        elif day < 40:\n            print('Autumn')\n        elif day < 60:\n            print('Summer')\n        elif day < 80:\n            print('Spring')\n        else:\n            print('Spring')\n    elif month == 9:\n        if day < 20:\n            print('Spring')\n        elif day < 40:\n            print('Summer')\n        elif day < 60:\n            print('Autumn')\n        elif day < 80:\n            print('Winter')\n        else:\n            print('Winter')\n    elif month == 12:\n        if day < 20:\n            print('Winter')\n        elif day < 40:\n            print('Autumn')\n        elif day < 60:\n            print('Summer')\n        elif day < 80:\n            print('Spring')\n        else:\n            print('Spring')\n    else:\n        print('Invalid')\n\nprint_season(date.today().month, date.today().day)"
    },
    {
      "rank": 41,
      "score": 9.176938547970494,
      "candidate": "# https://www.codeeval.com/open_challenges/123/\n#\n# CodeEval's problem is to print the season for the given month and day\n#\n# Input: month, day\n# Output: season\n#\n# Example:\n# 1, 3 = winter\n# 1, 4 = spring\n# 1, 5 = summer\n# 1, 6 = fall\n# 1, 7 = winter\n#\n# 1, 8 = winter\n# 1, 9 = spring\n# 1, 10 = summer\n# 1, 11 = fall\n# 1, 12 = winter\n#\n# 1, 13 = spring\n# 1, 14 = summer\n# 1, 15 = fall\n# 1, 16 = winter\n# 1, 17 = spring\n#\n# 1, 18 = spring\n# 1, 19 = summer\n# 1, 20 = fall\n# 1, 21 = winter\n# 1, 22 = spring\n#\n# 1, 23 = spring\n# 1, 24 = summer\n# 1, 25 = fall\n# 1, 26 = winter\n# 1, 27 = spring\n#\n# 1, 28 = spring\n# 1, 29 = summer\n# 1, 30 = fall\n# 1, 31 = winter\n#\n# 1, 32 = spring\n# 1, 33 = summer\n# 1, 34 = fall\n# 1, 35 = winter\n#\n# 1, 36 = spring\n# 1, 37 = summer\n# 1, 38 = fall\n# 1, 39 = winter\n#\n# 1, 40 = spring\n# 1, 41 = summer\n# 1, 42 = fall\n# 1, 43 = winter\n#\n# 1, 44 = spring\n# 1, 45 = summer\n# 1, 46 = fall\n# 1, 47 = winter\n#\n# 1, 48 = spring\n# 1, 49 = summer\n# 1, 50 = fall\n# 1, 51 = winter\n#\n# 1, 52 = spring\n# 1, 53 = summer\n# 1, 54 = fall\n# 1, 55 = winter\n#\n# 1, 56 = spring\n# 1, 57 = summer\n# 1, 58 = fall\n# 1, 59 = winter\n#\n# 1, 60 = spring\n# 1, 61 = summer\n# 1, 62 = fall\n# 1, 63 = winter"
    },
    {
      "rank": 42,
      "score": 8.899707056282308,
      "candidate": "def print_season(month, day):\n    if day < 3:\n        print(\"Spring\")\n    elif day < 9:\n        print(\"Summer\")\n    elif day < 16:\n        print(\"Autumn\")\n    elif day < 24:\n        print(\"Winter\")\n    elif day < 31:\n        print(\"Spring\")\n    elif day < 37:\n        print(\"Summer\")\n    elif day < 42:\n        print(\"Autumn\")\n    elif day < 47:\n        print(\"Winter\")\n    elif day < 52:\n        print(\"Spring\")\n    elif day < 58:\n        print(\"Summer\")\n    elif day < 63:\n        print(\"Autumn\")\n    elif day < 68:\n        print(\"Winter\")\n    elif day < 73:\n        print(\"Spring\")\n    elif day < 79:\n        print(\"Summer\")\n    elif day < 84:\n        print(\"Autumn\")\n    elif day < 89:\n        print(\"Winter\")\n    elif day < 94:\n        print(\"Spring\")\n    elif day < 99:\n        print(\"Summer\")\n    elif day < 104:\n        print(\"Autumn\")\n    elif day < 109:\n        print(\"Winter\")\n    elif day < 114:\n        print(\"Spring\")\n    elif day < 119:\n        print(\"Summer\")\n    elif day < 124:\n        print(\"Autumn\")\n    elif day < 129:\n        print(\"Winter\")\n    elif day < 134:\n        print(\"Spring\")\n    elif day < 139:\n        print(\"Summer\")\n    elif day < 144:\n        print(\"Autumn\")\n    elif day < 149:\n        print(\"Winter\")\n    elif day < 154:\n        print(\"Spring\")\n    elif day < 159:\n        print(\"Summer\")\n    elif day < 164:\n        print(\"Autumn\")\n    elif day < 169:\n        print(\"Winter\")\n    elif day < 174:\n        print(\"Spring\")\n    elif day < 179:\n        print(\"Summer\")\n    elif day < 184:\n        print(\"Autumn\")\n    elif"
    },
    {
      "rank": 43,
      "score": 8.813573220396277,
      "candidate": "def print_season(month, day):\n    if day >= 1 and day <= 31:\n        if month >= 1 and month <= 12:\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                return \"winter\"\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return \"spring\"\n            elif month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n                return \"summer\"\n            elif month == 7 or month == 8 or month == 10 or month == 12:\n                return \"autumn\"\n        elif month == 2:\n            if day <= 28:\n                return \"spring\"\n            else:\n                return \"autumn\"\n        elif month == 4:\n            if day <= 30:\n                return \"summer\"\n            else:\n                return \"autumn\"\n        elif month == 6:\n            if day <= 30:\n                return \"summer\"\n            else:\n                return \"autumn\"\n        elif month == 9:\n            if day <= 30:\n                return \"autumn\"\n            else:\n                return \"winter\"\n        elif month == 11:\n            if day <= 30:\n                return \"winter\"\n            else:\n                return \"autumn\"\n    elif day >= 31 and day <= 59:\n        if month >= 1 and month <= 12:\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                return \"winter\"\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return \"spring\"\n            elif month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n                return \"summer\"\n            elif month == 7 or month == 8 or month == 10 or month == 12:\n                return \"autumn\"\n        elif month == 2:\n            if day <= 28:\n                return \"spring\"\n            else:\n                return \"autumn\"\n        elif month == 4:\n            if day <= 30:\n                return \"summer"
    },
    {
      "rank": 44,
      "score": 8.809971609982371,
      "candidate": "#!/usr/bin/env python\n\ndef print_season(month, day):\n    if day == 1:\n        print \"Spring\"\n    elif day == 2:\n        print \"Summer\"\n    elif day == 3:\n        print \"Fall\"\n    elif day == 4:\n        print \"Winter\"\n    elif day == 5:\n        print \"Spring\"\n    elif day == 6:\n        print \"Summer\"\n    elif day == 7:\n        print \"Fall\"\n    elif day == 8:\n        print \"Winter\"\n    elif day == 9:\n        print \"Spring\"\n    elif day == 10:\n        print \"Summer\"\n    elif day == 11:\n        print \"Fall\"\n    elif day == 12:\n        print \"Winter\"\n\n# test\nprint_season(1, 1)\nprint_season(2, 1)\nprint_season(3, 1)\nprint_season(4, 1)\nprint_season(5, 1)\nprint_season(6, 1)\nprint_season(7, 1)\nprint_season(8, 1)\nprint_season(9, 1)\nprint_season(10, 1)\nprint_season(11, 1)\nprint_season(12, 1)"
    },
    {
      "rank": 45,
      "score": 8.678575274953811,
      "candidate": "def print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if month == 1:\n        if day <= 7:\n            return 'Winter'\n        elif day <= 14:\n            return 'Spring'\n        elif day <= 21:\n            return 'Summer'\n        else:\n            return 'Autumn'\n    elif month == 2:\n        if day <= 7:\n            return 'Winter'\n        elif day <= 14:\n            return 'Spring'\n        elif day <= 21:\n            return 'Summer'\n        else:\n            return 'Autumn'\n    elif month == 3:\n        if day <= 7:\n            return 'Winter'\n        elif day <= 14:\n            return 'Spring'\n        elif day <= 21:\n            return 'Summer'\n        else:\n            return 'Autumn'\n    elif month == 4:\n        if day <= 7:\n            return 'Winter'\n        elif day <= 14:\n            return 'Spring'\n        elif day <= 21:\n            return 'Summer'\n        else:\n            return 'Autumn'\n    elif month == 5:\n        if day <= 7:\n            return 'Winter'\n        elif day <= 14:\n            return 'Spring'\n        elif day <= 21:\n            return 'Summer'\n        else:\n            return 'Autumn'\n    elif month == 6:\n        if day <= 7:\n            return 'Winter'\n        elif day <= 14:\n            return 'Spring'\n        elif day <= 21:\n            return 'Summer'\n        else:\n            return 'Autumn'\n    elif month == 7:\n        if day <= 7:\n            return 'Winter'\n        elif day <= 14:\n            return 'Spring'\n        elif day <= 21:\n            return 'Summer'\n        else:\n            return 'Autumn'\n    elif month == 8:\n        if day <= 7:\n            return 'Winter'\n        elif day <= 14:\n            return 'Spring'\n        elif day <= 21:\n            return 'Summer'\n        else:\n            return"
    },
    {
      "rank": 46,
      "score": 8.64185522334921,
      "candidate": "def print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if month == 1:\n        return'spring'\n    elif month == 2:\n        return'summer'\n    elif month == 3:\n        return 'autumn'\n    elif month == 4:\n        return 'winter'\n    else:\n        return 'unknown'\n\nprint(print_season(1, 1))\nprint(print_season(2, 1))\nprint(print_season(2, 28))\nprint(print_season(3, 1))\nprint(print_season(3, 29))\nprint(print_season(4, 1))\nprint(print_season(4, 30))\nprint(print_season(5, 1))\nprint(print_season(5, 31))\nprint(print_season(6, 1))\nprint(print_season(6, 30))\nprint(print_season(7, 1))\nprint(print_season(7, 31))\nprint(print_season(8, 1))\nprint(print_season(8, 30))\nprint(print_season(9, 1))\nprint(print_season(9, 31))\nprint(print_season(10, 1))\nprint(print_season(10, 30))\nprint(print_season(11, 1))\nprint(print_season(11, 31))\nprint(print_season(12, 1))\nprint(print_season(12, 30))"
    },
    {
      "rank": 47,
      "score": 8.639450641819051,
      "candidate": "import re\n\ndef get_season(month, day):\n    '''\n    :type month: int\n    :type day: int\n    :rtype: str\n    '''\n    if month < 7:\n        return 'winter'\n    elif month < 14:\n        return'spring'\n    elif month < 21:\n        return'summer'\n    elif month < 28:\n        return 'autumn'\n    else:\n        return 'fall'\n\nif __name__ == '__main__':\n    print get_season(5, 1)"
    },
    {
      "rank": 48,
      "score": 8.628628779441144,
      "candidate": "month = input('Enter month: ')\nday = input('Enter day: ')\n\nif month == 1:\n    if day == 1:\n        print('Spring')\n    elif day == 2:\n        print('Summer')\n    elif day == 3:\n        print('Fall')\n    elif day == 4:\n        print('Winter')\n    else:\n        print('Unknown')\nelif month == 2:\n    if day == 1:\n        print('Spring')\n    elif day == 2:\n        print('Summer')\n    elif day == 3:\n        print('Fall')\n    elif day == 4:\n        print('Winter')\n    else:\n        print('Unknown')\nelif month == 3:\n    if day == 1:\n        print('Spring')\n    elif day == 2:\n        print('Summer')\n    elif day == 3:\n        print('Fall')\n    elif day == 4:\n        print('Winter')\n    else:\n        print('Unknown')\nelif month == 4:\n    if day == 1:\n        print('Spring')\n    elif day == 2:\n        print('Summer')\n    elif day == 3:\n        print('Fall')\n    elif day == 4:\n        print('Winter')\n    else:\n        print('Unknown')\nelse:\n    print('Unknown')"
    },
    {
      "rank": 49,
      "score": 8.56762862839165,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n\nclass Solution(object):\n    def get_season(self, month, day):\n        \"\"\"\n        :type month: int\n        :type day: int\n        :rtype: str\n        \"\"\"\n        if month == 1:\n            if day > 28:\n                return 'Winter'\n            elif day > 27:\n                return 'Spring'\n            else:\n                return 'Summer'\n        elif month == 3:\n            if day > 30:\n                return 'Fall'\n            elif day > 29:\n                return 'Winter'\n            else:\n                return 'Summer'\n        elif month == 5:\n            if day > 30:\n                return 'Fall'\n            elif day > 29:\n                return 'Winter'\n            else:\n                return 'Spring'\n        elif month == 8:\n            if day > 30:\n                return 'Winter'\n            elif day > 29:\n                return 'Spring'\n            else:\n                return 'Summer'\n        elif month == 10:\n            if day > 30:\n                return 'Fall'\n            elif day > 29:\n                return 'Winter'\n            else:\n                return 'Summer'\n        else:\n            return 'Unknown'\n\nif __name__ == '__main__':\n    assert Solution().get_season(1, 2) == 'Spring'\n    assert Solution().get_season(2, 2) == 'Summer'\n    assert Solution().get_season(3, 2) == 'Spring'\n    assert Solution().get_season(3, 29) == 'Winter'\n    assert Solution().get_season(3, 30) == 'Fall'\n    assert Solution().get_season(3, 31) == 'Spring'\n    assert Solution().get_season(5, 30) == 'Fall'\n    assert Solution().get_season(8, 30) == 'Winter'\n    assert Solution().get_season(10, 30) == 'Summer'"
    },
    {
      "rank": 50,
      "score": 8.530151461607264,
      "candidate": "def print_season(month, day):\n    if month == 1:\n        print 'Spring'\n    elif month == 2:\n        print 'Summer'\n    elif month == 3:\n        print 'Fall'\n    elif month == 4:\n        print 'Winter'\n    else:\n        print 'Unknown'\n\nprint_season(1, 1)\nprint_season(2, 1)\nprint_season(3, 1)\nprint_season(4, 1)"
    },
    {
      "rank": 51,
      "score": 8.5239476679813,
      "candidate": "# import the python library\nimport datetime\n\n# create an empty dictionary\ndictionary = {}\n\n\ndef print_season(month, day):\n    \"\"\"\n    Return the season of the given day.\n\n    :param month: the month of the day\n    :param day: the day of the month\n    :return: the season of the day\n    \"\"\"\n    # get the current date\n    date = datetime.date.today()\n    # get the current date as a tuple\n    date_tuple = date.timetuple()\n    # get the current year\n    year = date_tuple[0]\n    # get the current month\n    month = date_tuple[1]\n    # get the current day\n    day = date_tuple[2]\n    # if the day is in the month, get the next month\n    if day <= 15:\n        season = \"Spring\"\n    elif day <= 30:\n        season = \"Summer\"\n    elif day <= 45:\n        season = \"Fall\"\n    elif day <= 60:\n        season = \"Winter\"\n    else:\n        season = \"Winter\"\n\n    # return the season\n    return season\n\n\ndef print_season_list(month, day):\n    \"\"\"\n    Return a list of the season for the given month and day.\n\n    :param month: the month of the day\n    :param day: the day of the month\n    :return: a list of the season for the given month and day\n    \"\"\"\n    # create a list of the seasons\n    season_list = []\n    # get the current date\n    date = datetime.date.today()\n    # get the current date as a tuple\n    date_tuple = date.timetuple()\n    # get the current year\n    year = date_tuple[0]\n    # get the current month\n    month = date_tuple[1]\n    # get the current day\n    day = date_tuple[2]\n    # if the day is in the month, get the next month\n    if day <= 15:\n        season = \"Spring\"\n    elif day <= 30:\n        season = \"Summer\"\n    elif day <= 45:\n        season = \"Fall"
    },
    {
      "rank": 52,
      "score": 8.51986380426731,
      "candidate": "from collections import defaultdict\n\n# Note:\n# - The day in the month is counted from 1.\n# - The month is counted from 0.\n# - The year is counted from 1900.\n# - The month name is case insensitive.\n# - The day name is case insensitive.\n# - The month name is always in lower case.\n# - The day name is always in lower case.\n# - The month and day names are always returned in lower case.\n# - A number of days are counted from 0.\n# - The year is always a 4 digit number.\n# - The year is always a 4 digit number.\n# - The month is always a 2 digit number.\n# - The day is always a 2 digit number.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The month and day names are always returned in lower case.\n# - The"
    },
    {
      "rank": 53,
      "score": 8.507097709767619,
      "candidate": "#!/usr/bin/python\n\ndef print_season(month, day):\n    if day >= 1 and day <= 31:\n        if month >= 1 and month <= 12:\n            if day <= 31:\n                if month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n                    print 'Spring'\n                elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                    print 'Summer'\n                elif month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n                    print 'Autumn'\n                elif month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                    print 'Winter'\n                else:\n                    print 'Unknown'\n            else:\n                print 'Unknown'\n        else:\n            print 'Unknown'\n    else:\n        print 'Unknown'\n\nprint_season(1, 31)\nprint_season(2, 28)\nprint_season(3, 31)\nprint_season(4, 30)\nprint_season(5, 31)\nprint_season(6, 30)\nprint_season(7, 31)\nprint_season(8, 31)\nprint_season(9, 30)\nprint_season(10, 31)\nprint_season(11, 30)\nprint_season(12, 31)\nprint_season(1, 1)\nprint_season(2, 1)\nprint_season(3, 1)\nprint_season(4, 1)\nprint_season(5, 1)\nprint_season(6, 1)\nprint_season(7, 1)\nprint_season(8, 1)\nprint_season(9, 1)\nprint_season(10, 1)\nprint_season(11, 1)\nprint_season(12, 1)"
    },
    {
      "rank": 54,
      "score": 8.471065865974813,
      "candidate": "import sys\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if day < 3:\n        return \"winter\"\n    elif day < 9:\n        return \"spring\"\n    elif day < 16:\n        return \"summer\"\n    else:\n        return \"fall\"\n\n\nif __name__ == \"__main__\":\n    for line in sys.stdin:\n        month, day = map(int, line.strip().split(\" \"))\n        print print_season(month, day)"
    },
    {
      "rank": 55,
      "score": 8.467743056287974,
      "candidate": "import datetime\n\ndef get_season(month, day):\n    \"\"\"\n    Returns the season for the given month and day.\n    month: month of the date\n    day: day of the date\n    return: season of the date\n    \"\"\"\n    if day == 1 or day == 21 or day == 31:\n        return \"Spring\"\n    elif day == 15:\n        return \"Summer\"\n    elif day == 6 or day == 16 or day == 25:\n        return \"Fall\"\n    elif day == 2:\n        return \"Winter\"\n    else:\n        return \"Unknown\"\n\ndef print_season(month, day):\n    \"\"\"\n    Prints the season for the given month and day.\n    month: month of the date\n    day: day of the date\n    \"\"\"\n    season = get_season(month, day)\n    print(season)\n\nif __name__ == '__main__':\n    # Sample Input\n    # month = 6\n    # day = 15\n    month = datetime.date.today().month\n    day = datetime.date.today().day\n    print_season(month, day)"
    },
    {
      "rank": 56,
      "score": 8.372179557503015,
      "candidate": "import sys\nfrom datetime import datetime\n\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: None\n    \"\"\"\n    if day < 3:\n        print(day, month, 'Jan')\n    elif day < 7:\n        print(day, month, 'Feb')\n    elif day < 14:\n        print(day, month, 'Mar')\n    elif day < 21:\n        print(day, month, 'Apr')\n    elif day < 28:\n        print(day, month, 'May')\n    elif day < 35:\n        print(day, month, 'Jun')\n    elif day < 42:\n        print(day, month, 'Jul')\n    elif day < 49:\n        print(day, month, 'Aug')\n    elif day < 56:\n        print(day, month, 'Sep')\n    elif day < 63:\n        print(day, month, 'Oct')\n    elif day < 70:\n        print(day, month, 'Nov')\n    elif day < 77:\n        print(day, month, 'Dec')\n    else:\n        print(day, month, 'Jan')\n\n\nif __name__ == '__main__':\n    if len(sys.argv) == 3:\n        print_season(int(sys.argv[1]), int(sys.argv[2]))\n    else:\n        print('Please enter month and day.')"
    },
    {
      "rank": 57,
      "score": 8.370233474240154,
      "candidate": "def print_season(month, day):\n    if month == 1:\n        print'spring'\n    elif month == 2:\n        print'summer'\n    elif month == 3:\n        print 'fall'\n    elif month == 4:\n        print 'winter'\n    else:\n        print 'unknown'\n\nprint_season(1,1)"
    },
    {
      "rank": 58,
      "score": 8.352024697144529,
      "candidate": "def print_season(month, day):\n    if month == 1:\n        return'spring'\n    elif month == 2:\n        return'summer'\n    elif month == 3:\n        return 'fall'\n    elif month == 4:\n        return 'winter'\n    else:\n        return 'unknown'\n\nprint_season(4, 13)"
    },
    {
      "rank": 59,
      "score": 8.333891139414096,
      "candidate": "from datetime import date\n\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if day < 3:\n        return 'Winter'\n    elif day < 10:\n        return 'Spring'\n    elif day < 17:\n        return 'Summer'\n    elif day < 24:\n        return 'Autumn'\n    elif day < 31:\n        return 'Winter'\n    else:\n        return 'Spring'\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    for month in range(1, 13):\n        for day in range(1, 32):\n            print(print_season(month, day))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.332669303587583,
      "candidate": "import re\n\ndef print_season(month, day):\n    if re.match(\"^[JF].*\", day):\n        return \"Spring\"\n    elif re.match(\"^[SX].*\", day):\n        return \"Summer\"\n    elif re.match(\"^[O].*\", day):\n        return \"Fall\"\n    elif re.match(\"^[JN].*\", day):\n        return \"Winter\"\n    else:\n        return \"Unknown\"\n\nprint(print_season(1, \"31\"))\nprint(print_season(2, \"1\"))\nprint(print_season(3, \"3\"))\nprint(print_season(4, \"5\"))\nprint(print_season(5, \"6\"))\nprint(print_season(6, \"7\"))\nprint(print_season(7, \"8\"))\nprint(print_season(8, \"9\"))\nprint(print_season(9, \"10\"))\nprint(print_season(10, \"11\"))\nprint(print_season(11, \"12\"))\nprint(print_season(12, \"1\"))\nprint(print_season(13, \"2\"))\nprint(print_season(14, \"3\"))\nprint(print_season(15, \"4\"))\nprint(print_season(16, \"5\"))\nprint(print_season(17, \"6\"))\nprint(print_season(18, \"7\"))\nprint(print_season(19, \"8\"))\nprint(print_season(20, \"9\"))\nprint(print_season(21, \"10\"))\nprint(print_season(22, \"11\"))\nprint(print_season(23, \"12\"))\nprint(print_season(24, \"1\"))\nprint(print_season(25, \"2\"))\nprint(print_season(26, \"3\"))\nprint(print_season(27, \"4\"))\nprint(print_season(28, \"5\"))\nprint(print_season(29, \"6\"))\nprint(print_season(30, \"7\"))\nprint(print_season(31, \"8\"))\nprint(print_season(32, \"9\"))\nprint(print_season(33, \"10\"))"
    },
    {
      "rank": 61,
      "score": 8.331770591820057,
      "candidate": "from datetime import date\n\ndef print_season(month, day):\n    if day == 1:\n        print \"Winter\"\n    elif day == 15:\n        print \"Spring\"\n    elif day == 30:\n        print \"Summer\"\n    elif day == 45:\n        print \"Fall\"\n    elif day == 60:\n        print \"Winter\"\n    elif day == 75:\n        print \"Spring\"\n    elif day == 90:\n        print \"Summer\"\n    elif day == 105:\n        print \"Fall\"\n    else:\n        print \"Unknown\"\n\ndef test():\n    assert print_season(1, 1) == \"Winter\"\n    assert print_season(1, 15) == \"Spring\"\n    assert print_season(1, 30) == \"Summer\"\n    assert print_season(1, 45) == \"Fall\"\n    assert print_season(1, 60) == \"Winter\"\n    assert print_season(1, 75) == \"Spring\"\n    assert print_season(1, 90) == \"Summer\"\n    assert print_season(1, 105) == \"Fall\"\n    assert print_season(2, 1) == \"Winter\"\n    assert print_season(2, 15) == \"Spring\"\n    assert print_season(2, 30) == \"Summer\"\n    assert print_season(2, 45) == \"Fall\"\n    assert print_season(2, 60) == \"Winter\"\n    assert print_season(2, 75) == \"Spring\"\n    assert print_season(2, 90) == \"Summer\"\n    assert print_season(2, 105) == \"Fall\"\n    assert print_season(3, 1) == \"Winter\"\n    assert print_season(3, 15) == \"Spring\"\n    assert print_season(3, 30) == \"Summer\"\n    assert print_season(3, 45) == \"Fall\"\n    assert print_season(3, 60) == \"Winter\"\n    assert print_season(3, 75) == \"Spring\"\n    assert print_season(3, 90) == \"Summer\"\n    assert print_season(3, 105) == \"Fall\"\n    assert print_season(4,"
    },
    {
      "rank": 62,
      "score": 8.30003485750939,
      "candidate": "import re\n\nregex = re.compile(r'(January|February|March|April|May|June|July|August|September|October|November|December) (\\d{4})')\n\ndef get_season(month, day):\n    month = month.lower()\n    day = day.lower()\n    match = regex.match(day)\n    if not match:\n        return 'unknown'\n    else:\n        return match.group(1)\n\ndef main():\n    for month, day in [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), ("
    },
    {
      "rank": 63,
      "score": 8.289615703339216,
      "candidate": "def season(month, day):\n    if month == 1:\n        if day < 15:\n            return 'winter'\n        elif day < 30:\n            return'spring'\n        else:\n            return'summer'\n    elif month == 3:\n        if day < 15:\n            return'summer'\n        elif day < 30:\n            return 'fall'\n        else:\n            return 'winter'\n    elif month == 6:\n        if day < 15:\n            return 'fall'\n        elif day < 30:\n            return 'winter'\n        else:\n            return'spring'\n    elif month == 9:\n        if day < 15:\n            return'spring'\n        elif day < 30:\n            return'summer'\n        else:\n            return 'fall'\n    elif month == 12:\n        if day < 15:\n            return 'winter'\n        elif day < 30:\n            return 'fall'\n        else:\n            return'spring'\n    else:\n        print 'error'\n\nprint season(1, 8)"
    },
    {
      "rank": 64,
      "score": 8.243032238871011,
      "candidate": "import re\n\ndef print_season(month, day):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    month is an integer 1-12\n    day is an integer 1-31\n    \"\"\"\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        return \"Winter\"\n    elif month in (4, 6, 9, 11):\n        return \"Spring\"\n    elif month in (2, 4, 6, 8, 10, 12):\n        return \"Summer\"\n    elif month in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12):\n        return \"Fall\"\n\nif __name__ == \"__main__\":\n    for month in range(1, 13):\n        for day in range(1, 32):\n            print(print_season(month, day))"
    },
    {
      "rank": 65,
      "score": 8.190593821495028,
      "candidate": "from datetime import date\n\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if day < 10:\n        print('0', end='')\n    else:\n        print(end='')\n    if day < 10:\n        print('0', end='')\n    else:\n        print(end='')\n    if month == 1:\n        print('0', end='')\n    else:\n        print(end='')\n    if day < 10:\n        print('0', end='')\n    else:\n        print(end='')\n    if month == 2:\n        print('0', end='')\n    else:\n        print(end='')\n    if day < 10:\n        print('0', end='')\n    else:\n        print(end='')\n    if month == 3:\n        print('0', end='')\n    else:\n        print(end='')\n    if day < 10:\n        print('0', end='')\n    else:\n        print(end='')\n    if month == 4:\n        print('0', end='')\n    else:\n        print(end='')\n    if day < 10:\n        print('0', end='')\n    else:\n        print(end='')\n    if month == 5:\n        print('0', end='')\n    else:\n        print(end='')\n    if day < 10:\n        print('0', end='')\n    else:\n        print(end='')\n    if month == 6:\n        print('0', end='')\n    else:\n        print(end='')\n    if day < 10:\n        print('0', end='')\n    else:\n        print(end='')\n    if month == 7:\n        print('0', end='')\n    else:\n        print(end='')\n    if day < 10:\n        print('0', end='')\n    else:\n        print(end='')\n    if month"
    },
    {
      "rank": 66,
      "score": 8.089599166756262,
      "candidate": "def season(month, day):\n    \"\"\"\n    month: month number\n    day: day number\n    return: season name\n    \"\"\"\n\n    if month == 1:\n        return \"Spring\"\n    elif month == 2:\n        return \"Summer\"\n    elif month == 3:\n        return \"Autumn\"\n    elif month == 4:\n        return \"Winter\"\n    elif month == 5:\n        return \"Spring\"\n    elif month == 6:\n        return \"Summer\"\n    elif month == 7:\n        return \"Autumn\"\n    elif month == 8:\n        return \"Winter\"\n    elif month == 9:\n        return \"Spring\"\n    elif month == 10:\n        return \"Summer\"\n    elif month == 11:\n        return \"Autumn\"\n    elif month == 12:\n        return \"Winter\"\n    else:\n        return \"Spring\"\n\n\nif __name__ == \"__main__\":\n    print(season(1, 1))\n    print(season(1, 2))\n    print(season(1, 3))\n    print(season(1, 4))\n    print(season(1, 5))\n    print(season(1, 6))\n    print(season(1, 7))\n    print(season(1, 8))\n    print(season(1, 9))\n    print(season(1, 10))\n    print(season(1, 11))\n    print(season(1, 12))\n    print(season(12, 1))\n    print(season(12, 2))\n    print(season(12, 3))\n    print(season(12, 4))\n    print(season(12, 5))\n    print(season(12, 6))\n    print(season(12, 7))\n    print(season(12, 8))\n    print(season(12, 9))\n    print(season(12, 10))\n    print(season(12, 11))\n    print(season(12, 12))"
    },
    {
      "rank": 67,
      "score": 3.629774582733039,
      "candidate": "def print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: None\n    \"\"\"\n\n    if day == 1:\n        print('spring')\n    elif day == 15:\n        print('summer')\n    elif day == 30:\n        print('autumn')\n    elif day == 45:\n        print('winter')\n    else:\n        print('winter')\n\n\n\nprint_season(1, 1)\nprint_season(2, 1)\nprint_season(2, 15)\nprint_season(3, 1)\nprint_season(3, 15)\nprint_season(4, 1)\nprint_season(4, 15)\nprint_season(5, 1)\nprint_season(5, 15)\nprint_season(6, 1)\nprint_season(6, 15)\nprint_season(7, 1)\nprint_season(7, 15)\nprint_season(8, 1)\nprint_season(8, 15)\nprint_season(9, 1)\nprint_season(9, 15)\nprint_season(10, 1)\nprint_season(10, 15)\nprint_season(11, 1)\nprint_season(11, 15)\nprint_season(12, 1)\nprint_season(12, 15)\nprint_season(1, 30)\nprint_season(2, 15)\nprint_season(3, 15)\nprint_season(4, 15)\nprint_season(5, 15)\nprint_season(6, 15)\nprint_season(7, 15)\nprint_season(8, 15)\nprint_season(9, 15)\nprint_season(10, 15)\nprint_season(11, 15)\nprint_season(12, 15)\nprint_season(1, 45)\nprint_season(2, 15)\nprint_season(3, 15)\nprint_season(4, 15)\nprint_season(5, 15)\nprint_season(6, 15)\nprint_season(7, 15)\nprint_season(8, 15)\nprint_season(9, 15)\nprint_season(10, 15)"
    },
    {
      "rank": 68,
      "score": 3.5024839752121153,
      "candidate": "import datetime\n\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: None\n    \"\"\"\n    if day == 1:\n        print(datetime.date(year=2016, month=month, day=1).strftime(\"%B\"))\n    elif day == 15:\n        print(datetime.date(year=2016, month=month, day=15).strftime(\"%B\"))\n    elif day == 30:\n        print(datetime.date(year=2016, month=month, day=30).strftime(\"%B\"))\n    elif day == 31:\n        print(datetime.date(year=2016, month=month, day=31).strftime(\"%B\"))\n    elif day == 32:\n        print(datetime.date(year=2016, month=month, day=32).strftime(\"%B\"))\n    elif day == 33:\n        print(datetime.date(year=2016, month=month, day=33).strftime(\"%B\"))\n    elif day == 34:\n        print(datetime.date(year=2016, month=month, day=34).strftime(\"%B\"))\n    elif day == 35:\n        print(datetime.date(year=2016, month=month, day=35).strftime(\"%B\"))\n    elif day == 36:\n        print(datetime.date(year=2016, month=month, day=36).strftime(\"%B\"))\n    elif day == 37:\n        print(datetime.date(year=2016, month=month, day=37).strftime(\"%B\"))\n    elif day == 38:\n        print(datetime.date(year=2016, month=month, day=38).strftime(\"%B\"))\n    elif day == 39:\n        print(datetime.date(year=2016, month=month, day=39).strftime(\"%B\"))\n    elif day == 40:\n        print(datetime.date(year=2016, month=month, day=40).strftime(\"%B\"))\n    elif day == 41:\n        print(datetime.date"
    },
    {
      "rank": 69,
      "score": 3.46112160971408,
      "candidate": "def season(month, day):\n    if day == 1:\n        if month == 3 or month == 5 or month == 8 or month == 10:\n            return \"Spring\"\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Summer\"\n        else:\n            return \"Fall\"\n    elif day == 15:\n        if month == 3 or month == 5 or month == 8 or month == 10:\n            return \"Spring\"\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Summer\"\n        else:\n            return \"Fall\"\n    elif day == 28:\n        if month == 3 or month == 5 or month == 8 or month == 10:\n            return \"Spring\"\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Summer\"\n        else:\n            return \"Fall\"\n    elif day == 31:\n        if month == 3 or month == 5 or month == 8 or month == 10:\n            return \"Spring\"\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Summer\"\n        else:\n            return \"Fall\"\n    elif day == 30:\n        if month == 3 or month == 5 or month == 8 or month == 10:\n            return \"Spring\"\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Summer\"\n        else:\n            return \"Fall\"\n    else:\n        return \"Unknown\"\n\nprint(season(3, 1))"
    },
    {
      "rank": 70,
      "score": 3.3505398376486233,
      "candidate": "import sys\n\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if day <= 19:\n        if day < 10:\n            return 'Spring'\n        elif day == 20:\n            return 'Summer'\n        elif day == 22:\n            return 'Fall'\n        elif day == 23:\n            return 'Winter'\n        elif day == 25:\n            return 'Spring'\n        elif day == 26:\n            return 'Summer'\n        elif day == 30:\n            return 'Fall'\n        elif day == 31:\n            return 'Winter'\n        elif day == 33:\n            return 'Spring'\n        elif day == 34:\n            return 'Summer'\n        elif day == 37:\n            return 'Fall'\n        elif day == 38:\n            return 'Winter'\n        elif day == 40:\n            return 'Spring'\n        elif day == 41:\n            return 'Summer'\n        elif day == 44:\n            return 'Fall'\n        elif day == 45:\n            return 'Winter'\n        elif day == 48:\n            return 'Spring'\n        elif day == 49:\n            return 'Summer'\n        elif day == 52:\n            return 'Fall'\n        elif day == 53:\n            return 'Winter'\n        elif day == 56:\n            return 'Spring'\n        elif day == 57:\n            return 'Summer'\n        elif day == 60:\n            return 'Fall'\n        elif day == 61:\n            return 'Winter'\n        elif day == 64:\n            return 'Spring'\n        elif day == 65:\n            return 'Summer'\n        elif day == 68:\n            return 'Fall'\n        elif day == 69:\n            return 'Winter'\n        elif day == 72:\n            return 'Spring'\n        elif day == 73:\n            return 'Summer'\n        elif day == 76:\n            return 'Fall'\n        elif day == 77:\n            return 'Winter'\n        elif day == 80:\n            return 'Spring'\n        el"
    },
    {
      "rank": 71,
      "score": 3.3293392967811823,
      "candidate": "def print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: None\n    \"\"\"\n    if day >= 1 and day <= 31:\n        if month >= 1 and month <= 12:\n            if day <= 31:\n                if month == 1:\n                    print \"spring\"\n                elif month == 2:\n                    print \"summer\"\n                elif month == 3:\n                    print \"fall\"\n                elif month == 4:\n                    print \"winter\"\n                elif month == 5:\n                    print \"spring\"\n                elif month == 6:\n                    print \"summer\"\n                elif month == 7:\n                    print \"fall\"\n                elif month == 8:\n                    print \"winter\"\n                elif month == 9:\n                    print \"summer\"\n                elif month == 10:\n                    print \"summer\"\n                elif month == 11:\n                    print \"fall\"\n                elif month == 12:\n                    print \"winter\"\n            else:\n                print \"error\"\n        else:\n            print \"error\"\n    else:\n        print \"error\"\n\nif __name__ == '__main__':\n    print_season(1, 1)\n    print_season(2, 1)\n    print_season(1, 2)\n    print_season(2, 2)\n    print_season(1, 3)\n    print_season(2, 3)\n    print_season(1, 4)\n    print_season(2, 4)\n    print_season(1, 5)\n    print_season(2, 5)\n    print_season(1, 6)\n    print_season(2, 6)\n    print_season(1, 7)\n    print_season(2, 7)\n    print_season(1, 8)\n    print_season(2, 8)\n    print_season(1, 9)\n    print_season(2, 9)\n    print_season(1, 10)\n    print_season(2, 10)\n    print_season(1, 11)\n    print_season(2, 11)\n    print_season(1, 12)\n    print"
    },
    {
      "rank": 72,
      "score": 3.279446851487576,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a month and day, return the season.\n\"\"\"\n\nimport sys\n\n\nclass Season(object):\n    \"\"\"\n    Season class\n    \"\"\"\n\n    def __init__(self, month, day):\n        self.season = ''\n        if day == 1:\n            self.season = 'winter'\n        elif day == 2:\n            self.season ='spring'\n        elif day == 3:\n            self.season ='summer'\n        elif day == 4:\n            self.season = 'autumn'\n        elif day == 5:\n            self.season = 'winter'\n        elif day == 6:\n            self.season ='spring'\n        elif day == 7:\n            self.season ='summer'\n        elif day == 8:\n            self.season = 'autumn'\n        elif day == 9:\n            self.season = 'winter'\n        elif day == 10:\n            self.season ='spring'\n        elif day == 11:\n            self.season ='summer'\n        elif day == 12:\n            self.season = 'autumn'\n        else:\n            self.season = 'unknown'\n        print('{0} {1}'.format(self.season, month))\n\n\ndef main():\n    \"\"\"\n    Main program\n    \"\"\"\n    if len(sys.argv)!= 3:\n        print('Usage: python3 season.py <month> <day>')\n        return\n\n    month = sys.argv[1]\n    day = sys.argv[2]\n    print('{0} {1}'.format(Season(month, day).season, day))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 3.2510786371984395,
      "candidate": "def print_season(month, day):\n    if month == 1:\n        print 'Spring'\n    elif month == 2:\n        print 'Summer'\n    elif month == 3:\n        print 'Fall'\n    elif month == 4:\n        print 'Winter'\n    elif month == 5:\n        print 'Spring'\n    elif month == 6:\n        print 'Summer'\n    elif month == 7:\n        print 'Fall'\n    elif month == 8:\n        print 'Winter'\n    elif month == 9:\n        print 'Spring'\n    elif month == 10:\n        print 'Summer'\n    elif month == 11:\n        print 'Fall'\n    elif month == 12:\n        print 'Winter'\n    else:\n        print 'Month'+ str(month) +'has no season'\n\nprint_season(2, 2)\nprint_season(2, 3)\nprint_season(2, 4)\nprint_season(2, 5)\nprint_season(2, 6)\nprint_season(2, 7)\nprint_season(2, 8)\nprint_season(2, 9)\nprint_season(2, 10)\nprint_season(2, 11)\nprint_season(2, 12)\nprint_season(2, 13)\nprint_season(2, 14)\nprint_season(2, 15)\nprint_season(2, 16)\nprint_season(2, 17)\nprint_season(2, 18)\nprint_season(2, 19)\nprint_season(2, 20)\nprint_season(2, 21)\nprint_season(2, 22)\nprint_season(2, 23)\nprint_season(2, 24)\nprint_season(2, 25)\nprint_season(2, 26)\nprint_season(2, 27)\nprint_season(2, 28)\nprint_season(2, 29)\nprint_season(2, 30)\nprint_season(2, 31)\nprint_season(3, 1)\nprint_season(3, 2)\nprint_season(3, 3)\nprint_season(3, 4)\nprint_season(3,"
    },
    {
      "rank": 74,
      "score": 3.1277373262375283,
      "candidate": "def print_season(month, day):\n    if day == 1:\n        if month == 1 or month == 2:\n            return \"Winter\"\n        elif month == 3 or month == 4:\n            return \"Spring\"\n        elif month == 5 or month == 6:\n            return \"Summer\"\n        elif month == 7 or month == 8:\n            return \"Autumn\"\n        elif month == 9 or month == 10:\n            return \"Winter\"\n        elif month == 11 or month == 12:\n            return \"Spring\"\n    elif day == 15:\n        if month == 1:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 3:\n            return \"Autumn\"\n        elif month == 4:\n            return \"Winter\"\n        elif month == 5:\n            return \"Spring\"\n        elif month == 6:\n            return \"Summer\"\n        elif month == 7:\n            return \"Autumn\"\n        elif month == 8:\n            return \"Winter\"\n        elif month == 9:\n            return \"Spring\"\n        elif month == 10:\n            return \"Summer\"\n        elif month == 11:\n            return \"Autumn\"\n    elif day == 16:\n        if month == 1:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 3:\n            return \"Autumn\"\n        elif month == 4:\n            return \"Winter\"\n        elif month == 5:\n            return \"Spring\"\n        elif month == 6:\n            return \"Summer\"\n        elif month == 7:\n            return \"Autumn\"\n        elif month == 8:\n            return \"Winter\"\n        elif month == 9:\n            return \"Spring\"\n        elif month == 10:\n            return \"Summer\"\n        elif month == 11:\n            return \"Autumn\"\n    elif day == 17:\n        if month == 1:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 3:\n            return \"Autumn\"\n        elif month == 4:"
    },
    {
      "rank": 75,
      "score": 3.1229562485161955,
      "candidate": "def print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    # write your code here\n    if day == 1:\n        return \"Spring\"\n    elif day == 21:\n        return \"Summer\"\n    elif day == 30:\n        return \"Fall\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 32:\n        return \"Winter\"\n    elif day == 33:\n        return \"Spring\"\n    elif day == 34:\n        return \"Spring\"\n    elif day == 35:\n        return \"Spring\"\n    elif day == 40:\n        return \"Summer\"\n    elif day == 41:\n        return \"Summer\"\n    elif day == 42:\n        return \"Summer\"\n    elif day == 43:\n        return \"Summer\"\n    elif day == 44:\n        return \"Summer\"\n    elif day == 45:\n        return \"Spring\"\n    elif day == 46:\n        return \"Spring\"\n    elif day == 47:\n        return \"Fall\"\n    elif day == 48:\n        return \"Fall\"\n    elif day == 49:\n        return \"Fall\"\n    elif day == 50:\n        return \"Winter\"\n    elif day == 51:\n        return \"Winter\"\n    elif day == 52:\n        return \"Winter\"\n    elif day == 53:\n        return \"Winter\"\n    elif day == 54:\n        return \"Winter\"\n    elif day == 55:\n        return \"Winter\"\n    elif day == 56:\n        return \"Winter\"\n    elif day == 57:\n        return \"Winter\"\n    elif day == 58:\n        return \"Winter\"\n    elif day == 59:\n        return \"Winter\"\n    elif day == 60:\n        return \"Winter\"\n    elif day == 61:\n        return \"Winter\"\n    elif day == 62:\n        return \"Winter\"\n    elif day == 63:\n        return \"Winter\"\n    elif day == 64:\n        return \"Winter\"\n    elif day == 65"
    },
    {
      "rank": 76,
      "score": 3.116830218453277,
      "candidate": "from datetime import date\n\ndef print_season(month, day):\n    if month == 1:\n        print \"January\"\n    elif month == 2:\n        print \"February\"\n    elif month == 3:\n        print \"March\"\n    elif month == 4:\n        print \"April\"\n    elif month == 5:\n        print \"May\"\n    elif month == 6:\n        print \"June\"\n    elif month == 7:\n        print \"July\"\n    elif month == 8:\n        print \"August\"\n    elif month == 9:\n        print \"September\"\n    elif month == 10:\n        print \"October\"\n    elif month == 11:\n        print \"November\"\n    elif month == 12:\n        print \"December\"\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert 1 == 1, \"1 should be 1\"\n    assert 2 == 2, \"2 should be 2\"\n    assert 3 == 3, \"3 should be 3\"\n    assert 4 == 4, \"4 should be 4\"\n    assert 5 == 5, \"5 should be 5\"\n    assert 6 == 6, \"6 should be 6\"\n    assert 7 == 7, \"7 should be 7\"\n    assert 8 == 8, \"8 should be 8\"\n    assert 9 == 9, \"9 should be 9\"\n    assert 10 == 10, \"10 should be 10\"\n    assert 11 == 11, \"11 should be 11\"\n    assert 12 == 12, \"12 should be 12\"\n    assert 1 == 1, \"1 should be 1\"\n    assert 2 == 2, \"2 should be 2\"\n    assert 3 == 3, \"3 should be 3\"\n    assert 4 == 4, \"4 should be 4\"\n    assert 5 == 5, \"5 should be 5\"\n    assert 6 == 6, \"6 should be 6\"\n    assert 7 == 7, \"7 should be 7\"\n    assert 8 == 8, \"8 should be 8\"\n    assert 9 == 9, \"9 should be 9\"\n    assert 10 == 10, \"10 should be 10\"\n    assert 11 == 11, \"11 should be 11\"\n    assert"
    },
    {
      "rank": 77,
      "score": 3.111775377284293,
      "candidate": "def season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    # Write your code here\n    if day == 1 or day == 29 or day == 31:\n        return \"Winter\"\n    elif day == 2:\n        return \"Spring\"\n    elif day == 3 or day == 4 or day == 5:\n        return \"Summer\"\n    elif day == 6 or day == 7 or day == 8:\n        return \"Autumn\"\n    else:\n        return \"Winter\"\n\nif __name__ == \"__main__\":\n    print(season(1, 1))\n    print(season(1, 31))\n    print(season(2, 1))\n    print(season(2, 29))\n    print(season(3, 1))\n    print(season(3, 31))\n    print(season(4, 1))\n    print(season(4, 29))\n    print(season(5, 1))\n    print(season(5, 31))\n    print(season(6, 1))\n    print(season(6, 29))\n    print(season(7, 1))\n    print(season(7, 31))\n    print(season(8, 1))\n    print(season(8, 29))\n    print(season(9, 1))\n    print(season(9, 31))\n    print(season(10, 1))\n    print(season(10, 30))\n    print(season(11, 1))\n    print(season(11, 30))\n    print(season(12, 1))\n    print(season(12, 31))"
    },
    {
      "rank": 78,
      "score": 3.1101885495942305,
      "candidate": "# https://oj.leetcode.com/problems/day-of-week-of-month/\n\n# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nimport unittest\n\nclass Solution:\n    # @param {integer} month\n    # @param {integer} day\n    # @return {string}\n    def getSeason(self, month, day):\n        return self.getSeasonHelper(month, day)\n\n    def getSeasonHelper(self, month, day):\n        # 1:January, 2:February,... 12:December\n        if month == 1:\n            if day < 3:\n                return \"January\"\n            elif day < 9:\n                return \"February\"\n            elif day < 15:\n                return \"March\"\n            else:\n                return \"April\"\n        elif month == 2:\n            if day < 3:\n                return \"February\"\n            elif day < 9:\n                return \"March\"\n            elif day < 15:\n                return \"April\"\n            else:\n                return \"May\"\n        elif month == 3:\n            if day < 3:\n                return \"March\"\n            elif day < 9:\n                return \"April\"\n            elif day < 15:\n                return \"May\"\n            else:\n                return \"June\"\n        elif month == 4:\n            if day < 3:\n                return \"April\"\n            elif day < 9:\n                return \"May\"\n            elif day < 15:\n                return \"June\"\n            else:\n                return \"July\"\n        elif month == 5:\n            if day < 3:\n                return \"June\"\n            elif day < 9:\n                return \"July\"\n            elif day < 15:\n                return \"August\"\n            else:\n                return \"September\"\n        elif month == 6:\n            if day < 3:\n                return \"September\"\n            elif day < 9:\n                return \"August\"\n            elif day < 15"
    },
    {
      "rank": 79,
      "score": 3.0582652156045897,
      "candidate": "# TODO:\n# - Make sure you print the correct season\n# - Add support for leap years\n\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n\n    if month == 1:\n        return \"Spring\"\n    elif month == 2:\n        return \"Summer\"\n    elif month == 3:\n        return \"Autumn\"\n    elif month == 4:\n        return \"Winter\"\n    else:\n        return \"Unknown\"\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert print_season(1, 1) == \"Spring\", \"For 1st day of the month\"\n    assert print_season(1, 29) == \"Autumn\", \"For 29th day of the month\"\n    assert print_season(2, 1) == \"Summer\", \"For 1st day of the month\"\n    assert print_season(2, 29) == \"Winter\", \"For 29th day of the month\"\n    assert print_season(3, 1) == \"Spring\", \"For 1st day of the month\"\n    assert print_season(3, 30) == \"Autumn\", \"For 30th day of the month\"\n    assert print_season(4, 1) == \"Spring\", \"For 1st day of the month\"\n    assert print_season(4, 30) == \"Winter\", \"For 30th day of the month\"\n    assert print_season(5, 1) == \"Spring\", \"For 1st day of the month\"\n    assert print_season(5, 30) == \"Autumn\", \"For 30th day of the month\"\n    assert print_season(6, 1) == \"Spring\", \"For 1st day of the month\"\n    assert print_season(6, 30) == \"Autumn\", \"For 30th day of the month\"\n    assert print_season(7, 1) == \"Spring\", \"For 1st day of the month\"\n    assert print_season(7, 30) == \"Autumn\", \"For 30th day of the month\"\n    assert print_season(8, 1)"
    },
    {
      "rank": 80,
      "score": 3.0229595895938943,
      "candidate": "def print_season(month, day):\n    # Write your code here\n    if day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Winter\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Spring\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Summer\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Fall\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Winter\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Spring\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Summer\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Fall\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Winter\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Spring\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Summer\"\n    elif day >= 1 and day <= 31 and month >= 1 and month <= 12:\n        print \"Fall\"\n    else:\n        print \"Error\"\n\nprint_season(1, 1)"
    },
    {
      "rank": 81,
      "score": 2.9755165586626866,
      "candidate": "#!/usr/bin/env python\n\ndef print_season(month, day):\n    '''\n    :type month: int\n    :type day: int\n    :rtype: str\n    '''\n    if day == 1:\n        if month == 1:\n            return 'winter'\n        elif month == 2:\n            return'spring'\n        elif month == 3:\n            return'summer'\n        elif month == 4:\n            return 'fall'\n        elif month == 5:\n            return 'winter'\n        elif month == 6:\n            return'spring'\n        elif month == 7:\n            return'summer'\n        elif month == 8:\n            return 'fall'\n        elif month == 9:\n            return 'winter'\n        elif month == 10:\n            return'spring'\n        elif month == 11:\n            return'summer'\n        elif month == 12:\n            return 'fall'\n    else:\n        if day == 25:\n            return 'winter'\n        elif day == 26:\n            return'spring'\n        elif day == 27:\n            return'summer'\n        elif day == 28:\n            return 'fall'\n        elif day == 29:\n            return 'winter'\n        elif day == 30:\n            return'spring'\n        elif day == 31:\n            return'summer'\n        elif day == 32:\n            return 'fall'\n        elif day == 33:\n            return 'winter'\n        elif day == 34:\n            return'spring'\n        elif day == 35:\n            return'summer'\n        elif day == 36:\n            return 'fall'\n        elif day == 37:\n            return 'winter'\n        elif day == 38:\n            return'spring'\n        elif day == 39:\n            return'summer'\n        elif day == 40:\n            return 'fall'\n        elif day == 41:\n            return 'winter'\n        elif day == 42:\n            return'spring'\n        elif day == 43:\n            return'summer'\n        elif day == 44:\n            return '"
    },
    {
      "rank": 82,
      "score": 2.9529901376017973,
      "candidate": "# import the libraries\nimport datetime\n\n# the function to return the season\ndef get_season(month, day):\n    if month == 1:\n        return'spring'\n    elif month == 2:\n        return'summer'\n    elif month == 3:\n        return 'fall'\n    elif month == 4:\n        return 'winter'\n    else:\n        return'spring'\n\n# the function to print the season\ndef print_season(month, day):\n    print(get_season(month, day))\n\n# call the function\nprint_season(datetime.datetime.now().month, datetime.datetime.now().day)"
    },
    {
      "rank": 83,
      "score": 2.925311558135246,
      "candidate": "def get_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if (month == 1 and day > 28):\n        return \"Spring\"\n    elif (month == 2 and day > 29):\n        return \"Summer\"\n    elif (month == 3 and day > 30):\n        return \"Fall\"\n    elif (month == 4 and day > 31):\n        return \"Winter\"\n    elif (month == 5 and day > 31):\n        return \"Winter\"\n    elif (month == 6 and day > 30):\n        return \"Summer\"\n    elif (month == 7 and day > 31):\n        return \"Spring\"\n    elif (month == 8 and day > 30):\n        return \"Summer\"\n    elif (month == 9 and day > 31):\n        return \"Fall\"\n    elif (month == 10 and day > 31):\n        return \"Winter\"\n    elif (month == 11 and day > 30):\n        return \"Winter\"\n    elif (month == 12 and day > 31):\n        return \"Spring\"\n    elif (month == 1 and day > 28):\n        return \"Spring\"\n    elif (month == 2 and day > 29):\n        return \"Summer\"\n    elif (month == 3 and day > 30):\n        return \"Fall\"\n    elif (month == 4 and day > 31):\n        return \"Winter\"\n    elif (month == 5 and day > 31):\n        return \"Winter\"\n    elif (month == 6 and day > 30):\n        return \"Summer\"\n    elif (month == 7 and day > 31):\n        return \"Spring\"\n    elif (month == 8 and day > 30):\n        return \"Summer\"\n    elif (month == 9 and day > 31):\n        return \"Fall\"\n    elif (month == 10 and day > 30):\n        return \"Winter\"\n    elif (month == 11 and day > 31):\n        return \"Spring\"\n    elif (month == 12 and day > 31):\n        return \"Spring\"\n    elif (month == 1 and day > 28):\n        return \"Spring\""
    },
    {
      "rank": 84,
      "score": 2.9232360578345777,
      "candidate": "def print_season(month, day):\n    if day < 3:\n        return \"winter\"\n    elif day < 9:\n        return \"spring\"\n    elif day < 16:\n        return \"summer\"\n    elif day < 23:\n        return \"autumn\"\n    elif day < 30:\n        return \"winter\"\n    elif day < 45:\n        return \"spring\"\n    elif day < 50:\n        return \"summer\"\n    elif day < 59:\n        return \"autumn\"\n    else:\n        return \"winter\"\n\nprint(print_season(1, 1))\nprint(print_season(2, 1))\nprint(print_season(3, 1))\nprint(print_season(4, 1))\nprint(print_season(5, 1))\nprint(print_season(6, 1))\nprint(print_season(7, 1))\nprint(print_season(8, 1))\nprint(print_season(9, 1))\nprint(print_season(10, 1))\nprint(print_season(11, 1))\nprint(print_season(12, 1))\nprint(print_season(1, 2))\nprint(print_season(2, 2))\nprint(print_season(3, 2))\nprint(print_season(4, 2))\nprint(print_season(5, 2))\nprint(print_season(6, 2))\nprint(print_season(7, 2))\nprint(print_season(8, 2))\nprint(print_season(9, 2))\nprint(print_season(10, 2))\nprint(print_season(11, 2))\nprint(print_season(12, 2))\nprint(print_season(1, 3))\nprint(print_season(2, 3))\nprint(print_season(3, 3))\nprint(print_season(4, 3))\nprint(print_season(5, 3))\nprint(print_season(6, 3))\nprint(print_season(7, 3))\nprint(print_season(8, 3))\nprint(print_season(9, 3))\nprint(print_season(10, 3))\nprint"
    },
    {
      "rank": 85,
      "score": 2.9203934346372784,
      "candidate": "def print_season(month, day):\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:\n        day = '0' + str(day)\n\n    if day < 10:"
    },
    {
      "rank": 86,
      "score": 2.92024037465245,
      "candidate": "def get_season(month, day):\n    if day == 1:\n        if month == 1:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 3:\n            return \"Fall\"\n        elif month == 4:\n            return \"Winter\"\n        elif month == 5:\n            return \"Spring\"\n        elif month == 6:\n            return \"Summer\"\n        elif month == 7:\n            return \"Fall\"\n        elif month == 8:\n            return \"Winter\"\n        elif month == 9:\n            return \"Spring\"\n        elif month == 10:\n            return \"Summer\"\n        elif month == 11:\n            return \"Fall\"\n        elif month == 12:\n            return \"Winter\"\n        else:\n            return \"Unknown\"\n    elif day == 15:\n        if month == 1:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 3:\n            return \"Fall\"\n        elif month == 4:\n            return \"Winter\"\n        elif month == 5:\n            return \"Spring\"\n        elif month == 6:\n            return \"Summer\"\n        elif month == 7:\n            return \"Fall\"\n        elif month == 8:\n            return \"Winter\"\n        elif month == 9:\n            return \"Spring\"\n        elif month == 10:\n            return \"Summer\"\n        elif month == 11:\n            return \"Fall\"\n        elif month == 12:\n            return \"Winter\"\n        else:\n            return \"Unknown\"\n    elif day == 16:\n        if month == 1:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 3:\n            return \"Fall\"\n        elif month == 4:\n            return \"Winter\"\n        elif month == 5:\n            return \"Spring\"\n        elif month == 6:\n            return \"Summer\"\n        elif month == 7:\n            return \"Fall\"\n        elif month == 8:\n            return \"Winter\"\n        elif month == 9:\n            return \"Spring\""
    },
    {
      "rank": 87,
      "score": 2.9008241250702858,
      "candidate": "import datetime\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if day == 1:\n        return 'Spring'\n    elif day == 15:\n        return 'Summer'\n    elif day == 30:\n        return 'Fall'\n    elif day == 31:\n        return 'Winter'\n    else:\n        return 'Unknown'\n\nif __name__ == '__main__':\n    print(print_season(4, 1))\n    print(print_season(4, 15))\n    print(print_season(4, 30))\n    print(print_season(4, 31))\n    print(print_season(5, 1))\n    print(print_season(5, 15))\n    print(print_season(5, 30))\n    print(print_season(5, 31))\n    print(print_season(6, 1))\n    print(print_season(6, 15))\n    print(print_season(6, 30))\n    print(print_season(6, 31))\n    print(print_season(7, 1))\n    print(print_season(7, 15))\n    print(print_season(7, 30))\n    print(print_season(7, 31))\n    print(print_season(8, 1))\n    print(print_season(8, 15))\n    print(print_season(8, 30))\n    print(print_season(8, 31))\n    print(print_season(9, 1))\n    print(print_season(9, 15))\n    print(print_season(9, 30))\n    print(print_season(9, 31))\n    print(print_season(10, 1))\n    print(print_season(10, 15))\n    print(print_season(10, 30))\n    print(print_season(10, 31))\n    print(print_season(11, 1))\n    print(print_season(11, 15))\n    print(print_season(11, 30))\n    print(print_season(11, 31))\n    print(print_season(12,"
    },
    {
      "rank": 88,
      "score": 2.888594870156759,
      "candidate": "def print_season(month, day):\n    if day == 1 or day == 21 or day == 31:\n        print \"Winter\"\n    elif day == 2 or day == 22:\n        print \"Spring\"\n    elif day == 3 or day == 23:\n        print \"Summer\"\n    elif day == 4 or day == 24:\n        print \"Autumn\"\n    elif day == 5 or day == 25:\n        print \"Winter\"\n    elif day == 6 or day == 26:\n        print \"Spring\"\n    elif day == 7 or day == 27:\n        print \"Summer\"\n    elif day == 8 or day == 28:\n        print \"Autumn\"\n    elif day == 9 or day == 29:\n        print \"Winter\"\n    elif day == 10 or day == 30:\n        print \"Spring\"\n    elif day == 11 or day == 31:\n        print \"Summer\"\n    elif day == 12 or day == 1:\n        print \"Autumn\"\n\nprint_season(2, 29)"
    },
    {
      "rank": 89,
      "score": 2.8666832279350665,
      "candidate": "import calendar\nfrom datetime import date\n\n\ndef get_season(month, day):\n    \"\"\"\n    :param month: Month of the date\n    :param day: Day of the date\n    :return: Season\n    \"\"\"\n    if month == 1:\n        return \"Winter\"\n    elif month == 2:\n        return \"Spring\"\n    elif month == 3:\n        return \"Summer\"\n    elif month == 4:\n        return \"Autumn\"\n    elif month == 5:\n        return \"Winter\"\n    elif month == 6:\n        return \"Spring\"\n    elif month == 7:\n        return \"Summer\"\n    elif month == 8:\n        return \"Autumn\"\n    elif month == 9:\n        return \"Winter\"\n    elif month == 10:\n        return \"Spring\"\n    elif month == 11:\n        return \"Summer\"\n    elif month == 12:\n        return \"Autumn\"\n    else:\n        return \"Unknown\"\n\n\ndef print_season(month, day):\n    \"\"\"\n    :param month: Month of the date\n    :param day: Day of the date\n    :return: Season\n    \"\"\"\n    season = get_season(month, day)\n    print(season)\n\n\nif __name__ == \"__main__\":\n    print_season(date.today().month, date.today().day)"
    },
    {
      "rank": 90,
      "score": 2.842437984443763,
      "candidate": "import re\n\n# Complete the function below.\ndef season(month, day):\n    if day == 1:\n        if month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Winter\"\n        elif month == 3 or month == 5 or month == 8 or month == 10:\n            return \"Spring\"\n        elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10:\n            return \"Summer\"\n        elif month == 6 or month == 9 or month == 11:\n            return \"Fall\"\n        else:\n            return \"Unknown\"\n    elif day == 21:\n        if month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Winter\"\n        elif month == 3 or month == 5 or month == 8 or month == 10:\n            return \"Spring\"\n        elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10:\n            return \"Summer\"\n        elif month == 6 or month == 9 or month == 11:\n            return \"Fall\"\n        else:\n            return \"Unknown\"\n    elif day == 22:\n        if month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Winter\"\n        elif month == 3 or month == 5 or month == 8 or month == 10:\n            return \"Spring\"\n        elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10:\n            return \"Summer\"\n        elif month == 6 or month == 9 or month == 11:\n            return \"Fall\"\n        else:\n            return \"Unknown\"\n    elif day == 23:\n        if month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Winter\"\n        elif month == 3 or month == 5 or month == 8 or month == 10:\n            return \"Spring\"\n        elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10:\n            return \"Summer\"\n        elif month == 6 or month =="
    },
    {
      "rank": 91,
      "score": 2.8294026051812575,
      "candidate": "def print_season(month, day):\n    \"\"\"\n    :param month: month of the given day\n    :param day: day of the given month\n    :return: the season of the given month and day\n    \"\"\"\n    if day == 1:\n        print 'Spring'\n    elif day == 21:\n        print 'Summer'\n    elif day == 31:\n        print 'Autumn'\n    elif day == 30:\n        print 'Winter'\n    elif day == 29:\n        print 'Winter'\n    elif day == 28:\n        print 'Winter'\n    elif day == 27:\n        print 'Winter'\n    elif day == 26:\n        print 'Winter'\n    elif day == 25:\n        print 'Winter'\n    elif day == 24:\n        print 'Winter'\n    elif day == 23:\n        print 'Winter'\n    elif day == 22:\n        print 'Winter'\n    elif day == 21:\n        print 'Summer'\n    elif day == 20:\n        print 'Autumn'\n    elif day == 19:\n        print 'Autumn'\n    elif day == 18:\n        print 'Autumn'\n    elif day == 17:\n        print 'Autumn'\n    elif day == 16:\n        print 'Autumn'\n    elif day == 15:\n        print 'Autumn'\n    elif day == 14:\n        print 'Autumn'\n    elif day == 13:\n        print 'Autumn'\n    elif day == 12:\n        print 'Autumn'\n    elif day == 11:\n        print 'Autumn'\n    elif day == 10:\n        print 'Autumn'\n    elif day == 9:\n        print 'Autumn'\n    elif day == 8:\n        print 'Autumn'\n    elif day == 7:\n        print 'Autumn'\n    elif day == 6:\n        print 'Autumn'\n    elif day == 5:\n        print 'Autumn'\n    elif day == 4:\n        print 'Autumn'\n    elif day == 3:\n        print 'Winter'\n    elif day == 2:"
    },
    {
      "rank": 92,
      "score": 2.808822240058069,
      "candidate": "import re\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if day == 1:\n        return \"Spring\"\n    elif day == 21:\n        return \"Summer\"\n    elif day == 31:\n        return \"Fall\"\n    elif day == 32:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 29:\n        return \"Winter\"\n    elif day == 28:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 29:\n        return \"Winter\"\n    elif day == 28:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 29:\n        return \"Winter\"\n    elif day == 28:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:\n        return \"Winter\"\n    elif day == 31:\n        return \"Winter\"\n    elif day == 30:"
    },
    {
      "rank": 93,
      "score": 2.7613019480817003,
      "candidate": "import unittest\nfrom datetime import date\n\n# https://www.hackerrank.com/challenges/print-season/problem\n# Time complexity: O(1)\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if day in (1, 3, 5, 7, 8, 10, 12):\n        return 'Summer'\n    elif day in (4, 6, 9, 11):\n        return 'Autumn'\n    elif day in (2, 4, 6, 9, 11):\n        return 'Winter'\n    elif day in (1, 3, 5, 7, 8, 10, 12):\n        return 'Spring'\n    else:\n        return 'Winter'\n\nclass TestCode(unittest.TestCase):\n    def test_print_season(self):\n        self.assertEqual(print_season(1, 1), 'Spring')\n        self.assertEqual(print_season(2, 1), 'Autumn')\n        self.assertEqual(print_season(3, 1), 'Spring')\n        self.assertEqual(print_season(4, 1), 'Summer')\n        self.assertEqual(print_season(5, 1), 'Autumn')\n        self.assertEqual(print_season(6, 1), 'Autumn')\n        self.assertEqual(print_season(7, 1), 'Winter')\n        self.assertEqual(print_season(8, 1), 'Spring')\n        self.assertEqual(print_season(9, 1), 'Spring')\n        self.assertEqual(print_season(10, 1), 'Autumn')\n        self.assertEqual(print_season(11, 1), 'Spring')\n        self.assertEqual(print_season(12, 1), 'Winter')\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 94,
      "score": 2.655637419086296,
      "candidate": "def print_season(month, day):\n    if month == 1:\n        print('Spring')\n    elif month == 2:\n        print('Summer')\n    elif month == 3:\n        print('Fall')\n    elif month == 4:\n        print('Winter')\n    elif month == 5:\n        print('Spring')\n    elif month == 6:\n        print('Summer')\n    elif month == 7:\n        print('Fall')\n    elif month == 8:\n        print('Winter')\n    elif month == 9:\n        print('Spring')\n    elif month == 10:\n        print('Summer')\n    elif month == 11:\n        print('Fall')\n    elif month == 12:\n        print('Winter')\n    elif month == 1:\n        print('Spring')\n    elif month == 2:\n        print('Summer')\n    elif month == 3:\n        print('Fall')\n    elif month == 4:\n        print('Winter')\n    elif month == 5:\n        print('Spring')\n    elif month == 6:\n        print('Summer')\n    elif month == 7:\n        print('Fall')\n    elif month == 8:\n        print('Winter')\n    elif month == 9:\n        print('Spring')\n    elif month == 10:\n        print('Summer')\n    elif month == 11:\n        print('Fall')\n    elif month == 12:\n        print('Winter')\n\n\nprint_season(3, 1)"
    },
    {
      "rank": 95,
      "score": 2.608662183676417,
      "candidate": "# https://leetcode.com/problems/print-season/\n\nclass Solution(object):\n    def printSeason(self, month, day):\n        \"\"\"\n        :type month: int\n        :type day: int\n        :rtype: str\n        \"\"\"\n        if day < 0 or day > 31:\n            return \"Invalid day\"\n\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            return \"Winter\"\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return \"Spring\"\n        elif month == 2:\n            return \"Summer\"\n        elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            return \"Fall\"\n        else:\n            return \"Invalid month\"\n\nif __name__ == \"__main__\":\n    assert Solution().printSeason(1, 0) == \"Invalid day\"\n    assert Solution().printSeason(1, 31) == \"Spring\"\n    assert Solution().printSeason(2, 0) == \"Invalid day\"\n    assert Solution().printSeason(2, 31) == \"Winter\"\n    assert Solution().printSeason(3, 0) == \"Invalid day\"\n    assert Solution().printSeason(3, 31) == \"Fall\"\n    assert Solution().printSeason(4, 0) == \"Invalid day\"\n    assert Solution().printSeason(4, 31) == \"Spring\"\n    assert Solution().printSeason(5, 0) == \"Invalid day\"\n    assert Solution().printSeason(5, 31) == \"Fall\"\n    assert Solution().printSeason(6, 0) == \"Invalid day\"\n    assert Solution().printSeason(6, 31) == \"Winter\"\n    assert Solution().printSeason(7, 0) == \"Invalid day\"\n    assert Solution().printSeason(7, 31) == \"Fall\"\n    assert Solution().printSeason(8, 0) == \"Invalid day\"\n    assert Solution().printSeason(8, 31) == \"Spring\"\n    assert Solution().printSeason(9, 0) == \"Invalid day\"\n    assert Solution().printSeason(9, 31)"
    },
    {
      "rank": 96,
      "score": 2.593289747812572,
      "candidate": "def print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    return'spring' if day > 20 and day < 31 else'summer' if day > 20 and day < 32 else 'fall' if day > 20 and day < 33 else 'winter' if day > 20 and day < 34 else 'winter'\n\nprint(print_season(1,1))\nprint(print_season(2,1))\nprint(print_season(3,1))\nprint(print_season(4,1))\nprint(print_season(5,1))\nprint(print_season(6,1))\nprint(print_season(7,1))\nprint(print_season(8,1))\nprint(print_season(9,1))\nprint(print_season(10,1))\nprint(print_season(11,1))\nprint(print_season(12,1))\nprint(print_season(1,2))\nprint(print_season(2,2))\nprint(print_season(3,2))\nprint(print_season(4,2))\nprint(print_season(5,2))\nprint(print_season(6,2))\nprint(print_season(7,2))\nprint(print_season(8,2))\nprint(print_season(9,2))\nprint(print_season(10,2))\nprint(print_season(11,2))\nprint(print_season(12,2))\nprint(print_season(1,3))\nprint(print_season(2,3))\nprint(print_season(3,3))\nprint(print_season(4,3))\nprint(print_season(5,3))\nprint(print_season(6,3))\nprint(print_season(7,3))\nprint(print_season(8,3))\nprint(print_season(9,3))\nprint(print_season(10,3))\nprint(print_season(11,3))\nprint(print_season(12,3))\nprint(print_season(1,4))\nprint(print_season(2,4))"
    },
    {
      "rank": 97,
      "score": 2.5849131590098526,
      "candidate": "import datetime\nimport time\n\n\ndef get_season(month, day):\n    if month == 1:\n        return \"spring\"\n    elif month == 2:\n        return \"summer\"\n    elif month == 3:\n        return \"autumn\"\n    elif month == 4:\n        return \"winter\"\n    elif month == 5:\n        return \"fall\"\n    elif month == 6:\n        return \"spring\"\n    elif month == 7:\n        return \"summer\"\n    elif month == 8:\n        return \"autumn\"\n    elif month == 9:\n        return \"winter\"\n    elif month == 10:\n        return \"fall\"\n    elif month == 11:\n        return \"spring\"\n    elif month == 12:\n        return \"summer\"\n    elif month == 13:\n        return \"autumn\"\n    elif month == 14:\n        return \"winter\"\n    elif month == 15:\n        return \"fall\"\n    elif month == 16:\n        return \"spring\"\n    elif month == 17:\n        return \"summer\"\n    elif month == 18:\n        return \"autumn\"\n    elif month == 19:\n        return \"winter\"\n    elif month == 20:\n        return \"fall\"\n    elif month == 21:\n        return \"spring\"\n    elif month == 22:\n        return \"summer\"\n    elif month == 23:\n        return \"autumn\"\n    elif month == 24:\n        return \"winter\"\n    elif month == 25:\n        return \"fall\"\n    elif month == 26:\n        return \"spring\"\n    elif month == 27:\n        return \"summer\"\n    elif month == 28:\n        return \"autumn\"\n    elif month == 29:\n        return \"winter\"\n    elif month == 30:\n        return \"fall\"\n    elif month == 31:\n        return \"spring\"\n    else:\n        return \"autumn\"\n\n\ndef get_season_for_date(date):\n    date = datetime.date(date.year, date.month, date.day)\n    month ="
    },
    {
      "rank": 98,
      "score": 2.519816741546001,
      "candidate": "import datetime\n\ndef print_season(month, day):\n    \"\"\"\n    :type month: int\n    :type day: int\n    :rtype: str\n    \"\"\"\n    if day == 1:\n        return \"Spring\"\n    elif day == 15:\n        return \"Summer\"\n    elif day == 30:\n        return \"Fall\"\n    elif day == 31:\n        return \"Winter\"\n    else:\n        return \"Unknown\"\n\nprint(print_season(1, 1))\nprint(print_season(1, 15))\nprint(print_season(1, 30))\nprint(print_season(1, 31))\nprint(print_season(2, 1))\nprint(print_season(2, 15))\nprint(print_season(2, 30))\nprint(print_season(2, 31))\nprint(print_season(3, 1))\nprint(print_season(3, 15))\nprint(print_season(3, 30))\nprint(print_season(3, 31))\nprint(print_season(4, 1))\nprint(print_season(4, 15))\nprint(print_season(4, 30))\nprint(print_season(4, 31))\nprint(print_season(5, 1))\nprint(print_season(5, 15))\nprint(print_season(5, 30))\nprint(print_season(5, 31))\nprint(print_season(6, 1))\nprint(print_season(6, 15))\nprint(print_season(6, 30))\nprint(print_season(6, 31))\nprint(print_season(7, 1))\nprint(print_season(7, 15))\nprint(print_season(7, 30))\nprint(print_season(7, 31))\nprint(print_season(8, 1))\nprint(print_season(8, 15))\nprint(print_season(8, 30))\nprint(print_season(8, 31))\nprint(print_season(9, 1))\nprint(print_season(9, 15))\nprint(print_season(9, 30))\nprint(print_season(9, 31))\nprint(print_season(10"
    },
    {
      "rank": 99,
      "score": 2.5155856166874244,
      "candidate": "import re\n\ndef get_season(month, day):\n    if month == 1:\n        return \"Spring\"\n    elif month == 2:\n        return \"Summer\"\n    elif month == 3:\n        return \"Fall\"\n    elif month == 4:\n        return \"Winter\"\n    elif month == 5:\n        return \"Spring\"\n    elif month == 6:\n        return \"Summer\"\n    elif month == 7:\n        return \"Fall\"\n    elif month == 8:\n        return \"Winter\"\n    elif month == 9:\n        return \"Spring\"\n    elif month == 10:\n        return \"Summer\"\n    elif month == 11:\n        return \"Fall\"\n    elif month == 12:\n        return \"Winter\"\n    else:\n        return \"Error\"\n\n# Test Cases\nprint get_season(2,1)\nprint get_season(12,1)\nprint get_season(12,31)\nprint get_season(1,1)\nprint get_season(12,1)\nprint get_season(12,30)\nprint get_season(1,1)\nprint get_season(1,31)\nprint get_season(2,1)\nprint get_season(2,30)\nprint get_season(3,1)\nprint get_season(3,30)\nprint get_season(4,1)\nprint get_season(4,30)\nprint get_season(5,1)\nprint get_season(5,30)\nprint get_season(6,1)\nprint get_season(6,30)\nprint get_season(7,1)\nprint get_season(7,30)\nprint get_season(8,1)\nprint get_season(8,30)\nprint get_season(9,1)\nprint get_season(9,30)\nprint get_season(10,1)\nprint get_season(10,30)\nprint get_season(11,1)\nprint get_season(11,30)\nprint get_season(12,1)\nprint get_season(12,31)\nprint get_season(1,1)\nprint get_season("
    },
    {
      "rank": 100,
      "score": 2.3242265690356962,
      "candidate": "def print_season(month, day):\n    if month == 1 or month == 2:\n        return \"winter\"\n    elif month == 3 or month == 4:\n        return \"spring\"\n    elif month == 5 or month == 6:\n        return \"summer\"\n    elif month == 7 or month == 8:\n        return \"autumn\"\n    elif month == 9 or month == 10:\n        return \"fall\"\n    elif month == 11 or month == 12:\n        return \"winter\"\n\ndef main():\n    print print_season(1, 1)\n    print print_season(2, 1)\n    print print_season(3, 1)\n    print print_season(3, 2)\n    print print_season(4, 1)\n    print print_season(4, 2)\n    print print_season(5, 1)\n    print print_season(5, 2)\n    print print_season(6, 1)\n    print print_season(6, 2)\n    print print_season(7, 1)\n    print print_season(7, 2)\n    print print_season(8, 1)\n    print print_season(8, 2)\n    print print_season(9, 1)\n    print print_season(9, 2)\n    print print_season(10, 1)\n    print print_season(10, 2)\n    print print_season(11, 1)\n    print print_season(11, 2)\n    print print_season(12, 1)\n    print print_season(12, 2)\n    print print_season(1, 3)\n    print print_season(2, 3)\n    print print_season(3, 3)\n    print print_season(4, 3)\n    print print_season(5, 3)\n    print print_season(6, 3)\n    print print_season(7, 3)\n    print print_season(8, 3)\n    print print_season(9, 3)\n    print print_season(10, 3)\n    print print_season(11, 3)\n    print print_season(12, 3)\n    print print_season(1, 4)\n    print"
    }
  ]
}