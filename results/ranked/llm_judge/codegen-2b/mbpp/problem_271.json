{
  "timestamp": "2025-09-14T19:22:44.555359",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 271,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/subset-sum-ii-higher-better/solution/\n# Time:  O(n^2 * m^2)\n# Space: O(n^2)\n\n# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def subsum(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        def helper(nums, nums2, cur_sum, cur_pos):\n            if len(nums2) == 0:\n                return cur_sum\n            if len(nums2) == 1:\n                return nums[cur_pos] + nums2[0]\n            if cur_sum > nums[cur_pos] + nums2[0]:\n                return helper(nums, nums2[1:], cur_sum, cur_pos)\n            else:\n                return helper(nums, nums2[1:], cur_sum + nums[cur_pos], cur_pos + 1)\n\n        return helper(nums1, nums2, 0, 0)\n\nif __name__ == \"__main__\":\n    print Solution().subsum([1,2,3,4], [5,6,7,8])\n    print Solution().subsum([1,2,3,4], [2,4,6,8])\n    print Solution().subsum([1,2,3,4], [1,2,3])"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def substract(l1, l2):\n    \"\"\"\n    Substract two lists.\n\n    :param l1: list\n    :param l2: list\n    :return: list\n    \"\"\"\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n\ndef substract2(l1, l2):\n    \"\"\"\n    Substract two lists.\n\n    :param l1: list\n    :param l2: list\n    :return: list\n    \"\"\"\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n\ndef substract3(l1, l2):\n    \"\"\"\n    Substract two lists.\n\n    :param l1: list\n    :param l2: list\n    :return: list\n    \"\"\"\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n\ndef substract4(l1, l2):\n    \"\"\"\n    Substract two lists.\n\n    :param l1: list\n    :param l2: list\n    :return: list\n    \"\"\"\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n\ndef substract5(l1, l2):\n    \"\"\"\n    Substract two lists.\n\n    :param l1: list\n    :param l2: list\n    :return: list\n    \"\"\"\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n\ndef substract6(l1, l2):\n    \"\"\"\n    Substract two lists.\n\n    :param l1: list\n    :param l2: list\n    :return: list\n    \"\"\"\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n\ndef substract7(l1, l2):\n    \"\"\"\n    Substract two lists.\n\n    :param l"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def substract_two_lists(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in l1 if x not in l2]\n\ndef test_substract_two_lists():\n    assert substract_two_lists([1,2,3],[4,5,6]) == [3,4,5]\n\ndef main():\n    test_substract_two_lists()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def substract_lists(first_list, second_list):\n    new_list = []\n    for i in range(len(first_list)):\n        new_list.append(first_list[i] - second_list[i])\n    return new_list\n\ndef main():\n    first_list = [1, 2, 3]\n    second_list = [5, 6, 7]\n    new_list = substract_lists(first_list, second_list)\n    print new_list\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def substaract(list1, list2, lambda_func):\n    '''\n    :param list1: List of strings\n    :param list2: List of strings\n    :param lambda_func: lambda function to use\n    :return: List of strings\n    '''\n    sub = []\n    for i in range(len(list1)):\n        sub.append(lambda_func(list1[i], list2[i]))\n    return sub\n\ndef substaract_lambda(list1, list2):\n    '''\n    :param list1: List of strings\n    :param list2: List of strings\n    :return: List of strings\n    '''\n    sub = []\n    for i in range(len(list1)):\n        sub.append(lambda_lambda(list1[i], list2[i]))\n    return sub\n\ndef lambda_lambda(s1, s2):\n    return s1.lower() in s2.lower()\n\ndef substaract_map(list1, list2):\n    sub = []\n    for i in range(len(list1)):\n        sub.append(map(lambda_lambda, list1[i], list2[i]))\n    return sub\n\ndef substaract_map_lambda(list1, list2):\n    sub = []\n    for i in range(len(list1)):\n        sub.append(map(lambda_lambda, list1[i], list2[i]))\n    return sub\n\ndef substaract_map_lambda_with_lambda(list1, list2):\n    sub = []\n    for i in range(len(list1)):\n        sub.append(map(lambda_lambda, list1[i], list2[i]))\n    return sub\n\ndef substaract_lambda_lambda(s1, s2):\n    return lambda_lambda(s1.lower(), s2.lower())\n\ndef substaract_lambda_lambda_with_lambda(s1, s2):\n    return lambda_lambda(s1.lower(), s2.lower())\n\ndef substaract_lambda_lambda_with_lambda_lambda(s1, s2):"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # return the second list if it is empty\n        if not l2:\n            return l1\n        # if the first list is empty, return the second list\n        if not l1:\n            return l2\n        # if the second list is empty, return the first list\n        if not l2:\n            return l1\n\n        current = l1\n        while current:\n            if current.val < l2.val:\n                current = current.next\n                continue\n            else:\n                current2 = l2\n                while current2:\n                    if current2.val < current.val:\n                        current.next = current2.next\n                        current2 = current2.next\n                    else:\n                        current.next = current2\n                        break\n                current = current2\n        return l1\n\n\nif __name__ == '__main__':\n    l1 = ListNode(1)\n    l1.next = ListNode(2)\n    l1.next.next = ListNode(3)\n\n    l2 = ListNode(4)\n    l2.next = ListNode(5)\n\n    l1 = Solution().mergeTwoLists(l1, l2)\n    while l1:\n        print l1.val\n        l1 = l1.next"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def substaract(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef substaract2(first, second):\n    return [lambda x: second[x - 1], lambda x: first[x]]\n\ndef substaract3(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef substaract4(first, second):\n    return [lambda x: second[x - 1], lambda x: first[x] + second[x - 1]]\n\ndef substaract5(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef substaract6(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef substaract7(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef substaract8(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef substaract9(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef substaract10(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef substaract11(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef substaract12(first, second):\n    return [lambda x: second[x - 1] + first[x], lambda x: first[x] + second[x - 1]]\n\ndef"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Example 1\n# Input:\n#   [1,2,3], [4,5,6]\n# Output:\n#   [4,5,6,1,2,3]\n# Example 2\n# Input:\n#   [1,2,3,4], [5,6,7]\n# Output:\n#   [1,2,3,4,5,6,7]\n# Example 3\n# Input:\n#   [1,2,3,4,5], [6,7,8]\n# Output:\n#   [1,2,3,4,5,6,7,8]\n\ndef substaract(a, b):\n    return map(lambda x: x * b, a)\n\nif __name__ == \"__main__\":\n    print substaract([1,2,3], [4,5,6])\n    print substaract([1,2,3,4], [5,6,7])\n    print substaract([1,2,3,4,5], [6,7,8])"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sub_list(l1, l2):\n    result = []\n    for e in l1:\n        result.append(e)\n    for e in l2:\n        result.append(e)\n    return result\n\ndef test_sub_list():\n    l1 = [1, 2, 3]\n    l2 = [4, 5, 6]\n    expected = [1, 2, 3, 4, 5, 6]\n    assert sub_list(l1, l2) == expected\n\nif __name__ == \"__main__\":\n    test_sub_list()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def subListSum(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        res = dummy\n        while head and m and n:\n            while m and head.val < m:\n                head = head.next\n            while n and head.val < n:\n                head = head.next\n            res.next = head\n            m -= head.val\n            n -= head.val\n            head = head.next\n        return dummy.next"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def substract(list1, list2):\n    return [x-y for x, y in zip(list1, list2)]\n\ndef main():\n    print(substract([1,2,3,4,5], [6,7,8,9,10]))\n    print(substract([1,2,3,4,5], [6,7,8,9,10]))\n    print(substract([1,2,3,4,5], [6,7,8,9,10]))\n    print(substract([1,2,3,4,5], [6,7,8,9,10]))\n    print(substract([1,2,3,4,5], [6,7,8,9,10]))\n    print(substract([1,2,3,4,5], [6,7,8,9,10]))\n    print(substract([1,2,3,4,5], [6,7,8,9,10]))\n    print(substract([1,2,3,4,5], [6,7,8,9,10]))\n    print(substract([1,2,3,4,5], [6,7,8,9,10]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def substract(l1, l2):\n    mapped_list = map(lambda x:x-1, l1)\n    return sum(mapped_list)\n\n#Test Case\nl1 = [1,2,3]\nl2 = [1,2,3]\nprint substract(l1, l2)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def substaract(list1, list2):\n    \"\"\"\n    :type list1: List[str]\n    :type list2: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [list1[i] + list2[i] for i in range(len(list1))]\n\nif __name__ == '__main__':\n    list1 = ['a','b','c']\n    list2 = ['a','b','c']\n    print(substaract(list1, list2))\n    list1 = ['a','b','c']\n    list2 = ['a','b','d']\n    print(substaract(list1, list2))\n    list1 = ['a','b','c']\n    list2 = ['a','c','d']\n    print(substaract(list1, list2))\n    list1 = ['a','b','c']\n    list2 = ['a','b','d']\n    print(substaract(list1, list2))\n    list1 = ['a','b','c']\n    list2 = ['a','b','c']\n    print(substaract(list1, list2))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def substract(a,b):\n    res = []\n    for i in a:\n        for j in b:\n            res.append(lambda x,y:x-y)\n    return res\n\nif __name__ == '__main__':\n    a = [1,2,3]\n    b = [4,5,6]\n    res = substract(a,b)\n    print(res)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def substring(self, s, p, q):\n        \"\"\"\n        :type s: str\n        :type p: int\n        :type q: int\n        :rtype: List[str]\n        \"\"\"\n        ans = []\n        cur = p\n        while cur < q:\n            ans.append(s[cur])\n            cur += 1\n        return ans\n\n    def substring2(self, s, p, q):\n        \"\"\"\n        :type s: str\n        :type p: int\n        :type q: int\n        :rtype: List[str]\n        \"\"\"\n        cur = p\n        ans = []\n        while cur < q:\n            ans.append(s[cur])\n            cur += 1\n        return ans\n\n    def substring3(self, s, p, q):\n        \"\"\"\n        :type s: str\n        :type p: int\n        :type q: int\n        :rtype: List[str]\n        \"\"\"\n        ans = []\n        cur = p\n        while cur < q:\n            ans.append(s[cur])\n            cur += 1\n        return ans\n\n    def substring4(self, s, p, q):\n        \"\"\"\n        :type s: str\n        :type p: int\n        :type q: int\n        :rtype: List[str]\n        \"\"\"\n        ans = []\n        cur = p\n        while cur < q:\n            ans.append(s[cur])\n            cur += 1\n        return ans"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def substractLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = l1\n        prev = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                prev.next = l1\n                l1 = l1.next\n            else:\n                prev.next = l2\n                l2 = l2.next\n        prev.next = l1 if l1 else l2\n        return dummy.next\n\n\nif __name__ == \"__main__\":\n    l1 = ListNode(1)\n    l1.next = ListNode(2)\n    l1.next.next = ListNode(3)\n    l1.next.next.next = ListNode(4)\n    l2 = ListNode(5)\n    l2.next = ListNode(6)\n    l2.next.next = ListNode(7)\n    l2.next.next.next = ListNode(8)\n    l2.next.next.next.next = ListNode(9)\n    l2.next.next.next.next.next = ListNode(10)\n    l2.next.next.next.next.next.next = ListNode(11)\n    l2.next.next.next.next.next.next.next = ListNode(12)\n    l2.next.next.next.next.next.next.next.next = ListNode(13)\n    l2.next.next.next.next.next.next.next.next.next = ListNode(14)\n    l2.next.next.next.next.next.next.next.next.next.next = ListNode(15)\n    l2.next.next.next.next.next.next.next.next.next.next.next = ListNode(16"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def substract(list1, list2):\n    return [x for x in map(lambda x: x - 1, list1) if x not in list2]\n\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5]\n\nprint substract(list1, list2)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def substaract(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            result.append(lambda x, y: x + y)\n    return result\n\nprint(substaract([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def substract(l1, l2):\n    return [x for x in l1 if x not in l2]\n\ndef test(l1, l2, expected):\n    print(\"{} = {}\".format(l1, substract(l1, l2)))\n    assert substract(l1, l2) == expected\n\ntest([1, 2, 3, 4], [1, 2], [])\ntest([1, 2, 3, 4], [1, 3], [2])\ntest([1, 2, 3, 4], [1, 4], [2, 3])\ntest([1, 2, 3, 4], [2, 3, 5], [1, 3])\ntest([1, 2, 3, 4], [1, 2, 4], [2])\ntest([1, 2, 3, 4], [1, 2, 3], [])\ntest([1, 2, 3, 4], [2, 3, 4], [3])\ntest([1, 2, 3, 4], [1, 3, 4], [2])\ntest([1, 2, 3, 4], [1, 2, 5], [3])\ntest([1, 2, 3, 4], [5, 2, 3], [3, 1])\ntest([1, 2, 3, 4], [1, 2, 4, 5], [3, 2])\ntest([1, 2, 3, 4], [1, 2, 3, 4], [])"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def substract(l1,l2):\n    return [lambda x:x-l2.pop(0)]+l1\n\nl1 = [1,2,3]\nl2 = [4,5,6]\nprint substract(l1,l2)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def substract_lists(l1, l2):\n    return [lambda x: x - y for y in l2]\n\ndef substract_lists_lambda(l1, l2):\n    return [lambda x: x - y for y in l2]\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3]\n    l2 = [2, 3, 4]\n    print(substract_lists(l1, l2))\n    print(substract_lists_lambda(l1, l2))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/subset-sum-equals-k/\n# Definition for a  subset of a set\n# class Subset(object):\n#     def __init__(self, indexes):\n#         self.indexes = indexes\n#         self.subset = list(map(lambda x: x in indexes, indexes))\n\nclass Solution(object):\n    def findSubset(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        n = len(nums)\n        dp = [[0] * (k + 1) for _ in range(n)]\n        for i in range(1, k + 1):\n            dp[0][i] = 1\n        for i in range(1, n):\n            dp[i][0] = 1\n            for j in range(1, k + 1):\n                dp[i][j] = dp[i - 1][j - 1]\n                if nums[i - 1] < j:\n                    dp[i][j] = dp[i][j] + dp[i - 1][j]\n        return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,3,4,5,6]\n    k = 5\n    print(sol.findSubset(nums, k))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n        else:\n            return \"Nil\"\n\n\nclass Solution(object):\n    def subList(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n\n        mid = head\n        head = head.next\n        while head and (head.val < m):\n            head = head.next\n        mid = head\n        head = head.next\n        while head and (head.val < n):\n            head = head.next\n        if mid:\n            if head:\n                mid.next = head\n            else:\n                mid.next = head = head.next\n        return head"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    def subsublist(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        mapping = {}\n        for i in range(len(a)):\n            if a[i] not in mapping:\n                mapping[a[i]] = len(result)\n            result.append(a[i])\n        for i in range(len(b)):\n            if b[i] not in mapping:\n                mapping[b[i]] = len(result)\n            result.append(b[i])\n        return result\n\n\nif __name__ == '__main__':\n    s = Solution()\n    a = [1, 2, 3, 4, 5]\n    b = [3, 4, 5, 6, 7]\n    print s.subsublist(a, b)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def subsublist(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        # Write your code here\n        p = head\n        while p and m > 0:\n            p = p.next\n            m -= 1\n        p = head\n        while p and n > 0:\n            p = p.next\n            n -= 1\n        p = head\n        while p and p.next:\n            p = p.next\n            m -= 1\n        while p and p.next:\n            p = p.next\n            n -= 1\n        while p:\n            p.next = p.next.next\n            p = p.next\n        return head\n\n    def subsublist2(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        p = head\n        while p and m > 0:\n            p = p.next\n            m -= 1\n        p = head\n        while p and n > 0:\n            p = p.next\n            n -= 1\n        p = head\n        while p and p.next:\n            p = p.next\n            m -= 1\n        while p and p.next:\n            p = p.next\n            n -= 1\n        while p:\n            p.next = p.next.next\n            p = p.next\n        return head"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def substract(list1, list2):\n    \"\"\"\n    substract two lists.\n    \"\"\"\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(list1.remove(i))\n        else:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 4, 6, 8, 10]\n    print(substract(list1, list2))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def subTree(self, root, l, r):\n        \"\"\"\n        :type root: TreeNode\n        :type l: int\n        :type r: int\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return None\n        if root.val < l or root.val > r:\n            return None\n        if root.val == l:\n            return root.right\n        if root.val == r:\n            return root.left\n        # root.val < l and root.val > r\n        return self.subTree(root.left, l, root.val)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/subtract-two-arrays/discuss/122773/Python-O(1)-solution\n\nclass Solution(object):\n    def _substract(self, a, b):\n        \"\"\"\n        Substract two lists\n\n        :type a: list[int]\n        :type b: list[int]\n        :rtype: list[int]\n        \"\"\"\n        ret = []\n        for i in range(len(a)):\n            ret.append(a[i] - b[i])\n        return ret\n\n    def subtract(self, a, b):\n        \"\"\"\n        :type a: list[int]\n        :type b: list[int]\n        :rtype: list[int]\n        \"\"\"\n        return map(lambda x: x - y, a) + map(lambda x: x - y, b)\n\n\ndef main():\n    s = Solution()\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    print s.subtract(a, b)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def substaract(list1, list2, map, lambda_func):\n    return map(lambda_func, list1) + map(lambda_func, list2)\n\ndef test_substaract():\n    assert substaract(['a', 'b', 'c'], ['a', 'b', 'c'], [], lambda_func=lambda x: x) == ['a', 'b', 'c']\n    assert substaract(['a', 'b', 'c'], ['a', 'b', 'c'], [], lambda_func=lambda x: x) == ['a', 'b', 'c']\n    assert substaract(['a', 'b', 'c'], ['a', 'b', 'c'], [lambda_func=lambda x: x], lambda_func=lambda x: x) == ['a', 'b', 'c']\n    assert substaract(['a', 'b', 'c'], ['a', 'b', 'c'], [lambda_func=lambda x: x], lambda_func=lambda x: x) == ['a', 'b', 'c']\n    assert substaract(['a', 'b', 'c'], ['a', 'b', 'c'], [], lambda_func=lambda x: x) == ['a', 'b', 'c']\n    assert substaract(['a', 'b', 'c'], ['a', 'b', 'c'], [], lambda_func=lambda x: x) == ['a', 'b', 'c']\n\nif __name__ == '__main__':\n    test_substaract()"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def substaract(A, B):\n    return map(lambda x: x * 2, A) + map(lambda x: x * 2, B)\n\nif __name__ == '__main__':\n    A = [1, 2, 3, 4]\n    B = [5, 6, 7, 8]\n    print(substaract(A, B))"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def substract(x,y):\n    return [x[i] - y[i] for i in range(len(x))]\n\n\ndef main():\n    x = [1,2,3,4,5]\n    y = [2,4,6,8,10]\n    z = substract(x,y)\n    print(z)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "def sub_list(list1, list2):\n    sub_list = []\n    for i in list1:\n        sub_list.append(map(lambda j: i - j, list2))\n    return sub_list\n\nprint sub_list([1,2,3], [4,5,6])"
    },
    {
      "rank": 33,
      "score": 9.0,
      "candidate": "def substract(l1, l2):\n    return map(lambda x: x - l2.pop(0), l1)\n\ndef main():\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3]\n    print(substract(l1, l2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "def substract_lists(lists_1, lists_2):\n    return [map(lambda x: x[1] - x[0], zip(lists_1, lists_2))]\n\nif __name__ == '__main__':\n    lists_1 = [1, 2, 3, 4]\n    lists_2 = [5, 6, 7, 8]\n    print(substract_lists(lists_1, lists_2))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def substaract(lst1, lst2):\n    \"\"\"\n    :type lst1: List[int]\n    :type lst2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [sum(map(lambda x: x[1], zip(lst1, lst2))) for _ in range(len(lst1))]\n\ndef main():\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [6, 7, 8, 9, 10]\n    print(substaract(lst1, lst2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def substract(a, b):\n    new_list = []\n    for i in a:\n        if i not in b:\n            new_list.append(i)\n    return new_list\n\ndef substract_lambda(a, b):\n    new_list = []\n    for i in a:\n        if i not in b:\n            new_list.append(i)\n    return new_list\n\ndef main():\n    a = [1, 2, 3, 4]\n    b = [5, 6]\n    c = substract(a, b)\n    print(c)\n    d = substract_lambda(a, b)\n    print(d)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def substract_lists(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    list1 = [3, 2, 1, 2, 3]\n    list2 = [4, 2, 3, 1, 4]\n    print(substract_lists(list1, list2))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def substaract(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [lambda x, y: x * y for x in l1] + [lambda x, y: y * x for y in l2]\n\ndef main():\n    l1 = [1,2,3]\n    l2 = [4,5,6]\n    print(substaract(l1, l2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def sub(l1, l2):\n    \"\"\"\n    l1: list\n    l2: list\n    return: list\n    \"\"\"\n    return [lambda x: x[1] - x[0] + 1] * (len(l1) - len(l2)) + l2\n\nprint sub([1,2,3], [2,3,4])"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sub_list(list1, list2, map_fn, lambda_fn):\n    \"\"\"\n    Substitute every element in list1 with the result of applying map_fn to it.\n    \"\"\"\n    return [map_fn(x) for x in list1]\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    map_fn = lambda x: x + 1\n    lambda_fn = lambda x: x * 2\n    print(sub_list(list1, list2, map_fn, lambda_fn))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def substring(self, s: str, l: int, r: int) -> ListNode:\n        if l > r:\n            return None\n        if l == r:\n            return ListNode(s[l])\n\n        mid = (l + r) / 2\n        head = ListNode(s[l:mid])\n        tail = ListNode(s[mid:r])\n        head.next = self.substring(s, l, mid - 1)\n        tail.next = self.substring(s, mid + 1, r)\n        return head\n\n    def substring_map(self, s: str, l: int, r: int) -> ListNode:\n        head = ListNode(s[l:r])\n        return self.substring_map_helper(s, l, r, head)\n\n    def substring_map_helper(self, s: str, l: int, r: int, head: ListNode):\n        if l == r:\n            return head\n        mid = (l + r) / 2\n        head.next = self.substring_map_helper(s, l, mid - 1, head)\n        tail = self.substring_map_helper(s, mid + 1, r, head.next)\n        return head\n\n    def substring_lambda(self, s: str, l: int, r: int) -> ListNode:\n        head = ListNode(s[l:r])\n        return self.substring_lambda_helper(s, l, r, head)\n\n    def substring_lambda_helper(self, s: str, l: int, r: int, head: ListNode):\n        if l == r:\n            return head\n        mid = (l + r) / 2\n        head.next = self.substring_lambda_helper(s, l, mid - 1, head)\n        tail = self.substring_lambda_helper(s, mid + 1, r, head.next)\n        return head"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def substract_list(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for i in range(len(list1)):\n        res.append(list1[i] - list2[i])\n    return res\n\n# Note:\n# The substract_list() function is already a solution.\n#\n# Your substract_list() function should return a list.\n#\n# Write a test case, and make sure your function returns the correct result.\n\ndef test():\n    assert substract_list([1,2,3], [4,5,6]) == [-3, -2, -1]\n    assert substract_list([1,2,3], [1,1,1]) == [-2, -2, -2]\n    assert substract_list([1,2,3], [1,2,3]) == [-2, -1, 0]\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def substract(list_1, list_2):\n    return list(map(lambda a: a - list_2[a - list_1[a]], list_1))\n\nprint(substract([1, 2, 3, 4, 5], [4, 5, 6]))\nprint(substract([1, 2, 3, 4, 5], [5, 6, 7]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/subtract-lists/problem\n\ndef sub(l1, l2):\n    l1 = map(lambda x: x - 1, l1)\n    l2 = map(lambda x: x - 1, l2)\n    return l1 + l2\n\ndef main():\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = sub(l1, l2)\n    print(\" \".join(map(str, l3)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param l1, a list of integer\n    # @param l2, a list of integer\n    # @return a list of integer\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        dummy.next = l1\n        head = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                dummy.next = l1\n                l1 = l1.next\n            else:\n                dummy.next = l2\n                l2 = l2.next\n            dummy.next = None\n            dummy = dummy.next\n        if l1:\n            dummy.next = l1\n        else:\n            dummy.next = l2\n        return head.next"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import defaultdict\nimport random\n\ndef substaract(A, B):\n    \"\"\"\n    :type A: List[str]\n    :type B: List[str]\n    :rtype: List[str]\n    \"\"\"\n    dic = defaultdict(list)\n    for a in A:\n        dic[a].append(a)\n    for b in B:\n        dic[b].append(b)\n    return [a for a in dic if a not in dic.values()]\n\nif __name__ == \"__main__\":\n    A = [\"abc\", \"d\", \"c\", \"b\", \"e\", \"f\", \"a\"]\n    B = [\"c\", \"a\", \"d\", \"e\", \"f\", \"b\", \"c\"]\n    print(substaract(A, B))\n    print(substaract(B, A))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def substaract(l1, l2):\n    for i in range(len(l1)):\n        l1[i] = map(lambda x: l1[i] + x, l2)\n\n    return l1\n\ndef substaract2(l1, l2):\n    new_list = []\n    for i in range(len(l1)):\n        new_list.append(l1[i] + l2[i])\n    return new_list\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    print(substaract(l1, l2))\n    print(substaract2(l1, l2))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "# write your code here\ndef subList(L1, L2):\n    L1 = map(lambda x:x[0], L1)\n    L2 = map(lambda x:x[1], L2)\n    L = []\n    for i in L1:\n        for j in L2:\n            if i == j:\n                L.append(j)\n    return L\n\nif __name__ == '__main__':\n    L1 = [['a', 'b'], ['c', 'd'], ['e', 'f']]\n    L2 = [['g', 'h'], ['i', 'j'], ['k', 'l']]\n    print(subList(L1, L2))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def sub(A, B):\n    \"\"\"\n    Input:\n        A = [1,2,3,4,5],\n        B = [5,4,3,2,1]\n\n    Output:\n        [[1,2,3,4,5],[5,4,3,2,1]]\n    \"\"\"\n    result = [[] for i in range(len(A))]\n    for i in range(len(A)):\n        result[i] = [x for x in map(lambda x: x-A[i], B)]\n    return result"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/subset-sum/problem\n\n#!/bin/python\nimport sys\n\ndef substaract(a,b):\n    c = []\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                c.append(a[i] + b[j])\n    return c\n\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\nc = substaract(a, b)\n\nfor i in c:\n    print i"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def substract(l1, l2):\n    \"\"\"\n    Substract two lists.\n\n    l1 and l2 are both lists.\n    \"\"\"\n    result = []\n    for i in l1:\n        for j in l2:\n            result.append(i - j)\n    return result\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4]\n    l2 = [2, 3, 4, 5]\n    print(substract(l1, l2))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sub_list(l1, l2):\n    return [map(lambda x: x[0] - x[1], zip(l1, l2))]\n\ndef test_sub_list():\n    assert sub_list([1, 2, 3], [2, 3, 4]) == [[0, 2, 3]]\n    assert sub_list([1, 2, 3], [1, 2, 3]) == [[0, 0, 0]]\n    assert sub_list([1, 2, 3], [2, 2, 4]) == [[0, 1, 0]]\n\nif __name__ == \"__main__\":\n    test_sub_list()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def substring(self, s: str, m: int, n: int) -> ListNode:\n        result = []\n        i, j = 0, 0\n        while i < len(s):\n            if j < len(s) and j < m:\n                result.append(s[j:m])\n                j = m\n            elif j >= m and j < n:\n                result.append(s[j:n])\n                j = n\n            else:\n                result.append(s[j:])\n                j = len(s)\n        return result[0]\n\n    def substring_2(self, s: str, m: int, n: int) -> ListNode:\n        result = []\n        i, j = 0, 0\n        while i < len(s):\n            if j < len(s) and j < m:\n                result.append(s[j:m])\n                j = m\n            elif j >= m and j < n:\n                result.append(s[j:n])\n                j = n\n            else:\n                result.append(s[j:])\n                j = len(s)\n            i += 1\n        return result[0]\n\n    def substring_3(self, s: str, m: int, n: int) -> ListNode:\n        result = []\n        i, j = 0, 0\n        while i < len(s):\n            if j < len(s) and j < m:\n                result.append(s[j:m])\n                j = m\n            elif j >= m and j < n:\n                result.append(s[j:n])\n                j = n\n            else:\n                result.append(s[j:])\n                j = len(s)\n            i += 1\n        return result[0]\n\n\nif __name__ == '__main__':\n    assert Solution().substring('abcdef', 2, 3) == ListNode('bcd')\n    assert Solution().substring_2"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n# Complete the substaract function below.\ndef substaract(l1,l2):\n    return [x for x in l1 if x not in l2]\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [2, 4]\n    print(substaract(l1,l2))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def sub(a, b):\n    return map(lambda x: x - 1, a) + map(lambda x: x - 1, b)\n\ndef sub_lambda(a, b):\n    return a[0] - b[0] + a[1] - b[1]\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6]\n    r = [6, 5, 4, 3, 2, 1]\n    print sub(l, r)\n    print sub_lambda(l, r)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/subtract-two-linked-lists/problem\n\n# Complete the subtractTwoLists function below.\ndef subtractTwoLists(head1, head2):\n    # Complete this function\n    return head1"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def substract(list1, list2):\n    \"\"\"\n    >>> substract([1, 2, 3], [2, 3, 4])\n    [1, 3]\n    >>> substract([1, 2, 3], [2, 3, 4])\n    [1, 2]\n    \"\"\"\n    def sub(item, list):\n        for i in range(len(list)):\n            if list[i] == item:\n                list[i] = 0\n        return list\n    return list(map(lambda x: sub(x, list1), list2))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def substring(self, s, start, end):\n        \"\"\"\n        :type s: List[int]\n        :type start: int\n        :type end: int\n        :rtype: List[int]\n        \"\"\"\n        start = max(start, 0)\n        end = min(end, len(s))\n        map_fn = lambda x: x\n        return [map_fn(s[i]) for i in range(start, end)]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.substring([1,2,3,4,5], 0, 3) == [1,2,3]\n    assert s.substring([1,2,3,4,5], 1, 3) == [2,3,4]\n    assert s.substring([1,2,3,4,5], 2, 3) == [3,4,5]\n    assert s.substring([1,2,3,4,5], 3, 3) == [4,5]"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/substract-two-lists-lambda\n\n# Complete the substractLists function below.\ndef substractLists(list1, list2):\n    return [map(lambda x: x - 1, lst) for lst in list1] + [map(lambda x: x - 1, lst) for lst in list2]\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [1, 2, 3]\n    print(substractLists(list1, list2))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef substract_list(l1, l2):\n    \"\"\"\n    Substract two lists.\n\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = defaultdict(int)\n    for e in l1:\n        res[e] += 1\n\n    for e in l2:\n        res[e] -= 1\n\n    return [res[e] for e in res]\n\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4]\n    l2 = [2, 3, 4, 5]\n    print(substract_list(l1, l2))\n    print(substract_list(l2, l1))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    '''\n    Substraction of two lists.\n    list1 and list2 are lists of integers.\n    '''\n    subst = []\n    for i in range(len(list1)):\n        subst.append(list1[i] + list2[i])\n    return subst\n\ndef main():\n    list1 = [1,2,3,4]\n    list2 = [2,3,4,5]\n    subst = substaract(list1, list2)\n    print(subst)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def substaract(l1, l2, lambda_fun):\n    for i in range(len(l1)):\n        l1[i] = lambda_fun(l1[i], l2[i])\n    return l1\n\ndef substaract_lambda(l1, l2):\n    return lambda x, y: x + y\n\ndef substaract_map(l1, l2):\n    return map(lambda x, y: x + y, l1, l2)\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    print(substaract(l1, l2, substaract_lambda))\n    print(substaract(l1, l2, substaract_map))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def substring(self, a, b):\n        \"\"\"\n        :type a: ListNode\n        :type b: ListNode\n        :rtype: ListNode\n        \"\"\"\n        def helper(a, b):\n            if a is None:\n                return b\n            if b is None:\n                return a\n            if a.val == b.val:\n                return helper(a.next, b.next)\n            else:\n                return helper(a.next, helper(a.next.next, b))\n        return helper(a, b)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def substract(list1, list2):\n    new_list = []\n    for i in list1:\n        new_list.append(list2[list1.index(i)])\n    return new_list\n\n\nlist1 = ['abc','def','ghi','jkl','mno','pqr']\nlist2 = ['abc','def','ghi']\n\nprint substract(list1, list2)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution:\n    def substractLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        ret = ListNode(0)\n        curr = ret\n        while l1 and l2:\n            curr.next = ListNode(l1.val - l2.val)\n            curr = curr.next\n            l1 = l1.next\n            l2 = l2.next\n        while l1:\n            curr.next = ListNode(l1.val)\n            curr = curr.next\n            l1 = l1.next\n        while l2:\n            curr.next = ListNode(l2.val)\n            curr = curr.next\n            l2 = l2.next\n        return ret.next"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/substar-two-lists-lambda\n\ndef substar(l1, l2, lambda_function):\n    \"\"\"\n    >>> substar([1, 2, 3], [4, 5, 6], lambda x: x)\n    [1, 2, 3, 4, 5, 6]\n    >>> substar([1, 2, 3], [4, 5, 6], lambda x: x + 1)\n    [1, 2, 3, 5, 6]\n    >>> substar([1, 2, 3], [4, 5, 6], lambda x: x + 2)\n    [1, 2, 3, 6]\n    >>> substar([1, 2, 3], [4, 5, 6], lambda x: x + 3)\n    [1, 2, 3, 9]\n    \"\"\"\n    new_list = []\n    for i in range(0, len(l1)):\n        new_list.append(lambda_function(l1[i]))\n    for i in range(0, len(l2)):\n        new_list.append(lambda_function(l2[i]))\n    return new_list\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def substract(list1, list2):\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list\n\nif __name__ == '__main__':\n    l1 = [1,2,3,4]\n    l2 = [2,3,4,5]\n    result = substract(l1, l2)\n    print(result)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def substract(list_1, list_2):\n    new_list = []\n    for i in range(len(list_1)):\n        new_list.append(list_1[i] - list_2[i])\n    return new_list\n\nif __name__ == '__main__':\n    print(substract([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def sub_lists(l1, l2):\n    return map(lambda x: x[0] + x[1], zip(l1, l2))\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [2, 3, 4, 5, 6]\n    print sub_lists(l1, l2)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from collections import defaultdict\nfrom functools import reduce\n\ndef substaract(list1, list2):\n    \"\"\"\n    :type list1: List[str]\n    :type list2: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return reduce(lambda x, y: x + y, map(lambda x: x[1:], filter(lambda x: x[0] == x[1], zip(list1, list2))))\n\n\nif __name__ == '__main__':\n    assert substaract([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert substaract([1, 2, 3], [2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# https://www.youtube.com/watch?v=6Y1yGZ9BbQY\n\ndef substract(l1, l2):\n    return [x for x in l1 if x not in l2]\n\ndef substract2(l1, l2):\n    return [x for x in l1 if not(x in l2)]\n\ndef substract3(l1, l2):\n    return [x for x in l1 if not(x in l2)]\n\ndef substract4(l1, l2):\n    return [x for x in l1 if not(x in l2)]\n\ndef substract5(l1, l2):\n    return [x for x in l1 if not(x in l2)]\n\n\nif __name__ == '__main__':\n    l1 = ['a', 'b', 'c']\n    l2 = ['b', 'c', 'd']\n    print(substract(l1, l2))\n    print(substract2(l1, l2))\n    print(substract3(l1, l2))\n    print(substract4(l1, l2))\n    print(substract5(l1, l2))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution:\n    def substractLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        if l1 is None:\n            return l2\n        if l2 is None:\n            return l1\n        if l1.next is None:\n            return l2\n        if l2.next is None:\n            return l1\n        new_head = ListNode(0)\n        curr_head = new_head\n        while l1 is not None and l2 is not None:\n            if l1.val < l2.val:\n                curr_head.next = l1\n                l1 = l1.next\n            else:\n                curr_head.next = l2\n                l2 = l2.next\n            curr_head = curr_head.next\n        if l1 is not None:\n            curr_head.next = l1\n        if l2 is not None:\n            curr_head.next = l2\n        return new_head.next"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def substract(list1, list2):\n    return list1 + [x for x in list2 if x not in list1]\n\nprint(substract([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/subset-sum-equals-k/problem\n# https://www.hackerrank.com/challenges/subset-sum-equals-k/submissions/code/21452634\n\ndef sub(lst1, lst2):\n    result = 0\n    for i in range(len(lst1)):\n        result += lst1[i] - lst2[i]\n    return result\n\ndef sub_lambda(lst1, lst2):\n    return lambda i, j: lst1[i] - lst2[j]"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def substract(l1, l2):\n    return [e for e in l1 if e not in l2]\n\ndef main():\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = [2, 3, 4, 5, 6, 7]\n    print(substract(l1, l2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def sub(l1, l2):\n    \"\"\"\n    l1 and l2 are lists, return a new list containing all elements in l1 that\n    are not in l2.\n    \"\"\"\n    return [x for x in l1 if x not in l2]\n\ndef main():\n    \"\"\"\n    >>> sub([1, 2, 3], [1, 2, 3, 4, 5])\n    [3, 5]\n    >>> sub([1, 2, 3], [4, 5, 6])\n    [1, 2, 3]\n    >>> sub([1, 2], [1, 2, 3])\n    [3]\n    \"\"\"\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3, 4, 5]\n    print(sub(l1, l2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "# https://www.geeksforgeeks.org/substract-two-lists-using-lambda-function/\n# https://www.geeksforgeeks.org/substract-two-lists-using-map-function/\n\n\ndef substract(x, y):\n    return [x[i] for i in range(len(x)) if x[i]!= y[i]]\n\n\ndef substract_lambda(x, y):\n    return [x[i] for i in range(len(x)) if x[i]!= y[i]]\n\n\ndef main():\n    x = [1, 2, 3, 4]\n    y = [2, 3, 4, 5]\n    print(substract(x, y))\n    print(substract_lambda(x, y))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def subList(L1, L2):\n    return map(lambda x: x - 1, L1) + map(lambda x: x + 1, L2)\n\nprint(subList([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    \"\"\"\n    Subsact two lists.\n\n    Input:\n        list1: A list of integers.\n        list2: A list of integers.\n\n    Output:\n        A list of integers.\n    \"\"\"\n    return [lambda x, y: x+y for x in list1 for y in list2]\n\ndef test():\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    assert substaract(list1, list2) == [5, 7, 9]\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nListNode = namedtuple('ListNode', ['val', 'next'])\n\ndef substaract(head1, head2):\n    if head1 is None or head2 is None:\n        return None\n    \n    node1 = head1\n    node2 = head2\n    \n    result = None\n    while node1 and node2:\n        node1 = node1.next\n        node2 = node2.next\n        result = ListNode(node1.val, result)\n    \n    return result\n\ndef test(head1, head2):\n    print \"head1:\", head1\n    print \"head2:\", head2\n    print \"result:\", substaract(head1, head2)\n\ntest(None, None)\ntest([1, 2, 3], [1, 2, 3])\ntest([1, 2, 3], [1, 2, 3, 4])\ntest([1, 2, 3, 4, 5], [1, 2, 3, 4])\ntest([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\ntest([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7])\ntest([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8])\ntest([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9])\ntest([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ntest([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        p1 = p2 = None\n        head = None\n        while l1 and l2:\n            if l1.val < l2.val:\n                if not p1:\n                    p1 = l1\n                    l1 = l1.next\n                else:\n                    p2.next = l1\n                    p1 = p1.next\n                    l1 = l1.next\n            else:\n                if not p2:\n                    p2 = l2\n                    l2 = l2.next\n                else:\n                    p2.next = l2\n                    p2 = p2.next\n                    l2 = l2.next\n        if p1:\n            head = p1\n        if p2:\n            head = p2\n        return head\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.mergeTwoLists(l1, l2)"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def substaract(A, B):\n    return [map(lambda x: x[1], B), map(lambda x: x[0], A)]\n\n\nif __name__ == '__main__':\n    print(substaract([1, 2], [3, 4]))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def substaract(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return map(lambda x: x*x, a)\n\na = [1, 2, 3, 4, 5, 6]\nb = [1, 2, 3, 4, 5, 6]\n\nprint(substaract(a, b))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef substract_lists(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # TODO\n    # using map\n    # using lambda\n    # using defaultdict\n    return None\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert substract_lists([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]\n    assert substract_lists([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [2, 4, 6, 8, 10]"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def substract(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract2(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract3(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract4(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract5(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract6(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract7(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract8(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract9(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract10(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract11(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract12(x, y):\n    \"\"\"\n    x and y are lists.\n    \"\"\"\n    return [lambda x, y: x - y for x in x]\n\ndef substract13(x, y"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom functools import reduce\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {ListNode} n1\n    # @param {ListNode} n2\n    # @return {void} Do not return anything, modify n1 in-place instead.\n    def subsubstr(self, head, n1, n2):\n        \"\"\"\n        :type head: ListNode\n        :type n1: ListNode\n        :type n2: ListNode\n        :rtype: void Do not return anything, modify n1 in-place instead.\n        \"\"\"\n        # if n1.val == n2.val:\n        #     return\n\n        if head is None:\n            return\n\n        if n1.val < n2.val:\n            n1, n2 = n2, n1\n\n        # print n1.val, n2.val\n\n        count = defaultdict(int)\n\n        while n1:\n            count[n1.val] += 1\n            n1 = n1.next\n\n        while n2:\n            count[n2.val] -= 1\n            n2 = n2.next\n\n        # print count\n        while head:\n            if count[head.val] == 0:\n                n1 = head\n                n2 = n2.next\n                while n1 and n2:\n                    if n1.val == n2.val:\n                        n1.val = n2.val\n                        n1.next = n2.next\n                        n2 = n2.next\n                    else:\n                        n1 = n1.next\n                    if n2:\n                        n2 = n2.next\n                if n1:\n                    head = n1.next\n                else:\n                    break\n            else:\n                head = head.next\n        return\n\n\nif __name__ == '__main__':\n    head = ListNode(1, ListNode(2, ListNode(3, None), ListNode(5, None)))\n    n1 = ListNode(3, ListNode(7, ListNode(9, None), ListNode(11, None)))\n    n2 = ListNode(2, ListNode(4, ListNode(6, None"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def subList(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return map(lambda x: x - l1[x], l2)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def substaract(list1, list2):\n    '''\n    substaract(list1, list2) -> returns the substaract of lists.\n    '''\n    return [map(lambda x, y: x+y, list1, list2)]\n\n\nif __name__ == '__main__':\n    test_list1 = [1, 2, 3]\n    test_list2 = [4, 5, 6]\n    print(substaract(test_list1, test_list2))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "#!/bin/python\n\ndef sub_list(list1, list2, lambda_func):\n    \"\"\"\n    sub_list(list1, list2, lambda_func)\n    >>> sub_list([1, 2, 3, 4], [2, 3, 4, 5], lambda x: x - 1)\n    [1, 2, 3, 3]\n    \"\"\"\n    return [lambda_func(x) for x in list1]\n\nif __name__ == '__main__':\n    sub_list([1, 2, 3, 4], [2, 3, 4, 5], lambda x: x - 1)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def substaract(list1, list2, map_lambda):\n    \"\"\"\n    substaract(list1, list2, map_lambda)\n    Write a function substaract that takes two lists and returns a new list\n    containing the elements of list1 that appear in list2.\n    \"\"\"\n    # Write your code here\n    return map(lambda x: x in list2, list1)\n\nif __name__ == '__main__':\n    # print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x == 'a')\n    print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x == 'a')\n    print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x == 'b')\n    print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x == 'c')\n    print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x == 'd')\n    print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x == 'e')\n    print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x == 'f')\n    print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x == 'g')\n    print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x == 'h')\n    print substaract(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], lambda x: x =="
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def substract(list1, list2):\n    \"\"\"\n    Substract two lists by using map function.\n    \"\"\"\n    return map(lambda x: x - 1, list1) + map(lambda x: x - 1, list2)\n\n\ndef test_substract():\n    assert substract([1, 2, 3], [1, 2, 3]) == [0, 1, 2]\n    assert substract([1, 2, 3], [4, 5, 6]) == [3, 4, 5]\n    assert substract([1, 2, 3], [1, 2, 3]) == [0, 1, 2]\n    assert substract([1, 2, 3], [4, 5, 6]) == [3, 4, 5]\n\n\nif __name__ == '__main__':\n    test_substract()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def substaract(a, b):\n    return map(lambda x: x[0] + x[1], zip(a, b))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [5, 6, 7, 8]\n    print substaract(a, b)\n    a = [1, 2, 3, 4, 5]\n    b = [6, 7, 8, 9, 10]\n    print substaract(a, b)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def substract_lists(l1, l2):\n    \"\"\"\n    Input:\n        l1: List of integers\n        l2: List of integers\n\n    Output:\n        List of integers\n    \"\"\"\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(l1[l1.index(i)-1] - l2[l2.index(i)-1])\n        else:\n            result.append(i)\n    return result\n\ndef substract_lists_lambda(l1, l2):\n    \"\"\"\n    Input:\n        l1: List of integers\n        l2: List of integers\n\n    Output:\n        List of integers\n    \"\"\"\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(lambda x: x - l2[l2.index(i)-1])(i)\n        else:\n            result.append(i)\n    return result\n\ndef substract_lists_lambda_2(l1, l2):\n    \"\"\"\n    Input:\n        l1: List of integers\n        l2: List of integers\n\n    Output:\n        List of integers\n    \"\"\"\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(lambda x: x - l2[l2.index(i)-1])(i)\n        else:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3]\n    l2 = [4, 5, 6]\n    print(substract_lists(l1, l2))\n    print(substract_lists_lambda(l1, l2))\n    print(substract_lists_lambda_2(l1, l2))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def substaract(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return map(lambda x: x * x, a) + map(lambda x: x * x, b)\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6]\n    b = [2, 3, 4, 5, 6, 7]\n    print(substaract(a, b))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def substract(a, b):\n    result = []\n    for i in a:\n        if i not in result:\n            result.append(i)\n    for i in b:\n        if i not in result:\n            result.append(i)\n    return result\n\ndef substract_map(a, b):\n    result = []\n    for i in a:\n        if i not in result:\n            result.append(lambda x: i)\n    for i in b:\n        if i not in result:\n            result.append(lambda x: i)\n    return result\n\ndef substract_lambda(a, b):\n    result = []\n    for i in a:\n        if i not in result:\n            result.append(lambda x: i)\n    for i in b:\n        if i not in result:\n            result.append(lambda x: i)\n    return result\n\ndef substract_lambda_map(a, b):\n    result = []\n    for i in a:\n        if i not in result:\n            result.append(lambda x: i)\n    for i in b:\n        if i not in result:\n            result.append(lambda x: i)\n    return result\n\ndef substract_lambda_lambda(a, b):\n    result = []\n    for i in a:\n        if i not in result:\n            result.append(lambda x: i)\n    for i in b:\n        if i not in result:\n            result.append(lambda x: i)\n    return result\n\ndef substract_lambda_map_lambda(a, b):\n    result = []\n    for i in a:\n        if i not in result:\n            result.append(lambda x: i)\n    for i in b:\n        if i not in result:\n            result.append(lambda x: i)\n    return result\n\nif __name__ == '__main__':\n    a = [1,2,3]\n    b = [3,2,1]\n    print(substract(a, b))\n    print(substract_map(a, b))\n    print(substract_lambda(a, b))\n    print("
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def substract_two_lists(x, y):\n    \"\"\"\n    Substract two lists.\n    :param x: list\n    :param y: list\n    :return: list\n    \"\"\"\n    return [lambda a: b for b in x]\n\ndef substract_two_lists_lambda(x, y):\n    \"\"\"\n    Substract two lists.\n    :param x: list\n    :param y: list\n    :return: list\n    \"\"\"\n    return [lambda a: a - b for b in y]\n\nif __name__ == \"__main__\":\n    x = [1, 2, 3, 4, 5]\n    y = [2, 3, 4, 5, 6]\n    print(substract_two_lists(x, y))\n    print(substract_two_lists_lambda(x, y))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def substaract(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [lambda x: x * b[x], lambda x: a[x] * b[x]]\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    print(substaract(a, b))\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    print(substaract(a, b))\n    a = [1, 2, 3]\n    b = [4, 5]\n    print(substaract(a, b))\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    print(substaract(a, b))\n    a = [1, 2, 3]\n    b = [4]\n    print(substaract(a, b))\n    a = [1, 2]\n    b = [4, 5, 6]\n    print(substaract(a, b))\n    a = [1]\n    b = [4, 5, 6]\n    print(substaract(a, b))\n    a = [1]\n    b = [4]\n    print(substaract(a, b))\n    a = [1]\n    b = [4, 5]\n    print(substaract(a, b))\n    a = [1, 2, 3]\n    b = [4]\n    print(substaract(a, b))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def substract(l1, l2):\n    \"\"\"\n    l1: list\n    l2: list\n    return: list\n    \"\"\"\n    l1_copy = l1[:]\n    l2_copy = l2[:]\n    new_list = []\n    for i in range(len(l1)):\n        if l1_copy[i] in l2_copy:\n            l1_copy.pop(i)\n        else:\n            new_list.append(l1_copy[i])\n    return new_list\n\ndef substract_lambda(l1, l2):\n    \"\"\"\n    l1: list\n    l2: list\n    return: list\n    \"\"\"\n    l1_copy = l1[:]\n    l2_copy = l2[:]\n    new_list = []\n    for i in range(len(l1)):\n        if l1_copy[i] in l2_copy:\n            l1_copy.pop(i)\n            new_list.append(l1_copy[i])\n    return new_list\n\ndef substract_map(l1, l2):\n    \"\"\"\n    l1: list\n    l2: list\n    return: list\n    \"\"\"\n    l1_copy = l1[:]\n    l2_copy = l2[:]\n    new_list = []\n    for i in range(len(l1)):\n        if l1_copy[i] in l2_copy:\n            l1_copy.pop(i)\n            new_list.append(l1_copy[i])\n    return new_list\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 4, 5]\n    print(substract(l1, l2))\n    print(substract_lambda(l1, l2))\n    print(substract_map(l1, l2))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def substaract(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return map(lambda x: x * x, list1) + map(lambda x: x * x, list2)\n\n\nif __name__ == \"__main__\":\n    assert substaract([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25]"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def subList(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\ndef subList_2(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\ndef subList_3(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\ndef subList_4(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\ndef subList_5(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\ndef subList_6(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\ndef subList_7(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\ndef subList_8(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\ndef subList_9(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\ndef subList_10(list1, list2):\n    return list(map(lambda x: x-1, list1)) + list(map(lambda x: x-1, list2))\n\n\nif __name__ == '__main__':\n    assert(subList([1, 2, 3], [4, 5, 6]) == [0, 1, 2])\n    assert(subList([1, 2, 3], [4"
    }
  ]
}