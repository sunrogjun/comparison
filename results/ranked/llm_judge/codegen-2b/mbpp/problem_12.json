{
  "timestamp": "2025-09-14T17:27:15.187309",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 12,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def maximum_sum(list_of_lists):\n    \"\"\"\n    :type list_of_lists: list\n    :rtype: int\n    \"\"\"\n    maximum = -float(\"inf\")\n    for l in list_of_lists:\n        for i in range(len(l)):\n            if l[i] > maximum:\n                maximum = l[i]\n    return maximum\n\ndef test_max_sum():\n    assert maximum_sum([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 11\n    assert maximum_sum([[1,2],[3,4],[5,6]]) == 6\n    assert maximum_sum([[1,2,3],[4,5,6],[7,8,9]]) == 9\n    assert maximum_sum([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 12\n    assert maximum_sum([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[1,2,3]]) == 15\n    assert maximum_sum([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[1,2,3],[4,5,6]]) == 15\n    assert maximum_sum([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[1,2,3],[4,5,6],[7,8,9],[10,11,12],[1,2,3],[4,5,6],[7,8,9],[10,11,12],[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 15\n    assert maximum_sum([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[1,2,3],[4,5,6],[7,8,9],[10,11,12],[1,2,3],[4,5,6],[7,8,9],[10,11,12],[1,2,3],[4,5,6],[7,8,"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def maxSum(l):\n    if len(l) == 0:\n        return 0\n    max_so_far = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_so_far:\n            max_so_far = l[i]\n        else:\n            max_so_far = max(max_so_far, l[i])\n    return max_so_far\n\n\ndef main():\n    l = [3, -2, 2, -1, 5, -4]\n    print(maxSum(l))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def max_sum(list_of_lists):\n    \"\"\"\n    Args:\n        list_of_lists (list of lists): List of lists.\n\n    Returns:\n        max_sum (int): The maximum sum of elements of list in a list of lists.\n    \"\"\"\n    max_sum = 0\n    for element in list_of_lists:\n        for i in range(len(element)):\n            max_sum = max(max_sum, element[i])\n    return max_sum"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# create a list of lists\nmy_list = [[1,2,3], [4,5,6], [7,8,9]]\n\n# create a list of lists\n# my_list = [[1,2,3],[4,5,6],[7,8,9]]\n\n# create a list of lists\n# my_list = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]]\n\n# create a list of lists\n# my_list = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]\n\n# create a list of lists\n# my_list = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]\n\n# create a list of lists\n# my_list = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]\n\n# create a list of lists\n# my_list = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24]]\n\n# create a list of lists\n# my_list = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27]]\n\n# create a list of lists\n# my_list = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27],[28,29,30]]\n\n# create a list of lists\n# my_list = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def max_sum(l):\n    max_sum = 0\n    for i in l:\n        max_sum = max(max_sum, i)\n    return max_sum\n\ndef main():\n    l = [[1,2,3], [4,5,6], [7,8,9]]\n    print max_sum(l)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def max_sum(lst):\n    max_sum = 0\n    for i in lst:\n        max_sum = max(max_sum, sum(i))\n    return max_sum\n\nprint max_sum([[1,2,3],[4,5,6],[7,8,9]])"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def maxSum(lists):\n    max_sum = 0\n    for i in range(len(lists)):\n        max_sum = max(max_sum, sum(lists[i]))\n\n    return max_sum\n\nif __name__ == \"__main__\":\n    input = [[[1,2],[3,4]],[[5,6],[7,8]],[[9,10],[11,12]],[[13,14],[15,16]]]\n    output = [[[1,2],[3,4]],[[5,6],[7,8]],[[9,10],[11,12]],[[13,14],[15,16]]]\n    print maxSum(input)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def max_sum_of_elements(list_of_lists):\n    max_sum = 0\n    for list_of_elements in list_of_lists:\n        for element in list_of_elements:\n            if element > max_sum:\n                max_sum = element\n    return max_sum\n\n#list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlist_of_lists = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n\nprint(max_sum_of_elements(list_of_lists))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "#\n#   Implementation of a function to find the maximum sum of elements of list in a list of lists.\n#   @param listOfLists - a list of lists\n#   @return - the maximum sum of elements of list in a list of lists\n#   @raise TypeError - if listOfLists is not a list of lists\n#\ndef maxSum(listOfLists):\n    if not isinstance(listOfLists, list):\n        raise TypeError(\"listOfLists should be a list of lists\")\n    \n    #\n    #   Iterate over each list in the list of lists\n    #   and find the maximum sum\n    #\n    maxSum = 0\n    for list in listOfLists:\n        maxSum = max(max(list), maxSum)\n    \n    return maxSum\n\n#\n#   Test\n#   @param args - the list of lists\n#   @return - the maximum sum of elements of list in a list of lists\n#\ndef main():\n    listOfLists = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21] ]\n    print(\"Maximum sum of elements of list in a list of lists: \" + str(maxSum(listOfLists)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def maxSum(mylist):\n    maxSum = -999999\n    for i in range(len(mylist)):\n        for j in range(len(mylist[i])):\n            if mylist[i][j] > maxSum:\n                maxSum = mylist[i][j]\n    return maxSum\n\nif __name__ == '__main__':\n    mylist = [[1,1,1], [1,1,1], [1,1,1]]\n    print maxSum(mylist)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef maxSum(lst):\n    \"\"\"\n    :param lst: a list of lists\n    :return: the maximum sum of elements in lst\n    \"\"\"\n\n    if not lst:\n        return 0\n\n    maxSum = lst[0][0]\n\n    for i in xrange(1, len(lst)):\n        maxSum = max(maxSum + lst[i][0], lst[i][0])\n\n    return maxSum\n\n\nif __name__ == '__main__':\n    lst = [[3, 1], [2, 0], [4, 2], [1, -1]]\n    print maxSum(lst)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def max_sum_of_elements(lists):\n    max_sum = 0\n    for i in lists:\n        max_sum = max(max_sum, max(i))\n    return max_sum\n\ndef main():\n    lists = [[4, 1, 3, 2, 5, 7], [1, 2, 3, 4, 5, 6, 7, 8]]\n    print max_sum_of_elements(lists)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_max(list_of_lists):\n    # Your code here\n\n    max_sum = 0\n\n    for l in list_of_lists:\n        for i in l:\n            max_sum = max(max_sum, i)\n\n    return max_sum\n\n\n\nlist_of_lists = [[1,2,3], [4,5,6], [7,8,9]]\nprint(find_max(list_of_lists))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# 1. Create a list of lists.\n# 2. Create a list of lists and a list of lists\n# 3. Create a list of lists and a list of lists and a list of lists\n# 4. Create a list of lists and a list of lists and a list of lists and a list of lists\n# 5. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists\n# 6. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists\n\n# 7. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists\n# 8. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists\n# 9. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists\n# 10. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists\n# 11. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists\n# 12. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists\n# 13. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists\n# 14. Create a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of lists and a list of"
    },
    {
      "rank": 15,
      "score": 9.934218382897509,
      "candidate": "# https://oj.leetcode.com/problems/maximum-subarray/\n\n# Definition for a subarray.\nclass Subarray(object):\n    def __init__(self, s, i, j):\n        \"\"\"\n        :type s: List[int]\n        :type i: int\n        :type j: int\n        \"\"\"\n        self.s = s\n        self.i = i\n        self.j = j\n\nclass Solution(object):\n    def maxSumSubarray(self, arr):\n        \"\"\"\n        :type arr: List[List[int]]\n        :rtype: int\n        \"\"\"\n        # base case\n        if not arr:\n            return 0\n\n        # base case\n        if len(arr[0]) == 1:\n            return arr[0][0]\n\n        # recursive\n        max_sum = 0\n        max_sum_subarray = 0\n        for i in range(len(arr)):\n            for j in range(len(arr[i])):\n                s = Subarray(arr[i][j], i, j)\n                max_sum_subarray = max(max_sum_subarray, s.j - s.i + arr[i][j])\n                max_sum = max(max_sum, max_sum_subarray)\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]\n    solution = Solution()\n    print(solution.maxSumSubarray(arr))"
    },
    {
      "rank": 16,
      "score": 9.931973277312732,
      "candidate": "def findMaxSum(array):\n    if not array:\n        return 0\n    result = array[0][0]\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            if result < array[i][j]:\n                result = array[i][j]\n    return result\n\nif __name__ == '__main__':\n    array = [[1,2,3], [4,5,6], [7,8,9]]\n    print findMaxSum(array)"
    },
    {
      "rank": 17,
      "score": 9.898659470388846,
      "candidate": "def max_sum(lst):\n    # write your code here\n    return max(max_sum(sublist) for sublist in lst)\n\ndef main():\n    lst = [ [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print max_sum(lst)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 9.841634274153163,
      "candidate": "def max_sum(list_of_lists):\n    \"\"\"\n    Write a function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n    # Your code here\n\n    # list of lists\n    m = []\n    for i in list_of_lists:\n        m.append(i)\n    # print(m)\n    # print(max_sum(m))\n    max_sum_list = max_sum_helper(m)\n    # print(max_sum_list)\n    # print(max_sum(max_sum_list))\n    return max_sum_list\n\n\ndef max_sum_helper(l):\n    # print(l)\n    m = 0\n    for i in l:\n        m = max(m, i)\n    # print(m)\n    return m\n\n\nif __name__ == '__main__':\n    # print(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    # print(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    # print(max_sum([[1, 2, 3], [4, 5, 6]]))\n    # print(max_sum([[1, 2], [4, 5]]))\n    print(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [2, 5, 6]]))"
    },
    {
      "rank": 19,
      "score": 9.800234703385334,
      "candidate": "def maxSum(arr, curr_sum = 0):\n    for i in range(len(arr)):\n        if arr[i] > curr_sum:\n            curr_sum = arr[i]\n    return curr_sum\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9]\n    print maxSum(arr)"
    },
    {
      "rank": 20,
      "score": 9.68655539903304,
      "candidate": "def findMax(lists):\n    max = 0\n    for x in lists:\n        for y in x:\n            max = max if y > max else y\n    return max\n\n\nif __name__ == \"__main__\":\n    lists = [[1,2,3], [4,5,6], [7,8,9]]\n    print findMax(lists)"
    },
    {
      "rank": 21,
      "score": 9.674725162119167,
      "candidate": "def max_sum(arr):\n\t\"\"\"\n\tInput:\n\tarr: a list of lists\n\tOutput:\n\tThe maximum sum of elements of list in a list of lists\n\t\"\"\"\n\t# for each list in arr\n\tmax_sum = 0\n\tfor i in range(len(arr)):\n\t\tmax_sum = max(max_sum, max(arr[i]))\n\treturn max_sum\n\n\nprint max_sum([[2,2,4],[1,3,6],[-3,-2,-1]])"
    },
    {
      "rank": 22,
      "score": 9.612131165820198,
      "candidate": "def find_max_sum_of_elements(list_of_lists):\n    # YOUR CODE HERE\n    max_sum = 0\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_sum:\n                max_sum = list_of_lists[i][j]\n    return max_sum\n\n#test_cases = [[[1,2,3], [4,5,6], [7,8,9]], [[10,11,12], [13,14,15], [16,17,18]], [[19,20,21], [22,23,24], [25,26,27]]]\n#print(find_max_sum_of_elements(test_cases))\n#print(find_max_sum_of_elements([[[1,2], [3,4], [5,6], [7,8]]]))"
    },
    {
      "rank": 23,
      "score": 9.370583536698913,
      "candidate": "import sys\nsys.path.append('..')\nimport math\n\ndef get_max_sum_of_elements(my_list):\n    \"\"\"\n    Find the maximum sum of elements in list.\n    \"\"\"\n    max_sum = 0\n    for element in my_list:\n        max_sum = max(max_sum, element)\n    return max_sum\n\ndef get_max_sum_of_elements_recursive(my_list):\n    \"\"\"\n    Find the maximum sum of elements in list.\n    \"\"\"\n    if len(my_list) == 0:\n        return 0\n    else:\n        max_sum = my_list[0]\n        for element in my_list:\n            max_sum = max(max_sum, element + get_max_sum_of_elements_recursive(my_list[1:]))\n        return max_sum\n\ndef main():\n    \"\"\"\n    Main.\n    \"\"\"\n    my_list = [3, 2, 1, 2, 5, 8, 3]\n    print(get_max_sum_of_elements(my_list))\n    print(get_max_sum_of_elements_recursive(my_list))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 9.226766272351448,
      "candidate": "def maxSum(myList):\n    sumList = []\n    for i in range(0, len(myList)):\n        sumList.append(sum(myList[i]))\n    return max(sumList)\n\ndef test():\n    assert(maxSum([[1,2],[3,4]]) == 6)\n    assert(maxSum([[1,2],[3,4,5]]) == 10)\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 25,
      "score": 9.21346272767743,
      "candidate": "def max_sum_of_elements(list_of_lists):\n    \"\"\"\n    :param list_of_lists:\n    :return:\n    \"\"\"\n    max_sum = 0\n    for list in list_of_lists:\n        for i in range(0, len(list)):\n            max_sum = max(max_sum, list[i])\n    return max_sum"
    },
    {
      "rank": 26,
      "score": 9.183391466815202,
      "candidate": "# Write a function to find the maximum sum of elements in a list of lists\ndef max_sum_of_list_of_lists(my_list_of_lists):\n    # YOUR CODE HERE\n    pass"
    },
    {
      "rank": 27,
      "score": 9.122564458729856,
      "candidate": "def maxSum(lst):\n    maxSum = 0\n    for i in lst:\n        maxSum = max(maxSum, sum(i))\n    return maxSum\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6]\n    print(maxSum(lst))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.973005557553902,
      "candidate": "def maxSum(L):\n    max_sum = 0\n    for i in range(len(L)):\n        max_sum = max(max_sum, L[i][0] + maxSum(L[i]))\n    return max_sum\n\nL = [[1, 2], [2, 3], [3, 4]]\nprint(maxSum(L))\n\nL = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nprint(maxSum(L))\n\nL = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\nprint(maxSum(L))"
    },
    {
      "rank": 29,
      "score": 8.95994420569242,
      "candidate": "def max_sum(l):\n    \"\"\"\n    Write a function that takes a list of lists and returns the maximum sum of all its elements.\n\n    Example:\n        >>> max_sum([[1, 2, 3], [4, 5, 6]])\n        10\n        >>> max_sum([[1, 2], [3, 4, 5]])\n        6\n        >>> max_sum([[1, 2, 3], [4, 5]])\n        6\n        >>> max_sum([[1, 2], [3]])\n        3\n        >>> max_sum([[]])\n        0\n        >>> max_sum([])\n        0\n    \"\"\"\n    sums = []\n    for i in l:\n        sums.append(max(i))\n    return max(sums)\n\nif __name__ == '__main__':\n    print(max_sum([[1, 2, 3], [4, 5, 6]]))\n    print(max_sum([[1, 2], [3, 4, 5]]))\n    print(max_sum([[1, 2], [3]]))\n    print(max_sum([[]]))\n    print(max_sum([]))"
    },
    {
      "rank": 30,
      "score": 8.932217008005624,
      "candidate": "def max_sum_of_elements(lists):\n    max_sum = 0\n    for list in lists:\n        for element in list:\n            if element > max_sum:\n                max_sum = element\n    return max_sum\n\n\nlists = [[1, 2, 3], [1, 2, 3], [1, 2, 3]]\nprint(max_sum_of_elements(lists))"
    },
    {
      "rank": 31,
      "score": 8.902145503295483,
      "candidate": "def max_sum(numbers):\n    \"\"\"\n    :type numbers: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_sum = 0\n    for i in range(0, len(numbers)):\n        for j in range(0, len(numbers[i])):\n            if numbers[i][j] > max_sum:\n                max_sum = numbers[i][j]\n    return max_sum\n\n\n# test\nnumbers = [[-2, 3, -5, -10], [-3, -4, -6, -9], [-1, 2, -3, 1], [0, 0, 0, 0], [1, 1, 1, 1]]\nprint(max_sum(numbers))"
    },
    {
      "rank": 32,
      "score": 8.85571690049604,
      "candidate": "def max_sum(arr):\n    max_sum = arr[0][0]\n    for index, val in enumerate(arr):\n        for element in val:\n            if element > max_sum:\n                max_sum = element\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [[4, -3, -2], [1, 5, 6], [1, -1, -2]]\n    print max_sum(arr)"
    },
    {
      "rank": 33,
      "score": 8.855395696632057,
      "candidate": "def max_sum_of_elements_in_lists(list_of_lists):\n    if not list_of_lists:\n        return 0\n    max_sum = 0\n    for i in list_of_lists:\n        max_sum = max(max_sum, max(i))\n    return max_sum"
    },
    {
      "rank": 34,
      "score": 8.8281618090209,
      "candidate": "def max_sum(arr):\n    # Your Code Here\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum, arr[i])\n    return max_sum"
    },
    {
      "rank": 35,
      "score": 8.76828871349479,
      "candidate": "def findMaxSum(arr):\n    # Write your code here\n    # Input: arr = [[1,2,3], [4,5,6], [7,8,9]]\n    # Output: 10\n    # Note:\n    # You can assume that the input is always valid, for example:\n    # arr = [[1, 2], [3, 4], [5, 6]]\n    # The sum of elements in arr is 6.\n    # Note:\n    # You can assume that the input list is always valid, for example:\n    # arr = [[1, 2], [3, 4], [5, 6]]\n    # The sum of elements in arr is 6.\n    \n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0][0]\n    if len(arr) == 2:\n        return max(arr[0][0] + arr[1][0], arr[0][1] + arr[1][1])\n    maxSum = arr[0][0] + arr[1][0]\n    for i in range(2, len(arr)):\n        maxSum = max(maxSum, arr[i][0] + arr[i-1][1] + arr[i-1][0])\n    return maxSum"
    },
    {
      "rank": 36,
      "score": 8.750282588864879,
      "candidate": "#!/usr/bin/env python\n\n# import libraries\nimport sys\n\n# define the function\ndef maxSum(L, M):\n    # define the variables\n    maxSum = 0\n    maxSumList = []\n    \n    # iterate through each list in the list of lists\n    for i in range(len(L)):\n        # iterate through each element in the list\n        for j in range(len(L[i])):\n            # define the variables\n            currentSum = 0\n            currentSumList = []\n            \n            # iterate through each element in the current list\n            for k in range(len(L[i][j])):\n                # define the variables\n                currentSum += L[i][j][k]\n                \n                # add the element to the current sum list\n                currentSumList.append(currentSum)\n                \n            # compare the current sum to the max sum\n            if currentSum > maxSum:\n                maxSum = currentSum\n                maxSumList = currentSumList\n            \n    # return the max sum list\n    return maxSumList\n\n# test the function\nif __name__ == \"__main__\":\n    # define the list of lists\n    L = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \n    # call the function\n    print maxSum(L, 2)"
    },
    {
      "rank": 37,
      "score": 8.715724466237427,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nif len(sys.argv) < 2:\n    print \"Usage: %s input.txt\" % sys.argv[0]\n    sys.exit(1)\n\ndef main():\n    with open(sys.argv[1], \"r\") as f:\n        data = f.readlines()\n\n    max_sum = 0\n    for line in data:\n        if len(line) > 0:\n            line = line.strip().split(\",\")\n            for elt in line:\n                max_sum = max(max_sum, int(elt))\n\n    print max_sum\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.692801520950061,
      "candidate": "def max_sum(arr, n):\n    if len(arr) == 0:\n        return 0\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(max_sum(arr, n))"
    },
    {
      "rank": 39,
      "score": 8.625142247198651,
      "candidate": "import sys\nimport math\n\ndef findMaxSum(data):\n    if not data:\n        return 0\n    maxSum = data[0]\n    for i in data:\n        if i > maxSum:\n            maxSum = i\n    return maxSum\n\nif __name__ == \"__main__\":\n    data = [1, 2, 3, 4, 5, 6, 7]\n    print(findMaxSum(data))"
    },
    {
      "rank": 40,
      "score": 8.623000730200317,
      "candidate": "def max_sum(nums):\n    # write your code here\n    #return max(map(max_sum_recursive, nums))\n    return max(map(max_sum_recursive, nums))\n\ndef max_sum_recursive(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        max_sum = max(nums)\n        return max_sum if max_sum > nums[0] else nums[0]\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, -1, -2]\n    print max_sum(nums)"
    },
    {
      "rank": 41,
      "score": 8.610076160146226,
      "candidate": "def find_max(list):\n    \"\"\"\n    Find the maximum sum of elements of list in a list of lists.\n    :param list: A list of lists.\n    :return: The maximum sum of elements of list in a list of lists.\n    \"\"\"\n    sum_list = []\n    for l in list:\n        sum_list.append(sum(l))\n\n    return max(sum_list)\n\ndef test_find_max():\n    assert find_max([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 10\n    assert find_max([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 12\n\nif __name__ == \"__main__\":\n    test_find_max()"
    },
    {
      "rank": 42,
      "score": 8.548876241946822,
      "candidate": "def findMaxSum(nums):\n    # write your code here\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            sum = nums[i][j] + findMaxSum(nums[i][:j] + nums[i][j+1:])\n            max_sum = max(max_sum, sum)\n    return max_sum\n\n#test\nnums = [[1,2,3],[4,5,6]]\nprint findMaxSum(nums)\nnums = [[1,2,3],[1,2,3]]\nprint findMaxSum(nums)"
    },
    {
      "rank": 43,
      "score": 8.542875062379007,
      "candidate": "def max_sum(L):\n    max_sum = 0\n    for x in L:\n        max_sum = max(max_sum, sum(x))\n    return max_sum\n\ndef main():\n    L = [[1, 2, 3], [4, 5], [6, 7]]\n    print(max_sum(L))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.53012858503943,
      "candidate": "def max_sum(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    max_sum = nums[0][0]\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if max_sum < nums[i][j]:\n                max_sum = nums[i][j]\n    return max_sum\n\nif __name__ == '__main__':\n    nums = [[2, 3, -1], [5, 6, -2], [1, -3, 4]]\n    print max_sum(nums)"
    },
    {
      "rank": 45,
      "score": 8.499905739299377,
      "candidate": "def max_sum(list_of_lists):\n    \"\"\"\n    :param list_of_lists: a list of lists\n    :return: the maximum sum of elements in the list\n    \"\"\"\n    max_sum = 0\n    for sub_list in list_of_lists:\n        max_sum = max(max_sum, max_sum_sub_list(sub_list))\n    return max_sum\n\ndef max_sum_sub_list(sub_list):\n    max_sum = 0\n    for element in sub_list:\n        max_sum = max(max_sum, element)\n    return max_sum"
    },
    {
      "rank": 46,
      "score": 8.490324832712195,
      "candidate": "def maxSum(listOfLists):\n    \"\"\"\n    :type listOfLists: list\n    :rtype: int\n    \"\"\"\n    if not listOfLists:\n        return 0\n    maxSum = 0\n    for i in range(len(listOfLists) - 1):\n        for j in range(len(listOfLists[i]) - 1):\n            if listOfLists[i][j] > listOfLists[i][j + 1]:\n                maxSum = max(maxSum, listOfLists[i][j] + listOfLists[i][j + 1])\n    return maxSum"
    },
    {
      "rank": 47,
      "score": 8.48796797856353,
      "candidate": "def findMax(L):\n    \"\"\"\n    :type L: List[List[int]]\n    :rtype: int\n    \"\"\"\n    maxSum = 0\n    for i in range(len(L)):\n        for j in range(len(L[i])):\n            if L[i][j] > maxSum:\n                maxSum = L[i][j]\n    return maxSum"
    },
    {
      "rank": 48,
      "score": 8.478208546788407,
      "candidate": "def findMaxSum(nums):\n    maxSum = 0\n    for i in range(len(nums)):\n        if len(nums[i]) > 0:\n            maxSum = max(maxSum, max(nums[i]))\n    return maxSum\n\nif __name__ == '__main__':\n    nums = [[-1, -3, 1, -5, 4], [-1, -2, 1, -1, 1], [1, 1, 1, 1, 1]]\n    print(findMaxSum(nums))"
    },
    {
      "rank": 49,
      "score": 8.437695832075478,
      "candidate": "from collections import deque\n\ndef maximum_sum_of_elements_in_lists(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    \n    if len(lists) == 0:\n        return 0\n    \n    def maximum_sum_of_elements_in_list(list_of_elements):\n        max_sum = list_of_elements[0]\n        for element in list_of_elements:\n            max_sum = max(max_sum, element)\n        return max_sum\n    \n    return max(maximum_sum_of_elements_in_list(list) for list in lists)\n\nif __name__ == '__main__':\n    assert maximum_sum_of_elements_in_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 27\n    assert maximum_sum_of_elements_in_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == 14"
    },
    {
      "rank": 50,
      "score": 8.426531424889468,
      "candidate": "def maximum_sum(arr):\n    # Your code here\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0], arr[1], arr[2])\n    for i in range(len(arr)):\n        arr[i] = max(arr[i], maximum_sum(arr[:i]))\n    return arr[-1]\n\nif __name__ == \"__main__\":\n    print(maximum_sum([[1, 2], [3, 4]]))\n    print(maximum_sum([[1, 2], [3, 4], [5, 6]]))\n    print(maximum_sum([[1, 2], [3, 4], [5, 6], [7, 8]]))"
    },
    {
      "rank": 51,
      "score": 8.408439383654278,
      "candidate": "def max_sum(lst_of_lists):\n    \"\"\"\n    This function takes as input a list of lists, and finds the maximum sum of all elements in the list of lists.\n    \"\"\"\n    return max_sum_helper(lst_of_lists, [])\n\n\ndef max_sum_helper(lst_of_lists, curr_sum):\n    \"\"\"\n    This function takes as input a list of lists, and finds the maximum sum of all elements in the list of lists.\n    \"\"\"\n    if len(lst_of_lists) == 0:\n        return curr_sum\n\n    max_curr_sum = max_sum_helper(lst_of_lists[1:], curr_sum)\n    max_curr_sum = max(curr_sum + lst_of_lists[0][0], max_curr_sum)\n    return max_curr_sum"
    },
    {
      "rank": 52,
      "score": 8.386620303250325,
      "candidate": "from collections import defaultdict\n\ndef max_sum(l):\n    \"\"\"\n    :type l: List[List[int]]\n    :rtype: int\n    \"\"\"\n    res = defaultdict(int)\n    for row in l:\n        for i in range(len(row)):\n            res[row[i]] += row[i]\n    return max(res.values())\n\nif __name__ == '__main__':\n    assert max_sum([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 10\n    assert max_sum([[1, 2, 3], [4, 5], [6, 7]]) == 6\n    assert max_sum([[1, 2, 3], [4, 5, 6, 7]]) == 7"
    },
    {
      "rank": 53,
      "score": 8.375312293858853,
      "candidate": "import numpy as np\n\n# Create the function\ndef find_max(lst):\n    # Create a list of maximums\n    max_list = []\n    # Iterate through the list\n    for lst_elem in lst:\n        # Add the current element to the maximum list\n        max_list.append(lst_elem)\n        # Add the element to the list of maximums\n        max_list.append(max(lst_elem))\n    # Return the maximum sum\n    return max(max_list)\n\n\n# Test the function\nprint find_max([[1,2,3],[4,5,6],[7,8,9]])\n\n# Test the function\nlst = [1,2,3]\nprint find_max(lst)"
    },
    {
      "rank": 54,
      "score": 8.351614956112536,
      "candidate": "def find_max_sum(list_of_lists):\n    \"\"\"\n    Input: list of lists\n    Output: the maximum sum of elements of all lists in the list of lists.\n    \"\"\"\n\n    # List of lists\n    max_sum = 0\n    for l in list_of_lists:\n        for elem in l:\n            # Calculate the sum of the elements\n            current_sum = elem\n            for sub_list in l:\n                if sub_list is not l:\n                    current_sum += sub_list[-1]\n            # Set the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    return max_sum\n\ndef main():\n    # List of lists\n    list_of_lists = [ [1,2,3,4], [5,6,7], [8,9,10], [11,12] ]\n\n    #print(find_max_sum(list_of_lists))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.334608500525688,
      "candidate": "def maximum_sum_of_elements(list_of_lists):\n    \"\"\"\n    :param list_of_lists: List of lists.\n    :return: Maximum sum of elements.\n    \"\"\"\n    return max(sum(element) for element in list_of_lists)\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2], [3, 4, 5], [1, 2], [1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    print(maximum_sum_of_elements(list_of_lists))"
    },
    {
      "rank": 56,
      "score": 8.331556294201176,
      "candidate": "from collections import defaultdict\n\ndef max_sum(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # Build a dict of each element's sum.\n    sum_dict = defaultdict(int)\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            sum_dict[nums[i][j]] += nums[i][j]\n\n    # Sum up the dict's values.\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            max_sum = max(max_sum, sum_dict[nums[i][j]])\n\n    return max_sum\n\nif __name__ == \"__main__\":\n    nums = [[1, 2, 3], [2, 3, 1]]\n    print(max_sum(nums))"
    },
    {
      "rank": 57,
      "score": 8.327375965969855,
      "candidate": "def max_sum(l):\n    # write your code here\n    max_sum = 0\n    for i in l:\n        max_sum = max(max_sum, i)\n    return max_sum\n\ndef main():\n    l = [1,2,3]\n    print max_sum(l)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 8.327367757082776,
      "candidate": "def findMaxSum(listOfLists):\n    maxSum = 0\n    for list in listOfLists:\n        for element in list:\n            maxSum = max(maxSum, element)\n    return maxSum\n\nif __name__ == \"__main__\":\n    listOfLists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print findMaxSum(listOfLists)"
    },
    {
      "rank": 59,
      "score": 8.298597569547805,
      "candidate": "# Write your code here\ndef maxSum(L):\n    \"\"\"\n    :type L: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(L)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return L[0][0]\n    else:\n        max_sum = L[0][0]\n        for i in xrange(1, n):\n            max_sum = max(max_sum + L[i][0], L[i][0])\n        return max_sum"
    },
    {
      "rank": 60,
      "score": 8.2938925966498,
      "candidate": "#!/bin/python\n\ndef maxSum(L):\n    # write your code here\n    m = [[0 for i in range(len(L))] for j in range(len(L))]\n    for i in range(len(L)):\n        for j in range(len(L[i])):\n            m[i][j] = max(m[i][j], m[i][j+1] + L[i][j])\n    return m[0][len(L[0])-1]\n\nprint maxSum([[1, 2], [3, 4], [5, 6], [7, 8]])"
    },
    {
      "rank": 61,
      "score": 8.251903304236286,
      "candidate": "import numpy as np\nimport sys\nimport time\n\ndef max_sum_of_list(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: maximum sum of elements of lists\n    \"\"\"\n    max_sum = 0\n    for list_of_elements in list_of_lists:\n        max_sum = max(max_sum, sum(list_of_elements))\n    return max_sum\n\n\nif __name__ == '__main__':\n    start = time.time()\n    print(max_sum_of_list([[1, 2, 3], [4, 5], [6, 7]]))\n    end = time.time()\n    print('Time taken to execute is %s' % str(end - start))\n    sys.exit(0)"
    },
    {
      "rank": 62,
      "score": 8.212735598038213,
      "candidate": "def max_sum(ls):\n    max_sum = -sys.maxsize\n    for i in range(0,len(ls)):\n        for j in range(0,len(ls[i])):\n            if ls[i][j] > max_sum:\n                max_sum = ls[i][j]\n    return max_sum\n\nif __name__ == \"__main__\":\n    ls = [[1,2,3], [4,5,6], [7,8,9]]\n    print max_sum(ls)"
    },
    {
      "rank": 63,
      "score": 8.211579567659316,
      "candidate": "def findMaxSum(lst):\n    \"\"\"\n    :type lst: list\n    :rtype: int\n    \"\"\"\n    maxSum = 0\n    for i in range(0, len(lst)):\n        sum = 0\n        for j in range(0, len(lst)):\n            if i!= j:\n                sum += lst[j][i]\n        maxSum = max(maxSum, sum)\n    return maxSum\n\nif __name__ == '__main__':\n    assert findMaxSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30\n    assert findMaxSum([[1, 2], [1, 2], [1, 2]]) == 4\n    assert findMaxSum([[1], [2], [3]]) == 3"
    },
    {
      "rank": 64,
      "score": 8.209707251476969,
      "candidate": "def max_sum_of_list(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists, each element is a list.\n    :return: maximum sum of elements in a list of lists.\n    \"\"\"\n    max_sum = 0\n    for sub_list in list_of_lists:\n        max_sum = max(max_sum, max(sub_list))\n    return max_sum\n\n\ndef test_max_sum_of_list():\n    assert max_sum_of_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 21\n    assert max_sum_of_list([[1, 2, 3], [4, 5, 6], [7, 8]]) == 7\n    assert max_sum_of_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 30\n\nif __name__ == \"__main__\":\n    test_max_sum_of_list()"
    },
    {
      "rank": 65,
      "score": 8.2048573255218,
      "candidate": "def find_max_sum(lists):\n    # write your code here\n    max_sum = -sys.maxsize\n    for list_ in lists:\n        sum_ = 0\n        for value in list_:\n            sum_ += value\n        if sum_ > max_sum:\n            max_sum = sum_\n    return max_sum\n\n# lists = [[-3, 2, 1, -2], [4, 2, 3, 1, -1]]\nlists = [[-3, 2, 1, -2], [4, 2, 3, 1, -1, 1, -2]]\nprint find_max_sum(lists)"
    },
    {
      "rank": 66,
      "score": 8.193565922652176,
      "candidate": "def max_sum_of_list(list_of_lists):\n    \"\"\"\n    :param list_of_lists: A list of lists\n    :return: The maximum sum of elements of list in a list of lists.\n    \"\"\"\n    if not list_of_lists:\n        return 0\n    max_sum = 0\n    for l in list_of_lists:\n        for i in range(len(l)):\n            max_sum = max(max_sum, l[i])\n    return max_sum"
    },
    {
      "rank": 67,
      "score": 8.185309335307622,
      "candidate": "import sys\n\n# The number of lists in the list of lists\nnum_list_of_lists = int(sys.argv[1])\n\n# The sum of elements in each list of lists\nsum_of_elements = 0\n\n# The list of lists\nlist_of_lists = list()\n\n# The list of lists\nfor i in range(num_list_of_lists):\n    list_of_lists.append(list())\n\n# The list of lists\nfor i in range(num_list_of_lists):\n    for j in range(len(sys.argv[2+i])):\n        list_of_lists[i].append(int(sys.argv[2+i][j]))\n\n# The sum of elements in each list of lists\nfor i in range(num_list_of_lists):\n    sum_of_elements += list_of_lists[i][-1]\n\n# The maximum sum of elements in the list of lists\nprint(max(sum_of_elements, key=sum_of_elements.__getitem__))"
    },
    {
      "rank": 68,
      "score": 8.172253082181854,
      "candidate": "from itertools import *\n\ndef findMaxSum(lst):\n    if not lst:\n        return 0\n    \n    maxSum = lst[0][0]\n    for i in range(1, len(lst)):\n        for j in range(0, len(lst[0])):\n            if lst[i][j] > maxSum:\n                maxSum = lst[i][j]\n    return maxSum\n\n#lst = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]\n#print findMaxSum(lst)\n\nlst = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]\nprint findMaxSum(lst)"
    },
    {
      "rank": 69,
      "score": 8.163300679823958,
      "candidate": "def find_max(data):\n    \"\"\"\n    Find the maximum sum of elements in data.\n    \"\"\"\n    # If the data is empty, return 0.\n    if not data:\n        return 0\n\n    # Initialize the maximum sum.\n    max_sum = 0\n\n    # Find the maximum sum.\n    for i in range(0, len(data)):\n        max_sum = max(max_sum, sum(data[i]))\n\n    # Return the maximum sum.\n    return max_sum\n\n\n# Test Cases\n# Input: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n# Output: 24\n# Input: [[1, 2], [3, 4], [5, 6]]\n# Output: 6\n# Input: [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]\n# Output: 24\n# Input: [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]\n# Output: 24\n# Input: [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]\n# Output: 6\n# Input: [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]\n# Output: 24\n# Input: [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]\n# Output: 24\n# Input: [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]\n# Output: 24\n# Input: [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], ["
    },
    {
      "rank": 70,
      "score": 8.144125099485041,
      "candidate": "import sys\nimport math\nimport time\n\ndef max_sum_of_sublist(lst, n):\n    \"\"\"\n    Find the maximum sum of elements in list of lists.\n\n    :param lst: list of lists\n    :param n: number of lists\n    :return: maximum sum\n    \"\"\"\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return max(lst)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += max_sum_of_sublist(lst[i], n - 1)\n\n    return max_sum\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    start_time = time.time()\n\n    n = int(sys.stdin.readline())\n\n    lst = [[int(i) for i in sys.stdin.readline().split()] for _ in range(n)]\n    print(\"{0}\".format(max_sum_of_sublist(lst, n)))\n\n    end_time = time.time()\n    print(\"--- %s seconds ---\" % (end_time - start_time))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 8.143591138329747,
      "candidate": "# Example 1\n# list = [1,2,3,4,5,6]\n#\n# list of lists = [[1,2,3], [4,5,6]]\n#\n# return sum of elements of list of lists\n# return [6, 5, 4, 3, 2, 1]\ndef find_max_sum_of_list_of_lists(list_of_lists):\n    sum_of_elements = []\n    for list in list_of_lists:\n        sum_of_elements = [sum_of_elements[0] + list[i] for i in range(len(list))]\n\n    return sum_of_elements\n\n# Example 2\n# list = [1,2,3,4,5,6]\n#\n# list of lists = [[1,2,3], [4,5,6]]\n#\n# return sum of elements of list of lists\n# return [6, 5, 4, 3, 2, 1]\ndef find_max_sum_of_list_of_lists2(list_of_lists):\n    sum_of_elements = []\n    for list in list_of_lists:\n        for i in range(len(list)):\n            sum_of_elements = [sum_of_elements[0] + list[i], sum_of_elements[1] + list[i]]\n\n    return sum_of_elements\n\n# Example 3\n# list = [1,2,3,4,5,6]\n#\n# list of lists = [[1,2,3], [4,5,6]]\n#\n# return sum of elements of list of lists\n# return [6, 5, 4, 3, 2, 1]\ndef find_max_sum_of_list_of_lists3(list_of_lists):\n    sum_of_elements = []\n    for list in list_of_lists:\n        for i in range(len(list)):\n            sum_of_elements = [sum_of_elements[0] + list[i], sum_of_elements[1] + list[i]]\n\n    return sum_of_elements\n\n# Example 4"
    },
    {
      "rank": 72,
      "score": 8.121884567141883,
      "candidate": "def find_max_sum(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: the maximum sum of elements of list in a list of lists\n    \"\"\"\n    list_of_lists = list_of_lists[:]\n    # sort the list of lists\n    list_of_lists.sort()\n    # get the maximum sum of elements in the list of lists\n    max_sum = 0\n    for i in range(0, len(list_of_lists)):\n        max_sum = max(max_sum, sum(list_of_lists[i]))\n    return max_sum\n\n#print find_max_sum([[1,2,3], [4,5,6], [7,8,9]])\n#print find_max_sum([[1,2,3], [4,5,6], [7,8,9], [10,11,12]])\n#print find_max_sum([[1,2,3], [4,5,6], [7,8,9]])\n#print find_max_sum([[1,2,3], [4,5,6], [7,8,9], [10,11,12]])"
    },
    {
      "rank": 73,
      "score": 8.105983444291466,
      "candidate": "def max_sum_in_lists(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_sum = 0\n    for list in lists:\n        for i in range(len(list)):\n            if i == 0:\n                max_sum = max(max_sum, list[i])\n            else:\n                max_sum = max(max_sum, max(list[i], list[i-1]))\n    return max_sum\n\nif __name__ == '__main__':\n    lists = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [1, 2, 3, 4],\n        [5, 6, 7, 8]\n    ]\n    print(max_sum_in_lists(lists))"
    },
    {
      "rank": 74,
      "score": 8.040197642997851,
      "candidate": "# Write your code here.\ndef findMaxSum(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not lists:\n        return 0\n    maxSum = lists[0][0]\n    for i in range(len(lists)):\n        maxSum = max(maxSum, findMaxSum(lists[i]))\n    return maxSum\n\nprint(findMaxSum([[1, 2, 3], [4, 5], [6, 7], [8, 9]]))\nprint(findMaxSum([[1, 2, 3], [4, 5, 6], [7, 8], [9]]))\nprint(findMaxSum([[1, 2], [4, 5], [6, 7], [8, 9]]))\nprint(findMaxSum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]))"
    },
    {
      "rank": 75,
      "score": 8.024835682833125,
      "candidate": "import math\n\n# This function is a helper function to compute the maximum sum\ndef max_sum(my_list):\n    max_sum = -1\n    for i in range(0, len(my_list)):\n        for j in range(0, len(my_list[i])):\n            my_list[i][j] += 1\n            if max_sum < my_list[i][j]:\n                max_sum = my_list[i][j]\n    return max_sum\n\n# This function is the main function\ndef main():\n    my_list = [[4, 1, 5, 3], [7, 1, 2, 4, 1, 5], [2, 1, 1, 4, 1, 2, 1, 1], [3, 1, 1, 1, 1, 4, 1, 1]]\n    print \"max sum: %d\" % max_sum(my_list)\n\n# Execute the program\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 7.938028884277233,
      "candidate": "def max_sum(list_of_lists):\n    \"\"\"\n    list_of_lists: a list of lists\n    return: the maximum sum of elements of list in a list of lists\n    \"\"\"\n    max_sum_of_list = 0\n    for list in list_of_lists:\n        max_sum_of_list = max(max_sum_of_list, max(list))\n    return max_sum_of_list\n\n\ndef main():\n    \"\"\"\n    main\n    \"\"\"\n    # list_of_lists = [ [1,2,3], [4,5,6], [7,8,9] ]\n    list_of_lists = [ [1,2,3], [4,5,6], [7,8,9] ]\n    print max_sum(list_of_lists)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 7.915588979966494,
      "candidate": "def findMaxSum(listOfLists):\n    max_sum = 0\n    for list in listOfLists:\n        for value in list:\n            if value > max_sum:\n                max_sum = value\n    return max_sum\n\n# listOfLists = [[1,2,3], [4,5,6], [7,8,9]]\n# print(findMaxSum(listOfLists))\n\n# listOfLists = [[1], [2], [3]]\n# print(findMaxSum(listOfLists))"
    },
    {
      "rank": 78,
      "score": 7.8912769574414305,
      "candidate": "def max_sum(l):\n    max_sum = 0\n    for i in l:\n        max_sum = max(max_sum, i)\n    return max_sum\n\ndef max_sum_list_of_lists(l):\n    max_sum = 0\n    for i in l:\n        max_sum = max(max_sum, max_sum_list_of_lists(i))\n    return max_sum\n\ndef main():\n    l = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18] ]\n    print max_sum(l)\n    print max_sum_list_of_lists(l)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 7.868947655733293,
      "candidate": "import math\n\ndef max_sum(my_list):\n    \"\"\"\n    :type my_list: List[List[int]]\n    :rtype: int\n    \"\"\"\n    my_max = -99999999\n    for i in range(0, len(my_list)):\n        for j in range(0, len(my_list[i])):\n            my_max = max(my_max, my_list[i][j])\n    return my_max\n\nif __name__ == '__main__':\n    my_list = [[1,2,3],[4,5,6],[7,8,9]]\n    print max_sum(my_list)"
    },
    {
      "rank": 80,
      "score": 7.84634113240411,
      "candidate": "def max_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements of list in list of lists.\n    :param list_of_lists: list of lists\n    :return: maximum sum of elements in list\n    \"\"\"\n\n    list_of_lists = list(list_of_lists)\n    list_of_lists.sort()\n\n    max_sum = -1 * float('-inf')\n    for i in range(0, len(list_of_lists)):\n        for j in range(0, len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_sum:\n                max_sum = list_of_lists[i][j]\n\n    return max_sum\n\nif __name__ == '__main__':\n    list_of_lists = [[1, 2, 3], [2, 3, 4], [1, 2, 3], [2, 3, 4], [1, 2, 3], [2, 3, 4]]\n    print max_sum(list_of_lists)"
    },
    {
      "rank": 81,
      "score": 7.834022619458933,
      "candidate": "def findMaxSum(lists):\n    maxSum = -float('inf')\n    for i in range(0, len(lists)):\n        for j in range(0, len(lists[i])):\n            if lists[i][j] > maxSum:\n                maxSum = lists[i][j]\n    return maxSum\n\ndef main():\n    # Test Cases\n    lists = [[3, -4, 2], [2, 1, 5], [1, -4, -1]]\n    print findMaxSum(lists)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 82,
      "score": 7.780351419995229,
      "candidate": "def max_sum(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    \n    max_sum = nums[0][0]\n    for num in nums:\n        for i in range(len(num)):\n            max_sum = max(max_sum, num[i] + max_sum(num[:i] + num[i + 1:]))\n    return max_sum"
    },
    {
      "rank": 83,
      "score": 7.738292593776799,
      "candidate": "def max_sum(lst):\n    # write your code here\n    max_sum = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] > max_sum:\n                max_sum = lst[i][j]\n    return max_sum\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(max_sum(lst))\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(max_sum(lst))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 84,
      "score": 7.5819855281879285,
      "candidate": "def find_max_sum(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if len(list_of_lists) == 0:\n        return 0\n    elif len(list_of_lists) == 1:\n        return list_of_lists[0][0]\n    else:\n        return max(find_max_sum(list_of_lists[0]), find_max_sum(list_of_lists[1:])) + list_of_lists[0][0]\n\nprint(find_max_sum([[1, 2, 3], [4, 5, 6]]))"
    },
    {
      "rank": 85,
      "score": 7.4878043221155455,
      "candidate": "import math\n\ndef max_sum_of_list_of_lists(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_sum = 0\n    for sub_arr in arr:\n        max_sum += max(sub_arr)\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [[1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print max_sum_of_list_of_lists(arr)"
    },
    {
      "rank": 86,
      "score": 7.464609382504557,
      "candidate": "def max_sum_of_elements(arr):\n    \"\"\"\n    :param arr: List of lists.\n    :return: The maximum sum of elements of list in a list of lists.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0][0]\n    if len(arr) == 2:\n        return max(arr[0][0] + arr[1][0], arr[0][1] + arr[1][1])\n    else:\n        return max(max_sum_of_elements(arr[0]), max_sum_of_elements(arr[1:]))"
    },
    {
      "rank": 87,
      "score": 7.4506599871439985,
      "candidate": "def max_sum(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_so_far = 0\n    for sub_list in list_of_lists:\n        max_so_far = max(max_so_far, sum(sub_list))\n    return max_so_far\n\n\nif __name__ == '__main__':\n    assert max_sum([[1,2,3], [4,5,6], [7,8,9]]) == 27\n    assert max_sum([[1,2], [3,4], [5,6]]) == 6\n    assert max_sum([[1], [2], [3]]) == 3\n    assert max_sum([]) == 0"
    },
    {
      "rank": 88,
      "score": 7.134571892399572,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\t# @param head, a ListNode\n\t# @return an integer\n\tdef getMaximumSum(self, head):\n\t\tif head == None or head.next == None:\n\t\t\treturn 0\n\t\t\n\t\twhile head.next:\n\t\t\thead = head.next\n\t\t\thead = head.next\n\t\t\n\t\treturn max(self.getMaximumSum(head), head.val)"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "#!/usr/bin/env python\n\ndef findMaxSum(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_sum = nums[0][0]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums[i])):\n            if nums[i][j] > max_sum:\n                max_sum = nums[i][j]\n    return max_sum\n\nif __name__ == '__main__':\n    nums = [[1,2,3], [4,5,6], [1,2,3]]\n    print findMaxSum(nums)"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "from collections import defaultdict\n\ndef max_sum(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: int\n    \"\"\"\n    def max_sum_helper(lists, index, max_sum):\n        if index >= len(lists):\n            return max_sum\n\n        if max_sum < lists[index][0]:\n            max_sum = lists[index][0]\n            return max_sum_helper(lists, index + 1, max_sum)\n\n        for i in range(index, len(lists)):\n            if lists[i][0] > max_sum:\n                max_sum = lists[i][0]\n                max_sum_helper(lists, i + 1, max_sum)\n\n        return max_sum\n\n    return max_sum_helper(lists, 0, 0)\n\n\ndef test_max_sum():\n    assert max_sum([[1,2,3], [2,3,4], [3,4,5]]) == 15\n    assert max_sum([[1,2], [2,3], [3,4]]) == 4\n    assert max_sum([[1,2], [1,2], [1,2]]) == 2\n    assert max_sum([]) == 0\n    assert max_sum([[1,1]]) == 1\n    assert max_sum([[1,2], [1,2], [1,2]]) == 3\n    assert max_sum([[1,2], [1,2], [1,2]]) == 3\n    assert max_sum([[1,2], [1,2], [1,2]]) == 3\n    assert max_sum([[1,2], [1,2], [1,2]]) == 3\n    assert max_sum([[1,2], [1,2], [1,2]]) == 3\n    assert max_sum([[1,2], [1,2], [1,2]]) == 3\n    assert max_sum([[1,2], [1,2], [1,2]]) == 3\n    assert max_sum([[1,2], [1,2], [1,2]])"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "# https://www.hackerrank.com/challenges/max-sum/problem\n#\n# Problem: Find the maximum sum of elements of lists in a list of lists\n#\n# Time complexity: O(n^2)\n# Space complexity: O(n)\n#\n# Input:\n#   n = number of lists\n#   list of lists\n#\n# Output:\n#   Maximum sum of elements of lists in a list of lists\n#\n# Sample Input\n#    3\n#    [[1, 2], [3, 4], [5, 6]]\n#    [[1, 2], [3, 4], [5, 6]]\n#    [[1, 2], [3, 4], [5, 6]]\n#\n# Sample Output\n#    6\n#    [1, 2, 3, 4, 5, 6]\n#    [1, 2, 3, 4, 5, 6]\n#    [1, 2, 3, 4, 5, 6]\n\ndef max_sum_list_of_lists(n, list_of_lists):\n    # write your code here\n    max_sum = 0\n    for i in range(0, n):\n        max_sum = max(max_sum, max_sum_list_of_lists(i, list_of_lists))\n    return max_sum\n\nif __name__ == \"__main__\":\n    n = int(input())\n    list_of_lists = []\n    for i in range(0, n):\n        list_of_lists.append(list(map(int, input().split())))\n    print(max_sum_list_of_lists(n, list_of_lists))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def max_sum_of_list(arr):\n    \"\"\"\n    Write a function max_sum_of_list that takes a list of lists and returns the maximum sum of elements.\n\n    >>> max_sum_of_list([[1,2],[3,4]])\n    10\n    >>> max_sum_of_list([[1,2],[3,4,5]])\n    5\n    \"\"\"\n    max_sum = arr[0][0]\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] > max_sum:\n                max_sum = arr[i][j]\n    return max_sum\n\nif __name__ == \"__main__\":\n    assert max_sum_of_list([[1,2],[3,4]]) == 10\n    assert max_sum_of_list([[1,2],[3,4,5]]) == 5"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def max_sum(L):\n    \"\"\"\n    L is a list of lists.\n    \"\"\"\n    if not L: return 0\n    max_sum = L[0][0]\n    for element in L:\n        max_sum = max(max_sum, max(element))\n    return max_sum\n\nprint(max_sum([[1,2,3],[4,5,6]]))\nprint(max_sum([[1,2],[3,4,5]]))\nprint(max_sum([[1,2,3]]))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def max_sum_of_elements(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # return max(sum(nums))\n    return max(max(elem_sum(nums[i][j] for i in range(len(nums)))) for j in range(len(nums[0])))\n\n\ndef elem_sum(elem):\n    \"\"\"\n    :type elem: int\n    :rtype: int\n    \"\"\"\n    return elem\n\n# Your Code Here\nnums = [[3, -2, 1, 4], [-1, 2, -3, 4]]\nprint(max_sum_of_elements(nums))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def maxSum(lst):\n    # Write your code here\n    lst = list(lst)\n    n = len(lst)\n    if n == 0:\n        return 0\n    if n == 1:\n        return lst[0]\n    \n    # find the maximum sum of first element in all list\n    maxSum = lst[0]\n    for i in range(1, n):\n        maxSum = max(maxSum, lst[i] + lst[i-1])\n\n    return maxSum\n\n# Sample Input\nlst = [[1,2,3],[4,5,6],[7,8,9]]\n\n# Sample Output\nprint maxSum(lst)"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {ListNode} end\n    # @return {ListNode}\n    def maxSum(self, head, end):\n        if not head or not end:\n            return None\n        if head == end:\n            return head\n        p1, p2 = head, head\n        max_sum = head.val\n        while p1.next and p2:\n            p1 = p1.next\n            p2 = p2.next\n            if p1 == end:\n                break\n            max_sum = max(max_sum, p1.val + p2.val)\n        return p1 if p1!= end else p2"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "import time\nstart_time = time.time()\n\ndef findMaxSum(l):\n    max_sum = 0\n    for i in l:\n        max_sum = max(max_sum, sum(i))\n    return max_sum\n\nprint(findMaxSum([[1,2,3],[4,5,6],[7,8,9]]))\n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "#!/usr/bin/env python\n\n# import the necessary packages\nfrom itertools import product\nfrom collections import Counter\n\n# list of lists\nl = [[2,1],[1,4]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,4,5],[3,4,5]]\n\n# list of lists\nl = [[1,2,3],[2,"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# Write a function that takes a list of lists and returns the maximum sum of elements of the list.\n\n# List of lists\n\ndef max_sum(lists):\n    \"\"\"\n    Return the maximum sum of elements of a list of lists.\n    \"\"\"\n    # lists is a list of lists\n    # the maximum sum of a list is the maximum sum of all elements of the list\n\n    max_sum = 0\n\n    # For each element of the list\n    for list in lists:\n\n        # If the list has elements, calculate the maximum sum of the list\n        if len(list) > 0:\n            max_sum = max(max_sum, max(list))\n\n    return max_sum\n\n\n# Sample Output\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n# 6\n\n# max_sum([[1, 2, 3], [1, 3, 2], [1, 2, 3]])\n#"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def max_sum(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: maximum sum\n    \"\"\"\n    list_of_lists = list(list_of_lists)\n    if not list_of_lists:\n        return 0\n\n    max_sum = list_of_lists[0][0]\n    for i in range(len(list_of_lists)):\n        max_sum = max(max_sum, sum(list_of_lists[i]))\n\n    return max_sum\n\n\ndef test_max_sum():\n    assert max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 15\n    assert max_sum([[1, 2], [3, 4]]) == 4\n\n\nif __name__ == '__main__':\n    test_max_sum()"
    }
  ]
}