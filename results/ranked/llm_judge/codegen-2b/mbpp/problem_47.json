{
  "timestamp": "2025-09-14T17:42:41.418017",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 47,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def check_sign(x, y):\n    \"\"\"\n    check_sign(x, y) -> bool\n\n    Returns True if x and y have opposite sign, otherwise False.\n    \"\"\"\n    return (x < 0)!= (y < 0)\n\nif __name__ == \"__main__\":\n    x = int(input(\"Enter x: \"))\n    y = int(input(\"Enter y: \"))\n    print(\"x and y have opposite sign:\", check_sign(x, y))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/two-arrays/problem\n\ndef opposite_sign(arr1, arr2):\n    \"\"\"\n    Check the given two integers have opposite sign or not.\n    :param arr1: the first integer\n    :param arr2: the second integer\n    :return: True if the two numbers have opposite sign, otherwise False\n    \"\"\"\n    # If both are negative or both are positive, then the numbers have opposite sign\n    if arr1 < 0 and arr2 < 0 or arr1 > 0 and arr2 > 0:\n        return True\n    # Otherwise, if one of them is negative and the other is positive, then the numbers have opposite sign\n    elif arr1 < 0 and arr2 > 0 or arr1 > 0 and arr2 < 0:\n        return True\n    # Otherwise, the numbers have the same sign\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    arr1 = int(input().strip())\n    arr2 = int(input().strip())\n    print(opposite_sign(arr1, arr2))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/two-arrays/problem\n\nimport math\n\n\ndef check_opposite_sign(first_num, second_num):\n    if math.copysign(first_num, second_num) == -1:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    first_num = int(input())\n    second_num = int(input())\n\n    if check_opposite_sign(first_num, second_num):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param num1: A integer\n    @param num2: A integer\n    @return: A boolean\n    \"\"\"\n    def hasOppositeSign(self, num1, num2):\n        return num1 * num2 < 0 and num2 * num1 > 0"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def opposite(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n    :param x: int\n    :param y: int\n    :return: bool\n    \"\"\"\n    return x * y < 0 and y * x > 0\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    x = int(input())\n    y = int(input())\n\n    if opposite(x, y):\n        print('no')\n    else:\n        print('yes')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/two-different-integers\n#\n# Time complexity: O(1)\n# Space complexity: O(1)\n\ndef opposite(a, b):\n    return a < 0 and b > 0 or a > 0 and b < 0\n\nif __name__ == '__main__':\n    a, b = map(int, input().split())\n    print(opposite(a, b))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def check_sign(x, y):\n    return x * y < 0\n\nif __name__ == '__main__':\n    x = -2\n    y = -3\n    print(check_sign(x, y))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def oppositeSign(a, b):\n    if a > 0 and b < 0:\n        return 1\n    elif a < 0 and b > 0:\n        return 1\n    elif a < 0 and b < 0:\n        return 1\n    elif a > 0 and b > 0:\n        return 1\n    else:\n        return 0\n\nprint oppositeSign(2, -3)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://www.hackerrank.com/challenges/two-arrays/problem\n\ndef opposite(x, y):\n    if x * y < 0:\n        return True\n    else:\n        return False\n\narr1 = [int(i) for i in input().split()]\narr2 = [int(i) for i in input().split()]\n\nif opposite(arr1[0], arr1[1]):\n    print(\"YES\")\nelse:\n    print(\"NO\")"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# I/O\n# input: two integers\n# output: True or False\n\n# implementation\n# 1. check whether the two integers have opposite sign\n# 2. return True or False\n\n# Time Complexity: O(1)\n# Space Complexity: O(1)\n\n# test cases:\n# [3, -4]\n# [3, 4]\n# [3, -3]\n# [3, 3]\n# [3, -2]\n# [3, 2]\n# [3, -1]\n# [3, 1]\n\n# test cases:\n# [3, -4]\n# [3, 4]\n# [3, -3]\n# [3, 3]\n# [3, -2]\n# [3, 2]\n# [3, -1]\n# [3, 1]\n\n# Test Cases:\n# [3, -4]\n# [3, 4]\n# [3, -3]\n# [3, 3]\n# [3, -2]\n# [3, 2]\n# [3, -1]\n# [3, 1]\n\n# [3, -4]\n# [3, 4]\n# [3, -3]\n# [3, 3]\n# [3, -2]\n# [3, 2]\n# [3, -1]\n# [3, 1]\n\n# [3, -4]\n# [3, 4]\n# [3, -3]\n# [3, 3]\n# [3, -2]\n# [3, 2]\n# [3, -1]\n# [3, 1]\n\n# [3, -4]\n# [3, 4]\n# [3, -3]\n# [3, 3]\n# [3, -2]\n# [3, 2]\n# [3, -1]\n# [3, 1]\n\ndef oppositeSign(x, y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return False\n    elif x < 0 and y > 0:\n        return False\n    elif x > 0 and y < 0"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def oppositeSign(x, y):\n    return (x ^ y) > 0\n\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, -2)\nprint oppositeSign(-1, -2)\nprint oppositeSign(0, 1)\nprint oppositeSign(0, -1)\nprint oppositeSign(1, 0)\nprint oppositeSign(-1, 0)\nprint oppositeSign(0, 0)\nprint oppositeSign(1, 1)\nprint oppositeSign(-1, -1)\nprint oppositeSign(1, -1)\nprint oppositeSign(-1, 1)\nprint oppositeSign(-1, -1)\nprint oppositeSign(1, -2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2)\nprint oppositeSign(1, 2)\nprint oppositeSign(-1, 2"
    },
    {
      "rank": 12,
      "score": 9.370583536698913,
      "candidate": "def check_opposite_sign(x, y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: bool\n    \"\"\"\n    return x > 0 and y > 0 and x < 0 and y < 0\n\nif __name__ == '__main__':\n    print(check_opposite_sign(1, -2))\n    print(check_opposite_sign(2, -2))\n    print(check_opposite_sign(2, -1))\n    print(check_opposite_sign(2, 1))"
    },
    {
      "rank": 13,
      "score": 9.234050852198141,
      "candidate": "def check_opposite_sign(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: bool\n    \"\"\"\n    return a * -1 < b\n\nif __name__ == \"__main__\":\n    print(check_opposite_sign(2, -2))\n    print(check_opposite_sign(2, -2))"
    },
    {
      "rank": 14,
      "score": 9.226766272351448,
      "candidate": "def check_sign(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: bool\n    \"\"\"\n    if a > 0 and b < 0 or a < 0 and b > 0:\n        return True\n    return False\n\nprint(check_sign(1, -1))\nprint(check_sign(-1, 1))\nprint(check_sign(1, -2))\nprint(check_sign(-1, -2))"
    },
    {
      "rank": 15,
      "score": 9.21346272767743,
      "candidate": "def oppositeSign(a, b):\n    if a < 0 and b > 0:\n        return True\n    elif a > 0 and b < 0:\n        return True\n    else:\n        return False\n\ndef main():\n    a = int(input(\"Enter the first integer: \"))\n    b = int(input(\"Enter the second integer: \"))\n    if oppositeSign(a, b):\n        print(\"Opposite sign\")\n    else:\n        print(\"No opposite sign\")\n\nmain()"
    },
    {
      "rank": 16,
      "score": 9.205959372648458,
      "candidate": "# The following is my solution\n# The problem is that I can't use \"if x > 0 and y > 0\" to check the two integers have opposite sign\n# I can use \"x < 0 and y < 0\" to check the two integers have opposite sign\n\ndef oppositeSign(x, y):\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n\n# The following is a more elegant solution\n# I can use \"x < 0 and y < 0\" to check the two integers have opposite sign\n# I can use \"x < 0 and y > 0\" to check the two integers have opposite sign\n# The problem is that I can't use \"if x > 0 and y > 0\" to check the two integers have opposite sign\n# I can use \"x < 0 and y < 0\" to check the two integers have opposite sign\n# I can use \"x < 0 and y < 0\" to check the two integers have opposite sign\n\ndef oppositeSign2(x, y):\n    if x < 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n\n# The following is a more elegant solution\n# I can use \"x < 0 and y < 0\" to check the two integers have opposite sign\n# I can use \"x < 0 and y > 0\" to check the two integers have opposite sign\n# The problem is that I can't use \"if x > 0 and y > 0\" to check the two integers have opposite sign\n# I can use \"x < 0 and y < 0\" to check the two integers have opposite sign\n# I can use \"x < 0 and y < 0\" to check the two integers have opposite sign\n\ndef oppositeSign3(x, y):\n    if x < 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n\n# The following is a more elegant solution\n# I can use \"x < 0 and y < 0\" to check the two integers have opposite sign\n# I can use \"x < 0 and y > 0\" to check the two integers have opposite sign"
    },
    {
      "rank": 17,
      "score": 9.183391466815202,
      "candidate": "def oppositeSign(a, b):\n    if a > 0 and b < 0:\n        return True\n    elif a < 0 and b > 0:\n        return True\n    else:\n        return False\n\ndef main():\n    a = input()\n    b = input()\n    if oppositeSign(a, b):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 8.973005557553902,
      "candidate": "def check_if_opposite(num1, num2):\n    return num1 < 0 and num2 > 0 or num1 > 0 and num2 < 0\n\nif __name__ == '__main__':\n    num1 = int(raw_input())\n    num2 = int(raw_input())\n    print check_if_opposite(num1, num2)"
    },
    {
      "rank": 19,
      "score": 8.932217008005624,
      "candidate": "import math\n\ndef oppositeSign(a, b):\n    if a < 0 and b > 0:\n        return True\n    elif a > 0 and b < 0:\n        return True\n    else:\n        return False\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(oppositeSign(a, b))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 20,
      "score": 8.910084504002544,
      "candidate": "def has_opposite_sign(a, b):\n    if a > 0 and b < 0:\n        return True\n    elif a < 0 and b > 0:\n        return True\n    else:\n        return False\n\nprint(has_opposite_sign(0, 0))\nprint(has_opposite_sign(0, 1))\nprint(has_opposite_sign(-1, 1))\nprint(has_opposite_sign(0, -1))\nprint(has_opposite_sign(-1, -1))"
    },
    {
      "rank": 21,
      "score": 8.855395696632057,
      "candidate": "def is_opposite(a, b):\n    if a > 0 and b < 0:\n        return True\n    elif a < 0 and b > 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print is_opposite(3, -3)"
    },
    {
      "rank": 22,
      "score": 8.850707355641543,
      "candidate": "class Solution(object):\n    def hasOppositeSign(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: bool\n        \"\"\"\n        return num1 * num2 < 0\n\ns = Solution()\nassert s.hasOppositeSign(-1, -2)\nassert s.hasOppositeSign(2, -2)\nassert s.hasOppositeSign(2, -1)\nassert s.hasOppositeSign(-2, 2)"
    },
    {
      "rank": 23,
      "score": 8.76828871349479,
      "candidate": "def is_opposite(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: bool\n    \"\"\"\n    if a < 0 and b > 0:\n        return True\n    elif a > 0 and b < 0:\n        return True\n    elif a == 0 and b == 0:\n        return True\n    else:\n        return False\n\n\n\nif __name__ == '__main__':\n    print is_opposite(2, -2)"
    },
    {
      "rank": 24,
      "score": 8.715724466237427,
      "candidate": "def check_sign(x, y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return False\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return False\n\ndef main():\n    x = int(raw_input())\n    y = int(raw_input())\n    print check_sign(x, y)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 8.632293453617281,
      "candidate": "def oppositeSign(a, b):\n    if a < 0 and b < 0:\n        return True\n    elif a > 0 and b > 0:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print oppositeSign(-1, 1)\n    print oppositeSign(1, -1)\n    print oppositeSign(1, 2)\n    print oppositeSign(2, 1)"
    },
    {
      "rank": 26,
      "score": 8.625262456968262,
      "candidate": "class Solution(object):\n    def oppositeSign(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        return a < 0 and b > 0 or a > 0 and b < 0\n\ndef main():\n    s = Solution()\n    print s.oppositeSign(-1, 1)\n    print s.oppositeSign(-1, 0)\n    print s.oppositeSign(1, 1)\n    print s.oppositeSign(1, 0)\n    print s.oppositeSign(1, -1)\n    print s.oppositeSign(-1, -1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.623000730200317,
      "candidate": "def opposite(a, b):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return a * -1 < b * -1"
    },
    {
      "rank": 28,
      "score": 8.616253589228675,
      "candidate": "def opposite_sign(a, b):\n    if a < 0 and b > 0:\n        return True\n    elif a > 0 and b < 0:\n        return True\n    else:\n        return False\n\nprint(opposite_sign(1, -1))\nprint(opposite_sign(-1, 1))\nprint(opposite_sign(1, 1))\nprint(opposite_sign(1, -1))"
    },
    {
      "rank": 29,
      "score": 8.610076160146226,
      "candidate": "def opposite_sign(x,y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n\nprint(opposite_sign(-5, -1))"
    },
    {
      "rank": 30,
      "score": 8.608819999274287,
      "candidate": "def opposite(x, y):\n    return (x * -1) - y\n\ndef main():\n    x = int(input(\"Enter the first integer: \"))\n    y = int(input(\"Enter the second integer: \"))\n    \n    if (x == 0) and (y == 0):\n        print(\"Both are zero\")\n    elif (x > 0) and (y > 0):\n        print(\"Both are positive\")\n    elif (x < 0) and (y < 0):\n        print(\"Both are negative\")\n    elif (x == 0) and (y == 0):\n        print(\"Both are zero\")\n    elif (x == 0) and (y < 0):\n        print(\"The first number is negative\")\n    elif (x < 0) and (y == 0):\n        print(\"The second number is negative\")\n    elif (x < 0) and (y < 0):\n        print(\"The first number is negative\")\n    elif (x < 0) and (y > 0):\n        print(\"The second number is negative\")\n    else:\n        print(\"Both are positive\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.60156811074208,
      "candidate": "def is_opposite(x, y):\n    \"\"\"\n    x and y are two integers.\n    Return true if the sign of x - y is opposite, false otherwise.\n    \"\"\"\n    return x * y > 0\n\nif __name__ == '__main__':\n    assert is_opposite(1, -1) is False\n    assert is_opposite(-1, 1) is True\n    assert is_opposite(2, -2) is False\n    assert is_opposite(2, 2) is False"
    },
    {
      "rank": 32,
      "score": 8.565425580227462,
      "candidate": "class Solution:\n    \"\"\"\n    @param num1, a number\n    @param num2, a number\n    @return a boolean\n    \"\"\"\n    def hasOppositeSign(self, num1, num2):\n        if (num1 < 0 and num2 < 0) or (num1 > 0 and num2 > 0):\n            return True\n        else:\n            return False\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.hasOppositeSign(-1, 1)\n    print s.hasOppositeSign(1, -1)\n    print s.hasOppositeSign(-1, -1)\n    print s.hasOppositeSign(1, -1)\n    print s.hasOppositeSign(1, -1)"
    },
    {
      "rank": 33,
      "score": 8.548876241946822,
      "candidate": "def check_sign(a, b):\n    return a * -1 if a < 0 and b > 0 else a * 1 if a > 0 and b < 0 else a * 0\n\nprint(check_sign(-1, 1))\nprint(check_sign(1, -1))\nprint(check_sign(-1, -1))\nprint(check_sign(1, 1))"
    },
    {
      "rank": 34,
      "score": 8.499905739299377,
      "candidate": "def opposite_sign(a, b):\n    return a < 0 and b > 0 or a > 0 and b < 0\n\nif __name__ == '__main__':\n    print opposite_sign(5, -5)"
    },
    {
      "rank": 35,
      "score": 8.490324832712195,
      "candidate": "#Write your code here\n\ndef is_opposite(n1, n2):\n    if n1 == 0 and n2 == 0:\n        return True\n    elif n1 == 0 and n2 < 0:\n        return True\n    elif n1 < 0 and n2 == 0:\n        return True\n    elif n1 < 0 and n2 < 0:\n        return False\n    return False\n\nprint is_opposite(-1, 1)\nprint is_opposite(1, -1)\nprint is_opposite(-1, -1)\nprint is_opposite(1, 1)"
    },
    {
      "rank": 36,
      "score": 8.48796797856353,
      "candidate": "def is_opposite(a, b):\n    if a > 0 and b > 0 or a < 0 and b < 0:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    if is_opposite(a, b):\n        print(\"Opposite Numbers\")\n    else:\n        print(\"Not Opposite Numbers\")"
    },
    {
      "rank": 37,
      "score": 8.478208546788407,
      "candidate": "def opposite_sign(x, y):\n    if x * y < 0:\n        return -1\n    else:\n        return 1\n\nprint opposite_sign(2, -1)"
    },
    {
      "rank": 38,
      "score": 8.408439383654278,
      "candidate": "def oppositeSign(x, y):\n    return x < 0 and y > 0 or x > 0 and y < 0\n\nprint \"Opposite sign:\", oppositeSign(3, -2)"
    },
    {
      "rank": 39,
      "score": 8.386620303250325,
      "candidate": "def opposite_sign(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: bool\n    \"\"\"\n    return (a > 0 and b < 0) or (a < 0 and b > 0)\n\nif __name__ == \"__main__\":\n    print(opposite_sign(1, -2))"
    },
    {
      "rank": 40,
      "score": 8.351614956112536,
      "candidate": "#!/usr/bin/python\n\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef check_sign(a, b):\n    if a < 0 and b < 0:\n        return 1\n    elif a > 0 and b > 0:\n        return 0\n    elif a < 0 and b > 0:\n        return -1\n    else:\n        return 1\n\n\ndef main():\n    a = int(sys.stdin.readline())\n    b = int(sys.stdin.readline())\n    print check_sign(a, b)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 8.334608500525688,
      "candidate": "def oppositeSign(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 42,
      "score": 8.331556294201176,
      "candidate": "def has_opposite_sign(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: bool\n    \"\"\"\n    if a < 0 and b > 0:\n        return True\n    elif a > 0 and b < 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    assert has_opposite_sign(-1, 1) is True\n    assert has_opposite_sign(1, -1) is True\n    assert has_opposite_sign(-1, -1) is False\n    assert has_opposite_sign(1, 1) is False\n    assert has_opposite_sign(1, 2) is False"
    },
    {
      "rank": 43,
      "score": 8.327375965969855,
      "candidate": "#!/usr/bin/env python\n\ndef is_opposite(a, b):\n    \"\"\"\n    a and b are two integers\n    return True if a and b have opposite sign\n    return False if a and b have same sign\n    \"\"\"\n    if a > 0 and b > 0:\n        return False\n    if a < 0 and b < 0:\n        return True\n    return False\n\nif __name__ == '__main__':\n    a = int(input('Please enter a: '))\n    b = int(input('Please enter b: '))\n    print(is_opposite(a, b))"
    },
    {
      "rank": 44,
      "score": 8.327367757082776,
      "candidate": "class Solution(object):\n    def oppositeSign(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        return a * -1 < b"
    },
    {
      "rank": 45,
      "score": 8.294940769211511,
      "candidate": "class Solution(object):\n    def oppositeSign(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: bool\n        \"\"\"\n        if num1 == 0 and num2 == 0:\n            return False\n        elif num1 == 0 or num2 == 0:\n            return True\n        if num1 > 0 and num2 < 0:\n            return True\n        elif num1 < 0 and num2 > 0:\n            return True\n        else:\n            return False"
    },
    {
      "rank": 46,
      "score": 8.2938925966498,
      "candidate": "#  The function is using the following algorithm to check for negative numbers:\n#  1. Check if the absolute value of the first number is greater than the second number.\n#  2. If the absolute value of the first number is greater than the second number, the numbers have opposite sign.\n#  3. If the absolute value of the first number is less than the second number, the numbers have opposite sign.\n#  4. If the absolute value of the first number is greater than or equal to the second number, the numbers have opposite sign.\n#  5. If the absolute value of the first number is less than or equal to the second number, the numbers have opposite sign.\n#  In this way, the numbers have opposite sign if the absolute value of the first number is greater than the second number.\n#  Return True or False.\n\ndef oppositeSign(n1, n2):\n    if n1 >= 0 and n2 < 0:\n        return True\n    elif n1 < 0 and n2 >= 0:\n        return True\n    elif n1 < 0 and n2 <= 0:\n        return True\n    elif n1 >= 0 and n2 >= 0:\n        return False\n    else:\n        return False\n\nprint oppositeSign(-1, 1)\nprint oppositeSign(-1, -1)\nprint oppositeSign(1, -1)\nprint oppositeSign(1, 1)\nprint oppositeSign(1, 0)\nprint oppositeSign(1, -1)\nprint oppositeSign(-1, 0)\nprint oppositeSign(-1, 1)\nprint oppositeSign(-1, -1)\nprint oppositeSign(0, 0)\nprint oppositeSign(0, 1)\nprint oppositeSign(0, -1)\nprint oppositeSign(1, 0)\nprint oppositeSign(1, 1)\nprint oppositeSign(1, -1)\nprint oppositeSign(-1, 0)\nprint oppositeSign(-1, 1)\nprint oppositeSign(-1, -1)\nprint oppositeSign(0, 0)\nprint oppositeSign(0, 1)\nprint oppositeSign(0, -1)\nprint oppositeSign(1, 0)\nprint oppositeSign(1, 1)\nprint oppositeSign(1, -1)\nprint oppositeSign(-1, 0)\nprint oppositeSign"
    },
    {
      "rank": 47,
      "score": 8.289838256518838,
      "candidate": "def opposite(a, b):\n    return (a * -1) == (b * -1)\n\nif __name__ == '__main__':\n    print opposite(1, -1)"
    },
    {
      "rank": 48,
      "score": 8.251903304236286,
      "candidate": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        # sort s and t\n        ss = sorted(s)\n        tt = sorted(t)\n        # check whether s and t have the same length\n        if len(ss)!= len(tt):\n            return False\n        # check whether s and t are anagram\n        for i in range(len(ss)):\n            if ss[i]!= tt[i]:\n                return False\n        return True"
    },
    {
      "rank": 49,
      "score": 8.212735598038213,
      "candidate": "def is_opposite(x,y):\n    return (x < 0 and y < 0) or (x > 0 and y > 0)\n\nif __name__ == \"__main__\":\n    x = input()\n    y = input()\n    print(is_opposite(x,y))"
    },
    {
      "rank": 50,
      "score": 8.193565922652176,
      "candidate": "class Solution(object):\n    def isOpposite(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        return a*b < 0 and b*a < 0\n\nif __name__ == \"__main__\":\n    Solution().isOpposite(0, 1)\n    Solution().isOpposite(-1, 1)\n    Solution().isOpposite(-1, -1)\n    Solution().isOpposite(1, -1)\n    Solution().isOpposite(1, 1)"
    },
    {
      "rank": 51,
      "score": 8.185309335307622,
      "candidate": "def opposite_sign(a, b):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    :param a: first integer\n    :param b: second integer\n    :return: True if the two integers have opposite sign, else False\n    \"\"\"\n    if a < 0 and b > 0:\n        return True\n    elif a > 0 and b < 0:\n        return True\n    elif a == 0 and b == 0:\n        return False\n    else:\n        return False\n\nprint(opposite_sign(-1, -2))\nprint(opposite_sign(1, 2))"
    },
    {
      "rank": 52,
      "score": 8.179564342560925,
      "candidate": "#  @return boolean\ndef opposite(a, b):\n    if a < 0 and b > 0:\n        return True\n    if a > 0 and b < 0:\n        return True\n    if a < 0 and b < 0:\n        return True\n    if a > 0 and b > 0:\n        return True\n    return False\n\nif __name__ == '__main__':\n    print opposite(5, -5)"
    },
    {
      "rank": 53,
      "score": 8.172253082181854,
      "candidate": "def check_oppose(a, b):\n    if a < 0 and b > 0:\n        return True\n    elif a > 0 and b < 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print check_oppose(1, -1)"
    },
    {
      "rank": 54,
      "score": 8.144125099485041,
      "candidate": "class Solution(object):\n    def oppositeSign(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: bool\n        \"\"\"\n        return num1 * num2 < 0 or num2 * num1 < 0"
    },
    {
      "rank": 55,
      "score": 8.143591138329747,
      "candidate": "#!/usr/bin/env python\n\ndef opposite(n1,n2):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n    :param n1: an integer\n    :param n2: another integer\n    :return: a boolean\n    \"\"\"\n    if n1 < 0 and n2 > 0:\n        return True\n    elif n1 > 0 and n2 < 0:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print opposite(1, -1)\n    print opposite(1, 1)\n    print opposite(-1, 1)\n    print opposite(1, -1)\n    print opposite(-1, -1)\n    print opposite(-1, 1)\n    print opposite(1, -1)\n    print opposite(-1, -1)\n    print opposite(1, 1)"
    },
    {
      "rank": 56,
      "score": 8.121884567141883,
      "candidate": "class Solution(object):\n    def isOpposite(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        return a * b < 0"
    },
    {
      "rank": 57,
      "score": 8.105983444291466,
      "candidate": "class Solution(object):\n    def oppositeSign(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        return a < 0!= b < 0"
    },
    {
      "rank": 58,
      "score": 8.024835682833125,
      "candidate": "def check_sign(a, b):\n    \"\"\"\n    :param a: a positive integer\n    :param b: a positive integer\n    :return: True if a and b have opposite sign, False otherwise\n    \"\"\"\n    if a < 0 and b < 0:\n        return True\n    if a > 0 and b > 0:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print check_sign(-2, -3)\n    print check_sign(3, -3)\n    print check_sign(-3, 3)\n    print check_sign(3, 3)\n    print check_sign(0, 1)\n    print check_sign(1, 0)\n    print check_sign(0, 0)\n    print check_sign(1, 1)"
    },
    {
      "rank": 59,
      "score": 7.8912769574414305,
      "candidate": "def has_opposite_sign(a, b):\n    if a * b < 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print has_opposite_sign(-1, -2)"
    },
    {
      "rank": 60,
      "score": 7.868947655733293,
      "candidate": "def opposite_sign(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    :param x: The first number.\n    :param y: The second number.\n    :return: True if the two numbers have opposite sign, otherwise False.\n    \"\"\"\n    return x > 0 and y < 0 or x < 0 and y > 0\n\nif __name__ == \"__main__\":\n    assert opposite_sign(0, 0) == False\n    assert opposite_sign(0, -1) == True\n    assert opposite_sign(0, -2) == True\n    assert opposite_sign(-1, 0) == False\n    assert opposite_sign(-1, -1) == True\n    assert opposite_sign(-1, -2) == True\n    assert opposite_sign(-2, 0) == False\n    assert opposite_sign(-2, -1) == True\n    assert opposite_sign(-2, -2) == True"
    },
    {
      "rank": 61,
      "score": 7.834022619458933,
      "candidate": "def opposite(a, b):\n    return a * -1 == b * -1\n\n# your code goes here\ndef main():\n    print(opposite(1, -1))\n    print(opposite(1, -2))\n    print(opposite(1, -3))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 7.738292593776799,
      "candidate": "def is_opposite_sign(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: bool\n    \"\"\"\n    if a > 0 and b > 0:\n        return False\n    elif a < 0 and b < 0:\n        return False\n    else:\n        return True\n\nif __name__ == '__main__':\n    print is_opposite_sign(1, -1)\n    print is_opposite_sign(1, 1)\n    print is_opposite_sign(-1, 1)\n    print is_opposite_sign(-1, -1)\n    print is_opposite_sign(1, 2)\n    print is_opposite_sign(-1, 2)\n    print is_opposite_sign(1, -2)\n    print is_opposite_sign(-1, -2)\n    print is_opposite_sign(1, -2)\n    print is_opposite_sign(-1, -2)"
    },
    {
      "rank": 63,
      "score": 7.7320703513377165,
      "candidate": "def check_opposite(a, b):\n    return a * -1 == b\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(check_opposite(a, b))"
    },
    {
      "rank": 64,
      "score": 7.562924366763077,
      "candidate": "def is_opposite(x, y):\n    return x * y < 0\n\nprint is_opposite(10, -10)\nprint is_opposite(-10, 10)\nprint is_opposite(10, -10)\nprint is_opposite(-10, 10)"
    },
    {
      "rank": 65,
      "score": 7.4878043221155455,
      "candidate": "def oppositeSign(x, y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return False\n    elif x > 0 and y < 0:\n        return False\n    else:\n        return False\n    \nif __name__ == \"__main__\":\n    x = int(input())\n    y = int(input())\n    print(oppositeSign(x, y))"
    },
    {
      "rank": 66,
      "score": 7.464609382504557,
      "candidate": "# Definition for an integer.\nclass Integer:\n    def __init__(self, x):\n        self.value = x\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n    def __str__(self):\n        return str(self.value)\n\nclass Solution(object):\n    def hasOppositeSign(self, num1, num2):\n        \"\"\"\n        :type num1: Integer\n        :type num2: Integer\n        :rtype: bool\n        \"\"\"\n        if num1 < 0 and num2 < 0:\n            return True\n        elif num1 > 0 and num2 > 0:\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.hasOppositeSign(Integer(1), Integer(-1))\n    print s.hasOppositeSign(Integer(-1), Integer(1))\n    print s.hasOppositeSign(Integer(-1), Integer(-1))\n    print s.hasOppositeSign(Integer(1), Integer(-2))\n    print s.hasOppositeSign(Integer(-1), Integer(2))\n    print s.hasOppositeSign(Integer(1), Integer(2))\n    print s.hasOppositeSign(Integer(-1), Integer(1))\n    print s.hasOppositeSign(Integer(-1), Integer(2))\n    print s.hasOppositeSign(Integer(1), Integer(2))"
    },
    {
      "rank": 67,
      "score": 3.4983205814333282,
      "candidate": "def check_if_opposite(x, y):\n    if (x * y) > 0:\n        return False\n    else:\n        return True\n\n# Your check_if_opposite function should first check if the numbers are negative.\n# If they are negative, return False.\n# If they are positive, return True.\n\n# The following function is to test your check_if_opposite function.\n\n# x = -5\n# y = 4\n# print(check_if_opposite(x, y))\n# x = 4\n# y = -5\n# print(check_if_opposite(x, y))\n\n# x = 4\n# y = -5\n# print(check_if_opposite(x, y))"
    },
    {
      "rank": 68,
      "score": 3.46112160971408,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {boolean}\n    def hasOppositeSign(self, x, y):\n        if x > 0 and y < 0:\n            return True\n        elif x < 0 and y > 0:\n            return True\n        elif x < 0 and y < 0:\n            return True\n        elif x > 0 and y > 0:\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.hasOppositeSign(0, 1))\n    print(s.hasOppositeSign(0, -1))\n    print(s.hasOppositeSign(-1, 0))\n    print(s.hasOppositeSign(-1, -1))\n    print(s.hasOppositeSign(1, 0))\n    print(s.hasOppositeSign(1, -1))\n    print(s.hasOppositeSign(1, 1))"
    },
    {
      "rank": 69,
      "score": 3.3505398376486233,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def hasOppositeSign(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        if l1 is None and l2 is None:\n            return False\n        if l1 is None and l2 is not None:\n            return True\n        if l1 is not None and l2 is None:\n            return False\n        if l1.val == -l2.val:\n            return True\n        return False\n\nif __name__ == \"__main__\":\n    s = Solution()\n    l1 = ListNode(-2)\n    l2 = ListNode(-3)\n    l1.next = l2\n    print s.hasOppositeSign(l1, l2)\n    l1 = ListNode(1)\n    l2 = ListNode(1)\n    l1.next = l2\n    print s.hasOppositeSign(l1, l2)"
    },
    {
      "rank": 70,
      "score": 3.341201185283288,
      "candidate": "# Definition for an integer.\n# class Integer(object):\n#     def __init__(self, x):\n#         self.x = x\n#         self.is_negative = False\n\nclass Solution(object):\n    def checkParity(self, x, y):\n        \"\"\"\n        :type x: Integer\n        :type y: Integer\n        :rtype: bool\n        \"\"\"\n        if x.is_negative!= y.is_negative:\n            return x.is_negative\n        return not (x.x ^ y.x)"
    },
    {
      "rank": 71,
      "score": 3.311236720018705,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def hasOppositeSigns(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return False\n        return self.hasOppositeSignsHelper(root, True, False)\n\n    def hasOppositeSignsHelper(self, root, hasPositive, hasNegative):\n        if root is None:\n            return False\n        if hasPositive == hasNegative:\n            return False\n        else:\n            hasPositive = self.hasOppositeSignsHelper(root.left, True, False)\n            hasNegative = self.hasOppositeSignsHelper(root.right, False, True)\n            return hasPositive or hasNegative"
    },
    {
      "rank": 72,
      "score": 3.279665270115084,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n    def hasOppositeSigns(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        return self.hasOppositeSigns(root.left) ^ self.hasOppositeSigns(root.right)"
    },
    {
      "rank": 73,
      "score": 3.260927807911989,
      "candidate": "# write your code here\ndef check_opposite_sign(a, b):\n    return abs(a) == abs(b) and a < 0 == b < 0\n\nprint(check_opposite_sign(1, -1))\nprint(check_opposite_sign(-1, 1))\nprint(check_opposite_sign(1, 1))\nprint(check_opposite_sign(-1, -1))"
    },
    {
      "rank": 74,
      "score": 3.2510786371984395,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {ListNode} l1\n    # @param {ListNode} l2\n    # @return {boolean}\n    def hasOppositeSign(self, l1, l2):\n        if l1 is None and l2 is None:\n            return False\n        if l1 is None or l2 is None:\n            return True\n        if l1.val == -l2.val:\n            return True\n        return False\n\ns = Solution()\nl1 = ListNode(1)\nl2 = ListNode(1)\nl1.next = l2\n\nprint s.hasOppositeSign(l1, l1)"
    },
    {
      "rank": 75,
      "score": 3.207969938205895,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution:\n    \"\"\"\n    @param: head: The first node of linked list.\n    @param: val: an integer\n    @return: a boolean\n    \"\"\"\n    def hasCycle(self, head):\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = head.next\n\n    s = Solution()\n    print s.hasCycle(head)"
    },
    {
      "rank": 76,
      "score": 3.1688828120238193,
      "candidate": "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {boolean}\n    def isNegative(self, x, y):\n        return x < 0 and y < 0 or x > 0 and y > 0\n\n    # @param {integer} x\n    # @param {integer} y\n    # @return {boolean}\n    def isSameSign(self, x, y):\n        return x == y or x < 0 and y < 0 or x > 0 and y > 0\n\n    # @param {integer} x\n    # @param {integer} y\n    # @return {boolean}\n    def isDifferentSign(self, x, y):\n        return x!= y and x < 0 and y < 0 or x!= y and x > 0 and y > 0\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.isNegative(10, -10))\n    print(sol.isSameSign(10, -10))\n    print(sol.isDifferentSign(10, -10))"
    },
    {
      "rank": 77,
      "score": 3.122874505872861,
      "candidate": "class Solution:\n    # @return a boolean\n    def hasOppositeSign(self, x, y):\n        return (x > 0 and y < 0) or (x < 0 and y > 0)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.hasOppositeSign(1, 2)\n    print s.hasOppositeSign(-1, 2)\n    print s.hasOppositeSign(1, -2)\n    print s.hasOppositeSign(-1, -2)\n    print s.hasOppositeSign(1, 2)\n    print s.hasOppositeSign(-1, 2)"
    },
    {
      "rank": 78,
      "score": 3.1101885495942305,
      "candidate": "def has_opposite_sign(a, b):\n    if a > 0 and b < 0:\n        return True\n    elif a < 0 and b > 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert has_opposite_sign(2, -2) == True, \"Test #1\"\n    assert has_opposite_sign(2, 1) == True, \"Test #2\"\n    assert has_opposite_sign(2, -1) == True, \"Test #3\"\n    assert has_opposite_sign(2, 0) == False, \"Test #4\"\n    assert has_opposite_sign(2, 3) == False, \"Test #5\""
    },
    {
      "rank": 79,
      "score": 3.066932820195502,
      "candidate": "class Solution:\n    \"\"\"\n    @param x, y: Two integer\n    @return: True if x and y have opposite sign, otherwise False\n    \"\"\"\n    def haveOppositeSign(self, x, y):\n        return x*y < 0\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.haveOppositeSign(2, -2))\n    print(sol.haveOppositeSign(-2, 2))\n    print(sol.haveOppositeSign(-2, -2))\n    print(sol.haveOppositeSign(2, 2))"
    },
    {
      "rank": 80,
      "score": 3.0582652156045897,
      "candidate": "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution(object):\n    def haveOppositeSign(self, A, B):\n        \"\"\"\n        :type A: List[Interval]\n        :type B: List[Interval]\n        :rtype: bool\n        \"\"\"\n        if len(A) == 0 and len(B) == 0:\n            return False\n        elif len(A) == 0 or len(B) == 0:\n            return True\n        else:\n            def isSameSign(a, b):\n                return a.start <= b.start and a.end >= b.end\n            return isSameSign(A[0], B[0]) and isSameSign(A[0], B[1]) and isSameSign(A[1], B[0]) and isSameSign(A[1], B[1])"
    },
    {
      "rank": 81,
      "score": 2.9954109435891025,
      "candidate": "def check_opposite_sign(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: bool\n    \"\"\"\n    return a > 0 and b < 0 or a < 0 and b > 0\n\nif __name__ == '__main__':\n    assert check_opposite_sign(1, -2)\n    assert not check_opposite_sign(1, 2)\n    assert not check_opposite_sign(-1, 2)\n    assert not check_opposite_sign(1, -2)"
    },
    {
      "rank": 82,
      "score": 2.9878191467026163,
      "candidate": "# The function returns true if the given two integers have opposite sign.\n# The function should be written in such a way that the time complexity is O(1).\n\n# Example 1:\n# Input: -1, 2\n# Output: True\n# Example 2:\n# Input: 1, -2\n# Output: True\n# Example 3:\n# Input: 1, 0\n# Output: False\n# Example 4:\n# Input: -1, -2\n# Output: False\n# Note:\n# The given integers will always be non-negative integers.\n# The given integers will not exceed 100,000.\n\nclass Solution(object):\n    def hasOppositeSigns(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        return a > 0!= b > 0"
    },
    {
      "rank": 83,
      "score": 2.9529901376017973,
      "candidate": "# -*- coding:utf-8 -*-\nclass Solution:\n    def isOpposite(self, num1, num2):\n        if num1 == 0 and num2 == 0:\n            return True\n        if num1 < 0 and num2 > 0:\n            return True\n        if num1 > 0 and num2 < 0:\n            return True\n        return False\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isOpposite(1, 2)\n    print s.isOpposite(-1, 2)\n    print s.isOpposite(1, -2)\n    print s.isOpposite(-1, -2)\n    print s.isOpposite(0, 0)\n    print s.isOpposite(2, -2)\n    print s.isOpposite(2, 2)\n    print s.isOpposite(0, -1)\n    print s.isOpposite(-1, 2)\n    print s.isOpposite(-2, -1)"
    },
    {
      "rank": 84,
      "score": 2.9008241250702858,
      "candidate": "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {boolean}\n    def isNegative(self, x, y):\n        return (x ^ y) < 0\n\nif __name__ == '__main__':\n    assert Solution().isNegative(1, 2) == False\n    assert Solution().isNegative(-1, 2) == True\n    assert Solution().isNegative(1, -2) == True\n    assert Solution().isNegative(-1, -2) == False\n    assert Solution().isNegative(0, 0) == False"
    },
    {
      "rank": 85,
      "score": 2.8433828178736724,
      "candidate": "class Solution:\n    # @param a, a positive integer\n    # @param b, a positive integer\n    # @return a boolean\n    def haveOppositeSign(self, a, b):\n        if a > 0 and b < 0:\n            return True\n        elif a < 0 and b > 0:\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.haveOppositeSign(2, -2))"
    },
    {
      "rank": 86,
      "score": 2.8416518837861124,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python"
    },
    {
      "rank": 87,
      "score": 2.8403787087821164,
      "candidate": "# https://leetcode.com/problems/check-if-two-integers-have-opposite-sign/discuss/3033/Python-solution-with-comments\n# https://leetcode.com/problems/check-if-two-integers-have-opposite-sign/discuss/3033/Python-solution-with-comments\n\nclass Solution(object):\n    def isOppositeSign(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: bool\n        \"\"\"\n        return num1 * num2 < 0"
    },
    {
      "rank": 88,
      "score": 2.8370807591326015,
      "candidate": "def check_sign(x, y):\n    return x*x < y*y\n\ndef test_case(x, y):\n    return check_sign(x, y)\n\nprint(test_case(2, -3))\nprint(test_case(3, -2))\nprint(test_case(-3, 2))\nprint(test_case(-3, -2))\nprint(test_case(0, 0))\nprint(test_case(1, 0))\nprint(test_case(-1, 0))\nprint(test_case(1, 1))\nprint(test_case(-1, -1))\nprint(test_case(0, 0))\nprint(test_case(1, 1))\nprint(test_case(-1, -1))\nprint(test_case(1, -1))\nprint(test_case(-1, 1))\nprint(test_case(1, -2))\nprint(test_case(-1, 2))\nprint(test_case(1, -3))\nprint(test_case(-1, 3))\nprint(test_case(1, -4))\nprint(test_case(-1, 4))\nprint(test_case(1, -5))\nprint(test_case(-1, 5))\nprint(test_case(1, -6))\nprint(test_case(-1, 6))\nprint(test_case(1, -7))\nprint(test_case(-1, 7))\nprint(test_case(1, -8))\nprint(test_case(-1, 8))\nprint(test_case(1, -9))\nprint(test_case(-1, 9))\nprint(test_case(1, -10))\nprint(test_case(-1, 10))"
    },
    {
      "rank": 89,
      "score": 2.808822240058069,
      "candidate": "def check_opposite(a, b):\n    if a > 0 and b < 0:\n        return True\n    elif a < 0 and b > 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(check_opposite(3, -3))\n    print(check_opposite(3, -4))\n    print(check_opposite(-3, 3))\n    print(check_opposite(-3, -4))\n    print(check_opposite(-3, 0))\n    print(check_opposite(-3, 1))\n    print(check_opposite(-3, -1))\n    print(check_opposite(0, 1))\n    print(check_opposite(0, -1))\n    print(check_opposite(0, 2))\n    print(check_opposite(0, -2))\n    print(check_opposite(0, 3))\n    print(check_opposite(0, -3))\n    print(check_opposite(0, 4))\n    print(check_opposite(0, -4))\n    print(check_opposite(0, 5))\n    print(check_opposite(0, -5))\n    print(check_opposite(0, 6))\n    print(check_opposite(0, -6))\n    print(check_opposite(0, 7))\n    print(check_opposite(0, -7))\n    print(check_opposite(0, 8))\n    print(check_opposite(0, -8))\n    print(check_opposite(0, 9))\n    print(check_opposite(0, -9))\n    print(check_opposite(0, 10))\n    print(check_opposite(0, -10))\n    print(check_opposite(0, 11))\n    print(check_opposite(0, -11))\n    print(check_opposite(0, 12))\n    print(check_opposite(0, -12))\n    print(check_opposite(0, 13))\n    print(check_opposite(0, -13))\n    print("
    },
    {
      "rank": 90,
      "score": 2.755252969145799,
      "candidate": "class Solution:\n    \"\"\"\n    @param a, b: Two integers\n    @return: True if they have opposite sign, otherwise False\n    \"\"\"\n    def haveOppositeSign(self, a, b):\n        if a > 0 and b < 0:\n            return True\n        elif a < 0 and b > 0:\n            return True\n        elif a == 0 and b == 0:\n            return False\n        else:\n            return False\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.haveOppositeSign(0, 0)\n    print solution.haveOppositeSign(0, -1)\n    print solution.haveOppositeSign(-1, 0)\n    print solution.haveOppositeSign(-1, -1)"
    },
    {
      "rank": 91,
      "score": 2.7251121750163163,
      "candidate": "class Solution(object):\n    \"\"\"\n    @param: a, b: two integers\n    @return: a boolean\n    \"\"\"\n    def hasOppositeSign(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        if a > 0 and b < 0:\n            return True\n        elif a < 0 and b > 0:\n            return True\n        else:\n            return False\n\n\nif __name__ == '__main__':\n    a = Solution()\n    a.hasOppositeSign(1, -2)\n    a.hasOppositeSign(1, -1)\n    a.hasOppositeSign(1, 0)\n    a.hasOppositeSign(1, 1)\n    a.hasOppositeSign(1, 2)\n    a.hasOppositeSign(1, -3)\n    a.hasOppositeSign(-1, -2)\n    a.hasOppositeSign(-1, -1)\n    a.hasOppositeSign(-1, 0)\n    a.hasOppositeSign(-1, 1)\n    a.hasOppositeSign(-1, 2)\n    a.hasOppositeSign(-1, -3)"
    },
    {
      "rank": 92,
      "score": 2.6912718143227883,
      "candidate": "class Solution(object):\n    def checkParity(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        if a > 0 and b > 0:\n            return True\n        if a < 0 and b < 0:\n            return True\n        if a == 0 and b == 0:\n            return True\n        return False"
    },
    {
      "rank": 93,
      "score": 2.655637419086296,
      "candidate": "def is_opposite(a, b):\n    return a < 0 and b > 0 or a > 0 and b < 0\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([-1, 1], [1, 1]),\n        ([-1, 1], [1, -1]),\n        ([-1, 1], [-1, -1]),\n        ([-1, 1], [-1, 1]),\n        ([-1, 1], [1, -2]),\n        ([-1, 1], [1, 2]),\n        ([-1, 1], [-1, 2]),\n        ([-1, 1], [-1, -2]),\n        ([-1, 1], [-1, -1]),\n    ]\n\n    for a, b in test_cases:\n        result = is_opposite(a, b)\n        print(\"is_opposite({}, {}) = {}\".format(a, b, result))"
    },
    {
      "rank": 94,
      "score": 2.640378284154994,
      "candidate": "import math\n\n\ndef opposite(x, y):\n    return math.copysign(x, y)!= 1\n\n\ndef main():\n    assert opposite(-1, -1)\n    assert not opposite(0, -1)\n    assert not opposite(0, 1)\n    assert not opposite(-1, 0)\n    assert opposite(-1, -2)\n    assert opposite(2, -1)\n    assert opposite(-2, 1)\n    assert not opposite(1, 1)\n    assert not opposite(1, 2)\n    assert opposite(2, 1)\n    assert opposite(1, 2)\n    assert opposite(1, -1)\n    assert opposite(-1, 1)\n    assert opposite(-1, -1)\n    assert not opposite(0, 1)\n    assert not opposite(0, 2)\n    assert opposite(2, 0)\n    assert opposite(2, -1)\n    assert not opposite(1, 1)\n    assert not opposite(1, 2)\n    assert not opposite(2, 1)\n    assert not opposite(1, 2)\n    assert not opposite(1, -1)\n    assert opposite(-1, 1)\n    assert opposite(-1, -1)\n    assert not opposite(0, 1)\n    assert not opposite(0, 2)\n    assert opposite(2, 0)\n    assert opposite(2, -1)\n    assert not opposite(1, 1)\n    assert not opposite(1, 2)\n    assert not opposite(2, 1)\n    assert not opposite(1, 2)\n    assert not opposite(1, -1)\n    assert opposite(-1, 1)\n    assert opposite(-1, -1)\n    assert not opposite(0, 1)\n    assert not opposite(0, 2)\n    assert opposite(2, 0)\n    assert opposite(2, -1)\n    assert not opposite(1, 1)\n    assert not opposite(1, 2)\n    assert not opposite(2, 1)\n    assert not opposite(1, 2)\n    assert not opposite(1, -1)\n    assert opposite(-1, 1)\n    assert opposite(-1, -1)\n    assert not opposite(0, 1)\n    assert not opposite("
    },
    {
      "rank": 95,
      "score": 2.593289747812572,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n    def hasOppositeSigns(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        return self.hasOppositeSignsHelper(root, root)\n\n    def hasOppositeSignsHelper(self, left, right):\n        if not left and not right:\n            return True\n        elif not left or not right:\n            return False\n        elif left.val == right.val:\n            return self.hasOppositeSignsHelper(left.left, right.right) or self.hasOppositeSignsHelper(left.right, right.left)\n        else:\n            return False\n\n\ndef main():\n    sol = Solution()\n    root = TreeNode(1)\n    root.left = TreeNode(-1)\n    root.right = TreeNode(1)\n    print sol.hasOppositeSigns(root)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 96,
      "score": 2.5484167433745335,
      "candidate": "#!/usr/bin/env python\n\n# write your code here\n\n\ndef opposite_sign(x, y):\n    return (x > 0 and y < 0) or (x < 0 and y > 0)\n\n\nif __name__ == \"__main__\":\n    x = 0\n    y = 0\n\n    print(opposite_sign(x, y))"
    },
    {
      "rank": 97,
      "score": 2.4973025232750747,
      "candidate": "def opposite(x, y):\n    return x * -1 < y\n\n# Your Opposite function should return true if x and y have opposite sign,\n# and false otherwise.\n\n# Hint:\n# - Use the same variable x and y in your function.\n# - You might want to compare x and y with \"==\" or \"!=\" instead of \">=\" and \"<=\".\n# - The result of the comparison should be the same as using the operator.\n# - If you are not familiar with the operator, you can use the operator \"+\" and \"-\"\n# to compare two numbers.\n\n# Note:\n# - x and y are integers in the range [-10, 10].\n# - The input x and y are guaranteed to be the same length.\n# - You may assume that x and y is always in the range [-10, 10].\n# - The answer will be in the range [0, 1].\n# - You can assume that the function will never be called with the inputs (0, 0).\n\ndef opposite_solution(x, y):\n    return x * -1 < y"
    },
    {
      "rank": 98,
      "score": 2.413527936945569,
      "candidate": "# 1. Write a function, check_opposite_sign(a, b), to check whether the given two integers have opposite sign or not.\n\n# 2. Write a function, check_opposite_sign_2(a, b), to check whether the given two integers have opposite sign or not.\n\n# 3. Write a function, check_opposite_sign_3(a, b), to check whether the given two integers have opposite sign or not.\n\n# 4. Write a function, check_opposite_sign_4(a, b), to check whether the given two integers have opposite sign or not.\n\n# 5. Write a function, check_opposite_sign_5(a, b), to check whether the given two integers have opposite sign or not.\n\n# 6. Write a function, check_opposite_sign_6(a, b), to check whether the given two integers have opposite sign or not.\n\n# 7. Write a function, check_opposite_sign_7(a, b), to check whether the given two integers have opposite sign or not.\n\n# 8. Write a function, check_opposite_sign_8(a, b), to check whether the given two integers have opposite sign or not.\n\n# 9. Write a function, check_opposite_sign_9(a, b), to check whether the given two integers have opposite sign or not.\n\n# 10. Write a function, check_opposite_sign_10(a, b), to check whether the given two integers have opposite sign or not.\n\n# 11. Write a function, check_opposite_sign_11(a, b), to check whether the given two integers have opposite sign or not.\n\n# 12. Write a function, check_opposite_sign_12(a, b), to check whether the given two integers have opposite sign or not.\n\n# 13. Write a function, check_opposite_sign_13(a, b), to check whether the given two integers have opposite sign or not.\n\n# 14. Write a function, check_opposite_sign_14(a, b), to check whether the given two integers have opposite sign or not.\n\n# 15. Write a function, check_opposite_sign_15(a, b), to check whether"
    },
    {
      "rank": 99,
      "score": 2.3242265690356962,
      "candidate": "# https://www.hackerrank.com/challenges/twosum/problem\n\nimport unittest\n\n\ndef twosum(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: bool\n    \"\"\"\n    return a * 2 < b and b * 2 < a\n\n\nclass TestCode(unittest.TestCase):\n    def test_twosum(self):\n        self.assertTrue(twosum(2, -2))\n        self.assertTrue(twosum(0, 0))\n        self.assertFalse(twosum(-2, 2))\n        self.assertFalse(twosum(2, -2))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 100,
      "score": 2.109286664609487,
      "candidate": "class Solution(object):\n    def checkParity(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        return a == -b or b == -a\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.checkParity(1, -1)\n    print sol.checkParity(1, 2)\n    print sol.checkParity(-1, -2)\n    print sol.checkParity(-1, 1)\n    print sol.checkParity(1, -1)"
    }
  ]
}