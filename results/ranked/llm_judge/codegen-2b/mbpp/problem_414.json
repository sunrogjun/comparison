{
  "timestamp": "2025-09-14T20:26:37.890162",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 414,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def sublistCount(self, head, target):\n        \"\"\"\n        :type head: ListNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        def count(head, target):\n            if not head:\n                return 0\n            count1 = count(head.next, target)\n            count2 = 0\n            while head.next:\n                if head.val == target:\n                    count2 += 1\n                head = head.next\n            return count1 + count2\n        return count(head, target)\n\n\na = ListNode(1)\nb = ListNode(2)\nc = ListNode(3)\na.next = b\nb.next = c\nprint Solution().sublistCount(a, 2)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def countSublistsWithElement(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: int\n        \"\"\"\n        \n        # Recursive approach\n        # print(\"Recursive\")\n        count = 0\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if fast and fast.val == val:\n                count += 1\n            elif fast and fast.val > val:\n                break\n        while slow:\n            fast = slow.next\n            if fast and fast.val == val:\n                count += 1\n            elif fast and fast.val > val:\n                break\n            slow = slow.next\n        return count\n        \n        # Iterative approach\n        # print(\"Iterative\")\n        count = 0\n        slow = head\n        while slow:\n            if slow.val == val:\n                count += 1\n            slow = slow.next\n        return count\n        \n        # DFS approach\n        # print(\"DFS\")\n        count = 0\n        slow = head\n        while slow:\n            if slow.val == val:\n                count += 1\n            slow = slow.next\n        return count\n        \n        # DP approach\n        # print(\"DP\")\n        count = 0\n        slow = head\n        while slow:\n            if slow.val == val:\n                count += 1\n            slow = slow.next\n        return count\n        \n        # DP approach\n        # print(\"DP\")\n        count = 0\n        slow = head\n        while slow:\n            if slow.val == val:\n                count += 1\n            slow = slow.next\n        return count\n        \n        # DP approach\n        # print(\"DP\")\n        count = 0\n        slow = head\n        while slow:\n            if slow.val == val:\n                count += 1\n            slow = slow.next\n        return count"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_sublists(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j]:\n                if j + 1 >= target:\n                    count += 1\n    return count\n\ndef main():\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(count_sublists(arr, 2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/sublist-size\n# https://www.hackerrank.com/challenges/sublist-size/problem\n\ndef sublist_size(arr, elem):\n    \"\"\"\n    Args:\n        arr: The list of integers.\n        elem: The element to find in the list.\n\n    Returns: The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    # Iterate through the array.\n    for i in range(0, len(arr)):\n        # If the element is in the sublist, increment the count.\n        if arr[i] == elem:\n            count += 1\n        # If the element is not in the sublist, check if the next sublist contains the element.\n        elif i < len(arr) - 1 and arr[i] == arr[i+1]:\n            count += sublist_size(arr[i+1:], elem)\n    return count"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/subset-sum\ndef countSubsetSum(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    arr = [4, 1, 2, 3]\n    target = 5\n    print(countSubsetSum(arr, target))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\nclass Solution:\n    def countSublistsWithTarget(self, listToCount: List[List[int]], target: int) -> int:\n        if not listToCount:\n            return 0\n        count = 0\n        for i in range(len(listToCount)):\n            if listToCount[i] == target:\n                count += 1\n                for j in range(i+1, len(listToCount)):\n                    if listToCount[j] == target:\n                        count += 1\n        return count"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def sublist_count(lst, target):\n    \"\"\"\n    :type lst: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    return len([x for x in lst if x == target])\n\n# Your Solution here\n\n# Your code will be graded by the challenge tests."
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def findSubList(arr, target):\n    \n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    \n    if not arr:\n        return 0\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = left + (right - left) / 2\n\n        if arr[mid] == target:\n            return 1 + findSubList(arr[left:mid], target) + findSubList(arr[mid + 1:right], target)\n\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left, right = mid, mid - 1\n\n    if arr[left] == target:\n        return 1 + findSubList(arr[left + 1:], target)\n    elif arr[right] == target:\n        return 1 + findSubList(arr[:right], target)\n    else:\n        return 0\n\nif __name__ == \"__main__\":\n    assert findSubList([1,2,3,4,5,6,7,8,9], 1) == 1\n    assert findSubList([1,2,3,4,5,6,7,8,9], 2) == 2\n    assert findSubList([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert findSubList([1,2,3,4,5,6,7,8,9], 4) == 3\n    assert findSubList([1,2,3,4,5,6,7,8,9], 5) == 4\n    assert findSubList([1,2,3,4,5,6,7,8,9], 6) == 4\n    assert findSubList([1,2,3,4,5,6,7,8,9], 7) == 5\n    assert findSubList([1,2,3,4,5,6,7,8,9], 8) == 6\n    assert findSubList([1,2,3,4,5,6,7,8,9"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# Complete the countSublists function below.\ndef countSublists(arr, element):\n    count = 0\n    i = 0\n    j = 0\n    while i < len(arr) and j < len(arr) - 1:\n        if arr[i] == element:\n            count += 1\n            i += 1\n        elif arr[j] == element:\n            count += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return count\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    element = 5\n    print(countSublists(arr, element))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def numSubListWithElement(self, head: ListNode, val: int) -> int:\n        def find(head, val):\n            curr = head\n            while curr and curr.val == val:\n                curr = curr.next\n            return curr\n        \n        return sum(1 for n in self.dfs(head, val))\n        \n    def dfs(self, head, val):\n        if not head:\n            return 0\n        \n        count = 1\n        curr = head\n        while curr:\n            if curr.val == val:\n                curr = curr.next\n            else:\n                curr = find(curr.next, val)\n            count += 1\n            \n        return count\n\n# TESTS\nfor val, expected in [\n    (1, 1),\n    (2, 3),\n    (3, 4),\n    (4, 5),\n    (5, 6),\n    (6, 7),\n    (7, 8),\n    (8, 9),\n    (9, 10),\n    (10, 11),\n    (11, 12),\n    (12, 13),\n    (13, 14),\n    (14, 15),\n    (15, 16),\n    (16, 17),\n    (17, 18),\n    (18, 19),\n    (19, 20),\n    (20, 21),\n    (21, 22),\n    (22, 23),\n    (23, 24),\n    (24, 25),\n    (25, 26),\n    (26, 27),\n    (27, 28),\n    (28, 29),\n    (29, 30),\n    (30, 31),\n    (31, 32),\n    (32, 33),\n    (33, 34),\n    (34, 35),\n    (35, 36),\n    (36, 37),\n    (37, 38),\n    (38, 39),\n    (39, 40),\n    (40,"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return an integer\n    def countSublistsWithTarget(self, head, val):\n        if head is None:\n            return 0\n        count = 0\n        curr = head\n        while curr is not None:\n            curr = curr.next\n            if curr is not None:\n                curr = curr.next\n            while curr is not None:\n                if curr.val == val:\n                    count += 1\n                curr = curr.next\n        return count\n\nif __name__ == '__main__':\n    solution = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    print solution.countSublistsWithTarget(head, 5)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param A, a list of integers\n    # @param target, an integer to be searched\n    # @return an integer\n    def numSubarrayBinarySearch(self, A, target):\n        if not A:\n            return 0\n        start, end = 0, len(A)-1\n        while start <= end:\n            mid = (start+end)/2\n            if A[mid] < target:\n                start = mid + 1\n            elif A[mid] == target:\n                return mid\n            else:\n                end = mid - 1\n        return -1 if A[start] == target else -2\n\nif __name__ == '__main__':\n    A = [2,3,2,5,7]\n    target = 5\n    print Solution().numSubarrayBinarySearch(A, target)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def count_sublists(arr, element):\n    \"\"\"\n    :type arr: List[List[int]]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == element:\n                count += 1\n                break\n    return count\n\nif __name__ == \"__main__\":\n    arr = [\n        [1, 2],\n        [3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15, 16]\n    ]\n    element = 12\n    print(count_sublists(arr, element))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def sublist_count(l, e):\n    res = 0\n    for i in range(len(l) - 1):\n        if l[i] == e:\n            res += 1\n        elif l[i] > e:\n            break\n    return res\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    e = 8\n    print sublist_count(l, e)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def countSublistsWithTarget(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return 0\n        # if target is in nums, nums should contain at least two elements\n        # otherwise, nums should not contain target\n        if target not in nums:\n            return 0\n        # if target is not in nums, nums should not contain target\n        # otherwise, nums should contain at least two elements\n        if target in nums:\n            return 1\n        # if target is not in nums, nums should contain at least one element\n        # otherwise, nums should not contain target\n        if target not in nums[1:]:\n            return 0\n        # nums should contain at least two elements\n        # nums should not contain target\n        # nums should contain at least one element\n        return sum(self.countSublistsWithTarget(nums[i+1:], target) for i in range(n-1))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "#!/bin/python\n\n# -*- coding: utf-8 -*-\n\nimport unittest\n\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} target\n    # @return {integer}\n    def numSublistsWithTarget(self, nums, target):\n        n = len(nums)\n        nums.sort()\n        ret = 0\n        i = 0\n        j = 0\n        while i < n and j < n:\n            if nums[i] == target:\n                ret += 1\n                i += 1\n            else:\n                while j < n and nums[j] < nums[i]:\n                    j += 1\n                if j!= n:\n                    ret += 1\n                j += 1\n        return ret\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 3)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 4)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 5)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 1)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 2)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 0)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], -1)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 100)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], -100)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 0)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 1)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 2)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 3)\n    print solution.numSublistsWithTarget([1, 2, 3, 3], 4)\n    print solution.numSublistsWithTarget"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/count-sublists-with-given-element/\n\nclass Solution(object):\n    def subListCount(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        # if nums is empty, return 0\n        if not nums:\n            return 0\n\n        # count the number of sublists containing target\n        result = 0\n        for i in range(len(nums)):\n            # if the current sublist is not empty, and the current element is target,\n            # then increase the number of sublists containing target\n            if nums[i]!= 0 and nums[i] == target:\n                result += 1\n        return result\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.subListCount([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3)\n    print solution.subListCount([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4)\n    print solution.subListCount([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 5)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def count_sublists(arr, target):\n    # Write your code here\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i!= j:\n                if arr[i] == target:\n                    count += 1\n                    break\n    return count\n\ndef main():\n    print count_sublists([1,2,3,4], 3)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self is None:\n            return \"None\"\n        else:\n            return repr(self.val)\n\n\nclass Solution(object):\n    def countSublists(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        count = 0\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        while fast:\n            fast = fast.next\n            count += 1\n            slow = slow.next\n            while slow and slow.next:\n                slow = slow.next\n                fast = fast.next\n        return count\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(3)\n    head.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next.next = ListNode(6)\n    print solution.countSublists(head)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef count_sublists(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    # DP\n    dp = defaultdict(int)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == target:\n                dp[i] += 1\n                dp[j] += 1\n    return sum(dp.values())\n\nif __name__ == '__main__':\n    assert count_sublists([1, 2, 3, 4], 4) == 1\n    assert count_sublists([1, 2, 3, 4, 5], 4) == 1\n    assert count_sublists([1, 2, 3, 4, 5], 6) == 0\n    assert count_sublists([1, 2, 3, 4, 5, 6], 6) == 1"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-the-difference\n\ndef count_sublists(nums, target):\n    # base case\n    if len(nums) == 0:\n        return 0\n\n    # recursive case\n    if nums[0] == target:\n        return 1 + count_sublists(nums[1:], target)\n\n    # iterative case\n    return count_sublists_iter(nums, target)\n\ndef count_sublists_iter(nums, target):\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] == target:\n            count += 1\n        else:\n            break\n\n    # recursive case\n    if count_sublists_iter(nums[i+1:], target):\n        return count + 1 + count_sublists_iter(nums[:i], target)\n    else:\n        return 0\n\n# Driver program to test above functions\ndef main():\n    nums = [1,2,3,4,5,6,7,8,9]\n    target = 2\n    print \"Count sublists containing 2 :\", count_sublists(nums, target)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def count_sublist(list, target):\n    count = 0\n    for i in range(len(list)-1):\n        if list[i] == target:\n            count += 1\n            if list[i+1]!= target:\n                return count\n    return count\n\nif __name__ == \"__main__\":\n    target = 5\n    print count_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def countSublists(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        def count(curr, end, k):\n            if curr is None:\n                return 0\n            counts = [0] * k\n            counts[curr.val] = 1\n            for i in xrange(curr.next is None, k):\n                counts[i] += count(curr.next, end, k)\n            return counts[0]\n\n        counts = [0] * k\n        curr = head\n        while curr is not None:\n            counts[curr.val] += 1\n            curr = curr.next\n        return sum(counts)\n\nif __name__ == '__main__':\n    head = ListNode(0)\n    head.next = ListNode(1)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(3)\n    head.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next.next = ListNode(9)\n    print Solution().countSublists(head, 2)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def numSubListWithTarget(self, head, target):\n        \"\"\"\n        :type head: ListNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        ret, num = 0, 0\n        cur = head\n        while cur:\n            if cur.val == target:\n                num += 1\n            cur = cur.next\n        if head.next:\n            cur = head.next\n            while cur:\n                if cur.val == target:\n                    num += 1\n                cur = cur.next\n        ret += num\n        if head.next:\n            cur = head.next\n            while cur:\n                if cur.val == target:\n                    num += 1\n                cur = cur.next\n        ret += num\n        return ret\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next."
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# Definition for a sublist.\nclass SubList:\n    def __init__(self, head, n):\n        self.head = head\n        self.n = n\n    def __repr__(self):\n        return str(self.head) + \"->\" + str(self.n)\n\nclass Solution(object):\n    def countSubListWithTarget(self, head, target):\n        \"\"\"\n        :type head: ListNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        curr = head\n        while curr!= None:\n            count += self.helper(curr, target)\n            curr = curr.next\n        return count\n    \n    def helper(self, head, target):\n        count = 0\n        curr = head\n        while curr!= None:\n            if curr.n == target:\n                count += 1\n            curr = curr.next\n        return count\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    head = SubList(None, 0)\n    print sol.countSubListWithTarget(head, 1)\n    print sol.countSubListWithTarget(head, 2)\n    print sol.countSubListWithTarget(head, 3)\n    print sol.countSubListWithTarget(head, 4)\n    print sol.countSubListWithTarget(head, 5)\n    print sol.countSubListWithTarget(head, 6)\n    print sol.countSubListWithTarget(head, 7)\n    print sol.countSubListWithTarget(head, 8)\n    print sol.countSubListWithTarget(head, 9)\n    print sol.countSubListWithTarget(head, 10)\n    print sol.countSubListWithTarget(head, 11)\n    print sol.countSubListWithTarget(head, 12)\n    print sol.countSubListWithTarget(head, 13)\n    print sol.countSubListWithTarget(head, 14)\n    print sol.countSubListWithTarget(head, 15)\n    print sol.countSubListWithTarget(head, 16)\n    print sol.countSubListWithTarget(head, 17)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def count(arr, elem):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            count += 1\n    return count\n\n# arr = [1,2,3,4,5,6,7]\n# elem = 6\n# print(count(arr, elem))\n\n# arr = [1,2,3,4,5,6,7,8,9]\n# elem = 8\n# print(count(arr, elem))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/count-sublists-containing-a-given-element/discuss/267084/Python-solution-with-10-lines-of-code\n# https://leetcode.com/problems/count-sublists-containing-a-given-element/discuss/267084/Python-solution-with-10-lines-of-code\nclass Solution(object):\n    def countSublists(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i):\n                count += self.findSublists(nums, target, i, j)\n        return count\n\n    def findSublists(self, nums, target, i, j):\n        count = 0\n        for k in range(j + 1, len(nums)):\n            if nums[i] == nums[k]:\n                count += 1\n            else:\n                return count\n        return count"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\ndef count_sublists(sublists, target):\n    \"\"\"\n    :type sublists: List[List[int]]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    n = len(sublists)\n    if n == 0:\n        return 0\n    if target == sublists[0][0]:\n        return 1\n    if target == sublists[n-1][-1]:\n        return n\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         if target == sublists[i][j]:\n    #             return i + 1\n    for i, lst in enumerate(sublists):\n        for j, el in enumerate(lst):\n            if el == target:\n                return i + 1\n    return 0\n\ndef count_sublists_2(sublists, target):\n    \"\"\"\n    :type sublists: List[List[int]]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if len(sublists) == 0:\n        return 0\n    if target == sublists[0][0]:\n        return 1\n    if target == sublists[-1][-1]:\n        return len(sublists)\n    return count_sublists_2(sublists[1:], target) + count_sublists_2(sublists[:-1], target)\n\ndef count_sublists_3(sublists, target):\n    \"\"\"\n    :type sublists: List[List[int]]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if len(sublists) == 0:\n        return 0\n    if target == sublists[0][0]:\n        return 1\n    if target == sublists[-1][-1]:\n        return len(sublists)\n    return count_sublists_3(sublists[1:], target) + count_sublists_3(sublists[:-1], target)\n\ndef count_sublists_4(sublists, target):\n    \"\"\"\n    :type sublists: List[List[int]]\n    :type target: int\n    :rtype: int"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def countSubLists(list, target):\n    res = 0\n    for i in range(0, len(list)):\n        if list[i] == target:\n            res += 1\n            for j in range(i+1, len(list)):\n                if list[j] == target:\n                    res += 1\n    return res\n\n# Your code here\n\n# https://www.hackerrank.com/challenges/count-sublists/problem"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "# TODO:\n# - count sublists of length 2\n# - count sublists of length 3\n# - count sublists of length 4\n# - count sublists of length 5\n# - count sublists of length 6\n# - count sublists of length 7\n# - count sublists of length 8\n# - count sublists of length 9\n# - count sublists of length 10\n# - count sublists of length 11\n# - count sublists of length 12\n# - count sublists of length 13\n# - count sublists of length 14\n# - count sublists of length 15\n# - count sublists of length 16\n# - count sublists of length 17\n# - count sublists of length 18\n# - count sublists of length 19\n# - count sublists of length 20\n# - count sublists of length 21\n# - count sublists of length 22\n# - count sublists of length 23\n# - count sublists of length 24\n# - count sublists of length 25\n# - count sublists of length 26\n# - count sublists of length 27\n# - count sublists of length 28\n# - count sublists of length 29\n# - count sublists of length 30\n# - count sublists of length 31\n# - count sublists of length 32\n# - count sublists of length 33\n# - count sublists of length 34\n# - count sublists of length 35\n# - count sublists of length 36\n# - count sublists of length 37\n# - count sublists of length 38\n# - count sublists of length 39\n# - count sublists of length 40\n# - count sublists of length 41\n# - count sublists of length 42\n# - count sublists of length 43\n# - count sublists of length 44\n# - count sublists of length 45\n# - count sublists of length 46\n# - count sublists of length 47\n# - count sublists of length 48\n# - count sublists of length 49\n# - count sublists of length 50\n# - count sublists of length 51\n# - count sublists of length 52\n# - count sublists of length 53\n# - count sublists of length 54\n# - count sublists of length 55\n# - count sublists of length 56\n# - count sublists of length 57\n# -"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def sub_list_count(list, element):\n    if len(list) == 0:\n        return 0\n    if list[0]!= element:\n        return 0\n    return sub_list_count(list[1:], element) + 1\n\nif __name__ == '__main__':\n    list = [1,2,3,4]\n    element = 2\n    print sub_list_count(list, element)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef sublist_contains_element(sublist, element):\n    \"\"\"\n    Returns the number of times a list contains a particular element.\n    \n    :type sublist: list\n    :type element: int\n    :rtype: int\n    \"\"\"\n    if not sublist:\n        return 0\n    count = 0\n    for i in range(len(sublist)):\n        if sublist[i] == element:\n            count += 1\n            \n            if i == len(sublist) - 1:\n                break\n            else:\n                sublist = sublist[i + 1:]\n    return count\n\ndef sublist_contains_element_rec(sublist, element):\n    \"\"\"\n    Returns the number of times a list contains a particular element.\n    \n    :type sublist: list\n    :type element: int\n    :rtype: int\n    \"\"\"\n    if not sublist:\n        return 0\n    if sublist[0] == element:\n        return 1\n    return sublist_contains_element_rec(sublist[1:], element) + sublist_contains_element_rec(sublist[:1], element)\n\ndef main():\n    \"\"\"\n    Add your code here.\n    \"\"\"\n    sublist = [3, 2, 5, 1, 6, 4]\n    print sublist_contains_element(sublist, 5)\n    print sublist_contains_element_rec(sublist, 5)\n    \nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/subset-sum/problem\n\ndef subsum(arr, k):\n    # base case\n    if len(arr) == 1:\n        return arr[0] == k\n    else:\n        return subsum(arr[1:], k) or (arr[0] == k and subsum(arr[1:], k))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5], 3))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum(range(1, 100), 2))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum(range(1, 100), 2))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5], 3))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5], 5))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5], 6))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5], 7))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5], 8))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5], 9))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5], 10))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5], 11))\n\n# arr is a list of ints\n# k is an int\n\n# print(subsum([1,2,3,4,5"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def countSublists(self, head: ListNode, target: int) -> int:\n        \"\"\"\n        https://leetcode.com/problems/count-sublists-containing-a-particular-element/discuss/81401/Python-solution-using-a-binary-tree-with-a-hash-table\n        \"\"\"\n        if not head:\n            return 0\n        if target not in [head.val, head.next.val]:\n            return 0\n        count = 0\n        current = head\n        while current:\n            if current.val == target:\n                count += 1\n            current = current.next\n        return count"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} target\n    # @return {integer}\n    def numSubListWithTarget(self, nums, target):\n        n = len(nums)\n        if n == 0:\n            return 0\n        elif target < nums[0]:\n            return 0\n        elif target == nums[0]:\n            return 1\n        elif target > nums[n-1]:\n            return n\n        else:\n            ans = 0\n            for i in range(n):\n                if target > nums[i]:\n                    ans += self.numSubListWithTarget(nums[i+1:], target)\n            return ans + 1"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def sublist_count(s, e):\n    count = 0\n    for x in s:\n        if x == e:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    assert sublist_count([1, 2, 3, 4, 5, 6], 3) == 2\n    assert sublist_count([1, 2, 3, 4, 5, 6], 7) == 0\n    assert sublist_count([1, 2, 3, 4, 5, 6], 6) == 1"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def count_sublists(arr, e):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == e:\n                count += 1\n            if arr[j] == e:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    arr = [1,2,3,4]\n    print(count_sublists(arr, 3))\n    print(count_sublists(arr, 2))\n    print(count_sublists(arr, 5))\n    print(count_sublists(arr, 4))\n    print(count_sublists(arr, 1))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def num_sublists(list, element):\n\tif not list:\n\t\treturn 0\n\telif list[0] == element:\n\t\treturn 1 + num_sublists(list[1:], element)\n\telse:\n\t\treturn num_sublists(list[1:], element) + num_sublists(list[0:], element)\n\nif __name__ == \"__main__\":\n\tlist = [1, 2, 3]\n\tprint num_sublists(list, 1)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "# Definition for a Sublist.\n# class Sublist(object):\n#     def __init__(self, head, n):\n#         \"\"\"\n#         head: the head node of the linked list\n#         n: the element to be searched\n#         \"\"\"\n#         self.head = head\n#         self.n = n\n#         self.count = 0\n#         self.count_sublist = 0\n# \n# \n# def count_sublist(head, n):\n#     if head is None:\n#         return 0\n#     else:\n#         count = 0\n#         curr = head\n#         while curr is not None:\n#             if curr.n == n:\n#                 count += 1\n#             curr = curr.next\n#         return count\n# \n# \n# def count_sublist_recursive(head, n):\n#     if head is None:\n#         return 0\n#     else:\n#         count = 0\n#         curr = head\n#         while curr is not None:\n#             if curr.n == n:\n#                 count += 1\n#             if curr.next is not None:\n#                 count += count_sublist_recursive(curr.next, n)\n#             curr = curr.next\n#         return count\n# \n# \n# def count_sublist_iterative(head, n):\n#     count = 0\n#     curr = head\n#     while curr is not None:\n#         if curr.n == n:\n#             count += 1\n#         curr = curr.next\n#     return count\n# \n# \n# def main():\n#     head = Sublist(None, 1)\n#     head.next = Sublist(None, 2)\n#     head.next.next = Sublist(None, 3)\n#     head.next.next.next = Sublist(None, 4)\n#     print(count_sublist_recursive(head, 1))\n#     print(count_sublist_iterative(head, 1))\n# \n# \n# if __name__ == '__main__':"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef count(s, e):\n    \"\"\"\n    >>> count(range(5), 0)\n    1\n    >>> count(range(5), 4)\n    4\n    >>> count(range(5), 5)\n    0\n    \"\"\"\n    c = defaultdict(int)\n    for i in range(len(s)):\n        c[s[i]] += 1\n        if e in c:\n            c[e] += 1\n    return sum(c.values())\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import collections\n\ndef count_sublists(list_of_lists, element):\n    return sum(1 for sublist in list_of_lists if element in sublist)\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([1, 2, 3, 4], 4),\n        ([1, 2, 3], 3),\n        ([1, 2, 3, 4, 5], 5),\n        ([1, 2, 3, 4, 5], 3)\n    ]\n\n    for test_case in test_cases:\n        print \"Case #{}: {}\".format(len(test_case), count_sublists(*test_case))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def count(arr, element):\n    \"\"\"\n    Input:\n        arr = list\n        element = int\n\n    Output:\n        count = int\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n            for j in range(i + 1, len(arr)):\n                if arr[j] == element:\n                    count += 1\n    return count\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    element = 8\n    print(count(arr, element))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def count_sublists(list_of_sublists, element):\n    count = 0\n    for sublist in list_of_sublists:\n        if element in sublist:\n            count += 1\n    return count\n\ndef count_sublists_in_list(list_of_sublists, element):\n    count = 0\n    for sublist in list_of_sublists:\n        if element in sublist:\n            count += 1\n    return count\n\ndef main():\n    list_of_sublists = [[1, 2, 3], [4, 5], [1, 2, 3, 4]]\n    print count_sublists(list_of_sublists, 1)\n    print count_sublists_in_list(list_of_sublists, 1)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import sys\nsys.path.append('..')\n\ndef count_sublists(arr, val):\n\t\"\"\"\n\tGiven an array arr, and a value val,\n\tcount the number of sublists containing val.\n\t\"\"\"\n\n\tcount = 0\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[i] == val and arr[j] == val:\n\t\t\t\tcount += 1\n\n\treturn count\n\nif __name__ == '__main__':\n\tarr = [1,2,3,4,5,6,7,8,9,10]\n\tval = 8\n\tprint count_sublists(arr, val)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def sublist_contains(sublist, value):\n    \"\"\"\n    :type sublist: List[int]\n    :type value: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(sublist)):\n        if sublist[i] == value:\n            count += 1\n            if i < len(sublist)-1:\n                if sublist[i+1] == value:\n                    count += 1\n    return count\n\ndef test_sublist_contains():\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,5,6,7,8,9], 3) == 2\n    assert sublist_contains([1,2,3,4,"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef count_sublist_containing_element(list_of_lists, element):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for list in list_of_lists:\n        if element in list:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_sublist_containing_element([[1, 2, 3], [1, 2, 4]], 1))\n    print(count_sublist_containing_element([[1, 2, 3], [1, 2, 4]], 3))\n    print(count_sublist_containing_element([[1, 2, 3], [1, 2, 4]], 2))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from collections import defaultdict\nfrom itertools import count\n\n\ndef sublist_count(sublist, element):\n    sublist_dict = defaultdict(int)\n    for i in sublist:\n        sublist_dict[i] += 1\n    return sum(sublist_dict[element] for x in range(len(sublist_dict)))\n\n\ndef main():\n    n = int(input())\n    sublist = list(map(int, input().split()))\n    element = int(input())\n    print(sublist_count(sublist, element))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def sublist_with_element(arr, element):\n    # write your code here\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n            if i!= len(arr) - 1:\n                sub_list = arr[i:len(arr)]\n                if sub_list == arr:\n                    count += 1\n                else:\n                    count += sublist_with_element(sub_list, element)\n    return count\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print sublist_with_element(arr, 2)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def sublist_count(arr, value):\n    \"\"\"\n    :type arr: List[int]\n    :type value: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if arr[0] == value:\n        return 1\n    if arr[0] > value:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i] > value:\n            break\n        elif arr[i] == value:\n            return i + 1\n    return i + 1\n\n\nif __name__ == \"__main__\":\n    print(sublist_count([1, 2, 3], 1))\n    print(sublist_count([1, 2, 3], 4))\n    print(sublist_count([1, 2, 3], 2))\n    print(sublist_count([1, 2, 3], 3))\n    print(sublist_count([1, 2, 3], 5))\n    print(sublist_count([1, 2, 3], 6))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from collections import defaultdict\nimport math\n\n\ndef sublist_count(lst, element):\n    \"\"\"\n    :type lst: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if element in lst[i:]:\n            count += 1\n            if i + 1 == len(lst):\n                break\n    return count\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5]\n    print(sublist_count(lst, 1))\n    print(sublist_count(lst, 2))\n    print(sublist_count(lst, 3))\n    print(sublist_count(lst, 4))\n    print(sublist_count(lst, 5))\n    print(sublist_count(lst, 6))\n    print(sublist_count(lst, 7))\n    print(sublist_count(lst, 8))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def sublist_count(L, e):\n    \"\"\"\n    :type L: List[int]\n    :type e: int\n    :rtype: int\n    \"\"\"\n    if not L: return 0\n    return count_sublist(L, 0, len(L)-1, e)\n\ndef count_sublist(L, i, j, e):\n    if i > j: return 0\n    count = 0\n    while i <= j:\n        if L[i] == e:\n            count += 1\n        i += 1\n    return count"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def count_sublist(sublist, target):\n    count = 0\n    for i in range(len(sublist)):\n        if sublist[i] == target:\n            count += 1\n        elif sublist[i] < target:\n            count += count_sublist(sublist[i+1:], target)\n    return count\n\nif __name__ == \"__main__\":\n    sublist = [1,2,3,4,5,6]\n    target = 3\n    print(count_sublist(sublist, target))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def sublist_contains(list, element):\n\tcount = 0\n\tfor i in range(len(list)):\n\t\tif list[i] == element:\n\t\t\tcount += 1\n\t\t\tfor j in range(i, len(list)):\n\t\t\t\tif list[j] == element:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\treturn count\n\ndef sublist_contains_recursive(list, element):\n\tif len(list) == 0:\n\t\treturn 0\n\tcount = 0\n\tfor i in range(len(list)):\n\t\tif list[i] == element:\n\t\t\tcount += 1\n\t\t\tif len(list) == 1:\n\t\t\t\treturn 1\n\t\t\telse:\n\t\t\t\tcount += sublist_contains_recursive(list[:i], element)\n\t\t\t\tcount += sublist_contains_recursive(list[i+1:], element)\n\treturn count\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sublist_contains_recursive(list, 5))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from itertools import groupby\n\n\ndef count_sublists(n, elem):\n    \"\"\"\n    Count the number of sublists of length n containing elem\n    :param n: the length of the sublist\n    :param elem: the element to search for\n    :return: the number of sublists containing the element\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 if elem == n else 0\n    else:\n        return sum(count_sublists(i - 1, elem) for i, g in groupby(enumerate(n), lambda (i, x): i - x))\n\n\nif __name__ == '__main__':\n    print(count_sublists(2, 1))\n    print(count_sublists(5, 1))\n    print(count_sublists(3, 2))\n    print(count_sublists(2, 1))\n    print(count_sublists(3, 3))\n    print(count_sublists(3, 4))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef sublist_count(sublist, target):\n    \"\"\"\n    :type sublist: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(sublist)):\n        if sublist[i] == target:\n            count += 1\n    return count\n\ndef main():\n    n = int(sys.argv[1])\n    target = int(sys.argv[2])\n\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if sublist_count(list(range(i, j)), target) > 1:\n                print(i, j, sublist_count(list(range(i, j)), target))\n                break\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def sublist_count(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == target:\n            count += 1\n            for j in range(i+1, len(arr)):\n                if arr[j] == target:\n                    count += 1\n    return count\n\nprint(sublist_count([1, 2, 3, 1, 2, 3], 2))\nprint(sublist_count([1, 2, 3, 1, 2, 3], 4))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def sublist_count(lst, target):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i:j] == target:\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sublist_count(lst, 3))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def count_sublists(nums, target):\n    # +++your code here+++\n    result = 0\n    if not nums:\n        return result\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == target:\n                result += 1\n                if j >= len(nums):\n                    break\n                else:\n                    result += count_sublists(nums[j+1:], target)\n    return result\n\n# Test Cases\n# nums = [2, 3, 2]\n# target = 2\n# print(count_sublists(nums, target))\n# target = 4\n# print(count_sublists(nums, target))\n# target = 3\n# print(count_sublists(nums, target))\n# target = 7\n# print(count_sublists(nums, target))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def sublist_count(lst, e):\n    \"\"\"\n    :type lst: List[int]\n    :type e: int\n    :rtype: int\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        if lst[0] == e:\n            return 1\n        return 0\n    return sublist_count(lst[1:], e) + sublist_count(lst[:len(lst) - 1], e)\n\n\ndef test_sublist_count():\n    assert sublist_count([0, 1, 2, 3, 4, 5, 6, 7], 1) == 1\n    assert sublist_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 2\n    assert sublist_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 4\n    assert sublist_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n    assert sublist_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 1\n    assert sublist_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 0"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def count(arr, val):\n    # Write your code here\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == val:\n            count += 1\n        else:\n            if i + 1 < len(arr):\n                if arr[i+1] == val:\n                    count += 1\n    return count\n\n\n\nif __name__ == '__main__':\n    print count([1,2,3,4,5], 4)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def sublist_count(L, x):\n    count = 0\n    for i in L:\n        if i == x:\n            count += 1\n        elif i > x:\n            break\n        else:\n            count += sublist_count(L[i+1:], x)\n    return count\n\n# Example\nL = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, 8, 8]\nprint(sublist_count(L, 3))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def sublist_contains(list, target):\n    # Complete this function\n    n = len(list)\n    count = 0\n    for i in range(0, n):\n        if target in list[i:]:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    assert sublist_contains([1, 2, 3, 4, 5], 3) == 2\n    assert sublist_contains([1, 2, 3, 4, 5], 4) == 1"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def count_sublist(arr, elem):\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            res += count_sublist(arr[:i], elem)\n            res += count_sublist(arr[i+1:], elem)\n    return res\n\narr = [1,2,3,4,5,6,7,8,9,10]\nprint count_sublist(arr, 8)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def numSublists(list, target):\n    count = 0\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] == target and list[j]!= target:\n                break\n            elif list[j] == target and list[i]!= target:\n                break\n            else:\n                count += 1\n    return count\n\ndef main():\n    print(numSublists([1,2,3,4], 2))\n    print(numSublists([1,2,3,4], 5))\n    print(numSublists([1,2,3,4], 0))\n    print(numSublists([1,2,3,4], 4))\n    print(numSublists([1,2,3,4], 3))\n    print(numSublists([1,2,3,4], 7))\n    print(numSublists([1,2,3,4], 10))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "# Approach 1: Brute force\ndef count(arr, e):\n    # O(n^2)\n    return sum(1 for x in arr if x == e)\n\n\n# Approach 2: Iterative\ndef count(arr, e):\n    # O(n)\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == e:\n            res += 1\n    return res\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9]\n    print count(arr, 3)\n    print count(arr, 4)\n    print count(arr, 8)\n    print count(arr, 9)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def countSubList(lst, element):\n    # Write your code here\n    #return len(sublist(lst, element))\n    return 0\n\n\"\"\"\ncountSubList\n\nInput: list lst = [1, 2, 3, 4, 5], element = 4\nOutput: 2\n\nInput: list lst = [1, 2, 3, 4, 5], element = 1\nOutput: 1\n\nInput: list lst = [1, 2, 3, 4, 5], element = 6\nOutput: 0\n\nInput: list lst = [1, 2, 3, 4, 5], element = 2\nOutput: 2\n\nInput: list lst = [1, 2, 3, 4, 5], element = 3\nOutput: 1\n\nInput: list lst = [1, 2, 3, 4, 5], element = 5\nOutput: 1\n\nInput: list lst = [1, 2, 3, 4, 5], element = 5\nOutput: 0\n\nInput: list lst = [1, 2, 3, 4, 5], element = 0\nOutput: 0\n\"\"\""
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-the-missing-number/problem\n\ndef count_sublists(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n            sublist = arr[i:len(arr)]\n            if target in sublist:\n                count += count_sublists(arr[:i], target)\n    return count\n\ndef main():\n    n = int(input().strip())\n    arr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n    target = int(input().strip())\n    print(count_sublists(arr, target))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def sublist_count(arr, element):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        if arr[0] == element:\n            return 1\n        else:\n            return 0\n    else:\n        if arr[0] == element:\n            return 1\n        else:\n            return sublist_count(arr[1:], element) + sublist_count(arr[:n-1], element)\n\nprint sublist_count([1, 2, 3, 4, 5], 3)"
    },
    {
      "rank": 69,
      "score": 2.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def numSublistsWithTarget(self, head, target):\n        \"\"\"\n        :type head: ListNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        # base case\n        if not head:\n            return 0\n        # build a list of nodes\n        node_list = []\n        curr = head\n        while curr:\n            node_list.append(curr)\n            curr = curr.next\n        # iterate through the list\n        num_sublists = 0\n        curr = head\n        for node in node_list:\n            if node.val == target:\n                num_sublists += 1\n            # if we hit the target, stop\n            if node.val == target:\n                break\n            curr = node.next\n        # check if we have reached the target\n        if curr is None:\n            return 0\n        # iterate through the list again\n        curr = head\n        for node in node_list:\n            if node.val == target:\n                num_sublists += 1\n            # if we hit the target, stop\n            if node.val == target:\n                break\n            curr = node.next\n        # return the total number of sublists\n        return num_sublists"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def countSublists(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        # return 0\n        if not head:\n            return 0\n        # return 1\n        prev = head\n        while prev.next:\n            prev = prev.next\n            # print prev.val\n            # print prev.next.val\n            # print\n            if prev.val == head.val:\n                # print prev.val\n                # print prev.next.val\n                # print\n                count = 1\n                # print prev.val\n                # print prev.next.val\n                # print\n                while prev.next and prev.next.val == head.val:\n                    prev = prev.next\n                    count += 1\n                return count\n        return 0"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def countSublists(list, target):\n    \"\"\"\n    :type list: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if len(list) == 0:\n        return 0\n    if target == list[0]:\n        return 1\n    if target == list[-1]:\n        return 1\n    if target == list[-2]:\n        return 1\n    if target == list[-3]:\n        return 1\n    if target == list[-4]:\n        return 1\n    if target == list[-5]:\n        return 1\n    if target == list[-6]:\n        return 1\n    if target == list[-7]:\n        return 1\n    if target == list[-8]:\n        return 1\n    if target == list[-9]:\n        return 1\n    if target == list[-10]:\n        return 1\n    if target == list[-11]:\n        return 1\n    if target == list[-12]:\n        return 1\n    if target == list[-13]:\n        return 1\n    if target == list[-14]:\n        return 1\n    if target == list[-15]:\n        return 1\n    if target == list[-16]:\n        return 1\n    if target == list[-17]:\n        return 1\n    if target == list[-18]:\n        return 1\n    if target == list[-19]:\n        return 1\n    if target == list[-20]:\n        return 1\n    if target == list[-21]:\n        return 1\n    if target == list[-22]:\n        return 1\n    if target == list[-23]:\n        return 1\n    if target == list[-24]:\n        return 1\n    if target == list[-25]:\n        return 1\n    if target == list[-26]:\n        return 1\n    if target == list[-27]:\n        return 1\n    if target == list[-28]:\n        return 1\n    if target == list[-29]:\n        return 1\n    if target == list[-30]:\n        return 1\n    if target == list[-31]:\n        return 1\n    if target"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def countSublists(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        count = 0\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if fast:\n                fast = fast.next\n            count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    l1 = ListNode(1)\n    l2 = ListNode(2)\n    l3 = ListNode(3)\n    l4 = ListNode(4)\n    l1.next = l2\n    l2.next = l3\n    l3.next = l4\n    l4.next = l3\n\n    sol = Solution()\n    print(sol.countSublists(l1))\n    print(sol.countSublists(l1))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def countSublistsWithTarget(self, head, target):\n        \"\"\"\n        :type head: ListNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if head is None:\n            return 0\n        count = 0\n        pre = head\n        while pre.next is not None:\n            cur = pre.next\n            while cur is not None:\n                if cur.val == target:\n                    count += 1\n                cur = cur.next\n            pre = pre.next\n        return count\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    print Solution().countSublistsWithTarget(head, 6)"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def sublist_count(arr, element):\n    \"\"\"\n    :type arr: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    def helper(start, end):\n        if end == start:\n            return 1\n        count = 0\n        for i in range(start, end):\n            if arr[i] == element:\n                count += helper(start, i - 1) + helper(i + 1, end)\n        return count\n    return helper(0, len(arr) - 1)\n\n\nif __name__ == \"__main__\":\n    assert sublist_count([1, 2, 3, 4, 5], 3) == 3\n    assert sublist_count([1, 2, 3, 4, 5], 5) == 1\n    assert sublist_count([1, 2, 3, 4, 5], 6) == 0\n    assert sublist_count([1, 2, 3, 4, 5], 7) == 0\n    assert sublist_count([1, 2, 3, 4, 5], 8) == 0\n    assert sublist_count([1, 2, 3, 4, 5], 9) == 1\n    assert sublist_count([1, 2, 3, 4, 5], 10) == 1"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution(object):\n    def subListSum(self, head, sum):\n        \"\"\"\n        :type head: ListNode\n        :type sum: int\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        count = 0\n        cur = head\n        while cur:\n            cur = cur.next\n            if cur:\n                cur = cur.next\n            else:\n                break\n            if cur and cur.val == sum:\n                count += 1\n        return count\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.subListSum(ListNode(1), 3)\n    print sol.subListSum(ListNode(1), 1)\n    print sol.subListSum(ListNode(1), 2)\n    print sol.subListSum(ListNode(1), 4)\n    print sol.subListSum(ListNode(1), 5)\n    print sol.subListSum(ListNode(1), 6)\n    print sol.subListSum(ListNode(1), 7)\n    print sol.subListSum(ListNode(1), 8)\n    print sol.subListSum(ListNode(1), 9)\n    print sol.subListSum(ListNode(1), 10)\n    print sol.subListSum(ListNode(1), 11)\n    print sol.subListSum(ListNode(1), 12)\n    print sol.subListSum(ListNode(1), 13)\n    print sol.subListSum(ListNode(1), 14)\n    print sol.subListSum(ListNode(1), 15)\n    print sol.subListSum(ListNode(1), 16)\n    print sol.subListSum(ListNode(1), 17)\n    print sol.subListSum(ListNode(1), 18)\n    print sol.subListSum(List"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def countLIS(self, head: ListNode) -> int:\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        result = 0\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow:\n                slow = slow.next\n            result += 1\n        return result"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def count_sublist(sublist, target):\n    # write your code here\n    count = 0\n    for i in range(len(sublist)):\n        if sublist[i] == target:\n            count += 1\n            for j in range(i+1, len(sublist)):\n                if sublist[j] == target:\n                    count += 1\n    return count\n\n# Test cases\n\n# Target: 3\n# sublist: [1,2,3]\n# target: 3\n# result: 1\n# sublist: [1,2,3,1]\n# target: 1\n# result: 3\n# sublist: [1,2,3]\n# target: 4\n# result: 0\n# sublist: [1,2,3,4]\n# target: 4\n# result: 0\n# sublist: [1,2,3,4,5]\n# target: 5\n# result: 1\n\n# Target: 4\n# sublist: [1,2,3,4]\n# target: 3\n# result: 1\n# sublist: [1,2,3,4,5]\n# target: 5\n# result: 3\n# sublist: [1,2,3,4,5,6]\n# target: 6\n# result: 2\n\n# Target: 5\n# sublist: [1,2,3,4,5,6]\n# target: 5\n# result: 3\n# sublist: [1,2,3,4,5,6,7]\n# target: 6\n# result: 2\n# sublist: [1,2,3,4,5,6,7,8]\n# target: 7\n# result: 1\n\n# Target: 6\n# sublist: [1,2,3,4,5,6,7,8]\n# target: 8\n# result: 1\n# sublist: [1,2,3,4,5,6,7,8,9]\n# target: 9\n# result: 0"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def countSublistsWithTarget(self, head, target):\n        \"\"\"\n        :type head: ListNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        l, r = head, head\n        while l:\n            if l.val == target:\n                return 1\n            if l.next:\n                l = l.next\n                r = r.next\n            else:\n                break\n        return 0\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    print Solution().countSublistsWithTarget(head, 3)\n    print Solution().countSublistsWithTarget(head, 1)\n    print Solution().countSublistsWithTarget(head, 6)\n    print Solution().countSublistsWithTarget(head, 7)\n    print Solution().countSublistsWithTarget(head, 8)\n    print Solution().countSublistsWithTarget(head, 9)\n    print Solution().countSublistsWithTarget(head, -1)\n    print Solution().countSublistsWithTarget(head, 0)\n    print Solution().countSublistsWithTarget(head, 2)\n    print Solution().countSublistsWithTarget(head, 6)\n    print Solution().countSublistsWithTarget(head, 4)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Your function will be called as follows:\n# numSubLists(list, element)\n#\n# The list will be represented as a set of integers.\n# The element will be represented as a single integer.\n#\n# For example, if list = [1, 2, 3], and element = 3,\n# the function should return the number of sublists containing 3.\n#\n# Example 1:\n#\n# numSubLists([1,2,3,4], 3) -> 2\n# numSubLists([1,2,3,4], 1) -> 4\n# numSubLists([1,2,3,4], 5) -> 0\n#\n# Note:\n#\n# The length of list and element will be in the range [1, 10,000].\n# list and element will have values in the range [0, 10^9].\n#\n# Hint:\n#\n# You are given two pointers, p1 and p2.\n# p1 is always the left pointer and p2 is always the right pointer.\n# The function will update both pointers.\n# The value of each pointer will not exceed the length of list.\n# The function will always return the value 0 or 1.\n#\n#\n#\n\n# Example 2:\n#\n# numSubLists([1,2,3], 3) -> 2\n# numSubLists([1,2,3], 1) -> 4\n# numSubLists([1,2,3], 5) -> 0\n#\n# Note:\n#\n# The length of list and element will be in the range [1, 10,000].\n# list and element will have values in the range [0, 10^9].\n#\n# Hint:\n#\n# You are given two pointers, p1 and p2.\n# p1 is always the left pointer and p2 is always the right pointer.\n# The function will update both pointers.\n# The value of each pointer will not exceed the length of list.\n# The function will always return the value 0 or 1.\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, self.next.__repr__())\n        return \"Nil\"\n\nclass Solution(object):\n    def countSublists(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n\n        length = 0\n        pre = head\n        while pre.next:\n            pre = pre.next\n            length += 1\n\n        sublist = head\n        while sublist:\n            while sublist.next:\n                sublist = sublist.next\n                length += 1\n            sublist = sublist.next\n            length -= 1\n\n        return length\n\n\nif __name__ == \"__main__\":\n    head = ListNode(0)\n    head.next = ListNode(0)\n    head.next.next = ListNode(1)\n    head.next.next.next = ListNode(2)\n    head.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next.next = ListNode(5)\n\n    sol = Solution()\n    print sol.countSublists(head)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a list node\n    # @param val, an integer\n    # @return an integer\n    def countSublistsWithElement(self, head, val):\n        if head is None:\n            return 0\n        if head.next is None:\n            return 1\n        count = 0\n        cur = head\n        while cur is not None:\n            if cur.val == val:\n                count += 1\n            cur = cur.next\n        return count"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def sublist_count(list_, element):\n    \"\"\"\n    :type list_: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(list_)):\n        if list_[i] == element:\n            count += 1\n            for j in range(i+1, len(list_)):\n                if list_[j] == element:\n                    count += 1\n    return count\n\nclass Solution:\n    # @param {List<Integer>} nums\n    # @param {Integer} target\n    # @return {Integer}\n    def numSublistsWithTarget(self, nums, target):\n        # write your code here\n        if len(nums) == 0:\n            return 0\n        \n        # sort nums\n        nums.sort()\n        \n        # find the first element that is larger than target\n        first = 0\n        while nums[first] < target:\n            first += 1\n        \n        # count the number of sublists that contain the target\n        count = 0\n        while first < len(nums):\n            if nums[first] == target:\n                count += 1\n            first += 1\n            while first < len(nums) and nums[first] == nums[first-1]:\n                first += 1\n            \n        return count\n\nif __name__ == \"__main__\":\n    print(Solution().numSublistsWithTarget([1,2,3], 2))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/count-sublists-with-a-specific-elements/\n\n# @param A, a list of integers\n# @param target, an integer\n# @return an integer\n\nclass Solution:\n    # @param A, a list of integers\n    # @param target, an integer\n    # @return an integer\n    def countSublists(self, A, target):\n        if len(A) == 0:\n            return 0\n        \n        return self.countSublistsHelper(A, 0, len(A) - 1, target)\n\n    def countSublistsHelper(self, A, start, end, target):\n        if start == end:\n            if A[start] == target:\n                return 1\n            return 0\n\n        # find the left most sublist\n        for i in range(start, end):\n            if A[i] == target:\n                return self.countSublistsHelper(A, start, i - 1, target) + self.countSublistsHelper(A, i + 1, end, target)\n        \n        return 0\n\n\n    # @param A, a list of integers\n    # @param target, an integer\n    # @return an integer\n    def countSublists2(self, A, target):\n        if len(A) == 0:\n            return 0\n\n        count = 0\n        for i in range(len(A) - 1):\n            if A[i] == target:\n                count += self.countSublists(A[i + 1:], target)\n            \n        return count\n\nif __name__ == \"__main__\":\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target = 8\n    print Solution().countSublists(A, target)\n    print Solution().countSublists2(A, target)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countSublistsWithTarget(self, lists, target):\n        \"\"\"\n        :type lists: List[List[int]]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(lists)):\n            for j in range(i+1, len(lists)):\n                if lists[i][j] == target:\n                    count += 1\n                    lists[i] = lists[i][:j] + lists[i][j+1:]\n        return count\n\n\nif __name__ == \"__main__\":\n    assert Solution().countSublistsWithTarget([[1], [2], [3]], 1) == 2\n    assert Solution().countSublistsWithTarget([[1, 2], [3, 4], [5, 6]], 3) == 3\n    assert Solution().countSublistsWithTarget([[1, 2], [3, 4], [5, 6]], 7) == 0\n    assert Solution().countSublistsWithTarget([[1, 2], [3, 4], [5, 6]], -1) == 0"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def count_sublists(l, n, x):\n    \"\"\"\n    :type l: List[int]\n    :type n: int\n    :type x: int\n    :rtype: int\n    \"\"\"\n    # Base case: return 0 if x is not in l\n    if x not in l:\n        return 0\n\n    # Recursive case: return 1 if x is the first element in the sublist\n    if len(l) == 1:\n        return 1\n\n    # Recursive case: return 1 if x is the second element in the sublist\n    if len(l) == 2:\n        return 1\n\n    # Recursive case: return 1 if x is the third element in the sublist\n    if len(l) == 3:\n        return 1\n\n    # Recursive case: return 1 if x is the fourth element in the sublist\n    if len(l) == 4:\n        return 1\n\n    # Recursive case: return 1 if x is the fifth element in the sublist\n    if len(l) == 5:\n        return 1\n\n    # Recursive case: return 1 if x is the sixth element in the sublist\n    if len(l) == 6:\n        return 1\n\n    # Recursive case: return 1 if x is the seventh element in the sublist\n    if len(l) == 7:\n        return 1\n\n    # Recursive case: return 1 if x is the eighth element in the sublist\n    if len(l) == 8:\n        return 1\n\n    # Recursive case: return 1 if x is the ninth element in the sublist\n    if len(l) == 9:\n        return 1\n\n    # Recursive case: return 1 if x is the tenth element in the sublist\n    if len(l) == 10:\n        return 1\n\n    # Recursive case: return 1 if x is the eleventh element in the sublist\n    if len(l) == 11:\n        return 1\n\n    # Recursive case: return 1 if x is the twelfth element in the sublist\n    if len(l) == 12:\n        return 1\n\n    # Recursive case: return 1 if x is the thirteenth element in the sublist\n    if len(l) == 13:\n        return 1\n\n    #"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def count(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(nums)):\n            if nums[i] == target:\n                result += 1\n                for j in range(i + 1, len(nums)):\n                    if nums[j] == target:\n                        result += 1\n        return result"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution:\n    def countSublists(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: int\n        :rtype: int\n        \"\"\"\n        return self.countSublist(A, B)\n\n    def countSublist(self, A, B):\n        count = 0\n        i = 0\n        j = 0\n        while i < len(A):\n            if A[i] > B:\n                count += 1\n                j = 0\n            else:\n                while j < len(A) and A[j] < B:\n                    j += 1\n                if j > i:\n                    count += j - i\n                    i = j\n            i += 1\n        return count\n\ns = Solution()\n\n#print s.countSublists([1,2,3,4,5], 3)\nprint s.countSublists([1,2,3], 1)\nprint s.countSublists([1,2,3], 4)\nprint s.countSublists([1,2,3], 5)\nprint s.countSublists([1,2,3], 6)\nprint s.countSublists([1,2,3], 7)\nprint s.countSublists([1,2,3], 8)\nprint s.countSublists([1,2,3], 9)\nprint s.countSublists([1,2,3], 10)\nprint s.countSublists([1,2,3], 11)\nprint s.countSublists([1,2,3], 12)\nprint s.countSublists([1,2,3], 13)\nprint s.countSublists([1,2,3], 14)\nprint s.countSublists([1,2,3], 15)\nprint s.countSublists([1,2,3], 16)\nprint s.countSublists([1,2,3], 17)\nprint s.countSublists([1,2,3], 18)\nprint s.countSublists([1,2,3], 19)\nprint s.countSublists([1,2,3], 20)\nprint s.countSublists([1,2,3], 21)\nprint s.countSublists([1"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import collections\n\ndef count_sublists(sublist, element):\n    \"\"\"\n    :type sublist: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    def helper(sublist, element):\n        if sublist == []:\n            return 0\n        if sublist[0] == element:\n            return 1 + helper(sublist[1:], element)\n        else:\n            return helper(sublist[1:], element)\n    return helper(sublist, element)\n\nclass Solution(object):\n    def countSublistsWithTarget(self, sublist, target):\n        \"\"\"\n        :type sublist: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if sublist == []:\n            return 0\n        result = 0\n        for i in range(len(sublist) - 1):\n            if sublist[i] == target:\n                result += count_sublists(sublist[i + 1:], target)\n        return result\n\nclass Solution2(object):\n    def countSublistsWithTarget(self, sublist, target):\n        \"\"\"\n        :type sublist: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        def helper(sublist, target, i):\n            if sublist == []:\n                return 0\n            if sublist[0] == target:\n                return 1 + helper(sublist[1:], target, i + 1)\n            else:\n                return helper(sublist[1:], target, i + 1)\n        return helper(sublist, target, 0)\n\nclass Solution3(object):\n    def countSublistsWithTarget(self, sublist, target):\n        \"\"\"\n        :type sublist: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(sublist) - 1):\n            if sublist[i] == target:\n                result += count_sublists(sublist[i + 1:], target)\n        return result\n\nclass Solution4(object):\n    def countSublistsWithTarget(self,"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef sublist_count(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    if arr[0] == target:\n        return 1\n\n    return sublist_count(arr[1:], target) + sublist_count(arr[:-1], target)\n\n\nclass TestSublistCount(unittest.TestCase):\n    def test_sublist_count(self):\n        self.assertEqual(sublist_count([1, 2, 3], 2), 2)\n        self.assertEqual(sublist_count([1, 2, 3, 4, 5], 3), 2)\n        self.assertEqual(sublist_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 1)\n        self.assertEqual(sublist_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10), 0)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countSublists(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        # This is a pretty naive implementation.\n        # In fact, it's not even correct.\n        # The problem is that I can't understand the problem.\n        # I'm pretty sure it's the same problem as the problem in this question.\n        # I can't see any way to solve it by a recursive solution.\n        # So I'm going to use a recursive solution.\n        # First, I'm going to create a list of lists that will store the sublists.\n        # Each element of this list will be a list of integers that stores the\n        # indices of the elements in the sublist.\n        # So, in the list, the indices are in the form:\n        # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        # The problem is that I need to count the number of sublists that have\n        # the same element in them.\n        # So, the problem is to go through each list in the list of lists.\n        # For each list, I'll go through the indices and check if the indices\n        # are the same. If they are, I'll add the list to the sublist.\n        # For example, we have:\n        # [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n        # Then, we'll check if the sublist is the same as [5, 6].\n        # If it is, we'll add 2 to the count.\n        # If not, we'll add 1 to the count.\n        # Now, we'll add the count to the total count.\n        # So, the total count is 6.\n        # Then, we'll go through each list in the list of lists and repeat the\n        # same process.\n        # I'm not sure if the above is the right way to do this.\n        # The problem is that I need to count the total number of sublists.\n        # That means, we'll have to go through the entire list of lists.\n        # I can't figure out how to do that.\n        # So, I'm going to"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/counting-sublists\ndef count_sublists(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n            sublist_count = count_sublists(arr[i+1:], element)\n            count += sublist_count\n    return count\n\narr = [1, 2, 1, 3]\nelement = 1\nprint(count_sublists(arr, element))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def count_sublists(list, element):\n    \"\"\"\n    :type list: List[int]\n    :type element: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            count += 1\n            if i + 1 < len(list):\n                count += count_sublists(list[i + 1:], element)\n    return count\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(list, element)\n# param_1 = obj.count_sublists(list, element)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/sublist/problem\n\ndef sublist_count(list, target):\n    counter = 0\n    for start in range(len(list)):\n        for end in range(start+1, len(list)):\n            if list[end] == target:\n                counter += 1\n                if start!= end:\n                    counter += sublist_count(list[start:end], target)\n    return counter\n\n# https://www.hackerrank.com/challenges/sublist/problem\n\ndef sublist_count2(list, target):\n    counter = 0\n    for start in range(len(list)):\n        for end in range(start+1, len(list)):\n            if list[end] == target:\n                counter += 1\n                if start!= end:\n                    counter += sublist_count2(list[start:end], target)\n    return counter\n\n# https://www.hackerrank.com/challenges/sublist/problem\n\ndef sublist_count3(list, target):\n    counter = 0\n    for start in range(len(list)):\n        for end in range(start+1, len(list)):\n            if list[end] == target:\n                counter += 1\n                if start!= end:\n                    counter += sublist_count3(list[start:end], target)\n    return counter\n\n# https://www.hackerrank.com/challenges/sublist/problem\n\ndef sublist_count4(list, target):\n    counter = 0\n    for start in range(len(list)):\n        for end in range(start+1, len(list)):\n            if list[end] == target:\n                counter += 1\n                if start!= end:\n                    counter += sublist_count4(list[start:end], target)\n    return counter\n\n# https://www.hackerrank.com/challenges/sublist/problem\n\ndef sublist_count5(list, target):\n    counter = 0\n    for start in range(len(list)):\n        for end in range(start+1, len(list)):\n            if list[end] == target"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/sublist-sum/discuss/284847/C-Python-O(n)\n\nimport collections\nimport math\n\nclass Solution(object):\n    def subListSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        \n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            mid = l + (r - l) / 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                l = mid + 1\n            else:\n                r = mid\n        return l"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def count_sublists(arr, target):\n    \"\"\"\n    :type arr: List[List[int]]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    result = 0\n    for i in range(len(arr)):\n        if arr[i][0] == target:\n            result += 1\n            if arr[i][1] == target:\n                result += 1\n                if arr[i][2] == target:\n                    result += 1\n                    if arr[i][3] == target:\n                        result += 1\n                        if arr[i][4] == target:\n                            result += 1\n                            if arr[i][5] == target:\n                                result += 1\n                                if arr[i][6] == target:\n                                    result += 1\n                                    if arr[i][7] == target:\n                                        result += 1\n                                        if arr[i][8] == target:\n                                            result += 1\n                                            if arr[i][9] == target:\n                                                result += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    arr = [\n        [2, 4, 6],\n        [5, 7, 9],\n        [1, 3, 5]\n    ]\n    target = 3\n    print(count_sublists(arr, target))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def countSublists(self, head, target):\n        \"\"\"\n        :type head: ListNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        curr = head\n        while curr:\n            if curr.val == target:\n                result += 1\n            curr = curr.next\n        return result\n\n\nif __name__ == \"__main__\":\n    a = ListNode(1)\n    a.next = ListNode(2)\n    a.next.next = ListNode(3)\n    a.next.next.next = ListNode(4)\n    b = ListNode(5)\n    b.next = ListNode(6)\n    b.next.next = ListNode(7)\n    c = ListNode(8)\n    c.next = ListNode(9)\n    c.next.next = ListNode(10)\n\n    Solution().countSublists(a, 8)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} target\n    # @return {integer}\n    def numSubListWithTarget(self, nums, target):\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            if nums[0] == target:\n                return 1\n            else:\n                return 0\n        ans = 0\n        for i in range(1, n):\n            if nums[i-1] == target:\n                ans += self.numSubListWithTarget(nums[i:], target)\n        return ans"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from collections import Counter\n\ndef count_sublist(lst, target):\n    c = Counter()\n    for i in lst:\n        if i == target:\n            c[i] += 1\n        else:\n            c[i] += count_sublist(lst[i:], target)\n    return c\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_sublist([1, 2, 3, 4, 5], 3) == {1: 1, 2: 1, 3: 1}\n    assert count_sublist([1, 2, 3, 4, 5], 6) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\n    assert count_sublist([1, 2, 3, 4, 5], 1) == {1: 3, 2: 2, 3: 1, 4: 1, 5: 1}\n    assert count_sublist([1, 2, 3, 4, 5], 5) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\nclass Solution:\n    def countSublists(self, lists: List[List[int]]) -> int:\n        \"\"\"\n        TODO:\n        - O(n^2)\n        - O(n^2)\n        \"\"\"\n        count = 0\n        for i in range(len(lists)):\n            for j in range(i+1, len(lists)):\n                sublist = lists[i][:j-i]\n                if sublist == lists[j]:\n                    count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    assert Solution().countSublists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1, 2, 3]]) == 4"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def countSublists(self, head, target):\n        \"\"\"\n        :type head: ListNode\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if head is None:\n            return 0\n        count = 0\n        pre = head\n        while pre is not None:\n            cur = pre\n            while cur is not None:\n                if cur.val == target:\n                    count += 1\n                if cur.next is not None:\n                    cur = cur.next\n                else:\n                    cur = None\n            pre = pre.next\n        return count"
    }
  ]
}