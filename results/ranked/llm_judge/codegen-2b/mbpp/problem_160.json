{
  "timestamp": "2025-09-14T18:33:08.666004",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 160,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def pentagon_perimeter(pentagon):\n    \"\"\"\n    :type pentagon: tuple\n    :rtype: int\n    \"\"\"\n    return sum([pentagon[0], pentagon[1], pentagon[2], pentagon[0] + pentagon[1] + pentagon[2] + pentagon[0]])\n\nif __name__ == '__main__':\n    pentagon = (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n    print(pentagon_perimeter(pentagon))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from euler import is_pentagon\n\ndef pentagon_perimeter(n):\n    return (n * (n + 1)) / 2\n\nif __name__ == \"__main__\":\n    print(pentagon_perimeter(5))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\nclass Solution:\n    def getPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        xmin = points[0].x\n        ymin = points[0].y\n        xmax = points[0].x\n        ymax = points[0].y\n        for p in points:\n            xmin = min(p.x, xmin)\n            ymin = min(p.y, ymin)\n            xmax = max(p.x, xmax)\n            ymax = max(p.y, ymax)\n        return (xmax - xmin) * (ymax - ymin)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_perimeter(p):\n    \"\"\"\n    Returns the perimeter of a pentagon.\n\n    Input:\n    p = the number of sides in the pentagon.\n\n    Output:\n    The perimeter of the pentagon.\n    \"\"\"\n    return (p ** 2) * (3 * p / 2)\n\ndef main():\n    \"\"\"\n    Main method.\n    \"\"\"\n    pentagon_perimeter(5)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef pentagon_perimeter(x):\n    \"\"\"\n    :param x:\n    :return:\n    \"\"\"\n    return (x * (3.0 / 5.0)) + (2 * sqrt(5.0)) - 1\n\n\ndef pentagon_perimeter2(x):\n    \"\"\"\n    :param x:\n    :return:\n    \"\"\"\n    return (x * (3.0 / 5.0)) + (2 * sqrt(5.0))\n\n\ndef main():\n    \"\"\"\n    :return:\n    \"\"\"\n    print(pentagon_perimeter(5))\n    print(pentagon_perimeter2(5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_perimeter(width):\n    return math.sqrt(width ** 2 + 3 * width + 2)\n\n\ndef main():\n    print(pentagon_perimeter(10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.x, self.y)\n\nclass Solution(object):\n    def getPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        x = [p.x for p in points]\n        y = [p.y for p in points]\n        if len(x) == 2:\n            return 2 * (x[0] + x[1])\n        else:\n            return 2 * (x[0] + x[1] + x[2] + x[3])\n\nif __name__ == '__main__':\n    points = [Point(x, y) for x, y in [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0)]]\n    print Solution().getPerimeter(points)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon-perimeter/problem\n\n# Pseudocode\n# 1. Create a list of the vertices of the pentagon\n# 2. Compute the sum of the distances from the origin of the list to the other vertices\n# 3. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 4. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 5. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 6. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 7. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 8. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 9. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 10. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 11. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 12. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 13. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 14. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 15. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 16. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 17. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 18. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 19. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 20. Compute the sum of the distances from the origin of the list to the origin of the next vertex\n# 21. Compute the sum of the distances from the origin"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def pentagon_perimeter(a,b,c,d,e,f,g,h):\n    return a*(b+c+d+e+f+g+h)\n\nif __name__ == \"__main__\":\n    pentagon_perimeter(1,1,1,1,1,1,1,1)\n    pentagon_perimeter(1,1,1,1,1,1,1,1)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getPerimeter(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x < 5:\n            return 0\n\n        n = (x + 1) // 2\n        return (n * (n + 1) * 2) // 2\n\n    def getPerimeter2(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x < 5:\n            return 0\n\n        n = (x + 1) // 2\n        return (n * (n + 1) * 2) // 2\n\n\nif __name__ == \"__main__\":\n    print(Solution().getPerimeter(10))\n    print(Solution().getPerimeter2(10))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_perimeter(n):\n    \"\"\"\n    n - the number of sides of the pentagon\n    return - the perimeter of the pentagon\n    \"\"\"\n    pentagon_perimeter = 0\n    for i in range(1, n+1):\n        pentagon_perimeter += math.sqrt(math.pow(2*(n-i), 2) + math.pow(3*(n-i), 2))\n    return pentagon_perimeter\n\nif __name__ == '__main__':\n    pentagon_perimeter(5)\n    pentagon_perimeter(6)\n    pentagon_perimeter(7)\n    pentagon_perimeter(8)\n    pentagon_perimeter(9)\n    pentagon_perimeter(10)\n    pentagon_perimeter(11)\n    pentagon_perimeter(12)\n    pentagon_perimeter(13)\n    pentagon_perimeter(14)\n    pentagon_perimeter(15)\n    pentagon_perimeter(16)\n    pentagon_perimeter(17)\n    pentagon_perimeter(18)\n    pentagon_perimeter(19)\n    pentagon_perimeter(20)\n    pentagon_perimeter(21)\n    pentagon_perimeter(22)\n    pentagon_perimeter(23)\n    pentagon_perimeter(24)\n    pentagon_perimeter(25)\n    pentagon_perimeter(26)\n    pentagon_perimeter(27)\n    pentagon_perimeter(28)\n    pentagon_perimeter(29)\n    pentagon_perimeter(30)\n    pentagon_perimeter(31)\n    pentagon_perimeter(32)\n    pentagon_perimeter(33)\n    pentagon_perimeter(34)\n    pentagon_perimeter(35)\n    pentagon_perimeter(36)\n    pentagon_perimeter(37)\n    pentagon_perimeter(38)\n    pentagon_perimeter(39)\n    pentagon_perimeter(40)\n    pentagon_perimeter(41)\n    pentagon_perimeter(42)\n    pentagon_per"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\n# https://projecteuler.net/problem=3\n\n# For a pentagon with sides a, b, c and d, the perimeter is:\n# a + b + c + d + 2(b + c) + 2(c + d) + 2(d + a)\n\n# If the perimeter is divisible by 5, then the pentagon is a multiple of 5\n# If the perimeter is divisible by 3, then the pentagon is a multiple of 3\n# If the perimeter is divisible by 7, then the pentagon is a multiple of 7\n# If the perimeter is divisible by 11, then the pentagon is a multiple of 11\n\n# All possible pentagon perimeter divisibility rules:\n# 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n\n# All possible pentagon perimeter divisibility rules:\n# 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 103, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 7"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_perimeter(pentagon_area):\n    \"\"\"\n    :param pentagon_area: Area of the pentagon.\n    :return: The perimeter of the pentagon.\n    \"\"\"\n\n    # If the area is a multiple of 5, it's a triangle.\n    if pentagon_area % 5 == 0:\n        return pentagon_area / 5 * 3\n\n    # Otherwise, it's a pentagon.\n    else:\n        pentagon_area_squared = pentagon_area ** 2\n        return pentagon_area_squared * (5 + math.sqrt(20 - 5 * pentagon_area))\n\n\nif __name__ == \"__main__\":\n    pentagon_area = 500\n    pentagon_perimeter_result = pentagon_perimeter(pentagon_area)\n\n    print(\"The perimeter of a pentagon is: {}\".format(pentagon_perimeter_result))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.x, self.y)\n\n\nclass Solution(object):\n    def findPentagonPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) == 5:\n            return self.find_pentagon_perimeter(points)\n        else:\n            return self.find_pentagon_perimeter(points[:5]) + self.find_pentagon_perimeter(points[5:])\n\n    def find_pentagon_perimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        # 1. find the midpoint of the 2 points\n        midpoint = (points[0] + points[1]) / 2\n        # 2. find the angle formed by the midpoint and the 2 points\n        angle = self.find_angle(points[0], points[1], midpoint)\n        # 3. calculate the distance between the midpoint and the 3 points\n        dist = self.find_distance(points[0], points[1], midpoint)\n        # 4. calculate the distance between the midpoint and the 4 points\n        dist = self.find_distance(points[0], points[1], midpoint)\n        # 5. calculate the distance between the midpoint and the 5 points\n        dist = self.find_distance(points[0], points[1], midpoint)\n        # 6. calculate the distance between the midpoint and the 6 points\n        dist = self.find_distance(points[0], points[1], midpoint)\n        # 7. calculate the distance between the midpoint and the 7 points\n        dist = self.find_distance(points[0], points[1], midpoint)\n        # 8. calculate the distance between the midpoint and the 8 points\n        dist = self.find_distance(points[0], points[1], midpoint)\n        # 9"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def pentagon_perimeter(pentagon):\n    \"\"\"\n    :type pentagon: list[int]\n    :rtype: int\n    \"\"\"\n    return (pentagon[0] + pentagon[1] + pentagon[2] + pentagon[3] + pentagon[4] + pentagon[5]) / 2\n\nif __name__ == '__main__':\n    pentagon = [5, 6, 7, 8, 9, 10]\n    print(pentagon_perimeter(pentagon))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for a point\nclass Point:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\nclass Solution:\n\t# @param num, a list of integers\n\t# @return an integer\n\tdef pentagonPerimeter(self, num):\n\t\t\"\"\"\n\t\t:type num: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tperimeter = 0\n\t\tfor i in xrange(1, len(num)):\n\t\t\tperimeter += (num[i] + num[i - 1]) * 2\n\t\treturn perimeter\n\nif __name__ == '__main__':\n\ts = Solution()\n\tprint s.pentagonPerimeter([2, 3, 4, 5, 6])\n\tprint s.pentagonPerimeter([2, 3, 4, 5, 7])\n\tprint s.pentagonPerimeter([2, 3, 4, 5, 6, 7, 8])\n\tprint s.pentagonPerimeter([2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution(object):\n    def findPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        if len(points) == 1:\n            return points[0].x + points[0].y\n        if len(points) == 2:\n            return max(points[0].x, points[1].x + points[0].y)\n        if len(points) == 3:\n            return points[0].x + points[1].y + points[2].y\n        if len(points) == 4:\n            return max(points[0].x, max(points[1].x + points[0].y, points[2].y + points[1].y))\n        return self.findPerimeter(points[:2]) + self.findPerimeter(points[2:])\n\nif __name__ == '__main__':\n    points = [Point(0, 0), Point(0, 1), Point(0, 2), Point(1, 0), Point(1, 1), Point(1, 2)]\n    s = Solution()\n    print s.findPerimeter(points)\n    points = [Point(0, 0), Point(0, 1), Point(0, 2), Point(1, 0), Point(1, 1), Point(1, 2), Point(2, 0), Point(2, 1), Point(2, 2)]\n    print s.findPerimeter(points)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "__author__ = 'Daniel'\n\nclass Solution(object):\n    def pentagonPerimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        points.sort(key=lambda x:x[0])\n        l, r, m, n, o = 0, 0, 0, 0, 0\n        for i in xrange(len(points)):\n            l += points[i][0]\n            m += points[i][1]\n            n += points[i][2]\n            o += points[i][3]\n            r += points[i][0] + points[i][1] + points[i][2] + points[i][3]\n        return r - l - m - n - o"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def get_perimeter(self, points):\n        \"\"\"\n        :param points: a list of points\n        :return: the perimeter\n        \"\"\"\n        if len(points) == 1:\n            return points[0][0]\n\n        l = [0] * len(points)\n        l[0] = points[0][0]\n        for i in xrange(1, len(points)):\n            l[i] = l[i-1] + points[i][1] - points[i-1][1]\n\n        return max(l)\n\n\nif __name__ == \"__main__\":\n    points = [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n        [7, 8],\n        [9, 10]\n    ]\n\n    Solution().get_perimeter(points)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import math\n\n\ndef get_perimeter(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    return num * (math.sqrt(5) + 1) / 2\n\n\ndef test():\n    assert get_perimeter(5) == 30\n    assert get_perimeter(6) == 42\n    assert get_perimeter(7) == 50\n    assert get_perimeter(8) == 57\n    assert get_perimeter(9) == 72\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def get_perimeter(self, nums):\n        \"\"\"\n        :param nums: A list of integers\n        :return: An integer\n        \"\"\"\n        # base case\n        if len(nums) < 4:\n            return 0\n\n        # find the sum of the first 4 elements\n        sum = sum(nums[:4])\n\n        # the rest of the elements\n        for i in range(5, len(nums)):\n            sum += nums[i]\n\n        return sum\n\n\nif __name__ == \"__main__\":\n    print Solution().get_perimeter([1, 2, 3, 4, 5])"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.x, self.y)\n\n\nclass Solution:\n    def get_perimeter(self, p: List[Point]) -> int:\n        \"\"\"\n        :type p: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(p)!= 5:\n            return 0\n        return (p[0].x + p[1].x + p[2].x + p[3].x + p[4].x) * 2"
    },
    {
      "rank": 23,
      "score": 9.973356255015277,
      "candidate": "import math\n\n# Calculate the perimeter of a pentagon\ndef pentagon_perimeter(n):\n    return (n * (n + 1)) / 2 * math.sqrt(5)\n\n\n# Test Cases\ntest_cases = [\n    (5, 5),\n    (6, 10),\n    (7, 15),\n    (8, 21),\n    (9, 28),\n    (10, 36),\n    (11, 45),\n    (12, 60),\n]\n\nfor test in test_cases:\n    result = pentagon_perimeter(test[0])\n    print(\"pentagon perimeter = \" + str(result))"
    },
    {
      "rank": 24,
      "score": 9.916462768819981,
      "candidate": "from euler_funcs import *\n\ndef pentagon_perimeter(p):\n    \"\"\"\n    p is a 5-digit number that is the perimeter of a pentagon.\n\n    Return the perimeter of a pentagon that has the digits of p.\n    \"\"\"\n    pent = pentagon_from_num(p)\n    return pent.perimeter\n\n\ndef test():\n    assert pentagon_perimeter(12345) == 24\n    assert pentagon_perimeter(99999) == 9999\n    assert pentagon_perimeter(9999) == 7\n    assert pentagon_perimeter(1234) == 12\n    assert pentagon_perimeter(123) == 10\n    assert pentagon_perimeter(123) == 10\n    assert pentagon_perimeter(123456789) == 123456789\n    assert pentagon_perimeter(123456789) == 123456789\n    assert pentagon_perimeter(12345678) == 12345678\n    assert pentagon_perimeter(12345678) == 12345678\n    assert pentagon_perimeter(1234567) == 1234567\n    assert pentagon_perimeter(1234567) == 1234567\n    assert pentagon_perimeter(123456) == 123456\n    assert pentagon_perimeter(123456) == 123456\n    assert pentagon_perimeter(12345) == 12345\n    assert pentagon_perimeter(12345) == 12345\n    assert pentagon_perimeter(123) == 123\n    assert pentagon_perimeter(123) == 123\n    assert pentagon_perimeter(1234) == 1234\n    assert pentagon_perimeter(1234) == 1234\n    assert pentagon_perimeter(1234567) == 1234567\n    assert pentagon_perimeter(1234567) == 1234567\n    assert pentagon_perimeter(12345678) == 12345678\n    assert pentagon_perimeter(12345678) == 12345678\n    assert pentagon_perimeter(123456789) == 123456789\n    assert pentagon_perimeter(123456789) == 123456789\n    assert pentagon_perimeter(1234567890) == 12345"
    },
    {
      "rank": 25,
      "score": 9.913369325928803,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.a = a\n        self.b = b\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.a, self.b)\n\n    def __eq__(self, other):\n        return self.a == other.a and self.b == other.b\n\n    def __ne__(self, other):\n        return not self == other\n\n    def __add__(self, other):\n        return Point(self.a + other.a, self.b + other.b)\n\n    def __sub__(self, other):\n        return Point(self.a - other.a, self.b - other.b)\n\n    def __mul__(self, other):\n        return Point(self.a * other, self.b * other)\n\n    def __div__(self, other):\n        return Point(self.a / other, self.b / other)\n\n    def __str__(self):\n        return '<%s, %s>' % (self.a, self.b)\n\nclass Solution:\n    def getPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) == 0:\n            return 0\n        l = 0\n        r = 0\n        for point in points:\n            l += point.a\n            r += point.b\n        return (l + r) / 2\n\nif __name__ == '__main__':\n    points = [Point(1, 1), Point(1, 2), Point(2, 1), Point(2, 2)]\n    print Solution().getPerimeter(points)"
    },
    {
      "rank": 26,
      "score": 9.913202760651195,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point [x=%d, y=%d]\" % (self.x, self.y)\n\nclass Solution:\n    # @param p, a point\n    # @return an integer\n    def getPerimeter(self, p):\n        if not p: return 0\n        return self.getPerimeter(p[0], p[1]) + self.getPerimeter(p[1], p[2]) + self.getPerimeter(p[2], p[0])\n\n    def getPerimeter(self, x, y):\n        return (x + y) * 2\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    p = [Point(0, 0), Point(1, 0), Point(1, 1), Point(0, 1)]\n    print sol.getPerimeter(p)"
    },
    {
      "rank": 27,
      "score": 9.88559142093505,
      "candidate": "import math\n\n# This function returns the perimeter of a pentagon\ndef pentagon_perimeter(n):\n    return math.sqrt(3.0 * n * (n + 1))\n\n# Test Cases\n# n = 3\n# print(pentagon_perimeter(3))\n# n = 4\n# print(pentagon_perimeter(4))\n# n = 5\n# print(pentagon_perimeter(5))\n# n = 6\n# print(pentagon_perimeter(6))\n# n = 7\n# print(pentagon_perimeter(7))\n# n = 8\n# print(pentagon_perimeter(8))\n# n = 9\n# print(pentagon_perimeter(9))\n# n = 10\n# print(pentagon_perimeter(10))\n\n# Run the function and print the result\nprint(pentagon_perimeter(10))"
    },
    {
      "rank": 28,
      "score": 9.826294477204067,
      "candidate": "import math\n\ndef pentagon_perimeter(p):\n    return (p * (3 + 2 * math.sqrt(5))) / 2\n\nprint(pentagon_perimeter(5))"
    },
    {
      "rank": 29,
      "score": 9.822705531997244,
      "candidate": "# https://leetcode.com/problems/pentagon-perimeter/\n# Time:  O(n)\n# Space: O(1)\n\n# Definition for a point.\n# class Point(object):\n#     def __init__(self, a=0, b=0):\n#         self.x = a\n#         self.y = b\n\nclass Solution(object):\n    def getPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        p1 = points[0]\n        p2 = points[1]\n        p3 = points[2]\n        p4 = points[3]\n        p5 = points[4]\n        p6 = points[5]\n        p7 = points[6]\n        p8 = points[7]\n        p9 = points[8]\n        p10 = points[9]\n        p11 = points[10]\n        p12 = points[11]\n        p13 = points[12]\n        p14 = points[13]\n        p15 = points[14]\n        p16 = points[15]\n        p17 = points[16]\n        p18 = points[17]\n        p19 = points[18]\n        p20 = points[19]\n        p21 = points[20]\n        p22 = points[21]\n        p23 = points[22]\n        p24 = points[23]\n        p25 = points[24]\n        p26 = points[25]\n        p27 = points[26]\n        p28 = points[27]\n        p29 = points[28]\n        p30 = points[29]\n        p31 = points[30]\n        p32 = points[31]\n        p33 = points[32]\n        p34 = points[33]\n        p35 = points[34]\n        p36 = points[35]\n        p37 = points[36]\n        p38 = points[37]\n        p39 = points[38]\n        p40 = points[39]\n        p41 = points[40]\n        p42 = points["
    },
    {
      "rank": 30,
      "score": 9.79195361418084,
      "candidate": "__author__ = 'Daniel'\n\nimport math\n\n\ndef pentagon_perimeter(side1, side2, side3, side4):\n    \"\"\"\n    :type side1: int\n    :type side2: int\n    :type side3: int\n    :type side4: int\n    :rtype: int\n    \"\"\"\n    return (side1 + side2 + side3 + side4 + 2 * side1 + 2 * side2 + 2 * side3 + 2 * side4) / 6\n\n\ndef main():\n    print(pentagon_perimeter(4, 3, 7, 5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 9.777763684730042,
      "candidate": "# https://projecteuler.net/problem=21\n\ndef pentagon_perimeter(n):\n    \"\"\"\n    :param n: number of sides of the pentagon\n    :return: the perimeter of the pentagon\n    \"\"\"\n    return (2 * n * (n - 1)) / 3\n\n\n# https://projecteuler.net/problem=22\n\ndef pentagon_perimeter_with_odd_sides(n):\n    \"\"\"\n    :param n: number of sides of the pentagon\n    :return: the perimeter of the pentagon\n    \"\"\"\n    return (2 * n * (n + 1)) / 3\n\n\n# https://projecteuler.net/problem=23\n\ndef pentagon_perimeter_with_odd_sides_and_even_sides(n):\n    \"\"\"\n    :param n: number of sides of the pentagon\n    :return: the perimeter of the pentagon\n    \"\"\"\n    return (2 * n * (n + 1)) / 3\n\n\n# https://projecteuler.net/problem=24\n\ndef pentagon_perimeter_with_odd_sides_and_even_sides_and_a_couple_of_odd_sides(n):\n    \"\"\"\n    :param n: number of sides of the pentagon\n    :return: the perimeter of the pentagon\n    \"\"\"\n    return (2 * n * (n + 1)) / 3\n\n\n# https://projecteuler.net/problem=25\n\ndef pentagon_perimeter_with_odd_sides_and_even_sides_and_a_couple_of_odd_sides_and_a_single_odd_side(n):\n    \"\"\"\n    :param n: number of sides of the pentagon\n    :return: the perimeter of the pentagon\n    \"\"\"\n    return (2 * n * (n + 1)) / 3\n\n\n# https://projecteuler.net/problem=26\n\ndef pentagon_perimeter_with_odd_sides_and_even_sides_and_a_couple_of_odd_sides_and_a_single_odd_side_and_a_single_even_side(n):\n    \"\"\""
    },
    {
      "rank": 32,
      "score": 9.777368553475123,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return '<Point x: %r, y: %r>' % (self.x, self.y)\n\nclass Solution(object):\n    def compute(self, p):\n        \"\"\"\n        :type p: Point\n        :rtype: int\n        \"\"\"\n        return (p.x * (p.y + p.y + p.x + p.x) - p.y * (p.x + p.x + p.y + p.y)) / 2\n        \n        \n        \n        \nif __name__ == '__main__':\n    p = Point(1, 1)\n    assert Solution().compute(p) == 5"
    },
    {
      "rank": 33,
      "score": 9.608646956286316,
      "candidate": "def perimeter(pentagon):\n    \"\"\"\n    Input:\n        pentagon = a list of 5 numbers\n    Output:\n        the perimeter of the pentagon\n    \"\"\"\n    pentagon = map(int,pentagon)\n    return (pentagon[0] + pentagon[1] + pentagon[2] + pentagon[3] + pentagon[4])\n\ndef main():\n    pentagon = [5, 7, 6, 5, 8]\n    print(perimeter(pentagon))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 9.50857116190758,
      "candidate": "def pentagon_perimeter(side_lengths):\n    \"\"\"\n    >>> pentagon_perimeter([3, 4, 5, 6])\n    21\n    >>> pentagon_perimeter([6, 5, 4, 3])\n    28\n    >>> pentagon_perimeter([5, 4, 3, 2])\n    26\n    \"\"\"\n    return sum(side_lengths)\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 9.47284317110102,
      "candidate": "def pentagon_perimeter(p):\n    \"\"\"\n    Input: \n        p: The number of sides of the pentagon.\n    Output: \n        The perimeter of the pentagon.\n    \"\"\"\n    return p * (p + 1) / 2\n\n# Test Cases\n# p = 5\n# print pentagon_perimeter(p)\n\n# p = 6\n# print pentagon_perimeter(p)\n\n# p = 7\n# print pentagon_perimeter(p)\n\n# p = 8\n# print pentagon_perimeter(p)\n\n# p = 9\n# print pentagon_perimeter(p)\n\n# p = 10\n# print pentagon_perimeter(p)\n\n# p = 11\n# print pentagon_perimeter(p)\n\n# p = 12\n# print pentagon_perimeter(p)\n\n# p = 13\n# print pentagon_perimeter(p)\n\n# p = 14\n# print pentagon_perimeter(p)\n\n# p = 15\n# print pentagon_perimeter(p)\n\n# p = 16\n# print pentagon_perimeter(p)\n\n# p = 17\n# print pentagon_perimeter(p)\n\n# p = 18\n# print pentagon_perimeter(p)\n\n# p = 19\n# print pentagon_perimeter(p)\n\n# p = 20\n# print pentagon_perimeter(p)\n\n# p = 21\n# print pentagon_perimeter(p)\n\n# p = 22\n# print pentagon_perimeter(p)\n\n# p = 23\n# print pentagon_perimeter(p)\n\n# p = 24\n# print pentagon_perimeter(p)\n\n# p = 25\n# print pentagon_perimeter(p)\n\n# p = 26\n# print pentagon_perimeter(p)\n\n# p = 27\n# print pentagon_perimeter(p)\n\n# p = 28\n# print pentagon_perimeter(p)\n\n# p = 29\n# print pentagon_perimeter(p)\n\n# p = 30\n# print pentagon_perimeter(p)\n\n# p = 31"
    },
    {
      "rank": 36,
      "score": 9.452946863564051,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon-perimeter/problem\n\ndef pentagon_perimeter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n*(n+1)//2\n\nif __name__ == '__main__':\n    n = int(input())\n    print(pentagon_perimeter(n))"
    },
    {
      "rank": 37,
      "score": 9.361780401970178,
      "candidate": "import math\n\n\ndef pentagon_perimeter(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    if x % 5 == 0:\n        return 5 * (x + 1)\n    else:\n        return 5 * (x + 1) + (x % 5)\n\n\ndef pentagon_perimeter_recursive(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    if x % 5 == 0:\n        return 5 * (x + 1)\n    else:\n        return 5 * (x + 1) + (x % 5) + (x % 5)\n\n\ndef pentagon_perimeter_iterative(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    if x % 5 == 0:\n        return 5 * (x + 1)\n    else:\n        return 5 * (x + 1) + (x % 5) + (x % 5) + (x % 5)\n\n\ndef pentagon_perimeter_recursive_iterative(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    if x % 5 == 0:\n        return 5 * (x + 1)\n    else:\n        return 5 * (x + 1) + (x % 5) + (x % 5) + (x % 5) + (x % 5)\n\n\ndef main():\n    \"\"\"\n    Main entry point.\n    \"\"\"\n    print(pentagon_perimeter(5))\n    print(pentagon_perimeter_recursive(5))\n    print(pentagon_perimeter_iterative(5))\n    print(pentagon_perimeter_recursive_iterative(5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 9.129787372712752,
      "candidate": "import math\n\n# Returns the perimeter of a pentagon\ndef pentagon_perimeter(a,b,c):\n    return 2 * (a + b + c)\n\n\ndef main():\n    print(pentagon_perimeter(5, 5, 5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 39,
      "score": 9.028753186182179,
      "candidate": "import math\n\ndef pentagon_perimeter(width, height):\n    return 2 * (width + height)\n\nif __name__ == '__main__':\n    print(pentagon_perimeter(3, 4))"
    },
    {
      "rank": 40,
      "score": 8.748548371063277,
      "candidate": "import math\n\ndef pentagon_perimeter(num_vertices):\n    \"\"\"\n    :type num_vertices: int\n    :rtype: int\n    \"\"\"\n    pentagon_perimeter = 0\n\n    for i in range(0, num_vertices):\n        pentagon_perimeter += (math.sqrt(3) * 2) * (num_vertices - 1) * (num_vertices - 2)\n\n    return pentagon_perimeter\n\n\nif __name__ == \"__main__\":\n    print(pentagon_perimeter(5))"
    },
    {
      "rank": 41,
      "score": 8.717677079042746,
      "candidate": "def pentagon_perimeter(pentagon):\n    \"\"\"\n    Input:\n        pentagon: A list of the coordinates of the vertices of a pentagon.\n\n    Output:\n        The perimeter of the pentagon.\n    \"\"\"\n    \n    p = 0\n    for i in pentagon:\n        p += i[0] + i[1]\n    return p\n\nif __name__ == \"__main__\":\n    pentagon = [(0,0), (0, 1), (1, 1), (1, 2), (2, 2), (2, 3)]\n    print(pentagon_perimeter(pentagon))"
    },
    {
      "rank": 42,
      "score": 8.634353394696387,
      "candidate": "def pentagon_perimeter(p):\n    \"\"\"\n    :type p: int\n    :rtype: int\n    \"\"\"\n    \n    pent = p*(3*p-1)/2\n    return pent\n    \ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    \n    pentagon = int(input('Enter the value of the pentagon: '))\n    perimeter = pentagon_perimeter(pentagon)\n    print('The perimeter of the pentagon is: ', perimeter)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 8.57657609590379,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\nclass Solution(object):\n    def getPerimeter(self, p):\n        \"\"\"\n        :type p: Point\n        :rtype: int\n        \"\"\"\n        return (p.x + p.y + p.x + p.y) / 2"
    },
    {
      "rank": 44,
      "score": 8.560715957504696,
      "candidate": "import math\n\ndef pentagon_perimeter(pentagon_side):\n    \"\"\"\n    :type pentagon_side: int\n    :rtype: int\n    \"\"\"\n    return pentagon_side * (pentagon_side + 1) / 2\n\n\ndef main():\n    pentagon_side = int(input())\n    pentagon_perimeter(pentagon_side)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.554008946958337,
      "candidate": "import math\n\ndef pentagon_perimeter(a, b):\n    \"\"\"\n    >>> pentagon_perimeter(10, 10)\n    60\n    \"\"\"\n    a = float(a)\n    b = float(b)\n    return 2 * (a + b)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.507850708484733,
      "candidate": "from math import sqrt\n\ndef pentagon_perimeter(n):\n    \"\"\"\n    Function that calculates the perimeter of a pentagon.\n    \n    Input:\n    n -- the number of sides of the pentagon.\n    \n    Output:\n    the perimeter of the pentagon.\n    \"\"\"\n    \n    return (n**2 + (5 - sqrt(5))*n) / 2\n\ndef main():\n    \n    n = input(\"Enter the number of sides of the pentagon: \")\n    \n    print(\"The perimeter of the pentagon is: \" + str(pentagon_perimeter(n)))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.48036313770322,
      "candidate": "import math\n\ndef pentagon_perimeter(p):\n    \"\"\"\n    Return the perimeter of a pentagon.\n\n    Input:\n    p - the number of vertices in the pentagon.\n\n    Output:\n    the perimeter of the pentagon.\n    \"\"\"\n\n    return math.pi*(p*(p+1)/2)\n\nif __name__ == \"__main__\":\n    print(pentagon_perimeter(3))"
    },
    {
      "rank": 48,
      "score": 8.47839593176258,
      "candidate": "def pentagon_perimeter(pentagon):\n    \"\"\"\n    Input:\n        pentagon: a tuple of integer, (a, b, c, d, e)\n    Output:\n        a number, the perimeter of the pentagon\n    Examples:\n        >>> pentagon_perimeter((10, 20, 30, 40, 50))\n        60\n        >>> pentagon_perimeter((10, 20, 30, 40, 50, 60))\n        80\n    \"\"\"\n    return sum(pentagon)\n\ndef pentagon_area(pentagon):\n    \"\"\"\n    Input:\n        pentagon: a tuple of integer, (a, b, c, d, e)\n    Output:\n        a number, the area of the pentagon\n    Examples:\n        >>> pentagon_area((10, 20, 30, 40, 50))\n        100\n        >>> pentagon_area((10, 20, 30, 40, 50, 60))\n        120\n    \"\"\"\n    return pentagon[0] * pentagon[2]\n\nif __name__ == \"__main__\":\n    pentagon = (10, 20, 30, 40, 50)\n    print(pentagon_perimeter(pentagon))\n    print(pentagon_area(pentagon))"
    },
    {
      "rank": 49,
      "score": 8.469429880178977,
      "candidate": "import math\n\ndef pentagon_perimeter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    perimeter = (3 + n) * math.sqrt(5)\n    return perimeter\n\ndef main():\n    \"\"\"\n    Simple test cases.\n    \"\"\"\n    print(pentagon_perimeter(5))\n    print(pentagon_perimeter(6))\n    print(pentagon_perimeter(7))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.446336423402155,
      "candidate": "# import the necessary libraries\nimport math\n\n# define the perimeter function\ndef perimeter(side):\n    return side * (3.0 * side + 1.0) / 2.0\n\n# test your function\nprint(perimeter(5))"
    },
    {
      "rank": 51,
      "score": 8.393286653011106,
      "candidate": "def pentagon_perimeter(p):\n    \"\"\"\n    :type p: int\n    :rtype: int\n    \"\"\"\n    return p * (p + 1) * 2\n\nif __name__ == \"__main__\":\n    print(pentagon_perimeter(5))"
    },
    {
      "rank": 52,
      "score": 8.363165845944565,
      "candidate": "import math\n\ndef pentagon_perimeter(p):\n    '''\n    >>> pentagon_perimeter(5)\n    30\n    '''\n    return (p * (3 * p - 1) * (2 * p - 1)) / 6\n\ndef pentagon_perimeter_recursive(p):\n    '''\n    >>> pentagon_perimeter_recursive(5)\n    30\n    '''\n    if p < 2:\n        return 0\n    return pentagon_perimeter_recursive(p - 1) + pentagon_perimeter_recursive(p - 2)\n\nif __name__ == '__main__':\n    print pentagon_perimeter(5)\n    print pentagon_perimeter_recursive(5)"
    },
    {
      "rank": 53,
      "score": 8.35780769579681,
      "candidate": "def pentagon_perimeter(pentagon):\n    return sum(pentagon)\n\ndef is_pentagon(pentagon):\n    return pentagon[0] == pentagon[1] == pentagon[2] == pentagon[3] == pentagon[4]\n\nif __name__ == '__main__':\n    print(pentagon_perimeter(pentagon_1))\n    print(pentagon_perimeter(pentagon_2))"
    },
    {
      "rank": 54,
      "score": 8.333811724772074,
      "candidate": "import math\n\ndef pentagon_perimeter(n):\n    \"\"\"\n    Returns the perimeter of a pentagon.\n    n is the number of sides of the pentagon.\n    \"\"\"\n    return (n*(n+1)/2)*(math.sqrt(5))\n\n# Your code here\n\n# Note:\n# The given number of sides of a pentagon should be at least 5.\n# 5 is the minimum number of sides of a pentagon.\n# 5 is the maximum number of sides of a pentagon.\n\nif __name__ == \"__main__\":\n    n = int(input(\"Please enter the number of sides of the pentagon: \"))\n    print(\"The perimeter of the pentagon is: {}\".format(pentagon_perimeter(n)))"
    },
    {
      "rank": 55,
      "score": 8.333036077076407,
      "candidate": "import math\n\n\ndef get_perimeter(p):\n    \"\"\"\n    Get the perimeter of a pentagon.\n\n    :param p: a list of points\n    :return: the perimeter of the pentagon\n    \"\"\"\n    if len(p)!= 5:\n        raise ValueError(\"Pentagon has not 5 points.\")\n    return sum((x - y) ** 2 for x, y in zip(p[0], p[1])) + \\\n           sum((x - y) ** 2 for x, y in zip(p[0], p[3])) + \\\n           sum((x - y) ** 2 for x, y in zip(p[1], p[2]))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    pentagon = [\n        (0, 0),\n        (1, 0),\n        (1, 1),\n        (0, 2),\n        (-1, 1),\n        (-1, 0),\n        (0, -1),\n        (1, -1),\n        (-1, -1),\n        (1, -2),\n        (0, -3),\n    ]\n    print(get_perimeter(pentagon))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.32320945020327,
      "candidate": "def pentagon_perimeter(n):\n    \"\"\"\n    n: The number of sides of the pentagon.\n    Return: The perimeter of the pentagon.\n    \"\"\"\n    sides = [0, 0, 0, 0]\n    for i in range(0, n):\n        sides[i] = i + 1\n    perimeter = 0\n    for i in range(0, n):\n        perimeter += sides[i]\n    return perimeter\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(pentagon_perimeter(n))"
    },
    {
      "rank": 57,
      "score": 8.299364427785546,
      "candidate": "import math\n\n\ndef pentagon_perimeter(a, b, c):\n    \"\"\"\n    Calculate the perimeter of a pentagon.\n\n    :param a: The length of the first side of the pentagon.\n    :param b: The length of the second side of the pentagon.\n    :param c: The length of the third side of the pentagon.\n    :return: The perimeter of the pentagon.\n    \"\"\"\n    # The perimeter of a pentagon is the sum of the lengths of the three sides.\n    return (a + b + c) * math.sqrt(5)\n\nif __name__ == \"__main__\":\n    print(pentagon_perimeter(1, 2, 3))\n    print(pentagon_perimeter(5, 7, 9))"
    },
    {
      "rank": 58,
      "score": 8.272979898103834,
      "candidate": "import math\n\ndef pentagon_perimeter(num):\n    return num * (num + 1) / 2\n\nprint(pentagon_perimeter(5))"
    },
    {
      "rank": 59,
      "score": 8.258794338318166,
      "candidate": "def pentagon_perimeter(n):\n    \"\"\"\n    n is the number of sides of the pentagon.\n    \"\"\"\n    return n*(n+1)*(2*n-1)/6\n\nprint(pentagon_perimeter(5))"
    },
    {
      "rank": 60,
      "score": 8.252684463683195,
      "candidate": "from math import sqrt\n\ndef pentagon_perimeter(p):\n    return (p * (3 * p - 1) * (3 * p - 2) * (3 * p - 3) * (3 * p - 4) * (3 * p - 5)) / 6\n\ndef pentagon_area(p):\n    return (p * (3 * p - 1) * (3 * p - 2) * (3 * p - 3) * (3 * p - 4) * (3 * p - 5)) / 6\n\ndef main():\n    p = pentagon_perimeter(5)\n    print('The perimeter of the pentagon is %d' % p)\n    p = pentagon_area(5)\n    print('The area of the pentagon is %d' % p)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.24843316905064,
      "candidate": "def get_pentagon_perimeter(pentagon):\n    \"\"\"\n    :type pentagon: List[int]\n    :rtype: int\n    \"\"\"\n    return (pentagon[0] * (pentagon[1] + pentagon[2] + pentagon[3] + pentagon[4])) / 2\n\nif __name__ == '__main__':\n    pentagon = [3,4,5,6,7,8,9]\n    print(get_pentagon_perimeter(pentagon))"
    },
    {
      "rank": 62,
      "score": 8.243022836370127,
      "candidate": "# https://www.hackerrank.com/challenges/pentagonal-perimeter/problem\n\ndef pentagon_perimeter(n):\n    return (n * (n + 1) * (2 * n - 1)) / 6\n\nprint(pentagon_perimeter(5))"
    },
    {
      "rank": 63,
      "score": 8.20575013524055,
      "candidate": "#!/usr/bin/python\n\nfrom math import ceil\n\ndef pentagon_perimeter(p):\n    '''\n    @param p: the number of points on the pentagon\n    @return: the perimeter of the pentagon\n    '''\n    return p * (2 * (p - 1) + 1) / 2\n\ndef pentagon_area(p):\n    '''\n    @param p: the number of points on the pentagon\n    @return: the area of the pentagon\n    '''\n    return (p * (p - 1)) / 2\n\ndef main():\n    '''\n    @return: the perimeter of the pentagon\n    '''\n    print(pentagon_perimeter(5))\n    print(pentagon_area(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.178102087338402,
      "candidate": "import math\n\ndef pentagon_perimeter(p):\n    return (2 * p * math.sqrt(1 + 5 * p)) / math.sqrt(1 + 5 * p)\n\nif __name__ == '__main__':\n    for p in range(1, 101):\n        print(pentagon_perimeter(p))"
    },
    {
      "rank": 65,
      "score": 8.133933960852069,
      "candidate": "def find_perimeter(pentagon):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n    return sum([(pentagon[i] + pentagon[(i + 1) % 5]) for i in range(5)])\n\n\ndef main():\n    pentagon = [5, 12, 9, 12, 5]\n    print(find_perimeter(pentagon))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 8.108475536501597,
      "candidate": "# Definition for a point\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"(%d, %d)\" % (self.x, self.y)\n\nclass Solution(object):\n    def getPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points)!= 5:\n            return 0\n        left = 0\n        right = 0\n        for p in points:\n            left += p.x\n            right += p.y\n        return (right-left) * 2"
    },
    {
      "rank": 67,
      "score": 8.069696929920708,
      "candidate": "def find_perimeter(pentagon):\n    \"\"\"\n    Input:\n    pentagon = a list of integers representing the length of the sides of the pentagon\n    Output:\n    The perimeter of the pentagon\n    \"\"\"\n    return sum(pentagon)\n\npentagon = [5, 10, 15]\n\nprint(find_perimeter(pentagon))"
    },
    {
      "rank": 68,
      "score": 8.018576820798193,
      "candidate": "import math\n\n\ndef pentagon_perimeter(pentagon):\n    \"\"\"\n    :param pentagon: The size of the pentagon.\n    :return: The perimeter of the pentagon.\n    \"\"\"\n    return pentagon * (5.0 / 3.0)\n\n\nif __name__ == '__main__':\n    print(pentagon_perimeter(5))\n    print(pentagon_perimeter(7))\n    print(pentagon_perimeter(9))"
    },
    {
      "rank": 69,
      "score": 8.001847993534597,
      "candidate": "from math import sqrt\n\ndef pentagon_perimeter(pentagon):\n    \"\"\"\n    :type pentagon: list[int]\n    :rtype: int\n    \"\"\"\n    return 2*(pentagon[0] + sqrt(pentagon[1]*pentagon[1] - pentagon[2]*pentagon[2]))\n\nprint(pentagon_perimeter([4, 5, 6, 7, 8]))\nprint(pentagon_perimeter([5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 70,
      "score": 7.992732293955166,
      "candidate": "import math\n\ndef pentagon_perimeter(p):\n    return (2*p*(p+1) + (p-1))/2\n\nif __name__ == \"__main__\":\n    p = int(input())\n    print(pentagon_perimeter(p))"
    },
    {
      "rank": 71,
      "score": 7.921892074950387,
      "candidate": "import math\n\ndef pentagon_perimeter(p):\n    return math.pi*(1+2*p)*(1+2*p)\n\nif __name__ == '__main__':\n    print(pentagon_perimeter(5))\n    print(pentagon_perimeter(10))\n    print(pentagon_perimeter(15))"
    },
    {
      "rank": 72,
      "score": 7.902943913635561,
      "candidate": "import math\n\ndef pentagon_perimeter(p):\n    return 5*(p**2) - 4*p\n\ndef pentagon_area(p):\n    return math.sqrt(5*p**2 - 4*p)\n\nif __name__ == \"__main__\":\n    print(pentagon_perimeter(5))\n    print(pentagon_area(5))"
    },
    {
      "rank": 73,
      "score": 7.792119586960233,
      "candidate": "import math\n\n\ndef pentagon_perimeter(sides):\n    \"\"\"\n    sides = the number of sides of the pentagon\n    return the perimeter of the pentagon\n    \"\"\"\n    return (math.sqrt(5)*sides + (sides/2)) * math.sqrt(5)\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    pentagon = input(\"Please enter the number of sides of the pentagon: \")\n    print(pentagon_perimeter(int(pentagon)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 7.475138755931239,
      "candidate": "def perimeter(p):\n    \"\"\"\n    :param p: a 5-digit number\n    :return: the perimeter\n    \"\"\"\n    s = 0\n    for i in range(5):\n        s += p[i]\n    return s\n\nif __name__ == '__main__':\n    test_cases = [\n        (0, 0),\n        (1, 5),\n        (2, 7),\n        (3, 10),\n        (4, 12),\n        (5, 15)\n    ]\n\n    for p in test_cases:\n        print(perimeter(p))"
    },
    {
      "rank": 75,
      "score": 3.4068073505116416,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon-perimeter/problem\n\n# 1.0\ndef pentagon_perimeter(p):\n    \"\"\"\n    :param p: int\n    :return: int\n    \"\"\"\n    # This is the formula for a pentagon:\n    # a * (a + 1) / 2 + b * (b + 1) / 2 + c * (c + 1) / 2 + d * (d + 1) / 2\n    # where a, b, c, d are the sides of the triangle.\n    # Note that a, b, and c are the sides of the triangle.\n    # d is the perimeter.\n    return p * (p + 1) / 2\n\n\nif __name__ == '__main__':\n    p = int(input())\n    print(pentagon_perimeter(p))"
    },
    {
      "rank": 76,
      "score": 3.3959877626660866,
      "candidate": "def pentagon_perimeter(sides):\n    return (sides[0] + sides[1] + sides[2] + sides[3] + sides[4])\n\nsides = [int(input()) for _ in range(5)]\nprint(pentagon_perimeter(sides))"
    },
    {
      "rank": 77,
      "score": 3.352622407428414,
      "candidate": "import math\n\n# Definition for a point\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"(%s, %s)\" % (self.x, self.y)\n\nclass Solution(object):\n    def getPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        return self.getPerimeter1(points)\n\n    def getPerimeter1(self, points):\n        if len(points) < 3:\n            return 0\n        p1, p2 = points[0], points[1]\n        p3, p4 = points[2], points[0]\n        return 2 * ((p1.x - p2.x) + (p3.x - p4.x) + (p1.y - p2.y) + (p3.y - p4.y))\n\n    def getPerimeter2(self, points):\n        if len(points) < 3:\n            return 0\n        p1, p2 = points[0], points[1]\n        p3, p4 = points[2], points[0]\n        return 2 * ((p1.x - p2.x) + (p3.x - p4.x) + (p1.y - p2.y) + (p3.y - p4.y))\n\nclass Solution2(object):\n    def getPerimeter(self, points):\n        if len(points) < 3:\n            return 0\n        p1, p2, p3, p4 = points[0], points[1], points[2], points[0]\n        return 2 * ((p1.x - p2.x) + (p3.x - p4.x) + (p1.y - p2.y) + (p3.y - p4.y))\n\nif __name__ == \"__main__\":\n    points = [Point(0, 0), Point(1, 2), Point(3, 1), Point(4, 3)]\n    p = Solution()\n    print p."
    },
    {
      "rank": 78,
      "score": 3.274851778816918,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon-perimeter/problem\n\n# @include\ndef pentagon_perimeter(n):\n    return (3 * n + 1) * (2 * n + 1) / 2\n\n\n# @exclude\n# @include\ndef pentagon_perimeter_alt(n):\n    return (3 * n + 1) * (2 * n + 1) / 2 - (3 * n + 1) * (2 * n + 2) / 2\n\n\n# @exclude\n# @include\ndef pentagon_perimeter_alt2(n):\n    return (3 * n + 1) * (2 * n + 1) / 2 + (3 * n + 1) * (2 * n + 2) / 2\n\n\ndef pentagon_perimeter_test(n):\n    assert pentagon_perimeter(n) == pentagon_perimeter_alt(n)\n    assert pentagon_perimeter(n) == pentagon_perimeter_alt2(n)\n    return 0\n\n\n# @exclude\n# @include\ndef main():\n    pentagon_perimeter_test(5)\n    pentagon_perimeter_test(6)\n    pentagon_perimeter_test(7)\n    pentagon_perimeter_test(8)\n    pentagon_perimeter_test(9)\n    pentagon_perimeter_test(10)\n    pentagon_perimeter_test(11)\n    pentagon_perimeter_test(12)\n    pentagon_perimeter_test(13)\n    pentagon_perimeter_test(14)\n    pentagon_perimeter_test(15)\n    pentagon_perimeter_test(16)\n    pentagon_perimeter_test(17)\n    pentagon_perimeter_test(18)\n    pentagon_perimeter_test(19)\n    pentagon_perimeter_test(20)\n    pentagon_perimeter_test(21)\n    pentagon_perimeter_test(22)\n    pentagon_perimeter_test(23)\n    pentagon_perimeter_test(24)\n    pentagon_perimeter_test(25)\n    pentagon_per"
    },
    {
      "rank": 79,
      "score": 3.2536417330518135,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getPerimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a = n * (n + 1) / 2\n        return a * (a + 1) / 2\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getPerimeter(5))"
    },
    {
      "rank": 80,
      "score": 3.251847697538551,
      "candidate": "def get_pentagon_perimeter(n):\n    if n < 4:\n        return 0\n    return (n * (n + 1) * (2 * n - 1)) / 6\n\n\ndef get_pentagon_perimeter(n):\n    if n < 4:\n        return 0\n    return (n * (n + 1) * (2 * n - 1)) / 6\n\n\ndef get_pentagon_perimeter(n):\n    if n < 4:\n        return 0\n    return (n * (n + 1) * (2 * n - 1)) / 6\n\nprint get_pentagon_perimeter(5)"
    },
    {
      "rank": 81,
      "score": 3.1683990199061802,
      "candidate": "import math\n\n\ndef pentagon_perimeter(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return (num * (num + 1)) / 2\n\n\ndef test_pentagon_perimeter():\n    assert pentagon_perimeter(5) == 28.5\n    assert pentagon_perimeter(10) == 210.0\n    assert pentagon_perimeter(15) == 285.0\n    assert pentagon_perimeter(20) == 420.0\n\n\ndef main():\n    test_pentagon_perimeter()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 82,
      "score": 3.1291456797829205,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon-perimeter/problem\n\n# Input\n# The first line of input contains an integer T, the number of test cases. T test cases follow. Each test case consists of two lines, containing an integer N and an integer M.\n# N is the length of the first line. M is the length of the second line.\n# The first line of each test case contains an integer N, the length of the first line.\n# The second line of each test case contains an integer M, the length of the second line.\n\n# Output\n# For each test case, output a line containing the perimeter.\n\n# Sample Input\n# 2\n# 5 5\n# 1 1\n# Sample Output\n# 7\n# 6\n# 6\n\n# Sample Input\n# 5 5\n# 4 3\n# Sample Output\n# 14\n# 6\n# 6\n\n# Note:\n# The perimeter of a pentagon is the sum of the lengths of the three diagonals.\n# The perimeter of a triangle is the sum of the lengths of the three sides.\n# The perimeter of a square is the sum of the lengths of the four sides.\n# The perimeter of a rectangle is the sum of the lengths of the four sides.\n\ndef get_perimeter(N, M):\n    \"\"\"\n    Returns the perimeter of a pentagon.\n    :type N: int\n    :type M: int\n    :rtype: int\n    \"\"\"\n\n    # https://www.hackerrank.com/challenges/pentagon-perimeter/problem#test-cases\n    # https://www.hackerrank.com/challenges/pentagon-perimeter/discuss/133744#test-case-1\n    # https://www.hackerrank.com/challenges/pentagon-perimeter/discuss/143936\n\n    # Check if either N or M is 0\n    if N == 0 or M == 0:\n        return 0\n\n    # Check if N is odd\n    if N % 2 == 0:\n        # N is even\n        return N * (M + N / 2)\n\n    # N is odd\n    return (N * (M + N / 2)) + (N * (M + N / 2))"
    },
    {
      "rank": 83,
      "score": 3.0940253665123847,
      "candidate": "def pentagon_perimeter(pentagon):\n    \"\"\"\n    :type pentagon: List[int]\n    :rtype: int\n    \"\"\"\n    return (pentagon[0] + pentagon[1] + pentagon[2] + pentagon[3] + pentagon[4]) / 2\n\nif __name__ == \"__main__\":\n    pentagon = [3, 5, 4, 8, 5, 2, 1]\n    assert pentagon_perimeter(pentagon) == 10"
    },
    {
      "rank": 84,
      "score": 3.0678743707667713,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n\n\nclass Solution:\n    def getPentagonPerimeter(self, p: int) -> int:\n        \"\"\"\n        :type p: int\n        :rtype: int\n        \"\"\"\n        return self.getPentagonArea(p)\n\n    def getPentagonArea(self, p: int) -> int:\n        \"\"\"\n        :type p: int\n        :rtype: int\n        \"\"\"\n        if p <= 1:\n            return 0\n        if p % 2 == 0:\n            return p * (p - 1) / 2\n        return p * (p - 2) / 2 + (p - 1) * (p - 2) / 2"
    },
    {
      "rank": 85,
      "score": 3.0543045347012363,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getPerimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (n + 1) / 2\n\n    def getPerimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (n + 1) / 2\n\n\nif __name__ == \"__main__\":\n    Solution().getPerimeter(5)"
    },
    {
      "rank": 86,
      "score": 2.9964907215681373,
      "candidate": "def pentagon_perimeter(width, height):\n    return (width * height) / 2\n\nif __name__ == \"__main__\":\n    print(pentagon_perimeter(5, 6))\n    print(pentagon_perimeter(5, 7))\n    print(pentagon_perimeter(6, 8))\n    print(pentagon_perimeter(7, 8))\n    print(pentagon_perimeter(8, 9))\n    print(pentagon_perimeter(9, 10))\n    print(pentagon_perimeter(10, 11))\n    print(pentagon_perimeter(11, 12))\n    print(pentagon_perimeter(12, 13))\n    print(pentagon_perimeter(13, 14))\n    print(pentagon_perimeter(14, 15))\n    print(pentagon_perimeter(15, 16))\n    print(pentagon_perimeter(16, 17))\n    print(pentagon_perimeter(17, 18))\n    print(pentagon_perimeter(18, 19))\n    print(pentagon_perimeter(19, 20))\n    print(pentagon_perimeter(20, 21))\n    print(pentagon_perimeter(21, 22))\n    print(pentagon_perimeter(22, 23))\n    print(pentagon_perimeter(23, 24))\n    print(pentagon_perimeter(24, 25))\n    print(pentagon_perimeter(25, 26))\n    print(pentagon_perimeter(26, 27))\n    print(pentagon_perimeter(27, 28))\n    print(pentagon_perimeter(28, 29))\n    print(pentagon_perimeter(29, 30))\n    print(pentagon_perimeter(30, 31))\n    print(pentagon_perimeter(31, 32))\n    print(pentagon_perimeter(32, 33))\n    print(pentagon_perimeter(33, 34))\n    print(pentagon_perimeter(34, 35))\n    print(pentagon_perimeter(35, 36))\n    print(pentagon_perimeter(36, 37))\n    print(pentagon_perimeter(37, 38))"
    },
    {
      "rank": 87,
      "score": 2.9906852298314126,
      "candidate": "import math\n\n# @include\ndef pentagon_perimeter(n):\n    return (3 + n * (math.sqrt(5) - 1) / 2) * n\n\n\ndef main():\n    for n in range(1, 6):\n        print(pentagon_perimeter(n))\n    assert pentagon_perimeter(3) == 10\n    assert pentagon_perimeter(5) == 25\n    assert pentagon_perimeter(7) == 55\n    assert pentagon_perimeter(9) == 132\n    assert pentagon_perimeter(13) == 267\n    assert pentagon_perimeter(17) == 462\n    assert pentagon_perimeter(19) == 729\n    assert pentagon_perimeter(23) == 1146\n    assert pentagon_perimeter(29) == 2162\n    assert pentagon_perimeter(31) == 3189\n    assert pentagon_perimeter(35) == 5190\n    assert pentagon_perimeter(37) == 8190\n    assert pentagon_perimeter(43) == 15370\n    assert pentagon_perimeter(47) == 26720\n    assert pentagon_perimeter(53) == 47840\n    assert pentagon_perimeter(59) == 91480\n    assert pentagon_perimeter(63) == 173900\n    assert pentagon_perimeter(67) == 327950\n    assert pentagon_perimeter(71) == 635250\n    assert pentagon_perimeter(73) == 1063550\n    assert pentagon_perimeter(79) == 2057500\n    assert pentagon_perimeter(83) == 36147500\n    assert pentagon_perimeter(89) == 6497500\n    assert pentagon_perimeter(97) == 10975500\n    assert pentagon_perimeter(103) == 21172500\n    assert pentagon_perimeter(107) == 34612500\n    assert pentagon_perimeter(113) == 64893000\n    assert pentagon_perimeter(119) == 124989000\n    assert pentagon_perimeter(131) == 261489000\n    assert pentagon_perimeter(137) == 479890000\n    assert pentagon"
    },
    {
      "rank": 88,
      "score": 2.9699314465790576,
      "candidate": "def pentagon_perimeter(p):\n    \"\"\"\n    Input: \n        p: number\n    Output: \n        int\n    \"\"\"\n    return p * (3 + p) / 2\n\ndef test_pentagon_perimeter():\n    assert pentagon_perimeter(5) == 10\n\nif __name__ == '__main__':\n    test_pentagon_perimeter()"
    },
    {
      "rank": 89,
      "score": 2.9517286660674076,
      "candidate": "__author__ = 'vivek'\n\ndef pentagon_perimeter(p):\n    \"\"\"\n    :param p: The number of sides of the pentagon.\n    :return: The perimeter of the pentagon.\n    \"\"\"\n    return p*(3*p-1)/2\n\ndef pentagon_perimeter_2(p):\n    \"\"\"\n    :param p: The number of sides of the pentagon.\n    :return: The perimeter of the pentagon.\n    \"\"\"\n    return p*(3*p-1)/2 - p*(p-1)/2\n\ndef pentagon_perimeter_3(p):\n    \"\"\"\n    :param p: The number of sides of the pentagon.\n    :return: The perimeter of the pentagon.\n    \"\"\"\n    return p*(3*p-1)/2 - p*(p-1)/2 + p/2\n\nif __name__ == '__main__':\n    print(pentagon_perimeter(5))\n    print(pentagon_perimeter_2(5))\n    print(pentagon_perimeter_3(5))"
    },
    {
      "rank": 90,
      "score": 2.924159625053748,
      "candidate": "__author__ = 'Danyang'\n# Definition for a  point.\nclass Point(object):\n    def __init__(self, a, b, c):\n        self.x = a\n        self.y = b\n        self.c = c\n\n    def __repr__(self):\n        return str(self.x) + \" \" + str(self.y) + \" \" + str(self.c)\n\nclass Solution(object):\n    def compute(self, p):\n        \"\"\"\n        :param p:\n        :return: the perimeter of the pentagon\n        \"\"\"\n        if p.c == 0:\n            return (p.x + p.y) * 2\n        return (p.x * (p.y + p.c) - p.y * (p.x + p.c)) / 2\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.compute(Point(1,1,1))\n    print s.compute(Point(1,2,1))\n    print s.compute(Point(1,3,1))\n    print s.compute(Point(1,4,1))\n    print s.compute(Point(1,5,1))\n    print s.compute(Point(1,6,1))\n    print s.compute(Point(1,7,1))\n    print s.compute(Point(1,8,1))\n    print s.compute(Point(1,9,1))\n    print s.compute(Point(1,10,1))\n    print s.compute(Point(1,11,1))\n    print s.compute(Point(1,12,1))\n    print s.compute(Point(1,13,1))\n    print s.compute(Point(1,14,1))\n    print s.compute(Point(1,15,1))\n    print s.compute(Point(1,16,1))\n    print s.compute(Point(1,17,1))\n    print s.compute(Point(1,18,1))\n    print s.compute(Point(1,"
    },
    {
      "rank": 91,
      "score": 2.8998786070917575,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def get_perimeter(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return (n * (n + 1) / 2) * (2 + n)\n\n\nif __name__ == \"__main__\":\n    Solution().get_perimeter(5)\n    Solution().get_perimeter(9)"
    },
    {
      "rank": 92,
      "score": 2.8802339195504554,
      "candidate": "import math\n\ndef get_pentagon_perimeter(p):\n    return (math.sqrt(5)*p*(p + 1))/2\n\nif __name__ == '__main__':\n    assert get_pentagon_perimeter(5) == 10\n    assert get_pentagon_perimeter(6) == 12\n    assert get_pentagon_perimeter(7) == 14\n    assert get_pentagon_perimeter(8) == 18\n    assert get_pentagon_perimeter(9) == 22\n    assert get_pentagon_perimeter(10) == 30\n    assert get_pentagon_perimeter(11) == 34\n    assert get_pentagon_perimeter(12) == 42\n    assert get_pentagon_perimeter(13) == 50\n    assert get_pentagon_perimeter(14) == 58\n    assert get_pentagon_perimeter(15) == 66\n    assert get_pentagon_perimeter(16) == 74\n    assert get_pentagon_perimeter(17) == 82\n    assert get_pentagon_perimeter(18) == 90\n    assert get_pentagon_perimeter(19) == 98\n    assert get_pentagon_perimeter(20) == 106\n    assert get_pentagon_perimeter(21) == 114\n    assert get_pentagon_perimeter(22) == 122\n    assert get_pentagon_perimeter(23) == 130\n    assert get_pentagon_perimeter(24) == 138\n    assert get_pentagon_perimeter(25) == 146\n    assert get_pentagon_perimeter(26) == 154\n    assert get_pentagon_perimeter(27) == 162\n    assert get_pentagon_perimeter(28) == 170\n    assert get_pentagon_perimeter(29) == 178\n    assert get_pentagon_perimeter(30) == 186\n    assert get_pentagon_perimeter(31) == 194\n    assert get_pentagon_perimeter(32) == 202\n    assert get_pentagon_perimeter(33) == 210\n    assert get_pentagon_perimeter(34) == 218\n    assert get_pentagon_perimeter(35) == 226"
    },
    {
      "rank": 93,
      "score": 2.8789102640717332,
      "candidate": "import math\n\n# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point [%d, %d]\" % (self.x, self.y)\n\n\nclass Solution:\n    # @param point, a list of point\n    # @return an integer\n    def pentagonPerimeter(self, point):\n        \"\"\"\n        :type point: List[Point]\n        :rtype: int\n        \"\"\"\n        return sum([p.x*(p.y+1) for p in point]) + (len(point) - 1) * math.sqrt(3)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    p = [Point(x, y) for x in range(3, 11) for y in range(3, 11)]\n    print(sol.pentagonPerimeter(p))\n    p = [Point(-1, -1), Point(0, 0), Point(1, 0)]\n    print(sol.pentagonPerimeter(p))"
    },
    {
      "rank": 94,
      "score": 2.8240002799204507,
      "candidate": "import math\n\ndef pentagon_perimeter(side_length):\n    \"\"\"\n    :type side_length: int\n    :rtype: int\n    \"\"\"\n    return (3 * side_length) + ((side_length ** 2) / 4)\n\n\n# https://en.wikipedia.org/wiki/Pentagon\n# https://www.mathopenref.com/p542.html\n# https://www.wolframalpha.com/input/?i=pentagon+perimeter\ndef pentagon_perimeter_wolframalpha(side_length):\n    return (3 * side_length) + (math.sqrt(5) * side_length) / 2\n\n# https://www.geeksforgeeks.org/pentagon-perimeter/\ndef pentagon_perimeter_geeksforgeeks(side_length):\n    return (3 * side_length) + (side_length ** 2 / 5)\n\n# https://www.geeksforgeeks.org/pentagon-perimeter-with-decimal-calculation/\ndef pentagon_perimeter_geeksforgeeks_decimal(side_length):\n    return (3 * side_length) + (math.sqrt(5) * side_length) / 2\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert pentagon_perimeter(5) == 15, \"5\"\n    assert pentagon_perimeter(6) == 24, \"6\"\n    assert pentagon_perimeter(7) == 35, \"7\"\n    assert pentagon_perimeter(8) == 56, \"8\"\n    assert pentagon_perimeter(9) == 89, \"9\"\n    assert pentagon_perimeter_geeksforgeeks(10) == 190, \"10\"\n    assert pentagon_perimeter_geeksforgeeks(11) == 340, \"11\"\n    assert pentagon_perimeter_geeksforgeeks(12) == 585, \"12\"\n    assert pentagon_perimeter_geeksforgeeks(13) == 1040, \"13\"\n    assert pentagon_perimeter_geeksforgeeks(14) == 14"
    },
    {
      "rank": 95,
      "score": 2.8174661955918885,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point(x={}, y={})'.format(self.x, self.y)\n\nclass Solution:\n    def findPentagonPerimeter(self, points: List[Point]) -> int:\n        \"\"\"\n        Brute force, O(n^2)\n        \"\"\"\n        # if len(points) < 3, return 0\n        if len(points) < 3:\n            return 0\n\n        # points = sorted(points, key=lambda p: p.x)\n        # mid = (len(points) - 1) / 2\n        # left = points[:mid]\n        # right = points[mid:]\n        # left.append(points[-1])\n        # right.insert(0, points[-1])\n        # return (sum(p.x for p in left) + sum(p.x for p in right) +\n        #         (len(points) - 1) * (points[0].y - points[-1].y))\n        #\n        # return sum(p.x for p in points) + (len(points) - 1) * (points[0].y - points[-1].y)\n\n        # Use stack\n        # return sum(p.x for p in points) + (len(points) - 1) * (points[0].y - points[-1].y)\n\n        # Use queue\n        # return sum(p.x for p in points) + (len(points) - 1) * (points[0].y - points[-1].y)\n\n        # Use pair\n        return sum(p.x for p in points) + (len(points) - 1) * (points[0].y - points[-1].y)\n\n\n    # Use two stacks\n    def findPentagonPerimeter2(self, points: List[Point]) -> int:\n        \"\"\"\n        Brute force, O(n^2)\n        \"\"\"\n        if len(points) < 3:\n            return 0\n\n        # points = sorted(points,"
    },
    {
      "rank": 96,
      "score": 2.789791663247771,
      "candidate": "from math import sqrt\n\n\ndef get_perimeter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n * (n + 1)) / 2 * (n - 1)\n\n\ndef get_pentagon_perimeter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n * (3 * n - 1)) / 2 * (n - 1)\n\n\ndef get_pentagon_perimeter2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n * (3 * n - 1)) / 2 * (n - 1)\n\n\ndef get_pentagon_perimeter3(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n * (5 * n - 1)) / 2 * (n - 1)\n\n\ndef get_pentagon_perimeter4(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n * (5 * n - 1)) / 2 * (n - 1)\n\n\ndef get_pentagon_perimeter5(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n * (10 * n - 1)) / 2 * (n - 1)\n\n\ndef get_pentagon_perimeter6(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n * (5 * n - 1)) / 2 * (n - 1)\n\n\ndef get_pentagon_perimeter7(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n *"
    },
    {
      "rank": 97,
      "score": 2.712352906758433,
      "candidate": "import math\n\ndef find_pentagon_perimeter(p1, p2, p3, p4):\n    \"\"\"\n    :type p1: int\n    :type p2: int\n    :type p3: int\n    :type p4: int\n    :rtype: int\n    \"\"\"\n    perimeter = 0\n    area = 0.0\n    for i in range(5):\n        area += (p1 + p2 + p3 + p4) / 5\n        p1 = p2\n        p2 = p3\n        p3 = p4\n        p4 = math.sqrt(area)\n    perimeter = math.sqrt(area) * 5\n    return perimeter\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_pentagon_perimeter(1, 2, 3, 4) == 15, \"1 + 2 + 3 + 4 == 15\"\n    assert find_pentagon_perimeter(4, 3, 2, 1) == 15, \"4 + 3 + 2 + 1 == 15\"\n    assert find_pentagon_perimeter(7, 12, 21, 34) == 28, \"7 + 12 + 21 + 34 == 28\"\n    assert find_pentagon_perimeter(10, 6, 4, 2) == 14, \"10 + 6 + 4 + 2 == 14\"\n    assert find_pentagon_perimeter(5, 7, 8, 9) == 16, \"5 + 7 + 8 + 9 == 16\"\n    assert find_pentagon_perimeter(8, 6, 4, 3) == 16, \"8 + 6 + 4 + 3 == 16\""
    },
    {
      "rank": 98,
      "score": 2.5025471363889724,
      "candidate": "def pentagon_perimeter(num_lines):\n    \"\"\"\n    Returns the perimeter of a pentagon.\n\n    Inputs:\n    num_lines - the number of lines in the pentagon\n\n    Explanation:\n    Pentagon is the smallest possible shape for a triangle.\n    We can easily see that the perimeter of a pentagon is half the perimeter of a triangle, so we can\n    simply calculate the perimeter of a triangle by dividing the perimeter of a triangle by 2.\n    \"\"\"\n\n    return num_lines * (num_lines - 1) / 2\n\n\nif __name__ == \"__main__\":\n    assert pentagon_perimeter(5) == 28\n    assert pentagon_perimeter(6) == 30\n    assert pentagon_perimeter(7) == 32\n    assert pentagon_perimeter(8) == 34\n    assert pentagon_perimeter(9) == 36\n    assert pentagon_perimeter(10) == 38\n    assert pentagon_perimeter(11) == 40\n    assert pentagon_perimeter(12) == 42\n    assert pentagon_perimeter(13) == 44\n    assert pentagon_perimeter(14) == 46\n    assert pentagon_perimeter(15) == 48\n    assert pentagon_perimeter(16) == 50\n    assert pentagon_perimeter(17) == 52\n    assert pentagon_perimeter(18) == 54\n    assert pentagon_perimeter(19) == 56\n    assert pentagon_perimeter(20) == 58\n    assert pentagon_perimeter(21) == 60\n    assert pentagon_perimeter(22) == 62\n    assert pentagon_perimeter(23) == 64\n    assert pentagon_perimeter(24) == 66\n    assert pentagon_perimeter(25) == 68\n    assert pentagon_perimeter(26) == 70\n    assert pentagon_perimeter(27) == 72\n    assert pentagon_perimeter(28) == 74\n    assert pentagon_perimeter(29) == 76\n    assert pentagon_perimeter(30) == 78\n    assert pentagon_perimeter(31) == 80\n    assert pentagon_perimeter(32) == 82\n    assert pentagon_perimeter("
    },
    {
      "rank": 99,
      "score": 2.490485767791258,
      "candidate": "# https://oj.leetcode.com/problems/pentagon-perimeter/\n\nclass Solution:\n    # @param {integer} n\n    # @return {integer}\n    def pentagonPerimeter(self, n):\n        return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    print Solution().pentagonPerimeter(5)"
    },
    {
      "rank": 100,
      "score": 2.483232082203768,
      "candidate": "import math\n\n\ndef get_pentagon_perimeter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n\ndef test_get_pentagon_perimeter():\n    assert get_pentagon_perimeter(5) == 20\n    assert get_pentagon_perimeter(6) == 24\n    assert get_pentagon_perimeter(7) == 28\n\n\ndef main():\n    test_get_pentagon_perimeter()\n\n\nif __name__ == '__main__':\n    main()"
    }
  ]
}