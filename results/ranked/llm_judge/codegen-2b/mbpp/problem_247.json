{
  "timestamp": "2025-09-14T19:12:03.103832",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 247,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/odd-elements/problem\n\nimport collections\n\ndef odd_elements(seq):\n    return sum(1 for i in seq if i % 2 == 1)\n\ndef main():\n    print(odd_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/odd-elements-of-list/problem\n\ndef odd_elements(list_):\n    return sum([1 for i in list_ if i % 2 == 1])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/odd-list/problem\n\nfrom itertools import islice\n\ndef odd_elements(my_list):\n    return sum(1 for e in my_list if e % 2)\n\n# My solution\ndef odd_elements2(my_list):\n    return sum(1 for e in my_list if e % 2 == 1)\n\ndef main():\n    my_list = [1,2,3,4,5,6,7,8,9]\n    print odd_elements(my_list)\n    print odd_elements2(my_list)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def odd_elements(lst):\n    return sum(1 for i in lst if i % 2!= 0)\n\ndef odd_elements_lambda(lst):\n    return sum(i % 2 == 0 for i in lst)\n\n# Note:\n# If the list is empty, return 0.\n# If the list is even, return 0.\n# If the list is odd, return 1.\n\n# Hint:\n# You can use lambda function to write a function to solve this problem."
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom functools import reduce\nfrom operator import mul\n\ndef count_odd_elements(arr):\n    return reduce(mul, [x for x in arr if x % 2])\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(count_odd_elements(arr))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-the-odd-number/problem\n\n# Your function should return an integer.\n\ndef find_odd_number(arr):\n    odd_number_count = 0\n    for i in arr:\n        if i % 2 == 0:\n            odd_number_count += 1\n    return odd_number_count\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 8]\n    print(find_odd_number(arr))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/odd-elements/problem\n# https://www.hackerrank.com/challenges/odd-elements/submissions/code/2399056\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\ndef odd_elements(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    odds = 0\n    for val in lst:\n        if val % 2 == 1:\n            odds += 1\n    return odds\n\nif __name__ == \"__main__\":\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(odd_elements(lst))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def odd_elements(list_of_numbers):\n    return sum(lambda x: x % 2 == 1, list_of_numbers)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(odd_elements(numbers))\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def odd_elements(lst):\n    return len([1 for i in lst if i % 2 == 1])\n\n#Test Cases\nlst = [1,2,3,4,5]\nprint(odd_elements(lst))\nlst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\nprint(odd_elements(lst))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://www.hackerrank.com/challenges/odd-even-list/problem\n\nimport sys\n\ndef odd_even_list(lst):\n    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            result += 1\n        else:\n            result += 1\n            lst[i] += 1\n    return result\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    lst = [int(x) for x in sys.stdin.readline().split()]\n    print(odd_even_list(lst))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def oddElements(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        odd_elements = 0\n        while head:\n            if head.val % 2:\n                odd_elements += 1\n            head = head.next\n        return odd_elements\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.oddElements([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    print s.oddElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print s.oddElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def odd_elements(lst):\n    return len([i for i in lst if i % 2 == 1])\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print(odd_elements(lst))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def odd_elements_in_list(list):\n    return sum(lambda x: x % 2 == 1, list)\n\n#print odd_elements_in_list([1, 2, 3, 4, 5])\n#print odd_elements_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9])\n#print odd_elements_in_list([-1, -2, -3, -4, -5])\n\n#print odd_elements_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 14,
      "score": 9.94987207630077,
      "candidate": "def odd_elements(my_list):\n    return sum(lambda x: x % 2 == 1, my_list)\n\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\nprint(odd_elements(my_list))"
    },
    {
      "rank": 15,
      "score": 9.9367785888247,
      "candidate": "def list_odd_elements(lst):\n    return len(filter(lambda x: x % 2, lst))\n\nif __name__ == '__main__':\n    lst = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234"
    },
    {
      "rank": 16,
      "score": 9.916512658520173,
      "candidate": "# https://www.hackerrank.com/challenges/odds-in-list/problem\ndef odds_in_list(list):\n    # +++your code here+++\n    return sum(1 for x in list if x % 2 == 1)"
    },
    {
      "rank": 17,
      "score": 9.896027784287595,
      "candidate": "def count_odd_elements(list):\n    odd_count = 0\n    for e in list:\n        if e % 2 == 1:\n            odd_count += 1\n    return odd_count\n\n#print count_odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nprint count_odd_elements([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413"
    },
    {
      "rank": 18,
      "score": 9.8569647449829,
      "candidate": "def count_odd(list):\n    odd_count = 0\n    for x in list:\n        if x % 2 == 1:\n            odd_count += 1\n    return odd_count\n\n# list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n# list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,"
    },
    {
      "rank": 19,
      "score": 9.848182367104938,
      "candidate": "# https://www.hackerrank.com/challenges/odds-in-a-list/problem\n\ndef odd_elements(my_list):\n    return sum(lambda x: x % 2 == 1, my_list)\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(odd_elements(my_list))"
    },
    {
      "rank": 20,
      "score": 9.837539214698063,
      "candidate": "def odd_elements(lst):\n    return sum(i for i in lst if i % 2 == 1)\n\n# Test Cases\n#   lst = [1, 2, 3, 4, 5, 6, 7]\n#   lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n#   lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n# Your function should return the number of odd elements in the given list.\n# Hint: Write a lambda function.\n\n# Note:\n#   Do not use built-in lambda function.\n#   Do not use sum\n#   Do not use filter\n#   Do not use range\n#   Do not use list comprehensions\n\n# SAMPLE INPUT:\n#   [1, 2, 3, 4, 5, 6, 7]\n# SAMPLE OUTPUT:\n#   3\n# SAMPLE EXAMPLE:\n#   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n#   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
    },
    {
      "rank": 21,
      "score": 9.825817666256617,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return an integer\n    def oddEvenList(self, head):\n        if head == None:\n            return 0\n        odds = 0\n        while head:\n            head = head.next\n            if head:\n                head.next = ListNode(0)\n            else:\n                break\n        evens = 0\n        while head:\n            odds += 1\n            head = head.next\n            evens += 1\n        return odds + evens"
    },
    {
      "rank": 22,
      "score": 9.817231059917392,
      "candidate": "def odd_elements(list_of_numbers):\n    return sum(i for i in range(1, len(list_of_numbers) + 1) if list_of_numbers[i - 1] % 2 == 1)\n\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 23,
      "score": 9.805642063733428,
      "candidate": "# https://www.hackerrank.com/challenges/odd-elements/problem\n\n#!/bin/python\n\ndef odd_elements(my_list):\n    # Complete this function\n    odd_list = []\n    for i in range(len(my_list)):\n        if my_list[i] % 2 == 0:\n            odd_list.append(my_list[i])\n    return odd_list\n\nif __name__ == '__main__':\n    my_list = [1,2,3,4,5,6,7,8,9]\n    my_list_odd = odd_elements(my_list)\n    print(my_list_odd)"
    },
    {
      "rank": 24,
      "score": 9.773411268729888,
      "candidate": "def count_odd(lst):\n    return sum(lambda x: x%2==1, lst)\n\nif __name__ == '__main__':\n    lst = [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(count_odd(lst))"
    },
    {
      "rank": 25,
      "score": 9.701289557018372,
      "candidate": "def count_odd_elements(lst):\n    odd_elements = 0\n    for e in lst:\n        if e % 2 == 1:\n            odd_elements += 1\n    return odd_elements\n\nprint count_odd_elements([1, 2, 3, 4, 5, 6, 7, 8])"
    },
    {
      "rank": 26,
      "score": 9.67702421149822,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return an integer\n    def countOdd(self, head):\n        if not head:\n            return 0\n        count = 0\n        while head:\n            if head.val % 2 == 1:\n                count += 1\n            head = head.next\n        return count"
    },
    {
      "rank": 27,
      "score": 9.604850964004328,
      "candidate": "def odd_elements(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(odd_elements(lst))"
    },
    {
      "rank": 28,
      "score": 9.333537973008735,
      "candidate": "def count_odds(numbers):\n    odds = 0\n    for number in numbers:\n        if number % 2 == 0:\n            odds += 1\n    return odds\n\n\nprint(count_odds([1, 2, 3, 4, 5]))\n\nprint(count_odds([3, 4, 5, 6, 7]))"
    },
    {
      "rank": 29,
      "score": 9.195473399235167,
      "candidate": "# https://www.geeksforgeeks.org/write-a-lambda-function-to-find-number-of-odd-elements-in-the-given-list/\ndef count_odds(l):\n    return sum(lambda x: x % 2 == 1, l)\n\n# http://www.geeksforgeeks.org/count-odd-elements-in-the-given-list/\ndef count_odds_with_list(l):\n    return sum(lambda x: x % 2 == 1, l)\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(count_odds(l))\n    print(count_odds_with_list(l))"
    },
    {
      "rank": 30,
      "score": 9.18270199634811,
      "candidate": "def odd_elements(list):\n    return sum([1 for elem in list if lambda x: x % 2 == 1])\n\n\nif __name__ == '__main__':\n    print(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 31,
      "score": 9.175498775520296,
      "candidate": "from math import sqrt\n\n\ndef odd_elements(list_):\n    return len(list_) - sum(1 for i in range(len(list_)) if list_[i] % 2 == 0)\n\n\ndef test_odd_elements():\n    assert odd_elements([2, 1, 3]) == 1\n    assert odd_elements([1, 2, 3, 4, 5]) == 3\n    assert odd_elements([4, 2, 3, 1]) == 0\n\n\nif __name__ == '__main__':\n    test_odd_elements()"
    },
    {
      "rank": 32,
      "score": 9.14795585352679,
      "candidate": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\n# from list to set\n# from set to list\n\n# def odd_elements(lst):\n#     return [e for e in lst if e % 2 == 1]\n\n# def odd_elements(lst):\n#     return [e for e in lst if e % 2 == 1]\n\n\ndef odd_elements(lst):\n    return [e for e in lst if e % 2 == 1]"
    },
    {
      "rank": 33,
      "score": 9.09543965815844,
      "candidate": "def count_odd_elements(list):\n    odd_count = 0\n    for i in list:\n        if i % 2 == 1:\n            odd_count += 1\n    return odd_count\n\nprint(count_odd_elements([1, 2, 3, 4, 5, 6, 7]))\nprint(count_odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 34,
      "score": 8.951863113029525,
      "candidate": "from collections import Counter\n\ndef count_odd_elements(lst):\n    return Counter(lst).values()\n\n\nif __name__ == \"__main__\":\n    lst = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(count_odd_elements(lst))"
    },
    {
      "rank": 35,
      "score": 8.9393242152425,
      "candidate": "def odd_elements(list):\n\treturn lambda x: x % 2 == 1\n\nprint(odd_elements([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 36,
      "score": 8.89145890162022,
      "candidate": "from functools import reduce\n\ndef list_odd_elements(lst):\n    return reduce(lambda x, y: x + (y % 2), lst, 0)\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list_odd_elements(lst))"
    },
    {
      "rank": 37,
      "score": 8.88383746094144,
      "candidate": "def countOddElements(list):\n    return sum(lambda x: x%2==1, list)\n\n# Test cases\nassert(countOddElements([3, 2, 1, 4, 5]) == 3)\nassert(countOddElements([5, 2, 1, 4, 3]) == 2)\nassert(countOddElements([3, 2, 5, 4, 3]) == 3)\nassert(countOddElements([3, 2, 5, 4, 3]) == 0)"
    },
    {
      "rank": 38,
      "score": 8.839266002253975,
      "candidate": "from collections import Counter\n\ndef count_odd(lst):\n    c = Counter(lst)\n    return (c[1] % 2)\n\nprint(count_odd([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 39,
      "score": 8.755334942732777,
      "candidate": "def countOdds(lst):\n    return sum(i for i in lst if i % 2!= 0)\n\nif __name__ == '__main__':\n    print(countOdds([1, 2, 3, 4, 5]))\n    print(countOdds([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(countOdds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))"
    },
    {
      "rank": 40,
      "score": 8.704873265365707,
      "candidate": "def count_odd(l):\n    return sum(lambda x: x % 2 == 1, l)\n\n# Note:\n# 1. List is a list of integers.\n# 2. sum(lambda x: x % 2 == 1, l) returns the sum of all odd elements in l.\n# 3. sum(lambda x: x % 2 == 1) returns the sum of all odd elements in l.\n# 4. sum(lambda x: x % 2 == 1) can be rewritten as sum(lambda x: x % 2 == 0) + sum(lambda x: x % 2 == 1)."
    },
    {
      "rank": 41,
      "score": 8.690812812338855,
      "candidate": "from functools import reduce\n\n\ndef odd_elements(lst):\n    return sum(1 for i in lst if i % 2 == 1)\n\n\nif __name__ == '__main__':\n    assert odd_elements([1, 2, 3, 4, 5, 6]) == 3, 'Odd elements using lambda function'\n    assert odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10, 'Odd elements using lambda function'\n    assert odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, 'Odd elements using lambda function'\n    assert odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11, 'Odd elements using lambda function'\n    assert odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12, 'Odd elements using lambda function'"
    },
    {
      "rank": 42,
      "score": 8.618029736467308,
      "candidate": "def countOdd(list):\n    count = 0\n    for i in list:\n        if i % 2!= 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    assert(countOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3)"
    },
    {
      "rank": 43,
      "score": 8.600004749753946,
      "candidate": "def number_of_odds(l):\n    return sum(lambda x: x % 2 == 1, l)\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    print(number_of_odds(l))\n    l = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(number_of_odds(l))"
    },
    {
      "rank": 44,
      "score": 8.58658217743544,
      "candidate": "import collections\n\ndef odd_elements(list_of_numbers):\n    odd_count = collections.Counter(list_of_numbers).values()\n    odd_count = [n for n in odd_count if n % 2 == 1]\n    return len(odd_count)\n\nprint(odd_elements([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 45,
      "score": 8.560586334796142,
      "candidate": "# https://www.hackerrank.com/challenges/odd-elements-in-a-list/problem\n\ndef find_odd_elements(list):\n    odd_elements = 0\n    for item in list:\n        if not item % 2 == 0:\n            odd_elements += 1\n    return odd_elements\n\n\nif __name__ == '__main__':\n    input_list = list(map(int, input().split()))\n    print(find_odd_elements(input_list))"
    },
    {
      "rank": 46,
      "score": 8.538937837661624,
      "candidate": "def count_odd(list):\n    return sum(lambda x: x % 2 == 1, list)\n\n\nif __name__ == '__main__':\n    assert count_odd([1, 2, 3, 4, 5]) == 3\n    assert count_odd([1, 2, 3, 4, 5, 6]) == 5\n    assert count_odd([1, 2, 3, 4, 5, 6, 7]) == 7\n    assert count_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 8"
    },
    {
      "rank": 47,
      "score": 8.52670121941563,
      "candidate": "def count_odd(seq):\n    return sum(lambda x: x % 2 == 1, seq)\n\ndef test():\n    assert count_odd([1, 2, 3, 4]) == 3\n    assert count_odd([1, 2, 3, 4, 5]) == 4\n    assert count_odd([1, 2, 3, 4, 5, 6]) == 5\n    assert count_odd([1, 2, 3, 4, 5, 6, 7]) == 6\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 48,
      "score": 8.488489617181486,
      "candidate": "def odd_elements(arr):\n    return sum(lambda x: x % 2 == 0, arr)\n\n# Your odd_elements function should return an integer.\n# If input is not a list, return 0.\n# If input is a list with even number of elements, return 0.\n# If input is a list with odd number of elements, return the sum of odd elements."
    },
    {
      "rank": 49,
      "score": 8.486227037198766,
      "candidate": "def count_odd_elements(list):\n    odd_elements = 0\n    for item in list:\n        if item % 2 == 0:\n            odd_elements += 1\n    return odd_elements\n\ndef test():\n    assert count_odd_elements([1, 2, 3, 4, 5, 6]) == 3\n    assert count_odd_elements([1, 2, 3, 4, 5, 6, 7, 8]) == 5\n    assert count_odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 50,
      "score": 8.476857982694648,
      "candidate": "# http://www.geeksforgeeks.org/find-number-of-odd-elements-in-a-given-list/\n\ndef odd_elements(list_of_numbers):\n    odd_elements_count = 0\n    for i in range(len(list_of_numbers)):\n        if list_of_numbers[i] % 2 == 1:\n            odd_elements_count += 1\n    return odd_elements_count\n\n\nlist_of_numbers = [1, 2, 3, 4, 5]\nprint(odd_elements(list_of_numbers))"
    },
    {
      "rank": 51,
      "score": 8.427247945671668,
      "candidate": "def odd_elements(my_list):\n    return sum(lambda x: x % 2 == 1, my_list)\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print odd_elements(my_list)"
    },
    {
      "rank": 52,
      "score": 8.409879586085884,
      "candidate": "from collections import defaultdict\n\n# your code goes here\ndef count_odds(list):\n    odd_count = 0\n    for i in range(0, len(list)):\n        if list[i] % 2 == 1:\n            odd_count += 1\n    return odd_count\n\n# test cases\nlist_a = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist_b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist_c = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nlist_d = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(count_odds(list_a))\nprint(count_odds(list_b))\nprint(count_odds(list_c))\nprint(count_odds(list_d))"
    },
    {
      "rank": 53,
      "score": 8.38893326889809,
      "candidate": "import collections\n\ndef count_odd_elements(arr):\n    count = collections.Counter(arr)\n    return count.get(1, 0)\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(count_odd_elements(arr))"
    },
    {
      "rank": 54,
      "score": 8.378077579882277,
      "candidate": "def count_odd_elements(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum([i % 2 == 1 for i in list_of_numbers])"
    },
    {
      "rank": 55,
      "score": 8.332058705108839,
      "candidate": "def odd_elements(lst):\n    return sum(1 for i in lst if i % 2 == 0)\n\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 56,
      "score": 8.331842620424375,
      "candidate": "#!/usr/bin/python\n\ndef findOddNumber(arr):\n    return sum(1 for x in arr if x % 2!= 0)\n\narr = [1, 2, 3, 4, 5, 6]\nprint findOddNumber(arr)\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# print findOddNumber(arr)"
    },
    {
      "rank": 57,
      "score": 8.304431444543672,
      "candidate": "def odd_elements(lst):\n    return sum(1 for i in lst if i % 2 == 1)\n\nprint(odd_elements([1, 2, 3, 4, 5, 6]))\nprint(odd_elements([1, 2, 3, 4, 5]))\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 58,
      "score": 8.299914670561586,
      "candidate": "def count_odd_elements(list):\n    return sum(lambda x: x % 2 == 0, list)\n\nif __name__ == \"__main__\":\n    assert count_odd_elements([1, 2, 3, 4, 5]) == 4\n    assert count_odd_elements([1, 2, 3, 4, 5, 6]) == 3\n    assert count_odd_elements([1, 2, 3, 4, 5, 6, 7]) == 1\n    assert count_odd_elements([1, 2, 3, 4, 5, 6, 7, 8]) == 0"
    },
    {
      "rank": 59,
      "score": 8.287166614077515,
      "candidate": "def odd_elements(list):\n    odd = 0\n    for x in list:\n        if x % 2 == 1:\n            odd += 1\n    return odd\n\ndef main():\n    test_list = [1, 3, 5, 7, 9]\n    print(odd_elements(test_list))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.25623253094101,
      "candidate": "def odd_elements(my_list):\n    return len([x for x in my_list if x % 2 == 1])\n\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 61,
      "score": 8.223337834383747,
      "candidate": "from functools import lru_cache\n\ndef odd_elements(list_of_numbers):\n    return sum(1 for i in list_of_numbers if i % 2 == 1)\n\n\n@lru_cache(maxsize=None)\ndef odd_elements_cache(list_of_numbers):\n    return sum(1 for i in list_of_numbers if i % 2 == 1)\n\n\ndef test_odd_elements_cache():\n    assert odd_elements_cache([1, 2, 3, 4, 5, 6]) == 6\n    assert odd_elements_cache([0, 0, 0, 0, 0, 0]) == 0\n    assert odd_elements_cache([]) == 0\n\ndef test_odd_elements():\n    assert odd_elements([1, 2, 3, 4, 5, 6]) == 6\n    assert odd_elements([0, 0, 0, 0, 0, 0]) == 0\n    assert odd_elements([]) == 0\n\ndef test_odd_elements_lambda():\n    assert odd_elements(list_of_numbers=[1, 2, 3, 4, 5, 6]) == 6\n    assert odd_elements(list_of_numbers=[0, 0, 0, 0, 0, 0]) == 0\n    assert odd_elements(list_of_numbers=[]) == 0\n\nif __name__ == '__main__':\n    test_odd_elements()\n    test_odd_elements_lambda()\n    test_odd_elements_cache()"
    },
    {
      "rank": 62,
      "score": 8.222003951894463,
      "candidate": "def count_odd(list):\n    return sum(lambda x: x % 2 == 1, list)\n\nif __name__ == \"__main__\":\n    test_case = [1,2,3,4,5,6]\n    print count_odd(test_case)"
    },
    {
      "rank": 63,
      "score": 8.195674739673095,
      "candidate": "def odd_elements(alist):\n    return sum([1 for x in alist if x % 2 == 1])\n\nalist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(odd_elements(alist))"
    },
    {
      "rank": 64,
      "score": 8.156137873283418,
      "candidate": "def countOdd(myList):\n    count = 0\n    for i in myList:\n        if i % 2!= 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    myList = [1, 2, 3, 4, 5, 6, 7]\n    print(countOdd(myList))"
    },
    {
      "rank": 65,
      "score": 8.107458959383315,
      "candidate": "from collections import Counter\n\n\ndef find_odd(lst):\n    return sum(1 for x in lst if x % 2!= 0)\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5]\n    print(find_odd(lst))"
    },
    {
      "rank": 66,
      "score": 8.008592888194263,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\n\ndef odd_elements(head):\n\t\"\"\"\n\t:type head: ListNode\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\twhile head is not None:\n\t\tif head.val % 2!= 0:\n\t\t\tcount += 1\n\t\thead = head.next\n\treturn count\n\nif __name__ == \"__main__\":\n\thead = ListNode(1)\n\thead.next = ListNode(2)\n\thead.next.next = ListNode(3)\n\thead.next.next.next = ListNode(4)\n\thead.next.next.next.next = ListNode(5)\n\thead.next.next.next.next.next = ListNode(6)\n\tprint(odd_elements(head))"
    },
    {
      "rank": 67,
      "score": 7.936743198545613,
      "candidate": "# https://www.hackerrank.com/challenges/odds-in-a-list/problem\ndef count_odds(list):\n    return sum(lambda x: x % 2 == 1, list)\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for a0 in range(t):\n        n = int(input())\n        list = [int(i) for i in input().split()]\n        print(count_odds(list))"
    },
    {
      "rank": 68,
      "score": 7.891967527281739,
      "candidate": "from collections import Counter\n\ndef odd_elements(nums):\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return len(odd_nums)\n\n# your code goes here\ndef test():\n    assert odd_elements([1, 2, 3, 4, 5, 6]) == 3\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 69,
      "score": 7.858439492458354,
      "candidate": "def count_odds(l):\n    return sum(lambda x: x%2, l)\n\nprint(count_odds([1, 2, 3, 4, 5, 6]))\nprint(count_odds([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 70,
      "score": 7.734753889068079,
      "candidate": "def countOdd(arr):\n    return sum(x % 2 for x in arr)\n\narr = [1,2,3,4,5]\nprint(countOdd(arr))"
    },
    {
      "rank": 71,
      "score": 7.616483884838189,
      "candidate": "def count_odd_elements(list_of_numbers):\n    return sum(lambda x: x % 2, list_of_numbers)\n\n\nlist_of_numbers = [3, 1, 4, 5, 3, 6, 2, 1, 4, 5, 3]\nprint(count_odd_elements(list_of_numbers))"
    },
    {
      "rank": 72,
      "score": 7.598185169870332,
      "candidate": "def count_odd_elements(lst):\n    return sum(i for i in lst if i % 2!= 0)"
    },
    {
      "rank": 73,
      "score": 7.5260699270087015,
      "candidate": "# https://www.hackerrank.com/challenges/odds-in-a-list\n# https://www.hackerrank.com/challenges/odds-in-a-list/problem\n\ndef find_odds_in_a_list(l):\n    # Lambda function to count odd elements in a list\n    odd_count = 0\n    for element in l:\n        if element % 2:\n            odd_count += 1\n    return odd_count\n\nif __name__ == '__main__':\n    n = int(input())\n    l = []\n    for _ in range(n):\n        l.append(int(input()))\n    print(find_odds_in_a_list(l))"
    },
    {
      "rank": 74,
      "score": 7.5038027849821525,
      "candidate": "def odd_elements(my_list):\n    return sum(1 for element in my_list if element % 2 == 1)\n\nprint odd_elements([1, 3, 5, 7, 9])\n\n\"\"\"\nOutput\n\n>>> odd_elements([1, 3, 5, 7, 9])\n5\n\"\"\""
    },
    {
      "rank": 75,
      "score": 7.4904113654360165,
      "candidate": "def count_odd(list_of_nums):\n    odd_count = 0\n    for num in list_of_nums:\n        if num % 2 == 1:\n            odd_count += 1\n    return odd_count\n\n\nif __name__ == \"__main__\":\n    assert(count_odd([2, 3, 5, 7, 9]) == 3)"
    },
    {
      "rank": 76,
      "score": 3.369473511185379,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n        else:\n            return \"END\"\n\nclass Solution(object):\n    def oddElements(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        odd = 0\n        while head:\n            head = head.next\n            if head:\n                odd += 1\n        return odd\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    print Solution().oddElements(head)"
    },
    {
      "rank": 77,
      "score": 3.242161247633222,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def oddElements(self, head: ListNode) -> int:\n        \"\"\"\n        O(n)\n        \"\"\"\n        count = 0\n        while head:\n            if head.val % 2 == 1:\n                count += 1\n            head = head.next\n        return count"
    },
    {
      "rank": 78,
      "score": 3.205475626093806,
      "candidate": "def odd_elements(list_of_numbers):\n    # write your code here\n    return sum(list_of_numbers) % 2\n\n\nif __name__ == '__main__':\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(odd_elements(list_of_numbers))"
    },
    {
      "rank": 79,
      "score": 3.152919072210217,
      "candidate": "def odd_elements(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(lambda x: x % 2 == 0, list_of_numbers)\n\nif __name__ == '__main__':\n    assert odd_elements([1, 2, 3, 4, 5]) == 3\n    assert odd_elements([3, 4, 5, 6, 7]) == 3\n    assert odd_elements([3, 4, 5, 6, 7, 8]) == 4"
    },
    {
      "rank": 80,
      "score": 3.093924504586418,
      "candidate": "def odd_elements(my_list):\n    return sum(lambda x: x % 2 == 0, my_list)\n\n# Example 1:\n# my_list = [1, 3, 5, 7]\n# >>> odd_elements(my_list)\n# 3\n\n# Example 2:\n# my_list = [1, 3, 5, 7, 9]\n# >>> odd_elements(my_list)\n# 6\n\n# Example 3:\n# my_list = [1, 3, 5, 7, 9, 11]\n# >>> odd_elements(my_list)\n# 8\n\n# Note:\n# - 0 < my_list.length <= 1000\n# - 0 < my_list[i] < 1000\n# - my_list is not sorted."
    },
    {
      "rank": 81,
      "score": 3.089278142877937,
      "candidate": "# TODO:\n# - use a list of lists as input\n# - use a list as input\n# - use a map to store the result\n\ndef odd_elements(l):\n    return sum(1 for i in l if i % 2!= 0)\n\n\ndef main():\n    print(odd_elements([1, 2, 3, 4, 5]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 82,
      "score": 3.082187777414921,
      "candidate": "# O(n) time\n# O(n) space\ndef count_odds(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda_2(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda_3(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda_4(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda_5(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda_6(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda_7(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda_8(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda_9(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n) space\ndef count_odds_lambda_10(lst):\n    return sum(lambda x: x % 2 == 1, lst)\n\n# O(n) time\n# O(n"
    },
    {
      "rank": 83,
      "score": 3.0652638180449725,
      "candidate": "# https://leetcode.com/problems/odd-elements-in-a-linked-list/discuss/231170/Python-O(n)-Solution-with-lambda-expression\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution(object):\n    def countOddElements(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        count = 0\n        curr = head\n        while curr:\n            count += 1\n            curr = curr.next\n        count = count % 2\n        curr = head\n        while curr:\n            if curr.val % 2:\n                count += 1\n            curr = curr.next\n        return count"
    },
    {
      "rank": 84,
      "score": 3.02426938733701,
      "candidate": "import math\n\ndef odd_elements(lst):\n    for i in lst:\n        if i % 2!= 0:\n            return i\n\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\"\"\"\nWrite a function to find the smallest even number in the given list using lambda function.\n\"\"\"\n\ndef smallest_even_number(lst):\n    for i in lst:\n        if i % 2 == 0:\n            return i\n\nprint(smallest_even_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\"\"\"\nWrite a function to find the largest odd number in the given list using lambda function.\n\"\"\"\n\ndef largest_odd_number(lst):\n    for i in lst:\n        if i % 2!= 0:\n            return i\n\nprint(largest_odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\"\"\"\nWrite a function to find the largest even number in the given list using lambda function.\n\"\"\"\n\ndef largest_even_number(lst):\n    for i in lst:\n        if i % 2 == 0:\n            return i\n\nprint(largest_even_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\"\"\"\nWrite a function to find the smallest odd number in the given list using lambda function.\n\"\"\"\n\ndef smallest_odd_number(lst):\n    for i in lst:\n        if i % 2!= 0:\n            return i\n\nprint(smallest_odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\"\"\"\nWrite a function to find the smallest even number in the given list using lambda function.\n\"\"\"\n\ndef smallest_even_number(lst):\n    for i in lst:\n        if i % 2 == 0:\n            return i\n\nprint(smallest_even_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\"\"\"\nWrite a function to find"
    },
    {
      "rank": 85,
      "score": 3.001278364160615,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def to_list(self):\n        return [self.val] + [self.next.to_list() for self.next in self.next]\n\n\nclass Solution(object):\n    def countOdd(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        odd_count = 0\n        prev = head\n        while prev:\n            if prev.next is not None:\n                odd_count += 1 if prev.next.val % 2 else 0\n            prev = prev.next\n        return odd_count\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(3)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(5)\n    head.next.next.next.next = ListNode(4)\n    print Solution().countOdd(head)"
    },
    {
      "rank": 86,
      "score": 2.9966256938155165,
      "candidate": "# Note:\n# You can use built-in function len() to get the length of a list.\n# You can use built-in function sum() to get the sum of all elements in the list.\n# You can use built-in function range() to get all the elements in a given range.\n# You can use built-in function filter() to filter a list.\n# You can use built-in function any() to check whether any element in the list is\n# equal to the given value.\n# You can use built-in function all() to check whether all elements in the list are\n# equal to the given value.\n# You can use built-in function map() to transform a list.\n# You can use built-in function filter() to filter a list.\n# You can use built-in function sum() to get the sum of all elements in a list.\n# You can use built-in function max() to get the maximum value in a list.\n# You can use built-in function min() to get the minimum value in a list.\n# You can use built-in function sorted() to sort a list.\n# You can use built-in function reverse() to reverse a list.\n# You can use built-in function copy() to copy a list.\n\ndef odd_elements(l):\n    return [i for i in l if i % 2 == 1]\n\ndef test_odd_elements():\n    assert odd_elements([1, 2, 3, 4]) == [3, 4]\n    assert odd_elements([1, 2, 3, 4, 5]) == [3, 4, 5]\n    assert odd_elements([1, 2, 3]) == [3]\n    assert odd_elements([1, 2]) == [2]\n    assert odd_elements([]) == []\n\n# Note:\n#\n# 1. We can use built-in function filter() to filter a list.\n# 2. We can use built-in function sum() to get the sum of all elements in a list.\n# 3. We can use built-in function max() to get the maximum value in a list.\n# 4. We can use built-in function min() to get the minimum value in a list.\n# 5. We can use built-in"
    },
    {
      "rank": 87,
      "score": 2.945082028040622,
      "candidate": "# https://www.hackerrank.com/challenges/odds-in-a-list\n# Write a function that returns the number of odd elements in a given list.\n# Example:\n# Input: [1,2,3,4,5,6]\n# Output: 2\n# Explanation: The list contains 2 odd numbers: 1 and 3.\ndef odd_elements(nums):\n    return sum(i % 2 == 1 for i in nums)\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for a0 in range(t):\n        nums = list(map(int, input().rstrip().split(' ')))\n        print(odd_elements(nums))"
    },
    {
      "rank": 88,
      "score": 2.9435559248783663,
      "candidate": "def find_odd_elements(list_of_numbers):\n    # Write your code here\n    odd_elements = 0\n    for i in list_of_numbers:\n        if i % 2 == 1:\n            odd_elements += 1\n    return odd_elements\n\nif __name__ == '__main__':\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_odd_elements(list_of_numbers))"
    },
    {
      "rank": 89,
      "score": 2.925248162383533,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def countOdd(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        odd_num = 0\n        curr = head\n        while curr:\n            if curr.val % 2 == 1:\n                odd_num += 1\n            curr = curr.next\n        return odd_num\n\n    def countOdd(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        odd_num = 0\n        curr = head\n        while curr:\n            if curr.val % 2 == 1:\n                odd_num += 1\n            curr = curr.next\n        return odd_num\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(3)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    print Solution().countOdd(head)\n    print Solution().countOdd(head)"
    },
    {
      "rank": 90,
      "score": 2.883567561607436,
      "candidate": "def find_odd_elements(list_of_nums):\n    return sum(lambda i: i % 2 == 1, list_of_nums)\n\n\n# Test Cases\n\nlist_of_nums = [1, 2, 3, 4]\nassert(find_odd_elements(list_of_nums) == 2)\n\nlist_of_nums = [1, 2, 3, 4, 5]\nassert(find_odd_elements(list_of_nums) == 3)\n\nlist_of_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,"
    },
    {
      "rank": 91,
      "score": 2.882631403516262,
      "candidate": "# O(n) time\n# O(n) space\n# Pythonic\ndef odd_elements(lst):\n    return sum(1 for x in lst if x % 2 == 1)\n\n# O(n) time\n# O(n) space\ndef even_elements(lst):\n    return sum(1 for x in lst if x % 2 == 0)\n\n# O(n) time\n# O(n) space\ndef odd_elements_lambda(lst):\n    return sum(lambda x: x % 2 == 1 for x in lst)\n\n# O(n) time\n# O(n) space\ndef even_elements_lambda(lst):\n    return sum(lambda x: x % 2 == 0 for x in lst)\n\n# O(n) time\n# O(n) space\ndef odd_elements_lambda_2(lst):\n    return sum(lambda x: x % 2 == 1 for x in lst)\n\n# O(n) time\n# O(n) space\ndef even_elements_lambda_2(lst):\n    return sum(lambda x: x % 2 == 0 for x in lst)\n\n# O(n) time\n# O(n) space\ndef odd_elements_lambda_3(lst):\n    return sum(lambda x: x % 2 == 1 for x in lst)\n\n# O(n) time\n# O(n) space\ndef even_elements_lambda_3(lst):\n    return sum(lambda x: x % 2 == 0 for x in lst)\n\n# O(n) time\n# O(n) space\ndef odd_elements_lambda_4(lst):\n    return sum(lambda x: x % 2 == 1 for x in lst)\n\n# O(n) time\n# O(n) space\ndef even_elements_lambda_4(lst):\n    return sum(lambda x: x % 2 == 0 for x in lst)\n\n# O(n) time\n# O(n) space\ndef odd_elements_lambda_5(lst):\n    return sum(lambda x: x % 2 == 1 for"
    },
    {
      "rank": 92,
      "score": 2.8802064405386774,
      "candidate": "def odd_elements(my_list):\n    return sum(1 for e in my_list if e % 2 == 1)\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\nprint(odd_elements(my_list))\n\n\"\"\"\nOutput:\n\n1\n\n\"\"\""
    },
    {
      "rank": 93,
      "score": 2.874560739103866,
      "candidate": "from math import sqrt\n\n\ndef find_odds(lst):\n    return sum([1 for i in lst if i % 2!= 0])\n\n\ndef test_find_odds():\n    assert find_odds([1, 2, 3, 4, 5]) == 5\n    assert find_odds([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n    assert find_odds([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert find_odds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0\n\n\ndef test_find_odds_with_lambda():\n    assert find_odds([1, 2, 3, 4, 5]) == 5\n    assert find_odds([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n    assert find_odds([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert find_odds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0"
    },
    {
      "rank": 94,
      "score": 2.8639043188687046,
      "candidate": "def odd_elements(my_list):\n\t# my_list = [1, 2, 3, 4, 5]\n\t# return len(filter(lambda x: x % 2, my_list))\n\t# return len(filter(lambda x: x % 2, my_list))\n\treturn sum(filter(lambda x: x % 2, my_list))\n\n\nif __name__ == '__main__':\n\tprint(odd_elements([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 95,
      "score": 2.797876599276703,
      "candidate": "def odd_elements(l):\n    return sum([1 for i in l if i % 2 == 1])\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6]\n    print(odd_elements(l))\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(odd_elements(l))\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(odd_elements(l))\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(odd_elements(l))\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(odd_elements(l))\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(odd_elements(l))"
    },
    {
      "rank": 96,
      "score": 2.746792219916394,
      "candidate": "# The function should return a list of the numbers in the given list.\n# The list can be empty.\n\n# Example 1:\n# Input: [1,3,5,7]\n# Output: [2,4,6]\n\n# Example 2:\n# Input: [3,1,4,7]\n# Output: [3]\n\n\ndef odd_elements(nums):\n    return [x for x in nums if x % 2 == 1]\n\n\n# Note:\n# The given list is always sorted in non-decreasing order.\n\n# Follow up:\n# Could you do it without using any built-in function like sort() or any other\n# O(n) extra space solution?\n\n\nclass Solution(object):\n    # @param {ListNode} head\n    # @return {ListNode}\n    def oddElements(self, head):\n        if head is None or head.next is None:\n            return []\n\n        odd_elements = []\n        curr_node = head\n        while curr_node is not None:\n            curr_node = curr_node.next\n            if curr_node is None:\n                break\n\n            odd_elements.append(curr_node.val)\n            curr_node = curr_node.next\n\n        odd_elements = self.sort(odd_elements)\n        return odd_elements\n\n    def sort(self, nums):\n        return sorted(nums, reverse=True)\n\n\nif __name__ == '__main__':\n    # Input: [1,3,5,7]\n    # Output: [2,4,6]\n    head = ListNode(1)\n    head.next = ListNode(3)\n    head.next.next = ListNode(5)\n    head.next.next.next = ListNode(7)\n    print Solution().oddElements(head)\n\n    # Input: [3,1,4,7]\n    # Output: [3]\n    head = ListNode(3)\n    head.next = ListNode(1)\n    head.next.next = ListNode(4)\n    head.next.next.next = ListNode(7)"
    },
    {
      "rank": 97,
      "score": 2.6679534877753923,
      "candidate": "def odd_elements(lst):\n    return sum(1 for i in lst if i % 2 == 1)\n\n\nif __name__ == \"__main__\":\n    assert odd_elements([1, 2, 3, 4, 5]) == 4\n    assert odd_elements([1, 3, 5, 7, 9]) == 5\n    assert odd_elements([1, 2, 3, 4, 5, 6]) == 5\n    assert odd_elements([1, 2, 3, 4, 5, 6, 7]) == 6\n    assert odd_elements([1, 2, 3, 4, 5, 6, 7, 8]) == 6\n    assert odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6"
    },
    {
      "rank": 98,
      "score": 2.646924074666177,
      "candidate": "def odd_elements_lambda(list_of_numbers):\n    return list_of_numbers.count(lambda x: x % 2)\n\n\ndef odd_elements_lambda_without_lambda(list_of_numbers):\n    return list_of_numbers.count(lambda x: x % 2)\n\n\n# Note: This is a lambda function which takes a list of numbers and returns the number of odd elements.\n# In the lambda function, the number is passed as a list of numbers.\nprint(odd_elements_lambda([1, 2, 3, 4, 5]))\nprint(odd_elements_lambda_without_lambda([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 99,
      "score": 2.643812953446636,
      "candidate": "# Example 1:\n# Input: [1,2,3,4,5]\n# Output: 4\n# Explanation: \n# 4 is the number of odd elements in the list [1,2,3,4,5].\n# \n# Example 2:\n# Input: [1,2,3,4,5,6]\n# Output: 5\n# Explanation: \n# 5 is the number of odd elements in the list [1,2,3,4,5,6].\n# \n# Example 3:\n# Input: [1,2,3,4,5,6,7]\n# Output: 6\n# Explanation: \n# 6 is the number of odd elements in the list [1,2,3,4,5,6,7].\n\n# Note:\n# The given list will have at least one element.\n\n# Definition for ListNode\n# class ListNode(object):\n#     def __init__(self, val):\n#         self.val = val\n#         self.next = None\n\nclass Solution(object):\n    def oddElements(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        return len([n for n in head if n.val % 2 == 1])"
    },
    {
      "rank": 100,
      "score": 2.345063723977564,
      "candidate": "# Your function should return an integer.\n#\n# The given list is of length n.\n#\n# Example:\n# Input: [1, 2, 3, 4, 5, 6]\n# Output: 3\n# Explanation: Return 3 as there are 3 odd numbers in the given list.\n#\n# Note:\n# - The given list is always in non-descending order.\n# - The given list is always small enough.\n# - The function is to find the number of odd elements in the given list.\n\n\nclass Solution(object):\n    def countOdd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(i % 2 for i in nums)"
    }
  ]
}