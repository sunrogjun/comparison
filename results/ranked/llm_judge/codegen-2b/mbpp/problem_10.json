{
  "timestamp": "2025-09-14T17:26:21.717257",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 10,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def multiples(n, m):\n    \"\"\"\n    Write a function to find m number of multiples of n.\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # base case\n    if m == 0:\n        return 1\n    # base case\n    elif m == 1:\n        return n\n    # base case\n    elif m == 2:\n        return n * n\n    else:\n        # recursive case\n        return (n * m) + multiples(n, m - 1)\n\nif __name__ == \"__main__\":\n    print multiples(2, 3)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for a number.\nclass Num(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __add__(self, other):\n        return Num(self.x + other.x)\n\n    def __mul__(self, other):\n        return Num(self.x * other.x)\n\ndef multiples(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: List[Num]\n    \"\"\"\n    ans = []\n    for i in range(1, m+1):\n        if i % n == 0:\n            ans.append(Num(i))\n    return ans\n\n# TESTS\nfor m, n in [(3, 3), (5, 2), (6, 5), (4, 10), (1, 2), (6, 2)]:\n    assert multiples(m, n) == [Num(i) for i in range(1, m+1) if i % n == 0]"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def find_m_of_n(n, m):\n\t\"\"\"\n\t:type n: int\n\t:type m: int\n\t:rtype: int\n\t\"\"\"\n\t# if n is even and m is odd, then there are no multiples of n\n\tif n % 2 == 0 and m % 2 == 1:\n\t\treturn 0\n\n\t# if n is even and m is even, then there are m-1 multiples of n\n\tif n % 2 == 0 and m % 2 == 0:\n\t\treturn m - 1\n\n\t# if n is odd and m is even, then there are m-1 multiples of n\n\tif n % 2 == 1 and m % 2 == 1:\n\t\treturn m - 1\n\n\t# if n is odd and m is odd, then there are m-1 multiples of n\n\tif n % 2 == 1 and m % 2 == 0:\n\t\treturn m - 1\n\n\t# if n is odd and m is odd, then there are m-2 multiples of n\n\tif n % 2 == 1 and m % 2 == 1:\n\t\treturn m - 2\n\n\t# if n is even and m is odd, then there are m-1 multiples of n\n\tif n % 2 == 0 and m % 2 == 1:\n\t\treturn m - 1\n\n\t# if n is even and m is even, then there are m-1 multiples of n\n\tif n % 2 == 0 and m % 2 == 0:\n\t\treturn m - 1\n\n\t# if n is odd and m is even, then there are m-2 multiples of n\n\tif n % 2 == 1 and m % 2 == 0:\n\t\treturn m - 2\n\n\t# if n is even and m is odd, then there are m-1 multiples of n\n\tif n % 2 == 0 and m % 2 == 1:\n\t\treturn m - 1\n\n\t# if n is even and m is odd, then there are m-2 multiples of n\n\tif n % 2 == 0 and m % 2 == 1:\n\t\treturn m - 2\n\n\t# if n is odd and m is even, then there are m-1 multiples of n\n\tif n % 2 == 1 and m % 2 == 0:\n\t\treturn m - 1"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def multiples(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    return sum(i * j for i in range(n) for j in range(m))\n\nif __name__ == '__main__':\n    print(multiples(10, 3))\n    print(multiples(10, 5))\n    print(multiples(10, 7))\n    print(multiples(10, 9))\n    print(multiples(10, 11))\n    print(multiples(10, 13))\n    print(multiples(10, 15))\n    print(multiples(10, 17))\n    print(multiples(10, 19))\n    print(multiples(10, 23))\n    print(multiples(10, 29))\n    print(multiples(10, 31))\n    print(multiples(10, 37))\n    print(multiples(10, 41))\n    print(multiples(10, 43))\n    print(multiples(10, 47))\n    print(multiples(10, 49))\n    print(multiples(10, 53))\n    print(multiples(10, 59))\n    print(multiples(10, 61))\n    print(multiples(10, 67))\n    print(multiples(10, 71))\n    print(multiples(10, 73))\n    print(multiples(10, 79))\n    print(multiples(10, 83))\n    print(multiples(10, 89))\n    print(multiples(10, 97))\n    print(multiples(10, 101))\n    print(multiples(10, 103))\n    print(multiples(10, 107))\n    print(multiples(10, 109))\n    print(multiples(10, 113))\n    print(multiples(10, 127))\n    print(multiples(10, 131))\n    print(multiples(10, 137))\n    print(multiples(10, 139))\n    print(multiples(10, 149))\n    print(multiples(10, 151))\n    print(multiples(10, 157))\n    print(multiples(10, 163))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-m-numbers\n# https://www.hackerrank.com/challenges/find-m-numbers-2\n\ndef find_m_numbers(n, m):\n    \"\"\"\n    Find the number of multiples of n.\n\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    c = 0\n    for i in range(m):\n        if i == m-1:\n            c += 1\n        else:\n            for j in range(i+1, m):\n                if j == m-1:\n                    c += 1\n                else:\n                    for k in range(j+1, m):\n                        if k == m-1:\n                            c += 1\n                        else:\n                            for l in range(k+1, m):\n                                if l == m-1:\n                                    c += 1\n                                else:\n                                    for m in range(l+1, m):\n                                        if m == m-1:\n                                            c += 1\n                                        else:\n                                            for n in range(m+1, m+n):\n                                                if n == m-1:\n                                                    c += 1\n                                                else:\n                                                    for o in range(n+1, m+n):\n                                                        if o == m-1:\n                                                            c += 1\n                                                        else:\n                                                            for p in range(o+1, m+n):\n                                                                if p == m-1:\n                                                                    c += 1\n                                                                else:\n                                                                    for q in range(p+1, m+n):\n                                                                        if q == m-1:\n                                                                            c += 1\n                                                                        else:\n                                                                            for r in range(q+1, m+n):\n                                                                                if r == m-1:\n                                                                                    c += 1"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\n\ndef find_m(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    m = 0\n    for i in range(1, n):\n        if math.floor(i) % n == 0:\n            m += 1\n    return m\n\n\nif __name__ == \"__main__\":\n    print(find_m(10))\n    print(find_m(20))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_multiples(n, m):\n\t\"\"\"\n\tWrite a function to find m number of multiples of n.\n\tInput: n and m as ints.\n\tOutput: a list of lists of m numbers of n.\n\t\"\"\"\n\n\t# Base case\n\tif m == 0:\n\t\treturn [[]]\n\n\t# Base case\n\tif m == 1:\n\t\treturn [[n]]\n\n\t# Base case\n\tif m == 2:\n\t\treturn [[n, n]]\n\n\t# Base case\n\tif m == 3:\n\t\treturn [[n, n, n]]\n\n\t# Base case\n\tif m == 4:\n\t\treturn [[n, n, n, n]]\n\n\t# Base case\n\tif m == 5:\n\t\treturn [[n, n, n, n, n]]\n\n\t# Base case\n\tif m == 6:\n\t\treturn [[n, n, n, n, n, n]]\n\n\t# Base case\n\tif m == 7:\n\t\treturn [[n, n, n, n, n, n, n]]\n\n\t# Base case\n\tif m == 8:\n\t\treturn [[n, n, n, n, n, n, n, n]]\n\n\t# Base case\n\tif m == 9:\n\t\treturn [[n, n, n, n, n, n, n, n, n]]\n\n\t# Base case\n\tif m == 10:\n\t\treturn [[n, n, n, n, n, n, n, n, n, n]]\n\n\t# Base case\n\tif m == 11:\n\t\treturn [[n, n, n, n, n, n, n, n, n, n, n]]\n\n\t# Base case\n\tif m == 12:\n\t\treturn [[n, n, n, n, n, n, n, n, n, n, n, n]]\n\n\t# Base case\n\tif m == 13:\n\t\treturn [[n, n, n, n, n, n, n, n, n, n, n, n, n]]\n\n\t# Base case\n\tif m == 14:\n\t\treturn [[n, n, n, n, n, n, n, n, n, n, n, n, n, n]]\n\n\t# Base"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def solution(m, n):\n    return sum(i for i in range(1, m+1) if i % n == 0)\n\nif __name__ == '__main__':\n    print(solution(3, 5))\n    print(solution(4, 4))\n    print(solution(5, 5))\n    print(solution(6, 6))\n    print(solution(7, 7))\n    print(solution(8, 8))\n    print(solution(9, 9))\n    print(solution(10, 10))\n    print(solution(11, 11))\n    print(solution(12, 12))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_m_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # Check if m is a multiple of n\n    if m % n!= 0:\n        return 0\n\n    # Find the largest multiple of n\n    m_n = n\n    while m_n <= m:\n        m_n *= n\n    return m_n\n\n\nif __name__ == '__main__':\n    print(find_m_n(2, 2))\n    print(find_m_n(3, 3))\n    print(find_m_n(4, 4))\n    print(find_m_n(5, 5))\n    print(find_m_n(6, 6))\n    print(find_m_n(7, 7))\n    print(find_m_n(8, 8))\n    print(find_m_n(9, 9))\n    print(find_m_n(10, 10))\n    print(find_m_n(11, 11))\n    print(find_m_n(12, 12))\n    print(find_m_n(13, 13))\n    print(find_m_n(14, 14))\n    print(find_m_n(15, 15))\n    print(find_m_n(16, 16))\n    print(find_m_n(17, 17))\n    print(find_m_n(18, 18))\n    print(find_m_n(19, 19))\n    print(find_m_n(20, 20))\n    print(find_m_n(21, 21))\n    print(find_m_n(22, 22))\n    print(find_m_n(23, 23))\n    print(find_m_n(24, 24))\n    print(find_m_n(25, 25))\n    print(find_m_n(26, 26))\n    print(find_m_n(27, 27))\n    print(find_m_n(28, 28))\n    print(find_m_n(29, 29))\n    print(find_"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def multiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in range(m):\n            if i == 0 or i % n == 0:\n                ans += 1\n        return ans\n\ns = Solution()\n\nprint s.multiple(4, 2)\nprint s.multiple(4, 3)\nprint s.multiple(4, 4)\nprint s.multiple(4, 5)\nprint s.multiple(4, 6)\nprint s.multiple(4, 7)\nprint s.multiple(4, 8)\nprint s.multiple(4, 9)\nprint s.multiple(4, 10)\nprint s.multiple(4, 11)\nprint s.multiple(4, 12)\nprint s.multiple(4, 13)\nprint s.multiple(4, 14)\nprint s.multiple(4, 15)\nprint s.multiple(4, 16)\nprint s.multiple(4, 17)\nprint s.multiple(4, 18)\nprint s.multiple(4, 19)\nprint s.multiple(4, 20)\nprint s.multiple(4, 21)\nprint s.multiple(4, 22)\nprint s.multiple(4, 23)\nprint s.multiple(4, 24)\nprint s.multiple(4, 25)\nprint s.multiple(4, 26)\nprint s.multiple(4, 27)\nprint s.multiple(4, 28)\nprint s.multiple(4, 29)\nprint s.multiple(4, 30)\nprint s.multiple(4, 31)\nprint s.multiple(4, 32)\nprint s.multiple(4, 33)\nprint s.multiple(4, 34)\nprint s.multiple(4, 35)\nprint s.multiple(4, 36)\nprint s.multiple(4, 37)\nprint s.multiple(4, 38)\nprint s.multiple(4, 39)\nprint s.multiple(4, 40)\nprint s.multiple(4, 41)\nprint s.multiple(4, 42)\nprint s.multiple(4, 43)\nprint s.multiple"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\n#     def __repr__(self):\n#         return str(self.start) +'' + str(self.end)\n\nclass Solution:\n    def findMultiples(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        for i in range(m):\n            if i == 0:\n                ans.append(1)\n            else:\n                ans.append(i)\n            for j in range(n):\n                ans.append(j + ans[i-1])\n        return ans\n\nif __name__ == '__main__':\n    assert Solution().findMultiples(5, 3) == [0, 3, 6, 9, 12]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def multiple(n, m):\n    \"\"\"\n    :param n: the number\n    :param m: the number of multiple\n    :return: the sum of all multiples of n\n    \"\"\"\n    res = 0\n    for i in range(1, m+1):\n        res += i*n\n    return res\n\nif __name__ == '__main__':\n    n = int(input())\n    m = int(input())\n    print(multiple(n, m))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import time\n\n\ndef multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: List[int]\n    \"\"\"\n    ans = []\n    for i in range(1, n):\n        if i == 1:\n            ans.append(1)\n            continue\n        if i % n == 0:\n            ans.append(i)\n        else:\n            ans.append(i)\n    return ans\n\n\nstart_time = time.time()\nprint(multiples_of_n(3, 5))\nprint(time.time() - start_time)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://discuss.leetcode.com/topic/50602/java-solution-easy-to-understand-java-solution\nclass Solution:\n    # @param {integer} n\n    # @param {integer} m\n    # @return {integer}\n    def multiple(self, n, m):\n        if m == 0:\n            return 1\n        if m == 1:\n            return n\n        if n < 0:\n            return 0\n        if n == 1:\n            return m\n        if n % m == 0:\n            return self.multiple(n / m, m)\n        else:\n            return self.multiple(n, m)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.multiple(4, 1))\n    print(s.multiple(4, 2))\n    print(s.multiple(4, 3))\n    print(s.multiple(4, 4))\n    print(s.multiple(4, 5))\n    print(s.multiple(4, 6))\n    print(s.multiple(4, 7))\n    print(s.multiple(4, 8))\n    print(s.multiple(4, 9))"
    },
    {
      "rank": 15,
      "score": 9.981277368389113,
      "candidate": "from math import ceil\n\ndef multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if m == 0:\n        return 1\n    if m == 1:\n        return n\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if n % 2 == 0 and n % 3 == 0:\n        return multiples_of_n(n/2, m/2) + multiples_of_n(n/3, m/3)\n    if n % 2 == 0 and n % 5 == 0:\n        return multiples_of_n(n/2, m/2) + multiples_of_n(n/5, m/5)\n    if n % 3 == 0 and n % 7 == 0:\n        return multiples_of_n(n/3, m/3) + multiples_of_n(n/7, m/7)\n    if n % 5 == 0 and n % 11 == 0:\n        return multiples_of_n(n/5, m/5) + multiples_of_n(n/11, m/11)\n    return multiples_of_n(n/5, m/5) + multiples_of_n(n/11, m/11) + multiples_of_n(n/13, m/13) + multiples_of_n(n/17, m/17)\n\ndef main():\n    \"\"\"\n    For n = 2,3,5,7,11,13,17,19,21,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,"
    },
    {
      "rank": 16,
      "score": 9.951728666067407,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @param {integer} m\n    # @return {integer}\n    def multiple(self, n, m):\n        # base case\n        if m == 0:\n            return 1\n        if n == 0:\n            return 0\n        if m == 1:\n            return n\n        if n % m == 0:\n            return self.multiple(n / m, m)\n        return self.multiple(n, m - 1) + self.multiple(n, m - 1)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.multiple(12, 4)\n    print s.multiple(12, 6)\n    print s.multiple(6, 12)\n    print s.multiple(6, 10)\n    print s.multiple(6, 8)\n    print s.multiple(6, 9)\n    print s.multiple(6, 7)\n    print s.multiple(6, 6)\n    print s.multiple(6, 5)\n    print s.multiple(6, 4)\n    print s.multiple(6, 3)\n    print s.multiple(6, 2)\n    print s.multiple(6, 1)\n    print s.multiple(6, 0)\n    print s.multiple(6, -1)\n    print s.multiple(6, -2)\n    print s.multiple(6, -3)\n    print s.multiple(6, -4)\n    print s.multiple(6, -5)\n    print s.multiple(6, -6)\n    print s.multiple(6, -7)"
    },
    {
      "rank": 17,
      "score": 9.939124391193213,
      "candidate": "def multiples(n, m):\n    # if n is prime, then it can't have any multiples of n\n    if n % 2 == 0:\n        return 0\n    # if n is even, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is odd, then we can have multiples of n\n    if n % 2 == 0:\n        return 0\n    # if n is prime, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is even, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is odd, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is prime, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is even, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is odd, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is prime, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is even, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is odd, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is prime, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is even, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is odd, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is prime, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is even, then we can have multiples of n\n    if n % 4 == 0:\n        return 0\n    # if n is odd,"
    },
    {
      "rank": 18,
      "score": 9.880233919550456,
      "candidate": "def nCr(n, m):\n    \"\"\"\n    Recursive solution.\n    \"\"\"\n    if n < 0 or m < 0 or n < m:\n        return 0\n\n    if n == 0 or m == 0:\n        return 1\n    if m == 1:\n        return n\n    if n == 1:\n        return m\n    if n == m:\n        return 1\n    return nCr(n - 1, m) + nCr(n - 1, m - 1)\n\n\ndef nCr_iter(n, m):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n < 0 or m < 0 or n < m:\n        return 0\n\n    if n == 0 or m == 0:\n        return 1\n    if m == 1:\n        return n\n    if n == 1:\n        return m\n    if n == m:\n        return 1\n    return nCr_iter(n - 1, m) + nCr_iter(n - 1, m - 1)\n\n\nif __name__ == \"__main__\":\n    print nCr(3, 3)\n    print nCr_iter(3, 3)"
    },
    {
      "rank": 19,
      "score": 9.877936659656912,
      "candidate": "# https://oj.leetcode.com/problems/multiplication-table/\n\nclass Solution:\n    # @param {integer} n\n    # @param {integer} m\n    # @return {integer}\n    def count(self, n, m):\n        table = [[0] * m for i in range(m)]\n        for i in range(m):\n            table[0][i] = 1\n        for i in range(1, n):\n            for j in range(m):\n                table[i % m][j] += table[i - 1 % m][j]\n        return table[n % m][0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.count(5, 6))"
    },
    {
      "rank": 20,
      "score": 9.858460491623452,
      "candidate": "def multiples(n, m):\n    \"\"\"\n    >>> multiples(2, 2)\n    [2, 4]\n    >>> multiples(3, 2)\n    [3, 6]\n    >>> multiples(5, 2)\n    [5, 10]\n    >>> multiples(3, 3)\n    [3, 6, 9]\n    >>> multiples(5, 3)\n    [5, 10, 15]\n    >>> multiples(3, 4)\n    [3, 12]\n    >>> multiples(5, 4)\n    [5, 10, 15]\n    >>> multiples(3, 5)\n    [3, 15]\n    >>> multiples(5, 5)\n    [5, 20]\n    >>> multiples(3, 6)\n    [3, 18]\n    >>> multiples(5, 6)\n    [5, 30]\n    >>> multiples(3, 7)\n    [3, 21]\n    >>> multiples(5, 7)\n    [5, 35]\n    >>> multiples(3, 8)\n    [3, 36]\n    >>> multiples(5, 8)\n    [5, 50]\n    >>> multiples(3, 9)\n    [3, 45]\n    >>> multiples(5, 9)\n    [5, 90]\n    >>> multiples(3, 10)\n    [3, 60]\n    >>> multiples(5, 10)\n    [5, 120]\n    >>> multiples(3, 11)\n    [3, 85]\n    >>> multiples(5, 11)\n    [5, 225]\n    >>> multiples(3, 12)\n    [3, 120]\n    >>> multiples(5, 12)\n    [5, 450]\n    >>> multiples(3, 13)\n    [3, 325]\n    >>> multiples(5, 13)\n    [5, 950]\n    >>> multiples(3, 14)\n    [3, 950]\n    >>> multiples(5, 14)\n    [5, 2250]\n    >>> multiples(3, 15)\n    [3, 1525]\n    >>> multiples(5, 15)\n    [5, 37"
    },
    {
      "rank": 21,
      "score": 9.853805242397348,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {TreeNode} root\n    # @param {integer} m\n    # @param {integer} n\n    # @return {integer}\n    def countNodes(self, root, m, n):\n        if not root:\n            return 0\n        res = self.countNodes(root.left, m, n) + self.countNodes(root.right, m, n)\n        if root.val % n == 0:\n            res += m\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    root = TreeNode(1)\n    print s.countNodes(root, 1, 2)\n    print s.countNodes(root, 2, 2)\n    print s.countNodes(root, 3, 2)\n    print s.countNodes(root, 2, 3)\n    print s.countNodes(root, 2, 1)\n    print s.countNodes(root, 2, 0)\n    print s.countNodes(root, 2, -1)"
    },
    {
      "rank": 22,
      "score": 9.843556280820357,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param n, an integer\n    # @param m, an integer\n    # @return an integer\n    def countNodes(self, n, m):\n        if n == 0 or m == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if m == 1:\n            return 1\n        if m == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 6\n        if m == 3:\n            return 4\n        if m == 4:\n            return 6\n        return self.countNodes(n - 1, m) + self.countNodes(n - 1, m - 1)\n\nif __name__ == '__main__':\n    s = Solution()\n    # print s.countNodes(5, 2)\n    print s.countNodes(1, 1)\n    print s.countNodes(1, 2)\n    print s.countNodes(1, 3)\n    print s.countNodes(1, 4)\n    print s.countNodes(1, 5)\n    print s.countNodes(1, 6)\n    print s.countNodes(1, 7)\n    print s.countNodes(1, 8)\n    print s.countNodes(1, 9)\n    print s.countNodes(1, 10)"
    },
    {
      "rank": 23,
      "score": 9.654671627286408,
      "candidate": "# https://oj.leetcode.com/problems/multiples-of-3-and-5/\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def multiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        if m == 0:\n            return 0\n        if m == 1:\n            return n\n        if n == 0:\n            return 0\n        if n == 1:\n            return m\n        if m == 2:\n            return n * n\n        if n == 2:\n            return m * m\n        if m == 3:\n            return n * n * n\n        if n == 3:\n            return m * m * m\n        if m == 4:\n            return n * n * n * n\n        if n == 4:\n            return m * m * m * m\n        if m == 5:\n            return n * n * n * n * n\n        if n == 5:\n            return m * m * m * m * m\n        if m == 6:\n            return n * n * n * n * n * n\n        if n == 6:\n            return m * m * m * m * m * m\n        if m == 7:\n            return n * n * n * n * n * n * n\n        if n == 7:\n            return m * m * m * m * m * m * m\n        if m == 8:\n            return n * n * n * n * n * n * n * n\n        if n == 8:\n            return m * m * m * m * m * m * m * m\n        if m == 9:\n            return n * n * n * n * n * n * n * n * n\n        if n == 9:\n            return m * m * m * m * m * m * m * m * m\n        if m == 10:\n            return n * n * n * n * n * n * n"
    },
    {
      "rank": 24,
      "score": 9.55152136354661,
      "candidate": "import math\n\ndef find_m(m, n):\n    return int(math.sqrt(m*n))\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().strip().split(' '))\n    print(find_m(m, n))"
    },
    {
      "rank": 25,
      "score": 9.490485767791258,
      "candidate": "# https://www.hackerearth.com/problem/algorithm/multiple-numbers/\n\ndef find_m_of_n(n, m):\n    if m == 1:\n        return n\n    if m == 2:\n        return n * n\n    if m == 3:\n        return n * n * n\n    if m == 4:\n        return n * n * n * n\n    if m == 5:\n        return n * n * n * n * n\n    if m == 6:\n        return n * n * n * n * n * n\n    if m == 7:\n        return n * n * n * n * n * n * n\n    if m == 8:\n        return n * n * n * n * n * n * n * n\n    if m == 9:\n        return n * n * n * n * n * n * n * n * n\n    if m == 10:\n        return n * n * n * n * n * n * n * n * n * n\n    if m == 11:\n        return n * n * n * n * n * n * n * n * n * n * n\n    if m == 12:\n        return n * n * n * n * n * n * n * n * n * n * n * n\n    if m == 13:\n        return n * n * n * n * n * n * n * n * n * n * n * n * n\n    if m == 14:\n        return n * n * n * n * n * n * n * n * n * n * n * n * n * n\n    if m == 15:\n        return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n    if m == 16:\n        return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n    if m == 17:\n        return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n    if m == 18:\n        return n * n *"
    },
    {
      "rank": 26,
      "score": 9.483232082203768,
      "candidate": "def find_multiples(n, m):\n    # n is the number of multiples, m is the number of multiples to find\n    # start from 1, because we need to find m number of multiples of n\n    result = 0\n    for i in range(1, m + 1):\n        # this is the loop that finds the m number of multiples of n\n        # we need to loop until we find the m number of multiples of n\n        # for example, we need to find 3 multiples of 3, so we need to loop\n        # until we find 3 multiples of 3\n        # we need to loop until we find the 3 number of multiples of 3\n        # for example, we need to loop until we find 6 multiples of 3\n        # we need to loop until we find the 6 number of multiples of 3\n        # for example, we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of multiples of 6\n        # we need to loop until we find the 3 number of"
    },
    {
      "rank": 27,
      "score": 9.370583536698913,
      "candidate": "def find_multiples(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if m == 1:\n        return 0\n    if m == 2:\n        return n\n    if n == 0:\n        return 0\n    return n * find_multiples(m - 1, n) + find_multiples(m, n - 1)\n\nif __name__ == \"__main__\":\n    m, n = int(input()), int(input())\n    print(find_multiples(m, n))"
    },
    {
      "rank": 28,
      "score": 9.21346272767743,
      "candidate": "def multiples(n, m):\n    return sum(1 for i in range(1, n+1) if i % n == 0)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    print(multiples(n, m))"
    },
    {
      "rank": 29,
      "score": 9.183391466815202,
      "candidate": "def multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # Base case\n    if m == 0:\n        return 1\n    # Base case\n    if n == 0:\n        return 0\n    # Recursive case\n    if m == 1:\n        return 1\n    return multiples_of_n(n, m - 1) + multiples_of_n(n, m)"
    },
    {
      "rank": 30,
      "score": 8.973005557553902,
      "candidate": "import sys\nimport math\n\ndef multiples_of_n(n):\n    \"\"\"\n    Return the number of multiples of n\n    :param n: the number to find multiples of\n    :return: the number of multiples of n\n    \"\"\"\n    # This is the number of multiples of n\n    # We can calculate it directly\n    return (n * (n + 1) / 2)\n\ndef main():\n    \"\"\"\n    main\n    :return:\n    \"\"\"\n    if len(sys.argv)!= 3:\n        print('Usage: {} n'.format(sys.argv[0]))\n        sys.exit(1)\n\n    n = int(sys.argv[1])\n    m = int(sys.argv[2])\n\n    print('Multiples of {} are {}'.format(n, multiples_of_n(n)))\n    print('Multiples of {} are {}'.format(n, multiples_of_n(n)))\n    print('Multiples of {} are {}'.format(n, multiples_of_n(n)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.946210893390457,
      "candidate": "def find_multiples(m, n):\n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n    return sum(i*j for i in range(1,m+1) for j in range(1,n+1))\n\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    print(find_multiples(m, n))"
    },
    {
      "rank": 32,
      "score": 8.932217008005624,
      "candidate": "def get_multiples(n, m):\n    \"\"\"\n    Returns the number of multiples of n from 1 to m.\n    \"\"\"\n    return sum(x*n for x in range(1, m+1))\n\ndef test_get_multiples():\n    assert get_multiples(3, 3) == 6\n    assert get_multiples(4, 3) == 6\n\ndef main():\n    print(get_multiples(3, 3))\n    print(get_multiples(4, 3))\n    print(get_multiples(5, 3))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.92876693971089,
      "candidate": "def find_multiples(n, m):\n\t\"\"\"\n\tWrite a function to find m number of multiples of n.\n\n\tExample 1:\n\tInput: n = 2, m = 3\n\tOutput: [6, 12, 18]\n\tExplanation: 6, 12, 18, 24, 30, 36 are multiples of 2.\n\tExample 2:\n\tInput: n = 4, m = 3\n\tOutput: [2, 8, 12, 16]\n\tExplanation: 2, 4, 8, 12, 16, 20, 24, 28, 32 are multiples of 4.\n\tExample 3:\n\tInput: n = 6, m = 3\n\tOutput: [2, 3, 6, 9, 12]\n\tExplanation: 2, 3, 6, 9, 12, 18, 24, 30, 36 are multiples of 6.\n\n\tNote:\n\tm is a positive integer and n is a natural number.\n\t\"\"\"\n\tans = []\n\tfor i in range(1, n+1):\n\t\tif i%n == 0:\n\t\t\tans.append(i)\n\tfor j in range(1, m+1):\n\t\tans += [i*j for i in ans if i%j == 0]\n\treturn ans\n\nif __name__ == '__main__':\n\tprint find_multiples(2, 3)\n\tprint find_multiples(4, 3)\n\tprint find_multiples(6, 3)"
    },
    {
      "rank": 34,
      "score": 8.910084504002544,
      "candidate": "def find_n_multiples(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # n and m are multiples of each other\n    if m == 0:\n        return 1\n    # n is even\n    if n % 2 == 0:\n        return find_n_multiples(n, m-1)\n    # n is odd\n    if m % 2 == 0:\n        return find_n_multiples(n+1, m/2)\n    # n is both even and odd\n    return find_n_multiples(n, m-1) + find_n_multiples(n+1, m/2)\n\n\nif __name__ == '__main__':\n    print(find_n_multiples(6, 4))\n    print(find_n_multiples(6, 3))\n    print(find_n_multiples(6, 2))\n    print(find_n_multiples(6, 1))\n    print(find_n_multiples(6, 0))\n    print(find_n_multiples(6, -1))\n    print(find_n_multiples(6, -2))\n    print(find_n_multiples(6, -3))\n    print(find_n_multiples(6, -4))\n    print(find_n_multiples(6, -5))\n    print(find_n_multiples(6, -6))"
    },
    {
      "rank": 35,
      "score": 8.85571690049604,
      "candidate": "def multiples_of_n(n, m):\n    return sum(i for i in range(m) if i % n == 0)\n\nif __name__ == \"__main__\":\n    print(multiples_of_n(2, 3))\n    print(multiples_of_n(3, 7))\n    print(multiples_of_n(6, 2))"
    },
    {
      "rank": 36,
      "score": 8.8281618090209,
      "candidate": "def find_m_number_of_multiples_of_n(n, m):\n    \"\"\"\n    n, m: integers\n    Returns the number of multiples of n which are m number of.\n    \"\"\"\n    ans = 0\n    for i in range(1, m+1):\n        if i % n == 0:\n            ans += 1\n    return ans\n\n\nif __name__ == \"__main__\":\n    print(find_m_number_of_multiples_of_n(5, 2))\n    print(find_m_number_of_multiples_of_n(10, 2))\n    print(find_m_number_of_multiples_of_n(5, 3))\n    print(find_m_number_of_multiples_of_n(5, 4))\n    print(find_m_number_of_multiples_of_n(5, 5))"
    },
    {
      "rank": 37,
      "score": 8.81367773444215,
      "candidate": "def find_mult(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    lst = [1]\n    for i in range(m):\n        lst.append(lst[-1] * n)\n    return lst[-1]\n\nif __name__ == '__main__':\n    print(find_mult(10, 20))"
    },
    {
      "rank": 38,
      "score": 8.701078161001123,
      "candidate": "def get_nums(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    res = [0] * m\n    for i in range(1, m+1):\n        res[i-1] += 1\n        for j in range(1, i):\n            res[i-1] += res[i-j-1]\n    return res\n\ndef get_m(n):\n    return sum(get_nums(m, n))\n\nif __name__ == '__main__':\n    m = int(input())\n    n = int(input())\n    print(get_m(n))"
    },
    {
      "rank": 39,
      "score": 8.625262456968262,
      "candidate": "def multiples_of_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    nums = []\n    for i in range(1, n+1):\n        if i in nums:\n            continue\n        nums.append(i)\n        for j in nums:\n            if j % i == 0:\n                break\n            nums.append(j)\n    return len(nums)\n\nif __name__ == \"__main__\":\n    print(multiples_of_n(5))\n    print(multiples_of_n(10))\n    print(multiples_of_n(20))\n    print(multiples_of_n(100))\n    print(multiples_of_n(1000))"
    },
    {
      "rank": 40,
      "score": 8.625142247198651,
      "candidate": "def multiple(n, m):\n    if m == 1:\n        return 1\n    elif m == 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n < 0:\n        return multiple(-n, m - 1)\n    elif n == 1:\n        return 1\n    else:\n        return multiple(n - 1, m - 1) + multiple(n, m - 2)\n\n\ndef test():\n    assert multiple(1, 1) == 1\n    assert multiple(1, 2) == 1\n    assert multiple(3, 2) == 3\n    assert multiple(10, 3) == 10\n    assert multiple(4, 2) == 2\n    assert multiple(4, 3) == 6\n    assert multiple(4, 4) == 4\n    assert multiple(4, 5) == 15\n    assert multiple(5, 4) == 10\n    assert multiple(5, 5) == 5\n    assert multiple(5, 6) == 15\n    assert multiple(10, 7) == 7\n    assert multiple(10, 8) == 10\n    assert multiple(10, 9) == 15\n    assert multiple(10, 10) == 10\n    assert multiple(10, 11) == 15\n    assert multiple(10, 12) == 15\n    assert multiple(10, 13) == 15\n    assert multiple(10, 14) == 15\n    assert multiple(10, 15) == 15\n    assert multiple(10, 16) == 15\n    assert multiple(10, 17) == 15\n    assert multiple(10, 18) == 15\n    assert multiple(10, 19) == 15\n    assert multiple(10, 20) == 15\n    assert multiple(10, 21) == 15\n    assert multiple(10, 22) == 15\n    assert multiple(10, 23) == 15\n    assert multiple(10, 24) == 15\n    assert multiple(10, 25) == 15\n    assert multiple(10, 26) == 15\n    assert multiple(10, 27) == 15\n    assert multiple(10, 28) == 15\n    assert multiple(10, 29) == 15\n    assert multiple(10, 30) == 15\n    assert multiple(10, 31) == 15\n    assert multiple(10, 32) == 15"
    },
    {
      "rank": 41,
      "score": 8.623000730200317,
      "candidate": "def is_prime(n):\n    \"\"\"\n    Check if n is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef multiples_of_n(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n    \"\"\"\n    res = [0] * (m + 1)\n    res[0] = 1\n    for i in range(1, m + 1):\n        res[i] = res[i - 1] * n\n    return res\n\n\nif __name__ == '__main__':\n    print multiples_of_n(5, 10)"
    },
    {
      "rank": 42,
      "score": 8.616253589228675,
      "candidate": "def multiplesOfN(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(1, m+1):\n        if i % n == 0:\n            result.append(i)\n        else:\n            for j in multiplesOfN(n, i):\n                result.append(j)\n    return result\n\nif __name__ == \"__main__\":\n    print(multiplesOfN(3, 5))"
    },
    {
      "rank": 43,
      "score": 8.608819999274287,
      "candidate": "def multiple(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: List[int]\n    \"\"\"\n    result = [0] * (m+1)\n    result[0] = 1\n    result[1] = n\n    for i in range(2, m+1):\n        result[i] = result[i-1] * n\n    return result\n\nif __name__ == '__main__':\n    print(multiple(3, 5))\n    print(multiple(6, 3))"
    },
    {
      "rank": 44,
      "score": 8.606486429141842,
      "candidate": "def multiples(n, m):\n\tif m == 1:\n\t\treturn n\n\telse:\n\t\treturn multiples(n, m - 1) + n\n\nprint multiples(5, 10)"
    },
    {
      "rank": 45,
      "score": 8.592504582976733,
      "candidate": "def find_n_multiples(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # Note:\n    # 1. Since n can be positive or negative,\n    # we need to find both positive and negative\n    # numbers of multiples.\n    # 2. Since we can only find multiples of n\n    # from n-1 to n+1, we need to find the number of\n    # multiples of n+1.\n    # 3. We can find the number of multiples of n+1\n    # by using the formula, n+1 = n*(n+1)/2\n    # n*(n+1)/2 = (n-1)*(n-1)*(n-1) + (n-1)*(n-1) + n*(n-1)\n    # We can also find the number of multiples of n+1\n    # by using the formula, n+1 = n*(n+1)/2 + 1\n    # n*(n+1)/2 + 1 = n*(n+1)/2 + n + 1\n    # n*(n+1)/2 + n + 1 = (n-1)*(n-1) + n + 1\n    # We can calculate the number of multiples of n+1\n    # by using the formula, (n-1)*(n-1) + n*(n-1) + 1\n    # = n*(n+1)/2 + n + 1\n    # We can calculate the number of multiples of n+1\n    # by using the formula, (n-1)*(n-1) + n*(n-1) + 1\n    # = n*(n+1)/2 + n + 1\n    # = n*(n+1)/2 + n + 1\n    # We can calculate the number of multiples of n+1\n    # by using the formula, (n-1)*(n-1) + n*(n-1) + 1\n    # = n*(n+1)/2 + n + 1\n    # = n*(n+1)/2 + n + 1\n    # = n*"
    },
    {
      "rank": 46,
      "score": 8.565425580227462,
      "candidate": "class Solution:\n    # @param n, an integer\n    # @param k, an integer\n    # @return an integer\n    def findMultiples(self, n, k):\n        ret = 1\n        while n > 0:\n            ret *= k\n            if n % k == 0:\n                ret += 1\n            n = n / k\n        return ret"
    },
    {
      "rank": 47,
      "score": 8.499905739299377,
      "candidate": "def find_multiples(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i in range(1, m + 1):\n        total += i * n\n    return total\n\n\ndef find_multiples2(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    res = []\n    for i in range(1, m + 1):\n        res.append(i * n)\n    return sum(res)\n\nif __name__ == \"__main__\":\n    print(find_multiples(5, 3))\n    print(find_multiples2(5, 3))"
    },
    {
      "rank": 48,
      "score": 8.490324832712195,
      "candidate": "from collections import defaultdict\n\n\ndef find_multiples(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = defaultdict(int)\n    for i in range(1, m + 1):\n        res[i] += 1\n    for i in range(1, n + 1):\n        res[i] += res[i - 1]\n    return max(res.values())\n\n\nif __name__ == '__main__':\n    print(find_multiples(3, 4))"
    },
    {
      "rank": 49,
      "score": 8.48796797856353,
      "candidate": "def multiple(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    return int(m * n) // m\n\nif __name__ == \"__main__\":\n    print(multiple(4, 10))"
    },
    {
      "rank": 50,
      "score": 8.478208546788407,
      "candidate": "def count_multiples(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    ans = 0\n    while m > 0:\n        n *= 10\n        if n > m:\n            n = n % m\n        else:\n            n = n // m\n        ans += n\n        m -= n\n    return ans\n\nif __name__ == '__main__':\n    print(count_multiples(10, 7))\n    print(count_multiples(5, 7))\n    print(count_multiples(10, 10))"
    },
    {
      "rank": 51,
      "score": 8.447001172765676,
      "candidate": "def multiple_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # base case\n    if m == 0:\n        return 1\n    # if n is even\n    if n % 2 == 0:\n        # if m is odd\n        if m % 2 == 1:\n            return multiple_of_n(n, m / 2) * (m + 1)\n        else:\n            return multiple_of_n(n, m / 2) * (m + 1) * 2\n    else:\n        # if m is even\n        if m % 2 == 0:\n            return multiple_of_n(n, m / 2) * (m + 1) * 2\n        else:\n            return multiple_of_n(n, m / 2) * (m + 1) * 2 + multiple_of_n(n, m / 2)\n\n\n# Test cases\nassert multiple_of_n(6, 2) == 6\nassert multiple_of_n(6, 4) == 6\nassert multiple_of_n(6, 6) == 6\nassert multiple_of_n(6, 8) == 6\nassert multiple_of_n(6, 10) == 6\nassert multiple_of_n(6, 12) == 6\nassert multiple_of_n(6, 14) == 6\nassert multiple_of_n(6, 16) == 6\nassert multiple_of_n(6, 18) == 6\nassert multiple_of_n(6, 20) == 6\nassert multiple_of_n(6, 24) == 6\nassert multiple_of_n(6, 30) == 6\nassert multiple_of_n(6, 36) == 6\nassert multiple_of_n(6, 40) == 6\nassert multiple_of_n(6, 50) == 6\nassert multiple_of_n(6, 60) == 6\nassert multiple_of_n(6, 70) == 6\nassert multiple_of_n(6, 80) == 6\nassert multiple_of_n(6, 90) == 6\nassert multiple_of_n(6, 100) == 6\nassert multiple_of_n(6"
    },
    {
      "rank": 52,
      "score": 8.437695832075478,
      "candidate": "def multiple(n, m):\n    # base case\n    if m == 0:\n        return 0\n    if n == 1:\n        return 1\n    if m == 1:\n        return n\n    # base case\n    return multiple(n - 1, m - 1) + multiple(n, m - 1)\n\nif __name__ == \"__main__\":\n    print multiple(10, 5)\n    print multiple(10, 4)\n    print multiple(10, 3)\n    print multiple(10, 2)\n    print multiple(10, 1)\n    print multiple(10, 0)\n    print multiple(10, -1)\n    print multiple(10, -2)\n    print multiple(10, -3)\n    print multiple(10, -4)\n    print multiple(10, -5)"
    },
    {
      "rank": 53,
      "score": 8.426531424889468,
      "candidate": "def multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if m == 0:\n        return 0\n    \n    if m == 1:\n        return 1\n\n    if m % 2 == 0:\n        return multiples_of_n(n, m/2) + multiples_of_n(n, m/2)\n    else:\n        return multiples_of_n(n, m/2) + multiples_of_n(n, m/2+1)\n\nif __name__ == \"__main__\":\n    print(multiples_of_n(5, 2))"
    },
    {
      "rank": 54,
      "score": 8.386620303250325,
      "candidate": "def find_m(n):\n    \"\"\"\n    Write a function to find m number of multiples of n.\n\n    Input\n    ------\n    n : int\n        The number to find multiples of.\n\n    Output\n    ------\n    m: int\n        The number of multiples of n.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # Base Case\n    if n == 2:\n        return 2\n\n    # Recursive Case\n    return find_m(n - 1) + find_m(n - 2)\n\nif __name__ == \"__main__\":\n    print(find_m(4))"
    },
    {
      "rank": 55,
      "score": 8.375312293858853,
      "candidate": "def multiples(n, m):\n    # Complete this function\n    count = 0\n    for i in range(1, m+1):\n        if i % n == 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print multiples(10, 6)\n    print multiples(20, 4)\n    print multiples(20, 3)\n    print multiples(20, 2)\n    print multiples(20, 1)"
    },
    {
      "rank": 56,
      "score": 8.334608500525688,
      "candidate": "def multiples_of_n(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(1, m + 1):\n        if i % n == 0:\n            res += i\n    return res"
    },
    {
      "rank": 57,
      "score": 8.331556294201176,
      "candidate": "def find_m(n):\n\tm = 0\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\tm += 1\n\treturn m\n\nif __name__ == '__main__':\n\tprint find_m(10)"
    },
    {
      "rank": 58,
      "score": 8.327150877756871,
      "candidate": "def find_multiples(n, m):\n    \"\"\"\n    >>> find_multiples(10, 10)\n    10\n    >>> find_multiples(10, 11)\n    11\n    >>> find_multiples(10, 9)\n    9\n    >>> find_multiples(10, 100)\n    10\n    >>> find_multiples(10, 2)\n    10\n    \"\"\"\n    sum_of_multiples = 0\n    for i in range(m, n+1):\n        sum_of_multiples += i\n    return sum_of_multiples\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.298597569547805,
      "candidate": "def m_numbers(n, m):\n    return sum(range(n, n+m, n))\n\nprint m_numbers(5, 1)\nprint m_numbers(5, 2)\nprint m_numbers(5, 3)\nprint m_numbers(5, 4)\nprint m_numbers(5, 5)\nprint m_numbers(5, 6)\nprint m_numbers(5, 7)\nprint m_numbers(5, 8)\nprint m_numbers(5, 9)\nprint m_numbers(5, 10)"
    },
    {
      "rank": 60,
      "score": 8.2938925966498,
      "candidate": "import math\nimport collections\n\ndef find_m_n(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    factors = collections.Counter(f for f in range(n, m+1))\n    m_factors = [sum(factors[i]) for i in range(m)]\n    return sum(m_factors)\n\nif __name__ == '__main__':\n    m = int(input())\n    n = int(input())\n    print(find_m_n(m, n))"
    },
    {
      "rank": 61,
      "score": 8.251903304236286,
      "candidate": "def find_multiple(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(n, -1, -1):\n        if i % m == 0:\n            result += i\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_multiple(10, 2) == 5"
    },
    {
      "rank": 62,
      "score": 8.212735598038213,
      "candidate": "def find_n_multiples(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # find all numbers with n digits\n    digits = [str(i) for i in range(10)]\n    # get the number of digits that are multiples of n\n    # (which are all multiples of n)\n    multiple_digits = [i for i in range(10) if n % i == 0]\n    # find all numbers that are multiples of multiple_digits\n    # which are multiples of m\n    multiples = [i for i in range(10) if n % i == 0 and i % m == 0]\n    return len(multiples)\n\nif __name__ == '__main__':\n    assert find_n_multiples(3, 2) == 2\n    assert find_n_multiples(3, 3) == 1\n    assert find_n_multiples(2, 2) == 0\n    assert find_n_multiples(3, 6) == 2\n    assert find_n_multiples(3, 3) == 1\n    assert find_n_multiples(10, 3) == 3\n    assert find_n_multiples(10, 10) == 0"
    },
    {
      "rank": 63,
      "score": 8.2048573255218,
      "candidate": "# https://www.youtube.com/watch?v=qX-WVpW4uWc\ndef multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: List[int]\n    \"\"\"\n    result = [1] * m\n    for i in range(2, m+1):\n        for j in range(i, m+1):\n            result[j-1] += result[j]\n            result[j-1] %= n\n    return result\n\n\ndef test_multiples_of_n():\n    assert multiples_of_n(2, 2) == [1, 2]\n    assert multiples_of_n(2, 3) == [1, 2, 3]\n    assert multiples_of_n(3, 3) == [1, 3, 9]\n    assert multiples_of_n(3, 4) == [1, 3, 9, 12]\n\n\nif __name__ == '__main__':\n    test_multiples_of_n()"
    },
    {
      "rank": 64,
      "score": 8.185309335307622,
      "candidate": "from collections import Counter\n\nclass Solution(object):\n    def multiplesOf3and5(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        cnt = Counter()\n        for i in range(1, n + 1):\n            cnt[i] += 1\n            if i % 3 == 0:\n                cnt[i] -= 1\n            if i % 5 == 0:\n                cnt[i] -= 1\n\n        return max(cnt.values())\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.multiplesOf3and5(5)\n    print s.multiplesOf3and5(6)\n    print s.multiplesOf3and5(8)"
    },
    {
      "rank": 65,
      "score": 8.179564342560925,
      "candidate": "def count_multiples(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    for i in range(1, m+1):\n        if sum % i == 0:\n            sum = sum / i\n    return sum"
    },
    {
      "rank": 66,
      "score": 8.144125099485041,
      "candidate": "def find_n_multiple(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if m == 0:\n        return 0\n    if m == 1:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return m\n    if n == 3:\n        return m * 2\n    if n % 2 == 0:\n        return find_n_multiple(n/2, m) + find_n_multiple(n/2, m-1)\n    else:\n        return find_n_multiple(n-1, m) + find_n_multiple(n-1, m-1)\n\n# Your code here\nprint find_n_multiple(5,3)"
    },
    {
      "rank": 67,
      "score": 8.105983444291466,
      "candidate": "def multiples(m, n):\n    \"\"\"\n    m is an integer, n is an integer\n    return a list of all the multiples of n.\n    \"\"\"\n    res = []\n    for i in range(1, m+1):\n        if i % n == 0:\n            res.append(i)\n    return res\n\nif __name__ == '__main__':\n    m = int(input())\n    n = int(input())\n    print(multiples(m, n))"
    },
    {
      "rank": 68,
      "score": 8.08452234024709,
      "candidate": "from collections import Counter\n\ndef find_m(n):\n    \"\"\"\n    Write a function to find m number of multiples of n.\n    :param n: The number to find m number of multiples of.\n    :return: The m number of multiples of n.\n    \"\"\"\n    m = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            m += i\n    return m\n\nif __name__ == '__main__':\n    assert find_m(3) == 3\n    assert find_m(5) == 10\n    assert find_m(12) == 24\n    assert find_m(16) == 64"
    },
    {
      "rank": 69,
      "score": 7.990432406683839,
      "candidate": "import math\n\ndef find_m_of_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # https://leetcode.com/problems/multiples-of-n/discuss/324833/Python-Solution-Faster-O(n)\n    # https://discuss.leetcode.com/topic/58984/java-o-n-time-and-o-1-space-solution-python\n    return int(math.ceil(math.sqrt(n)))"
    },
    {
      "rank": 70,
      "score": 7.938028884277233,
      "candidate": "def multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    return sum(i * i for i in xrange(1, n + 1) if i % n == 0) / (n * m)\n\nif __name__ == '__main__':\n    print multiples_of_n(3, 2)"
    },
    {
      "rank": 71,
      "score": 7.8912769574414305,
      "candidate": "#!/usr/bin/python\n\nfrom math import sqrt\nfrom sys import argv\n\ndef main():\n    # number of tests\n    test_num = int(argv[1]) if len(argv) > 1 else 1\n\n    for i in range(test_num):\n        # get input\n        n = int(argv[2]) if len(argv) > 2 else 1\n        m = int(argv[3]) if len(argv) > 3 else 1\n\n        # calculate\n        answer = 0\n        for j in range(1, sqrt(n) + 1):\n            if n % j == 0:\n                answer += m\n\n        # print result\n        print(\"Case #{0}: {1}\".format(i, answer))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 7.868947655733293,
      "candidate": "def find_n_multiples(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # TODO\n    return 0\n\ndef main():\n    n = 4\n    m = 2\n    result = find_n_multiples(n, m)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 7.84634113240411,
      "candidate": "def find_multiples(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    numbers = []\n    for i in range(1, n):\n        if i % n == 0:\n            numbers.append(i)\n    for i in range(n, n * m):\n        if i % n == 0:\n            numbers.append(i)\n    return len(numbers)\n\nif __name__ == '__main__':\n    assert find_multiples(3, 3) == 3, \"3\"\n    assert find_multiples(3, 6) == 6, \"6\"\n    assert find_multiples(3, 100) == 0, \"100\"\n    assert find_multiples(3, 200) == 0, \"200\"\n    assert find_multiples(3, 300) == 0, \"300\"\n    assert find_multiples(3, 600) == 0, \"600\"\n    assert find_multiples(3, 1000) == 0, \"1000\"\n    assert find_multiples(3, 10000) == 0, \"10000\""
    },
    {
      "rank": 74,
      "score": 7.834022619458933,
      "candidate": "def multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    return m\n    # return sum(i * i for i in range(1, m+1) if i % n == 0)"
    },
    {
      "rank": 75,
      "score": 7.7320703513377165,
      "candidate": "def multiples_of_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n*(n+1))//2\n\nif __name__ == '__main__':\n    print(multiples_of_n(3))\n    print(multiples_of_n(10))"
    },
    {
      "rank": 76,
      "score": 7.712686970378385,
      "candidate": "def multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: List[int]\n    \"\"\"\n    return [n for i in range(m) if n % i == 0]"
    },
    {
      "rank": 77,
      "score": 7.705183449260731,
      "candidate": "# Definition for a number.\nclass Num:\n    def __init__(self, x):\n        self.x = x\n\n    def __add__(self, y):\n        return Num(self.x + y.x)\n\n    def __mul__(self, y):\n        return Num(self.x * y.x)\n\n    def __repr__(self):\n        return str(self.x)\n\ndef multiples_of_n(m, n):\n    \"\"\"\n    :type m: int\n    :type n: Num\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(m, n.x + 1):\n        if i % n.x == 0:\n            result += 1\n    return result\n\ndef main():\n    m = int(input())\n    n = Num(int(input()))\n    result = multiples_of_n(m, n)\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 7.562924366763077,
      "candidate": "import unittest\n\n# Multiples of n.\n# m = n * n * n\n# m = n * n * n + n * n + n + 1\n# m = n * n * n + n * n + n + 2\n# m = n * n * n + n * n + n + 3\n# m = n * n * n + n * n + n + 4\n# m = n * n * n + n * n + n + 5\n# m = n * n * n + n * n + n + 6\n# m = n * n * n + n * n + n + 7\n# m = n * n * n + n * n + n + 8\n# m = n * n * n + n * n + n + 9\n# m = n * n * n + n * n + n + 10\n# m = n * n * n + n * n + n + 11\n# m = n * n * n + n * n + n + 12\n# m = n * n * n + n * n + n + 13\n# m = n * n * n + n * n + n + 14\n# m = n * n * n + n * n + n + 15\n# m = n * n * n + n * n + n + 16\n# m = n * n * n + n * n + n + 17\n# m = n * n * n + n * n + n + 18\n# m = n * n * n + n * n + n + 19\n# m = n * n * n + n * n + n + 20\n# m = n * n * n + n * n + n + 21\n# m = n * n * n + n * n + n + 22\n# m = n * n * n + n * n + n + 23\n# m = n * n * n + n * n + n + 24\n# m = n * n * n + n * n + n + 25\n# m = n * n * n + n * n + n + 26\n# m = n * n * n + n * n + n + 27\n# m = n * n * n + n * n + n + 28\n# m = n * n * n + n * n +"
    },
    {
      "rank": 79,
      "score": 3.347426819411626,
      "candidate": "def find_multiple_of_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    \n    # base case\n    if n == 1:\n        return 1\n\n    # base case\n    if n == 2:\n        return 2\n\n    # base case\n    if n == 3:\n        return 3\n\n    # base case\n    if n == 4:\n        return 4\n\n    # base case\n    if n == 5:\n        return 5\n\n    # base case\n    if n == 6:\n        return 6\n\n    # base case\n    if n == 7:\n        return 7\n\n    # base case\n    if n == 8:\n        return 8\n\n    # base case\n    if n == 9:\n        return 9\n\n    # base case\n    if n == 10:\n        return 10\n\n    # base case\n    if n == 11:\n        return 11\n\n    # base case\n    if n == 12:\n        return 12\n\n    # base case\n    if n == 13:\n        return 13\n\n    # base case\n    if n == 14:\n        return 14\n\n    # base case\n    if n == 15:\n        return 15\n\n    # base case\n    if n == 16:\n        return 16\n\n    # base case\n    if n == 17:\n        return 17\n\n    # base case\n    if n == 18:\n        return 18\n\n    # base case\n    if n == 19:\n        return 19\n\n    # base case\n    if n == 20:\n        return 20\n\n    # base case\n    if n == 21:\n        return 21\n\n    # base case\n    if n == 22:\n        return 22\n\n    # base case\n    if n == 23:\n        return 23\n\n    # base case\n    if n == 24:\n        return 24\n\n    # base case\n    if n == 25:\n        return 25\n\n    # base case\n    if n == 26:\n        return 26\n\n    # base case\n    if n == 27:\n        return 27\n\n    # base case\n    if n == 28:\n        return 28\n\n    # base case\n    if n == 29:\n        return 29\n\n    # base case\n    if n == 30:"
    },
    {
      "rank": 80,
      "score": 3.322442729162742,
      "candidate": "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def numMultiply(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        if m == 0:\n            return 1\n        if m == 1:\n            return n\n        if m > n:\n            return 0\n        if m % 2 == 0:\n            return self.numMultiply(n, m / 2) + self.numMultiply(n, m / 2)\n        else:\n            return self.numMultiply(n, m / 2) * self.numMultiply(n, m / 2 + 1)"
    },
    {
      "rank": 81,
      "score": 3.2268198949491094,
      "candidate": "# https://oj.leetcode.com/problems/multiplication-table/\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def mul(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        dp = [0] * m\n        for i in range(m):\n            dp[i] = 1\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if i % j == 0:\n                    dp[j-1] += dp[j]\n        return dp[0]"
    },
    {
      "rank": 82,
      "score": 3.2013884658944565,
      "candidate": "import unittest\nimport sys\nimport math\n\nclass Solution(object):\n    def multiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        return int(math.floor(math.sqrt(n*m)))\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/multiple-of-n/solution/\n\n# 9ms 64.00%\nclass Solution {\n    public int multiple(int n, int m) {\n        int sqrt = (int) Math.sqrt(n * m);\n        return (n * m) / sqrt;\n    }\n}\n\n# 10ms 100%\nclass Solution {\n    public int multiple(int n, int m) {\n        return (int) Math.ceil(Math.sqrt(n * m));\n    }\n}\n'''"
    },
    {
      "rank": 83,
      "score": 3.0574321598795757,
      "candidate": "def find_m(n):\n    if n == 0:\n        return 0\n\n    m = 0\n    for x in range(1, n + 1):\n        if x % n == 0:\n            m += 1\n    return m\n\nif __name__ == '__main__':\n    print(find_m(3))\n    print(find_m(4))\n    print(find_m(7))\n    print(find_m(10))\n    print(find_m(15))\n    print(find_m(16))\n    print(find_m(20))\n    print(find_m(21))\n    print(find_m(100))\n    print(find_m(101))"
    },
    {
      "rank": 84,
      "score": 3.0459499909010463,
      "candidate": "import math\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def multiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        while m > 0:\n            res += n % m\n            n = n / m\n            m = m - 1\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.multiple(2, 3)"
    },
    {
      "rank": 85,
      "score": 3.0213570608565687,
      "candidate": "# Note:\n# For example, if n = 4 and m = 3, return [2,4,8]\n\ndef find_m_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % n == 0:\n            result.append(i)\n            continue\n        for j in range(1, m+1):\n            result.append(i*j)\n    return result\n\nif __name__ == '__main__':\n    print(find_m_n(4, 3))"
    },
    {
      "rank": 86,
      "score": 2.948486257560866,
      "candidate": "# Definition for a multiset of size n.\nclass Multiset(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n    def __iter__(self):\n        return iter(self.nums)\n    def __len__(self):\n        return len(self.nums)\n\nclass Solution(object):\n    def __init__(self):\n        self.cache = {}\n    def findMultiply(self, num, n):\n        \"\"\"\n        :type num: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n in self.cache:\n            return self.cache[n]\n        if num == 0:\n            return 0\n        if n == 1:\n            self.cache[n] = 1\n            return 1\n        m = 0\n        for i in range(1, n+1):\n            m += self.findMultiply(num, i)\n            if m >= n:\n                break\n        self.cache[n] = m\n        return m\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    n = 6\n    s = Solution()\n    print(s.findMultiply(nums, n))"
    },
    {
      "rank": 87,
      "score": 2.9342183828975092,
      "candidate": "def find_m_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    m = m if m <= n else n\n    s = 0\n    for i in range(1, m+1):\n        s += i * (i-1) / 2\n    return s\n\nif __name__ == '__main__':\n    assert(find_m_of_n(4, 2) == 6)\n    assert(find_m_of_n(5, 2) == 5)\n    assert(find_m_of_n(6, 2) == 6)\n    assert(find_m_of_n(7, 2) == 7)\n    assert(find_m_of_n(8, 2) == 8)\n    assert(find_m_of_n(9, 2) == 9)\n    assert(find_m_of_n(10, 2) == 10)\n    assert(find_m_of_n(11, 2) == 11)\n    assert(find_m_of_n(12, 2) == 12)\n    assert(find_m_of_n(13, 2) == 13)\n    assert(find_m_of_n(14, 2) == 14)\n    assert(find_m_of_n(15, 2) == 15)\n    assert(find_m_of_n(16, 2) == 16)\n    assert(find_m_of_n(17, 2) == 17)\n    assert(find_m_of_n(18, 2) == 18)\n    assert(find_m_of_n(19, 2) == 19)\n    assert(find_m_of_n(20, 2) == 20)\n    assert(find_m_of_n(21, 2) == 21)\n    assert(find_m_of_n(22, 2) == 22)\n    assert(find_m_of_n(23, 2) == 23)\n    assert(find_m_of_n(24, 2) == 24)\n    assert(find_m_of_n(25,"
    },
    {
      "rank": 88,
      "score": 2.931973277312733,
      "candidate": "def multiple_of_n(n, m):\n    \"\"\"\n    Input: n and m are integers\n    Output: The sum of all multiples of n that are less than or equal to m.\n    \"\"\"\n    return sum(i * n for i in range(1, m + 1) if i % n == 0)\n\ndef multiple_of_n_2(n, m):\n    \"\"\"\n    Input: n and m are integers\n    Output: The sum of all multiples of n that are less than or equal to m.\n    \"\"\"\n    return sum(i * n for i in range(1, m + 1) if i % n == 0) - sum(i * n for i in range(m + 1, m + n + 1) if i % n == 0)\n\ndef multiple_of_n_3(n, m):\n    \"\"\"\n    Input: n and m are integers\n    Output: The sum of all multiples of n that are less than or equal to m.\n    \"\"\"\n    return sum(i * n for i in range(1, m + 1) if i % n == 0) - sum(i * n for i in range(m + 1, m + n + 1) if i % n == 0) - sum(i * n for i in range(m + n + 1, m + 2 * n + 1) if i % n == 0)\n\ndef multiple_of_n_4(n, m):\n    \"\"\"\n    Input: n and m are integers\n    Output: The sum of all multiples of n that are less than or equal to m.\n    \"\"\"\n    return sum(i * n for i in range(1, m + 1) if i % n == 0) - sum(i * n for i in range(m + 1, m + n + 1) if i % n == 0) - sum(i * n for i in range(m + n + 1, m + 2 * n + 1) if i % n == 0) - sum(i * n for i in range(m + 2 * n + 1, m + 3 * n + 1) if i % n == 0)\n\nif __name__ == '__main__':\n    print(multiple_of_n(7, 5"
    },
    {
      "rank": 89,
      "score": 2.927914327748491,
      "candidate": "#!/usr/bin/env python\n\ndef multiple_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    #base case\n    if m == 0:\n        return 1\n    if m == 1:\n        return n\n    #base case\n    if n == 1:\n        return 1\n    #recursive case\n    return multiple_of_n(n, m-1) + multiple_of_n(n-1, m-1)\n\nprint multiple_of_n(10, 10)"
    },
    {
      "rank": 90,
      "score": 2.9137362063109253,
      "candidate": "import math\n\n\ndef find_m(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # We can only handle the case of n = 1 or n = 2\n    if n == 1:\n        return 1\n\n    # n can be handled as a power of 2\n    if n == 2:\n        return m\n\n    # n can only be handled as a non-power of 2\n    if n > 2:\n        return (m - 1) * math.floor(math.log(n, 2) / math.log(2))\n\n\nif __name__ == '__main__':\n    assert find_m(1, 1) == 1\n    assert find_m(2, 3) == 3\n    assert find_m(5, 1) == 1\n    assert find_m(7, 7) == 7"
    },
    {
      "rank": 91,
      "score": 2.8975394542145434,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findNthMultiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        if m == 1:\n            return n\n        if n == 1:\n            return 1\n        if n == 2:\n            return m\n        if m == 2:\n            return n\n        if m > n:\n            return self.findNthMultiple(n, m-1)\n        if n > m:\n            return self.findNthMultiple(m, n-1)\n        if n % m == 0 and m % n == 0:\n            result = n/m\n        return result"
    },
    {
      "rank": 92,
      "score": 2.889613450411402,
      "candidate": "def multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: List[int]\n    \"\"\"\n    mults = []\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if j % i == 0:\n                mults.append(j)\n    return mults\n\n\nif __name__ == '__main__':\n    assert multiples_of_n(6, 2) == [2, 3, 6]\n    assert multiples_of_n(6, 3) == [2, 3, 6, 9]\n    assert multiples_of_n(6, 4) == [2, 3, 6, 12]\n    assert multiples_of_n(6, 5) == [2, 3, 6, 12, 20]\n    assert multiples_of_n(6, 6) == [2, 3, 6, 12, 21]\n    assert multiples_of_n(6, 7) == [2, 3, 6, 12, 21, 28]\n    assert multiples_of_n(6, 8) == [2, 3, 6, 12, 21, 28, 42]\n    assert multiples_of_n(6, 9) == [2, 3, 6, 12, 21, 28, 42, 63]\n    assert multiples_of_n(6, 10) == [2, 3, 6, 12, 21, 28, 42, 63, 84]"
    },
    {
      "rank": 93,
      "score": 2.8580736539868727,
      "candidate": "def find_multiplies(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    multiplies = 0\n    for i in xrange(m, 1, -1):\n        if i % n == 0:\n            multiplies += i\n    return multiplies\n\nclass Solution(object):\n    def find_multiplies(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        multiplies = 0\n        for i in xrange(m, 1, -1):\n            if i % n == 0:\n                multiplies += i\n        return multiplies"
    },
    {
      "rank": 94,
      "score": 2.8455483193469826,
      "candidate": "# Time:  O(n^m)\n# Space: O(n)\n\nclass Solution:\n    # @param n, an integer\n    # @param k, an integer\n    # @return an integer\n    def multiple(self, n, k):\n        if k == 0:\n            return 0\n        # k > 0 and k <= n\n        if k > n:\n            return 0\n        # k < n and k > 0\n        # k > 0\n        if k == 1:\n            return n\n        # k < n\n        return (n - 1) * self.multiple(n - 1, k - 1) + self.multiple(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    print(Solution().multiple(6, 4))\n    print(Solution().multiple(6, 1))\n    print(Solution().multiple(6, 5))\n    print(Solution().multiple(6, 0))\n    print(Solution().multiple(5, 1))\n    print(Solution().multiple(5, 2))\n    print(Solution().multiple(5, 3))\n    print(Solution().multiple(5, 4))\n    print(Solution().multiple(5, 5))\n    print(Solution().multiple(5, 0))"
    },
    {
      "rank": 95,
      "score": 2.8221314073634987,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @param {integer} k\n    # @return {integer}\n    def findNthMultiple(self, n, k):\n        # Write your code here\n        if k < 1:\n            return 0\n        if k == 1:\n            return n\n        if k == 2:\n            return n * n\n        m = 1\n        while k > 1:\n            m *= n\n            k -= 1\n        return m\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findNthMultiple(3, 2)\n    print s.findNthMultiple(3, 3)\n    print s.findNthMultiple(3, 4)"
    },
    {
      "rank": 96,
      "score": 2.8153721448910196,
      "candidate": "from functools import reduce\n\ndef count_multiples(n, m):\n    return reduce(lambda x, y: x * y, range(1, n + 1), 1)\n\nif __name__ == \"__main__\":\n    print(count_multiples(6, 2))\n    print(count_multiples(4, 2))\n    print(count_multiples(6, 3))\n    print(count_multiples(4, 3))\n    print(count_multiples(6, 4))\n    print(count_multiples(4, 4))\n    print(count_multiples(6, 5))\n    print(count_multiples(4, 5))\n    print(count_multiples(6, 6))\n    print(count_multiples(4, 6))\n    print(count_multiples(6, 7))\n    print(count_multiples(4, 7))"
    },
    {
      "rank": 97,
      "score": 2.767303595629702,
      "candidate": "def multiples_of_n(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if m == 0:\n        return 1\n    elif m == 1:\n        return n\n    else:\n        return multiples_of_n(n, m - 1) * n\n\nprint(multiples_of_n(2, 4))\nprint(multiples_of_n(3, 3))\nprint(multiples_of_n(2, 3))\nprint(multiples_of_n(2, 4))\nprint(multiples_of_n(2, 7))\nprint(multiples_of_n(5, 1))\nprint(multiples_of_n(5, 4))\nprint(multiples_of_n(5, 5))\nprint(multiples_of_n(5, 6))"
    },
    {
      "rank": 98,
      "score": 2.689293185706236,
      "candidate": "def find_multiples(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    return 0\n\nif __name__ == '__main__':\n    print(find_multiples(7, 3))\n    print(find_multiples(7, 4))\n    print(find_multiples(7, 5))\n    print(find_multiples(7, 6))\n    print(find_multiples(7, 7))\n    print(find_multiples(7, 8))\n    print(find_multiples(7, 9))\n    print(find_multiples(7, 10))\n    print(find_multiples(7, 11))\n    print(find_multiples(7, 12))\n    print(find_multiples(7, 13))\n    print(find_multiples(7, 14))\n    print(find_multiples(7, 15))\n    print(find_multiples(7, 16))\n    print(find_multiples(7, 17))\n    print(find_multiples(7, 18))\n    print(find_multiples(7, 19))\n    print(find_multiples(7, 20))\n    print(find_multiples(7, 21))\n    print(find_multiples(7, 22))\n    print(find_multiples(7, 23))\n    print(find_multiples(7, 24))\n    print(find_multiples(7, 25))\n    print(find_multiples(7, 26))\n    print(find_multiples(7, 27))\n    print(find_multiples(7, 28))\n    print(find_multiples(7, 29))\n    print(find_multiples(7, 30))\n    print(find_multiples(7, 31))\n    print(find_multiples(7, 32))\n    print(find_multiples(7, 33))\n    print(find_multiples(7, 34))\n    print(find_multiples(7, 35))\n    print(find_multiples(7, 36))\n    print(find_multiples(7, 37))\n    print"
    },
    {
      "rank": 99,
      "score": 2.5790783461752844,
      "candidate": "class Solution:\n    \"\"\"\n    @param: n: an integer\n    @param: k: an integer\n    @return: a list of integers\n    \"\"\"\n    def findMultiples(self, n, k):\n        result = []\n        count = 0\n        while count < k:\n            count += 1\n            result.append(n)\n            n += 1\n        return result\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.findMultiples(3, 10)\n    print solution.findMultiples(5, 5)\n    print solution.findMultiples(7, 7)\n    print solution.findMultiples(9, 9)\n    print solution.findMultiples(10, 10)\n    print solution.findMultiples(11, 11)\n    print solution.findMultiples(13, 13)\n    print solution.findMultiples(15, 15)"
    },
    {
      "rank": 100,
      "score": 2.423656077100256,
      "candidate": "def find_numbers(n):\n    return [i * n for i in range(1, n + 1)]\n\ndef test_find_numbers():\n    assert find_numbers(4) == [1, 2, 4, 8, 16]\n    assert find_numbers(5) == [1, 5, 10, 20, 25, 50, 100]\n    assert find_numbers(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nif __name__ == \"__main__\":\n    test_find_numbers()"
    }
  ]
}