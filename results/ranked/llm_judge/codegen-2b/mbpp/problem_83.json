{
  "timestamp": "2025-09-14T17:58:48.975392",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 83,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\nclass Solution(object):\n    def findMin(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        ans = 1000000\n        for t in tuples:\n            ans = min(ans, t.x)\n        return ans\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMin([(1,2), (3,4), (5,6)]))\n    print(sol.findMin([(1,2), (3,4)]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def minValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        ans = nums[0]\n        for n in nums:\n            if n < ans:\n                ans = n\n        return ans\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    num_cases = int(f.readline().strip())\n\n    for t in range(num_cases):\n        nums = map(int, f.readline().strip().split(' '))\n        print \"Case #{0}: {1}\".format(t + 1, self.minValue(nums))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def extract_min_record(tuple_list):\n    \"\"\"\n    Given a list of tuples, extract the minimum value record.\n    \"\"\"\n    # TODO: Write a function that takes a list of tuples and returns the minimum value record.\n    #       Use the following method to test your function:\n    #       1. Create a tuple list with 10 records.\n    #       2. Create a tuple with the minimum value.\n    #       3. Use the function to extract the minimum value record from the tuple list.\n    #       4. Print the minimum value record.\n    #       5. Print the minimum value of each record.\n    #       6. Print the minimum value of each record.\n    #       7. Print the minimum value of each record.\n    #       8. Print the minimum value of each record.\n    #       9. Print the minimum value of each record.\n    #       10. Print the minimum value of each record.\n    #       11. Print the minimum value of each record.\n    #       12. Print the minimum value of each record.\n    #       13. Print the minimum value of each record.\n    #       14. Print the minimum value of each record.\n    #       15. Print the minimum value of each record.\n    #       16. Print the minimum value of each record.\n    #       17. Print the minimum value of each record.\n    #       18. Print the minimum value of each record.\n    #       19. Print the minimum value of each record.\n    #       20. Print the minimum value of each record.\n    #       21. Print the minimum value of each record.\n    #       22. Print the minimum value of each record.\n    #       23. Print the minimum value of each record.\n    #       24. Print the minimum value of each record.\n    #       25. Print the minimum value of each record.\n    #       26. Print the minimum value of each record.\n    #       27. Print the minimum value of each record.\n    #       28. Print the minimum value of each record.\n    #       29. Print the minimum value of each record.\n    #       30. Print the minimum value of each record.\n    #       31. Print the minimum value of each record.\n    #"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/minimum-value-tuple/problem\n# https://www.codewars.com/kata/minimum-value-tuple/train/python\n\ndef minimum_value_tuple(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    return min([tuple_list[i][0] for i in range(len(tuple_list))])\n\n\nif __name__ == \"__main__\":\n    tuple_list = [ [1,2,3], [2,3,4], [1,2,3], [3,4,5] ]\n    print(minimum_value_tuple(tuple_list))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\ndef min_value(tup_list):\n    \"\"\"\n    tup_list: a list of tuples.\n    \"\"\"\n    if len(tup_list) == 0:\n        return None\n    min_val = tup_list[0][0]\n    for tup in tup_list:\n        if tup[0] < min_val:\n            min_val = tup[0]\n    return min_val\n\n\ndef main():\n    \"\"\"\n    main()\n    \"\"\"\n    # This is the first test case.\n    test_case1 = [\n        ([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return min(nums)\n\n    def getMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return min(nums)\n\n    def getMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return min(nums)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getMin([5, 4, 3, 2, 1]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def get_min(tup):\n    \"\"\"\n    >>> get_min((1, 2, 3, 4, 5))\n    1\n    >>> get_min((5, 4, 3, 2, 1))\n    1\n    >>> get_min((1, 2, 3, 4, 5, 6, 7, 8))\n    1\n    >>> get_min((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    1\n    \"\"\"\n    return min(tup)\n\ndef get_min_tuple(tup):\n    \"\"\"\n    >>> get_min_tuple((1, 2, 3, 4, 5))\n    (1, 2, 3, 4, 5)\n    >>> get_min_tuple((5, 4, 3, 2, 1))\n    (1, 2, 3, 4, 5)\n    >>> get_min_tuple((1, 2, 3, 4, 5, 6, 7, 8))\n    (1, 2, 3, 4, 5)\n    >>> get_min_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    (1, 2, 3, 4, 5)\n    \"\"\"\n    return tuple(tup)\n\ndef get_min_tuple_with_index(tup):\n    \"\"\"\n    >>> get_min_tuple_with_index((1, 2, 3, 4, 5))\n    (1, 2, 3, 4, 5)\n    >>> get_min_tuple_with_index((5, 4, 3, 2, 1))\n    (1, 2, 3, 4, 5)\n    >>> get_min_tuple_with_index((1, 2, 3, 4, 5, 6, 7, 8))\n    (1, 2, 3, 4, 5)\n    >>> get_min_tuple_with_index((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    (1, 2, 3, 4, 5)\n    \"\"\"\n    return tup[0], tup[1:]\n\ndef main():\n    import doctest\n    doctest.testmod"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findMin(self, nums):\n        if not nums:\n            return 0\n\n        if nums[0] < nums[1]:\n            return 0\n\n        return 1\n\n        # return max(nums)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/minimum-value-in-a-sorted-array/\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def getMinimumValue(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return None\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is not None:\n            return self.getMinimumValue(root.left)\n        if root.right is not None:\n            return self.getMinimumValue(root.right)\n        return min(self.getMinimumValue(root.left), self.getMinimumValue(root.right))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/min-value-from-a-list\n\ndef get_min_value(tuple_list):\n    if len(tuple_list) == 0:\n        return None\n\n    min_value = tuple_list[0]\n\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i] < min_value:\n            min_value = tuple_list[i]\n\n    return min_value\n\ndef main():\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(get_min_value(tuple_list))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def min_value(t):\n    \"\"\"\n    :type t: List[int]\n    :rtype: int\n    \"\"\"\n    if not t:\n        return None\n    return min(t)\n\n# Your MinValue solution here."
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/minimum-value-in-a-sorted-and-padded-array/\n\nclass Solution(object):\n    def minValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        result = nums[0]\n        for i in range(1, len(nums)):\n            result = min(result, nums[i])\n        return result\n\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1, 2, 2, 3]\n    print s.minValue(nums)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findMin(self, nums):\n        if not nums:\n            return None\n        min = nums[0]\n        for i in range(len(nums)):\n            if nums[i] < min:\n                min = nums[i]\n        return min"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def extract_min_value(tup):\n    \"\"\"\n    Input:\n        tup = a tuple of (str, int)\n    Output:\n        a tuple of (str, int)\n    \"\"\"\n    for i in range(len(tup)):\n        if tup[i][0] in ['<', '>']:\n            if tup[i][0] == '<':\n                if tup[i][1] < tup[i][2]:\n                    return tup[i]\n            else:\n                if tup[i][1] > tup[i][2]:\n                    return tup[i]\n    return tup\n\ndef extract_min_value_2(tup):\n    \"\"\"\n    Input:\n        tup = a tuple of (str, int)\n    Output:\n        a tuple of (str, int)\n    \"\"\"\n    for i in range(len(tup)):\n        if tup[i][0] in ['<', '>']:\n            if tup[i][0] == '<':\n                if tup[i][1] < tup[i][2]:\n                    return tup[i]\n            else:\n                if tup[i][1] > tup[i][2]:\n                    return tup[i]\n    return tup\n\ndef extract_min_value_3(tup):\n    \"\"\"\n    Input:\n        tup = a tuple of (str, int)\n    Output:\n        a tuple of (str, int)\n    \"\"\"\n    for i in range(len(tup)):\n        if tup[i][0] in ['<', '>']:\n            if tup[i][0] == '<':\n                if tup[i][1] < tup[i][2]:\n                    return tup[i]\n            else:\n                if tup[i][1] > tup[i][2]:\n                    return tup[i]\n    return tup\n\ndef extract_min_value_4(tup):\n    \"\"\"\n    Input:\n        tup = a tuple of (str, int)\n    Output:\n        a tuple of ("
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/minimum-value-in-sorted-array/description/\n\nclass Solution(object):\n    def minValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return min(nums)\n\n    # def minValue(self, nums):\n    #     \"\"\"\n    #     :type nums: List[int]\n    #     :rtype: int\n    #     \"\"\"\n    #     if nums is None or len(nums) == 0:\n    #         return 0\n    #     if len(nums) == 1:\n    #         return nums[0]\n    #     res = nums[0]\n    #     for num in nums:\n    #         res = min(res, num)\n    #     return res"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import collections\n\n\nclass Solution:\n    def minimumValue(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        min_record = collections.defaultdict(list)\n        for i in range(len(A)):\n            min_record[A[i]].append(i)\n\n        for key in min_record.keys():\n            min_record[key] = sorted(min_record[key])\n            for i in range(len(min_record[key])):\n                A[min_record[key][i]] = key\n\n        return min(A)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.minimumValue([2, 5, 6, 7, 0, 1, 3]))\n    print(sol.minimumValue([2, 5, 6, 7, 0, 1]))\n    print(sol.minimumValue([1, 2, 3]))\n    print(sol.minimumValue([1, 2]))\n    print(sol.minimumValue([1]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/minimum-value-in-a-sorted-matrix/discuss/242642/Python-solution\n# The idea is to use binary search to find the minimum value in the given list.\n# The complexity of the algorithm is O(n*log(n))\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param root, a tree node\n    # @return an integer\n    def findMin(self, root):\n        if not root:\n            return 0\n        if root.left is None:\n            return root.val\n        if root.right is None:\n            return root.val\n        return self.findMin(root.left) if root.val < root.left.val else self.findMin(root.right)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# https://www.tutorialspoint.com/python/python_sorting.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python_sorting_algorithms.html\n# https://www.tutorialspoint.com/python/python"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "import collections\n\n\ndef extract_min_value(t):\n    if not isinstance(t, collections.Iterable):\n        return t\n\n    result = None\n    for i in t:\n        if result is None or i < result:\n            result = i\n    return result\n\n\nif __name__ == '__main__':\n    t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    print extract_min_value(t)\n    t = (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)\n    print extract_min_value(t)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from collections import defaultdict\nfrom operator import itemgetter\nfrom itertools import groupby\n\n# https://www.youtube.com/watch?v=6qJ7u7-6-Z8\n# https://www.youtube.com/watch?v=rJ9b9zH7oW8\n\nclass Solution:\n    def getMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        # get the min value in each group\n        def getMinInGroup(group):\n            return min([n for n in group])\n\n        # group by value\n        # group by value, key is value, value is group\n        groups = defaultdict(list)\n        for n in nums:\n            groups[n].append(n)\n\n        # get the min value in each group\n        min_val = 0\n        for group in groups.values():\n            min_val = max(min_val, getMinInGroup(group))\n\n        return min_val\n\nif __name__ == '__main__':\n    assert Solution().getMin([0, 1, 2, 1, 1]) == 1\n    assert Solution().getMin([1, 1, 2, 3, 4]) == 1"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getMinimum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return nums[0]"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findMin(self, nums):\n        # write your code here\n        if not nums:\n            return 0\n\n        if len(nums) == 1:\n            return nums[0]\n\n        min_idx = 0\n        for i in range(1, len(nums)):\n            if nums[i] < nums[min_idx]:\n                min_idx = i\n        return nums[min_idx]\n\n\nif __name__ == \"__main__\":\n    print Solution().findMin([1, 2, 3, 4])"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def find_min(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    return min(tuple_list, key=lambda x: x[0])[0]\n\nclass Solution:\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return find_min(nums)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/minimum-value-record/problem\n\ndef min_val(data):\n    \"\"\"\n    :type data: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    return min([x[1] for x in data])\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        data = [x for x in input().split(\" \")]\n        print(min_val(data))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "import operator\n\nclass Solution(object):\n    def getMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        nums.sort()\n        return nums[0]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.getMin([1, 3, 5, 6, 7])\n    print sol.getMin([1, 3, 5, 6, 7, 9])\n    print sol.getMin([1, 3, 5, 6, 7, 9, 10])\n    print sol.getMin([1, 3, 5, 6, 7, 9, 10, 11])\n    print sol.getMin([1, 3, 5, 6, 7, 9, 10, 11, 12])"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def getMin(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        res = None\n        for i in range(len(nums)):\n            if res is None or nums[i].x < res.x:\n                res = nums[i]\n        return res"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from collections import defaultdict\nfrom operator import itemgetter\nfrom math import ceil\n\n\ndef extract_min_record(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :rtype: Tuple[int, int]\n    \"\"\"\n    # Sort tuples by value\n    tuples = sorted(tuples, key=itemgetter(0))\n\n    # Store the min value of tuples\n    min_value = float('inf')\n    min_index = -1\n    for index, tup in enumerate(tuples):\n        if tup[1] < min_value:\n            min_value = tup[1]\n            min_index = index\n\n    return tuple(tuples[min_index])\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    tuples = [\n        (1, 1),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6),\n        (6, 7),\n        (7, 8),\n        (8, 9),\n        (9, 10),\n        (10, 11),\n        (11, 12),\n        (12, 13),\n        (13, 14),\n        (14, 15),\n        (15, 16),\n        (16, 17),\n        (17, 18),\n        (18, 19),\n        (19, 20),\n        (20, 21),\n        (21, 22),\n        (22, 23),\n        (23, 24),\n        (24, 25),\n        (25, 26),\n        (26, 27),\n        (27, 28),\n        (28, 29),\n        (29, 30),\n        (30, 31),\n        (31, 32),\n        (32, 33),\n        (33, 34),\n        (34, 35),\n        (35, 36),\n        (36, 37),\n        (37, 38),\n        (38, 39),\n        (39, 40),\n        (40, 41),\n        (41, 42),\n        (42, 43),\n        (43, 44),\n        (44, 45),\n        (45, 46),"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-2\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-3\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-4\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-5\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-6\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-7\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-8\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-9\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-10\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-11\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-12\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-13\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-tuple-in-python-14\n# https://www.hackerrank.com/challenges/minimum-value-of-a-given-"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "from collections import namedtuple\n\n\ndef minimum_value_record(tuple_list):\n    \"\"\"\n    :param tuple_list: a list of tuples.\n    :return: the index of the minimum value record.\n    \"\"\"\n\n    MinValueTuple = namedtuple('MinValueTuple','min_value min_index')\n    min_value_list = [record.min_value for record in tuple_list]\n    min_index_list = [record.min_index for record in tuple_list]\n\n    return MinValueTuple(min_value_list, min_index_list)\n\n\ndef test_minimum_value_record():\n    tuple_list = [\n        (1, 0),\n        (2, 1),\n        (3, 2),\n        (4, 3),\n        (5, 4),\n        (6, 5),\n        (7, 6),\n        (8, 7),\n        (9, 8),\n        (10, 9),\n        (11, 10),\n        (12, 11),\n        (13, 12),\n        (14, 13),\n        (15, 14),\n        (16, 15),\n        (17, 16),\n        (18, 17),\n        (19, 18),\n        (20, 19),\n        (21, 20),\n        (22, 21),\n        (23, 22),\n        (24, 23),\n        (25, 24),\n        (26, 25),\n        (27, 26),\n        (28, 27),\n        (29, 28),\n        (30, 29),\n        (31, 30),\n        (32, 31),\n        (33, 32),\n        (34, 33),\n        (35, 34),\n        (36, 35),\n        (37, 36),\n        (38, 37),\n        (39, 38),\n        (40, 39),\n        (41, 40),\n        (42, 41),\n        (43, 42),\n        (44, 43),\n        (45, 44),\n        (46, 45),\n        (47, 46),\n        (48, 47),\n        (49, 48),\n        (50, 49),\n        ("
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def min_index(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: int\n    \"\"\"\n    min_value = None\n    for i in range(len(tuple_list)):\n        if not min_value or tuple_list[i][0] < min_value:\n            min_value = tuple_list[i][0]\n    return min_value\n\n\n# Your MinIndex solution here"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "import argparse\n\ndef get_min_index(tuples):\n    return min(i for i, t in enumerate(tuples) if t[0] =='min')\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Extract the index minimum value record from the given tuples.')\n    parser.add_argument('tuples', type=argparse.FileType('r'), help='tuples file')\n    args = parser.parse_args()\n    tuples = list(map(lambda x: tuple(map(float, x.split())), args.tuples))\n    print get_min_index(tuples)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/minimum-element-in-rotated-sorted-array/\n# Given a sorted array of n elements, where 1 <= n <= 100, return the index of the minimum element in the array.\n# If there are multiple answers, return the lowest one.\n\n# Example 1:\n# Input: [1,3,5,6]\n# Output: 2\n# Explanation: The minimum is 1.\n\n# Example 2:\n# Input: [7,1,2,3,4,5]\n# Output: 3\n# Explanation: The minimum is 3.\n# Example 3:\n# Input: [7,6,4,5,3,1]\n# Output: 2\n# Explanation: The minimum is 3.\n\n# Note:\n# The length of the given array is in range [1, 100].\n# The range of element in the given array is in the range [1, 100].\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findMin(self, nums):\n        # write your code here\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return min(nums)\n        ans = nums[0]\n        for i in range(1, len(nums)):\n            if ans > nums[i]:\n                ans = nums[i]\n        return ans"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "import time\nimport random\n\ndef extract(tuples):\n    \"\"\"\n    Return the minimum value of tuples.\n    \"\"\"\n    return min(tuples)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    start = time.time()\n    tuples = [random.randint(0, 100) for _ in range(100)]\n    print(\"Extracting the minimum value from tuples:\")\n    print(extract(tuples))\n    print(\"Time: {}\".format(time.time() - start))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "def min_index(tuple_list):\n    return min(tuple_list, key=lambda x: x[0])[0]\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert min_index([(1, 2), (3, 4), (5, 6), (7, 8)]) == 1, \"Example\"\n    assert min_index(((1, 2), (3, 4), (5, 6), (7, 8))) == 1, \"Example\"\n    assert min_index(((1, 2), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8))) == 1, \"Example\"\n    assert min_index(((1, 2), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8))) == 1, \"Example\"\n    assert min_index(((1, 2), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8))) == 1, \"Example\"\n    assert min_index(((1, 2), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8), (3, 4), (5, 6), (7, 8))) == 1, \"Example\""
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "import time\nimport random\n\nstart = time.time()\n\ndef get_min_index(tuple_list):\n    \"\"\"\n    Return the index minimum value of the given tuple list.\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if len(tuple_list) == 0:\n        return -1\n\n    min_val = tuple_list[0][0]\n    min_index = 0\n\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i][0] < min_val:\n            min_val = tuple_list[i][0]\n            min_index = i\n\n    return min_index\n\nprint(get_min_index([(i, i) for i in range(100)]))\n\nprint(\"--- %s seconds ---\" % (time.time() - start))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def minimum(tup):\n    \"\"\"\n    :type tup: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    return min(tup)\n\nif __name__ == '__main__':\n    print(minimum([[1, 2, 3], [2, 5, 6]]))\n    print(minimum([[1, 2, 3], [2, 5, 6], [3, 4, 5]]))\n    print(minimum([[1, 2, 3], [2, 5, 6], [3, 4, 5], [4, 5, 6]]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "# https://www.tutorialspoint.com/python/python_datetime.html\n\n# import the modules\nimport sys\n\n# get the name of the file\nfilename = sys.argv[1]\n\n# read the file\nwith open(filename, 'r') as f:\n    # read the file\n    lines = f.readlines()\n\n# set the minimum to the first line\nmin_line = 0\n\n# loop through all lines\nfor line in lines:\n    # if the line is not empty\n    if line:\n        # split the line\n        line = line.split(\",\")\n        # set the minimum to the first element\n        min_line = line[0]\n\n# print the minimum\nprint(min_line)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def extract_min(tuple_list):\n    return min(tuple_list)\n\nif __name__ == \"__main__\":\n    tuple_list = [(1, 2), (2, 3), (3, 4), (5, 6), (6, 7)]\n    print extract_min(tuple_list)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import random\n\n\ndef min_value(tuple_list):\n    return min([tuple_list[i][0] for i in range(len(tuple_list))])\n\n\nif __name__ == '__main__':\n    tuple_list = [(2, 3, 4), (1, 5, 6), (2, 7, 8), (4, 1, 9), (3, 10, 11)]\n    print(min_value(tuple_list))\n    tuple_list = [(1, 2, 3), (2, 3, 4), (5, 6, 7), (3, 4, 5)]\n    print(min_value(tuple_list))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/minimum-value-of-a-list-in-python\n\nimport sys\n\n\ndef minimum(t):\n    \"\"\"\n    :type t: List[Tuple[int]]\n    :rtype: int\n    \"\"\"\n    minimum = sys.maxsize\n    for i in range(len(t)):\n        minimum = min(minimum, t[i][0])\n    return minimum\n\n\nif __name__ == '__main__':\n    t = list(map(lambda x: tuple(map(int, x.split())), sys.stdin.readlines()))\n    print(minimum(t))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/minimum-value-in-a-sorted-array/\n# Definition for an interval.\nclass Interval(object):\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def __str__(self):\n        return \"[%s, %s]\" % (self.start, self.end)\n\nclass Solution(object):\n    def getInterval(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: Interval\n        \"\"\"\n        if not intervals:\n            return Interval(0, 0)\n        if len(intervals) == 1:\n            return Interval(intervals[0].start, intervals[0].end)\n        i = 0\n        while i < len(intervals):\n            if intervals[i].start < intervals[i].end:\n                return Interval(min(intervals[i].start, intervals[i+1].start), max(intervals[i].end, intervals[i+1].end))\n            i += 1\n        return Interval(intervals[0].start, intervals[0].end)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getInterval([Interval(1,2), Interval(2,4), Interval(4,5)]))\n    print(s.getInterval([Interval(1,2), Interval(2,4), Interval(4,5), Interval(6,7)]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getMinimum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        min_value = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < min_value:\n                min_value = nums[i]\n        return min_value"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/minimum-index-of-given-array/\n\nclass Solution(object):\n    def minIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums: return -1\n        \n        nums.sort()\n        \n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]: return i-1\n        return len(nums)-1"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getMinimum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        min_value = nums[0]\n        min_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] < min_value:\n                min_value = nums[i]\n                min_index = i\n\n        return min_index"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {List[Tuple[int]]} nums\n    # @return {number}\n    def getMin(self, nums):\n        if not nums:\n            return None\n\n        left, right = 0, len(nums) - 1\n\n        while left <= right:\n            mid = (left + right) / 2\n            if nums[mid][0] < nums[mid + 1][0]:\n                right = mid\n            else:\n                left = mid + 1\n\n        return nums[left][0]\n\n\nif __name__ == \"__main__\":\n    print(Solution().getMin([(1, 2), (2, 4), (3, 1)]))\n    print(Solution().getMin([(1, 2), (1, 4), (1, 1)]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def min_index(data_list):\n    \"\"\"\n    data_list: a list of tuples\n    return: the index of the minimum value in data_list\n    \"\"\"\n    min_value = data_list[0][0]\n    min_index = 0\n\n    for i in range(1, len(data_list)):\n        if data_list[i][0] < min_value:\n            min_value = data_list[i][0]\n            min_index = i\n    return min_index\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    data = [\n        (1, 2, 3),\n        (5, 3, 4),\n        (7, 6, 1)\n    ]\n    print(min_index(data))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\nclass Solution:\n    \"\"\"\n    @param: A list of tuples, each tuple contains two integers\n    @return: A integer\n    \"\"\"\n    def minimumValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Using map to get the minimum value from all the records\n        # Then, use a min heap to get the minimum value\n        # Note: The map is using a dictionary to get the minimum value\n        min_heap = defaultdict(int)\n        for i in range(len(nums)):\n            min_heap[nums[i]] = i\n        \n        return min(min_heap.values())"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def extract_min(tuple_list):\n    return min(tuple_list, key=lambda x: x[0])\n\n\ndef extract_min_tuple(tuple_list):\n    return tuple(min(tuple_list, key=lambda x: x[0]))\n\n\ndef extract_min_tuple_list(tuple_list):\n    return [min(tuple_list, key=lambda x: x[0])]\n\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (3, 4), (2, 1)]\n    print(extract_min(tuples))\n    print(extract_min_tuple(tuples))\n    print(extract_min_tuple_list(tuples))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nRecord = namedtuple('Record', 'id, score')\n\ndef getMin(tuples):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n\n    Example\n    Given\n    tuples = [\n        (1, 0.1),\n        (2, 0.2),\n        (3, 0.3),\n        (4, 0.4),\n        (5, 0.5)\n    ]\n\n    Return\n    (1, 0.1)\n    \"\"\"\n    return Record(min(t[0] for t in tuples), min(t[1] for t in tuples))\n\nif __name__ == '__main__':\n    tuples = [\n        (1, 0.1),\n        (2, 0.2),\n        (3, 0.3),\n        (4, 0.4),\n        (5, 0.5)\n    ]\n    print(getMin(tuples))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# -*- coding: utf-8 -*-\n\n\ndef minimum_value(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    min_value = None\n    for index, tuple in enumerate(tuple_list):\n        if min_value is None:\n            min_value = tuple[0]\n        else:\n            if tuple[0] < min_value:\n                min_value = tuple[0]\n    return min_value\n\n\nif __name__ == '__main__':\n    assert minimum_value([(1, 2), (5, 3), (5, 5)]) == 5\n    assert minimum_value([(1, 2), (3, 4), (3, 5)]) == 3"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def min_records(tuple_list):\n    \"\"\"\n    :param tuple_list: list of tuples\n    :return: index minimum value\n    \"\"\"\n    min_value = None\n    min_index = None\n    for index, value in enumerate(tuple_list):\n        if min_value is None:\n            min_value = value\n            min_index = index\n        else:\n            if value < min_value:\n                min_value = value\n                min_index = index\n    return min_index, min_value"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def min(t):\n    \"\"\"\n    Returns the index minimum value in a tuple.\n\n    :param t: A tuple.\n    :return: The index minimum value in a tuple.\n    \"\"\"\n    if not t:\n        return -1\n    for i in range(0, len(t)):\n        if t[i] < t[0]:\n            return i\n    return -1\n\ndef min_rec(t):\n    \"\"\"\n    Returns the index minimum value record in a tuple.\n\n    :param t: A tuple.\n    :return: The index minimum value record in a tuple.\n    \"\"\"\n    if not t:\n        return -1\n    for i in range(0, len(t)):\n        if t[i] < t[0]:\n            return i, t[i]\n    return -1, t[0]\n\ndef min_tuple(t):\n    \"\"\"\n    Returns the index minimum value tuple in a tuple.\n\n    :param t: A tuple.\n    :return: The index minimum value tuple in a tuple.\n    \"\"\"\n    if not t:\n        return -1\n    for i in range(0, len(t)):\n        if t[i] < t[0]:\n            return i, t[i]\n    return -1, t[0]\n\ndef min_rec_tuple(t):\n    \"\"\"\n    Returns the index minimum value record tuple in a tuple.\n\n    :param t: A tuple.\n    :return: The index minimum value record tuple in a tuple.\n    \"\"\"\n    if not t:\n        return -1\n    for i in range(0, len(t)):\n        if t[i] < t[0]:\n            return i, t[i]\n    return -1, t[0]\n\nif __name__ == '__main__':\n    print(min([(1,2), (3,4)]))\n    print(min_rec((1,2)))\n    print(min_tuple((1,2)))\n    print(min_rec_tuple((1,2)))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nRecord = namedtuple('Record', 'name, value')\n\ndef get_min_value(records):\n    return min(records, key=lambda x: x.value)\n\ndef get_min_name(records):\n    return min(records, key=lambda x: x.name)\n\ndef get_min_value_record(records):\n    return min(records, key=lambda x: x.value)\n\ndef get_min_name_record(records):\n    return min(records, key=lambda x: x.name)\n\ndef get_min_value_records(records):\n    return min(records, key=lambda x: x.value)\n\ndef get_min_name_records(records):\n    return min(records, key=lambda x: x.name)\n\nif __name__ == '__main__':\n    records = (\n        Record('a', 1),\n        Record('b', 2),\n        Record('c', 3),\n        Record('d', 4),\n        Record('e', 5),\n        Record('f', 6),\n        Record('g', 7),\n        Record('h', 8),\n        Record('i', 9),\n        Record('j', 10),\n        Record('k', 11),\n    )\n    print(get_min_value(records))\n    print(get_min_name(records))\n    print(get_min_value_record(records))\n    print(get_min_name_record(records))\n    print(get_min_value_records(records))\n    print(get_min_name_records(records))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_min_value(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: tuple\n    \"\"\"\n    min_value = None\n    for i in tuple_list:\n        if min_value is None:\n            min_value = i\n        elif i[0] < min_value[0]:\n            min_value = i\n    return min_value"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\ndef extract_min(data):\n    \"\"\"\n    Extract the minimum value from a tuple of values.\n    \"\"\"\n    Min = namedtuple('Min','min')\n    return Min(min(data))\n\ndef extract_min_record(data):\n    \"\"\"\n    Extract the minimum value record from a tuple of values.\n    \"\"\"\n    Min = namedtuple('Min','min')\n    return Min(min(data))\n\ndef extract_min_records(data):\n    \"\"\"\n    Extract the minimum value record from a tuple of values.\n    \"\"\"\n    Min = namedtuple('Min','min')\n    return [Min(min(x)) for x in data]\n\nif __name__ == '__main__':\n    tuple_1 = (1,2,3,4,5)\n    tuple_2 = (5,4,3,2,1)\n    tuple_3 = (2,1,3,4,5)\n    tuple_4 = (1,2,3,4,5,6)\n    tuple_5 = (2,1,3,4,5,6,7)\n\n    print(extract_min(tuple_1))\n    print(extract_min_record(tuple_1))\n    print(extract_min_records(tuple_1))\n\n    print(extract_min(tuple_2))\n    print(extract_min_record(tuple_2))\n    print(extract_min_records(tuple_2))\n\n    print(extract_min(tuple_3))\n    print(extract_min_record(tuple_3))\n    print(extract_min_records(tuple_3))\n\n    print(extract_min(tuple_4))\n    print(extract_min_record(tuple_4))\n    print(extract_min_records(tuple_4))\n\n    print(extract_min(tuple_5))\n    print(extract_min_record(tuple_5))\n    print(extract_min_records(tuple_5))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/minimum-value-tuple/problem\n\nfrom collections import namedtuple\n\nTuple = namedtuple(\"Tuple\", \"x y\")\n\n\ndef extract_min(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if not tuple_list:\n        return None\n\n    return min(map(lambda t: t.x, tuple_list))\n\n\nif __name__ == '__main__':\n    tuple_list = [Tuple(1, 2), Tuple(1, 3), Tuple(1, 5), Tuple(2, 3), Tuple(2, 5), Tuple(3, 5), Tuple(4, 6), Tuple(5, 6)]\n    print extract_min(tuple_list)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import operator\n\n\ndef get_min_value(tuple_list):\n    \"\"\"\n    Returns the index minimum value from the given tuple list.\n    \"\"\"\n    return min(tuple_list, key=operator.itemgetter(0))\n\n\nif __name__ == '__main__':\n    tuple_list = [(\"A\", \"B\", \"C\"), (\"A\", \"C\", \"D\"), (\"B\", \"A\", \"C\"), (\"B\", \"C\", \"D\"), (\"C\", \"A\", \"B\"), (\"C\", \"B\", \"D\")]\n    print(get_min_value(tuple_list))\n    tuple_list = [(\"A\", \"B\", \"C\"), (\"A\", \"C\", \"D\"), (\"B\", \"A\", \"C\"), (\"B\", \"C\", \"D\"), (\"C\", \"A\", \"B\"), (\"C\", \"B\", \"D\")]\n    print(get_min_value(tuple_list))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def minValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return min(nums)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __iter__(self):\n        return iter(self.x)\n\nclass Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return Tuple(None)\n        if n == 1:\n            return Tuple(nums[0])\n        if n == 2:\n            return Tuple(min(nums))\n        # Sort\n        nums.sort(key=lambda x: x[0])\n        # Find\n        low = 0\n        high = n - 1\n        while low < high:\n            mid = (low + high) // 2\n            if nums[mid][0] < nums[mid + 1][0]:\n                low = mid + 1\n            else:\n                high = mid\n        return nums[low]\n\n\ns = Solution()\nprint(s.findMin([(1,), (2, 3), (5,)]))\nprint(s.findMin([(1,), (2,), (3, 4)]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def min_value(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: int\n    \"\"\"\n    min_value = tuple_list[0][0]\n    for i in range(len(tuple_list)):\n        if tuple_list[i][0] < min_value:\n            min_value = tuple_list[i][0]\n    return min_value\n\n\nif __name__ == '__main__':\n    tuple_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    print(min_value(tuple_list))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nfrom collections import defaultdict\n\ndef get_min_value(tuple_list):\n    \"\"\"\n    :type tuple_list: list[list]\n    :rtype: int\n    \"\"\"\n    # Your code here\n    min_value = None\n    min_index = None\n    min_value = float(\"inf\")\n    for i in range(len(tuple_list)):\n        if tuple_list[i][0] < min_value:\n            min_value = tuple_list[i][0]\n            min_index = i\n    return min_index\n\nif __name__ == \"__main__\":\n    tuple_list = [\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,1,0,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,0],\n        [0,0,0,0,0],\n        [0,0,0,1,"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def min_record(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    return min([tuple_list[i][0] for i in range(len(tuple_list))])\n\n# Your MinRecord solution here."
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef extract_min(tuple_list):\n    min_val = np.inf\n    min_index = -1\n    for i, tup in enumerate(tuple_list):\n        if tup[0] < min_val:\n            min_val = tup[0]\n            min_index = i\n    return min_index"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def extract_minimum(t):\n    \"\"\"\n    :type t: List[Tuple[int, int, int]]\n    :rtype: int\n    \"\"\"\n    for i in range(len(t)):\n        if t[i][0] < t[0][0]:\n            t[0] = t[i]\n    return t[0][1]\n\ndef main():\n    t = [\n        (1, 2, 3),\n        (5, 3, 4),\n        (5, 2, 3),\n        (1, 5, 3),\n    ]\n    print extract_minimum(t)\n    t = [\n        (1, 2, 3),\n        (5, 3, 4),\n        (5, 2, 3),\n        (1, 5, 3),\n        (2, 1, 3),\n        (2, 5, 3),\n    ]\n    print extract_minimum(t)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def min_rec(t):\n    if t:\n        return min(t)\n    return t\n\n\ndef get_min(t):\n    if t:\n        return min(t)\n    return t\n\n\nif __name__ == '__main__':\n    t = [(1, 2), (2, 3), (3, 4)]\n    print(get_min(t))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def extractMin(t):\n    return min(t)\n\nprint extractMin([1, 2, 3])\nprint extractMin([2, 1, 3])\nprint extractMin([1, 2, 3, 4])"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "import collections\n\n\ndef extract_min_value(tuples):\n    \"\"\"\n    :type tuples: collections.Iterable[tuple]\n    :rtype: int\n    \"\"\"\n    min_value = None\n    for tup in tuples:\n        if min_value is None:\n            min_value = tup[0]\n        elif min_value > tup[0]:\n            min_value = tup[0]\n    return min_value\n\n\nif __name__ == '__main__':\n    tuples = [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]\n    print(extract_min_value(tuples))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "# https://www.tutorialspoint.com/python/python_built_in_functions_and_classes.htm\n\nimport random\n\ndef get_min_value(tuples):\n    \"\"\"\n    Input: list of tuples\n    Output: minimum value in the input list\n    \"\"\"\n    # get the minimum value in the input list\n    # print(tuples)\n    return min(tuples)\n\nif __name__ == '__main__':\n    # list of tuples\n    tuples = [\n        (1, 2),\n        (3, 4),\n        (5, 6),\n        (7, 8)\n    ]\n\n    # get the minimum value in the input list\n    print(get_min_value(tuples))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-minimum-value/problem\n\nimport sys\n\ndef extract_min_value(arr):\n    min_val = sys.maxsize\n    for i in arr:\n        if i < min_val:\n            min_val = i\n    return min_val\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        arr = list(map(int, input().rstrip().split()))\n        print(extract_min_value(arr))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def extract_min(tuple_list):\n    \"\"\"\n    Args:\n        tuple_list (list): List of tuples (e.g. [(1, 2, 3), (4, 5, 6),...])\n    Returns:\n        (int, int): The minimum value tuple (e.g. (1, 2))\n    \"\"\"\n    min_val = tuple_list[0]\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i] < min_val:\n            min_val = tuple_list[i]\n\n    return min_val\n\n\ndef test():\n    tuple_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    assert extract_min(tuple_list) == (7, 8)\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import random\n\ndef get_minimum_value(data):\n    \"\"\"\n    :param data: list of tuples\n    :return: index of minimum value\n    \"\"\"\n    if not data:\n        return -1\n\n    minimum_value = min(data)\n\n    for i in range(len(data)):\n        if data[i] < minimum_value:\n            minimum_value = data[i]\n\n    return minimum_value\n\n\nif __name__ == '__main__':\n    data = [(-1, 1), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\n\n    print get_minimum_value(data)\n    print get_minimum_value(data[::-1])\n    print get_minimum_value(data[:2])\n    print get_minimum_value(data[1:])\n    print get_minimum_value(data[:3])\n    print get_minimum_value(data[2:4])\n    print get_minimum_value(data[4:])\n    print get_minimum_value(data[:])\n    print get_minimum_value(data[:-1])\n    print get_minimum_value(data[:2:2])\n    print get_minimum_value(data[1:3:2])\n    print get_minimum_value(data[:3:3])\n    print get_minimum_value(data[1:3:4])\n    print get_minimum_value(data[:3:4])\n    print get_minimum_value(data[1:3:-1])\n    print get_minimum_value(data[:3:-1])\n    print get_minimum_value(data[1:3:-2])\n    print get_minimum_value(data[:3:-2])\n    print get_minimum_value(data[1:3:-3])\n    print get_minimum_value(data[:3:-3])\n    print get_minimum_value(data[1:3:-4])\n    print get_minimum_value(data[:3:-4])\n    print get_minimum_value(data[1:3:-5])\n    print get_minimum_value(data"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef min_value_record(tuples):\n    \"\"\"\n    :type tuples: List[tuple]\n    :rtype: tuple\n    \"\"\"\n    d = defaultdict(int)\n    for i, t in enumerate(tuples):\n        for j, v in enumerate(t):\n            d[v] += 1\n    m = min(d.values())\n    idx = 0\n    for i, v in enumerate(d):\n        if v == m:\n            idx = i + 1\n            break\n    return tuple(tuples[idx])\n\n\nif __name__ == '__main__':\n    tuples = [('A', 1), ('B', 2), ('C', 3), ('D', 4)]\n    print(min_value_record(tuples))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "from collections import namedtuple\nfrom operator import itemgetter\nimport heapq\n\n\ndef extract_min_value(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[str, int]]\n    :rtype: int\n    \"\"\"\n    return min(tuples, key=itemgetter(1))[0]\n\n\ndef extract_min_value_with_heap(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[str, int]]\n    :rtype: int\n    \"\"\"\n    heap = []\n    for tup in tuples:\n        heapq.heappush(heap, tup)\n    return heap[0][1]\n\n\nif __name__ == '__main__':\n    tuples = [('a', 3), ('b', 2), ('c', 5), ('d', 1)]\n    print(extract_min_value(tuples))\n    print(extract_min_value_with_heap(tuples))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/minimum-value-tuple/problem\n\nfrom collections import namedtuple\n\nTuple = namedtuple('Tuple', 'x y')\n\ndef extract_min_tuple(tuples):\n    \"\"\"\n    :type tuples: List[Tuple]\n    :rtype: int\n    \"\"\"\n    def min_tuple(tuple):\n        return tuple.x, tuple.y\n    return min(map(min_tuple, tuples))\n\nif __name__ == '__main__':\n    tuples = [Tuple(x, y) for x in range(1, 5) for y in range(1, 5)]\n    print(extract_min_tuple(tuples))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def min_record(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: Tuple[int, int]\n    \"\"\"\n    if not tuple_list:\n        return (None, None)\n    \n    minimum = tuple_list[0]\n    for item in tuple_list[1:]:\n        if item < minimum:\n            minimum = item\n    return minimum\n\ntuple_list = [(0,0), (1,1), (2,2), (3,3)]\nprint(min_record(tuple_list))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import unittest\n\nfrom collections import namedtuple\nfrom itertools import chain\n\nfrom utils import get_input_tuples\n\n\nclass Tuple(namedtuple('Tuple', 'x y')):\n    def __new__(cls, x, y):\n        return super(Tuple, cls).__new__(cls, x, y)\n\nclass Solution(object):\n    def get_minimum(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        return min(chain.from_iterable(map(lambda t: t.x, tuples)))\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([(1, 2), (3, 4), (5, 6)], 1)\n\n    def _test(self, tuples, expected):\n        obj = Solution()\n        actual = obj.get_minimum(tuples)\n        self.assertEqual(expected, actual)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "import collections\n\ndef get_min_record(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: Tuple\n    \"\"\"\n    if not tuple_list:\n        return None\n    min_record = tuple_list[0]\n    for tup in tuple_list:\n        if tup[0] < min_record[0]:\n            min_record = tup\n    return min_record\n\ndef get_min_record_with_index(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: Tuple\n    \"\"\"\n    if not tuple_list:\n        return None\n    min_record = tuple_list[0]\n    min_index = 0\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i][0] < min_record[0]:\n            min_record = tuple_list[i]\n            min_index = i\n    return min_record, min_index\n\ndef get_min_record_with_index_1(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: Tuple\n    \"\"\"\n    if not tuple_list:\n        return None\n    min_record = tuple_list[0]\n    min_index = 0\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i][0] < min_record[0]:\n            min_record = tuple_list[i]\n            min_index = i\n    return min_record, min_index\n\n\nif __name__ == \"__main__\":\n    tuple_list = [\n        (1, 2, 3),\n        (2, 3, 4),\n        (3, 4, 5),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n    ]\n    min_record, min_index = get_min_record(tuple_list)\n    print(min_record, min_index)\n\n    tuple_list = [\n        (1,"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# TODO:\n# - Add more examples\n# - Add more tests\n# - Add more comments\n\nimport unittest\n\n\ndef extract_minimum(tuples):\n    \"\"\"\n    :type tuples: List[Tuple[int,...]]\n    :rtype: Tuple[int,...]\n    \"\"\"\n    return min(tuples)\n\n\nclass TestMin(unittest.TestCase):\n    def test_min(self):\n        self.assertEqual(extract_minimum([(1, 2, 3), (2, 3, 4), (3, 4, 5)]), (3, 4, 5))\n        self.assertEqual(extract_minimum([(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3)]), (1, 2, 3))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {List<List<Integer>>} matrix\n    # @return {integer}\n    def findMin(self, matrix):\n        if not matrix:\n            return 0\n\n        n = len(matrix)\n        m = len(matrix[0])\n        for i in xrange(n):\n            for j in xrange(m):\n                if matrix[i][j] < matrix[i][j+1]:\n                    return j+1\n\n        return 0\n\n    def findMin(self, matrix):\n        if not matrix:\n            return 0\n\n        n = len(matrix)\n        m = len(matrix[0])\n        for i in xrange(n):\n            for j in xrange(m):\n                if matrix[i][j] < matrix[i][j+1]:\n                    return j+1\n        return 0"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def extract_min(tuple_list):\n    \"\"\"\n    Args:\n        tuple_list: a list of tuples.\n\n    Returns:\n        The index minimum value of the given list.\n\n    Examples:\n        >>> extract_min([(1, 2), (3, 4), (5, 6)])\n        2\n        >>> extract_min([(1, 2), (5, 6), (3, 4)])\n        2\n        >>> extract_min([(1, 2), (5, 6), (3, 4), (1, 2)])\n        1\n        >>> extract_min([(1, 2), (3, 4), (5, 6), (7, 8)])\n        7\n        >>> extract_min([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n        7\n        >>> extract_min([])\n        Traceback (most recent call last):\n           ...\n        AssertionError\n    \"\"\"\n    assert len(tuple_list) > 0, 'Input list is empty.'\n    assert len(tuple_list) == len(set(tuple_list)), 'Input list has duplicate values.'\n\n    min_value = tuple_list[0]\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i] < min_value:\n            min_value = tuple_list[i]\n\n    return min_value\n\n\ndef test_extract_min():\n    assert extract_min([(1, 2), (3, 4), (5, 6)]) == 2, 'Return wrong value.'\n\n    assert extract_min([(1, 2), (3, 4), (5, 6), (1, 2)]) == 1, 'Return wrong value.'\n\n    assert extract_min([(1, 2), (3, 4), (5, 6), (7, 8)]) == 7, 'Return wrong value.'\n\n    assert extract_min([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 7, 'Return wrong value.'\n\n    assert extract_min([]) == None, 'Return wrong value.'\n\n    assert extract"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from collections import namedtuple\n\n\n# Your code here\n\n# Sample Input\n# [('a', 1), ('b', 2), ('c', 3)]\n# Sample Output\n# 0\n\n# Note:\n# The tuple is a list of strings and integers.\n\n# Example 1:\n# Input: [('a', 1), ('b', 2), ('c', 3)]\n# Output: 0\n# Example 2:\n# Input: [('a', 1), ('a', 2), ('c', 3)]\n# Output: 0\n# Example 3:\n# Input: [('a', 1), ('b', 2), ('b', 3), ('c', 4)]\n# Output: 1\n\ndef minimum(t):\n    \"\"\"\n    :type t: List[Tuple[str, int]]\n    :rtype: int\n    \"\"\"\n    m = namedtuple('Record','min')\n    return min(map(lambda x: m(*x), t)).min\n\n# Your code here\n\n# Note:\n# The tuple is a list of strings and integers.\n\n# Example 1:\n# Input: [('a', 1), ('b', 2), ('c', 3)]\n# Output: 0\n# Example 2:\n# Input: [('a', 1), ('a', 2), ('c', 3)]\n# Output: 0\n# Example 3:\n# Input: [('a', 1), ('b', 2), ('b', 3), ('c', 4)]\n# Output: 1\n\ndef minimum(t):\n    \"\"\"\n    :type t: List[Tuple[str, int]]\n    :rtype: int\n    \"\"\"\n    m = namedtuple('Record','min')\n    return min(map(lambda x: m(*x), t)).min"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\nclass Solution(object):\n    def minValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # min = 0\n        # for i in xrange(len(nums)):\n        #     if nums[i] < nums[min]:\n        #         min = i\n        # return min\n\n        # min = 0\n        # for i in xrange(len(nums)):\n        #     if nums[i] < nums[min]:\n        #         min = i\n        #     if nums[min] > nums[i]:\n        #         min = i\n        # return min\n\n        # min = 0\n        # for i in xrange(len(nums)):\n        #     if nums[i] < nums[min]:\n        #         min = i\n        # return min\n\n        # min = 0\n        # for i in xrange(len(nums)):\n        #     if nums[i] < nums[min]:\n        #         min = i\n        #     if nums[min] > nums[i]:\n        #         min = i\n        # return min\n\n        # min = 0\n        # for i in xrange(len(nums)):\n        #     if nums[i] < nums[min]:\n        #         min = i\n        #     if nums[min] > nums[i]:\n        #         min = i\n        # return min\n\n        # min = 0\n        # for i in xrange(len(nums)):\n        #     if nums[i] < nums[min]:\n        #         min = i\n        #     if nums[min] > nums[i]:\n        #         min = i\n        # return min\n\n        # min = 0\n        # for i in xrange(len(nums)):\n        #     if nums[i] < nums[min]:\n        #         min = i\n        #     if nums[min] > nums[i]:\n        #         min = i\n        # return min\n\n        # min = 0"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from collections import namedtuple\n\n# Definition for a tuple.\n# class Tuple(namedtuple('Tuple', 'a b')):\nclass Tuple(namedtuple('Tuple', 'a b')):\n    __slots__ = ()\n    def __new__(cls, a, b):\n        return super(Tuple, cls).__new__(cls, a, b)\n\n# Your Tuple object will be instantiated and called as such:\n# t = Tuple(1,2)\n# param_2 = t.b\n# param_1 = t.a\n# t.b = 3\n# t.a = 4\n# t.b = 5\n# t.a = 6\n# t.b = 7\n# t.a = 8\n# param_1 = t.a\n# param_2 = t.b\n\nclass Solution:\n    def getMinimum(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        a = [t[0] for t in tuples]\n        b = [t[1] for t in tuples]\n        min_value = min(a)\n        return min_value"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def minValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if nums == []:\n            return None\n\n        min_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < min_val:\n                min_val = nums[i]\n\n        return min_val\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.minValue(nums)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # dp, i, min, j, min_j\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n\n        # dp[i] = min(dp[i-1], dp[i+1])\n        dp = [0 for _ in xrange(n)]\n        min_j = nums[0]\n        for i in xrange(1, n):\n            dp[i] = min(dp[i-1], dp[i+1])\n            min_j = min(min_j, nums[i])\n\n        # dp[0] = nums[0]\n        # dp[n-1] = nums[n-1]\n        # for i in xrange(1, n-1):\n        #     dp[i] = min(dp[i-1], dp[i+1])\n        #     min_j = min(min_j, nums[i])\n        #     dp[i] = min(dp[i-1], dp[i+1])\n        #     min_j = min(min_j, nums[i])\n\n        # return min(dp[0], dp[n-1])\n\n        return min_j"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from collections import namedtuple\n\nRecord = namedtuple('Record', 'x y')\n\n\nclass Solution(object):\n    def getMin(self, tuples):\n        \"\"\"\n        :type tuples: List[Record]\n        :rtype: int\n        \"\"\"\n        if not tuples:\n            return 0\n\n        min_index = 0\n        min_value = float('inf')\n        for i in range(len(tuples)):\n            if tuples[i].x < min_value:\n                min_value = tuples[i].x\n                min_index = i\n\n        return min_index"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def get_min_value(tuple_list):\n    \"\"\"\n    Input: list of tuple\n    Output: index minimum value\n    \"\"\"\n    return min(enumerate(tuple_list), key=lambda x: x[1])[0]\n\nif __name__ == \"__main__\":\n    tuple_list = [\n        (1, 2, 3),\n        (1, 3, 4),\n        (2, 3, 4),\n        (2, 4, 5)\n    ]\n    print get_min_value(tuple_list)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import numpy as np\n\n\ndef find_min(tup):\n    return np.min(tup)\n\n\ndef find_min_rec(tup):\n    return tup.min()\n\n\ndef find_min_rec_index(tup):\n    return np.argmin(tup)\n\n\nif __name__ == \"__main__\":\n    tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    print(find_min(tup))\n    print(find_min_rec(tup))\n    print(find_min_rec_index(tup))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def extract_min(tuple_list):\n    \"\"\"\n    Write a function extract_min to extract the index minimum value record from the given tuples.\n\n    Example:\n    tuple_list = [[1, 3, 5], [2, 4, 6], [3, 5, 7], [4, 6, 8]]\n    The output should be:\n    [(1, 3, 5), (2, 4, 6)]\n    \"\"\"\n\n    # TODO: write your code here\n\n    # check input\n    assert tuple_list\n\n    # initialize the result\n    result = []\n\n    # use a stack to save the result\n    stack = []\n\n    # initialize the stack with the first tuple\n    stack.append(tuple_list[0])\n\n    # keep going until the stack is empty\n    while len(stack) > 0:\n\n        # get the first tuple from stack\n        tuple_curr = stack.pop(0)\n\n        # get the minimum value\n        min_value = min(tuple_curr)\n\n        # append the tuple to the result\n        result.append(min_value)\n\n        # append all the remaining tuples\n        for tuple_next in tuple_curr[1:]:\n            # append the tuple to the stack\n            stack.append(tuple_next)\n\n    return result\n\n\nif __name__ == '__main__':\n    tuple_list = [[1, 3, 5], [2, 4, 6], [3, 5, 7], [4, 6, 8]]\n    result = extract_min(tuple_list)\n    assert result == [[1, 3, 5], [2, 4, 6]]"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Example 1\n# Input: [1,2,3,4,5]\n# Output: 1\n# Example 2\n# Input: [1,1,1,1,1,1]\n# Output: 1\n# Example 3\n# Input: [1,2,3,4,5]\n# Output: 1\n# Example 4\n# Input: [1,2,3,4,5]\n# Output: 1\n# Example 5\n# Input: [1,2,3,4,5]\n# Output: 5\n\n# Note:\n# The given list is only guaranteed to be sorted in ascending order.\n# You may assume the given list has no duplicate elements.\n# The index minimum value is guaranteed to be unique.\n\nclass Solution(object):\n    def getMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        mid = len(nums) / 2\n        if nums[0] < nums[mid]:\n            return self.getMin(nums[:mid])\n        elif nums[0] > nums[mid]:\n            return self.getMin(nums[mid:])\n        else:\n            return nums[mid]"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def extract_min_value(tup):\n    \"\"\"\n    tup is a tuple of values\n    \"\"\"\n    return min(tup)\n\nif __name__ == '__main__':\n    test_cases = [\n        ([1, 2, 3, 4, 5], 1),\n        ([1, 2, 3, 4, 5], 5),\n        ([1, 2, 3, 4, 5], 6),\n        ([1, 2, 3, 4, 5], 7),\n        ([1, 2, 3, 4, 5], 8),\n        ([1, 2, 3, 4, 5], 9),\n        ([1, 2, 3, 4, 5], 10),\n        ([1, 2, 3, 4, 5], 11),\n        ([1, 2, 3, 4, 5], 12),\n        ([1, 2, 3, 4, 5], 13),\n        ([1, 2, 3, 4, 5], 14),\n        ([1, 2, 3, 4, 5], 15),\n        ([1, 2, 3, 4, 5], 16),\n        ([1, 2, 3, 4, 5], 17),\n        ([1, 2, 3, 4, 5], 18),\n        ([1, 2, 3, 4, 5], 19),\n        ([1, 2, 3, 4, 5], 20),\n        ([1, 2, 3, 4, 5], 21),\n        ([1, 2, 3, 4, 5], 22),\n        ([1, 2, 3, 4, 5], 23),\n        ([1, 2, 3, 4, 5], 24),\n        ([1, 2, 3, 4, 5], 25),\n        ([1, 2, 3, 4, 5], 26),\n        ([1, 2, 3, 4, 5], 27),\n        ([1, 2, 3, 4, 5], 28),\n        ([1, 2, 3, 4, 5], 29),\n        ([1, 2, 3, 4, 5], 30),\n        ([1, 2, 3, 4, 5], 31),\n        ([1, 2, 3, 4, 5], 32),\n        ([1, 2, 3, 4, 5], 33),\n        ([1, 2, 3,"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution(object):\n    def minimum1(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        return min(nums, key=lambda x: x.x)\n\n    def minimum2(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        return min(nums, key=lambda x: x.x)\n\n    def minimum3(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        return min(nums, key=lambda x: x.x)\n\n    def minimum(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        return min(nums, key=lambda x: x.x)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [Tuple(1), Tuple(2), Tuple(3), Tuple(4)]\n    print s.minimum(nums)\n    nums = [Tuple(5), Tuple(6), Tuple(7), Tuple(8)]\n    print s.minimum(nums)\n    nums = [Tuple(9), Tuple(10), Tuple(11), Tuple(12)]\n    print s.minimum(nums)\n    nums = [Tuple(13), Tuple(14), Tuple(15), Tuple(16)]\n    print s.minimum(nums)\n    nums = [Tuple(17), Tuple(18), Tuple(19), Tuple(20)]\n    print s.minimum(nums)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def extract_min(tuple_list):\n    min_val = float('inf')\n    for i in tuple_list:\n        if i[0] < min_val:\n            min_val = i[0]\n    return min_val\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1, \"min of list is 1\"\n    assert extract_min([(1,2,3),(4,5,6),(7,8,9)]) == 1"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "import collections\n\ndef extract_min_value(data):\n    \"\"\"\n    Given a list of tuples, extract the index minimum value record.\n    :param data:\n    :return:\n    \"\"\"\n    if not isinstance(data, collections.Iterable):\n        raise ValueError(\"Invalid input type\")\n\n    # the minimum value in the tuple is the first element in the tuple\n    return min([tuple(row)[0] for row in data])\n\n\nif __name__ == '__main__':\n    data = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    print(extract_min_value(data))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import collections\n\n\nclass Solution(object):\n    def minimumValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        min_val = nums[0]\n        min_idx = 0\n\n        for i in range(1, len(nums)):\n            if nums[i] < min_val:\n                min_val = nums[i]\n                min_idx = i\n\n        return min_idx + 1\n\n\nif __name__ == '__main__':\n    so = Solution()\n    print(so.minimumValue([1, 2, 3, 4, 5]))\n    print(so.minimumValue([2, 1, 2, 3, 4]))\n    print(so.minimumValue([5, 5, 5, 5, 5]))\n    print(so.minimumValue([5, 5, 5, 5, 5, 5]))\n    print(so.minimumValue([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# TODO\n# 1. The function should return the minimum value and the index of the record.\n# 2. The function should be able to extract the minimum value and the index of the record from any given type of data.\n\n# Example\n# >>> extract_min(('a', 5, 'b', 4, 'c', 1))\n# ('a', 5, 'b', 4, 'c', 1)\n\n# Answer\n# ('a', 5, 'b', 4, 'c', 1)\n\n# Time:  O(n)\n# Space: O(1)\n\nclass Solution:\n    # @param {List<List<String>>} data\n    # @return {List<List<String>>}\n    def getMinimum(self, data):\n        if len(data) == 0:\n            return []\n        if len(data) == 1:\n            return data[0]\n        left = self.getMinimum(data[:len(data)//2])\n        right = self.getMinimum(data[len(data)//2:])\n        return [left, right]"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import collections\n\nclass Solution:\n    def minValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        \n        min_val, min_idx = nums[0], 0\n        for i in xrange(1, len(nums)):\n            if nums[i] < min_val:\n                min_val, min_idx = nums[i], i\n        return min_idx"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# TODO: Write a function to extract the minimum value record from a list of tuples.\n\ndef extractMin(t):\n    \"\"\"\n    :type t: List[Tuple[int, int]]\n    :rtype: Tuple[int, int]\n    \"\"\"\n    return min(t)\n\n\n# TODO: Write a function to extract the minimum value record from a list of tuples.\n\ndef extractMin(t):\n    \"\"\"\n    :type t: List[Tuple[int, int]]\n    :rtype: Tuple[int, int]\n    \"\"\"\n    return min(t)\n\n\n# TODO: Write a function to extract the minimum value record from a list of tuples.\n\ndef extractMin(t):\n    \"\"\"\n    :type t: List[Tuple[int, int]]\n    :rtype: Tuple[int, int]\n    \"\"\"\n    return min(t)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "import collections\n\nclass Solution:\n    \"\"\"\n    @param A: List of integers\n    @return: A tuple (index, minimum)\n    \"\"\"\n    def getMin(self, A):\n        if len(A) == 0:\n            return 0, 0\n        minVal, minIdx = A[0], 0\n        for i in range(1, len(A)):\n            if A[i] < minVal:\n                minVal, minIdx = A[i], i\n        return minIdx, minVal\n\n# test cases\nA = [1, 3, 5, 7]\nsol = Solution()\nprint(sol.getMin(A))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def extract_min(tuple_list):\n    \"\"\"\n    Args:\n        tuple_list: A list of tuples.\n    Returns:\n        The index minimum value record.\n    Examples:\n        >>> extract_min([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)])\n        (1, 2)\n        >>> extract_min([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)])\n        (6, 7)\n        >>> extract_min([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)])\n        (6, 7)\n    \"\"\"\n    min_record = tuple_list[0]\n    for record in tuple_list:\n        if record[0] < min_record[0]:\n            min_record = record\n    return min_record\n\n\nif __name__ == '__main__':\n    tuple_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]\n    min_record = extract_min(tuple_list)\n    print min_record"
    }
  ]
}