{
  "timestamp": "2025-09-14T20:54:38.524817",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 477,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef pentagon_area(sides):\n    \"\"\"\n    :param sides:\n    :return:\n    \"\"\"\n    pentagon_area = sqrt(3 * (sides ** 2) / 4)\n    return pentagon_area\n\n\nif __name__ == '__main__':\n    assert pentagon_area(5) == 10.0\n    assert pentagon_area(6) == 12.0\n    assert pentagon_area(7) == 14.0\n    assert pentagon_area(8) == 18.0\n    assert pentagon_area(9) == 24.0\n    assert pentagon_area(10) == 32.0\n    assert pentagon_area(11) == 48.0\n    assert pentagon_area(12) == 64.0\n    assert pentagon_area(13) == 96.0\n    assert pentagon_area(14) == 128.0\n    assert pentagon_area(15) == 192.0\n    assert pentagon_area(16) == 256.0\n    assert pentagon_area(17) == 384.0\n    assert pentagon_area(18) == 512.0\n    assert pentagon_area(19) == 768.0\n    assert pentagon_area(20) == 1024.0\n    assert pentagon_area(21) == 1536.0\n    assert pentagon_area(22) == 2048.0\n    assert pentagon_area(23) == 3072.0\n    assert pentagon_area(24) == 4096.0\n    assert pentagon_area(25) == 6144.0\n    assert pentagon_area(26) == 12288.0\n    assert pentagon_area(27) == 24576.0\n    assert pentagon_area(28) == 49152.0\n    assert pentagon_area(29) == 98304.0\n    assert pentagon_area(30) == 196608.0\n    assert pentagon_area(31) == 393216.0\n    assert pentagon_area(32) == 786432.0\n    assert pentagon_area(33) == 1572864.0\n    assert pentagon_area(34) == 3145728.0"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_area(n):\n    \"\"\"\n    Area of a pentagon is equal to 1/3 (n * sqrt(5))\n    \"\"\"\n    return 1.0 / 3.0 * math.sqrt(5 * n)\n\n# Test cases\n# n = 1\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n# 13\n# 14\n# 15\n# 16\n# 17\n# 18\n# 19\n# 20\n# 21\n# 22\n# 23\n# 24\n# 25\n# 26\n# 27\n# 28\n# 29\n# 30\n# 31\n# 32\n# 33\n# 34\n# 35\n# 36\n# 37\n# 38\n# 39\n# 40\n# 41\n# 42\n# 43\n# 44\n# 45\n# 46\n# 47\n# 48\n# 49\n# 50\n# 51\n# 52\n# 53\n# 54\n# 55\n# 56\n# 57\n# 58\n# 59\n# 60\n# 61\n# 62\n# 63\n# 64\n# 65\n# 66\n# 67\n# 68\n# 69\n# 70\n# 71\n# 72\n# 73\n# 74\n# 75\n# 76\n# 77\n# 78\n# 79\n# 80\n# 81\n# 82\n# 83\n# 84\n# 85\n# 86\n# 87\n# 88\n# 89\n# 90\n# 91\n# 92\n# 93\n# 94\n# 95\n# 96\n# 97\n# 98\n# 99\n# 100\n# 101\n# 102\n# 103\n# 104\n# 105\n# 106\n# 107\n# 108\n# 109\n# 110\n# 111\n# 112\n# 113\n# 114\n# 115\n# 116\n# 117\n# 118\n# 119\n# 120\n# 121\n# 122\n# 123\n# 124\n# 125\n# 126\n# 127\n# 128\n# 129\n# 130\n# 131\n# 132\n# 133\n# 134\n# 135\n# 136\n# 137\n# 138\n# 139\n# 140\n# 141\n# 142\n# 143\n# 144\n# 145\n# 146\n# 147"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import math\n\ndef area_pentagon(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c: the lengths of three sides of the pentagon\n    Output:\n        the area of the pentagon\n    \"\"\"\n    return math.sqrt(a * b * c)\n\ndef test():\n    assert area_pentagon(5, 3, 4) == 10, \"Area of pentagon is %f\" % area_pentagon(5, 3, 4)\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0, c=0):\n        self.x = a\n        self.y = b\n        self.c = c\n\nclass Solution(object):\n    def area(self, p):\n        \"\"\"\n        :type p: Point\n        :rtype: float\n        \"\"\"\n        if p.c == 0:\n            return 0\n        return (p.c * (p.x - p.y) * (p.x + p.y)) / 2"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_area(a):\n    \"\"\"\n    :param a: Area\n    :return: Area\n    \"\"\"\n    return math.sqrt(a)\n\n\nif __name__ == '__main__':\n    print(pentagon_area(20))\n    print(pentagon_area(100))\n    print(pentagon_area(200))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def area_pentagon(pentagon):\n    \"\"\"\n    Input is a string representing the vertices of the pentagon.\n    Output is the area of the pentagon.\n    \"\"\"\n    return (pentagon[0] + pentagon[1] + pentagon[2] + pentagon[3] + pentagon[4] + pentagon[5]) / 5\n\npentagon = \"v1 v2 v3 v4 v5 v6 v7 v8 v9\"\nprint(area_pentagon(pentagon))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon-area/problem\n\n#!/bin/python\n\nimport math\n\ndef pentagon_area():\n    \"\"\"\n    Area of a pentagon is half of the product of the side lengths of the sides\n    of the triangle formed by the sides of the pentagon.\n    \"\"\"\n\n    sides = [math.sqrt(3.0) * x for x in range(1, 5)]\n\n    return 2 * sides[0] * sides[1] / 3\n\nif __name__ == '__main__':\n    print(pentagon_area())"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution(object):\n    def pentagonArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://stackoverflow.com/questions/333816/pentagon-area-in-python\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-solution/\n        # http://www.mathblog.dk/pentagon-area-"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def area_pentagon(length):\n    return length * (length + 1) / 2\n\nif __name__ == '__main__':\n    print(area_pentagon(3))\n    print(area_pentagon(5))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_area(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    return (n**2) / 4\n\n# test cases\nassert pentagon_area(1) == 1.0\nassert pentagon_area(2) == 2.0\nassert pentagon_area(3) == 3.0\nassert pentagon_area(4) == 4.0\nassert pentagon_area(5) == 5.0\nassert pentagon_area(6) == 6.0\nassert pentagon_area(7) == 7.0\nassert pentagon_area(8) == 8.0\nassert pentagon_area(9) == 9.0\nassert pentagon_area(10) == 10.0\nassert pentagon_area(100) == 100.0\n\n# your code\ndef pentagon_area(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    return (n**2) / 4"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_area(side):\n    \"\"\"\n    Write a function to calculate the area of a pentagon.\n\n    Assume that the area of a triangle is equal to the sum of the\n    sides of the triangle.\n    \"\"\"\n    return (side * side * math.sqrt(3)) / 2\n\n\nif __name__ == '__main__':\n    assert pentagon_area(5) == math.sqrt(50)\n    assert pentagon_area(6) == math.sqrt(102)\n    assert pentagon_area(7) == math.sqrt(141)\n    assert pentagon_area(8) == math.sqrt(198)\n    assert pentagon_area(9) == math.sqrt(252)\n    assert pentagon_area(10) == math.sqrt(341)\n    assert pentagon_area(11) == math.sqrt(429)\n    assert pentagon_area(12) == math.sqrt(528)\n    assert pentagon_area(13) == math.sqrt(653)\n    assert pentagon_area(14) == math.sqrt(724)\n    assert pentagon_area(15) == math.sqrt(828)\n    assert pentagon_area(16) == math.sqrt(938)\n    assert pentagon_area(17) == math.sqrt(1059)\n    assert pentagon_area(18) == math.sqrt(1184)\n    assert pentagon_area(19) == math.sqrt(1329)\n    assert pentagon_area(20) == math.sqrt(1478)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\n# a pentagon is defined as a polygon with 5 sides and 4 vertices\n# a pentagon has the following form:\n#  1 3 5\n#  2 4 6\n#  0 2 4\n#  0 1 5\n#  0 0 3\n#\n# and the area of a pentagon is the sum of the lengths of the sides\n#\n#  5 * pi * r * r / 4\n#  where r is the radius of the pentagon\n#  and pi is pi/4\n#\n# the input is a string of the form \"1 3 5\"\n# the output should be the area of the pentagon in inches squared\n#\n# the function should return 0 if the input string is invalid\n# or the area if the string is valid\n#\n# Example:\n#  Input: \"1 3 5\"\n#  Output: 5.0\n#  Explanation: The area of the pentagon is 5.0\n#\n#  Input: \"1 3 5 7\"\n#  Output: 0.0\n#  Explanation: The area of the pentagon is 0.0\n\n# solution 1:\n#  Find the area of a pentagon using the formula\n#  area = pi * r * r / 4\n#  where r is the radius of the pentagon\n#  and pi is pi/4\n#  and the radius of the pentagon is the length of the side\n\n# solution 2:\n#  Find the area of a pentagon using the formula\n#  area = pi * r * r / 4\n#  where r is the radius of the pentagon\n#  and the radius of the pentagon is the length of the side\n\n# solution 3:\n#  Find the area of a pentagon using the formula\n#  area = pi * r * r / 4\n#  where r is the radius of the pentagon\n#  and the radius of the pentagon is the length of the side\n#  and the length of the side is the radius of the pentagon\n\n# solution 4:\n#  Find the area of a pentagon using the formula\n#  area = pi * r * r / 4\n#  where r is the radius of the pentagon\n#  and the radius of the pentagon is the length of"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import math\n\ndef area_pentagon(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    return (math.sqrt(3) * n) / 4\n\nif __name__ == '__main__':\n    print(area_pentagon(5))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def pentagon_area(n):\n    \"\"\"\n    >>> pentagon_area(3)\n    5.0\n    >>> pentagon_area(5)\n    28.5\n    >>> pentagon_area(7)\n    71.0\n    >>> pentagon_area(9)\n    142.0\n    >>> pentagon_area(15)\n    301.0\n    >>> pentagon_area(19)\n    410.0\n    >>> pentagon_area(23)\n    534.0\n    >>> pentagon_area(29)\n    732.0\n    \"\"\"\n    return n * (n + 1) / 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef pentagon_area(p):\n    \"\"\"\n    Input: a point P (p)\n    Output: the area of a pentagon\n    \"\"\"\n    x1 = p[0]\n    y1 = p[1]\n    x2 = p[2]\n    y2 = p[3]\n    x3 = p[4]\n    y3 = p[5]\n    x4 = p[6]\n    y4 = p[7]\n    x5 = p[8]\n    y5 = p[9]\n    x6 = p[10]\n    y6 = p[11]\n    x7 = p[12]\n    y7 = p[13]\n    x8 = p[14]\n    y8 = p[15]\n    x9 = p[16]\n    y9 = p[17]\n    x10 = p[18]\n    y10 = p[19]\n    x11 = p[20]\n    y11 = p[21]\n    x12 = p[22]\n    y12 = p[23]\n    x13 = p[24]\n    y13 = p[25]\n    x14 = p[26]\n    y14 = p[27]\n    x15 = p[28]\n    y15 = p[29]\n    x16 = p[30]\n    y16 = p[31]\n    x17 = p[32]\n    y17 = p[33]\n    x18 = p[34]\n    y18 = p[35]\n    x19 = p[36]\n    y19 = p[37]\n    x20 = p[38]\n    y20 = p[39]\n    x21 = p[40]\n    y21 = p[41]\n    x22 = p[42]\n    y22 = p[43]\n    x23 = p[44]\n    y23 = p[45]\n    x24 = p[46]\n    y24 = p[47]\n    x25 = p[48]\n    y25 = p[49]\n    x26 = p[50]\n    y26 = p[51]"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_area(a,b,c):\n    # a = length of sides\n    # b = length of sides\n    # c = length of sides\n    # a + b + c = 2\n    return (a + b + c) / 2.0\n\ndef main():\n    #Test Case\n    a = 5\n    b = 10\n    c = 15\n    area = pentagon_area(a,b,c)\n    print(area)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon-area/problem\n\ndef pentagon_area(n):\n    # your code goes here\n    return (n * (n + 1) / 2)\n\nif __name__ == '__main__':\n    t = int(input())\n    for a0 in range(t):\n        n = int(input())\n        print(pentagon_area(n))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import math\n\n# https://www.hackerrank.com/challenges/pentagonal-pentagon/problem\n\ndef pentagon_area(n):\n    \"\"\"\n    Args:\n        n (int): The number of sides of the pentagon.\n\n    Returns:\n        The area of the pentagon.\n    \"\"\"\n    return (math.sqrt(3) * (n * (n + 1) / 2)) / 2\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(pentagon_area(n))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_area(p):\n    \"\"\"\n    Returns the area of a pentagon.\n\n    :param p: the value of the pentagon\n    :return: the area of the pentagon\n    \"\"\"\n    return (p * (p - 1) / 2) * math.sqrt(5)\n\n\n\nif __name__ == '__main__':\n    assert pentagon_area(5) == 5.0\n    assert pentagon_area(10) == 10.0\n    assert pentagon_area(20) == 20.0\n    assert pentagon_area(30) == 30.0\n    assert pentagon_area(100) == 100.0\n    assert pentagon_area(200) == 200.0\n    assert pentagon_area(300) == 300.0\n    assert pentagon_area(400) == 400.0\n    assert pentagon_area(500) == 500.0\n    assert pentagon_area(600) == 600.0\n    assert pentagon_area(700) == 700.0\n    assert pentagon_area(800) == 800.0\n    assert pentagon_area(900) == 900.0\n    assert pentagon_area(1000) == 1000.0\n    assert pentagon_area(2000) == 2000.0\n    assert pentagon_area(3000) == 3000.0\n    assert pentagon_area(4000) == 4000.0\n    assert pentagon_area(5000) == 5000.0\n    assert pentagon_area(6000) == 6000.0\n    assert pentagon_area(7000) == 7000.0\n    assert pentagon_area(8000) == 8000.0\n    assert pentagon_area(9000) == 9000.0\n    assert pentagon_area(10000) == 10000.0\n    assert pentagon_area(20000) == 20000.0\n    assert pentagon_area(30000) == 30000.0\n    assert pentagon_area(40000) == 40000.0\n    assert pentagon_area(50000) == 50000.0\n    assert pentagon_area(60000) == 60000.0\n    assert pentagon_area(70000) == 70000.0\n    assert pentagon"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# A pentagon is a polygon with 5 sides and 4 vertices.\n# It is defined by:\n#  1. The number of sides.\n#  2. The sum of the sides.\n#  3. The number of vertices.\n#  4. The sum of the vertices.\n\n#!/usr/bin/python\n\n# http://stackoverflow.com/questions/236098/how-to-calculate-area-of-a-polygon\n\n# 1. Create a list of the sides.\nsides = [3, 5, 7, 9, 11]\n\n# 2. Calculate the sum of the sides.\nsum_sides = sum(sides)\n\n# 3. Calculate the number of vertices.\nvertices = len(sides)\n\n# 4. Calculate the sum of the vertices.\nsum_vertices = sum(vertices)\n\n# 5. Calculate the area.\narea = (sum_sides - sum_vertices) / 2\n\nprint(\"Area of a pentagon: \", area)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import math\n\n\ndef area_pentagon(p):\n    return math.sqrt(5 * (p * p)) / 2\n\n\ndef pentagon_area(p):\n    return 5 * p * p / 2\n\n\ndef main():\n    print(area_pentagon(5))\n    print(pentagon_area(5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.x, self.y)\n\nclass Solution:\n    def pentagonArea(self, point1, point2, point3, point4):\n        \"\"\"\n        :type point1: Point\n        :type point2: Point\n        :type point3: Point\n        :type point4: Point\n        :rtype: int\n        \"\"\"\n        # (a + b + c) / 2 * (a * b * c)\n        a = point1.y - point2.y\n        b = point1.x - point2.x\n        c = point2.y - point3.y\n        d = point2.x - point3.x\n        e = point3.y - point4.y\n        f = point3.x - point4.x\n        g = point4.y - point1.y\n        h = point4.x - point1.x\n        return (a * b * c) / 2 * (a * b * c) + (a * b * d) / 2 * (a * b * d) + (a * c * e) / 2 * (a * c * e) + (b * c * f) / 2 * (b * c * f) + (b * d * g) / 2 * (b * d * g) + (c * d * h) / 2 * (c * d * h)\n\nif __name__ == '__main__':\n    solution = Solution()\n    point1 = Point(1, 1)\n    point2 = Point(2, 2)\n    point3 = Point(3, 3)\n    point4 = Point(4, 4)\n    print solution.pentagonArea(point1, point2, point3, point4)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def pentagonArea(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: float\n        \"\"\"\n        return 3 * n / 2 * (n + 1) * (n + 1) / 2\n\nif __name__ == \"__main__\":\n    print Solution().pentagonArea(5)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def area_pentagon(width, height):\n    \"\"\"\n    :param width: int\n    :param height: int\n    :return: float\n    \"\"\"\n\n    # The formula to calculate the area of a pentagon is\n    #   area = 1/5 * h * w\n    #   where h = height, w = width\n    return 0.5 * height * width\n\n# Test Cases\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10\n# 5x10"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.x = a\n        self.y = b\n        self.c = c\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.x, self.y)\n\nclass Solution:\n    # @param point, a list of Point\n    # @return an integer\n    def pentagonArea(self, point):\n        \"\"\"\n        :type point: List[Point]\n        :rtype: int\n        \"\"\"\n        x = [p.x for p in point]\n        y = [p.y for p in point]\n        c = [p.c for p in point]\n        return (c[0] * (x[0] + x[1]) * (y[0] + y[1]) * (y[0] + y[1])) / (2 * math.sqrt(3))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.x = a\n        self.y = b\n        self.z = c\n\nclass Solution:\n    def areaPentagon(self, p: 'Point') -> 'float':\n        \"\"\"\n        :type p: Point\n        :rtype: float\n        \"\"\"\n        if p.z == 0:\n            return 0\n        p.z = p.z - 1\n        a = (p.x ** 2 + p.y ** 2) * (p.z ** 2 + p.y ** 2)\n        b = (p.x ** 2 + p.y ** 2) * (p.z ** 2 + p.z ** 2)\n        c = (p.x ** 2 + p.y ** 2) * (p.y ** 2 + p.z ** 2)\n        d = (p.x ** 2 + p.y ** 2) * (p.y ** 2 + p.y ** 2)\n        return (a + b + c + d) / 5"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "import math\n\ndef pentagon_area(n):\n    \"\"\"\n    Input: n = number of sides\n    Output: the area of the pentagon\n    \"\"\"\n    return math.pi * (n + 1) / 2.0\n\nprint(pentagon_area(5))"
    },
    {
      "rank": 28,
      "score": 9.963994939209833,
      "candidate": "class Solution(object):\n    def pentagonArea(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: float\n        \"\"\"\n        a, b, c = 0, 0, 0\n        for i in range(1, n):\n            a += i\n        for i in range(1, n):\n            b += i * (n - i)\n        for i in range(1, n):\n            c += i * (n - i) * (n - i - 1) / 2\n        return a * b / 2 + b * c / 2 + c * a / 2"
    },
    {
      "rank": 29,
      "score": 9.930867849414408,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon-area/problem\n\nfrom math import sqrt\n\ndef pentagon_area(n):\n    return (1 + sqrt(5)) * (n ** 2) / 2\n\nif __name__ == '__main__':\n    print(pentagon_area(5))"
    },
    {
      "rank": 30,
      "score": 9.88293152152541,
      "candidate": "import math\n\ndef pentagon_area(a, b, c):\n    \"\"\"\n    Input:\n    a, b, c : side lengths of a triangle\n    Output:\n    area of the pentagon\n    \"\"\"\n    return math.sqrt(a**2 + b**2 + c**2)\n\n# Test Cases\n# a, b, c = 4, 6, 8\n# pentagon_area(a, b, c)\n# 0.0\n# a, b, c = 6, 4, 8\n# pentagon_area(a, b, c)\n# 7.0\n# a, b, c = 8, 6, 4\n# pentagon_area(a, b, c)\n# 7.0\n\n# 5.0\n# a, b, c = 8, 6, 4\n# pentagon_area(a, b, c)\n# 10.0\n\n# 6.0\n# a, b, c = 8, 4, 6\n# pentagon_area(a, b, c)\n# 12.0\n\n# 7.0\n# a, b, c = 8, 6, 4\n# pentagon_area(a, b, c)\n# 12.0\n\n# 9.0\n# a, b, c = 4, 8, 6\n# pentagon_area(a, b, c)\n# 24.0\n\n# 10.0\n# a, b, c = 6, 4, 8\n# pentagon_area(a, b, c)\n# 24.0\n\n# 11.0\n# a, b, c = 6, 8, 4\n# pentagon_area(a, b, c)\n# 24.0\n\n# 12.0\n# a, b, c = 8, 6, 4\n# pentagon_area(a, b, c)\n# 24.0"
    },
    {
      "rank": 31,
      "score": 9.882923312638333,
      "candidate": "import math\n\ndef pentagon_area(p):\n    return p * (p - 1.0) * (2.0 * p - 1.0) / 6.0\n\ndef pentagon_area_1(p):\n    return p * (p - 1.0) * (3.0 * p - 1.0) / 6.0\n\ndef main():\n    pentagon_area(5)\n    pentagon_area(6)\n    pentagon_area(7)\n    pentagon_area(8)\n    pentagon_area(9)\n    pentagon_area(10)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 9.850496324767066,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.x, self.y)\n\nclass Solution(object):\n    def pentagonArea(self, p):\n        \"\"\"\n        :type p: Point\n        :rtype: int\n        \"\"\"\n        a = p.x * p.y\n        b = p.x * (p.y - 1)\n        c = p.x * (p.y - 2)\n        d = p.x * (p.y - 3)\n        return a + b + c + d\n\nif __name__ == '__main__':\n    p = Point(1, 1)\n    print Solution().pentagonArea(p)"
    },
    {
      "rank": 33,
      "score": 9.849448152205355,
      "candidate": "def pentagon_area(p):\n    \"\"\"\n    p is a point of a pentagon, which is a tuple of (x, y) coordinates.\n    Return the area of the pentagon.\n    \"\"\"\n    return (1 + (p[0] ** 2 + p[1] ** 2) ** 0.5) ** 2\n\n\ndef main():\n    \"\"\"\n    Test pentagon_area() with the following points.\n    \"\"\"\n    assert pentagon_area((0, 0)) == 0, \"area of point (0, 0)\"\n    assert pentagon_area((1, 0)) == 1, \"area of point (1, 0)\"\n    assert pentagon_area((1, 1)) == 2, \"area of point (1, 1)\"\n    assert pentagon_area((2, 0)) == 4, \"area of point (2, 0)\"\n    assert pentagon_area((2, 1)) == 6, \"area of point (2, 1)\"\n    assert pentagon_area((3, 0)) == 8, \"area of point (3, 0)\"\n    assert pentagon_area((3, 1)) == 12, \"area of point (3, 1)\"\n    assert pentagon_area((4, 0)) == 16, \"area of point (4, 0)\"\n    assert pentagon_area((4, 1)) == 24, \"area of point (4, 1)\"\n    assert pentagon_area((5, 0)) == 32, \"area of point (5, 0)\"\n    assert pentagon_area((5, 1)) == 40, \"area of point (5, 1)\"\n    assert pentagon_area((6, 0)) == 48, \"area of point (6, 0)\"\n    assert pentagon_area((6, 1)) == 64, \"area of point (6, 1)\"\n    assert pentagon_area((7, 0)) == 80, \"area of point (7, 0)\"\n    assert pentagon_area((7, 1)) == 96, \"area of point (7, 1)\"\n    assert pentagon_area((8, 0)) == 128, \"area of point (8, 0)\"\n    assert pentagon_area((8, 1)) == 160, \"area of point (8, 1)\"\n    assert pent"
    },
    {
      "rank": 34,
      "score": 9.845393812074393,
      "candidate": "def area(x):\n    \"\"\"\n    Input: 5\n    Output: 12.0\n    \"\"\"\n    return (1.0/4.0)*(3.0*x*x*x)\n\nif __name__ == '__main__':\n    assert area(5) == 12.0"
    },
    {
      "rank": 35,
      "score": 9.769680614520107,
      "candidate": "from math import sqrt\n\n\ndef area_pentagon(p1, p2, p3, p4):\n    \"\"\"\n    :param p1: the first point of the pentagon\n    :param p2: the second point of the pentagon\n    :param p3: the third point of the pentagon\n    :param p4: the fourth point of the pentagon\n    :return: the area of the pentagon\n    \"\"\"\n    # 1. Calculate the area of the pentagon\n    # 2. Convert the points to a vector\n    # 3. Calculate the area of the vector\n    # 4. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 5. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 6. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 7. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 8. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 9. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 10. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 11. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 12. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 13. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 14. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 15. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points\n    # 16. Calculate the area of the vector by multiplying the area of the vector with the area of the triangle formed by the points"
    },
    {
      "rank": 36,
      "score": 9.768291153593768,
      "candidate": "import math\n\n# The area of a pentagon is defined as:\n# \n# a = 1/5 * (1 + 4*sqrt(5))\n#\n# Where sqrt(5) is half of the square root of 5.\n\n# First, we define the area of a square as:\n# \n# a = 1/4 * (1 + 4*sqrt(2))\n#\n# Where sqrt(2) is half of the square root of 2.\n\n# Then, we define the area of a triangle as:\n# \n# a = 1/3 * (1 + 2*sqrt(3))\n#\n# Where sqrt(3) is half of the square root of 3.\n\n# Finally, we define the area of a hexagon as:\n# \n# a = 1/3 * (1 + 2*sqrt(6))\n#\n# Where sqrt(6) is half of the square root of 6.\n\n# We define the area of a heptagon as:\n# \n# a = 1/2 * (1 + sqrt(7))\n#\n# Where sqrt(7) is half of the square root of 7.\n\n# Now, we define the area of a octagon as:\n# \n# a = 1/3 * (1 + sqrt(8))\n#\n# Where sqrt(8) is half of the square root of 8.\n\n# Now, we define the area of a decagon as:\n# \n# a = 1/2 * (1 + sqrt(10))\n#\n# Where sqrt(10) is half of the square root of 10.\n\n# Now, we define the area of a decagon as:\n# \n# a = 1/2 * (1 + sqrt(12))\n#\n# Where sqrt(12) is half of the square root of 12.\n\n# Then, we define the area of a square as:\n# \n# a = 1/2 * (1 + sqrt(4))\n#\n# Where sqrt(4) is half of the square root of 4.\n\n# Then, we define the area of a triangle as:\n# \n# a = 1/2 * (1 + sqrt"
    },
    {
      "rank": 37,
      "score": 9.76713512321487,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    # @param p, a point\n    # @return an integer\n    def pentagonArea(self, p):\n        x0, y0, x1, y1, x2, y2, x3, y3 = p\n        # p is a point\n        # check if p is a point\n        if x0 > x1 or x1 > x2 or x2 > x3 or x3 > x0:\n            return 0\n        # p is a line\n        # check if p is a line\n        if y0 > y1 or y1 > y2 or y2 > y3 or y3 > y0:\n            return 0\n        # p is a triangle\n        # check if p is a triangle\n        if x0 + x1 > x2 + x3 or x1 + x2 > x3 + x0 or x2 + x3 > x0 + x1:\n            return 0\n        # p is a square\n        # check if p is a square\n        if y0 + y1 > y2 + y3 or y1 + y2 > y3 + y0 or y2 + y3 > y0 + y1:\n            return 0\n        # p is a rectangle\n        # check if p is a rectangle\n        # p is a rectangle\n        return 4 * ((x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0))\n\n    # @param p, a point\n    # @return an integer\n    def pentagonArea2(self, p):\n        x0, y0, x1, y1, x2, y2, x3, y3 = p\n        # p is a point\n        # check if p is a point\n        if x0 > x1 or x1 > x2 or x2 > x3 or x3 > x0:\n            return 0\n        # p is a line\n        # check if p is a line\n        if y0 > y1 or y1 > y2 or y2 > y3 or y3 > y0"
    },
    {
      "rank": 38,
      "score": 9.765262807032524,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.a = a\n        self.b = b\n    def __repr__(self):\n        return str(self.a)+' '+str(self.b)\n    def __eq__(self, other):\n        return self.a == other.a and self.b == other.b\n    def __add__(self, other):\n        return Point(self.a + other.a, self.b + other.b)\n\nclass Solution:\n    # @param p, a point\n    # @return an integer\n    def pentagonArea(self, p):\n        # Write your code here\n        if not p:\n            return 0\n        left = p.a\n        right = p.b\n        top = p.a + p.b\n        bottom = p.a - p.b\n        mid = (top + bottom)/2\n        left = mid - p.b\n        right = mid + p.b\n        area = (left*right) - (top*bottom)\n        return area\n\nif __name__ == '__main__':\n    s = Solution()\n    p = Point(3,4)\n    print s.pentagonArea(p)"
    },
    {
      "rank": 39,
      "score": 9.72780863773741,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return '(%s, %s, %s)' % (self.a, self.b, self.c)\n\nclass Solution(object):\n    def __init__(self):\n        self.area = 0\n\n    def get_area(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: int\n        \"\"\"\n        area = (p1.a + p2.a + p3.a + p4.a) * 0.5\n        area = area * (1.0 / 3.0)\n        return area\n\nif __name__ == '__main__':\n    solution = Solution()\n    p1 = Point(1, 2, 3)\n    p2 = Point(3, 2, 1)\n    p3 = Point(3, 4, 5)\n    p4 = Point(1, 5, 2)\n    p5 = Point(4, 1, 6)\n    p6 = Point(1, 1, 3)\n    p7 = Point(2, 3, 5)\n    p8 = Point(3, 5, 2)\n    p9 = Point(2, 2, 4)\n    p10 = Point(6, 1, 3)\n    p11 = Point(4, 3, 5)\n    p12 = Point(4, 5, 1)\n    p13 = Point(3, 1, 2)\n    p14 = Point(5, 2, 4)\n    p15 = Point(4, 4, 2)\n    p16 = Point(3, 3, 1)\n    p17 = Point(5, 4, 5)\n    p18 = Point(3, 5, 4)\n    p19 = Point(4, 4, 3)\n    p20 = Point(5, 3, 5)\n    p21"
    },
    {
      "rank": 40,
      "score": 9.718856235379514,
      "candidate": "from math import sqrt\n\n\ndef pentagon_area(sides):\n    \"\"\"\n    Returns the area of a pentagon.\n\n    >>> pentagon_area([5, 6, 7, 8, 9])\n    12.0\n    >>> pentagon_area([4, 8, 12, 16, 20])\n    42.0\n    \"\"\"\n\n    return sqrt(sides[0] * sides[1] * sides[2] * sides[3] * sides[4])\n\n\nif __name__ == '__main__':\n    print(pentagon_area([5, 6, 7, 8, 9]))\n    print(pentagon_area([4, 8, 12, 16, 20]))"
    },
    {
      "rank": 41,
      "score": 9.699680655040597,
      "candidate": "def area_pentagon(side_length):\n    \"\"\"\n    >>> area_pentagon(5)\n    5.0\n    >>> area_pentagon(4)\n    16.0\n    >>> area_pentagon(3)\n    9.0\n    >>> area_pentagon(2)\n    28.5\n    \"\"\"\n    return side_length * side_length / 12\n\ndef test():\n    assert area_pentagon(5) == 5.0\n    assert area_pentagon(4) == 16.0\n    assert area_pentagon(3) == 9.0\n    assert area_pentagon(2) == 28.5\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 42,
      "score": 9.661538999847021,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon-area/problem\n\nimport math\n\n\ndef area(p):\n    \"\"\"\n    :param p:\n    :return: the area of the pentagon\n    \"\"\"\n    a = math.sqrt(p * (p - 1) / 4)\n    return a\n\n\nif __name__ == '__main__':\n    n = int(input())\n    pent = []\n    for i in range(n):\n        pent.append(int(input()))\n\n    print(area(pent))"
    },
    {
      "rank": 43,
      "score": 9.545987962239394,
      "candidate": "__author__ = 'Danyang'\n\nclass Solution(object):\n    def get_pentagon_area(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = int(n)\n\n        a = (n * (n + 1)) / 2\n        b = n * (n + 1) / 2\n        c = (n * (n + 1) * 3) / 2\n\n        return max(a, b, c)"
    },
    {
      "rank": 44,
      "score": 9.493584439832787,
      "candidate": "def area_pentagon(p):\n    \"\"\"\n    p is a list of integer.\n    Return the area of a pentagon.\n    \"\"\"\n    a, b = p[:3]\n    c, d = p[3:]\n    return (a*b + c*d + a*d + b*c) * 0.5\n\nif __name__ == '__main__':\n    print(area_pentagon([3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 45,
      "score": 9.47114453552205,
      "candidate": "import math\n\n\ndef pentagon_area(p1, p2, p3, p4):\n    \"\"\"\n    Write a function to calculate the area of a pentagon.\n    :param p1: first point of the pentagon\n    :param p2: second point of the pentagon\n    :param p3: third point of the pentagon\n    :param p4: fourth point of the pentagon\n    :return: area of the pentagon\n    \"\"\"\n\n    # Calculate area of the pentagon\n    a = (p1[0] + p2[0] + p3[0] + p4[0]) / 2\n    b = (p1[1] + p2[1] + p3[1] + p4[1]) / 2\n    c = (p2[0] + p3[0] + p4[0] + p1[0]) / 2\n    d = (p2[1] + p3[1] + p4[1] + p1[1]) / 2\n    e = (p3[0] + p4[0] + p1[0] + p2[0]) / 2\n    f = (p3[1] + p4[1] + p1[1] + p2[1]) / 2\n    g = (p4[0] + p1[0] + p2[0] + p3[0]) / 2\n    h = (p4[1] + p1[1] + p2[1] + p3[1]) / 2\n\n    # area of the pentagon\n    pentagon_area = (a * b * c * d * e * f * g * h) / 2\n\n    return pentagon_area\n\n\ndef main():\n    \"\"\"\n    Write a function to calculate the area of a pentagon.\n    :return: None\n    \"\"\"\n    p1 = (0, 0)\n    p2 = (0, 0)\n    p3 = (0, 0)\n    p4 = (0, 0)\n\n    p1 = (1, 2)\n    p2 = (1, 2)\n    p3 = (1, 2)\n    p4 = (1, 2)\n\n    p1 ="
    },
    {
      "rank": 46,
      "score": 9.446832512996986,
      "candidate": "import math\n\ndef pentagon_area(n):\n    \"\"\"\n    Write a function to calculate the area of a pentagon.\n    \"\"\"\n    return math.sqrt(3) * n**2\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print \"Pentagon area is:\",pentagon_area(5)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 9.42450321128885,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    def pentagonArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        return (points[0].x * points[3].y - points[1].x * points[2].y) / 2\n\n\nif __name__ == '__main__':\n    points = [Point(x, y) for x, y in [[1, 1], [1, 3], [3, 3], [3, 1], [1, 1]]]\n    print(Solution().pentagonArea(points))"
    },
    {
      "rank": 48,
      "score": 9.401896687959665,
      "candidate": "import math\n\ndef pentagon_area(width, height):\n    \"\"\"\n    Returns the area of a pentagon\n    \"\"\"\n    # assuming width and height are positive\n    # calculate the area of the pentagon\n    # the formula is:\n    # 1/2 * (width * height)\n    # and the formula can be simplified by using the following equation\n    # 1/2 * (width * height) = (width + height) * width / 2\n    return width * height / 2\n\n# test cases\nprint('pentagon_area(3, 4):', pentagon_area(3, 4))\nprint('pentagon_area(5, 6):', pentagon_area(5, 6))\nprint('pentagon_area(7, 8):', pentagon_area(7, 8))\nprint('pentagon_area(9, 10):', pentagon_area(9, 10))\nprint('pentagon_area(11, 12):', pentagon_area(11, 12))"
    },
    {
      "rank": 49,
      "score": 9.389578175014488,
      "candidate": "import math\n\ndef pentagon_area(n):\n    \"\"\"\n    >>> pentagon_area(5)\n    12.0\n    >>> pentagon_area(7)\n    27.0\n    >>> pentagon_area(11)\n    49.0\n    >>> pentagon_area(13)\n    68.0\n    \"\"\"\n    return math.sqrt(5*(n*(n+1))/(2*(n+1)))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.137541083743484,
      "candidate": "def pentagon_area(p):\n    \"\"\"\n    p is a point in the form (x, y)\n    returns the area of the pentagon\n    \"\"\"\n    a = p[0]\n    b = p[1]\n    c = p[2]\n    d = p[3]\n    e = p[4]\n    f = p[5]\n    g = p[6]\n    h = p[7]\n    area = a*b + a*c + b*d + b*e + c*d + c*f + d*g + d*h + e*f + e*g + f*h + g*h\n    return area\n\ndef test_pentagon_area():\n    assert pentagon_area((1,1)) == 1\n    assert pentagon_area((2,2)) == 4\n    assert pentagon_area((3,3)) == 12\n    assert pentagon_area((4,4)) == 32\n    assert pentagon_area((5,5)) == 120\n    assert pentagon_area((6,6)) == 360\n    assert pentagon_area((7,7)) == 1440\n    assert pentagon_area((8,8)) == 4320\n\ndef test_pentagon_area_with_point():\n    assert pentagon_area((1,1)) == 1\n    assert pentagon_area((2,2)) == 4\n    assert pentagon_area((3,3)) == 12\n    assert pentagon_area((4,4)) == 32\n    assert pentagon_area((5,5)) == 120\n    assert pentagon_area((6,6)) == 360\n    assert pentagon_area((7,7)) == 1440\n    assert pentagon_area((8,8)) == 4320\n\n\n\nif __name__ == '__main__':\n    test_pentagon_area()\n    test_pentagon_area_with_point()"
    },
    {
      "rank": 51,
      "score": 9.020164938060113,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point [%.2f, %.2f]\" % (self.x, self.y)\n\nclass Solution:\n    # @param p, a point\n    # @return an integer\n    def computeArea(self, p):\n        \"\"\"\n        :type p: Point\n        :rtype: int\n        \"\"\"\n        a = p.x\n        b = p.y\n        c = a + b\n        d = a - b\n        e = c + d\n        f = a + c\n        g = a - c\n        h = d - f\n        i = g + h\n        j = a - d\n        k = a + g\n        l = b - h\n        m = a + l\n        n = b + m\n        o = c - k\n        p = a + o\n        q = b + n\n        return abs(p - q) * 0.5"
    },
    {
      "rank": 52,
      "score": 8.916583699930932,
      "candidate": "import math\n\n\ndef pentagon_area(side1, side2, side3, side4):\n    \"\"\"\n    :type side1: int\n    :type side2: int\n    :type side3: int\n    :type side4: int\n    :rtype: int\n    \"\"\"\n    # Calculate the area of the pentagon.\n    area = math.pi * (side1 + side2 + side3 + side4) / 5\n    return area\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(pentagon_area(3, 4, 5, 6))\n    print(pentagon_area(6, 5, 4, 3))\n    print(pentagon_area(3, 4, 6, 5))\n    print(pentagon_area(5, 6, 4, 3))\n    print(pentagon_area(5, 6, 6, 4))\n    print(pentagon_area(6, 5, 6, 4))\n    print(pentagon_area(5, 4, 6, 3))\n    print(pentagon_area(5, 4, 6, 4))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.8648788533014,
      "candidate": "def pentagon_area(p):\n    \"\"\"\n    >>> pentagon_area(5)\n    12\n    >>> pentagon_area(10)\n    56\n    \"\"\"\n    a = p/2\n    return (a * (a + 1) * (a + 2))/2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.746863433852376,
      "candidate": "def pentagon_area(p):\n    \"\"\"\n    :param p: the coordinates of the pentagon\n    :return: the area of the pentagon\n    \"\"\"\n    return float(p[0]**2 + p[1]**2 + p[2]**2 + p[3]**2 + p[4]**2) / 5\n\nif __name__ == '__main__':\n    assert pentagon_area([5, 3, 7, 1, 9]) == 28.5\n    assert pentagon_area([2, 2, 2, 2, 2]) == 0\n    assert pentagon_area([5, 2, 5, 2, 5]) == 0"
    },
    {
      "rank": 55,
      "score": 8.696327449386645,
      "candidate": "# Your function will be called like this:\n# x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10 = input()\n# print(area(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10))\n\ndef area(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r):\n    \"\"\"\n    Area of a pentagon\n    \"\"\"\n    # a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r\n    return 0.5*(a*b+c*d+e*f+g*h+i*j+k*l+m*n+o*p+q*r)\n\nif __name__ == '__main__':\n    cases = int(input())\n    for i in range(cases):\n        x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10 = input().split()\n        print(area(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10))"
    },
    {
      "rank": 56,
      "score": 8.690127447955128,
      "candidate": "# https://www.hackerrank.com/challenges/pentagon/problem\n\nimport math\n\ndef pentagon_area(n):\n    return math.sqrt(math.pow(n, 2) * (3 * n - 1) / 4)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(pentagon_area(n))"
    },
    {
      "rank": 57,
      "score": 8.634064093985113,
      "candidate": "def pentagon(x):\n    \"\"\"\n    Given the area of a pentagon, return the area of a square with side x.\n    \"\"\"\n    return x*x\n\ndef pentagon_area(x):\n    \"\"\"\n    Given the area of a pentagon, return the area of a square with side x.\n    \"\"\"\n    return x*x"
    },
    {
      "rank": 58,
      "score": 8.556551612209212,
      "candidate": "import math\n\n\ndef pentagon_area(p):\n    \"\"\"\n    Given the length of a side of a pentagon,\n    return the area of the pentagon.\n    \"\"\"\n    return math.sqrt(1 + 4 * p ** 2)\n\n\nif __name__ == \"__main__\":\n    print(pentagon_area(5))"
    },
    {
      "rank": 59,
      "score": 8.556477082152053,
      "candidate": "def pentagon_area(p):\n    \"\"\"\n    :param p: a tuple\n    :return: the area of the pentagon\n    \"\"\"\n    return (p[0] * p[1] * p[2]) / 5\n\nif __name__ == '__main__':\n    print(pentagon_area((1, 1, 1)))"
    },
    {
      "rank": 60,
      "score": 8.555149341613086,
      "candidate": "def pentagon(x):\n    return (x**2) / 2\n\n# Test Cases\n\n# pentagon(5) = 10\n# pentagon(10) = 40\n\nprint(pentagon(5))\nprint(pentagon(10))"
    },
    {
      "rank": 61,
      "score": 8.547136108179549,
      "candidate": "class Solution(object):\n    def pentagonArea(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: float\n        \"\"\"\n        return ((3.0 * n) / 4.0) * (n - 1)\n\ndef main():\n    n = int(raw_input())\n    s = Solution()\n    print s.pentagonArea(n)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.505471427563872,
      "candidate": "def pentagon_area(length):\n    \"\"\"\n    The area of a pentagon is given by:\n\n    a = 1/2 * sqrt(5) * (length - 1) / 3\n    \"\"\"\n    return 1.0 / 2 * (5 ** 0.5) * (length - 1) / 3\n\nif __name__ == \"__main__\":\n    print(pentagon_area(5))"
    },
    {
      "rank": 63,
      "score": 8.478830447254504,
      "candidate": "import math\n\ndef pentagon_area(side_len):\n    return side_len * (side_len + 1) / 2\n\ndef main():\n    print(pentagon_area(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.440260304775686,
      "candidate": "import math\n\n\ndef area_pentagon(height):\n    \"\"\"\n    :param height: The height of the pentagon.\n    :return: The area of the pentagon.\n    \"\"\"\n    return height * (height - 1) / 2\n\n\ndef test_area_pentagon():\n    assert area_pentagon(5) == math.pi * 5\n\n\ndef main():\n    print(area_pentagon(5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 8.43333837232036,
      "candidate": "import math\n\ndef area_pentagon():\n    \"\"\"\n    Returns the area of a pentagon.\n    \"\"\"\n\n    # The area of a pentagon is the same as the sum of the sides of the\n    # equilateral triangle formed by its sides.\n\n    # Here's a quick reference for this:\n    # http://math.stackexchange.com/questions/3300/how-to-calculate-the-area-of-a-pentagon\n\n    # We'll calculate the number of sides in the triangle:\n    triangle_sides = math.sqrt(5)\n\n    # Now we'll calculate the area of the pentagon:\n    pentagon_area = triangle_sides * math.sqrt(5) / 4\n\n    # Finally, we'll return the area of the pentagon:\n    return pentagon_area\n\nif __name__ == \"__main__\":\n    print(\"The area of a pentagon is {0}.\".format(area_pentagon()))"
    },
    {
      "rank": 66,
      "score": 8.40859347690409,
      "candidate": "import math\n\ndef pentagon_area(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    return math.sqrt(3.0 * (n * (n + 1)) / 4.0)\n\nif __name__ == \"__main__\":\n    print(pentagon_area(5))"
    },
    {
      "rank": 67,
      "score": 8.38689016167866,
      "candidate": "import math\n\ndef pentagon_area(n):\n    \"\"\"\n    Returns the area of a pentagon with n sides.\n    \"\"\"\n    return n * (math.sqrt(5) - 1)\n\nif __name__ == '__main__':\n    print pentagon_area(5)"
    },
    {
      "rank": 68,
      "score": 8.376346159214815,
      "candidate": "import math\n\ndef pentagon_area(p):\n    \"\"\"\n    Returns the area of a pentagon.\n\n    Arguments:\n    p -- a 5-digit number representing the length of each side of the pentagon.\n    \"\"\"\n\n    # 1. Determine the length of each side of the pentagon\n    side_lengths = [float(x) for x in p[:4]]\n\n    # 2. Determine the area of the pentagon\n    area = math.sqrt(side_lengths[0] * side_lengths[1] * side_lengths[2] * side_lengths[3])\n\n    return area\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n\n    pentagon = input(\"Enter a 5-digit number representing the length of each side of the pentagon: \")\n    area = pentagon_area(pentagon)\n\n    print(\"The area of the pentagon is: {}\".format(area))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.374453791293618,
      "candidate": "from math import sqrt\n\ndef area_pentagon(n):\n    \"\"\"\n    n is the number of sides of the pentagon.\n    Returns the area of a pentagon.\n    \"\"\"\n    return sqrt(3.0 * n * (n + 1) / 4.0)\n\ndef main():\n    \"\"\"\n    Test program. Call with one argument:\n    The number of sides of the pentagon.\n    \"\"\"\n    print area_pentagon(5)\n    return 0\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) == 1:\n        sys.argv.append('5')\n    main()"
    },
    {
      "rank": 70,
      "score": 8.354019382008529,
      "candidate": "def pentagon_area(side_lengths):\n    \"\"\"\n    Returns the area of a pentagon.\n    \n    side_lengths: A list of side lengths of a pentagon.\n    \n    >>> pentagon_area([3, 4, 5])\n    12.0\n    \"\"\"\n    if not side_lengths:\n        return 0.0\n    if len(side_lengths) == 1:\n        return side_lengths[0] * side_lengths[0] / 2.0\n    if len(side_lengths) == 2:\n        return side_lengths[0] * side_lengths[1] / 2.0\n    if len(side_lengths) == 3:\n        return (side_lengths[0] + side_lengths[1] + side_lengths[2]) / 2.0\n    return 0.0"
    },
    {
      "rank": 71,
      "score": 8.325068937515386,
      "candidate": "# Definition for a  point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution(object):\n    def computeArea(self, p1, p2, p3, p4, p5, p6):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :type p5: Point\n        :type p6: Point\n        :rtype: float\n        \"\"\"\n        # get the x and y coordinates of the corner points\n        x1, y1 = p1.x, p1.y\n        x2, y2 = p2.x, p2.y\n        x3, y3 = p3.x, p3.y\n        x4, y4 = p4.x, p4.y\n        x5, y5 = p5.x, p5.y\n        x6, y6 = p6.x, p6.y\n\n        # calculate the area of the triangle\n        area = (x1 * (y2 - y3) + x2 * (y3 - y4) + x3 * (y4 - y5) +\n                x4 * (y5 - y6) + x5 * (y6 - y1) + x6 * (y1 - y2)) / 2.0\n        return area\n\na = Point(1, 1)\nb = Point(2, 2)\nc = Point(3, 3)\nd = Point(4, 4)\ne = Point(5, 5)\nf = Point(6, 6)\ng = Point(7, 7)\nh = Point(8, 8)\n\np1 = a\np2 = b\np3 = c\np4 = d\np5 = e\np6 = f\n\ns = Solution()\n\nprint s.computeArea(p1, p2, p3, p4, p5, p6)"
    },
    {
      "rank": 72,
      "score": 8.295900430712404,
      "candidate": "import math\n\ndef pentagon_area(n):\n    \"\"\"\n    n is the number of vertices of the pentagon\n    return the area of the pentagon\n    \"\"\"\n    return n*(n+1)*(3*n+1)/6\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print(pentagon_area(5))\n    print(pentagon_area(10))\n    print(pentagon_area(15))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 8.257915394653331,
      "candidate": "# TODO\n# - Add tests\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes a number of sides of a triangle\n# - Implement a method that takes"
    },
    {
      "rank": 74,
      "score": 8.244457320516856,
      "candidate": "from math import sqrt\n\ndef pentagon_area(length):\n    \"\"\"\n    :type length: int\n    :rtype: float\n    \"\"\"\n    return sqrt(3 * (length * length - 1) / 4)\n\nif __name__ == '__main__':\n    print(pentagon_area(5))"
    },
    {
      "rank": 75,
      "score": 8.221292739842085,
      "candidate": "from math import sqrt\n\ndef pentagon_area(p):\n    \"\"\"\n    p is a number that is a perfect square.\n    \"\"\"\n    return p ** 2 / 3\n\nif __name__ == '__main__':\n    print(pentagon_area(14))"
    },
    {
      "rank": 76,
      "score": 8.184287012245427,
      "candidate": "from math import sqrt\n\ndef pentagon_area(p):\n    \"\"\"\n    :type p: int\n    :rtype: float\n    \"\"\"\n    return (5*p**2)/2\n\n\nif __name__ == '__main__':\n    print(pentagon_area(5))"
    },
    {
      "rank": 77,
      "score": 8.032706769285932,
      "candidate": "import math\n\ndef pentagon_area(p):\n    \"\"\"\n    Given a pentagon, return its area.\n\n    p: (numbers) A sequence of n positive integers, representing the sides of the pentagon.\n\n    Return the area of the pentagon.\n    \"\"\"\n    return math.sqrt(p[0] ** 2 + p[1] ** 2 + p[2] ** 2 + p[3] ** 2)\n\nif __name__ == \"__main__\":\n    p = [5, 4, 3, 2]\n    print(pentagon_area(p))"
    },
    {
      "rank": 78,
      "score": 8.006630297030505,
      "candidate": "import math\n\n# https://www.hackerrank.com/challenges/pentagon-area/problem\n\ndef pentagon_area(p):\n    return (p * (p + 1) * math.sqrt(5)) / 2\n\nif __name__ == '__main__':\n    test_cases = int(input())\n    for test in range(test_cases):\n        p = int(input())\n        print(pentagon_area(p))"
    },
    {
      "rank": 79,
      "score": 8.002772506718273,
      "candidate": "class Solution(object):\n    def pentagonArea(self, P):\n        \"\"\"\n        :type P: List[int]\n        :rtype: int\n        \"\"\"\n        if len(P)!= 5:\n            return 0\n        return (P[1]**2 + P[2]**2 + P[3]**2 + P[4]**2 + P[5]**2) / 5"
    },
    {
      "rank": 80,
      "score": 7.986102627430542,
      "candidate": "import math\n\ndef pentagon_area(num):\n    \"\"\"\n    >>> pentagon_area(5)\n    50.0\n    >>> pentagon_area(7)\n    52.0\n    >>> pentagon_area(9)\n    54.0\n    \"\"\"\n    return (num*(num+1)/2) * math.sqrt(5)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 7.897901996281997,
      "candidate": "def pentagon_area(p):\n    \"\"\"\n    :param p: A list of three numbers\n    :return: The area of a pentagon\n    \"\"\"\n    return (p[0]**2 + p[1]**2 + p[2]**2)/2\n\nif __name__ == '__main__':\n    p = [1, 1, 1]\n    print(pentagon_area(p))"
    },
    {
      "rank": 82,
      "score": 7.851327568600527,
      "candidate": "def pentagon_area(p):\n    \"\"\"\n    Input:  p - a tuple of 5 integers\n            p - a tuple of 5 integers\n    Output: an integer\n    \"\"\"\n    return (5 * (p[0] + p[1] + p[2]) / 2) * (p[0] + p[1] + p[2] + p[3] + p[4])\n\n\nif __name__ == \"__main__\":\n    print(pentagon_area((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 83,
      "score": 7.828298080918168,
      "candidate": "from math import sqrt\n\n\ndef pentagon_area(height):\n    \"\"\"\n    :type height: int\n    :rtype: float\n    \"\"\"\n    area = (1.0 * height) / 2.0\n    return area * sqrt(5.0)\n\n\ndef main():\n    height = int(input())\n    print(pentagon_area(height))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point %s,%s>' % (self.x, self.y)\n\n\nclass Solution:\n    def __init__(self):\n        self.result = 0\n        self.is_pentagon = self.pentagon()\n\n    def pentagon(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        for i in range(1, 10):\n            for j in range(i, 10):\n                for k in range(i, 10):\n                    for l in range(j, 10):\n                        for m in range(k, 10):\n                            for n in range(l, 10):\n                                if i + j + k + l + m == n:\n                                    return (i + j + k + l + m) * (i + j + k + l + m)\n        return 0\n\n    def get_result(self):\n        return self.result\n\n\ndef main():\n    s = Solution()\n    p = Point(1, 1)\n    p2 = Point(2, 2)\n    p3 = Point(3, 3)\n    p4 = Point(4, 4)\n    p5 = Point(5, 5)\n    p6 = Point(6, 6)\n    p7 = Point(7, 7)\n    p8 = Point(8, 8)\n    p9 = Point(9, 9)\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print(s.pentagon())\n    print("
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "def area_pentagon(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return (a * b) / 2 + (a * c) / 2 + (b * c) / 2\n\nif __name__ == \"__main__\":\n    assert(area_pentagon(1, 1, 1) == 1)\n    assert(area_pentagon(2, 1, 1) == 1)\n    assert(area_pentagon(1, 2, 1) == 1)\n    assert(area_pentagon(1, 1, 2) == 1)\n    assert(area_pentagon(2, 2, 2) == 4)\n    assert(area_pentagon(3, 3, 3) == 12)\n    assert(area_pentagon(4, 4, 4) == 24)\n    assert(area_pentagon(5, 5, 5) == 40)\n    assert(area_pentagon(6, 6, 6) == 80)\n    assert(area_pentagon(7, 7, 7) == 160)\n    assert(area_pentagon(8, 8, 8) == 320)\n    assert(area_pentagon(9, 9, 9) == 640)\n    assert(area_pentagon(10, 10, 10) == 1280)\n    assert(area_pentagon(11, 11, 11) == 2560)\n    assert(area_pentagon(12, 12, 12) == 5120)\n    assert(area_pentagon(13, 13, 13) == 10240)\n    assert(area_pentagon(14, 14, 14) == 20480)\n    assert(area_pentagon(15, 15, 15) == 40960)\n    assert(area_pentagon(16, 16, 16) == 81920)\n    assert(area_pentagon(17, 17, 17) == 163840)\n    assert(area_pentagon(18, 18, 18) == 32768)\n    assert(area_pentagon(19, 19, 19) == 65536)\n    assert(area_pentagon(20, 20, 20) == 131072)"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "import math\n\n\ndef pentagon_area(p):\n    \"\"\"\n    :param p: a tuple of (a, b, c, d, e)\n    :return: the area of the pentagon\n    \"\"\"\n    return math.sqrt(p[0] * p[1] * p[2] * p[3] * p[4])\n\n\ndef main():\n    \"\"\"\n    >>> main()\n    28.0\n    \"\"\"\n    p = (1, 1, 1, 1, 1)\n    print(pentagon_area(p))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def pentagon_area(p):\n    \"\"\"\n    Input:\n        p: a list of 5 integers\n    Output:\n        the area of a pentagon\n    \"\"\"\n    return (p[0] * p[2] * p[3]) / 2\n\n\ndef pentagon_area2(p):\n    \"\"\"\n    Input:\n        p: a list of 5 integers\n    Output:\n        the area of a pentagon\n    \"\"\"\n    a = p[0]\n    b = p[2]\n    c = p[3]\n    return (a * b * c) / 2\n\n\nif __name__ == '__main__':\n    p = [3, 4, 5, 6, 7]\n    print(pentagon_area(p))\n    print(pentagon_area2(p))"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    def area(self, p1, p2, p3, p4, p5, p6):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :type p5: Point\n        :type p6: Point\n        :rtype: int\n        \"\"\"\n        # calculate the area of the triangles\n        # triangle 1\n        # calculate the area of the triangle 2\n        # calculate the area of the triangle 3\n        # calculate the area of the triangle 4\n        # calculate the area of the triangle 5\n        # calculate the area of the triangle 6\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pentagon\n        # calculate the area of the pent"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "# Definition for a polygon\n# class Point:\n#     def __init__(self, x=0, y=0):\n#         self.x = x\n#         self.y = y\n\nclass Solution:\n    # @param p, a point\n    # @return an integer\n    def computeArea(self, p):\n        # Write your code here\n        x1, y1 = p.x, p.y\n        x2, y2 = x1 + 1, y1 + 1\n        x3, y3 = x1 + 1, y2 + 1\n        x4, y4 = x2 + 1, y3 + 1\n        x5, y5 = x3 + 1, y4 + 1\n        x6, y6 = x4 + 1, y5 + 1\n        x7, y7 = x5 + 1, y6 + 1\n        x8, y8 = x6 + 1, y7 + 1\n        return (x1*y2 + x2*y3 + x3*y4 + x4*y5 + x5*y6 + x6*y7 + x7*y8 + x8*y1) / 8"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        if cipher == '1' or cipher == '4':\n            return 0\n        elif cipher == '3' or cipher == '5':\n            return 1\n        elif cipher == '2' or cipher == '6':\n            return 3\n        elif cipher == '7' or cipher == '8':\n            return 7\n        else:\n            raise Exception('Invalid cipher')\n\n\nif __name__ == '__main__':\n    import sys\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        # construct cipher\n        cipher = f.readline().strip()\n\n        # solve\n        s = \"%s\\n\" % (solution.solve(cipher))\n        print s,"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.a, self.b)\n\n    def __eq__(self, other):\n        return self.__repr__() == other.__repr__()\n\nclass Solution(object):\n    def getPentagonArea(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 3:\n            return 0\n        return (n * (n + 1) * (n - 1) * 2) / 6\n\nif __name__ == '__main__':\n    assert Solution().getPentagonArea(4) == 24\n    assert Solution().getPentagonArea(5) == 125"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return str(self.a) + \",\" + str(self.b) + \",\" + str(self.c)\n\n# Your code here.\n\nclass Solution(object):\n    def computeArea(self, P, Q, R, S):\n        \"\"\"\n        :type P: Point\n        :type Q: Point\n        :type R: Point\n        :type S: Point\n        :rtype: int\n        \"\"\"\n        area = 0\n        # 1st triangle\n        area += (P.a + Q.a + R.a) * (P.b + Q.b + S.b) / 2\n        area -= (P.a + Q.a + R.a) * (P.b + Q.b + S.b) / 2\n        # 2nd triangle\n        area += (P.a + Q.a + R.b) * (P.b + Q.b + S.c) / 2\n        area -= (P.a + Q.a + R.b) * (P.b + Q.b + S.c) / 2\n        # 3rd triangle\n        area += (P.a + Q.b + R.a) * (P.b + Q.b + S.b) / 2\n        area -= (P.a + Q.b + R.a) * (P.b + Q.b + S.b) / 2\n        # 4th triangle\n        area += (P.a + Q.b + R.b) * (P.b + Q.b + S.c) / 2\n        area -= (P.a + Q.b + R.b) * (P.b + Q.b + S.c) / 2\n        # 5th triangle\n        area += (P.a + Q.b + R.c) * (P.b + Q.b + S.b) / 2\n        area -= (P.a + Q.b + R.c)"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def pentagon(n):\n    # your code here\n    return n*(n+1)/2\n\nprint(pentagon(5))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "class Solution:\n    # @return an integer\n    def pentagonArea(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (n + 1) * (n + 2) / 6\n\n    def test(self):\n        assert self.pentagonArea(5) == 40\n        assert self.pentagonArea(20) == 800\n        assert self.pentagonArea(15) == 100\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.test()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "# Definition for a polygon\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution(object):\n    def isPentagon(self, p):\n        \"\"\"\n        :type p: Point\n        :rtype: bool\n        \"\"\"\n        if p.x * p.x!= p.y * p.y:\n            return False\n        a = p.y / p.x\n        b = p.y / (p.x * p.x)\n        c = p.x / (p.y * p.y)\n        return a * a == b * b and c * c == b * b\n\n    def area(self, p):\n        \"\"\"\n        :type p: Point\n        :rtype: int\n        \"\"\"\n        if not self.isPentagon(p):\n            return 0\n        return 2 * p.x * (p.y - p.x * p.x / 4)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    p = Point(1, 2)\n    print(s.area(p))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# Definition for a polygon.\nclass Polygon:\n    def __init__(self, xy):\n        self.x, self.y = xy\n\nclass Solution(object):\n    def areaPentagon(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        x, y = x\n        if x < 3:\n            return 0\n        if x % 2 == 0:\n            return (x * (x-1)) / 2\n        else:\n            return (x * (x+1)) / 2 - y\n\nif __name__ == \"__main__\":\n    assert Solution().areaPentagon(7) == 28"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "import math\n\ndef pentagon_area(x):\n    return math.pi * x * x / 4\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert pentagon_area(5) == math.pi * 5 * 5 / 4, \"5 * 5\"\n    assert pentagon_area(6) == math.pi * 6 * 6 / 4, \"6 * 6\"\n    assert pentagon_area(7) == math.pi * 7 * 7 / 4, \"7 * 7\"\n    assert pentagon_area(8) == math.pi * 8 * 8 / 4, \"8 * 8\"\n    assert pentagon_area(9) == math.pi * 9 * 9 / 4, \"9 * 9\"\n    assert pentagon_area(10) == math.pi * 10 * 10 / 4, \"10 * 10\"\n    assert pentagon_area(11) == math.pi * 11 * 11 / 4, \"11 * 11\"\n    assert pentagon_area(12) == math.pi * 12 * 12 / 4, \"12 * 12\"\n    assert pentagon_area(13) == math.pi * 13 * 13 / 4, \"13 * 13\"\n    assert pentagon_area(14) == math.pi * 14 * 14 / 4, \"14 * 14\"\n    assert pentagon_area(15) == math.pi * 15 * 15 / 4, \"15 * 15\"\n    assert pentagon_area(16) == math.pi * 16 * 16 / 4, \"16 * 16\"\n    assert pentagon_area(17) == math.pi * 17 * 17 / 4, \"17 * 17\"\n    assert pentagon_area(18) == math.pi * 18 * 18 / 4, \"18 * 18\"\n    assert pentagon_area(19) == math.pi * 19 * 19 / 4, \"19 * 19\"\n    assert pentagon_area(20) == math.pi * 20 * 20 / 4, \"20 * 20\"\n    assert pentagon_area(21) == math.pi * 21 * 21 / 4, \"21 * 21\"\n    assert pentagon_area(22) == math"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def pentagonArea(self, point1, point2, point3, point4):\n        \"\"\"\n        :type point1: Point\n        :type point2: Point\n        :type point3: Point\n        :type point4: Point\n        :rtype: float\n        \"\"\"\n        # 1. calculate the middle point of the pentagon\n        mid = (point1.x + point2.x + point3.x + point4.x) / 5\n        # 2. calculate the distance between the mid and point1\n        d = (point1.x - mid) ** 2 + (point1.y - mid) ** 2\n        # 3. calculate the distance between the mid and point2\n        d1 = (point2.x - mid) ** 2 + (point2.y - mid) ** 2\n        # 4. calculate the distance between the mid and point3\n        d2 = (point3.x - mid) ** 2 + (point3.y - mid) ** 2\n        # 5. calculate the distance between the mid and point4\n        d3 = (point4.x - mid) ** 2 + (point4.y - mid) ** 2\n        # 6. calculate the area of the pentagon\n        area = (d1 + d2 + d3) / 2\n        return area"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "__author__ = 'Danyang'\n\nclass Solution(object):\n    def get_area(self, n):\n        \"\"\"\n        :param n: int\n        :return: int\n        \"\"\"\n        return n*(n+1)/2\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.get_area(5)\n    print s.get_area(10)\n    print s.get_area(15)\n    print s.get_area(20)\n    print s.get_area(25)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def isPentagon(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :type p4: Point\n        :rtype: bool\n        \"\"\"\n        # TODO\n        return True"
    }
  ]
}