{
  "timestamp": "2025-09-14T19:36:45.701129",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 302,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def print_positive_numbers(list_of_numbers):\n    for number in list_of_numbers:\n        if number < 0:\n            return False\n        else:\n            print(number)\n    return True\n\nprint_positive_numbers([1, -2, 3, -4, 5, -6])"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def print_list(my_list):\n    for i in my_list:\n        if i > 0:\n            print i,\n\nif __name__ == \"__main__\":\n    print_list([1,2,3,4,5,6,7,8,9])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print(number)\n\nnumbers = [1, -1, 0, 1, -1, -1, 1, 1, 0]\nprint_positive_numbers(numbers)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# This code is a modified version of the code in the\n# following URL.\n\n# https://www.youtube.com/watch?v=r-xC1-z7Fb0\n\n# The MIT License (MIT)\n\n# Copyright (c) 2015-2016 Atsushi Shibata\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\nimport random\n\ndef print_list(lst):\n    for i in range(0, len(lst)):\n        print(lst[i])\n\ndef print_list_random(lst):\n    for i in range(0, len(lst)):\n        print(random.choice(lst))\n\ndef print_list_random_reverse(lst):\n    for i in range(0, len(lst)):\n        print(random.choice(lst[::-1]))\n\ndef print_list_random_reverse_reverse(lst):\n    for i in range(0, len(lst)):\n        print(random.choice(lst[::-1][::-1]))\n\ndef"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def print_positive_numbers(list):\n    \"\"\"\n    Print the positive numbers in a list.\n    \"\"\"\n    for number in list:\n        if number > 0:\n            print number\n\nlist = [1, -1, -2, 3, 5, -7, 8]\nprint_positive_numbers(list)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def print_positive_numbers(list):\n    for num in list:\n        if num < 0:\n            print('Negative number!')\n        else:\n            print(num)\n\n# Test\nprint_positive_numbers([-1, -2, 3, 4, 5])"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def print_positive_numbers_in_list(numbers_list):\n    for number in numbers_list:\n        if number > 0:\n            print(number)\n\nnumbers_list = [1, 2, -3, 4, -5, 6, -7, 8, -9, 10]\nprint_positive_numbers_in_list(numbers_list)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import sys\n\ndef print_list(list_of_numbers):\n    \"\"\"\n    Print a list of numbers\n    \"\"\"\n\n    for number in list_of_numbers:\n        if number > 0:\n            print number,\n\nif __name__ == \"__main__\":\n    # This is the input list\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    print_list(list_of_numbers)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def positive_numbers(numbers):\n    for number in numbers:\n        if number < 0:\n            raise Exception(\"The number %d is negative\" % number)\n    return numbers\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5]\n    print(positive_numbers(numbers))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 9.996625693815517,
      "candidate": "# Write your code below!\n\ndef positive_numbers(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in my_list if x > 0]"
    },
    {
      "rank": 11,
      "score": 9.965433924707204,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print(number)\n\nprint_positive_numbers([1, -2, 3, 4, 5, 6, -7, 8])"
    },
    {
      "rank": 12,
      "score": 9.953585255834046,
      "candidate": "def print_positive_numbers(numbers):\n    print(list(filter(lambda x: x > 0, numbers)))\n\nif __name__ == \"__main__\":\n    print_positive_numbers([-5, 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 13,
      "score": 9.941461656319166,
      "candidate": "def print_positive_numbers(numbers):\n    \"\"\"\n    print_positive_numbers(numbers):\n\n    Prints the list of numbers in the positive integers.\n    \"\"\"\n    for number in numbers:\n        if number > 0:\n            print number\n\nif __name__ == \"__main__\":\n    print_positive_numbers([1, -2, 3, 4, 5, -6])"
    },
    {
      "rank": 14,
      "score": 9.924724076102677,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print number\n\n# Test Cases\nnumbers = [1,2,3,4,5,6]\nprint_positive_numbers(numbers)\n\n# Your code here"
    },
    {
      "rank": 15,
      "score": 9.903729429895922,
      "candidate": "def print_positive_numbers(number_list):\n    \"\"\"\n    number_list is a list of positive integers.\n    \"\"\"\n    for number in number_list:\n        if number > 0:\n            print number\n\n# Test Cases\n\ntest_cases = [\n    [[1, 2, 3],\n     [-1, -2, -3],\n     [4, 5, 6],\n     [-4, -5, -6]],\n    [[1, 2, 3],\n     [-1, -2, -3],\n     [4, 5, 6],\n     [-4, -5, -6],\n     [-1, -2, -3],\n     [-4, -5, -6],\n     [4, 5, 6],\n     [-4, -5, -6]],\n    [[-1, -2, -3],\n     [1, 2, 3],\n     [4, 5, 6],\n     [-4, -5, -6],\n     [-1, -2, -3],\n     [-4, -5, -6],\n     [4, 5, 6],\n     [-4, -5, -6],\n     [-1, -2, -3],\n     [-4, -5, -6],\n     [4, 5, 6],\n     [-4, -5, -6]],\n    [[-1, -2, -3],\n     [1, 2, 3],\n     [4, 5, 6],\n     [-4, -5, -6],\n     [-1, -2, -3],\n     [-4, -5, -6],\n     [4, 5, 6],\n     [-4, -5, -6]],\n    [[1, 2, 3],\n     [-1, -2, -3],\n     [4, 5, 6],\n     [-4, -5, -6],\n     [-1, -2, -3],\n     [-4, -5, -6],\n     [4, 5, 6],\n     [-4, -5, -6],\n     [-1, -2, -"
    },
    {
      "rank": 16,
      "score": 9.884840307260053,
      "candidate": "import sys\n\ndef print_list(l):\n    for i in l:\n        if i > 0:\n            print(i)\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Please input the list of numbers.\")\n    else:\n        print_list(sys.argv[1])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 9.884145576796884,
      "candidate": "def print_positive_numbers(numbers):\n    \"\"\"\n    Prints all the positive numbers in the list.\n    \"\"\"\n    for num in numbers:\n        if num > 0:\n            print num\n\nprint_positive_numbers([1, 2, 3, 4, 5])"
    },
    {
      "rank": 18,
      "score": 9.874560739103865,
      "candidate": "def print_positive(numbers):\n    \"\"\"\n    >>> print_positive([1,2,3,4,5,6])\n    1 2 3 4 5 6\n    \"\"\"\n    for i in numbers:\n        if i < 0:\n            print(\"{}\".format(i))\n\nif __name__ == \"__main__\":\n    print_positive([-1,0,1,2,3,4,5,6,7,8,9])"
    },
    {
      "rank": 19,
      "score": 9.838720061348718,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number < 0:\n            raise ValueError('Negative number')\n        elif number == 0:\n            print('0')\n        else:\n            print(number)\n\nif __name__ == '__main__':\n    numbers = [1,2,3,4,5,6,7,8,9,10]\n    print_positive_numbers(numbers)"
    },
    {
      "rank": 20,
      "score": 9.820038947901322,
      "candidate": "from collections import Counter\n\n\ndef print_list(l):\n    \"\"\"\n    Print list of numbers in a given list.\n    \"\"\"\n\n    for x in l:\n        if x > 0:\n            print(x)\n\n\n# Test Cases\nprint_list([-2, -3, 0, -1, 2, 3, 1])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4, 5])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4, 5, 6])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4, 5, 6, 7])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nprint_list([-2, -3, 0, -1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nprint_list([-2, -3, 0, -"
    },
    {
      "rank": 21,
      "score": 9.790195619194341,
      "candidate": "# the code below is a simple python program to print the numbers\n# in a list.  It is not very efficient or useful, but it should\n# print all of the numbers in the list in order.\n\ndef print_all(l):\n    for n in l:\n        print(n)\n\nnumbers = [1, 2, 3, 4, 5, 6]\n\nprint_all(numbers)"
    },
    {
      "rank": 22,
      "score": 9.735572267761025,
      "candidate": "def print_pos_numbers(numbers):\n    for num in numbers:\n        if num > 0:\n            print num\n\nprint_pos_numbers([1, 2, 3, 4, 5])"
    },
    {
      "rank": 23,
      "score": 9.723416256498492,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print(number)\n\nnumbers = [1, 2, 3, 4, -5, 6]\nprint_positive_numbers(numbers)"
    },
    {
      "rank": 24,
      "score": 9.630369502408143,
      "candidate": "def print_positive_numbers(numbers):\n    \"\"\"\n    Write a python function to print positive numbers in a list.\n    \"\"\"\n    for i in numbers:\n        if i > 0:\n            print i\n\nprint_positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
      "rank": 25,
      "score": 9.52167993883555,
      "candidate": "# Function to print the list\ndef print_list(list_of_numbers):\n    for number in list_of_numbers:\n        print number,\n\n# Print the list\nprint_list([2, 3, 4])"
    },
    {
      "rank": 26,
      "score": 9.370583536698913,
      "candidate": "def print_positive_numbers(list):\n    \"\"\"\n    @param list: A list of positive numbers.\n    @return: None\n    \"\"\"\n    for num in list:\n        if num > 0:\n            print num,\n\n# Test cases\nlist = [1, 2, -3, 4, -5]\n\nprint_positive_numbers(list)"
    },
    {
      "rank": 27,
      "score": 9.234050852198141,
      "candidate": "import sys\n\ndef print_list(list_of_numbers):\n    for i in range(len(list_of_numbers)):\n        print(list_of_numbers[i])\n\nif __name__ == '__main__':\n    list_of_numbers = [1,2,3,4,5,6,7,8,9,10]\n    print_list(list_of_numbers)"
    },
    {
      "rank": 28,
      "score": 9.21346272767743,
      "candidate": "from itertools import takewhile\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\ndef print_numbers(numbers):\n    \"\"\"\n    Print positive numbers in a list.\n    \"\"\"\n    for number in takewhile(lambda x: x > 0, numbers):\n        print(number)\n\n\nprint_numbers(numbers)"
    },
    {
      "rank": 29,
      "score": 9.205959372648458,
      "candidate": "def positiveNumbers(numbers):\n    for number in numbers:\n        if number < 0:\n            print('Negative numbers are not allowed')\n            return\n        elif number == 0:\n            print('Zero is not allowed')\n        else:\n            print(number)\n\nnumbers = [1,2,3,4]\npositiveNumbers(numbers)"
    },
    {
      "rank": 30,
      "score": 9.183391466815202,
      "candidate": "def print_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: None\n    \"\"\"\n    for i in nums:\n        if i < 0:\n            print(\"-\", i)\n        else:\n            print(i)\n\nprint_positive([1, -2, 3, -4, 5, -6, 7, -8, 9])"
    },
    {
      "rank": 31,
      "score": 9.177268828905222,
      "candidate": "def print_positive_numbers(my_list):\n    \"\"\"\n    Print the positive numbers in the given list.\n    \"\"\"\n    for i in my_list:\n        if i > 0:\n            print i\n\nprint_positive_numbers([1, -3, 4, -2, 0])"
    },
    {
      "rank": 32,
      "score": 9.122564458729856,
      "candidate": "def print_positive_numbers(lst):\n    \"\"\"\n    Print the numbers in the list that are positive.\n    \"\"\"\n    for num in lst:\n        if num > 0:\n            print num\n\nprint_positive_numbers([-2, -4, -1, 0, 1, 2])"
    },
    {
      "rank": 33,
      "score": 8.973005557553902,
      "candidate": "def print_list(list_of_numbers):\n    for number in list_of_numbers:\n        if number > 0:\n            print(number)\n\nlist_of_numbers = [1, 2, 3, 4, 5]\nprint_list(list_of_numbers)"
    },
    {
      "rank": 34,
      "score": 8.946210893390457,
      "candidate": "def print_positive_numbers_in_list(numbers):\n    for number in numbers:\n        if number < 0:\n            raise ValueError('Negative numbers not allowed.')\n        else:\n            print number"
    },
    {
      "rank": 35,
      "score": 8.932217008005624,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print number\n\nnumbers = [1, 2, 3, -1, 0, -4]\nprint_positive_numbers(numbers)"
    },
    {
      "rank": 36,
      "score": 8.910084504002544,
      "candidate": "# write your code here\ndef print_pos(list):\n    \"\"\"\n    print a list of positive numbers\n    \"\"\"\n    for number in list:\n        if number > 0:\n            print number"
    },
    {
      "rank": 37,
      "score": 8.85571690049604,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number < 0:\n            raise ValueError('Negative number')\n        else:\n            print number\n\nif __name__ == '__main__':\n    numbers = [1, -1, 0, -2]\n    print_positive_numbers(numbers)"
    },
    {
      "rank": 38,
      "score": 8.850707355641543,
      "candidate": "def print_positive_numbers_in_list(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: None\n    \"\"\"\n    for i in numbers:\n        if i < 0:\n            print(\"Negative numbers are not allowed.\")\n        else:\n            print(i)"
    },
    {
      "rank": 39,
      "score": 8.8281618090209,
      "candidate": "def print_positive_numbers_in_list(list_of_numbers):\n    \"\"\"\n    Print the positive numbers in the given list.\n    \"\"\"\n    print_list = []\n    for number in list_of_numbers:\n        if number > 0:\n            print_list.append(number)\n    print_list.sort()\n    for number in print_list:\n        print number,\n    print\n\ndef main():\n    \"\"\"\n    Execute the main program.\n    \"\"\"\n    list_of_numbers = [1, 2, 3, 4, -5, 6]\n    print_positive_numbers_in_list(list_of_numbers)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.81367773444215,
      "candidate": "def print_positive_numbers(list):\n    for i in list:\n        if i < 0:\n            print(\"negative number not allowed\")\n        elif i > 0:\n            print(i)\n\nif __name__ == '__main__':\n    my_list = [-1, -2, 3, 4, 5]\n    print_positive_numbers(my_list)"
    },
    {
      "rank": 41,
      "score": 8.76828871349479,
      "candidate": "def print_pos(list):\n    for num in list:\n        if num < 0:\n            print \"Negative number\", num\n        elif num == 0:\n            print \"Zero\"\n        else:\n            print num\n\nlist = [1, 2, -1, 0, -2, 3]\nprint_pos(list)"
    },
    {
      "rank": 42,
      "score": 8.750282588864879,
      "candidate": "def positive_numbers(lst):\n    \"\"\"\n    >>> positive_numbers([2, 3, -5])\n    [2, 3, 5]\n    \"\"\"\n    for i in lst:\n        if i < 0:\n            return False\n    return lst\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.715724466237427,
      "candidate": "from collections import Counter\nfrom random import randint\n\n\ndef print_pos_numbers(numbers):\n    \"\"\"\n    Print a list of positive numbers.\n\n    :param numbers: list of numbers to print\n    :return: None\n    \"\"\"\n\n    for number in numbers:\n        if number > 0:\n            print(number)\n\n\ndef print_numbers_in_range(start, end):\n    \"\"\"\n    Print a list of numbers in a range.\n\n    :param start: start number\n    :param end: end number\n    :return: None\n    \"\"\"\n\n    for number in range(start, end + 1):\n        if number > 0:\n            print(number)\n\n\ndef main():\n    \"\"\"\n    Run main.\n    \"\"\"\n\n    numbers = [randint(0, 100) for i in range(10)]\n\n    print_pos_numbers(numbers)\n    print_numbers_in_range(0, 100)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.692801520950061,
      "candidate": "from sys import argv\n\ndef main():\n    print(list(filter(lambda x: x > 0, map(int, argv[1:]))))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.632293453617281,
      "candidate": "def print_positive_numbers_in_list(list_of_numbers):\n    for number in list_of_numbers:\n        if number < 0:\n            print(\"Negative numbers are not allowed\")\n        else:\n            print(number)\n\n# list_of_numbers = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]\nlist_of_numbers = [1, 2, 3, 4, 5]\nprint_positive_numbers_in_list(list_of_numbers)"
    },
    {
      "rank": 46,
      "score": 8.625262456968262,
      "candidate": "def print_positive_numbers(numbers):\n    \"\"\"\n    Write a python function to print positive numbers in a list.\n    :param numbers: a list of positive integers\n    \"\"\"\n    for number in numbers:\n        if number < 0:\n            print(\"%d is not a positive number\" % number)\n        else:\n            print(\"%d is a positive number\" % number)\n\n# Your code here\nprint_positive_numbers([1,2,3,4,5,6,7,8,9])"
    },
    {
      "rank": 47,
      "score": 8.625142247198651,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print number\n\nnumbers = [1, 2, 3, 4, 5, -1]\nprint_positive_numbers(numbers)"
    },
    {
      "rank": 48,
      "score": 8.623000730200317,
      "candidate": "def print_positive_numbers(a):\n    \"\"\"\n    a: a list\n    return: None\n    \"\"\"\n    for i in a:\n        if i < 0:\n            continue\n        print(i)\n\na = [1, 2, 3, 4, 5, 6]\nprint_positive_numbers(a)"
    },
    {
      "rank": 49,
      "score": 8.616253589228675,
      "candidate": "def print_positive_numbers(list):\n    for i in list:\n        if i > 0:\n            print i\n\nlist = [1, 2, -3, 4, -5]\nprint_positive_numbers(list)"
    },
    {
      "rank": 50,
      "score": 8.606486429141842,
      "candidate": "# This function will print a list of numbers from 0 to 10.\ndef print_list(list):\n    for number in list:\n        print(number)\n\n\n# Call the print_list function with a list.\nprint_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 51,
      "score": 8.565425580227462,
      "candidate": "def print_positive_numbers(list_of_numbers):\n    for number in list_of_numbers:\n        if number > 0:\n            print number\n\nif __name__ == \"__main__\":\n    list_of_numbers = [1, 2, -3, 4]\n    print_positive_numbers(list_of_numbers)"
    },
    {
      "rank": 52,
      "score": 8.548876241946822,
      "candidate": "def print_list(list_of_numbers):\n    for number in list_of_numbers:\n        if number > 0:\n            print number\n\nprint_list([1,2,3])\nprint_list([-1,-2,-3])\nprint_list([0,0,0])"
    },
    {
      "rank": 53,
      "score": 8.499905739299377,
      "candidate": "def print_positive_numbers(list):\n    \"\"\"\n    Print positive numbers in a list.\n    \"\"\"\n    for num in list:\n        if num > 0:\n            print(num)"
    },
    {
      "rank": 54,
      "score": 8.490324832712195,
      "candidate": "def print_positive_numbers(list_of_numbers):\n    \"\"\"\n    Print positive numbers in list_of_numbers.\n    \"\"\"\n    for number in list_of_numbers:\n        if number > 0:\n            print number"
    },
    {
      "rank": 55,
      "score": 8.478208546788407,
      "candidate": "#!/usr/bin/env python\n\ndef print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print number\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]\n    print_positive_numbers(numbers)"
    },
    {
      "rank": 56,
      "score": 8.426531424889468,
      "candidate": "def print_pos_list(list_of_nums):\n    \"\"\"\n    Print the positive numbers in a list.\n    \"\"\"\n    print(list_of_nums)\n    for num in list_of_nums:\n        if num > 0:\n            print(num, end=\" \")\n    print()\n\n# TEST CASES\n\nprint_pos_list([1, 2, 3, -1, 0])\n\nprint_pos_list([-2, -1, 1, 2, 3, 4, 5, 6])"
    },
    {
      "rank": 57,
      "score": 8.408439383654278,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print number\n\nif __name__ == '__main__':\n    numbers = [3, 5, -1, 4, 0, -3, 2]\n    print_positive_numbers(numbers)"
    },
    {
      "rank": 58,
      "score": 8.386620303250325,
      "candidate": "def print_list(my_list):\n    print(my_list)\n    for my_item in my_list:\n        if my_item < 0:\n            print(\"Negative number:\", my_item)\n        else:\n            print(\"Positive number:\", my_item)\n\nif __name__ == '__main__':\n    my_list = [-1, 1, -2, 3, -4]\n    print_list(my_list)"
    },
    {
      "rank": 59,
      "score": 8.334608500525688,
      "candidate": "def print_positive_numbers(list_of_numbers):\n    for number in list_of_numbers:\n        if number > 0:\n            print number\n\nif __name__ == '__main__':\n    list_of_numbers = [1, 2, 3, -4, -5, 6]\n    print_positive_numbers(list_of_numbers)"
    },
    {
      "rank": 60,
      "score": 8.331556294201176,
      "candidate": "def print_pos_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print(number)\n\nprint_pos_numbers([1,2,3])"
    },
    {
      "rank": 61,
      "score": 8.327375965969855,
      "candidate": "def print_list(list_of_numbers):\n    \"\"\"\n    Print all numbers in the list.\n    \"\"\"\n    for number in list_of_numbers:\n        print(number)\n\ndef print_list_with_commas(list_of_numbers):\n    \"\"\"\n    Print all numbers in the list, with commas between the numbers.\n    \"\"\"\n    for number in list_of_numbers:\n        print(str(number) + \",\")\n\nif __name__ == \"__main__\":\n    list_of_numbers = [3, 2, 1, 0]\n    print_list(list_of_numbers)\n    print_list_with_commas(list_of_numbers)"
    },
    {
      "rank": 62,
      "score": 8.298597569547805,
      "candidate": "def print_positive_numbers_in_list(numbers):\n    for num in numbers:\n        if num > 0:\n            print(num)"
    },
    {
      "rank": 63,
      "score": 8.294940769211511,
      "candidate": "def print_positive_numbers(numbers):\n    \"\"\"\n    :type numbers: list\n    :rtype: None\n    \"\"\"\n    if not numbers:\n        return\n    for number in numbers:\n        if number < 0:\n            return\n    print numbers\n\nprint_positive_numbers([1, 2, -3, 4, -5, 6, 7])"
    },
    {
      "rank": 64,
      "score": 8.289838256518838,
      "candidate": "import sys\n\ndef print_positive_numbers(list):\n    \"\"\"\n    Print positive numbers in list\n    \"\"\"\n    for i in list:\n        if i > 0:\n            print(i)\n\nif __name__ == \"__main__\":\n    list = [1, -1, 3, 5, -2, -3, 7, 9, -4]\n    print_positive_numbers(list)\n    sys.exit(0)"
    },
    {
      "rank": 65,
      "score": 8.211579567659316,
      "candidate": "def print_positive_numbers(numbers):\n    \"\"\"\n    Prints the positive numbers in a list.\n    \"\"\"\n    for number in numbers:\n        if number > 0:\n            print number\n\nnumbers = [1, 2, 3, 4, 5]\n\nprint_positive_numbers(numbers)"
    },
    {
      "rank": 66,
      "score": 8.209707251476969,
      "candidate": "def print_positive_numbers(numbers):\n    \"\"\"\n    Prints a list of numbers that are positive.\n    \"\"\"\n\n    for number in numbers:\n        if number > 0:\n            print number\n\n\nprint_positive_numbers([1, 2, -3, 4, 5])"
    },
    {
      "rank": 67,
      "score": 8.2048573255218,
      "candidate": "#!/usr/bin/env python\n\ndef print_positive_numbers(lst):\n    for num in lst:\n        if num > 0:\n            print num\n\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    print_positive_numbers(lst)"
    },
    {
      "rank": 68,
      "score": 8.185309335307622,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print number\n\nnumbers = [2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5]\nprint_positive_numbers(numbers)"
    },
    {
      "rank": 69,
      "score": 8.172253082181854,
      "candidate": "def print_positive_numbers(numbers):\n    \"\"\"Print positive numbers in a list.\n\n    :param numbers: list of positive numbers.\n    :return: None.\n    \"\"\"\n\n    for number in numbers:\n        if number < 0:\n            raise ValueError(\"Negative number is not allowed.\")\n\n    for number in numbers:\n        print(number)\n\nif __name__ == '__main__':\n    \"\"\"\n    >>> print_positive_numbers([-1, 2, 3])\n    [-1, 2, 3]\n    >>> print_positive_numbers([-1, 0, 3])\n    [-1, 0, 3]\n    \"\"\"\n    print_positive_numbers([-1, 2, 3])\n    print_positive_numbers([-1, 0, 3])\n    print_positive_numbers([-1, 0, 0])\n    print_positive_numbers([-1, 0, -1])"
    },
    {
      "rank": 70,
      "score": 8.163300679823958,
      "candidate": "def print_positive_numbers(list_of_numbers):\n    \"\"\"\n    Prints all the positive numbers in the list.\n    \"\"\"\n    for num in list_of_numbers:\n        if num > 0:\n            print(num)\n\n\nprint_positive_numbers([2, 4, 6, 8])"
    },
    {
      "rank": 71,
      "score": 8.144125099485041,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number < 0:\n            raise ValueError(\"Negative number\")\n    print(numbers)\n\nnumbers = [1, 2, -2, 3, -4]\nprint_positive_numbers(numbers)"
    },
    {
      "rank": 72,
      "score": 8.143591138329747,
      "candidate": "# Import the necessary libraries\nfrom sys import argv\n\n# Function that prints the list\ndef print_list(list):\n    for number in list:\n        print number\n\n# If the list is not passed as an argument\nif len(argv)!= 2:\n    print \"Usage: python list_to_string.py list_file\"\n\n# Read the list from the command line arguments\nlist = eval(argv[1])\n\n# Print the list\nprint_list(list)"
    },
    {
      "rank": 73,
      "score": 8.105983444291466,
      "candidate": "# Function to print positive numbers in a list.\ndef print_positive_numbers(list_of_numbers):\n    \"\"\"\n    Print positive numbers in a list.\n\n    :param list_of_numbers: list of numbers\n    :return:\n    \"\"\"\n    for number in list_of_numbers:\n        if number > 0:\n            print(number)\n\n# Test Cases\nlist_of_numbers = [1, -1, 2, 3]\nprint_positive_numbers(list_of_numbers)"
    },
    {
      "rank": 74,
      "score": 8.040197642997851,
      "candidate": "def print_positive_numbers(numbers):\n    \"\"\"\n    >>> print_positive_numbers([1, 2, 3, 4, 5, 6, 7])\n    [1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    \n    for number in numbers:\n        if number > 0:\n            print number\n\nif __name__ == '__main__':\n    print_positive_numbers([1, 2, 3, 4, 5, 6, 7])"
    },
    {
      "rank": 75,
      "score": 7.990432406683839,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number < 0:\n            print(\"Negative number: {}\".format(number))\n        elif number > 0:\n            print(number)\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, -3, 4, -5]\n    print_positive_numbers(numbers)"
    },
    {
      "rank": 76,
      "score": 7.938028884277233,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print number\n\nnumbers = [1, 2, -3, 4, -5, 6]\nprint_positive_numbers(numbers)"
    },
    {
      "rank": 77,
      "score": 7.868947655733293,
      "candidate": "def print_list(list):\n    for i in list:\n        if i > 0:\n            print i\n\n# Test\n# print_list([1,2,3,4,5,6])\n# print_list([6,5,4,3,2,1])\n# print_list([-2,-1,0,1,2])\n# print_list([0,0,0,0,0])\n# print_list([0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])\n# print_list([0,0,0,0,0,0,0,0,0"
    },
    {
      "rank": 78,
      "score": 7.84634113240411,
      "candidate": "def print_positive_numbers_in_list(list):\n    for num in list:\n        if num > 0:\n            print num\n\nprint_positive_numbers_in_list([1, -2, 0, -3, 4, 5])"
    },
    {
      "rank": 79,
      "score": 7.834022619458933,
      "candidate": "def print_positive_numbers(list_of_numbers):\n    \"\"\"\n    @param list_of_numbers: A list of positive integers\n    @return: None\n    \"\"\"\n    for number in list_of_numbers:\n        if number > 0:\n            print number"
    },
    {
      "rank": 80,
      "score": 7.780351419995229,
      "candidate": "# Use the list comprehensions to create a list of all the positive numbers\n# and then print it.\n\nnumbers = [10, 8, 7, 9, 5, 6, 4, 3, 2, 1]\n\nprint(list(filter(lambda x: x > 0, numbers)))"
    },
    {
      "rank": 81,
      "score": 7.738292593776799,
      "candidate": "def print_positive_numbers_in_list(list_of_numbers):\n    \"\"\"\n    Prints numbers in list in a sorted manner.\n    :param list_of_numbers: list of numbers\n    :return:\n    \"\"\"\n    list_of_numbers.sort()\n    for number in list_of_numbers:\n        if number > 0:\n            print(number)"
    },
    {
      "rank": 82,
      "score": 7.7320703513377165,
      "candidate": "#!/usr/bin/env python\n\n# Copyright 2017 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ndef print_positive_numbers(my_list):\n    \"\"\"Prints the numbers in the list that are positive.\n\n    Args:\n        my_list: the list of numbers to print.\n\n    Returns:\n        None.\n    \"\"\"\n    for number in my_list:\n        if number > 0:\n            print number"
    },
    {
      "rank": 83,
      "score": 7.5819855281879285,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print number,"
    },
    {
      "rank": 84,
      "score": 7.562924366763077,
      "candidate": "def print_pos_num(list):\n    \"\"\"\n    >>> print_pos_num([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(list)):\n        if list[i] < 0:\n            list[i] = 0\n    print(list)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 7.464609382504557,
      "candidate": "def print_list(lst):\n    for i in lst:\n        if i > 0:\n            print(i)\n\nprint_list([1,2,3,4,5,6,7,8,9])"
    },
    {
      "rank": 86,
      "score": 7.4506599871439985,
      "candidate": "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print number\n\nnumbers = [1, 2, 3, -1, -2, -3]\nprint_positive_numbers(numbers)\n\n\"\"\"\nInput:\nnumbers = [1, 2, 3, -1, -2, -3]\n\nOutput:\n1\n2\n3\n-1\n-2\n-3\n\"\"\""
    },
    {
      "rank": 87,
      "score": 7.134571892399572,
      "candidate": "def print_positive_numbers_in_list(list):\n    \"\"\"\n    Prints numbers in the list, which are positive.\n    \"\"\"\n    for number in list:\n        if number > 0:\n            print(number)\n\nprint_positive_numbers_in_list([-2, 1, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def print_positive_numbers(lst):\n    \"\"\"\n    Args:\n        lst: list\n    Returns:\n        None\n    \"\"\"\n    for i in lst:\n        if i < 0:\n            print \"Negative number \", i\n    print \"List contains \", len(lst), \"positive numbers\"\n\nif __name__ == \"__main__\":\n    print_positive_numbers([-1,0,1,3,4])"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "# Example\n# >>> print_positive_in_list(range(1,10))\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef print_positive_in_list(numbers):\n    return numbers[::-1] if numbers else numbers\n\nif __name__ == '__main__':\n    numbers = print_positive_in_list(range(1,10))\n    print(numbers)"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# import the python module\nimport sys\n\n\n# write the function\ndef print_positive_numbers(my_list):\n    \"\"\"\n    Write a function to print positive numbers in a list.\n\n    :param my_list: The list to be printed.\n    :type my_list: list\n    :return: None\n    \"\"\"\n\n    for item in my_list:\n        if item > 0:\n            print(item)\n\n\n# call the function\nprint_positive_numbers([1, 2, -3, 4, 5])\n\n# print the result\n# [1, 2, 3, 4, 5]"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "# TODO:\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times the function has been called.\n# - Use a global variable to track the number of times"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def print_positive_numbers(list):\n    for i in list:\n        if i < 0:\n            return False\n    return True\n\nprint_positive_numbers([1, 2, 3, 4, 5])\nprint_positive_numbers([-1, -2, -3, -4, -5])\nprint_positive_numbers([1, -1, -2, -3, -4, -5])"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "import unittest\n\n\ndef print_positive_numbers(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: list\n    \"\"\"\n    for number in list_of_numbers:\n        if number < 0:\n            break\n        print(number)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        list_of_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n        print_positive_numbers(list_of_numbers)\n        self.assertEqual(True, True)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def print_positive_numbers(list_of_numbers):\n    \"\"\"\n    Write a function that prints all the positive numbers in the list.\n\n    Arguments:\n    list_of_numbers -- a list of numbers\n\n    Returns:\n    A string with the positive numbers in the list.\n\n    Example:\n    >>> print_positive_numbers([3, 4, 5, 6, 7])\n    3 4 5 6 7\n    \"\"\"\n\n    for number in list_of_numbers:\n        if number > 0:\n            print number"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "# YOUR CODE HERE\n#\n# To test your code, run the following command from a python command prompt:\n#\n# python test_your_code.py\n#\n# There is a test function called `test_list_sorting` that will run your code\n# and compare your output to the expected output.\n#\n# Note: the input list will be given as a string.  So if you want to run this\n# code on its own, I would suggest the following:\n#\n# In [1]: print list_sorting([1, 3, 2, 5, 4])\n# [1, 2, 3, 4, 5]\n#\n# Note: this code will not work on Python 3.\n\ndef list_sorting(lst):\n    return sorted(lst)\n\ntest_list_sorting = \"\"\"\n# YOUR CODE HERE\n#\n# To test your code, run the following command from a python command prompt:\n#\n# python test_your_code.py\n#\n# There is a test function called `test_list_sorting` that will run your code\n# and compare your output to the expected output.\n#\n# Note: the input list will be given as a string.  So if you want to run this\n# code on its own, I would suggest the following:\n#\n# In [1]: print list_sorting([1, 3, 2, 5, 4])\n# [1, 2, 3, 4, 5]\n#\n# Note: this code will not work on Python 3.\n\"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# +++your code here+++\n# Write functions and modify main() to call them\n\ndef positive_numbers(lst):\n    \"\"\"\n    Prints the list of numbers which are positive.\n    \"\"\"\n    for x in lst:\n        if x > 0:\n            print x\n\n\ndef negative_numbers(lst):\n    \"\"\"\n    Prints the list of numbers which are negative.\n    \"\"\"\n    for x in lst:\n        if x < 0:\n            print x\n\n\ndef even_numbers(lst):\n    \"\"\"\n    Prints the list of numbers which are even.\n    \"\"\"\n    for x in lst:\n        if x % 2 == 0:\n            print x\n\n\ndef odd_numbers(lst):\n    \"\"\"\n    Prints the list of numbers which are odd.\n    \"\"\"\n    for x in lst:\n        if x % 2!= 0:\n            print x\n\n\ndef main():\n    # This basic command line argument parsing code is provided.\n    # Add code to call your functions below.\n\n    # Make sure you replace \"assert\" with \"#assert\" in the following lines\n    # if you need to test your assertions.\n    # YOUR CODE HERE...\n    lst = [1, -2, 4, 6, 7, -8, 9, 0]\n    assert positive_numbers(lst)\n    assert negative_numbers(lst)\n    assert even_numbers(lst)\n    assert odd_numbers(lst)\n\n    print \"All tests passed!\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# write your code here\n\ndef positive_numbers_in_list(lst):\n    for x in lst:\n        if x < 0:\n            return False\n    return True\n\n# your code goes here\n\nif __name__ == \"__main__\":\n    print(positive_numbers_in_list([-1, -2, -3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# define a list of positive numbers to be printed\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n\n# define a list to store the output\nprint_list = []\n\n# call the function\nprint_list = print_list_positive(numbers)\n\n# print the list\nprint_list"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def print_pos_nums(list_of_nums):\n    \"\"\"\n    Print all the positive numbers in the list.\n\n    Input:\n        list_of_nums: a list of positive integers.\n\n    Output:\n        Prints all the numbers in the list that are positive.\n\n    Example:\n        >>> print_pos_nums([1, 3, 4, 5, 6, 7])\n        [1, 3, 4, 5, 6, 7]\n    \"\"\"\n    for num in list_of_nums:\n        if num > 0:\n            print num\n\n\n# Test Cases\n\n# Test 1:\ntest1 = [1, 3, 4, 5, 6, 7]\nprint_pos_nums(test1)\n\n# Test 2:\ntest2 = [-1, 0, 1, 3, 4, 5, 6, 7]\nprint_pos_nums(test2)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# The solution is:\n#\n# 1. Sort the list.\n# 2. Find the index of the first positive number.\n# 3. Find the index of the first negative number.\n# 4. Print the first positive number.\n# 5. Print the first negative number.\n# 6. Print the rest of the numbers.\n\ndef print_list(lst):\n    # Sort the list\n    lst = sorted(lst)\n\n    # Find the index of the first positive number\n    pos_index = find_first_pos_index(lst)\n\n    # Find the index of the first negative number\n    neg_index = find_first_neg_index(lst, pos_index)\n\n    # Print the first positive number\n    print(lst[pos_index])\n\n    # Print the first negative number\n    print(lst[neg_index])\n\n    # Print the rest of the numbers\n    for i in range(pos_index + 1, len(lst)):\n        print(lst[i])\n\ndef find_first_pos_index(lst):\n    pos_index = 0\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            pos_index = i\n            break\n    return pos_index\n\ndef find_first_neg_index(lst, pos_index):\n    neg_index = pos_index + 1\n    for i in range(pos_index + 1, len(lst)):\n        if lst[i] < 0:\n            neg_index = i\n            break\n    return neg_index\n\n# Input: [2, -5, 4, 2, -2, 5, 2, -1, -4]\n# Output:\n# 2\n# -5\n# 4\n# 2\n# -2\n# 5\n# 2\n# -1\n# -4\n\n# Input: [2, -5, 4, 2, -2, 5, 2, -1, -4]\n# Output:\n# 2\n# -5\n# 4\n# 2\n# -2\n# 5\n# 2\n# -1\n# -4\n\nprint_list([2, -5, 4, 2, -"
    }
  ]
}