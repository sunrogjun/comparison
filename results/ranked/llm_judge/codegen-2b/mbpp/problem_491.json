{
  "timestamp": "2025-09-14T21:00:51.198735",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 491,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\nprint remainder(5, 3)\nprint remainder(7, 5)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def remainder(a,b):\n    return a % b\n\ndef main():\n    print remainder(4, 2)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def remainder(num1, num2):\n    \"\"\"\n    Find the remainder of two numbers.\n    \"\"\"\n    return num1 - (num1/num2)*num2\n\n\nif __name__ == \"__main__\":\n    num1 = 100\n    num2 = 20\n    print(remainder(num1, num2))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def rem(x, y):\n    \"\"\"\n    x, y: two numbers\n    return: remainder of x and y\n    \"\"\"\n    return x % y"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def remainder(x, y):\n    return x % y\n\n# Your code here\n\nprint remainder(0, 0)\nprint remainder(0, 1)\nprint remainder(0, 2)\nprint remainder(1, 2)\nprint remainder(3, 2)\nprint remainder(4, 2)\nprint remainder(5, 2)\nprint remainder(6, 2)\nprint remainder(7, 2)\nprint remainder(8, 2)\nprint remainder(9, 2)\nprint remainder(10, 2)\nprint remainder(11, 2)\nprint remainder(12, 2)\nprint remainder(13, 2)\nprint remainder(14, 2)\nprint remainder(15, 2)\nprint remainder(16, 2)\nprint remainder(17, 2)\nprint remainder(18, 2)\nprint remainder(19, 2)\nprint remainder(20, 2)\nprint remainder(21, 2)\nprint remainder(22, 2)\nprint remainder(23, 2)\nprint remainder(24, 2)\nprint remainder(25, 2)\nprint remainder(26, 2)\nprint remainder(27, 2)\nprint remainder(28, 2)\nprint remainder(29, 2)\nprint remainder(30, 2)\nprint remainder(31, 2)\nprint remainder(32, 2)\nprint remainder(33, 2)\nprint remainder(34, 2)\nprint remainder(35, 2)\nprint remainder(36, 2)\nprint remainder(37, 2)\nprint remainder(38, 2)\nprint remainder(39, 2)\nprint remainder(40, 2)\nprint remainder(41, 2)\nprint remainder(42, 2)\nprint remainder(43, 2)\nprint remainder(44, 2)\nprint remainder(45, 2)\nprint remainder(46, 2)\nprint remainder(47, 2)\nprint remainder(48, 2)\nprint remainder(49, 2)\nprint remainder(50, 2)\nprint remainder(51, 2)\nprint remainder(52, 2)\nprint remainder(53, 2)\nprint remainder(54, 2)\nprint remainder(55, 2)\nprint remainder(56, 2)\nprint remainder(57, 2)\nprint remainder(58, 2)\nprint remainder(59, 2)\nprint remainder"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_remainder(x, y):\n    \"\"\"\n    Find remainder of x and y.\n    \"\"\"\n    return x - y\n\nprint find_remainder(1, 2)\nprint find_remainder(1, 3)\nprint find_remainder(1, 4)\nprint find_remainder(1, 5)\nprint find_remainder(1, 6)\nprint find_remainder(1, 7)\nprint find_remainder(1, 8)\nprint find_remainder(1, 9)\nprint find_remainder(1, 10)\nprint find_remainder(1, 11)\nprint find_remainder(1, 12)\nprint find_remainder(1, 13)\nprint find_remainder(1, 14)\nprint find_remainder(1, 15)\nprint find_remainder(1, 16)\nprint find_remainder(1, 17)\nprint find_remainder(1, 18)\nprint find_remainder(1, 19)\nprint find_remainder(1, 20)\nprint find_remainder(1, 21)\nprint find_remainder(1, 22)\nprint find_remainder(1, 23)\nprint find_remainder(1, 24)\nprint find_remainder(1, 25)\nprint find_remainder(1, 26)\nprint find_remainder(1, 27)\nprint find_remainder(1, 28)\nprint find_remainder(1, 29)\nprint find_remainder(1, 30)\nprint find_remainder(1, 31)\nprint find_remainder(1, 32)\nprint find_remainder(1, 33)\nprint find_remainder(1, 34)\nprint find_remainder(1, 35)\nprint find_remainder(1, 36)\nprint find_remainder(1, 37)\nprint find_remainder(1, 38)\nprint find_remainder(1, 39)\nprint find_remainder(1, 40)\nprint find_remainder(1,"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def remainder(num1, num2):\n    \"\"\"\n    >>> remainder(5, 6)\n    1\n    >>> remainder(2, 3)\n    1\n    >>> remainder(10, 12)\n    2\n    >>> remainder(9, 10)\n    0\n    >>> remainder(6, 7)\n    1\n    >>> remainder(8, 9)\n    -1\n    \"\"\"\n    if num1 == num2:\n        return 0\n    if num2 > num1:\n        return num1 - num2\n    else:\n        return num1 - num2 - 1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_remainder(x, y):\n    return x % y\n\nprint(find_remainder(1, 2))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def remainder_two(a, b):\n    \"\"\"\n    a: integer\n    b: integer\n    return: integer\n    \"\"\"\n    return (a % b + b) % b\n\nif __name__ == '__main__':\n    assert remainder_two(0, 1) == 0\n    assert remainder_two(0, 0) == 0\n    assert remainder_two(1, 1) == 0\n    assert remainder_two(1, 0) == 1\n    assert remainder_two(2, 2) == 0\n    assert remainder_two(3, 2) == 1\n    assert remainder_two(4, 2) == 1\n    assert remainder_two(5, 2) == 1\n    assert remainder_two(6, 2) == 1\n    assert remainder_two(7, 2) == 1\n    assert remainder_two(8, 2) == 1\n    assert remainder_two(9, 2) == 1\n    assert remainder_two(10, 2) == 1\n    assert remainder_two(11, 2) == 1\n    assert remainder_two(12, 2) == 1\n    assert remainder_two(13, 2) == 1\n    assert remainder_two(14, 2) == 1\n    assert remainder_two(15, 2) == 1\n    assert remainder_two(16, 2) == 1\n    assert remainder_two(17, 2) == 1\n    assert remainder_two(18, 2) == 1\n    assert remainder_two(19, 2) == 1\n    assert remainder_two(20, 2) == 1\n    assert remainder_two(21, 2) == 1\n    assert remainder_two(22, 2) == 1\n    assert remainder_two(23, 2) == 1\n    assert remainder_two(24, 2) == 1\n    assert remainder_two(25, 2) == 1\n    assert remainder_two(26, 2) == 1\n    assert remainder_two(27, 2) == 1\n    assert remainder_two(28, 2) == 1\n    assert remainder_two(29, 2) == 1\n    assert remainder_two(30, 2) == 1\n    assert remainder_two(31, 2) == 1\n    assert remainder_two(32, 2) == 1"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def remainder_of_two(x):\n    y = x % 2\n    if y == 0:\n        return x\n    else:\n        return remainder_of_two(y)\n\nprint remainder_of_two(6)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def remainder(a,b):\n    return a%b\n\na = 2\nb = 4\n\nprint remainder(a,b)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def rem(x, y):\n    \"\"\"\n    x is a number and y is a number\n    returns the remainder of x / y\n    \"\"\"\n    return x % y\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print(rem(2, 3))\n    print(rem(7, 3))\n    print(rem(7, 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def remainder(a, b):\n    if a < b:\n        return -remainder(-a, b)\n    elif a == b:\n        return 0\n    else:\n        return a % b\n\nprint remainder(10, 8)\nprint remainder(10, 3)\nprint remainder(10, 5)\nprint remainder(10, 7)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def remainder(x,y):\n    return x - y * x / y\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    x = 10\n    y = 5\n    print(remainder(x,y))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def remainder(x, y):\n    return x - y"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def remainder(a, b):\n    return a - b * (a / b)\n\nif __name__ == \"__main__\":\n    print remainder(3, 2)\n    print remainder(10, 4)\n    print remainder(20, 10)\n    print remainder(100, 80)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\nprint remainder(0, 1)\nprint remainder(1, 1)\nprint remainder(2, 3)\nprint remainder(3, 5)\nprint remainder(3, 0)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def remainder(x,y):\n    return x%y\n\ndef main():\n    x = 5\n    y = 10\n    print(remainder(x,y))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    Write a function to find remainder of two numbers.\n\n    Arguments:\n    a - First number\n    b - Second number\n\n    Returns:\n    Remainder of two numbers\n    \"\"\"\n    if b == 0:\n        return a\n\n    return a % b\n\nprint(remainder(3, 0))\nprint(remainder(3, 2))\nprint(remainder(2, 2))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def rem(x, y):\n    return x - y * (y // x)\n\nprint(rem(10, 5))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def find_remainder(a, b):\n    return a % b\n\nprint(find_remainder(5, 2))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def remainder(x, y):\n    return x - y"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\nprint(remainder(5, 3))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def remainder(a,b):\n    return a % b\n\ndef main():\n    #a = int(input())\n    #b = int(input())\n    a = int(input().strip())\n    b = int(input().strip())\n    print(remainder(a,b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def find_remainder(x, y):\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    return x % y\n\n\n\ndef main():\n    print find_remainder(10, 20)\n    print find_remainder(-10, -20)\n    print find_remainder(10, -20)\n    print find_remainder(-10, 20)\n    print find_remainder(20, -10)\n    print find_remainder(-10, -10)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/solution-for-the-quiz\n# https://www.hackerrank.com/contests/challenge-in-python/challenges/solution-for-the-quiz\n\n# Function to find remainder of two numbers\ndef find_remainder(x, y):\n    return x % y\n\n# Driver program to test above function\nx = int(input())\ny = int(input())\nprint(find_remainder(x, y))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "#  SUBROUTINE\ndef remainder_2(x,y):\n    return x - y\n\n#  MAIN\ndef main():\n    x = 5\n    y = 2\n    print(remainder_2(x,y))\n\n#  MAIN\nmain()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "#\n# The function should be named remainder.\n#\ndef remainder(a, b):\n    if a % b == 0:\n        return a\n    return a % b"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\nprint(remainder(100, 10))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def remainder(n1, n2):\n    \"\"\"\n    Input: n1 and n2 are the two numbers to be divided.\n    Output: the remainder of n1/n2\n    \"\"\"\n    return n1 % n2\n\ndef test():\n    assert remainder(3, 2) == 1\n    assert remainder(3, 3) == 0\n    assert remainder(3, 4) == 1\n    assert remainder(3, 5) == 2\n    assert remainder(3, 6) == 1\n    assert remainder(3, 7) == 2\n    assert remainder(3, 8) == 1\n    assert remainder(3, 9) == 2\n    assert remainder(3, 10) == 1\n    assert remainder(3, 11) == 2\n    assert remainder(3, 12) == 1\n    assert remainder(3, 13) == 2\n    assert remainder(3, 14) == 1\n    assert remainder(3, 15) == 2\n    assert remainder(3, 16) == 1\n    assert remainder(3, 17) == 2\n    assert remainder(3, 18) == 1\n    assert remainder(3, 19) == 2\n    assert remainder(3, 20) == 1\n    assert remainder(3, 21) == 2\n    assert remainder(3, 22) == 1\n    assert remainder(3, 23) == 2\n    assert remainder(3, 24) == 1\n    assert remainder(3, 25) == 2\n    assert remainder(3, 26) == 1\n    assert remainder(3, 27) == 2\n    assert remainder(3, 28) == 1\n    assert remainder(3, 29) == 2\n    assert remainder(3, 30) == 1\n    assert remainder(3, 31) == 2\n    assert remainder(3, 32) == 1\n    assert remainder(3, 33) == 2\n    assert remainder(3, 34) == 1\n    assert remainder(3, 35) == 2\n    assert remainder(3, 36) == 1\n    assert remainder(3, 37) == 2\n    assert remainder(3, 38) == 1\n    assert remainder(3, 39) == 2\n    assert remainder(3, 40) == 1\n    assert remainder(3, 41) == 2\n    assert remainder(3, 42) == 1\n    assert"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def remainder_two(a, b):\n    return (a % b) % b\n\n# Run Tests\nprint(remainder_two(3, 5))\nprint(remainder_two(3, 10))\nprint(remainder_two(5, 10))\nprint(remainder_two(5, 15))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def remainder(a, b):\n    return (a-b) % b\n\nprint remainder(5, 4)"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport time\nimport math\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    numbers = []\n    for i in xrange(0, int(sys.argv[1])):\n        numbers.append(int(sys.argv[2]))\n\n    total = 0\n    for i in xrange(0, len(numbers)):\n        total += numbers[i]\n\n    print total % 2\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    main()\n    elapsed = time.time() - start_time\n    print \"Runtime: %.2f seconds\" % elapsed"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def find_remainder(n1, n2):\n    \"\"\"\n    n1, n2 - two numbers to be divided\n    return - remainder of division\n    \"\"\"\n\n    if n2 == 0:\n        return n1\n\n    return n1 % n2\n\ndef main():\n    n1 = 12345\n    n2 = 67890\n\n    print(find_remainder(n1, n2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    a, b are two numbers\n    Returns remainder of a/b\n    \"\"\"\n    return a % b\n\ndef test_remainder():\n    assert remainder(3, 2) == 1\n    assert remainder(3, 1) == 2\n    assert remainder(1, 2) == 0\n    assert remainder(2, 2) == 0\n    assert remainder(5, 4) == 1\n    assert remainder(3, 4) == 1\n    assert remainder(6, 4) == 1\n    assert remainder(9, 4) == 1\n    assert remainder(9, 6) == 1\n    assert remainder(9, 9) == 0\n    assert remainder(9, 10) == 0\n    assert remainder(9, 11) == 0\n    assert remainder(9, 12) == 0\n    assert remainder(9, 13) == 0\n    assert remainder(9, 14) == 0\n    assert remainder(9, 15) == 0\n    assert remainder(9, 16) == 0\n    assert remainder(9, 17) == 0\n    assert remainder(9, 18) == 0\n    assert remainder(9, 19) == 0\n    assert remainder(9, 20) == 0\n    assert remainder(9, 21) == 0\n    assert remainder(9, 22) == 0\n    assert remainder(9, 23) == 0\n    assert remainder(9, 24) == 0\n    assert remainder(9, 25) == 0\n    assert remainder(9, 26) == 0\n    assert remainder(9, 27) == 0\n    assert remainder(9, 28) == 0\n    assert remainder(9, 29) == 0\n    assert remainder(9, 30) == 0\n    assert remainder(9, 31) == 0\n    assert remainder(9, 32) == 0\n    assert remainder(9, 33) == 0\n    assert remainder(9, 34) == 0\n    assert remainder(9, 35) == 0\n    assert remainder(9, 36) == 0\n    assert remainder(9, 37) == 0\n    assert remainder(9, 38) == 0\n    assert remainder(9, 39) == 0\n    assert remainder(9, 40) == 0\n    assert remainder(9, 41) == 0\n    assert remainder("
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "def remainder_of_two(x, y):\n    \"\"\"\n    Write a python function to find remainder of two numbers.\n    \"\"\"\n    return x - y\n\nif __name__ == '__main__':\n    print remainder_of_two(10, 5)"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "#\n# @begin:standard\n# @formatter:off\n# @formatter:off\n\ndef remainder(a, b):\n    \"\"\"\n    @brief:\n    @return:\n    \"\"\"\n    # @formatter:on\n    # @begin:function\n    def divide(a, b):\n        return (a / b) % b\n    # @end:function\n    # @formatter:on\n    # @begin:function\n    def remainder(a, b):\n        return (a - divide(a, b) * b)\n    # @end:function\n    return remainder(a, b)\n\n# @formatter:off\n# @formatter:on\ndef main():\n    \"\"\"\n    @brief:\n    @return:\n    \"\"\"\n    # @formatter:off\n    a = 2\n    b = 3\n    print remainder(a, b)\n    # @formatter:on\n    # @formatter:off\n    a = 2\n    b = 3\n    print remainder(a, b)\n    # @formatter:on\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "def remainder(a, b):\n    '''\n    a, b: two numbers\n    return: remainder of a/b\n    '''\n    return a % b\n\n\n# testing\nprint remainder(10, 4)"
    },
    {
      "rank": 39,
      "score": 9.0,
      "candidate": "def find_remainder(a, b):\n    \"\"\"\n    >>> find_remainder(5, 10)\n    2\n    >>> find_remainder(3, 4)\n    1\n    >>> find_remainder(10, 10)\n    0\n    >>> find_remainder(10, -10)\n    10\n    \"\"\"\n    return a % b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    >>> remainder(10, 6)\n    2\n    >>> remainder(10, 5)\n    3\n    >>> remainder(10, 8)\n    2\n    >>> remainder(10, 0)\n    10\n    >>> remainder(10, -8)\n    -2\n    >>> remainder(10, -5)\n    3\n    \"\"\"\n    if a >= b:\n        return a % b\n    else:\n        return b - (a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "def remainder_two(a,b):\n    \"\"\"\n    Function to find the remainder of two numbers.\n    \"\"\"\n    return a % b\n\ndef main():\n    print remainder_two(2,3)\n    print remainder_two(1,2)\n    print remainder_two(5,7)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "def remainder(a, b):\n    return a - b if a % b == 0 else a\n\na = input('Enter first number: ')\nb = input('Enter second number: ')\nprint(remainder(a, b))"
    },
    {
      "rank": 43,
      "score": 9.0,
      "candidate": "def remainder(a,b):\n    return a%b\n\n#Test cases\nassert remainder(15,7) == 2\nassert remainder(10,5) == 0\nassert remainder(13,7) == 5\nassert remainder(3,1) == 3\nassert remainder(5,4) == 1\nassert remainder(8,7) == 1"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    Input:\n    a = a number\n    b = b number\n    Output:\n    remainder = a mod b\n    \"\"\"\n    return a % b\n\n\"\"\"\nCheck if a number is prime or not.\n\"\"\"\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\"\"\"\nCheck if a number is divisible by a given number.\n\"\"\"\ndef is_divisible(n, d):\n    return n % d == 0\n\n\"\"\"\nCheck if a number is divisible by all numbers in a given list.\n\"\"\"\ndef is_divisible_by(n, l):\n    for d in l:\n        if not is_divisible(n, d):\n            return False\n    return True\n\n\"\"\"\nWrite a function to find the largest prime factor of a given number.\n\"\"\"\ndef largest_prime_factor(n):\n    if n < 2:\n        return 1\n    for d in range(2, n):\n        if is_prime(d):\n            while n % d == 0:\n                n /= d\n            if n == 1:\n                return d\n    return n\n\n\"\"\"\nWrite a function to find all the factors of a given number.\n\"\"\"\ndef factors(n):\n    l = []\n    for i in range(2, n):\n        if is_prime(i):\n            l.append(i)\n        if is_divisible_by(n, l):\n            l.append(n)\n    return l\n\n\"\"\"\nCheck if a number is a palindrome.\n\"\"\"\ndef is_palindrome(n):\n    s = str(n)\n    return s == s[::-1]\n\n\"\"\"\nWrite a function to find the largest palindrome product.\n\"\"\"\ndef largest_palindrome_product(n):\n    l = []\n    while n > 0:\n        l.append(n)\n        n /= 10\n    l.reverse()\n    return reduce(lambda x, y: x * y, l)\n\n\"\"\""
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def get_remainder(a, b):\n    \"\"\"\n    a, b: two numbers\n    return: remainder of a / b\n    \"\"\"\n    return a % b\n\nif __name__ == '__main__':\n    a = int(input('Enter number 1: '))\n    b = int(input('Enter number 2: '))\n    print('Remainder of {} and {} is {}'.format(a, b, get_remainder(a, b)))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef remainder(a, b):\n    return a % b\n\n# test cases\n\nprint remainder(1, 2)\nprint remainder(5, 2)\nprint remainder(2, 4)\nprint remainder(2, 5)\nprint remainder(2, 7)\nprint remainder(2, 9)\nprint remainder(5, 10)\nprint remainder(5, 15)\nprint remainder(10, 100)\n\n# test cases\n\nprint remainder(5, 0)\nprint remainder(-5, 0)\nprint remainder(0, 5)\nprint remainder(0, -5)\nprint remainder(0, 0)\nprint remainder(1, 1)\nprint remainder(1, 2)\nprint remainder(2, 2)\nprint remainder(2, 3)\nprint remainder(3, 3)\nprint remainder(3, 4)\nprint remainder(4, 4)\nprint remainder(4, 5)\nprint remainder(5, 5)\nprint remainder(5, 6)\nprint remainder(6, 6)\nprint remainder(6, 7)\nprint remainder(7, 7)\nprint remainder(7, 8)\nprint remainder(8, 8)\nprint remainder(8, 9)\nprint remainder(9, 9)\nprint remainder(9, 10)\nprint remainder(10, 10)\nprint remainder(10, 11)\nprint remainder(11, 11)\nprint remainder(11, 12)\nprint remainder(12, 12)\nprint remainder(12, 13)\nprint remainder(13, 13)\nprint remainder(13, 14)\nprint remainder(14, 14)\nprint remainder(14, 15)\nprint remainder(15, 15)\nprint remainder(15, 16)\nprint remainder(16, 16)\nprint remainder(16, 17)\nprint remainder(17, 17)\nprint remainder(17, 18)\nprint remainder(18, 18)\nprint remainder(18, 19)\nprint remainder(19, 19)\nprint remainder(19, 20)\nprint remainder(20, 20)\nprint remainder(20, 21)\nprint remainder(21, 21)\nprint remainder(21, 22)\nprint remainder(22, 22)\nprint remainder(22, 23)\nprint remainder(23, 23)\nprint remainder("
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def remainder_of_two(number):\n    \"\"\"\n    number: the number to be divided\n    return: the remainder of two numbers\n    \"\"\"\n    result = number % 2\n    return result\n\nif __name__ == '__main__':\n    print(remainder_of_two(13))\n    print(remainder_of_two(3))\n    print(remainder_of_two(1))\n    print(remainder_of_two(2))\n    print(remainder_of_two(0))\n    print(remainder_of_two(-2))\n    print(remainder_of_two(-3))\n    print(remainder_of_two(-1))\n    print(remainder_of_two(0))\n    print(remainder_of_two(5))\n    print(remainder_of_two(10))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    a and b are two numbers.\n    Write a function called remainder that takes two numbers as arguments\n    and returns the remainder.\n    \"\"\"\n    return a % b"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_remainder(a,b):\n    \"\"\"\n    a,b - two numbers\n    return -1 if b is not divisible by a\n    else return the remainder\n    \"\"\"\n    return (b % a)\n\ndef test_find_remainder():\n    assert find_remainder(5,2) == 1\n    assert find_remainder(5,3) == 2\n    assert find_remainder(5,4) == 0\n\n#This function is good practice\n#You should write a function that returns True if a is a palindrome\n#and False otherwise\ndef is_palindrome(a):\n    \"\"\"\n    a - a string to check\n    return True if a is a palindrome\n    else return False\n    \"\"\"\n    a_length = len(a)\n    if a_length == 0:\n        return True\n    if a[0] == a[a_length - 1]:\n        return True\n    else:\n        return False\n\ndef test_is_palindrome():\n    assert is_palindrome('A man, a plan, a canal: Panama')\n    assert is_palindrome('race a car')\n    assert not is_palindrome('race a car')\n\n#This function is good practice\n#You should write a function that returns True if a is a palindrome\n#and False otherwise\ndef is_palindrome_string(a):\n    \"\"\"\n    a - a string to check\n    return True if a is a palindrome\n    else return False\n    \"\"\"\n    a_length = len(a)\n    if a_length == 0:\n        return True\n    if a[0] == a[a_length - 1]:\n        return True\n    else:\n        return False\n\ndef test_is_palindrome_string():\n    assert is_palindrome_string('A man, a plan, a canal: Panama')\n    assert is_palindrome_string('race a car')\n    assert not is_palindrome_string('race a car')\n\n#This function is good practice\n#You should write a function that returns True if a is a palindrome\n#and False otherwise\ndef is_pal"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def remainder_of_two(x):\n    \"\"\"\n    Find remainder of two numbers.\n    Input: x = a number.\n    Output: remainder of two numbers.\n    \"\"\"\n    if x % 2 == 0:\n        return x\n    else:\n        return x - 1\n\n# Your code here"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\ndef main():\n    a = input()\n    b = input()\n    print remainder(a, b)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def remainder(x, y):\n    \"\"\"\n    x = number to divide\n    y = number to divide by\n    \"\"\"\n    return x - (x/y) * y\n\n\"\"\"\nTest cases\n\"\"\"\nx = 20\ny = 5\nprint(remainder(x, y))\n\nx = 20\ny = 10\nprint(remainder(x, y))\n\nx = 10\ny = 5\nprint(remainder(x, y))\n\nx = 10\ny = 10\nprint(remainder(x, y))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def rem_of_two(x, y):\n    return x - y\n\nprint rem_of_two(3, 4)\nprint rem_of_two(7, 5)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def remainder(a,b):\n    '''\n    :param a: First number\n    :param b: Second number\n    :return: Remainder of two numbers\n    '''\n    return a % b\n\nprint(remainder(12,15))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_remainder(x,y):\n    if x > y:\n        return 0\n    else:\n        return x % y\n\ndef main():\n    num1 = input()\n    num2 = input()\n    result = find_remainder(num1,num2)\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    Find remainder of two numbers.\n    \"\"\"\n    if a % b == 0:\n        return a\n    else:\n        return a - (a / b) * b\n\n\nif __name__ == \"__main__\":\n    print(remainder(5, 3))\n    print(remainder(10, 3))\n    print(remainder(100, 3))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def remainder(a,b):\n    \"\"\"\n    a = a/b\n    \"\"\"\n    return a % b\n\n# Testing\n\nprint remainder(5, 2)\nprint remainder(10, 3)\nprint remainder(5, 3)\nprint remainder(10, 5)\nprint remainder(15, 10)\nprint remainder(5, 0)\nprint remainder(10, 0)\nprint remainder(0, 0)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def remainder(num1, num2):\n    \"\"\"\n    Remainder of two numbers.\n    \"\"\"\n    return num1 % num2\n\n\ndef test_remainder(num1, num2):\n    \"\"\"\n    Test remainder function with different inputs.\n    \"\"\"\n    print(remainder(num1, num2))\n\nif __name__ == '__main__':\n    test_remainder(5, 2)\n    test_remainder(5, -2)\n    test_remainder(-5, 2)\n    test_remainder(-5, -2)\n    test_remainder(5, -2)\n    test_remainder(5, -2)\n    test_remainder(5, -2)\n    test_remainder(5, -2)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def get_remainder(a, b):\n    \"\"\"\n    a: first number\n    b: second number\n    \"\"\"\n    return a % b\n\n\ndef main():\n    \"\"\"\n    a: first number\n    b: second number\n    \"\"\"\n    a = int(input())\n    b = int(input())\n\n    print(get_remainder(a, b))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    if a % b == 0:\n        return 0\n    else:\n        return a % b\n\n\ndef main():\n    \"\"\"\n    main\n    \"\"\"\n    print(remainder(1, 5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def find_remainder(a,b):\n\t\"\"\"\n\tFind the remainder of two numbers.\n\n\tInput:\n\ta, b: integers\n\t\n\tOutput:\n\tremainder: the remainder of two numbers\n\t\"\"\"\n\treturn a % b\n\n\ndef main():\n\t\"\"\"\n\tTest function.\n\t\"\"\"\n\tassert(find_remainder(1,2) == 1)\n\tassert(find_remainder(1,3) == 1)\n\tassert(find_remainder(1,4) == 0)\n\tassert(find_remainder(2,3) == 1)\n\tassert(find_remainder(2,4) == 1)\n\tassert(find_remainder(3,4) == 1)\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    return a - b\n\nprint remainder(2, 4)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def find_rem(a, b):\n    return a - b\n\n# Complete the function below.\ndef find_rem(a, b):\n    if a % b:\n        return a % b\n    else:\n        return a\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(find_rem(a, b))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\nprint(remainder(5, 3))\nprint(remainder(5, 4))\nprint(remainder(5, -3))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\nprint(remainder(3, 4))\n#>>> 1\n\nprint(remainder(3, 2))\n#>>> 1\n\nprint(remainder(2, 3))\n#>>> 1\n\nprint(remainder(2, 1))\n#>>> 2\n\nprint(remainder(1, 2))\n#>>> 0\n\nprint(remainder(1, 1))\n#>>> 0"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n# This is a good place to start with the basics.\n# You'll need to use the Python math module and the int type.\n\n# Define a function.\ndef find_remainder(x, y):\n    \"\"\"\n    Return the remainder of x/y.\n    \"\"\"\n    # This is the main code.\n    # You can do some math here.\n    return x % y\n\n\n# Test your function.\n#print find_remainder(9, 3)\n#print find_remainder(5, 3)\n#print find_remainder(5, 5)\n\n# The next line is a good place to test your code.\n#print find_remainder(9, 3) == 1\n#print find_remainder(5, 3) == 2\n#print find_remainder(5, 5) == 0\n\n# Try some other numbers.\n#print find_remainder(10, 2) == 5\n#print find_remainder(10, 3) == 0\n#print find_remainder(5, 5) == 0\n#print find_remainder(9, 9) == 0\n#print find_remainder(5, 4) == 1\n#print find_remainder(5, 0) == 5\n#print find_remainder(10, 0) == 10\n#print find_remainder(0, 10) == 0\n#print find_remainder(0, 0) == 0\n\n# You can also test your code with a simple input.\n#print find_remainder(10, 2) == 5\n#print find_remainder(10, 3) == 0\n#print find_remainder(5, 5) == 0\n#print find_remainder(9, 9) == 0\n#print find_remainder(5, 4) == 1\n#print find_remainder(5, 0) == 5\n#print find_remainder(10, 0) == 10\n#print find_remainder(0, 10) == 0\n#print find_remainder(0, 0) == 0"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# Your function should return the remainder of two numbers.\n# For example, if the numbers are 4 and 7, your function should return 1.\n# If the numbers are 3 and 10, your function should return 2.\n\ndef remainder(a, b):\n    return a % b\n\nprint remainder(4, 2)\nprint remainder(7, 2)\nprint remainder(3, 10)\nprint remainder(10, 10)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def get_remainder(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    return a % b\n\nprint get_remainder(5, 2)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    Return the remainder of a / b\n    \"\"\"\n    return a % b\n\ndef main():\n    \"\"\"\n    Write a program that computes the remainder of two numbers.\n    \"\"\"\n    print(remainder(10, 2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def remainder(a,b):\n    return a%b\n\na = int(input())\nb = int(input())\nprint(remainder(a,b))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    Find remainder of two numbers.\n\n    :param a: First number\n    :param b: Second number\n    :return: Remainder of two numbers\n    \"\"\"\n    return a % b\n\nif __name__ == '__main__':\n    a = 123\n    b = 6\n    print(remainder(a, b))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def remainder(x, y):\n    \"\"\"\n    x, y: integers\n    Return the remainder of x divided by y\n    \"\"\"\n    return x % y\n\nif __name__ == \"__main__\":\n    x, y = input().split()\n    print(remainder(int(x), int(y)))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def remainder(a,b):\n    return a - (b * int(a / b))\n\nprint remainder(3,2)\nprint remainder(3,3)\nprint remainder(3,4)\nprint remainder(3,5)\nprint remainder(3,6)\nprint remainder(3,7)\nprint remainder(3,8)\nprint remainder(3,9)\nprint remainder(3,10)\nprint remainder(3,11)\nprint remainder(3,12)\nprint remainder(3,13)\nprint remainder(3,14)\nprint remainder(3,15)\nprint remainder(3,16)\nprint remainder(3,17)\nprint remainder(3,18)\nprint remainder(3,19)\nprint remainder(3,20)\nprint remainder(3,21)\nprint remainder(3,22)\nprint remainder(3,23)\nprint remainder(3,24)\nprint remainder(3,25)\nprint remainder(3,26)\nprint remainder(3,27)\nprint remainder(3,28)\nprint remainder(3,29)\nprint remainder(3,30)\nprint remainder(3,31)\nprint remainder(3,32)\nprint remainder(3,33)\nprint remainder(3,34)\nprint remainder(3,35)\nprint remainder(3,36)\nprint remainder(3,37)\nprint remainder(3,38)\nprint remainder(3,39)\nprint remainder(3,40)\nprint remainder(3,41)\nprint remainder(3,42)\nprint remainder(3,43)\nprint remainder(3,44)\nprint remainder(3,45)\nprint remainder(3,46)\nprint remainder(3,47)\nprint remainder(3,48)\nprint remainder(3,49)\nprint remainder(3,50)\nprint remainder(3,51)\nprint remainder(3,52)\nprint remainder(3,53)\nprint remainder(3,54)\nprint remainder(3,55)\nprint remainder(3,56)\nprint remainder(3,57)\nprint remainder(3,58)\nprint remainder(3,59)\nprint remainder(3,60)\nprint remainder(3,61)\nprint remainder(3,62)\nprint"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def find_remainder(a, b):\n    \"\"\"\n    Find the remainder of two numbers.\n\n    :param a: the first number\n    :param b: the second number\n    :return: the remainder\n    \"\"\"\n    if a % b == 0:\n        return b\n    else:\n        return find_remainder(b, a % b)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def find_remainder(a, b):\n    return a - b % a\n\n# Test cases\nassert find_remainder(5, 4) == 1\nassert find_remainder(10, 2) == 0\nassert find_remainder(1, 0) == 1\nassert find_remainder(2, 1) == 1\nassert find_remainder(5, 1) == 4\nassert find_remainder(2, 2) == 0\nassert find_remainder(7, 3) == 1\nassert find_remainder(3, 4) == 1\nassert find_remainder(9, 10) == 1\nassert find_remainder(100, 3) == 1"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def find_remainder(a, b):\n    \"\"\"\n    a - first number\n    b - second number\n    \"\"\"\n    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    return a % b\n\nif __name__ == \"__main__\":\n    a = find_remainder(10, 5)\n    b = find_remainder(11, 5)\n    c = find_remainder(11, 6)\n    d = find_remainder(11, 7)\n    print(\"a =\", a)\n    print(\"b =\", b)\n    print(\"c =\", c)\n    print(\"d =\", d)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def remainder(x, y):\n    \"\"\"\n    x = 6\n    y = 4\n    return 3\n    \"\"\"\n    return x % y\n\nprint remainder(6, 4)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def find_remainder(a, b):\n    return a - b\n\n\ndef main():\n    \"\"\"\n    Call this function with two numbers.\n    \"\"\"\n    print(find_remainder(5, 2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def remainder_two(a, b):\n    \"\"\"\n    Return the remainder of two numbers.\n\n    >>> remainder_two(6, 2)\n    2\n    >>> remainder_two(3, 5)\n    2\n    >>> remainder_two(5, 3)\n    1\n    >>> remainder_two(2, 5)\n    0\n    >>> remainder_two(2, 2)\n    0\n    >>> remainder_two(2, 0)\n    2\n    \"\"\"\n    return a % b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def remainder_of_two(num1, num2):\n    '''\n    This function returns remainder of two numbers\n    '''\n    return num1 - num2\n\n\nprint(remainder_of_two(1, 5))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def remainder(x, y):\n    \"\"\"\n    >>> remainder(10, 5)\n    2\n    >>> remainder(3, 4)\n    1\n    >>> remainder(2, 3)\n    1\n    \"\"\"\n    return x % y\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def remainder(x, y):\n    if x > y:\n        return x - y\n    return y - x\n\n\ndef main():\n    n, m = input().split()\n    n, m = [int(n), int(m)]\n    res = remainder(n, m)\n    print(res)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def find_remainder(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    if n1 % n2 == 0:\n        return 0\n    return n1 % n2"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def find_remainder(x, y):\n    return x - y\n\n\nif __name__ == '__main__':\n    x = 3\n    y = 4\n    print(find_remainder(x, y))\n    x = 5\n    y = 6\n    print(find_remainder(x, y))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    Find remainder of two numbers.\n    :param a: First number\n    :param b: Second number\n    :return: Remainder of two numbers\n    \"\"\"\n    return a % b\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a = input()\n    b = input()\n    print(remainder(a, b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\n# test\nassert(remainder(7, 3) == 2)\nassert(remainder(5, 3) == 1)\nassert(remainder(1, 3) == 0)\nassert(remainder(3, 3) == 0)"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def find_remainder(a, b):\n    return a % b\n\n#print find_remainder(10, 3)\n#print find_remainder(4, 2)"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\nprint remainder(5, 2)\nprint remainder(4, 3)\nprint remainder(5, 3)"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def find_remainder(a, b):\n    \"\"\"\n    Find the remainder of two numbers.\n    :param a: First number.\n    :param b: Second number.\n    :return: The remainder of two numbers.\n    \"\"\"\n    return a % b\n\n\nif __name__ == \"__main__\":\n    a = input(\"Enter first number: \")\n    b = input(\"Enter second number: \")\n    print(find_remainder(a, b))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def remainder(x, y):\n    return x % y\n\ndef test_remainder():\n    assert remainder(5, 3) == 2\n    assert remainder(3, 5) == 2\n    assert remainder(3, 3) == 0\n    assert remainder(3, 1) == 2\n    assert remainder(3, -1) == 2\n    assert remainder(-3, 3) == 2\n    assert remainder(-3, -3) == 0\n    assert remainder(-3, -1) == 2\n    assert remainder(-3, 1) == 2\n    assert remainder(-3, -1) == 2\n    assert remainder(-3, 5) == 2\n    assert remainder(-3, -5) == 2\n\ndef main():\n    test_remainder()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def remainder(a, b):\n    \"\"\"\n    Find the remainder of two numbers.\n    \"\"\"\n    return a % b\n\nprint(remainder(5, 3))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def find_remainder(x, y):\n    \"\"\"\n    x: input\n    y: input\n    returns: remainder\n    \"\"\"\n    # the remainder is the number that is between x and y\n    # if x is greater than y, then remainder is x - y\n    # if x is less than y, then remainder is y - x\n    # if x is equal to y, then remainder is 0\n    # x and y can be any integer\n    return x % y\n\ndef main():\n    # test case 1\n    # x = 3\n    # y = 5\n    # expected output: remainder = 2\n    # result = find_remainder(x, y)\n    # print(result)\n\n    # test case 2\n    # x = 4\n    # y = 6\n    # expected output: remainder = 2\n    # result = find_remainder(x, y)\n    # print(result)\n\n    # test case 3\n    # x = 2\n    # y = 4\n    # expected output: remainder = 0\n    # result = find_remainder(x, y)\n    # print(result)\n\n    # test case 4\n    # x = 5\n    # y = 6\n    # expected output: remainder = 2\n    # result = find_remainder(x, y)\n    # print(result)\n\n    # test case 5\n    # x = 2\n    # y = 0\n    # expected output: remainder = 2\n    # result = find_remainder(x, y)\n    # print(result)\n\n    # test case 6\n    # x = 0\n    # y = 2\n    # expected output: remainder = 2\n    # result = find_remainder(x, y)\n    # print(result)\n\n    # test case 7\n    # x = 7\n    # y = 0\n    # expected output: remainder = 7\n    # result = find_remainder(x, y)\n    # print(result)\n\n    # test case 8\n    # x = 5\n    # y = -3\n    # expected output: remainder = 2\n    # result = find_remainder(x, y)\n    # print(result)\n\n    # test"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_remainder(a, b):\n    \"\"\"\n    Find the remainder of two numbers.\n    \"\"\"\n    return a % b\n\n\n# Test Cases\n# a = 2\n# b = 5\n#\n# Test Case 1:\n# a = 3\n# b = 4\n#\n# Test Case 2:\n# a = 5\n# b = 1\n#\n# Test Case 3:\n# a = 7\n# b = -2\n#\n# Test Case 4:\n# a = -5\n# b = -2\n#\n# Test Case 5:\n# a = -4\n# b = -2\n#\n# Test Case 6:\n# a = -3\n# b = -3\n#\n# Test Case 7:\n# a = -1\n# b = -1\n#\n# Test Case 8:\n# a = -5\n# b = 5\n#\n# Test Case 9:\n# a = -5\n# b = -4\n#\n# Test Case 10:\n# a = -4\n# b = -5\n#\n# Test Case 11:\n# a = -1\n# b = -1\n#\n# Test Case 12:\n# a = -5\n# b = -3\n#\n# Test Case 13:\n# a = -1\n# b = -2\n#\n# Test Case 14:\n# a = -1\n# b = -4\n#\n# Test Case 15:\n# a = -1\n# b = -5\n#\n# Test Case 16:\n# a = -3\n# b = -4\n#\n# Test Case 17:\n# a = -3\n# b = -5\n#\n# Test Case 18:\n# a = -4\n# b = -5\n#\n# Test Case 19:\n# a = -4\n# b = -4\n#\n# Test Case 20:\n# a = -4\n# b = -5\n#\n# Test Case 21:\n# a = -5\n# b = -5\n#\n# Test Case 22:\n# a = -5\n# b = -4\n#\n# Test Case 23:\n# a = -5\n# b = -3\n#\n# Test Case 24:\n#"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def find_remainder(a, b):\n    \"\"\"\n    Find the remainder of two numbers.\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    return a - b\n\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_remainder(6, 7) == 1\n    assert find_remainder(6, -7) == 3\n    assert find_remainder(5, 3) == 2\n    assert find_remainder(5, -3) == -2\n    assert find_remainder(9, 2) == 1\n    assert find_remainder(9, -2) == 1\n    assert find_remainder(10, 3) == 1\n    assert find_remainder(10, -3) == 1\n    assert find_remainder(0, -1) == 0\n    assert find_remainder(1, -1) == 1\n    assert find_remainder(2, -1) == 2\n    assert find_remainder(3, -1) == 3\n    assert find_remainder(4, -1) == 4\n    assert find_remainder(5, -1) == 5\n    assert find_remainder(6, -1) == 6\n    assert find_remainder(7, -1) == 7\n    assert find_remainder(8, -1) == 8\n    assert find_remainder(9, -1) == 9\n    assert find_remainder(10, -1) == 10\n    assert find_remainder(11, -1) == 11\n    assert find_remainder(12, -1) == 12\n    assert find_remainder(13, -1) == 13\n    assert find_remainder(14, -1) == 14\n    assert find_remainder(15, -1) == 15\n    assert find_remainder(16, -1) == 16\n    assert find_remainder(17, -1) == 17\n    assert find_remainder(18, -1) =="
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# http://www.geeksforgeeks.org/divide-two-numbers-in-python/\ndef divide(x, y):\n    \"\"\"\n    x, y are integers.\n    Return the remainder of dividing x by y.\n    \"\"\"\n    return x % y\n\n# Your code will be tested after you write your function.\ndef test_divide():\n    assert divide(10, 4) == 2\n    assert divide(9, 4) == 1\n    assert divide(8, 4) == 3\n    assert divide(7, 4) == 1\n    assert divide(6, 4) == 1\n    assert divide(5, 4) == 1\n    assert divide(4, 4) == 0\n    assert divide(3, 4) == 1\n    assert divide(2, 4) == 1\n    assert divide(1, 4) == 0\n    assert divide(0, 4) == 0\n    assert divide(10, 10) == 0\n    assert divide(9, 10) == 1\n    assert divide(8, 10) == 3\n    assert divide(7, 10) == 2\n    assert divide(6, 10) == 1\n    assert divide(5, 10) == 1\n    assert divide(4, 10) == 0\n    assert divide(3, 10) == 1\n    assert divide(2, 10) == 1\n    assert divide(1, 10) == 0\n    assert divide(0, 10) == 0\n    assert divide(10, 10) == 0\n    assert divide(9, 10) == 1\n    assert divide(8, 10) == 3\n    assert divide(7, 10) == 2\n    assert divide(6, 10) == 1\n    assert divide(5, 10) == 1\n    assert divide(4, 10) == 0\n    assert divide(3, 10) == 1\n    assert divide(2, 10) == 1\n    assert divide(1, 10) == 0\n    assert divide(0, 10) == 0\n\n# Your code will be tested after you write your function.\ndef test_divide_using_math():\n    assert math.fmod(10, 4) == 2\n    assert math.fmod(9, 4) == 1\n    assert math.fmod(8, 4"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def remainder(a, b):\n    return a % b\n\n# The following is an alternate implementation, which is not necessary\n# for the purpose of this exercise.\n#\n#def remainder(a, b):\n#    return a - a // b * b\n\nprint(remainder(1, 1))\nprint(remainder(1, 0))\nprint(remainder(1, 2))\nprint(remainder(2, 1))\nprint(remainder(2, 2))\nprint(remainder(2, 3))\nprint(remainder(3, 1))\nprint(remainder(3, 2))\nprint(remainder(3, 3))\nprint(remainder(4, 1))\nprint(remainder(4, 2))\nprint(remainder(4, 3))\nprint(remainder(4, 4))\nprint(remainder(5, 1))\nprint(remainder(5, 2))\nprint(remainder(5, 3))\nprint(remainder(5, 4))\nprint(remainder(5, 5))\nprint(remainder(6, 1))\nprint(remainder(6, 2))\nprint(remainder(6, 3))\nprint(remainder(6, 4))\nprint(remainder(6, 5))\nprint(remainder(6, 6))\nprint(remainder(7, 1))\nprint(remainder(7, 2))\nprint(remainder(7, 3))\nprint(remainder(7, 4))\nprint(remainder(7, 5))\nprint(remainder(7, 6))\nprint(remainder(7, 7))\nprint(remainder(8, 1))\nprint(remainder(8, 2))\nprint(remainder(8, 3))\nprint(remainder(8, 4))\nprint(remainder(8, 5))\nprint(remainder(8, 6))\nprint(remainder(8, 7))\nprint(remainder(8, 8))\nprint(remainder(9, 1))\nprint(remainder(9, 2))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "#%%\ndef find_remainder(a, b):\n    \"\"\"\n    Find the remainder of two numbers.\n\n    Return the remainder of dividing a by b.\n    \"\"\"\n    return a % b\n\n\n#%%\ndef test_find_remainder():\n    assert find_remainder(1, 2) == 1\n    assert find_remainder(2, 2) == 0\n    assert find_remainder(2, -2) == 2\n    assert find_remainder(3, 2) == 1\n    assert find_remainder(10, 2) == -2\n\n\n#%%\nif __name__ == '__main__':\n    test_find_remainder()\n    pass\n    #%%"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def remainder(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if b == 0:\n        return a\n    if a == b:\n        return 0\n    if a > b:\n        return a - b\n    else:\n        return a\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert remainder(2, 1) == 1, \"Test 1\"\n    assert remainder(3, 2) == 1, \"Test 2\"\n    assert remainder(6, 3) == 2, \"Test 3\"\n    assert remainder(3, 4) == 1, \"Test 4\"\n    assert remainder(6, 7) == 1, \"Test 5\"\n    assert remainder(6, 0) == 6, \"Test 6\"\n    assert remainder(0, 1) == 0, \"Test 7\"\n    assert remainder(0, 0) == 0, \"Test 8\"\n    assert remainder(7, 7) == 0, \"Test 9\"\n    assert remainder(7, 3) == 2, \"Test 10\"\n    assert remainder(7, 4) == 1, \"Test 11\"\n    assert remainder(7, 6) == 1, \"Test 12\"\n    assert remainder(7, 7) == 0, \"Test 13\""
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        if dividend == 0:\n            return 0\n        if divisor == 0:\n            return dividend\n        if divisor == 1:\n            return dividend\n        if dividend < 0 and divisor < 0:\n            return -self.divide(-dividend, divisor)\n        if dividend > 0 and divisor < 0:\n            return self.divide(dividend, -divisor)\n        if dividend < 0 and divisor > 0:\n            return -self.divide(-dividend, -divisor)\n        if dividend > 0 and divisor > 0:\n            return self.divide(dividend, divisor)\n        return 0\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.divide(2, 3)\n    print s.divide(5, 3)\n    print s.divide(4, 3)\n    print s.divide(5, 4)\n    print s.divide(5, -3)\n    print s.divide(5, -4)\n    print s.divide(-5, 3)\n    print s.divide(-5, -3)\n    print s.divide(-5, 4)\n    print s.divide(-5, -4)\n    print s.divide(-5, -3)\n    print s.divide(-5, -4)\n    print s.divide(-5, -3)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_remainder_2(x, y):\n    \"\"\"\n    >>> find_remainder_2(10, 5)\n    2\n    >>> find_remainder_2(10, -5)\n    2\n    >>> find_remainder_2(10, 0)\n    0\n    >>> find_remainder_2(10, 15)\n    5\n    >>> find_remainder_2(10, -15)\n    5\n    >>> find_remainder_2(10, -5)\n    5\n    >>> find_remainder_2(10, 0)\n    0\n    \"\"\"\n    return x % y\n\n\ndef test_find_remainder_2():\n    assert find_remainder_2(10, 5) == 2\n    assert find_remainder_2(10, -5) == 2\n    assert find_remainder_2(10, 0) == 0\n    assert find_remainder_2(10, 15) == 5\n    assert find_remainder_2(10, -15) == 5\n    assert find_remainder_2(10, -5) == 5\n    assert find_remainder_2(10, 0) == 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    }
  ]
}