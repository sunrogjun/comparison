{
  "timestamp": "2025-09-14T19:55:55.409341",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 345,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def angle_3(a, b):\n    return (a + b + 90) % 180\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        a = int(input())\n        b = int(input())\n        print(angle_3(a, b))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/third-angle-of-triangle/\n\n\nclass Solution(object):\n    def third_angle(self, A, B, C):\n        \"\"\"\n        :type A: float\n        :type B: float\n        :type C: float\n        :rtype: float\n        \"\"\"\n        if A + B < C:\n            return self.third_angle(C, A, B)\n        if A + C < B:\n            return self.third_angle(B, A, C)\n        if B + C < A:\n            return self.third_angle(A, B, C)\n        return B * B - A * A + C * C"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def angle3(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return (((a + b + c) / 2) * 180) % 360\n\nif __name__ == '__main__':\n    assert angle3(4, 2, 3) == 60\n    assert angle3(3, 4, 5) == 30\n    assert angle3(3, 5, 4) == 30\n    assert angle3(3, 4, 5) == 30\n    assert angle3(3, 4, 6) == 60\n    assert angle3(3, 4, 7) == 60\n    assert angle3(3, 4, 8) == 60\n    assert angle3(3, 4, 9) == 60\n    assert angle3(3, 4, 10) == 60\n    assert angle3(3, 4, 11) == 60\n    assert angle3(3, 4, 12) == 60\n    assert angle3(3, 4, 13) == 60\n    assert angle3(3, 4, 14) == 60\n    assert angle3(3, 4, 15) == 60\n    assert angle3(3, 4, 16) == 60\n    assert angle3(3, 4, 17) == 60\n    assert angle3(3, 4, 18) == 60\n    assert angle3(3, 4, 19) == 60\n    assert angle3(3, 4, 20) == 60\n    assert angle3(3, 4, 21) == 60\n    assert angle3(3, 4, 22) == 60\n    assert angle3(3, 4, 23) == 60\n    assert angle3(3, 4, 24) == 60\n    assert angle3(3, 4, 25) == 60\n    assert angle3(3, 4, 26) == 60\n    assert angle3(3, 4, 27) == 60\n    assert angle3(3, 4, 28) == 60\n    assert angle3(3, 4, 29) == 60\n    assert angle3(3, 4, 30) == 60\n    assert angle3(3, 4, 31) == 60\n    assert angle3(3, 4, 32) == 60"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def get_angle(a, b, c):\n    return (a + b + c) / 2\n\ndef get_third_angle(a, b, c):\n    return (a + b + c) / 3\n\n\ndef main():\n    test_cases = [\n        [2, 1, 3],\n        [2, 3, 1],\n        [2, 3, 4],\n        [2, 4, 3],\n        [2, 4, 5],\n        [2, 5, 4],\n        [2, 5, 6],\n        [2, 6, 5],\n        [2, 6, 7],\n        [2, 7, 6],\n        [2, 7, 8],\n        [2, 8, 7],\n        [3, 1, 2],\n        [3, 2, 1],\n        [3, 3, 2],\n        [3, 4, 2],\n        [3, 5, 2],\n        [3, 6, 2],\n        [3, 7, 2],\n        [3, 8, 2],\n        [4, 3, 1],\n        [4, 3, 2],\n        [4, 4, 2],\n        [4, 5, 2],\n        [4, 6, 2],\n        [4, 7, 2],\n        [4, 8, 2],\n        [5, 3, 1],\n        [5, 3, 2],\n        [5, 4, 2],\n        [5, 5, 2],\n        [5, 6, 2],\n        [5, 7, 2],\n        [5, 8, 2],\n        [6, 3, 1],\n        [6, 3, 2],\n        [6, 4, 2],\n        [6, 5, 2],\n        [6, 6, 2],\n        [6, 7, 2],\n        [6, 8, 2],\n        [7, 3, 1],\n        [7, 3, 2],\n        [7, 4, 2],\n        [7, 5, 2],\n        [7, 6, 2],\n        [7, 7, 2],\n        [7, 8, 2],\n        [8, 3, 1],\n        [8, 3, 2"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def angle(a,b,c):\n    return a+b+c\n\ndef third_angle(a,b,c):\n    return a+b+c\n\ndef main():\n    a,b,c = map(float,input().split())\n    print(third_angle(a,b,c))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def third_angle(a,b,c):\n    \"\"\"\n    >>> third_angle(45,180,180)\n    90\n    >>> third_angle(45,180,0)\n    45\n    >>> third_angle(45,180,180)\n    0\n    \"\"\"\n    return abs(180-b-a-c) % 360\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Definition for a triangle.\n# class Triangle:\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution:\n    def thirdAngle(self, triangle: 'Triangle') -> float:\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        return triangle.a + triangle.b - triangle.c"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef angle_third(a, b, c):\n    \"\"\"\n    Find the third angle of a triangle.\n\n    :param a: the first angle.\n    :param b: the second angle.\n    :param c: the third angle.\n    :return: the third angle of the triangle.\n    \"\"\"\n\n    if a < 0 or a > 360 or b < 0 or b > 360 or c < 0 or c > 360:\n        return None\n\n    if a + b > c:\n        return a + b - c\n    else:\n        return a + b + c\n\n\nif __name__ == \"__main__\":\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert angle_third(90, 45, 135) == 135\n    assert"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_third_angle(a, b):\n    \"\"\"\n    a, b: angles of a triangle\n    return: third angle of the triangle\n    \"\"\"\n    return a + b - a - b\n\nif __name__ == \"__main__\":\n    # Test cases\n    a, b = 0, 0\n    assert(find_third_angle(a, b) == 90)\n\n    a, b = 90, 90\n    assert(find_third_angle(a, b) == 180)\n\n    a, b = 90, 45\n    assert(find_third_angle(a, b) == 135)\n\n    a, b = 45, 45\n    assert(find_third_angle(a, b) == 135)\n\n    a, b = 45, 90\n    assert(find_third_angle(a, b) == 90)\n\n    a, b = 0, 45\n    assert(find_third_angle(a, b) == 135)\n\n    a, b = 45, 0\n    assert(find_third_angle(a, b) == 135)\n\n    a, b = 45, 45\n    assert(find_third_angle(a, b) == 90)\n\n    a, b = 45, 90\n    assert(find_third_angle(a, b) == 180)\n\n    a, b = 90, 45\n    assert(find_third_angle(a, b) == 135)\n\n    a, b = 45, 90\n    assert(find_third_angle(a, b) == 90)\n\n    a, b = 90, 90\n    assert(find_third_angle(a, b) == 0)\n\n    a, b = 90, 45\n    assert(find_third_angle(a, b) == 135)\n\n    a, b = 45, 90\n    assert(find_third_angle(a, b) == 135)\n\n    a, b = 45, 45\n    assert(find_third_angle(a, b) == 90)\n\n    a, b = 45, 90\n    assert(find_third_angle(a, b) == 180)\n\n    a, b = 45, 45\n    assert(find_third_angle(a, b) == 135)\n\n    a, b ="
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Calculate the angle of a triangle\ndef triangle_angle(a, b, c):\n    \"\"\"\n    Calculate the angle of a triangle\n    \"\"\"\n    return (a + b + c) / 2.0\n\n# Find the angle of a triangle using the input of the triangle\ndef triangle_angle_1(a, b, c):\n    \"\"\"\n    Calculate the angle of a triangle using the input of the triangle\n    \"\"\"\n    return ((a + b + c) / 2.0) % 360\n\n# Calculate the third angle of a triangle using the input of the triangle\ndef triangle_angle_2(a, b, c):\n    \"\"\"\n    Calculate the third angle of a triangle using the input of the triangle\n    \"\"\"\n    return ((a + b + c) / 2.0) % 180\n\n# Calculate the third angle of a triangle using the input of the triangle\ndef triangle_angle_3(a, b, c):\n    \"\"\"\n    Calculate the third angle of a triangle using the input of the triangle\n    \"\"\"\n    return ((a + b + c) / 2.0) % 180\n\n# Calculate the third angle of a triangle using the input of the triangle\ndef triangle_angle_4(a, b, c):\n    \"\"\"\n    Calculate the third angle of a triangle using the input of the triangle\n    \"\"\"\n    return ((a + b + c) / 2.0) % 180\n\n# Calculate the third angle of a triangle using the input of the triangle\ndef triangle_angle_5(a, b, c):\n    \"\"\"\n    Calculate the third angle of a triangle using the input of the triangle\n    \"\"\"\n    return ((a + b + c) / 2.0) % 180\n\n# Calculate the third angle of a triangle using the input of the triangle\ndef triangle_angle_6(a, b, c):\n    \"\"\"\n    Calculate the third angle of a triangle using the input of the triangle\n    \"\"\"\n    return ((a + b + c) / 2.0) % 180\n\n# Calculate the third angle of a triangle using the input of the triangle\ndef triangle_angle_7(a, b, c):\n    \"\"\"\n    Calcul"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef third_angle(a,b,c):\n    return (a + b + c) / 2\n\nif __name__ == \"__main__\":\n    # test cases\n    # a, b, c = 1, 2, 3\n    # a, b, c = 1, 2, 4\n    a, b, c = 1, 3, 3\n    print third_angle(a, b, c)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/triangle/problem\n\ndef triangle(a, b, c):\n    \"\"\"\n    a: the first angle\n    b: the second angle\n    c: the third angle\n    \"\"\"\n    # if a + b > c, a + b < c, then a + c > b + c\n    if a + b > c:\n        return a + b\n    else:\n        return a + c\n\ndef main():\n    t = int(input())\n    for a0 in range(t):\n        a, b, c = map(int, input().split(' '))\n        print(triangle(a, b, c))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import math\n\ndef angle(a,b,c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return math.acos(math.sqrt((a*a + b*b - c*c) / (2*a*b)))\n\ndef triangle(a,b,c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return angle(a,b,c)\n\ndef main():\n    print(triangle(1,2,3))\n    print(triangle(2,1,4))\n    print(triangle(2,3,4))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def angle(a, b, c):\n    \"\"\"\n    Return the angle between a, b and c.\n    \"\"\"\n    return a + b + c\n\ndef third_angle(a, b, c):\n    \"\"\"\n    Return the third angle of a triangle.\n    \"\"\"\n    return angle(a, b, c) - angle(a, b, c - b) - angle(a, b, c - a)\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter first angle: \"))\n    b = float(input(\"Enter second angle: \"))\n    c = float(input(\"Enter third angle: \"))\n    print(third_angle(a, b, c))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def angle(a,b,c):\n    \"\"\"\n    Returns the angle between the vectors ab and bc\n    \"\"\"\n    return (b-a)*(c-a) / (c-b)\n\ndef third_angle(a,b,c):\n    \"\"\"\n    Returns the angle between the vectors ab and bc\n    \"\"\"\n    return (a-b)*(c-b) / (a-c)\n\ndef main():\n    \"\"\"\n    Unit tests for the function\n    \"\"\"\n    # unit tests for the function\n    assert angle(0,1,0) == 0\n    assert angle(0,0,1) == 0\n    assert angle(0,1,1) == 0\n    assert angle(1,0,0) == 0\n    assert angle(1,1,0) == 90\n    assert angle(1,0,1) == 90\n    assert angle(0,0,0) == 0\n    assert angle(1,1,1) == 90\n    assert angle(1,1,0) == 90\n    assert angle(1,0,1) == 90\n    assert angle(0,0,1) == 0\n    assert angle(0,0,0) == 0\n    assert angle(1,0,1) == 90\n    assert angle(0,1,0) == 90\n    assert angle(1,0,0) == 90\n    assert angle(1,1,0) == 0\n    assert angle(0,1,1) == 90\n    assert angle(0,0,1) == 0\n    assert angle(1,1,1) == 0\n    assert angle(0,0,0) == 0\n    assert angle(1,1,1) == 0\n    assert angle(1,1,0) == 0\n    assert angle(1,0,1) == 0\n    assert angle(0,0,1) == 0\n    assert angle(0,1,1) == 90\n    assert angle(0,1,0) == 90\n    assert angle(1,0,1) == 90\n    assert angle(0,1,0) == 90\n    assert angle(0,0,1) == 0\n    assert angle(1,0,1) == 90"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\ndef third_angle(a, b):\n    return math.acos((a + b) / 2.0) * 180 / math.pi\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    triangle = [a, b, c]\n\n    print(third_angle(a, b))\n    print(third_angle(b, c))\n    print(third_angle(a, c))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# import the modules\nimport math\n\n# define the triangle\na, b, c = 3.14, math.sqrt(3.14), math.sqrt(3.14)\n\n# print the function\nprint(a, b, c)\n\n# calculate the third angle\nangle = (a + b + c) / 2\n\n# print the angle\nprint(angle)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from math import atan2\n\n\ndef third_angle(a, b, c):\n    \"\"\"\n    :param a: the first angle\n    :param b: the second angle\n    :param c: the third angle\n    :return: the third angle\n    \"\"\"\n    return atan2(b - a, c - b)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def angle_3(a, b):\n    return (a + b) / 2\n\nif __name__ == '__main__':\n    # your code goes here\n    print(angle_3(2, 3))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution:\n    def thirdAngle(self, v1, v2, v3):\n        \"\"\"\n        :type v1: str\n        :type v2: str\n        :type v3: str\n        :rtype: str\n        \"\"\"\n        v1, v2, v3 = float(v1), float(v2), float(v3)\n        if v1 + v2 == v3:\n            return \"180\"\n        if v1 + v3 == v2:\n            return \"360\"\n        if v2 + v3 == v1:\n            return \"720\"\n        if v1 + v2 + v3 == v3:\n            return \"360\"\n        return \"180\"\n\n\nif __name__ == \"__main__\":\n    assert Solution().thirdAngle(\"0\", \"1\", \"2\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"360\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\"\n    assert Solution().thirdAngle(\"1\", \"2\", \"3\") == \"180\""
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef angle_triangle(a, b, c):\n    \"\"\"\n    The angle of a triangle is defined by the angle between the sides of the\n    triangle and the horizontal.\n\n    :param a: the first side of the triangle\n    :param b: the second side of the triangle\n    :param c: the third side of the triangle\n    :return: the angle of the triangle\n    \"\"\"\n\n    return sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2))\n\ndef main():\n    print(angle_triangle(1, 1, 1))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# The first angle is defined by two points.\n# The second angle is defined by three points.\n\ndef third_angle(a, b, c):\n    \"\"\"\n    The third angle is defined by two angles.\n    a = first angle\n    b = second angle\n    c = third angle\n    \"\"\"\n    # First, get the third angle from the second angle.\n    # The formula for the third angle is:\n    #    third_angle = 2 * (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a + (second_angle - a)\n    #    third_angle = a"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def third_angle(angle1, angle2, angle3):\n    \"\"\"\n    angle1 - first angle\n    angle2 - second angle\n    angle3 - third angle\n    \"\"\"\n    return (angle2 - angle1) + (angle3 - angle2)\n\n\ndef test_third_angle():\n    assert third_angle(180, 180, 90) == 90\n    assert third_angle(180, 180, 180) == 0\n    assert third_angle(90, 90, 90) == 45\n    assert third_angle(90, 90, 270) == 135\n    assert third_angle(90, 90, 180) == 45\n    assert third_angle(90, 90, 270) == 135\n    assert third_angle(90, 90, 0) == 45\n    assert third_angle(90, 90, 270) == 135\n    assert third_angle(90, 90, 180) == 45\n    assert third_angle(90, 90, 270) == 135\n    assert third_angle(0, 180, 180) == 180\n    assert third_angle(0, 180, 90) == 90\n    assert third_angle(0, 180, 270) == 270\n    assert third_angle(0, 180, 180) == 180\n    assert third_angle(0, 180, 270) == 270\n    assert third_angle(0, 180, 90) == 90\n    assert third_angle(0, 180, 270) == 270\n    assert third_angle(0, 180, 180) == 180\n    assert third_angle(0, 180, 270) == 270\n    assert third_angle(0, 90, 180) == 90\n    assert third_angle(0, 90, 90) == 45\n    assert third_angle(0, 90, 270) == 135\n    assert third_angle(0, 90, 180) == 45\n    assert third_angle(0, 90, 270) == 135\n    assert third_angle(0, 90, 90) == 45\n    assert third_angle(0, 90, 270) == 135\n    assert third_angle(0, 90, 180) == 45\n    assert third_angle(0, 90, 270) == 135\n    assert third_angle(0, 90, 180) == 45\n    assert third_angle(0"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "import math\n\ndef get_third_angle(a, b, c):\n    \"\"\"\n    a, b, and c are the three angles of the triangle.\n    Return the third angle.\n    \"\"\"\n    return math.acos(math.sin(a)*math.sin(b) + math.cos(a)*math.cos(b)*math.cos(c))\n\n# https://www.hackerrank.com/challenges/triangle-angle-identification/problem\n\nif __name__ == '__main__':\n    a = int(input().strip())\n    b = int(input().strip())\n    c = int(input().strip())\n    print(get_third_angle(a, b, c))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def third_angle(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return a + b - c"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "import math\n\ndef angle_triangle(a, b, c):\n    return (a+b+c)/2\n\ndef third_angle(a, b, c):\n    return angle_triangle(a, b, c) - math.pi/2\n\nif __name__ == \"__main__\":\n    print(third_angle(1, 2, 3))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from math import degrees\n\ndef get_third_angle(a, b, c):\n    \"\"\"\n    Returns the third angle of a triangle using two angles.\n    :param a: First angle of the triangle.\n    :param b: Second angle of the triangle.\n    :param c: Third angle of the triangle.\n    :return: The third angle of a triangle using two angles.\n    \"\"\"\n    return degrees(a + b - c)\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(get_third_angle(a, b, c))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_third_angle(angle1, angle2, angle3):\n    return angle3\n\nif __name__ == '__main__':\n    angle1 = float(input('Enter first angle: '))\n    angle2 = float(input('Enter second angle: '))\n    angle3 = float(input('Enter third angle: '))\n\n    print(find_third_angle(angle1, angle2, angle3))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/triangle/problem\n\n# Definition for a triangle.\n# class Triangle:\n#     def __init__(self, p1, p2, p3):\n#         self.p1 = p1\n#         self.p2 = p2\n#         self.p3 = p3\n\n#     def area(self):\n#         return (self.p1.x * self.p2.y - self.p2.x * self.p1.y) * (self.p3.x * self.p1.y - self.p1.x * self.p3.y)\n\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n# Triangle.area(Triangle(Point(1, 2), Point(1, 4), Point(5, 6)))\n# Triangle.area(Triangle(Point(1, 2), Point(1, 2), Point(5, 6)))\n# Triangle.area(Triangle(Point(1, 2), Point(1, 2), Point(1, 2)))\n\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n\n# Triangle.area(Triangle(Point(1, 2), Point(3, 4), Point(5, 6)))\n# Triangle."
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "# Importing libraries\nimport math\n\n# Function to find angle of a point\ndef angle(x, y, z):\n\treturn math.atan2(y, x)\n\n# Function to find third angle\ndef third(a, b, c):\n\treturn (a + b + c) / 2\n\n# Function to find third angle\ndef third_angle(a, b, c):\n\treturn math.acos(math.cos(a) * math.cos(b) * math.cos(c) + math.sin(a) * math.sin(b) * math.sin(c))\n\n# Function to find third angle\ndef third_angle(a, b, c):\n\treturn math.acos(math.cos(a) * math.cos(b) * math.cos(c) + math.sin(a) * math.sin(b) * math.sin(c))\n\n# Function to find third angle\ndef third_angle(a, b, c):\n\treturn math.acos(math.cos(a) * math.cos(b) * math.cos(c) + math.sin(a) * math.sin(b) * math.sin(c))\n\n# Function to find third angle\ndef third_angle(a, b, c):\n\treturn math.acos(math.cos(a) * math.cos(b) * math.cos(c) + math.sin(a) * math.sin(b) * math.sin(c))\n\n# Function to find third angle\ndef third_angle(a, b, c):\n\treturn math.acos(math.cos(a) * math.cos(b) * math.cos(c) + math.sin(a) * math.sin(b) * math.sin(c))\n\n# Function to find third angle\ndef third_angle(a, b, c):\n\treturn math.acos(math.cos(a) * math.cos(b) * math.cos(c) + math.sin(a) * math.sin(b) * math.sin(c))\n\n# Function to find third angle\ndef third_angle(a, b, c):\n\treturn math.acos("
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def angle_of_triangle(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    a, b, c = input().split()\n    print(angle_of_triangle(a, b, c))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "#%%\nimport math as m\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\ndef angle3(a, b):\n    return m.acos(m.sin(a) * m.sin(b) + m.cos(a) * m.cos(b) * m.cos(m.asin(a / m.cos(b))))\n\n#%%\ndef test_angle3():\n    assert angle3(30, 90) == 90\n    assert angle3(30, 180) == 30\n    assert angle3(30, 270) == 30\n    assert angle3(30, 360) == 30\n    assert angle3(30, 300) == 30\n    assert angle3(30, 360) == 30\n    assert angle3(30, 450) == 30\n    assert angle3(30, 540) == 30\n    assert angle3(30, 630) == 30\n    assert angle3(30, 720) == 30\n    assert angle3(30, 900) == 30\n    assert angle3(30, 1230) == 30\n    assert angle3(30, 1560) == 30\n    assert angle3(30, 1800) == 30\n    assert angle3(30, 1890) == 30\n    assert angle3(30, 2160) == 30\n    assert angle3(30, 2300) == 30\n    assert angle3(30, 2400) == 30\n    assert angle3(30, 2700) == 30\n    assert angle3(30, 2790) == 30\n    assert angle3(30, 3240) == 30\n    assert angle3(30, 3330) == 30\n    assert angle3(30, 3360) == 30\n    assert angle3(30, 3600) == 30\n    assert angle3(30, 3630) == 30\n    assert angle3(30, 3660) == 30\n    assert angle3(30, 3690) == 30\n    assert angle3(30, 3720) == 30\n    assert angle3(30, 3750) == 30\n    assert angle3(30, 3780) == 30\n    assert angle3(30, 3820) == 30\n    assert angle3(30, 3860) == 30\n    assert angle3(30, 3890)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "class Triangle(object):\n    \"\"\"\n    Represents a triangle.\n    \"\"\"\n    def __init__(self, a, b, c):\n        \"\"\"\n        Initialise a triangle with three angles.\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def get_angle(self, x, y):\n        \"\"\"\n        Get the angle of a triangle formed by two angles.\n        \"\"\"\n        return self.a + self.b + self.c - x - y\n\n    def get_angle_1(self):\n        \"\"\"\n        Get the angle of a triangle formed by two angles.\n        \"\"\"\n        return self.a + self.b\n\n    def get_angle_2(self):\n        \"\"\"\n        Get the angle of a triangle formed by two angles.\n        \"\"\"\n        return self.b + self.c\n\n    def get_angle_3(self):\n        \"\"\"\n        Get the angle of a triangle formed by two angles.\n        \"\"\"\n        return self.c + self.a\n\n\ndef get_angle_1(a, b, c):\n    \"\"\"\n    Get the angle of a triangle formed by two angles.\n    \"\"\"\n    return a + b\n\n\ndef get_angle_2(a, b, c):\n    \"\"\"\n    Get the angle of a triangle formed by two angles.\n    \"\"\"\n    return b + c\n\n\ndef get_angle_3(a, b, c):\n    \"\"\"\n    Get the angle of a triangle formed by two angles.\n    \"\"\"\n    return c + a\n\n\ndef get_angle(a, b, c):\n    \"\"\"\n    Get the angle of a triangle formed by two angles.\n    \"\"\"\n    return a + b + c - a - b - c\n\n\ndef get_angle_4(a, b, c):\n    \"\"\"\n    Get the angle of a triangle formed by two angles.\n    \"\"\"\n    return a + b - c\n\n\ndef get_angle_5(a, b, c):\n    \"\"\"\n    Get the angle of a triangle formed by two angles.\n    \"\"\"\n    return a - b - c\n\n\ndef get_angle_6(a, b, c):\n    \"\"\"\n    Get"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "# from math import pi\n\ndef angle_3(a, b, c):\n    \"\"\"\n    Find the angle of the third angle of a triangle.\n    \"\"\"\n    return (pi * (a + b + c) / 2) % (2 * pi)\n\nif __name__ == '__main__':\n    a = input(\"Enter the first angle: \")\n    b = input(\"Enter the second angle: \")\n    c = input(\"Enter the third angle: \")\n    print angle_3(a, b, c)"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef third_angle(a,b,c):\n    \"\"\"\n    Calculates the third angle of a triangle using two angles.\n    \"\"\"\n    return (pi*a*b*c)/(2*a*b+a*c+b*c)\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter first angle: \"))\n    b = float(input(\"Enter second angle: \"))\n    c = float(input(\"Enter third angle: \"))\n    print(third_angle(a,b,c))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from math import sin, cos, pi\n\n\ndef third_angle(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return pi / 4 - acos((a * a + b * b - c * c) / (2 * a * b))\n\n\nif __name__ == \"__main__\":\n    print third_angle(0, 0, 1)\n    print third_angle(1, 1, 1)\n    print third_angle(1, 1, 0)\n    print third_angle(1, 0, 0)\n    print third_angle(0, 1, 1)\n    print third_angle(1, 1, 0)\n    print third_angle(0, 0, 0)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def angle_third(a, b, c):\n    \"\"\"\n    For a, b, c: angles in degrees.\n    Return the angle in degrees.\n    \"\"\"\n    return 180 - (a + b + c) * (180 / (2 * math.pi))\n\ndef test_angle_third():\n    assert angle_third(0, 0, 0) == 0\n    assert angle_third(180, 180, 180) == 0\n    assert angle_third(45, 45, 45) == 90\n    assert angle_third(135, 45, 135) == 135\n    assert angle_third(45, 135, 45) == 45\n    assert angle_third(45, 45, 135) == 135\n    assert angle_third(135, 45, 45) == 45\n    assert angle_third(135, 135, 135) == 0"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef third_angle(a, b, c):\n    \"\"\"\n    :param a: angle of the first side\n    :param b: angle of the second side\n    :param c: angle of the third side\n    :return: angle between the third side and the three sides\n    \"\"\"\n    return pi / 2 - abs(a + b - c)\n\n\ndef test_third_angle():\n    assert third_angle(0, 0, 0) == pi / 4\n    assert third_angle(pi / 2, pi / 2, 0) == 0\n    assert third_angle(pi / 2, pi / 2, pi / 4) == pi / 4\n    assert third_angle(pi / 4, pi / 2, pi / 4) == pi / 4\n    assert third_angle(pi / 2, pi / 2, pi / 2) == pi / 2\n\n\nif __name__ == '__main__':\n    test_third_angle()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def angle_3(a, b, c):\n    return ((a + b + c) / 2) % 360\n\nif __name__ == '__main__':\n    triangle = [int(input()), int(input()), int(input())]\n    print(angle_3(triangle[0], triangle[1], triangle[2]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def third_angle(a, b):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :rtype: float\n    \"\"\"\n    # a and b are the two angles of the triangle, and the third angle is the\n    # angle between the first two angles.\n    return (a + b) / 2.0\n\n# Your Code Below is provided as a guide.\nif __name__ == '__main__':\n    print(third_angle(45, 90))\n    print(third_angle(90, 45))\n    print(third_angle(45, 45))\n    print(third_angle(45, 90))\n    print(third_angle(90, 45))\n    print(third_angle(90, 90))\n    print(third_angle(90, 90))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def third_angle(a, b, c):\n    \"\"\"\n    a - first angle\n    b - second angle\n    c - third angle\n    return the angle in degrees\n    \"\"\"\n    return round(((a+b+c)/2.0), 1)\n\n\ndef main():\n    a = float(input(\"Enter first angle: \"))\n    b = float(input(\"Enter second angle: \"))\n    c = float(input(\"Enter third angle: \"))\n    print(third_angle(a, b, c))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def angle_third(a, b, c):\n    return (a + b + c) / 2\n\nif __name__ == \"__main__\":\n    print(angle_third(3, 6, 9))\n    print(angle_third(0, 0, 0))\n    print(angle_third(1, 1, 1))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def findThirdAngle(a,b,c):\n    \"\"\"\n    Find the third angle of a triangle using two angles.\n\n    Input:\n    a = angle of first side\n    b = angle of second side\n    c = angle of third side\n\n    Return:\n    The third angle.\n    \"\"\"\n    return (a + b + c) / 2\n\ndef test():\n    assert findThirdAngle(0, 0, 0) == 0\n    assert findThirdAngle(0, 0, 90) == 90\n    assert findThirdAngle(0, 90, 0) == 0\n    assert findThirdAngle(0, 90, 90) == 90\n    assert findThirdAngle(0, 90, 180) == 0\n    assert findThirdAngle(90, 0, 0) == 0\n    assert findThirdAngle(90, 0, 90) == 90\n    assert findThirdAngle(90, 90, 0) == 0\n    assert findThirdAngle(90, 90, 90) == 90\n    assert findThirdAngle(90, 90, 180) == 90\n    assert findThirdAngle(180, 0, 0) == 0\n    assert findThirdAngle(180, 0, 90) == 0\n    assert findThirdAngle(180, 90, 0) == 0\n    assert findThirdAngle(180, 90, 90) == 0\n    assert findThirdAngle(180, 90, 180) == 0\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\n# Returns the third angle of a triangle\ndef third_angle(a, b, c):\n    return math.degrees(math.acos(\n        (\n            (b ** 2) + (c ** 2) - (a ** 2)\n        ) /\n        (2 * b * c)\n    ))\n\n# Returns the second angle of a triangle\ndef second_angle(a, b, c):\n    return math.degrees(math.acos(\n        (\n            (a ** 2) + (c ** 2) - (b ** 2)\n        ) /\n        (2 * a * c)\n    ))\n\n# Returns the first angle of a triangle\ndef first_angle(a, b, c):\n    return math.degrees(math.acos(\n        (\n            (b ** 2) + (a ** 2) - (c ** 2)\n        ) /\n        (2 * b * a)\n    ))\n\n# Returns the fourth angle of a triangle\ndef fourth_angle(a, b, c):\n    return math.degrees(math.acos(\n        (\n            (a ** 2) + (b ** 2) - (c ** 2)\n        ) /\n        (2 * a * b)\n    ))\n\n# Returns the first angle of a triangle\ndef first_angle(a, b, c):\n    return math.degrees(math.acos(\n        (\n            (a ** 2) + (c ** 2) - (b ** 2)\n        ) /\n        (2 * a * c)\n    ))\n\n# Returns the second angle of a triangle\ndef second_angle(a, b, c):\n    return math.degrees(math.acos(\n        (\n            (b ** 2) + (a ** 2) - (c ** 2)\n        ) /\n        (2 * b * c)\n    ))\n\n# Returns the third angle of a triangle\ndef third_angle(a, b, c):\n    return math.degrees(math.acos(\n        (\n            (c ** 2) + (b ** 2) - (a ** 2)\n        ) /\n        (2 * c * b)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def get_angle(a, b):\n    if a == b:\n        return 0\n    return (a + b) % 360\n\n\ndef get_third_angle(a, b, c):\n    return get_angle(get_angle(a, b), get_angle(a, c))\n\n\ndef main():\n    # Test Cases\n    assert get_third_angle(90, 90, 90) == 0\n    assert get_third_angle(90, 90, 180) == 180\n    assert get_third_angle(90, 90, 270) == 0\n    assert get_third_angle(0, 90, 90) == 0\n    assert get_third_angle(0, 90, 180) == 180\n    assert get_third_angle(0, 90, 270) == 0\n    assert get_third_angle(90, 0, 90) == 0\n    assert get_third_angle(90, 0, 180) == 180\n    assert get_third_angle(90, 0, 270) == 0\n    assert get_third_angle(90, 90, 0) == 0\n    assert get_third_angle(90, 90, 180) == 180\n    assert get_third_angle(90, 90, 270) == 0\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def get_angle(a, b, c):\n    return (a + b + c) / 2\n\n\ndef get_third_angle(a, b, c):\n    return get_angle(a, b, c) - (get_angle(a, b, c) - a)\n\ndef main():\n    # Unit tests\n    assert get_third_angle(0, 0, 0) == 0\n    assert get_third_angle(1, 0, 0) == 0\n    assert get_third_angle(1, 1, 0) == 90\n    assert get_third_angle(1, 0, 1) == 180\n    assert get_third_angle(1, 1, 1) == 270\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_third_angle(angle1, angle2, angle3):\n    \"\"\"\n    angle1: The first angle\n    angle2: The second angle\n    angle3: The third angle\n    \"\"\"\n    return (angle1 + angle2 + angle3) / 2\n\nif __name__ == '__main__':\n    angle1, angle2, angle3 = input().strip().split(' ')\n    angle1, angle2, angle3 = int(angle1), int(angle2), int(angle3)\n    print(find_third_angle(angle1, angle2, angle3))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from __future__ import print_function\nfrom math import degrees\n\ndef triangle(a, b, c):\n    \"\"\"\n    a, b, and c are angles in degrees\n    return the third angle in degrees\n    \"\"\"\n    return degrees(a + b + c)\n\ndef main():\n    \"\"\"\n    Test the triangle function\n    \"\"\"\n    print(triangle(20, 30, 40))\n    print(triangle(45, 30, 50))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_third(a, b, c):\n    \"\"\"\n    :param a: the first angle\n    :param b: the second angle\n    :param c: the third angle\n    :return: the third angle\n    \"\"\"\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    assert find_third(45, 90, 180) == 90\n    assert find_third(0, 45, 90) == 90\n    assert find_third(0, 0, 90) == 90\n    assert find_third(0, 0, 0) == 0\n    assert find_third(0, 90, 0) == 90\n    assert find_third(0, 90, 90) == 90\n    assert find_third(90, 0, 0) == 90\n    assert find_third(90, 0, 90) == 90\n    assert find_third(90, 90, 0) == 90\n    assert find_third(90, 90, 90) == 90\n    assert find_third(135, 90, 180) == 90\n    assert find_third(135, 0, 180) == 90\n    assert find_third(135, 45, 180) == 135\n    assert find_third(135, 90, 180) == 135\n    assert find_third(135, 135, 180) == 135\n    assert find_third(180, 0, 0) == 180\n    assert find_third(180, 45, 0) == 180\n    assert find_third(180, 90, 0) == 180\n    assert find_third(180, 135, 0) == 180\n    assert find_third(180, 180, 0) == 180\n    assert find_third(180, 180, 90) == 180\n    assert find_third(180, 180, 135) == 180\n    assert find_third(180, 180, 180) == 180\n    assert find_third(270, 0, 0) == 270\n    assert find_third(270, 45, 0) == 270\n    assert find_third(270, 90, 0) == 270\n    assert find_third(270, 135, 0) == 270\n    assert find_third(270, 180, 0) == 270\n    assert find_third(270, 180, 90) == 270"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def get_angle(a, b):\n    return (a + b) / 2\n\ndef get_angle2(a, b, c):\n    return ((a + b) + (a + c) + (b + c)) / 4\n\ndef find_third(a, b, c):\n    return get_angle2(a, b, c)\n\ndef test():\n    assert find_third(0, 0, 0) == 0\n    assert find_third(1, 0, 0) == 0\n    assert find_third(1, 1, 1) == 90\n    assert find_third(1, 1, 2) == 45\n    assert find_third(1, 2, 3) == 60\n    assert find_third(1, 2, 3) == 60\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def find_third_angle(a, b, c):\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    a = input('Enter the first angle: ')\n    b = input('Enter the second angle: ')\n    c = input('Enter the third angle: ')\n\n    print(find_third_angle(a, b, c))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\n\n\ndef third_angle(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return math.acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(third_angle(a, b, c))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def triangle_angle(a, b, c):\n    return math.atan2(b - a, c - a)\n\nprint(triangle_angle(0, 1, 2))\nprint(triangle_angle(0, 1, 3))\nprint(triangle_angle(0, 1, 4))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "# Importing libraries\nimport math\n\n# Defining functions\ndef get_angle(a, b, c):\n    \"\"\"\n    Calculate the angle between a, b, and c.\n\n    Args:\n        a (float): the first angle\n        b (float): the second angle\n        c (float): the third angle\n\n    Returns:\n        float: the angle\n    \"\"\"\n    # Calculating the angle\n    angle = math.acos((a * a + b * b - c * c) / (2 * a * b))\n\n    return angle\n\n\n# Testing functions\nif __name__ == \"__main__\":\n    # Test 1\n    a = 4\n    b = 1\n    c = 0\n    angle = get_angle(a, b, c)\n    print(angle)\n\n    # Test 2\n    a = 0\n    b = 0\n    c = 2\n    angle = get_angle(a, b, c)\n    print(angle)\n\n    # Test 3\n    a = 1\n    b = 1\n    c = 1\n    angle = get_angle(a, b, c)\n    print(angle)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def third_angle(a,b,c):\n    \"\"\"\n    :param a: first angle\n    :param b: second angle\n    :param c: third angle\n    :return: angle\n    \"\"\"\n    if a+b > c:\n        return a+b-c\n    elif a+b < c:\n        return a+b+c\n    else:\n        return a+b\n\nif __name__ == '__main__':\n    assert third_angle(90,90,90) == 45\n    assert third_angle(90,90,180) == 45\n    assert third_angle(90,90,270) == 45\n    assert third_angle(90,180,90) == 45\n    assert third_angle(90,180,180) == 45\n    assert third_angle(90,180,270) == 45\n    assert third_angle(90,180,360) == 45\n    assert third_angle(180,180,180) == 0\n    assert third_angle(180,180,270) == 0\n    assert third_angle(180,180,360) == 0\n    assert third_angle(180,270,180) == 45\n    assert third_angle(180,270,270) == 45\n    assert third_angle(180,270,360) == 45\n    assert third_angle(180,270,540) == 45\n    assert third_angle(180,360,180) == 0\n    assert third_angle(180,360,270) == 0\n    assert third_angle(180,360,540) == 0\n    assert third_angle(180,540,180) == 45\n    assert third_angle(180,540,270) == 45\n    assert third_angle(180,540,540) == 45\n    assert third_angle(180,540,720) == 45\n    assert third_angle(360,180,180) == 0\n    assert third_angle(360,180,270) == 0\n    assert third_angle(360,180,540) == 0\n    assert third_angle(360,270,180) == 45\n    assert third_angle(360,270,270) == 45\n    assert third_angle(360,270,540) == 45"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import math\n\ndef third_angle(a, b, c):\n    \"\"\"\n    Returns the third angle of a triangle formed by the three angles\n    `a`, `b` and `c`\n    \"\"\"\n    return math.degrees(math.acos((math.sin(a) ** 2 +\n                                  math.sin(b) ** 2 +\n                                  math.sin(c) ** 2) ** 0.5))\n\n# test cases\nprint(third_angle(90, 90, 90))\nprint(third_angle(90, 90, 90))\nprint(third_angle(90, 90, 90))\nprint(third_angle(90, 90, 90))\nprint(third_angle(90, 90, 90))\nprint(third_angle(90, 90, 90))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "class Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def get_angle(self):\n        return self.a + self.b + self.c\n\n    def get_third_angle(self):\n        return self.get_angle() / 2\n\n\ndef get_triangles(n):\n    triangle_list = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i!= j and i!= k and j!= k:\n                    triangle = Triangle(i, j, k)\n                    triangle_list.append(triangle)\n    return triangle_list\n\nif __name__ == '__main__':\n    triangle_list = get_triangles(5)\n    for triangle in triangle_list:\n        print(triangle.get_third_angle())"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def third_angle(a,b,c):\n    \"\"\"\n    >>> third_angle(10, 20, 30)\n    30.0\n    >>> third_angle(10, 20, 40)\n    60.0\n    >>> third_angle(20, 10, 30)\n    30.0\n    >>> third_angle(20, 10, 40)\n    60.0\n    >>> third_angle(30, 20, 40)\n    60.0\n    >>> third_angle(30, 20, 50)\n    60.0\n    >>> third_angle(30, 40, 50)\n    60.0\n    >>> third_angle(30, 40, 60)\n    60.0\n    >>> third_angle(30, 60, 70)\n    60.0\n    >>> third_angle(40, 50, 60)\n    60.0\n    >>> third_angle(40, 50, 70)\n    60.0\n    >>> third_angle(40, 70, 80)\n    60.0\n    >>> third_angle(40, 70, 90)\n    60.0\n    >>> third_angle(50, 70, 80)\n    60.0\n    >>> third_angle(50, 70, 90)\n    60.0\n    >>> third_angle(50, 90, 100)\n    60.0\n    >>> third_angle(50, 90, 110)\n    60.0\n    >>> third_angle(50, 100, 110)\n    60.0\n    >>> third_angle(50, 100, 120)\n    60.0\n    >>> third_angle(50, 120, 130)\n    60.0\n    >>> third_angle(50, 120, 140)\n    60.0\n    >>> third_angle(50, 130, 140)\n    60.0\n    >>> third_angle(50, 130, 150)\n    60.0\n    >>> third_angle(50, 150, 160)\n    60.0\n    >>> third_angle(50, 150, 170)\n    60.0\n    >>> third_angle(50, 170, 180)\n    60.0\n    >>> third_angle(50, 170, 180)\n    60.0\n    >>> third_angle(50, 180,"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import math\n\n\ndef get_angle(a, b, c):\n    \"\"\"\n    Calculate the angle between a, b and c\n    \"\"\"\n    return math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b))\n\n\ndef third_angle(a, b, c):\n    \"\"\"\n    Find the third angle of a triangle using two angles\n    \"\"\"\n    return get_angle(a, b, c) - get_angle(a, b, c - a)\n\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(third_angle(a, b, c))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer} p1, p2, p3\n    # @return {integer}\n    def findThirdAngle(self, p1, p2, p3):\n        return math.atan2(p2 - p1, p3 - p1) - math.atan2(p1 - p2, p3 - p2)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import math\n\n# Returns the third angle of a triangle given two angles\ndef third_angle(a, b):\n    return math.degrees(math.acos(math.sin(a) / (math.sin(a) + math.sin(b))))\n\n# Test cases\nprint(third_angle(math.pi / 4, math.pi / 2))\nprint(third_angle(math.pi / 4, 0))\nprint(third_angle(math.pi / 2, math.pi / 4))\nprint(third_angle(math.pi / 2, math.pi / 2))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "# Import the necessary libraries\nimport math\n\n\ndef third_angle(a, b, c):\n    \"\"\"\n    Given the three angles of a triangle, return the third angle.\n    \"\"\"\n    return math.atan2(a, b) + math.atan2(a, c)\n\n\nif __name__ == '__main__':\n    # Test cases\n    assert third_angle(math.pi/4, math.pi/2, math.pi/2) == math.pi/4\n    assert third_angle(math.pi/2, math.pi/2, math.pi/2) == math.pi/2\n    assert third_angle(math.pi/2, math.pi/2, math.pi/2) == math.pi/2\n    assert third_angle(math.pi/4, math.pi/2, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/2, math.pi/2, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/2, math.pi/2, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/4, math.pi/4, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/2, math.pi/2, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/2, math.pi/2, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/4, math.pi/4, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/2, math.pi/2, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/2, math.pi/2, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/4, math.pi/4, math.pi/4) == math.pi/4\n    assert third_angle(math.pi/2, math.pi/2, math.pi/4) == math"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "class Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def angle(self):\n        \"\"\"\n        Returns the angle of the triangle\n        \"\"\"\n        return (self.a + self.b + self.c) / 2\n\n    def area(self):\n        \"\"\"\n        Returns the area of the triangle\n        \"\"\"\n        return abs(self.a * self.b - self.b * self.c + self.c * self.a) / 2\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(\"Enter three numbers for a, b, and c:\")\n    a, b, c = map(int, input().split())\n    triangle = Triangle(a, b, c)\n    print(\"The third angle of the triangle is %d\" % triangle.angle())\n    print(\"The area of the triangle is %d\" % triangle.area())\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_third_angle(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c - three angles of a triangle\n    Output:\n        third angle\n    \"\"\"\n    if a > b and a > c:\n        if b > c:\n            return (a + b) / 2\n        else:\n            return (a + c) / 2\n    elif b > a and b > c:\n        if a > c:\n            return (b + a) / 2\n        else:\n            return (b + c) / 2\n    elif c > a and c > b:\n        if a > b:\n            return (c + a) / 2\n        else:\n            return (c + b) / 2"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def triangle_angle(a, b, c):\n    if a + b > c:\n        return (a + b) / 2\n    if a + c > b:\n        return (a + c) / 2\n    if b + c > a:\n        return (b + c) / 2\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    print triangle_angle(2, 3, 4)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def third_angle(a, b):\n    if a < b < 90:\n        return 90\n    elif a < 90 < b:\n        return 180\n    elif a < 180 < b:\n        return 270\n    elif a < 270 < b:\n        return 360\n\nif __name__ == \"__main__\":\n    print(third_angle(45, 90))\n    print(third_angle(90, 45))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "import math\n\ndef third_angle(a, b, c):\n    \"\"\"\n    :param a: Angle of the first triangle\n    :param b: Angle of the second triangle\n    :param c: Angle of the third triangle\n    :return: The third angle of the triangle\n    \"\"\"\n\n    return math.degrees(math.acos(math.cos(a) * math.cos(b) * math.cos(c) +\n                                  math.cos(a) * math.sin(b) * math.sin(c) +\n                                  math.sin(a) * math.sin(b)))\n\nif __name__ == '__main__':\n    a = int(input(\"First angle: \"))\n    b = int(input(\"Second angle: \"))\n    c = int(input(\"Third angle: \"))\n\n    third_angle(a, b, c)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import math\n\n\ndef third_angle(a, b, c):\n    return math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b))\n\n\n# Sample Inputs\na = 1\nb = 2\nc = 3\n\n# Sample Outputs\nprint third_angle(a, b, c)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef find_third_angle(first_angle, second_angle):\n    \"\"\"\n    first_angle and second_angle are angles in degrees.\n    returns the third angle\n    \"\"\"\n    # Calculate the angle between the first and second angles\n    first_angle_to_second = math.radians(first_angle) - math.radians(second_angle)\n    # Calculate the angle between the first and third angles\n    first_angle_to_third = math.radians(first_angle) - math.radians(third_angle)\n    # Calculate the angle between the second and third angles\n    second_angle_to_third = math.radians(second_angle) - math.radians(third_angle)\n    # Calculate the angle between the first and second angles\n    first_angle_to_second_angle = math.radians(first_angle) - math.radians(second_angle)\n    # Calculate the angle between the first and third angles\n    first_angle_to_third_angle = math.radians(first_angle) - math.radians(third_angle)\n    # Calculate the angle between the second and third angles\n    second_angle_to_third_angle = math.radians(second_angle) - math.radians(third_angle)\n    # Calculate the angle between the first and third angles\n    first_angle_to_third_angle_to_third = math.radians(first_angle) - math.radians(third_angle)\n    # Calculate the angle between the second and third angles\n    second_angle_to_third_angle_to_third = math.radians(second_angle) - math.radians(third_angle)\n    # Calculate the angle between the first and second angles\n    first_angle_to_second_angle_to_second = math.radians(first_angle) - math.radians(second_angle)\n    # Calculate the angle between the first and third angles\n    first_angle_to_third_angle_to_second = math.radians(first_angle) - math.radians(third_angle)\n    # Calculate the angle between the second and third angles"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\n\ndef third_angle(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return math.acos((a + b + c) / 2) * 2\n\n\nif __name__ == '__main__':\n    assert third_angle(0, 0, 0) == 0\n    assert third_angle(1, 0, 0) == math.pi / 2\n    assert third_angle(0, 1, 0) == math.pi / 4\n    assert third_angle(0, 0, 1) == math.pi / 2\n    assert third_angle(1, 1, 1) == 0\n    assert third_angle(0, 0.1, 0.1) == 0\n    assert third_angle(0.1, 0.1, 0.1) == 0\n    assert third_angle(0.1, 0.1, 0.2) == math.pi / 4\n    assert third_angle(0.1, 0.2, 0.2) == math.pi / 2\n    assert third_angle(0.2, 0.2, 0.2) == 0\n    assert third_angle(0.2, 0.2, 0.3) == math.pi / 4\n    assert third_angle(0.2, 0.3, 0.3) == math.pi / 2\n    assert third_angle(0.3, 0.3, 0.3) == 0\n    assert third_angle(0.3, 0.3, 0.4) == math.pi / 4\n    assert third_angle(0.3, 0.4, 0.4) == math.pi / 2\n    assert third_angle(0.4, 0.4, 0.4) == 0\n    assert third_angle(0.4, 0.4, 0.5) == math.pi / 4\n    assert third_angle(0.4, 0.5, 0.5) == math.pi / 2\n    assert third_angle(0.5, 0.5, 0.5) == 0"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\ndef angle_three(a,b,c):\n    return math.atan2(b - a, c - a)\n\ndef angle_three_two(a,b):\n    return angle_three(a,b,a+b)\n\nif __name__ == \"__main__\":\n    a = float(input(\"Input a: \"))\n    b = float(input(\"Input b: \"))\n    c = float(input(\"Input c: \"))\n    print(angle_three_two(a,b))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def third_angle(a, b, c):\n    \"\"\"\n    a, b and c are the three angles of a triangle.\n    \"\"\"\n    return a + b + c - (a + b + c) / 2.0\n\n# Test Cases\n\nprint(third_angle(45, 30, 45))\nprint(third_angle(45, 30, 150))\nprint(third_angle(45, 150, 45))\nprint(third_angle(45, 150, 150))\nprint(third_angle(150, 45, 45))\nprint(third_angle(150, 45, 150))\nprint(third_angle(150, 150, 45))\nprint(third_angle(150, 150, 150))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def third_angle(a, b):\n    return 180 - ((b - a) % 360)\n\ndef test():\n    assert third_angle(180, 270) == 90\n    assert third_angle(180, 180) == 0\n    assert third_angle(180, 90) == 90\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef third_angle(a,b,c):\n    \"\"\"\n    Inputs: a, b, and c are the angles of a triangle.\n    Outputs: the third angle of a triangle.\n    \"\"\"\n    return math.sqrt(math.pow((a+b+c), 2) - (math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2)))/2\n\nif __name__ == '__main__':\n    print third_angle(180, 90, 90)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "from math import atan2, pi\n\ndef third_angle(a, b):\n    return atan2(b - a, 2 * a)\n\n\ndef is_triangle(a, b, c):\n    return a + b <= pi and b + c <= pi and a + c <= pi\n\n\ndef third_angle_1(a, b, c):\n    if is_triangle(a, b, c):\n        return third_angle(a, b, c)\n    elif is_triangle(b, a, c):\n        return third_angle(b, a, c)\n    elif is_triangle(c, a, b):\n        return third_angle(c, a, b)\n    else:\n        return None\n\n\ndef third_angle_2(a, b, c):\n    if is_triangle(a, b, c):\n        return third_angle(a, b, c)\n    elif is_triangle(b, a, c):\n        return third_angle(b, a, c)\n    elif is_triangle(c, a, b):\n        return third_angle(c, a, b)\n    else:\n        return None\n\n\ndef third_angle_3(a, b, c):\n    if is_triangle(a, b, c):\n        return third_angle(a, b, c)\n    elif is_triangle(b, a, c):\n        return third_angle(b, a, c)\n    elif is_triangle(c, a, b):\n        return third_angle(c, a, b)\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    print(third_angle_1(0, pi / 4, pi / 2))\n    print(third_angle_2(0, pi / 4, pi / 2))\n    print(third_angle_3(0, pi / 4, pi / 2))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import math\n\ndef third_angle(a, b, c):\n    \"\"\"\n    Return the third angle of a triangle.\n    \"\"\"\n    return math.acos((a**2 + b**2 - c**2) / (2 * a * b))\n\nif __name__ == '__main__':\n    a, b, c = input().split()\n    print(third_angle(float(a), float(b), float(c)))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport math\n\ndef find_angle(a, b, c):\n    \"\"\"\n    Find the third angle of a triangle using two angles.\n    \"\"\"\n    # Find the cosine of the angle between the first two sides of the triangle.\n    # Use the same formula as the dot product to find the angle.\n    return math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b))\n\nif __name__ == '__main__':\n    # Test cases\n    print find_angle(1, 2, 3)\n    print find_angle(1, 2, 4)\n    print find_angle(1, 2, 0)\n    print find_angle(1, 1, 1)\n    print find_angle(1, 1, -1)\n    print find_angle(1, -1, 1)\n    print find_angle(1, -1, -1)\n    print find_angle(1, -1, -2)\n    print find_angle(1, -1, 2)\n    print find_angle(1, -1, 0)\n    print find_angle(1, -1, -1)\n    print find_angle(1, -1, -2)\n    print find_angle(1, -1, 2)\n    print find_angle(1, -1, 0)\n    print find_angle(1, -1, -1)\n    print find_angle(1, -1, -2)\n    print find_angle(1, -1, 2)\n    print find_angle(1, -1, 0)\n    print find_angle(1, -1, -1)\n    print find_angle(1, -1, -2)\n    print find_angle(1, -1, 2)\n    print find_angle(1, -1, 0)\n    print find_angle(1, -1, -1)\n    print find_angle(1, -1, -2)\n    print find_angle(1, -1, 2)\n    print find_angle(1, -1, 0)\n    print find_angle(1, -1, -1)\n    print"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "# import\nimport math\n\n# functions\ndef angle_to_rad(angle):\n    return angle * math.pi / 180.0\n\ndef angle_to_deg(angle):\n    return angle * 180.0 / math.pi\n\ndef find_third_angle(a, b, c):\n    # get a, b, c in degrees\n    a = angle_to_deg(a)\n    b = angle_to_deg(b)\n    c = angle_to_deg(c)\n\n    # get the angle between a and b\n    angle = (a + b) / 2.0\n    # get the angle between a and c\n    angle2 = (a + c) / 2.0\n\n    # find the angle between a and c\n    angle3 = (angle + angle2) / 2.0\n\n    return angle3\n\n# main\nif __name__ == '__main__':\n    # unit test\n    assert find_third_angle(0, 90, 180) == 90\n    assert find_third_angle(0, 0, 90) == 90\n    assert find_third_angle(0, 0, 0) == 0\n    assert find_third_angle(180, 0, 90) == 90\n    assert find_third_angle(180, 90, 90) == 90\n    assert find_third_angle(180, 90, 0) == 90\n    assert find_third_angle(270, 90, 90) == 90\n    assert find_third_angle(90, 0, 90) == 90\n    assert find_third_angle(90, 0, 0) == 0\n    assert find_third_angle(90, 90, 90) == 90\n    assert find_third_angle(90, 90, 0) == 90\n    assert find_third_angle(270, 90, 90) == 90\n    assert find_third_angle(270, 180, 90) == 90\n    assert find_third_angle(270, 0, 90) == 90\n    assert find_third_angle(270, 90, 0) == 90\n    assert find_third_angle(90, 0, 0) == 0\n    assert find_third_angle(90, 90, 0) == 90\n    assert find_third_angle("
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def angle_3(a,b):\n    return a+b\n\ndef angle_3_1(a):\n    if a < 90:\n        return 90-a\n    else:\n        return 360-a\n\ndef angle_3_2(a):\n    if a < 90:\n        return a\n    else:\n        return 360-a\n\ndef angle_3_3(a):\n    if a < 90:\n        return 90-a\n    else:\n        return 360-a\n\ndef angle_3_4(a):\n    if a < 90:\n        return a\n    else:\n        return 360-a\n\ndef angle_3_5(a):\n    if a < 90:\n        return 90-a\n    else:\n        return 360-a\n\ndef angle_3_6(a):\n    if a < 90:\n        return a\n    else:\n        return 360-a\n\ndef angle_3_7(a):\n    if a < 90:\n        return 90-a\n    else:\n        return 360-a\n\ndef angle_3_8(a):\n    if a < 90:\n        return a\n    else:\n        return 360-a\n\ndef angle_3_9(a):\n    if a < 90:\n        return 90-a\n    else:\n        return 360-a\n\ndef angle_3_10(a):\n    if a < 90:\n        return a\n    else:\n        return 360-a\n\ndef angle_3_11(a):\n    if a < 90:\n        return 90-a\n    else:\n        return 360-a\n\ndef angle_3_12(a):\n    if a < 90:\n        return a\n    else:\n        return 360-a\n\ndef angle_3_13(a):\n    if a < 90:\n        return 90-a\n    else:\n        return 360-a\n\ndef angle_3_14(a):\n    if a < 90:\n        return a\n    else:\n        return 360-a\n\ndef angle_3_15(a):\n    if a < 90:\n        return 90-a\n    else:\n        return 360-a"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Triangle:\n    \"\"\"\n    A triangle has 3 sides.\n    \"\"\"\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    def get_angle(self):\n        return self.a + self.b + self.c\n    def __str__(self):\n        return \"{} {} {}\".format(self.a, self.b, self.c)\n    def __repr__(self):\n        return \"{} {} {}\".format(self.a, self.b, self.c)\n\nclass Solution:\n    def third_angle(self, triangle: 'Triangle') -> float:\n        return triangle.get_angle() / 2\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    triangle = Triangle(1, 2, 3)\n    print(solution.third_angle(triangle))\n    triangle = Triangle(1, 0, 1)\n    print(solution.third_angle(triangle))\n    triangle = Triangle(1, 2, 3)\n    print(solution.third_angle(triangle))\n    triangle = Triangle(1, 2, 0)\n    print(solution.third_angle(triangle))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "import math\n\n\ndef find_angle(a, b, c):\n    \"\"\"\n    Find the angle between a, b, and c.\n\n    Input:\n        a, b, and c are floats between 0 and 360.\n\n    Output:\n        The third angle of the triangle.\n    \"\"\"\n    return (180.0 / math.pi) * math.acos(\n        (a ** 2 + b ** 2 - c ** 2) / (2 * a * b)\n    )\n\n\ndef test_find_angle():\n    assert abs(find_angle(0, 0, 0) - 0) <= 1e-6\n    assert abs(find_angle(1, 0, 0) - 90) <= 1e-6\n    assert abs(find_angle(0, 1, 0) - 180) <= 1e-6\n    assert abs(find_angle(1, 1, 0) - 270) <= 1e-6\n    assert abs(find_angle(0, 0, 1) - 90) <= 1e-6\n    assert abs(find_angle(1, 0, 1) - 135) <= 1e-6\n    assert abs(find_angle(0, 1, 1) - 180) <= 1e-6\n    assert abs(find_angle(1, 1, 1) - 45) <= 1e-6"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def third_angle(a, b, c):\n    return (a + b + c) / 2\n\n\"\"\"\nProblem Statement\n\nGiven the three angles of a triangle, find the third angle.\n\nInput Format\n\nFirst line contains an integer T, the number of test cases.\nEach test case consists of two lines, containing two angles a and b.\n\"\"\"\n\n# Complete the third_angle function below\ndef third_angle(a, b, c):\n    return (a + b + c) / 2\n\nif __name__ == \"__main__\":\n    for t in range(int(input())):\n        a, b, c = map(int, input().split())\n        print(third_angle(a, b, c))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\nclass Triangle(object):\n    def __init__(self, a, b, c):\n        \"\"\"\n        a: angle of first vertex\n        b: angle of second vertex\n        c: angle of third vertex\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        \"\"\"\n        Calculates the area of the triangle.\n        \"\"\"\n        return abs(self.a + self.b + self.c - 2 * self.a * self.b / (self.a - self.b) - self.a * self.c / (self.a - self.c))\n\n\nclass Solution(object):\n    def thirdAngle(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        a = triangle.a\n        b = triangle.b\n        c = triangle.c\n        return abs(a + b + c - 2 * a * b / (a - b) - a * c / (a - c))\n\n\nif __name__ == \"__main__\":\n    triangle = Triangle(0, 90, 180)\n    print triangle.area()\n    print Solution().thirdAngle(triangle)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def find_third_angle(a, b, c):\n    \"\"\"\n    a, b, c: angles of a triangle.\n    return: third angle of a triangle\n    \"\"\"\n    # formula for the third angle of a triangle\n    # see https://en.wikipedia.org/wiki/Triangle#Angles\n    #\n    # angle of triangle ABC\n    # angle of triangle BCA\n    # angle of triangle BCA\n    # angle of triangle ABC\n    #\n    # so, the formula is\n    #\n    # (angle_a + angle_b + angle_c) / 2\n    #\n    # which is the formula of the second angle.\n    #\n    # then, we can use the formula to get the third angle.\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    # the first angle is the angle of the triangle ABC\n    a = 90\n    b = 0\n    c = 90\n\n    # the second angle is the angle of the triangle BCA\n    # then, the third angle is the angle of the triangle ABC\n    print(find_third_angle(a, b, c))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/triangle-angle/problem\n#\n# Triangle\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#\n# Triangle angles\n#"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def third_angle(angle1, angle2, angle3):\n    if angle1 > angle2:\n        if angle1 > angle3:\n            return angle1\n        else:\n            return angle3\n    elif angle2 > angle3:\n        return angle2\n    else:\n        return angle3\n\nif __name__ == \"__main__\":\n    angles = [90, 30, 30, 60]\n    print(third_angle(angles[0], angles[1], angles[2]))\n    print(third_angle(angles[0], angles[2], angles[3]))\n    print(third_angle(angles[1], angles[2], angles[3]))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from math import sin, cos\n\ndef find_third_angle(a, b, c):\n    \"\"\"\n    Returns the third angle of a triangle defined by a, b, and c.\n\n    :param a: First angle of a triangle\n    :param b: Second angle of a triangle\n    :param c: Third angle of a triangle\n    :return: The third angle of a triangle\n    \"\"\"\n    return 2 * a + b - c\n\n\ndef main():\n    \"\"\"\n    Write a function that finds the third angle of a triangle.\n    \"\"\"\n    assert find_third_angle(0, 0, 0) == 0\n\n    a = float(input(\"First angle of a triangle: \"))\n    b = float(input(\"Second angle of a triangle: \"))\n    c = float(input(\"Third angle of a triangle: \"))\n\n    print(find_third_angle(a, b, c))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def angle_3(a, b):\n    if a + b > 180:\n        a = 360 - a\n        b = 360 - b\n    if a + b > 180:\n        a = 360 - a\n        b = 360 - b\n    return (a + b) / 2\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert angle_3(180, 270) == 90, \"180 + 270 = 90\"\n    assert angle_3(270, 180) == 90, \"270 + 180 = 90\"\n    assert angle_3(90, 180) == 0, \"90 + 180 = 0\"\n    assert angle_3(90, 270) == 0, \"90 + 270 = 0\"\n    assert angle_3(270, 90) == 0, \"270 + 90 = 0\"\n    assert angle_3(270, 270) == 0, \"270 + 270 = 0\"\n    assert angle_3(90, 90) == 0, \"90 + 90 = 0\"\n    assert angle_3(90, 270) == 0, \"90 + 270 = 0\"\n    assert angle_3(90, 180) == 0, \"90 + 180 = 0\""
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def angle_of_triangle(a, b, c):\n    return round(abs(180 - (180 * (a + b + c) / 2 / 3)), 2)\n\n# Test Cases\n\nassert angle_of_triangle(0, 90, 90) == 45\nassert angle_of_triangle(90, 90, 90) == 45\nassert angle_of_triangle(90, 90, 180) == 90\nassert angle_of_triangle(90, 90, 270) == 90\nassert angle_of_triangle(90, 180, 180) == 45\nassert angle_of_triangle(90, 180, 270) == 90\nassert angle_of_triangle(90, 270, 270) == 90\nassert angle_of_triangle(90, 270, 360) == 90\nassert angle_of_triangle(90, 270, 450) == 45\nassert angle_of_triangle(90, 270, 540) == 45\nassert angle_of_triangle(90, 270, 630) == 45\nassert angle_of_triangle(90, 270, 720) == 45\nassert angle_of_triangle(90, 270, 870) == 45\nassert angle_of_triangle(90, 270, 945) == 45\nassert angle_of_triangle(90, 270, 1050) == 45\nassert angle_of_triangle(90, 270, 1150) == 45\nassert angle_of_triangle(90, 270, 1250) == 45\nassert angle_of_triangle(90, 270, 1350) == 45\nassert angle_of_triangle(90, 270, 1450) == 45\nassert angle_of_triangle(90, 270, 1550) == 45\nassert angle_of_triangle(90, 270, 1650) == 45\nassert angle_of_triangle(90, 270, 1750) == 45\nassert angle_of_triangle(90, 270, 1850) == 45\nassert angle_of_triangle(90, 270, 1950) == 45\nassert angle_of_triangle(90, 270, 2050) == 45\nassert angle_of_triangle(90, 270, 2150) == 45\nassert angle_of_triangle(90, 270"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "import math\n\ndef third_angle(a, b, c):\n    \"\"\"\n    Write a function to find the third angle of a triangle using two angles.\n    \"\"\"\n    # a - b + c = 180\n    # a - b - c = 180\n    # a - b - c = 180\n    # a - b + c = 180\n    # a + b + c = 180\n    # a + b - c = 180\n    # a + b - c = 180\n    # a - b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a - b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a - b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a - b + c = 180\n    # a + b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a + b + c = 180\n    # a + b + c = 180\n    # a - b + c = 180\n    # a - b - c = 180\n    # a + b + c = 180\n    # a - b - c = 180\n    # a + b - c = 180\n    # a - b - c = 180\n    # a - b + c = 180\n    # a + b - c = 180\n    # a + b + c = 180\n    # a - b - c = 180\n    # a - b + c = 180\n    # a + b + c = 180\n    # a - b - c = 180\n    # a - b + c = 180\n    # a + b + c = 180\n    # a"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Point(object):\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdAngle(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        p1 = points[0]\n        p2 = points[1]\n        p3 = points[2]\n        a = p2.a - p1.a\n        b = p2.b - p1.b\n        c = p2.c - p1.c\n        if a == 0:\n            if b == 0:\n                return c\n            else:\n                return math.pi / 2\n        elif b == 0:\n            if c == 0:\n                return math.pi / 2\n            else:\n                return math.acos(a / math.sqrt(a * a + c * c))\n        else:\n            return math.acos(a / math.sqrt(a * a + b * b)) - math.acos(c / math.sqrt(a * a + b * b))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    def thirdAngle(self, p1, p2, p3):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :rtype: float\n        \"\"\"\n        # p1 is the vertex\n        # p2 is the edge\n        # p3 is the center\n        # return the angle between p3 and p2\n        x1 = p1.x - p2.x\n        y1 = p1.y - p2.y\n        x2 = p2.x - p3.x\n        y2 = p2.y - p3.y\n        return (math.atan2(y1 * x2 - x1 * y2, x1 * x2 + y1 * y2) - math.pi / 2) % (math.pi * 2)\n\nif __name__ == '__main__':\n    assert Solution().thirdAngle(Point(1, 1), Point(0, 1), Point(1, 0)) == math.pi / 4\n    assert Solution().thirdAngle(Point(1, 1), Point(1, 0), Point(0, 1)) == 0\n    assert Solution().thirdAngle(Point(0, 0), Point(0, 1), Point(0, 0)) == 0"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdAngle(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: float\n        \"\"\"\n        a = triangle.a\n        b = triangle.b\n        c = triangle.c\n        return abs(a + b + c - 2 * (a + b) - c) / 2"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def third_angle(a, b, c):\n    return (a + b + c) / 2\n\ndef test_third_angle():\n    assert third_angle(1, 3, 4) == 1.5\n    assert third_angle(2, 3, 4) == 1.5\n    assert third_angle(2, 4, 5) == 2.5\n    assert third_angle(3, 4, 5) == 2.5\n    assert third_angle(3, 5, 6) == 3.5\n    assert third_angle(4, 5, 6) == 3.5\n    assert third_angle(5, 6, 7) == 4.5\n    assert third_angle(6, 7, 8) == 4.5\n    assert third_angle(7, 8, 9) == 5.5\n    assert third_angle(8, 9, 10) == 5.5\n    assert third_angle(9, 10, 11) == 6.5\n    assert third_angle(10, 11, 12) == 6.5\n    assert third_angle(11, 12, 13) == 7.5\n    assert third_angle(12, 13, 14) == 7.5\n    assert third_angle(13, 14, 15) == 8.5\n    assert third_angle(14, 15, 16) == 8.5\n    assert third_angle(15, 16, 17) == 9.5\n    assert third_angle(16, 17, 18) == 9.5\n    assert third_angle(17, 18, 19) == 10.5\n    assert third_angle(18, 19, 20) == 10.5\n    assert third_angle(19, 20, 21) == 11.5\n    assert third_angle(20, 21, 22) == 11.5\n    assert third_angle(21, 22, 23) == 12.5\n    assert third_angle(22, 23, 24) == 12.5\n    assert third_angle(23, 24, 25) == 13.5\n    assert third_angle(24, 25, 26) == 13.5\n    assert third_angle(25, 26, 27) == 14.5\n    assert third_angle(26, 27, 28) == 14.5\n    assert"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Definition for a triangle.\n# class Point(object):\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def thirdAngle(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        p1, p2, p3 = points\n        return (p2.a - p1.a) * (p3.b - p2.b) - (p2.b - p1.b) * (p3.a - p2.a)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "import math\n\n\ndef get_third_angle(a, b, c):\n    \"\"\"\n    :param a: first angle\n    :param b: second angle\n    :param c: third angle\n    :return: third angle\n    \"\"\"\n    return math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b))\n\n\ndef main():\n    \"\"\"\n    >>> get_third_angle(0, 0, 90)\n    0.0\n    >>> get_third_angle(0, 90, 180)\n    0.0\n    >>> get_third_angle(90, 0, 180)\n    0.0\n    >>> get_third_angle(90, 90, 0)\n    0.0\n    >>> get_third_angle(90, 0, 180)\n    0.7853981633974483\n    >>> get_third_angle(90, 45, 135)\n    0.8164965809275862\n    \"\"\"\n    print(get_third_angle(0, 0, 90))\n    print(get_third_angle(0, 90, 180))\n    print(get_third_angle(90, 0, 180))\n    print(get_third_angle(90, 90, 0))\n    print(get_third_angle(90, 0, 180))\n    print(get_third_angle(90, 45, 135))\n    print(get_third_angle(90, 90, 0))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_third_angle(a, b, c):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    assert find_third_angle(1, 2, 3) == 0.5\n    assert find_third_angle(2, 3, 4) == 0.75\n    assert find_third_angle(3, 4, 5) == 1.0\n    assert find_third_angle(4, 5, 6) == 1.25\n    assert find_third_angle(5, 6, 7) == 1.5\n    assert find_third_angle(6, 7, 8) == 1.75\n    assert find_third_angle(7, 8, 9) == 2.0\n    assert find_third_angle(8, 9, 10) == 2.25\n    assert find_third_angle(9, 10, 11) == 2.5\n    assert find_third_angle(10, 11, 12) == 2.75\n    assert find_third_angle(11, 12, 13) == 3.0\n    assert find_third_angle(12, 13, 14) == 3.25\n    assert find_third_angle(13, 14, 15) == 3.5\n    assert find_third_angle(14, 15, 16) == 3.75\n    assert find_third_angle(15, 16, 17) == 4.0\n    assert find_third_angle(16, 17, 18) == 4.25\n    assert find_third_angle(17, 18, 19) == 4.5\n    assert find_third_angle(18, 19, 20) == 4.75\n    assert find_third_angle(19, 20, 21) == 5.0\n    assert find_third_angle(20, 21, 22) == 5.25\n    assert find_third_angle(21, 22, 23) == 5.5\n    assert find_third_angle(22, 23, 24) == 5.75\n    assert find_third_angle(23, 24, 25) == 6.0\n    assert"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def third_angle(a, b):\n    \"\"\"\n    :type a: float\n    :type b: float\n    :rtype: float\n    \"\"\"\n    return (a + b + math.pi) / 2\n\nif __name__ == '__main__':\n    assert third_angle(2, 3) == math.pi / 3\n    assert third_angle(3, 4) == 2 * math.pi / 3\n    assert third_angle(5, 6) == math.pi / 3\n    assert third_angle(5, 4) == 2 * math.pi / 3"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# pylint: disable=unused-argument\ndef find_third_angle(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return (a + b + c) / 2\n\nif __name__ == \"__main__\":\n    assert find_third_angle(0, 0, 0) == 0\n    assert find_third_angle(0, 0, 1) == 90\n    assert find_third_angle(0, 1, 0) == 45\n    assert find_third_angle(0, 1, 1) == 135\n    assert find_third_angle(1, 0, 0) == 45\n    assert find_third_angle(1, 0, 1) == 135\n    assert find_third_angle(1, 1, 0) == 180\n    assert find_third_angle(1, 1, 1) == 225\n    assert find_third_angle(0.5, 0.5, 0.5) == 0\n    assert find_third_angle(0.5, 0.5, 1) == 90\n    assert find_third_angle(0.5, 1, 0.5) == 45\n    assert find_third_angle(0.5, 1, 1) == 135\n    assert find_third_angle(1, 0.5, 0.5) == 45\n    assert find_third_angle(1, 0.5, 1) == 135\n    assert find_third_angle(1, 1, 0.5) == 180\n    assert find_third_angle(1, 1, 1) == 225\n    assert find_third_angle(0.5, 0.5, 0.5) == 0\n    assert find_third_angle(0.5, 0.5, 1) == 90\n    assert find_third_angle(0.5, 1, 0.5) == 45\n    assert find_third_angle(0.5, 1, 1) == 135\n    assert find_third_angle(1, 0.5, 0.5) == 45\n    assert find_third_angle(1, 0.5, 1) == 135\n    assert find_third_angle"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def third_angle(a, b, c):\n    \"\"\"\n    :param a: the first angle\n    :param b: the second angle\n    :param c: the third angle\n    :return: the third angle\n    \"\"\"\n    return (a + b + c) / 2\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert third_angle(45, 90, 120) == 30, \"45\u00b0\"\n    assert third_angle(90, 45, 60) == 60, \"90\u00b0\"\n    assert third_angle(120, 90, 60) == 60, \"120\u00b0\"\n    assert third_angle(45, 45, 45) == 0, \"45\u00b0\"\n    assert third_angle(90, 90, 90) == 0, \"90\u00b0\"\n    assert third_angle(120, 120, 120) == 0, \"120\u00b0\""
    }
  ]
}