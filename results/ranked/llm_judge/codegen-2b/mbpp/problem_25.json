{
  "timestamp": "2025-09-14T17:33:00.323778",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 25,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "#nthDigit(10, 5) -> 4\ndef nthDigit(n, d):\n    \"\"\"\n    :type n: int\n    :type d: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < n:\n        i += 1\n        d = d * 10\n    return d % 10\n\nprint nthDigit(10, 5)\nprint nthDigit(10, 3)\nprint nthDigit(10, 7)\nprint nthDigit(10, 11)\nprint nthDigit(10, 12)\nprint nthDigit(10, 13)\nprint nthDigit(10, 14)\nprint nthDigit(10, 15)\nprint nthDigit(10, 16)\nprint nthDigit(10, 17)\nprint nthDigit(10, 18)\nprint nthDigit(10, 19)\nprint nthDigit(10, 20)\nprint nthDigit(10, 21)\nprint nthDigit(10, 22)\nprint nthDigit(10, 23)\nprint nthDigit(10, 24)\nprint nthDigit(10, 25)\nprint nthDigit(10, 26)\nprint nthDigit(10, 27)\nprint nthDigit(10, 28)\nprint nthDigit(10, 29)\nprint nthDigit(10, 30)\nprint nthDigit(10, 31)\nprint nthDigit(10, 32)\nprint nthDigit(10, 33)\nprint nthDigit(10, 34)\nprint nthDigit(10, 35)\nprint nthDigit(10, 36)\nprint nthDigit(10, 37)\nprint nthDigit(10, 38)\nprint nthDigit(10, 39)\nprint nthDigit(10, 40)\nprint nthDigit(10, 41)\nprint nthDigit(10, 42)\nprint nthDigit(10, 43)\nprint nthDigit(10, 44)\nprint nthDigit(10, 45)\nprint nthDigit(10, 46)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from fractions import Fraction\n\ndef get_digit(n):\n    \"\"\"\n    Get the nth digit of the fractional part of a number.\n    \"\"\"\n    return str(Fraction(n).numerator)[n-1]\n\ndef get_nth_digit(n):\n    \"\"\"\n    Get the nth digit of the proper fraction of two given numbers.\n    \"\"\"\n    return get_digit(n) + get_digit(n)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for i in range(n):\n        print(get_nth_digit(i+1))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def nth_digit_in_fraction(num1, num2, n):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # num1 / num2 * 10^(n-1)\n    return (num1 / num2) * pow(10, n-1)\n\n\n# Your nthDigitInFraction solution here."
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from fractions import Fraction\n\n\ndef find_digit(num1, num2, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    Input:\n        num1, num2: The first and second number in the fraction.\n        n: The index of the digit that we are looking for.\n    \"\"\"\n\n    num1_str, num2_str = str(num1), str(num2)\n\n    # If the fraction is less than one, then the fraction is less than one.\n    if num1_str < num2_str:\n        return 0\n\n    # If the fraction is greater than one, then the fraction is greater than one.\n    if num1_str > num2_str:\n        return 9\n\n    # Otherwise, the fraction is between the two numbers.\n    num1_int, num2_int = int(num1_str), int(num2_str)\n\n    # Find the nth digit in the proper fraction of two numbers.\n    return (num1_int - num2_int) % 10\n\n\n# Test Cases\nprint(find_digit(2, 3, 2))\nprint(find_digit(2, 3, 3))\nprint(find_digit(2, 3, 4))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def get_digit(num, digit_num):\n    return num % 10 ** digit_num\n\ndef get_fraction(num1, num2):\n    return num1 / 10 ** (num2 - 1)\n\ndef get_digit_nth(num, digit_num):\n    return get_digit(num, digit_num)\n\ndef get_fraction_nth(num1, num2, digit_num):\n    return get_fraction(num1, digit_num)\n\ndef main():\n    num1 = int(input())\n    num2 = int(input())\n    digit_num = int(input())\n\n    num_digit = get_digit_nth(num1, digit_num)\n    fraction_digit = get_fraction_nth(num1, num2, digit_num)\n\n    if num_digit == fraction_digit:\n        print(num_digit)\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def get_digit(n, num1, num2):\n\t\"\"\"\n\tn: integer, the nth digit to be found in the fraction of two numbers\n\tnum1, num2: two numbers, in the fraction of two, to be used\n\t\"\"\"\n\tif n == 0:\n\t\treturn num1 % 10\n\telif n == 1:\n\t\treturn num2 % 10\n\telif n == 2:\n\t\treturn (num1 % 10) * 10 + (num2 % 10)\n\telif n == 3:\n\t\treturn (num1 % 10) * 100 + (num2 % 10) * 10\n\telif n == 4:\n\t\treturn (num1 % 10) * 1000 + (num2 % 10) * 100\n\telif n == 5:\n\t\treturn (num1 % 10) * 10000 + (num2 % 10) * 1000\n\telif n == 6:\n\t\treturn (num1 % 10) * 100000 + (num2 % 10) * 10000\n\telif n == 7:\n\t\treturn (num1 % 10) * 1000000 + (num2 % 10) * 100000\n\telif n == 8:\n\t\treturn (num1 % 10) * 10000000 + (num2 % 10) * 1000000\n\telif n == 9:\n\t\treturn (num1 % 10) * 100000000 + (num2 % 10) * 10000000\n\telif n == 10:\n\t\treturn (num1 % 10) * 1000000000 + (num2 % 10) * 100000000\n\telse:\n\t\treturn 0\n\ndef get_digit_fraction(n, num1, num2):\n\t\"\"\"\n\tn: integer, the nth digit in the fraction of two numbers\n\tnum1, num2: two numbers, in the fraction of two, to be used\n\t\"\"\"\n\tif n == 0:\n\t\treturn num1 % 10, num2 % 10\n\telif n == 1:\n\t\treturn num1 % 10, num2 % 10, num1 % 100, num2 % 100\n\telif n == 2:\n\t\treturn num1 % 10, num2 % 10, num1 % 100, num2 % 100, num1 % 1000, num2 % 1000\n\telif n == 3:"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def nth_digit(n, a, b):\n    \"\"\"\n    :type n: int\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return str(a)[n] - str(b)[n]\n\nprint nth_digit(1, 1, 2)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_digit(number1, number2, n):\n    '''\n    Input:\n    number1: integer\n    number2: integer\n    n: integer\n    '''\n    \n    # Check if number1 and number2 are integers\n    if not isinstance(number1, int) or not isinstance(number2, int):\n        raise TypeError(\"number1 and number2 must be integers\")\n    \n    # Check if number1 and number2 are not negative\n    if number1 < 0 or number2 < 0:\n        raise ValueError(\"number1 and number2 must not be negative\")\n    \n    # Check if number1 and number2 are not zero\n    if number1 == 0 or number2 == 0:\n        raise ValueError(\"number1 and number2 must not be zero\")\n    \n    # Check if number1 is larger than number2\n    if number1 > number2:\n        raise ValueError(\"number1 must be larger than number2\")\n    \n    # Check if number1 is not greater than n\n    if number1 > n:\n        raise ValueError(\"number1 must not be greater than n\")\n    \n    # Check if number2 is not greater than n\n    if number2 > n:\n        raise ValueError(\"number2 must not be greater than n\")\n    \n    # Check if number2 is not greater than number1\n    if number2 > number1:\n        raise ValueError(\"number2 must not be greater than number1\")\n    \n    # Calculate the result\n    result = str(number1)[number1 - 1]\n    \n    # Check if the result is in the correct fraction\n    if number2 / number1 > n:\n        # The result is not in the correct fraction\n        result = \"0\"\n    \n    return result\n\nif __name__ == \"__main__\":\n    # Test cases\n    # Test case 1\n    test_number1 = 10\n    test_number2 = 20\n    test_n = 3\n    \n    result = find_digit(test_number1, test_number2, test_n)\n    print \"Result:\", result\n    \n    # Test case 2\n    test_number1 = 10\n    test_number2 = 20\n    test_"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_digit(n, a, b):\n\treturn str(a/b)[(n-1)/2]\n\n\na = int(input())\nb = int(input())\nprint(find_digit(a, a, b))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/digit-nth/problem\n\ndef nth_digit(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 0\n    elif n == 11:\n        return 1\n    elif n == 12:\n        return 2\n    elif n == 13:\n        return 3\n    elif n == 14:\n        return 4\n    elif n == 15:\n        return 5\n    elif n == 16:\n        return 6\n    elif n == 17:\n        return 7\n    elif n == 18:\n        return 8\n    elif n == 19:\n        return 9\n    else:\n        return 0\n\n\ndef main():\n    n = int(input())\n    print(nth_digit(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# This is the function that I am trying to write.\n# It should print out the nth digit of the fraction of two given numbers.\n\n# This is how I have to think about it:\n# If I want to print the nth digit of the fraction of two given numbers,\n# I have to find the fraction of the two numbers.\n# Then, I can use the value of the nth digit of the fraction of the two numbers to get the nth digit of the fraction of two numbers.\n\n# This is the code I am trying to write.\ndef nth_digit(n, p, q):\n    # Convert the fraction of two numbers to the fraction of the first number.\n    p_fraction = p / q\n    # Convert the fraction of the first number to the fraction of the second number.\n    q_fraction = q / p\n    # Convert the fraction of the second number to the fraction of the first number.\n    p_fraction_fraction = p_fraction / q\n    # Convert the fraction of the first number to the fraction of the second number.\n    q_fraction_fraction = q_fraction / p\n    # Calculate the nth digit.\n    nth_digit = p_fraction_fraction * (n + 1)\n    # Return the nth digit.\n    return nth_digit\n\n# I am trying to write the function.\n# I am not sure if I can do this.\n# I am going to write the function, and then I will write the test program.\n\n# I am going to write the function.\n# I am not sure if I can do this.\n# I am going to write the function, and then I will write the test program.\n\n# I am going to write the function.\n# I am not sure if I can do this.\n# I am going to write the function, and then I will write the test program.\n\n# I am going to write the function.\n# I am not sure if I can do this.\n# I am going to write the function, and then I will write the test program.\n\n# I am going to write the function.\n# I am not sure if I can do this.\n# I am going to write the function, and then I will write the"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# First, we need to get the number of digits in the fraction.\n# We can do this using the math module.\n# The math module has the function modf() that gives us the numerator and denominator of the fraction.\n# Then we can do the modf() on our number.\n# The modf() function returns a tuple of (num, den), where num is the numerator and den is the denominator.\n# We can use the modf() function to get the numerator and denominator, then multiply the denominator by 10,\n# and then divide the result by the denominator.\n# The first step is to get the number of digits in the fraction.\n# The second step is to get the numerator and denominator of the fraction.\n# The third step is to multiply the denominator by 10, and then divide the result by the denominator.\n# The fourth step is to add the numerator and denominator together.\n# The fifth step is to return the result.\n\ndef get_nth_digit(n, num, den):\n    # We need to get the number of digits in the fraction.\n    # We can do this using the math module.\n    # The math module has the function modf() that gives us the numerator and denominator of the fraction.\n    # Then we can do the modf() on our number.\n    # The modf() function returns a tuple of (num, den), where num is the numerator and den is the denominator.\n    # We can use the modf() function to get the numerator and denominator, then multiply the denominator by 10,\n    # and then divide the result by the denominator.\n    # The first step is to get the number of digits in the fraction.\n    # The second step is to get the numerator and denominator of the fraction.\n    # The third step is to multiply the denominator by 10, and then divide the result by the denominator.\n    # The fourth step is to add the numerator and denominator together.\n    # The fifth step is to return the result.\n    #num_digits = len(str(num))\n    #den_digits = len(str(den))\n    #print(\"num_digits: \", num_digits)\n    #print(\"den"
    },
    {
      "rank": 13,
      "score": 9.996220777073379,
      "candidate": "import math\n\n\ndef get_digit(num, denom, n):\n    if num % denom == 0:\n        return int(str(num/denom)[n])\n    else:\n        return 0\n\n\ndef find_digit(num, denom):\n    if num % denom == 0:\n        return int(str(num/denom)[1])\n    else:\n        return 0\n\n\ndef main():\n    num = int(input('Enter a number: '))\n    denom = int(input('Enter a denominator: '))\n\n    result = get_digit(num, denom, 2)\n    result += get_digit(num, denom, 1)\n\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 9.979837165957507,
      "candidate": "import sys\nimport math\n\ndef findNthDigit(num1, num2, n):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = num1 + num2\n    return (sum / 10) % 10\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 3:\n        print(\"Invalid number of arguments\")\n        sys.exit(1)\n    num1 = int(sys.argv[1])\n    num2 = int(sys.argv[2])\n    n = int(sys.argv[3])\n\n    print(findNthDigit(num1, num2, n))"
    },
    {
      "rank": 15,
      "score": 9.967618480931293,
      "candidate": "def get_digit_of_fraction(num1, num2, n):\n    '''\n    Input: num1, num2, n\n    Output: nth digit of fraction\n    '''\n    \n    # If the fraction is less than 1/10\n    if num1/num2 < 10:\n        return 0\n\n    # If the fraction is less than 1/100\n    if num1/num2 < 100:\n        return 1\n\n    # If the fraction is less than 1/1000\n    if num1/num2 < 1000:\n        return 2\n\n    # If the fraction is less than 1/10000\n    if num1/num2 < 10000:\n        return 3\n\n    # If the fraction is less than 1/100000\n    if num1/num2 < 100000:\n        return 4\n\n    # If the fraction is less than 1/1000000\n    if num1/num2 < 1000000:\n        return 5\n\n    # If the fraction is less than 1/10000000\n    if num1/num2 < 10000000:\n        return 6\n\n    # If the fraction is less than 1/100000000\n    if num1/num2 < 100000000:\n        return 7\n\n    # If the fraction is less than 1/1000000000\n    if num1/num2 < 1000000000:\n        return 8\n\n    # If the fraction is less than 1/10000000000\n    if num1/num2 < 10000000000:\n        return 9\n\n    # If the fraction is less than 1/100000000000\n    if num1/num2 < 100000000000:\n        return 10\n\n    # If the fraction is less than 1/1000000000000\n    if num1/num2 < 1000000000000:\n        return 11\n\n    # If the fraction is less than 1/10000000000000\n    if num1/num2 < 10000000000000:\n        return 12\n\n    # If the fraction is less than 1/100000000000000\n    if num1/num2 < 100000000000000:\n        return 13\n\n    # If the fraction is less than 1/100000000000000000\n    if num1/num2 < 1000000000000000:\n        return 14\n\n    # If the fraction is less than 1/1000000000000000\n    if num1/num2 <"
    },
    {
      "rank": 16,
      "score": 9.948015486534132,
      "candidate": "from fractions import Fraction\n\ndef get_digit_in_fraction(n, a, b):\n    fraction = Fraction(a, b)\n    return fraction.numerator % 10 ** n\n\n\ndef main():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    n = int(input(\"Enter the digit position: \"))\n\n    result = get_digit_in_fraction(n, a, b)\n\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 9.93678263586377,
      "candidate": "def find_digit(n, a, b):\n    if (n < 0):\n        raise ValueError(\"n must be >= 0\")\n    if (n == 0):\n        return a\n    if (n == 1):\n        return b\n    if (n == 2):\n        return a / b\n    if (n == 3):\n        return a % b\n    if (n == 4):\n        return b / a\n    if (n == 5):\n        return b % a\n    if (n == 6):\n        return a % b\n    if (n == 7):\n        return b % a\n    if (n == 8):\n        return a / b\n    if (n == 9):\n        return a % b\n    if (n == 10):\n        return b / a\n    if (n == 11):\n        return b % a\n    if (n == 12):\n        return a % b\n    if (n == 13):\n        return b % a\n    if (n == 14):\n        return a / b\n    if (n == 15):\n        return a % b\n    if (n == 16):\n        return b / a\n    if (n == 17):\n        return b % a\n    if (n == 18):\n        return a % b\n    if (n == 19):\n        return b % a\n    if (n == 20):\n        return a / b\n    if (n == 21):\n        return a % b\n    if (n == 22):\n        return b / a\n    if (n == 23):\n        return b % a\n    if (n == 24):\n        return a % b\n    if (n == 25):\n        return b % a\n    if (n == 26):\n        return a / b\n    if (n == 27):\n        return a % b\n    if (n == 28):\n        return b / a\n    if (n == 29):\n        return b % a\n    if (n == 30):\n        return a / b\n    if (n == 31):\n        return a % b\n    if (n == 32):\n        return b / a\n    if (n == 33):\n        return b % a\n    if (n == 34):"
    },
    {
      "rank": 18,
      "score": 9.91342053476166,
      "candidate": "# Complete the function below.\n\ndef find_digit(n, num1, num2):\n    if num2 == 0:\n        return 0\n    if num1 == 0:\n        return 0\n    if num2 == num1:\n        return 1\n    \n    if n == 1:\n        return num2 % 10\n    \n    if n == 2:\n        return num2 % 100\n    \n    if n == 3:\n        return num2 % 1000\n    \n    return num2 % 10000\n\nif __name__ == '__main__':\n    print(find_digit(1, 1, 2))\n    print(find_digit(2, 1, 2))\n    print(find_digit(3, 1, 2))\n    print(find_digit(4, 1, 2))\n    print(find_digit(5, 1, 2))\n    print(find_digit(6, 1, 2))\n    print(find_digit(7, 1, 2))\n    print(find_digit(8, 1, 2))\n    print(find_digit(9, 1, 2))\n    print(find_digit(10, 1, 2))\n    print(find_digit(11, 1, 2))\n    print(find_digit(12, 1, 2))\n    print(find_digit(13, 1, 2))\n    print(find_digit(14, 1, 2))\n    print(find_digit(15, 1, 2))\n    print(find_digit(16, 1, 2))\n    print(find_digit(17, 1, 2))\n    print(find_digit(18, 1, 2))\n    print(find_digit(19, 1, 2))\n    print(find_digit(20, 1, 2))\n    print(find_digit(21, 1, 2))\n    print(find_digit(22, 1, 2))\n    print(find_digit(23, 1, 2))\n    print(find_digit(24, 1, 2))\n    print(find_digit(25, 1, 2))\n    print(find_digit(26, 1, 2))\n    print(find_digit(27, 1, 2))\n    print(find_"
    },
    {
      "rank": 19,
      "score": 9.89217696148343,
      "candidate": "def find_nth_digit(a, b, n):\n    '''\n    a: first number\n    b: second number\n    n: the nth digit in the proper fraction of two\n    '''\n    return int(str(a)[-n]) + int(str(b)[-n])\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first number:\"))\n    b = int(input(\"Enter the second number:\"))\n    n = int(input(\"Enter the nth digit of the proper fraction of two:\"))\n    print(find_nth_digit(a, b, n))"
    },
    {
      "rank": 20,
      "score": 9.869595669000327,
      "candidate": "import math\nfrom fractions import Fraction\n\ndef get_nth_digit(n, x, y):\n    '''\n    x and y are two numbers.\n    n is the number of digits you want to find.\n    '''\n\n    fraction_x = Fraction(x)\n    fraction_y = Fraction(y)\n\n    if n == 0:\n        return fraction_x.numerator\n    elif n == 1:\n        return fraction_x.denominator\n    else:\n        return get_nth_digit(n - 1, fraction_x.numerator, fraction_x.denominator)\n\n\ndef main():\n    n = int(input())\n    x = int(input())\n    y = int(input())\n    print(get_nth_digit(n, x, y))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 9.854884338883378,
      "candidate": "# Definition for a fraction.\nclass Fraction:\n    def __init__(self, num=0, den=1):\n        self.num = num\n        self.den = den\n    def __repr__(self):\n        return \"Fraction({}, {})\".format(self.num, self.den)\n\nclass Solution(object):\n    def getNthDigit(self, n, num, den):\n        \"\"\"\n        :type n: int\n        :type num: int\n        :type den: int\n        :rtype: int\n        \"\"\"\n        if den == 0:\n            return 0\n        if num == 0:\n            return 0\n        if n == 1:\n            return num % 10\n        if n == 2:\n            return int(num / den) % 10\n        if n == 3:\n            return int(num / den / den) % 10\n        if n == 4:\n            return int(num / den / den / den) % 10\n        if n == 5:\n            return int(num / den / den / den / den) % 10\n        if n == 6:\n            return int(num / den / den / den / den / den) % 10\n        if n == 7:\n            return int(num / den / den / den / den / den / den) % 10\n        if n == 8:\n            return int(num / den / den / den / den / den / den / den) % 10\n        if n == 9:\n            return int(num / den / den / den / den / den / den / den / den) % 10\n        if n == 10:\n            return int(num / den / den / den / den / den / den / den / den / den) % 10\n        if n == 11:\n            return int(num / den / den / den / den / den / den / den / den / den / den / den) % 10\n        if n == 12:\n            return int(num / den / den / den / den / den / den / den / den / den / den / den / den / den) % 10\n        if n == 13:\n            return int(num / den / den / den / den / den / den / den / den / den"
    },
    {
      "rank": 22,
      "score": 9.842559491812528,
      "candidate": "# from functools import reduce\n\ndef nth_digit(n, x, y):\n    \"\"\"\n    n: integer, the nth digit to be calculated\n    x, y: two numbers\n    \"\"\"\n\n    return reduce(lambda a, b: a * 10 + b, (x, y)) % 10\n\n\n\nif __name__ == \"__main__\":\n    x, y = map(int, input().split())\n    print(nth_digit(int(input()), x, y))"
    },
    {
      "rank": 23,
      "score": 9.798443621649481,
      "candidate": "def get_digit(n, num1, num2):\n    if num1 == num2:\n        return n\n    elif num1 > num2:\n        return get_digit(n, num2, num1)\n    else:\n        return get_digit(n, num1, num2)\n\ndef get_fraction(n, num1, num2):\n    if n == 0:\n        return num1 / num2\n    else:\n        return get_fraction(n-1, num1, num2)\n\ndef get_fraction_python(n, num1, num2):\n    if n == 0:\n        return num1 / num2\n    else:\n        return get_fraction_python(n-1, num1, num2)\n\nif __name__ == '__main__':\n    test_cases = [\n        (0, 1, 2),\n        (1, 1, 2),\n        (2, 1, 2),\n        (3, 1, 2),\n        (4, 1, 2),\n        (5, 1, 2),\n        (6, 1, 2),\n        (7, 1, 2),\n        (8, 1, 2),\n        (9, 1, 2),\n        (10, 1, 2),\n        (11, 1, 2),\n        (12, 1, 2),\n        (13, 1, 2),\n        (14, 1, 2),\n        (15, 1, 2),\n        (16, 1, 2),\n        (17, 1, 2),\n        (18, 1, 2),\n        (19, 1, 2),\n        (20, 1, 2),\n        (21, 1, 2),\n        (22, 1, 2),\n        (23, 1, 2),\n        (24, 1, 2),\n        (25, 1, 2),\n        (26, 1, 2),\n        (27, 1, 2),\n        (28, 1, 2),\n        (29, 1, 2),\n        (30, 1, 2),\n        (31, 1, 2),\n        (32, 1, 2),\n        (33, 1, 2),\n        (34, 1"
    },
    {
      "rank": 24,
      "score": 9.74575325885406,
      "candidate": "def find_digit(n, num1, num2):\n    \"\"\"\n    :type n: int\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    return num1 / (num2 ** (n - 1))\n\nif __name__ == '__main__':\n    print find_digit(4, 12, 30)\n    print find_digit(3, 8, 7)\n    print find_digit(3, 8, 8)"
    },
    {
      "rank": 25,
      "score": 9.690226207278313,
      "candidate": "import math\n\ndef get_digit(n, num1, num2):\n    return str(int(num1 / num2) % 10)\n\ndef is_even(num):\n    return num % 2 == 0\n\ndef is_odd(num):\n    return num % 2!= 0\n\ndef get_digit_in_proper_fraction(n, num1, num2):\n    if n == 1:\n        return str(int(num1 / num2) % 10)\n    elif n == 2:\n        if is_even(num1) and is_odd(num2):\n            return str(int(num1 / num2) % 10)\n        elif is_odd(num1) and is_even(num2):\n            return str(int(num2 / num1) % 10)\n        else:\n            return str(int(num1 / num2) % 10)\n    elif n == 3:\n        if is_even(num1) and is_even(num2):\n            return str(int(num1 / num2) % 10)\n        elif is_odd(num1) and is_odd(num2):\n            return str(int(num2 / num1) % 10)\n        else:\n            return str(int(num1 / num2) % 10)\n    elif n == 4:\n        if is_even(num1) and is_odd(num2):\n            return str(int(num1 / num2) % 10)\n        elif is_odd(num1) and is_even(num2):\n            return str(int(num2 / num1) % 10)\n        else:\n            return str(int(num1 / num2) % 10)\n    elif n == 5:\n        if is_even(num1) and is_even(num2):\n            return str(int(num1 / num2) % 10)\n        elif is_odd(num1) and is_odd(num2):\n            return str(int(num2 / num1) % 10)\n        else:\n            return str(int(num1 / num2) % 10)\n    elif n == 6:"
    },
    {
      "rank": 26,
      "score": 9.665062145257412,
      "candidate": "def nth_digit(n, x, y):\n    return int(str(x) + str(y)[-n:])\n\nif __name__ == '__main__':\n    n = int(input())\n    x, y = map(int, input().split())\n    print(nth_digit(n, x, y))"
    },
    {
      "rank": 27,
      "score": 9.604554963626118,
      "candidate": "def nth_digit(n, num1, num2):\n    \"\"\"\n    :type n: int\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    if num1 == 0 or num2 == 0:\n        return 0\n    if num1 < num2:\n        num1, num2 = num2, num1\n    # print(num1, num2, num1 / num2)\n    if num1 % num2 == 0:\n        # print(num1 / num2)\n        # print(num1 % num2)\n        return nth_digit(n, num1 / num2, num1 % num2)\n    else:\n        return nth_digit(n, num1, num2 - num1)\n\n\nif __name__ == '__main__':\n    print(nth_digit(2, 1, 2))"
    },
    {
      "rank": 28,
      "score": 9.44348070391175,
      "candidate": "def get_digit(num, n):\n    return int(str(num)[n])\n\ndef get_digit_count(num):\n    return len(str(num))\n\ndef get_nth_digit(num, n):\n    return get_digit(num, n)\n\ndef get_digit_count_n(num):\n    return get_digit_count(num)\n\ndef main():\n    num = 123\n    print(get_digit_n(num, 3))\n    print(get_digit_count_n(num))\n    num = 123\n    print(get_digit(num, 3))\n    print(get_digit_count(num))\n    print(get_digit_n(num, 0))\n    print(get_digit_count_n(num))\n    num = 12345\n    print(get_digit_n(num, 2))\n    print(get_digit_count_n(num))\n    num = 12345\n    print(get_digit(num, 2))\n    print(get_digit_count(num))\n    num = 1234567\n    print(get_digit_n(num, 1))\n    print(get_digit_count_n(num))\n    num = 1234567\n    print(get_digit(num, 1))\n    print(get_digit_count(num))\n    num = 123456789\n    print(get_digit_n(num, 0))\n    print(get_digit_count_n(num))\n    num = 123456789\n    print(get_digit(num, 0))\n    print(get_digit_count(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 9.370583536698913,
      "candidate": "def find_digit(n,x,y):\n    nth_digit = 0\n    for i in range(1,len(str(y))):\n        nth_digit += int(str(y)[i]) * pow(10,len(str(x))-i)\n    return nth_digit\n\ndef main():\n    print find_digit(5,4,1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 9.234050852198141,
      "candidate": "def nth_digit(n, num1, num2):\n    \"\"\"\n    @param n: The number we want to find\n    @param num1: The first number\n    @param num2: The second number\n    @return: The nth digit of the fraction of num1/num2\n    \"\"\"\n    return int(str(num1) + str(num2)[-n:])\n\nif __name__ == '__main__':\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n    print(\"The nth digit of the fraction of {0}/{1} is {2}\".format(num1, num2, nth_digit(3, num1, num2)))"
    },
    {
      "rank": 31,
      "score": 9.226766272351448,
      "candidate": "import math\n\ndef get_digit(num1, num2):\n\treturn int(math.floor(num1/num2))\n\ndef find_digit(num1, num2, digit):\n\treturn num1/num2*digit\n\ndef main():\n\tprint find_digit(2, 3, 1)\n\tprint find_digit(2, 3, 2)\n\tprint find_digit(2, 3, 3)\n\tprint find_digit(2, 3, 4)\n\tprint find_digit(2, 3, 5)\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 32,
      "score": 9.21346272767743,
      "candidate": "def nthDigit(n, a, b):\n    if a == 0 or b == 0:\n        return 0\n    return (a % 10 + b % 10) % 10\n\nif __name__ == '__main__':\n    a, b = map(int, input().split())\n    print(nthDigit(a, b, 0))"
    },
    {
      "rank": 33,
      "score": 9.205959372648458,
      "candidate": "def nth_digit(n, x, y):\n    return int(str(x)[n-1]) + int(str(y)[n-1])\n\nif __name__ == '__main__':\n    print(nth_digit(4, 2, 3))"
    },
    {
      "rank": 34,
      "score": 9.183391466815202,
      "candidate": "# I used a brute-force approach. It took me a while to get this to work.\n\ndef nth_digit(n, x, y):\n    return (x * 10 + y) % 10\n\ndef main():\n    x, y = map(int, input().split())\n    print(nth_digit(x, y, 0))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 9.122564458729856,
      "candidate": "def find_digit(n, num1, num2):\n    \"\"\"\n    :param n: integer\n    :param num1: integer\n    :param num2: integer\n    :return: integer\n    \"\"\"\n    return (num1 % 10 + num2 % 10) % 10\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    num1 = int(input())\n    num2 = int(input())\n    n = int(input())\n    digit = find_digit(n, num1, num2)\n    print(digit)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.973005557553902,
      "candidate": "import math\n\ndef get_nth_digit(number1, number2, n):\n    if not number1 or not number2:\n        return False\n    if number1 == number2:\n        return False\n    if n < 1 or n > len(str(number1)):\n        return False\n    \n    if number1 == 0 or number2 == 0:\n        return False\n    \n    if number1 == number2:\n        return False\n    \n    if n == 1:\n        return str(number1)[n - 1]\n    \n    if n == len(str(number1)) - 1:\n        return str(number2)[n - 1]\n    \n    for i in range(n - 2, -1, -1):\n        if str(number1)[i]!= str(number2)[i]:\n            return False\n    \n    return str(number1)[n - 1]\n\nif __name__ == \"__main__\":\n    number1 = int(input(\"Enter first number: \"))\n    number2 = int(input(\"Enter second number: \"))\n    n = int(input(\"Enter the nth digit: \"))\n    print(get_nth_digit(number1, number2, n))"
    },
    {
      "rank": 37,
      "score": 8.932217008005624,
      "candidate": "# This is a naive approach to this problem.\n# It's not possible to do this with the decimal module, because it doesn't\n# have a way of finding the nth digit.\n\n# This approach is also not efficient.\n# Instead, we'll use the decimal module to find the nth digit.\n\ndef find_nth_digit(n, num1, num2):\n    \"\"\"\n    Finds the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    # Get the numerator and denominator of the fraction.\n    num1 = float(num1)\n    num2 = float(num2)\n    num_nth = float(num1)/num2\n\n    # Get the digits of the fraction.\n    digits = str(num_nth)\n\n    # Get the index of the digit in the fraction.\n    digit_index = int(digits[n-1])\n\n    # Return the digit.\n    return digit_index\n\nif __name__ == '__main__':\n    # Test cases\n    num1 = '4/3'\n    num2 = '6/5'\n    n = 2\n\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num2)\n    print find_nth_digit(n, num1, num"
    },
    {
      "rank": 38,
      "score": 8.910084504002544,
      "candidate": "def get_digit(n):\n    if n < 1 or n > 100:\n        raise ValueError(\"n should be between 1 and 100\")\n    \n    return (n + 1) % 10\n\ndef get_fraction(a, b):\n    \"\"\"\n    Return the proper fraction of two given numbers.\n    a is the first number, b is the second number.\n    \"\"\"\n    return (a * get_digit(b)) / (b * get_digit(a))\n\ndef get_fraction_python(a, b):\n    \"\"\"\n    Return the proper fraction of two given numbers.\n    a is the first number, b is the second number.\n    \"\"\"\n    return (a * get_digit(b)) / (b * get_digit(a))\n\ndef main():\n    print(get_fraction(1, 2))\n    print(get_fraction_python(1, 2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 39,
      "score": 8.85571690049604,
      "candidate": "def nth_digit(n, num1, num2):\n    return num1/num2 % 10 + num2/num1 % 10\n\nif __name__ == \"__main__\":\n    n = int(input())\n    num1 = int(input())\n    num2 = int(input())\n    print(nth_digit(n, num1, num2))"
    },
    {
      "rank": 40,
      "score": 8.855395696632057,
      "candidate": "def find_digit(number1, number2, digit):\n    \"\"\"\n    number1 is the first number to be considered.\n    number2 is the second number to be considered.\n    digit is the digit that needs to be found.\n    \"\"\"\n    if number1 == 0 or number2 == 0:\n        return None\n    if number1 < 0 and number2 < 0:\n        return None\n    elif number1 < 0 and number2 > 0:\n        return None\n    elif number1 > 0 and number2 < 0:\n        return None\n    elif number1 > 0 and number2 > 0:\n        return None\n    elif number1 == number2:\n        return number1 % 10\n    elif number1 < number2:\n        return find_digit(number1, number2 / 10, digit)\n    elif number1 > number2:\n        return find_digit(number1 / 10, number2, digit)\n\nif __name__ == '__main__':\n    print find_digit(0, 2, 3)\n    print find_digit(0, 0, 3)\n    print find_digit(1, 1, 3)\n    print find_digit(1, 0, 3)\n    print find_digit(0, 1, 3)\n    print find_digit(0, 0, 3)"
    },
    {
      "rank": 41,
      "score": 8.8281618090209,
      "candidate": "def find_nth_digit(a, b, n):\n    \"\"\"\n    Input: a, b, n\n    Output: the nth digit of the proper fraction of two given numbers.\n    \"\"\"\n    return (a + b) % 10\n\nif __name__ == '__main__':\n    a, b = int(input()), int(input())\n    n = int(input())\n    print(find_nth_digit(a, b, n))"
    },
    {
      "rank": 42,
      "score": 8.715724466237427,
      "candidate": "def nth_digit(n, num1, num2):\n\t\"\"\"\n\tGiven n, num1, and num2, return the nth digit of the proper fraction of num1/num2.\n\t\"\"\"\n\t#nth digit = (num1/num2) % 10\n\t#nth digit = (num2 % 10) * (num1 % 10)\n\t#nth digit = (num2 % 10) * (num1 % 10) / 10\n\tnth_digit = num1 % 10\n\tnth_digit = num2 % 10\n\tnth_digit = nth_digit / 10\n\treturn nth_digit\n\nprint nth_digit(3, 2, 1)"
    },
    {
      "rank": 43,
      "score": 8.692801520950061,
      "candidate": "def nth_digit(n, a, b):\n    # Write your code here\n    assert n >= 0\n    assert a > 0 and b > 0\n    assert a < b\n\n    # Get the difference of a and b\n    diff = a - b\n    # Find the nth digit\n    result = pow(diff, (n - 1))\n    return result\n\nif __name__ == \"__main__\":\n    print nth_digit(10, 5, 7)\n    print nth_digit(1, 3, 6)\n    print nth_digit(2, 3, 4)\n    print nth_digit(3, 3, 4)\n    print nth_digit(5, 3, 4)\n    print nth_digit(8, 3, 4)"
    },
    {
      "rank": 44,
      "score": 8.632293453617281,
      "candidate": "def findDigit(num1, num2, n):\n    return num1 / pow(10, n) % 10\n\nprint findDigit(3, 4, 1)\nprint findDigit(2, 2, 3)\nprint findDigit(7, 3, 2)\nprint findDigit(2, 3, 1)\nprint findDigit(5, 1, 1)"
    },
    {
      "rank": 45,
      "score": 8.623000730200317,
      "candidate": "def find_nth_digit(n, a, b):\n    \"\"\"\n    n = the nth digit\n    a = the first number\n    b = the second number\n    \"\"\"\n\n    return int(a/b) + (n-1)*10\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(find_nth_digit(a, a, b))"
    },
    {
      "rank": 46,
      "score": 8.616253589228675,
      "candidate": "from math import ceil, floor\n\n\ndef nth_digit(n, x, y):\n    \"\"\"\n    n: the number of digit\n    x: the first number\n    y: the second number\n    return: the nth digit\n    \"\"\"\n    return str(int(ceil(x / float(y)) * 10 ** n))[-1]\n\n\ndef test_nth_digit():\n    assert nth_digit(1, 1, 2) == '1'\n    assert nth_digit(1, 2, 3) == '2'\n    assert nth_digit(2, 1, 2) == '0'\n    assert nth_digit(2, 2, 3) == '2'\n    assert nth_digit(3, 1, 2) == '1'\n    assert nth_digit(3, 2, 3) == '2'\n    assert nth_digit(4, 1, 2) == '1'\n    assert nth_digit(4, 2, 3) == '2'\n    assert nth_digit(5, 1, 2) == '1'\n    assert nth_digit(5, 2, 3) == '2'\n\n\nif __name__ == '__main__':\n    test_nth_digit()"
    },
    {
      "rank": 47,
      "score": 8.610076160146226,
      "candidate": "def find_digit(n, num1, num2):\n    n = str(n)\n    num1 = str(num1)\n    num2 = str(num2)\n    if len(num1) == 0:\n        return 0\n    if len(num2) == 0:\n        return 0\n    if len(num1) > len(num2):\n        num1, num2 = num2, num1\n    if num1[0]!= num2[0]:\n        return 0\n    n = int(n)\n    num1 = int(num1)\n    num2 = int(num2)\n    if num1 > num2:\n        num1, num2 = num2, num1\n    return n % num1 / num2\n\n\ndef main():\n    n = int(input())\n    num1 = int(input())\n    num2 = int(input())\n    print(find_digit(n, num1, num2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 8.606486429141842,
      "candidate": "from fractions import Fraction\n\ndef nth_digit(n, x, y):\n    x = int(x)\n    y = int(y)\n    return Fraction(x, y).nth_digit(n)\n\ndef test_nth_digit():\n    assert nth_digit(1, 3, 4) == 1\n    assert nth_digit(5, 5, 5) == 5\n    assert nth_digit(3, 4, 5) == 2\n    assert nth_digit(7, 3, 4) == 3\n    assert nth_digit(7, 3, 5) == 5\n    assert nth_digit(7, 3, 6) == 6\n    assert nth_digit(7, 3, 7) == 7\n\nif __name__ == \"__main__\":\n    test_nth_digit()"
    },
    {
      "rank": 49,
      "score": 8.60156811074208,
      "candidate": "import math\n\ndef find_digit(n, a, b):\n    return int(math.floor(float(a)/b)) % 10\n\nprint find_digit(1, 1, 2)\nprint find_digit(1, 2, 3)\nprint find_digit(4, 2, 3)\nprint find_digit(4, 3, 5)"
    },
    {
      "rank": 50,
      "score": 8.565425580227462,
      "candidate": "#!/usr/bin/env python\n\ndef find_digit(n, p, q):\n    return int(str(p) + str(q)[n - 1])\n\nif __name__ == \"__main__\":\n    n = int(input())\n    p = int(input())\n    q = int(input())\n    print(find_digit(n, p, q))"
    },
    {
      "rank": 51,
      "score": 8.53012858503943,
      "candidate": "def get_nth_digit(a,b,n):\n    \"\"\"\n    a: A positive integer\n    b: A positive integer\n    n: An integer\n    return: The nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    return a/b%10\n\nif __name__ == \"__main__\":\n    print get_nth_digit(1,2,2)\n    print get_nth_digit(1,2,3)"
    },
    {
      "rank": 52,
      "score": 8.490324832712195,
      "candidate": "def find_digit(n, d1, d2):\n    \"\"\"\n    n: integer\n    d1: integer\n    d2: integer\n    Returns:\n    The nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    # calculate the proper fraction\n    fraction = (d2 - d1) / (d2 + 1)\n    # calculate the digit\n    return str(fraction)[n]\n\n\ndef test_find_digit():\n    assert find_digit(3, 3, 5) == '2'\n    assert find_digit(3, 5, 3) == '2'\n    assert find_digit(4, 3, 5) == '0'\n    assert find_digit(3, 5, 7) == '3'\n    assert find_digit(3, 9, 5) == '5'\n    assert find_digit(6, 3, 5) == '2'\n    assert find_digit(2, 3, 5) == '2'\n\n\nif __name__ == '__main__':\n    test_find_digit()"
    },
    {
      "rank": 53,
      "score": 8.48796797856353,
      "candidate": "def nth_digit(n, a, b):\n    \"\"\"\n    nth_digit(n, a, b) -> int\n    \n    n is the nth digit to be found in the fraction of two given numbers.\n    a and b are the two numbers involved.\n    \n    Example:\n    nth_digit(1, 3, 7) = 1\n    nth_digit(2, 3, 7) = 2\n    nth_digit(3, 3, 7) = 3\n    nth_digit(4, 3, 7) = 4\n    nth_digit(5, 3, 7) = 5\n    nth_digit(6, 3, 7) = 6\n    nth_digit(7, 3, 7) = 7\n    nth_digit(8, 3, 7) = 8\n    nth_digit(9, 3, 7) = 9\n    nth_digit(10, 3, 7) = 10\n    nth_digit(11, 3, 7) = 11\n    nth_digit(12, 3, 7) = 12\n    nth_digit(13, 3, 7) = 13\n    nth_digit(14, 3, 7) = 14\n    nth_digit(15, 3, 7) = 15\n    nth_digit(16, 3, 7) = 16\n    nth_digit(17, 3, 7) = 17\n    nth_digit(18, 3, 7) = 18\n    nth_digit(19, 3, 7) = 19\n    nth_digit(20, 3, 7) = 20\n    nth_digit(21, 3, 7) = 21\n    nth_digit(22, 3, 7) = 22\n    nth_digit(23, 3, 7) = 23\n    nth_digit(24, 3, 7) = 24\n    nth_digit(25, 3, 7) = 25\n    nth_digit(26, 3, 7) = 26\n    nth_digit(27, 3, 7) = 27\n    nth_digit(28, 3, 7) = 28\n    nth_digit(29, 3, 7) = 29\n    nth_digit(30"
    },
    {
      "rank": 54,
      "score": 8.478208546788407,
      "candidate": "def get_digit(num1, num2, n):\n\t\"\"\"\n\tGet the nth digit in the proper fraction of two given numbers.\n\n\tInput:\n\t\tnum1: first number.\n\t\tnum2: second number.\n\t\tn: the nth digit.\n\n\tOutput:\n\t\tThe nth digit in the proper fraction of two given numbers.\n\n\tExplanation:\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of two numbers is num1 / num2.\n\t\tThe fraction of"
    },
    {
      "rank": 55,
      "score": 8.426531424889468,
      "candidate": "def find_digit(n, num1, num2):\n    \"\"\"\n    :type n: int\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    if num1 % num2!= 0:\n        return -1\n    if num1 == num2:\n        return 0\n    if num2 % num1!= 0:\n        return -1\n    num1, num2 = num1 / num2, num2 / num1\n    n = 0\n    while num1 > 0:\n        n += 1\n        num1 /= 10\n    return n\n\n\nif __name__ == '__main__':\n    print find_digit(1, 4, 5)\n    print find_digit(2, 5, 6)\n    print find_digit(3, 5, 6)\n    print find_digit(4, 5, 6)\n    print find_digit(5, 5, 6)\n    print find_digit(6, 5, 6)\n    print find_digit(7, 5, 6)\n    print find_digit(8, 5, 6)\n    print find_digit(9, 5, 6)\n    print find_digit(10, 5, 6)"
    },
    {
      "rank": 56,
      "score": 8.375312293858853,
      "candidate": "def get_digit(n, p, q):\n    '''\n    Get digit n of the proper fraction of two given numbers.\n    Input:\n        n = integer\n        p = integer\n        q = integer\n    Output:\n        digit of the proper fraction of two given numbers\n    '''\n    return int(n / q) % 10\n\ndef main():\n    print get_digit(2, 3, 4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.334608500525688,
      "candidate": "def find_digit(n):\n    \"\"\"\n    Find the nth digit of the proper fraction of two given numbers.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n    else:\n        if n == 1:\n            return 1\n        else:\n            return (n - 1) * 10 + find_digit(n - 1)\n\n\n\nif __name__ == \"__main__\":\n    # Test cases\n    assert find_digit(1) == 1\n    assert find_digit(2) == 2\n    assert find_digit(3) == 3\n    assert find_digit(4) == 4\n    assert find_digit(5) == 5\n    assert find_digit(6) == 6\n    assert find_digit(7) == 7\n    assert find_digit(8) == 8\n    assert find_digit(9) == 9\n    assert find_digit(10) == 0\n    assert find_digit(11) == 1\n    assert find_digit(12) == 2\n    assert find_digit(13) == 3\n    assert find_digit(14) == 4\n    assert find_digit(15) == 5\n    assert find_digit(16) == 6\n    assert find_digit(17) == 7\n    assert find_digit(18) == 8\n    assert find_digit(19) == 9\n    assert find_digit(20) == 0\n    assert find_digit(21) == 1\n    assert find_digit(22) == 2\n    assert find_digit(23) == 3\n    assert find_digit(24) == 4\n    assert find_digit(25) == 5\n    assert find_digit(26) == 6\n    assert find_digit(27) == 7\n    assert find_digit(28) == 8\n    assert find_digit(29) == 9\n    assert find_digit(30) == 0\n    assert find_digit(31) == 1\n    assert find_digit(32) == 2\n    assert find_digit(33) == 3\n    assert find_digit(34) == 4\n    assert find_digit(35) == 5\n    assert find_digit(36) == 6\n    assert find_digit(37) == 7"
    },
    {
      "rank": 58,
      "score": 8.327375965969855,
      "candidate": "def nthDigit(n, num1, num2):\n    return num1/num2*10 + n\n\n# Test Cases\nprint nthDigit(4, 6, 3)\nprint nthDigit(5, 1, 3)\nprint nthDigit(6, 1, 7)\nprint nthDigit(3, 1, 10)\nprint nthDigit(1, 1, 10)\nprint nthDigit(2, 1, 10)"
    },
    {
      "rank": 59,
      "score": 8.327367757082776,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef find_nth_digit(n, x, y):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n    Input: n = the digit in the proper fraction, x = the numerator of the fraction, y = the denominator of the fraction.\n    Output: The nth digit of the proper fraction.\n    \"\"\"\n\n    n = int(n)\n    if n == 0:\n        return 0\n    if x == 0 or y == 0:\n        return 0\n\n    # If the denominator is 1, then the fraction is 1/x\n    if y == 1:\n        return 1\n\n    # Find the proper fraction by doing a binary search\n    # on the denominator\n    x_div_y = x / y\n    x_div_y_1 = x_div_y - 1\n    while x_div_y > 1 and x_div_y_1 > 1:\n        if x_div_y_1 < x_div_y:\n            x_div_y = x_div_y_1\n        else:\n            x_div_y = x_div_y_1\n        x_div_y_1 = x_div_y - 1\n\n    return x_div_y\n\n\ndef main():\n    try:\n        n = int(sys.argv[1])\n        x = int(sys.argv[2])\n        y = int(sys.argv[3])\n    except:\n        print(\"Usage: python3 {} {} {}\".format(sys.argv[0], sys.argv[1], sys.argv[2]))\n        sys.exit(1)\n\n    result = find_nth_digit(n, x, y)\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.298597569547805,
      "candidate": "#!/usr/bin/python\n\ndef find_digit(n, num1, num2):\n    return (num1 / num2) % 10\n\ndef main():\n    # num1 = 123\n    # num2 = 321\n    num1 = 123\n    num2 = 321\n    print find_digit(2, num1, num2)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.294940769211511,
      "candidate": "def nth_digit(n, a, b):\n    return (a // b) * 10 + (a % b) // (b // 10)\n\nif __name__ == \"__main__\":\n    print nth_digit(2, 5, 2)"
    },
    {
      "rank": 62,
      "score": 8.2938925966498,
      "candidate": "def find_digit(a, b):\n    return (a % 10) * 10 + (b % 10)\n\ndef main():\n    print(find_digit(8, 8))\n    print(find_digit(13, 9))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.214125058964552,
      "candidate": "# Input: num1 = n, num2 = 1\n# Output: nth digit of num2/num1\n\n# Constraints:\n# 1 <= num1 <= 1000\n# 1 <= num2 <= 1000\n# 1 <= n <= 1000\n\ndef nth_digit(num1, num2, n):\n    result = 0\n    while num1!= 0 and num2!= 0:\n        result = result * 10 + num1 % 10\n        num1 = num1 / 10\n        num2 = num2 / 10\n    if n > 0:\n        result = result * 10 + n % 10\n    return result\n\nprint nth_digit(1000, 1, 3)\nprint nth_digit(100, 1, 1)\nprint nth_digit(1000, 1, 10)\nprint nth_digit(1000, 1, 0)\nprint nth_digit(1000, 1, 5)\nprint nth_digit(1000, 1, 7)\nprint nth_digit(1000, 1, 9)"
    },
    {
      "rank": 64,
      "score": 8.212735598038213,
      "candidate": "import math\n\ndef nth_digit(n, a, b):\n    if n == 0:\n        return a % 10\n    elif n == 1:\n        return b % 10\n    elif n == 2:\n        return int((math.sqrt(a * a + b * b) - a) / b)\n    elif n == 3:\n        return int((a * a - b * b) / (a + b))\n    elif n == 4:\n        return int((a * a + b * b) / (a - b))\n    elif n == 5:\n        return int((a * a - b * b) / (a - b))\n    elif n == 6:\n        return int((a * a + b * b) / (a + b))\n    elif n == 7:\n        return int((a * a - b * b) / (a + b))\n    elif n == 8:\n        return int((a * a + b * b) / (a - b))\n    elif n == 9:\n        return int((a * a - b * b) / (a - b))\n    else:\n        return -1\n\nif __name__ == \"__main__\":\n    print(nth_digit(5, 2, 3))"
    },
    {
      "rank": 65,
      "score": 8.209707251476969,
      "candidate": "def find_nth_digit(num1, num2, n):\n    numerator = num1 * 10**(n - 1)\n    denominator = num2 * 10**(n)\n    return numerator // denominator\n\nif __name__ == \"__main__\":\n    num1 = int(input(\"Enter num1: \"))\n    num2 = int(input(\"Enter num2: \"))\n    n = int(input(\"Enter n: \"))\n    print(find_nth_digit(num1, num2, n))"
    },
    {
      "rank": 66,
      "score": 8.2048573255218,
      "candidate": "def find_digit(n, num1, num2):\n    #print(\"num1: %d, num2: %d\" % (num1, num2))\n    #print(\"n: %d\" % n)\n\n    # find the first digit of num1\n    first_digit_of_num1 = num1 % 10\n    #print(\"first digit of num1: %d\" % first_digit_of_num1)\n\n    # find the first digit of num2\n    first_digit_of_num2 = num2 % 10\n    #print(\"first digit of num2: %d\" % first_digit_of_num2)\n\n    # find the number of digits in num1\n    digit_count_num1 = len(str(num1))\n    #print(\"digit count of num1: %d\" % digit_count_num1)\n\n    # find the number of digits in num2\n    digit_count_num2 = len(str(num2))\n    #print(\"digit count of num2: %d\" % digit_count_num2)\n\n    # find the number of digits in the result\n    digit_count_result = digit_count_num1 + digit_count_num2\n\n    # find the nth digit\n    nth_digit = str(first_digit_of_num1 * 10 + first_digit_of_num2 * digit_count_result + n)\n    #print(\"nth digit: %s\" % nth_digit)\n\n    return nth_digit\n\nif __name__ == \"__main__\":\n    # num1 = 9\n    # num2 = 7\n    num1 = 5\n    num2 = 3\n    n = 1\n\n    # find_digit(n, num1, num2)\n    # print(\"The nth digit of %d/%d is %d\" % (num1, num2, find_digit(n, num1, num2)))\n    print(\"The nth digit of %d/%d is %d\" % (num1, num2, find_digit(n, num1, num2)))"
    },
    {
      "rank": 67,
      "score": 8.172253082181854,
      "candidate": "import math\n\ndef get_digit(num, digit):\n\tif digit < 1 or digit > 10:\n\t\treturn None\n\treturn num % 10**digit\n\ndef get_fraction(num1, num2):\n\t# find the numerator\n\tnumerator = num1 // num2\n\t# find the denominator\n\tdenominator = num2\n\t# get the remainder\n\tremainder = num1 - numerator * num2\n\n\t# find the nth digit\n\tdigit = math.floor(remainder / denominator)\n\treturn digit\n\ndef find_digit(num1, num2, digit):\n\tif digit == 1:\n\t\treturn get_digit(num1, 1)\n\telif digit == 2:\n\t\treturn get_digit(num1, 2)\n\telif digit == 3:\n\t\treturn get_digit(num1, 3)\n\telif digit == 4:\n\t\treturn get_digit(num1, 4)\n\telif digit == 5:\n\t\treturn get_digit(num1, 5)\n\telif digit == 6:\n\t\treturn get_digit(num1, 6)\n\telif digit == 7:\n\t\treturn get_digit(num1, 7)\n\telif digit == 8:\n\t\treturn get_digit(num1, 8)\n\telif digit == 9:\n\t\treturn get_digit(num1, 9)\n\telif digit == 10:\n\t\treturn get_digit(num1, 10)\n\n# test cases\n\nprint(find_digit(15, 3, 1))\nprint(find_digit(15, 3, 2))\nprint(find_digit(15, 3, 3))\nprint(find_digit(15, 3, 4))\nprint(find_digit(15, 3, 5))\nprint(find_digit(15, 3, 6))\nprint(find_digit(15, 3, 7))\nprint(find_digit(15, 3, 8))\nprint(find_digit(15, 3, 9))\nprint(find_digit(15, 3, 10))"
    },
    {
      "rank": 68,
      "score": 8.144125099485041,
      "candidate": "import time\nfrom math import log\n\ndef find_nth_digit(num, den, n):\n    \"\"\"\n    :type num: int\n    :type den: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    num_dec = num % 10\n    den_dec = den % 10\n    num_t = num / 10\n    den_t = den / 10\n\n    # 0 to 9\n    if n == 1:\n        if num_t == 0:\n            return den_dec\n        elif num_t == 1:\n            return num_dec\n        elif num_t == 2:\n            return (num_dec * 10 + num_dec) / 10\n        elif num_t == 3:\n            return (num_dec * 100 + num_dec * 10 + num_dec) / 10\n        elif num_t == 4:\n            return (num_dec * 1000 + num_dec * 100 + num_dec * 10 + num_dec) / 10\n        elif num_t == 5:\n            return (num_dec * 10000 + num_dec * 1000 + num_dec * 100 + num_dec * 10 + num_dec) / 10\n        elif num_t == 6:\n            return (num_dec * 100000 + num_dec * 10000 + num_dec * 1000 + num_dec * 100 + num_dec * 10 + num_dec) / 10\n        elif num_t == 7:\n            return (num_dec * 1000000 + num_dec * 100000 + num_dec * 10000 + num_dec * 1000 + num_dec * 100 + num_dec * 10 + num_dec) / 10\n        elif num_t == 8:\n            return (num_dec * 10000000 + num_dec * 1000000 + num_dec * 100000 + num_dec * 10000 + num_dec * 1000 + num_dec * 100 + num_dec * 10 + num_dec) / 10\n        elif num_t == 9:\n            return (num_dec * 10000000 + num_dec * 1000000 + num_dec * 100000 + num_dec * 10000 + num_dec * 1000 + num_dec * 100 + num_dec * 10 + num"
    },
    {
      "rank": 69,
      "score": 8.143591138329747,
      "candidate": "# https://www.hackerrank.com/challenges/fraction-of-two/problem\n\ndef nth_digit(n, a, b):\n    return a / b % 10 + a % b * 10 ** (n - 1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = int(input())\n    b = int(input())\n    print(nth_digit(n, a, b))"
    },
    {
      "rank": 70,
      "score": 8.121884567141883,
      "candidate": "def find_digit(n, x, y):\n    return n % 10 + x * (10 ** y) % 10\n\n\ndef main():\n    n = int(input())\n    x = int(input())\n    y = int(input())\n    print(find_digit(n, x, y))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 8.105983444291466,
      "candidate": "def find_digit(n, a, b):\n    if n < 1:\n        return 0\n    else:\n        return a // b // n % 10\n\ndef find_digit_python(n, a, b):\n    if n < 1:\n        return 0\n    else:\n        return a // b // n % 10\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    n = int(input())\n    result = find_digit_python(n, a, b)\n    print(result)"
    },
    {
      "rank": 72,
      "score": 8.024835682833125,
      "candidate": "def find_digit(n, a, b):\n    \"\"\"\n    n - the number to be found\n    a - the first number\n    b - the second number\n    \"\"\"\n    return int(a/b) % 10\n\n\nprint find_digit(3, 1, 2)\nprint find_digit(0, 1, 2)\nprint find_digit(5, 1, 2)\nprint find_digit(3, 1, 2)"
    },
    {
      "rank": 73,
      "score": 7.938028884277233,
      "candidate": "import math\n\ndef find_digit(n, num1, num2):\n    '''\n    Find the nth digit in the proper fraction of two given numbers.\n\n    n: the nth digit in the fraction.\n    num1: the first number.\n    num2: the second number.\n    '''\n\n    if num1 == 0 or num2 == 0:\n        return 0\n\n    fraction = num1 / num2\n    return math.floor(fraction * 10 ** n)\n\n\nif __name__ == '__main__':\n    print find_digit(3, 2, 1)\n    print find_digit(5, 1, 5)\n    print find_digit(4, 2, 1)\n    print find_digit(3, 0, 1)\n    print find_digit(3, 1, 0)\n    print find_digit(0, 1, 0)\n    print find_digit(3, 1, 1)\n    print find_digit(1, 0, 0)\n    print find_digit(1, 1, 0)"
    },
    {
      "rank": 74,
      "score": 7.915588979966494,
      "candidate": "def find_digit(number_a, number_b, digit):\n    \"\"\"\n    number_a and number_b are the two numbers\n    digit is the digit to be found in the fraction\n    return the fraction\n    \"\"\"\n    \n    if (number_a % number_b == 0):\n        return (number_a / number_b) * 10 ** digit\n    else:\n        return (number_a / number_b) * 10 ** digit + 1\n\n\ndef main():\n    number_a = int(input('Enter the first number: '))\n    number_b = int(input('Enter the second number: '))\n    digit = int(input('Enter the digit to find: '))\n    \n    fraction = find_digit(number_a, number_b, digit)\n    print('The fraction is:', fraction)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 75,
      "score": 7.868947655733293,
      "candidate": "def find_digit(number_1, number_2, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    Input:\n    number_1, number_2 - the given numbers\n    n - the number of digit to be searched\n\n    Output:\n    the nth digit in the proper fraction of two given numbers\n    \"\"\"\n    if number_1 == number_2:\n        return 0\n    elif number_1 < number_2:\n        return find_digit(number_2, number_1, n)\n    elif number_1 > number_2:\n        return find_digit(number_1, number_2, n)\n    else:\n        return number_1 % 10\n\nprint find_digit(1, 2, 2)\nprint find_digit(1, 4, 3)\nprint find_digit(1, 4, 4)\nprint find_digit(1, 4, 5)\nprint find_digit(1, 4, 6)"
    },
    {
      "rank": 76,
      "score": 7.834022619458933,
      "candidate": "def get_digit(num1, num2, digit):\n    \"\"\"\n    Get the nth digit in the proper fraction of two given numbers.\n    \n    :param num1: First number\n    :param num2: Second number\n    :param digit: Digit to be calculated.\n    :return: The nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    return (num1 / (num1 + num2) ) % 10\n\n\ndef main():\n    print get_digit(5, 2, 1)\n    print get_digit(6, 7, 2)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 7.780351419995229,
      "candidate": "def find_digit(n, num1, num2):\n    return num1 / num2 * 10 + num1 % num2 // (num2 // 10)\n\nif __name__ == '__main__':\n    print(find_digit(1, 6, 9))\n    print(find_digit(2, 9, 7))"
    },
    {
      "rank": 78,
      "score": 7.7320703513377165,
      "candidate": "def get_nth_digit(a, b, n):\n    \"\"\"\n    Input:\n    a - the first number\n    b - the second number\n    n - the nth digit to be found\n    Output:\n    the nth digit in the proper fraction of the two given numbers\n    \"\"\"\n    return str(a)[-n - 1] + str(b)[n]\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    n = int(input())\n    print(get_nth_digit(a, b, n))"
    },
    {
      "rank": 79,
      "score": 7.705183449260731,
      "candidate": "#!/usr/bin/env python\n\n#\n#\n#\ndef nth_digit(n, x, y):\n    return x * 10 + y\n\n#\n#\n#\ndef main():\n    #\n    #\n    #\n    print nth_digit(2, 6, 1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 80,
      "score": 7.5819855281879285,
      "candidate": "def nth_digit(n, num1, num2):\n    \"\"\"\n    :type n: int\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while num1 > 0 and num2 > 0:\n        if num1 < num2:\n            num1 = num1 - num2\n        else:\n            num2 = num2 - num1\n        result = result * 10 + num1 % 10\n    if n == 1:\n        result = result % 10\n    return result\n\nnth_digit(1, 2, 4)"
    },
    {
      "rank": 81,
      "score": 7.562924366763077,
      "candidate": "import math\n\ndef find_nth_digit(num1, num2, n):\n    \"\"\"\n    :param num1: the first number to calculate the nth digit\n    :param num2: the second number to calculate the nth digit\n    :param n: the nth digit to find\n    :return: the nth digit of num1 / num2\n    \"\"\"\n    num1 = int(num1)\n    num2 = int(num2)\n    n = int(n)\n    return int(math.ceil(num1/num2))\n\n\nif __name__ == \"__main__\":\n    num1 = int(input(\"Please input the first number to calculate the nth digit: \"))\n    num2 = int(input(\"Please input the second number to calculate the nth digit: \"))\n    n = int(input(\"Please input the nth digit to find: \"))\n    print(find_nth_digit(num1, num2, n))"
    },
    {
      "rank": 82,
      "score": 7.4878043221155455,
      "candidate": "import math\n\ndef find_digit(n, num1, num2):\n\t\"\"\"\n\tWrite a function to find the nth digit in the proper fraction of two given numbers.\n\tn: the nth digit\n\tnum1: the first number\n\tnum2: the second number\n\treturn: the nth digit\n\t\"\"\"\n\tif num1 < num2:\n\t\tnum1, num2 = num2, num1\n\tnum1 = int(num1)\n\tnum2 = int(num2)\n\tif num1 == 0 or num2 == 0:\n\t\treturn 0\n\tif num1 < num2:\n\t\tnum1, num2 = num2, num1\n\tnum1 = str(num1)\n\tnum2 = str(num2)\n\tnum1 = num1[-1]\n\tnum2 = num2[-1]\n\tnum1 = int(num1)\n\tnum2 = int(num2)\n\tif num1 == 0 or num2 == 0:\n\t\treturn 0\n\tif num1 > num2:\n\t\tnum1, num2 = num2, num1\n\tif num1 > 10:\n\t\tnum1 -= 10\n\tif num2 > 10:\n\t\tnum2 -= 10\n\treturn math.floor(num1/num2)\n\n\nif __name__ == \"__main__\":\n\t# print find_digit(3, 3, 2)\n\t# print find_digit(4, 3, 2)\n\t# print find_digit(5, 3, 2)\n\tprint find_digit(5, 3, 2)"
    },
    {
      "rank": 83,
      "score": 7.464609382504557,
      "candidate": "def findNthDigit(n, num1, num2):\n    '''\n    n: the number we are searching for\n    num1: the first number\n    num2: the second number\n    '''\n    # if n is odd, we need to add 1 to num2\n    if n%2:\n        num2 += 1\n\n    # if n is even, we need to subtract 1 to num1\n    if n%2 == 0:\n        num1 -= 1\n\n    # n is the number we want to find, num1 and num2 are the numbers we need to compare\n    # to find the nth digit\n    return num1*10 + num2\n\nprint findNthDigit(3, 2, 4)\n#>>> 6\n\nprint findNthDigit(3, 2, 5)\n#>>> 1"
    },
    {
      "rank": 84,
      "score": 7.134571892399572,
      "candidate": "def get_digit(num):\n    \"\"\"\n    Get the nth digit in the proper fraction of two given numbers.\n    :param num: The number we are finding the digit of.\n    :return: The nth digit of the given number.\n    \"\"\"\n    return str(num)[num % 10]\n\n\ndef get_digit_sum(num1, num2):\n    \"\"\"\n    Get the sum of the nth digit of the given numbers.\n    :param num1: The first number we are finding the digit of.\n    :param num2: The second number we are finding the digit of.\n    :return: The sum of the nth digit of the given numbers.\n    \"\"\"\n    return int(num1) + int(num2)\n\n\ndef get_digit_sum_rec(num1, num2, n):\n    \"\"\"\n    Get the sum of the nth digit of the given numbers.\n    :param num1: The first number we are finding the digit of.\n    :param num2: The second number we are finding the digit of.\n    :param n: The nth digit we are finding.\n    :return: The sum of the nth digit of the given numbers.\n    \"\"\"\n    if n == 0:\n        return get_digit_sum(num1, num2)\n    else:\n        return get_digit_sum_rec(get_digit_sum(num1, num2), num2, n - 1)\n\n\nif __name__ == \"__main__\":\n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n    n = int(input(\"Enter digit number: \"))\n    print(get_digit_sum_rec(num1, num2, n))"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "# The fraction number can be written as n/d.\n# For example, the fraction number of 1/3 is written as 1/3.\n# Write a function that takes two numbers as inputs and returns the nth digit of the fraction number.\n\n# Example 1:\n# Input:\n# num1 = 1\n# num2 = 2\n# n = 1\n#\n# Output:\n# 1\n# Example 2:\n# Input:\n# num1 = 2\n# num2 = 3\n# n = 1\n#\n# Output:\n# 2\n# Example 3:\n# Input:\n# num1 = 3\n# num2 = 6\n# n = 2\n#\n# Output:\n# 3\n# Example 4:\n# Input:\n# num1 = 6\n# num2 = 1\n# n = 3\n#\n# Output:\n# 6\n# Example 5:\n# Input:\n# num1 = 9\n# num2 = 2\n# n = 3\n#\n# Output:\n# 9\n# Example 6:\n# Input:\n# num1 = 7\n# num2 = 9\n# n = 1\n#\n# Output:\n# 7\n# Example 7:\n# Input:\n# num1 = 6\n# num2 = 4\n# n = 2\n#\n# Output:\n# 6\n# Example 8:\n# Input:\n# num1 = 1\n# num2 = 0\n# n = 3\n#\n# Output:\n# 1\n# Example 9:\n# Input:\n# num1 = 0\n# num2 = 0\n# n = 1\n#\n# Output:\n# 0\n#\n# Note:\n# The given numbers num1 and num2 are both positive integers.\n# The given n is a non-negative integer.\n# There are many fractions where n is the denominator.\n# You can assume that num2 is always greater than num1.\n#\n\nclass Solution:\n    # @param {integer} num1\n    # @param {integer} num2\n    # @param {integer} n\n    # @return {integer}\n    def findNthDigit(self, num1, num2, n):\n        num1, num2 = sorted([num1, num2])"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "# input:\n# num = [2, 1, 4, 8, 5, 3, 9, 6]\n# den = [2, 3, 4, 5, 6, 7, 8, 9]\n# n = 3\n# output:\n# 2\n# 1\n# 4\n# 3\n# 9\n# 6\n# 7\n# 8\n# 5\n\ndef nth_digit(num, den, n):\n    \"\"\"\n    :type num: list\n    :type den: list\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if len(num)!= len(den):\n        raise ValueError('num and den should have the same length')\n\n    if len(num) == 0:\n        return 0\n    else:\n        return num[n-1] / float(den[n-1])\n\n# test\nprint nth_digit([2, 1, 4, 8, 5, 3, 9, 6], [2, 3, 4, 5, 6, 7, 8, 9], 3)"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def find_digit(number_1, number_2, n):\n    '''\n    This function takes two numbers and finds the nth digit of the fraction of these two numbers.\n    '''\n    # TODO: write code here\n    return 0\n\n\ndef main():\n    # TODO: write code here\n    number_1 = int(input())\n    number_2 = int(input())\n    n = int(input())\n\n    print(find_digit(number_1, number_2, n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def nth_digit(num1, num2, n):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (num1 * 10 + num2) % (10 ** n)\n\nprint(nth_digit(11, 7, 3))\n\nprint(nth_digit(10, 8, 2))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def find_digit(n, num1, num2):\n    \"\"\"\n    :type n: int\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    digits = 0\n    while num1 % 10 == 0 and num2 % 10 == 0:\n        num1 /= 10\n        num2 /= 10\n        digits += 1\n    if num1 % 10 == 0:\n        num1 /= 10\n    if num2 % 10 == 0:\n        num2 /= 10\n    while num1 > 0:\n        num1 -= 1\n        digits += 1\n    while num2 > 0:\n        num2 -= 1\n        digits += 1\n    return digits % 10\n\ndef test_find_digit():\n    assert find_digit(1, 10, 20) == 1\n    assert find_digit(2, 10, 20) == 2\n    assert find_digit(3, 10, 20) == 3\n    assert find_digit(4, 10, 20) == 4\n    assert find_digit(5, 10, 20) == 5\n    assert find_digit(6, 10, 20) == 6\n    assert find_digit(7, 10, 20) == 7\n    assert find_digit(8, 10, 20) == 8\n    assert find_digit(9, 10, 20) == 9\n    assert find_digit(10, 10, 20) == 10\n    assert find_digit(11, 10, 20) == 10\n    assert find_digit(12, 10, 20) == 10\n    assert find_digit(13, 10, 20) == 10\n    assert find_digit(14, 10, 20) == 10\n    assert find_digit(15, 10, 20) == 10\n    assert find_digit(16, 10, 20) == 10\n    assert find_digit(17, 10, 20) == 10\n    assert find_digit(18, 10, 20) == 10\n    assert find_digit(19, 10, 20) == 10\n    assert find_digit(20, 10, 20) == 10\n    assert find_digit(21, 10, 20) == 10\n    assert find_digit(22, 10, 20) == 10"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# Complete the function below.\ndef get_digit(n, a, b):\n    if a == 0 or b == 0:\n        return 0\n    return a/b\n\n# Note:\n# The function get_digit should return an integer between 0 and 9, inclusive.\n# The function should not modify the passed arguments.\n# The passed arguments may be modified, and it should not return the modified versions.\n\n# Example 1:\n# Input: n = 1, a = 1, b = 2\n# Output: 1\n# Explanation: The nth digit in the proper fraction of two numbers is 1.\n\n# Example 2:\n# Input: n = 2, a = 1, b = 2\n# Output: 2\n# Explanation: The nth digit in the proper fraction of two numbers is 2.\n\n# Example 3:\n# Input: n = 3, a = 1, b = 1\n# Output: 3\n# Explanation: The nth digit in the proper fraction of two numbers is 3.\n\n# Example 4:\n# Input: n = 4, a = 1, b = 5\n# Output: 6\n# Explanation: The nth digit in the proper fraction of two numbers is 6.\n\n# Example 5:\n# Input: n = 5, a = 1, b = 2\n# Output: 5\n# Explanation: The nth digit in the proper fraction of two numbers is 5.\n\n# Note:\n# The number of digits in a and b are equal.\n# The number of digits in n is between 1 and 10^4.\n\n# Note:\n# The passed numbers a and b are always positive.\n\n# Note:\n# The passed numbers a and b are always positive.\n\n# Note:\n# The passed numbers a and b are always positive."
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "import math\n\ndef nth_digit(a, b, n):\n    n = int(math.pow(10, n))\n    m = int(a / b)\n    return int((a - m * b) / n)\n\n\nif __name__ == \"__main__\":\n    assert nth_digit(3, 4, 2) == 1\n    assert nth_digit(3, 4, 4) == 0\n    assert nth_digit(3, 4, 8) == 0\n    assert nth_digit(3, 4, 10) == 0\n    assert nth_digit(3, 4, 20) == 1\n    assert nth_digit(3, 4, 22) == 1\n    assert nth_digit(3, 4, 23) == 0\n    assert nth_digit(3, 4, 24) == 0\n    assert nth_digit(3, 4, 25) == 0\n    assert nth_digit(3, 4, 26) == 0\n    assert nth_digit(3, 4, 27) == 0\n    assert nth_digit(3, 4, 28) == 0\n    assert nth_digit(3, 4, 29) == 0\n    assert nth_digit(3, 4, 30) == 0\n    assert nth_digit(3, 4, 40) == 0\n    assert nth_digit(3, 4, 41) == 0\n    assert nth_digit(3, 4, 42) == 0\n    assert nth_digit(3, 4, 43) == 0\n    assert nth_digit(3, 4, 44) == 0\n    assert nth_digit(3, 4, 45) == 0\n    assert nth_digit(3, 4, 46) == 0\n    assert nth_digit(3, 4, 47) == 0\n    assert nth_digit(3, 4, 48) == 0\n    assert nth_digit(3, 4, 49) == 0\n    assert nth_digit(3, 4, 50) == 0\n    assert nth_digit(3, 4, 51) == 0\n    assert nth_digit(3, 4, 52) == 0\n    assert nth_digit(3, 4,"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def get_digit(num1, num2, n):\n    if n == 0:\n        return 0\n    if num1 == 0 and num2 == 0:\n        return 0\n    if num1 == 0:\n        return get_digit(num2, n-1, n-1)\n    if num2 == 0:\n        return get_digit(num1, n-1, n-1)\n    if num1 < num2:\n        num1, num2 = num2, num1\n    return get_digit(num1, num2, n-1)\n\ndef get_digit(num1, num2, n):\n    if n == 0:\n        return 0\n    if num1 == 0 and num2 == 0:\n        return 0\n    if num1 == 0:\n        return get_digit(num2, n-1, n-1)\n    if num2 == 0:\n        return get_digit(num1, n-1, n-1)\n    if num1 < num2:\n        num1, num2 = num2, num1\n    return get_digit(num1, num2, n-1)\n\ndef get_digit(num1, num2, n):\n    if n == 0:\n        return 0\n    if num1 == 0 and num2 == 0:\n        return 0\n    if num1 == 0:\n        return get_digit(num2, n-1, n-1)\n    if num2 == 0:\n        return get_digit(num1, n-1, n-1)\n    if num1 < num2:\n        num1, num2 = num2, num1\n    return get_digit(num1, num2, n-1)\n\ndef get_digit(num1, num2, n):\n    if n == 0:\n        return 0\n    if num1 == 0 and num2 == 0:\n        return 0\n    if num1 == 0:\n        return get_digit(num2, n-1, n-1)\n    if num2 == 0:\n        return get_digit(num1, n-1, n-1)\n    if num1 < num2:\n        num1, num2"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def find_nth_digit(n, a, b):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n    :param n: The nth digit in the proper fraction of two given numbers.\n    :param a: The first number.\n    :param b: The second number.\n    :return: A tuple containing the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    # Check if the fraction is 1:1\n    if a == b:\n        return n\n    # Check if the fraction is 1:2\n    elif a % 2 == 0 and b % 2 == 1:\n        return n\n    # Check if the fraction is 1:2\n    elif a % 2 == 1 and b % 2 == 0:\n        return n\n    # Check if the fraction is 2:1\n    elif a % 2 == 0 and b % 2 == 0:\n        return n\n    # Check if the fraction is 2:2\n    elif a % 2 == 1 and b % 2 == 1:\n        return n\n    # Check if the fraction is 2:3\n    elif a % 2 == 1 and b % 2 == 2:\n        return n\n    # Check if the fraction is 2:4\n    elif a % 2 == 0 and b % 2 == 2:\n        return n\n    # Check if the fraction is 3:1\n    elif a % 3 == 0 and b % 3 == 1:\n        return n\n    # Check if the fraction is 3:2\n    elif a % 3 == 1 and b % 3 == 2:\n        return n\n    # Check if the fraction is 3:3\n    elif a % 3 == 2 and b % 3 == 3:\n        return n\n    # Check if the fraction is 3:4\n    elif a % 3 == 0 and b % 3 == 3:\n        return n\n    # Check if the fraction is 4:1\n    elif a % 4 == 0 and b % 4 == 1:\n        return n\n    # Check if the fraction is 4:2\n    elif a % 4 == 1 and b % 4 == 2:\n        return n\n    # Check if the fraction is 4:3\n    elif a % 4 == 2 and"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def find_nth_digit(n, num1, num2):\n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n\n    :param n: integer\n    :param num1: integer\n    :param num2: integer\n    :return: integer\n    \"\"\"\n    # TODO: Write a python function to find the nth digit in the proper fraction of two given numbers.\n    return\n\n\nif __name__ == '__main__':\n    n = input(\"Enter n: \")\n    num1 = input(\"Enter num1: \")\n    num2 = input(\"Enter num2: \")\n\n    print(find_nth_digit(n, num1, num2))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "from fractions import Fraction\n\ndef get_digit(n, p, q):\n    f = Fraction(n, p)\n    f = f * Fraction(q, p)\n    return f.numerator % 10\n\n\ndef get_digit_python(n, p, q):\n    return n % p / q\n\n# Example\n\nprint(get_digit(2, 10, 5))\nprint(get_digit_python(2, 10, 5))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "import sys\n\n\ndef main():\n    nth_digit(sys.argv[1], int(sys.argv[2]))\n\n\ndef nth_digit(n, d):\n    if d < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# Write your code below!\n#\n#\n# Example 1:\n#\n# Input: num1 = 3, num2 = 4, n = 4\n# Output: 2\n#\n# Example 2:\n#\n# Input: num1 = 1, num2 = 3, n = 1\n# Output: 1\n#\n# Example 3:\n#\n# Input: num1 = 1, num2 = 5, n = 4\n# Output: 0\n#\n# Example 4:\n#\n# Input: num1 = 1, num2 = 3, n = 5\n# Output: 1\n#\n#\n#\n# Note:\n#\n# The given num1 and num2 are both in the range of 32-bit signed integer.\n# You may assume that num2 is always greater than num1.\n# The given n is in the range of [1, 10^9].\n\nclass Solution(object):\n    def findNthDigit(self, num1, num2, n):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        d = 0\n        while n > 0:\n            d = (num1 * 10 + num2) % 1000000\n            num1, num2 = num2, d\n            n -= 1\n        return d % 10"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def get_digit(n, num1, num2):\n    return (num1 / num2) * 10 + (num1 % num2) / num2\n\ndef get_digit_num(n, num1, num2):\n    return get_digit(n, num1, num2) % 10\n\n\ndef get_digit_num_list(n, num1, num2):\n    return [get_digit_num(n, num1, num2), get_digit_num(n, num2, num1)]\n\n\ndef get_digit_num_list_2(n, num1, num2):\n    return [get_digit_num(n, num1, num2), get_digit_num(n, num2, num1)]\n\ndef get_digit_num_list_3(n, num1, num2):\n    return [get_digit_num(n, num1, num2), get_digit_num(n, num2, num1), get_digit_num(n, num1, num2)]\n\n\ndef get_digit_num_list_4(n, num1, num2):\n    return [get_digit_num(n, num1, num2), get_digit_num(n, num2, num1), get_digit_num(n, num1, num2), get_digit_num(n, num2, num1)]\n\n\ndef get_digit_num_list_5(n, num1, num2):\n    return [get_digit_num(n, num1, num2), get_digit_num(n, num2, num1), get_digit_num(n, num1, num2), get_digit_num(n, num2, num1), get_digit_num(n, num1, num2)]\n\n\ndef get_digit_num_list_6(n, num1, num2):\n    return [get_digit_num(n, num1, num2), get_digit_num(n, num2, num1), get_digit_num(n, num1, num2), get_digit_num(n, num2, num1), get_digit_num(n, num1, num2"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def find_nth_digit(num1, num2, n):\n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n\n    Example\n    >>> find_nth_digit(2, 3, 0)\n    '1'\n    >>> find_nth_digit(2, 3, 1)\n    '2'\n    >>> find_nth_digit(2, 3, 2)\n    '3'\n    >>> find_nth_digit(2, 3, 3)\n    '4'\n    >>> find_nth_digit(2, 3, 4)\n    '5'\n    >>> find_nth_digit(2, 3, 5)\n    '6'\n    >>> find_nth_digit(2, 3, 6)\n    '7'\n    >>> find_nth_digit(2, 3, 7)\n    '8'\n    >>> find_nth_digit(2, 3, 8)\n    '9'\n    >>> find_nth_digit(2, 3, 9)\n    '10'\n    \"\"\"\n    n = n % 10\n    n_in_num1 = num1 % 10\n    n_in_num2 = num2 % 10\n    if n_in_num1 < n_in_num2:\n        return \"0\"\n    if n_in_num1 == n_in_num2:\n        return str(n_in_num1)\n    else:\n        return str(n_in_num2)\n\n\ndef find_nth_digit_rec(num1, num2, n):\n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n\n    Example\n    >>> find_nth_digit_rec(2, 3, 0)\n    '1'\n    >>> find_nth_digit_rec(2, 3, 1)\n    '2'\n    >>> find_nth_digit_rec(2, 3, 2)\n    '3'\n    >>> find_nth_digit_rec(2, 3, 3)\n    '4'\n    >>> find_nth_digit_rec(2, 3"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# Define a function to find the nth digit in the proper fraction of two given numbers.\n# The function should return the value of the nth digit in the proper fraction of the first number.\n# For example, given the numbers 1/3 and 2/7, the function should return 3.\n# The number 1/3 and 2/7 are proper fractions of one another.\n\n# For example, given the numbers 1/3 and 2/7, the function should return 3.\n# The number 1/3 and 2/7 are proper fractions of one another.\n\n\ndef find_digit(n):\n    return int(n/2) % 10\n\n\nif __name__ == \"__main__\":\n    print find_digit(1)\n    print find_digit(2)\n    print find_digit(3)\n    print find_digit(4)"
    }
  ]
}