{
  "timestamp": "2025-09-14T18:54:55.322815",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 209,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def max_count(s):\n    max_count = 0\n    for c in s:\n        if c == \" \":\n            max_count += 1\n        elif c == \",\":\n            max_count += 1\n        elif c == \".\":\n            max_count += 1\n    return max_count\n\nif __name__ == '__main__':\n    s = \"  .   \"\n    print max_count(s)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def replace(s):\n    return ':'.join(s.split())\n\nif __name__ == '__main__':\n    assert replace('1.2 3.4 5.6') == '1:2:3:4:5:6','should replace all occurrences of spaces, commas, and dots with a colon'\n    assert replace('abc:def:ghi:jkl:mno:pqr:stu:vw:xyz') == 'abc:def:ghi:jkl:mno:pqr:stu:vw:xyz','should replace all occurrences of spaces, commas, and dots with a colon'"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @param n, an integer\n    # @return a string\n    def replaceBlank(self, s, n):\n        if not s: return s\n        result = ''\n        for i in range(len(s)):\n            if s[i] in [' ', '.', ',']:\n                result += ':'\n            else:\n                result += s[i]\n        if n > 0:\n            result = self.replaceBlank(result, n - 1)\n        return result\n\n    def replaceBlank(self, s, n):\n        if not s: return s\n        result = ''\n        for i in range(len(s)):\n            if s[i] in [' ', '.', ',']:\n                result += ':'\n            else:\n                result += s[i]\n        if n > 0:\n            result = self.replaceBlank(result, n - 1)\n        return result\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceBlank('a b c', 2)\n    print s.replaceBlank('a b c', 3)\n    print s.replaceBlank('a b c', 4)\n    print s.replaceBlank('a b c', 5)\n    print s.replaceBlank('a b c', 6)\n    print s.replaceBlank('a b c', 7)\n    print s.replaceBlank('a b c', 8)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/replace-spaces\n\ndef replace_spaces(s):\n    return s.replace(' ', ':')\n\nprint(replace_spaces('hello.com,hello.com'))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', ':')\n\ns = Solution()\nprint s.replaceBlanks('   ')\nprint s.replaceBlanks('1')\nprint s.replaceBlanks('1.1')\nprint s.replaceBlanks('1:1')\nprint s.replaceBlanks('1:1.1')\nprint s.replaceBlanks('1:1.1:1')\nprint s.replaceBlanks('1:1.1:1:1')\nprint s.replaceBlanks('1:1.1:1:1:1')\nprint s.replaceBlanks('1:1.1:1:1:1:1')\nprint s.replaceBlanks('1:1.1:1:1:1:1:1')\nprint s.replaceBlanks('1:1.1:1:1:1:1:1:1')\nprint s.replaceBlanks('1:1.1:1:1:1:1:1:1:1')\nprint s.replaceBlanks('1:1.1:1:1:1:1:1:1:1:1')"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import re\n\n\nclass Solution:\n    def replace_space(self, s: str, n: int) -> str:\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: str\n        \"\"\"\n        regex = re.compile(r'\\s+')\n        return regex.sub(r':', s)\n\n    def replace_comma(self, s: str, n: int) -> str:\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: str\n        \"\"\"\n        regex = re.compile(r',')\n        return regex.sub(r':', s)\n\n    def replace_dot(self, s: str, n: int) -> str:\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: str\n        \"\"\"\n        regex = re.compile(r'\\.+')\n        return regex.sub(r':', s)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def replace_colon(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Your Solution here.\n# def replace_colon(s):\n#     return s.replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution:\n    def replaceBlanks(self, str: str) -> str:\n        r = str.replace(' ', ':')\n        r = r.replace(',', ':')\n        r = r.replace('.', ':')\n        return r\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.replaceBlanks('a b c'))\n    print(sol.replaceBlanks('a: b: c'))\n    print(sol.replaceBlanks('a. b : c'))\n    print(sol.replaceBlanks('a: b: c'))\n    print(sol.replaceBlanks('a b: c'))\n    print(sol.replaceBlanks('a: b: c'))\n    print(sol.replaceBlanks('a.b: c'))\n    print(sol.replaceBlanks('a:b:c'))\n    print(sol.replaceBlanks('a:b:c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a:b:c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a:b:c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a:b:c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('a.b.c'))\n    print(sol.replaceBlanks('"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        ret = str[:]\n        for i in range(len(str)):\n            if str[i] =='':\n                ret[i] = ':'\n            elif str[i] == ',':\n                ret[i] = ':'\n            elif str[i] == '.':\n                ret[i] = ':'\n        return ret\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.replaceBlanks('  a  b  .c .d')"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {string}\n    def replaceBlanks(self, s):\n        if not s:\n            return ''\n        result = []\n        for ch in s:\n            if ch in ',. ':\n                result.append(' ')\n            else:\n                result.append(ch)\n        return ''.join(result)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return''.join(str.split())"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        result = ''\n        for i in range(len(str)):\n            if str[i] =='':\n                result += ':'\n            else:\n                result += str[i]\n        return result"
    },
    {
      "rank": 14,
      "score": 9.99568088808386,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlanks(self, s):\n        ret = \"\"\n        for i in range(len(s)):\n            if s[i] =='':\n                ret += ':'\n            elif s[i] == '.':\n                ret += ':'\n            elif s[i] == ',':\n                ret += ':'\n            else:\n                ret += s[i]\n        return ret\n\n    # @param s, a string\n    # @return a string\n    def replaceSpaces(self, s):\n        ret = \"\"\n        for i in range(len(s)):\n            if s[i] =='':\n                ret += ':'\n            else:\n                ret += s[i]\n        return ret\n\n    # @param s, a string\n    # @return a string\n    def replaceCommas(self, s):\n        ret = \"\"\n        for i in range(len(s)):\n            if s[i] == ',':\n                ret += ':'\n            else:\n                ret += s[i]\n        return ret\n\n    # @param s, a string\n    # @return a string\n    def replaceDots(self, s):\n        ret = \"\"\n        for i in range(len(s)):\n            if s[i] == '.':\n                ret += ':'\n            else:\n                ret += s[i]\n        return ret\n\n    # @param s, a string\n    # @return a string\n    def replaceColon(self, s):\n        ret = \"\"\n        for i in range(len(s)):\n            if s[i] == ':':\n                ret += ':'\n            else:\n                ret += s[i]\n        return ret\n\n    # @param s, a string\n    # @return a string\n    def replaceAll(self, s):\n        ret = \"\"\n        for i in range(len(s)):\n            if s[i] == ':':\n                ret += ':'\n            else:\n                ret += s[i]\n        return ret\n\nif __name__ == '__main__"
    },
    {
      "rank": 15,
      "score": 9.929704995891996,
      "candidate": "class Solution(object):\n    def maxVacations(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        while n > 0:\n            ans = max(ans, n)\n            n /= 10\n        return ans"
    },
    {
      "rank": 16,
      "score": 9.925076173776262,
      "candidate": "# https://oj.leetcode.com/problems/replace-spaces-in-string/\n\n# DP\n# O(n) time, O(1) space\nclass Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlanks(self, s):\n        if not s:\n            return s\n        res = ''\n        for ch in s:\n            if ch =='':\n                res += ':'\n            else:\n                res += ch\n        return res"
    },
    {
      "rank": 17,
      "score": 9.925070920088533,
      "candidate": "# https://leetcode.com/problems/replace-all-spaces-with-a-colon/discuss/82476/Python-Python-solution-with-explanation\n\nclass Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ':'.join(str.split())"
    },
    {
      "rank": 18,
      "score": 9.906658000066152,
      "candidate": "class Solution(object):\n    def maxColon(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        max_count = 0\n        count = 0\n        for c in s:\n            if c in ',.':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            else:\n                count = 0\n        return s.replace(' ', ':', max_count)\n\n# test\nsol = Solution()\nprint(sol.maxColon('    a.b.c.d.e.f.g   '))\nprint(sol.maxColon('    a.b.c.d.e.f.g   '))\nprint(sol.maxColon('    a.b.c.d.e.f.g   '))\nprint(sol.maxColon('    a.b.c.d.e.f.g   '))\nprint(sol.maxColon('    a.b.c.d.e.f.g   '))\nprint(sol.maxColon('    a.b.c.d.e.f.g   '))"
    },
    {
      "rank": 19,
      "score": 9.903646817411428,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        result = []\n        for c in s:\n            if c =='':\n                result.append('0')\n            elif c == ',':\n                result.append(':')\n            elif c == '.':\n                result.append(':')\n            else:\n                result.append(c)\n        return ''.join(result)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceBlanks(' a.b .c'))"
    },
    {
      "rank": 20,
      "score": 9.851706338300012,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def maxVowelReplacement(self, s):\n        s = s.replace('.', '').replace(',', '').replace(' ', '')\n        result = ''\n        for i in range(len(s)):\n            if s[i] =='':\n                result += ':'\n            else:\n                result += s[i]\n        return result\n\n    # @param s, a string\n    # @return a string\n    def maxVowelReplacement2(self, s):\n        result = ''\n        for i in range(len(s)):\n            if s[i] =='':\n                result += ':'\n            else:\n                result += s[i]\n        return result\n\n\nif __name__ == '__main__':\n    assert Solution().maxVowelReplacement(\"a.b.c\") == \"a:b:c\"\n    assert Solution().maxVowelReplacement(\"a.b.c.d\") == \"a:b:c:d\"\n    assert Solution().maxVowelReplacement(\"a.b.c.d.e\") == \"a:b:c:d:e\"\n    assert Solution().maxVowelReplacement(\"a.b.c.d.e.f\") == \"a:b:c:d:e:f\""
    },
    {
      "rank": 21,
      "score": 9.849768196500815,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlanks(self, s):\n        new_str = ''\n        for c in s:\n            if c in ',.:':\n                new_str += ':'\n            else:\n                new_str += c\n        return new_str\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceBlanks('a.b,c.d')\n    print s.replaceBlanks(' a,b,c ')\n    print s.replaceBlanks(' a,b,c')\n    print s.replaceBlanks('a,b,c')\n    print s.replaceBlanks('a,b,c,')\n    print s.replaceBlanks('a,b,c,')\n    print s.replaceBlanks(' a,b,c')\n    print s.replaceBlanks(' a,b,c')\n    print s.replaceBlanks('a,b,c')\n    print s.replaceBlanks('a,b,c ')"
    },
    {
      "rank": 22,
      "score": 9.846664243889506,
      "candidate": "import re\n\ndef max_colon(string):\n    return re.sub(r'[\\s,.]+', r':', string)\n\nif __name__ == '__main__':\n    s = 'Hello, World!'\n    print(max_colon(s))"
    },
    {
      "rank": 23,
      "score": 9.79356167852636,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def replaceBlanks(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ':'.join([s.replace(',', ':')])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceBlanks(' abc ')\n    print s.replaceBlanks(' abc')\n    print s.replaceBlanks(' abc.abc ')\n    print s.replaceBlanks(' abc.abc')\n    print s.replaceBlanks(' abc.abc.abc')\n    print s.replaceBlanks(' abc.abc.abc.abc')\n    print s.replaceBlanks(' abc.abc.abc.abc.abc')\n    print s.replaceBlanks(' abc.abc.abc.abc.abc.abc')\n    print s.replaceBlanks(' abc.abc.abc.abc.abc.abc.abc')"
    },
    {
      "rank": 24,
      "score": 9.783384959902094,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlanks(self, s):\n        return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceBlanks('   '))\n    print(s.replaceBlanks('a,b,c'))\n    print(s.replaceBlanks('a.b.c'))\n    print(s.replaceBlanks('   '))\n    print(s.replaceBlanks('a,b'))\n    print(s.replaceBlanks('a.b'))\n    print(s.replaceBlanks('   '))\n    print(s.replaceBlanks('a'))\n    print(s.replaceBlanks('a'))\n    print(s.replaceBlanks('a.'))\n    print(s.replaceBlanks('a.b.'))"
    },
    {
      "rank": 25,
      "score": 9.64597280831807,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlanks(self, s):\n        if s is None or len(s) == 0:\n            return s\n        \n        result = s[:]\n        for i in range(len(s)):\n            if s[i] =='':\n                result[i] = ':'\n            elif s[i] == ',':\n                result[i] = ':'\n            elif s[i] == '.':\n                result[i] = ':'\n        return result\n        \n    def replaceBlanks(self, s):\n        result = s\n        for i in range(len(s)):\n            if s[i] =='':\n                result[i] = ':'\n        return result\n\nif __name__ == '__main__':\n    print Solution().replaceBlanks('a.b.c')"
    },
    {
      "rank": 26,
      "score": 9.617213880294186,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return''.join(str.split())"
    },
    {
      "rank": 27,
      "score": 9.548062815572706,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlanks(self, s):\n        return ':'.join(s.split())\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceBlanks('  '))\n    print(s.replaceBlanks('a,b.c'))"
    },
    {
      "rank": 28,
      "score": 9.526872963082424,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {string}\n    def replaceBlank(self, s):\n        if not s:\n            return ''\n        if len(s) == 1:\n            return s\n        res = ''\n        for i in xrange(0, len(s)):\n            if s[i] =='' or s[i] == ',' or s[i] == '.':\n                res += ':'\n            else:\n                res += s[i]\n        return res\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.replaceBlank('a')"
    },
    {
      "rank": 29,
      "score": 9.448026293595829,
      "candidate": "def replace_space(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s.replace(\" \", \":\")\n\ndef replace_comma(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s.replace(\",\", \":\")\n\ndef replace_dot(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s.replace(\".\", \":\")\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    s = input()\n    print(replace_space(s))\n    print(replace_comma(s))\n    print(replace_dot(s))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 9.435827150283925,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n\nif __name__ == '__main__':\n    Solution().replaceBlanks(\"   \")"
    },
    {
      "rank": 31,
      "score": 9.387750321709504,
      "candidate": "class Solution:\n    # @param {string} str\n    # @param {integer} n\n    # @return {string}\n\n    def replaceBlanks(self, str, n):\n        if n <= 0:\n            return str\n        res = ''\n        for i in range(len(str)):\n            if i >= n:\n                res += ':'\n            elif str[i] in [' ', ',']:\n                res += ':'\n            else:\n                res += str[i]\n        return res\n\n    def replaceComma(self, str, n):\n        if n <= 0:\n            return str\n        res = ''\n        for i in range(len(str)):\n            if i >= n:\n                res += ':'\n            elif str[i] == ',':\n                res += ':'\n            else:\n                res += str[i]\n        return res\n\n    def replaceDot(self, str, n):\n        if n <= 0:\n            return str\n        res = ''\n        for i in range(len(str)):\n            if i >= n:\n                res += ':'\n            elif str[i] == '.':\n                res += ':'\n            else:\n                res += str[i]\n        return res\n\n\nif __name__ == '__main__':\n    print(Solution().replaceBlanks('   1, 2.3, 4, 5', 1))\n    print(Solution().replaceComma('   1, 2.3, 4, 5', 1))\n    print(Solution().replaceDot('   1, 2.3, 4, 5', 1))"
    },
    {
      "rank": 32,
      "score": 9.370583536698913,
      "candidate": "def max_occurrences(s, n):\n    \"\"\"\n    :type s: str\n    :type n: int\n    :rtype: str\n    \"\"\"\n    # write your code here\n    res = \"\"\n    for i in range(0, len(s)):\n        if s[i] == \" \" or s[i] == \",\" or s[i] == \".\":\n            if len(res) < n:\n                res = res + \":\"\n            else:\n                res = res[:-1]\n        else:\n            res = res + s[i]\n    return res"
    },
    {
      "rank": 33,
      "score": 9.234050852198141,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {string}\n    def replaceBlank(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        result = ''\n        for c in s:\n            if c =='':\n                result += ':'\n            elif c == ',':\n                result += ':'\n            elif c == '.':\n                result += ':'\n            else:\n                result += c\n        return result"
    },
    {
      "rank": 34,
      "score": 9.21346272767743,
      "candidate": "def replace_spaces(s):\n    new_str = ''\n    for i in range(len(s)):\n        if s[i] =='':\n            new_str += ':'\n        elif s[i] == ',' or s[i] == '.':\n            new_str += '.'\n        else:\n            new_str += s[i]\n    return new_str\n\nif __name__ == '__main__':\n    s = 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'\n    print(replace_spaces(s))"
    },
    {
      "rank": 35,
      "score": 9.177268828905222,
      "candidate": "from collections import Counter\n\ndef replace_colons(s):\n    result = \"\"\n    for c in s:\n        if c == \" \" or c == \",\" or c == \".\":\n            result += \":\"\n        else:\n            result += c\n    return result\n\n\nif __name__ == \"__main__\":\n    s = \"Hello World\"\n    print(replace_colons(s))\n    print(Counter(replace_colons(s)))"
    },
    {
      "rank": 36,
      "score": 9.161681566691282,
      "candidate": "# https://oj.leetcode.com/problems/replace-dots-with-spaces/\nclass Solution:\n    # @param s, a string\n    # @return a string\n    def replaceDots(self, s):\n        if len(s) == 0:\n            return s\n        s = ''.join(c for c in s if c not in '.:')\n        return s\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceDots('...')\n    print s.replaceDots('......')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')\n    print s.replaceDots('...... ')"
    },
    {
      "rank": 37,
      "score": 9.122564458729856,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replace(self, s):\n        if not s:\n            return s\n        s_len = len(s)\n        s_list = list(s)\n        for i in range(s_len):\n            if s_list[i] =='':\n                s_list[i] = ':'\n            elif s_list[i] == ',':\n                s_list[i] = ':'\n            elif s_list[i] == '.':\n                s_list[i] = ':'\n        return ''.join(s_list)\n\n\nif __name__ == '__main__':\n    print(Solution().replace('hello world'))\n    print(Solution().replace('hello,world'))\n    print(Solution().replace('hello.world'))"
    },
    {
      "rank": 38,
      "score": 8.95994420569242,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlanks(self, s):\n        result = \"\"\n        for c in s:\n            if c =='':\n                result += ':'\n            elif c == ',':\n                result += ':'\n            else:\n                result += c\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceBlanks('a b c')\n    print s.replaceBlanks('a,b,c')\n    print s.replaceBlanks('a.b.c')\n    print s.replaceBlanks('a:b:c')\n    print s.replaceBlanks('a:b:c:d')\n    print s.replaceBlanks('a:b:c:d:e')\n    print s.replaceBlanks('a:b:c:d:e:f')"
    },
    {
      "rank": 39,
      "score": 8.932217008005624,
      "candidate": "def replace_spaces(s):\n    return ''.join(c if c in ':,.' else'' for c in s)\n\ndef replace_dots(s):\n    return ''.join(c if c in '.,:' else'' for c in s)\n\ndef replace_commas(s):\n    return ''.join(c if c in '.,:' else'' for c in s)\n\ndef test():\n    assert replace_spaces('   a  b  c') == ':a:b:c','replace_spaces failed'\n    assert replace_dots('   a  b  c') == 'a:b:c','replace_dots failed'\n    assert replace_commas('   a  b  c') == 'a,b,c','replace_commas failed'\n\ntest()"
    },
    {
      "rank": 40,
      "score": 8.910084504002544,
      "candidate": "def replace_colon(s):\n    n = 0\n    while n < len(s):\n        if s[n] =='' or s[n] == ',' or s[n] == '.':\n            s = s[:n] + ':' + s[n+1:]\n            n += 1\n        else:\n            n += 1\n    return s\n\nprint(replace_colon(' '.join(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])))"
    },
    {
      "rank": 41,
      "score": 8.85571690049604,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        n = len(s)\n        n2 = n * 2\n        d = {}\n        for i in range(n):\n            if s[i] =='':\n                d[i] = ':'\n            else:\n                d[i] = s[i]\n        n = len(d)\n        s1 = ''\n        for i in range(n2):\n            s1 += d[i % n]\n        return s1\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceBlanks('1.1.1.1.1.1'))\n    print(s.replaceBlanks('1.1.1.1.1.1.1'))\n    print(s.replaceBlanks('1.1.1.1.1.1'))\n    print(s.replaceBlanks('1.1.1.1.1.1'))"
    },
    {
      "rank": 42,
      "score": 8.855395696632057,
      "candidate": "import re\n\ndef replace_spaces(s):\n    return re.sub(r'\\s+', ':', s)\n\ndef replace_commas(s):\n    return re.sub(r',', ':', s)\n\ndef replace_dots(s):\n    return re.sub(r'\\.+', ':', s)\n\nif __name__ == '__main__':\n    s = 'This is a test, a test, a test. This is a test, a test, a test. This is a test, a test, a test.'\n    print(replace_spaces(s))\n    print(replace_commas(s))\n    print(replace_dots(s))"
    },
    {
      "rank": 43,
      "score": 8.850707355641543,
      "candidate": "class Solution:\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return str\n        count = 0\n        for i in range(len(str)):\n            if str[i] =='' or str[i] == ',' or str[i] == '.':\n                count += 1\n            if count > 1:\n                return str\n        return str + ':'\n\nif __name__ == \"__main__\":\n    print Solution().replaceBlank('a b c')\n    print Solution().replaceBlank('a, b, c')\n    print Solution().replaceBlank('a, b, c,d')\n    print Solution().replaceBlank('a, b, c,d')\n    print Solution().replaceBlank('a, b, c,d,')\n    print Solution().replaceBlank('a, b, c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')\n    print Solution().replaceBlank('a,b,c,d,')"
    },
    {
      "rank": 44,
      "score": 8.76828871349479,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        result = str\n        for i in range(len(str)):\n            if str[i] =='':\n                result = result.replace(str[i], ':')\n            elif str[i] == '.':\n                result = result.replace(str[i], ':')\n            else:\n                result = result.replace(str[i], ':')\n        return result\n\nif __name__ == '__main__':\n    print Solution().replaceBlanks(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
      "rank": 45,
      "score": 8.715724466237427,
      "candidate": "def replace_with_colon(s):\n    n = 0\n    for c in s:\n        if c =='':\n            n += 1\n        elif c == '.':\n            n += 1\n        elif c == ',':\n            n += 1\n    return s.replace(' ', ':') + ':' * n\n\nif __name__ == '__main__':\n    s = \"Hello, World! This is a test.\"\n    print(replace_with_colon(s))\n    s = \"Hello, World! This is a test.\"\n    print(replace_with_colon(s))\n    s = \"Hello, World! This is a test.\"\n    print(replace_with_colon(s))\n    s = \"Hello, World! This is a test.\"\n    print(replace_with_colon(s))\n    s = \"Hello, World! This is a test.\"\n    print(replace_with_colon(s))\n    s = \"Hello, World! This is a test.\"\n    print(replace_with_colon(s))\n    s = \"Hello, World! This is a test.\"\n    print(replace_with_colon(s))"
    },
    {
      "rank": 46,
      "score": 8.625262456968262,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub('[\\s,.:]+', ':', str)\n\nsolution = Solution()\nprint solution.replaceBlanks(\"Hi  How are you?  Hi  I'm fine\")"
    },
    {
      "rank": 47,
      "score": 8.616253589228675,
      "candidate": "def replace_colon(s):\n    for i in range(len(s)):\n        if s[i] =='':\n            s[i] = ':'\n        elif s[i] == ',':\n            s[i] = ':'\n        elif s[i] == '.':\n            s[i] = ':'\n\ndef main():\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('   a   b   c   '))\n    print(replace_colon('"
    },
    {
      "rank": 48,
      "score": 8.610076160146226,
      "candidate": "def replace(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    # space, comma, dot, colon\n    new_text = \"\"\n    for char in text:\n        if char == \" \" or char == \",\" or char == \".\":\n            new_text += \":\"\n        else:\n            new_text += char\n    return new_text\n\nif __name__ == \"__main__\":\n    text = \"  This is a test,,. ,,,. \"\n    print(text)\n    print(replace(text))"
    },
    {
      "rank": 49,
      "score": 8.606486429141842,
      "candidate": "# https://leetcode.com/problems/replace-all-occurrences-of-the-substring-in-the-string/\n\nclass Solution(object):\n    def replace(self, s, sub, n):\n        \"\"\"\n        :type s: str\n        :type sub: str\n        :type n: int\n        :rtype: str\n        \"\"\"\n        return ':'.join(s.replace(sub, ':'*n).split('.'))\n\nif __name__ == '__main__':\n    print(Solution().replace('hello.world.hello.world', '.', 2))"
    },
    {
      "rank": 50,
      "score": 8.60156811074208,
      "candidate": "import re\n\ndef replace_colon(s):\n    return re.sub(r'[,.:]+', ':', s)\n\nif __name__ == '__main__':\n    print(replace_colon('a b'))\n    print(replace_colon('a.b.c'))\n    print(replace_colon('a:b.c'))\n    print(replace_colon('a b'))\n    print(replace_colon('a.b'))\n    print(replace_colon('a.b.c'))\n    print(replace_colon('a:b'))\n    print(replace_colon('a:b.c'))"
    },
    {
      "rank": 51,
      "score": 8.565425580227462,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlanks(self, s):\n        return \"\".join(c if c!= \" \" else \":\" for c in s)\n\n    def replaceCommas(self, s):\n        return \"\".join(c if c!= \",\" else \":\" for c in s)\n\n    def replaceDots(self, s):\n        return \"\".join(c if c!= \".\" else \":\" for c in s)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.replaceBlanks(\"  a  b  c  \"))\n    print(sol.replaceCommas(\"a,b,c\"))\n    print(sol.replaceDots(\"a,b,c\"))"
    },
    {
      "rank": 52,
      "score": 8.548876241946822,
      "candidate": "def replace_colons(s):\n    res = ''\n    for i, c in enumerate(s):\n        if c =='' or c == ',' or c == '.':\n            res += ':'\n        else:\n            res += c\n    return res\n\ns = 'a:b:c'\nprint(replace_colons(s))"
    },
    {
      "rank": 53,
      "score": 8.499905739299377,
      "candidate": "def replace_colon(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ':'.join(s.split())\n\nif __name__ == '__main__':\n    print(replace_colon('hello world'))\n    print(replace_colon('hello.world'))\n    print(replace_colon('hello:world'))\n    print(replace_colon('hello: world'))\n    print(replace_colon('hello:.world'))\n    print(replace_colon('hello:.world'))\n    print(replace_colon('hello:..world'))"
    },
    {
      "rank": 54,
      "score": 8.490324832712195,
      "candidate": "def replace_colons(s):\n    count = 0\n    for c in s:\n        if c == \",\":\n            count += 1\n        elif c == \".\":\n            count += 1\n        elif c == \":\":\n            count += 1\n        else:\n            count += 1\n    return s.replace(\" \", \":\")\n\nif __name__ == \"__main__\":\n    print(replace_colons(\"  . :. :. :. :. :. :. :. :.   \"))"
    },
    {
      "rank": 55,
      "score": 8.48796797856353,
      "candidate": "def replace_with_colon(s):\n    return \": \".join(s.split())\n\nif __name__ == \"__main__\":\n    s = \"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\"\n    print \"Original string:\", s\n    print \"After replacement:\", replace_with_colon(s)"
    },
    {
      "rank": 56,
      "score": 8.478208546788407,
      "candidate": "import sys\n\ndef replace_spaces(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join([ch for ch in string if ch not in ':,. '])\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    if len(sys.argv)!= 2:\n        print(\"Usage: {} <string>\".format(sys.argv[0]))\n        sys.exit(1)\n\n    string = sys.argv[1]\n\n    print(replace_spaces(string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.426531424889468,
      "candidate": "import re\nimport string\n\ndef replace_spaces(s):\n    s = re.sub(r'\\s+', ':', s)\n    return s\n\ndef replace_commas(s):\n    s = re.sub(r',\\s+', r':', s)\n    return s\n\ndef replace_dots(s):\n    s = re.sub(r'\\.', r':', s)\n    return s\n\ndef replace(s):\n    return replace_spaces(replace_commas(replace_dots(s)))\n\nif __name__ == \"__main__\":\n    s = \"  a:b.c,d:e:f\"\n    print(replace(s))"
    },
    {
      "rank": 58,
      "score": 8.408439383654278,
      "candidate": "def replace_spaces(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if s.find(\" \")!= -1:\n        s = s.replace(\" \", \":\")\n    if s.find(\",\")!= -1:\n        s = s.replace(\",\", \":\")\n    if s.find(\".\")!= -1:\n        s = s.replace(\".\", \":\")\n    return s\n\nif __name__ == '__main__':\n    print(replace_spaces(\"  hello  \"))\n    print(replace_spaces(\"hello\"))\n    print(replace_spaces(\"hello.com\"))\n    print(replace_spaces(\"hello:world\"))\n    print(replace_spaces(\"hello.com:world\"))"
    },
    {
      "rank": 59,
      "score": 8.386620303250325,
      "candidate": "def replace(s):\n    result = []\n    for c in s:\n        if c =='':\n            result.append(':')\n        elif c == ',':\n            result.append(':')\n        elif c == '.':\n            result.append(':')\n        else:\n            result.append(c)\n    return ''.join(result)\n\n# Test Cases\nprint(''.join(replace('a.b.c..d..e..f..g..h..i..j..k..l..m..n..o..p..q..r..s..t..u..v..w..x..y..z')))"
    },
    {
      "rank": 60,
      "score": 8.375312293858853,
      "candidate": "import re\n\ndef replace_colon(s):\n    s = s.replace(' ', ':')\n    s = s.replace(',', ':')\n    s = s.replace('.', ':')\n    return s\n\ndef main():\n    s = 'Hello World'\n    print(replace_colon(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.351614956112536,
      "candidate": "class Solution(object):\n    def replaceSpace(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', ':')\n\nif __name__ == '__main__':\n    assert Solution().replaceSpace(\"a,b,c\") == \"a:b:c\"\n    assert Solution().replaceSpace(\"a,b,c,d\") == \"a:b:c:d\"\n    assert Solution().replaceSpace(\"a,b,c,d,e\") == \"a:b:c:d:e\"\n    assert Solution().replaceSpace(\"a,b,c,d,e,f\") == \"a:b:c:d:e:f\"\n    assert Solution().replaceSpace(\"a,b,c,d,e,f,g\") == \"a:b:c:d:e:f:g\"\n    assert Solution().replaceSpace(\"a,b,c,d,e,f,g,h\") == \"a:b:c:d:e:f:g:h\"\n    assert Solution().replaceSpace(\"a,b,c,d,e,f,g,h,i\") == \"a:b:c:d:e:f:g:h:i\"\n    assert Solution().replaceSpace(\"a,b,c,d,e,f,g,h,i,j\") == \"a:b:c:d:e:f:g:h:i:j\"\n    assert Solution().replaceSpace(\"a,b,c,d,e,f,g,h,i,j,k\") == \"a:b:c:d:e:f:g:h:i:j:k\""
    },
    {
      "rank": 62,
      "score": 8.331556294201176,
      "candidate": "def replace_with_colon(s):\n    result = ''\n    for ch in s:\n        if ch =='':\n            result += ':'\n        elif ch == ',' or ch == '.':\n            result += ':'\n        else:\n            result += ch\n    return result\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    assert replace_with_colon('foo') == 'foo:','replace_with_colon(\"foo\")'\n    assert replace_with_colon('foo bar') == 'foo:bar:','replace_with_colon(\"foo bar\")'\n    assert replace_with_colon('foo bar.baz') == 'foo:bar.baz:','replace_with_colon(\"foo bar.baz\")'\n    assert replace_with_colon('foo.bar.baz') == 'foo.bar.baz:','replace_with_colon(\"foo.bar.baz\")'\n    assert replace_with_colon('foo:bar.baz:') == 'foo:bar.baz:','replace_with_colon(\"foo:bar.baz:\")'\n    assert replace_with_colon('foo:bar:baz') == 'foo:bar:baz:','replace_with_colon(\"foo:bar:baz\")'"
    },
    {
      "rank": 63,
      "score": 8.294940769211511,
      "candidate": "def replace_colons(string):\n    return string.replace('.', ':').replace(',', ':').replace(' ', ':')\n\ndef main():\n    print(replace_colons('  a  b  c  '))\n    print(replace_colons('  a:b:c: '))\n    print(replace_colons('  a:b:c:d:'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.289838256518838,
      "candidate": "class Solution(object):\n    def replaceBlank(self, s, n):\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: str\n        \"\"\"\n        return ':'.join([s[i:i+n] for i in range(0, len(s), n)])\n\n    def replaceComma(self, s, n):\n        return s.replace(',', ':')\n\n    def replaceDot(self, s, n):\n        return s.replace('.', ':')\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceBlank('', 1)\n    print s.replaceBlank('', 2)\n    print s.replaceBlank('ab', 1)\n    print s.replaceBlank('ab', 2)\n    print s.replaceBlank('ab:c', 2)\n    print s.replaceBlank('a:b', 3)\n    print s.replaceComma('', 1)\n    print s.replaceComma('', 2)\n    print s.replaceComma('a', 1)\n    print s.replaceComma('a', 2)\n    print s.replaceComma('a:b', 2)\n    print s.replaceDot('', 1)\n    print s.replaceDot('', 2)\n    print s.replaceDot('a', 1)\n    print s.replaceDot('a', 2)\n    print s.replaceDot('a:b', 2)"
    },
    {
      "rank": 65,
      "score": 8.251903304236286,
      "candidate": "import re\n\n# Returns a string with only one instance of a character\ndef onlyOne(s):\n    return ''.join(s.split(','))\n\n# Returns a string with only one instance of a character\ndef onlyOne(s):\n    return ''.join(s.split(','))\n\n# Returns a string with only one instance of a character\ndef onlyOne(s):\n    return ''.join(s.split(','))\n\ndef replace_with_colon(s):\n    return re.sub(r'\\s+', ':', s)\n\nif __name__ == '__main__':\n    s = 'asd.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d.a.d."
    },
    {
      "rank": 66,
      "score": 8.214125058964552,
      "candidate": "class Solution(object):\n    def maxVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ':'.join(s.replace(' ', ':').replace(',', ':').replace('.', ':'))"
    },
    {
      "rank": 67,
      "score": 8.211579567659316,
      "candidate": "# https://oj.leetcode.com/problems/replace-all-substrings-with-other-characters/\n\nclass Solution:\n    # @param s, a string\n    # @param n, an integer\n    # @return a string\n    def replaceWith(self, s, n):\n        return ''.join([x if x not in [' ', '.', ','] else ':' for x in s])[:n]\n\n    def replaceWith2(self, s, n):\n        return ''.join([x if x not in [' ', '.', ','] else ':' for x in s]).replace(':','').strip(' ')\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceWith('a:a:a', 3)\n    print s.replaceWith('a.a.a', 3)\n    print s.replaceWith('a:a:a', 2)\n    print s.replaceWith('a:a:a', 1)\n    print s.replaceWith('a:a:a', 0)\n    print s.replaceWith2('a:a:a', 3)\n    print s.replaceWith2('a.a.a', 3)\n    print s.replaceWith2('a:a:a', 2)\n    print s.replaceWith2('a:a:a', 1)\n    print s.replaceWith2('a:a:a', 0)"
    },
    {
      "rank": 68,
      "score": 8.172253082181854,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        s = str.strip()\n        for i in range(len(s)):\n            if s[i] =='':\n                s = s[:i] + ':' + s[i+1:]\n            elif s[i] == ',':\n                s = s[:i] + ':' + s[i+1:]\n            elif s[i] == '.':\n                s = s[:i] + ':' + s[i+1:]\n        return s\n\n\nif __name__ == '__main__':\n    assert Solution().replaceBlanks('  a b c   d') == ':a:b:c:d'\n    assert Solution().replaceBlanks('  a b c   d e') == ':a:b:c:d'\n    assert Solution().replaceBlanks('  a b c   d e  ') == ':a:b:c:d'\n    assert Solution().replaceBlanks('  a b c   d e  f') == ':a:b:c:d'"
    },
    {
      "rank": 69,
      "score": 8.163300679823958,
      "candidate": "# Your function will take as input a string, and return a new string.\n# It should replace all the occurrences of the character with a colon.\n# The replacement string should not contain any spaces or commas.\n\ndef replace_spaces_commas_and_dots_with_colons(s):\n    return s.replace('.',':')\n\nif __name__ == \"__main__\":\n    print(replace_spaces_commas_and_dots_with_colons(\"a, b, c, d, e, f\"))\n    print(replace_spaces_commas_and_dots_with_colons(\"a: b: c: d: e: f\"))\n    print(replace_spaces_commas_and_dots_with_colons(\"a, b, c, d, e, f\"))\n    print(replace_spaces_commas_and_dots_with_colons(\"a, b, c, d, e, f\"))\n    print(replace_spaces_commas_and_dots_with_colons(\"a, b, c, d, e, f\"))\n    print(replace_spaces_commas_and_dots_with_colons(\"a, b, c, d, e, f\"))\n    print(replace_spaces_commas_and_dots_with_colons(\"a, b, c, d, e, f\"))"
    },
    {
      "rank": 70,
      "score": 8.144125099485041,
      "candidate": "def replace_spaces(str):\n    return re.sub(r'\\s+', ':', str)\n\ndef replace_commas(str):\n    return re.sub(r',', ':', str)\n\ndef replace_dots(str):\n    return re.sub(r'\\.+', ':', str)\n\ndef test_replace_spaces():\n    assert replace_spaces('hello') == 'hello'\n    assert replace_spaces('hello:') == 'hello: '\n    assert replace_spaces(' hello: ') =='hello: '\n\ndef test_replace_commas():\n    assert replace_commas('hello') == 'hello'\n    assert replace_commas('hello,world') == 'hello:world'\n    assert replace_commas('hello.world') == 'hello:world'\n\ndef test_replace_dots():\n    assert replace_dots('hello') == 'hello'\n    assert replace_dots('hello.world') == 'hello.world'\n    assert replace_dots('hello.world..') == 'hello.world:..'\n\nif __name__ == '__main__':\n    test_replace_spaces()\n    test_replace_commas()\n    test_replace_dots()"
    },
    {
      "rank": 71,
      "score": 8.143591138329747,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'\\s+', ':', str)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.replaceBlank(\"a:b:c\")\n    print sol.replaceBlank(\"a,b:c\")\n    print sol.replaceBlank(\"a:b,c\")\n    print sol.replaceBlank(\"a:b:c:\")\n    print sol.replaceBlank(\"a:b:c::\")"
    },
    {
      "rank": 72,
      "score": 8.08452234024709,
      "candidate": "class Solution:\n    # @param {string} str\n    # @return {string}\n    def replaceBlanks(self, str):\n        result = ''\n        for c in str:\n            if c =='' or c == ',' or c == '.':\n                result += ':'\n            else:\n                result += c\n        return result\n\n\nif __name__ == '__main__':\n    print Solution().replaceBlanks('  a.com  ')"
    },
    {
      "rank": 73,
      "score": 8.024835682833125,
      "candidate": "class Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        for i in range(len(str)):\n            if str[i] =='':\n                result += ':'\n            elif str[i] == ',' or str[i] == '.':\n                result += str[i]\n            else:\n                result += str[i]\n        return result\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.replaceBlanks(\"a.b,c,d\")"
    },
    {
      "rank": 74,
      "score": 7.990432406683839,
      "candidate": "def replace_spaces(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    res = ''\n    for c in s:\n        if c =='' or c == '.' or c == ',':\n            res += ':'\n        else:\n            res += c\n    return res\n\n# Note: This solution is not optimal, it does not replace all the spaces.\n# Instead, we replace only the first occurrence of a space, and then replace the second occurrence of a space, and so on.\n# This is because in a string, the first occurrence of a space is the 'first' part of the string, and the second occurrence of a space is the'second' part of the string.\n# Therefore, if we only replace the first occurrence of a space, we will replace the second occurrence of a space, and so on.\n# Also note that the first occurrence of a space is at the beginning of the string, and the second occurrence of a space is at the end of the string.\ndef replace_spaces_2(s):\n    res = ''\n    for c in s:\n        if c =='' or c == '.' or c == ',':\n            res += ':'\n        else:\n            res += c\n    return res\n\ndef replace_spaces_3(s):\n    res = ''\n    for c in s:\n        if c =='' or c == '.' or c == ',':\n            res += ':'\n        else:\n            res += c\n    return res\n\n# Note: This solution is not optimal. It does not replace all the spaces.\n# Instead, we replace only the first occurrence of a space, and then replace the second occurrence of a space, and so on.\n# This is because in a string, the first occurrence of a space is the 'first' part of the string, and the second occurrence of a space is the'second' part of the string.\n# Therefore, if we only replace the first occurrence of a space, we will replace the second occurrence of a space, and so on.\n# Also note that the first occurrence of a space is at the beginning of the string, and the second occurrence of a space is at the end of the string.\ndef replace_spaces_4("
    },
    {
      "rank": 75,
      "score": 7.938028884277233,
      "candidate": "def replace_colons(n, s):\n    \"\"\"\n    :type n: int\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if n <= 0:\n        return \"\"\n    replaced = \"\"\n    for i in range(len(s)):\n        if s[i] in \" \\,.:\":\n            replaced += \":\"\n        else:\n            replaced += s[i]\n    return replaced\n\nprint(replace_colons(3, \"a b c d\"))\nprint(replace_colons(3, \"a,b.c,d\"))\nprint(replace_colons(3, \"a,b.c,d\"))\nprint(replace_colons(3, \"a,b.c,d\"))"
    },
    {
      "rank": 76,
      "score": 7.915588979966494,
      "candidate": "def max_space_colon(s):\n    res = []\n    for i in range(len(s)):\n        if s[i] in '.', ',':\n            res.append(':')\n        else:\n            res.append(s[i])\n    return ''.join(res)\n\nif __name__ == '__main__':\n    assert max_space_colon('foo:bar.baz') == 'foo:bar:baz'\n    assert max_space_colon('foo:bar.baz:') == 'foo:bar.baz:'\n    assert max_space_colon('foo.bar:baz:') == 'foo.bar:baz:'\n    assert max_space_colon('foo.bar:baz') == 'foo.bar:baz'\n    assert max_space_colon('foo:bar:baz') == 'foo:bar:baz'\n    assert max_space_colon('foo.bar:baz:') == 'foo.bar:baz:'\n    assert max_space_colon('foo:bar.baz') == 'foo:bar.baz'\n    assert max_space_colon('foo:bar.baz:') == 'foo:bar.baz:'\n    assert max_space_colon('foo:bar.baz:.com') == 'foo:bar.baz:.com'\n    assert max_space_colon('foo:bar.baz:.com:') == 'foo:bar.baz:.com:'\n    assert max_space_colon('foo:bar.baz:.com:.com') == 'foo:bar.baz:.com:.com'\n    assert max_space_colon('foo:bar.baz:.com:.com:') == 'foo:bar.baz:.com:.com:'"
    },
    {
      "rank": 77,
      "score": 7.868947655733293,
      "candidate": "import re\n\ndef replace_colon(string):\n    regex = re.compile(r'[ \\.\\,]+')\n    return regex.sub(':', string)\n\nif __name__ == '__main__':\n    test_cases = [\n        (\"\", \"\"),\n        (\" \", \" \"),\n        (\"a\", \"a\"),\n        (\"a b\", \"a:b\"),\n        (\"a:b\", \"a:b\"),\n        (\"a:b c\", \"a:bc\"),\n        (\"a:b c:d\", \"a:bd\")\n    ]\n    for test_case in test_cases:\n        print(test_case)\n        print(replace_colon(test_case[0]))\n        print()"
    },
    {
      "rank": 78,
      "score": 7.834022619458933,
      "candidate": "# https://www.hackerrank.com/challenges/solution-to-the-ultimate-problem-with-strings/problem\ndef solve(n):\n    s =''.join(input().split())\n    result = ''\n    for c in s:\n        if c =='' or c == ',' or c == '.':\n            result += ':'\n        else:\n            result += c\n    return result\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(solve(n))"
    },
    {
      "rank": 79,
      "score": 7.780351419995229,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return \"\"\n        \n        res = \"\"\n        for char in str:\n            if char == \" \":\n                res += \":\"\n            else:\n                res += char\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceBlank(\"a.b\")\n    print s.replaceBlank(\"a,b\")\n    print s.replaceBlank(\"a.b.c\")\n    print s.replaceBlank(\"a.b.c.d\")\n    print s.replaceBlank(\"a.b.c.d.e\")\n    print s.replaceBlank(\"a.b.c.d.e.f\")"
    },
    {
      "rank": 80,
      "score": 7.7320703513377165,
      "candidate": "# https://www.hackerrank.com/challenges/maximum-n-occurrences/problem\n\ndef max_occ(str):\n    occurrences = []\n    for char in str:\n        if char in \".,\":\n            occurrences.append(char)\n        elif char.isdigit():\n            occurrences.append(char)\n        else:\n            break\n\n    return occurrences[-1]"
    },
    {
      "rank": 81,
      "score": 7.464609382504557,
      "candidate": "import re\n\n\ndef replace_spaces(string):\n    return re.sub(r'\\s+', ':', string)\n\n\ndef replace_commas(string):\n    return re.sub(r',+', ':', string)\n\n\ndef replace_dots(string):\n    return re.sub(r'\\.+', ':', string)\n\n\nif __name__ == '__main__':\n    print(replace_spaces('  This is a test .  '))\n    print(replace_commas('  This is a test ,  '))\n    print(replace_dots('  This is a test .  '))"
    },
    {
      "rank": 82,
      "score": 7.4506599871439985,
      "candidate": "class Solution(object):\n    def replaceBlank(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', ':')"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "from collections import Counter\n\nclass Solution(object):\n    def replaceBlanks(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return''.join([x.replace(' ',':') for x in s.split()])\n    \n    def replaceComma(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace(',',':')\n    \n    def replaceDot(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace('.',':')\n    \n    def maxReplace(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        n = len(s)\n        max_repl = 0\n        max_repl_index = 0\n        for i in range(n):\n            if s[i] =='':\n                max_repl = max(max_repl, max([0] + [len(x) for x in s.split() if x[i] == ':']))\n                continue\n            if s[i] == ',':\n                max_repl = max(max_repl, max([0] + [len(x) for x in s.split() if x[i] == ':']))\n                continue\n            if s[i] == '.':\n                max_repl = max(max_repl, max([0] + [len(x) for x in s.split() if x[i] == ':']))\n                continue\n        return s[:max_repl] + ':' + s[max_repl:]\n    \n    def maxReplace2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        n = len(s)\n        max_repl = 0\n        max_repl_index = 0\n        for i in range(n):\n            if s[i] =='':\n                max_repl = max(max_repl, max([0] + [len(x) for x in s.split() if x[i] =="
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def maxSpaces(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # if n <= 0:\n        #     return 0\n        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # if n == 3:\n        #     return 4\n        # if n == 4:\n        #     return 8\n        # if n == 5:\n        #     return 16\n        # if n == 6:\n        #     return 32\n        # if n == 7:\n        #     return 64\n        # if n == 8:\n        #     return 128\n        # if n == 9:\n        #     return 256\n        # if n == 10:\n        #     return 512\n        # if n == 11:\n        #     return 1024\n        # if n == 12:\n        #     return 2048\n        # if n == 13:\n        #     return 4096\n        # if n == 14:\n        #     return 8192\n        # if n == 15:\n        #     return 16384\n        # if n == 16:\n        #     return 32768\n        # if n == 17:\n        #     return 65536\n        # if n == 18:\n        #     return 131072\n        # if n == 19:\n        #     return 262144\n        # if n == 20:\n        #     return 524288\n        # if n == 21:\n        #     return 1048576\n        # if n == 22:\n        #     return 2097152\n        # if n == 23:\n        #     return 4194304\n        # if n == 24:\n        #     return 8388608\n        # if n == 25:\n        #     return 16777216\n        # if n == 26:\n        #     return 33554432\n        # if n == 27:\n        #     return 67108864\n        # if n == 28:\n        #     return 134217728\n        # if n == 29:\n        #     return 268435456\n        # if n == 30:\n        #     return 536870912\n        # if n =="
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "class Solution:\n    def replaceBlanks(self, s: str) -> str:\n        return ''.join(char for char in s if char not in'\\n:')"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ':'.join(s.split())\n\n    def replaceComma(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ','.join(s.split(','))\n\n    def replaceDot(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return '.'.join(s.split('.'))\n\n    def replaceSpace(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return''.join(s.split())\n\n\nif __name__ == '__main__':\n    assert Solution().replaceBlank('a.b.c') == ':a.b.c'\n    assert Solution().replaceComma('a,b,c') == 'a:b:c'\n    assert Solution().replaceDot('a.b..c') == 'a:b:c'\n    assert Solution().replaceSpace('a.b.c') == 'a.b.c'"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "# https://leetcode.com/problems/replace-all-space-with-colon/discuss/111418/Python-solution-with-line-of-code\n\nclass Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        str = str.strip()\n        if not str:\n            return str\n        \n        str = str.replace(' ', ':')\n        str = str.replace(',', ':')\n        str = str.replace('.', ':')\n        return str\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.replaceBlanks(param_1)"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def replace_spaces(text):\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\ndef replace_commas(text):\n    return text.replace(\",\", \":\")\n\ndef replace_dots(text):\n    return text.replace(\".\", \":\")\n\nif __name__ == \"__main__\":\n    assert replace_spaces(\"a:b:c:d\") == \"a:b:c:d\", \"replace_spaces\"\n    assert replace_commas(\"a,b,c:d\") == \"a:b:c:d\", \"replace_commas\"\n    assert replace_dots(\"a:b.c:d\") == \"a:b:c:d\", \"replace_dots\""
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def maxSpaces(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # base case\n        if n == 0:\n            return 0\n\n        # base case\n        if n == 1:\n            return 1\n\n        # n-1\n        return 1 + max(self.maxSpaces(n-2), self.maxSpaces(n-1))\n\n    def maxSpaces1(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # base case\n        if n == 0:\n            return 0\n\n        # base case\n        if n == 1:\n            return 1\n\n        # n-1\n        return 1 + max(self.maxSpaces1(n-2), self.maxSpaces1(n-1))\n\n\nif __name__ == '__main__':\n    print Solution().maxSpaces(4)\n    print Solution().maxSpaces1(4)"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \":\".join(s.split())\n\n    def replaceComma(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \";\".join(s.split())\n\n    def replaceDot(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \".\".join(s.split())\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print(solution.replaceBlank(\"   \"))\n    print(solution.replaceComma(\"a,b.c.d\"))\n    print(solution.replaceDot(\"a.b.c\"))"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def replaceBlank(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        result = []\n        for c in s:\n            if c == \" \":\n                result.append(\":\")\n            elif c == \",\":\n                result.append(\":\")\n            else:\n                result.append(c)\n        return \"\".join(result)\n\n    def replaceComma(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        result = []\n        for c in s:\n            if c == \",\":\n                result.append(\":\")\n            else:\n                result.append(c)\n        return \"\".join(result)\n\n    def replaceDot(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        result = []\n        for c in s:\n            if c == \".\":\n                result.append(\":\")\n            else:\n                result.append(c)\n        return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    assert Solution().replaceBlank(\"a b c d e\") == \"a:b:c:d:e\"\n    assert Solution().replaceComma(\"a,b,c\") == \"a:b:c\"\n    assert Solution().replaceDot(\"a.b.c\") == \"a:b:c\""
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "# https://leetcode.com/problems/replace-all-spaces-with-colons/\n\n# 1ms 100%\nclass Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        ans = ''\n        for i in str:\n            if i =='':\n                ans += ':'\n            elif i == ',':\n                ans += ':'\n            else:\n                ans += i\n        return ans\n\n\nif __name__ == '__main__':\n    print(Solution().replaceBlanks('hello world'))\n    print(Solution().replaceBlanks('  hello world  '))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def replace(self, s, n):\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: str\n        \"\"\"\n        s = s.strip()\n        s = ''.join(x for x in s if x not in '.,:')\n        return s\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.replace('  ', 1))\n    print(sol.replace(' .  ', 2))\n    print(sol.replace(' ...  ', 3))\n    print(sol.replace(' ...  ', 4))\n    print(sol.replace(' ...  ', 5))\n    print(sol.replace(' ...  ', 6))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def replaceBlanks(self, s):\n        result = ''\n        for ch in s:\n            if ch in (' ', ',', '.'):\n                result += ':'\n            else:\n                result += ch\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceBlanks('a a a b b c'))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "# https://leetcode.com/problems/replace-dots-with-colons/discuss/146634/Python-Solution-with-O(1)-Time-and-Space\n\n# DFS\nclass Solution:\n    def replaceDots(self, s: str) -> str:\n        if not s: return ''\n\n        # get the number of dots\n        num_dots = sum(1 for c in s if c == '.')\n\n        # get the number of commas\n        num_commas = sum(1 for c in s if c == ',')\n\n        # get the number of spaces\n        num_spaces = sum(1 for c in s if c =='')\n\n        # get the number of colons\n        num_colons = sum(1 for c in s if c == ':')\n\n        # get the maximum of the three numbers\n        max_num = max(num_dots, num_commas, num_spaces)\n\n        # replace the number\n        new_s = s.replace('.', ':')\n\n        # replace the other two numbers\n        new_s = new_s.replace(',', ':')\n        new_s = new_s.replace(' ', ':')\n\n        return new_s\n\n\n# DP\nclass Solution2:\n    def replaceDots(self, s: str) -> str:\n        if not s: return ''\n\n        # get the number of dots\n        num_dots = sum(1 for c in s if c == '.')\n\n        # get the number of commas\n        num_commas = sum(1 for c in s if c == ',')\n\n        # get the number of spaces\n        num_spaces = sum(1 for c in s if c =='')\n\n        # get the number of colons\n        num_colons = sum(1 for c in s if c == ':')\n\n        # get the maximum of the three numbers\n        max_num = max(num_dots, num_commas, num_spaces)\n\n        # get the length of the string\n        length = len(s)\n\n        # DP table\n        table = [[0 for i in range(length + 1)] for"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# -*- coding: utf-8 -*-\n\nimport re\nimport collections\n\nclass Solution(object):\n    def replaceBlanks(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        # space, comma, dot\n        pattern = re.compile(r'([ \\.,]+)')\n        # space\n        result = re.sub(pattern, r'\\1:', str)\n        # comma\n        result = re.sub(pattern, r'\\1:', result)\n        # dot\n        result = re.sub(pattern, r'\\1:', result)\n        return result\n\nif __name__ == '__main__':\n    print Solution().replaceBlanks(\"   \")"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# Write your code here\n# Test cases\n\n# Test case 1:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 2:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 3:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 4:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 5:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 6:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 7:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 8:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 9:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 10:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 11:\n# Input: \"this is a test,comma,this is a test\"\n# Output: \"this is a test:comma:this is a test\"\n\n# Test case 12:\n# Input: \"this is a test,comma,this is a test\"\n# Output:"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "import re\n\ndef replace_spaces(s):\n    return re.sub(r'\\s+', ':', s)\n\ndef replace_commas(s):\n    return re.sub(r'\\s*,\\s*', ':', s)\n\ndef replace_dots(s):\n    return re.sub(r'\\s\\.\\s', ':', s)\n\ndef test_replace_spaces():\n    assert replace_spaces('This is a test...') == 'This is a test. :'\n\ndef test_replace_commas():\n    assert replace_commas('This is a test,..') == 'This is a test. :'\n\ndef test_replace_dots():\n    assert replace_dots('This is a test,..') == 'This is a test. :'\n\ndef test_replace_spaces_regex():\n    assert re.match('This is a test. :', replace_spaces('This is a test...'))\n\ndef test_replace_commas_regex():\n    assert re.match('This is a test, :', replace_commas('This is a test,..'))\n\ndef test_replace_dots_regex():\n    assert re.match('This is a test, :', replace_dots('This is a test,..'))\n\nif __name__ == '__main__':\n    test_replace_spaces()\n    test_replace_commas()\n    test_replace_dots()\n    test_replace_spaces_regex()\n    test_replace_commas_regex()\n    test_replace_dots_regex()"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# https://oj.leetcode.com/problems/replace-dots-with-colons/\nclass Solution(object):\n    def replaceDots(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if len(s) < 2:\n            return s\n        return s.replace('.', ':')\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceDots('aa.bb.cc.dd')\n    print s.replaceDots('aa,bb,cc,dd')\n    print s.replaceDots('aa.bb.cc.dd')"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# Approach 1:\n# Write a function that replaces a space or a comma or a dot with a colon.\n# For example, if input is \"abcd:efg:hijk\", the output should be \"abcd:efg:hijk\".\n# Note:\n# The input string will not be modified.\n# The input string may contain spaces, commas, or dots.\n\n# Approach 2:\n# Write a function that replaces a space or a comma or a dot with a colon.\n# For example, if input is \"abcd:efg:hijk\", the output should be \"abcd:efg:hijk\".\n# Note:\n# The input string will not be modified.\n# The input string may contain spaces, commas, or dots.\n\n# Approach 3:\n# Write a function that replaces a space or a comma or a dot with a colon.\n# For example, if input is \"abcd:efg:hijk\", the output should be \"abcd:efg:hijk\".\n# Note:\n# The input string will not be modified.\n# The input string may contain spaces, commas, or dots.\n\n# Approach 4:\n# Write a function that replaces a space or a comma or a dot with a colon.\n# For example, if input is \"abcd:efg:hijk\", the output should be \"abcd:efg:hijk\".\n# Note:\n# The input string will not be modified.\n# The input string may contain spaces, commas, or dots.\n\n# Approach 5:\n# Write a function that replaces a space or a comma or a dot with a colon.\n# For example, if input is \"abcd:efg:hijk\", the output should be \"abcd:efg:hijk\".\n# Note:\n# The input string will not be modified.\n# The input string may contain spaces, commas, or dots.\n\ndef replace(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    # Note:\n    # Input string is not modified.\n    # Input string may contain spaces, commas, or dots.\n\n    # Approach 1\n    # Write a function that replaces a space or a comma or a dot with a colon."
    }
  ]
}