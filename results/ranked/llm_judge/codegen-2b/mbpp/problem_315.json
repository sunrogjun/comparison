{
  "timestamp": "2025-09-14T19:42:39.976178",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 315,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Write your code here\n# This is a simple example\ndef getMax(words, num):\n    maxNum = 0\n    maxNumIndex = 0\n    for index in range(len(words)):\n        if num == words[index]:\n            if maxNum < num:\n                maxNum = num\n                maxNumIndex = index\n    return maxNumIndex\n\ndef main():\n    words = [\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello\",\n        \"hello"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def getMostOccurringWord(stringList):\n    mostOccurringWord = \"\"\n    mostOccuringWordCount = 0\n    for word in stringList:\n        if word in stringList:\n            wordCount = stringList.count(word)\n            if wordCount > mostOccuringWordCount:\n                mostOccuringWord = word\n                mostOccuringWordCount = wordCount\n    return mostOccurringWord\n\nif __name__ == \"__main__\":\n    stringList = [\"hello\", \"world\", \"python\", \"hello\", \"python\", \"hello\", \"python\", \"hello\", \"python\", \"hello\", \"python\", \"hello\", \"python\", \"hello\"]\n    print getMostOccurringWord(stringList)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\nclass Solution(object):\n    def getMostFrequent(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        counts = Counter(strs)\n        return max(counts, key=counts.get)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getMostFrequent(['abc', 'aabb', 'abcc', 'abdb', 'db', 'abcd']))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/word-break/\nclass Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        # Write your code here\n        if not s or not wordDict:\n            return False\n        dp = [[False] * len(wordDict) for _ in range(len(s))]\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if dp[i][j] and s[i:j+1] in wordDict:\n                    dp[i+1][j] = True\n        return dp[0][len(s)-1]\n\nif __name__ == \"__main__\":\n    s = \"leetcode\"\n    wordDict = [\"leet\", \"code\"]\n    print Solution().wordBreak(s, wordDict)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getMostPopularWord(self, dict, strs):\n        \"\"\"\n        :type dict: List[str]\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        def count(str):\n            return sum(1 for c in str if dict.count(c) > 0)\n        return max(strs, key=count)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/word-count\n\ndef get_most_occurrences(string_list):\n    \"\"\"\n    :type string_list: List[str]\n    :rtype: List[str]\n    \"\"\"\n    # create a set of all the words\n    word_set = set(string_list)\n\n    # get the maximum number of occurrences\n    max_count = max(word_set)\n\n    # return the word with maximum number of occurrences\n    return max(word_set, key=word_set.count)\n\n\nif __name__ == '__main__':\n    string_list = [\n        \"Hello\",\n        \"Hello World\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\",\n        \"Hello World!\","
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Time:  O(n^2)\n# Space: O(n)\n#\n# score:100\n# time:O(n^2)\n# space:O(n)\nclass Solution(object):\n    def maxWordFrequency(self, wordList, text):\n        \"\"\"\n        :type wordList: List[str]\n        :type text: str\n        :rtype: str\n        \"\"\"\n        def dfs(word, text):\n            if len(word) == 0:\n                return (word, 1)\n            for i in xrange(len(text)):\n                if word in text[i]:\n                    if (len(word) + 1) > len(text[i]):\n                        return (word, len(text[i]))\n                    else:\n                        return (word, len(text[i]))\n                else:\n                    return (word, 1)\n        text = text.lower()\n        wordList = [w.lower() for w in wordList]\n        max_len = 0\n        max_word = \"\"\n        for w in wordList:\n            (max_word, max_len) = dfs(w, text)\n            if max_len > max_len:\n                max_word = w\n        return max_word\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maxWordFrequency([\"hello\", \"world\", \"world\"], \"hello world\")\n    print s.maxWordFrequency([\"hello\", \"world\", \"world\"], \"hello world\")\n    print s.maxWordFrequency([\"hello\", \"world\", \"world\"], \"world hello\")\n    print s.maxWordFrequency([\"hello\", \"world\", \"world\"], \"world hello\")\n    print s.maxWordFrequency([\"hello\", \"world\", \"world\"], \"world\")"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import collections\n\n\ndef get_max_words_with_counts(words_list):\n    \"\"\"\n    :type words_list: List[str]\n    :rtype: str\n    \"\"\"\n    max_words = collections.Counter()\n\n    for word in words_list:\n        counter = collections.Counter()\n        for i in range(len(word)):\n            counter[word[i]] += 1\n        max_words = max(max_words, counter)\n\n    return max_words.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(get_max_words_with_counts([\"a\", \"a\", \"a\", \"a\"]))\n    print(get_max_words_with_counts([\"a\", \"a\", \"a\", \"b\"]))\n    print(get_max_words_with_counts([\"a\", \"b\", \"a\", \"a\"]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# TODO:\n# - Write a function to get the word with most number of occurrences in the given strings list.\n\ndef most_occurrence(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    if not strings:\n        return ''\n\n    word_count = collections.Counter(strings)\n    most_occurrence_index = word_count.most_common(1)[0][0]\n    return most_occurrence_index\n\n\nif __name__ == '__main__':\n    strings = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    print(most_occurrence(strings))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def get_most_occurrences(s, t):\n    \"\"\"\n    :type s: List[str]\n    :type t: List[str]\n    :rtype: List[str]\n    \"\"\"\n    count = {}\n    for s_word in s:\n        if s_word not in count:\n            count[s_word] = 1\n        else:\n            count[s_word] += 1\n    for t_word in t:\n        if t_word in count:\n            if count[t_word] > count[s_word]:\n                count[s_word] = count[t_word]\n    return count.keys()\n\n\n# Your WordCounter object will be instantiated and called as such:\n# word_counter = WordCounter()\n# word_counter.add_words(words)\n# word_counter.add_words(words)\n# word_counter.remove_word(word)\n# word_counter.get_most_frequent_word(10)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef get_max_count(strings):\n    return max(map(lambda s: (s, len(s)), strings))[1]\n\n\nif __name__ == '__main__':\n    strings = [\n        \"abcd\",\n        \"abcd\",\n        \"abcde\",\n        \"abcde\",\n        \"abcdef\",\n        \"abcdef\",\n        \"abcdefg\",\n        \"abcdefg\",\n        \"abcdefgh\",\n        \"abcdefgh\",\n        \"abcdefghi\",\n        \"abcdefghi\",\n        \"abcdefghij\",\n        \"abcdefghij\",\n        \"abcdefghijkl\",\n        \"abcdefghijkl\",\n        \"abcdefghijklmn\",\n        \"abcdefghijklmn\",\n        \"abcdefghijklmnop\",\n        \"abcdefghijklmnop\",\n        \"abcdefghijklmnopqr\",\n        \"abcdefghijklmnopqr\",\n        \"abcdefghijklmnopqrst\",\n        \"abcdefghijklmnopqrst\",\n        \"abcdefghijklmnopqrstuv\",\n        \"abcdefghijklmnopqrstuv\",\n        \"abcdefghijklmnopqrstuvw\",\n        \"abcdefghijklmnopqrstuvw\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"abc"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef most_occurring_word(strings_list):\n    \"\"\"\n    :type strings_list: List[str]\n    :rtype: str\n    \"\"\"\n    counter = Counter()\n    for s in strings_list:\n        counter.update(s)\n    return max(counter, key=counter.get)\n\n\nif __name__ == \"__main__\":\n    strings_list = [\"Hello\", \"World\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\"]\n    print(most_occurring_word(strings_list))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution:\n    def mostPopularWord(self, dictionary, strings):\n        \"\"\"\n        :type dictionary: List[str]\n        :type strings: List[str]\n        :rtype: str\n        \"\"\"\n        word_count = collections.Counter(strings)\n        max_word = max(word_count, key=word_count.get)\n        return max_word"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxWord(self, dict, strs):\n        \"\"\"\n        :type dict: List[str]\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        # base case\n        if len(strs) == 0:\n            return ''\n        # count the number of words\n        count = Counter(strs)\n        # return the word with most number of occurrences\n        return max(count, key=count.get).__str__()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/word-with-most-occurrences/discuss/61943/Python-Solution\n\n# Example:\n# Input: [\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"]\n# Output: \"World\"\n\nclass Solution(object):\n    def maxWord(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        if not words:\n            return \"\"\n        # hash to store the words\n        words_hash = {}\n        # iterate over words and add words to hash\n        for word in words:\n            words_hash[word] = words_hash.get(word, 0) + 1\n        # get the word with the most occurrences\n        max_key = max(words_hash, key=words_hash.get)\n        # return the max_key\n        return max_key\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maxWord([])\n    print s.maxWord([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n    print s.maxWord([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n    print s.maxWord([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for a word.\nclass Word:\n    def __init__(self, word, count):\n        self.word = word\n        self.count = count\n\n\nclass Solution(object):\n    def maxWord(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: Word\n        \"\"\"\n        words = sorted(words, key=lambda x: x.count, reverse=True)\n        max_word = words[0]\n        for word in words[1:]:\n            if word.word > max_word.word:\n                max_word = word\n        return max_word"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "#!/bin/python3\n\n# The problem:\n# Given a list of strings, return a string that has the highest count of the word.\n# Example:\n# Input: [\"cat\", \"bat\", \"rat\"]\n# Output: \"rat\"\n# Explanation: \"rat\" has the highest count of \"rat\" in the given list.\n\n# Solution:\n# Write a recursive function to get the word with highest count.\n\n# Note:\n# The length of the given string list is in the range [1, 10,000].\n# The length of the given string is in the range [1, 10,000].\n\nclass Solution:\n    # @param {List[str]} strs\n    # @return {str}\n    def maxWord(self, strs):\n        if not strs:\n            return ''\n        maxWord = ''\n        maxCount = 0\n        maxIndex = 0\n        for i in range(len(strs)):\n            str = strs[i]\n            count = str.count(' ')\n            if count > maxCount:\n                maxWord = str\n                maxCount = count\n                maxIndex = i\n        return maxWord\n\n    # @param {List[str]} strs\n    # @return {str}\n    def maxWord2(self, strs):\n        if not strs:\n            return ''\n        maxWord = ''\n        maxCount = 0\n        maxIndex = 0\n        for i in range(len(strs)):\n            str = strs[i]\n            count = str.count(' ')\n            if count > maxCount:\n                maxWord = str\n                maxCount = count\n                maxIndex = i\n        return maxWord\n\n\n# Test cases:\n# Input: [\"cat\", \"bat\", \"rat\"]\n# Output: \"rat\"\n# Input: [\"cat\", \"bat\", \"rat\", \"rat\", \"rat\"]\n# Output: \"rat\""
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def get_most_occurring_word(words, target):\n    \"\"\"\n    :type words: List[str]\n    :type target: str\n    :rtype: str\n    \"\"\"\n    return words[0]\n\nif __name__ == \"__main__\":\n    words = [\"hello\", \"world\", \"world\"]\n    target = \"world\"\n    print(get_most_occurring_word(words, target))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Definition for a word.\nclass Word:\n    def __init__(self, word, count):\n        self.word = word\n        self.count = count\n\n    def __repr__(self):\n        return self.word\n\nclass Solution:\n    def maxCount(self, strs: List[str], k: int) -> Word:\n        # This is a naive solution.\n        # We can use a hash table to store words and their frequency\n        # to avoid duplicate words.\n        # We can also use a trie to store words and their frequency.\n        # This is a O(n*k) solution.\n        # We can also use a trie to store words and their frequency.\n        # This is a O(n) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        # This is a O(n*k) solution.\n        #"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def get_most_occurring_word(strs):\n    most_occurring_word = ''\n    most_occurring_count = 0\n\n    for string in strs:\n        occurrences = 0\n        for word in strs:\n            if string == word:\n                occurrences += 1\n        if occurrences > most_occurring_count:\n            most_occurring_word = word\n            most_occurring_count = occurrences\n\n    return most_occurring_word\n\ndef test():\n    assert get_most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"a\", \"a\"]) == \"a\", \"test1\"\n    assert get_most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"a\", \"a\"]) == \"a\", \"test2\"\n    assert get_most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"a\", \"a\"]) == \"a\", \"test3\"\n    assert get_most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"a\", \"a\"]) == \"a\", \"test4\"\n    assert get_most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"a\", \"a\"]) == \"a\", \"test5\"\n    assert get_most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"a\", \"a\"]) == \"a\", \"test6\"\n    assert get_most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"a\", \"a\"]) == \"a\", \"test7\"\n    assert get_most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"a\", \"a\"]) == \"a\", \"test8\"\n    assert get_most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"a\", \"a"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def getMostFrequentWord(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return None\n    word_dict = {}\n    for s in strs:\n        for c in s:\n            if c not in word_dict:\n                word_dict[c] = 1\n            else:\n                word_dict[c] += 1\n    sorted_dict = sorted(word_dict.items(), key=lambda x: x[1])\n    return sorted_dict[0][0]\n\n\nif __name__ == '__main__':\n    s = ['a', 'bbb', 'ccc', 'dddd', 'e', 'eeeee', 'f']\n    print(getMostFrequentWord(s))\n    s = ['a', 'bbb', 'ccc', 'dddd', 'e', 'eeeee', 'f', 'ggggg']\n    print(getMostFrequentWord(s))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "import collections\n\ndef get_most_occurrences(strings):\n    most_occurrences = collections.defaultdict(int)\n    for word in strings:\n        for char in word:\n            most_occurrences[char] += 1\n    return max(most_occurrences.items(), key=lambda x: x[1])[0]\n\nstrings = ['a', 'bb', 'ccc', 'dddd', 'eeee']\nprint(get_most_occurrences(strings))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def most_occurrences(strings):\n    if not strings:\n        return None\n    count = Counter(strings)\n    return max(count.items(), key=lambda x: x[1])[0]\n\nif __name__ == \"__main__\":\n    strings = [\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\",\n        \"the\","
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def getMaxOccurrences(strings):\n    # write your code here\n    maxOccurrences = 0\n    for s in strings:\n        occurrences = collections.Counter(s)\n        if occurrences.most_common(1) == []:\n            continue\n        else:\n            maxOccurrences = max(maxOccurrences, occurrences.most_common(1)[0][0])\n    return maxOccurrences\n\nif __name__ == \"__main__\":\n    strings = [\"Hello\", \"World\", \"World\", \"Hello\", \"World\", \"World\", \"Hello\", \"World\"]\n    print getMaxOccurrences(strings)\n    strings = [\"Hello\", \"World\", \"World\", \"Hello\", \"World\", \"World\", \"Hello\", \"World\"]\n    print getMaxOccurrences(strings)"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def get_word_with_max_count(word, strs):\n    \"\"\"\n    :type word: str\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    counts = defaultdict(int)\n    for s in strs:\n        counts[s] += 1\n    return max(counts, key=counts.get)\n\nif __name__ == '__main__':\n    print(get_word_with_max_count('love', ['love','sport', 'hate', 'love', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love', 'hate', 'love',"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def get_most_occurrences(string_list):\n    word_counts = {}\n    for word in string_list:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    return max(word_counts, key=word_counts.get)\n\nif __name__ == \"__main__\":\n    strings = [\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"world"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef get_most_occurrences(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strings) == 0:\n        return None\n    \n    counter = Counter(strings)\n    most_occurrences = max(counter.iteritems(), key=lambda x: x[1])\n    return most_occurrences[0]\n\n\nif __name__ == '__main__':\n    strings = [\"Hello\", \"World\", \"Hello\", \"Hello\"]\n    print(get_most_occurrences(strings))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "# The idea is to use the count of each word in the given list\n# If there are multiple words with same number of occurrences, we need to sort them\n# The list of strings could be generated from a file or from stdin\n\n# For example:\n# For input [\n#   \"abc\",\n#   \"abcabc\",\n#   \"cab\",\n#   \"cababc\",\n#   \"abcabcabc\",\n#   \"abcabcabcabc\",\n#   \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef get_word_with_max_occ(words):\n    word_with_max_occ = ''\n    word_with_max_occ_count = 0\n    for word in words:\n        count = words.count(word)\n        if count > word_with_max_occ_count:\n            word_with_max_occ_count = count\n            word_with_max_occ = word\n    return word_with_max_occ\n\n#words = ['a', 'b', 'c', 'a', 'a', 'a']\n#print get_word_with_max_occ(words)\n\nwords = ['a', 'a', 'a', 'b', 'b', 'c']\nprint get_word_with_max_occ(words)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef get_word_with_most_occurrences(words):\n    word_count = Counter(words)\n    word = max(word_count, key=word_count.get)\n    return word\n\ndef test():\n    words = [\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\",\n        \"apple\",\n        \"orange\",\n        \"banana\","
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def word_count(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: List[str]\n    \"\"\"\n    word_count_dict = {}\n    for word in words:\n        word_count_dict[word] = word_count_dict.get(word, 0) + 1\n\n    word_with_max_count = ''\n    max_count = 0\n    for word in word_count_dict:\n        if word_count_dict[word] > max_count:\n            max_count = word_count_dict[word]\n            word_with_max_count = word\n\n    return word_with_max_count"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef get_most_occurrence(strings):\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == '__main__':\n    strings = [\n        'hello',\n        'goodbye',\n        'hello',\n        'goodbye',\n        'hello',\n        'goodbye',\n        'hello',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'goodbye',\n        'good"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef get_most_occurring_word(strings):\n    counts = Counter(strings)\n    most_occurring_word = ''\n    most_occurring_count = 0\n    for word, count in counts.items():\n        if count > most_occurring_count:\n            most_occurring_word = word\n            most_occurring_count = count\n    return most_occurring_word\n\nif __name__ == '__main__':\n    strings = [\"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\","
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def most_occurring_word(strings_list):\n    \"\"\"\n    Write a function to get the word with most number of occurrences in the given strings list.\n    :param strings_list: A list of strings\n    :return: The most occurring word\n    \"\"\"\n    word_count = collections.Counter(strings_list)\n    return word_count.most_common(1)[0][0]\n\n\nif __name__ == '__main__':\n    strings_list = [\n        'abcd',\n        'abcd',\n        'abbc',\n        'abbc',\n        'abc',\n        'abc',\n        'ab',\n        'ab',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxyz',\n        'abcdefghijklmnopqrstuvwxy"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "import sys\n\nclass Solution(object):\n    def getWordWithMostOccurrences(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: str\n        \"\"\"\n        word_count = collections.Counter()\n        for s in strings:\n            for w in s:\n                word_count[w] += 1\n\n        return max(word_count.items(), key=lambda x:x[1])[0]\n\nif __name__ == '__main__':\n    strings = sys.stdin.read().split()\n    s = Solution()\n    print s.getWordWithMostOccurrences(strings)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def get_word_with_most_occurrences(words, words_list):\n    \"\"\"\n    :type words: List[str]\n    :type words_list: List[str]\n    :rtype: str\n    \"\"\"\n    word_count_dict = {}\n    for word in words:\n        if word in word_count_dict:\n            word_count_dict[word] += 1\n        else:\n            word_count_dict[word] = 1\n\n    max_word_count = 0\n    max_word = ''\n    for word, count in word_count_dict.items():\n        if count > max_word_count:\n            max_word_count = count\n            max_word = word\n\n    return max_word\n\n# print get_word_with_most_occurrences(words, words_list)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def getMostWord(strings):\n    mostWord = \"\"\n    mostCount = 0\n    for string in strings:\n        count = 0\n        for word in string.split():\n            if word in strings:\n                count += 1\n        if count > mostCount:\n            mostCount = count\n            mostWord = word\n    return mostWord\n\nif __name__ == '__main__':\n    strings = [\"ab\", \"a\", \"aa\", \"abcd\", \"abcd\", \"a\", \"b\"]\n    print getMostWord(strings)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def word_count(words):\n\tcount = 0\n\tword = ''\n\tfor word in words:\n\t\tcount += word.count(word)\n\treturn max(count, words)\n\nif __name__ == '__main__':\n\twords = ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc']\n\tprint word_count(words)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def get_max_occurrences(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    max_occurrences = 0\n    max_occurrences_word = None\n\n    for s in strings:\n        count = len([c for c in s if c!=''])\n        if count > max_occurrences:\n            max_occurrences = count\n            max_occurrences_word = s\n\n    return max_occurrences_word\n\nif __name__ == '__main__':\n    strings = ['a', 'b', 'b', 'a', 'a', 'a', 'a']\n    print(get_max_occurrences(strings))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getMaxWord(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        result = ''\n        for word in words:\n            count = 0\n            for c in word:\n                if c in 'abcdefghijklmnopqrstuvwxyz':\n                    count += 1\n            if count > result.count(word):\n                result = word\n        return result\n\nif __name__ == '__main__':\n    solution = Solution()\n    words = ['hello', 'world', 'how', 'are', 'you', 'today', 'today', 'today', 'today']\n    print solution.getMaxWord(words)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def get_most_occurring_word(words, strings):\n    \"\"\"\n    :type words: List[str]\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    sorted_word_counts = sorted(word_counts.items(), key=lambda x: x[1])\n    return sorted_word_counts[0][0]\n\nif __name__ == '__main__':\n    words = ['abcd', 'abc', 'ab', 'a', 'b']\n    strings = ['abc', 'abcd', 'abc', 'ab', 'a']\n    print(get_most_occurring_word(words, strings))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def getMostFrequent(list):\n    # Write your code here\n    if not list:\n        return \"\"\n\n    freq_dict = dict()\n    for word in list:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n\n    max_key = max(freq_dict.iteritems(), key=operator.itemgetter(1))\n    return max_key[0]\n\nif __name__ == '__main__':\n    print getMostFrequent(['ab', 'cd', 'ab', 'cd', 'ab'])"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def get_word_with_most_occurrence(strings):\n    word_occurrence = {}\n    for string in strings:\n        for word in string.split():\n            word_occurrence.setdefault(word, 0)\n            word_occurrence[word] += 1\n    return max(word_occurrence.iteritems(), key=lambda x: x[1])[0]\n\nif __name__ == '__main__':\n    strings = [\n        \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\",\n        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\",\n        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \""
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import collections\n\ndef find_word_with_max_occurrences(string_list):\n    \"\"\"\n    :type string_list: List[str]\n    :rtype: str\n    \"\"\"\n    word_dict = collections.defaultdict(int)\n    for word in string_list:\n        for letter in word:\n            word_dict[letter] += 1\n\n    # Get the word with maximum number of occurrences\n    max_occurrences_word = max(word_dict.items(), key=lambda x: x[1])\n\n    return max_occurrences_word[0]\n\n\nif __name__ == '__main__':\n    string_list = ['cat', 'dog','mouse', 'cat', 'dog','mouse', 'dog', 'cat']\n    print(find_word_with_max_occurrences(string_list))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def get_most_occurrences(strings_list):\n    if len(strings_list) == 0:\n        return \"\", 0\n    most_occurrences_word = \"\"\n    most_occurrences_count = 0\n    for string in strings_list:\n        count = 0\n        for word in strings_list:\n            if word.lower() in string.lower():\n                count += 1\n        if count > most_occurrences_count:\n            most_occurrences_word = string\n            most_occurrences_count = count\n    return most_occurrences_word, most_occurrences_count\n\n\nif __name__ == \"__main__\":\n    strings_list = [\n        \"apple\", \"orange\", \"banana\", \"apple\", \"banana\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\","
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def most_occurrence(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    words = {}\n    for string in strings:\n        for word in string.split():\n            if word not in words:\n                words[word] = 1\n            else:\n                words[word] += 1\n    return max(words.items(), key=lambda x: x[1])[0]\n\nstrings = [\n    'Hello',\n    'world',\n    'Hello',\n    'world',\n    'Hello',\n    'world',\n    'Hello',\n    'world',\n    'Hello',\n    'world',\n    'Hello',\n    'world',\n]\n\nprint(most_occurrence(strings))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def get_most_occurrences(strings, word):\n    max_occurrences = 0\n    for string in strings:\n        occurrences = string.count(word)\n        if occurrences > max_occurrences:\n            max_occurrences = occurrences\n    return max_occurrences\n\nif __name__ == '__main__':\n    strings = [\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',\n        'Goodbye',\n        'Hello',"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def get_most_occurrences(words_list):\n    \"\"\"\n    :type words_list: List[str]\n    :rtype: Tuple[str, int]\n    \"\"\"\n    occurrences_map = {}\n    for word in words_list:\n        if word in occurrences_map:\n            occurrences_map[word] += 1\n        else:\n            occurrences_map[word] = 1\n\n    sorted_keys = sorted(occurrences_map.keys(), key=occurrences_map.get, reverse=True)\n    return sorted_keys[0], occurrences_map[sorted_keys[0]]\n\n\nif __name__ == '__main__':\n    words = [\n        'a', 'bbb', 'bb', 'a', 'cccc', 'c', 'bbb', 'd', 'b', 'a', 'bb',\n        'a', 'c', 'bbbb', 'bb', 'd', 'b', 'ccc', 'c', 'cccc', 'd', 'c',\n        'bbbb', 'b', 'ccc', 'c', 'b', 'bb', 'b', 'd', 'b', 'bb', 'c', 'bb',\n        'c', 'bbbb', 'b', 'bb', 'bbb', 'bb', 'b', 'cccc', 'c', 'ccc', 'b',\n        'c', 'ccc', 'cccc', 'b', 'bb', 'c', 'bbbb', 'b', 'cccc', 'c', 'ccc',\n        'c', 'bb', 'cccc', 'cccc', 'ccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc',\n        'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc',\n        'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc', 'cccc',"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\nclass Solution(object):\n    def maxWord(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        d = defaultdict(int)\n        for w in words:\n            for c in w:\n                d[c] += 1\n        return max(d, key=d.get)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxWord([\"a\", \"bbb\", \"ccccc\", \"ddddd\", \"ee\"]))\n    print(sol.maxWord([\"a\", \"bb\", \"cc\", \"dd\", \"ee\"]))\n    print(sol.maxWord([\"a\", \"a\", \"bb\", \"cc\", \"cc\", \"dd\", \"ee\"]))\n    print(sol.maxWord([\"a\", \"bbb\", \"ccccc\", \"ddddd\", \"ee\", \"ee\"]))\n    print(sol.maxWord([\"a\", \"bbb\", \"ccccc\", \"ddddd\", \"ee\", \"ee\", \"ee\"]))\n    print(sol.maxWord([\"a\", \"bbb\", \"ccccc\", \"ddddd\", \"ee\", \"ee\", \"ee\", \"ee\"]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\n\ndef get_most_occurrences(strings, words):\n    \"\"\"\n    :type strings: List[str]\n    :type words: List[str]\n    :rtype: str\n    \"\"\"\n    # words = [\"the\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a\", \"is\", \"a"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef get_most_occurring_word(list_of_words, words_dict):\n    \"\"\"\n    Input:\n        list_of_words: A list of strings, the words to be searched.\n        words_dict: A dictionary of words and the number of times they appear in the list_of_words.\n    Output:\n        The most occurring word in the list_of_words.\n    \"\"\"\n    occur_word = Counter(list_of_words).most_common(1)[0][0]\n    for word in list_of_words:\n        if occur_word in words_dict:\n            if words_dict[occur_word] > words_dict[word]:\n                occur_word = word\n    return occur_word\n\nif __name__ == '__main__':\n    list_of_words = [\n        \"the\",\n        \"quick\",\n        \"brown\",\n        \"fox\",\n        \"jumped\",\n        \"over\",\n        \"the\",\n        \"lazy\",\n        \"dog\",\n        \"the\",\n        \"tired\",\n        \"of\",\n        \"the\"\n    ]\n    words_dict = {\n        \"the\": 3,\n        \"quick\": 2,\n        \"brown\": 2,\n        \"fox\": 1,\n        \"jumped\": 1,\n        \"over\": 1,\n        \"the\": 1,\n        \"lazy\": 1,\n        \"dog\": 1,\n        \"the\": 1,\n        \"tired\": 1,\n        \"of\": 1,\n        \"the\": 1\n    }\n    print(get_most_occurring_word(list_of_words, words_dict))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def get_word_with_max_count(words, strings):\n    # write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        if word in strings:\n            count = strings.count(word)\n            if count > max_count:\n                max_count = count\n                max_word = word\n    return max_word, max_count\n\nif __name__ == \"__main__\":\n    words = [\"apple\", \"orange\", \"banana\", \"apple\"]\n    strings = [\"apple\", \"orange\", \"apple\", \"banana\"]\n    print get_word_with_max_count(words, strings)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def get_word_with_most_occurrences(str_list):\n    most_occurrences = -1\n    for string in str_list:\n        occurrences = 0\n        for word in string:\n            occurrences += str.count(word)\n        if occurrences > most_occurrences:\n            most_occurrences = occurrences\n    return string\n\nif __name__ == '__main__':\n    str_list = [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]\n    print(get_word_with_most_occurrences(str_list))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def get_word(strings):\n    word = \"\"\n    count = 0\n    for word_str in strings:\n        word_count = len(word_str)\n        if word_count > count:\n            count = word_count\n            word = word_str\n    return word\n\nif __name__ == \"__main__\":\n    strings = [\n        \"hello\",\n        \"world\",\n        \"hello\",\n        \"hello\",\n        \"world\",\n        \"world\",\n        \"hello\",\n        \"hello\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"hello\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world\",\n        \"world"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def get_most_occurring_word(strings):\n    if not strings:\n        return \"\"\n    occurrences = {}\n    for word in strings:\n        if word not in occurrences:\n            occurrences[word] = 1\n        else:\n            occurrences[word] += 1\n    max_occurrences = max(occurrences.values())\n    most_occurring_word = \"\"\n    for word, occurrences in occurrences.items():\n        if occurrences == max_occurrences:\n            return word\n        elif occurrences > max_occurrences:\n            most_occurring_word = word\n            max_occurrences = occurrences\n    return most_occurring_word\n\n# Test Cases\nstrings = [\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"world\",\n    \"hello\",\n    \"hello\",\n    \"world\",\n    \"world\","
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def most_occurring_word(strings, word):\n    word_occurences = collections.Counter(word)\n    most_occuring_word = max(word_occurences.items(), key=lambda x: x[1])[0]\n    return most_occuring_word\n\nprint(most_occurring_word([\"hello\", \"world\", \"hello\", \"world\"], \"world\"))\nprint(most_occurring_word([\"hello\", \"world\", \"hello\", \"world\"], \"worlds\"))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import collections\nfrom collections import Counter\n\ndef get_most_occurrences(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    # write your code here\n    occurrences = collections.Counter(strings)\n    most_occurrences = collections.Counter(occurrences).most_common(1)[0][0]\n\n    return most_occurrences\n\nif __name__ == '__main__':\n    strings = [\"a\", \"b\", \"c\", \"c\", \"c\", \"b\", \"b\", \"a\", \"a\", \"a\"]\n    print get_most_occurrences(strings)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import re\n\ndef get_most_occurent_word(string_list):\n    \"\"\"\n    Input: A list of strings.\n    Output: A string with the most number of occurrences in the given strings list.\n    \"\"\"\n    counts = {}\n    for s in string_list:\n        for c in s:\n            if c in counts:\n                counts[c] += 1\n            else:\n                counts[c] = 1\n    max_key = max(counts.keys())\n    for k in counts.keys():\n        if counts[k] == max_key:\n            return k\n\ndef get_most_occurent_word_regex(string_list):\n    \"\"\"\n    Input: A list of strings.\n    Output: A string with the most number of occurrences in the given strings list.\n    \"\"\"\n    counts = {}\n    for s in string_list:\n        for c in s:\n            if c in counts:\n                counts[c] += 1\n            else:\n                counts[c] = 1\n    max_key = max(counts.keys())\n    pattern = re.compile(\"[a-zA-Z]{1}\")\n    for k in counts.keys():\n        if pattern.search(k):\n            if counts[k] == max_key:\n                return k\n\nif __name__ == \"__main__\":\n    string_list = [\"a\", \"b\", \"a\", \"a\", \"a\"]\n    print get_most_occurent_word(string_list)\n    print get_most_occurent_word_regex(string_list)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def get_most_occurrences(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: List[str]\n    \"\"\"\n    if not strings:\n        return []\n\n    max_counts = [0] * len(strings)\n    for i in range(len(strings)):\n        for j in range(len(strings)):\n            if strings[i] == strings[j]:\n                max_counts[i] = max(max_counts[i], max_counts[j] + 1)\n\n    max_counts = sorted(max_counts, key=max_counts.__getitem__, reverse=True)\n    return max_counts[0]\n\nif __name__ == '__main__':\n    strings = [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"a\", \"a\", \"a\", \"a\"]\n    print get_most_occurrences(strings)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def getMostOccurrence(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    dic = {}\n    for word in strings:\n        if word in dic:\n            dic[word] += 1\n        else:\n            dic[word] = 1\n\n    max_count = 0\n    most_occurrence = ''\n    for word, count in dic.items():\n        if count > max_count:\n            max_count = count\n            most_occurrence = word\n\n    return most_occurrence\n\n\n# Your code here.\nstrings = ['This', 'is', 'an', 'example', 'of', 'text', 'just', 'as','simple', 'as', 'possible', '.']\nprint(getMostOccurrence(strings))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def getMostFrequentWord(words, k):\n    # write your code here\n    result = None\n    result_count = 0\n    for word in words:\n        count = 0\n        for w in words:\n            if w.startswith(word):\n                count += 1\n        if count > result_count:\n            result_count = count\n            result = word\n    return result, result_count\n\nif __name__ == '__main__':\n    print getMostFrequentWord(['abc', 'abcd', 'abcde', 'abcde', 'abcde', 'abcde'], 3)\n    print getMostFrequentWord(['abc', 'abcd', 'abcde', 'abcde', 'abcde', 'abcde'], 1)\n    print getMostFrequentWord(['abc', 'abcd', 'abcde', 'abcde', 'abcde', 'abcde'], 2)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import sys\n\ndef getMostOccurrences(list1, list2):\n    max_occurrences = 0\n    max_occurrences_word = \"\"\n    for word in list1:\n        occurrences = 0\n        for word2 in list2:\n            if word == word2:\n                occurrences += 1\n        if occurrences > max_occurrences:\n            max_occurrences = occurrences\n            max_occurrences_word = word\n    return max_occurrences_word\n\ndef getMostOccurrences2(list1, list2):\n    max_occurrences = 0\n    max_occurrences_word = \"\"\n    for word in list1:\n        occurrences = 0\n        for word2 in list2:\n            if word == word2:\n                occurrences += 1\n        if occurrences > max_occurrences:\n            max_occurrences = occurrences\n            max_occurrences_word = word\n    return max_occurrences_word\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print(\"Please provide at least one string\")\n        exit(0)\n    list1 = [sys.argv[1], sys.argv[2]]\n    list2 = [sys.argv[3], sys.argv[4]]\n    print(\"The word with the most occurrences in the list: %s\" % getMostOccurrences(list1, list2))\n    print(\"The word with the most occurrences in the list: %s\" % getMostOccurrences2(list1, list2))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def getMostOccurrences(strings):\n    most = 0\n    for s in strings:\n        count = 0\n        for c in s:\n            count += 1\n        if count > most:\n            most = count\n    return most\n\nif __name__ == '__main__':\n    strings = [\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\","
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def most_occurrences(strings):\n    result = None\n    for string in strings:\n        occurrences = 0\n        for word in string:\n            occurrences += string.count(word)\n        if result is None or occurrences > result[1]:\n            result = (word, occurrences)\n    return result\n\n\nif __name__ == '__main__':\n    strings = [\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadabra',\n        'abracadab"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "#Write your code here\ndef get_word_with_most_occurrences(strings):\n    if not strings:\n        return \"\"\n    word_count = collections.Counter(strings[0])\n    word_with_max_occurrences = word_count.most_common(1)[0][0]\n    return word_with_max_occurrences\n\nif __name__ == '__main__':\n    strings = [\n        \"Hello\",\n        \"Hi\",\n        \"How are you\",\n        \"I am fine\",\n        \"My name is Chris\",\n        \"Hello, world\",\n        \"Hello, world!\"\n    ]\n    print(get_word_with_most_occurrences(strings))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def most_occurrences(strings):\n    result = 0\n    for string in strings:\n        if string in words:\n            if words[string] > result:\n                result = words[string]\n    return result\n\ndef most_occurrences_2(strings):\n    result = 0\n    for string in strings:\n        if string in words:\n            if words[string] > result:\n                result = words[string]\n    return result\n\ndef main():\n    words = {\n        'java': 3,\n        'python': 2,\n        'c': 1,\n       's': 1,\n        'java': 3,\n        'python': 2,\n        'c': 1,\n       's': 1,\n        'java': 3,\n        'python': 2,\n        'c': 1,\n       's': 1,\n        'java': 3,\n        'python': 2,\n        'c': 1,\n       's': 1\n    }\n    strings = ['java', 'python', 'c','s', 'java', 'python', 'c','s', 'java', 'python', 'c','s', 'java', 'python', 'c','s']\n    print(most_occurrences(strings))\n    print(most_occurrences_2(strings))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def get_most_occurring_word(strings):\n    word_count = collections.Counter(strings)\n    max_count = max(word_count.values())\n    return word_count.most_common(1)[0][0]\n\nif __name__ == \"__main__\":\n    strings = [\n        \"abcd\",\n        \"bcde\",\n        \"cdef\",\n        \"defg\",\n        \"abcd\",\n        \"bcde\",\n        \"cdef\",\n        \"defg\",\n        \"abcd\",\n        \"bcde\",\n        \"cdef\",\n        \"defg\",\n        \"abcd\",\n        \"bcde\",\n        \"cdef\",\n        \"defg\"\n    ]\n    print(get_most_occurring_word(strings))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import sys\n\ndef get_most_occurrences(strings_list):\n    \"\"\"\n    Return the word with most number of occurrences in the given strings list.\n\n    :param strings_list: List of strings.\n    :return: Word with most number of occurrences in the given strings list.\n    \"\"\"\n    return max(strings_list, key=lambda word: word.count(\" \"))\n\nif __name__ == \"__main__\":\n    strings_list = [\"A\", \"B\", \"C\", \"D\", \"A\", \"B\", \"A\", \"C\", \"A\", \"B\", \"B\", \"D\"]\n    print(get_most_occurrences(strings_list))\n    print(get_most_occurrences(strings_list))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef get_word_with_max_occurrences(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    word_counts = Counter(strings)\n    return max(word_counts, key=word_counts.get)\n\nif __name__ == \"__main__\":\n    strings = [\"hello\", \"goodbye\", \"hello\", \"hello\", \"hello\", \"goodbye\", \"goodbye\", \"goodbye\", \"goodbye\"]\n    print(get_word_with_max_occurrences(strings))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def get_most_occurrence_word(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    word_count = collections.defaultdict(int)\n    for s in strings:\n        for c in s:\n            word_count[c] += 1\n    most_occurrence_word = ''\n    most_occurrence_count = 0\n    for c in word_count:\n        if word_count[c] > most_occurrence_count:\n            most_occurrence_count = word_count[c]\n            most_occurrence_word = c\n    return most_occurrence_word\n\n\nif __name__ == '__main__':\n    strings = [\"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def get_most_occurrence_word(list_of_words, list_of_strings):\n    \"\"\"\n    Get the word with most number of occurrences in the given strings list.\n\n    :param list_of_words:\n    :param list_of_strings:\n    :return:\n    \"\"\"\n    # your code here\n    most_occurrences = ''\n    most_occurrences_number = 0\n    for word in list_of_words:\n        for string in list_of_strings:\n            if word in string:\n                string_occurrences = string.count(word)\n                if string_occurrences > most_occurrences_number:\n                    most_occurrences_number = string_occurrences\n                    most_occurrences = word\n\n    return most_occurrences\n\n\nif __name__ == '__main__':\n    words = ['cat', 'dog','mouse', 'cat','mouse', 'dog']\n    strings = ['cat', 'dog','mouse', 'dog','mouse', 'cat']\n    print get_most_occurrence_word(words, strings)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "import unittest\n\ndef get_word_with_most_occurrences(words, sentence):\n    # write your code here\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n    word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    word_with_max_occurrences = word_count[0][0]\n    for word in word_count:\n        if word_count[word] == word_with_max_occurrences:\n            return word\n\nclass TestWordWithMostOccurrences(unittest.TestCase):\n    def test_get_word_with_most_occurrences(self):\n        self.assertEqual(get_word_with_most_occurrences(['cat', 'bat', 'rat'], 'The quick brown fox jumps over the lazy dog'), 'bat')\n        self.assertEqual(get_word_with_most_occurrences(['cat', 'bat', 'rat'], 'The quick brown fox jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The lazy cat jumps over the lazy dog. The"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def get_word_with_most_occurrences(words, strings):\n    word = None\n    count = 0\n    for word in words:\n        count = 0\n        for string in strings:\n            if string.find(word)!= -1:\n                count += 1\n        if count > word.count:\n            word = word\n            count = word.count\n    return word"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def getMostOccurence(strings):\n    return max(strings, key=lambda s: strings[s])\n\ndef main():\n    strings = [\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',\n        'abc',"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def most_occurring_word(words, words_with_counts):\n    \"\"\"\n    :type words: List[str]\n    :type words_with_counts: List[List[str]]\n    :rtype: str\n    \"\"\"\n    word_counts = {word: 1 for word in words}\n    for word, count in words_with_counts:\n        word_counts[word] += count\n\n    return max(word_counts.items(), key=lambda x: x[1])[0]\n\nif __name__ == '__main__':\n    words = ['a', 'ab', 'b', 'c', 'cd', 'abcd', 'abcd', 'abcd']\n    words_with_counts = [['a', 3], ['ab', 3], ['b', 3], ['cd', 3], ['abcd', 3], ['abcd', 3], ['abcd', 3], ['abcd', 3]]\n    print(most_occurring_word(words, words_with_counts))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import string\n\ndef get_word_with_most_occurrences(strings_list):\n    word_with_most_occurrences = ''\n    word_count = 0\n    for s in strings_list:\n        word_count += s.count(word_with_most_occurrences)\n        if word_count > word_with_most_occurrences:\n            word_with_most_occurrences = s\n    return word_with_most_occurrences\n\n\n\nstrings_list = [ 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "import sys\nimport collections\n\ndef get_word_with_most_occurrences(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    words = collections.Counter(strings)\n    max_count = max(words.values())\n    for word in words:\n        if words[word] == max_count:\n            return word\n\n\nif __name__ == '__main__':\n    strings = [sys.argv[1]]\n    for i in range(2, int(sys.argv[1])):\n        strings.append(sys.argv[i])\n    print(get_word_with_most_occurrences(strings))"
    },
    {
      "rank": 78,
      "score": 7.0,
      "candidate": "def get_word_with_max_occurrences(words, strings):\n    \"\"\"\n    :type words: List[str]\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    words_count = collections.Counter(words)\n    max_count = max(words_count.items(), key=lambda x: x[1])\n    return max_count[0]\n\nif __name__ == '__main__':\n    words = ['a', 'b', 'c', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'a']\n    strings = ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n    print(get_word_with_max_occurrences(words, strings))\n    words = ['a', 'b', 'c', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'a']\n    strings = ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n    print(get_word_with_max_occurrences(words, strings))\n    words = ['a', 'b', 'c', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'a']\n    strings = ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n    print(get_word_with_max_occurrences(words, strings))"
    },
    {
      "rank": 79,
      "score": 3.0,
      "candidate": "# Time:  O(n^2)\n# Space: O(n)\n\nclass Solution(object):\n    def mostPopular(self, strs, k):\n        \"\"\"\n        :type strs: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        strs = sorted(strs, key=len, reverse=True)\n        ans = []\n        for i in range(len(strs)):\n            if len(ans) == k:\n                break\n            if len(ans) == 0 or strs[i] not in ans:\n                ans.append(strs[i])\n        return ans"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Your function should return a list of strings.\n# The strings list is guaranteed to be non-empty.\n\nclass Solution(object):\n    def getMostFrequentWord(self, strings, k):\n        \"\"\"\n        :type strings: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        # sort by frequency\n        strings.sort(key=lambda x: len(x), reverse=True)\n        # take first k\n        return strings[:k]\n\nif __name__ == \"__main__\":\n    strings = [\n        \"this\", \"is\", \"a\", \"test\", \"of\", \"string\", \"classification\", \"in\", \"python\"\n    ]\n    print Solution().getMostFrequentWord(strings, 3)\n    print Solution().getMostFrequentWord(strings, 1)\n    print Solution().getMostFrequentWord(strings, 2)\n    print Solution().getMostFrequentWord(strings, 4)\n    print Solution().getMostFrequentWord(strings, 5)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "#%%\ndef get_most_occurrences(strings, word):\n    \"\"\"\n    Returns a tuple containing the number of occurrences of `word` in `strings` and the word itself.\n    \"\"\"\n    return max(enumerate(strings), key=lambda x: x[1].count(word))\n\n#%%\ndef get_most_occurrences(strings, word):\n    \"\"\"\n    Returns a tuple containing the number of occurrences of `word` in `strings` and the word itself.\n    \"\"\"\n    return max(enumerate(strings), key=lambda x: x[1].count(word))\n\n#%%\ndef get_most_occurrences(strings, word):\n    \"\"\"\n    Returns a tuple containing the number of occurrences of `word` in `strings` and the word itself.\n    \"\"\"\n    return max(enumerate(strings), key=lambda x: x[1].count(word))\n\n#%%\ndef get_most_occurrences(strings, word):\n    \"\"\"\n    Returns a tuple containing the number of occurrences of `word` in `strings` and the word itself.\n    \"\"\"\n    return max(enumerate(strings), key=lambda x: x[1].count(word))\n\n#%%\ndef get_most_occurrences(strings, word):\n    \"\"\"\n    Returns a tuple containing the number of occurrences of `word` in `strings` and the word itself.\n    \"\"\"\n    return max(enumerate(strings), key=lambda x: x[1].count(word))\n\n#%%\ndef get_most_occurrences(strings, word):\n    \"\"\"\n    Returns a tuple containing the number of occurrences of `word` in `strings` and the word itself.\n    \"\"\"\n    return max(enumerate(strings), key=lambda x: x[1].count(word))\n\n#%%\ndef get_most_occurrences(strings, word):\n    \"\"\"\n    Returns a tuple containing the number of occurrences of `word` in `strings` and the word itself.\n    \"\"\"\n    return max(enumerate(strings), key=lambda x: x[1].count(word))\n\n#%%\ndef get_most_occurrences(strings,"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def most_occurrences(strs, word):\n    \"\"\"\n    :type strs: List[str]\n    :type word: str\n    :rtype: str\n    \"\"\"\n    word_counts = {}\n    for s in strs:\n        word_counts[s] = word_counts.get(s, 0) + 1\n    return max(word_counts.items(), key=lambda x: x[1])[0]\n\n\nif __name__ == \"__main__\":\n    strs = [\"banana\", \"apples\", \"app\", \"app\", \"banana\"]\n    word = \"apples\"\n    print(most_occurrences(strs, word))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def get_word(list):\n    word_list = list.copy()\n    word_list.sort(key=lambda x: len(x))\n    return word_list[-1]\n\nif __name__ == '__main__':\n    list_1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    list_2 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    print get_word(list_1)\n    print get_word(list_2)\n    list_1.append('a')\n    list_1.append('a')\n    list_1.append('a')\n    list_1.append('a')\n    print get_word(list_1)\n    list_2.append('a')\n    list_2.append('a')\n    list_2.append('a')\n    list_2.append('a')\n    print get_word(list_2)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# TODO\n# 1. if the word is not in the list, return the word itself.\n# 2. if the word is in the list, return the word itself if the word occur more than once.\n# 3. if the word occur more than once, return the word with the largest number of occurrences.\n# 4. if the word occur less than once, return the word with the largest number of occurrences.\n\n# NOTE:\n# 1. we can assume that the word is a single word\n\n# Example\n# Given: [\"a\", \"b\", \"c\", \"c\", \"b\", \"a\"]\n# Return: \"c\"\n\nclass Solution(object):\n    def getMaxWord(self, dict, strs):\n        \"\"\"\n        :type dict: List[str]\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        maxLen = 0\n        maxWord = \"\"\n        for word in strs:\n            if word in dict:\n                if dict[word] > maxLen:\n                    maxLen = dict[word]\n                    maxWord = word\n                else:\n                    if dict[word] == maxLen:\n                        maxWord = word\n        return maxWord"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def most_occurring(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    word_count = collections.Counter(strs)\n    return max(word_count.iteritems(), key=lambda x: x[1])[0]\n\nif __name__ == \"__main__\":\n    assert most_occurring([\"a\", \"ab\", \"aa\"]) == \"aa\"\n    assert most_occurring([\"a\", \"b\", \"a\"]) == \"a\"\n    assert most_occurring([\"a\", \"b\", \"a\", \"a\"]) == \"a\"\n    assert most_occurring([\"a\", \"b\", \"a\", \"b\", \"a\"]) == \"a\""
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def get_word_with_max_occurrence(strings):\n    max_occurrence = 0\n    max_occurrence_word = ''\n\n    for string in strings:\n        occurrence_count = 0\n        for word in strings:\n            if word in string:\n                occurrence_count += 1\n\n        if occurrence_count > max_occurrence:\n            max_occurrence = occurrence_count\n            max_occurrence_word = string\n\n    return max_occurrence_word\n\nif __name__ == '__main__':\n    strings = ['abcd', 'abcda', 'abcdabc']\n\n    print get_word_with_max_occurrence(strings)"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def getMostFrequentWord(self, dict, strings):\n        \"\"\"\n        :type dict: List[str]\n        :type strings: List[str]\n        :rtype: str\n        \"\"\"\n        d = collections.defaultdict(int)\n        for s in strings:\n            for w in s.split():\n                d[w] += 1\n\n        # d = collections.Counter(s.split())\n        # d = collections.Counter(s.split())\n        # print(d)\n        # print(d.most_common())\n        # return max(d.most_common(), key=lambda x: x[1])[0]\n\n        # d = collections.Counter(s.split())\n        # print(d)\n        # print(d.most_common())\n        # return max(d.most_common(), key=lambda x: x[1])[0]\n\n        # d = collections.Counter(s.split())\n        # d = collections.Counter(s.split())\n        # print(d)\n        # print(d.most_common())\n        # return max(d.most_common(), key=lambda x: x[1])[0]\n\n        # d = collections.Counter(s.split())\n        # d = collections.Counter(s.split())\n        # print(d)\n        # print(d.most_common())\n        # return max(d.most_common(), key=lambda x: x[1])[0]\n\n        # d = collections.Counter(s.split())\n        # d = collections.Counter(s.split())\n        # print(d)\n        # print(d.most_common())\n        # return max(d.most_common(), key=lambda x: x[1])[0]\n\n        # d = collections.Counter(s.split())\n        # d = collections.Counter(s.split())\n        # print(d)\n        # print(d.most_common())\n        # return max(d.most_common(), key=lambda x: x[1])[0]\n\n        # d = collections.Counter(s.split())\n        # d = collections.Counter(s.split())"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution(object):\n    def get_most_occurrences(self, words, strings):\n        \"\"\"\n        :type words: List[str]\n        :type strings: List[str]\n        :rtype: str\n        \"\"\"\n        counts = {}\n        for w in words:\n            counts[w] = counts.get(w, 0) + 1\n        return max(counts, key=counts.get)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 7ms 99.68%\nclass Solution {\n    public String getMostOccurrences(String[] words, String[] strings) {\n        HashMap<String, Integer> map = new HashMap<>();\n        for (String w : words) {\n            map.put(w, map.getOrDefault(w, 0) + 1);\n        }\n        String res = null;\n        for (String s : strings) {\n            if (map.get(s) > map.get(res)) {\n                res = s;\n            }\n        }\n        return res;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public String getMostOccurrences(String[] words, String[] strings) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String w : words) {\n            map.put(w, map.getOrDefault(w, 0) + 1);\n        }\n        int max = 0;\n        String res = null;\n        for (String s : strings) {\n            if (map.get(s) > max) {\n                max = map.get(s);\n                res = s;\n            }\n        }\n        return res;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public String getMostOccurrences(String[] words, String[] strings) {\n        int max = 0;\n        String res = null;\n        for (String w"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def mostCommonWord(self, s, t):\n        \"\"\"\n        :type s: List[str]\n        :type t: List[str]\n        :rtype: str\n        \"\"\"\n        max_count = 0\n        max_word = ''\n        for word in t:\n            word_count = 0\n            for s_word in s:\n                if s_word.startswith(word):\n                    word_count += 1\n            if word_count > max_count:\n                max_count = word_count\n                max_word = word\n        return max_word"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Write your code here\ndef get_most_occurring_word(strings_list):\n    # print(strings_list)\n    # print(type(strings_list))\n    \n    most_occurring_word = ''\n    most_occurring_count = 0\n    \n    for word in strings_list:\n        # print(word)\n        \n        # print(type(word))\n        \n        count = len(word)\n        if count > most_occurring_count:\n            most_occurring_word = word\n            most_occurring_count = count\n    \n    return most_occurring_word\n\n# Test cases\n# strings_list = ['hello', 'world']\n# print(get_most_occurring_word(strings_list))\n\n# strings_list = ['abc', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd']\n# print(get_most_occurring_word(strings_list))\n\n# strings_list = ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc']\n# print(get_most_occurring_word(strings_list))\n\n# strings_list = ['abc', 'abcd', 'abcd', 'abcd', 'abc', 'abc', 'abc']\n# print(get_most_occurring_word(strings_list))\n\n# strings_list = ['abc', 'abcd', 'abcd', 'abcd', 'abc', 'abc', 'abc']\n# print(get_most_occurring_word(strings_list))\n\n# strings_list = ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc']\n# print(get_most_occurring_word(strings_list))\n\n# strings_list = ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc']\n# print(get_most_occurring_word(strings_list))\n\n# strings_list = ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc']\n# print(get_most_occurring_word(strings_list))\n\n# strings_list"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxOccurrences(self, words, wordList):\n        \"\"\"\n        :type words: List[str]\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        if not words:\n            return 0\n        if not wordList:\n            return 0\n        if len(words)!= len(wordList):\n            return 0\n        \n        word_dict = {}\n        for word in wordList:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n            \n        max_occurrences = 0\n        for word in word_dict:\n            if word_dict[word] > max_occurrences:\n                max_occurrences = word_dict[word]\n        return max_occurrences\n\nif __name__ == '__main__':\n    sol = Solution()\n    words = ['a', 'bb', 'ccc', 'dddd', 'eeee', 'ffff', 'gggg']\n    word_list = ['aaa', 'bbbb', 'cccc', 'dddd', 'eeee', 'ffff', 'gggg']\n    print(sol.maxOccurrences(words, word_list))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "import collections\nimport re\n\n\ndef get_most_occurrences(strings, word):\n    \"\"\"\n    :type strings: List[str]\n    :type word: str\n    :rtype: str\n    \"\"\"\n    count_dict = collections.Counter(word)\n    max_count = max(count_dict.values())\n    return max_count, count_dict\n\n\nif __name__ == \"__main__\":\n    strings = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n    word = \"dog\"\n    print(get_most_occurrences(strings, word))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import collections\n\ndef get_word_count(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: str\n    \"\"\"\n    word_count = collections.Counter(words)\n    return max(word_count.items(), key=lambda x: x[1])[0]\n\n# test\nassert get_word_count(['cat', 'cat', 'dog', 'dog', 'cat', 'dog']) == 'dog'"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def get_most_occurring_word(strings, word):\n    \"\"\"\n    :type strings: List[str]\n    :type word: str\n    :rtype: str\n    \"\"\"\n    occurrences = collections.Counter(word)\n    return max(occurrences.items(), key=lambda x: x[1])[0]\n\n# Your WordMostOccurringWord solution here."
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def get_most_occurrences(strings_list):\n    most_occurrences = 0\n    most_occurrences_word = \"\"\n    for word in strings_list:\n        occurrences = 0\n        for string in strings_list:\n            if word in string:\n                occurrences += 1\n        if occurrences > most_occurrences:\n            most_occurrences = occurrences\n            most_occurrences_word = word\n    return most_occurrences_word\n\n\nif __name__ == \"__main__\":\n    strings_list = [\"a\", \"b\", \"c\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    print get_most_occurrences(strings_list)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def most_occurrences(string_list):\n    word_dict = {}\n    for s in string_list:\n        for word in s.split(' '):\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    return max(word_dict, key=word_dict.get)\n\nif __name__ == '__main__':\n    test_cases = [\n        ([], 'abc'),\n        (['abc'], 'abc'),\n        (['abc', 'abcd'], 'abc'),\n        (['abc', 'abcd', 'abce'], 'abc')\n    ]\n    for test_case, expected in test_cases:\n        actual = most_occurrences(test_case)\n        print('most_occurrences(\"%s\") -> %s' % (test_case, actual))\n        assert actual == expected"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "#\n# Implement a function to get the word with most number of occurrences in the given strings list.\n#\n\n#\n# Example\n#\n# Given a list of words, each word is a string of lowercase letters.\n#\n# Return the word that has the highest frequency among the words, or return None if there is no such word.\n#\n# The word frequency is represented by a dictionary word_frequency.\n# For each word, word_frequency[word] is the number of times that word appears in the given strings list.\n#\n# Example\n#\n# Given [[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"], [\"b\", \"c\", \"c\"]],\n# return \"c\".\n#\n# Note\n#\n# The number of words in the given strings list will be in the range [1, 10000].\n# The length of each word in the given strings list will be in the range [1, 100].\n#\n#\n#\n#\n# Note:\n#\n# The given strings list will be in ascending order by length.\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Approach 1: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 2: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 3: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 4: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 5: Use a dictionary and a list to keep track of the frequency of each word\n\n# Approach 1: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 2: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 3: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 4: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 5: Use a dictionary and a list to keep track of the frequency of each word\n\n# Approach 1: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 2: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 3: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 4: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 5: Use a dictionary and a list to keep track of the frequency of each word\n\n# Approach 1: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 2: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 3: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 4: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 5: Use a dictionary and a list to keep track of the frequency of each word\n\n# Approach 1: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 2: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 3: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 4: Use a dictionary and a list to keep track of the frequency of each word\n# Approach 5: Use a dictionary and a list to keep track of the frequency of each word\n\n# Approach 1: Use a"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def get_word(strs, word):\n    word_count = {}\n    for s in strs:\n        if word in s:\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n    max_word = max(word_count, key=word_count.get)\n    return max_word\n\nif __name__ == '__main__':\n    strs = [\n        \"puppies\",\n        \"kittens\",\n        \"cats\",\n        \"dogs\",\n        \"zombies\",\n        \"puppies\",\n        \"kittens\",\n        \"cats\",\n        \"dogs\",\n        \"zombies\",\n    ]\n    print(get_word(strs, \"puppies\"))\n    print(get_word(strs, \"cats\"))\n    print(get_word(strs, \"zombies\"))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def get_word_with_max_occurrences(word_list):\n    \"\"\"\n    :type word_list: List[str]\n    :rtype: str\n    \"\"\"\n    word_counts = collections.Counter(word_list)\n    max_count = max(word_counts.values())\n    return max(word_counts, key=word_counts.get)\n\n\nif __name__ == \"__main__\":\n    words = [\"cat\", \"bat\", \"rat\", \"cat\", \"rat\", \"rat\", \"bat\"]\n    print(get_word_with_max_occurrences(words))"
    }
  ]
}