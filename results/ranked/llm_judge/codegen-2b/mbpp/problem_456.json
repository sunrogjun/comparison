{
  "timestamp": "2025-09-14T20:45:03.679364",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 456,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def convert_decimal_to_octal(decimal):\n    return decimal.__str__()\n\nif __name__ == '__main__':\n    print convert_decimal_to_octal(2)\n    print convert_decimal_to_octal(3)\n    print convert_decimal_to_octal(4)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/decimal-to-octal/problem\n\ndef decToOct(dec):\n    octal = ''\n    \n    for i in range(len(dec)):\n        if dec[i] == '0':\n            octal += '0'\n        elif dec[i] == '1':\n            octal += '1'\n        elif dec[i] == '2':\n            octal += '2'\n        elif dec[i] == '3':\n            octal += '3'\n        elif dec[i] == '4':\n            octal += '4'\n        elif dec[i] == '5':\n            octal += '5'\n        elif dec[i] == '6':\n            octal += '6'\n        elif dec[i] == '7':\n            octal += '7'\n        elif dec[i] == '8':\n            octal += '8'\n        elif dec[i] == '9':\n            octal += '9'\n        elif dec[i] == 'a':\n            octal += 'a'\n        elif dec[i] == 'b':\n            octal += 'b'\n        elif dec[i] == 'c':\n            octal += 'c'\n        elif dec[i] == 'd':\n            octal += 'd'\n        elif dec[i] == 'e':\n            octal += 'e'\n        elif dec[i] == 'f':\n            octal += 'f'\n        elif dec[i] == 'A':\n            octal += 'A'\n        elif dec[i] == 'B':\n            octal += 'B'\n        elif dec[i] == 'C':\n            octal += 'C'\n        elif dec[i] == 'D':\n            octal += 'D'\n        elif dec[i] == 'E':\n            octal += 'E'\n        elif dec[i] == 'F':\n            octal += 'F'\n    \n    return octal\n\ndef main():\n    dec = raw_input()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def decimal_to_octal(decimal_number):\n    octal_number = decimal_number * 8\n    return octal_number\n\nif __name__ == '__main__':\n    print decimal_to_octal(5)\n    print decimal_to_octal(2)\n    print decimal_to_octal(0)\n    print decimal_to_octal(3)\n    print decimal_to_octal(8)\n    print decimal_to_octal(9)\n    print decimal_to_octal(16)\n    print decimal_to_octal(23)\n    print decimal_to_octal(32)\n    print decimal_to_octal(33)\n    print decimal_to_octal(127)\n    print decimal_to_octal(128)\n    print decimal_to_octal(129)\n    print decimal_to_octal(255)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Define the function to convert decimal number to octal number.\n\ndef decimal_to_octal(decimal):\n    \"\"\"\n    This function converts decimal number to octal number.\n    \"\"\"\n    # Write your code here.\n\n    # Note:\n    # Decimal number should be positive.\n    #\n    # Example 1:\n    #\n    # Input: 3\n    # Output: 27\n\n    # Example 2:\n    #\n    # Input: -3\n    # Output: -43\n\n    # Example 3:\n    #\n    # Input: -123456789\n    # Output: -1\n    #\n    # Note:\n    # The input is guaranteed to be less than 2^32.\n    #\n    # Challenge:\n    # Can you make your solution more efficient?\n    #\n    #\n    # Challenge 2:\n    # Can you make your solution work for negative input?\n    #\n    #\n    # Challenge 3:\n    # Can you solve this problem using only one pass?\n    #\n    #\n    # Challenge 4:\n    # Can you solve this problem using only one pass and without using division?\n    #\n    #\n    # Challenge 5:\n    # Can you solve this problem using only one pass and without using multiplication and division?\n    #\n    #\n    # Challenge 6:\n    # Can you solve this problem using only one pass and without using modulo?\n    #\n    #\n    # Challenge 7:\n    # Can you solve this problem using only one pass and without using modulo and division?\n    #\n    #\n    # Challenge 8:\n    # Can you solve this problem using only one pass and without using modulo and division and multiplication?\n    #\n    #\n    # Challenge 9:\n    # Can you solve this problem using only one pass and without using division and multiplication?\n    #\n    #\n    # Challenge 10:\n    # Can you solve this problem using only one pass and without using multiplication and division?\n    #\n    #\n    # Challenge 11:\n    # Can you solve this problem using only one pass and without using division and multiplication?\n    #\n    #\n    # Challenge 12:\n    # Can you solve this problem using only one pass and without using division and"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def convert_to_octal(decimal_number):\n    \"\"\"\n    Convert decimal number to octal number.\n    :param decimal_number: the decimal number\n    :return: the octal number\n    \"\"\"\n    result = \"\"\n    for i in range(0, len(decimal_number)):\n        if decimal_number[i] == \"0\":\n            result += \"0000\"\n        else:\n            result += \"%.2d\" % (int(decimal_number[i]) + 8)\n    return result\n\n\nif __name__ == \"__main__\":\n    print convert_to_octal(\"1\")\n    print convert_to_octal(\"101\")\n    print convert_to_octal(\"1011\")\n    print convert_to_octal(\"1011\")\n    print convert_to_octal(\"1011\")\n    print convert_to_octal(\"1011\")"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def octal(n):\n    octal_string = ''\n    while n > 0:\n        octal_string = str(n % 8) + octal_string\n        n = n // 8\n    return octal_string\n\n\ndef main():\n    print(octal(1))\n    print(octal(2))\n    print(octal(3))\n    print(octal(4))\n    print(octal(5))\n    print(octal(6))\n    print(octal(7))\n    print(octal(8))\n    print(octal(9))\n    print(octal(10))\n    print(octal(11))\n    print(octal(12))\n    print(octal(13))\n    print(octal(14))\n    print(octal(15))\n    print(octal(16))\n    print(octal(17))\n    print(octal(18))\n    print(octal(19))\n    print(octal(20))\n    print(octal(21))\n    print(octal(22))\n    print(octal(23))\n    print(octal(24))\n    print(octal(25))\n    print(octal(26))\n    print(octal(27))\n    print(octal(28))\n    print(octal(29))\n    print(octal(30))\n    print(octal(31))\n    print(octal(32))\n    print(octal(33))\n    print(octal(34))\n    print(octal(35))\n    print(octal(36))\n    print(octal(37))\n    print(octal(38))\n    print(octal(39))\n    print(octal(40))\n    print(octal(41))\n    print(octal(42))\n    print(octal(43))\n    print(octal(44))\n    print(octal(45))\n    print(octal(46))\n    print(octal(47))\n    print(octal(48))\n    print(octal(49))\n    print(octal(50))\n    print"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def decimal_to_octal(decimal):\n    \"\"\"\n    decimal_to_octal(decimal) -> octal_number\n\n    Convert a decimal number to octal number.\n    \"\"\"\n    octal_number = 0\n    for digit in str(decimal):\n        octal_number += (int(digit) * (8 ** (len(str(decimal)) - 1 - len(str(digit)))) )\n    return octal_number\n\ndef main():\n    print decimal_to_octal(decimal)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def convert(decimal):\n    return int(decimal, 8)\n\nif __name__ == '__main__':\n    print convert(13)\n    print convert(12)\n    print convert(10)\n    print convert(9)\n    print convert(8)\n    print convert(7)\n    print convert(6)\n    print convert(5)\n    print convert(4)\n    print convert(3)\n    print convert(2)\n    print convert(1)\n    print convert(0)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def convert(number):\n    if number == 0:\n        return '0'\n    if number < 0:\n        number = -number\n        sign = '-'\n    else:\n        sign = ''\n    octal = ''\n    while number > 0:\n        octal = str(number % 8) + octal\n        number /= 8\n    return sign + octal\n\nif __name__ == '__main__':\n    print convert(-7)\n    print convert(0)\n    print convert(1)\n    print convert(8)\n    print convert(9)\n    print convert(10)\n    print convert(15)\n    print convert(16)\n    print convert(31)\n    print convert(32)\n    print convert(33)\n    print convert(33)\n    print convert(100)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def to_octal(decimal):\n    \"\"\"\n    Converts decimal number to octal number.\n\n    Input:\n    decimal: integer\n\n    Output:\n    output: string\n\n    Explanation:\n    Convert decimal number to octal number.\n    \"\"\"\n\n    octal = \"\"\n    while decimal!= 0:\n        octal = str(decimal % 8) + octal\n        decimal = decimal // 8\n\n    return octal\n\nprint(to_octal(12345))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def decimal_to_octal(number):\n    \"\"\"\n    >>> decimal_to_octal(12345)\n    '0o12345'\n    >>> decimal_to_octal(0)\n    '0o0'\n    >>> decimal_to_octal(-1)\n    '0o0'\n    >>> decimal_to_octal(0.12345)\n    '0o12345'\n    >>> decimal_to_octal(0.01234)\n    '0o12345'\n    >>> decimal_to_octal(0.0123)\n    '0o123'\n    >>> decimal_to_octal(0.01234)\n    '0o12345'\n    >>> decimal_to_octal(0.012345)\n    '0o12345'\n    >>> decimal_to_octal(0.0123456)\n    '0o12345'\n    >>> decimal_to_octal(0.01234567)\n    '0o12345'\n    >>> decimal_to_octal(0.012345678)\n    '0o12345'\n    >>> decimal_to_octal(0.0123456789)\n    '0o12345'\n    >>> decimal_to_octal(0.01234567890)\n    '0o12345'\n    >>> decimal_to_octal(0.012345678901)\n    '0o12345'\n    >>> decimal_to_octal(0.0123456789012)\n    '0o12345'\n    >>> decimal_to_octal(0.01234567890123)\n    '0o12345'\n    >>> decimal_to_octal(0.012345678901234)\n    '0o12345'\n    >>> decimal_to_octal(0.0123456789012345)\n    '0o12345'\n    >>> decimal_to_octal(0.01234567890123456)\n    '0o12345'\n    >>> decimal_to_octal(0.012345678901234567)\n    '0o12345'"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def to_octal(dec):\n    return str(dec).zfill(4)\n\n# Test cases\nprint(to_octal(1))\nprint(to_octal(4))\nprint(to_octal(8))\nprint(to_octal(16))\nprint(to_octal(64))\nprint(to_octal(128))\nprint(to_octal(256))\nprint(to_octal(512))\nprint(to_octal(1024))\nprint(to_octal(2048))\nprint(to_octal(4096))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def to_octal(n):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    :param n: The number to be converted.\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(bin(n)[2:], 2)\n\nif __name__ == '__main__':\n    print(to_octal(12345))\n    print(to_octal(123))\n    print(to_octal(123456789))\n    print(to_octal(12345678))\n    print(to_octal(1234567890123))\n    print(to_octal(123456789012345678))\n    print(to_octal(12345678901234567890123))\n    print(to_octal(12345678901234567890123456789))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://www.reddit.com/r/dailyprogrammer/comments/3kvh0v/20150713_challenge_632_easy/\n# https://www.reddit.com/r/dailyprogrammer/comments/3kvh0v/20150713_challenge_632_easy_easy/\n# https://www.reddit.com/r/dailyprogrammer/comments/3kvh0v/20150713_challenge_632_easy_easy/\n\ndef convert_to_octal(decimal):\n    \"\"\"\n    Convert a decimal number to octal number.\n    \"\"\"\n    # check if the input is a string\n    if isinstance(decimal, str):\n        # convert to integer\n        decimal = int(decimal)\n    # convert to octal\n    octal = str(oct(decimal))\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert to hex\n    hex_octal = hex(octal)\n    # convert"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def decimal2octal(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    :param number:\n    :return:\n    \"\"\"\n    return oct(int(number))\n\nprint(decimal2octal(10))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def decimal_to_octal(decimal):\n    octal = ''\n    for i in range(len(decimal)):\n        octal += str(ord(decimal[i]) - ord('0') + oct(ord(decimal[i])))\n    return octal\n\n\n# Test\nprint decimal_to_octal(\"123\")\nprint decimal_to_octal
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def octal_to_decimal(octal_number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return octal_number\n\nif __name__ == \"__main__\":\n    print octal_to_decimal(0)\n    print octal_to_decimal(10)\n    print octal_to_decimal(42)\n    print octal_to_decimal(1024)\n    print octal_to_decimal(1234)\n    print octal_to_decimal(1234567890)\n    print octal_to_decimal(18446744073709551615)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# https://www.hackerrank.com/challenges/decimal-to-octal/problem\n\n\ndef decimal_to_octal(dec):\n    octal_num = 0\n    while dec > 0:\n        octal_num = octal_num * 8 + dec % 10\n        dec = dec / 10\n    return octal_num\n\n\nif __name__ == '__main__':\n    dec = int(input())\n    octal_num = decimal_to_octal(dec)\n    print(octal_num)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def decimal_to_octal(dec):\n    \"\"\"\n    >>> decimal_to_octal(10)\n    '01110000'\n    >>> decimal_to_octal(12)\n    '00110011'\n    >>> decimal_to_octal(123)\n    '01110111'\n    \"\"\"\n    octal_number = ''\n    while dec > 0:\n        octal_number += '{:03b}'.format(dec % 8)\n        dec /= 8\n    return octal_number\n\ndef main():\n    \"\"\"\n    >>> decimal_to_octal(10)\n    '01110000'\n    >>> decimal_to_octal(12)\n    '00110011'\n    >>> decimal_to_octal(123)\n    '01110111'\n    \"\"\"\n    decimal_to_octal(10)\n    decimal_to_octal(12)\n    decimal_to_octal(123)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# Written by: Robert Wenzel\n# Date: 10/29/2014\n# Email: robert@robertwenzel.com\n\n# Usage:\n# python octal_number.py <decimal_number>\n\n# Note:\n# The decimal number must be a number between 0 and 9.\n# The octal number must be an integer between 0 and 377.\n# The decimal number must be converted to octal number by adding the decimal number to the octal number.\n# The decimal number must be converted to octal number by dividing the decimal number by 8.\n# The decimal number must be converted to octal number by multiplying the decimal number by 3.\n\n# Input: decimal number\n# Output: octal number\n\n# Test cases:\n# 0\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n\ndef octal_number(decimal):\n    # Check the number of digits in the decimal number\n    if decimal < 0:\n        return -1\n    elif decimal > 9:\n        return -1\n    else:\n        # Convert the decimal number to octal\n        return oct(decimal)\n\n\ndef main():\n    # Test cases\n    test_cases = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    for test_case in test_cases:\n        print(\"Case #{0}: {1}\".format(test_case, octal_number(test_case)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def toOctal(num):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return \"%o\" % num\n\nif __name__ == '__main__':\n    print(toOctal(123))\n    print(toOctal(0))\n    print(toOctal(9))\n    print(toOctal(16))\n    print(toOctal(27))\n    print(toOctal(32))\n    print(toOctal(48))\n    print(toOctal(49))\n    print(toOctal(50))\n    print(toOctal(256))\n    print(toOctal(257))\n    print(toOctal(258))\n    print(toOctal(1023))\n    print(toOctal(1024))\n    print(toOctal(2048))\n    print(toOctal(4095))\n    print(toOctal(8192))\n    print(toOctal(16384))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def dec2oct(number):\n    \"\"\"\n    >>> dec2oct(0)\n    '0'\n    >>> dec2oct(9)\n    '09'\n    >>> dec2oct(10)\n    '10'\n    >>> dec2oct(11)\n    '11'\n    >>> dec2oct(100)\n    '100'\n    >>> dec2oct(999)\n    '999'\n    >>> dec2oct(1000)\n    '1000'\n    >>> dec2oct(999999)\n    '999999'\n    >>> dec2oct(123456789)\n    '123456789'\n    \"\"\"\n    return ''.join(str(i) for i in oct(number))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# write a function to convert a decimal number to octal number\ndef to_octal(dec):\n    return str(dec).rjust(8, '0')\n\n# call the function and print the result\nprint to_octal(123456789)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def to_octal(dec):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return str(dec).zfill(8)\n\n# Test cases\n\nprint(to_octal(10))\nprint(to_octal(100))\nprint(to_octal(1000))\nprint(to_octal(10000))\nprint(to_octal(100000))\nprint(to_octal(1000000))\nprint(to_octal(1000000000))\nprint(to_octal(10000000000))\nprint(to_octal(100000000000))\nprint(to_octal(1000000000000))\nprint(to_octal(10000000000000))\nprint(to_octal(100000000000000))\nprint(to_octal(100000000000000000))\nprint(to_octal(100000000000000000))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def dec2oct(dec):\n    \"\"\"\n    Input: decimal number, ex: 123\n    Output: octal number, ex: 0123\n    \"\"\"\n    octal = 0\n    for i in range(8):\n        octal = octal * 8 + dec % 10\n        dec = dec // 10\n    return octal\n\nif __name__ == \"__main__\":\n    print dec2oct(123)"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "import sys\n\ndef convert_decimal_to_octal(decimal_number):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    Input:\n    decimal_number: A decimal number.\n\n    Output:\n    An octal number.\n    \"\"\"\n    result = 0\n    while decimal_number!= 0:\n        result += decimal_number % 8\n        decimal_number = decimal_number // 8\n    return result\n\nif __name__ == '__main__':\n    decimal_number = int(sys.argv[1])\n    octal_number = convert_decimal_to_octal(decimal_number)\n    print(octal_number)"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def to_octal(dec):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    :param dec: decimal number\n    :return: octal number\n    \"\"\"\n    if dec < 0:\n        return \"-\" + to_octal(-dec)\n    if dec == 0:\n        return \"0\"\n    octal = \"\"\n    while dec > 0:\n        octal = str(dec % 8) + octal\n        dec = dec // 8\n    return octal\n\nif __name__ == '__main__':\n    dec = int(input(\"Enter decimal number: \"))\n    print(to_octal(dec))"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "import math\n\ndef to_octal(decimal):\n    \"\"\"\n    Input: decimal number\n    Output: octal number\n    \"\"\"\n    return int(math.ceil(decimal*8))\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(to_octal(123))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def decimal_to_octal(decimal_number):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    Example:\n    decimal_to_octal(123) -> '0323'\n    decimal_to_octal(1234567) -> '0567'\n    decimal_to_octal(12345678) -> '078'\n    \"\"\"\n    octal_number = ''\n    if decimal_number < 0:\n        raise ValueError('The value is negative')\n    while decimal_number > 0:\n        octal_number += '0' + str(decimal_number % 8)\n        decimal_number = decimal_number // 8\n    return octal_number\n\nif __name__ == '__main__':\n    print decimal_to_octal(123)\n    print decimal_to_octal(1234567)\n    print decimal_to_octal(12345678)"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def convert_to_octal(dec):\n    \"\"\"\n    Convert decimal number to octal number\n    :param dec: decimal number\n    :return: octal number\n    \"\"\"\n    return oct(dec)\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print convert_to_octal(10)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def decimal_to_octal(decimal):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    octal = \"0\"\n    for digit in decimal:\n        digit = int(digit)\n        octal += str(digit)\n    return octal\n\nprint(decimal_to_octal(decimal))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def to_oct(dec):\n    return oct(int(dec))\n\ndef main():\n    n = int(input())\n    print(to_oct(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def octal(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return int(str(number), 8)\n\n\nprint octal(10)\n#>>> 27\n\nprint octal(5)\n#>>> 15\n\nprint octal(6)\n#>>> 41"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef octal_convert(decimal):\n    \"\"\"\n    >>> octal_convert(13)\n    '0000001'\n    >>> octal_convert(10)\n    '010000'\n    >>> octal_convert(15)\n    '010101'\n    >>> octal_convert(15)\n    '010101'\n    >>> octal_convert(16)\n    '010110'\n    >>> octal_convert(17)\n    '010111'\n    >>> octal_convert(18)\n    '011000'\n    >>> octal_convert(19)\n    '011001'\n    >>> octal_convert(20)\n    '011010'\n    >>> octal_convert(21)\n    '011011'\n    >>> octal_convert(22)\n    '011100'\n    >>> octal_convert(23)\n    '011101'\n    >>> octal_convert(24)\n    '011110'\n    >>> octal_convert(25)\n    '011111'\n    >>> octal_convert(26)\n    '100001'\n    >>> octal_convert(27)\n    '100010'\n    >>> octal_convert(28)\n    '100011'\n    >>> octal_convert(29)\n    '100100'\n    >>> octal_convert(30)\n    '100101'\n    >>> octal_convert(31)\n    '100110'\n    >>> octal_convert(32)\n    '100111'\n    >>> octal_convert(33)\n    '101000'\n    >>> octal_convert(34)\n    '101001'\n    >>> octal_convert(35)\n    '101010'\n    >>> octal_convert(36)\n    '101011'\n    >>> octal_convert(37)\n    '101100'\n    >>> octal_convert(38)\n    '101101'\n    >>> octal_convert(39)\n    '101110'\n    >>> oct"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef decimal_to_octal(decimal_number):\n    if decimal_number < 0:\n        return \"Negative number\"\n    #print decimal_number\n    octal_number = decimal_number\n    while decimal_number > 0:\n        decimal_number -= 1\n        octal_number = octal_number * 8\n    return octal_number\n\n\n#print decimal_to_octal(10)\n#print decimal_to_octal(-10)\n\n#print decimal_to_octal(16)\n#print decimal_to_octal(16.5)\n#print decimal_to_octal(1000)\n#print decimal_to_octal(0)\n#print decimal_to_octal(1)\n#print decimal_to_octal(1.5)\n#print decimal_to_octal(2)\n#print decimal_to_octal(2.5)\n#print decimal_to_octal(3)\n#print decimal_to_octal(4)\n#print decimal_to_octal(5)\n#print decimal_to_octal(6)\n#print decimal_to_octal(7)\n#print decimal_to_octal(8)\n#print decimal_to_octal(9)\n#print decimal_to_octal(10)\n#print decimal_to_octal(11)\n#print decimal_to_octal(12)\n#print decimal_to_octal(13)\n#print decimal_to_octal(14)\n#print decimal_to_octal(15)\n#print decimal_to_octal(16)\n#print decimal_to_octal(17)\n#print decimal_to_octal(18)\n#print decimal_to_octal(19)\n#print decimal_to_octal(20)\n#print decimal_to_octal(21)\n#print decimal_to_octal(22)\n#print decimal_to_octal(23)\n#print decimal_to_octal(24)\n#print decimal_to_octal(25)\n#print decimal_to_octal(26)\n#"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def convert_decimal_to_octal(decimal):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    # Convert decimal number to octal number.\n    octal = decimal * 3\n    # Convert octal number to hexadecimal number.\n    hex_num = octal.__hex__()\n    # Convert hexadecimal number to binary number.\n    binary_num = hex_num.__bin__()\n    # Return binary number.\n    return binary_num\n\nif __name__ == '__main__':\n    print convert_decimal_to_octal(5)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def convert_decimal_to_octal(decimal_number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    # Convert decimal to binary\n    binary = bin(decimal_number)\n    # Convert binary to octal\n    octal = binary.replace('1', '0')\n    # Return octal number\n    return octal\n\nif __name__ == '__main__':\n    print convert_decimal_to_octal(12)\n    print convert_decimal_to_octal(23)\n    print convert_decimal_to_octal(32)\n    print convert_decimal_to_octal(123)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\n# Write your code here\ndef decimal_to_octal(decimal):\n    if decimal == 0:\n        return '0'\n    result = ''\n    while decimal > 0:\n        digit = decimal % 8\n        if digit == 0:\n            result = '0' + result\n        else:\n            result = '1' + result\n        decimal = decimal / 8\n    return result\n\nif __name__ == \"__main__\":\n    decimal = int(sys.argv[1])\n    print decimal_to_octal(decimal)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def decimal2octal(decimal):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    Input:\n        decimal -- decimal number.\n\n    Output:\n        Octal number.\n    \"\"\"\n\n    if decimal < 0 or decimal > 255:\n        raise ValueError(\"Invalid decimal number: \" + str(decimal))\n    result = oct(decimal)\n    if result[-1] == '7':\n        result = result[:-1]\n    if result[-1] == '3':\n        result = result[:-1]\n    return result\n\nif __name__ == '__main__':\n    print decimal2octal(10)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def convert_dec_to_oct(dec):\n    \"\"\"\n    :param dec:\n    :return:\n    \"\"\"\n    octal_num = 0\n    while dec > 0:\n        octal_num = octal_num * 8 + dec % 10\n        dec = dec / 10\n\n    return octal_num\n\n\nif __name__ == '__main__':\n    print(convert_dec_to_oct(123))\n    print(convert_dec_to_oct(12345))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def decimal_to_octal(dec):\n    oct = ''\n    while dec > 0:\n        oct = oct + str(dec % 8)\n        dec = int(dec / 8)\n    return oct\n\ndef main():\n    print decimal_to_octal(10)\n    print decimal_to_octal(100)\n    print decimal_to_octal(1000)\n    print decimal_to_octal(10000)\n    print decimal_to_octal(100000)\n    print decimal_to_octal(1000000)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def decimal_to_octal(dec):\n    \"\"\"\n    Input:\n        dec: a decimal number\n    Output:\n        out: a string containing the octal number\n    Exceptions:\n        ValueError: if dec is not a decimal number\n    \"\"\"\n    if dec < 0 or dec > 9999999:\n        raise ValueError(\"dec is not a decimal number\")\n\n    return oct(dec)\n\ndef main():\n    \"\"\"\n    Main function for testing\n    \"\"\"\n    for i in range(1,10):\n        print(\"%d -> %s\" % (i, decimal_to_octal(i)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def to_octal(n):\n    # write your code here\n    # Note:\n    # 1. the input is a number between 0 and 9, inclusive.\n    # 2. the output is a string of length 2.\n    if n < 0 or n > 9:\n        raise ValueError('The number must be between 0 and 9.')\n\n    result = ''\n    while n > 0:\n        result += str(n % 8)\n        n = n // 8\n    return result\n\n\nif __name__ == '__main__':\n    n = int(raw_input())\n    print to_octal(n)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def decimal_to_octal(decimal_number):\n    octal_number = 0\n    while decimal_number > 0:\n        octal_number = octal_number * 8\n        decimal_number = decimal_number - 1\n    return octal_number\n\ndef main():\n    print(decimal_to_octal(12345))\n    print(decimal_to_octal(1234567))\n    print(decimal_to_octal(123456789))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def convert(dec):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n\n    if dec < 0:\n        return '-' + convert(-dec)\n    elif dec == 0:\n        return '0'\n    elif dec == 1:\n        return '1'\n    elif dec == 2:\n        return '2'\n    elif dec == 3:\n        return '3'\n    elif dec == 4:\n        return '4'\n    elif dec == 5:\n        return '5'\n    elif dec == 6:\n        return '6'\n    elif dec == 7:\n        return '7'\n    elif dec == 8:\n        return '8'\n    elif dec == 9:\n        return '9'\n    else:\n        return str(dec)\n\n\nif __name__ == '__main__':\n    print convert(9)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def decimal_to_octal(decimal_number):\n    \"\"\"\n    Convert decimal number to octal number.\n    :param decimal_number:\n    :return:\n    \"\"\"\n    return oct(decimal_number)\n\n\nif __name__ == '__main__':\n    decimal_number = 5\n    octal_number = decimal_to_octal(decimal_number)\n    print octal_number"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/dec2oct/problem\n\ndef dec2oct(dec):\n    # Complete this function\n    # Return the octal number\n    return\n\nif __name__ == '__main__':\n    t = int(raw_input())\n    for a0 in range(t):\n        dec = int(raw_input())\n        print dec2oct(dec)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef decimal2octal(dec):\n    '''\n    Convert decimal number to octal number.\n\n    >>> decimal2octal(12)\n    '1100'\n    >>> decimal2octal(3)\n    '03'\n    >>> decimal2octal(0)\n    '0'\n    >>> decimal2octal(1234)\n    '1234'\n    '''\n    s = \"\"\n    while dec > 0:\n        s = str(dec % 8) + s\n        dec = dec / 8\n    return s\n\ndef main():\n    '''\n    Test cases:\n        >>> decimal2octal(12)\n        '1100'\n        >>> decimal2octal(3)\n        '03'\n        >>> decimal2octal(0)\n        '0'\n        >>> decimal2octal(1234)\n        '1234'\n    '''\n    print decimal2octal(12)\n    print decimal2octal(3)\n    print decimal2octal(0)\n    print decimal2octal(1234)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import sys\nimport math\n\ndef convert_to_octal(dec):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    Input:\n        dec: decimal number\n\n    Output:\n        octal number\n    \"\"\"\n\n    return str(int(dec) * 8)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n\n    dec_num = input('Enter decimal number: ')\n    octal_num = convert_to_octal(dec_num)\n    print('{0} -> {1}'.format(dec_num, octal_num))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def decimal_to_octal(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: int\n    \"\"\"\n    return decimal * 8\n\nprint(decimal_to_octal(9))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def convert_decimal_to_octal(dec):\n    \"\"\"\n    convert_decimal_to_octal(dec) -> oct\n    \"\"\"\n    oct = 0\n    while dec >= 10:\n        oct += dec % 10\n        dec /= 10\n    return oct\n\nif __name__ == '__main__':\n    assert convert_decimal_to_octal(5) == 7\n    assert convert_decimal_to_octal(5.5) == 9\n    assert convert_decimal_to_octal(-5) == -7\n    assert convert_decimal_to_octal(-5.5) == -9\n    assert convert_decimal_to_octal(-10) == -8\n    assert convert_decimal_to_octal(-10.5) == -9\n    assert convert_decimal_to_octal(-99) == -8\n    assert convert_decimal_to_octal(-99.5) == -9"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "# https://www.tutorialspoint.com/python/python_floating_point_conversion.htm\n# https://www.tutorialspoint.com/python/python_integer_division.htm\n# https://www.tutorialspoint.com/python/python_integer_division_and_modulo.htm\n# https://www.tutorialspoint.com/python/python_floating_point_division.htm\n# https://www.tutorialspoint.com/python/python_integer_division_and_modulo.htm\n# https://www.tutorialspoint.com/python/python_floating_point_division_and_modulo.htm\n# https://www.tutorialspoint.com/python/python_integer_division_and_modulo.htm\n\ndef decimal_to_octal(decimal_number):\n    \"\"\"\n    Convert decimal number to octal number\n    :param decimal_number: decimal number\n    :return: octal number\n    \"\"\"\n    # TODO: implement conversion\n    return decimal_number\n\n\nif __name__ == '__main__':\n    print(decimal_to_octal(12))\n    print(decimal_to_octal(8))\n    print(decimal_to_octal(9))\n    print(decimal_to_octal(10))\n    print(decimal_to_octal(15))\n    print(decimal_to_octal(16))\n    print(decimal_to_octal(17))\n    print(decimal_to_octal(18))\n    print(decimal_to_octal(19))\n    print(decimal_to_octal(20))\n    print(decimal_to_octal(21))\n    print(decimal_to_octal(22))\n    print(decimal_to_octal(23))\n    print(decimal_to_octal(24))\n    print(decimal_to_octal(25))\n    print(decimal_to_octal(26))\n    print(decimal_to_octal(27))\n    print(decimal_to_octal(28))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "# Convert decimal number to octal number\ndef dec2oct(dec):\n    oct = 0\n    for digit in dec:\n        oct = oct * 8 + int(digit)\n    return oct\n\n# Convert octal number to decimal number\ndef oct2dec(oct):\n    dec = 0\n    for digit in oct:\n        dec = dec * 8 + int(digit)\n    return dec\n\n# Main\ndec = input(\"Enter a decimal number: \")\noct = input(\"Enter an octal number: \")\nprint(\"The decimal number: \", dec, \"converted to octal number: \", dec2oct(dec))\nprint(\"The octal number: \", oct, \"converted to decimal number: \", oct2dec(oct))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def dec2oct(num):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    Args:\n        num: the decimal number.\n\n    Returns:\n        The octal number.\n\n    Examples:\n        >>> dec2oct(3)\n        '077'\n        >>> dec2oct(0)\n        '0'\n        >>> dec2oct(-3)\n        '-077'\n        >>> dec2oct('-3')\n        Traceback (most recent call last):\n           ...\n        ValueError: Invalid input\n    \"\"\"\n\n    if num < 0:\n        raise ValueError('Invalid input')\n\n    if num == 0:\n        return '0'\n    else:\n        octal = []\n\n        while num:\n            num, rem = divmod(num, 8)\n            octal.append(str(rem))\n\n        return ''.join(octal[::-1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def convert_to_octal(decimal):\n    \"\"\"\n    Input: decimal number\n    Output: octal number\n    \"\"\"\n    result = \"\"\n    if decimal >= 0:\n        while decimal >= 8:\n            result = \"10\" + result\n            decimal = decimal - 8\n        result = str(decimal) + result\n    else:\n        while decimal <= -8:\n            result = \"10\" + result\n            decimal = decimal + 8\n        result = \"-\" + str(decimal) + result\n    return result\n\nif __name__ == \"__main__\":\n    for decimal in range(0, 101):\n        print(convert_to_octal(decimal))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def to_octal(decimal_num):\n    # Convert decimal number to octal number.\n    # Example: decimal_num = 123\n    # Output: octal_num = 49\n    # Note: decimal_num is a string, and octal_num is a string.\n\n    octal_num = \"\"\n    while decimal_num!= \"\":\n        octal_num = octal_num + \"0\" + decimal_num[0]\n        decimal_num = decimal_num[1:]\n\n    return octal_num\n\ndef main():\n    print(to_octal(\"123\"))\n    print(to_octal(\"10\"))\n    print(to_octal(\"1\"))\n    print(to_octal(\"0\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef convert_to_octal(dec):\n    \"\"\"\n    Convert decimal number to octal number\n    \"\"\"\n    return dec.__str__()\n\nif __name__ == \"__main__\":\n    dec = 12345\n    oct = convert_to_octal(dec)\n    print oct"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def to_octal(number):\n    \"\"\"\n    >>> to_octal('13')\n    '313'\n    >>> to_octal('1337')\n    '31337'\n    >>> to_octal('1337.5')\n    '31337'\n    \"\"\"\n    return str(number).rjust(len(str(number)), '0')\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def octal(number):\n    \"\"\"\n    Args:\n        number (int): decimal number\n    Returns:\n        str: octal number\n    \"\"\"\n    return str(number) + '0' * (4 - len(str(number)))\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print octal(123)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def decimal_to_octal(decimal):\n    \"\"\"\n    Decimal number to octal number.\n    :param decimal:\n    :return:\n    \"\"\"\n    return (int(decimal) + 48) * 8\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(decimal_to_octal(15))\n    print(decimal_to_octal(5))\n    print(decimal_to_octal(1))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def convert(num):\n    \"\"\"\n    Convert decimal number to octal number.\n    \n    :param num: decimal number\n    :return: octal number\n    \"\"\"\n    if num == 0:\n        return '0'\n    result = ''\n    while num > 0:\n        remainder = num % 8\n        result += str(remainder)\n        num //= 8\n    return result\n\nif __name__ == '__main__':\n    print convert(10)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n#\n# This file is part of the SoftLayer API.\n#\n# Copyright (c) 2015-2016 SoftLayer.\n#\n# For license information, please see the LICENSE file distributed with this\n# source code.\n#\n\nimport decimal\nimport re\n\ndef convert_decimal_to_octal(dec):\n    \"\"\"\n    This function converts decimal to octal.\n    \"\"\"\n\n    # Initialize variables\n    result = 0\n    i = 1\n    while i <= len(dec):\n        result = result * 8\n        result = result + dec[i - 1]\n\n        i = i + 1\n    return result\n\ndef main():\n\n    # Convert decimal number to octal\n    dec = decimal.Decimal(12345)\n    result = convert_decimal_to_octal(dec)\n    print \"Decimal number 12345 -> octal number: \" + str(result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def toOctal(number):\n    \"\"\"\n    :type number: int\n    :rtype: str\n    \"\"\"\n    # check if number is 0\n    if number == 0:\n        return \"0\"\n    # check if number is not negative\n    elif number < 0:\n        raise ValueError(\"Number can't be negative\")\n    # check if number is not a multiple of 8\n    elif number % 8!= 0:\n        raise ValueError(\"Number must be multiple of 8\")\n    # convert number to octal\n    octal = \"\"\n    while number > 0:\n        octal += str(number % 8)\n        number = number / 8\n    return octal\n\nif __name__ == \"__main__\":\n    # tests\n    assert toOctal(0) == \"0\"\n    assert toOctal(1) == \"1\"\n    assert toOctal(7) == \"11\"\n    assert toOctal(10) == \"128\"\n    assert toOctal(127) == \"1021\"\n    assert toOctal(128) == \"1024\"\n    assert toOctal(129) == \"1025\"\n    assert toOctal(1025) == \"1025\"\n    assert toOctal(1026) == \"1026\"\n    assert toOctal(1027) == \"1027\"\n    assert toOctal(1027) == \"1027\"\n    assert toOctal(1027) == \"1027\"\n    assert toOctal(1028) == \"1028\"\n    assert toOctal(1029) == \"1029\"\n    assert toOctal(1029) == \"1029\"\n    assert toOctal(1030) == \"1030\"\n    assert toOctal(1031) == \"1031\"\n    assert toOctal(1031) == \"1031\"\n    assert toOctal(1032) == \"1032\"\n    assert toOctal(1033) == \"1033\"\n    assert toOctal(1033) == \"1033\"\n    assert toOctal(1034) == \"1034\"\n    assert toOctal(1035) == \"1035\"\n    assert toOctal(1035)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "import sys\n\ndef convert_to_octal(dec):\n    \"\"\"\n    Converts decimal number to octal number.\n\n    :param dec: a decimal number\n    :return: an octal number\n    \"\"\"\n    return str(dec).rjust(8, \"0\")\n\nif __name__ == \"__main__\":\n    dec_num = int(input())\n    oct_num = convert_to_octal(dec_num)\n    print(oct_num)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import sys\n\ndef octal_to_decimal(number):\n    # Convert decimal number to octal number\n    return (number*8)%(sys.maxsize+1)\n\ndef main():\n    number = int(input('Enter a decimal number: '))\n    result = octal_to_decimal(number)\n    print('The octal number is {}'.format(result))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "#\n# This code is a modified version of the following code written by\n# Tim Peters:\n#\n#  http://code.activestate.com/recipes/576694-convert-a-decimal-number-to-an-octal-string/\n#\n# This code is released under the MIT license.\n#\n\nimport math\n\ndef octal(n):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return \"%o\" % int(math.floor(n))\n\ndef main():\n    \"\"\"\n    Write a function that converts decimal number to octal number.\n    \"\"\"\n    for i in range(1, 100):\n        print octal(i)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def to_octal(num):\n    \"\"\"\n    >>> to_octal(5)\n    65\n    >>> to_octal(1)\n    1\n    >>> to_octal(0)\n    0\n    >>> to_octal(-1)\n    -1\n    >>> to_octal(\"-10\")\n    -10\n    \"\"\"\n    if isinstance(num, int):\n        return num\n    if num == 0:\n        return 0\n    else:\n        return oct(num)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def decimal_to_octal(decimal_number):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    Args:\n        decimal_number (int): The number to be converted.\n\n    Returns:\n        str: The octal number as a string.\n    \"\"\"\n    return '{:o}'.format(decimal_number)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_octal(20))\n    print(decimal_to_octal(9))\n    print(decimal_to_octal(13))\n    print(decimal_to_octal(42))\n    print(decimal_to_octal(99))\n    print(decimal_to_octal(999))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def dec_to_oct(dec):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    oct = 0\n    for i in range(dec):\n        oct = oct * 8\n        oct += dec - i\n    return oct\n\n\nif __name__ == '__main__':\n    print dec_to_oct(10)\n    print dec_to_oct(32)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef decimal_to_octal(decimal):\n    \"\"\"\n    Convert decimal to octal.\n    \"\"\"\n    return oct(decimal)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print decimal_to_octal(12345)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def decimal2octal(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    if decimal == 0:\n        return '0'\n    octal = ''\n    while decimal > 0:\n        octal = str(decimal % 8) + octal\n        decimal = decimal // 8\n    return octal\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert decimal2octal(0) == '0', \"Example\"\n    assert decimal2octal(3) == '01', \"Example\"\n    assert decimal2octal(7) == '111', \"Example\"\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def decToOct(dec):\n    '''\n    :type dec: int\n    :rtype: int\n    '''\n    return dec * 8\n\n# Your Code Here\ndecToOct(10)"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def dec_to_oct(dec):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    octal = \"\"\n    while dec > 0:\n        octal += str(dec % 8)\n        dec = int(dec / 8)\n    return octal\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (0, \"0\"),\n        (1, \"1\"),\n        (3, \"11\"),\n        (8, \"100\"),\n        (255, \"11111111\"),\n        (26, \"1026\"),\n        (100, \"0100000000\"),\n        (255, \"1111111111111111\")\n    ]\n    for case in test_cases:\n        print(\"Case #{}: {}\".format(case[0], dec_to_oct(case[0])))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {integer}\n    def convertToOctal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if not num:\n            return 0\n\n        if num == 1:\n            return 3\n        if num == 2:\n            return 7\n\n        if num == 3:\n            return 15\n        if num == 4:\n            return 31\n\n        if num == 5:\n            return 63\n\n        if num == 6:\n            return 127\n\n        if num == 7:\n            return 255\n\n        if num == 8:\n            return 511\n\n        if num == 9:\n            return 1023\n\n        if num == 10:\n            return 2047\n\n        if num == 11:\n            return 4095\n\n        if num == 12:\n            return 8191\n\n        if num == 13:\n            return 16383\n\n        if num == 14:\n            return 32767\n\n        if num == 15:\n            return 65535\n\n        if num == 16:\n            return 131071\n\n        if num == 17:\n            return 262143\n\n        if num == 18:\n            return 524287\n\n        if num == 19:\n            return 1048575\n\n        if num == 20:\n            return 2097151\n\n        if num == 21:\n            return 4194303\n\n        if num == 22:\n            return 8388607\n\n        if num == 23:\n            return 16777215\n\n        if num == 24:\n            return 33554431\n\n        if num == 25:\n            return 67108863\n\n        if num == 26:\n            return 134217727\n\n        if num == 27:\n            return 268435455\n\n        if num == 28:\n            return 536870911\n\n        if num == 29:\n            return 1073741823\n\n        if num == 30:\n            return 2147483647\n\n        return num\n\nif __name__ == '__main__':\n    sol = Solution()\n\n    # print(sol.convertToOctal("
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# Input:\n#   n = 10\n#   n = 100\n#   n = 1000\n#   n = 100000\n#   n = 1000000\n#   n = 10000000\n#   n = 100000000\n#   n = 1000000000\n#   n = 100000000000\n#   n = 1000000000000\n#   n = 10000000000000\n#   n = 100000000000000\n#   n = 1000000000000000\n#   n = 10000000000000000\n#   n = 100000000000000000\n# Output:\n#   print(\"Decimal number to octal number\")\n#   print(decimal_to_octal(n))\n\ndef decimal_to_octal(n):\n    # write code here\n    if n < 1:\n        return 0\n    if n < 10:\n        return int(n)\n    if n < 100:\n        return int(n) + 8\n    if n < 1000:\n        return int(n) + 48\n    if n < 10000:\n        return int(n) + 70\n    if n < 100000:\n        return int(n) + 96\n    if n < 1000000:\n        return int(n) + 112\n    if n < 10000000:\n        return int(n) + 128\n    if n < 100000000:\n        return int(n) + 144\n    if n < 1000000000:\n        return int(n) + 160\n    if n < 10000000000:\n        return int(n) + 176\n    if n < 100000000000:\n        return int(n) + 192\n    if n < 1000000000000:\n        return int(n) + 208\n    if n < 10000000000000:\n        return int(n) + 224\n    if n < 100000000000000:\n        return int(n) + 240\n    if n < 1000000000000000:\n        return int(n) + 248\n    if n < 10000000000000000:\n        return int(n) + 256\n    if n < 100000000000000000:\n        return int(n) + 264\n    if n < 10000000000000000000:\n        return int(n) + 272\n    if n < 10000000000000000000:\n        return int(n) + 280\n    if n < 1000000000000000000:"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def octal(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return oct(number)\n\ndef hex(number):\n    \"\"\"\n    Convert decimal number to hexadecimal number.\n    \"\"\"\n    return hex(number)\n\ndef oct(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return oct(number)\n\ndef hex(number):\n    \"\"\"\n    Convert decimal number to hexadecimal number.\n    \"\"\"\n    return hex(number)\n\ndef oct(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return oct(number)\n\ndef hex(number):\n    \"\"\"\n    Convert decimal number to hexadecimal number.\n    \"\"\"\n    return hex(number)\n\ndef oct(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return oct(number)\n\ndef hex(number):\n    \"\"\"\n    Convert decimal number to hexadecimal number.\n    \"\"\"\n    return hex(number)\n\ndef oct(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return oct(number)\n\ndef hex(number):\n    \"\"\"\n    Convert decimal number to hexadecimal number.\n    \"\"\"\n    return hex(number)\n\ndef oct(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return oct(number)\n\ndef hex(number):\n    \"\"\"\n    Convert decimal number to hexadecimal number.\n    \"\"\"\n    return hex(number)\n\ndef oct(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return oct(number)\n\ndef hex(number):\n    \"\"\"\n    Convert decimal number to hexadecimal number.\n    \"\"\"\n    return hex(number)\n\ndef oct(number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    return oct(number)\n\ndef hex(number):\n    \"\"\"\n    Convert decimal number to hexadecimal number.\n    \"\"\"\n    return hex(number)"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def octal_to_decimal(octal_number):\n    \"\"\"\n    :param octal_number:\n    :return:\n    \"\"\"\n    return oct(int(octal_number, 8))\n\ndef test_octal_to_decimal():\n    assert octal_to_decimal('10') == '100'\n    assert octal_to_decimal('0100') == '10000'\n    assert octal_to_decimal('010000') == '1000000'\n    assert octal_to_decimal('010000000') == '10000000'\n\nif __name__ == '__main__':\n    test_octal_to_decimal()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def convert_to_octal(num):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    The function should return the octal number.\n    \"\"\"\n\n    if num == 0:\n        return \"0\"\n    octal_num = \"\"\n    while num!= 0:\n        octal_num += str(num % 8)\n        num /= 8\n    return octal_num\n\nif __name__ == \"__main__\":\n    num = \"100\"\n    print convert_to_octal(num)\n\n    num = \"123456789\"\n    print convert_to_octal(num)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def convert_decimal_to_octal(decimal_number):\n    \"\"\"\n    :type decimal_number: int\n    :rtype: int\n    \"\"\"\n    return decimal_number * 8\n\n#------------------------------------------------------------------------------\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert convert_decimal_to_octal(1) == '0o1', \"1 -> '0o1'\"\n    assert convert_decimal_to_octal(100) == '0o100', \"100 -> '0o100'\"\n    assert convert_decimal_to_octal(101) == '0o101', \"101 -> '0o101'\"\n    assert convert_decimal_to_octal(128) == '0o128', \"128 -> '0o128'\"\n    assert convert_decimal_to_octal(255) == '0o255', \"255 -> '0o255'\"\n    assert convert_decimal_to_octal(256) == '0o256', \"256 -> '0o256'\"\n    assert convert_decimal_to_octal(1000) == '0o1000', \"1000 -> '0o1000'\"\n    assert convert_decimal_to_octal(1234567) == '0o1234567', \"1234567 -> '0o1234567'\"\n    assert convert_decimal_to_octal(9876543210) == '0o9876543210', \"9876543210 -> '0o9876543210'\"\n    assert convert_decimal_to_octal(99999999) == '0o99999999', \"99999999 -> '0o99999999'\""
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def toOctal(number):\n    return oct(number)\n\ndef toHex(number):\n    return hex(number)\n\ndef main():\n    test_cases = [\n        (1, \"1\"),\n        (12, \"0o12\"),\n        (123, \"0o123\"),\n        (123456789, \"0o123456789\"),\n        (1234567890123456789, \"0o1234567890123456789\"),\n        (12345678901234567890123456789, \"0o12345678901234567890123456789\"),\n        (123456789012345678901234567890123456789, \"0o123456789012345678901234567890123456789\")\n    ]\n\n    for input_number, expected_output in test_cases:\n        actual_output = toOctal(input_number)\n        assert actual_output == expected_output, \"Error! Expected '{}' but got '{}'\".format(expected_output, actual_output)\n\n    print(\"Success!\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def to_octal(decimal):\n    \"\"\"\n    >>> to_octal(15)\n    '1111'\n    >>> to_octal(10)\n    '0010'\n    >>> to_octal(9)\n    '0001'\n    >>> to_octal(8)\n    '0000'\n    >>> to_octal(7)\n    '0000'\n    >>> to_octal(6)\n    '0000'\n    >>> to_octal(5)\n    '0000'\n    >>> to_octal(4)\n    '0000'\n    >>> to_octal(3)\n    '0000'\n    >>> to_octal(2)\n    '0000'\n    >>> to_octal(1)\n    '0000'\n    >>> to_octal(0)\n    '0000'\n    >>> to_octal(-1)\n    '-0001'\n    >>> to_octal(-2)\n    '-0010'\n    >>> to_octal(-3)\n    '-0011'\n    >>> to_octal(-4)\n    '-0100'\n    >>> to_octal(-5)\n    '-0101'\n    >>> to_octal(-6)\n    '-0110'\n    >>> to_octal(-7)\n    '-0111'\n    >>> to_octal(-8)\n    '-1000'\n    >>> to_octal(-9)\n    '-1001'\n    >>> to_octal(-10)\n    '-1010'\n    >>> to_octal(-11)\n    '-1011'\n    >>> to_octal(-12)\n    '-1100'\n    >>> to_octal(-13)\n    '-1101'\n    >>> to_octal(-14)\n    '-1110'\n    >>> to_octal(-15)\n    '-1111'\n    >>> to_octal(-16)\n    '-1000'\n    >>> to_octal(-17)\n    '-1001'\n    >>> to_octal(-18)\n    '-1010'\n    >>> to_octal(-19)\n    '-1011'\n    >>> to_octal(-20)\n    '-1100'\n    >>> to_octal(-21"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def convert(dec):\n    if dec < 0:\n        return \"-\" + str(-dec)\n    else:\n        return str(dec)\n\ndef octal(dec):\n    if dec < 0:\n        return \"-\" + str(-dec)\n    else:\n        return str(dec)\n\ndef main():\n    print(convert(-5))\n    print(convert(1))\n    print(convert(0))\n    print(convert(10))\n    print(convert(128))\n    print(convert(128.0))\n    print(convert(-128.0))\n    print(convert(127))\n    print(convert(127.0))\n    print(convert(-127))\n    print(convert(32768))\n    print(convert(-32768))\n    print(convert(32767))\n    print(convert(-32767))\n    print(convert(2147483647))\n    print(convert(-2147483647))\n    print(convert(2147483648))\n    print(convert(-2147483648))\n    print(convert(2147483649))\n    print(convert(-2147483649))\n    print(convert(9223372036854775807))\n    print(convert(-9223372036854775807))\n    print(convert(9223372036854775808))\n    print(convert(-9223372036854775808))\n    print(convert(9223372036854775809))\n    print(convert(-9223372036854775809))\n    print(convert(0x7fffffff))\n    print(convert(-0x7fffffff))\n    print(convert(0x80000000))\n    print(convert(-0x80000000))\n    print(convert(0xffffffff))\n    print(convert(-0xffffffff))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def decimal_to_octal(number):\n    \"\"\"\n    :param number: decimal number\n    :return: octal number\n    \"\"\"\n\n    return str(number)\n\nif __name__ == '__main__':\n    assert decimal_to_octal(10) == '0'\n    assert decimal_to_octal(8) == '010'\n    assert decimal_to_octal(1023) == '0'\n    assert decimal_to_octal(1024) == '0100'\n    assert decimal_to_octal(100) == '0100'\n    assert decimal_to_octal(1234567) == '01234567'\n    assert decimal_to_octal(12345678) == '012345678'\n    assert decimal_to_octal(123456789) == '0123456789'"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# https://www.tutorialspoint.com/python/python_convert_decimal.htm\n# http://stackoverflow.com/questions/7262452/python-convert-decimal-to-binary-and-back\n\ndef decimal_to_octal(decimal):\n    octal_number = decimal * 8\n    return octal_number\n\n# test cases\nprint(decimal_to_octal(0))\nprint(decimal_to_octal(1))\nprint(decimal_to_octal(2))\nprint(decimal_to_octal(3))\nprint(decimal_to_octal(4))\nprint(decimal_to_octal(5))\nprint(decimal_to_octal(6))\nprint(decimal_to_octal(7))\nprint(decimal_to_octal(8))\nprint(decimal_to_octal(9))\nprint(decimal_to_octal(10))\nprint(decimal_to_octal(11))\nprint(decimal_to_octal(12))\nprint(decimal_to_octal(13))\nprint(decimal_to_octal(14))\nprint(decimal_to_octal(15))\nprint(decimal_to_octal(16))\nprint(decimal_to_octal(17))\nprint(decimal_to_octal(18))\nprint(decimal_to_octal(19))\nprint(decimal_to_octal(20))\nprint(decimal_to_octal(21))\nprint(decimal_to_octal(22))\nprint(decimal_to_octal(23))\nprint(decimal_to_octal(24))\nprint(decimal_to_octal(25))\nprint(decimal_to_octal(26))\nprint(decimal_to_octal(27))\nprint(decimal_to_octal(28))\nprint(decimal_to_octal(29))\nprint(decimal_to_octal(30))\nprint(decimal_to_octal(31))\nprint(dec"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def convert_decimal_to_octal(decimal):\n    return decimal\n\nif __name__ == '__main__':\n    print convert_decimal_to_octal(0)\n    print convert_decimal_to_octal(1)\n    print convert_decimal_to_octal(10)\n    print convert_decimal_to_octal(99)\n    print convert_decimal_to_octal(100)\n    print convert_decimal_to_octal(101)\n    print convert_decimal_to_octal(1000)\n    print convert_decimal_to_octal(9999)\n    print convert_decimal_to_octal(10000)\n    print convert_decimal_to_octal(999999)\n    print convert_decimal_to_octal(100000000)\n    print convert_decimal_to_octal(999999999)\n    print convert_decimal_to_octal(10000000000000000)\n    print convert_decimal_to_octal(999999999999999999)\n    print convert_decimal_to_octal(1000000000000000000)\n    print convert_decimal_to_octal(9999999999999999999)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# Definition for an integer.\nclass Integer:\n    def __init__(self, num):\n        self.num = num\n        self.binary = bin(num)\n\n    def __str__(self):\n        return self.binary\n\n\n# Your OctalToBinary function will be called like this:\ndef OctalToBinary(dec):\n    return Integer(dec)\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert OctalToBinary(0) == \"0\"\n    assert OctalToBinary(1) == \"1\"\n    assert OctalToBinary(7) == \"101\"\n    assert OctalToBinary(27) == \"1021\"\n    assert OctalToBinary(128) == \"100000000\""
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution(object):\n    def convertToBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        if num == 1:\n            return '1'\n        if num == -1:\n            return '1'\n        if num < 0:\n            return '0'\n        \n        bin_num = ''\n        if num == 9:\n            bin_num = '1'\n            num = num + 1\n        else:\n            bin_num = str(num)\n            num = 0\n        \n        while num > 0:\n            bin_num = str(num % 2) + bin_num\n            num = int(num / 2)\n        return bin_num"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import math\n\n\ndef decimal_to_octal(dec):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    :param dec: decimal number\n    :return: octal number\n    \"\"\"\n    return int(math.ceil(dec * 8))\n\n\nif __name__ == '__main__':\n    print decimal_to_octal(1)\n    print decimal_to_octal(2)\n    print decimal_to_octal(3)\n    print decimal_to_octal(4)\n    print decimal_to_octal(5)\n    print decimal_to_octal(6)\n    print decimal_to_octal(7)\n    print decimal_to_octal(8)\n    print decimal_to_octal(9)\n    print decimal_to_octal(10)\n    print decimal_to_octal(11)\n    print decimal_to_octal(12)\n    print decimal_to_octal(13)\n    print decimal_to_octal(14)\n    print decimal_to_octal(15)\n    print decimal_to_octal(16)\n    print decimal_to_octal(17)\n    print decimal_to_octal(18)\n    print decimal_to_octal(19)\n    print decimal_to_octal(20)\n    print decimal_to_octal(21)\n    print decimal_to_octal(22)\n    print decimal_to_octal(23)\n    print decimal_to_octal(24)\n    print decimal_to_octal(25)\n    print decimal_to_octal(26)\n    print decimal_to_octal(27)\n    print decimal_to_octal(28)\n    print decimal_to_octal(29)\n    print decimal_to_octal(30)\n    print decimal_to_octal(31)\n    print decimal_to_octal(32)\n    print decimal_to_octal(33)\n    print decimal_to_octal(34)\n    print decimal_to_octal(35)\n    print decimal_to_octal(36)\n    print decimal_to"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# convert decimal to octal number\ndef decimal_to_octal(dec):\n    result = 0\n    while dec > 0:\n        result = result * 8 + dec % 10\n        dec = dec // 10\n    return result\n\n\nif __name__ == '__main__':\n    # test cases\n    cases = [\n        (0, '0'),\n        (1, '1'),\n        (2, '2'),\n        (3, '3'),\n        (4, '4'),\n        (5, '5'),\n        (6, '6'),\n        (7, '7'),\n        (8, '8'),\n        (9, '9'),\n        (10, '10'),\n        (11, '11'),\n        (12, '12'),\n        (13, '13'),\n        (14, '14'),\n        (15, '15'),\n        (16, '16'),\n        (17, '17'),\n        (18, '18'),\n        (19, '19'),\n        (20, '20'),\n        (21, '21'),\n        (22, '22'),\n        (23, '23'),\n        (24, '24'),\n        (25, '25'),\n        (26, '26'),\n        (27, '27'),\n        (28, '28'),\n        (29, '29'),\n        (30, '30'),\n        (31, '31'),\n        (32, '32'),\n        (33, '33'),\n        (34, '34'),\n        (35, '35'),\n        (36, '36'),\n        (37, '37'),\n        (38, '38'),\n        (39, '39'),\n        (40, '40'),\n        (41, '41'),\n        (42, '42'),\n        (43, '43'),\n        (44, '44'),\n        (45, '45'),\n        (46, '46'),\n        (47, '47'),\n        (48, '48'),\n        (49, '49'),\n        (50, '50'),\n        (51, '51'),\n        (52, '52'),\n        (53, '53'),\n        (54,"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# convert decimal number to octal number\ndef to_octal(dec):\n    octal = str(int(dec))\n    # if the last digit is 1, then the number is a multiple of 8\n    if octal[-1] == \"1\":\n        return octal[:-1] + \"8\"\n    else:\n        return octal\n\n# test cases\ntest_cases = [\n    (123, \"1011101\"),\n    (123, \"1011110\"),\n    (123, \"1011111\"),\n    (123, \"10111110\"),\n    (123, \"10111111\"),\n    (123, \"101111110\"),\n    (123, \"101111111\"),\n    (123, \"1011111110\"),\n    (123, \"1011111111\"),\n    (123, \"10111111110\"),\n    (123, \"10111111111\"),\n    (123, \"101111111110\"),\n    (123, \"101111111111\"),\n    (123, \"1011111111110\"),\n    (123, \"1011111111111\"),\n    (123, \"10111111111110\"),\n    (123, \"10111111111111\"),\n    (123, \"101111111111110\"),\n    (123, \"101111111111111\"),\n    (123, \"1011111111111110\"),\n    (123, \"10111111111111111\"),\n    (123, \"101111111111111110\"),\n    (123, \"101111111111111111\"),\n    (123, \"1011111111111111110\"),\n    (123, \"1011111111111111111\"),\n    (123, \"10111111111111111110\"),\n    (123, \"10111111111111111111\"),\n    (123, \"101111111111111111110\"),\n    (123, \"101111111111111111111\"),\n    (123, \"1011111111111111111110\"),\n    (123, \"1011111111111111111111\"),\n]\n\nfor case in test_cases:\n    print(to_octal(case[0]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# -*- coding: utf-8 -*-\n\nimport sys\n\n# \u5c06decimal\u8f6c\u6362\u4e3aoctal\uff0c\u56e0\u4e3adecimal\u7684\u8f6c\u6362\u7ed3\u679c\u662f8\u4f4d\u7684\ndef decimal_to_octal(decimal):\n    # \u5c06decimal\u8f6c\u6362\u4e3a8\u4f4d\u7684\u5b57\u7b26\u4e32\n    octal = str(decimal)\n    # \u53bb\u6389\u9996\u5c3e\u76840\uff0c\u53bb\u6389\u5b57\u7b26\u4e32\u4e2d\u6700\u540e\u4e00\u4f4d\uff0c\u5e76\u53d6\u51fa\u524d\u534a\u6bb5\uff0c\u5e76\u52a0\u4e0a0\n    octal = octal.rstrip('0')\n    octal = octal[:-1] + '0'\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\n    octal = int(octal)\n    return octal\n\n# \u6d4b\u8bd5\nif __name__ == '__main__':\n    # \u8f93\u5165\u7684\u53c2\u6570\n    # \u8f93\u5165\u7684\u53c2\u6570\uff0c\u7ed3\u679c\u5c31\u662f\u8fd4\u56de\u7684octal\n    print decimal_to_octal(123)\n    # \u8f93\u5165\u7684\u53c2\u6570\uff0c\u7ed3\u679c\u5c31\u662f\u8fd4\u56de\u7684decimal\n    print decimal_to_octal(123456789)\n    # \u8f93\u5165\u7684\u53c2\u6570\uff0c\u7ed3\u679c\u5c31\u662f\u8fd4\u56de\u7684decimal\n    print decimal_to_octal(1234567890123456789)\n    # \u8f93\u5165\u7684\u53c2\u6570\uff0c\u7ed3\u679c\u5c31\u662f\u8fd4\u56de\u7684decimal\n    print decimal_to_octal(12345678901234567890123456789)\n    # \u8f93\u5165\u7684\u53c2\u6570\uff0c\u7ed3\u679c\u5c31\u662f\u8fd4\u56de\u7684decimal\n    print decimal"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def to_octal(n):\n    \"\"\"\n    >>> to_octal(0)\n    '0'\n    >>> to_octal(1)\n    '1'\n    >>> to_octal(10)\n    '10'\n    >>> to_octal(100)\n    '100'\n    >>> to_octal(123)\n    '123'\n    >>> to_octal(1234)\n    '1234'\n    >>> to_octal(12345)\n    '12345'\n    >>> to_octal(123456)\n    '123456'\n    >>> to_octal(1234567)\n    '1234567'\n    >>> to_octal(12345678)\n    '12345678'\n    >>> to_octal(123456789)\n    '123456789'\n    >>> to_octal(1234567890)\n    '1234567890'\n    >>> to_octal(12345678901)\n    '12345678901'\n    >>> to_octal(123456789012)\n    '123456789012'\n    >>> to_octal(1234567890123)\n    '1234567890123'\n    >>> to_octal(12345678901234)\n    '12345678901234'\n    >>> to_octal(123456789012345)\n    '123456789012345'\n    >>> to_octal(1234567890123456)\n    '1234567890123456'\n    >>> to_octal(12345678901234567)\n    '12345678901234567'\n    >>> to_octal(123456789012345678)\n    '123456789012345678'\n    >>> to_octal(1234567890123456789)\n    '1234567890123456789'\n    >>> to_octal(12345678901234567890)\n    '12345678901234567890'\n    \"\"\"\n    result = []\n    while n > 0:\n        result.append(str(n"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# write your code here\n\ndef decimal_to_octal(decimal):\n    # write your code here\n    if decimal < 0:\n        raise ValueError(\"The number is negative\")\n    if decimal == 0:\n        return \"0\"\n    result = \"\"\n    while decimal > 0:\n        result = str(decimal % 8) + result\n        decimal /= 8\n    return result\n\ndef octal_to_decimal(octal):\n    # write your code here\n    if octal < 0:\n        raise ValueError(\"The number is negative\")\n    if octal == 0:\n        return \"0\"\n    result = \"\"\n    while octal > 0:\n        result = str(octal % 8) + result\n        octal /= 8\n    return result\n\ndef main():\n    print(decimal_to_octal(123))\n    print(octal_to_decimal(123))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def octal(dec):\n    return int(dec, 8)\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert octal(0) == 0, \"0 should be 0\"\n    assert octal(1) == 7, \"1 should be 7\"\n    assert octal(3) == 15, \"3 should be 15\"\n    assert octal(8) == 248, \"8 should be 248\"\n    assert octal(9) == 255, \"9 should be 255\"\n    assert octal(16) == 32768, \"16 should be 32768\"\n    assert octal(17) == 65535, \"17 should be 65535\"\n    assert octal(42) == 442, \"42 should be 442\"\n    assert octal(100) == 393216, \"100 should be 393216\""
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def dec2oct(dec):\n    \"\"\"\n    Convert decimal number to octal number.\n\n    >>> dec2oct(12)\n    '11'\n    >>> dec2oct(1234)\n    '341'\n    >>> dec2oct(1234.5)\n    '3431'\n    >>> dec2oct(1234.5678)\n    '3431'\n    >>> dec2oct(-1234)\n    '-341'\n    >>> dec2oct(-1234.5)\n    '-3431'\n    >>> dec2oct(-1234.5678)\n    '-3431'\n    \"\"\"\n    # Write your code here\n    return str(int(dec))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def decimal_to_octal(decimal):\n    \"\"\"\n    Convert decimal number to octal number.\n    \n    >>> decimal_to_octal(12)\n    '012'\n    >>> decimal_to_octal(123)\n    '123'\n    >>> decimal_to_octal(12345)\n    '12345'\n    >>> decimal_to_octal(1234567)\n    '1234567'\n    >>> decimal_to_octal(123456789)\n    '123456789'\n    >>> decimal_to_octal(12345678901)\n    '12345678901'\n    >>> decimal_to_octal(1234567890123)\n    '1234567890123'\n    >>> decimal_to_octal(123456789012345)\n    '123456789012345'\n    >>> decimal_to_octal(1234567890123456)\n    '1234567890123456'\n    >>> decimal_to_octal(12345678901234567)\n    '12345678901234567'\n    >>> decimal_to_octal(123456789012345678)\n    '123456789012345678'\n    >>> decimal_to_octal(1234567890123456789)\n    '1234567890123456789'\n    >>> decimal_to_octal(12345678901234567890)\n    '12345678901234567890'\n    >>> decimal_to_octal(-12)\n    Traceback (most recent call last):\n   ...\n    ValueError: '-12' is not a valid decimal number\n    >>> decimal_to_octal('12')\n    Traceback (most recent call last):\n   ...\n    ValueError: '12' is not a valid decimal number\n    >>> decimal_to_octal(12345)\n    Traceback (most recent call last):\n   ...\n    ValueError: '12345' is not a valid decimal number\n    >>> decimal_to_octal(-12345)\n    Traceback (most recent call last):"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def decimalToOctal(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num < 0:\n            raise ValueError('Number must be positive')\n        if num == 0:\n            return '0'\n        if num < 10:\n            return str(num)\n        # num = num * 3\n        num = num - 10\n        res = []\n        while num > 0:\n            res.append('01234567'[num % 8])\n            num /= 8\n        res.reverse()\n        return ''.join(res)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/decimal-to-binary-and-back/solution/\n\n# 1ms 100%\nclass Solution {\n    public String decimalToBinary(int num) {\n        if (num == 0) return \"0\";\n        StringBuilder res = new StringBuilder();\n        while (num!= 0) {\n            res.insert(0, num % 2);\n            num /= 2;\n        }\n        return res.reverse().toString();\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public String decimalToBinary(int num) {\n        if (num == 0) return \"0\";\n        StringBuilder res = new StringBuilder();\n        while (num!= 0) {\n            res.insert(0, (num & 1) + \"\");\n            num >>= 1;\n        }\n        return res.reverse().toString();\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public String decimalToBinary(int num) {\n        if (num == 0) return \"0\";\n        StringBuilder res = new StringBuilder();\n        while (num!= 0) {\n            res.append(num % 2);\n            num /= 2;\n        }\n        return res.reverse()."
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# convert decimal number to octal number\n# input: decimal number\n# output: octal number\n#\n# Example:\n#    2 => 002\n#    5 => 05\n#    9 => 09\n#    22 => 172\n#    23 => 173\n#    99 => 199\n#    100 => 200\n#    999 => 999\n#    1000 => 1000\n#    9999 => 9999\n#    10000 => 10000\n#    999999 => 9999999\n#    100000 => 1000000\n#    9999999 => 99999999\n#    100000000 => 100000000\n#    999999999 => 999999999\n#    1000000000 => 1000000000\n#    9999999999 => 9999999999\n#    100000001000 => 100000010000\n#    9999999999999 => 999999999999\n#    100000001000000 => 10000000100000\n#    999999999999999 => 99999999999999\n#    100000000010000000 => 1000000000100000\n#    999999999999999999 => 9999999999999999\n#    1000000000100000000 => 10000000001000000\n#    9999999999999999999 => 99999999999999999\n#    10000000001000000000 => 100000000010000000\n#    999999999999999999999 => 999999999999999999\n#    10000000001000000000000 => 100000000010000000000\n#    99999999999999999999999 => 99999999999999999999\n#    1000000000100000000000000 => 10000000001000000000000\n#    999999999999999999999999 => 999999999999999999999\n#    10000000001000000000000000 => 1000000000100000000000000\n#    99999999999999999999999999 => 99999999999999999999999\n#    10000000000000000000 => 1000000000000000000000\n#    999999999999999999999999999 => 999999999999999999999999\n#    100000000000000000000 => 10000000000000000000000\n#    9999999999999999999999999999 => 9999999999999999999999999\n#    1000000000000000000000000 => 1000000000000000000000000\n#    999999999999999999999999999999 => 999999999999999999999999999\n#    1000000000000000000000000000 => 10000000000000000000000000000\n#    9999999999999999999999999999999 => 9999999999999999999999999999\n#    1000000000000000000000000000000 => 10000000000000000000000000000"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def decimal_to_octal(decimal):\n    # Write your code here\n    # decimal = int(decimal)\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    # octal = oct(decimal)\n    # print(octal)\n    \n    # Convert decimal to octal.\n    #"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def convert_to_octal(dec):\n    \"\"\"\n    Args:\n        dec: int, decimal number\n    Returns:\n        int, octal number\n    \"\"\"\n    return dec * 8\n\nif __name__ == '__main__':\n    print convert_to_octal(0)\n    print convert_to_octal(1)\n    print convert_to_octal(2)\n    print convert_to_octal(3)\n    print convert_to_octal(4)\n    print convert_to_octal(5)\n    print convert_to_octal(6)\n    print convert_to_octal(7)\n    print convert_to_octal(8)\n    print convert_to_octal(9)\n    print convert_to_octal(10)\n    print convert_to_octal(11)\n    print convert_to_octal(12)\n    print convert_to_octal(13)\n    print convert_to_octal(14)\n    print convert_to_octal(15)\n    print convert_to_octal(16)\n    print convert_to_octal(17)\n    print convert_to_octal(18)\n    print convert_to_octal(19)\n    print convert_to_octal(20)\n    print convert_to_octal(21)\n    print convert_to_octal(22)\n    print convert_to_octal(23)\n    print convert_to_octal(24)\n    print convert_to_octal(25)\n    print convert_to_octal(26)\n    print convert_to_octal(27)\n    print convert_to_octal(28)\n    print convert_to_octal(29)\n    print convert_to_octal(30)\n    print convert_to_octal(31)\n    print convert_to_octal(32)\n    print convert_to_octal(33)\n    print convert_to_octal(34)\n    print convert_to_octal(35)\n    print convert_to_octal(36)\n    print convert_to_octal("
    }
  ]
}