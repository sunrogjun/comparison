{
  "timestamp": "2025-09-14T17:46:16.013127",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 55,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def count_positive(numbers):\n    return len([x for x in numbers if x > 0])\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(count_positive(numbers))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef count_positive_numbers(my_list):\n    \"\"\"\n    :type my_list: list\n    :rtype: int\n    \"\"\"\n    return Counter(my_list).values()[0]\n\n\nif __name__ == '__main__':\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    print(count_positive_numbers(list_of_numbers))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import timeit\n\ndef count_positive_numbers(numbers):\n    return sum(numbers)\n\ndef count_positive_numbers_old(numbers):\n    return sum([x > 0 for x in numbers])\n\ndef count_positive_numbers_new(numbers):\n    return sum([x > 0 for x in numbers if x > 0])\n\ndef count_positive_numbers_new_2(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 2])\n\ndef count_positive_numbers_new_3(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 3])\n\ndef count_positive_numbers_new_4(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 4])\n\ndef count_positive_numbers_new_5(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 5])\n\ndef count_positive_numbers_new_6(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 6])\n\ndef count_positive_numbers_new_7(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 7])\n\ndef count_positive_numbers_new_8(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 8])\n\ndef count_positive_numbers_new_9(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 9])\n\ndef count_positive_numbers_new_10(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 10])\n\ndef count_positive_numbers_new_11(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 11])\n\ndef count_positive_numbers_new_12(numbers):\n    return sum([x > 0 for x in numbers if x > 0 and x < 12])\n\ndef count_positive_numbers"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/count-positive-numbers\n\ndef countPositiveNumbers(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    # count the number of positive numbers\n    return sum([i > 0 for i in lst])\n\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6,7,8,9,0]\n    print(countPositiveNumbers(lst))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# function to count positive numbers in a list\ndef countPositive(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n# test\nif __name__ == '__main__':\n    # test with list containing only positive numbers\n    positive_list = [1, 2, 3, 4, 5, 6]\n    print(countPositive(positive_list))\n    # test with list containing some negative numbers\n    negative_list = [-2, -1, -3, -4, -5, -6]\n    print(countPositive(negative_list))\n    # test with list containing all negative numbers\n    all_negative_list = [-2, -1, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def positive_numbers(lst):\n    return [i for i in lst if i > 0]\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, -1, 0]\n    print(positive_numbers(lst))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def positive_numbers(numbers):\n    return sum(map(int, numbers))\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(positive_numbers(numbers))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def positive_number_count(numbers):\n    \"\"\"\n    Function to count the number of positive numbers in a list.\n    :param numbers: List of numbers.\n    :return: The number of positive numbers in the list.\n    \"\"\"\n    return sum(numbers) if numbers else 0\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(positive_number_count(numbers))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def positive_numbers(list_):\n    \"\"\"\n    >>> positive_numbers([-3, 0, 3, 4])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in list_ if n > 0]\n\ndef main():\n    \"\"\"\n    Run the main function.\n    \"\"\"\n    positive_numbers(range(1, 100))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import random\n\n\ndef count_positive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    positive_count = 0\n    for number in numbers:\n        if number > 0:\n            positive_count += 1\n    return positive_count\n\n\ndef test_count_positive_numbers():\n    assert count_positive_numbers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\n\n\ndef main():\n    numbers = [random.randint(0, 9) for _ in range(10)]\n    print(count_positive_numbers(numbers))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def positive_numbers(numbers):\n    \"\"\"\n    Returns a list of all positive numbers in the list.\n    \"\"\"\n    positive_numbers = []\n    for number in numbers:\n        if number > 0:\n            positive_numbers.append(number)\n    return positive_numbers\n\ndef main():\n    \"\"\"\n    Runs the function and prints the result.\n    \"\"\"\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(positive_numbers(numbers))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def positive_numbers(lst):\n    \"\"\"\n    >>> positive_numbers([2,4,5,6,7,8])\n    5\n    \"\"\"\n    return sum(1 for x in lst if x > 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def positive_numbers_in_list(input_list):\n    \"\"\"\n    :type input_list: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if i > 0:\n            count += 1\n    return count\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(positive_numbers_in_list([1,2,3,4,5,6,7,8,9,10]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef positive_number_in_list(list_of_numbers):\n    return [num for num in list_of_numbers if num > 0]\n\n# Test Cases\nprint(positive_number_in_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(positive_number_in_list([10]))\nprint(positive_number_in_list([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(positive_number_in_list([]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import sys\n\ndef positive_numbers(numbers):\n    return sum(number for number in numbers if number > 0)\n\nif __name__ == \"__main__\":\n    try:\n        numbers = int(sys.argv[1])\n    except:\n        print(\"Usage: python3 positive_numbers.py <numbers>\")\n        exit(1)\n\n    print(positive_numbers(numbers))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def count_positive_numbers(mylist):\n    \"\"\"\n    Arguments:\n        mylist: a list of numbers.\n    Returns:\n        the number of positive numbers in mylist.\n    \"\"\"\n    return sum(x >= 0 for x in mylist)\n\ndef test_count_positive_numbers():\n    assert count_positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n\nif __name__ == '__main__':\n    test_count_positive_numbers()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def count_positive(list):\n    \"\"\"\n    >>> count_positive([1, 2, 3, 4, 5])\n    2\n    >>> count_positive([-1, -2, -3, -4, -5])\n    3\n    >>> count_positive([-1, -2, -3, -4, -5, -6])\n    4\n    \"\"\"\n    return sum(1 for x in list if x > 0)\n\n# Test Cases\nprint count_positive([1, -1, -2, -3, -4, -5])"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def countPositive(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\ndef main():\n    list = [2, 3, 4, 5, 6, 7, 8, 9, 0, -5]\n    print(countPositive(list))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def count_positive_numbers(numbers):\n    total = 0\n    for number in numbers:\n        if number > 0:\n            total += 1\n    return total\n\ndef main():\n    numbers = [1, -1, 0, 1, -2, 2, 3]\n    print(count_positive_numbers(numbers))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def count_positive_numbers(list):\n    \"\"\"\n    >>> count_positive_numbers([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> count_positive_numbers([-1, 0, 1])\n    [-1, 1]\n    \"\"\"\n    positive_numbers = 0\n    for number in list:\n        if number > 0:\n            positive_numbers += 1\n    return positive_numbers\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def count_pos(nums):\n    return len([x for x in nums if x > 0])\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 5, -1, 0, 1]\n    print count_pos(nums)"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "import sys\n\ndef positive_numbers(numbers):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    :param numbers: A list of integers.\n    :return: An integer representing the number of positive numbers.\n    \"\"\"\n\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\n\ndef main():\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    numbers = map(int, sys.stdin.read().split())\n    print positive_numbers(numbers)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def count_positive_numbers(numbers):\n    \"\"\"\n    Count positive numbers in a list.\n\n    :param numbers: A list of numbers.\n    :return: A list of numbers that are positive.\n    \"\"\"\n    pos = 0\n    for number in numbers:\n        if number > 0:\n            pos += 1\n    return pos\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6]\n    print(count_positive_numbers(numbers))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def countPositiveNumbers(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n\nprint countPositiveNumbers([-3, -1, -2, -4, -5, 0, 5, 7, 9])"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "import os\n\ndef count_positive_numbers(numbers):\n    counter = 0\n    for number in numbers:\n        if number > 0:\n            counter += 1\n    return counter\n\n# Test\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]\n    print(count_positive_numbers(numbers))\n    numbers = [0, 0, 0, 0, 0]\n    print(count_positive_numbers(numbers))\n    numbers = [-1, -2, -3, -4, -5]\n    print(count_positive_numbers(numbers))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def positive_numbers(numbers):\n    return len([n for n in numbers if n > 0])\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6]\n    print(positive_numbers(numbers))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def count_positive_numbers(list_of_numbers):\n    \"\"\"\n    Return the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for number in list_of_numbers:\n        if number > 0:\n            count += 1\n    return count\n\ndef main():\n    print count_positive_numbers([1, -2, 3, -4, 5, -6, 7])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def countPositive(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    return sum([i for i in list if i > 0])\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    print(countPositive(l))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def count_positive_numbers(list_of_numbers):\n    \"\"\"\n    Return the number of positive numbers in a list.\n\n    :param list_of_numbers:\n    :return:\n    \"\"\"\n\n    return sum(i > 0 for i in list_of_numbers)\n\n\nif __name__ == '__main__':\n    assert count_positive_numbers([1, 0, 2, -2, 3]) == 4\n    assert count_positive_numbers([-1, 2, 3, 4, 5]) == 5\n    assert count_positive_numbers([-1, 2, 3, 4, 5, -1, 1]) == 6\n    assert count_positive_numbers([1, 2, 3, 4, 5, -1, 1]) == 6"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def count_pos(numbers):\n    \"\"\"\n    >>> count_pos([2, 1, 5, 3, 4, 6])\n    6\n    >>> count_pos([1, 2, 3, 4, 5])\n    5\n    >>> count_pos([-1, -2, -3, -4, -5])\n    5\n    >>> count_pos([1, -1, -2, -3, -4, -5])\n    0\n    \"\"\"\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def count_positive_numbers(numbers):\n    return sum(1 for n in numbers if n > 0)\n\ndef test_count_positive_numbers():\n    assert count_positive_numbers([1, 2, 3, 4, 5]) == 4\n    assert count_positive_numbers([1, -2, 3, -4, 5]) == 3\n\ndef main():\n    test_count_positive_numbers()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def count(numbers):\n    total = 0\n    for number in numbers:\n        if number > 0:\n            total += 1\n    return total\n\nprint(count([3, 5, -4, 7, 1, -1]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def positive_numbers_in_list(my_list):\n    \"\"\"\n    :param my_list: a list\n    :return: the total number of positive numbers in the list\n    \"\"\"\n    return sum(1 for x in my_list if x > 0)\n\ndef main():\n    \"\"\"\n    Call the positive_numbers_in_list function and return the result.\n    \"\"\"\n    my_list = [1, -2, 0, 3, 4, 5, -6, 7]\n    print(positive_numbers_in_list(my_list))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def countPositiveNumbers(numberList):\n    \"\"\"\n    :type numberList: List[int]\n    :rtype: int\n    \"\"\"\n    total = 0\n    for number in numberList:\n        if number > 0:\n            total += 1\n    return total\n\nif __name__ == '__main__':\n    print(countPositiveNumbers([-2, -3, 4, -1, -1, 1, -1, -4]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def count_positive_numbers(lst):\n    \"\"\"\n    Returns the number of positive numbers in a list.\n    \"\"\"\n\n    # initialize counter\n    count = 0\n\n    # loop through the list and add up the numbers\n    for i in lst:\n        if i > 0:\n            count += 1\n\n    return count\n\n\ndef main():\n    \"\"\"\n    A basic test function.\n    \"\"\"\n\n    # create a list of integers\n    lst = [1, 2, 3, -3, 4, 0]\n\n    # print the number of positive numbers in the list\n    print \"Number of positive numbers in the list:\", count_positive_numbers(lst)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def count_positive_numbers(numbers):\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\nprint count_positive_numbers([1,2,3,4,5])"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def count_positive_numbers(my_list):\n    \"\"\"\n    >>> my_list = [1, -1, 2, 3, 4, 5]\n    >>> count_positive_numbers(my_list)\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    return sum(1 for x in my_list if x > 0)\n    \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def count_positive(list_of_numbers):\n    \"\"\"\n    count_positive()\n    \"\"\"\n    # YOUR CODE HERE\n    return sum(1 for number in list_of_numbers if number > 0)\n\n\nif __name__ == \"__main__\":\n    print count_positive([1, -1, 4, 0, -1, -2, 3, -3, -4])"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def count_positive_numbers(numbers):\n    count = 0\n    for i in numbers:\n        if i > 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    numbers = [2, 4, 6, -1, 1, -3]\n    print(count_positive_numbers(numbers))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def positive_number_count(lst):\n    return sum(1 for n in lst if n > 0)\n\nif __name__ == '__main__':\n    print(positive_number_count([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def count_positive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    for n in numbers:\n        if n > 0:\n            count += 1\n    return count"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def count_positive(my_list):\n    count = 0\n    for element in my_list:\n        if element > 0:\n            count += 1\n    return count\n\nmy_list = [1, 3, -1, -3, 4, -4, 5, 6]\n\nprint(\"The count of positive numbers in the list is {0}\".format(count_positive(my_list)))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def positive_numbers(numbers):\n    \"\"\"\n    numbers: list of numbers\n    return: a list of numbers with count of positive numbers\n    \"\"\"\n    return [x for x in numbers if x > 0]\n\ndef main():\n    \"\"\"\n    test\n    \"\"\"\n    numbers = [3, 4, 5, -1, 0, -2]\n    print(positive_numbers(numbers))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def count(list):\n    \"\"\"\n    Return the number of positive numbers in the list.\n    \"\"\"\n    return sum(1 for i in list if i > 0)\n\ndef main():\n    \"\"\"\n    Write a program that counts the number of positive numbers in a list.\n    \"\"\"\n    lst = [5, -2, 4, 5, 1, -1]\n    print(\"The number of positive numbers in the list is {}\".format(count(lst)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def positive_numbers_in_list(list_):\n    \"\"\"\n    Return the number of positive numbers in a list.\n\n    Arguments:\n    list_ -- the list to count the positive numbers in.\n\n    Returns:\n    The number of positive numbers in the list.\n    \"\"\"\n    return sum(1 for x in list_ if x > 0)\n\nprint(positive_numbers_in_list([-1, -2, -3, -4, 0, 1, 2, 3, 4]))\n\n# Output:\n# 5"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def positive_numbers(lst):\n    \"\"\"\n    :param lst: list of numbers\n    :return: number of positive numbers in lst\n    \"\"\"\n    return sum(x>0 for x in lst)\n\nprint(positive_numbers([-3,1,2,3,4,5]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def count_positive_numbers(numbers):\n    \"\"\"\n    Count positive numbers in a list.\n\n    >>> numbers = [1, 2, 3, 4, 5]\n    >>> count_positive_numbers(numbers)\n    4\n    >>> numbers = [1, 2, -3, 4, 5]\n    >>> count_positive_numbers(numbers)\n    2\n    >>> numbers = [1, -3, 4, 5]\n    >>> count_positive_numbers(numbers)\n    0\n    >>> numbers = [1, -3, -4, 5]\n    >>> count_positive_numbers(numbers)\n    1\n    \"\"\"\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def countPositive(numbers):\n    count = 0\n    for i in numbers:\n        if i > 0:\n            count += 1\n    return count\n\ndef test():\n    numbers = [1, -1, 2, -2, 3, -3, 4, -4]\n    assert countPositive(numbers) == 5\n\ntest()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def count(numbers):\n    \"\"\"\n    >>> count([1, 2, 3, 4, 5])\n    5\n    >>> count([1, 2, 3, 4, -5])\n    1\n    >>> count([-1, 2, 3, 4, 5])\n    5\n    >>> count([-1, 2, 3, 4, -5])\n    0\n    \"\"\"\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def count_positive_numbers(my_list):\n    return sum(1 for x in my_list if x > 0)\n\n# print(count_positive_numbers([-1, 2, 3, 4, 5, 6]))\n# print(count_positive_numbers(range(1, 6)))\n\nprint(count_positive_numbers([-1, 2, 3, 4, 5, 6]))\nprint(count_positive_numbers(range(1, 7)))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def countPositive(l):\n    return sum(1 for i in l if i > 0)\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, -1, -2, -3]\n    print(countPositive(l))\n    l = [1, -2, 3, -4, 5, -1, -2, -3]\n    print(countPositive(l))\n    l = [1, -2, -3, -4, 5, -1, -2, -3]\n    print(countPositive(l))\n    l = [-1, -2, -3, -4, 5, -1, -2, -3]\n    print(countPositive(l))\n    l = [-1, -2, -3, -4, 5, -1, -2, -3, -4]\n    print(countPositive(l))\n    l = [-1, -2, -3, -4, 5, -1, -2, -3, -4, -5]\n    print(countPositive(l))\n    l = [-1, -2, -3, -4, 5, -1, -2, -3, -4, -5, -6]\n    print(countPositive(l))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def count_pos(nums):\n    \"\"\"\n    >>> count_pos([1, 2, 3, 4, 5])\n    5\n    >>> count_pos([-1, 0, 1, 2, 3])\n    3\n    >>> count_pos([-1, 0, 1, 2, 3, -4, 4])\n    5\n    \"\"\"\n    return sum(1 for i in nums if i > 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def count_positives(lst):\n    \"\"\"\n    >>> count_positives([1, 2, 3, 4, 5])\n    5\n    >>> count_positives([1, 2, 3, 4, 5, 6])\n    6\n    >>> count_positives([])\n    0\n    >>> count_positives([-1, 0, 1, 2, 3])\n    3\n    >>> count_positives([-1, 0, 1, 2, 3, 4])\n    4\n    >>> count_positives([-1, 0, 1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    return sum(1 for x in lst if x > 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def count(l):\n    \"\"\"\n    count(l) -> int\n    l - list of numbers\n    \"\"\"\n    count = 0\n    for i in l:\n        if i > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print count([-1, 2, -3, 4, -5, 6, -7, 8, -9])"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def positive_numbers(list_of_numbers):\n    \"\"\"\n    Returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for number in list_of_numbers:\n        if number > 0:\n            count += 1\n    return count\n\nprint positive_numbers([-1, 0, 1, 2, 3])"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from itertools import count\n\ndef count_positive(lst):\n    \"\"\"\n    Counts the number of positive numbers in the list.\n    \"\"\"\n    return sum(map(lambda x: x > 0, lst))\n\ndef count_negative(lst):\n    \"\"\"\n    Counts the number of negative numbers in the list.\n    \"\"\"\n    return sum(map(lambda x: x < 0, lst))\n\ndef count_both(lst):\n    \"\"\"\n    Counts the number of both positive and negative numbers in the list.\n    \"\"\"\n    return sum(map(lambda x: x > 0, lst)) + sum(map(lambda x: x < 0, lst))\n\ndef main():\n    lst = [3, -4, -1, -3, 4, 1, 1, -1, 1, 3, -2, -3, 1, -4, -2, 1, -1, -2, 1, -2, -1, -1, 1, 3, -3, -4, -1, -3, 4, 1, 1, -1, 1, 3, -2, -3, 1, -4, -2, 1, -1, -2, 1, -2, -1, -1, 1, 3, -3, -4, -1, -3, 4, 1, 1, -1, 1, 3, -2, -3, 1, -4, -2, 1, -1, -2, 1, -2, -1, -1, 1, 3, -3, -4, -1, -3, 4, 1, 1, -1, 1, 3, -2, -3, 1, -4, -2, 1, -1, -2, 1, -2, -1, -1, 1, 3, -3, -4, -1, -3, 4, 1, 1, -1, 1, 3, -2, -3, 1, -4, -2, 1, -1, -2, 1, -2, -1, -1, 1, 3, -3, -4, -1, -3, 4, 1, 1, -1, 1, 3, -2, -"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def countPositiveNumbers(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in l:\n        if i > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    l = [1, -1, 2, 0, -3, 4]\n    print(countPositiveNumbers(l))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def count_positive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(1 for number in numbers if number > 0)\n\nif __name__ == '__main__':\n    numbers = [1, 1, 0, 0, -1]\n    print(count_positive(numbers))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def count_positive_numbers(list_of_numbers):\n    \"\"\"\n    :param list_of_numbers: list of numbers\n    :return: count of positive numbers in list\n    \"\"\"\n    count = 0\n    for number in list_of_numbers:\n        if number > 0:\n            count += 1\n    return count\n\nprint count_positive_numbers([3, -4, 0, 1, 5, 7, -8, -9])"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def count_positive(lst):\n    count = 0\n    for item in lst:\n        if item > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    lst = [1, -2, -3, 4, 5]\n    print count_positive(lst)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def positive_number_count(numbers):\n    \"\"\"\n    Write a function that counts the number of positive numbers in the list\n    and returns the result.\n    \"\"\"\n    return sum(1 for number in numbers if number > 0)\n\nnumbers = [10, 2, -2, 0]\nprint(positive_number_count(numbers))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def count_positive_numbers(numbers):\n    \"\"\"\n    :param numbers: a list of integers\n    :return: a tuple of the form (pos_num, neg_num)\n    \"\"\"\n\n    pos_num = 0\n    neg_num = 0\n    for number in numbers:\n        if number > 0:\n            pos_num += 1\n        elif number < 0:\n            neg_num += 1\n    return (pos_num, neg_num)\n\n\n\ndef main():\n    numbers = [1, -2, 3, -4, 5]\n    print count_positive_numbers(numbers)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def count_positive_numbers(list_of_numbers):\n    \"\"\"\n    :param list_of_numbers: A list of integers.\n    :return: An integer that is the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for number in list_of_numbers:\n        if number > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    list_of_numbers = [1, 0, -2, -3, 4, 0, -5, 6]\n    print count_positive_numbers(list_of_numbers)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def countPositive(numbers):\n    \"\"\"\n    countPositive(numbers) -> int\n    \n    countPositive(numbers) calculates the number of positive numbers in\n    a list.\n    \n    >>> countPositive([1, 2, 3, 4, 5])\n    4\n    >>> countPositive([])\n    0\n    >>> countPositive([-1, -2, -3, -4, -5])\n    2\n    \"\"\"\n    \n    count = 0\n    for i in numbers:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def count_positive_numbers(l):\n    \"\"\"\n    >>> count_positive_numbers([1, 2, 3, 4])\n    3\n    >>> count_positive_numbers([-1, 0, -2, 2, -3])\n    4\n    \"\"\"\n    count = 0\n    for i in l:\n        if i > 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def count_positive_numbers(numbers):\n    # write your code here\n    count = 0\n    for i in numbers:\n        if i > 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]\n    print(count_positive_numbers(numbers))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def count_positive(lst):\n    \"\"\"\n    Returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n\n\ndef main():\n    lst = [1, 2, -3, 4, 0, -5, 6]\n    print(count_positive(lst))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def count_pos(nums):\n    return sum(1 for num in nums if num > 0)\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, -1, 0, -4]\n    print(count_pos(nums))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def count_positive_numbers_in_list(list_of_numbers):\n    count = 0\n    for num in list_of_numbers:\n        if num > 0:\n            count += 1\n    return count\n\nprint(count_positive_numbers_in_list([1, 2, 3, 4, 5, 6]))\nprint(count_positive_numbers_in_list([-1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def count_pos(nums):\n    \"\"\"\n    Write a function to count the positive numbers in a list.\n    \"\"\"\n    return sum(map(lambda x: x > 0, nums))\n\nprint count_pos([-2, 0, 1, 3, 4, 5])"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def countPositiveNumbers(numbers):\n    \"\"\"\n    :type numbers: list\n    :rtype: int\n    \"\"\"\n    # YOUR CODE HERE\n    numbers = sorted(numbers)\n    return sum(1 for n in numbers if n > 0)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def count(l):\n    \"\"\"\n    >>> count([1, 2, 3])\n    3\n    \"\"\"\n    return sum(1 for i in l if i > 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "from __future__ import print_function\n\n#  This file is part of the Wazanik project.\n#\n#  Wazanik is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#\n#  Wazanik is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with Wazanik; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport math\n\ndef count_positive_numbers(l):\n    \"\"\"\n    counts positive numbers in a list.\n\n    Args:\n        l: list\n\n    Returns:\n        number of positive numbers in the list\n    \"\"\"\n    return sum(1 for x in l if x > 0)\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    l = [1, 2, 3, 4, 5, 6]\n    print(\"Number of positive numbers in the list is {}\".format(count_positive_numbers(l)))\n    l = [1, -2, 3, -4, 5, -6]\n    print(\"Number of positive numbers in the list is {}\".format(count_positive_numbers(l)))\n    l = [1, 2, 3, 4, -5, 6]\n    print(\"Number of positive numbers in the list is {}\".format(count_positive_numbers(l)))\n    l = [1, 2, 3, 4, 5, -6]\n    print(\"Number of positive numbers in the list is {}\".format(count_positive_numbers(l)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def count(numbers):\n    return sum(1 for n in numbers if n > 0)\n\nnumbers = [1, 2, 2, 4, 4, 5, 5, 5]\nprint(count(numbers))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def count(l):\n    #count the number of positive numbers in the list l\n    total = 0\n    for e in l:\n        if e > 0:\n            total += 1\n    return total\n\n#test case:\n\nprint count([1,2,3,4,5,6,7,8,9,10])"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "# import the python module\nimport sys\n# import the python list\nimport list\n\n# function body\ndef count_positive_numbers(list_):\n    # print the list\n    print list_\n    # return the number of positive numbers in the list\n    return sum([i for i in list_ if i > 0])\n\n# test code\nif __name__ == \"__main__\":\n    # get the input\n    input_ = sys.stdin.readlines()\n    # convert the input to a list\n    input_ = [int(i) for i in input_]\n    # print the list\n    print input_\n    # call the function\n    print count_positive_numbers(input_)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def count_pos(list_of_numbers):\n    \"\"\"\n    Write a function to count the positive numbers in a list.\n    \"\"\"\n    # Write your code below\n    return len([n for n in list_of_numbers if n > 0])\n\nif __name__ == \"__main__\":\n    print(count_pos([1, 2, 3, 4, 5]))\n    print(count_pos([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "# Importing required libraries\nfrom collections import Counter\nfrom itertools import islice\n\n# Function to count positive numbers in a list\ndef count_positive_numbers(list_of_numbers):\n    \"\"\"\n    Return the number of positive numbers in a list.\n    \"\"\"\n    # Initialising counter\n    counter = Counter()\n    # Iterating over list_of_numbers\n    for number in list_of_numbers:\n        # If number is positive\n        if number > 0:\n            # Add number to counter\n            counter[number] += 1\n    # Returning the number of positive numbers\n    return counter.most_common(1)[0][0]\n\n# Input and output\nlist_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(count_positive_numbers(list_of_numbers))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def count_positive(l):\n    return sum(x > 0 for x in l)\n\nl = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]\nprint(count_positive(l))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def count_positive_numbers(numbers):\n    # write your code here\n    total = 0\n    for i in numbers:\n        if i >= 0:\n            total += i\n    return total\n\ndef main():\n    numbers = [1, -1, 3, -3, 4]\n    print(count_positive_numbers(numbers))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def count(num):\n    \"\"\"\n    Args:\n        num: a list of numbers.\n    Returns:\n        an integer representing the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for i in num:\n        if i > 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    num = [2, 3, 4, 5, -1, -2, 0, 1]\n    print(count(num))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def positive_numbers(my_list):\n    return [item for item in my_list if item > 0]\n\ndef main():\n    my_list = [2, 5, 2, 3, 2, 6, 7, 9, 2, 2, 2, 7]\n    print(positive_numbers(my_list))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def count(list_of_numbers):\n    \"\"\"\n    Arguments:\n        list_of_numbers: A list of numbers.\n    Returns:\n        A dict with the keys \"positive\" and \"negative\".\n    \"\"\"\n    positive_numbers = 0\n    negative_numbers = 0\n    for number in list_of_numbers:\n        if number > 0:\n            positive_numbers += 1\n        elif number < 0:\n            negative_numbers += 1\n    return {\"positive\": positive_numbers, \"negative\": negative_numbers}\n\nnumbers = [1, 2, 3, 4, -5, -6, 7, 8]\n\nprint(count(numbers))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def positive_number_count(l):\n    \"\"\"\n    Input:\n        l - a list\n    Output:\n        A list of numbers which are positive.\n    \"\"\"\n    return [x for x in l if x > 0]\n\n# Test cases\nassert positive_number_count([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert positive_number_count([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert positive_number_count([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert positive_number_count([1, -2, -3, -4, -5]) == [1, -2, -3, -4, -5]\nassert positive_number_count([1, -2, -3, -4, -5]) == [1, -2, -3, -4, -5]\nassert positive_number_count([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def count_positive_numbers(list_of_numbers):\n    \"\"\"\n    list_of_numbers = [1, 2, 3, 4, 5]\n    \"\"\"\n    \n    # Write your code here\n    \n    # Test your code\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_numbers)\n    assert list_of_numbers == count_positive_numbers(list_of_"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def count_positive_numbers(numbers):\n    count = 0\n    for i in numbers:\n        if i > 0:\n            count += 1\n    return count\n\n\n# Test Cases\n# [[\"-2\", \"0\", \"1\", \"2\", \"3\"], 5]\n# [[\"-2\", \"0\", \"1\", \"2\", \"3\"], -3]\n# [[\"-2\", \"0\", \"1\", \"2\", \"3\"], \"\"]\n\n# Output:\n# 4\n# 3\n# 2\n\ndef main():\n    numbers = [[\"-2\", \"0\", \"1\", \"2\", \"3\"], \"-3\"]\n    numbers.append([\"-2\", \"0\", \"1\", \"2\", \"3\"])\n    numbers.append([\"-2\", \"0\", \"1\", \"2\", \"3\"])\n    numbers.append([0, 1, 2, 3])\n    numbers.append([\"0\", 1, 2, 3])\n    numbers.append([\"0\", 1, 2, 3])\n\n    print count_positive_numbers(numbers)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def count_positive_numbers(numbers):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n\n    Arguments:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The number of positive numbers in the list.\n    \"\"\"\n\n    return sum([n>0 for n in numbers])\n\n\n# Tests:\n\ndef test_count_positive_numbers():\n    \"\"\"\n    Test count_positive_numbers() with a list containing only positive numbers.\n    \"\"\"\n    assert count_positive_numbers([1, 2, 3, 4, 5, 6]) == 5\n\ndef test_count_positive_numbers_empty():\n    \"\"\"\n    Test count_positive_numbers() with an empty list.\n    \"\"\"\n    assert count_positive_numbers([]) == 0\n\ndef test_count_positive_numbers_with_a_negative_number():\n    \"\"\"\n    Test count_positive_numbers() with a list containing a negative number.\n    \"\"\"\n    assert count_positive_numbers([-1, -2, -3, -4, -5, -6]) == 5\n\ndef test_count_positive_numbers_with_a_negative_number_and_a_positive_number():\n    \"\"\"\n    Test count_positive_numbers() with a list containing a negative number and a positive number.\n    \"\"\"\n    assert count_positive_numbers([-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5]) == 6\n\ndef test_count_positive_numbers_with_a_negative_number_and_a_positive_number_and_a_zero_number():\n    \"\"\"\n    Test count_positive_numbers() with a list containing a negative number, a positive number, and a zero number.\n    \"\"\"\n    assert count_positive_numbers([-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 0]) == 6\n\ndef test_count_positive_numbers_with_a_negative_number_and_a_positive_number_and_a_zero_number_and_a"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# +++your code here+++\n# Write output as a list of lists.\n# The outer list is sorted by number.\n# The inner lists are sorted by number.\n# The inner lists are not sorted by order.\n#\n# Example:\n#\n# [[1, 2, 3], [1, 3, 4], [5, 5, 1]]\n\n# +++your code here+++\n# Write tests for your solution using the test function\n#\n# def test_your_code():\n#\n#     pass # replace with more appropriate test data\n\ndef count_positive_numbers(numbers):\n    # +++your code here+++\n    # Write your code here.\n    result = [[] for i in range(len(numbers))]\n    for number in numbers:\n        if number > 0:\n            result[number-1].append(number)\n    return result\n\nif __name__ == '__main__':\n    test_your_code()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def count_positive(numbers):\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\ndef count_positive_recursive(numbers):\n    if len(numbers) == 0:\n        return 0\n    count = numbers[0]\n    for number in numbers[1:]:\n        if number > 0:\n            count += 1\n        else:\n            return count\n    return count\n\ndef count_positive_iterative(numbers):\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\ndef count_positive_recursive_iterative(numbers):\n    if len(numbers) == 0:\n        return 0\n    count = numbers[0]\n    for number in numbers[1:]:\n        if number > 0:\n            count += 1\n        else:\n            return count\n    return count\n\ndef count_positive_naive(numbers):\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\ndef count_positive_naive_recursive(numbers):\n    if len(numbers) == 0:\n        return 0\n    count = numbers[0]\n    for number in numbers[1:]:\n        if number > 0:\n            count += 1\n        else:\n            return count\n    return count\n\ndef count_positive_naive_iterative(numbers):\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\ndef count_positive_naive_recursive_iterative(numbers):\n    if len(numbers) == 0:\n        return 0\n    count = numbers[0]\n    for number in numbers[1:]:\n        if number > 0:\n            count += 1\n        else:\n            return count\n    return count\n\ndef main():\n    numbers = [1, 2, 3, -3, 0]\n    print(count_positive(numbers))\n    print(count_positive_recursive(numbers))\n    print(count_positive_iterative"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Import the required libraries\nimport os\nfrom collections import Counter\n\n# Create the counter object\ncounter = Counter()\n\n# Create the list of strings\ntest_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n# Iterate over the list and add each element to the counter object\nfor element in test_list:\n    counter[element] += 1\n\n# Display the list of strings with the number of times each element was found\nprint(counter)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Example\n# list = [3, 1, 1, 2, 1, 2]\n# return 3\n\n# Answer\n# return sum([1 for i in range(len(list)) if list[i] > 0])\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\ndef count_positive_numbers(list):\n    n = len(list)\n    for i in range(n):\n        if list[i] > 0:\n            list[i] = -list[i]\n    return sum(list)\n\nif __name__ == '__main__':\n    list = [3, 1, 1, 2, 1, 2]\n    print count_positive_numbers(list)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "#!/usr/bin/python\n\n#\n# Count the positive numbers in a list\n#\n# Input: A list\n# Output: The number of positive numbers in the list\n#\n\ndef count_positive_numbers(lst):\n    #\n    # Count the number of positive numbers in the list\n    #\n    pos = 0\n    for num in lst:\n        if num > 0:\n            pos += 1\n    return pos\n\n#\n# Test cases\n#\n\ntest_cases = [\n    [ [ 1, 0, -1, -2, 3 ], 4 ],\n    [ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 4 ],\n    [ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: omi\n# @Date:   2017-03-31 13:42:35\n# @Last Modified by:   omi\n# @Last Modified time: 2017-04-08 09:30:35\n\nclass Solution(object):\n    def countNumbersWithUniqueDigits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # if dp[i][j] > 10**9:\n        #     return 0\n        dp = [[0] * 10 for _ in range(n + 1)]\n        # dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, 10):\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n        return dp[n][0]"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# write your code here\n\ndef count_pos(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    for num in l:\n        if num > 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    # your code here\n    l = [1, 2, 3, 4, -5, 6, -7, 8, 9]\n    print(count_pos(l))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def count_positive(list):\n    \"\"\"\n    >>> count_positive([1, 2, 3, 4, 5, 6])\n    2\n    >>> count_positive([-1, -2, -3, -4, -5, -6])\n    1\n    >>> count_positive([-1, 0, 1, 2, 3, 4])\n    3\n    >>> count_positive([0, 1, 2, 3, 4, 5])\n    1\n    >>> count_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    2\n    \"\"\"\n    return sum(1 for i in list if i > 0)\n\n\ndef main():\n    \"\"\"\n    Write a function that counts the number of positive numbers in a list.\n    \"\"\"\n    print(count_positive([1, 2, 3, 4, 5, 6]))\n    print(count_positive([-1, 0, 1, 2, 3, 4]))\n    print(count_positive([0, 1, 2, 3, 4, 5]))\n    print(count_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def positive_number_count(numbers):\n    \"\"\"\n    Write a function that counts the number of positive numbers in a list.\n\n    The function should return an integer.\n\n    Arguments:\n    numbers -- a list of integers.\n\n    Returns:\n    An integer that is the number of positive numbers in the list.\n    \"\"\"\n    return sum(numbers) - len(filter(lambda x: x <= 0, numbers))\n\n\nif __name__ == \"__main__\":\n    numbers = [3, 5, 1, 7, 2, -2, 1]\n    assert positive_number_count(numbers) == 5"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def count_positive_numbers(numbers):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n\n    :param numbers: List of numbers\n    :return: The number of positive numbers in the list\n    \"\"\"\n    total = 0\n    for number in numbers:\n        if number > 0:\n            total += 1\n    return total\n\n# Test Cases\ntest_cases = [\n    ([1, 2, 3, 4, 5], 5),\n    ([-1, 2, -3, 4, 5], 2),\n    ([2, -3, 4, 5], 2)\n]\n\n# Test Cases\nfor test_case in test_cases:\n    result = count_positive_numbers(test_case[0])\n    print(result)"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def count_positive_numbers_in_list(list_of_numbers):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n\n    :param list_of_numbers: A list of numbers.\n    :type list_of_numbers: List[int]\n    :return: The number of positive numbers in the list.\n    :rtype: int\n    \"\"\"\n    return sum(1 for num in list_of_numbers if num > 0)\n\n\n\nprint(count_positive_numbers_in_list([1, -3, 4, -2, -1, 1, 2, 3]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# +++your code here+++\n# Write output as a list of numbers.\n# Assume that the numbers are stored in a list.\n\ndef positive_numbers(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count\n\n\n# Wrote it as a function\ndef positive_numbers2(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count\n\n\n# +++your code here+++\n# Write a function that takes an int as input and returns a list of strings\n# of length 4 with the first and last elements equal to the input.\n\ndef string_list(num):\n    return [str(num), str(num)]\n\n\n# Wrote it as a function\ndef string_list2(num):\n    return [str(num), str(num)]\n\n\n# +++your code here+++\n# Write a function that takes an int as input and returns a list of strings\n# of length 4 with the first and last elements equal to the input.\n\ndef string_list3(num):\n    return [str(num), str(num), str(num), str(num)]\n\n\n# Wrote it as a function\ndef string_list4(num):\n    return [str(num), str(num), str(num), str(num)]\n\n\n# +++your code here+++\n# Write a function that takes a list of strings as input and returns a list of strings\n# of length 4 with the first and last elements equal to the input.\n\ndef string_list5(numbers):\n    return [str(num) for num in numbers]\n\n\n# Wrote it as a function\ndef string_list6(numbers):\n    return [str(num) for num in numbers]\n\n\n# +++your code here+++\n# Write a function that takes a list of strings as input and returns a list of strings\n# of length 4 with the first and last elements equal to the input.\n\ndef string_list7(numbers):\n    return [str(num) for num in numbers]\n\n\n# Wrote it as a function\ndef string_list8(numbers):\n    return [str(num) for"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def count_positive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(1 for number in numbers if number > 0)\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, -7, -8, -9]\n    assert count_positive_numbers(numbers) == 6"
    }
  ]
}