{
  "timestamp": "2025-09-14T17:59:14.391871",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 84,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def findMin(a):\n    # write your code here\n    return a[0]\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(findMin(a))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def minSubListLen(self, head: ListNode, k: int) -> int:\n        if not head:\n            return 0\n        if not head.next:\n            return 1\n        # The problem is that we need to know the length of the sublist\n        # which is the same as the length of the entire list.\n        # So we need to traverse the entire list and find the minimum length\n        # of the sublist.\n        # The length of the sublist is the length of the original list minus\n        # the length of the first and last nodes.\n        # Note: We are using the convention that the first node is head.\n        # So if we only have one node, we return 1.\n        # If we have two nodes, we return 2.\n        # If we have more than two nodes, we return the minimum length of the\n        # sublist of the first two nodes.\n        # So we need to traverse the entire list from the first node to the\n        # last node.\n        # If the length of the list is more than k, we need to traverse the\n        # list from the last node to the first node.\n        # If the length of the list is less than k, we just traverse the list\n        # from the first node to the last node.\n        # So we first traverse the list from the first node to the last node,\n        # then from the last node to the first node.\n        # If the length of the list is less than k, then we traverse the list\n        # from the first node to the last node.\n        # If the length of the list is more than k, then we traverse the list\n        # from the last node to the first node.\n        length = 0\n        curr_node = head\n        while curr_node:\n            curr_node = curr_node.next\n            length += 1\n        if length < k:\n            return length + 1\n        else:\n            return 1"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def min_length_of_sublist(arr):\n    \"\"\"\n    Input: arr is a list of integers.\n    Output: return the minimum length of sublist.\n    \"\"\"\n    if not arr:\n        return 0\n    elif len(arr) == 1:\n        return 1\n    else:\n        return min(map(lambda x: min_length_of_sublist(arr[x:]), range(1, len(arr))))\n\n\nprint min_length_of_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nprint min_length_of_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nprint min_length_of_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\nprint min_length_of_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def findMin(aList):\n    return min(aList)\n\ndef findMin(aList):\n    return min(aList)\n\n\"\"\"\nPrint the output\n\"\"\"\nprint findMin([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def min_sublist_length(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    min_length = len(list)\n    for i in range(1, min_length):\n        min_length = min(min_length, len(list[:i]) + len(list[i:]))\n    return min_length\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    print(min_sublist_length(l))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def min_sublist(s, t):\n    \"\"\"\n    :type s: List[int]\n    :type t: List[int]\n    :rtype: int\n    \"\"\"\n    return min(min_sublist(s, t[:i]) for i in range(len(t) + 1))\n\n\nif __name__ == \"__main__\":\n    s = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    t = [1, 3, 5, 7, 9]\n    print(min_sublist(s, t))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "#!/bin/python\n\ndef min_length_sublist(arr, start, end):\n    if start == end:\n        return 0\n    mid = (start + end) / 2\n    if arr[mid] < arr[end]:\n        return min_length_sublist(arr, start, mid)\n    elif arr[mid] > arr[end]:\n        return min_length_sublist(arr, mid+1, end)\n    else:\n        return min_length_sublist(arr, start, mid) + 1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint min_length_sublist(arr, 0, len(arr)-1)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import unittest\n\ndef find_min_sublist(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return 1\n    if n == 2:\n        return min(nums[0], nums[1])\n    if n == 3:\n        return min(nums[0], min(nums[1], nums[2]))\n    if n == 4:\n        return min(nums[0], min(nums[1], min(nums[2], nums[3])))\n\n    if n > 4:\n        for i in range(n-3, -1, -1):\n            if nums[i] < nums[i+1]:\n                return i+1\n        return n\n\n    return n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 4)\n        self.assertEqual(find_min_sublist([2, 3, 4, 5, 6, 7, 8, 9, 10]), 3)\n        self.assertEqual(find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 4)\n        self.assertEqual(find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 4)\n        self.assertEqual(find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 4)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def minSubListLen(arr):\n    \"\"\"\n    Input: arr = [1, 2, 3, 4, 5]\n    Output: minSubListLen(arr) = 3\n    \"\"\"\n    # A solution to this problem is given below.\n    #\n    # def minSubListLen(arr):\n    #     \"\"\"\n    #     Input: arr = [1, 2, 3, 4, 5]\n    #     Output: minSubListLen(arr) = 3\n    #     \"\"\"\n    #     # This is a recursive function.\n    #     #\n    #     # If the length of the sublist is less than the length of the list,\n    #     # then return the length of the sublist.\n    #     #\n    #     # Otherwise, return the length of the sublist + 1.\n    #     #\n    #     # Note:\n    #     #\n    #     #     arr[0] is the first element in the list,\n    #     #     arr[n] is the last element in the list.\n    #     #\n    #     def minSubListLen(arr):\n    #         if len(arr) <= 1:\n    #             return len(arr)\n    #         else:\n    #             return min(minSubListLen(arr[1:]),\n    #                        minSubListLen(arr[:-1])) + 1\n    #\n    #     return minSubListLen(arr)\n    #\n    # print(minSubListLen([1, 2, 3, 4, 5]))\n    # print(minSubListLen([1, 2, 3, 4, 5, 6]))\n    # print(minSubListLen([1, 2, 3, 4, 5, 6, 7]))\n    # print(minSubListLen([1, 2, 3, 4, 5, 6, 7, 8]))\n    # print(minSubListLen([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n    # A solution to this problem is given below.\n    #\n    # def minSubListLen(arr):\n    #     \"\"\"\n    #     Input: arr = [1, 2, 3, 4, 5]"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def min_length(list_1, list_2):\n    \"\"\"\n    :type list_1: List[int]\n    :type list_2: List[int]\n    :rtype: int\n    \"\"\"\n    return min(len(list_1), len(list_2))\n\nif __name__ == \"__main__\":\n    assert min_length([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) == 3"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def min_length_sublist(list_of_list):\n    \"\"\"\n    list_of_list: a list of list\n    return: the minimum length of sublist\n    \"\"\"\n    if len(list_of_list) < 2:\n        return len(list_of_list[0])\n    else:\n        return min(min_length_sublist(sublist) for sublist in list_of_list[1:])\n\nif __name__ == \"__main__\":\n    list_of_list = [[1,2,3], [4,5,6], [7,8,9]]\n    print(min_length_sublist(list_of_list))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def min_length(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: min length of sublist\n    \"\"\"\n    min_len = len(arr)\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                min_len = min(min_len, j - i + 1)\n    return min_len\n\n\nif __name__ == '__main__':\n    print(min_length([4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim: set ts=4 sw=4 et sts=4 ai:\n\nfrom __future__ import print_function\nfrom functools import reduce\n\ndef min_length(nums):\n    \"\"\"\n    >>> min_length([1, 2, 3, 4, 5, 6, 7])\n    4\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8])\n    5\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    6\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    7\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    8\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    9\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    10\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    11\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    12\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    13\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    14\n    >>> min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    15\n    >>> min_length([1, 2, 3, 4, 5, 6, 7,"
    },
    {
      "rank": 14,
      "score": 9.965305515283529,
      "candidate": "def min_length(nums):\n    \"\"\"\n    Write a function min_length that takes a list of integers as input and\n    returns the minimum length of the sublist.\n    \"\"\"\n    return min([len(sublist) for sublist in nums])\n\ndef main():\n    nums = [1,2,3,4,5]\n    print(\"min_length(nums) =\", min_length(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 9.958520709648644,
      "candidate": "# https://www.hackerrank.com/challenges/find-the-minimum-length-of-sublist/problem\ndef find_min(arr):\n    \"\"\"\n    :param arr: The given list of numbers\n    :return: The minimum length of sublist\n    \"\"\"\n    # base case\n    if len(arr) == 1:\n        return 1\n    # recursive case\n    else:\n        return min(find_min(arr[:i] + arr[i+1:]) for i in range(len(arr) - 1)) + 1\n\n\nif __name__ == '__main__':\n    # input\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # output\n    print(find_min(arr))"
    },
    {
      "rank": 16,
      "score": 9.929758912915245,
      "candidate": "def min_length_sublist(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: int\n    \"\"\"\n    def find_min_length(start, end, length):\n        if start >= end:\n            return length\n        mid = (start + end) / 2\n        if A[mid - 1] < A[mid]:\n            return find_min_length(start, mid - 1, length + 1)\n        else:\n            return find_min_length(mid + 1, end, length + 1)\n    return find_min_length(0, len(A) - 1, 0)"
    },
    {
      "rank": 17,
      "score": 9.929623859987457,
      "candidate": "def findMinLength(list_of_nums):\n    \"\"\"\n    :type list_of_nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(list_of_nums) <= 0:\n        return 0\n    else:\n        return min(findMinLength(list_of_nums[:i+1]) for i in range(len(list_of_nums)-1)) + 1\n\nif __name__ == '__main__':\n    assert(findMinLength([1,2,3,4,5,6,7,8,9,10]) == 3)\n    assert(findMinLength([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,"
    },
    {
      "rank": 18,
      "score": 9.912491875062017,
      "candidate": "def findMin(nums):\n    minLen = len(nums)\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if j > i and nums[i] > nums[j]:\n                minLen = min(minLen, j - i + 1)\n    return minLen\n\nif __name__ == '__main__':\n    nums = [2, 6, 7, 11, 15]\n    print findMin(nums)\n    nums = [2, 6, 7, 8, 9, 10]\n    print findMin(nums)\n    nums = [1, 2, 3, 4, 5]\n    print findMin(nums)"
    },
    {
      "rank": 19,
      "score": 9.909668891323212,
      "candidate": "#!/usr/bin/env python\n\ndef min_sublist(data, n):\n    \"\"\"\n    :type data: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return min(len(x) for x in data[:n])\n\nif __name__ == \"__main__\":\n    print(min_sublist([1, 2, 3, 4], 3))"
    },
    {
      "rank": 20,
      "score": 9.861808368712063,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a integer\n    def lengthOfSubList(self, head):\n        if not head:\n            return 0\n        if not head.next:\n            return 1\n        curr = head\n        min_len = 1\n        while curr.next:\n            curr = curr.next\n            min_len += 1\n        return min_len\n\n\n\nif __name__ == '__main__':\n    l1 = ListNode(1)\n    l2 = ListNode(2)\n    l3 = ListNode(3)\n    l4 = ListNode(4)\n    l1.next = l2\n    l2.next = l3\n    l3.next = l4\n    l4.next = None\n\n    print Solution().lengthOfSubList(l1)"
    },
    {
      "rank": 21,
      "score": 9.856247728646412,
      "candidate": "def min_length_sublist(data):\n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n    return min(map(len,data))\n\nif __name__ == '__main__':\n    data = [1,2,3,4,5,6]\n    print(min_length_sublist(data))"
    },
    {
      "rank": 22,
      "score": 9.836685182642444,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def findMin(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        \n        min = head.val\n        min_head = head\n        while head.next:\n            if head.next.val < min:\n                min = head.next.val\n                min_head = head.next\n            head = head.next\n        return min"
    },
    {
      "rank": 23,
      "score": 9.831313741227708,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def minSubArrayLen(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        min_len = k\n        min_val = 0\n        if nums:\n            n = len(nums)\n            for i in xrange(n):\n                if nums[i] > min_val:\n                    min_val = nums[i]\n                    min_len = 1\n                elif nums[i] == min_val:\n                    min_len += 1\n            return min_len\n        else:\n            return 0\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    # print(sol.minSubArrayLen([-2, -3, 4, -1, -2, 1, -5], 2))\n    print(sol.minSubArrayLen([-2, -3, 4, -1, -2, 1, -5], 3))"
    },
    {
      "rank": 24,
      "score": 9.819808393024358,
      "candidate": "def find_min(data):\n    \"\"\"\n    Find the minimum length of sublist.\n    \"\"\"\n    if len(data) == 1:\n        return 1\n    else:\n        return find_min(data[1:]) + 1\n\n\nif __name__ == '__main__':\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print find_min(data)"
    },
    {
      "rank": 25,
      "score": 9.796923399908213,
      "candidate": "def min_sublist(arr):\n    \"\"\"\n    :param arr: A list of integers\n    :return: The minimum length of sublist.\n    \"\"\"\n    return min(len(arr)-1, min_sublist(arr[1:]))"
    },
    {
      "rank": 26,
      "score": 9.757451919132043,
      "candidate": "import time\nstart_time = time.time()\n\ndef min_length(nums):\n    min_length = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                min_length = min(min_length, j-i)\n    return min_length\n\nprint(min_length([1,2,3,4,5,6,7,8,9,10]))\n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))"
    },
    {
      "rank": 27,
      "score": 9.748234743033208,
      "candidate": "def min_sublist(arr):\n    \"\"\"\n    For a given array arr, return the minimum length of sublist.\n    \"\"\"\n    return arr[0]\n    \n\ndef main():\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(min_sublist(arr))\n    print(min_sublist_recursive(arr))\n    \n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 9.601544185330471,
      "candidate": "def min_sublist(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(list)\n\ndef min_sublist2(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(map(len, list))\n\ndef min_sublist3(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(map(len, list))\n\ndef min_sublist4(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(map(len, list))\n\ndef min_sublist5(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(map(len, list))\n\ndef min_sublist6(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(map(len, list))\n\ndef min_sublist7(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(map(len, list))\n\ndef min_sublist8(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(map(len, list))\n\ndef min_sublist9(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(map(len, list))\n\ndef min_sublist10(list):\n    \"\"\"\n    Input: list is a list of integers.\n    Output: returns the minimum length of sublist\n    \"\"\"\n    return min(map(len, list))\n\ndef min_sublist11(list):\n    \"\"\"\n    Input:"
    },
    {
      "rank": 29,
      "score": 9.42601592660266,
      "candidate": "def minSubList(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) < len(b):\n        return minSubList(b, a)\n    else:\n        return min(map(lambda x: minSubList(a, b[:x]), range(len(b) + 1)))\n\n\"\"\"\nTest cases.\n\"\"\"\na = [1, 2, 3, 4, 5, 6]\nb = [2, 3, 4, 5]\nprint minSubList(a, b)"
    },
    {
      "rank": 30,
      "score": 9.296492409318557,
      "candidate": "def findMinLength(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) <= 1:\n        return len(arr)\n\n    arr = sorted(arr)\n    l = 1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            l = i + 1\n    return l\n\n\nif __name__ == \"__main__\":\n    print(findMinLength([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(findMinLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 31,
      "score": 9.214076468773076,
      "candidate": "class Solution(object):\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        result = 0\n        min_length = 0\n        for i in xrange(len(nums)):\n            if nums[i] == 0:\n                continue\n            while nums[i] > 0:\n                min_length += 1\n                nums[i] -= 1\n                result = max(result, min_length)\n        return result"
    },
    {
      "rank": 32,
      "score": 9.170882339577844,
      "candidate": "def minSubListLen(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    return min(map(len,arr))"
    },
    {
      "rank": 33,
      "score": 9.164180526118887,
      "candidate": "def min_length(lst):\n    \"\"\"\n    :param lst: list\n    :return: int\n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        result = 0\n        for i in range(len(lst)):\n            if i == 0:\n                result = 1\n            else:\n                result += min(lst[i-1], lst[i])\n        return result\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5]\n    print min_length(lst)"
    },
    {
      "rank": 34,
      "score": 9.15194126501879,
      "candidate": "def min_sublist(list):\n    if len(list) == 1:\n        return list[0]\n    else:\n        return min(min_sublist(list[:i+1]) for i in range(len(list)-1))\n\n\nif __name__ == '__main__':\n    assert min_sublist([1, 2, 3, 4]) == 2\n    assert min_sublist([1, 2, 3, 4, 5]) == 3"
    },
    {
      "rank": 35,
      "score": 9.145038178392136,
      "candidate": "def min_length_sublist(s, l, r):\n    \"\"\"\n    Find the minimum length of sublist.\n\n    Input:\n    s: a string\n    l: start index\n    r: end index\n\n    Output:\n    minimum length of sublist\n    \"\"\"\n    if r-l == 1:\n        return 1\n    m = min(min_length_sublist(s, l, r-1), min_length_sublist(s, l+1, r))\n    return m\n\ndef main():\n    s = 'abcabcabc'\n    print min_length_sublist(s, 0, len(s)-1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.906069577474776,
      "candidate": "#!/usr/bin/env python\n\n# I worked on this challenge:\n# This challenge was inspired by the [link](http://codepen.io/dhulvani/pen/rpZb).\n# The challenge took me [1.5 hours](http://codepen.io/dhulvani/pen/rpZb) to complete.\n# There are [3 links](http://codepen.io/dhulvani/pen/rpZb) to help you prepare for the [following](http://codepen.io/dhulvani/pen/rpZb) challenge.\n# There is a [video tutorial](http://codepen.io/dhulvani/tutorial/get-started) that shows how to use\n# [Python](http://python.org/) to solve this challenge.\n# Additionally, see the [README.md](https://github.com/dhulvani/readme/blob/master/README.md)\n# for links to the source files and tutorials for this challenge.\n\n# Import the \"functions\" module from the \"functions\" folder.\nfrom functions import *\n\n# Minimum Length of Sublist\n# ------------------------------------------------------------------------------\n# The function below takes a list and returns the minimum length of the sublist.\n# It is assumed that the sublist is in the list.\ndef get_min(list):\n    # This is a function that takes a list and returns the minimum length of the sublist.\n    # It is assumed that the sublist is in the list.\n    return min(map(lambda x:len(x)-1, list))\n\n\n# Solve the problem\n# ------------------------------------------------------------------------------\n# Once you have completed the functions in this challenge,\n# uncomment this line of code to solve the problem:\n\n# get_min(list)\n\n# ------------------------------------------------------------------------------\n# To test your solution, run the following line of code:\n# list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n# print get_min(list)\n# ------------------------------------------------------------------------------\n# Your code should print:\n# 4"
    },
    {
      "rank": 37,
      "score": 8.822519596457047,
      "candidate": "def minSublistLength(L):\n    \"\"\"\n    L is a list of integers.\n    Return the minimum length of sublist.\n    \"\"\"\n    return min([len(list(group)) for group in groupby(L)])\n\nprint(minSublistLength([1, 2, 3, 4, 5]))\nprint(minSublistLength([1, 2, 3, 4, 5, 6]))\nprint(minSublistLength([1, 2, 3, 4, 5, 6, 7]))\nprint(minSublistLength([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(minSublistLength([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(minSublistLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 38,
      "score": 8.818206322745775,
      "candidate": "def find_min_length(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: int\n    \"\"\"\n    if not l:\n        return 0\n    left_l = find_min_length(l[:len(l)//2])\n    right_l = find_min_length(l[len(l)//2:])\n    return 1 + min(left_l, right_l)\n\n\nif __name__ == '__main__':\n    print(find_min_length([1, 2, 3, 4]))"
    },
    {
      "rank": 39,
      "score": 8.725815537311243,
      "candidate": "#!/usr/bin/python\n\ndef minSub(arr):\n    # The idea is to find the minimum number of elements to be removed from the array to make the\n    # array of length of N to be a sublist of the original array.\n    # In this case, the minimum number of elements is the minimum number of elements to be removed\n    # to make the array to be a sublist of the original array.\n    # Here, the array is sorted.\n    # So, we can do the following.\n    # If the array is already a sublist of the original array, then we can return the minimum number of elements to be removed\n    # to make the array to be a sublist of the original array.\n    # If the array is not a sublist of the original array, then we have to find the minimum number of elements to be removed\n    # to make the array to be a sublist of the original array.\n    # We can do this by comparing the first and last element of the array with the first and last elements of the original array.\n    # If the first element of the array is greater than the first element of the original array,\n    # then we have to remove the first element of the array to make the array to be a sublist of the original array.\n    # If the first element of the array is less than the first element of the original array,\n    # then we have to remove the last element of the array to make the array to be a sublist of the original array.\n    # We can also do this by comparing the last element of the array with the last element of the original array.\n    # If the last element of the array is greater than the last element of the original array,\n    # then we have to remove the last element of the array to make the array to be a sublist of the original array.\n    # If the last element of the array is less than the last element of the original array,\n    # then we have to remove the first element of the array to make the array to be a sublist of the original array.\n    # We can do this by comparing the first and last element of the array with the first and last elements of the original array.\n    # If the first element of the array is greater than the first element of the original array,\n    # then we have to remove"
    },
    {
      "rank": 40,
      "score": 8.69402206449399,
      "candidate": "def minSubList(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    def min_len(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n > 2:\n            return min_len(n-1) + min_len(n-2)\n    return min_len(n)\n\n\nif __name__ == '__main__':\n    print(minSubList([1,2,3,4]))\n    print(minSubList([1,2,3]))\n    print(minSubList([1,2,3,4,5,6,7,8,9]))\n    print(minSubList([1,2,3,4,5]))\n    print(minSubList([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 41,
      "score": 8.680547463676588,
      "candidate": "def find_min_length(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    if not list_:\n        return 0\n\n    min_length = len(list_)\n    for i in range(min_length - 1):\n        for j in range(i + 1, min_length):\n            if list_[i] > list_[j]:\n                min_length = j\n    return min_length\n\n\nif __name__ == '__main__':\n    l = [1, 3, 2, 5, 4, 3, 3, 2, 1, 4, 4, 2, 1, 3, 3]\n    print(find_min_length(l))"
    },
    {
      "rank": 42,
      "score": 8.617265532883454,
      "candidate": "def find_min(lst):\n    \"\"\"\n    Find the minimum length of sublist.\n    :param lst: list\n    :return: int\n    \"\"\"\n    min_len = len(lst)\n    for i in range(1, min_len):\n        for j in range(i):\n            if lst[i] < lst[j]:\n                min_len = j\n    return min_len\n\n\nif __name__ == '__main__':\n    print(find_min([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 43,
      "score": 8.610686422978315,
      "candidate": "# https://www.youtube.com/watch?v=jgUgwZKqXEk\ndef min_length_of_sublist(arr):\n    \"\"\"\n    :param arr: List\n    :return: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    length = len(arr)\n    minimum_length = length\n    for i in range(length):\n        for j in range(i+1, length):\n            if arr[i] > arr[j]:\n                minimum_length = min(minimum_length, j-i+1)\n\n    return minimum_length"
    },
    {
      "rank": 44,
      "score": 8.608716227339848,
      "candidate": "def find_min_len(arr):\n    \"\"\"\n    :param arr: list of int\n    :return: min len of sublist\n    \"\"\"\n    min_len = len(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                min_len = min(min_len, j-i)\n    return min_len\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(find_min_len(arr))"
    },
    {
      "rank": 45,
      "score": 8.59352307036605,
      "candidate": "import sys\nsys.path.append('..')\n\nfrom utils import *\n\ndef min_length_sublist(L):\n    \"\"\"\n    Return the minimum length of sublist\n    \"\"\"\n    if L == 0:\n        return 1\n\n    return min_length_sublist(L - 1) + 1\n\ndef test_min_length_sublist():\n    assert min_length_sublist([1, 2, 3, 4, 5]) == 4\n    assert min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n    assert min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 5\n    assert min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 5\n    assert min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 5\n    assert min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5\n\nif __name__ == '__main__':\n    test_min_length_sublist()"
    },
    {
      "rank": 46,
      "score": 8.58899821743827,
      "candidate": "def min_sublist_len(arr):\n    \"\"\"\n    :param arr: A list of integers\n    :return: The minimum length of sublist.\n    \"\"\"\n    # Write your code here\n    if len(arr) == 0:\n        return 0\n\n    if len(arr) == 1:\n        return 1\n\n    min_length = len(arr[0])\n\n    for i in range(len(arr) - 1):\n        if min_length > len(arr[i + 1]):\n            min_length = len(arr[i + 1])\n\n    return min_length"
    },
    {
      "rank": 47,
      "score": 8.58065977189415,
      "candidate": "def min_sublist(nums):\n    \"\"\"\n    nums is a list of integers.\n    return the minimum length of sublist.\n    \"\"\"\n    if not nums:\n        return 0\n    min_len = len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                min_len = min(min_len, j - i + 1)\n    return min_len\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4]\n    print min_sublist(nums)"
    },
    {
      "rank": 48,
      "score": 8.540521698146632,
      "candidate": "def min_length(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: minimum length of sublist\n    \"\"\"\n    if not arr:\n        return 0\n    min_length = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            min_length = min(min_length, i)\n    return min_length\n\nif __name__ == '__main__':\n    print(min_length([1, 3, 4, 3, 2, 5, 4]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(min_length([3, 2, 5, 4, 3, 6, 7, 8, 9, 10]))\n    print(min_length([1, 3, 4, 5, 3, 2, 5, 4, 3, 2, 5, 4]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))"
    },
    {
      "rank": 49,
      "score": 8.535000612944241,
      "candidate": "def min_sublist_length(arr):\n    \"\"\"\n    arr is a list of numbers\n    return the minimum length of sublist\n    \"\"\"\n    if not arr:\n        return 0\n\n    min_len = 0\n    for i in range(len(arr)):\n        min_len = max(min_len, 1 + min_sublist_length(arr[:i+1]))\n\n    return min_len\n\nprint(min_sublist_length([1, 2, 3, 4, 5]))\nprint(min_sublist_length([1, 2, 3]))\nprint(min_sublist_length([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 50,
      "score": 8.523273853791832,
      "candidate": "def find_min_length_of_sublist(list_):\n    \"\"\"\n    Input:\n        list_: a list of integers\n\n    Output:\n        the minimum length of sublist\n    \"\"\"\n    # write your code here\n    return min(map(lambda x: len(list_[x:]), list_))\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    n = int(input())\n    list_ = [int(x) for x in input().split()]\n    print(find_min_length_of_sublist(list_))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.486654401650776,
      "candidate": "def min_sublist(arr):\n    if not arr:\n        return 0\n    sublist_length = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] < arr[j]:\n                sublist_length = max(sublist_length, j - i)\n    return sublist_length"
    },
    {
      "rank": 52,
      "score": 8.484486095834004,
      "candidate": "def minSubList(list):\n    if len(list) == 1:\n        return 1\n    length = len(list)\n    min = 1\n    for i in range(1, length):\n        if list[i] < list[i-1]:\n            min = i\n    return min\n\nprint(minSubList([3,2,1]))\nprint(minSubList([1,2,3]))\nprint(minSubList([1,2,3,4,5]))\nprint(minSubList([1,2,3,4,5,6,7]))"
    },
    {
      "rank": 53,
      "score": 8.438235721064995,
      "candidate": "def min_sublist_len(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n\n    lst.sort()\n    min_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            continue\n        else:\n            min_length = min(min_length, i-lst[i-1]+1)\n    return min_length\n\n\ndef main():\n    lst = [1,2,3,4,5,6,7,8,9]\n    print(min_sublist_len(lst))\n\n    lst = [1,2,3,4,5,6,7,8,9]\n    print(min_sublist_len(lst))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 8.427964466453867,
      "candidate": "def min_sublist(list_):\n    if not list_:\n        return 0\n\n    minimum_length = len(list_[0])\n    for i in range(1, len(list_)):\n        if len(list_[i]) < minimum_length:\n            minimum_length = len(list_[i])\n\n    return minimum_length\n\n\nif __name__ == '__main__':\n    assert min_sublist([1, 2, 3, 4]) == 2\n    assert min_sublist([1, 2, 3]) == 2\n    assert min_sublist([1, 2, 3, 4, 5, 6]) == 3"
    },
    {
      "rank": 55,
      "score": 8.411319788517492,
      "candidate": "def min_len_sublist(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    min_len = len(list_)\n    for i in range(1, len(list_)):\n        if len(list_[i:]) < min_len:\n            min_len = len(list_[i:])\n    return min_len\n\nif __name__ == '__main__':\n    assert min_len_sublist([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3"
    },
    {
      "rank": 56,
      "score": 8.35904131517909,
      "candidate": "def min_length_sublist(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    if not list:\n        return 0\n\n    min_length = len(list)\n    for i in range(len(list) - 1):\n        if len(list[i + 1:]) < min_length:\n            min_length = len(list[i + 1:])\n\n    return min_length\n\nif __name__ == '__main__':\n    assert min_length_sublist([1,2,3,4,5]) == 3\n    assert min_length_sublist([1,2,3,4,5,6]) == 4\n    assert min_length_sublist([1,2,3,4,5,6,7]) == 5"
    },
    {
      "rank": 57,
      "score": 8.343395376039188,
      "candidate": "def find_min(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return min(find_min(nums[:n//2]), find_min(nums[n//2:]) + 1)\n\n\nprint(find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 58,
      "score": 8.340587346220639,
      "candidate": "def min_sublist_length(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i, n):\n            if arr[i] > arr[j]:\n                dp[i] = min(dp[i], dp[j])\n    return dp[0]\n\n\nif __name__ == '__main__':\n    assert min_sublist_length([1, 2, 3]) == 2\n    assert min_sublist_length([1, 2, 3, 4]) == 3\n    assert min_sublist_length([1, 2, 3, 4, 5]) == 4\n    assert min_sublist_length([1, 2, 3, 4, 5, 6]) == 5\n    assert min_sublist_length([1, 2, 3, 4, 5, 6, 7]) == 6\n    assert min_sublist_length([1, 2, 3, 4, 5, 6, 7, 8]) == 7"
    },
    {
      "rank": 59,
      "score": 8.306901063230146,
      "candidate": "class Solution:\n    # @param nums, a list of integers\n    # @return an integer\n    def minSubArrayLen(self, nums):\n        if not nums:\n            return 0\n        min_sub_len = len(nums)\n        max_len = len(nums)\n        max_num = max(nums)\n        # print(nums)\n        # print(max_len)\n        for i in range(max_len):\n            for j in range(i+1, max_len):\n                # print(i,j)\n                if nums[i] < nums[j]:\n                    if nums[i]+nums[j] <= max_num:\n                        min_sub_len = min(min_sub_len, j-i+1)\n            if min_sub_len == max_len:\n                break\n        return min_sub_len\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1,3,-1,-3,5,3,6,7]\n    print(s.minSubArrayLen(nums))\n    nums = [1]\n    print(s.minSubArrayLen(nums))\n    nums = [-1]\n    print(s.minSubArrayLen(nums))\n    nums = [0,1,2,3,4,5,6,7,8,9]\n    print(s.minSubArrayLen(nums))\n    nums = [1,1,1,1,1,1,1,1,1,1]\n    print(s.minSubArrayLen(nums))\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(s.minSubArrayLen(nums))\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(s.minSubArrayLen(nums))\n    nums = [1,1,1,1,1,1,1,1,1,1]\n    print(s.minSubArrayLen(nums))"
    },
    {
      "rank": 60,
      "score": 8.302206751552886,
      "candidate": "def min_length_of_sublist(list):\n    if len(list) <= 1:\n        return len(list)\n    else:\n        return min(min_length_of_sublist(sublist) for sublist in list[1:])\n\n# Test Cases\nassert(min_length_of_sublist([1, 2, 3]) == 3)\nassert(min_length_of_sublist([1, 2, 3, 4, 5]) == 2)\nassert(min_length_of_sublist([1, 2, 3, 4, 5, 6, 7, 8]) == 3)\nassert(min_length_of_sublist([1, 2, 3, 4, 5, 6]) == 2)\nassert(min_length_of_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3)\nassert(min_length_of_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4)\nassert(min_length_of_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5)\nassert(min_length_of_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 6)"
    },
    {
      "rank": 61,
      "score": 8.231272305750712,
      "candidate": "def findMinLength(sublist):\n    \"\"\"\n    :type sublist: List[int]\n    :rtype: int\n    \"\"\"\n    return min(len(sublist), len(sublist) + 1)\n\n\nif __name__ == '__main__':\n    print(findMinLength([1, 2, 3, 4, 5]))\n    print(findMinLength([1, 2, 3]))\n    print(findMinLength([1, 2, 3, 4, 5, 6]))\n    print(findMinLength([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 62,
      "score": 8.230208757802126,
      "candidate": "def min_sublist(s):\n    # write your code here\n    m = len(s)\n    n = len(s[0])\n    if n == 1:\n        return 1\n    for i in range(m):\n        if i == 0:\n            for j in range(n):\n                if s[i][j] == s[0][j]:\n                    return j + 1\n        else:\n            for j in range(n):\n                if s[i][j] == s[i - 1][j]:\n                    return j + 1\n    return 0\n\ndef test():\n    s = [\"a\", \"aa\", \"b\", \"bbb\", \"c\", \"ccc\", \"d\", \"dddd\"]\n    assert min_sublist(s) == 3\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 63,
      "score": 8.228486226914367,
      "candidate": "def min_length_sublist(arr):\n    \"\"\"\n    Write a function called min_length_sublist that takes as input a list of\n    integers arr and returns the length of the smallest sublist.\n    \"\"\"\n\n    def min_sublist(arr, start, end):\n        if start == end:\n            return 0\n        mid = (start + end) / 2\n        return min(min_sublist(arr, start, mid), min_sublist(arr, mid+1, end))\n\n    return min_sublist(arr, 0, len(arr)-1)\n\nprint(min_length_sublist([1, 2, 3, 4, 5, 6, 7]))\nprint(min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 64,
      "score": 8.213636204395558,
      "candidate": "def min(a):\n    if len(a) == 0:\n        return 0\n\n    if len(a) == 1:\n        return 1\n\n    if len(a) == 2:\n        return min(a[0], a[1])\n\n    return min(min(a[0:i] + a[i+1:]) for i in range(len(a) - 1))\n\n\ndef main():\n    a = [1, 2, 3, 4, 5]\n    print min(a)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.206040144038568,
      "candidate": "def min_length_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    # Use binary search to find the smallest element in arr.\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if arr[mid] < arr[low]:\n            low = mid + 1\n        elif arr[mid] > arr[low]:\n            high = mid - 1\n        else:\n            return mid + 1\n\n    # If low is equal to high, there is no element smaller than arr[low].\n    return low\n\nif __name__ == \"__main__\":\n    print(min_length_sublist([1, 2, 3, 4, 5]))\n    print(min_length_sublist([1, 2, 3, 4]))\n    print(min_length_sublist([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 66,
      "score": 8.200754750711607,
      "candidate": "def min_length(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return min(map(len, arr))\n\n\nif __name__ == '__main__':\n    print(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))"
    },
    {
      "rank": 67,
      "score": 8.167659402818922,
      "candidate": "def minSubList(list, k):\n    \"\"\"\n    Input: list is a list of integers, and k is the size of sublist.\n    Output: the minimum length of sublist.\n    \"\"\"\n    if len(list) == 0:\n        return 0\n    if len(list) == 1:\n        return 1\n    if k > len(list):\n        return len(list)\n\n    # find the last element\n    last_index = len(list) - 1\n    for i in range(0, last_index):\n        if list[i] == list[i+1]:\n            last_index = i\n            break\n    # if there are no equal elements, then the last_index is the size of the sublist\n    if last_index == len(list) - 1:\n        return len(list)\n\n    # if the last_index is not the size of the sublist, then we need to sort the list\n    if last_index!= len(list) - 1:\n        sorted_list = sorted(list)\n        return minSubList(sorted_list, k)\n\n    # if the last_index is the size of the sublist, then we can calculate the minimum length of sublist\n    # firstly, we start from the second element to the last_index\n    min_length = len(list) - 1\n    for i in range(last_index+1, len(list)):\n        if list[i] == list[i-1]:\n            continue\n        if len(list[i-1:i+1]) < k:\n            continue\n        min_length = min(min_length, len(list[i-k+1:i+1]))\n    return min_length\n\nprint minSubList([1,2,3,4,5,6], 2)"
    },
    {
      "rank": 68,
      "score": 8.147689357326087,
      "candidate": "def minLength(L):\n  if len(L) < 2:\n    return 0\n  return min(minLength(L[1:]) + 1, minLength(L[:-1]) + 1)\n\nprint minLength([1, 2, 3, 4, 5])\nprint minLength([3, 2, 1, 5, 4, 3])"
    },
    {
      "rank": 69,
      "score": 8.113316108582879,
      "candidate": "#!/usr/bin/env python\n\nimport os\nimport sys\n\ndef min_sublist_length(arr):\n    min_length = sys.maxsize\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                min_length = min(min_length, 1 + min_sublist_length(arr[i:j]))\n    return min_length\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 3, 2, 2]\n    print min_sublist_length(arr)"
    },
    {
      "rank": 70,
      "score": 7.95789741712473,
      "candidate": "def find_min(alist):\n    \"\"\"\n    \"\"\"\n    if alist == []:\n        return 0\n    else:\n        return min(alist)\n\n\nprint find_min([1,2,3,4,5])"
    },
    {
      "rank": 71,
      "score": 7.914987398830185,
      "candidate": "def find_min(lst):\n    \"\"\"\n    Find the minimum length of sublist.\n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        return min(map(lambda x: len(x), lst))"
    },
    {
      "rank": 72,
      "score": 7.7712275683036705,
      "candidate": "def min_len_sublist(ls):\n    \"\"\"\n    :type ls: List[int]\n    :rtype: int\n    \"\"\"\n    min_len = len(ls)\n    for i in range(len(ls)):\n        for j in range(i+1, len(ls)):\n            if ls[i] > ls[j]:\n                min_len = min(min_len, j - i)\n                break\n    return min_len"
    },
    {
      "rank": 73,
      "score": 7.7643243288754284,
      "candidate": "def min_length(arr):\n    return min([len(arr[i]) for i in range(len(arr))])\n\ndef main():\n    arr = [1, 2, 3, 4]\n    print(min_length(arr))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 74,
      "score": 7.65098224148845,
      "candidate": "def minSubList(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    \n    #find the first index of the first element\n    i = 0\n    while i < len(arr) and arr[i]!= arr[0]:\n        i += 1\n    if i == len(arr):\n        return 1\n    \n    #find the last index of the first element\n    j = i\n    while j < len(arr) and arr[j]!= arr[-1]:\n        j += 1\n    if j == len(arr):\n        return 1\n    \n    #find the first index of the last element\n    i = j\n    while i < len(arr) and arr[i]!= arr[-2]:\n        i += 1\n    if i == len(arr):\n        return 1\n    \n    #find the last index of the last element\n    j = i\n    while j < len(arr) and arr[j]!= arr[-1]:\n        j += 1\n    if j == len(arr):\n        return 1\n    \n    #find the minimum length of sublist\n    minLen = j - i + 1\n    \n    #find the first index of the second element\n    i = 0\n    while i < len(arr) and arr[i]!= arr[1]:\n        i += 1\n    if i == len(arr):\n        return minLen\n    \n    #find the last index of the second element\n    j = i\n    while j < len(arr) and arr[j]!= arr[-2]:\n        j += 1\n    if j == len(arr):\n        return minLen\n    \n    #find the minimum length of sublist\n    minLen = min(minLen, j - i + 1)\n    \n    #find the first index of the third element\n    i = 0\n    while i < len(arr) and arr[i]!= arr[2]:\n        i += 1\n    if i == len(arr):\n        return minLen\n    \n    #find the last index of the third"
    },
    {
      "rank": 75,
      "score": 7.6334459729775865,
      "candidate": "def min_length_sublist(list_1, list_2):\n    \"\"\"\n    Input: list_1 and list_2 are two lists.\n    Output: the minimum length of sublist of list_1 and list_2.\n    \"\"\"\n    if len(list_1) < len(list_2):\n        return min_length_sublist(list_2, list_1)\n    else:\n        if len(list_1) == len(list_2):\n            return min(list_1)\n        else:\n            return min_length_sublist(list_1[len(list_2):], list_2)\n\nif __name__ == '__main__':\n    print(min_length_sublist([1, 2, 3], [1, 2]))\n    print(min_length_sublist([1, 2, 3], [1, 3, 5]))"
    },
    {
      "rank": 76,
      "score": 7.542996187459748,
      "candidate": "def minSubList(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    return min(arr) + 1"
    },
    {
      "rank": 77,
      "score": 3.3254976068569975,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution:\n    def minSubListLen(self, head: ListNode) -> int:\n        def dfs(head, m):\n            if not head:\n                return 0\n            if not head.next:\n                return 1\n            if head.next.next:\n                return 1 + dfs(head.next, m)\n            return m + dfs(head.next, m)\n        return dfs(head, 0)"
    },
    {
      "rank": 78,
      "score": 3.2474398853990283,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        if self is None:\n            return \"\"\n        return str(self.val) + \"->\" + str(self.next)\n\n\nclass Solution:\n    # @param head, a ListNode\n    # @return an integer\n    def minSubLen(self, head):\n        if head is None or head.next is None:\n            return 0\n        pre = head\n        cur = head\n        while cur.next:\n            cur = cur.next\n            if pre.next:\n                pre = pre.next\n            else:\n                break\n        else:\n            return 0\n        \n        min = 1\n        while pre:\n            if pre.next:\n                pre = pre.next\n                min = min if pre.next else min\n            else:\n                return min\n        return min\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    print Solution().minSubLen(head)\n    print Solution().minSubLen(None)"
    },
    {
      "rank": 79,
      "score": 3.234130830509366,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def findMinLength(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        node = head\n        while node.next:\n            node = node.next\n        return 1 + self.findMinLength(node)\n\n    def findMinLength(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if head.next:\n            return 1 + self.findMinLength(head.next)\n        return 1"
    },
    {
      "rank": 80,
      "score": 3.197410778904765,
      "candidate": "def find_min_length_of_sublist(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    if len(list) < 2:\n        return len(list)\n\n    min_length = 0\n    for i in range(len(list)):\n        min_length = min(min_length, len(list[i:]))\n\n    return min_length\n\nclass Solution:\n    # @return an integer\n    def minSubListLen(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n\n        res = 1\n        for i in range(2, len(nums)):\n            res = min(res, find_min_length_of_sublist(nums[i:]))\n        return res\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5]\n    print(sol.minSubListLen(nums))"
    },
    {
      "rank": 81,
      "score": 3.184184334996698,
      "candidate": "def find_min_length(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    # return 0\n    length = len(arr)\n    if length < 2:\n        return length\n\n    return min(arr[i] for i in range(length) if arr[i]!= arr[i+1])\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_min_length([1, 2, 3, 4, 5]) == 2, \"1\"\n    assert find_min_length([1, 2, 3, 4]) == 3, \"2\"\n    assert find_min_length([1, 2, 3, 4, 5, 6]) == 2, \"3\"\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7]) == 3, \"4\"\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8]) == 3, \"5\"\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3, \"6\"\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4, \"7\"\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 4, \"8\"\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 4, \"9\"\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 4, \"10\"\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 4, \"11\"\n    assert find_min_length([1, 2, 3, 4, 5, 6, 7, 8"
    },
    {
      "rank": 82,
      "score": 3.1772319791988983,
      "candidate": "# @include\ndef min_length_sublist(A):\n    return min([len(sublist) for sublist in A])\n# @exclude\n\n\ndef main():\n    A = [1, 2, 3, 4, 5]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6, 7]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(min_length_sublist(A))\n\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(min_length_sublist(A))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 3.155445249144166,
      "candidate": "import collections\n\n\ndef find_min_len(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # store the length of the shortest sublist\n    min_len = len(arr[0])\n\n    for i in range(1, len(arr)):\n        # find the minimum length of the current sublist\n        min_len = min(min_len, len(arr[i]))\n\n    return min_len\n\n\ndef find_min_len2(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # store the length of the shortest sublist\n    min_len = len(arr[0])\n\n    # find the minimum length of the current sublist\n    for i in range(1, len(arr)):\n        # find the minimum length of the current sublist\n        min_len = min(min_len, len(arr[i]))\n\n    return min_len\n\n\ndef find_min_len3(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # store the length of the shortest sublist\n    min_len = len(arr[0])\n\n    for i in range(1, len(arr)):\n        # find the minimum length of the current sublist\n        min_len = min(min_len, len(arr[i]))\n\n    return min_len\n\n\ndef find_min_len4(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # store the length of the shortest sublist\n    min_len = len(arr[0])\n\n    for i in range(1, len(arr)):\n        # find the minimum length of the current sublist\n        min_len = min(min_len, len(arr[i]))\n\n    return min_len\n\n\ndef find_min"
    },
    {
      "rank": 84,
      "score": 3.119211396722696,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        \n        if n == 0:\n            return 0\n        \n        min_len = n\n        min_len_pos = 0\n        \n        for i in range(1, n):\n            if nums[i] < nums[i-1]:\n                min_len_pos = i\n                min_len = i\n        \n        if s < nums[min_len_pos]:\n            min_len = min_len_pos\n        \n        return min_len"
    },
    {
      "rank": 85,
      "score": 3.0867926460114323,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def minSubListLen(self, head: ListNode) -> int:\n        if not head:\n            return 0\n        prev = head\n        curr = head.next\n        res = 1\n        while curr:\n            prev = curr\n            curr = curr.next\n            res += 1\n        return res"
    },
    {
      "rank": 86,
      "score": 3.0789002663183243,
      "candidate": "def find_min_len(arr, start, end):\n    # Write your code here\n    if start == end:\n        return arr[start]\n    else:\n        mid = (start + end) / 2\n        return min(find_min_len(arr, start, mid), find_min_len(arr, mid + 1, end))\n\ndef find_min_len_rec(arr, start, end):\n    if start == end:\n        return arr[start]\n    else:\n        mid = (start + end) / 2\n        if arr[mid] > arr[start]:\n            return find_min_len_rec(arr, start, mid)\n        else:\n            return find_min_len_rec(arr, mid + 1, end)\n\ndef find_min_len_rec_2(arr, start, end):\n    if start == end:\n        return arr[start]\n    else:\n        mid = (start + end) / 2\n        if arr[mid] > arr[start]:\n            return find_min_len_rec_2(arr, start, mid)\n        else:\n            return find_min_len_rec_2(arr, mid + 1, end)\n\ndef find_min_len_rec_3(arr, start, end):\n    if start == end:\n        return arr[start]\n    else:\n        mid = (start + end) / 2\n        if arr[mid] > arr[start]:\n            return find_min_len_rec_3(arr, start, mid)\n        else:\n            return find_min_len_rec_3(arr, mid + 1, end)\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print find_min_len(arr, 0, len(arr) - 1)\n    print find_min_len_rec(arr, 0, len(arr) - 1)\n    print find_min_len_rec_2(arr, 0, len(arr) - 1)\n    print find_min_len_rec_3(arr, 0, len(arr) -"
    },
    {
      "rank": 87,
      "score": 3.0232986118435297,
      "candidate": "def find_min_sublist(arr):\n    \"\"\"\n    :param arr: a list of integers\n    :return: the length of the sublist\n    \"\"\"\n    # write your code here\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return 1\n\n    # find the maximum number in the list\n    max_num = max(arr)\n\n    # find the minimum number in the list\n    min_num = min(arr)\n\n    # find the minimum number in the list\n    min_num_in_sublist = min_num\n    for num in arr:\n        if num > max_num:\n            break\n\n        min_num_in_sublist = min(min_num_in_sublist, num)\n\n    return min(min_num_in_sublist, len(arr))\n\n\nprint(find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 88,
      "score": 2.9438031900663995,
      "candidate": "def min_length_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    length = arr[0]\n    for i in range(1, len(arr)):\n        length = min(length, len(arr[i:]))\n\n    return length\n\n# Your MinLengthSubList object will be instantiated and called as such:\n# obj = MinLengthSubList(arr)\n# param_1 = obj.min_length_sublist(arr)"
    },
    {
      "rank": 89,
      "score": 2.9213610848165357,
      "candidate": "def find_min(L):\n    \"\"\"\n    Find the minimum length of a sublist of L.\n    Input: List L.\n    Output: The minimum length of a sublist of L.\n    \"\"\"\n    # Your Code Here\n    return min(L)\n\nif __name__ == \"__main__\":\n    # Test Cases\n    assert find_min([1,2,3]) == 2\n    assert find_min([1,2,3,4]) == 2\n    assert find_min([4,3,2,1]) == 3\n    assert find_min([]) == 0\n    assert find_min([1,2,3,4,5]) == 1"
    },
    {
      "rank": 90,
      "score": 2.9075802527000842,
      "candidate": "def min(L):\n    \"\"\"\n    Return the smallest of the list L.\n    \"\"\"\n    return min(L)\n\n\ndef min_length(L):\n    \"\"\"\n    Return the minimum length of the list L.\n    \"\"\"\n    return min(L)\n\n\ndef min_length_2(L):\n    \"\"\"\n    Return the minimum length of the list L.\n    \"\"\"\n    return min(L)\n\n\ndef min_length_3(L):\n    \"\"\"\n    Return the minimum length of the list L.\n    \"\"\"\n    return min(L)\n\n\ndef min_length_4(L):\n    \"\"\"\n    Return the minimum length of the list L.\n    \"\"\"\n    return min(L)"
    },
    {
      "rank": 91,
      "score": 2.9058940432482823,
      "candidate": "def find_min(xs):\n    return min(xs)\n\ndef find_min_2(xs):\n    return min(xs, key=find_min)\n\ndef find_min_3(xs):\n    return min(xs, key=find_min)\n\ndef find_min_4(xs):\n    return min(xs, key=find_min)\n\ndef find_min_5(xs):\n    return min(xs, key=find_min)\n\ndef find_min_6(xs):\n    return min(xs, key=find_min)\n\ndef find_min_7(xs):\n    return min(xs, key=find_min)\n\ndef find_min_8(xs):\n    return min(xs, key=find_min)\n\ndef find_min_9(xs):\n    return min(xs, key=find_min)\n\ndef find_min_10(xs):\n    return min(xs, key=find_min)\n\ndef find_min_11(xs):\n    return min(xs, key=find_min)\n\ndef find_min_12(xs):\n    return min(xs, key=find_min)\n\ndef find_min_13(xs):\n    return min(xs, key=find_min)\n\ndef find_min_14(xs):\n    return min(xs, key=find_min)\n\ndef find_min_15(xs):\n    return min(xs, key=find_min)\n\ndef find_min_16(xs):\n    return min(xs, key=find_min)\n\ndef find_min_17(xs):\n    return min(xs, key=find_min)\n\ndef find_min_18(xs):\n    return min(xs, key=find_min)\n\ndef find_min_19(xs):\n    return min(xs, key=find_min)\n\ndef find_min_20(xs):\n    return min(xs, key=find_min)\n\ndef find_min_21(xs):\n    return min(xs, key=find_min)\n\ndef find_min_22(xs):\n    return min(xs,"
    },
    {
      "rank": 92,
      "score": 2.8315072574694353,
      "candidate": "class Solution(object):\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        \n        if len(nums) == 1:\n            return 1\n        \n        nums.sort()\n        \n        start = 0\n        end = 0\n        min_len = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1] + 1:\n                end = i\n            else:\n                min_len = min(min_len, end - start + 1)\n                start = i\n        \n        min_len = min(min_len, end - start + 1)\n        return min_len"
    },
    {
      "rank": 93,
      "score": 2.7820742218749093,
      "candidate": "# Your function should return the minimum length of sublist\n# See example below\n\ndef min_length_sublist(list):\n    if len(list) == 0:\n        return 0\n    else:\n        return min(min_length_sublist(sublist) for sublist in list)\n\nprint min_length_sublist([1, 2, 3])\nprint min_length_sublist([1, 2, 3, 4, 5])\nprint min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 94,
      "score": 2.7569205311197384,
      "candidate": "# @include\ndef min_length_sublist(list_of_nums):\n    \"\"\"\n    >>> min_length_sublist([1, 2, 3, 4, 5])\n    2\n    >>> min_length_sublist([-10, -5, 0, 5, 10])\n    3\n    >>> min_length_sublist([-10, -5, 0, 5, 10, 100])\n    3\n    >>> min_length_sublist([-10, -5, 0, 5, 10, 100, 10000])\n    4\n    >>> min_length_sublist([-10, -5, 0, 5, 10, 100, 10000, 1000000])\n    5\n    \"\"\"\n    if not list_of_nums:\n        return 0\n    min_length = list_of_nums[0]\n    for num in list_of_nums:\n        if num < min_length:\n            min_length = num\n    return min_length + 1\n# @exclude\n\n\ndef main():\n    # print '-' * 50\n    # print min_length_sublist([-10, -5, 0, 5, 10])\n    print min_length_sublist([-10, -5, 0, 5, 10, 100])\n    print min_length_sublist([-10, -5, 0, 5, 10, 100, 10000])\n    print min_length_sublist([-10, -5, 0, 5, 10, 100, 10000, 1000000])\n    # print min_length_sublist([-10, -5, 0, 5, 10, 100, 10000])\n    # print min_length_sublist([-10, -5, 0, 5, 10, 100, 10000, 1000000])\n    # print min_length_sublist([-10, -5, 0, 5, 10, 100, 10000])\n    # print min_length_sublist([-10, -5, 0, 5, 10, 100, 10000, 1000000])\n    # print min_length_sublist([-10, -5, 0, 5, 10, 100, 10000, 1000000])\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 95,
      "score": 2.734479606238553,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"%s(%s)\" % (self.__class__.__name__, repr(self.val))\n        else:\n            return \"%s()\" % self.__class__.__name__\n\n    def to_list(self):\n        ans = []\n        cur = self\n        while cur:\n            ans.append(cur.val)\n            cur = cur.next\n        return ans\n\n\nclass Solution(object):\n    def minSubListLen(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head or not head.next:\n            return 0\n\n        # store the max len of a sublist\n        max_len = 0\n        cur = head\n        while cur:\n            # store the min len of sublist\n            min_len = 1\n            sub_list = cur.to_list()\n            for i in range(len(sub_list) - 1):\n                sub_list[i] = sub_list[i] + 1\n                if sub_list[i] > max_len:\n                    max_len = sub_list[i]\n            cur = cur.next\n            # print min_len, max_len\n            # break if max_len is greater than the current max_len\n            if min_len > max_len:\n                break\n        return min_len\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n\n    print Solution().minSubListLen(head)\n    print Solution().minSubListLen(head.next.next.next.next.next.next)"
    },
    {
      "rank": 96,
      "score": 2.712910410220639,
      "candidate": "def min_length_of_sublist(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if not list:\n        return 0\n    sorted_list = sorted(list)\n    if len(sorted_list) == 1:\n        return 1\n    if len(sorted_list) == 2:\n        return min(sorted_list[1:]) + 1\n    if len(sorted_list) > 2:\n        return min(sorted_list[1:]) + min(sorted_list[2:])\n\nprint(min_length_of_sublist([1, 2, 3, 4]))"
    },
    {
      "rank": 97,
      "score": 2.7069975240069546,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def findMinLengthSubList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if head is None:\n            return 0\n        if head.next is None:\n            return 1\n        slow = head\n        fast = head.next\n        count = 1\n        while fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n            count += 1\n        return count"
    },
    {
      "rank": 98,
      "score": 2.66104711167953,
      "candidate": "def find_min(a):\n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n\n    Input:\n    a: A list of integers.\n\n    Output:\n    min_len: The minimum length of sublist.\n\n    Example:\n    >>> find_min([1, 2, 3, 4, 5])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6, 7])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6, 7, 8])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    3\n    >>> find_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    3\n    \"\"\"\n    if len(a) == 0:\n        return 0\n\n    min_len = a[0]\n    for i in range(1, len(a)):\n        if a[i] < min_len:\n            min_len = a[i]\n\n    return min_len\n\n\nif __name__ == \"__main__\":\n    assert find_min([1, 2, 3, 4, 5]) == 3\n    assert find_min([1, 2, 3, 4, 5, 6]) == 3"
    },
    {
      "rank": 99,
      "score": 2.6580604353087702,
      "candidate": "def min_length_sublist(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = min(dp[i], dp[j] + 1)\n            else:\n                dp[i] = min(dp[i], dp[j])\n    return dp[-1]\n\nclass Solution:\n    def minLengthSubList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return min_length_sublist(nums)\n\n\nif __name__ == '__main__':\n    assert Solution().minLengthSubList([1, 2, 3]) == 3"
    },
    {
      "rank": 100,
      "score": 2.522983460495786,
      "candidate": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\n# \u6211\u4eec\u8981\u6c42\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u627e\u51fa\u6700\u5c0f\u7684\u5b50\u5e8f\u5217\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u6211\u4eec\u89e3\u51b3\u4e86\u4e00\u4e2a\u9012\u51cf\u95ee\u9898\n# \u53c2\u8003 https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMin(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        res = root.val\n        # \u5148\u628a\u6700\u5c0f\u7684\u5b50\u5e8f\u5217\u653e\u5230res\u7684\u5de6\u8fb9\n        if root.left:\n            res = self.findMin(root.left)\n        if root.right:\n            res = min(res, self.findMin(root.right))\n        return res"
    }
  ]
}