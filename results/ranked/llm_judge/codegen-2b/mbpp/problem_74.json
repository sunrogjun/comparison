{
  "timestamp": "2025-09-14T17:54:44.063628",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 74,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef sphere_area(radius):\n    \"\"\"\n    :param radius: radius of the sphere\n    :type radius: float\n    :returns: the surface area of the sphere\n    :rtype: float\n    \"\"\"\n    return 4 * radius * radius * 3.14159\n\ndef sphere_area_test(radius):\n    \"\"\"\n    Test function for the sphere_area function.\n    :param radius: radius of the sphere\n    :type radius: float\n    :returns: None\n    \"\"\"\n    assert sphere_area(radius) == sphere_area_test.answer\n\nclass TestSphereArea(unittest.TestCase):\n\n    def setUp(self):\n        self.answer = 6.28\n        self.radius = 1.0\n\n    def test_sphere_area_positive(self):\n        assert sphere_area(self.radius) == self.answer\n\n    def test_sphere_area_negative(self):\n        with self.assertRaises(ValueError):\n            sphere_area(-1.0)\n\n    def test_sphere_area_zero(self):\n        with self.assertRaises(ValueError):\n            sphere_area(0.0)\n\n    def test_sphere_area_decimal(self):\n        with self.assertRaises(ValueError):\n            sphere_area(1.1)\n\n    def test_sphere_area_not_a_number(self):\n        with self.assertRaises(ValueError):\n            sphere_area(float('nan'))\n\n    def test_sphere_area_infinity(self):\n        with self.assertRaises(ValueError):\n            sphere_area(float('inf'))\n\n    def test_sphere_area_negative_infinity(self):\n        with self.assertRaises(ValueError):\n            sphere_area(float('-inf'))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "#\n# The input is a list of points on the sphere.\n#\n# The output is the surface area of the sphere.\n#\n\n#\n#   Input:\n#   # of points\n#   [(x, y, z), (x, y, z),...]\n#\n#   Output:\n#   surface area of the sphere\n#\n#\n#   Constraints:\n#   All points lie on the sphere.\n#   The number of points is no more than 100.\n#   All points are distinct.\n#   The radius of the sphere is no more than 100.\n#\n\n#\n#   Implementation:\n#   1. Define a function that takes in a list of points and returns the\n#      surface area of the sphere.\n#   2. Write a test program that prompts the user to enter a list of points\n#      on the sphere and outputs the surface area of the sphere.\n#\n\nimport math\n\n#\n#   Define a function that takes in a list of points and returns the\n#   surface area of the sphere.\n#\ndef surface_area(points):\n    #\n    #   Calculate the surface area of the sphere.\n    #\n    sum = 0.0\n    for i in range(0, len(points)):\n        sum = sum + points[i][0] * points[i][1]\n    return math.sqrt(sum)\n\n#\n#   Write a test program that prompts the user to enter a list of points on\n#   the sphere and outputs the surface area of the sphere.\n#\n\ndef main():\n    #\n    #   Define a list of points on the sphere.\n    #\n    points = [[0.0, 0.0, 0.0],\n              [1.0, 0.0, 0.0],\n              [0.0, 1.0, 0.0],\n              [0.0, 0.0, 1.0],\n              [0.5, 0.5, 0.5]]\n    #\n    #   Calculate the surface area of the sphere.\n    #\n    print surface_area(points)\n\nmain()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from math import pi, sqrt\n\ndef sphere_area(radius):\n    \"\"\"\n    Calculate the surface area of a sphere with radius ``radius``.\n    \"\"\"\n    return pi * radius * radius\n\nif __name__ == '__main__':\n    assert sphere_area(1) == pi * 4\n    assert sphere_area(2) == pi * 6\n    assert sphere_area(3) == pi * 8\n    assert sphere_area(4) == pi * 10\n    assert sphere_area(5) == pi * 12\n    assert sphere_area(6) == pi * 14\n    assert sphere_area(7) == pi * 16\n    assert sphere_area(8) == pi * 18\n    assert sphere_area(9) == pi * 20\n    assert sphere_area(10) == pi * 22\n    assert sphere_area(11) == pi * 24\n    assert sphere_area(12) == pi * 26\n    assert sphere_area(13) == pi * 28\n    assert sphere_area(14) == pi * 30\n    assert sphere_area(15) == pi * 32\n    assert sphere_area(16) == pi * 34\n    assert sphere_area(17) == pi * 36\n    assert sphere_area(18) == pi * 38\n    assert sphere_area(19) == pi * 40\n    assert sphere_area(20) == pi * 42\n    assert sphere_area(21) == pi * 44\n    assert sphere_area(22) == pi * 46\n    assert sphere_area(23) == pi * 48\n    assert sphere_area(24) == pi * 50\n    assert sphere_area(25) == pi * 52\n    assert sphere_area(26) == pi * 54\n    assert sphere_area(27) == pi * 56\n    assert sphere_area(28) == pi * 58\n    assert sphere_area(29) == pi * 60\n    assert sphere_area(30) == pi * 62\n    assert sphere_area(31) == pi * 64\n    assert sphere_area(32) == pi * 66\n    assert sphere_area(33) == pi * 68\n    assert sphere_area(34) == pi * 70\n    assert sphere_area(35) =="
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(r):\n    return math.pi * r * r\n\ndef main():\n    print(sphere_area(3.0))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def sphere_area(radius):\n    return 4.0 / 3 * 3.14159 * radius * radius * radius\n\nif __name__ == \"__main__\":\n    print sphere_area(1.0)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\n\ndef sphere_area(radius):\n    \"\"\"\n    :param radius: the radius of the sphere\n    :return: the surface area of the sphere\n    \"\"\"\n\n    return math.pi * radius * radius\n\n\nif __name__ == \"__main__\":\n\n    print sphere_area(1)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from math import sqrt, pi\n\ndef sphere_area(radius):\n    \"\"\"\n    Calculate the area of a sphere.\n\n    :param radius: The radius of the sphere.\n    :return: The area of the sphere.\n    \"\"\"\n    return pi * radius * radius\n\n\nif __name__ == \"__main__\":\n    print(sphere_area(3))\n    print(sphere_area(4))\n    print(sphere_area(5))\n    print(sphere_area(6))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sphere_area(r):\n    return 4.0 / 3.0 * pi * r ** 3.0\n\nprint sphere_area(10)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sphere_surface_area(radius):\n    \"\"\"\n    Return the surface area of a sphere of radius `radius`\n    \"\"\"\n    return 4 * np.pi * radius ** 2\n\nprint(sphere_surface_area(3.0))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return math.pi * radius**2\n\ndef main():\n    print(surface_area(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    return (4 * math.pi * radius ** 3) / 3\n\n\nif __name__ == \"__main__\":\n    print(sphere_area(5))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def sphereArea(self, radius):\n        \"\"\"\n        :type radius: int\n        :rtype: int\n        \"\"\"\n        return 4 * radius * radius * 3.14159265358979323846"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    >>> sphere_area(1)\n    12\n    >>> sphere_area(2)\n    16\n    >>> sphere_area(3)\n    24\n    \"\"\"\n    return 4 * 3.14159 * radius**2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from math import pi\n\ndef sphere_area(r):\n    return pi * r**2\n\n\ndef main():\n    assert sphere_area(0.0) == 0.0\n    assert sphere_area(1.0) == 4 * pi\n    assert sphere_area(2.0) == 8 * pi\n    assert sphere_area(3.0) == 16 * pi\n    assert sphere_area(4.0) == 24 * pi\n    assert sphere_area(5.0) == 32 * pi\n    assert sphere_area(6.0) == 40 * pi\n    assert sphere_area(7.0) == 48 * pi\n    assert sphere_area(8.0) == 56 * pi\n    assert sphere_area(9.0) == 64 * pi\n    assert sphere_area(10.0) == 72 * pi\n    assert sphere_area(11.0) == 80 * pi\n    assert sphere_area(12.0) == 88 * pi\n    assert sphere_area(13.0) == 96 * pi\n    assert sphere_area(14.0) == 104 * pi\n    assert sphere_area(15.0) == 112 * pi\n    assert sphere_area(16.0) == 120 * pi\n    assert sphere_area(17.0) == 128 * pi\n    assert sphere_area(18.0) == 136 * pi\n    assert sphere_area(19.0) == 144 * pi\n    assert sphere_area(20.0) == 152 * pi\n    assert sphere_area(21.0) == 160 * pi\n    assert sphere_area(22.0) == 168 * pi\n    assert sphere_area(23.0) == 176 * pi\n    assert sphere_area(24.0) == 184 * pi\n    assert sphere_area(25.0) == 192 * pi\n    assert sphere_area(26.0) == 200 * pi\n    assert sphere_area(27.0) == 208 * pi\n    assert sphere_area(28.0) == 216 * pi\n    assert sphere_area(29.0) == 224 * pi\n    assert sphere_area(30.0) == 232 * pi\n    assert sphere_area(31.0) == 240 * pi\n    assert sphere_"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    area = 4.0 * math.pi * radius ** 2\n    return area\n\nif __name__ == '__main__':\n    print sphere_area(3.0)"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\n\ndef sphere_area(radius):\n    \"\"\"\n    Calculate the area of a sphere\n\n    :param radius: the radius of the sphere\n    :return: the area of the sphere\n    \"\"\"\n    return math.pi * radius * radius\n\n\ndef main():\n    \"\"\"\n    Test the sphere_area function\n    \"\"\"\n    assert sphere_area(1) == math.pi\n    assert sphere_area(2) == 4 * math.pi / 3\n    assert sphere_area(3) == 8 * math.pi / 3\n    assert sphere_area(4) == 16 * math.pi / 3\n    assert sphere_area(5) == 32 * math.pi / 3\n    assert sphere_area(6) == 64 * math.pi / 3\n    assert sphere_area(7) == 128 * math.pi / 3\n    assert sphere_area(8) == 256 * math.pi / 3\n    assert sphere_area(9) == 512 * math.pi / 3\n    assert sphere_area(10) == 1024 * math.pi / 3\n    assert sphere_area(11) == 2048 * math.pi / 3\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/sphere-area/problem\n\nimport math\n\n\ndef sphere_area(radius):\n    \"\"\"\n    Calculates the surface area of a sphere.\n    :param radius: The radius of the sphere\n    :return: The surface area of the sphere\n    \"\"\"\n    return math.pi * (4 * math.pi * radius ** 2) / 3\n\n\nif __name__ == '__main__':\n    radius = int(input())\n    print(sphere_area(radius))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    return 4 * math.pi * radius**2\n\ndef main():\n    radius = float(input(\"Please enter the radius: \"))\n    area = sphere_area(radius)\n    print(\"The surface area of a sphere with radius {} is {}\".format(radius, area))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(r):\n    return math.pi * r * r\n\ndef main():\n    print sphere_area(3)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def sphere_area(r):\n    \"\"\"\n    >>> sphere_area(1)\n    12.0\n    >>> sphere_area(2)\n    24.0\n    >>> sphere_area(3)\n    36.0\n    >>> sphere_area(4)\n    48.0\n    >>> sphere_area(5)\n    56.0\n    >>> sphere_area(6)\n    64.0\n    >>> sphere_area(7)\n    72.0\n    >>> sphere_area(8)\n    80.0\n    \"\"\"\n    return r * r * 3.14159\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def sphere_area(r):\n    \"\"\"\n    Return the surface area of a sphere of radius r.\n    \"\"\"\n    return 4 * r * r * pi\n\nprint sphere_area(1)\nprint sphere_area(2)\nprint sphere_area(3)\nprint sphere_area(4)\nprint sphere_area(5)\nprint sphere_area(6)\nprint sphere_area(7)\nprint sphere_area(8)\nprint sphere_area(9)\nprint sphere_area(10)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return math.pi * (radius ** 2)\n\nif __name__ == '__main__':\n    print sphere_area(1)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    Compute the surface area of a sphere.\n\n    >>> sphere_area(1)\n    0.0\n    >>> sphere_area(2)\n    0.25\n    >>> sphere_area(3)\n    0.75\n    >>> sphere_area(4)\n    1.75\n    >>> sphere_area(5)\n    2.5\n    >>> sphere_area(6)\n    3.25\n    >>> sphere_area(7)\n    3.75\n    >>> sphere_area(8)\n    4.25\n    >>> sphere_area(9)\n    4.75\n    >>> sphere_area(10)\n    5.25\n    >>> sphere_area(11)\n    5.75\n    >>> sphere_area(12)\n    6.25\n    \"\"\"\n    return 4 * radius * radius * radius\n\ndef test():\n    assert sphere_area(1) == 0.0\n    assert sphere_area(2) == 0.25\n    assert sphere_area(3) == 0.75\n    assert sphere_area(4) == 1.75\n    assert sphere_area(5) == 2.5\n    assert sphere_area(6) == 3.25\n    assert sphere_area(7) == 3.75\n    assert sphere_area(8) == 4.25\n    assert sphere_area(9) == 4.75\n    assert sphere_area(10) == 5.25\n    assert sphere_area(11) == 5.75\n    assert sphere_area(12) == 6.25"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_surface_area(radius):\n    \"\"\"\n    Find the surface area of a sphere.\n    :param radius: radius of sphere\n    :return: surface area of sphere\n    \"\"\"\n    return math.pi * radius * radius\n\nif __name__ == '__main__':\n    print sphere_surface_area(5)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from math import sqrt, pi\n\ndef sphere_surface_area(radius):\n    return 4*pi*radius**2\n\ndef main():\n    print sphere_surface_area(1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "#%%\ndef sphere_area(r):\n    \"\"\"\n    Find the surface area of a sphere.\n\n    Args:\n        r (float): radius of the sphere.\n\n    Returns:\n        float: surface area of the sphere.\n    \"\"\"\n    return 4 * r**2 * 3.14159\n\n#%%\ndef sphere_area_test():\n    assert sphere_area(3.0) == 8.0 * 3.14159\n    assert sphere_area(1.0) == 4.0 * 3.14159\n    assert sphere_area(2.0) == 4.0 * 3.14159\n\n#%%\ndef sphere_area_test2():\n    assert sphere_area(3.0) == 8.0 * 3.14159\n    assert sphere_area(1.0) == 4.0 * 3.14159\n    assert sphere_area(2.0) == 4.0 * 3.14159\n\n#%%\ndef sphere_area_test3():\n    assert sphere_area(3.0) == 8.0 * 3.14159\n    assert sphere_area(1.0) == 4.0 * 3.14159\n    assert sphere_area(2.0) == 4.0 * 3.14159\n\n#%%\ndef sphere_area_test4():\n    assert sphere_area(3.0) == 8.0 * 3.14159\n    assert sphere_area(1.0) == 4.0 * 3.14159\n    assert sphere_area(2.0) == 4.0 * 3.14159\n\n#%%\ndef sphere_area_test5():\n    assert sphere_area(3.0) == 8.0 * 3.14159\n    assert sphere_area(1.0) == 4.0 * 3.14159\n    assert sphere_area(2.0) == 4.0 * 3.14159\n\n#%%\ndef sphere_area_test6():\n    assert sphere_area(3.0) == 8.0 * 3.14159\n    assert sphere_area(1.0) == 4.0 * 3.14159\n    assert sphere_area(2.0) == 4.0 * 3.14159\n\n#%%\ndef"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return 4 * np.pi * radius ** 2\n\ndef main():\n    print sphere_area(1.5)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# I/O imports\nimport math\n\n# Constants\nDEGREES_TO_RADIANS = math.pi/180\n\n# The surface area of a sphere is (4/3) * pi * r^3\ndef surface_area(radius):\n    return (4.0/3.0) * math.pi * radius**3\n\n\n# Implement the function\ndef sphere_area(radius):\n    return surface_area(radius) * DEGREES_TO_RADIANS\n\n# Test the function\nprint \"Surface area of a sphere of radius 3 is %s\" % sphere_area(3)"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    return math.pi * radius ** 2\n\ndef main():\n    print sphere_area(3)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/sphere-area/problem\n\nimport math\nimport sys\n\n\ndef sphere_area(radius):\n    return 4 * math.pi * radius * radius\n\n\nif __name__ == \"__main__\":\n    radius = float(input())\n    print(sphere_area(radius))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    Return the surface area of a sphere with radius radius.\n    \"\"\"\n    return 4 * 3.14159 * radius * radius\n\nif __name__ == \"__main__\":\n    print sphere_area(3)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return math.pi * radius * radius\n\n\ndef main():\n    print sphere_area(4)\n    print sphere_area(2)\n    print sphere_area(1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "from math import sqrt, pi\n\ndef sphere_area(r):\n    return pi * r ** 2\n\nif __name__ == '__main__':\n    print sphere_area(3)\n    print sphere_area(4)"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    Return the surface area of a sphere with a given radius.\n\n    :param radius: The radius of the sphere.\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return math.pi * radius * radius\n\n\nif __name__ == '__main__':\n    assert sphere_area(5.0) == 64.0\n    assert sphere_area(10.0) == 12.0\n    assert sphere_area(20.0) == 160.0"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    return math.pi * pow(radius, 2)\n\nprint sphere_area(5)"
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "from math import pi, sqrt\n\n\ndef sphere_area(radius):\n    return 4.0 * pi * radius**2\n\n\nif __name__ == \"__main__\":\n    print sphere_area(3.0)\n    print sphere_area(5.0)"
    },
    {
      "rank": 37,
      "score": 9.0,
      "candidate": "import math\n\n\ndef sphere_area(radius):\n    return math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print sphere_area(3.0)\n    print sphere_area(4.0)"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    return 4 * math.pi * radius**2\n\n\nif __name__ == '__main__':\n    print sphere_area(1)\n    print sphere_area(2)\n    print sphere_area(3)"
    },
    {
      "rank": 39,
      "score": 9.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    :param radius: Radius of sphere.\n    :return: Surface area of sphere.\n    \"\"\"\n    return math.pi * radius * radius\n\nif __name__ == \"__main__\":\n    print sphere_area(4)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/sphere-area\n\nimport math\n\ndef sphereArea(r):\n    return 4 * math.pi * r ** 3\n\nif __name__ == '__main__':\n    r = int(input())\n    print(sphereArea(r))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from math import pi, sqrt\n\ndef sphere_area(r):\n    \"\"\"\n    Calculate the surface area of a sphere with radius r.\n    \"\"\"\n    return pi * r * r\n\nprint sphere_area(1)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/sphere-area/problem\n\nimport math\n\ndef sphereArea(r):\n    return 4 * math.pi * r**2\n\nprint(sphereArea(2.0))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_surface_area(radius):\n    return math.pi * radius**2\n\ndef test_sphere_surface_area(radius):\n    assert sphere_surface_area(radius) == math.pi * radius**2\n\nif __name__ == \"__main__\":\n    test_sphere_surface_area(5.0)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(radius):\n    \"\"\"\n    Return the surface area of a sphere with radius.\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\ndef main():\n    print(surface_area(2.3))\n    print(surface_area(2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(r):\n    return math.pi*r**2\n\nprint sphere_area(4)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/sphere\n\nimport math\n\ndef sphere(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return a * b * c\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(sphere(a, b, c))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import math\nimport time\n\ndef surface_area(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \"\"\"\n\n    return math.pi * radius * radius\n\n\nif __name__ == '__main__':\n\n    start_time = time.time()\n\n    print('Surface area of a sphere: %s' % surface_area(1.0))\n\n    print('Time elapsed: %s' % (time.time() - start_time))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    :param radius: The radius of the sphere.\n    :type radius: int\n    :return: The surface area of the sphere.\n    :rtype: int\n    \"\"\"\n    return math.pi * radius * radius\n\ndef main():\n    \"\"\"\n    Unit test for sphere_area().\n    \"\"\"\n    print sphere_area(1)\n    print sphere_area(2)\n    print sphere_area(3)\n    print sphere_area(4)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius**2\n\n\n\ndef main():\n    print surface_area(5)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef sphere_area(radius):\n    \"\"\"\n    Input:\n    radius -- radius of sphere\n    Output:\n    surface area of sphere\n    \"\"\"\n    return 4.0 * radius * radius * radius\n\n# Test\nassert sphere_area(3) == 9.0\nassert sphere_area(4) == 36.0\nassert sphere_area(5) == 144.0\nassert sphere_area(6) == 336.0\nassert sphere_area(7) == 1408.0\nassert sphere_area(8) == 4752.0\n\n# Test\nassert sphere_area(0) == 0.0\nassert sphere_area(1) == 4.0\nassert sphere_area(2) == 8.0\nassert sphere_area(3) == 12.0\nassert sphere_area(4) == 16.0\nassert sphere_area(5) == 24.0\nassert sphere_area(6) == 32.0\nassert sphere_area(7) == 40.0\nassert sphere_area(8) == 48.0\n\n# Test\nassert sphere_area(0.0) == 0.0\nassert sphere_area(0.5) == 4.0\nassert sphere_area(1.0) == 8.0\nassert sphere_area(2.0) == 16.0\nassert sphere_area(3.0) == 24.0\nassert sphere_area(4.0) == 32.0\nassert sphere_area(5.0) == 40.0\nassert sphere_area(6.0) == 48.0\nassert sphere_area(7.0) == 56.0\nassert sphere_area(8.0) == 64.0"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    return math.pi * radius * radius\n\ndef sphere_area_python(radius):\n    return math.pi * radius * radius\n\nif __name__ == '__main__':\n    print sphere_area(4)\n    print sphere_area_python(4)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    Returns the surface area of a sphere\n    \"\"\"\n    return 4 * math.pi * radius * radius\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print sphere_area(1)\n    print sphere_area(2)\n    print sphere_area(3)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef sphere_area(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Input:\n    radius -- The radius of the sphere.\n\n    Output:\n    The surface area of the sphere.\n    \"\"\"\n    return 4.0 * 3.14159 * radius ** 2\n\nif __name__ == \"__main__\":\n    print sphere_area(1.0)\n    print sphere_area(2.0)\n    print sphere_area(3.0)\n    print sphere_area(4.0)\n    print sphere_area(5.0)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(r):\n    return math.pi * r * r\n\ndef test(radius):\n    assert sphere_area(radius) == 3.14159 * radius * radius\n\ndef main():\n    test(3)\n    test(4)\n    test(5)\n    test(6)\n    test(7)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef sphere_area(radius):\n    \"\"\"\n    Write a function to calculate the area of a sphere.\n\n    Assume the sphere is located at the origin of the coordinate system,\n    and the radius is a real number.\n\n    Note:\n        If you are not familiar with the concept of area,\n        you can find more information about it on Wikipedia.\n\n    Precondition:\n        radius > 0\n    \"\"\"\n    return pi * radius**2\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    radius = input(\"Enter the radius: \")\n    print(\"The surface area of a sphere is {0}\".format(sphere_area(radius)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def sphere_area(radius):\n    return 4 * 3.14 * radius * radius\n\n# Test Cases\nprint(sphere_area(1))\nprint(sphere_area(2))\nprint(sphere_area(3))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def sphere_surface_area(radius):\n    return 4 * np.pi * radius ** 2\n\nif __name__ == \"__main__\":\n    radius = input(\"Enter radius: \")\n    print(\"The surface area of a sphere with radius {} is {}\".format(radius, sphere_surface_area(radius)))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_surface(radius):\n    \"\"\"\n    Surface of a sphere is area of a sphere, but we need to consider radius of the sphere.\n    \"\"\"\n    return math.pi * radius**2\n\ndef main():\n    \"\"\"\n    Main function for testing.\n    \"\"\"\n    print(sphere_surface(3))\n    print(sphere_surface(4))\n    print(sphere_surface(5))\n    print(sphere_surface(6))\n    print(sphere_surface(7))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nfrom math import pi\n\ndef sphere_area(radius):\n    return 4 * pi * radius**3\n\nif __name__ == \"__main__\":\n    print sphere_area(5)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_surface_area(radius):\n    return 4 * math.pi * radius**2\n\ndef main():\n    print(sphere_surface_area(1))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_surface(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\ndef main():\n    \"\"\"\n    Call the function to test the function.\n    \"\"\"\n    assert sphere_surface(4) == 12, \"Test sphere_surface(4)\"\n    assert sphere_surface(6) == 32, \"Test sphere_surface(6)\"\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    Calculate the area of a sphere.\n\n    Input\n    ------\n    radius: int\n        Radius of the sphere.\n\n    Output\n    ------\n    area: int\n        Area of the sphere.\n    \"\"\"\n    return 4 * 3.14159 * radius * radius\n\ndef test_sphere_area(radius):\n    assert sphere_area(radius) == (4 * 3.14159 * radius * radius)\n\n\nif __name__ == \"__main__\":\n    test_sphere_area(3)\n    test_sphere_area(5)\n    test_sphere_area(7)\n    test_sphere_area(9)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(r):\n    return (4.0 * math.pi * r * r)\n\nif __name__ == \"__main__\":\n    print sphere_area(3.0)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "# import the necessary packages\nfrom math import pi\n\n\n# your function\ndef sphere_area(radius):\n    \"\"\"\n    Return the surface area of a sphere.\n\n    :param radius: The radius of the sphere.\n    :return: The surface area of a sphere.\n    \"\"\"\n    return pi * radius ** 2\n\n\n# test code\nif __name__ == '__main__':\n    # radius of the sphere is input\n    print('Enter the radius:', end=' ')\n    radius = float(input())\n\n    # calculate the area of the sphere\n    print('The area of the sphere is:', sphere_area(radius))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sphere_area(r):\n    \"\"\"\n    r: radius of the sphere\n    \"\"\"\n    return 4 * r * r * 3.14159\n\nif __name__ == \"__main__\":\n    print sphere_area(1)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    Find the area of a sphere.\n\n    Args:\n        radius (float): Radius of sphere.\n\n    Returns:\n        float: The area of the sphere.\n    \"\"\"\n    return math.pi * (4.0 / 3.0) * radius ** 3\n\nif __name__ == '__main__':\n    print sphere_area(1.0)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sphere_surface_area(radius):\n    \"\"\"\n    Given a radius, calculate the surface area of the sphere.\n    :param radius: The radius of the sphere\n    :return: The surface area of the sphere\n    \"\"\"\n    return math.pi * radius * radius\n\n\nif __name__ == \"__main__\":\n    print(sphere_surface_area(4))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    Given a radius, return the surface area of the sphere.\n    \"\"\"\n    return 4 * 3.14159 * radius ** 2\n\nprint(sphere_area(1))\nprint(sphere_area(2))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    The surface area of a sphere is equal to the square of the radius.\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\nprint(sphere_area(1))\nprint(sphere_area(2))\nprint(sphere_area(3))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_surface(radius):\n    return 4 * math.pi * radius ** 2\n\nif __name__ == '__main__':\n    print sphere_surface(5)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    Compute the surface area of a sphere with a given radius.\n    \"\"\"\n    return math.pi * radius ** 2\n\nif __name__ == \"__main__\":\n    print sphere_area(3)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/sphere-area/problem\n\n# Complete the sphereArea function below.\ndef sphereArea(radius):\n    return 4 * 3.14159 * radius**2\n\nif __name__ == '__main__':\n    radius = int(input())\n\n    print(sphereArea(radius))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    Compute the surface area of a sphere with a given radius.\n\n    Input:\n        radius: A positive integer\n\n    Output:\n        The surface area of a sphere with the given radius.\n    \"\"\"\n    return math.pi * radius**2\n\nif __name__ == '__main__':\n    assert sphere_area(1) == math.pi, 'Invalid input'\n    assert sphere_area(2) == math.pi * 4, 'Invalid input'"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return math.pi * radius ** 2\n\ndef main():\n    print(\"Surface Area of a sphere: {}\".format(surface_area(1)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def sphereArea(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return (x ** 2 + y ** 2 + z ** 2) ** 0.5\n\n\nif __name__ == '__main__':\n    assert Solution().sphereArea(1, 2, 3) == (1 ** 2 + 2 ** 2 + 3 ** 2) ** 0.5\n    assert Solution().sphereArea(2, 3, 4) == (2 ** 2 + 3 ** 2 + 4 ** 2) ** 0.5\n    assert Solution().sphereArea(3, 4, 5) == (3 ** 2 + 4 ** 2 + 5 ** 2) ** 0.5"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import math\n\n\ndef sphere_area(radius):\n    \"\"\"\n    :param radius: radius of the sphere\n    :return: surface area of the sphere\n    \"\"\"\n    return math.pi * radius ** 2\n\n\ndef main():\n    \"\"\"\n    Simple test case.\n    \"\"\"\n    assert sphere_area(1) == math.pi\n    assert sphere_area(2) == 2 * math.pi\n    assert sphere_area(3) == 4 * math.pi\n    assert sphere_area(4) == 6 * math.pi\n    assert sphere_area(5) == 8 * math.pi\n    assert sphere_area(6) == 10 * math.pi\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    return 4 * math.pi * math.pow(radius, 2)\n\n\nif __name__ == '__main__':\n    assert sphere_area(3) == 24\n    assert sphere_area(4) == 64\n    assert sphere_area(5) == 256\n    assert sphere_area(6) == 1024"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    :param radius: radius of the sphere\n    :return: the surface area of the sphere\n    \"\"\"\n    return 4 * np.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print(sphere_area(5))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def surface_area(radius):\n    \"\"\"\n    Given a radius, return the surface area of the sphere.\n    \"\"\"\n    return 4 * 3.14159 * radius * radius\n\nprint(surface_area(5))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from math import pi, sqrt\n\n\ndef sphere_surface(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    :param radius: the radius of the sphere\n    :return: the surface area of the sphere\n    \"\"\"\n    return 4.0 * pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    # Test 1\n    assert sphere_surface(1.0) == 4.0\n    assert sphere_surface(2.0) == 8.0\n\n    # Test 2\n    assert sphere_surface(3.0) == 12.0\n    assert sphere_surface(4.0) == 16.0"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# https://en.wikipedia.org/wiki/Sphere_area\n#\n# The surface area of a sphere is given by the following formula:\n#\n# (4/3) * pi * r^3\n#\n# where r is the radius of the sphere\n#\n# The formula can be simplified to:\n#\n# (4/3) * pi * r^2\n#\n# In general, we can write the formula as:\n#\n# (4/3) * pi * r^3\n#\n# where r is the radius of the sphere.\n#\n# If the radius is known, then we can write the formula as:\n#\n# (4/3) * pi * r^2\n#\n# and we can simplify to:\n#\n# (4/3) * pi * r\n#\n# This method can be used to simplify the formula for a sphere of radius r\ndef sphere_surface_area(r):\n    return 4.0 * 3.14159 * r * r * r\n\n# Calculate the surface area of a sphere of radius r\nprint(sphere_surface_area(1.0))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius):\n    return math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    assert surface_area(4) == 8, \"sphere area\"\n    assert surface_area(5) == 12, \"sphere area\"\n    assert surface_area(6) == 16, \"sphere area\"\n    assert surface_area(7) == 20, \"sphere area\"\n    assert surface_area(8) == 24, \"sphere area\"\n    assert surface_area(9) == 28, \"sphere area\"\n    assert surface_area(10) == 32, \"sphere area\"\n    assert surface_area(11) == 36, \"sphere area\"\n    assert surface_area(12) == 40, \"sphere area\"\n    assert surface_area(13) == 44, \"sphere area\"\n    assert surface_area(14) == 48, \"sphere area\"\n    assert surface_area(15) == 52, \"sphere area\"\n    assert surface_area(16) == 56, \"sphere area\"\n    assert surface_area(17) == 60, \"sphere area\"\n    assert surface_area(18) == 64, \"sphere area\"\n    assert surface_area(19) == 68, \"sphere area\"\n    assert surface_area(20) == 72, \"sphere area\"\n    assert surface_area(21) == 76, \"sphere area\"\n    assert surface_area(22) == 80, \"sphere area\"\n    assert surface_area(23) == 84, \"sphere area\"\n    assert surface_area(24) == 88, \"sphere area\"\n    assert surface_area(25) == 92, \"sphere area\"\n    assert surface_area(26) == 96, \"sphere area\"\n    assert surface_area(27) == 100, \"sphere area\"\n    assert surface_area(28) == 104, \"sphere area\"\n    assert surface_area(29) == 108, \"sphere area\"\n    assert surface_area(30) == 112, \"sphere area\"\n    assert surface_area(31) == 116, \"sphere area\""
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def sphere_surface_area(radius):\n    \"\"\"\n    Returns the surface area of a sphere with a given radius.\n\n    :type radius: int\n    :rtype: float\n    \"\"\"\n    return 4 * 3.1415926 * radius ** 2\n\nif __name__ == \"__main__\":\n    print sphere_surface_area(5)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "import math\n\ndef sphere_area(radius):\n    \"\"\"\n    Calculate the area of a sphere.\n\n    :param radius: The radius of the sphere.\n    :return: The area of the sphere.\n    \"\"\"\n    return math.pi * radius * radius\n\ndef main():\n    \"\"\"\n    Test the sphere_area function.\n    \"\"\"\n    assert sphere_area(1) == math.pi, \"The result is not correct.\"\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point(%.2f, %.2f)\" % (self.x, self.y)\n\n\nclass Solution(object):\n    def sphereArea(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return (x ** 2 + y ** 2 + z ** 2) ** 0.5\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.sphereArea(1, 1, 1) == 4.0\n    assert s.sphereArea(1, 1, 2) == 4.0\n    assert s.sphereArea(1, 1, 0) == 0.0\n    assert s.sphereArea(0, 0, 0) == 0.0\n    assert s.sphereArea(0, 0, 1) == 0.0\n    assert s.sphereArea(0, 0, -1) == 0.0\n    assert s.sphereArea(0, 0, -2) == 0.0\n    assert s.sphereArea(-1, 1, 1) == 4.0\n    assert s.sphereArea(-1, 1, 2) == 4.0\n    assert s.sphereArea(-1, 1, 0) == 0.0\n    assert s.sphereArea(1, -1, 1) == 4.0\n    assert s.sphereArea(1, -1, 2) == 4.0\n    assert s.sphereArea(1, -1, 0) == 0.0\n    assert s.sphereArea(1, -1, -1) == 4.0\n    assert s.sphereArea(1, -1, -2) == 4.0\n    assert s.sphereArea(1, -1, -3) == 4.0\n    assert s.sphereArea(1, -1, -4) == 4.0"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def sphereArea(radius):\n    \"\"\"\n    Inputs:\n    radius - radius of the sphere\n\n    Outputs:\n    surfaceArea - surface area of the sphere\n    \"\"\"\n    surfaceArea = 4 * radius * radius * 3.14159\n    return surfaceArea\n\n# Test cases\nassert sphereArea(1) == 4.0\nassert sphereArea(2) == 8.0\nassert sphereArea(3) == 12.0\nassert sphereArea(4) == 16.0\nassert sphereArea(5) == 20.0\nassert sphereArea(6) == 24.0\nassert sphereArea(7) == 28.0\nassert sphereArea(8) == 32.0\nassert sphereArea(9) == 36.0\nassert sphereArea(10) == 40.0\nassert sphereArea(11) == 44.0\nassert sphereArea(12) == 48.0\nassert sphereArea(13) == 52.0\nassert sphereArea(14) == 56.0\nassert sphereArea(15) == 60.0\nassert sphereArea(16) == 64.0\nassert sphereArea(17) == 68.0\nassert sphereArea(18) == 72.0\nassert sphereArea(19) == 76.0\nassert sphereArea(20) == 80.0\nassert sphereArea(21) == 84.0\nassert sphereArea(22) == 88.0\nassert sphereArea(23) == 92.0\nassert sphereArea(24) == 96.0\nassert sphereArea(25) == 100.0\nassert sphereArea(26) == 104.0\nassert sphereArea(27) == 108.0\nassert sphereArea(28) == 112.0\nassert sphereArea(29) == 116.0\nassert sphereArea(30) == 120.0\nassert sphereArea(31) == 124.0\nassert sphereArea(32) == 128.0\nassert sphereArea(33) == 132.0\nassert sphereArea(34) == 136.0\nassert sphereArea(35) == 140.0\nassert sphereArea(36) == 144.0\nassert sphereArea(37) == 148.0\nassert sphereArea(38) == 152.0\nassert sphereArea(39) == 156.0\nassert sphereArea(40) == 160.0\nassert sphereArea(41"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def calculate(self, n):\n        return n * (n - 1) / 2\n\n\nif __name__ == \"__main__\":\n    assert Solution().calculate(1) == 0\n    assert Solution().calculate(2) == 4\n    assert Solution().calculate(3) == 12\n    assert Solution().calculate(4) == 36\n    assert Solution().calculate(5) == 144\n    assert Solution().calculate(6) == 360\n    assert Solution().calculate(7) == 1440\n    assert Solution().calculate(8) == 4320\n    assert Solution().calculate(9) == 1680\n    assert Solution().calculate(10) == 4320"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    :param radius: Radius of the sphere\n    :return: Surface area of the sphere\n    \"\"\"\n    return 4/3 * 3.14159 * radius ** 3\n\nif __name__ == \"__main__\":\n    assert sphere_area(1) == 4, \"Failed to calculate sphere area\"\n    assert sphere_area(3) == 8, \"Failed to calculate sphere area\""
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# The sphere's surface area is the square of the radius times the angle\n# between the two points that make up the circumference of the sphere.\n#\n# For example, the surface area of a sphere with radius 10 and a circumference of\n# 20 degrees is 100.\n\ndef sphere_surface_area(radius):\n    \"\"\"\n    Find the surface area of a sphere.\n\n    :param radius: The radius of the sphere.\n    :return: The surface area of the sphere.\n    \"\"\"\n    return radius * radius * 3.14159\n\n# Your sphere_surface_area function should return a float.\n#\n# Hint: Remember that the surface area of a sphere is the square of the radius\n# times the angle between the two points that make up the circumference of the\n# sphere.\n\nif __name__ == \"__main__\":\n    print sphere_surface_area(10)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    :param radius: radius of sphere\n    :return: surface area of sphere\n    \"\"\"\n    return 4.0 * radius * radius * radius\n\nif __name__ == '__main__':\n    assert sphere_area(0.0) == 4.0\n    assert sphere_area(1.0) == 4.0\n    assert sphere_area(2.0) == 8.0"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    Calculate the surface area of a sphere with a given radius.\n    :param radius: the radius of the sphere.\n    :return: the surface area of the sphere.\n    \"\"\"\n    return 4.0 / 3.0 * radius * radius * radius\n\nif __name__ == '__main__':\n    print sphere_area(5.0)\n    print sphere_area(1.0)\n    print sphere_area(0.0)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def sphere_area(r):\n    \"\"\"\n    :type r: float\n    :rtype: float\n    \"\"\"\n    return 4 * r * r * (math.pi - 2 * math.acos(1 - r * r))\n\nif __name__ == \"__main__\":\n    print(sphere_area(0.5))\n    print(sphere_area(1))\n    print(sphere_area(2))\n    print(sphere_area(3))\n    print(sphere_area(4))\n    print(sphere_area(5))\n    print(sphere_area(6))\n    print(sphere_area(7))\n    print(sphere_area(8))\n    print(sphere_area(9))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def sphere_area(radius):\n    \"\"\"\n    Write a function that calculates the surface area of a sphere.\n\n    Input:\n        radius: The radius of the sphere.\n    Output:\n        The surface area of the sphere.\n    \"\"\"\n\n    return 4 * radius * radius * pi\n\n\nprint sphere_area(1)\n# Output:\n#   The surface area of the sphere is 4 * 1 * pi = 4"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\ndef sphere_area(radius):\n    \"\"\"\n    Calculate the surface area of a sphere of given radius.\n    \"\"\"\n    return 4*pi*radius**3\n\nif __name__ == '__main__':\n    print sphere_area(5)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import math\n\n\ndef sphere_area(radius):\n    \"\"\"\n    Compute the surface area of a sphere using the formula:\n\n    :math:`S = \\\\frac{4 \\\\pi r^2}3`\n\n    :param radius: the radius of the sphere\n    :return: the surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * radius * radius * radius\n\n\nif __name__ == \"__main__\":\n    print(\"The surface area of a sphere with radius 1 is {}\".format(sphere_area(1)))\n    print(\"The surface area of a sphere with radius 2 is {}\".format(sphere_area(2)))\n    print(\"The surface area of a sphere with radius 3 is {}\".format(sphere_area(3)))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# The surface area of a sphere is the area of a sphere, divided by the\n# volume of the sphere.\n\n# The volume of a sphere is the 4/3 * pi * r^3.\n\n# The surface area of a sphere is 4/3 pi r^2.\n\n# Write a function that takes an integer, r, and returns the surface area of\n# a sphere with that radius.\n\n# Hint: The surface area of a sphere is 4/3 pi r^2.\n\n# Examples:\n\n# >>> area_of_sphere(1)\n# 4\n\n# >>> area_of_sphere(2)\n# 8\n\n# >>> area_of_sphere(3)\n# 16\n\n# >>> area_of_sphere(4)\n# 32\n\n# >>> area_of_sphere(5)\n# 64\n\n# >>> area_of_sphere(6)\n# 96\n\n# >>> area_of_sphere(7)\n# 128\n\n# >>> area_of_sphere(8)\n# 256\n\n# >>> area_of_sphere(9)\n# 512\n\n# >>> area_of_sphere(10)\n# 1024\n\n# >>> area_of_sphere(11)\n# 2048\n\n# >>> area_of_sphere(12)\n# 4096\n\n# >>> area_of_sphere(13)\n# 8192\n\n# >>> area_of_sphere(14)\n# 16384\n\n# >>> area_of_sphere(15)\n# 32768\n\n# >>> area_of_sphere(16)\n# 65536\n\n# >>> area_of_sphere(17)\n# 131072\n\n# >>> area_of_sphere(18)\n# 262144\n\n# >>> area_of_sphere(19)\n# 524288\n\n# >>> area_of_sphere(20)\n# 1048576\n\n# >>> area_of_sphere(21)\n# 2097152\n\n# >>> area_of_sphere(22)\n# 4194304\n\n# >>> area_of_sphere(23)\n# 8388608\n\n# >>> area_of_sphere("
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Note:\n# 1. We have to know the radius of the sphere.\n# 2. We have to know the radius of the sphere.\n# 3. We have to know the radius of the sphere.\n# 4. We can't use a loop here, since it is not efficient.\n\n\n# def sphere_area(radius):\n#     \"\"\"\n#     :type radius: int\n#     :rtype: int\n#     \"\"\"\n#     return 4 / 3 * 3.14 * radius ** 2\n\n\ndef sphere_area(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    return (radius ** 2) * (3.14 / 4)\n\n\ndef test_sphere_area(radius):\n    assert sphere_area(radius) == 6.28"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    \"\"\"\n    Returns the surface area of a sphere of radius `radius`\n    \"\"\"\n    return math.pi * radius * radius\n\n\n# Your code should pass the following test case.\ntest_cases = [\n    (1, 0.0),\n    (2, 4.934),\n    (3, 12.566),\n    (4, 29.849),\n    (5, 74.594),\n    (6, 185.828),\n    (7, 441.443),\n    (8, 1085.829),\n    (9, 3085.829),\n    (10, 8785.829),\n    (11, 28785.829),\n    (12, 87853.829),\n    (13, 287853.829),\n    (14, 87853.829),\n    (15, 287853.829),\n    (16, 87853.829),\n    (17, 287853.829),\n    (18, 87853.829),\n    (19, 287853.829),\n    (20, 87853.829),\n    (21, 287853.829),\n    (22, 87853.829),\n    (23, 287853.829),\n    (24, 87853.829),\n    (25, 287853.829),\n    (26, 87853.829),\n    (27, 287853.829),\n    (28, 87853.829),\n    (29, 287853.829),\n    (30, 87853.829),\n    (31, 287853.829),\n    (32, 87853.829),\n    (33, 287853.829),\n    (34, 87853.829),\n    (35, 287853.829),\n    (36, 87853.829),\n    (37, 287853.829),\n    (38, 87853.829),\n    (39, 287853.829),\n    (40"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def sphere_area(r):\n    \"\"\"\n    Compute the surface area of a sphere with radius r.\n\n    Example\n    >>> sphere_area(4)\n    12\n    >>> sphere_area(1)\n    4\n    \"\"\"\n    return 4 * 3.1415 * r * r\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# https://www.codechef.com/problems/SPHERE/\n# https://www.codechef.com/problems/SPHERE/source/2\n\ndef sphere(r):\n    \"\"\"\n    :type r: int\n    :rtype: int\n    \"\"\"\n    return 4 * r * r * r\n\n\ndef main():\n    print(sphere(1))\n    print(sphere(2))\n    print(sphere(3))\n\n\nif __name__ == '__main__':\n    main()"
    }
  ]
}