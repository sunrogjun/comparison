{
  "timestamp": "2025-09-14T18:14:25.036576",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 118,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    >>> magic_square(3)\n    9\n    >>> magic_square(4)\n    25\n    >>> magic_square(5)\n    125\n    >>> magic_square(6)\n    525\n    >>> magic_square(7)\n    3125\n    >>> magic_square(8)\n    15625\n    >>> magic_square(9)\n    15625\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 25\n    elif n == 6:\n        return 36\n    elif n == 7:\n        return 49\n    elif n == 8:\n        return 64\n    elif n == 9:\n        return 81\n    elif n == 10:\n        return 100\n    else:\n        return magic_square(n-1) * magic_square(n-2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    try:\n        while True:\n            n = int(input(\"Please enter a number: \"))\n            print(\"magic square for %d is %d\" % (n, magic_square(n)))\n    except (ValueError, TypeError):\n        pass"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def magic_square(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return 1\n    if a == b:\n        return a * a\n    if a % 2 == 0 and b % 2 == 0:\n        return magic_square(a / 2, b / 2) + magic_square(a / 2, b / 2 + 1) + magic_square(a / 2 + 1, b / 2) + magic_square(a / 2 + 1, b / 2 + 1)\n    elif a % 2 == 0 and b % 2 == 1:\n        return magic_square(a / 2, b / 2) + magic_square(a / 2, b / 2 + 1) + magic_square(a / 2 + 1, b / 2) + magic_square(a / 2 + 1, b / 2 + 1) + magic_square(a / 2, b / 2 + 1) + magic_square(a / 2 + 1, b / 2)\n    elif a % 2 == 1 and b % 2 == 0:\n        return magic_square(a / 2, b / 2) + magic_square(a / 2 + 1, b / 2) + magic_square(a / 2, b / 2 + 1) + magic_square(a / 2 + 1, b / 2) + magic_square(a / 2 + 1, b / 2 + 1)\n    else:\n        return magic_square(a / 2, b / 2) + magic_square(a / 2 + 1, b / 2) + magic_square(a / 2, b / 2 + 1) + magic_square(a / 2 + 1, b / 2) + magic_square(a / 2 + 1, b / 2 + 1) + magic_square(a / 2, b / 2 + 1) + magic_square(a / 2 + 1, b / 2)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import math\nimport time\n\ndef magic_square(n):\n    \"\"\"\n    Compute the magic square.\n    :param n:\n    :return:\n    \"\"\"\n    # 1. Compute the size of square\n    m = math.sqrt(n)\n\n    # 2. Compute the size of square\n    # 3. Compute the size of square\n    # 4. Compute the size of square\n    # 5. Compute the size of square\n    # 6. Compute the size of square\n    # 7. Compute the size of square\n    # 8. Compute the size of square\n    # 9. Compute the size of square\n    # 10. Compute the size of square\n    # 11. Compute the size of square\n    # 12. Compute the size of square\n    # 13. Compute the size of square\n    # 14. Compute the size of square\n    # 15. Compute the size of square\n    # 16. Compute the size of square\n    # 17. Compute the size of square\n    # 18. Compute the size of square\n    # 19. Compute the size of square\n    # 20. Compute the size of square\n    # 21. Compute the size of square\n    # 22. Compute the size of square\n    # 23. Compute the size of square\n    # 24. Compute the size of square\n    # 25. Compute the size of square\n    # 26. Compute the size of square\n    # 27. Compute the size of square\n    # 28. Compute the size of square\n    # 29. Compute the size of square\n    # 30. Compute the size of square\n    # 31. Compute the size of square\n    # 32. Compute the size of square\n    # 33. Compute the size of square\n    # 34. Compute the size of square\n    # 35. Compute the size of square\n    # 36. Compute the size of square\n    # 37. Compute the size of square\n    # 38. Compute the size of square\n    # 39. Compute the size of square\n    # 40. Compute the size of square\n    # 41. Compute the size of square\n    # 42. Compute the size of"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Calculate magic square.\n\n    :param n: the size of the square\n    :return: the magic square\n    \"\"\"\n\n    # If n is less than 0, return 0\n    if n < 0:\n        return 0\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n * n\n\n    # If n is greater than the square size, return square size\n    if n > n * n:\n        return n"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Definition for a magic square\nclass MagicSquare(object):\n    def __init__(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        self.n = n\n        self.magic = [\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1]]\n\n    def get_magic_square(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        for i in range(self.n):\n            for j in range(self.n):\n                if i == j:\n                    continue\n                if self.magic[i][j] == 1:\n                    return 1\n        return 0\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert MagicSquare(4).get_magic_square() == 16, \"Example\"\n    assert MagicSquare(9).get_magic_square() == 36, \"Example\"\n    assert MagicSquare(10).get_magic_square() == 55, \"Example\"\n    assert MagicSquare(15).get_magic_square() == 55, \"Example\"\n    assert MagicSquare(17).get_magic_square() == 55, \"Example\"\n    assert MagicSquare(20).get_magic_square() == 55, \"Example\"\n    assert MagicSquare(25).get_magic_square() == 55, \"Example"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    Input:\n    n - the size of the square.\n    Output:\n    The magic square as a square of size n.\n    \"\"\"\n    if n == 1:\n        return [[1]]\n    if n == 2:\n        return [[1,1], [1,0], [0,1]]\n    if n == 3:\n        return [[1,1,1], [1,0,0], [0,0,1], [1,0,0], [0,0,0]]\n    if n == 4:\n        return [[1,1,1,1], [1,0,0,0], [0,0,1,0], [0,0,0,1], [1,0,0,0], [0,0,0,0]]\n    if n == 5:\n        return [[1,1,1,1,1], [1,0,0,0,0], [0,0,1,0,0], [0,0,0,1,0], [0,0,0,0,1], [1,0,0,0,0], [0,0,0,0,0]]\n    if n == 6:\n        return [[1,1,1,1,1,1], [1,0,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [1,0,0,0,0,0], [0,0,0,0,0,0]]\n    if n == 7:\n        return [[1,1,1,1,1,1,1], [1,0,0,0,0,0,0], [0,0,1,0,0,0,0], [0,0,0,1,0,0,0], [0,0,0,0,1,0,0], [0,0,0,0,0,1,0], [0,0,0,0,0"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Return magic square with given size.\n    \"\"\"\n    return [[x for x in range(n)] for y in range(n)]\n\n# Your MagicSquare object will be instantiated and called as such:\n# obj = MagicSquare(n)\n# param_1 = obj.magic_square(n)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class MagicSquare:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.size = 0\n        self.magic_square = [[0 for _ in range(self.size)] for _ in range(self.size)]\n\n    def set_matrix(self, matrix):\n        \"\"\"\n        Set matrix to the magic square.\n        :type matrix: List[List[int]]\n        \"\"\"\n        self.size = len(matrix)\n        for i in range(self.size):\n            for j in range(self.size):\n                if i == j:\n                    self.magic_square[i][j] = 1\n                else:\n                    self.magic_square[i][j] = 0\n        for i in range(self.size):\n            for j in range(i, self.size):\n                if self.magic_square[i][j] == 0 and self.magic_square[j][i] == 0:\n                    self.magic_square[i][j] = 1\n        return self\n\n    def get_matrix(self):\n        \"\"\"\n        Get matrix from the magic square.\n        :rtype: List[List[int]]\n        \"\"\"\n        return self.magic_square\n\n    def calculate(self, n):\n        \"\"\"\n        Calculate magic square.\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        result = [[0 for _ in range(self.size)] for _ in range(self.size)]\n        for i in range(self.size):\n            for j in range(self.size):\n                if i == j:\n                    result[i][j] = 1\n                else:\n                    result[i][j] = 0\n        for i in range(self.size):\n            for j in range(i, self.size):\n                if result[i][j] == 1:\n                    result[i][j] = n\n        return result\n\n\n# Your MagicSquare object will be instantiated and called as such:\n# obj = MagicSquare()\n# param_1 = obj.set_matrix(matrix)\n# param_2 = obj.get_matrix()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/magic-square/\n# https://leetcode.com/problems/magic-square-ii/\n\nclass Solution:\n    # @return an integer\n    def calculate(self, n):\n        if n == 1:\n            return 1\n        else:\n            return (self.calculate(n - 1) + self.calculate(n - 2)) % n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.calculate(5))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n is the size of the magic square.\n    \"\"\"\n    if n % 4!= 0:\n        print(\"Not a magic square\")\n        return\n\n    m = n ** 2\n    s = 0\n    for i in range(1, m):\n        for j in range(1, m):\n            s += i ** 2 + j ** 2\n    print(s)\n\n\nif __name__ == \"__main__\":\n    magic_square(100)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n is the size of square.\n    Return a magic square of size n.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return n\n    if n == 3:\n        return 4\n    if n == 4:\n        return 16\n    \n    if n == 5:\n        return 64\n    if n == 6:\n        return 256\n    if n == 7:\n        return 1024\n    if n == 8:\n        return 4096\n    if n == 9:\n        return 16384\n    if n == 10:\n        return 65536\n    if n == 11:\n        return 262144\n    if n == 12:\n        return 1048576\n    if n == 13:\n        return 4194304\n    if n == 14:\n        return 16777216\n    if n == 15:\n        return 67108864\n    if n == 16:\n        return 268435456\n    if n == 17:\n        return 1073741824\n    if n == 18:\n        return 4294967296\n    if n == 19:\n        return 18446744073709551616\n    \n    return magic_square(n-1) + magic_square(n-2) + magic_square(n-3)\n\ndef test_magic_square():\n    \"\"\"\n    Test magic square\n    \"\"\"\n    assert magic_square(1) == 1\n    assert magic_square(2) == 4\n    assert magic_square(3) == 16\n    assert magic_square(4) == 64\n    assert magic_square(5) == 256\n    assert magic_square(6) == 1024\n    assert magic_square(7) == 4096\n    assert magic_square(8) == 16384\n    assert magic_square(9) == 65536\n    assert magic_square(10) == 262144\n    assert magic_square(11) == 1048576\n    assert magic_square(12) == 4194304\n    assert magic_square(13) == 16777216\n    assert magic_square(14) == 67108864\n    assert magic_square(15) == 268435456\n    assert magic_square"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n    return n*(n*n-1)/2\n\nif __name__ == '__main__':\n    print(magic_square(1))\n    print(magic_square(2))\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))\n    print(magic_square(7))\n    print(magic_square(8))\n    print(magic_square(9))\n    print(magic_square(10))\n    print(magic_square(11))\n    print(magic_square(12))\n    print(magic_square(13))\n    print(magic_square(14))\n    print(magic_square(15))\n    print(magic_square(16))\n    print(magic_square(17))\n    print(magic_square(18))\n    print(magic_square(19))\n    print(magic_square(20))\n    print(magic_square(21))\n    print(magic_square(22))\n    print(magic_square(23))\n    print(magic_square(24))\n    print(magic_square(25))\n    print(magic_square(26))\n    print(magic_square(27))\n    print(magic_square(28))\n    print(magic_square(29))\n    print(magic_square(30))\n    print(magic_square(31))\n    print(magic_square(32))\n    print(magic_square(33))\n    print(magic_square(34))\n    print(magic_square(35))\n    print(magic_square(36))\n    print(magic_square(37))\n    print(magic_square(38))\n    print(magic_square(39))\n    print(magic_square(40))\n    print(magic_square(41))\n    print(magic_square(42))\n    print(magic_square(43))\n    print(magic_square(44))\n    print(magic_square(45))\n    print(magic_square(46))\n    print"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Return the magic square of size n.\n    \"\"\"\n    return [[1 for i in range(n)] for j in range(n)]\n\ndef magic_square_recursive(n):\n    \"\"\"\n    Recursive version of magic square.\n    \"\"\"\n    if n == 1:\n        return [[1] for i in range(n)]\n    else:\n        return magic_square_recursive(n - 1) + [[1] * n for i in range(n)] + \\\n               magic_square_recursive(n - 1)\n\ndef magic_square_iterative(n):\n    \"\"\"\n    Iterative version of magic square.\n    \"\"\"\n    magic_square_matrix = [[0] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square_matrix[i][j] = 1\n            for k in range(n):\n                if i + k < n and j + k < n:\n                    magic_square_matrix[i][j] *= magic_square_matrix[i + k][j + k]\n    return magic_square_matrix\n\ndef magic_square_solution(n):\n    \"\"\"\n    Given n, return the magic square of size n.\n    \"\"\"\n    magic_square_matrix = [[0] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square_matrix[i][j] = 1\n            for k in range(n):\n                if i + k < n and j + k < n:\n                    magic_square_matrix[i][j] *= magic_square_matrix[i + k][j + k]\n    return magic_square_matrix\n\ndef main():\n    n = int(input())\n    print(magic_square(n))\n    print(magic_square_recursive(n))\n    print(magic_square_iterative(n))\n    print(magic_square_solution(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef magic_square(n):\n    \"\"\"\n    Calculate magic square.\n\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n    return sqrt(n * (n + 1)) * (n + 1)\n\n\nif __name__ == \"__main__\":\n    print(magic_square(10))\n    print(magic_square(100))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n = the number of rows and columns\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * (n * n - 1) / 2\n\nif __name__ == \"__main__\":\n    assert magic_square(1) == 1\n    assert magic_square(2) == 4\n    assert magic_square(3) == 15\n    assert magic_square(4) == 36\n    assert magic_square(5) == 225\n    assert magic_square(6) == 729\n    assert magic_square(7) == 4125\n    assert magic_square(8) == 16796\n    assert magic_square(9) == 58786\n    assert magic_square(10) == 269513\n    assert magic_square(11) == 993466\n    assert magic_square(12) == 4881576\n    assert magic_square(13) == 223397520\n    assert magic_square(14) == 977656960\n    assert magic_square(15) == 4491710400\n    assert magic_square(16) == 20930221408\n    assert magic_square(17) == 93543751296\n    assert magic_square(18) == 488157626504\n    assert magic_square(19) == 22339752024704\n    assert magic_square(20) == 9776569602698752\n    assert magic_square(21) == 449171040027157664\n    assert magic_square(22) == 2093022140827157664\n    assert magic_square(23) == 9354375129627157664\n    assert magic_square(24) == 48815762650427157664\n    assert magic_square(25) == 2233975202470427157664\n    assert magic_square(26) == 977656960269875265664\n    assert magic_square(27) == 449171040027157664265664\n    assert magic_square(28) == 2093022140827157664265664\n    assert magic_square(29) == 93543751296"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\n\ndef magic_square(n):\n    \"\"\"\n    Magic square is a square with side length n,\n    whose nth corner is the sum of the squares of its four neighbours.\n    For example, the magic square with side length 3 is:\n    1 + 1 + 1 + 2 = 8.\n    The sum of the squares of its neighbours is:\n    (1 + 1) + (1 + 2) + (2 + 1) + (2 + 2) = 26.\n    So the magic square with side length 3 is:\n    1 + 1 + 1 + 2 + 2 + 1 + 2 + 1 + 1 = 26.\n    You are given a number n.\n    Find the sum of the squares of its neighbours.\n    \"\"\"\n    return sum(math.pow(x, 2) for x in range(1, n + 1))\n\n\nif __name__ == \"__main__\":\n    print(magic_square(4))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from math import sqrt\n\nclass Solution:\n    def magicSquare(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        for x in range(1, n):\n            for y in range(x, n):\n                if x * x + y * y == n * n:\n                    return n * n\n        return 0\n\n\nif __name__ == '__main__':\n    print(Solution().magicSquare(1))\n    print(Solution().magicSquare(2))\n    print(Solution().magicSquare(3))\n    print(Solution().magicSquare(4))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n is an integer, the size of square.\n\n    Return the magic square, a square whose sides are equal to the\n    nth numbers from 1 to n.\n\n    >>> magic_square(3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    >>> magic_square(10)\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24, 25, 26, 27], [28, 29, 30, 31, 32, 33, 34, 35, 36]]\n    \"\"\"\n    if n <= 1:\n        return []\n\n    m = magic_square(n - 1)\n    return [[[i] * n for i in range(n)] for i in range(n)] + m\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from math import sqrt\nimport itertools\n\n\ndef is_magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    n = int(sqrt(n))\n    if n * n == n:\n        return True\n    return False\n\n\ndef calculate_magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n = int(sqrt(n))\n    if n * n == n:\n        return n * n\n    return n * n + n + n"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n    \n    if n % 2 == 0:\n        return False\n    if n == 1:\n        return True\n    \n    if n % 3 == 0:\n        return True\n    if n % 5 == 0:\n        return True\n    \n    return False\n\ndef main():\n    print(magic_square(4))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    magic square\n    n = size of square\n    \"\"\"\n    \n    for k in range(n):\n        for j in range(n):\n            for i in range(n):\n                print('%d' % (k*k + j*j + i*i), end='')\n            print()\n\n\"\"\"\nTest cases\n\"\"\"\n\nmagic_square(1)\nmagic_square(2)\nmagic_square(3)\nmagic_square(4)\nmagic_square(5)\nmagic_square(6)\nmagic_square(7)\nmagic_square(8)\nmagic_square(9)\nmagic_square(10)\nmagic_square(11)\nmagic_square(12)\nmagic_square(13)\nmagic_square(14)\nmagic_square(15)\nmagic_square(16)\nmagic_square(17)\nmagic_square(18)\nmagic_square(19)\nmagic_square(20)\nmagic_square(21)\nmagic_square(22)\nmagic_square(23)\nmagic_square(24)\nmagic_square(25)\nmagic_square(26)\nmagic_square(27)\nmagic_square(28)\nmagic_square(29)\nmagic_square(30)\nmagic_square(31)\nmagic_square(32)\nmagic_square(33)\nmagic_square(34)\nmagic_square(35)\nmagic_square(36)\nmagic_square(37)\nmagic_square(38)\nmagic_square(39)\nmagic_square(40)\nmagic_square(41)\nmagic_square(42)\nmagic_square(43)\nmagic_square(44)\nmagic_square(45)\nmagic_square(46)\nmagic_square(47)\nmagic_square(48)\nmagic_square(49)\nmagic_square(50)\nmagic_square(51)\nmagic_square(52)\nmagic_square(53)\nmagic_square(54)\nmagic_square(55)\nmagic_square(56)\nmagic_square(57)\nmagic_square(58)\nmagic_square(59)\nmagic_square(60)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n    return sum(map(lambda x: sum(map(lambda y: x*y, range(n))), range(n)))\n\nif __name__ == '__main__':\n    print magic_square(3)\n    print magic_square(4)\n    print magic_square(5)\n    print magic_square(6)\n    print magic_square(7)\n    print magic_square(8)\n    print magic_square(9)\n    print magic_square(10)\n    print magic_square(11)\n    print magic_square(12)\n    print magic_square(13)\n    print magic_square(14)\n    print magic_square(15)\n    print magic_square(16)\n    print magic_square(17)\n    print magic_square(18)\n    print magic_square(19)\n    print magic_square(20)\n    print magic_square(21)\n    print magic_square(22)\n    print magic_square(23)\n    print magic_square(24)\n    print magic_square(25)\n    print magic_square(26)\n    print magic_square(27)\n    print magic_square(28)\n    print magic_square(29)\n    print magic_square(30)\n    print magic_square(31)\n    print magic_square(32)\n    print magic_square(33)\n    print magic_square(34)\n    print magic_square(35)\n    print magic_square(36)\n    print magic_square(37)\n    print magic_square(38)\n    print magic_square(39)\n    print magic_square(40)\n    print magic_square(41)\n    print magic_square(42)\n    print magic_square(43)\n    print magic_square(44)\n    print magic_square(45)\n    print magic_square(46)\n    print magic_square(47)\n    print magic_square(48)\n    print magic_square(49)\n    print magic_square(50)\n    print magic_square(51)\n    print magic_"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import time\nstart_time = time.time()\n\n\ndef magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = 1\n    for i in range(n):\n        for j in range(i, n):\n            if (i * i + j * j) == (n * n):\n                res = res * res\n    return res\n\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    n = int(input())\n    res = magic_square(n)\n    print(res)\n    print('--- %s seconds ---' % (time.time() - start_time))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n is the square number.\n    Return the magic square number.\n    \"\"\"\n    if n < 0 or n > 100:\n        return -1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    if n == 4:\n        return 9\n    if n == 5:\n        return 16\n    if n == 6:\n        return 25\n    if n == 7:\n        return 36\n    if n == 8:\n        return 49\n    if n == 9:\n        return 64\n    if n == 10:\n        return 81\n    if n == 11:\n        return 100\n    if n == 12:\n        return 125\n    if n == 13:\n        return 144\n    if n == 14:\n        return 169\n    if n == 15:\n        return 196\n    if n == 16:\n        return 225\n    if n == 17:\n        return 256\n    if n == 18:\n        return 289\n    if n == 19:\n        return 324\n    if n == 20:\n        return 361\n    if n == 21:\n        return 400\n    if n == 22:\n        return 425\n    if n == 23:\n        return 496\n    if n == 24:\n        return 625\n    if n == 25:\n        return 729\n    if n == 26:\n        return 864\n    if n == 27:\n        return 1000\n    if n == 28:\n        return 1225\n    if n == 29:\n        return 1536\n    if n == 30:\n        return 1792\n    if n == 31:\n        return 2048\n    if n == 32:\n        return 2560\n    if n == 33:\n        return 3072\n    if n == 34:\n        return 3648\n    if n == 35:\n        return 4096\n    if n == 36:\n        return 4528\n    if n == 37:\n        return 5120\n    if n == 38:\n        return 5632\n    if n == 39:\n        return 6144\n    if n == 40:\n        return 7168"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        :type cipher: str\n        :rtype: str\n        \"\"\"\n        n = cipher[0]\n        magic = 0\n        for i in xrange(1, int(n)):\n            magic += int(i**2)\n        magic += int(n**2)\n        magic /= 2\n        magic = int(sqrt(magic))\n        magic = str(magic)\n        if len(magic)!= n:\n            magic = \"0\" + magic\n        return magic\n\nif __name__ == '__main__':\n    print Solution().solve(\"3\")\n    print Solution().solve(\"12\")\n    print Solution().solve(\"123\")"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "#magic square\ndef magic_square(size):\n    \"\"\"\n    Function to calculate the magic square.\n    size - the size of the square.\n    \"\"\"\n    return [[1] * size for i in range(size)]\n\n\n#test\ndef test():\n    assert magic_square(3) == [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    assert magic_square(4) == [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n    assert magic_square(5) == [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]\n    assert magic_square(6) == [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]\n    assert magic_square(7) == [[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]]\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n\n    magic_square(n) -> int\n    Input: n = an integer\n    Output: A magic square number\n    \"\"\"\n    n = n ** 2\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i % j == 0 and j % i == 0:\n                return n\n    return n\n\n\nif __name__ == '__main__':\n    print magic_square(4)\n    print magic_square(7)\n    print magic_square(8)\n    print magic_square(9)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# https://www.hackerearth.com/problem/algorithm/magic-square/\n\ndef magic_square(size):\n    square_size = size**2\n    result = [[0 for i in range(square_size)] for j in range(square_size)]\n    for i in range(square_size):\n        for j in range(square_size):\n            result[i][j] = 1\n            for k in range(square_size):\n                result[i][j] *= result[i][k] * result[k][j]\n    return result\n\ndef main():\n    size = int(input())\n    print(magic_square(size))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "import math\n\ndef magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n    if n % 4 == 0:\n        return True\n    else:\n        return False\n\n\ndef test_magic_square(n):\n    \"\"\"\n    Test magic square function.\n    \"\"\"\n    print(\"Magic square: \", magic_square(n))\n    assert magic_square(n) == True\n\nif __name__ == '__main__':\n    print(magic_square(1))\n    print(magic_square(2))\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))\n    print(magic_square(7))\n    print(magic_square(8))\n    print(magic_square(9))\n    print(magic_square(10))\n    print(magic_square(11))\n    print(magic_square(12))\n    print(magic_square(13))\n    print(magic_square(14))\n    print(magic_square(15))\n    print(magic_square(16))\n    print(magic_square(17))\n    print(magic_square(18))\n    print(magic_square(19))\n    print(magic_square(20))\n    print(magic_square(21))\n    print(magic_square(22))\n    print(magic_square(23))\n    print(magic_square(24))\n    print(magic_square(25))\n    print(magic_square(26))\n    print(magic_square(27))\n    print(magic_square(28))\n    print(magic_square(29))\n    print(magic_square(30))\n    print(magic_square(31))\n    print(magic_square(32))\n    print(magic_square(33))\n    print(magic_square(34))\n    print(magic_square(35))\n    print(magic_square(36))\n    print(magic_square(37))\n    print(magic_square(38))\n    print(magic_square(39))\n    print(magic_square(40))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Calculate magic square of a given number.\n    \n    n: integer, the magic square size\n    \n    Return a list of lists of integers representing the magic square.\n    \n    Example:\n    \n    >>> magic_square(10)\n    [[1, 4, 13, 24, 35, 46, 57, 68, 79, 90],\n     [16, 25, 41, 56, 67, 78, 89, 100, 101, 112],\n     [32, 49, 64, 81, 92, 103, 114, 125, 136, 147],\n     [48, 65, 80, 95, 106, 117, 128, 139, 150, 161],\n     [64, 81, 96, 107, 118, 129, 140, 151, 162, 173],\n     [80, 95, 108, 119, 130, 141, 152, 163, 174, 185],\n     [96, 107, 120, 131, 142, 153, 164, 175, 186, 197],\n     [112, 117, 122, 133, 144, 155, 166, 177, 188, 199],\n     [128, 139, 150, 161, 172, 183, 194, 200, 201, 212]]\n    \"\"\"\n    \n    # First, calculate the square of the size\n    s = n * n\n    \n    # Then, calculate the square of the square of the size\n    s_sq = s * s\n    \n    # Then, calculate the square of the square of the square of the size\n    s_sq_sq = s_sq * s_sq\n    \n    # Finally, calculate the square of the square of the square of the square of the size\n    s_sq_sq_sq = s_sq_sq * s_sq_sq\n    \n    # The magic square is the sum of the squares of the first, second, third, fourth, fifth,..., nth elements\n    magic_square = [sum(s_sq_sq_sq[:i]) for i in range(n)]\n    \n    return magic_square\n\nif __name__ == '__main__':\n    \"\"\"\n    Test cases\n    \"\"\"\n    \n    # Test 1\n    print(magic_square(10))\n    \n    # Test 2"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def calculate_magic_square(x, y):\n    \"\"\"\n    Input:\n    x: an integer\n    y: an integer\n    Output:\n    a list of integers\n    \"\"\"\n    if x == y == 1:\n        return [1]\n    if x == y == 2:\n        return [1, 1]\n    if x == 1:\n        return [1, 2, 3]\n    if y == 1:\n        return [2, 3, 4]\n    if x == 2 and y == 2:\n        return [1, 2, 3, 4, 5]\n    if x == 2 and y == 1:\n        return [1, 2, 3, 5]\n    if x == 1 and y == 2:\n        return [2, 3, 4, 5]\n    if x == 2 and y == 3:\n        return [3, 4, 5, 6]\n    if x == 3 and y == 2:\n        return [4, 5, 6, 7, 8]\n    if x == 3 and y == 1:\n        return [5, 6, 7, 8]\n    if x == 3 and y == 3:\n        return [6, 7, 8]\n    if x == 4 and y == 2:\n        return [7, 8]\n    if x == 4 and y == 3:\n        return [8]\n    if x == 4 and y == 1:\n        return [7]\n    if x == 4 and y == 1:\n        return [8]\n    if x == 2 and y == 4:\n        return [3, 4, 5, 6, 7, 8]\n    if x == 2 and y == 3:\n        return [3, 4, 5, 7, 8]\n    if x == 2 and y == 1:\n        return [3, 4, 5, 7]\n    if x == 3 and y == 4:\n        return [4, 5, 6, 7, 8]\n    if x == 3 and y == 3:\n        return [4, 5, 6, 7]\n    if x == 3 and y == 1:\n        return [4, 5, 6]\n    if x == 4 and y == 4:\n        return [5, 6, 7, 8]"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# The magic square is a square with the same number of rows and columns\n# which consists of the same numbers in a specific order.\n# If the numbers in the square are arranged in a row, then the numbers are\n# arranged in a column.\n# For example, the magic square with numbers [1, 2, 3, 4, 5, 6, 7, 8, 9,\n# 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] is the magic square with\n# numbers [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n# 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n# 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n# 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n# 19, 20]\n#\n# Note:\n# The number of rows and columns of the magic square is at least 10.\n# The sum of the numbers in each row is equal to the square of the sum of the\n# numbers in the row.\n# The sum of the numbers in each column is equal to the square of the sum of\n# the numbers in the column.\n# The magic square is a square with the same number of rows and columns\n# which consists of the same numbers in a specific order.\n# If the numbers in the square are arranged in a row, then the numbers are\n# arranged in a column.\n\ndef magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    n = int(n)\n    return n * (n + 1) // 2\n\nif __name__ == \"__main__\":\n    print(magic_square(10))\n    print(magic_square(100))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n    if n == 1:\n        return [[1]]\n    if n == 2:\n        return [[1, 1], [1, -1], [-1, 1], [-1, -1]]\n    if n == 3:\n        return [[1, 1, 1], [1, -1, -1], [-1, 1, -1], [-1, -1, 1]]\n    if n == 4:\n        return [[1, 1, 1, 1], [1, -1, -1, -1], [-1, 1, -1, 1], [-1, -1, 1, -1]]\n    if n == 5:\n        return [[1, 1, 1, 1, 1], [1, -1, -1, -1, -1], [-1, 1, -1, -1, 1], [-1, -1, 1, 1, -1], [1, 1, -1, -1, -1]]\n    if n == 6:\n        return [[1, 1, 1, 1, 1, 1], [1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, 1], [-1, -1, 1, 1, -1, -1], [1, 1, -1, -1, 1, -1], [1, -1, -1, 1, -1, 1]]\n    if n == 7:\n        return [[1, 1, 1, 1, 1, 1, 1], [1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, 1], [-1, -1, 1, 1, -1, 1, -1], [1, 1, -1, -1, 1, -1, -1], [1, -1, 1, -1, -1, 1, -1], [1, -1, -1, 1, 1, -1, 1]]\n    if n == 8:\n        return [[1, 1, 1, 1,"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "import math\n\ndef magic_square(n):\n    \"\"\"\n    Calculate magic square.\n\n    :param n: Size of the square.\n    :return: The magic square.\n    \"\"\"\n    return math.factorial(n) / (math.factorial(n) * math.factorial(n))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))\n    print(magic_square(7))\n    print(magic_square(8))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n: number of rows\n    \"\"\"\n    if n < 1:\n        return 0\n    magic_square_table = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square_table[i][j] = 1 if i == j else 0\n    return magic_square_table\n\ndef main():\n    \"\"\"\n    Main entry of program\n    \"\"\"\n    n = int(input(\"Enter number of rows: \"))\n    print(\"Magic square for\", n, \"rows is:\")\n    print(magic_square(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "def magic_square(n):\n    if n <= 1:\n        return n\n    m = n\n    while m > 1:\n        if m % 2 == 0:\n            m = m / 2\n        else:\n            m = 3 * m + 1\n    magic_square(m)\n    return m\n\nprint magic_square(3)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def magic(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        magic = [[0] * n for i in range(n)]\n        magic[0][0] = magic[1][1] = 1\n        magic[2][2] = magic[3][3] = 1\n        for i in range(4):\n            for j in range(4):\n                magic[i][j] = magic[i][3 - j] + magic[3 - i][j]\n        return magic[0][0] * magic[1][1] * magic[2][2] * magic[3][3]"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    magic square is square of numbers in a given range.\n    n is the size of the range.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    magic_square = [[0] * (n + 1) for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            magic_square[i][j] = magic_square[i - 1][j - 1] + magic_square[i - 1][j] + magic_square[i - 1][j - 1]\n\n    return magic_square[n][n]\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(magic_square(n))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import math\nimport sys\n\ndef magic_square(n):\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 4\n    if n == 4:\n        return 9\n    if n == 5:\n        return 16\n    if n == 6:\n        return 25\n    if n == 7:\n        return 36\n    if n == 8:\n        return 49\n    if n == 9:\n        return 64\n    if n == 10:\n        return 81\n    # recursively calculate magic square\n    return magic_square(n - 1) + magic_square(n - 2)\n\nif __name__ == '__main__':\n    for n in range(1, 11):\n        print(n, \":\", magic_square(n))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Calculate magic square.\n\n    >>> magic_square(1)\n    [[1]]\n    >>> magic_square(2)\n    [[1, 1], [1, -1], [-1, 1], [-1, -1]]\n    >>> magic_square(3)\n    [[1, 1, 1], [1, -1, 1], [1, 1, -1], [-1, 1, 1], [-1, -1, 1], [-1, 1, -1], [-1, -1, 1]]\n    >>> magic_square(4)\n    [[1, 1, 1, 1], [1, -1, 1, 1], [1, 1, -1, 1], [-1, 1, 1, 1], [-1, -1, 1, 1], [-1, 1, -1, 1], [-1, -1, 1, 1]]\n    >>> magic_square(5)\n    [[1, 1, 1, 1, 1], [1, -1, 1, 1, 1], [1, 1, -1, 1, 1], [1, 1, 1, -1, 1], [-1, 1, 1, 1, 1], [-1, -1, 1, 1, 1], [-1, 1, 1, -1, 1], [-1, -1, 1, 1, 1], [-1, 1, 1, -1, 1], [-1, -1, 1, 1, 1], [-1, 1, -1, 1, 1], [-1, -1, -1, 1, 1], [-1, 1, -1, 1, 1], [-1, -1, 1, -1, 1], [-1, 1, -1, 1, 1], [-1, -1, 1, -1, 1], [-1, 1, -1, 1, 1], [-1, -1, 1, -1, 1], [-1, 1, -1, 1, 1], [-1, -1, -1, 1, 1], [-1, 1, -1, 1, 1], [-1, -1, -1, 1, 1], [-1, 1, -1, 1, 1], [-1, -1, -1, 1,"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import math\n\ndef magic_square(n):\n    \"\"\"\n    Calculate the magic square of the given number n.\n    \"\"\"\n    # Calculate the square root of n\n    sqrt_n = math.sqrt(n)\n\n    # Calculate the square root of n mod 2\n    sqrt_n_mod_2 = math.sqrt(n % 2)\n\n    # Calculate the magic number\n    magic_number = math.floor(sqrt_n / 2)\n\n    # Calculate the magic number mod 2\n    magic_number_mod_2 = math.floor(sqrt_n_mod_2 / 2)\n\n    # Calculate the magic square\n    magic_square = magic_number * magic_number + magic_number_mod_2 * magic_number_mod_2\n\n    return magic_square\n\nif __name__ == \"__main__\":\n    print(magic_square(10))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n = square of n\n    \"\"\"\n    return sum(i*i for i in range(1, n+1))\n\ndef test(n):\n    assert magic_square(n) == n*n*n\n\nif __name__ == '__main__':\n    test(5)\n    test(9)\n    test(10)\n    test(20)\n    test(100)\n    test(1000)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n\n    n: A positive integer\n\n    Return the sum of all positive integers which are the smallest\n    possible values for a square of side n.\n    \"\"\"\n    return sum(\n        [\n            (\n                (i ** 2) + (j ** 2)\n            ) for i in range(1, n + 1)\n            for j in range(1, n + 1)\n            if (i ** 2 + j ** 2) == (n ** 2)\n        ]\n    )\n\n\nif __name__ == '__main__':\n    print(magic_square(3))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Calculate magic square.\n    \n    n - number of rows and columns.\n    \n    >>> magic_square(1)\n    [[1]]\n    >>> magic_square(2)\n    [[1, 1], [1, 2], [2, 1], [2, 2]]\n    >>> magic_square(3)\n    [[1, 1, 1], [1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 1, 2], [1, 2, 2], [2, 1, 2], [2, 2, 2]]\n    \"\"\"\n    \n    if n < 1:\n        return []\n    if n == 1:\n        return [[1]]\n    if n == 2:\n        return [[1, 1], [1, 2], [2, 1], [2, 2]]\n    \n    row = [1] * (n + 1)\n    col = [1] * (n + 1)\n    row[0] = col[0] = 1\n    \n    for i in range(1, n + 1):\n        row[i] = [sum(row[r - 1] + [row[r - 1][j] + row[r - 1][j + 1] for j in range(0, i)] + [row[r - 1][j + 1] + row[r - 1][j] for j in range(1, i)]) for r in range(1, i + 1)]\n        col[i] = [sum(col[c - 1] + [col[c - 1][j] + col[c - 1][j + 1] for j in range(0, i)] + [col[c - 1][j + 1] + col[c - 1][j] for j in range(1, i)]) for c in range(1, i + 1)]\n    \n    return [row, col]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Magic square is a square whose side length is the square of the\n    smallest positive integer that is evenly divisible by the square\n    of the smallest positive integer less than or equal to the square\n    of the largest positive integer.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * (n * (n + 1) / 2)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(magic_square(n))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import sys\n\ndef calc_magic_square(size):\n    \"\"\"\n    Calculate magic square.\n\n    :type size: int\n    :rtype: int\n    \"\"\"\n    if size < 1:\n        return 0\n    magic = [[0 for x in range(size)] for y in range(size)]\n    for i in range(size):\n        for j in range(size):\n            magic[i][j] = i * j\n    return sum(magic[i][j] for i in range(size) for j in range(size))\n\n\ndef main():\n    size = int(sys.argv[1]) if len(sys.argv) > 1 else 10\n    print(calc_magic_square(size))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def magic_square(size):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n\n    def square(size):\n        \"\"\"\n        Write a function to calculate magic square.\n        \"\"\"\n        if size == 1:\n            return 1\n\n        return square(size - 1) + square(size - 2) + square(size - 3)\n\n    return square(size)\n\nprint(magic_square(3))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n\n    A magic square is a square made up of the same number of\n    elements in all the rows and columns.\n\n    Input:\n        n -- an integer, the size of square to calculate.\n\n    Output:\n        a list of integers, the magic square.\n    \"\"\"\n    \n    nums = [1] * n\n    for i in range(n - 1):\n        for j in range(n - i):\n            nums[i] = (nums[i] + nums[j]) % 10\n    return nums\n\nif __name__ == '__main__':\n    print(magic_square(4))\n    print(magic_square(6))\n    print(magic_square(10))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "class MagicSquare(object):\n    def __init__(self, size):\n        self.size = size\n        self.magic_square = [[0 for i in range(size)] for j in range(size)]\n\n    def write_magic_square(self):\n        for i in range(self.size):\n            for j in range(self.size):\n                self.magic_square[i][j] = 1\n\n    def calculate_magic_square(self):\n        for i in range(self.size):\n            for j in range(self.size):\n                if i > j:\n                    self.magic_square[i][j] = self.magic_square[i - 1][j] + self.magic_square[i][j - 1]\n                elif i < j:\n                    self.magic_square[i][j] = self.magic_square[i - 1][j] + self.magic_square[i][j + 1]\n                else:\n                    self.magic_square[i][j] = self.magic_square[i - 1][j] + self.magic_square[i + 1][j]\n\n    def get_magic_square(self):\n        return self.magic_square\n\n\nif __name__ == '__main__':\n    print MagicSquare(10).calculate_magic_square()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Calculate magic square\n    n = size of square\n    \"\"\"\n    if n <= 1:\n        return 0\n    else:\n        return sum(n*n)\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def magic_square(x):\n    magic_square = []\n    for i in range(x):\n        magic_square.append([])\n        for j in range(x):\n            magic_square[i].append([])\n            for k in range(x):\n                magic_square[i][j].append([])\n                for l in range(x):\n                    magic_square[i][j][k].append([])\n                    for m in range(x):\n                        magic_square[i][j][k][l].append('.')\n    for i in range(x):\n        for j in range(x):\n            for k in range(x):\n                for l in range(x):\n                    for m in range(x):\n                        for n in range(x):\n                            if magic_square[i][j][k][l][m] == '.' and magic_square[i][j][k][l][n] == '.' and magic_square[i][j][k][l][m] == '.' and magic_square[i][j][k][l][n] == '.' and magic_square[i][j][k][l][m] == '.' and magic_square[i][j][k][l][n] == '.' and magic_square[i][j][k][l][m] == '.' and magic_square[i][j][k][l][n] == '.' and magic_square[i][j][k][l][m] == '.' and magic_square[i][j][k][l][n] == '.' and magic_square[i][j][k][l][m] == '.' and magic_square[i][j][k][l][n] == '.' and magic_square[i][j][k][l][m] == '.' and magic_square[i][j][k][l][n] == '.' and magic_square[i][j][k][l][m] == '.' and magic_square[i][j][k][l][n] == '.':\n                            magic_square[i][j][k][l][m] = '#'\n    return magic_square\n\nif __name__ == '__main__':\n    magic"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "class Solution:\n    # @return a string\n    def getMagic(self, n):\n        return str(n * n)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n is a positive integer.\n    Return the magic square of n.\n    \"\"\"\n    magic_square = [[0] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                magic_square[i][j] = 1\n    return magic_square\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert magic_square(1) == [[0]]\n    assert magic_square(2) == [[0, 1], [1, 0]]\n    assert magic_square(3) == [[0, 1, 2], [1, 2, 0], [2, 0, 1]]\n    assert magic_square(4) == [[0, 1, 2, 3], [1, 2, 3, 0], [2, 3, 0, 1], [3, 0, 1, 2]]\n    assert magic_square(5) == [[0, 1, 2, 3, 4], [1, 2, 3, 4, 0], [2, 3, 4, 0, 1], [3, 4, 0, 1, 2], [4, 0, 1, 2, 3]]\n    assert magic_square(6) == [[0, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 0], [2, 3, 4, 5, 0, 1], [3, 4, 5, 0, 1, 2], [4, 5, 0, 1, 2, 3], [5, 0, 1, 2, 3, 4]]"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def calculate(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return 0\n        n = n * (n + 1) / 2\n        return n * (3 * n - 1) / 2"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def magic(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        res = 1\n        for i in range(1, n):\n            res = res * (n - i) / (i + 1)\n        res = res * (n - 1) / n\n        return res"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef magic_square(n):\n    \"\"\"\n    Calculate magic square using a recursion method.\n\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 25\n    elif n == 6:\n        return 36\n    elif n == 7:\n        return 49\n    elif n == 8:\n        return 64\n    elif n == 9:\n        return 81\n    elif n == 10:\n        return 100\n    else:\n        return magic_square(n - 1) * magic_square(n - 1)\n\nif __name__ == '__main__':\n    print magic_square(10)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    :param n: The number of rows and columns in the magic square.\n    :return: The magic square as a tuple of integers.\n    \"\"\"\n    magic_square = []\n    for i in range(n):\n        magic_square.append([0] * n)\n    for i in range(n):\n        for j in range(n):\n            magic_square[i][j] = i * n + j\n    for i in range(n):\n        for j in range(n):\n            magic_square[i][j] = magic_square[i][j] // n\n    return tuple(magic_square)\n\nif __name__ == '__main__':\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))\n    print(magic_square(7))\n    print(magic_square(8))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef magic_square(N):\n    \"\"\"\n    Calculate the NxN magic square.\n\n    :param N: N is the size of square.\n    :return: NxN magic square.\n    \"\"\"\n    N = int(N)\n    if N <= 1:\n        raise ValueError(\"N must be greater than 1.\")\n\n    m = np.zeros((N, N), dtype=int)\n    for i in range(N):\n        for j in range(N):\n            m[i][j] = 1 if i == j else 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            m[i][j] = np.sum(m[i][:j] + m[j][:i])\n    return m\n\n\nif __name__ == \"__main__\":\n    assert magic_square(2) == [[1, 1],\n                               [1, 0]]\n    assert magic_square(3) == [[1, 1, 1],\n                               [1, 0, 1],\n                               [1, 1, 0]]\n    assert magic_square(4) == [[1, 1, 1, 1],\n                               [1, 0, 1, 1],\n                               [1, 1, 0, 1],\n                               [1, 1, 1, 0]]"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import math\n\ndef magic_square(n):\n    \"\"\"\n    magic_square(n) -> square of n^2\n    \n    Returns the square of n^2.\n    \"\"\"\n    return n * (n * n - 1) // 2\n\ndef magic_square_recursive(n):\n    \"\"\"\n    magic_square_recursive(n) -> square of n^2\n    \n    Returns the square of n^2.\n    \"\"\"\n    if n == 1:\n        return n * (n * n - 1) // 2\n    else:\n        return magic_square_recursive(n - 1) * magic_square_recursive(n - 1)\n\ndef magic_square_iterative(n):\n    \"\"\"\n    magic_square_iterative(n) -> square of n^2\n    \n    Returns the square of n^2.\n    \"\"\"\n    return n * (n * n - 1) // 2\n\ndef magic_square_recursive_iterative(n):\n    \"\"\"\n    magic_square_recursive_iterative(n) -> square of n^2\n    \n    Returns the square of n^2.\n    \"\"\"\n    if n == 1:\n        return n * (n * n - 1) // 2\n    else:\n        return magic_square_recursive_iterative(n - 1) * magic_square_recursive_iterative(n - 1)\n\ndef magic_square_solution():\n    \"\"\"\n    magic_square_solution() -> square of n^2\n    \n    Returns the square of n^2.\n    \"\"\"\n    return magic_square(math.ceil(math.sqrt(magic_square(5))))\n\ndef magic_square_recursive_solution():\n    \"\"\"\n    magic_square_recursive_solution() -> square of n^2\n    \n    Returns the square of n^2.\n    \"\"\"\n    return magic_square_recursive(math.ceil(math.sqrt(magic_square(5))))\n\ndef magic_square_iterative_solution():\n    \"\"\"\n    magic_square_iterative_solution() -> square of n^2\n    \n    Returns the square of n^"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    magic square is a number which is the sum of the squares of its\n    n-digit neighbours.\n    \"\"\"\n\n    def magic_square_calculate(n):\n        \"\"\"\n        magic square calculate function.\n        \"\"\"\n        if n < 1:\n            return 0\n\n        sum_square = 0\n\n        for i in range(1, n + 1):\n            sum_square += sum(map(lambda x: x ** 2,\n                                  list(str(i))))\n\n        return sum_square\n\n    return magic_square_calculate(n)\n\nif __name__ == \"__main__\":\n    print magic_square(3)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import math\nfrom collections import defaultdict\n\ndef magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Calculate magic square\n    n = int(math.sqrt(n))\n    magic_square = [0 for i in range(n * n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square[i * n + j] = (i + j + 1) * (i + j + 2)\n    # Calculate the magic square using Dijkstra's algorithm\n    dist = defaultdict(lambda: math.inf)\n    dist[0] = 0\n    for i in range(n):\n        dist[i * n + i] = 0\n    for i in range(n):\n        for j in range(n):\n            if dist[(i * n + j) * n + i] < math.inf:\n                for k in range(n):\n                    if dist[(i * n + k) * n + j] + magic_square[(i * n + j) * n + k] < dist[(i * n + k) * n + i] + magic_square[(k * n + j) * n + i]:\n                        dist[(i * n + k) * n + i] = dist[(i * n + j) * n + k] + magic_square[(i * n + j) * n + k]\n    return dist[(n * n - 1) * n + n * n - 1]\n\nif __name__ == '__main__':\n    print(magic_square(10))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import sys\n\ndef magic_square(n):\n    \"\"\"\n    Calculate magic square.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    x = 1\n    y = 1\n    z = 1\n\n    while True:\n        x = x * x\n        y = y * y\n        z = z * z\n\n        if x + y + z == n:\n            return x + y + z\n        if x * y + y * z + z * x == n:\n            return x * y * z\n        if x * y * z + y * z + x * z == n:\n            return x * y * z\n        if x * y * z + x * z + y * z == n:\n            return x * y * z\n\n\n\nif __name__ == \"__main__\":\n    n = int(sys.argv[1])\n    print magic_square(n)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "# https://www.youtube.com/watch?v=k3Wm2XF8zIc\n\ndef magic_square(a, b, c):\n    return a ** 2 + b ** 2 + c ** 2\n\nif __name__ == \"__main__\":\n    print(magic_square(1, 2, 3))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/magic-square/problem\ndef magic_square(n):\n    m = n * n\n    l = n * (n + 1) / 2\n    s = 0\n    for i in range(l):\n        s += m - i - 1\n    return s\n\nif __name__ == '__main__':\n    t = int(input())\n    for a0 in range(t):\n        n = int(input())\n        print(magic_square(n))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import math\n\ndef magic_square(n):\n    if n < 0 or n > 100:\n        raise ValueError(\"n must be between 0 and 100\")\n    magic_square_n = [[0] * n for i in range(n)]\n    magic_square_n[0][0] = 1\n    for i in range(1, n):\n        for j in range(1, n):\n            magic_square_n[i][j] = magic_square_n[i - 1][j] + magic_square_n[i][j - 1] + magic_square_n[i - 1][j - 1]\n    return magic_square_n[n - 1][n - 1]\n\ndef main():\n    for n in range(1, 100):\n        print(magic_square(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (n + 1) / 2\n\n\nif __name__ == '__main__':\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))\n    print(magic_square(7))\n    print(magic_square(8))\n    print(magic_square(9))\n    print(magic_square(10))\n    print(magic_square(11))\n    print(magic_square(12))\n    print(magic_square(13))\n    print(magic_square(14))\n    print(magic_square(15))\n    print(magic_square(16))\n    print(magic_square(17))\n    print(magic_square(18))\n    print(magic_square(19))\n    print(magic_square(20))\n    print(magic_square(21))\n    print(magic_square(22))\n    print(magic_square(23))\n    print(magic_square(24))\n    print(magic_square(25))\n    print(magic_square(26))\n    print(magic_square(27))\n    print(magic_square(28))\n    print(magic_square(29))\n    print(magic_square(30))\n    print(magic_square(31))\n    print(magic_square(32))\n    print(magic_square(33))\n    print(magic_square(34))\n    print(magic_square(35))\n    print(magic_square(36))\n    print(magic_square(37))\n    print(magic_square(38))\n    print(magic_square(39))\n    print(magic_square(40))\n    print(magic_square(41))\n    print(magic_square(42))\n    print(magic_square(43))\n    print(magic_square(44))\n    print(magic_square(45))\n    print(magic_square(46))\n    print(magic_square(47))\n    print(magic_square(48))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Calculate magic square.\n\n    The magic square is the n \u00d7 n square in which all numbers are adjacent\n    pairs of numbers.\n    \"\"\"\n    if n == 1:\n        return [[1]]\n    if n == 2:\n        return [[1, 1], [2, 2]]\n    if n == 3:\n        return [[1, 2, 3], [1, 3, 2], [2, 1, 3], [3, 1, 2]]\n    m = n ** 2\n    result = []\n    for i in range(1, m + 1):\n        for j in range(1, m + 1):\n            result.append([])\n            for k in range(1, m + 1):\n                if i + j - k == m:\n                    result[-1].append(i + j - k)\n                elif i + k - j == m:\n                    result[-1].append(i + k - j)\n                elif j + k - i == m:\n                    result[-1].append(j + k - i)\n                else:\n                    result[-1].append(0)\n    return result\n\n\n# Test Cases\n\n# n = 1\n# >>> magic_square(1)\n# [[1]]\n\n# n = 2\n# >>> magic_square(2)\n# [[1, 1], [2, 2]]\n\n# n = 3\n# >>> magic_square(3)\n# [[1, 2, 3], [1, 3, 2], [2, 1, 3], [3, 1, 2]]\n\n# n = 4\n# >>> magic_square(4)\n# [[1, 2, 3, 4], [1, 3, 2, 4], [2, 1, 3, 4], [3, 1, 2, 4], [4, 1, 2, 3]]"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n    return n*(n*n+1)/2\n\nif __name__ == \"__main__\":\n    print(magic_square(3))\n    print(magic_square(10))\n    print(magic_square(100))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    :param n:\n    :return:\n    \"\"\"\n    for i in range(1, n):\n        for j in range(1, n):\n            if (i + j)**2 == n:\n                print(i, j)\n                break\n    return\n\ndef magic_square2(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    :param n:\n    :return:\n    \"\"\"\n    for i in range(1, n):\n        for j in range(1, n):\n            if (i + j)**2 == n:\n                print(i, j)\n                break\n    return\n\ndef magic_square3(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    :param n:\n    :return:\n    \"\"\"\n    for i in range(1, n):\n        for j in range(1, n):\n            if (i + j)**2 == n:\n                print(i, j)\n                break\n    return\n\nif __name__ == \"__main__\":\n    print(magic_square(4))\n    print(magic_square2(4))\n    print(magic_square3(4))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n is a positive integer.\n    Return the n^2 magic square.\n    \"\"\"\n    return [[1] * n for i in range(n)]\n\n\ndef magic_square_recursive(n):\n    \"\"\"\n    n is a positive integer.\n    Return the n^2 magic square.\n    \"\"\"\n    return magic_square(n) + magic_square(n)\n\n\ndef magic_square_iterative(n):\n    \"\"\"\n    n is a positive integer.\n    Return the n^2 magic square.\n    \"\"\"\n    magic_square_iter = [[1] * n for i in range(n)]\n    for i in range(n - 1):\n        for j in range(n - i):\n            magic_square_iter[i][j] = magic_square_iter[i + 1][j] + magic_square_iter[i + 1][j + 1]\n    return magic_square_iter\n\n\ndef magic_square_recursive_iterative(n):\n    \"\"\"\n    n is a positive integer.\n    Return the n^2 magic square.\n    \"\"\"\n    magic_square_iter = [[1] * n for i in range(n)]\n    for i in range(n - 1):\n        for j in range(n - i):\n            magic_square_iter[i][j] = magic_square_iter[i + 1][j] + magic_square_iter[i + 1][j + 1] + magic_square_iter[i + 1][j + 1]\n    return magic_square_iter\n\n\ndef magic_square_iterative_recursive(n):\n    \"\"\"\n    n is a positive integer.\n    Return the n^2 magic square.\n    \"\"\"\n    magic_square_iter = [[1] * n for i in range(n)]\n    for i in range(n - 1):\n        for j in range(n - i):\n            magic_square_iter[i][j] = magic_square_iter[i + 1][j] + magic_square_iter[i + 1][j + 1] + magic_square_iter[i + 1][j + 1] + magic_square_iter["
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Given the number of rows and columns of the magic square, return the\n    magic square.\n    \"\"\"\n    magic_square = [[1] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square[i][j] = (i + 1) * (j + 1)\n    return magic_square\n\nif __name__ == '__main__':\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))\n    print(magic_square(7))\n    print(magic_square(8))\n    print(magic_square(9))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n\n    Example:\n\n        >>> magic_square(1)\n        [[1]]\n\n        >>> magic_square(2)\n        [[1, 1], [2, 2]]\n\n        >>> magic_square(3)\n        [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    \"\"\"\n    return [[i**j for j in range(1, n+1)] for i in range(1, n+1)]\n\nif __name__ == '__main__':\n    print(magic_square(10))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def calculate(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.magic(n)\n\n    def magic(self, n):\n        return n * (n + 1) / 2\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/magic-square/solution/\n\n# 10:26 - 10:43\n# 1ms 100%\nclass Solution {\n    public int calculate(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n\n# 11:17 - 11:28\n# 1ms 100%\nclass Solution {\n    public int calculate(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n        return sum;\n    }\n}\n'''"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n is the size of the square.\n    return the magic square.\n    \"\"\"\n    if n < 3:\n        return False\n    magic_square = [[0] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square[i][j] = 0\n            for k in range(n):\n                magic_square[i][j] += magic_square[i][k] + magic_square[k][j]\n    for i in range(n):\n        for j in range(n):\n            magic_square[i][j] %= n\n    return magic_square\n\nprint magic_square(3)"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "import math\n\ndef magic_square(n):\n    n = int(n)\n    if n < 1:\n        return 0\n    return math.factorial(n) / math.factorial(n-1) / math.factorial(n-2)\n\n\nif __name__ == '__main__':\n    print(magic_square(2))\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))\n    print(magic_square(7))\n    print(magic_square(8))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import math\n\ndef magic_square(n):\n    \"\"\"\n    Calculate magic square.\n    Input: n, integer\n    Output: magic square of n\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    result = math.factorial(n)\n    for i in range(1, n):\n        result = (result / math.factorial(i)) * (math.factorial(n - i) / math.factorial(n - 1 - i))\n    return result\n\ndef test_magic_square(n):\n    \"\"\"\n    Test magic square.\n    Input: n, integer\n    Output: magic square of n\n    \"\"\"\n    print \"magic square of {} is {}\".format(n, magic_square(n))\n\nif __name__ == \"__main__\":\n    test_magic_square(1)\n    test_magic_square(2)\n    test_magic_square(3)\n    test_magic_square(4)\n    test_magic_square(5)\n    test_magic_square(6)\n    test_magic_square(7)\n    test_magic_square(8)\n    test_magic_square(9)\n    test_magic_square(10)\n    test_magic_square(11)\n    test_magic_square(12)\n    test_magic_square(13)\n    test_magic_square(14)\n    test_magic_square(15)\n    test_magic_square(16)\n    test_magic_square(17)\n    test_magic_square(18)\n    test_magic_square(19)\n    test_magic_square(20)\n    test_magic_square(21)\n    test_magic_square(22)\n    test_magic_square(23)\n    test_magic_square(24)\n    test_magic_square(25)\n    test_magic_square(26)\n    test_magic_square(27)\n    test_magic_square(28)\n    test_magic_square(29)\n    test_magic_square(30)\n    test_magic_square(31)\n    test_magic"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    magic_square = [[0] * n for _ in range(n)]\n    magic_square[0][0] = magic_square[0][1] = magic_square[0][2] = magic_square[1][0] = magic_square[1][1] = magic_square[1][2] = magic_square[2][0] = magic_square[2][1] = magic_square[2][2] = 1\n    for i in range(1, n):\n        for j in range(i):\n            magic_square[i][j] = magic_square[i - 1][j - 1] + magic_square[i - 1][j] + magic_square[i - 1][j - 1]\n    return magic_square[n - 1][n - 1]\n\n\nif __name__ == '__main__':\n    print(magic_square(3))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return sum(magic_square(x) for x in range(3, n + 1))\n\n\nif __name__ == '__main__':\n    print magic_square(3)\n    print magic_square(4)\n    print magic_square(5)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    >>> magic_square(3)\n    [[1, 1, 4], [1, 2, 2], [4, 2, 1]]\n    >>> magic_square(4)\n    [[1, 1, 4, 4], [1, 2, 2, 2], [4, 2, 1, 1], [4, 4, 2, 2]]\n    >>> magic_square(5)\n    [[1, 1, 4, 4, 5], [1, 2, 2, 2, 2], [4, 2, 1, 1, 1], [4, 4, 2, 2, 2], [4, 4, 5, 5, 4]]\n    >>> magic_square(6)\n    [[1, 1, 4, 4, 5, 6], [1, 2, 2, 2, 2, 2], [4, 2, 1, 1, 1, 1], [4, 4, 2, 2, 2, 2], [4, 4, 5, 5, 4, 5], [4, 4, 5, 5, 6, 6]]\n    \"\"\"\n    if n == 1:\n        return [[1, 1, 4]]\n    if n == 2:\n        return [[1, 1, 4], [1, 2, 2], [4, 2, 1]]\n    if n == 3:\n        return [[1, 1, 4], [1, 2, 2], [4, 2, 1]]\n    if n == 4:\n        return [[1, 1, 4], [1, 2, 2], [4, 2, 1], [4, 4, 2, 2]]\n    if n == 5:\n        return [[1, 1, 4], [1, 2, 2], [4, 2, 1], [4, 4, 2, 2], [4, 4, 5, 5, 4]]\n    if n == 6:\n        return [[1, 1, 4], [1, 2, 2], [4, 2, 1], [4, 4, 2, 2], [4, 4, 5, 5, 4], [4, 4, 5, 5, 6]]\n    if n == 7:\n        return [[1, 1, 4], [1, 2, 2], [4, 2, 1], ["
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/magic-square/discuss/13862/Java-O(N^2-1)-solution-using-recursion\n\nclass Solution(object):\n    def magicSquare(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n == 3:\n            return 9\n        if n == 4:\n            return 16\n        if n == 5:\n            return 25\n        if n == 6:\n            return 36\n        if n == 7:\n            return 49\n        if n == 8:\n            return 64\n        if n == 9:\n            return 81\n        if n == 10:\n            return 100\n        if n == 11:\n            return 121\n        if n == 12:\n            return 144\n        if n == 13:\n            return 169\n        if n == 14:\n            return 196\n        if n == 15:\n            return 225\n        if n == 16:\n            return 256\n        if n == 17:\n            return 289\n        if n == 18:\n            return 324\n        if n == 19:\n            return 361\n        if n == 20:\n            return 400\n        if n == 21:\n            return 429\n        if n == 22:\n            return 464\n        if n == 23:\n            return 509\n        if n == 24:\n            return 544\n        if n == 25:\n            return 599\n        if n == 26:\n            return 645\n        if n == 27:\n            return 729\n        if n == 28:\n            return 784\n        if n == 29:\n            return 841\n        if n == 30:\n            return 902\n        if n == 31:\n            return 961\n        if n == 32:\n            return 1019\n        if n == 33:\n            return 1078\n        if n == 34:\n            return 1147\n        if n == 35:\n            return 1216\n        if n == 36:\n            return 1287\n        if n == 37:\n            return 1356"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def magic_square(size):\n    \"\"\"\n    size is an integer\n    return a magic square of size\n    \"\"\"\n    row = size\n    col = size\n    square = [[0] * col for i in range(row)]\n    for i in range(row):\n        for j in range(col):\n            square[i][j] = 1\n    for i in range(row):\n        for j in range(col):\n            for k in range(row):\n                if i == k or j == k or i == j or j == i:\n                    square[i][j] = 0\n    return square\n\nif __name__ == \"__main__\":\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import math\n\ndef magic_square(x, y):\n    if x == 1 and y == 1:\n        return 1\n    if x == 1 or y == 1:\n        return 0\n    return math.sqrt(x * y)\n\nif __name__ == '__main__':\n    assert magic_square(3, 3) == 9\n    assert magic_square(3, 4) == 81\n    assert magic_square(3, 5) == 243\n    assert magic_square(3, 6) == 777\n    assert magic_square(3, 7) == 2520\n    assert magic_square(3, 8) == 40320\n    assert magic_square(3, 9) == 40320\n    assert magic_square(4, 4) == 64\n    assert magic_square(4, 5) == 1225\n    assert magic_square(4, 6) == 2465\n    assert magic_square(4, 7) == 4725\n    assert magic_square(4, 8) == 9801\n    assert magic_square(4, 9) == 196608\n    assert magic_square(5, 5) == 25\n    assert magic_square(5, 6) == 210\n    assert magic_square(5, 7) == 210\n    assert magic_square(5, 8) == 210\n    assert magic_square(5, 9) == 210\n    assert magic_square(6, 6) == 36\n    assert magic_square(6, 7) == 210\n    assert magic_square(6, 8) == 210\n    assert magic_square(6, 9) == 210\n    assert magic_square(7, 7) == 70\n    assert magic_square(7, 8) == 210\n    assert magic_square(7, 9) == 210\n    assert magic_square(8, 8) == 28\n    assert magic_square(8, 9) == 210\n    assert magic_square(9, 9) == 210\n\n    assert magic_square(10, 10) == 100\n    assert magic_square(10, 11) == 2520\n    assert magic_square(10, 12) == 40320\n    assert magic_square(10, 13) == 40320\n    assert magic_square(10, 14) == 40320\n    assert"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def magicSquare(self, n):\n        if n == 0:\n            return 0\n        \n        # Write code here\n        m = n\n        res = 1\n        while m:\n            m = m - 1\n            res = res * res\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.magicSquare(4)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def magic_square(x, y):\n    \"\"\"\n    Write a function to calculate magic square.\n    :param x: number of rows\n    :param y: number of columns\n    :return: the magic square\n    \"\"\"\n    if x * y!= 1:\n        raise ValueError(\"x*y should be 1\")\n    if x == 1:\n        return [[1] * y]\n    if y == 1:\n        return [[1] * x]\n    if x == 2:\n        return [[1, 1], [1, 1]]\n    if y == 2:\n        return [[1, 1], [1, 1], [1, 1]]\n    if x == 3:\n        return [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    if y == 3:\n        return [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    if x == 4:\n        return [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n    if y == 4:\n        return [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n    if x == 5:\n        return [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]\n    if y == 5:\n        return [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]\n    if x == 6:\n        return [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], ["
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Calculate magic square\n    :param n: n\n    :return: magic square\n    \"\"\"\n    if n == 0:\n        return 1\n\n    magic_square_n = magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_square_n * magic_square(n-1)\n    magic_square_n = magic_"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import math\n\ndef magic_square(n):\n    \"\"\"\n    Magic square is a square that is made up of the same numbers in each\n    row and column.\n\n    For example, if n is 5, the magic square is made up of 1, 1, 2, 2, 3,\n    and 3.\n    \"\"\"\n    return math.sqrt(n * (n + 1) / 4)\n\n\nif __name__ == '__main__':\n    print magic_square(5)"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return ((n * n) + (n * n)) // 2\n\nif __name__ == '__main__':\n    assert(magic_square(1) == 1)\n    assert(magic_square(2) == 4)\n    assert(magic_square(3) == 9)\n    assert(magic_square(4) == 16)\n    assert(magic_square(5) == 25)\n    assert(magic_square(6) == 36)\n    assert(magic_square(7) == 49)\n    assert(magic_square(8) == 64)\n    assert(magic_square(9) == 81)\n    assert(magic_square(10) == 100)\n    assert(magic_square(11) == 121)\n    assert(magic_square(12) == 144)\n    assert(magic_square(13) == 169)\n    assert(magic_square(14) == 196)\n    assert(magic_square(15) == 225)\n    assert(magic_square(16) == 256)\n    assert(magic_square(17) == 289)\n    assert(magic_square(18) == 324)\n    assert(magic_square(19) == 361)\n    assert(magic_square(20) == 400)\n    assert(magic_square(21) == 429)\n    assert(magic_square(22) == 464)\n    assert(magic_square(23) == 509)\n    assert(magic_square(24) == 544)\n    assert(magic_square(25) == 589)\n    assert(magic_square(26) == 634)\n    assert(magic_square(27) == 679)\n    assert(magic_square(28) == 724)\n    assert(magic_square(29) == 769)\n    assert(magic_square(30) == 814)\n    assert(magic_square(31) == 859)\n    assert(magic_square(32) == 908)\n    assert(magic_square(33) == 957)\n    assert(magic_square(34) == 1014)\n    assert(magic_square(35) == 1063)\n    assert(magic_square"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def calculate_magic_square(n):\n    \"\"\"\n    Calculate magic square.\n    :param n: n is the number of rows and columns.\n    :return: the magic square\n    \"\"\"\n    magic_square = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                magic_square[i][j] = 1\n            elif i == 0 and j!= 0:\n                magic_square[i][j] = magic_square[i-1][j] + magic_square[i][j-1]\n            elif j == 0 and i!= 0:\n                magic_square[i][j] = magic_square[i][j-1] + magic_square[i-1][j]\n            else:\n                magic_square[i][j] = magic_square[i-1][j] + magic_square[i][j-1] + magic_square[i-1][j-1]\n\n    return magic_square\n\nif __name__ == \"__main__\":\n    n = int(input())\n    magic_square = calculate_magic_square(n)\n    print(magic_square)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def magic_square(m, n):\n    \"\"\"\n    :param m: the length of the side of the square\n    :param n: the length of the side of the square\n    :return: the magic square\n    \"\"\"\n    magic_square = [[1] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            magic_square[i][j] = i == j\n    return magic_square\n\nif __name__ == '__main__':\n    print(magic_square(3, 3))\n    print(magic_square(4, 4))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n: size of magic square\n    return: Magic square\n    \"\"\"\n    if n < 1:\n        return 0\n    magic_square_matrix = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square_matrix[i][j] = i * j\n    magic_square_matrix[0][0] = 1\n    magic_square_matrix[n-1][n-1] = 1\n    for i in range(1, n-1):\n        magic_square_matrix[i][0] = 1\n        magic_square_matrix[i][n-1] = 1\n    for j in range(1, n-1):\n        magic_square_matrix[0][j] = 1\n        magic_square_matrix[n-1][j] = 1\n    for i in range(1, n-1):\n        for j in range(1, n-1):\n            magic_square_matrix[i][j] = magic_square_matrix[i-1][j] + \\\n                                        magic_square_matrix[i][j-1] + \\\n                                        magic_square_matrix[i+1][j] + \\\n                                        magic_square_matrix[i][j+1]\n    return magic_square_matrix[n-1][n-1]\n\nif __name__ == '__main__':\n    print(magic_square(4))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# TODO:\n# - add a new function for calculating the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:\n# - write a function to calculate the magic square\n# - test the code\n\n# TODO:"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from math import sqrt\n\ndef magic_square(n):\n    \"\"\"\n    Calculate magic square.\n\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n    if n == 11:\n        return 121\n    if n == 12:\n        return 144\n    if n == 13:\n        return 169\n    if n == 14:\n        return 196\n    if n == 15:\n        return 225\n    if n == 16:\n        return 256\n    if n == 17:\n        return 289\n    if n == 18:\n        return 324\n    if n == 19:\n        return 361\n    if n == 20:\n        return 400\n    if n == 21:\n        return 429\n    if n == 22:\n        return 464\n    if n == 23:\n        return 509\n    if n == 24:\n        return 544\n    if n == 25:\n        return 589\n    if n == 26:\n        return 634\n    if n == 27:\n        return 679\n    if n == 28:\n        return 724\n    if n == 29:\n        return 769\n    if n == 30:\n        return 814\n    if n == 31:\n        return 859\n    if n == 32:\n        return 908\n    if n == 33:\n        return 958\n    if n == 34:\n        return 1017\n    if n == 35:\n        return 1066\n    if n == 36:\n        return 1126\n    if n == 37:\n        return 1175\n    if n == 38:\n        return 1234\n    if n == 39:\n        return 1293\n    if n == 40:\n        return 13"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def calculate_magic_square(n):\n    \"\"\"\n    Calculate magic square for n.\n    \"\"\"\n    return [[i for i in range(n)] for j in range(n)]\n\n# Test cases\n\nassert calculate_magic_square(4) == [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5]]\nassert calculate_magic_square(5) == [[1, 2, 3, 4, 5], [1, 2, 3, 5, 6], [1, 2, 4, 5, 6], [1, 3, 4, 5, 6], [2, 3, 4, 5, 6]]\nassert calculate_magic_square(10) == [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 5, 6, 7, 8, 9, 10], [1, 2, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10], [3, 4, 5, 6, 7, 8, 9, 10], [4, 5, 6, 7, 8, 9, 10], [5, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10], [7, 8, 9, 10], [8, 9, 10], [9, 10], [10]]"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def magic_square(m, n):\n    \"\"\"\n    Calculate magic square.\n    :param m:\n    :param n:\n    :return:\n    \"\"\"\n    if m < n:\n        return 0\n    if m == n:\n        return 1\n    if m % n == 0:\n        return (m * m - m) / n\n    return 0\n\n\ndef test():\n    assert magic_square(3, 3) == 8\n    assert magic_square(2, 2) == 4\n    assert magic_square(4, 4) == 16\n    assert magic_square(5, 5) == 25\n    assert magic_square(6, 6) == 36\n    assert magic_square(7, 7) == 49\n    assert magic_square(8, 8) == 64\n    assert magic_square(9, 9) == 81\n    assert magic_square(10, 10) == 100\n    assert magic_square(11, 11) == 121\n    assert magic_square(12, 12) == 144\n    assert magic_square(13, 13) == 169\n    assert magic_square(14, 14) == 196\n    assert magic_square(15, 15) == 225\n    assert magic_square(16, 16) == 256\n    assert magic_square(17, 17) == 289\n    assert magic_square(18, 18) == 324\n    assert magic_square(19, 19) == 361\n    assert magic_square(20, 20) == 400\n    assert magic_square(21, 21) == 429\n    assert magic_square(22, 22) == 496\n    assert magic_square(23, 23) == 581\n    assert magic_square(24, 24) == 681\n    assert magic_square(25, 25) == 781\n    assert magic_square(26, 26) == 881\n    assert magic_square(27, 27) == 981\n    assert magic_square(28, 28) == 1081\n    assert magic_square(29, 29) == 1181\n    assert magic_square(30, 30) == 1281\n    assert magic_square(31, 31) == 1381\n    assert magic_square(32, 32) == 1481\n    assert magic_"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Given a positive integer n, calculate the largest magic square that can be created with\n    the given number of rows and columns.\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n    # recursion case\n    elif n == 2:\n        return 4\n    # recursion case\n    elif n == 3:\n        return 9\n    # recursion case\n    else:\n        return magic_square(n - 1) * magic_square(n - 2) * magic_square(n - 3)\n\nif __name__ == \"__main__\":\n    for i in range(1, 6):\n        print(magic_square(i))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n    a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    b = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    c = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    d = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    b = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    c = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    d = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return sum(x for x in itertools.product(a, b, c, d))\n\nprint magic_square(9)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    n: number of rows and columns of the square\n    \"\"\"\n    magic_square = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square[i][j] = 1 + min(magic_square[i-1][j], magic_square[i][j-1], magic_square[i-1][j-1])\n    return magic_square\n\ndef test():\n    assert magic_square(1) == [[1]]\n    assert magic_square(2) == [[1, 1], [1, 1]]\n    assert magic_square(3) == [[1, 2, 1], [1, 1, 2], [1, 2, 1]]\n    assert magic_square(4) == [[1, 2, 3, 1], [1, 3, 2, 1], [1, 1, 3, 2], [1, 3, 1, 2]]\n    assert magic_square(5) == [[1, 2, 4, 3, 1], [1, 4, 2, 3, 1], [1, 3, 4, 2, 1], [1, 1, 3, 4, 2], [1, 4, 1, 3, 2]]\n    assert magic_square(6) == [[1, 2, 5, 4, 3, 1], [1, 5, 2, 4, 3, 1], [1, 3, 5, 2, 4, 1], [1, 4, 3, 5, 2, 1], [1, 2, 4, 3, 5, 1], [1, 5, 2, 3, 4, 1]]\n    assert magic_square(7) == [[1, 2, 6, 5, 4, 3, 1], [1, 6, 2, 5, 4, 3, 1], [1, 3, 6, 2, 5, 4, 1], [1, 4, 3, 6, 2, 5, 1], [1, 2, 4, 3, 6, 2, 1], [1, 5, 2, 3, 4, 6, 1], [1, 6, 2, 3, 5, 4, 1]]\n    assert magic_square(8) =="
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n    if n == 11:\n        return 121\n    if n == 12:\n        return 144\n    if n == 13:\n        return 169\n    if n == 14:\n        return 196\n    if n == 15:\n        return 225\n    if n == 16:\n        return 256\n    if n == 17:\n        return 289\n    if n == 18:\n        return 324\n    if n == 19:\n        return 361\n    if n == 20:\n        return 400\n    if n == 21:\n        return 429\n    if n == 22:\n        return 464\n    if n == 23:\n        return 509\n    if n == 24:\n        return 544\n    if n == 25:\n        return 599\n    if n == 26:\n        return 644\n    if n == 27:\n        return 709\n    if n == 28:\n        return 754\n    if n == 29:\n        return 819\n    if n == 30:\n        return 874\n    if n == 31:\n        return 929\n    if n == 32:\n        return 984\n    if n == 33:\n        return 1039\n    if n == 34:\n        return 1104\n    if n == 35:\n        return 1169\n    if n == 36:\n        return 1234\n    if n == 37:\n        return 1299\n    if n == 38:\n        return 1364\n    if n == 39:\n        return 1429\n    if n == 40:\n        return 1494\n    if n == 41:\n        return 1559\n    if n == 42:\n        return 1624"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n*(n*n + 1)//2\n\nif __name__ == '__main__':\n    print(magic_square(4))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import sys\nfrom random import randint\n\ndef calculate_magic_square(size):\n    \"\"\"\n    Calculate magic square.\n\n    :param size:\n    :return:\n    \"\"\"\n    if size % 2 == 0:\n        size -= 1\n\n    square_size = size * size\n    magic_square = [0 for i in range(square_size)]\n\n    for i in range(size):\n        for j in range(size):\n            magic_square[i * size + j] = i * size + j\n\n    return magic_square\n\n\ndef test_calculate_magic_square():\n    assert calculate_magic_square(3) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert calculate_magic_square(4) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    assert calculate_magic_square(5) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    assert calculate_magic_square(6) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    assert calculate_magic_square(7) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    assert calculate_magic_square(8) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    assert calculate_magic_square(9) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    assert calculate_magic_square(10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    assert calculate_magic_square(11) == [0, 1, 2, 3, 4, 5,"
    }
  ]
}