{
  "timestamp": "2025-09-14T19:50:07.071516",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 332,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def number_of_digits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\n\ndef number_of_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum([ord(x) - ord('a') + 1 for x in s])\n\n\ndef main():\n    s = '1234'\n    print(number_of_digits(s))\n    print(number_of_letters(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from string import ascii_uppercase\n\ndef count_digits(string):\n    return sum(1 for c in string if c.isdigit())\n\ndef count_letters(string):\n    return sum(1 for c in string if c.isalpha())\n\nif __name__ == '__main__':\n    test_case = 'Hello'\n    print(count_digits(test_case))\n    print(count_letters(test_case))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/counting-characters/problem\n\nimport sys\n\n# Returns the number of digits and letters in a string.\ndef count(s):\n    return len(s)\n    \n# Driver program to test above function\nif __name__ == \"__main__\":\n    s = input()\n    print(count(s))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef main():\n    test_str = \"Hello\"\n    print(calculate(test_str))\n\ndef calculate(str):\n    return len(str)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Calculate the number of digits\ndef number_of_digits(string):\n    return sum([int(i) for i in str(string) if i.isdigit()])\n\n# Calculate the number of letters\ndef number_of_letters(string):\n    return len(string)\n\n# Check if the string is a palindrome\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# Calculate the sum of the digits and letters in a string\ndef sum_string(string):\n    return number_of_digits(string) + number_of_letters(string)\n\n# Calculate the sum of the digits and letters in a string\ndef sum_palindrome(string):\n    return sum_string(string) + sum_string(string[::-1])\n\n# Check if the string is a palindrome\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# Calculate the sum of the digits and letters in a string\ndef sum_string(string):\n    return number_of_digits(string) + number_of_letters(string)\n\n# Calculate the sum of the digits and letters in a string\ndef sum_palindrome(string):\n    return sum_string(string) + sum_string(string[::-1])\n\n# Calculate the sum of the digits and letters in a string\ndef sum_string(string):\n    return number_of_digits(string) + number_of_letters(string)\n\n# Calculate the sum of the digits and letters in a string\ndef sum_palindrome(string):\n    return sum_string(string) + sum_string(string[::-1])\n\n# Calculate the sum of the digits and letters in a string\ndef sum_string(string):\n    return number_of_digits(string) + number_of_letters(string)\n\n# Calculate the sum of the digits and letters in a string\ndef sum_palindrome(string):\n    return sum_string(string) + sum_string(string[::-1])\n\n# Calculate the sum of the digits and letters in a string\ndef sum_string("
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def count_digits(s):\n\treturn len(str(s))\n\ndef count_letters(s):\n\treturn len(s)\n\nif __name__ == '__main__':\n\tprint count_digits(\"1\")\n\tprint count_letters(\"hello\")"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/counting-digits/discuss/19587/Caveat-for-a-new-counting-problem-with-letters-and-digits\n# https://oj.leetcode.com/problems/counting-digits/discuss/19588/Caveat-for-a-new-counting-problem-with-letters-and-digits\n# https://oj.leetcode.com/problems/counting-digits/discuss/20963/Java-solution\n\nclass Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        num = str(num)\n        res = 0\n        for i in xrange(len(num)):\n            res += num[i] in '0123456789'\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.countDigits(0)\n    print s.countDigits(10)\n    print s.countDigits(123456789)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import sys\n\ndef main():\n    \"\"\"\n    Call the function that calculate the number of digits and letters.\n    \"\"\"\n    string = sys.stdin.readline()\n    number_of_digits = number_of_letters = 0\n\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'A':\n            number_of_letters += 1\n        else:\n            number_of_digits += 1\n\n    print(\"Number of digits: %d\" % number_of_digits)\n    print(\"Number of letters: %d\" % number_of_letters)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def count_characters(s):\n    \"\"\"\n    >>> count_characters('abc')\n    ['a', 'b', 'c']\n    >>> count_characters('abcd')\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    result = []\n    for i in range(0, len(s)):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            result.append(s[i])\n    return result\n\n\ndef count_digits(s):\n    \"\"\"\n    >>> count_digits('abc')\n    ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    >>> count_digits('abcd')\n    ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    \"\"\"\n    result = []\n    for i in range(0, len(s)):\n        if s[i] in '0123456789':\n            result.append(s[i])\n    return result\n\n\ndef count_letters(s):\n    \"\"\"\n    >>> count_letters('abc')\n    ['a', 'b', 'c']\n    >>> count_letters('abcd')\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    result = []\n    for i in range(0, len(s)):\n        if s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            result.append(s[i])\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def count_digits(s):\n\treturn len(str(s))\n\ndef count_letters(s):\n\treturn len(s)\n\nprint(count_digits('a'))\nprint(count_letters('a'))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return len(num)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/string-length-and-char-count\n\ndef count_digits_and_letters(string):\n    # +++your code here+++\n    digits = 0\n    letters = 0\n    for i in range(0, len(string)):\n        if string[i] >= '0' and string[i] <= '9':\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"0\", \"0\"),\n        (\"10\", \"0\"),\n        (\"abc\", \"0\"),\n        (\"123\", \"1\"),\n        (\"123abc\", \"2\"),\n        (\"1234\", \"2\"),\n        (\"1234abc\", \"3\"),\n        (\"12345\", \"3\"),\n        (\"12345abc\", \"4\"),\n        (\"123456\", \"4\"),\n        (\"123456abc\", \"5\"),\n        (\"1234567\", \"5\"),\n        (\"1234567abc\", \"6\"),\n        (\"12345678\", \"6\"),\n        (\"12345678abc\", \"7\"),\n        (\"123456789\", \"7\"),\n        (\"123456789abc\", \"8\"),\n        (\"1234567890\", \"8\"),\n        (\"1234567890abc\", \"9\"),\n        (\"12345678901\", \"9\"),\n        (\"12345678901abc\", \"10\"),\n        (\"123456789012\", \"10\"),\n        (\"123456789012abc\", \"11\"),\n        (\"1234567890123\", \"11\"),\n        (\"1234567890123abc\", \"12\"),\n        (\"12345678901234\", \"12\"),\n        (\"12345678901234abc\", \"13\"),\n        (\"123456789012345\", \"13\"),\n        (\"123456789012345abc\", \"14\"),\n        (\"1234567890123456\", \"14\"),\n        (\"1234567890123456abc\", \"15\"),\n        (\"12345678901234567\", \"15\"),\n        (\"12345678901234567abc\", \"16\"),"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def count_digits_and_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n        elif char.isalpha():\n            count += 2\n    return count\n\n# Your Solution\n\n# Your code here"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import re\n\ndef main():\n    # your code here\n    s = \"Hello\"\n    result = 0\n    for i in range(len(s)):\n        if s[i] in \"0123456789abcdefghijklmnopqrstuvwxyz\":\n            result += 1\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for c in num:\n            res += int(c)\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().countDigits(\"123\")"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/counting-digits-letters/problem\n\nimport re\n\ndef count_digits_letters(string):\n    # Complete this function\n    #\n    count = 0\n    for i in range(len(string)):\n        if re.search(\"[a-zA-Z]\", string[i]):\n            count += 1\n        elif re.search(\"[0-9]\", string[i]):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    string = input().strip()\n    print(count_digits_letters(string))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import re\n\ndef count_digits(s):\n    \"\"\"\n    >>> count_digits(\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\nclass Solution(object):\n    def countDigits(self, s):\n        \"\"\"\n        :type s: String\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        nums = [0] * n\n        for i in range(n):\n            nums[i] = s[i] - '0'\n        for i in range(1, n):\n            for j in range(i):\n                nums[i] = nums[i] + nums[j]\n        return sum(nums)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from __future__ import print_function\n\nimport time\n\n\nclass Solution(object):\n    def countDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # print(s)\n        count = 0\n        for c in s:\n            count += int(c)\n        return count\n\n    def countLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(ord(c) - ord('a') + 1 for c in s)\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    obj = Solution()\n    print(obj.countDigits('abc'))\n    print(obj.countLetters('abc'))\n    print('Elapsed time: {0:.6f}'.format(time.time() - start_time))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/count-and-say/\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        res = []\n        for i in range(n):\n            res.append(self.countAndSay_recursive(n, i))\n\n        return ''.join(res)\n\n    def countAndSay_recursive(self, n, i):\n        if i == n:\n            return str(i)\n        res = self.countAndSay_recursive(n, i + 1)\n        return res + str(i)\n\n\nif __name__ == '__main__':\n    s = Solution()\n\n    print s.countAndSay(1)\n    print s.countAndSay(10)\n    print s.countAndSay(100)"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def count_digit(s):\n    \"\"\"\n    >>> count_digit(\"1234\")\n    4\n    \"\"\"\n    return len(str(s))\n\ndef count_letter(s):\n    \"\"\"\n    >>> count_letter(\"abc\")\n    2\n    \"\"\"\n    return sum(ord(c) < 128 for c in s)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        # count digits in num\n        num = str(num)\n        count = 0\n        for i in num:\n            if i.isdigit():\n                count += 1\n            else:\n                count += 3\n        return count\n\na = Solution()\nprint(a.countDigits(9))\nprint(a.countDigits(123))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def get_num_letters_and_digits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s) - len(s.upper())\n\nif __name__ == \"__main__\":\n    assert get_num_letters_and_digits(\"abc\") == 3\n    assert get_num_letters_and_digits(\"abcd\") == 4\n    assert get_num_letters_and_digits(\"abcde\") == 5"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "# I'm not sure how to test this.\n\ndef count_digits(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return sum([1 for char in string if char.isdigit()])\n\ndef count_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return sum([1 for char in string if char.isalpha()])\n\nif __name__ == \"__main__\":\n    print(count_digits(\"123\"))\n    print(count_letters(\"Hello World\"))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "import string\n\n\ndef count_digits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\n\ndef count_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(set(s))\n\n\nif __name__ == '__main__':\n    assert count_digits('abc') == 3\n    assert count_letters('abc') == 3"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "import re\n\ndef count_digit(string):\n    \"\"\"\n    Returns the number of digits in a string.\n    \"\"\"\n    return len([x for x in string if x.isdigit()])\n\ndef count_letter(string):\n    \"\"\"\n    Returns the number of letters in a string.\n    \"\"\"\n    return len([x for x in string if x.isalpha()])\n\ndef count_digits_and_letters(string):\n    \"\"\"\n    Returns the number of digits and letters in a string.\n    \"\"\"\n    return count_digit(string) + count_letter(string)\n\ndef main():\n    s = 'Hello World!'\n    print(count_digit(s))\n    print(count_letter(s))\n    print(count_digits_and_letters(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n# write your code here\n\ndef countDigits(number):\n    \"\"\"\n    :type number: str\n    :rtype: int\n    \"\"\"\n    if not number:\n        return 0\n\n    number = str(number)\n    result = 0\n    for i in range(0, len(number)):\n        result += int(number[i])\n    return result\n\nif __name__ == '__main__':\n    print countDigits('1234')\n    print countDigits('1234.5678')\n    print countDigits('abc')"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def countDigits(self, s):\n        ans = 0\n        for i in range(len(s)):\n            ans += int(s[i])\n        return ans\n\n    def countLetters(self, s):\n        ans = 0\n        for i in range(len(s)):\n            ans += ord(s[i])\n        return ans\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.countDigits('123')\n    print s.countLetters('123')\n    print s.countLetters('a')\n    print s.countLetters('aa')\n    print s.countLetters('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def digits_and_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits + letters"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def number_of_digits(string):\n    return sum(map(int, string))\n\ndef number_of_letters(string):\n    return sum(map(ord, string))\n\ndef main():\n    print number_of_digits(\"Hello World!\")\n    print number_of_letters(\"Hello World!\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def main():\n    print(count_digits_and_letters(\"I am a string\"))\n    print(count_digits_and_letters(\"I am a string\", True))\n\ndef count_digits_and_letters(s, digits_only=False):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if digits_only:\n        return len(s) - count_letters(s)\n    else:\n        return len(s)\n\ndef count_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(ord(c) > 96 for c in s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def count_digits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    result = 0\n    for c in s:\n        if c.isdigit():\n            result += 1\n        if c.isalpha():\n            result += 1\n    return result\n\ndef count_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    result = 0\n    for c in s:\n        if c.isalpha():\n            result += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(count_digits('abcd'))\n    print(count_letters('abcd'))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def number_of_digits(string):\n    return len(string)\n\ndef number_of_letters(string):\n    return len(string.upper())\n\nif __name__ == '__main__':\n    print(number_of_digits('Hello'))\n    print(number_of_letters('Hello'))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef count_digits(string):\n    \"\"\"\n    >>> count_digits('abc')\n    3\n    >>> count_digits('abcd')\n    4\n    >>> count_digits('abcdef')\n    6\n    \"\"\"\n    count = 0\n    for c in string:\n        if c.isdigit():\n            count += 1\n    return count\n\ndef count_letters(string):\n    \"\"\"\n    >>> count_letters('abc')\n    3\n    >>> count_letters('abcd')\n    4\n    >>> count_letters('abcdef')\n    6\n    \"\"\"\n    count = 0\n    for c in string:\n        if c.isalpha():\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "# Calculate the number of digits and letters in a string\ndef num_digits_and_letters(string):\n    count_letters = 0\n    count_digits = 0\n    for char in string:\n        if char.isalpha():\n            count_letters += 1\n        else:\n            count_digits += 1\n    return count_digits, count_letters\n\n# Test Cases\nprint(num_digits_and_letters('abc'))\nprint(num_digits_and_letters('123'))\nprint(num_digits_and_letters('Hello world'))\nprint(num_digits_and_letters('Hello world'))\nprint(num_digits_and_letters('Hello world'))\nprint(num_digits_and_letters('Hello world'))\nprint(num_digits_and_letters('Hello world'))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def count_digits(s):\n\treturn sum(map(int,s))\n\ndef count_letters(s):\n\treturn len(s)\n\nif __name__ == \"__main__\":\n\tprint count_digits(\"abcd\")\n\tprint count_letters(\"abcd\")"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/count-and-say/\n\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n <= 1:\n            return str(n)\n        result = self.countAndSay(n - 1)\n        result = self.countAndSay(n - 2) + result\n        return self.countAndSay(n - 1, result)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def countDigit(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        num = num.strip()\n        if not num:\n            return 0\n        num = num.replace('-', '')\n        num = ''.join(map(str, list(num)))\n        return sum(map(int, num))\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.countDigit(\"123\")"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def count_digits(s):\n    return len(s) - int(s)\n\ndef count_letters(s):\n    return len(s) - sum(map(ord, s))\n\nif __name__ == '__main__':\n    print count_digits(\"Hello\")\n    print count_letters(\"Hello\")"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "# TODO:\n# 1. use string.zfill()\n# 2. check if the string is a number and return 0 if not\n\nimport re\n\ndef count_digits(string):\n    return len(string)\n\ndef count_letters(string):\n    return len(re.sub(r'\\D', '', string))\n\ndef main():\n    print(count_digits('123'))\n    print(count_letters('123'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import re\n\ndef num_of_digits(s):\n    return len(s) - s.count(' ')\n\ndef num_of_letters(s):\n    return len(s) - s.count('a') - s.count('A')\n\ndef main():\n    s = \"hello world\"\n    print(\"The number of digits in '%s' is %d\" % (s, num_of_digits(s)))\n    print(\"The number of letters in '%s' is %d\" % (s, num_of_letters(s)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def countDigits(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef countLetters(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    testString = 'Abc'\n    print(countDigits(testString))\n    print(countLetters(testString))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def countDigits(string):\n    digits = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            digits += 1\n    letters = 0\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'A':\n            letters += 1\n    return digits, letters\n\nif __name__ == '__main__':\n    string = 'aabbcc'\n    print countDigits(string)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import re\n\n\ndef calculate(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in string:\n        if re.match(r'[a-zA-Z]', c):\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    assert calculate('abcd') == 4\n    assert calculate('a1b2c3') == 3"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def count_digits(string):\n    \"\"\"\n    Write a function to calculate the number of digits and letters in a string.\n\n    For example,\n        count_digits(\"a1b2\") -> 3\n        count_digits(\"\u4e2d\u6587abc\") -> 0\n    \"\"\"\n    if not string:\n        return 0\n\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] =='':\n            continue\n        count += 1 if string[i] in '0123456789' else 2\n    return count\n\n\nif __name__ == '__main__':\n    print(count_digits('abc'))\n    print(count_digits('\u4e2d\u6587abc'))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# Definition for a character.\nclass Character:\n    def __init__(self, val):\n        self.val = val\n\n    def __str__(self):\n        return str(self.val)\n\n    def __repr__(self):\n        return str(self.val)\n\n    def __eq__(self, other):\n        return self.val == other.val\n\n    def __ne__(self, other):\n        return self.val!= other.val\n\nclass Solution(object):\n    def countDigits(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in xrange(len(S)):\n            if S[i] >= '0' and S[i] <= '9':\n                count += 1\n            elif S[i] >= 'a' and S[i] <= 'z':\n                count += 1\n            elif S[i] >= 'A' and S[i] <= 'Z':\n                count += 1\n        return count\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.countDigits(\"abc\")\n    print s.countDigits(\"1234\")\n    print s.countDigits(\"\")"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def count_digits_and_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c.isdigit():\n            count += 1\n        elif c.isalpha():\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    s = \"Hello World\"\n    print(count_digits_and_letters(s))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def number_of_digits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\n\ndef number_of_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\n\nif __name__ == '__main__':\n    s = \"Hello, world!\"\n    print(number_of_digits(s))\n    print(number_of_letters(s))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def num_digits(string):\n    \"\"\"\n    @return the number of digits in a string\n    \"\"\"\n    return sum(map(int, string))\n\ndef num_letters(string):\n    \"\"\"\n    @return the number of letters in a string\n    \"\"\"\n    return len(string)\n\nif __name__ == '__main__':\n    print(num_digits('1abc1'))\n    print(num_letters('1abc1'))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def count_digits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(1 for c in s if c.isdigit())\n\ndef count_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(1 for c in s if c.isalpha())\n\ndef main():\n    s = \"Hello, World!\"\n    print(\"Counting digits...\")\n    print(count_digits(s))\n    print(\"Counting letters...\")\n    print(count_letters(s))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def countDigits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c.isdigit():\n            count += 1\n        elif c.isalpha():\n            count += 2\n    return count\n\n\ndef countLetters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c.isalpha():\n            count += 1\n    return count\n\n\ndef main():\n    print(countDigits(\"Hello\"))\n    print(countLetters(\"Hello\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import re\n\n\ndef calculate_digits_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(map(int, re.findall(r'\\d+', s)))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def count_digits(s):\n    '''\n    :type s: str\n    :rtype: int\n    '''\n    return sum(map(int, s))\n\ndef count_letters(s):\n    '''\n    :type s: str\n    :rtype: int\n    '''\n    return len(s)\n\nif __name__ == '__main__':\n    print(count_digits('abc'))\n    print(count_letters('abc'))\n    print(count_digits('123'))\n    print(count_letters('123'))\n    print(count_digits('0123456789'))\n    print(count_letters('0123456789'))\n    print(count_digits('0123456789'))\n    print(count_letters('0123456789'))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from string import digits, letters\n\ndef count_letters(string):\n    \"\"\"\n    Returns the number of letters in a string.\n\n    >>> count_letters('Hello')\n    5\n    \"\"\"\n    return sum(letters.index(x) for x in string)\n\n\ndef count_digits(string):\n    \"\"\"\n    Returns the number of digits in a string.\n\n    >>> count_digits('Hello')\n    0\n    \"\"\"\n    return sum(digits.index(x) for x in string)\n\n\ndef main():\n    \"\"\"\n    Main program.\n\n    >>> count_digits('Hello')\n    0\n    >>> count_letters('Hello')\n    5\n    \"\"\"\n    print(count_digits('Hello'))\n    print(count_letters('Hello'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from string import ascii_lowercase, digits\n\ndef count_digits(s):\n    \"\"\"\n    >>> count_digits('hello')\n    5\n    >>> count_digits('123456789')\n    9\n    >>> count_digits('2')\n    1\n    \"\"\"\n    n = 0\n    for c in s:\n        if c in digits:\n            n += 1\n        elif c in ascii_lowercase:\n            n += 2\n    return n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def count_digits_and_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return sum(ord(c) - 64 for c in string)\n\nif __name__ == '__main__':\n    print(count_digits_and_letters('The quick brown fox jumps over the lazy dog'))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\n\n\"\"\"\n\nimport math\n\ndef count_digits(string):\n    '''\n    count the number of digits and letters in a string\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] >= '0' and string[i] <= '9':\n            count = count + 1\n        else:\n            count = count + 1\n    return count\n\ndef count_letters(string):\n    '''\n    count the number of letters in a string\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] >= 'a' and string[i] <= 'z':\n            count = count + 1\n        else:\n            count = count + 1\n    return count\n\ndef main():\n    '''\n    main function\n    '''\n    string = '0123456789abcdefghijklmnopqrstuvwxyz'\n    print(count_digits(string))\n    print(count_letters(string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/count-characters/problem\n\ndef count_characters(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            count += 1\n        if s[i] == 'A':\n            count += 1\n        if s[i] == 'b':\n            count += 1\n        if s[i] == 'B':\n            count += 1\n        if s[i] == 'c':\n            count += 1\n        if s[i] == 'C':\n            count += 1\n        if s[i] == 'd':\n            count += 1\n        if s[i] == 'D':\n            count += 1\n        if s[i] == 'e':\n            count += 1\n        if s[i] == 'E':\n            count += 1\n        if s[i] == 'f':\n            count += 1\n        if s[i] == 'F':\n            count += 1\n        if s[i] == 'g':\n            count += 1\n        if s[i] == 'G':\n            count += 1\n        if s[i] == 'h':\n            count += 1\n        if s[i] == 'H':\n            count += 1\n        if s[i] == 'i':\n            count += 1\n        if s[i] == 'I':\n            count += 1\n        if s[i] == 'j':\n            count += 1\n        if s[i] == 'J':\n            count += 1\n        if s[i] == 'k':\n            count += 1\n        if s[i] == 'K':\n            count += 1\n        if s[i] == 'l':\n            count += 1\n        if s[i] == 'L':\n            count += 1\n        if s[i] =='m':\n            count += 1\n        if s[i] == 'M':\n            count += 1\n        if s[i] == 'n':\n            count += 1\n        if s[i] == 'N':\n            count += 1\n        if s[i] == 'o':\n            count += 1"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/counting-chars/problem\n\ndef count_chars(string):\n    count = 0\n    for char in string:\n        count = count + 1\n        if char.isalpha():\n            count = count + 1\n    return count\n\nif __name__ == '__main__':\n    string = input()\n    print(count_chars(string))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def count_digits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(map(int, s))\n\ndef count_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\nif __name__ == '__main__':\n    print count_digits('abc')\n    print count_letters('abc')"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# https://www.codeeval.com/open_challenges/120/\ndef count_digits_and_letters(s):\n    result = 0\n    for i in range(len(s)):\n        if s[i] >= '0' and s[i] <= '9':\n            result += 1\n        elif s[i] >= 'a' and s[i] <= 'z':\n            result += 1\n        elif s[i] >= 'A' and s[i] <= 'Z':\n            result += 1\n    return result\n\nif __name__ == '__main__':\n    s = 'Hello world!'\n    print(count_digits_and_letters(s))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def count_digits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum([ord(c) - ord('0') for c in s])\n\ndef count_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\nif __name__ == '__main__':\n    print(count_digits('abc'))\n    print(count_letters('abc'))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import re\nfrom collections import Counter\n\ndef count_letters(s):\n    '''\n    >>> count_letters('abc')\n    3\n    >>> count_letters('abcd')\n    4\n    '''\n    return len(s)\n\ndef count_digits(s):\n    '''\n    >>> count_digits('abc')\n    3\n    >>> count_digits('abcd')\n    4\n    '''\n    return len([x for x in s if x.isdigit()])\n\ndef count_letters_and_digits(s):\n    '''\n    >>> count_letters_and_digits('abc')\n    3\n    >>> count_letters_and_digits('abcd')\n    4\n    '''\n    return count_letters(s) + count_digits(s)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in xrange(len(num)):\n            res += int(num[i])\n        return res"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def count_chars(s):\n    \"\"\"\n    >>> count_chars(\"A\")\n    ['A', 'a']\n    >>> count_chars(\"AB\")\n    ['A', 'B']\n    >>> count_chars(\"ABC\")\n    ['A', 'B', 'C']\n    >>> count_chars(\"ABCD\")\n    ['A', 'B', 'C', 'D']\n    \"\"\"\n    result = []\n    for i in s:\n        if i.isalpha():\n            result.append(i)\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    if (len(argv)!= 2):\n        sys.exit('Usage: {} <string>'.format(argv[0]))\n    else:\n        string = argv[1]\n        count_letters = 0\n        count_digits = 0\n        for i in range(len(string)):\n            if (string[i] >= 'a' and string[i] <= 'z'):\n                count_letters += 1\n            if (string[i] >= '0' and string[i] <= '9'):\n                count_digits += 1\n        print('Number of letters: {}'.format(count_letters))\n        print('Number of digits: {}'.format(count_digits))\n\nif __name__ == '__main__':\n    main(sys.argv)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\n\ndef main():\n    if len(sys.argv)!= 2:\n        print \"Usage: python count_digits_and_letters.py <string>\"\n        sys.exit(1)\n\n    string = sys.argv[1]\n    string = re.sub('[^a-zA-Z0-9 ]', '', string)\n    digits = 0\n    letters = 0\n    for c in string:\n        if c.isalpha():\n            letters += 1\n        else:\n            digits += 1\n\n    print \"Number of digits: %d\" % digits\n    print \"Number of letters: %d\" % letters\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def count_digits(s):\n    \"\"\"\n    >>> count_digits('23')\n    2\n    >>> count_digits('a')\n    1\n    >>> count_digits('0')\n    1\n    >>> count_digits('-1')\n    1\n    \"\"\"\n    if s == '':\n        return 0\n    num = 0\n    for i in s:\n        if i.isdigit():\n            num += 1\n    return num\n\ndef count_letters(s):\n    \"\"\"\n    >>> count_letters('23')\n    2\n    >>> count_letters('a')\n    1\n    >>> count_letters('0')\n    1\n    >>> count_letters('-1')\n    1\n    \"\"\"\n    if s == '':\n        return 0\n    num = 0\n    for i in s:\n        if i.isalpha():\n            num += 1\n    return num\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/counting-characters/problem\ndef count_characters(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return sum(1 for c in string if c.isalpha())"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def count_numbers(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c.isdigit():\n            count += 1\n        elif c.isalpha():\n            count += 2\n    return count\n\nif __name__ == \"__main__\":\n    print(count_numbers(\"abc\"))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef digits_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] >= 'a' and string[i] <= 'z':\n            count += 1\n        elif string[i] >= '0' and string[i] <= '9':\n            count += 1\n    return count\n\ndef main():\n    string = 'Hello, World!'\n    print digits_letters(string)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def number_of_digits(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    return sum([len(str[i:i+3]) for i in range(len(str))])\n\ndef number_of_letters(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    return sum([ord(str[i])-ord('a')+1 for i in range(len(str))])\n\nif __name__ == '__main__':\n    assert number_of_digits('123') == 3\n    assert number_of_digits('1234567') == 8\n    assert number_of_letters('1234567') == 7\n    assert number_of_letters('abcd') == 4\n    assert number_of_letters('ABCD') == 4\n    assert number_of_letters('ABCDEF') == 6\n    assert number_of_letters('abcdefg') == 6\n    assert number_of_letters('abcdefgh') == 7"
    },
    {
      "rank": 73,
      "score": 3.0,
      "candidate": "import unittest\n\n\nclass Solution(object):\n    def countDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for c in s:\n            count += int(c)\n        return count\n\n    def countLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for c in s:\n            if c.isupper():\n                count += 1\n        return count\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/count-digits-and-letters/solution/\n# Approach #1: Brute Force\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# We can use a variable to record the current number of digits and letters in the string\n# To calculate the total number of digits and letters, we can simply sum up the current number of digits and letters\n# Example:\n# Input: \"Hello\"\n# Output: 5\n# Explanation:\n# The string is \"Hello\"\n# The number of digits is 5\n# The number of letters is 5\n# Total number of digits and letters is 10\n\n# Approach #2: Use a Stack\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# We can use a stack to record the current number of digits and letters\n# To calculate the total number of digits and letters, we can simply add the current number of digits and letters\n# Example:\n# Input: \"Hello\"\n# Output: 5\n# Explanation:\n# The string is \"Hello\"\n# The number of digits is 5\n# The number of letters is 5\n# Total number of digits and letters is 10\n\n# Approach #3: Use a Map\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n#"
    },
    {
      "rank": 74,
      "score": 3.0,
      "candidate": "#!/usr/bin/python\n\n# https://www.hackerrank.com/challenges/counting-digits-and-letters/problem\n\ndef countDigitsAndLetters(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in string:\n        if c.isdigit():\n            count += 1\n        else:\n            count += 26\n    return count\n\n\nif __name__ == '__main__':\n    string = input().strip()\n    print(countDigitsAndLetters(string))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/number-of-digits-in-a-binary-string/\nclass Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        # TODO: implement this.\n        return len(str(num))\n\nif __name__ == \"__main__\":\n    import sys\n    sys.exit(int(test() or 0))\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        solution = Solution()\n        self.assertEqual(solution.countDigits(1), 1)\n        self.assertEqual(solution.countDigits(10), 2)\n        self.assertEqual(solution.countDigits(100), 3)\n        self.assertEqual(solution.countDigits(1000), 4)\n        self.assertEqual(solution.countDigits(1000000), 5)\n        self.assertEqual(solution.countDigits(1000000000), 6)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import re\n\n\ndef count_digits_and_letters(s: str) -> int:\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(map(int, re.findall(r'\\d', s))) + len(s)\n\n\nif __name__ == '__main__':\n    print(count_digits_and_letters('hello'))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "import collections\n\n\ndef count_digits(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    digits = collections.Counter(string)\n    return sum(digits.values())\n\n\ndef count_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    letters = collections.Counter(string)\n    return sum(letters.values())\n\nif __name__ == '__main__':\n    assert count_digits(\"a\") == 1\n    assert count_digits(\"ab\") == 2\n    assert count_digits(\"abc\") == 3\n    assert count_digits(\"abcd\") == 4\n    assert count_digits(\"abcd\") == 4\n    assert count_digits(\"abcde\") == 5\n    assert count_digits(\"abcdef\") == 6\n    assert count_digits(\"abcdefg\") == 7\n    assert count_digits(\"abcdefgh\") == 8\n    assert count_digits(\"abcdefghi\") == 9\n    assert count_digits(\"abcdefghij\") == 10\n    assert count_digits(\"abcdefghijkl\") == 11\n    assert count_digits(\"abcdefghijklm\") == 12\n    assert count_digits(\"abcdefghijklmn\") == 13\n    assert count_digits(\"abcdefghijklmnop\") == 14\n    assert count_digits(\"abcdefghijklmnopq\") == 15\n    assert count_digits(\"abcdefghijklmnopqr\") == 16\n    assert count_digits(\"abcdefghijklmnopqrs\") == 17\n    assert count_digits(\"abcdefghijklmnopqrst\") == 18\n    assert count_digits(\"abcdefghijklmnopqrstu\") == 19\n    assert count_digits(\"abcdefghijklmnopqrstuv\") == 20\n    assert count_digits(\"abcdefghijklmnopqrstuvw\") == 21\n    assert count_digits(\"abcdefghijklmnopqrstuvwx\") == 22\n    assert count_digits(\"abcdefghijklmn"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# Your function should return the number of digits and letters in the string.\n\ndef num_digits_and_letters(string):\n    return len(string)\n\nif __name__ == '__main__':\n    print(num_digits_and_letters('a'))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def count_digits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(ord(c) - ord('0') for c in s)\n\ndef count_letters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\nif __name__ == '__main__':\n    assert count_digits(\"12345\") == 4\n    assert count_digits(\"012345\") == 5\n    assert count_digits(\"0123456789\") == 9\n    assert count_digits(\"abcdefghijklmnopqrstuvwxyz\") == 26\n    assert count_digits(\"a\") == 1\n    assert count_digits(\"aa\") == 2\n    assert count_digits(\"aaa\") == 3\n    assert count_digits(\"aaaa\") == 4\n    assert count_digits(\"aaaaa\") == 5\n    assert count_digits(\"aaaaaaaa\") == 10\n    assert count_digits(\"aaaaaaaaa\") == 11\n    assert count_digits(\"aaaaaaaaaaa\") == 13\n    assert count_digits(\"a\") == 1\n    assert count_digits(\"aa\") == 2\n    assert count_digits(\"aaa\") == 3\n    assert count_digits(\"aaaa\") == 4\n    assert count_digits(\"aaaaa\") == 5\n    assert count_digits(\"aaaaaa\") == 6\n    assert count_digits(\"aaaaaaa\") == 7\n    assert count_digits(\"aaaaaaaa\") == 8\n    assert count_digits(\"aaaaaaaaa\") == 9\n    assert count_digits(\"aaaaaaaaaa\") == 10\n    assert count_digits(\"aaaaaaaaaaa\") == 11\n    assert count_digits(\"aaaaaaaaaaaa\") == 12\n    assert count_digits(\"aaaaaaaaaaaaa\") == 13\n    assert count_digits(\"aaaaaaaaaaaaaa\") == 14\n    assert count_digits(\"aaaaaaaaaaaaaaa\") == 15\n    assert count_digits(\"aaaaaaaaaaaaaaaa\") == 16\n    assert count_digits(\"aaaaaaaaaaaaaaaaa\") == 17\n    assert count_digits(\"aaaaaaaaaaaaaaaaaa\")"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/count-and-say/\n\nclass Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n == 0:\n            return ''\n        if n == 1:\n            return '1'\n        if n == 2:\n            return '11'\n        res = ''\n        pre_count = 1\n        cur_count = 1\n        for i in range(n-1):\n            cur_count += pre_count\n            res += str(cur_count)\n            pre_count = cur_count\n        return res\n\n\ndef main():\n    n = 5\n    print Solution().countAndSay(n)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "class Solution:\n    # @return a tuple, (number of digits, number of letters)\n    def countDigitsAndLetters(self, s):\n        result = [0, 0]\n        for c in s:\n            result[0] += c.isdigit()\n            result[1] += c.isalpha()\n        return result\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.countDigitsAndLetters('a'))\n    print(s.countDigitsAndLetters('abcd'))\n    print(s.countDigitsAndLetters('aa'))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def countDigits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for c in s:\n        if c.isdigit():\n            count += 1\n        elif c.isupper():\n            count += 2\n        elif c.islower():\n            count += 2\n    return count\n\nif __name__ == \"__main__\":\n    assert countDigits(\"a\") == 1\n    assert countDigits(\"aa\") == 2\n    assert countDigits(\"aaa\") == 3\n    assert countDigits(\"aaaa\") == 4\n    assert countDigits(\"aaaaa\") == 5\n    assert countDigits(\"aaaaaa\") == 6\n    assert countDigits(\"aaaaaaa\") == 7\n    assert countDigits(\"aaaaaaaa\") == 8\n    assert countDigits(\"aaaaaaaaa\") == 9\n    assert countDigits(\"aaaaaaaaaa\") == 10\n    assert countDigits(\"aaaaaaaaaaa\") == 11\n    assert countDigits(\"aaaaaaaaaaaa\") == 12\n    assert countDigits(\"aaaaaaaaaaaaa\") == 13\n    assert countDigits(\"aaaaaaaaaaaaaa\") == 14\n    assert countDigits(\"aaaaaaaaaaaaaaa\") == 15\n    assert countDigits(\"aaaaaaaaaaaaaaaa\") == 16\n    assert countDigits(\"aaaaaaaaaaaaaaaaa\") == 17\n    assert countDigits(\"aaaaaaaaaaaaaaaaaa\") == 18\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaa\") == 19\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaa\") == 20\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaaa\") == 21\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaaaa\") == 22\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaaaaa\") == 23\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaaaaaa\") == 24\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaaaaaaa\") == 25\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaaaaaaaa\") == 26\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 27\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 28\n    assert countDigits(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 29\n    assert count"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 1\n        ans = 0\n        while num > 0:\n            ans += 1\n            num /= 10\n        return ans\n\n\nif __name__ == '__main__':\n    print(Solution().countDigits(123))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/count-characters/\n# Definition for a character.\n# class Character(object):\n#     def __init__(self, ch):\n#         self.ch = ch\n\nclass Solution(object):\n    def countCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for ch in s:\n            if ch.isdigit():\n                count += 1\n            elif ch.isalpha():\n                count += 2\n        return count"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "import sys\n\n__author__ = 'Daniel'\n\n\nclass Solution:\n    # @param {string} str\n    # @return {integer}\n    def countDigits(self, str):\n        return len(str) - str.count('0')\n\n    # @param {string} str\n    # @return {integer}\n    def countLetters(self, str):\n        return str.count('a') + str.count('e') + str.count('i') + str.count('o') + str.count('u')\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    str = 'hello'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str = '3.1415926'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str = '1'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str = '1.0'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str = '1.2345'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str = '1.2345e-12'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str = '1.2345e+12'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str = '1234.5'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str = '1234.5e+12'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str = '1234.5e-12'\n    print(solution.countDigits(str))\n    print(solution.countLetters(str))\n\n    str"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} num\n    # @return {integer}\n    def countDigits(self, num):\n        if not num:\n            return 0\n        num = ''.join(sorted(num))\n        if len(num) == 1:\n            return len(num)\n        return int(num[0]) + self.countDigits(num[1:])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.countDigits(\"123\"))\n    print(s.countDigits(\"\"))\n    print(s.countDigits(\"abc\"))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Definition for a character.\nclass Character(object):\n    def __init__(self, val):\n        self.val = val\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        max_len = 0\n        start_pos = -1\n        for i in xrange(len(s)):\n            if s[i] == s[0]:\n                if start_pos == -1:\n                    start_pos = i\n            else:\n                if start_pos!= -1:\n                    max_len = max(max_len, i - start_pos)\n                start_pos = -1\n        if start_pos!= -1:\n            max_len = max(max_len, i - start_pos)\n        return max_len\n\n    def lengthOfLongestSubstring2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        max_len = 0\n        start_pos = -1\n        for i in xrange(len(s)):\n            if s[i] == s[0]:\n                if start_pos == -1:\n                    start_pos = i\n            else:\n                if start_pos!= -1:\n                    max_len = max(max_len, i - start_pos)\n                start_pos = -1\n        if start_pos!= -1:\n            max_len = max(max_len, i - start_pos)\n        return max_len"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def digits_and_letters(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n#Test Cases\n\n#Input: string = \"Hello\"\n#Output: digits = 1, letters = 1\n\n#Input: string = \"Hello World\"\n#Output: digits = 1, letters = 1\n\n#Input: string = \"Hello World! How are you today?\"\n#Output: digits = 1, letters = 1\n\n#Input: string = \"Hello\"\n#Output: digits = 1, letters = 0\n\n#Input: string = \"Hello World\"\n#Output: digits = 2, letters = 2\n\n#Input: string = \"Hello World! How are you today?\"\n#Output: digits = 2, letters = 2\n\n#Input: string = \"Hello\"\n#Output: digits = 0, letters = 0\n\n#Input: string = \"Hello World\"\n#Output: digits = 1, letters = 1\n\n#Input: string = \"Hello World! How are you today?\"\n#Output: digits = 1, letters = 1\n\n#Input: string = \"Hello\"\n#Output: digits = 0, letters = 0\n\n#Input: string = \"Hello World\"\n#Output: digits = 2, letters = 2\n\n#Input: string = \"Hello World! How are you today?\"\n#Output: digits = 2, letters = 2"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        if num == \"0\":\n            return 0\n        elif num == \"\":\n            return 0\n        elif num == \"a\":\n            return 1\n        elif num == \"aa\":\n            return 2\n        elif num == \"aaa\":\n            return 3\n        elif num == \"aaaa\":\n            return 4\n        elif num == \"aaaaa\":\n            return 5\n        elif num == \"aaaaaa\":\n            return 6\n        elif num == \"aaaaaaa\":\n            return 7\n        elif num == \"aaaaaaaa\":\n            return 8\n        elif num == \"aaaaaaaaa\":\n            return 9\n        elif num == \"aaaaaaaaaa\":\n            return 10\n        elif num == \"aaaaaaaaaaa\":\n            return 11\n        elif num == \"aaaaaaaaaaaa\":\n            return 12\n        elif num == \"aaaaaaaaaaaaa\":\n            return 13\n        elif num == \"aaaaaaaaaaaaaa\":\n            return 14\n        elif num == \"aaaaaaaaaaaaaaa\":\n            return 15\n        elif num == \"aaaaaaaaaaaaaaaa\":\n            return 16\n        elif num == \"aaaaaaaaaaaaaaaaa\":\n            return 17\n        elif num == \"aaaaaaaaaaaaaaaaaa\":\n            return 18\n        elif num == \"aaaaaaaaaaaaaaaaaaa\":\n            return 19\n        elif num == \"aaaaaaaaaaaaaaaaaaaa\":\n            return 20\n        elif num == \"aaaaaaaaaaaaaaaaaaaaa\":\n            return 21\n        elif num == \"aaaaaaaaaaaaaaaaaaaaaa\":\n            return 22\n        elif num == \"aaaaaaaaaaaaaaaaaaaaaaa\":\n            return 23\n        elif num == \"aaaaaaaaaaaaaaaaaaaaaaaa\":\n            return 24\n        elif num == \"aaaaaaaaaaaaaaaaaaaaaaaaa\":\n            return 25\n        elif num == \"aaaaaaaaaaaaaaaaaaaaaaaaaa\":\n            return 26\n        elif num == \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\":\n            return 27\n        elif num == \"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\":\n            return 28\n        el"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def get_digits_letters(text):\n    return len(text), len(text.upper())\n\nif __name__ == '__main__':\n    assert get_digits_letters(\"hello\") == (5, 5)\n    assert get_digits_letters(\"I have a big belly\") == (7, 7)\n    assert get_digits_letters(\"i have a big belly\") == (6, 6)\n    assert get_digits_letters(\"i have a big belly\") == (6, 6)\n    assert get_digits_letters(\"\") == (0, 0)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return an integer\n    def countDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for c in s:\n            count += int(c.isdigit())\n        return count\n\n    def countLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for c in s:\n            count += c.lower() - ord('a') + 1\n        return count\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = 'Hello World!'\n    print(sol.countLetters(s))\n    print(sol.countDigits(s))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        if not num:\n            return 0\n        res = [0] * 10\n        for i in range(len(num)):\n            res[ord(num[i]) - ord('0')] += 1\n        return sum(res)\n\n\nif __name__ == '__main__':\n    print Solution().countDigits('123')\n    print Solution().countDigits('12345')"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution:\n    def countLettersAndDigits(self, s: str) -> int:\n        if not s:\n            return 0\n        count = 0\n        for c in s:\n            if c.isdigit():\n                count += 1\n            if c.isalpha():\n                count += 1\n        return count\n\n\n# TESTS\nfor s, expected in [\n    (\"a1b2\", 3),\n    (\"A1B2\", 3),\n    (\"\", 0),\n    (\"a\", 1),\n    (\"a1\", 1),\n    (\"a1b\", 2),\n    (\"a1b1\", 2),\n    (\"abc\", 3),\n    (\"a1b2c3\", 3),\n    (\"a1b2c\", 2),\n    (\"a1b2c3\", 3),\n    (\"a1b2c\", 2),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a1b2c3a1b2c\", 6),\n    (\"a"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {string} num\n    # @return {integer}\n    def countDigits(self, num):\n        if not num:\n            return 0\n        count = 0\n        while num:\n            count += num[-1] - '0'\n            num = num[:-1]\n        return count"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        d = {}\n        for c in s:\n            d[c] = d.get(c, 0) + 1\n        return sum(d.values())\n\nif __name__ == '__main__':\n    assert Solution().countDigits(\"1\") == 1\n    assert Solution().countDigits(\"11\") == 2\n    assert Solution().countDigits(\"111\") == 3\n    assert Solution().countDigits(\"1111\") == 4\n    assert Solution().countDigits(\"11111\") == 5"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in xrange(len(num)):\n            if num[i] < '0' or num[i] > '9':\n                return 0\n            res += 1\n        return res\n\n    def countLetters(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in xrange(len(num)):\n            if num[i] >= 'a' and num[i] <= 'z':\n                res += 1\n            elif num[i] >= 'A' and num[i] <= 'Z':\n                res += 1\n            else:\n                return 0\n        return res\n\n\nif __name__ == '__main__':\n    print Solution().countDigits('100')\n    print Solution().countLetters('a')"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def count_digits_and_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    n = 0\n    for c in string:\n        if c.isalpha():\n            n += 1\n        else:\n            n += 3\n    return n\n\ndef test():\n    assert count_digits_and_letters('Hello') == 5\n    assert count_digits_and_letters('Hello world') == 12\n    assert count_digits_and_letters('Hello world') == 12\n    assert count_digits_and_letters('Hello World') == 12\n    assert count_digits_and_letters('Hello World!') == 13\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and_letters('Hello, world!') == 15\n    assert count_digits_and"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from string import ascii_uppercase as uppercase\n\ndef count_digits(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string)\n\n\ndef count_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return sum(ord(c) - ord('a') + 1 for c in string)\n\n\nif __name__ == '__main__':\n    assert count_digits('0123456789') == 10\n    assert count_letters('abcdefghijklmnopqrstuvwxyz') == 26"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# @include\ndef count_digits_and_letters(s):\n    return len(str(s)) - sum(ord(c) - ord('0') for c in s)\n# @exclude\n\n\ndef main():\n    assert count_digits_and_letters(\"a\") == 1\n    assert count_digits_and_letters(\"abc\") == 3\n    assert count_digits_and_letters(\"a1b2c3\") == 5\n    assert count_digits_and_letters(\"A1b2C3\") == 5\n    assert count_digits_and_letters(\"ABC\") == 3\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Approach #1: Iterate through string and count digits and letters\n# Time complexity: O(n)\n# Space complexity: O(1)\n# n is length of the string.\ndef count_digits_letters(n):\n    # YOUR CODE HERE\n    digits = 0\n    letters = 0\n    for i in range(n):\n        if n % 10 == 0:\n            digits += 1\n        elif n % 26 == 0:\n            letters += 1\n        else:\n            letters += 1\n    return digits, letters\n\n# Approach #2: Use regex to count digits and letters\n# Time complexity: O(n)\n# Space complexity: O(n)\n# n is length of the string.\ndef count_digits_letters_regex(n):\n    # YOUR CODE HERE\n    digits = 0\n    letters = 0\n    for i in range(n):\n        if n % 10 == 0:\n            digits += 1\n        elif n % 26 == 0:\n            letters += 1\n        else:\n            letters += 1\n    return digits, letters\n\n# Approach #3: Use a lambda function to count digits and letters\n# Time complexity: O(n)\n# Space complexity: O(1)\n# n is length of the string.\ndef count_digits_letters_lambda(n):\n    # YOUR CODE HERE\n    digits = 0\n    letters = 0\n    for i in range(n):\n        if n % 10 == 0:\n            digits += 1\n        elif n % 26 == 0:\n            letters += 1\n        else:\n            letters += 1\n    return digits, letters\n\n# Approach #4: Use a lambda function to count digits and letters\n# Time complexity: O(n)\n# Space complexity: O(1)\n# n is length of the string.\ndef count_digits_letters_lambda_regex(n):\n    # YOUR CODE HERE\n    digits = 0\n    letters = 0\n    for i in range(n):\n        if n % 10 == 0:\n            digits += 1\n        elif n % 26 == 0:\n            letters += 1\n        else:\n            letters += 1\n    return digits, letters\n\n# Approach #"
    }
  ]
}