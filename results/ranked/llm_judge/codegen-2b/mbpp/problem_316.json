{
  "timestamp": "2025-09-14T19:43:05.667494",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 316,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def is_isosceles(a, b, c):\n    return a == b == c\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    if is_isosceles(a, b, c):\n        print('isosceles')\n    elif a!= b!= c:\n        print('not isosceles')\n    else:\n        print('equilateral')"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Check if the given triangle is isosceles or not.\n    Input: triangle - A tuple of 3 integers.\n    Output: True or False\n    \"\"\"\n    \n    return triangle[0] == triangle[1]\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n\n    triangle = (1, 2, 3)\n    print(is_isosceles(triangle))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    is_isosceles(a, b, c) -> bool\n    \n    Input:\n    a, b, c - the three sides of the triangle\n    \n    Output:\n    bool - True if the triangle is isosceles, False otherwise.\n    \"\"\"\n    return (a + b == c or a + c == b or b + c == a)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    triangle_sides = [5, 6, 7]\n    print is_isosceles(*triangle_sides)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/isosceles-triangle/problem\n\ndef is_isosceles(triangle):\n    \"\"\"\n    >>> is_isosceles([3, 4, 5])\n    True\n    >>> is_isosceles([3, 4, 6])\n    False\n    \"\"\"\n    return triangle[0] == triangle[1] and triangle[1] == triangle[2]\n\nif __name__ == \"__main__\":\n    triangle = input().strip().split(' ')\n    print(is_isosceles(triangle))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Check if a triangle is isosceles.\n\n    :type a: float\n    :param a: The length of the side A.\n\n    :type b: float\n    :param b: The length of the side B.\n\n    :type c: float\n    :param c: The length of the side C.\n\n    :rtype: bool\n    :return: True if the triangle is isosceles, otherwise False.\n    \"\"\"\n    if a + b <= c:\n        return False\n    return True\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    assert is_isosceles(1, 2, 3)\n    assert not is_isosceles(1, 2, 4)\n    assert is_isosceles(1, 2, 3)\n    assert not is_isosceles(2, 1, 3)\n    assert not is_isosceles(1, 2, 2)\n    assert is_isosceles(1, 2, 3)\n    assert not is_isosceles(3, 2, 1)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Check if a triangle is isosceles or not.\n    \"\"\"\n    return (triangle[0] == triangle[1] and triangle[1] == triangle[2]) or (triangle[0] == triangle[2] and triangle[1] == triangle[2])\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    triangle = [int(i) for i in input().split()]\n    is_isosceles(triangle)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "isosceles = lambda a, b, c: a == b and b == c\n\n\ndef isosceles(a, b, c):\n    \"\"\"\n    Write a function isosceles that takes three integers and returns\n    true if they are isosceles and false otherwise.\n    \"\"\"\n    return (a == b and b == c) or (a == c and b == c)\n\n\ndef main():\n    triangle = [5, 7, 3]\n    print(isosceles(triangle[0], triangle[1], triangle[2]))\n    triangle = [1, 2, 3]\n    print(isosceles(triangle[0], triangle[1], triangle[2]))\n    triangle = [1, 1, 1]\n    print(isosceles(triangle[0], triangle[1], triangle[2]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/triangle-isosceles/problem\n\ndef is_isosceles(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: bool\n    \"\"\"\n    return (a + b) == c\n\n# Complete the isIsosceles function below.\ndef is_isosceles(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: bool\n    \"\"\"\n    return (a + b) == c"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/isosceles-triangle/problem\n\nimport math\n\n\ndef is_isosceles(triangle):\n    \"\"\"\n    :type triangle: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(triangle)!= 3:\n        return False\n\n    a = triangle[0]\n    b = triangle[1]\n    c = triangle[2]\n\n    if (a + b)!= c:\n        return False\n    else:\n        return True\n\n\nif __name__ == \"__main__\":\n    triangle = [3, 1, 4]\n    print is_isosceles(triangle)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def isIsosceles(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: bool\n        \"\"\"\n        if triangle.a + triangle.b!= triangle.c:\n            return False\n        if triangle.b + triangle.c!= triangle.a:\n            return False\n        return True"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n    def __repr__(self):\n        return str(self.a) +'' + str(self.b) +'' + str(self.c)\n\nclass Solution:\n    # @param triangle, a list of Point\n    # @return a boolean\n    def isIsoscelesTriangle(self, triangle):\n        if len(triangle)!= 3:\n            return False\n        if triangle[0] == triangle[1] or triangle[0] == triangle[2]:\n            return True\n        if triangle[1] == triangle[2] or triangle[0] == triangle[2]:\n            return True\n        return False\n\nif __name__ == '__main__':\n    solution = Solution()\n    triangle = [Point(2, 3, 4), Point(3, 2, 4), Point(5, 5, 6)]\n    print solution.isIsoscelesTriangle(triangle)"
    },
    {
      "rank": 12,
      "score": 9.370583536698913,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Input triangle is a list of points (x, y)\n    Output true or false\n    \"\"\"\n    # if triangle is not a triangle\n    if not triangle:\n        return False\n    # if not even number of points\n    if len(triangle) % 2:\n        return False\n    # if number of points is not 3\n    if len(triangle)!= 3:\n        return False\n    # if sum of points is not equal to 0\n    if sum(triangle)!= 0:\n        return False\n    # if triangle is isosceles\n    return True\n\nprint(is_isosceles([[1, 2], [2, 3], [3, 4]]))\n\n\"\"\"\nOutput:\n\nTrue\n\"\"\""
    },
    {
      "rank": 13,
      "score": 9.234050852198141,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Arguments:\n    triangle -- a list of numbers\n    \"\"\"\n    for i in range(len(triangle)):\n        if triangle[i]!= triangle[(i + 1) % len(triangle)]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    triangle = [1, 1, 1, 1, 1, 1]\n    print(is_isosceles(triangle))"
    },
    {
      "rank": 14,
      "score": 9.205959372648458,
      "candidate": "from collections import defaultdict\n\ndef is_isosceles(triangle):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n\n    :type triangle: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(triangle)!= 3:\n        return False\n    triangle = list(map(int, triangle))\n\n    if triangle[0] == triangle[1] or triangle[0] == triangle[2]:\n        return False\n    elif triangle[1] == triangle[2]:\n        return True\n    else:\n        return False\n\ndef main():\n    triangle = [3, 4, 6]\n    print(is_isosceles(triangle))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 9.177268828905222,
      "candidate": "def isIsoceles(n):\n    \"\"\"\n    n is the triangle's side\n    \"\"\"\n    for i in range(1, n + 1):\n        if i * n == i * (i + 1):\n            return True\n    return False\n\nif __name__ == '__main__':\n    n = int(input(\"Enter the number of side : \"))\n    print(isIsoceles(n))"
    },
    {
      "rank": 16,
      "score": 9.122564458729856,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Input triangle is a list of points in the form (x, y).\n    Output: True or False\n    \"\"\"\n    if len(triangle)!= 3:\n        return False\n    a, b, c = triangle\n    return abs(b - a) == abs(c - a)\n\nif __name__ == \"__main__\":\n    triangle = [1, 2, 3]\n    assert is_isosceles(triangle) == True\n    triangle = [1, 2, 3, 4]\n    assert is_isosceles(triangle) == False"
    },
    {
      "rank": 17,
      "score": 8.973005557553902,
      "candidate": "def isIsoceles(a,b,c):\n    return (a+b)==c\n\n# your code here\n\n# Tests\ntests = [\n    (4, 4, 4),\n    (3, 5, 4),\n    (1, 2, 3),\n    (2, 2, 2),\n    (3, 3, 3),\n]\n\nfor test in tests:\n    print isIsoceles(test[0], test[1], test[2])"
    },
    {
      "rank": 18,
      "score": 8.95994420569242,
      "candidate": "def is_isosceles(triangle):\n    return triangle[0] + triangle[1] == triangle[2]\n\ndef is_isosceles_recursive(triangle):\n    if triangle[0] + triangle[1] == triangle[2]:\n        return True\n    elif triangle[1] + triangle[2] == triangle[0]:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_isosceles([3, 4, 5]))\n    print(is_isosceles_recursive([3, 4, 5]))"
    },
    {
      "rank": 19,
      "score": 8.946210893390457,
      "candidate": "def is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\ndef main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n\n    if is_isosceles(a, b, c):\n        print('I')\n    elif a + b < c:\n        print('II')\n    elif a + b > c:\n        print('III')\n    else:\n        print('IV')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 8.932217008005624,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    :type triangle: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(triangle)!= 3:\n        return False\n    a, b, c = triangle\n    if a + b <= c:\n        return False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return False\n    else:\n        return True\n\nprint(is_isosceles([3, 4, 5]))\nprint(is_isosceles([4, 3, 4]))\nprint(is_isosceles([5, 4, 5]))\nprint(is_isosceles([4, 3, 5]))\nprint(is_isosceles([5, 5, 4]))"
    },
    {
      "rank": 21,
      "score": 8.910084504002544,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    triangle = [x1,y1,x2,y2,x3,y3]\n    \"\"\"\n    if (triangle[0] > triangle[1] and triangle[0] > triangle[2] and triangle[1] > triangle[2]):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    triangle = [1, 2, 3]\n    print is_isosceles(triangle)"
    },
    {
      "rank": 22,
      "score": 8.85571690049604,
      "candidate": "is_isosceles = lambda x: x[0] + x[1] == x[2]\n\ndef check_triangle(triangle):\n    for i in range(len(triangle)):\n        if i == 0:\n            if is_isosceles(triangle):\n                return True\n            else:\n                return False\n        elif i == 1:\n            if is_isosceles(triangle):\n                return True\n            else:\n                return False\n        elif i == 2:\n            if is_isosceles(triangle):\n                return True\n            else:\n                return False\n    return True\n\nif __name__ == '__main__':\n    triangle = [[3,4,5], [6,5,8], [4,9,2]]\n    print(check_triangle(triangle))"
    },
    {
      "rank": 23,
      "score": 8.850707355641543,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    :type triangle: List[int]\n    :rtype: bool\n    \"\"\"\n    return (triangle[0] == triangle[1]) and (triangle[1] == triangle[2])\n\nif __name__ == '__main__':\n    triangle = [1, 3, 4]\n    print(is_isosceles(triangle))"
    },
    {
      "rank": 24,
      "score": 8.8281618090209,
      "candidate": "def isIsosceles(triangle):\n    \"\"\"\n    Input triangle is a list of three numbers.\n    Output is True if the triangle is isosceles, False otherwise.\n    \"\"\"\n    if triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n        return True\n    else:\n        return False\n\ndef main():\n    \"\"\"\n    Main function to test the functions.\n    \"\"\"\n    print isIsosceles([2, 4, 6])\n    print isIsosceles([3, 4, 6])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.81367773444215,
      "candidate": "# https://github.com/MihirSridhar/check-isosceles-triangle/blob/master/check-isosceles-triangle.py\n\ndef is_isosceles_triangle(p):\n    \"\"\"\n    Check if a triangle is isosceles or not.\n    :param p: list of three integers\n    :return: True or False\n    \"\"\"\n    # check if sum of sides is equal to triangle area\n    # if triangle area is not equal, triangle is not isosceles\n    if sum(p)!= (p[0] + p[1] + p[2]):\n        return False\n    # if sum of sides is equal to triangle area, triangle is isosceles\n    return True\n\nif __name__ == \"__main__\":\n    # https://www.hackerrank.com/challenges/isosceles-triangle/problem\n    p = [int(x) for x in input().split()]\n    # print(is_isosceles_triangle(p))\n    print(is_isosceles_triangle(p) == True)"
    },
    {
      "rank": 26,
      "score": 8.76828871349479,
      "candidate": "# https://www.hackerrank.com/challenges/triangle/problem\ndef is_triangle(a, b, c):\n    return a < b and b < c\n\n\nif __name__ == '__main__':\n    n = int(input())\n    for i in range(n):\n        a, b, c = map(int, input().split())\n        if is_triangle(a, b, c):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
      "rank": 27,
      "score": 8.750282588864879,
      "candidate": "def isIsosceles(triangle):\n    \"\"\"\n    Input: A triangle\n    Output: True or False\n    \"\"\"\n    if triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n        return True\n    else:\n        return False\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    triangle = [1,2,3]\n    print isIsosceles(triangle)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.715724466237427,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Check if the triangle is isosceles.\n    \"\"\"\n    if triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n        return True\n    else:\n        return False\n\n\"\"\"\nPrint the triangle\n\"\"\"\n\ntriangle = [[1,2,3],[4,5,6],[7,8,9]]\n\nprint(is_isosceles(triangle))"
    },
    {
      "rank": 29,
      "score": 8.692801520950061,
      "candidate": "triangle = [int(input(\"Enter the first side: \")),\n            int(input(\"Enter the second side: \")),\n            int(input(\"Enter the third side: \"))]\n\nif triangle[0] == triangle[1] or triangle[1] == triangle[2] or triangle[2] == triangle[0]:\n    print(\"The triangle is isosceles\")\nelse:\n    print(\"The triangle is not isosceles\")"
    },
    {
      "rank": 30,
      "score": 8.632293453617281,
      "candidate": "def isIsosceles(triangle):\n    return triangle[0]!= triangle[1] and triangle[0]!= triangle[2]\n\ndef main():\n    triangle = [int(x) for x in input().split()]\n    if isIsosceles(triangle):\n        print('Isosceles')\n    else:\n        print('Not isosceles')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.625262456968262,
      "candidate": "def isIsosceles(triangle):\n    if triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    triangle = [2, 3, 4]\n    print isIsosceles(triangle)"
    },
    {
      "rank": 32,
      "score": 8.616253589228675,
      "candidate": "#!/usr/bin/python\n\ndef isIsosceles(p1,p2,p3):\n    return abs(p1[0]-p2[0]) < abs(p1[1]-p2[1])\n\ndef main():\n    p1 = [1,2]\n    p2 = [1,3]\n    p3 = [1,4]\n    print isIsosceles(p1,p2,p3)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.610076160146226,
      "candidate": "from collections import deque\n\ndef is_isosceles(triangle):\n    \"\"\"\n    Input Triangle is a list of length 3.\n    Output 1 if triangle is isosceles, 0 if not isosceles\n    \"\"\"\n    if triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n        return 1\n    else:\n        return 0\n\ndef print_isosceles(triangle):\n    \"\"\"\n    Input Triangle is a list of length 3.\n    Output 1 if triangle is isosceles, 0 if not isosceles\n    \"\"\"\n    if triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n        return \"TRIANGLE ISOSCELES\"\n    else:\n        return \"TRIANGLE IS NOT ISOSCELES\"\n\ndef check_isosceles(triangle):\n    \"\"\"\n    Input Triangle is a list of length 3.\n    Output 1 if triangle is isosceles, 0 if not isosceles\n    \"\"\"\n    if triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n        return 1\n    else:\n        return 0\n\ndef check_isosceles_2(triangle):\n    \"\"\"\n    Input Triangle is a list of length 3.\n    Output 1 if triangle is isosceles, 0 if not isosceles\n    \"\"\"\n    if triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n        return 1\n    else:\n        return 0\n\ndef check_isosceles_3(triangle):\n    \"\"\"\n    Input Triangle is a list of length 3.\n    Output 1 if triangle is isosceles, 0 if not isosceles\n    \"\"\"\n    if triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n        return 1\n    else:\n        return 0\n\ndef check_isosceles_4(triangle):\n    \"\"\"\n    Input Triangle is a list of length 3.\n    Output 1 if triangle is isosceles, 0 if not isosceles\n    \"\"\"\n    if triangle[0] == triangle[1] and triangle"
    },
    {
      "rank": 34,
      "score": 8.606486429141842,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Input triangle is a list of integers.\n    Output is a boolean.\n    \"\"\"\n\n    if triangle[0] == triangle[1]:\n        return False\n    if triangle[0] == triangle[2]:\n        return False\n    if triangle[1] == triangle[2]:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    triangle = [3, 4, 5]\n    is_isosceles(triangle)"
    },
    {
      "rank": 35,
      "score": 8.60156811074208,
      "candidate": "def is_isosceles(a, b, c):\n    return (a + b == c) or (a + c == b)\n\na, b, c = map(int, input().split())\nprint(is_isosceles(a, b, c))"
    },
    {
      "rank": 36,
      "score": 8.565425580227462,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Check if a triangle is isosceles.\n    \"\"\"\n    return a * b == c * c\n\n\nif __name__ == '__main__':\n    print(is_isosceles(3, 4, 5))\n    print(is_isosceles(3, 5, 6))\n    print(is_isosceles(3, 4, 7))"
    },
    {
      "rank": 37,
      "score": 8.548876241946822,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Arguments:\n        triangle -- a list of numbers\n    Returns:\n        True if the triangle is isosceles, False otherwise.\n    \"\"\"\n    return len(triangle) == 3 and triangle[0] == triangle[1] and triangle[1] == triangle[2]\n\nif __name__ == \"__main__\":\n    triangle = [1, 2, 3]\n    print is_isosceles(triangle)"
    },
    {
      "rank": 38,
      "score": 8.542875062379007,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Write a function to check if a triangle is isosceles or not.\n    triangle is a list of three numbers.\n    Return True if the triangle is isosceles, otherwise False.\n    \"\"\"\n\n    # Write your code here\n    if triangle[1] == triangle[2]:\n        return True\n    elif triangle[1] == triangle[0] and triangle[2] == triangle[0]:\n        return True\n    elif triangle[1] == triangle[0] and triangle[2] == triangle[1]:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 39,
      "score": 8.53012858503943,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Isosceles triangle is a triangle whose height is equal to the sum of the\n    two sides.\n\n    Input:\n        triangle = (x1, y1, x2, y2, x3, y3)\n    Output:\n        True or False\n    \"\"\"\n\n    return (sum(triangle[0:3]) == triangle[3])\n\ndef is_scalene(triangle):\n    \"\"\"\n    Scalene triangle is a triangle whose height is greater than the sum of the\n    two sides.\n\n    Input:\n        triangle = (x1, y1, x2, y2, x3, y3)\n    Output:\n        True or False\n    \"\"\"\n\n    return (sum(triangle[0:3]) > triangle[3])\n\nif __name__ == \"__main__\":\n    triangle = (1, 2, 3, 4, 5, 6)\n\n    print(is_isosceles(triangle))\n    print(is_scalene(triangle))"
    },
    {
      "rank": 40,
      "score": 8.499905739299377,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n    triangle: The triangle\n    \"\"\"\n    for i in range(3):\n        for j in range(i):\n            if triangle[i] == triangle[j] and triangle[i]!= triangle[0]:\n                return True\n    return False\n\nif __name__ == '__main__':\n    triangle = [1, 2, 3]\n    assert is_isosceles(triangle) == True"
    },
    {
      "rank": 41,
      "score": 8.478208546788407,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Write a function to check if triangle is isosceles or not.\n    Input: triangle is a list of three integers.\n    Output: True if triangle is isosceles, False otherwise.\n    \"\"\"\n    if triangle[0] + triangle[1] == triangle[2]:\n        return True\n    else:\n        return False\n\ntriangle = [3, 4, 5]\nprint(is_isosceles(triangle))"
    },
    {
      "rank": 42,
      "score": 8.437695832075478,
      "candidate": "def is_isosceles(a, b, c):\n    return (a == b) or (b == c) or (a == c)\n\n\na, b, c = map(int, input().split())\nif is_isosceles(a, b, c):\n    print(\"Isosceles\")\nelse:\n    print(\"Not isosceles\")"
    },
    {
      "rank": 43,
      "score": 8.408439383654278,
      "candidate": "from math import sqrt\n\n\ndef is_isosceles(a, b, c):\n    \"\"\"\n    Check if the triangle is isosceles.\n\n    :type a: float\n    :type b: float\n    :type c: float\n    :rtype: bool\n    \"\"\"\n    return sqrt(a ** 2 + b ** 2) == sqrt(a ** 2 + c ** 2)\n\n\nif __name__ == \"__main__\":\n    print(is_isosceles(1, 2, 3))\n    print(is_isosceles(1, 2, 4))\n    print(is_isosceles(3, 4, 5))"
    },
    {
      "rank": 44,
      "score": 8.386620303250325,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Write a function that checks if a given triangle is isosceles or not.\n    The triangle is given as a list of three integers.\n    \"\"\"\n    return triangle[2] - triangle[0] == triangle[1] - triangle[0]\n\ndef main():\n    \"\"\"\n    Write a function that checks if a given triangle is isosceles or not.\n    The triangle is given as a list of three integers.\n    \"\"\"\n    triangle = [1, 2, 3]\n    print(is_isosceles(triangle))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.375312293858853,
      "candidate": "# https://www.hackerrank.com/challenges/isosceles-triangle/problem\n\nn = int(input())\nfor i in range(n):\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    if (a + b == c and a == b == c):\n        print(\"Isosceles\")\n    else:\n        print(\"Not isosceles\")"
    },
    {
      "rank": 46,
      "score": 8.351614956112536,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n    a, b and c are the three sides of the triangle.\n    \"\"\"\n    return a == b or b == c or a == c\n\nprint is_isosceles(1, 2, 3)"
    },
    {
      "rank": 47,
      "score": 8.331556294201176,
      "candidate": "def is_isosceles(height: int, width: int):\n    \"\"\"\n    height - height of the triangle\n    width - width of the triangle\n    \"\"\"\n    return height == width\n\nif __name__ == \"__main__\":\n    assert is_isosceles(3, 3) == True\n    assert is_isosceles(4, 4) == False"
    },
    {
      "rank": 48,
      "score": 8.327375965969855,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Input: A triangle, a list of numbers\n    Output: True or False\n    \"\"\"\n    if len(triangle)!= 3:\n        return False\n    if triangle[0] + triangle[1]!= triangle[2]:\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    triangle = [1,2,3]\n    assert is_isosceles(triangle) == True"
    },
    {
      "rank": 49,
      "score": 8.327367757082776,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Input triangle as a list of integers.\n    Output is True or False.\n    \"\"\"\n    return triangle[2] == triangle[1]\n\nif __name__ == \"__main__\":\n    triangle = [1, 2, 3]\n    print(is_isosceles(triangle))"
    },
    {
      "rank": 50,
      "score": 8.298597569547805,
      "candidate": "def is_isosceles(a, b, c):\n    if a + b == c:\n        return True\n    elif a + c == b:\n        return True\n    else:\n        return False\n\nprint(is_isosceles(3, 4, 5))"
    },
    {
      "rank": 51,
      "score": 8.2938925966498,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Check if the given triangle is isosceles or not.\n\n    :type triangle: list\n    :rtype: bool\n    \"\"\"\n    if triangle[0]!= triangle[1] and triangle[1]!= triangle[2]:\n        return True\n    else:\n        return False\n\ndef main():\n    triangle = [1, 2, 3]\n    print(is_isosceles(triangle))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.289838256518838,
      "candidate": "def is_isosceles(a, b, c):\n    return a == b and b == c or a == c and b == a\n\ndef is_isosceles_recursive(a, b, c):\n    if a == b and b == c:\n        return True\n    elif a == b or a == c or b == c:\n        return False\n    else:\n        return is_isosceles_recursive(a, c, b)\n\ndef is_isosceles_iterative(a, b, c):\n    return a == b and b == c or a == c and b == a\n\ndef main():\n    a = int(input('Enter a: '))\n    b = int(input('Enter b: '))\n    c = int(input('Enter c: '))\n\n    is_isosceles_recursive(a, b, c)\n    is_isosceles_iterative(a, b, c)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.251903304236286,
      "candidate": "def is_isosceles(a,b,c):\n    return (a==b or b==c) and a!=c\n\na = int(input('Enter the first number: '))\nb = int(input('Enter the second number: '))\nc = int(input('Enter the third number: '))\n\nif is_isosceles(a,b,c):\n    print('The triangle is isosceles')\nelse:\n    print('The triangle is not isosceles')"
    },
    {
      "rank": 54,
      "score": 8.214125058964552,
      "candidate": "# A solution of the problem is that\n#    (a + b + c) * (a + b - c) > 0\n#    (a + b - c) * (a + b + c) > 0\n#    (a - b + c) * (a - b - c) > 0\n#    (a - b - c) * (a + b + c) > 0\n#\n#    (a + b - c) * (a - b + c) > 0\n#    (a - b + c) * (a + b - c) > 0\n#    (a + b + c) * (a - b - c) > 0\n#    (a - b - c) * (a + b - c) > 0\n\n# Note:\n#    a, b, and c are positive integers\n\ndef is_isosceles(a, b, c):\n    return (a + b + c) * (a + b - c) > 0\n\nif __name__ == \"__main__\":\n    print(is_isosceles(1, 2, 3))\n    print(is_isosceles(2, 3, 4))\n    print(is_isosceles(3, 4, 5))\n    print(is_isosceles(4, 5, 6))"
    },
    {
      "rank": 55,
      "score": 8.212735598038213,
      "candidate": "def is_isosceles(height):\n    \"\"\"\n    Input a triangle height.\n    Output is the isosceles status.\n    \"\"\"\n    if height <= 0:\n        return False\n    else:\n        return True\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_isosceles(3) == True, \"Isosceles\"\n    assert is_isosceles(4) == False, \"Not isosceles\"\n    assert is_isosceles(5) == False, \"Not isosceles\""
    },
    {
      "rank": 56,
      "score": 8.211579567659316,
      "candidate": "import math\n\ndef is_isosceles(a, b, c):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n    Input:\n        a, b, c: vertices of the triangle\n    Output:\n        True or False\n    \"\"\"\n    # calculate the area of the triangle\n    area = (a * b) + (b * c) + (c * a)\n    # calculate the perimeter of the triangle\n    perimeter = math.sqrt((a + b + c) * (a + b + c) + (b + c + a) * (b + c + a) + (c + a + b) * (c + a + b))\n    # check if the area is equal to the perimeter\n    if (area == perimeter):\n        return True\n    else:\n        return False\n\ndef main():\n    \"\"\"\n    Main function to run the program.\n    \"\"\"\n    # test case 1:\n    # a = 2, b = 3, c = 4\n    # result: isosceles\n    # test case 2:\n    # a = 4, b = 3, c = 5\n    # result: not isosceles\n    # test case 3:\n    # a = 4, b = 5, c = 6\n    # result: isosceles\n    # test case 4:\n    # a = 4, b = 6, c = 7\n    # result: not isosceles\n    # test case 5:\n    # a = 3, b = 3, c = 3\n    # result: isosceles\n    # test case 6:\n    # a = 3, b = 3, c = 4\n    # result: not isosceles\n    # test case 7:\n    # a = 4, b = 3, c = 5\n    # result: not isosceles\n    # test case 8:\n    # a = 5, b = 3, c = 4\n    # result: not isosceles\n    # test case 9:\n    # a = 1, b = 1, c = 1\n    # result: isosceles\n    # test case 10:\n    # a = 1, b = 1, c = 2\n    # result"
    },
    {
      "rank": 57,
      "score": 8.209707251476969,
      "candidate": "# https://www.hackerrank.com/challenges/isosceles-triangle/problem\n\ndef is_isosceles(x, y, z):\n    return (x + y > z) and (x + z > y)\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        x, y, z = map(int, input().split())\n        if is_isosceles(x, y, z):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 8.2048573255218,
      "candidate": "# https://leetcode.com/problems/check-if-triangle-is-isosceles/\n# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, v1, v2, v3):\n#         \"\"\"\n#         Triangle(v1, v2, v3) -> Triangle\n#         \"\"\"\n#         self.v1 = v1\n#         self.v2 = v2\n#         self.v3 = v3\n\nclass Solution(object):\n    def isIsosceles(self, v1, v2, v3):\n        \"\"\"\n        :type v1: int\n        :type v2: int\n        :type v3: int\n        :rtype: bool\n        \"\"\"\n        return (v2-v1) == (v3-v2)"
    },
    {
      "rank": 59,
      "score": 8.172253082181854,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    :type triangle: List[int]\n    :rtype: bool\n    \"\"\"\n    sum_of_sides = 0\n    for side in triangle:\n        sum_of_sides += side\n    return sum_of_sides % 2 == 0\n\nif __name__ == '__main__':\n    triangle = [1, 2, 3]\n    print(is_isosceles(triangle))\n    triangle = [2, 3, 4]\n    print(is_isosceles(triangle))\n    triangle = [3, 4, 5]\n    print(is_isosceles(triangle))"
    },
    {
      "rank": 60,
      "score": 8.163300679823958,
      "candidate": "def is_isosceles(x, y):\n    \"\"\"\n    x and y are two numbers.\n    \"\"\"\n    return x == y or x * y == 3 * (x - y)\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    assert is_isosceles(1, 1) == True\n    assert is_isosceles(1, 2) == False\n    assert is_isosceles(2, 1) == False\n    assert is_isosceles(2, 2) == True\n    assert is_isosceles(2, 3) == False\n    assert is_isosceles(2, 4) == False\n    assert is_isosceles(2, 5) == False\n    assert is_isosceles(2, 6) == False\n    assert is_isosceles(2, 7) == True\n    assert is_isosceles(2, 8) == True\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.144125099485041,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Given a triangle, return True if it is isosceles, False otherwise.\n    :param triangle: A triangle as a list of integers.\n    :return: True or False\n    \"\"\"\n    if triangle is None or len(triangle)!= 3:\n        return False\n\n    a, b, c = triangle\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\n\nif __name__ == '__main__':\n    triangle = [3, 4, 5]\n    print(is_isosceles(triangle))"
    },
    {
      "rank": 62,
      "score": 8.143591138329747,
      "candidate": "# https://www.hackerrank.com/challenges/isosceles-triangle/problem\n\ndef is_isosceles(sides):\n    return (sides[0] == sides[1] and sides[0] == sides[2]) or (sides[1] == sides[2])\n\n\nif __name__ == \"__main__\":\n    sides = list(map(int, input().split()))\n    print(is_isosceles(sides))"
    },
    {
      "rank": 63,
      "score": 8.105983444291466,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Check if triangle a,b,c is isosceles.\n    \"\"\"\n    return a+b==c or b+c==a or a+c==b\n\ndef is_isosceles_rec(a, b, c):\n    \"\"\"\n    Check if triangle a,b,c is isosceles.\n    \"\"\"\n    if a+b==c or b+c==a or a+c==b:\n        return True\n    return is_isosceles_rec(a, b, c-1) and is_isosceles_rec(b, c, a)\n\ndef is_isosceles_rec_test(a, b, c):\n    \"\"\"\n    Check if triangle a,b,c is isosceles.\n    \"\"\"\n    if a+b==c or b+c==a or a+c==b:\n        return True\n    return is_isosceles_rec_test(a, b, c-1) and is_isosceles_rec_test(b, c, a)\n\nif __name__ == '__main__':\n    print(is_isosceles_rec_test(4, 5, 6))"
    },
    {
      "rank": 64,
      "score": 8.08452234024709,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Input:\n        a, b, c = the three vertices of a triangle\n    Output:\n        True or False\n    \"\"\"\n    if (a+b>c) and (a+c>b) and (b+c>a):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    assert is_isosceles(4, 6, 7) == True, \"is_isosceles(4, 6, 7) = True\"\n    assert is_isosceles(1, 3, 2) == False, \"is_isosceles(1, 3, 2) = False\""
    },
    {
      "rank": 65,
      "score": 8.024835682833125,
      "candidate": "# https://www.hackerrank.com/challenges/isosceles-triangle/problem\n\ndef is_isosceles(a, b, c):\n    return a == b and b == c\n\nif __name__ == '__main__':\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        if is_isosceles(a, b, c):\n            print(\"TRIANGLE ISOSCELES\")\n        else:\n            print(\"TRIANGLE IS NOT ISOSCELES\")"
    },
    {
      "rank": 66,
      "score": 7.990432406683839,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    a, b, c: The three sides of the triangle\n    return: Boolean value\n    \"\"\"\n    if (a + b > c and a + c > b and b + c > a):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print is_isosceles(2, 3, 4)"
    },
    {
      "rank": 67,
      "score": 7.938028884277233,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n    triangle = [x, y, z]\n    returns True if the triangle is isosceles, otherwise False.\n    \"\"\"\n    return ((triangle[0] + triangle[1] == triangle[2]) or (triangle[0] + triangle[2] == triangle[1]))\n\ndef main():\n    \"\"\"\n    Main function to test the isosceles function.\n    \"\"\"\n    triangle = [3, 4, 5]\n    print(is_isosceles(triangle))\n    triangle = [3, 7, 10]\n    print(is_isosceles(triangle))\n    triangle = [4, 5, 6]\n    print(is_isosceles(triangle))\n    triangle = [5, 6, 4]\n    print(is_isosceles(triangle))\n    triangle = [6, 4, 5]\n    print(is_isosceles(triangle))\n    triangle = [7, 8, 9]\n    print(is_isosceles(triangle))\n    triangle = [8, 9, 7]\n    print(is_isosceles(triangle))\n    triangle = [9, 7, 8]\n    print(is_isosceles(triangle))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 68,
      "score": 7.915588979966494,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Input triangle is a list of integers.\n    Output true or false if the triangle is isosceles.\n    \"\"\"\n    # A triangle is isosceles if its side lengths are same and different\n    # from 3.\n    side1 = triangle[0]\n    side2 = triangle[1]\n    side3 = triangle[2]\n\n    if side1 == side2 and side2 == side3:\n        return False\n    elif side1 == side2 or side1 == side3 or side2 == side3:\n        return True\n    else:\n        return False\n\n# Test Cases\ntriangle = [1, 2, 3]\nassert(is_isosceles(triangle) == True)\ntriangle = [1, 2, 4]\nassert(is_isosceles(triangle) == True)\ntriangle = [1, 3, 4]\nassert(is_isosceles(triangle) == True)\ntriangle = [2, 3, 4]\nassert(is_isosceles(triangle) == True)\ntriangle = [2, 3, 5]\nassert(is_isosceles(triangle) == False)\ntriangle = [3, 4, 5]\nassert(is_isosceles(triangle) == False)\ntriangle = [3, 4, 6]\nassert(is_isosceles(triangle) == False)\ntriangle = [5, 6, 7]\nassert(is_isosceles(triangle) == False)\ntriangle = [5, 6, 8]\nassert(is_isosceles(triangle) == False)\ntriangle = [5, 6, 9]\nassert(is_isosceles(triangle) == False)"
    },
    {
      "rank": 69,
      "score": 7.8912769574414305,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    a, b and c are the three sides of the triangle.\n\n    Return True if the triangle is isosceles, False otherwise.\n    \"\"\"\n    return abs(a - b) == abs(a - c)\n\n\ndef is_isosceles_recur(a, b, c):\n    \"\"\"\n    a, b and c are the three sides of the triangle.\n\n    Return True if the triangle is isosceles, False otherwise.\n    \"\"\"\n    if is_isosceles(a, b, c):\n        return True\n    if b == 0:\n        return False\n    if c == 0:\n        return False\n    return is_isosceles_recur(a, b - a, c - b) or is_isosceles_recur(a, b - b, c - a)\n\nif __name__ == \"__main__\":\n    print(is_isosceles(2, 3, 4))\n    print(is_isosceles(1, 1, 1))\n    print(is_isosceles_recur(2, 3, 4))\n    print(is_isosceles_recur(1, 1, 1))"
    },
    {
      "rank": 70,
      "score": 7.868947655733293,
      "candidate": "# A triangle is isosceles if one side is twice the other.\n# The function takes the side lengths of the triangle as inputs.\ndef is_isosceles(a, b, c):\n    return a == 2*b or b == 2*c or c == 2*a\n\n# This function prints the isosceles triangle.\ndef is_isosceles_triangle():\n    a, b, c = input().split()\n    a, b, c = [int(i) for i in (a, b, c)]\n    if is_isosceles(a, b, c):\n        print(\"Isosceles\")\n    else:\n        print(\"Not isosceles\")\n\nis_isosceles_triangle()"
    },
    {
      "rank": 71,
      "score": 7.84634113240411,
      "candidate": "triangle = [int(x) for x in input().split()]\n\nif triangle[0] == triangle[1] and triangle[1] == triangle[2]:\n    print(\"Isosceles\")\nelif triangle[0]!= triangle[1] and triangle[1]!= triangle[2] and triangle[0]!= triangle[2]:\n    print(\"Not isosceles\")\nelse:\n    print(\"Not an isosceles triangle\")"
    },
    {
      "rank": 72,
      "score": 7.834022619458933,
      "candidate": "#!/bin/python\n\n# Definition for a triangle.\nclass Point(object):\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return '({},{},{})'.format(self.a, self.b, self.c)\n\nclass Solution(object):\n    def isIsosceles(self, p):\n        \"\"\"\n        :type p: Point\n        :rtype: bool\n        \"\"\"\n        # check if a or b are same\n        if p.a == p.b:\n            return False\n        # check if a and c are same\n        if p.a == p.c:\n            return False\n        # check if a and b are same\n        if p.b == p.c:\n            return False\n        # check if a or c are same\n        if p.a == p.c or p.b == p.c:\n            return False\n        # if they are not same, return True\n        return True\n\nif __name__ == '__main__':\n    p = Point(1, 2, 3)\n    print Solution().isIsosceles(p)"
    },
    {
      "rank": 73,
      "score": 7.780351419995229,
      "candidate": "is_isosceles = lambda a, b, c: a == b and b == c\n\n# https://www.hackerrank.com/challenges/isosceles-triangle/problem\n# In Python 2\ndef is_isosceles_triangle(a, b, c):\n    if a == b and b == c:\n        return True\n    elif a < b and b < c:\n        return False\n    elif a > b and b > c:\n        return False\n    else:\n        return is_isosceles(a, b, c)\n\n# In Python 3\ndef is_isosceles_triangle(a, b, c):\n    return is_isosceles(a, b, c)"
    },
    {
      "rank": 74,
      "score": 7.738292593776799,
      "candidate": "def is_isosceles(first, second, third):\n    return (first * third) - (second * second) == 0\n\ndef is_isosceles_check(first, second, third):\n    return is_isosceles(first, second, third) and is_isosceles(second, third, first)\n\ndef main():\n    first = int(input())\n    second = int(input())\n    third = int(input())\n\n    if is_isosceles_check(first, second, third):\n        print('isosceles')\n    else:\n        print('not isosceles')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 75,
      "score": 7.7320703513377165,
      "candidate": "# https://github.com/hankcs/corpus/blob/master/data/isosceles.txt\n\ntriangle_list = [\n    (1,1,1),\n    (2,2,1),\n    (3,3,1),\n    (4,5,3),\n    (5,5,3),\n    (6,10,4),\n    (7,13,5),\n    (8,16,6),\n    (9,22,7),\n    (10,25,8),\n    (11,31,10),\n    (12,37,11),\n    (13,44,13),\n    (14,54,14),\n    (15,64,15),\n    (16,81,16),\n    (17,100,17),\n    (18,121,18),\n    (19,144,19),\n    (20,166,20),\n    (21,196,21),\n    (22,226,22),\n    (23,257,23),\n    (24,288,24),\n    (25,329,25),\n    (26,370,26),\n    (27,408,27),\n    (28,452,28),\n    (29,500,29),\n    (30,547,30),\n    (31,598,31),\n    (32,650,32),\n    (33,702,33),\n    (34,755,34),\n    (35,812,35),\n    (36,868,36),\n    (37,924,37),\n    (38,981,38),\n    (39,1036,39),\n    (40,1102,40),\n    (41,1168,41),\n    (42,1228,42),\n    (43,1290,43),\n    (44,1362,44),\n    (45,1428,45),\n    (46,1494,46),\n    (47,1560,47),\n    (48,1628,48),\n    (49,1696,49),\n    (50,1764,50),\n    (51,1832,"
    },
    {
      "rank": 76,
      "score": 7.705183449260731,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    Input: triangle is a list of points.\n    Output: True if triangle is isosceles, False otherwise.\n    \"\"\"\n    if len(triangle) < 3:\n        return False\n    for i in range(len(triangle)):\n        if triangle[i][0] == triangle[i][1] == triangle[i][2]:\n            return True\n    return False\n\nprint(is_isosceles([[1, 2, 3], [1, 1, 1], [1, 2, 2]]))"
    },
    {
      "rank": 77,
      "score": 7.5819855281879285,
      "candidate": "def is_isosceles(s):\n    \"\"\"\n    s is a string that represents a triangle.\n\n    Return true if the triangle is isosceles, otherwise return false.\n\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    # Check if the string is a triangle\n    if len(s)!= 3:\n        return False\n\n    # Calculate the area\n    area = 0\n    for i in range(0, len(s) - 1):\n        area += float(s[i]) * float(s[i + 1])\n\n    # Check if the area is greater than 1\n    if area > 1:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 78,
      "score": 7.562924366763077,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: bool\n    \"\"\"\n    return abs(a - b) == abs(a - c) and abs(b - c) == abs(a - c)\n\nif __name__ == \"__main__\":\n    assert is_isosceles(3, 4, 5) is False, \"Test 1 failed\"\n    assert is_isosceles(1, 4, 5) is True, \"Test 2 failed\"\n    assert is_isosceles(1, 4, 1) is False, \"Test 3 failed\"\n    assert is_isosceles(1, 1, 1) is False, \"Test 4 failed\""
    },
    {
      "rank": 79,
      "score": 7.4878043221155455,
      "candidate": "def is_isosceles(sides):\n    return len(sides) == 3 and sum(sides) == sides[0] + sides[1]\n\ndef main():\n    triangle = [int(x) for x in input().split()]\n    print(is_isosceles(triangle))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 80,
      "score": 7.464609382504557,
      "candidate": "def is_isosceles(x, y, z):\n    if x == y or y == z:\n        return True\n    return False\n\n\nprint is_isosceles(2, 3, 4)\nprint is_isosceles(4, 5, 6)\nprint is_isosceles(6, 7, 8)\nprint is_isosceles(2, 3, 6)\nprint is_isosceles(4, 5, 8)\nprint is_isosceles(6, 7, 12)\nprint is_isosceles(12, 18, 24)\nprint is_isosceles(3, 4, 5)\nprint is_isosceles(4, 5, 6)\nprint is_isosceles(6, 7, 8)\nprint is_isosceles(2, 3, 6)\nprint is_isosceles(4, 5, 8)\nprint is_isosceles(6, 7, 12)\nprint is_isosceles(12, 18, 24)\nprint is_isosceles(3, 4, 5)\nprint is_isosceles(4, 5, 6)\nprint is_isosceles(6, 7, 8)\nprint is_isosceles(2, 3, 6)\nprint is_isosceles(4, 5, 8)\nprint is_isosceles(6, 7, 12)\nprint is_isosceles(12, 18, 24)\nprint is_isosceles(3, 4, 5)\nprint is_isosceles(4, 5, 6)\nprint is_isosceles(6, 7, 8)\nprint is_isosceles(2, 3, 6)\nprint is_isosceles(4, 5, 8)\nprint is_isosceles(6, 7, 12)\nprint is_isosceles(12, 18, 24)\nprint is_isosceles(3, 4, 5)\nprint is_isosceles(4, 5, 6)\nprint is_isosceles(6, 7, 8)\nprint is_isosceles(2, 3"
    },
    {
      "rank": 81,
      "score": 3.0,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Write a function is_isosceles that takes a triangle as input and returns True\n    if the triangle is isosceles, False otherwise.\n    \"\"\"\n    return triangle[0] == triangle[1] and triangle[1] == triangle[2]\n\n# tests\n\nassert is_isosceles([1, 2, 3, 4]) == False\nassert is_isosceles([1, 2, 3, 4, 5]) == True"
    },
    {
      "rank": 82,
      "score": 3.0,
      "candidate": "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def isIsosceles(self, triangle):\n        \"\"\"\n        :type triangle: List[int]\n        :rtype: bool\n        \"\"\"\n        a, b, c = triangle\n        return a == b == c or abs(a - b) == abs(a - c) == abs(b - c)\n\ndef main():\n    # print(Solution().isIsosceles([3, 4, 5]))\n    print(Solution().isIsosceles([1, 3, 1]))\n    print(Solution().isIsosceles([1, 3, 4]))\n    print(Solution().isIsosceles([3, 1, 4]))\n    print(Solution().isIsosceles([3, 4, 1]))\n    print(Solution().isIsosceles([4, 3, 1]))\n    print(Solution().isIsosceles([4, 3, 2]))\n    print(Solution().isIsosceles([3, 4, 3]))\n    print(Solution().isIsosceles([3, 4, 4]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Write a function is_isosceles to check if the triangle is isosceles.\n    Input: triangle = a list of three numbers\n    Output: true if the triangle is isosceles, false otherwise\n    \"\"\"\n    for i in range(len(triangle)-1):\n        if triangle[i] + triangle[i+1] == triangle[i+2]:\n            return True\n        else:\n            return False\n\n\n# Test Cases\n\ntriangle = [3, 4, 5]\nprint(is_isosceles(triangle))\n\ntriangle = [1, 2, 3]\nprint(is_isosceles(triangle))\n\ntriangle = [3, 4, 6]\nprint(is_isosceles(triangle))"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Write a function to check if a triangle is isosceles or not.\n\n    Example\n    Input: 3, 4, 5\n    Output: True\n    Explanation: a = 3, b = 4, c = 5\n    \"\"\"\n    return a + b == c\n\nif __name__ == '__main__':\n    assert is_isosceles(3, 4, 5) == True\n    assert is_isosceles(5, 4, 3) == False\n    assert is_isosceles(1, 2, 3) == False"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def checkIsosceles(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        points.sort(key=lambda x: x[0])\n        if len(points) < 3:\n            return True\n        sum = 0\n        for i in range(len(points)-2):\n            sum += points[i][1]\n        if sum/2 == points[len(points)-1][1]:\n            return True\n        else:\n            return False\n\n# Time:  O(n)\n# Space: O(n)\n# Recursive: O(n)\n# Dynamic Programming: O(n)\nclass Solution2(object):\n    def checkIsosceles(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if len(points) < 3:\n            return True\n        max_sum = 0\n        for i in range(len(points)-2):\n            max_sum = max(max_sum, points[i][1] + points[i+1][1])\n        if max_sum == points[len(points)-1][1]:\n            return True\n        else:\n            return False"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Check if a triangle is isosceles.\n\n    Input: 3 numbers a, b, c\n    Output: True or False\n    \"\"\"\n    return (a + b == c) or (a + c == b)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    test_cases = int(input())\n\n    for i in range(test_cases):\n        a, b, c = [int(x) for x in input().split()]\n\n        print(is_isosceles(a, b, c))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Check if a, b and c is isosceles triangle\n    :param a: first number of triangle\n    :param b: second number of triangle\n    :param c: third number of triangle\n    :return: True if triangle is isosceles\n    \"\"\"\n    return a == b and b == c or a == c and b == a\n\ndef is_isosceles_or_scalene(a, b, c):\n    \"\"\"\n    Check if a, b and c is isosceles or scalene triangle\n    :param a: first number of triangle\n    :param b: second number of triangle\n    :param c: third number of triangle\n    :return: True if triangle is isosceles or scalene\n    \"\"\"\n    return is_isosceles(a, b, c) or not is_isosceles(a, b, c)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_isosceles(2, 3, 4), \"Example is isosceles\"\n    assert not is_isosceles(2, 3, 5), \"Example is not isosceles\"\n    assert is_isosceles_or_scalene(2, 3, 4), \"Example is isosceles or scalene\"\n    assert not is_isosceles_or_scalene(2, 3, 5), \"Example is not isosceles or scalene\""
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    :param triangle: a triangle\n    :return: true or false\n    \"\"\"\n    return triangle[0] + triangle[1] == triangle[2]\n\n# Your code should pass the following test cases.\n# Your code should also work for the other test cases.\n# Test Cases:\n#  [5, 3, 4]\n#  [3, 5, 6]\n#  [4, 5, 1]\n#  [1, 4, 5]\n#  [1, 1, 1]"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Input triangle is a list of integers.\n    Output: True or False\n    \"\"\"\n    # TODO: Write your code here\n    # print(triangle)\n    if len(triangle) == 3:\n        if triangle[0] == triangle[1] == triangle[2]:\n            return False\n        elif triangle[1] == triangle[2]:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\n# Triangles are given as a list of integers.\ntriangle = [3, 4, 6]\n\n# The function is_isosceles() returns True if the triangle is isosceles, False otherwise.\nprint(is_isosceles(triangle))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# Definition for a triangle.\n# class Point:\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution:\n    def isIsosceles(self, p1: \"Point\", p2: \"Point\", p3: \"Point\") -> bool:\n        # Write your code here\n        return p1.a == p2.a and p2.b == p3.b\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.isIsosceles(p1,p2,p3)"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    def isIsosceles(self, p1, p2, p3):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :type p3: Point\n        :rtype: bool\n        \"\"\"\n        # if p1.x == p2.x and p2.y == p3.y:\n        #     return True\n        # else:\n        #     return False\n        return (abs(p1.x - p2.x) == abs(p2.y - p3.y)) or (abs(p1.y - p2.y) == abs(p2.x - p3.x))\n\nif __name__ == '__main__':\n    sol = Solution()\n    p1 = Point(1, 1)\n    p2 = Point(2, 2)\n    p3 = Point(3, 3)\n    print sol.isIsosceles(p1, p2, p3)"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    \"\"\"\n    return a == b and b == c\n\n\ndef is_isosceles_recursive(a, b, c):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    \"\"\"\n    if a < b and b < c:\n        return True\n    elif a > b and b > c:\n        return True\n    else:\n        return False\n\n\ndef is_isosceles_iterative(a, b, c):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    \"\"\"\n    if a < b and b < c:\n        return True\n    elif a > b and b > c:\n        return True\n    else:\n        return False\n\n\ndef is_isosceles_recursive_2(a, b, c):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    \"\"\"\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\n\ndef is_isosceles_recursive_3(a, b, c):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\n\ndef is_isosceles_recursive_4(a, b, c):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\n\ndef is_isosceles_recursive_5(a, b, c):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\n\ndef is_isosceles_iterative_2(a, b, c):\n    \"\"\"\n    Check if triangle is isosceles or not.\n    \"\"\"\n    if a == b"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "import math\n\n\ndef is_isosceles(triangle):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n\n    :type triangle: list\n    :rtype: bool\n    \"\"\"\n    return len(triangle) == 3 and triangle[0] == triangle[1] == triangle[2]\n\n\ndef is_isosceles2(triangle):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n\n    :type triangle: list\n    :rtype: bool\n    \"\"\"\n    return len(triangle) == 3 and triangle[0] == triangle[1]!= triangle[2]\n\n\ndef is_isosceles3(triangle):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n\n    :type triangle: list\n    :rtype: bool\n    \"\"\"\n    return len(triangle) == 3 and triangle[0]!= triangle[1] == triangle[2]\n\n\ndef is_isosceles4(triangle):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n\n    :type triangle: list\n    :rtype: bool\n    \"\"\"\n    return len(triangle) == 3 and triangle[0]!= triangle[1]!= triangle[2]\n\n\ndef is_isosceles5(triangle):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n\n    :type triangle: list\n    :rtype: bool\n    \"\"\"\n    return len(triangle) == 3 and triangle[0]!= triangle[1]!= triangle[2]!= triangle[0]\n\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    triangle = [1, 2, 3]\n    print(is_isosceles(triangle))\n    print(is_isosceles2(triangle))\n    print(is_isosceles3(triangle))\n    print(is_isosceles4(triangle))\n    print(is_isosceles5(triangle))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "# Triangle is isosceles\n\n# Triangle is not isosceles\n\n# Note: The function should return 0 or 1\n\ndef triangle(a, b, c):\n    return a == b and b == c or a == c and b == c\n\n\nprint(triangle(1, 2, 3))\nprint(triangle(1, 3, 4))\nprint(triangle(3, 1, 4))\nprint(triangle(1, 2, 4))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "from collections import deque\n\ndef is_isosceles(triangle):\n    \"\"\"\n    Write a function to check if the triangle is isosceles or not.\n\n    Example:\n    Input:\n        [2, 2, 4]\n        [3, 1, 4]\n        [4, 2, 2]\n        [1, 1, 3]\n\n    Output:\n        True\n        False\n        True\n        False\n    \"\"\"\n    if triangle[0] + triangle[1] > triangle[2] or triangle[1] + triangle[2] > triangle[0]:\n        return True\n    return False\n\n\ndef is_isosceles_recursive(triangle):\n    \"\"\"\n    Write a recursive function to check if the triangle is isosceles or not.\n\n    Example:\n    Input:\n        [2, 2, 4]\n        [3, 1, 4]\n        [4, 2, 2]\n        [1, 1, 3]\n\n    Output:\n        True\n        False\n        True\n        False\n    \"\"\"\n    if triangle[0] + triangle[1] > triangle[2] or triangle[1] + triangle[2] > triangle[0]:\n        return True\n    if triangle[0] + triangle[1] > triangle[2]:\n        return False\n    if triangle[1] + triangle[2] > triangle[0]:\n        return False\n    return is_isosceles_recursive(deque(triangle[:2]) + deque([triangle[0], triangle[1]]))\n\n\nif __name__ == \"__main__\":\n    triangle = [2, 2, 4]\n    triangle.append(3)\n    triangle.append(1)\n    triangle.append(4)\n    triangle.append(2)\n    print(is_isosceles(triangle))\n    print(is_isosceles_recursive(triangle))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def is_isosceles(triangle):\n    \"\"\"\n    Write a function is_isosceles to check if the triangle is isosceles or not.\n    :param triangle: A list of three integers.\n    :return: True if the triangle is isosceles, else False.\n    \"\"\"\n    return triangle[0] == triangle[1] and triangle[1] == triangle[2]\n\ndef main():\n    \"\"\"\n    Write a main function to test your solution.\n    :return: None\n    \"\"\"\n    print(is_isosceles([4,4,4]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a + b) == c or (a + c) == b or (b + c) == a\n\ndef isIsosceles(a, b, c):\n    return (a +"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles(a, b, c):\n    \"\"\"\n    check if the triangle is isosceles\n    \"\"\"\n    return a == b and b == c\n\n\ndef isIsoceles("
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "class Triangle(object):\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return str(self.a) +'' + str(self.b) +'' + str(self.c)\n\n    def isIsosceles(self):\n        return abs(self.a - self.b) == abs(self.b - self.c)\n\n    def isScalene(self):\n        return abs(self.a - self.b) == abs(self.b - self.c) == abs(self.a - self.c)\n\n    def isEquilateral(self):\n        return abs(self.a - self.b) == abs(self.b - self.c) == abs(self.c - self.a)\n\n\ndef isosceles(triangle):\n    if triangle.isIsosceles():\n        return True\n    else:\n        return False\n\n\ndef scalene(triangle):\n    if triangle.isScalene():\n        return True\n    else:\n        return False\n\n\ndef equilateral(triangle):\n    if triangle.isEquilateral():\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    triangle = Triangle(3, 4, 5)\n    print isosceles(triangle)\n    print scalene(triangle)\n    print equilateral(triangle)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def isIsosceles(triangle):\n    \"\"\"\n    Input Triangle is a list of integers.\n    Output True or False.\n\n    :type triangle: list\n    :rtype: bool\n    \"\"\"\n    if triangle[0] + triangle[1] == triangle[2]:\n        return True\n    elif triangle[1] + triangle[2] == triangle[0]:\n        return True\n    elif triangle[0] + triangle[2] == triangle[1]:\n        return True\n    else:\n        return False\n\n\n# Your Code Goes Here\nprint(isIsosceles([2,3,4]))"
    }
  ]
}