{
  "timestamp": "2025-09-14T20:47:17.486039",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 461,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def check_consecutive(arr):\n    \"\"\"\n    :param arr: The given list.\n    :return: True if the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    else:\n        num = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i]!= num + 1:\n                return False\n            num = arr[i]\n        return True\n\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def is_consecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[i+1]:\n            count += 1\n    return count == len(nums) - 1\n\nif __name__ == '__main__':\n    nums = [1, 3, 2, 4, 5]\n    print(is_consecutive(nums))\n    nums = [1, 2, 3, 4, 5, 6]\n    print(is_consecutive(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(is_consecutive(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# The function should return True if the given list contains consecutive numbers,\n# False otherwise.\n# The function accepts a list as input.\n# The input list is already sorted.\n# Example:\n# Input: [1, 2, 3, 4, 5]\n# Returns: True\n\n# Note:\n# The length of the given list is always greater than 0.\n# The input list is always valid and sorted.\n\n# 2017.02.15\n\nimport collections\n\ndef consecutive_numbers(L):\n    if len(L) == 0: return False\n    for i in range(1, len(L)):\n        if L[i] - L[i-1]!= 1: return False\n    return True\n\nif __name__ == '__main__':\n    print(consecutive_numbers([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def is_consecutive(l):\n    \"\"\"\n    Returns True if the list l contains consecutive numbers and False otherwise.\n\n    l: List\n    \"\"\"\n    # TODO: Implement this function\n    return True\n\nif __name__ == '__main__':\n    print(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "#!/bin/python\n\n# Your function should return 1 if the list is consecutive and 0 otherwise.\n\ndef consecutive_numbers(nums):\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1]!= nums[i + 1] + nums[i + 2]:\n            return 0\n    return 1\n\nprint consecutive_numbers([1, 2, 3, 4])\nprint consecutive_numbers([2, 3, 4, 5])\nprint consecutive_numbers([3, 4, 5, 6])\nprint consecutive_numbers([4, 5, 6, 7])\nprint consecutive_numbers([5, 6, 7, 8])\nprint consecutive_numbers([6, 7, 8, 9])\nprint consecutive_numbers([7, 8, 9, 10])\nprint consecutive_numbers([8, 9, 10, 11])\nprint consecutive_numbers([9, 10, 11, 12])\nprint consecutive_numbers([10, 11, 12, 13])\nprint consecutive_numbers([11, 12, 13, 14])\nprint consecutive_numbers([12, 13, 14, 15])\nprint consecutive_numbers([13, 14, 15, 16])\nprint consecutive_numbers([14, 15, 16, 17])\nprint consecutive_numbers([15, 16, 17, 18])\nprint consecutive_numbers([16, 17, 18, 19])\nprint consecutive_numbers([17, 18, 19, 20])\nprint consecutive_numbers([18, 19, 20, 21])\nprint consecutive_numbers([19, 20, 21, 22])\nprint consecutive_numbers([20, 21, 22, 23])\nprint consecutive_numbers([21, 22, 23, 24])\nprint consecutive_numbers([22, 23, 24, 25])\nprint consecutive_numbers([23, 24, 25, 26])\nprint consecutive_numbers([24, 25, 26, 27])\nprint consecutive_numbers([25, 26, 27, 28])\nprint consecutive_numbers([26, 27, 28, 29])\nprint consecutive_numbers([27, 28, 29, 30])\nprint consecutive_numbers([28, 29, 30, 31])\nprint"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def consecutive_numbers(a):\n    result = []\n    for i in a:\n        if i in result:\n            return False\n        else:\n            result.append(i)\n    return True\n\nif __name__ == '__main__':\n    a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(consecutive_numbers(a))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def is_consecutive(nums):\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print is_consecutive([3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def is_consecutive(numbers):\n    \"\"\"\n    :param numbers: a list of numbers\n    :return: True if the list contains consecutive numbers, False otherwise\n    \"\"\"\n    return all(x == x + 1 for x in numbers)\n\nif __name__ == '__main__':\n    assert is_consecutive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert is_consecutive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/check-if-a-list-contains-consecutive-numbers/discuss/131661/Python-O(1)-Space-O(n)\n\nclass Solution(object):\n    def containsConsecutiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        prev = None\n        for num in nums:\n            if prev is not None and num!= prev + 1:\n                return False\n            prev = num\n        return True"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/check-if-list-contains-consecutive-numbers\n\ndef check_consecutive_numbers(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) < 2:\n        return False\n    for i in range(0, len(nums) - 1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n\nif __name__ == '__main__':\n    nums = [1, 2, 2, 3, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6"
    },
    {
      "rank": 11,
      "score": 9.0,
      "candidate": "import collections\n\ndef is_consecutive(lst):\n    if len(lst) < 2:\n        return False\n    consecutive = collections.Counter(lst)\n    if len(consecutive)!= 1:\n        return False\n    if consecutive[0]!= 1:\n        return False\n    return True\n\nprint(is_consecutive([1,2,3,4,5,6,7,8]))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def is_consecutive(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(list) < 2:\n        return True\n    for i in range(len(list)-1):\n        if list[i] + 1!= list[i+1]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_consecutive([0, 1, 3, 4, 5, 6]))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def is_consecutive(lst):\n    if len(lst) < 2:\n        return False\n    prev = lst[0]\n    for num in lst[1:]:\n        if prev + 1!= num:\n            return False\n        prev = num\n    return True\n\nif __name__ == '__main__':\n    lst = [2, 4, 5, 6, 7, 9, 10]\n    print is_consecutive(lst)"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def is_consecutive(lst):\n\t\"\"\"\n\tInput : list\n\tOutput : True if the list is consecutive else False\n\t\"\"\"\n\tprev = 0\n\tfor i in range(len(lst)):\n\t\tif lst[i] == prev:\n\t\t\treturn False\n\t\telse:\n\t\t\tprev = lst[i]\n\treturn True\n\nlst = [1, 2, 3, 4, 5, 6, 7]\n\nprint is_consecutive(lst)"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: bool\n    \"\"\"\n    \n    length = len(numbers)\n    if length == 0:\n        return False\n    \n    for i in range(1, length):\n        if numbers[i-1] == numbers[i]:\n            return False\n    \n    return True"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "# Write your code here\ndef consecutive_numbers(numbers):\n    if len(numbers) < 1:\n        return False\n    if len(numbers) == 1:\n        return True\n    if numbers[0]!= numbers[1]:\n        return False\n    else:\n        return consecutive_numbers(numbers[1:])\n\nnumbers = [1, 2, 3, 4, 5]\nprint(consecutive_numbers(numbers))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def is_consecutive(l):\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print is_consecutive(input_list)"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def is_consecutive(numbers):\n    \"\"\"\n    :param numbers: A list of numbers\n    :return: True if the list contains consecutive numbers or not\n    \"\"\"\n    if not numbers:\n        return False\n    for i in range(len(numbers)):\n        if numbers[i] == numbers[i+1]:\n            return True\n    return False\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 2, 4, 5, 6]\n    print(is_consecutive(numbers))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def check_consecutive_numbers(list_of_numbers):\n\tif len(list_of_numbers) < 2:\n\t\treturn True\n\telse:\n\t\tfor i in range(1, len(list_of_numbers)):\n\t\t\tif list_of_numbers[i]!= list_of_numbers[i-1] + 1:\n\t\t\t\treturn False\n\treturn True\n\nprint check_consecutive_numbers([1, 2, 3, 4, 5])\nprint check_consecutive_numbers([1, 2, 3, 4])\nprint check_consecutive_numbers([1, 2, 3])\nprint check_consecutive_numbers([1])\nprint check_consecutive_numbers([1, 2, 3, 4, 5, 6])\nprint check_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint check_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n#!/usr/bin/python\n\ndef is_consecutive(numbers):\n    \"\"\"\n    Input: A list of numbers.\n    Output: True if the list is consecutive, False otherwise.\n    \"\"\"\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1]!= 1:\n            return False\n    return True\n\nif __name__ == '__main__':\n    numbers = [1,2,3,4]\n    print is_consecutive(numbers)\n    numbers = [1,2,3,4,5,6,7,8,9,10]\n    print is_consecutive(numbers)\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    print is_consecutive(numbers)"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def check_consecutive(nums):\n    \"\"\"\n    Input: nums = [2, 3, 4, 4, 4, 5, 5]\n    Output: True\n    \"\"\"\n    nums_set = set(nums)\n    if len(nums_set)!= len(nums):\n        return False\n\n    for num in nums:\n        if num in nums_set:\n            if nums_set.remove(num):\n                return False\n        else:\n            return False\n    return True\n\nprint(check_consecutive([2, 3, 4, 4, 4, 5, 5]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def is_consecutive(numbers):\n    for i in range(len(numbers)-1):\n        if numbers[i] + 1!= numbers[i+1]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]\n    print(is_consecutive(numbers))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def is_consecutive(nums):\n    \"\"\"\n    Check whether the given list is consecutive or not.\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) < 2:\n        return False\n    flag = False\n    for i in range(1, len(nums)):\n        if nums[i - 1] == nums[i]:\n            flag = True\n            if i < len(nums) - 1:\n                if nums[i + 1] == nums[i]:\n                    flag = False\n    return flag\n\n\nif __name__ == '__main__':\n    nums = [1, 1, 1, 2, 3]\n    print(is_consecutive(nums))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: bool\n    \"\"\"\n    \n    if len(numbers) == 0:\n        return False\n    \n    i = 0\n    while i < len(numbers) - 1:\n        if numbers[i] == numbers[i+1]:\n            return True\n        i += 1\n    return False\n    \nif __name__ == '__main__':\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12]\n    print(consecutive_numbers(numbers))\n    \n    numbers = [1,1,1,1,1,1,1,1,1,1,1,1]\n    print(consecutive_numbers(numbers))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "import sys\nimport os\nimport math\n\n# Complete the consecutiveList function below.\ndef consecutiveList(nums):\n    l = [0] * len(nums)\n    for i in range(len(nums)):\n        l[i] = l[i - 1] + nums[i]\n    return l[len(nums) - 1]\n\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 4, 5, 6]\n    print(consecutiveList(nums))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def is_consecutive(l):\n    if len(l) <= 1:\n        return False\n    else:\n        return all(x == l[0] + 1 for x in l[1:])\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7]\n    print(is_consecutive(l))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def is_consecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) < 2:\n        return False\n    last = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i]!= last + 1:\n            return False\n        last = nums[i]\n    return True\n\nprint(is_consecutive([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def consecutive_number(L):\n    \"\"\"\n    :type L: List[int]\n    :rtype: bool\n    \"\"\"\n    i = 0\n    while i < len(L) - 1:\n        if L[i] == L[i+1]:\n            return True\n        i += 1\n    return False\n\nprint(consecutive_number([1,2,3,4,5,6,7]))\nprint(consecutive_number([1,2,3,4,5,6]))\nprint(consecutive_number([1,2,3,4,5]))\nprint(consecutive_number([1,2,3]))\nprint(consecutive_number([1,2,3,4,5]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def consecutive_numbers(numbers):\n    for i in range(0, len(numbers) - 1):\n        if numbers[i] + numbers[i + 1] == numbers[i + 2]:\n            return True\n    return False\n\n# Test Cases\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(\"Given numbers are : \", numbers)\n\nprint(\"The numbers are consecutive : \", consecutive_numbers(numbers))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def is_consecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        s = set()\n        for i in range(len(nums)):\n            if nums[i] in s:\n                return False\n            else:\n                s.add(nums[i])\n        return True"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def is_consecutive(nums):\n    # write your code here\n    if len(nums) == 0:\n        return False\n    \n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    # print(is_consecutive([1,2,3,4,5,6]))\n    # print(is_consecutive([1,2,3,4,5,6,7,8]))\n    print(is_consecutive([1,2,3,4]))\n    print(is_consecutive([1,2,3,4,5,6]))\n    print(is_consecutive([1,2,3,4,5,6,7,8,9]))\n    print(is_consecutive([1,2,3,4,5,6,7,8,9,10]))\n    print(is_consecutive([1,2,3,4,5,6,7,8,9,10,11]))\n    print(is_consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\n    print(is_consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]))\n    print(is_consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\n    print(is_consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def is_consecutive(numbers):\n    \"\"\"\n    Input: list of numbers\n    Output: True if the given list is consecutive, False otherwise\n    \"\"\"\n    \n    # Get the number of elements in the list\n    len_list = len(numbers)\n\n    # Check if the number of elements in the list is even\n    if len_list % 2 == 0:\n        # Check if the first two elements are consecutive\n        if numbers[0] == numbers[1]:\n            # If the first two elements are consecutive, then check the next two elements\n            for i in range(2, len_list, 2):\n                if numbers[i]!= numbers[i + 1]:\n                    return False\n            return True\n    else:\n        # Otherwise, return False\n        return False\n\nif __name__ == '__main__':\n    numbers = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    \n    # Check if the given list is consecutive\n    print \"List is consecutive: \", is_consecutive(numbers)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def is_consecutive(l):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    :param l: List\n    :return: True if the list contains consecutive numbers, otherwise False\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i]!= l[i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    print(is_consecutive(l))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def is_consecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    for i in range(1, len(nums)):\n        if nums[i - 1] + 1!= nums[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    assert is_consecutive(nums) == True\n    nums = [1, 2, 3, 4]\n    assert is_consecutive(nums) == False\n    nums = [1, 2, 2, 3, 4]\n    assert is_consecutive(nums) == True"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def is_consecutive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(numbers) <= 1:\n        return True\n\n    for i in range(1, len(numbers)):\n        if numbers[i]!= numbers[i-1]:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    print(is_consecutive([1, 2, 3, 4, 5]))\n    print(is_consecutive([1, 2, 3, 4, 5, 6]))\n    print(is_consecutive([1, 2, 3, 4, 5, 6, 7]))\n    print(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import math\n\n\ndef is_consecutive(list):\n    \"\"\"\n    Returns True if the given list contains consecutive numbers, False otherwise.\n    :param list:\n    :return: True or False\n    \"\"\"\n    total = 0\n    for i in list:\n        total += i\n    return math.fabs(total - sum(list)) < 1e-6"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def consecutive_numbers(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: bool\n    \"\"\"\n    return all(x > y for x, y in zip(list_of_numbers, list_of_numbers[1:]))\n\nif __name__ == \"__main__\":\n    list_of_numbers = [1,2,3,4,5,6,7,8,9,10,11,12]\n    print(consecutive_numbers(list_of_numbers))\n    list_of_numbers = [1,2,3,4,5,6,7,8]\n    print(consecutive_numbers(list_of_numbers))\n    list_of_numbers = [1,2,3,4,5,6,7]\n    print(consecutive_numbers(list_of_numbers))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def consecutive_numbers(numbers):\n    # write your code here\n    if len(numbers) == 0:\n        return False\n\n    if len(numbers) == 1:\n        return True\n\n    for i in range(1, len(numbers)):\n        if numbers[i - 1] == numbers[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    numbers = [1, 2, 2, 3, 3, 4, 4, 5]\n    print(consecutive_numbers(numbers))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def consecutive_number(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: bool\n    \"\"\"\n    prev = None\n    for i in range(len(l)):\n        if prev is not None and prev + 1 == l[i]:\n            return True\n        prev = l[i]\n    return False\n\n# Your consecutive_number function will be called like this:\n# consecutive_number(nums)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def is_consecutive(numbers):\n    \"\"\"\n    Returns True if the given list contains consecutive numbers, otherwise False.\n    \"\"\"\n\n    if len(numbers) < 2:\n        return False\n\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1]!= 1:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n    print(is_consecutive(numbers))\n\n    numbers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n    print(is_consecutive(numbers))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def checkConsecutive(aList):\n\tif len(aList) == 0:\n\t\treturn False\n\tif len(aList) == 1:\n\t\treturn True\n\tif len(aList) == 2:\n\t\treturn True\n\telse:\n\t\tfor i in range(2,len(aList)):\n\t\t\tif aList[i-2] == aList[i-1] and aList[i-1] == aList[i]:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\nprint checkConsecutive([1,2,3,4,5])\nprint checkConsecutive([1,2,3,4,5,6])\nprint checkConsecutive([1,2,3,4,5,6,7])\nprint checkConsecutive([1,2,3,4,5,6,7,8])\nprint checkConsecutive([1,2,3,4,5,6,7,8,9])"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def contains_consecutive_numbers(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: bool\n    \"\"\"\n    count = 0\n    for i in range(0, len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            count += 1\n        else:\n            if count > 0:\n                return True\n            count = 0\n    return False\n\n\nif __name__ == '__main__':\n    assert contains_consecutive_numbers([1, 2, 3, 4, 5]) is False, \"Testcase 1\"\n    assert contains_consecutive_numbers([1, 2, 3, 4, 5, 6]) is True, \"Testcase 2\"\n    assert contains_consecutive_numbers([1, 2, 3, 4, 5, 6, 7]) is True, \"Testcase 3\"\n    assert contains_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8]) is True, \"Testcase 4\"\n    assert contains_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) is False, \"Testcase 5\""
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def is_consecutive(list):\n    \"\"\"\n    :param list: A list of numbers\n    :return: True if the given list is consecutive, else False\n    \"\"\"\n    if len(list) <= 1:\n        return True\n    previous = list[0]\n    for i in range(1, len(list)):\n        if list[i] - previous!= 1:\n            return False\n        previous = list[i]\n    return True\n\nif __name__ == '__main__':\n    assert(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True)\n    assert(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == False)\n    assert(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == False)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: bool\n    \"\"\"\n    consecutive = 0\n    for i in range(0, len(numbers)):\n        if numbers[i] == numbers[i+1]:\n            consecutive += 1\n        else:\n            consecutive = 0\n    return consecutive == len(numbers) - 1\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 1, 2, 3, 4, 1]\n    print(consecutive_numbers(numbers))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def is_consecutive(numbers):\n    if len(numbers) < 2:\n        return False\n\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4]\n    print(is_consecutive(numbers))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def is_consecutive(l):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    :param l: list\n    :return: boolean\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    for i in range(1, len(l)):\n        if l[i - 1] + 1!= l[i]:\n            return False\n    return True\n\nprint is_consecutive([1, 2, 3])\nprint is_consecutive([1, 2, 3, 4])\nprint is_consecutive([1, 2, 3, 4, 5])\nprint is_consecutive([1, 2, 3, 4, 5, 6])"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def is_consecutive(numbers):\n    \"\"\"\n    numbers: list of integers\n\n    Returns True if the given list contains consecutive numbers.\n    Returns False otherwise.\n    \"\"\"\n    if len(numbers) <= 1:\n        return True\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1]!= 1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4]\n    print(is_consecutive(numbers))\n    numbers = [1, 3, 5, 7]\n    print(is_consecutive(numbers))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/consecutive-numbers/problem\n\ndef consecutive(numbers):\n    # check if the list has consecutive numbers\n    if len(numbers) == 1:\n        return True\n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i - 1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    numbers = [2, 3, 4, 3, 2, 1]\n    print(consecutive(numbers))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "# Example\n# Given [1, 2, 3, 4, 5], return true.\n# Given [1, 3, 5, 7], return false.\n# Given [1, 2, 3, 4], return true.\n# Given [0, 1, 2, 3, 4], return false.\n\n# time complexity O(n)\n# space complexity O(1)\n\ndef is_consecutive(nums):\n    # dp[i] = True if the i-th number is consecutive\n    # dp[i] = False otherwise\n    # dp[0] = True\n    # dp[1] = True\n    # dp[2] = True\n    # dp[3] = False\n    # dp[4] = False\n    dp = [True] * 5\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j] and i!= j:\n                dp[i] = False\n                break\n    return all(dp)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# write your code here\ndef is_consecutive(nums):\n    if len(nums) < 2:\n        return True\n    else:\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1]:\n                return False\n        return True\n\n\n\nnums = [1, 2, 2, 3]\nprint(is_consecutive(nums))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "#Write your code here.\ndef check_consecutive(lst):\n    \"\"\"\n    lst is a list of numbers.\n    Returns a boolean.\n    \"\"\"\n    \n    lst.sort()\n    \n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    \n    return False\n\nprint(check_consecutive([1,2,3,4,5,6,7,8]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "# Write your code here\ndef check_consecutive(nums):\n    # Write your code here\n    count = 0\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(check_consecutive(nums))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def is_consecutive(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: bool\n    \"\"\"\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            count += 1\n            if count > 1:\n                return False\n        else:\n            count = 0\n    return True\n\ndef main():\n    # your code goes here\n    lst = [1, 2, 3, 4, 5, 6]\n    print(is_consecutive(lst))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def is_consecutive(nums):\n    \"\"\"\n    Input: list\n    Output: boolean\n    \"\"\"\n    for i in range(len(nums)):\n        if i > 0 and nums[i] == nums[i-1]:\n            return False\n    return True\n\nprint(is_consecutive([0, 1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "# Write your code here\n\ndef is_consecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if not nums:\n        return False\n    prev = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i]!= prev + 1:\n            return False\n        prev = nums[i]\n    return True\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(is_consecutive(nums))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# Example\n# [1, 2, 3, 4, 5]\n# [2, 3, 4, 5]\n# [3, 4, 5]\n# [4, 5]\n# [5]\n\ndef consecutive_numbers(list):\n    \"\"\"\n    Input: list of numbers\n    Output: True if list contains consecutive numbers or not\n    \"\"\"\n\n    # Check whether the list contains consecutive numbers\n    for i in range(len(list)):\n        if list[i] == list[i+1]:\n            return False\n    return True\n\nprint(consecutive_numbers([1, 2, 3, 4, 5]))\nprint(consecutive_numbers([2, 3, 4, 5]))\nprint(consecutive_numbers([3, 4, 5]))\nprint(consecutive_numbers([4, 5]))\nprint(consecutive_numbers([5]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def consecutive_number(lst):\n\tif len(lst) < 2:\n\t\treturn False\n\t\n\tprev = lst[0]\n\tcur = prev\n\tfor num in lst[1:]:\n\t\tif prev == num:\n\t\t\treturn True\n\t\tprev = cur\n\t\tcur = num\n\treturn False\n\nif __name__ == '__main__':\n\tprint consecutive_number([1, 2, 3, 4, 5, 6])\n\tprint consecutive_number([1, 2, 3, 4, 5])\n\tprint consecutive_number([1, 2, 3, 4])\n\tprint consecutive_number([1, 2, 3])\n\tprint consecutive_number([1, 2])\n\tprint consecutive_number([1])\n\tprint consecutive_number([])\n\tprint consecutive_number([1, 2, 3, 4, 5])\n\tprint consecutive_number([1, 2, 3, 4, 5, 6])"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def is_consecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    n = len(nums)\n    if n <= 1:\n        return True\n\n    for i in range(1, n):\n        if nums[i - 1] == nums[i]:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert not is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def isConsecutive(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head or not head.next:\n            return True\n        if head.val == head.next.val:\n            return True\n        else:\n            prev = head\n            while prev.next and prev.val == prev.next.val:\n                prev = prev.next\n            if prev.val == prev.next.val:\n                return True\n            else:\n                return False\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    head.next.next.next.next.next.next.next.next.next.next."
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "# Write your code here\n\ndef is_consecutive(lst):\n    if len(lst) == 0:\n        return False\n    if len(lst) == 1:\n        return True\n    if lst[0] == lst[1]:\n        return True\n    return False\n\n# Your code goes here"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def is_consecutive(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: bool\n    \"\"\"\n    # TODO\n    pass\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(is_consecutive(lst))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def is_consecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    previous = 0\n    for num in nums:\n        if previous == num - 1:\n            return True\n        previous = num\n    return False\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print(is_consecutive(nums))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def consecutive_numbers(nums):\n    \"\"\"\n    nums: A list of integers.\n    Return: True if the list contains consecutive numbers or False otherwise.\n    \"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    print(consecutive_numbers([1, 2, 3, 4, 5, 6, 7]))\n    print(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def is_consecutive(lst):\n    if len(lst) < 2:\n        return False\n    \n    for i in range(len(lst)):\n        if lst[i] == lst[i + 1]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(is_consecutive(lst))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import sys\n\ndef is_consecutive(list):\n    \"\"\"\n    Check if the given list contains consecutive numbers or not.\n\n    :param list: list of numbers\n    :return: True if the list contains consecutive numbers, else False\n    \"\"\"\n    for i in range(1, len(list)):\n        if list[i] == list[i - 1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    numbers = sys.stdin.readline()\n    numbers = [int(n) for n in numbers.split()]\n    print is_consecutive(numbers)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def consecutive_number(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: bool\n    \"\"\"\n    \n    if len(lst) < 2:\n        return False\n    \n    previous = lst[0]\n    for i in lst[1:]:\n        if i!= previous + 1:\n            return False\n        previous = i\n    return True\n\nprint(consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# This is a \"Quick and Dirty\" solution.\n# You are not expected to understand how it works.\n# I just want to give you the general idea.\n\ndef consecutive_number(lst):\n    if len(lst) <= 1:\n        return True\n    prev = lst[0]\n    for i in range(1, len(lst)):\n        if prev == lst[i]:\n            return False\n        else:\n            prev = lst[i]\n    return True\n\nif __name__ == \"__main__\":\n    assert consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9]) is True\n    assert consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is False\n    assert consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) is False\n    assert consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) is True"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def is_consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    Input:\n    A list of integers.\n    Output:\n    True or False.\n    \"\"\"\n    if lst == []:\n        return False\n    for i in range(len(lst)):\n        if lst[i]!= lst[i+1]:\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(\"Consecutive numbers? {}\".format(is_consecutive([1,2,3,4,5])))\n    print(\"Consecutive numbers? {}\".format(is_consecutive([1,2,3,4,5,6])))\n    print(\"Consecutive numbers? {}\".format(is_consecutive([1,2,3,4,5,6,7])))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 7.0,
      "candidate": "def isConsecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i] + lst[i+1]!= lst[i+2]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6]\n    print isConsecutive(lst)"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "# First, we have to make sure that the given list is a list\n# If not, we will exit with error message\n\n# Make a list with elements as integers\n\n# The list will be like [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Write the function\n\n# Input: list to be checked\n# Output: True or False\n\ndef consecutive_numbers(list):\n    # Make sure the given list is a list\n    if type(list)!= list:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 0:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 1:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 2:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 3:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 4:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 5:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 6:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 7:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 8:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 9:\n        print \"You have to give a list\"\n        return False\n\n    # Make sure the list is not empty\n    if len(list) == 10:\n        print \"You have to give"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "# Write your code here\ndef is_consecutive(numbers):\n    if len(numbers) < 2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    numbers = [3, 3, 4, 5, 6, 7]\n    print(is_consecutive(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(is_consecutive(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(is_consecutive(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(is_consecutive(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(is_consecutive(numbers))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def is_consecutive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(numbers) < 2:\n        return True\n    last_number = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i]!= last_number + 1:\n            return False\n        last_number = numbers[i]\n    return True\n\nif __name__ == '__main__':\n    numbers = [2,3,4,5,6,7]\n    assert is_consecutive(numbers) == True\n    numbers = [2,3,4,5,6,7,8]\n    assert is_consecutive(numbers) == False"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def consecutive_numbers(numbers):\n    return sum(numbers) == sum(numbers[1:])\n\ndef test_case():\n    print(consecutive_numbers([2,2,3,4,5]))\n\ntest_case()"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param: nums: a list of integer\n    @return: a boolean\n    \"\"\"\n    def isConsecutive(self, nums):\n        if len(nums) < 2:\n            return True\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1]!= 1:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.isConsecutive([1,2,3,4])\n    print solution.isConsecutive([1,2,3,4,5])\n    print solution.isConsecutive([1,2,3,4,5,6])\n    print solution.isConsecutive([1,2,3,4,5,6,7])\n    print solution.isConsecutive([1,2,3,4,5,6,7,8])"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def is_consecutive(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            return False\n    return True\n\n\n# Your Solution\n\ndef is_consecutive(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print is_consecutive(arr)\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print is_consecutive(arr)\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print is_consecutive(arr)"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# Example\n# input: [2,3,4,4,5]\n# output: True\n#\n# input: [1,2,3,4,5]\n# output: False\n#\n# input: [1,2,3,4]\n# output: False\n\ndef is_consecutive_numbers(l):\n    if len(l) < 2:\n        return False\n\n    i = 0\n    j = 0\n    while i < len(l) - 1:\n        if l[i]!= l[i + 1]:\n            return False\n        i += 1\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_consecutive_numbers([2,3,4,4,5]) == True\n    assert is_consecutive_numbers([1,2,3,4,5]) == False\n    assert is_consecutive_numbers([1,2,3,4]) == False"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# write your code here\n\ndef check_consecutive(lst):\n    # write your code here\n    if len(lst) < 2:\n        return False\n\n    for i in range(1, len(lst)):\n        if lst[i - 1] == lst[i]:\n            return False\n    return True\n\nprint(check_consecutive([1, 2, 3, 4, 5]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def is_consecutive(nums):\n    \"\"\"\n    Input: A list of integers\n    Output: True if the list is consecutive or False if not\n    \"\"\"\n    if len(nums) < 2:\n        return True\n    else:\n        return all([nums[i] == nums[i+1] for i in range(len(nums)-1)])\n\ndef is_consecutive2(nums):\n    \"\"\"\n    Input: A list of integers\n    Output: True if the list is consecutive or False if not\n    \"\"\"\n    if len(nums) < 2:\n        return True\n    else:\n        return all([nums[i] == nums[i+1] for i in range(len(nums)-1)]) and \\\n               nums[i] == nums[i+1]\n\ndef is_consecutive3(nums):\n    \"\"\"\n    Input: A list of integers\n    Output: True if the list is consecutive or False if not\n    \"\"\"\n    if len(nums) < 2:\n        return True\n    else:\n        return all([nums[i] == nums[i+1] for i in range(len(nums)-1)]) and \\\n               nums[i] == nums[i+1] and \\\n               nums[i] == nums[i+2]\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_consecutive(range(1, 11)) == True, \"1st example\"\n    assert is_consecutive(range(2, 6)) == False, \"2nd example\"\n    assert is_consecutive(range(1, 6)) == True, \"3rd example\"\n    assert is_consecutive(range(1, 10)) == True, \"4th example\"\n    assert is_consecutive(range(1, 10)) == True, \"5th example\"\n    assert is_consecutive(range(1, 10)) == True, \"6th example\"\n    assert is_consecutive(range(1, 10)) == True, \"7th example\"\n    assert"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def isConsecutive(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head or not head.next:\n            return True\n        if head.next.val!= head.val + 1:\n            return False\n        p = head.next\n        while p and p.next:\n            if p.val!= p.next.val + 1:\n                return False\n            p = p.next\n        return True"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Returns true if the given list is a consecutive list of numbers\ndef is_consecutive(numbers):\n    # Returns true if the given list is a consecutive list of numbers\n    if len(numbers) > 1:\n        return True\n    else:\n        return False\n\n\n# Returns true if the given list is a consecutive list of numbers\ndef is_consecutive2(numbers):\n    # Returns true if the given list is a consecutive list of numbers\n    if len(numbers) > 1:\n        for i in range(len(numbers)):\n            if numbers[i] == numbers[i + 1]:\n                return True\n        return False\n    else:\n        return False\n\n\n# Returns true if the given list is a consecutive list of numbers\ndef is_consecutive3(numbers):\n    # Returns true if the given list is a consecutive list of numbers\n    if len(numbers) > 1:\n        for i in range(len(numbers)):\n            if numbers[i] == numbers[i + 1]:\n                for j in range(i + 2, len(numbers)):\n                    if numbers[j]!= numbers[j - 1]:\n                        return False\n        return True\n    else:\n        return False\n\n\n# Returns true if the given list is a consecutive list of numbers\ndef is_consecutive4(numbers):\n    # Returns true if the given list is a consecutive list of numbers\n    if len(numbers) > 1:\n        for i in range(len(numbers)):\n            if numbers[i] == numbers[i + 1]:\n                for j in range(i + 2, len(numbers)):\n                    if numbers[j]!= numbers[j - 1]:\n                        return False\n        return True\n    else:\n        return False\n\n\n# Returns true if the given list is a consecutive list of numbers\ndef is_consecutive5(numbers):\n    # Returns true if the given list is a consecutive list of numbers\n    if len(numbers) > 1:\n        for i in range(len(numbers)):\n            if numbers[i] == numbers[i + 1]:\n                for j in range(i + 2, len(numbers)):"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def isConsecutive(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: bool\n    \"\"\"\n    n = len(list)\n    if n < 2:\n        return True\n    else:\n        i = 1\n        while i < n:\n            if list[i]!= list[i-1]:\n                return False\n            i += 1\n        return True\n\nif __name__ == \"__main__\":\n    assert(isConsecutive([1, 2, 3, 4, 5]) == True)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6]) == False)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7]) == True)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7, 8]) == False)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == True)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == True)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == False)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == True)\n    assert(isConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == False)\n    assert(isConsecutive([1"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://oj.leetcode.com/problems/valid-anagram/\n# Given two strings s and t, write a function to determine if t is an anagram of s.\n#\n# For example,\n# s = \"anagram\", t = \"nagaram\", return true.\n# s = \"rat\", t = \"car\", return false.\n#\n# Note:\n# You may assume the string contains only lowercase alphabets.\n#\n# Follow up:\n# What if the given string is empty?\n# What if the given string consists of only one character?\n# Would you make use of some built-in string function?\n# What if you can't modify s?\n# What if the string s itself can be modified but you want to retain the anagram property?\n#\n# Companies\n# Amazon\n# Related Topics\n# Hash Table\n# Similar Questions\n# Valid Anagram\n#\n\nclass Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s)!= len(t):\n            return False\n        if len(s) == 0:\n            return True\n        dp = [[False] * len(t) for _ in range(len(s))]\n        for i in range(len(s)):\n            for j in range(len(t)):\n                if s[i] == t[j]:\n                    dp[i][j] = True\n        return True\n\nclass Solution2(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s)!= len(t):\n            return False\n        if len(s) == 0:\n            return True\n        dp = [[False] * len(t) for _ in range(len(s))]\n        for i in range(len(s)):\n            for j in range(len(t)):\n                if s[i] =="
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Your function should return 1 if the given list is consecutive, and 0 otherwise.\n# The given list is a list of numbers.\n# Example:\n# Given [1, 2, 3, 4, 5], return 1.\n# Given [1, 3, 5], return 0.\n# Given [1, 2, 3], return 1.\n# Note:\n# The given list is length at most 10,000.\n# The given list only contains numbers and the number 5.\n\n# 2017.05.22\nclass Solution(object):\n    def isConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 1\n\n        # Use a map to record whether each number is consecutive or not.\n        # A number is consecutive if the number is in the map or not.\n        map = {}\n        for num in nums:\n            if num in map:\n                if map[num] == nums[map[num] - 1]:\n                    return 0\n                else:\n                    map[num] = nums[map[num] - 1]\n            else:\n                map[num] = nums[0]\n        return 1\n\n\nif __name__ == \"__main__\":\n    print(Solution().isConsecutive([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# The following is the input for the test cases.\n# 1,2,3,1,2,3\n# 1,1,1,1,1,1\n# 1,2,3\n# 1,1,1\n# 1,1,1,1,1,1,1,1,1\n# 1,2,3,4,5,6,7,8,9\n# 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32\n# 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99\n\n# The following is the output for the test cases.\n# True\n# False\n# True\n# True\n# True\n# True\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False\n# False"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        while slow:\n            if slow.val!= fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        return True"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# Write your code here\n\ndef is_consecutive(nums):\n    # write your code here\n    nums = sorted(nums)\n    if len(nums) < 2:\n        return False\n    pre = nums[0]\n    for num in nums[1:]:\n        if pre!= num:\n            return False\n        pre = num\n    return True\n\n# Your code is still here\n# Your code is still here\n# Your code is still here\n# Your code is still here"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def is_consecutive(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(arr) < 2:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]+1:\n            return True\n    return False\n\n# Your Solution here\nprint(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def is_consecutive(numbers):\n    # your code goes here\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    :param numbers:\n    :return:\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    for i in range(1, len(numbers)):\n        if numbers[i]!= numbers[i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_consecutive([1, 3, 5, 7]) == True, \"Example\"\n    assert is_consecutive([1, 2, 3, 4]) == False, \"Result\""
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def is_consecutive(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(arr) < 2:\n        return True\n    elif arr[0] == arr[1]:\n        return is_consecutive(arr[1:])\n    else:\n        return False\n\nprint(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next\n        while slow:\n            if slow.val!= fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        return True"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "#!/bin/python\n\n# Example 1\n\ndef is_consecutive(nums):\n    \"\"\"\n    This function takes as input a list of numbers and returns True if the list contains consecutive numbers.\n    :param nums: The list of numbers.\n    :return: True if the list contains consecutive numbers.\n    \"\"\"\n    # Your code here\n    if nums == []:\n        return False\n    if len(nums) == 1:\n        return True\n    for i in range(len(nums)-1):\n        if nums[i]!= nums[i+1]:\n            return False\n    return True\n\n# Example 2\n\ndef is_consecutive2(nums):\n    \"\"\"\n    This function takes as input a list of numbers and returns True if the list contains consecutive numbers.\n    :param nums: The list of numbers.\n    :return: True if the list contains consecutive numbers.\n    \"\"\"\n    # Your code here\n    if nums == []:\n        return False\n    if len(nums) == 1:\n        return True\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return False\n    return True\n\n# Example 3\n\ndef is_consecutive3(nums):\n    \"\"\"\n    This function takes as input a list of numbers and returns True if the list contains consecutive numbers.\n    :param nums: The list of numbers.\n    :return: True if the list contains consecutive numbers.\n    \"\"\"\n    # Your code here\n    if nums == []:\n        return False\n    if len(nums) == 1:\n        return True\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return False\n    return True\n\n# Example 4\n\ndef is_consecutive4(nums):\n    \"\"\"\n    This function takes as input a list of numbers and returns True if the list contains consecutive numbers.\n    :param nums: The list of numbers.\n    :return: True if the list contains consecutive numbers.\n    \"\"\"\n    # Your code here\n    if nums == []:"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def is_consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    :param lst: A list of integers\n    :return: True if the given list contains consecutive numbers or False otherwise\n    \"\"\"\n    for i in range(0, len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n    return True\n\nprint is_consecutive([1, 2, 3, 4, 5, 6, 7])\n\nprint is_consecutive([1, 2, 3, 4, 5, 6, 7, 8])\n\nprint is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nprint is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def is_consecutive(numbers):\n    \n    n = len(numbers)\n    if n < 2:\n        return True\n\n    for i in range(1, n):\n        if numbers[i]!= numbers[i-1]:\n            return False\n    return True\n\n\ndef test():\n    assert is_consecutive([2, 3, 4, 5])\n    assert is_consecutive([1, 2, 3, 4, 5])\n    assert is_consecutive([1, 2, 3, 4, 5, 6])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    assert is_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    assert is_consecutive([1, 2, 3, 4, 5, 6,"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def is_consecutive(l):\n    \"\"\"\n    Input:\n    l: A list of integers\n\n    Output:\n    True or False\n    \"\"\"\n\n    if len(l) <= 1:\n        return False\n\n    # If the first element is not 0, we can't assume that the list is consecutive\n    if l[0]!= 0:\n        return False\n\n    # Check the elements of the list, if any of them is not 0, we can't assume the list is consecutive\n    for i in range(1, len(l)):\n        if l[i]!= 0:\n            return False\n\n    return True\n\nprint(is_consecutive([1, 2, 3, 4]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# write your code here\n\ndef consecutive_numbers(numbers):\n    # YOUR CODE HERE\n    #check whether the given list contains consecutive numbers or not\n    if len(numbers) == 0:\n        return False\n    \n    for i in range(0, len(numbers)):\n        if i == 0 or numbers[i]!= numbers[i-1]:\n            return False\n    return True\n\n# test cases\nnumbers = [1,2,3,4,5,6]\nprint(consecutive_numbers(numbers))\n\nnumbers = [1,2,3,4,5]\nprint(consecutive_numbers(numbers))\n\nnumbers = [1,2,3,4]\nprint(consecutive_numbers(numbers))\n\nnumbers = [1,2,3,4,5,6,7]\nprint(consecutive_numbers(numbers))\n\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nprint(consecutive_numbers(numbers))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# A naive solution\ndef consecutive_numbers(nums):\n    count = 0\n    for num in nums:\n        if num == count:\n            count += 1\n        else:\n            count = 1\n        \n    return count\n\n# A more efficient solution\ndef consecutive_numbers2(nums):\n    count = 0\n    for num in nums:\n        if num == count:\n            count += 1\n        else:\n            count = 1\n            \n    return count\n\n# A more efficient solution\ndef consecutive_numbers3(nums):\n    count = 0\n    for num in nums:\n        if num == count:\n            count += 1\n        else:\n            count = 1\n            \n    return count\n\n# A more efficient solution\ndef consecutive_numbers4(nums):\n    count = 0\n    for num in nums:\n        if num == count:\n            count += 1\n        else:\n            count = 1\n            \n    return count\n\n# A more efficient solution\ndef consecutive_numbers5(nums):\n    count = 0\n    for num in nums:\n        if num == count:\n            count += 1\n        else:\n            count = 1\n            \n    return count\n\n# A more efficient solution\ndef consecutive_numbers6(nums):\n    count = 0\n    for num in nums:\n        if num == count:\n            count += 1\n        else:\n            count = 1\n            \n    return count\n\n# A more efficient solution\ndef consecutive_numbers7(nums):\n    count = 0\n    for num in nums:\n        if num == count:\n            count += 1\n        else:\n            count = 1\n            \n    return count\n\n# A more efficient solution\ndef consecutive_numbers8(nums):\n    count = 0\n    for num in nums:\n        if num == count:\n            count += 1\n        else:\n            count = 1\n            \n    return count\n\n# A more efficient solution\ndef consecutive_numbers9(nums):\n    count = 0\n    for num in nums:\n        if num == count:\n            count += 1\n        else:\n            count ="
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        slow, fast = head, head\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        while head:\n            if head.val!= slow.val:\n                return False\n            head = head.next\n            slow = slow.next\n        return True"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# http://www.geeksforgeeks.org/check-whether-given-list-contains-consecutive-numbers-or-not/\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com/watch?v=YHVH9hWO1dE\n\n# https://www.youtube.com"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isConsecutive(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        curr = head\n        while curr:\n            if curr.next and curr.next.val!= curr.val + 1:\n                return False\n            curr = curr.next\n        return True"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasConsecutive(self, head: ListNode) -> bool:\n        \"\"\"\n        check whether the given list has consecutive numbers or not\n\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        # check whether the given list is empty or not\n        if head is None:\n            return False\n        # check whether the given list has consecutive numbers or not\n        pre = head\n        while pre is not None:\n            cur = pre\n            while cur.next is not None:\n                # check whether the given list has consecutive numbers or not\n                cur = cur.next\n                if cur.val - pre.val!= 1:\n                    return False\n                pre = cur\n            pre = pre.next\n        return True\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    print(Solution().hasConsecutive(head))"
    }
  ]
}