{
  "timestamp": "2025-09-14T20:40:42.393982",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 446,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_min_len_sublist(list_of_lists):\n    # YOUR CODE HERE\n    # Write your code below\n\n    if len(list_of_lists) == 0:\n        return 0\n\n    length_of_sublist = len(list_of_lists[0])\n\n    for i in range(0, len(list_of_lists)):\n        for j in range(0, len(list_of_lists[i])):\n            if list_of_lists[i][j] == list_of_lists[0][j]:\n                length_of_sublist = min(length_of_sublist, j + 1)\n\n    return length_of_sublist\n\n\ndef main():\n    # test_cases = [\n    #     [[1, 2, 3], [4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]],\n    #     [[1, 2, 3], [4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9]],\n    #     [[1, 2, 3], [4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]],\n    #     [[1, 2, 3], [4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]],\n    #     [[1, 2, 3], [4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_min(lst):\n    \"\"\"\n    Find the minimum length sublist in the list.\n    \"\"\"\n    if len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        return [lst[0], lst[1]]\n    else:\n        return find_min(lst[1:])\n\ndef test():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print find_min(lst)\n    lst = [1, 2, 3, 4, 5, 6, 7, 8]\n    print find_min(lst)\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def min_length(list):\n    if len(list) == 0:\n        return 0\n    m = min(list)\n    l = [m]\n    for i in list:\n        if i < m:\n            m = i\n            l.append(i)\n    return l[0]\n\nif __name__ == '__main__':\n    list = [1,2,3,4,5,6,7,8,9,10]\n    print(min_length(list))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/minimum-subarray-length/problem\n\ndef find_min_subarray(arr):\n    # Returns the sublist having minimum length\n    # Input: arr = [2, 6, 7, 0, 2, 3, 5, 7, 8, 0, 1]\n    # Output: [0, 0, 1, 2, 2, 2, 3, 4, 4]\n    \n    # Use a stack to store the sublist we are currently looking at\n    stack = []\n\n    # Initialize the stack with the first element\n    stack.append(arr[0])\n    # Keep track of the current length of the sublist\n    current_length = 1\n    # Keep track of the index of the first element\n    current_index = 1\n    # Keep track of the index of the last element\n    last_index = len(arr)\n\n    # Iterate over each element in arr\n    for i in range(1, last_index):\n        # If the current element is smaller than the previous element,\n        # push the current element into the stack\n        if arr[i] < arr[i - 1]:\n            stack.append(arr[i])\n            current_length += 1\n        # If the current element is larger than the previous element,\n        # pop the stack until we find the sublist with minimum length\n        else:\n            while stack[-1] > arr[i - 1]:\n                # pop the stack until we find the sublist with minimum length\n                current_length -= 1\n                stack.pop()\n            stack.append(arr[i])\n            current_length += 1\n\n    # If there is no sublist with minimum length, return -1\n    if current_length == 0:\n        return -1\n    # Otherwise return the sublist with minimum length\n    return stack[0:current_length]\n\nif __name__ == \"__main__\":\n    arr = [2, 6, 7, 0, 2, 3, 5, 7, 8, 0, 1]\n    print(find_min_subarray(arr))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def min_length_sublist(arr):\n    \"\"\"\n    :param arr: The input array.\n    :return: The sublist having minimum length.\n    \"\"\"\n\n    if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return arr\n\n    min_length = arr[0]\n    min_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < min_length:\n            min_length = arr[i]\n            min_index = i\n\n    return arr[min_index:]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    print min_length_sublist(arr)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_min_sublist(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not numbers:\n        return []\n\n    min_length = len(numbers)\n    min_sublist = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] < numbers[j]:\n                if len(numbers[j:]) < min_length:\n                    min_length = len(numbers[j:])\n                    min_sublist = numbers[i:j]\n    return min_sublist\n\nif __name__ == '__main__':\n    print find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    print find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    print find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    print find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    print find_min_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_min(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    length = len(arr)\n    if length == 0:\n        return 0\n    \n    minimum = min(arr)\n    \n    for i in range(length):\n        if arr[i] < minimum:\n            minimum = arr[i]\n            \n    return minimum\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7,8,9]\n    print(find_min(arr))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\t# @param head, a ListNode\n\t# @return a ListNode\n\tdef findSubListMinLen(self, head):\n\t\tif head is None:\n\t\t\treturn None\n\t\tfast, slow = head, head\n\t\twhile fast is not None and fast.next is not None:\n\t\t\tfast = fast.next.next\n\t\t\tslow = slow.next\n\t\tif slow is None:\n\t\t\treturn None\n\t\tslow = slow.next\n\t\tif slow is None:\n\t\t\treturn head\n\t\tfast = head\n\t\twhile fast is not None and fast.val == slow.val:\n\t\t\tfast = fast.next\n\t\t\tslow = slow.next\n\t\tif fast is None:\n\t\t\treturn slow\n\t\tif fast.next is None:\n\t\t\treturn slow\n\t\telse:\n\t\t\treturn self.findSubListMinLen(fast.next)\n\ndef main():\n\tsolution = Solution()\n\thead = ListNode(1)\n\thead.next = ListNode(2)\n\thead.next.next = ListNode(3)\n\thead.next.next.next = ListNode(4)\n\thead.next.next.next.next = ListNode(5)\n\tprint(solution.findSubListMinLen(head))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def min_sublist(arr, sub_list_len):\n    \"\"\"\n    Find the min sublist with the given length\n    :param arr: List\n    :param sub_list_len: int\n    :return: sub_list\n    \"\"\"\n    min_sublist_len = len(arr)\n    min_sublist = arr[0]\n\n    for i in range(1, len(arr)):\n        if min_sublist_len < sub_list_len:\n            min_sublist_len = sub_list_len\n            min_sublist = arr[i]\n\n        if len(arr[i]) < sub_list_len:\n            if len(arr[i]) < min_sublist_len:\n                min_sublist_len = len(arr[i])\n                min_sublist = arr[i]\n\n    return min_sublist\n\nif __name__ == \"__main__\":\n    arr = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_sublist_min_len(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # write your code here\n    lengths = [len(arr[i:]) for i in range(len(arr))]\n    lengths.sort()\n    return arr[:lengths[0]]\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_sublist_min_len(arr))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def find_min_length(seq):\n    return min(len(seq), key=lambda x: len(seq[x]))\n\ndef main():\n    a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    print(find_min_length(a))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def find_sublist_min_length(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    return min([len(sublist) for sublist in arr if len(sublist) == 1])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(find_sublist_min_length(arr))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_min_length_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    length = len(arr)\n    if length == 0:\n        return 0\n    else:\n        return min(arr, key=lambda x: len(arr[x:]))\n\n\nif __name__ == '__main__':\n    arr = [2, 3, 4, 5, 6, 7, 8]\n    print(find_min_length_sublist(arr))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def find_min(s, l, r):\n    return s[l:r]\n\ndef main():\n    s = \"abcabcabcabcabcabcabc\"\n    l = 0\n    r = len(s)\n    print find_min(s, l, r)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def min_sub_list(list_, min_length):\n    \"\"\"\n    list_: list of integers\n    min_length: minimum length of sublist\n    return: the list of integers having minimum length.\n    \"\"\"\n    # Write your code here\n    if not list_:\n        return []\n\n    if len(list_) == 1:\n        return list_\n\n    min_sub_list = []\n    min_sub_length = len(list_[0]) + 1\n\n    for i in range(1, len(list_)):\n        if len(list_[i]) < min_sub_length:\n            min_sub_length = len(list_[i])\n            min_sub_list = list_[i]\n        elif len(list_[i]) == min_sub_length:\n            min_sub_list = list_[i]\n    return min_sub_list\n\n\n# list_ = [1, 2, 3, 4, 5]\n# min_length = 2\n# print min_sub_list(list_, min_length)\n\n# list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# min_length = 2\n# print min_sub_list(list_, min_length)\n\n# list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# min_length = 3\n# print min_sub_list(list_, min_length)\n\n# list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# min_length = 4\n# print min_sub_list(list_, min_length)\n\n# list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# min_length = 5\n# print min_sub_list(list_, min_length)\n\n# list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# min_length = 6\n# print min_sub_list(list_, min_length)\n\n# list_ = [1, 2,"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def find_min_len_sublist(list_of_nums):\n    \"\"\"\n    Args:\n        list_of_nums: A list of integers.\n    Returns:\n        A list of integers.\n    \"\"\"\n    # write your code here\n    len_list = [len(list(sublist)) for sublist in list_of_nums]\n    min_len_list = [len_list[i] for i in range(len(len_list)) if len_list[i] == min(len_list)]\n    return min(min_len_list)\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    print(find_min_len_sublist(lst))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/minimum-length-sublist/problem\n\ndef find_sublist_min_len(list):\n    # your code here\n    # Initialize your data structure here.\n    # for each element in the list,\n    # increment the length of the sublist that it belongs to\n    # if the length of the sublist is greater than the length of the sublist with the smallest length,\n    # then replace the sublist with the new one\n    # if the length of the sublist is equal to the length of the sublist with the smallest length,\n    # then replace the sublist with the new one\n    # if the length of the sublist is less than the length of the sublist with the smallest length,\n    # then do nothing\n    # print the length of the sublist with the minimum length\n    # print the list with the minimum length sublist\n    if len(list) < 1:\n        return None\n    if len(list) == 1:\n        return list[0]\n    lengths = [len(list[i]) for i in range(len(list))]\n    min_length = min(lengths)\n    if min_length == lengths[0]:\n        return list[0]\n    for i in range(len(list)):\n        if lengths[i] == min_length:\n            list[i] = list[i][:min_length]\n    return list[0]\n\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print find_sublist_min_len(list)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def find_sublist_min_length(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: int\n    \"\"\"\n    def find_min_length_sublist(list_of_numbers, start, end):\n        if start == end:\n            return start\n        if end - start == 1:\n            return start\n        mid = (start + end) / 2\n        if list_of_numbers[mid] < list_of_numbers[start]:\n            return find_min_length_sublist(list_of_numbers, mid + 1, end)\n        else:\n            return find_min_length_sublist(list_of_numbers, start, mid)\n\n    min_length_sublist = find_min_length_sublist(list_of_numbers, 0, len(list_of_numbers) - 1)\n    return min_length_sublist\n\nif __name__ == \"__main__\":\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_sublist_min_length(list_of_numbers))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def find_sublist(l):\n    return min(l, key=lambda x: len(x))\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_sublist(l))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def find_min_len_sublist(a_list):\n    \"\"\"\n    :type a_list: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if len(a_list) == 1:\n        return 0\n\n    min_len = len(a_list[0])\n    for i in range(1, len(a_list)):\n        if len(a_list[i]) < min_len:\n            min_len = len(a_list[i])\n\n    return min_len\n\n\na_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def min_length(L):\n    \"\"\"\n    Input L is a list.\n    Return a list of minimum length sublist of L.\n    \"\"\"\n    min_length = []\n    for i in range(len(L)):\n        if i == 0:\n            min_length.append(L[i])\n        elif L[i] < L[i-1]:\n            min_length.append(L[i])\n        else:\n            pass\n    return min_length\n\n# test cases\nL = [1, 2, 3, 4, 5, 6, 7, 8]\nprint min_length(L)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "import sys\n\ndef find_sublist_min_length(list_of_list):\n    \"\"\"\n    find_sublist_min_length(list_of_list) -> [list_of_sublist_min_length]\n    \n    Find all sublist having minimum length.\n\n    Input: list_of_list, a list of lists.\n    Output: list_of_sublist_min_length, a list of lists.\n\n    Example:\n    >>> list_of_list = [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    >>> find_sublist_min_length(list_of_list)\n    [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]]\n    >>> list_of_list = [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    >>> find_sub"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# http://www.geeksforgeeks.org/find-minimum-length-sublist-containing-all-elements/\ndef find_sublist_min_length(arr):\n    # Get the minimum length of sublist\n    # For example, if arr is [1,2,3,4,5], then min_length is 2\n    min_length = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            min_length = arr[i]\n\n    # Find the first element of sublist\n    # For example, if arr is [1,2,3,4,5], then first_element is 3\n    first_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < first_element:\n            first_element = arr[i]\n\n    # Find the last element of sublist\n    # For example, if arr is [1,2,3,4,5], then last_element is 5\n    last_element = arr[-1]\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] > last_element:\n            last_element = arr[i]\n\n    # Find the sublist containing first_element and last_element\n    # For example, if arr is [1,2,3,4,5], then sublist is [2,3,4]\n    sublist = [first_element, last_element]\n\n    return sublist, min_length\n\n\n# Test cases\nprint find_sublist_min_length([1,2,3,4,5])\nprint find_sublist_min_length([1,2,3,4,5,6])\nprint find_sublist_min_length([1,2,3,4,5,6,7])\nprint find_sublist_min_length([1,2,3,4,5,6,7,8])\nprint find_sublist_min_length([1,2,3,4,5,6,7,8,9])"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def find_min_sublist(list, k):\n    # write your code here\n    return min(filter(lambda x: len(x) == k, list))\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5]\n    print find_min_sublist(list, 2)\n    print find_min_sublist(list, 5)\n    print find_min_sublist(list, 6)\n    print find_min_sublist(list, 7)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def subListLength(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    length = len(arr)\n    if length == 0:\n        return 0\n    min_length = arr[0]\n    for i in range(1, length):\n        if arr[i] < min_length:\n            min_length = arr[i]\n    return min_length\n\n# Your SubListLength solution here."
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def sublist(lst):\n    \"\"\"\n    :param lst: list\n    :return: a tuple of (index, sublist)\n    \"\"\"\n    # TODO: Implement this function\n    return (None, None)\n\n\ndef main():\n    \"\"\"\n    For testing:\n    >>> sublist([1,2,3,4])\n    (0, [1, 2])\n    >>> sublist([1,2,3,4,5,6])\n    (1, [1, 2, 3, 4])\n    >>> sublist([1,2,3,4,5,6,7,8])\n    (2, [1, 2, 3, 4, 5])\n    >>> sublist([1,2,3,4,5,6,7,8,9,10])\n    (2, [1, 2, 3, 4, 5])\n    \"\"\"\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    print sublist(lst)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def find_minimum_length_sublist(L):\n    \"\"\"\n    L is a list of integers.\n    Returns a tuple of the form (min_length, sublist) where sublist is a\n    list of integers of minimum length min_length.\n    \"\"\"\n    min_length = float(\"inf\")\n    sublist = []\n    for i in L:\n        if i < min_length:\n            min_length = i\n            sublist = [i]\n        elif i == min_length:\n            sublist.append(i)\n    return (min_length, sublist)\n\n\nif __name__ == '__main__':\n    L = [1, 2, 3, 4, 5, 6]\n    (min_length, sublist) = find_minimum_length_sublist(L)\n    print(min_length, sublist)\n    L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    (min_length, sublist) = find_minimum_length_sublist(L)\n    print(min_length, sublist)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/minimum-length-sublist/\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def findSubList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n        else:\n            slow = head\n            fast = head.next\n            while fast is not None:\n                slow = slow.next\n                fast = fast.next\n            fast = head\n            while fast is not None:\n                slow = slow.next\n                fast = fast.next\n            slow = head\n            count = 1\n            while slow.next is not None:\n                slow = slow.next\n                count += 1\n            slow = head\n            while slow is not None:\n                slow = slow.next\n                if count > len(slow.next.next):\n                    return slow\n            return slow"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def min_len_sublist(list):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n\n    For example,\n    Given [1,3,5,2,6,4],\n\n    return 2.\n\n    Your function should return the minimum length sublist in the given list.\n    If no such sublist exists, return 0 instead.\n    \"\"\"\n    return min([len(sublist) for sublist in list if len(sublist) > 0])\n\ndef test_min_len_sublist():\n    assert min_len_sublist([1,3,5,2,6,4]) == 2\n    assert min_len_sublist([]) == 0\n    assert min_len_sublist([1,2,3,4,5]) == 3\n    assert min_len_sublist([1,2,3,4,5,6,7,8]) == 3\n    assert min_len_sublist([3,1,2,4,5]) == 2\n    assert min_len_sublist([3,1,2,4,5,6,7,8]) == 3\n    assert min_len_sublist([1,2,3,4,5,6]) == 4\n    assert min_len_sublist([1,2,3,4,5,6,7,8,9]) == 4\n    assert min_len_sublist([1,2,3,4,5,6,7,8,9,10]) == 4\n    assert min_len_sublist([1,2,3,4,5,6,7,8,9,10,11,12]) == 4\n\nif __name__ == '__main__':\n    test_min_len_sublist()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def find_min_sublist(seq, length):\n    min_sublist = []\n    for i in range(len(seq)):\n        if len(min_sublist) == 0:\n            min_sublist.append(seq[i:i+length])\n        else:\n            j = 0\n            while j < len(min_sublist) - 1:\n                if len(min_sublist[j]) + 1 < len(min_sublist[j+1]):\n                    min_sublist[j] = min_sublist[j][:len(min_sublist[j]) + 1]\n                    min_sublist[j+1] = min_sublist[j+1][:len(min_sublist[j+1]) + 1]\n                else:\n                    j += 1\n            if len(min_sublist[j]) < len(seq[i:i+length]):\n                min_sublist[j] = seq[i:i+length]\n            elif len(min_sublist[j]) == len(seq[i:i+length]):\n                min_sublist.append(seq[i:i+length])\n    return min_sublist\n\n# This function will be used to test your function\ndef main():\n    test_case = [\n        [[3, 1, 2, 1, 3], 4],\n        [[1, 1, 1], 3],\n        [[1, 1], 2],\n        [[1, 1, 1, 1], 1],\n        [[1, 1, 1, 1, 1, 1], 1],\n        [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1],\n        [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "# Function to find minimum length of a list\ndef min_length_sublist(L):\n  if len(L) == 0:\n    return 0\n  min_length = len(L)\n  for i in range(len(L)):\n    for j in range(i+1, len(L)):\n      if L[i] == L[j]:\n        if min_length > j - i:\n          min_length = j - i\n  return min_length\n\n# Function to find minimum length of a list\ndef min_length_sublist_python(L):\n  if len(L) == 0:\n    return 0\n  min_length = len(L)\n  for i in range(len(L)):\n    for j in range(i+1, len(L)):\n      if L[i] == L[j]:\n        if min_length > j - i:\n          min_length = j - i\n  return min_length\n\n# Driver program to test above functions\nif __name__ == '__main__':\n  L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  print \"Minimum length of sublist is\", min_length_sublist(L)\n  print \"Minimum length of sublist is\", min_length_sublist_python(L)"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def find_sublist_min_len(L):\n    \"\"\"\n    L is a list of integers.\n    Return the sublist having minimum length.\n    \"\"\"\n    def min_len(L, idx):\n        if len(L) < idx + 1:\n            return len(L)\n        else:\n            return min_len(L[idx + 1:], idx) + 1\n    return min(L, key=min_len)\n\ndef find_sublist_min_len_2(L):\n    \"\"\"\n    L is a list of integers.\n    Return the sublist having minimum length.\n    \"\"\"\n    def min_len(L, idx):\n        if len(L) < idx + 1:\n            return len(L)\n        else:\n            return min(L[idx + 1:], key=lambda x: x - L[idx]) + 1\n    return min(L, key=min_len)\n\nL = [1, 2, 3, 4, 5]\nprint find_sublist_min_len_2(L)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def find_sublist(list, start, end):\n    sublist = []\n    for i in range(start, end):\n        if i not in sublist:\n            sublist.append(i)\n    return sublist\n\nif __name__ == '__main__':\n    print find_sublist([1, 2, 3, 4, 5], 0, 4)\n    print find_sublist([1, 2, 3, 4, 5], 0, 2)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def find_min(arr):\n    \"\"\"\n    Find the sublist having minimum length\n    \"\"\"\n    min_length = 0\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        else:\n            min_length = max(min_length, len(arr[i:]))\n    return min_length\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n    print find_min(arr)"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef min_sublist(a):\n    min_len = 0\n    for i in range(len(a)):\n        if len(a[i:]) < min_len:\n            min_len = len(a[i:])\n    return min_len\n\n\ndef main():\n    a = [1, 2, 3, 4, 5]\n    print min_sublist(a)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def findSubList(arr):\n    length = len(arr)\n    for i in range(0, length):\n        for j in range(i + 1, length):\n            if arr[i] > arr[j]:\n                return arr[i:j]\n\n\narr = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(findSubList(arr))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_sublist_min(lst):\n    \"\"\"\n    Input: lst = list\n    Output: min_len\n    \"\"\"\n    def get_min_len(lst):\n        return min([len(sublist) for sublist in lst])\n    return get_min_len(lst)\n\ndef test_find_sublist_min():\n    assert find_sublist_min([1,2,3,4,5,6,7,8,9,10]) == 3\n    assert find_sublist_min([]) == 0\n    assert find_sublist_min([1,2,3]) == 3\n    assert find_sublist_min([1,2,3,4,5,6]) == 3\n    assert find_sublist_min([1,2,3,4,5,6,7,8,9,10,11]) == 3\n\nif __name__ == \"__main__\":\n    test_find_sublist_min()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-min-length-sublist/problem\n\n# Complete the minSubList function below.\ndef minSubList(arr):\n    # Your code here\n    min_length = len(arr[0])\n    for i in range(1, len(arr)):\n        if len(arr[i]) < min_length:\n            min_length = len(arr[i])\n    return min_length"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def min_length(lst):\n    \"\"\"\n    Returns the list with minimum length\n    :param lst: list of integers\n    :return: list\n    \"\"\"\n    l = len(lst)\n    min_len = lst[0]\n    for i in lst:\n        if i < min_len:\n            min_len = i\n    return lst[min_len]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sublist_min_length(items, length):\n    \"\"\"\n    Given a list of items, returns a list of sublists having\n    minimum length of length.\n    \"\"\"\n    return [items[i:i+length] for i in range(len(items)) if i+length <= len(items)]\n\ndef sublist_min_length_2(items):\n    \"\"\"\n    Given a list of items, returns a list of sublists having\n    minimum length of length.\n    \"\"\"\n    sublists = []\n    for i in range(len(items)):\n        if i+1 < len(items):\n            sublists.append(items[i:i+1])\n    return sublists"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def findSubList(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return 0\n\n    minLen = min(len(a), len(b))\n    \n    for i in range(0, minLen):\n        if a[i] < b[i]:\n            return i\n        elif a[i] > b[i]:\n            return i + 1\n    \n    return minLen\n    \n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5, 6]\n    \n    print findSubList(a, b)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-the-smallest-sublist-of-length-k/problem\n# https://www.hackerrank.com/challenges/find-the-smallest-sublist-of-length-k/submissions/code/41171877\n\ndef find_sublist(arr, k):\n    \n    # create a dictionary to store the min length sublist\n    # key is the sublist length, value is a list of list indices\n    min_sublist = {}\n\n    # iterate through the array, find the min length sublist\n    for i in range(len(arr)):\n        # iterate through the sublist\n        for j in range(i, len(arr)):\n            # iterate through the sublist to find the minimum length sublist\n            for k in range(j+1, len(arr)):\n                # if the sublist is of length k, then we have found the minimum length sublist\n                if arr[j:k] == arr[k:]:\n                    # if the min length sublist doesn't exist, create it\n                    if not min_sublist.has_key(k):\n                        # add the sublist length to the dictionary\n                        min_sublist[k] = [j, k]\n                    # if the min length sublist exists, then update the list index\n                    else:\n                        # if the sublist length is greater than the min sublist length, then update the min sublist length\n                        if k > min_sublist[k][0]:\n                            min_sublist[k][0] = j\n                            min_sublist[k][1] = k\n                        # if the sublist length is smaller than the min sublist length, then update the min sublist length\n                        else:\n                            min_sublist[k][0] = k\n                            min_sublist[k][1] = j\n\n    # return the min length sublist\n    return min_sublist[k][0]\n\n\ndef main():\n    # input arguments\n    k = int(input())\n    arr = list(map(int, input().rstrip().split()))\n\n    # write the function\n    print(find_sublist(arr, k))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def sub_list(list_):\n    \"\"\"\n    list_: a list\n    \"\"\"\n    min_length = len(list_)\n    min_list = []\n    for i in range(len(list_)):\n        if len(list_[i]) < min_length:\n            min_length = len(list_[i])\n            min_list = list_[i]\n    return min_list\n\n\ndef main():\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(sub_list(list_))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_min_length(list_):\n    min_length = len(list_[0])\n    for i in range(len(list_)):\n        if len(list_[i]) < min_length:\n            min_length = len(list_[i])\n    return min_length\n\nprint find_min_length([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"])"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def findSubList(arr, low, high):\n    \"\"\"\n    :type arr: List[int]\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    if low == high:\n        return []\n    mid = low + (high - low) / 2\n    if arr[mid] > arr[high]:\n        return findSubList(arr, mid + 1, high)\n    elif arr[mid] < arr[high]:\n        return findSubList(arr, low, mid)\n    else:\n        return [arr[low], arr[mid]]\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5]\n    print(findSubList(arr, 0, len(arr) - 1))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_min_sublist(a, k):\n    \"\"\"\n    Find the k-sublist having minimum length.\n    \"\"\"\n    if k == 0:\n        return []\n\n    # find the sublist having minimum length\n    def find_min_sublist(a, k):\n        if len(a) == 0:\n            return []\n        if len(a) == 1:\n            return [a[0]]\n\n        # sort the list\n        sorted_a = sorted(a)\n        i = 0\n        while i < len(sorted_a):\n            j = i + 1\n            while j < len(sorted_a) and sorted_a[j] == sorted_a[i]:\n                j += 1\n            if j - i < k:\n                return [sorted_a[i]]\n            i = j\n\n        return [sorted_a[i - k]]\n\n    return find_min_sublist(a, k)\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6]\n    print(find_min_sublist(a, 3))\n    print(find_min_sublist(a, 7))\n    print(find_min_sublist(a, 2))\n    print(find_min_sublist(a, 1))\n    print(find_min_sublist(a, 0))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_min_length(arr):\n    min_len = len(arr)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if len(arr[i:j]) < min_len:\n                min_len = len(arr[i:j])\n                min_start = i\n                min_end = j\n    return min_start, min_end, min_len\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print find_min_length(arr)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def findMinLengthSublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    def getMinLength(arr, left, right):\n        if left == right:\n            return left\n        mid = (left + right) / 2\n        if arr[mid] == arr[left]:\n            return getMinLength(arr, left, mid)\n        elif arr[mid] < arr[left]:\n            return getMinLength(arr, mid+1, right)\n        else:\n            return getMinLength(arr, left, mid)\n\n    minLength = getMinLength(arr, 0, len(arr) - 1)\n    return arr[minLength]"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def min_length_sublist(arr):\n\tmin_len = len(arr)\n\tfor i in range(0, len(arr) - 1):\n\t\tfor j in range(i + 1, len(arr)):\n\t\t\tif len(arr[i:j + 1]) < min_len:\n\t\t\t\tmin_len = len(arr[i:j + 1])\n\treturn min_len\n\n# Testing\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(min_length_sublist(arr))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def findSubList(arr, n):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n <= 0:\n        return []\n\n    def minLen(arr, start, end):\n        if end < start:\n            return 0\n\n        if arr[start] < arr[end]:\n            return arr[start] - arr[end]\n        else:\n            return minLen(arr, start, end - 1)\n\n    def findMin(arr, start, end):\n        if start == end:\n            return arr[start]\n\n        minLen = minLen(arr, start, end)\n        if minLen == 0:\n            return -1\n\n        arr[start] = minLen\n        arr[end] = minLen\n        return minLen\n\n    def findMin2(arr, start, end):\n        if start == end:\n            return arr[start]\n\n        minLen = arr[start]\n        for i in range(start + 1, end):\n            if arr[i] < minLen:\n                minLen = arr[i]\n        arr[start] = minLen\n        return minLen\n\n    minLen = findMin(arr, 0, n - 1)\n    if minLen == -1:\n        return []\n    return arr[:minLen]"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def min_length(lst):\n    \"\"\"\n    :param lst: list\n    :return: min_length\n    \"\"\"\n    min_length = -1\n    for i in range(len(lst)):\n        if i == 0:\n            continue\n        else:\n            if lst[i] < lst[i-1]:\n                if lst[i] < lst[i-1]:\n                    min_length = lst[i]\n            else:\n                if lst[i] < lst[i-1]:\n                    min_length = lst[i]\n    return min_length\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print min_length(lst)\n    lst = [1, 2, 3, 4, 5]\n    print min_length(lst)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def find_min_len(lst):\n    \"\"\"\n    :param lst: a list\n    :return: the index of the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst)\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if len(lst[j]) < min_len:\n                min_len = len(lst[j])\n                min_ind = j\n    return min_ind\n\n\ndef find_min_len_2(lst):\n    \"\"\"\n    :param lst: a list\n    :return: the index of the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst)\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if len(lst[j]) < min_len:\n                min_len = len(lst[j])\n                min_ind = j\n    return min_ind\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(find_min_len(lst))\n    print(find_min_len_2(lst))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_minimum_length_sublist(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    if len(list) <= 1:\n        return 0\n\n    minimum_length = len(list)\n    for i in range(len(list)):\n        if len(list[i:]) < minimum_length:\n            minimum_length = len(list[i:])\n    return minimum_length\n\n\nif __name__ == \"__main__\":\n    print(find_minimum_length_sublist([1, 2, 3, 4, 5]))\n    print(find_minimum_length_sublist([1, 2, 3, 4, 5, 6]))\n    print(find_minimum_length_sublist([1, 2, 3]))\n    print(find_minimum_length_sublist([1, 2, 3, 4, 5, 6]))\n    print(find_minimum_length_sublist([1, 2, 3, 4, 5, 6, 7]))\n    print(find_minimum_length_sublist([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(find_minimum_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def findMinSubListLength(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    min_length = len(arr)\n    min_sublist = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            min_length = i\n            min_sublist = [arr[0]] + arr[i:]\n    return min_length"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "# TODO:\n# 1. Write a function to find the sublist with minimum length\n# 2. Write a function to find the sublist with minimum average length\n\ndef find_sublist_with_min_length(alist):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n\n    :type alist: List\n    :rtype: List\n    \"\"\"\n    # TODO: Write your code here\n    # The following code is not very readable. Please write a better one.\n\n    def sort_length(alist):\n        \"\"\"\n        Sort the list by length\n        :type alist: List\n        :rtype: List\n        \"\"\"\n        alist.sort(key=lambda x: len(x))\n\n    def find_min_length(alist):\n        \"\"\"\n        Find the minimum length of the sublist\n        :type alist: List\n        :rtype: List\n        \"\"\"\n        # TODO: Write your code here\n        # The following code is not very readable. Please write a better one.\n        # The sublist should have a minimum length of at least 2.\n        # If the length of the sublist is less than 2, then return the sublist itself.\n        # The sublist should not have the same element as the head of the list.\n\n        if len(alist) < 2:\n            return alist\n\n        if len(alist) == 2:\n            return alist\n\n        sort_length(alist)\n        i = 0\n        j = 1\n        while i < len(alist) - 1:\n            if alist[i] == alist[j]:\n                j += 1\n            else:\n                if j - i > 1:\n                    return alist[i:j]\n                else:\n                    return alist[i]\n\n        return alist\n\n    min_length = len(find_min_length(alist))\n    return find_min_length(alist)\n\n\nif __name__ == \"__main__\":\n    alist = [1,2,3,4,5,6,7]\n    print(find_sublist_with_min_length(alist))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_min_sublist(data, start, end):\n    if start >= end:\n        return\n    \n    if start == end:\n        return [data[start]]\n    \n    mid = (start + end) / 2\n    left_sublist = find_min_sublist(data, start, mid)\n    right_sublist = find_min_sublist(data, mid + 1, end)\n    \n    return left_sublist + right_sublist\n\ndef find_min_sublist_recursive(data, start, end):\n    if start >= end:\n        return\n    \n    if start == end:\n        return [data[start]]\n    \n    mid = (start + end) / 2\n    left_sublist = find_min_sublist_recursive(data, start, mid)\n    right_sublist = find_min_sublist_recursive(data, mid + 1, end)\n    \n    return left_sublist + right_sublist\n\ndef find_min_sublist_iterative(data, start, end):\n    if start >= end:\n        return\n    \n    if start == end:\n        return [data[start]]\n    \n    mid = (start + end) / 2\n    \n    left_sublist = []\n    right_sublist = []\n    \n    for i in range(start, mid + 1):\n        if i == mid:\n            left_sublist.append(data[i])\n        else:\n            right_sublist.append(data[i])\n    \n    return left_sublist + right_sublist\n\ndef find_min_sublist_iterative_recursive(data, start, end):\n    if start >= end:\n        return\n    \n    if start == end:\n        return [data[start]]\n    \n    mid = (start + end) / 2\n    left_sublist = find_min_sublist_iterative_recursive(data, start, mid)\n    right_sublist = find_min_sublist_iterative_recursive(data, mid + 1, end)\n    \n    return left_sublist + right_sublist\n\nif __name__ =="
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import collections\n\ndef find_min_sublist(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    min_length = len(list_of_lists[0])\n    for list_ in list_of_lists:\n        if len(list_) < min_length:\n            min_length = len(list_)\n    \n    min_list = []\n    for list_ in list_of_lists:\n        if len(list_) == min_length:\n            min_list.append(list_)\n    return min_list"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def find_min_sublist(L):\n    \"\"\"\n    L - a list of integers\n    returns - the minimum sublist\n    \"\"\"\n    # min_length - the length of the sublist with minimum length\n    min_length = len(L)\n    # min_index - the index of the sublist with minimum length\n    min_index = 0\n    for i in range(len(L)):\n        if L[i] > L[min_index]:\n            min_length = len(L)\n            min_index = i\n    return L[min_index:min_index+min_length]\n\n# test cases\nL = [1,2,3,4,5,6,7,8,9]\nprint(\"Sublist with minimum length:\", find_min_sublist(L))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def find_min(sorted_list):\n    min_length = len(sorted_list)\n    min_index = 0\n    for i in range(len(sorted_list)):\n        if sorted_list[i] < sorted_list[min_index]:\n            min_index = i\n    return min_index, min_length\n\ndef find_min_recur(sorted_list):\n    if len(sorted_list) == 0:\n        return 0, 0\n\n    min_length = len(sorted_list)\n    min_index = 0\n    for i in range(len(sorted_list)):\n        if sorted_list[i] < sorted_list[min_index]:\n            min_index = i\n    min_index += 1\n\n    while min_index < len(sorted_list):\n        if sorted_list[min_index] < sorted_list[min_index + 1]:\n            min_index += 1\n        else:\n            break\n\n    return min_index, min_length\n\ndef find_min_iter(sorted_list):\n    min_length = len(sorted_list)\n    min_index = 0\n    for i in range(len(sorted_list)):\n        if sorted_list[i] < sorted_list[min_index]:\n            min_index = i\n    return min_index, min_length\n\nif __name__ == \"__main__\":\n    sorted_list = [1,2,3,4,5,6,7,8,9,10]\n    print(\"Min length for:\", sorted_list)\n    print(\"Using python:\", find_min(sorted_list))\n    print(\"Using python recur:\", find_min_recur(sorted_list))\n    print(\"Using python iter:\", find_min_iter(sorted_list))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import unittest\n\ndef find_min_length(L):\n    \"\"\"\n    Find the sublist having minimum length\n    :type L: list\n    :rtype: int\n    \"\"\"\n    if len(L) == 0:\n        return 0\n    else:\n        return min(find_min_length(L[:i]) + 1 for i in range(1, len(L)))\n\n\nclass Test(unittest.TestCase):\n    def test_find_min_length(self):\n        self.assertEqual(find_min_length([1,2,3,4,5]), 4)\n        self.assertEqual(find_min_length([1,2,3,4,5,6]), 5)\n        self.assertEqual(find_min_length([1,2,3,4,5,6,7]), 6)\n        self.assertEqual(find_min_length([1,2,3,4,5,6,7,8]), 7)\n        self.assertEqual(find_min_length([1,2,3,4,5,6,7,8,9]), 8)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# Your code here\ndef min_length(a,b):\n    #print a,b\n    return min(len(a),len(b))\n\ndef min_length_2(a,b):\n    #print a,b\n    return min(min_length(a,b),min_length(b,a))\n\ndef min_length_3(a,b):\n    #print a,b\n    return min(min_length(a,b),min_length(b,a))\n\ndef min_length_4(a,b):\n    #print a,b\n    return min(min_length(a,b),min_length(b,a))\n\nif __name__ == '__main__':\n    #print min_length([1,2,3,4], [2,3,4,5])\n    print min_length_2([1,2,3,4], [2,3,4,5])\n    print min_length_3([1,2,3,4], [2,3,4,5])\n    print min_length_4([1,2,3,4], [2,3,4,5])"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def find_min_length(nums):\n    min_length = nums[0]\n    for num in nums:\n        if min_length > num:\n            min_length = num\n    return min_length\n\ndef test():\n    assert find_min_length([1,2,3]) == 1\n    assert find_min_length([3,2,1]) == 1\n    assert find_min_length([1,2,3,4]) == 2\n    assert find_min_length([2,1,4,3]) == 2\n    assert find_min_length([4,3,2,1]) == 2\n    assert find_min_length([4,3,2,1,0]) == 3\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def minSublist(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(nums) < k:\n        return -1\n    if len(nums) == k:\n        return 0\n    if len(nums) == k+1:\n        return 1\n    start = 0\n    end = k+1\n    while end < len(nums):\n        if nums[end] <= nums[start]:\n            end += 1\n        else:\n            start += 1\n    return end\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5,6,7,8,9]\n    k = 3\n    print(minSublist(nums, k))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_min_length(a, b):\n    \"\"\"\n    Find the sublist having minimum length.\n    \"\"\"\n    return min(a, b)\n\nprint find_min_length([1,2,3,4,5,6,7,8,9,10], [10,9,8,7,6,5,4,3,2,1])\nprint find_min_length([1,2,3,4,5,6,7,8,9,10], [10,9,8,7,6,5,4,3,2,1,0])"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def min_sublist_length(list_):\n    \"\"\"\n    Return the length of the shortest sublist in the list.\n    \"\"\"\n    length = len(list_)\n    if length == 0:\n        return 0\n    else:\n        if len(list_) == 1:\n            return 1\n        else:\n            return min(min_sublist_length(list_[:length // 2]),\n                       min_sublist_length(list_[length // 2:]))\n\n#list = [1,2,3,4,5,6]\n#print(min_sublist_length(list))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def min_length(list_to_check, min_length):\n    \"\"\"\n    Return the index of the smallest sublist in the list.\n    \"\"\"\n    length = len(list_to_check)\n    for i in range(length):\n        if (length - i) < min_length:\n            min_length = length - i\n            index = i\n    return index\n\nprint min_length(list_to_check, 2)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_min_length_sublist(list_to_find_min_length_sublist):\n    \"\"\"\n    Input: A list of integers.\n    Output: Minimum length sublist of the list.\n    \"\"\"\n    min_length_sublist = None\n    min_length = float(\"inf\")\n    for i in range(len(list_to_find_min_length_sublist)):\n        for j in range(i+1, len(list_to_find_min_length_sublist)):\n            if list_to_find_min_length_sublist[i] + list_to_find_min_length_sublist[j] < min_length:\n                min_length = list_to_find_min_length_sublist[i] + list_to_find_min_length_sublist[j]\n                min_length_sublist = [list_to_find_min_length_sublist[i], list_to_find_min_length_sublist[j]]\n    return min_length_sublist\n\nif __name__ == \"__main__\":\n    list_to_find_min_length_sublist = [1,2,3,4,5,6,7,8,9,10]\n    print find_min_length_sublist(list_to_find_min_length_sublist)\n    list_to_find_min_length_sublist = [1,2,3,4,5,6,7,8,9,10,11]\n    print find_min_length_sublist(list_to_find_min_length_sublist)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/minimum-length-of-sublist-sum-equals-k/\n\nclass Solution(object):\n    def findSubListWithSmallestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # dp[i] is the minimum sum of the sublist [nums[0], nums[i]],\n        # where len(nums) >= i+1\n        #\n        # The first element of nums is always the sum of the sublist [nums[0], nums[0]].\n        # So dp[0] = nums[0]\n        #\n        # The second element of nums is always the sum of the sublist [nums[1], nums[0]].\n        # So dp[1] = nums[1]\n        #\n        # The third element of nums is always the sum of the sublist [nums[2], nums[1]].\n        # So dp[2] = nums[2]\n        #\n        # The fourth element of nums is always the sum of the sublist [nums[3], nums[2]].\n        # So dp[3] = nums[3]\n        #\n        # The fifth element of nums is always the sum of the sublist [nums[4], nums[3]].\n        # So dp[4] = nums[4]\n        #\n        # The sixth element of nums is always the sum of the sublist [nums[5], nums[4]].\n        # So dp[5] = nums[5]\n        #\n        # The seventh element of nums is always the sum of the sublist [nums[6], nums[5]].\n        # So dp[6] = nums[6]\n        #\n        # The eighth element of nums is always the sum of the sublist [nums[7], nums[6]].\n        # So dp[7] = nums[7]\n        #\n        # The ninth element of"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def find_min_sublist(list_of_lists):\n    \"\"\"\n    Return the minimum length sublist of list_of_lists.\n\n    :type list_of_lists: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    if not list_of_lists:\n        return []\n    min_sublist = []\n    min_sublist_len = len(list_of_lists[0])\n    for sublist in list_of_lists:\n        if len(sublist) < min_sublist_len:\n            min_sublist_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    print(find_min_sublist(list_of_lists))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def find_sublist(arr, start, end):\n    \"\"\"\n    Input: arr - list, start - int, end - int\n    Output: Minimum length sublist\n    \"\"\"\n    # find the minimum length sublist\n    min_len = len(arr[start:end])\n    for i in range(start, end):\n        # if the current sublist is smaller than min_len, replace it with the current sublist\n        if len(arr[start:end]) < min_len:\n            min_len = len(arr[start:end])\n            min_start = start\n            min_end = end\n    return arr[min_start:min_end]\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(find_sublist(arr, 0, len(arr)-1))\n    print(find_sublist(arr, 1, len(arr)-1))\n    print(find_sublist(arr, 2, len(arr)-1))\n    print(find_sublist(arr, 0, 5))\n    print(find_sublist(arr, 0, 4))\n    print(find_sublist(arr, 0, 3))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def find_minimum_length_sublist(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: List[int]\n    \"\"\"\n    list_length = len(list_)\n    if list_length == 0:\n        return []\n    else:\n        return min(list_[:], key=lambda x: len(list_[x:]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def findSubList(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(list)\n    min_len = n\n    for i in range(n-1):\n        if list[i] < list[i+1]:\n            min_len = i\n    return min_len\n\n# Your findSubList function should return the length of the shortest sublist.\n# If there is no shortest sublist, return 0."
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "# This is a sample implementation of a solution using a recursive function\n# and a list of lists.\n\ndef find_sublist(sublist, list_of_lists):\n    \"\"\"\n    Find the sublist having minimum length.\n\n    Assumption:\n        sublist and list_of_lists are sorted in ascending order.\n\n    Input:\n        sublist: a list of integers\n        list_of_lists: a list of lists\n\n    Output:\n        The length of the sublist with minimum length.\n    \"\"\"\n\n    # Check if sublist is empty\n    if len(sublist) == 0:\n        return -1\n\n    # Check if sublist and list_of_lists are of the same length\n    if len(sublist)!= len(list_of_lists):\n        return -1\n\n    # Check if sublist and list_of_lists are sorted\n    if not list_of_lists[0] <= sublist <= list_of_lists[-1]:\n        return -1\n\n    # Find the minimum length of sublist in list_of_lists\n    min_length = len(list_of_lists[0])\n    for i in range(0, len(list_of_lists)):\n        if len(list_of_lists[i]) < min_length:\n            min_length = len(list_of_lists[i])\n\n    # Return the minimum length of sublist\n    return min_length\n\ndef main():\n    sublist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list_of_lists = [[1, 2, 3, 4, 5], [6, 7, 8, 9], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]\n\n    print(find_sublist(sublist, list_of_lists))\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def find_sublist(L):\n    \"\"\"\n    L: a list\n    return a tuple (length, index)\n    \"\"\"\n    min_len = len(L)\n    min_index = 0\n    for index, element in enumerate(L):\n        if index == 0:\n            if len(L[index:]) < min_len:\n                min_len = len(L[index:])\n                min_index = index\n        elif len(L[index:]) < min_len:\n            min_len = len(L[index:])\n            min_index = index\n    return (min_len, min_index)\n\nif __name__ == '__main__':\n    L = [1, 2, 3, 4, 5]\n    print find_sublist(L)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def find_min_len_sublist(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    # Find the min length of sublist\n    min_len = len(list)\n    for i in range(0, len(list) - 1):\n        if len(list[i:]) < min_len:\n            min_len = len(list[i:])\n\n    # Find the min length of sublist\n    for i in range(0, len(list) - 1):\n        if len(list[i:]) < min_len:\n            min_len = len(list[i:])\n\n    # Return min length of sublist\n    return min_len\n\nif __name__ == '__main__':\n    list = [1,2,3,4,5,6,7,8,9,10]\n    print(find_min_len_sublist(list))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def sublist_length(list):\n    if not list:\n        return 0\n\n    min_length = 0\n    for index in range(len(list)):\n        if list[index] == list[min_length]:\n            if len(list[index]) > min_length:\n                min_length = len(list[index])\n        else:\n            if len(list[index]) < min_length:\n                min_length = len(list[index])\n    return min_length\n\nprint(sublist_length([1, 2, 3, 4, 5]))\nprint(sublist_length([1, 1, 1, 1, 1]))\nprint(sublist_length([1, 2, 3, 4, 5, 6]))\nprint(sublist_length([1, 2, 3, 4, 5, 6, 7]))\nprint(sublist_length([1, 2, 3, 4, 5, 6, 7, 7]))\nprint(sublist_length([1, 2, 3, 4, 5, 6, 7, 7, 7]))"
    },
    {
      "rank": 77,
      "score": 2.0,
      "candidate": "# https://www.geeksforgeeks.org/count-sublist-with-minimum-length/\ndef find_min_length_sublist(list):\n    if len(list) == 0:\n        return 0\n\n    if len(list) == 1:\n        return len(list[0])\n\n    # Find the minimum length sublist\n    min_length = len(list[0])\n    for i in range(1, len(list)):\n        if len(list[i]) < min_length:\n            min_length = len(list[i])\n\n    # Find the sublist with minimum length\n    for i in range(1, len(list)):\n        if len(list[i]) < min_length:\n            min_length = len(list[i])\n            sublist = list[:i]\n            break\n    return min_length\n\n\n# http://www.geeksforgeeks.org/count-sublist-with-minimum-length/\ndef find_min_length_sublist_iter(list):\n    if len(list) == 0:\n        return 0\n\n    if len(list) == 1:\n        return len(list[0])\n\n    # Find the minimum length sublist\n    min_length = len(list[0])\n    for i in range(1, len(list)):\n        if len(list[i]) < min_length:\n            min_length = len(list[i])\n\n    # Find the sublist with minimum length\n    for i in range(1, len(list)):\n        if len(list[i]) < min_length:\n            min_length = len(list[i])\n            sublist = list[:i]\n            break\n    return min_length\n\n\n# http://www.geeksforgeeks.org/count-sublist-with-minimum-length-iterative/\ndef find_min_length_sublist_iter(list):\n    if len(list) == 0:\n        return 0\n\n    if len(list) == 1:\n        return len(list[0])\n\n    # Find the minimum length sublist\n    min_length = len(list[0])\n    for i in range(1, len(list"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# Definition for a sublist.\nclass SubList:\n    def __init__(self, head, new_head):\n        self.head = head\n        self.new_head = new_head\n\nclass Solution:\n    # @param head, a list node\n    # @return a list of length\n    def findSubListLen(self, head):\n        if not head:\n            return []\n        \n        # find the first node\n        # if the length is 0, return []\n        if head.next is None:\n            return []\n        \n        # find the minimum length\n        min_len = 99999999\n        min_head = head\n        # find the first node\n        while head.next is not None:\n            if head.next.next is None:\n                break\n            \n            # find the minimum length\n            if head.next.next.next is None:\n                return [min_head.next.val]\n            \n            # find the minimum length\n            if head.next.next.next.next is None:\n                return [min_head.next.next.val]\n            \n            if min_len > head.next.next.next.next.next.next.val:\n                min_len = head.next.next.next.next.next.next.val\n                min_head = head.next.next.next.next.next.next\n        \n        return [min_head.next.val]\n    \n    # @param head, a list node\n    # @return a list of length\n    def findSubListLen2(self, head):\n        if not head:\n            return []\n        \n        # find the first node\n        # if the length is 0, return []\n        if head.next is None:\n            return []\n        \n        # find the minimum length\n        min_len = 99999999\n        min_head = head\n        # find the first node\n        while head.next is not None:\n            if head.next.next is None:\n                break\n            \n            if min_len > head.next.next.next.val:\n                min_len = head.next.next.next.val\n                min_head = head.next.next.next"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def find_min_length_sublist(lst, min_length):\n    \"\"\"\n    :type lst: List[int]\n    :type min_length: int\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n    if len(lst) == 2:\n        return 2\n    if len(lst) == 3:\n        return 3\n\n    left, right = 0, 0\n    lst_len = len(lst)\n    for i in range(lst_len):\n        if lst[i] > lst[right]:\n            right = i\n    \n    if len(lst) - right < min_length:\n        return len(lst) - right\n    \n    min_len = len(lst)\n    for i in range(right, lst_len - 1):\n        if len(lst) - right < min_length:\n            return len(lst) - right\n        if lst[i] > lst[right]:\n            min_len = min(min_len, len(lst) - right - 1)\n            right = i\n        else:\n            min_len = min(min_len, len(lst) - right)\n    return min_len\n\nclass Solution(object):\n    def minSubArrayLen(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if nums == []:\n            return 0\n        if nums[0] == 0:\n            return 1\n        lst_len = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                lst_len += 1\n            else:\n                lst_len += 1 + k - lst_len\n        return lst_len\n\nif __name__ == \"__main__\":\n    print(Solution().minSubArrayLen([-2, -3, 4, -1, -2,"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def find_min_length(list, min_length):\n    \"\"\"\n    Find the sublist having minimum length.\n    \"\"\"\n    \n    return min(list, key=len)\n\nif __name__ == '__main__':\n    list_to_find = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_min_length(list_to_find, 4))\n    print(find_min_length(list_to_find, 5))\n    print(find_min_length(list_to_find, 6))\n    print(find_min_length(list_to_find, 7))\n    print(find_min_length(list_to_find, 8))\n    print(find_min_length(list_to_find, 9))\n    print(find_min_length(list_to_find, 10))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def find_sublist_with_minimum_length(list_to_check):\n    \"\"\"\n    Write a function to find the sublist having minimum length.\n\n    For example, given [1,2,3,4,5], the sublist with minimum length is [1,2,3].\n\n    Example 1:\n        Input:\n            list_to_check = [1,2,3,4,5]\n\n        Output:\n            [1,2,3]\n    Example 2:\n        Input:\n            list_to_check = [1,2,3,4,5,6]\n\n        Output:\n            [1,2,3,4]\n    \"\"\"\n    return [x for x in list_to_check if len(x) == min(x)]"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def min_length_sublist(arr):\n    \"\"\"\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    min_length_sublist(arr) should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    \"\"\"\n    # Your code here\n    if len(arr) <= 1:\n        return arr\n\n    min_length = len(arr)\n    min_sublist = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                if len(arr[j:]) < min_length:\n                    min_length = len(arr[j:])\n                    min_sublist = arr[j:]\n                if len(arr[i:]) < min_length:\n                    min_length = len(arr[i:])\n                    min_sublist = arr[i:]\n\n    return min_sublist\n\n\nif __name__ == \"__main__\":\n    assert min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    assert min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    assert min_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def find_min_length_sublist(list_of_numbers):\n    \"\"\"\n    :param list_of_numbers:\n    :return:\n    \"\"\"\n    def find_min_length_sublist(list_of_numbers):\n        \"\"\"\n        :param list_of_numbers:\n        :return:\n        \"\"\"\n        if len(list_of_numbers) == 0:\n            return 0\n        if len(list_of_numbers) == 1:\n            return 0\n        if len(list_of_numbers) == 2:\n            return 0\n        min_length = len(list_of_numbers[0])\n        for i in range(1, len(list_of_numbers)):\n            if len(list_of_numbers[i]) < min_length:\n                min_length = len(list_of_numbers[i])\n        return min_length\n\n    min_length = find_min_length_sublist(list_of_numbers)\n    return min_length\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6]\n    print find_min_length_sublist(l)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def find_min_sub_list(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if len(arr) == 0:\n        return -1\n\n    n = len(arr)\n    if n == 1:\n        return 0\n    else:\n        return min(find_min_sub_list(arr[:k], k), find_min_sub_list(arr[k:], k))\n\n\n# Your code below:\n\ndef find_min_sub_list(arr, k):\n    # write your code here\n    if len(arr) == 0:\n        return -1\n\n    n = len(arr)\n    if n == 1:\n        return 0\n    else:\n        return min(find_min_sub_list(arr[:k], k), find_min_sub_list(arr[k:], k))\n\n\n# Your code below:\n\ndef find_min_sub_list(arr, k):\n    # write your code here\n    if len(arr) == 0:\n        return -1\n\n    n = len(arr)\n    if n == 1:\n        return 0\n    else:\n        return min(find_min_sub_list(arr[:k], k), find_min_sub_list(arr[k:], k))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def find_sublist_with_minimum_length(list_to_check, min_length):\n    \"\"\"\n    Write a function to find the sublist having minimum length.\n    \"\"\"\n    \n    # Your code here\n    \n    # return [list_to_check[i] for i in range(len(list_to_check)) if list_to_check[i] not in list_to_check[:i]]"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def find_min_length(items, n):\n    \"\"\"\n    :type items: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    l = len(items)\n    if l == 0:\n        return 0\n    if n > l:\n        return l\n    i = 0\n    while i < l:\n        if len(items[i:]) < n:\n            return len(items[i:])\n        i += 1\n    return n"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/minimum-length-of-sublist-sum-equal-k/\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def findSubList(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not k:\n            return None\n        if not head.next:\n            return head\n        curr = head\n        while curr:\n            curr = curr.next\n            if curr:\n                curr = curr.next\n                while curr and curr.val == curr.next.val:\n                    curr = curr.next\n                if curr:\n                    break\n        pre = head\n        while pre and pre.val == curr.val:\n            pre = pre.next\n            curr = curr.next\n        # print pre.val, curr.val\n        # print pre.val, curr.val\n        # print pre.val, curr.val, pre.val - curr.val\n        if pre and pre.val - curr.val == k:\n            pre.next = curr.next\n        else:\n            pre = curr\n        # print pre.val, curr.val\n        # print pre.val, curr.val, pre.val - curr.val\n        while pre and pre.val - curr.val!= k:\n            pre = pre.next\n            curr = curr.next\n            # print pre.val, curr.val\n        # print pre.val, curr.val\n        if pre and pre.val - curr.val == k:\n            pre.next = curr.next\n        else:\n            pre = curr\n        # print pre.val, curr.val\n        # print pre.val, curr.val, pre.val - curr.val\n        while pre and pre.val - curr.val!= k:\n            pre"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def find_sublist_min_len(arr):\n    \"\"\"\n    Given an array arr, return the index of the sublist having minimum length.\n    You can assume that the sublist is always in the array.\n    The length of sublist is the length of the sublist itself not including itself.\n    The length of the sublist is at least 2.\n    \"\"\"\n    if not arr:\n        return -1\n\n    min_len = len(arr[0]) + 1\n    for i in range(len(arr)):\n        min_len = min(min_len, len(arr[i]))\n    \n    return arr.index(arr[0][:min_len])\n\n\nprint find_sublist_min_len([1, 2, 3, 4, 5])"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_sublist_min_len(a, b):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n\n    Inputs:\n        a:  A list of integers.\n        b:  An integer.\n\n    Output:\n        A list of integers.\n    \"\"\"\n    # write your code here\n    length = len(a)\n    if length == 0:\n        return []\n    if length == 1:\n        return [a[0]]\n    sublist = []\n    i = 0\n    j = 0\n    while i < length:\n        if a[i] == b:\n            if j == 0:\n                j += 1\n            else:\n                sublist.append(a[j])\n                j = 0\n        else:\n            if j == 0:\n                j += 1\n            else:\n                sublist.append(a[i])\n                i += 1\n    if j == 0:\n        j += 1\n    return sublist"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def min_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(arr) <= 0:\n        return []\n    return min_sublist_helper(arr, 0, len(arr) - 1)\n\n\ndef min_sublist_helper(arr, start, end):\n    if end < start:\n        return []\n    if start == end:\n        return [arr[start]]\n    if arr[start] > arr[end]:\n        return min_sublist_helper(arr, start + 1, end)\n    else:\n        return min_sublist_helper(arr, start + 1, end - 1)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def find_min(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    min_len = len(arr)\n    min_idx = 0\n\n    for i in range(len(arr)):\n        if arr[i] < arr[min_idx]:\n            min_idx = i\n        elif arr[i] == arr[min_idx]:\n            if len(arr[i:]) < min_len:\n                min_idx = i\n\n    return min_idx\n\n\nif __name__ == '__main__':\n    arr = [2, 3, 1, 1, 2, 5, 6]\n    print(find_min(arr))\n    arr = [1, 2, 3]\n    print(find_min(arr))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def minSubListLen(self, head: ListNode) -> int:\n        if not head or not head.next:\n            return 0\n\n        left = head\n        right = head\n        min_len = 1\n        while right and right.next:\n            left = left.next\n            right = right.next.next\n            min_len += 1\n        return min_len\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n\n    s = Solution()\n    print(s.minSubListLen(head))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def getSubListLength(self, head):\n        if not head:\n            return 0\n        length = 0\n        p = head\n        while p:\n            length += 1\n            p = p.next\n        return length\n\n    def getMinLength(self, head):\n        length = self.getSubListLength(head)\n        if length == 0:\n            return 0\n        i = 0\n        p = head\n        while p:\n            if p.next:\n                if p.next.val - p.val < i:\n                    i = p.next.val - p.val\n            p = p.next\n        return i"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def find_sublist_min_len(list_):\n    \"\"\"\n    Find the sublist having minimum length.\n    :param list_:\n    :return:\n    \"\"\"\n    min_len = len(list_)\n    for i in range(len(list_)):\n        for j in range(len(list_)):\n            if i!= j and list_[i] == list_[j]:\n                min_len = min(min_len, 1 + list_[i:j + 1].count(list_[i]))\n    return min_len\n\n\ndef test():\n    assert find_sublist_min_len([1, 2, 3, 4, 5]) == 2, '1'\n    assert find_sublist_min_len([1, 2, 3, 4, 5, 6]) == 3, '2'\n    assert find_sublist_min_len([1, 2, 3, 4, 5, 6, 7]) == 3, '3'\n    assert find_sublist_min_len([1, 2, 3, 4, 5, 6, 7, 8]) == 4, '4'\n    assert find_sublist_min_len([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4, '5'\n    assert find_sublist_min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5, '6'\n    assert find_sublist_min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 6, '7'\n    assert find_sublist_min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 7, '8'\n    assert find_sublist_min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 8, '9'\n    assert find_sublist_min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 8, '10'\n    assert"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def find_sublist(arr, target, lo=0, hi=None):\n    if hi is None:\n        hi = len(arr)\n    while lo < hi:\n        mid = lo + (hi-lo)/2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n\n\"\"\"\nTest cases\n\"\"\"\narr = [1,2,3,4,5,6,7,8,9,10]\ntarget = 6\nprint find_sublist(arr, target)\n\narr = [1,2,3,4,5,6,7,8,9,10]\ntarget = 7\nprint find_sublist(arr, target)\n\narr = [1,2,3,4,5,6,7,8,9,10]\ntarget = 10\nprint find_sublist(arr, target)\n\narr = [1,2,3,4,5,6,7,8,9,10]\ntarget = 11\nprint find_sublist(arr, target)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Approach #1: Brute Force\ndef findSublist(s, l):\n    for i in range(l):\n        for j in range(i+1, l+1):\n            if s[i:j] == s[i+1:j]:\n                return s[i:j]\n    return []\n\n# Approach #2: Sort + Binary Search\ndef findSublist2(s, l):\n    res = []\n    i = 0\n    j = l\n    while i < j:\n        k = (i + j) / 2\n        if s[k] == s[i]:\n            i = k + 1\n        elif s[k] < s[i]:\n            res = s[i:k]\n            j = k\n        else:\n            res = s[i:j]\n            i = k + 1\n    return res\n\n# Approach #3: Sort + Binary Search\ndef findSublist3(s, l):\n    res = []\n    i = 0\n    j = l\n    while i < j:\n        k = (i + j) / 2\n        if s[k] == s[i]:\n            i = k + 1\n        elif s[k] < s[i]:\n            res = s[i:k]\n            j = k\n        else:\n            res = s[i:j]\n            i = k + 1\n    return res\n\n# Approach #4: Sort + Binary Search\ndef findSublist4(s, l):\n    res = []\n    i = 0\n    j = l\n    while i < j:\n        k = (i + j) / 2\n        if s[k] == s[i]:\n            i = k + 1\n        elif s[k] < s[i]:\n            res = s[i:k]\n            j = k\n        else:\n            res = s[i:j]\n            i = k + 1\n    return res\n\n# Approach #5: Sort + Binary Search\ndef findSublist5(s, l):\n    res = []\n    i = 0\n    j = l\n    while i < j:\n        k = (i + j) / 2"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/minimum-length-of-sublist-sum-equals-k/\n# The sublist with minimum length is defined as:\n# The sublist with minimum length is defined as:\n# The sublist with minimum length is defined as:\n# Given a non-empty list of integers nums,\n# find the length of the shortest sublist which sums to a given value.\n#\n# Example 1:\n# Input: nums = [1,2,3,4,5], k = 6\n# Output: 2\n# Explanation: The two shortest sublist are [1,2,3],[4,5] and [1,2,3,4,5].\n# Note:\n# The length of the given list will be in the range [0, 10000].\n# The value of each element in the given list will be in the range [-10000, 10000].\n#\n# Note:\n# You may assume k is always valid, 1 \u2264 k \u2264 sum(nums).\n\n\nclass Solution(object):\n    def minSubArrayLen(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if k == 0:\n            return 0\n        if k >= n:\n            return 1\n        dp = [[1] * n for i in range(n)]\n        for i in range(n - 1):\n            dp[i][i + 1] = nums[i]\n        for i in range(n - 2, -1, -1):\n            dp[i][i + 1] = nums[i] + dp[i + 1][i]\n        return min(dp[:k])\n\n\nclass Solution(object):\n    def minSubArrayLen(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if k == 0:\n            return 0\n        if k >= len(nums):"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Your code here\n\ndef min_sublist(list_of_list):\n    return min(map(min_sublist_helper, list_of_list))\n\ndef min_sublist_helper(list_of_list):\n    if len(list_of_list) == 1:\n        return list_of_list[0]\n    else:\n        return min(list_of_list[:min_sublist_helper_len(list_of_list)],\n                   list_of_list[min_sublist_helper_len(list_of_list):])\n\ndef min_sublist_helper_len(list_of_list):\n    return min(map(len, list_of_list))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_sublist(arr):\n    \"\"\"\n    Input:\n        arr: list of integers\n    Output:\n        minimum length sublist\n    \"\"\"\n    return min(arr, key=len)\n\n\ndef find_sublist_recursive(arr):\n    \"\"\"\n    Input:\n        arr: list of integers\n    Output:\n        minimum length sublist\n    \"\"\"\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr\n    else:\n        return min(arr, key=lambda x: len(find_sublist_recursive(arr[:x])))\n\n\ndef find_sublist_recursive_2(arr):\n    \"\"\"\n    Input:\n        arr: list of integers\n    Output:\n        minimum length sublist\n    \"\"\"\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr\n    else:\n        return min(arr, key=lambda x: len(find_sublist_recursive_2(arr[:x])))\n\n\ndef find_sublist_iterative(arr):\n    \"\"\"\n    Input:\n        arr: list of integers\n    Output:\n        minimum length sublist\n    \"\"\"\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr\n    else:\n        for x in arr:\n            if len(arr) == 1:\n                return arr\n            else:\n                if len(arr[:x]) < len(arr):\n                    return arr[:x]\n    return None\n\n\ndef find_sublist_iterative_2(arr):\n    \"\"\"\n    Input:\n        arr: list of integers\n    Output:\n        minimum length sublist\n    \"\"\"\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr\n    else:\n        for x in arr:\n            if len(arr) == 1:\n                return arr\n            else:\n                if len(arr[:x]) < len(arr):\n                    return arr[:x]\n    return None\n\n\ndef find_sublist_recursive_3(arr):\n    \"\"\"\n    Input:"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_min_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    \n    min_len = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n        elif arr[i] == arr[min_index]:\n            min_len = min(min_len, arr[i])\n    return min_index + 1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4]\n    print(find_min_sublist(arr))"
    }
  ]
}