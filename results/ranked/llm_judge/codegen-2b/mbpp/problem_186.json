{
  "timestamp": "2025-09-14T18:44:42.952466",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 186,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def exponentiate(x, y):\n    \"\"\"\n    Given two tuples (x, y),\n    return a tuple (z, m)\n    where z is the exponentiation of x and m is the exponentiation of y.\n    \"\"\"\n    if y == 0:\n        return (1, 0)\n    else:\n        return (x, y-1)\n\nx = (3, 2)\ny = (5, 4)\nprint(exponentiate(x, y))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def exponentiate(x, y):\n    \"\"\"\n    >>> exponentiate((1, 2), (2, 3))\n    (4, 9)\n    >>> exponentiate((2, 3), (4, 5))\n    (16, 125)\n    >>> exponentiate((2, 3), (2, 3))\n    (4, 9)\n    >>> exponentiate((1, 2), (1, 2))\n    (1, 4)\n    \"\"\"\n    return x, y\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def exponentiation(self, root, exponent):\n        \"\"\"\n        :type root: TreeNode\n        :type exponent: int\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return None\n        if exponent == 1:\n            return root\n        if root.left:\n            ans = self.exponentiation(root.left, exponent)\n            if ans:\n                return TreeNode(ans.val)\n        if root.right:\n            ans = self.exponentiation(root.right, exponent)\n            if ans:\n                return TreeNode(ans.val)\n        ans = root.val ** exponent\n        if ans:\n            return TreeNode(ans)\n        return None\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print Solution().exponentiation(root, 2)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\ndef exponentiation(a, b):\n    if a == 0:\n        return 1\n    else:\n        return a * exponentiation(a - 1, b)\n\nprint exponentiation(2, 3)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def exponentiation(self, a, b):\n        \"\"\"\n        :type a: Tuple[int, int]\n        :type b: Tuple[int, int]\n        :rtype: int\n        \"\"\"\n        if a[0] == 1 and a[1] == 0:\n            return 1\n        if b[0] == 1 and b[1] == 0:\n            return 1\n        if a[0] == 0 and a[1] == 0:\n            return 1\n        if b[0] == 0 and b[1] == 0:\n            return 1\n        if a[0] == 1 and b[0] == 0:\n            return 1\n        if a[0] == 0 and b[0] == 1:\n            return 1\n        if a[0] == 1 and b[1] == 1:\n            return 1\n        if a[1] == 1 and b[1] == 0:\n            return 1\n        if a[0] == 0 and b[1] == 1:\n            return 1\n        if a[1] == 1 and b[0] == 1:\n            return 1\n        if a[1] == 1 and b[0] == 0:\n            return 1\n        if a[0] == 1 and b[0] == 1:\n            return 1\n        if a[0] == 0 and b[0] == 0:\n            return 1\n        if a[0] == 0 and b[0] == 1:\n            return 1\n        if a[1] == 0 and b[1] == 1:\n            return 1\n        if a[0] == 1 and b[1] == 1:\n            return 1\n        if a[1] == 0 and b[0] == 1:\n            return 1\n        if a[1] == 0 and b[1] == 1:\n            return 1\n        if a[0] == 1 and b[0] == 1:\n            return 1\n        if a[0] == 0 and b[0] == 1:\n            return 1\n        if a[1] == 1 and b[0] == 1:\n            return 1\n        if a[0] == 1 and b[1]"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# This is a basic implementation of the exponentiation algorithm.\n#\n# Time complexity: O(log(n))\n# Space complexity: O(1)\n#\n# To get the \"real\" answer, you have to evaluate the exponentiation of each\n# element of the tuple.\n#\n# For example, if the input is (1, 2)\n#\n# The exponentiation of (1, 2) is (1, 4)\n#\n# The exponentiation of (2, 3) is (4, 9)\n#\n# The exponentiation of (4, 5) is (16, 125)\n#\n# The exponentiation of (5, 6) is (125, 243)\n#\n# The exponentiation of (6, 7) is (243, 343)\n#\n# The exponentiation of (7, 8) is (343, 528)\n#\n# The exponentiation of (8, 9) is (528, 729)\n#\n# The exponentiation of (9, 10) is (729, 945)\n#\n# The exponentiation of (10, 11) is (945, 1331)\n#\n# The exponentiation of (11, 12) is (1331, 1827)\n#\n# The exponentiation of (12, 13) is (1827, 2781)\n#\n# The exponentiation of (13, 14) is (2781, 4329)\n#\n# The exponentiation of (14, 15) is (4329, 6839)\n#\n# The exponentiation of (15, 16) is (6839, 10647)\n#\n# The exponentiation of (16, 17) is (10647, 17281)\n#\n# The exponentiation of (17, 18) is (17281, 28657)\n#\n# The exponentiation of (18, 19) is (28657, 46368)\n#\n# The exponentiation of (19, 20) is (46368, 93105)\n#\n# The exponentiation of (20, 21) is (93105, 159369)\n#\n# The exponentiation of (21, 22) is (159369, 31626)\n#\n# The exponentiation of (22, 23) is (31626, 61455)\n#\n#"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    return a ** b\n\n# Your exponentiation function should accept two arguments.\n# The first argument is a tuple of two integers.\n# The second argument is an integer.\n# The function should return a tuple of length 2.\n# The first element of the tuple is the result of the exponentiation of the first\n# integer and the second element is the result of the exponentiation of the\n# second integer."
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def power(self, a, b):\n        \"\"\"\n        :type a: tuple\n        :type b: tuple\n        :rtype: tuple\n        \"\"\"\n        res = []\n        a = list(a)\n        b = list(b)\n        while b:\n            res.append(a[0]*a[1]**b[0])\n            a.pop(0)\n            b.pop(0)\n        return tuple(res)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    >>> exponentiation((2, 4), (3, 2))\n    (6, 4)\n    >>> exponentiation((4, 2), (4, 2))\n    (16, 4)\n    >>> exponentiation((3, 2), (4, 2))\n    (9, 4)\n    >>> exponentiation((4, 2), (4, 2))\n    (16, 4)\n    >>> exponentiation((4, 2), (4, 3))\n    (9, 6)\n    \"\"\"\n    return a, b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    x, y: Tuple of integers.\n    return: Tuple of integers.\n    \"\"\"\n    return tuple(x ** y for y in range(1, 10))\n\n\ndef test_exponentiation():\n    assert exponentiation((2, 3), (2, 3)) == (4, 9)\n    assert exponentiation((2, 3), (1, 2)) == (4, 6)\n    assert exponentiation((3, 4), (2, 1)) == (9, 8)\n    assert exponentiation((3, 4), (1, 3)) == (9, 6)\n    assert exponentiation((5, 4), (3, 2)) == (25, 16)\n\n\nif __name__ == \"__main__\":\n    print(\"Test cases:\", test_exponentiation())"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    a, b are two tuples of integers\n\n    Return a tuple of two integers.\n    \"\"\"\n    x = 1\n    y = 1\n    while b:\n        x, y = x * a[0], y * a[1]\n        b = b[1]\n    return x, y\n\nif __name__ == \"__main__\":\n    a = (1, 2)\n    b = (2, 1)\n    print(exponentiation(a, b))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from operator import mul\n\n\ndef exp(a, b):\n    \"\"\"\n    Exponentiate the two given numbers.\n\n    :param a: A tuple.\n    :param b: A tuple.\n    :return: The exponentiation of the given two numbers.\n    \"\"\"\n\n    return (a[0] * b[1]) * (a[1] * b[0])\n\n\ndef main():\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n\n    a = (2, 3)\n    b = (5, 6)\n    print exp(a, b)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef exponentiation(x,y):\n    \"\"\"\n    Exponentiation of two tuples.\n    \"\"\"\n    numbers = defaultdict(int)\n    numbers['1'] = 1\n    numbers['2'] = 2\n    numbers['3'] = 3\n    numbers['4'] = 4\n    numbers['5'] = 5\n    numbers['6'] = 6\n    numbers['7'] = 7\n    numbers['8'] = 8\n    numbers['9'] = 9\n    numbers['10'] = 10\n    numbers['11'] = 11\n    numbers['12'] = 12\n    numbers['13'] = 13\n    numbers['14'] = 14\n    numbers['15'] = 15\n    numbers['16'] = 16\n    numbers['17'] = 17\n    numbers['18'] = 18\n    numbers['19'] = 19\n    numbers['20'] = 20\n    numbers['21'] = 21\n    numbers['22'] = 22\n    numbers['23'] = 23\n    numbers['24'] = 24\n    numbers['25'] = 25\n    numbers['26'] = 26\n    numbers['27'] = 27\n    numbers['28'] = 28\n    numbers['29'] = 29\n    numbers['30'] = 30\n    numbers['31'] = 31\n    numbers['32'] = 32\n    numbers['33'] = 33\n    numbers['34'] = 34\n    numbers['35'] = 35\n    numbers['36'] = 36\n    numbers['37'] = 37\n    numbers['38'] = 38\n    numbers['39'] = 39\n    numbers['40'] = 40\n    numbers['41'] = 41\n    numbers['42'] = 42\n    numbers['43'] = 43\n    numbers['44'] = 44\n    numbers['45'] = 45\n    numbers['46'] = 46\n    numbers['47'] = 47\n    numbers['48'] = 48\n    numbers['49'] = 49\n    numbers['50'] = 50\n    numbers['51'] = 51\n    numbers['52'] = 52"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import unittest\n\nclass TestCases(unittest.TestCase):\n    def test_exponentiation(self):\n        self.assertEqual((2, 3) ** (3, 4), (2, 9, 16, 25))\n        self.assertEqual((2, 3) ** (4, 5), (4, 9, 16, 25, 32))\n        self.assertEqual((2, 3) ** (5, 6), (4, 9, 16, 25, 32, 49))\n        self.assertEqual((2, 3) ** (6, 7), (4, 9, 16, 25, 32, 49, 64))\n        self.assertEqual((2, 3) ** (7, 8), (4, 9, 16, 25, 32, 49, 64, 85))\n        self.assertEqual((2, 3) ** (8, 9), (4, 9, 16, 25, 32, 49, 64, 85, 108))\n        self.assertEqual((2, 3) ** (9, 10), (4, 9, 16, 25, 32, 49, 64, 85, 108, 121))\n        self.assertEqual((2, 3) ** (10, 11), (4, 9, 16, 25, 32, 49, 64, 85, 108, 121, 144))\n        self.assertEqual((2, 3) ** (11, 12), (4, 9, 16, 25, 32, 49, 64, 85, 108, 121, 144, 169))\n        self.assertEqual((2, 3) ** (12, 13), (4, 9, 16, 25, 32, 49, 64, 85, 108, 121, 144, 169, 196))\n        self.assertEqual((2, 3) ** (13, 14), (4, 9, 16, 25, 32, 49, 64, 85, 108, 121, 144, 169, 196, 225))\n        self.assertEqual((2, 3) ** (14, 15), (4, 9, 16, 25, 32, 49, 64, 85, 108, 121, 144, 169, 196, 225, 289))\n        self.assertEqual((2, 3) ** (15, 16), (4, 9, 16, 25"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    Exponentiation of two numbers.\n    \n    Input: a = (exponent, base)\n    Output: exponentiation of a and b\n    \"\"\"\n    exponent = a[0]\n    base = a[1]\n    result = 1\n    while exponent > 0:\n        result *= base\n        exponent -= 1\n    return result\n\nif __name__ == \"__main__\":\n    a = (2, 3)\n    b = (3, 5)\n    exponentiation(a, b)\n    print(\"exponentiation of a and b is\", exponentiation(a, b))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def power(self, x, y):\n        if x == 0:\n            return 1\n        elif y == 0:\n            return 1\n        elif y < 0:\n            return self.power(x, -y)\n        else:\n            if y == 1:\n                return x\n            else:\n                return self.power(x, y-1) * self.power(x, y-1)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def exponentiation(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if len(a)!= len(b):\n            return []\n        result = []\n        for i in range(len(a)):\n            result.append(1)\n        for i in range(len(a)):\n            for j in range(len(a)):\n                result[i] = (result[i] * a[j]) % 10\n        return result"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    Exponentiation of two numbers.\n\n    Time complexity: O(log(max(x, y))).\n    Space complexity: O(1).\n    \"\"\"\n    if x == 0:\n        return 0\n    if y == 0:\n        return 1\n    result = 1\n    while x > 0:\n        x, r = divmod(x, y)\n        result *= r\n    return result\n\n\nif __name__ == \"__main__\":\n    print(exponentiation((1, 2), (4, 5)))\n    print(exponentiation((1, 2), (1, 3)))\n    print(exponentiation((2, 3), (2, 4)))\n    print(exponentiation((2, 3), (2, 2)))\n    print(exponentiation((2, 3), (2, 1)))\n    print(exponentiation((2, 3), (3, 2)))\n    print(exponentiation((2, 3), (3, 1)))\n    print(exponentiation((2, 3), (3, 3)))\n    print(exponentiation((2, 3), (3, 4)))\n    print(exponentiation((2, 3), (4, 5)))\n    print(exponentiation((2, 3), (5, 6)))\n    print(exponentiation((2, 3), (6, 7)))\n    print(exponentiation((2, 3), (7, 8)))\n    print(exponentiation((2, 3), (8, 9)))\n    print(exponentiation((2, 3), (9, 10)))\n    print(exponentiation((2, 3), (10, 11)))\n    print(exponentiation((2, 3), (11, 12)))\n    print(exponentiation((2, 3), (12, 13)))\n    print(exponentiation((2, 3), (13, 14)))\n    print(exponentiation((2, 3), (14, 15)))\n    print(exponentiation((2, 3), (15, 16)))\n    print(exponentiation((2, 3), (16, 17)))\n    print(exponentiation((2, 3), (17, 18)))\n    print"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    >>> exponentiation((3, 4), (2, 2))\n    (9, 8)\n    >>> exponentiation((4, 4), (2, 2))\n    (16, 16)\n    >>> exponentiation((3, 4), (4, 2))\n    (9, 8)\n    >>> exponentiation((4, 4), (4, 2))\n    (16, 16)\n    >>> exponentiation((3, 4), (2, 3))\n    (9, 8)\n    >>> exponentiation((4, 4), (2, 3))\n    (16, 16)\n    >>> exponentiation((3, 4), (2, 4))\n    (9, 16)\n    >>> exponentiation((4, 4), (2, 4))\n    (16, 16)\n    >>> exponentiation((3, 4), (3, 4))\n    (9, 9)\n    >>> exponentiation((4, 4), (3, 4))\n    (16, 16)\n    >>> exponentiation((3, 4), (4, 4))\n    (9, 9)\n    >>> exponentiation((4, 4), (4, 4))\n    (16, 16)\n    \"\"\"\n    if x > y:\n        return exponentiation(y, x)\n    elif y > x:\n        return exponentiation(x, y)\n    else:\n        return x * y\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def exponentiation(x, y):\n    result = 1\n    for i in range(len(x)):\n        result *= x[i]\n        result %= y[i]\n    return result\n\nif __name__ == \"__main__\":\n    print exponentiation((1, 2), (3, 4))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import math\n\ndef exponentiate(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple([a[0] ** b[0], a[1] ** b[1]])\n\n# Your Exponentiation object will be instantiated and called as such:\n# obj = Exponentiation(a, b)\n# param_1 = obj.exponentiate(a, b)\n\nclass Exponentiation(object):\n    def exponentiate(self, a, b):\n        \"\"\"\n        :type a: tuple\n        :type b: tuple\n        :rtype: tuple\n        \"\"\"\n        return tuple([a[0] ** b[0], a[1] ** b[1]])"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    a, b: 2-tuples of ints\n\n    Returns a tuple of ints.\n    \"\"\"\n    x = a[0]\n    y = b[0]\n    if x == 0 or y == 0:\n        return (0, 0)\n    if x == 1:\n        return (y, 1)\n    if y == 1:\n        return (x, 1)\n    return (x ** y, y ** x)\n\nif __name__ == \"__main__\":\n    print(exponentiation((1, 2), (3, 4)))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "#!/bin/python\n\n# https://www.hackerrank.com/challenges/exponentiation/problem\n\n\n#!/bin/python\n\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef exponentiation(x,y):\n    result = 1\n    while x > 0:\n        x,y = y,x%y\n    return y\n\ndef main():\n    x,y = map(int, input().split())\n    result = exponentiation(x,y)\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def exponentiate(x,y):\n    return (x[0]**y[0], x[1]**y[1])\n\ndef main():\n    x = (1,3)\n    y = (2,4)\n    print exponentiate(x,y)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    :type x: Tuple\n    :type y: Tuple\n    :rtype: Tuple\n    \"\"\"\n    return x * exponentiation(y, x)"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "def exponentiation(x,y):\n    if x == y:\n        return x\n    else:\n        return exponentiation(x,y-1)*y\n\ndef main():\n    print(exponentiation((1,2),3))\n    print(exponentiation((1,2),(1,3)))\n    print(exponentiation((1,2),(1,2)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    >>> exponentiation(2, (1, 2))\n    (2, 2)\n    >>> exponentiation(2, (1, 2, 3))\n    (2, 2, 3)\n    \"\"\"\n    return (a ** b)"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "def exponentiate(x, y):\n    \"\"\"\n    :type x: tuple\n    :type y: tuple\n    :rtype: tuple\n    \"\"\"\n    x = tuple(x)\n    y = tuple(y)\n    n = len(x)\n    m = len(y)\n    if n!= m:\n        raise ValueError(\"n!= m\")\n    if n == 0:\n        return (1,) * m\n    if n == 1:\n        return x * y\n    if n == 2:\n        return x ** 2 * y ** 2\n    if n == 3:\n        return x ** 2 * y ** 2 * x * y\n    for i in range(n - 1):\n        x = x * x\n    for i in range(n - m):\n        y = y * y\n    result = 1\n    for i in range(n - m, 0, -1):\n        result *= x\n    for i in range(m):\n        result *= y\n    return result\n\ndef test():\n    assert exponentiate((1, 2), (3, 4)) == (1, 2) * (3, 4) * (1, 2) * (3, 4) * (1, 2) * (3, 4)\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    Performs the exponentiation of the given two tuples.\n    Input:\n    a = (a_1, a_2,..., a_n)\n    b = (b_1, b_2,..., b_m)\n    Output:\n    c = (c_1, c_2,..., c_n)\n    \"\"\"\n    c = []\n    for i in range(len(a)):\n        c.append(a[i] ** b[i])\n    return tuple(c)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nclass Tuple:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __mul__(self, other):\n        return Tuple(self.x * other.x, self.y * other.y)\n\nclass Tuple2:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __mul__(self, other):\n        return Tuple2(self.x * other.x, self.y * other.y)\n\ndef exponentiation(tuple_a, tuple_b):\n    tuple_a = Tuple(tuple_a.x, tuple_a.y)\n    tuple_b = Tuple(tuple_b.x, tuple_b.y)\n    tuple_c = 1\n    while tuple_b!= (0,0):\n        tuple_c = Tuple2(tuple_c.x * tuple_b.x, tuple_c.y * tuple_b.y)\n        tuple_b = tuple_b.__mul__(tuple_a)\n    return tuple_c\n\ndef main():\n    tuple_a = Tuple(4, 5)\n    tuple_b = Tuple(2, 2)\n    tuple_c = exponentiation(tuple_a, tuple_b)\n    print(tuple_c)\n    print(tuple_c.x, tuple_c.y)\n    print(tuple_c.__mul__(tuple_b))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nExp = namedtuple('Exp', 'base exp')\n\n\ndef exponentiate(base, exp):\n    \"\"\"\n    :param base: tuple with the base\n    :param exp: tuple with the exponent\n    :return: tuple with the exponentiation result\n    \"\"\"\n    return Exp(base, exp)\n\n\ndef main():\n    base = (1, 2)\n    exp = (3, 4)\n    print(exponentiate(base, exp))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def exponentiation(self, base, exponent):\n        \"\"\"\n        :type base: int\n        :type exponent: Tuple[int, int]\n        :rtype: int\n        \"\"\"\n        base = int(base)\n        exponent = tuple(int(x) for x in exponent)\n        result = 1\n        for i in range(exponent[0]):\n            result *= base\n        for i in range(exponent[1]):\n            result = result * base\n        return result"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "class Tuple:\n    def __init__(self, first_number, second_number):\n        self.first_number = first_number\n        self.second_number = second_number\n\n    def __str__(self):\n        return str(self.first_number) + \" \" + str(self.second_number)\n\ndef exponentiation(first_tuple, second_tuple):\n    if first_tuple == second_tuple:\n        return Tuple(1, 1)\n    else:\n        result = exponentiation(second_tuple, first_tuple[1:])\n        result.first_number = first_tuple[0]**second_tuple[0]\n        return result\n\n#Test cases\nprint \"Testing 1\"\nprint \"Exponentiation of (2,2) is:\", exponentiation((2,2), (2,2))\nprint \"Exponentiation of (3,3) is:\", exponentiation((3,3), (3,3))\nprint \"Exponentiation of (3,2) is:\", exponentiation((3,2), (3,2))\nprint \"Exponentiation of (3,2) is:\", exponentiation((3,2), (3,2))\nprint \"Exponentiation of (3,2) is:\", exponentiation((3,2), (3,2))\nprint \"Exponentiation of (3,2) is:\", exponentiation((3,2), (3,2))\nprint \"Exponentiation of (3,2) is:\", exponentiation((3,2), (3,2))\n\n#Test cases\nprint \"Testing 2\"\nprint \"Exponentiation of (2,2) is:\", exponentiation((2,2), (2,3))\nprint \"Exponentiation of (2,2) is:\", exponentiation((2,2), (3,2))\nprint \"Exponentiation of (2,2) is:\", exponentiation((2,2), (3,3))\nprint \"Exponentiation of (2,2) is:\", exponentiation((2,2), (3,2))\nprint \"Exponentiation of (2,2) is:\", exponentiation((2,2), (3,2))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def exponentiate(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    if not isinstance(a, tuple) or not isinstance(b, tuple):\n        raise TypeError(\"a and b must be tuples\")\n    if len(a)!= len(b):\n        raise ValueError(\"a and b must have the same length\")\n\n    result = [0] * len(a)\n\n    for i in range(len(a)):\n        if a[i]!= 0:\n            result[i] = a[i]\n        while b[i]!= 0:\n            result[i] = result[i] * b[i]\n            b[i] = b[i] - 1\n    return tuple(result)\n\nif __name__ == \"__main__\":\n    print(exponentiate((1, 2), (3, 4)))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "import math\n\ndef exponentiation(base, exponent):\n    \"\"\"\n    Inputs:\n        base - a tuple representing the base of the exponentiation\n        exponent - a tuple representing the exponent\n    Returns:\n        A tuple representing the exponentiation of base to the exponent\n    \"\"\"\n    return (base[0] * pow(base[1], exponent[0], base[1]))\n\nprint(exponentiation((2, 3), (3, 1)))\nprint(exponentiation((2, 3), (2, 1)))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def exp(x, y):\n    '''\n    >>> exp(2, 3)\n    6\n    >>> exp(2, (3, 4))\n    (6, 9)\n    '''\n    return (x ** y)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    x and y are two tuples of ints.\n\n    Return a tuple of ints representing the result of exponentiation.\n    \"\"\"\n    # Your code here\n    return (x[0] * y[0], x[1] * y[1])"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from itertools import repeat\n\ndef exponentiation(a, b):\n    return tuple(map(lambda x: x ** b, a))\n\n\nif __name__ == \"__main__\":\n    print(exponentiation(('a', 'b'), 2))\n    print(exponentiation(('a', 'b', 'c'), 4))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n    result = ()\n    if a[0] == 0:\n        result = (b[0],)\n    else:\n        result = (a[0],)\n        for i in range(len(a) - 1):\n            result = (a[i] * result[0],) + result\n        result = (a[-1] * result[0],) + result\n        result = (b[0],) + result\n    return result\n\ndef main():\n    print(exponentiation((2, 3), (4, 5)))\n    print(exponentiation((3, 4), (5, 6)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    Performs the exponentiation of the given two tuples.\n\n    >>> exponentiation((1, 2), (3, 4))\n    (3, 8)\n    >>> exponentiation((1, 2), (3, 2))\n    (3, 4)\n    >>> exponentiation((1, 2), (1, 2))\n    (1, 1)\n    \"\"\"\n    \n    # Check if a and b are integers\n    if not isinstance(a, tuple) or not isinstance(b, tuple):\n        return None\n\n    # Get the length of the tuples\n    len_a = len(a)\n    len_b = len(b)\n\n    # Get the length of the exponentiated values\n    len_exp = len_a + len_b - 2\n\n    # Create the exp values\n    exp_a = [0] * len_exp\n    exp_b = [0] * len_exp\n    exp_a[0] = 1\n\n    # Perform the exponentiation\n    for i in range(1, len_exp):\n        exp_a[i] = exp_a[i - 1] * a[i - 1]\n        exp_b[i] = exp_b[i - 1] * b[i - 1]\n\n    # Create the result\n    result = [0] * len_exp\n    result[0] = 1\n    for i in range(1, len_exp):\n        result[i] = result[i - 1] * exp_a[i - 1] * exp_b[i - 1]\n\n    # Return the result\n    return tuple(result)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def exp(self, base, exp):\n        \"\"\"\n        :type base: tuple\n        :type exp: tuple\n        :rtype: tuple\n        \"\"\"\n        base = tuple(base)\n        exp = tuple(exp)\n        res = base\n        for i in range(len(exp)):\n            res = tuple([x**(i+1) for x in res])\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    base = (1, 2, 3)\n    exp = (2, 3, 4)\n    print(s.exp(base, exp))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef exponentiation(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    #print a\n    #print b\n    #print a[0] * b[0]\n    #print a[1] * b[1]\n    #print a[2] * b[2]\n    #print a[3] * b[3]\n    return (a[0] * b[0], a[1] * b[1], a[2] * b[2], a[3] * b[3])\n\ndef main():\n    a = (2, 3, 5, 7)\n    b = (2, 3, 5, 7)\n    c = exponentiation(a, b)\n    print c\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def exponentiate(num, exp):\n    if exp == 1:\n        return num\n    else:\n        return (num[0] * exponentiate(num[1:], exp - 1))\n\n\n\ndef main():\n    num = (4, 2)\n    exp = 2\n    result = exponentiate(num, exp)\n    print result\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def exponentiate(first, second):\n\t\"\"\"\n\tFirst is a tuple, second is a tuple\n\t\n\tReturns a tuple\n\t\"\"\"\n\tresult = first\n\tfor i in range(len(second)):\n\t\tif i == 0:\n\t\t\tresult = (result, second[i])\n\t\telse:\n\t\t\tresult = (result, (second[i] * result))\n\treturn result\n\ndef main():\n\tfirst = (1,2)\n\tsecond = (3,4)\n\tprint exponentiate(first, second)\n\nif __name__ == \"__main__\":\n\tmain()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\n# Your Exponentiation function will take in two tuples, each consisting of\n# two values. The first value is the base, the second value is the exponent.\n# The function should return a tuple of the form (base ** exponent), where\n# base and exponent are both integers.\n\nclass Tuple(namedtuple(\"Tuple\", \"base exponent\")):\n    \"\"\"\n    Tuple class.\n    \"\"\"\n\n    def __str__(self):\n        return \"{} ** {}\".format(self.base, self.exponent)\n\ndef exponentiation(base, exponent):\n    \"\"\"\n    Exponentiation function.\n\n    :param base: base\n    :param exponent: exponent\n    :return: (base ** exponent)\n    \"\"\"\n    return Tuple(base, exponent)\n\nprint(exponentiation(2, 3))\n# Output: (8 ** 3)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# your code here\ndef exponentiation(x, y):\n    result = 1\n    while y:\n        result *= x\n        y -= 1\n    return result\n\ndef main():\n    x = (2, 3)\n    y = (3, 5)\n    print exponentiation(x, y)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "# Write your code below\ndef exponentiation(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError('length of a and b should be the same')\n    a = list(a)\n    b = list(b)\n    result = [0] * len(a)\n    for i in range(len(a)):\n        result[i] = a[i]\n    for i in range(len(a)):\n        result[i] = result[i] * b[i]\n    return tuple(result)\n\n# Your code should print the following:\n# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n# (10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import math\n\ndef exponentiate(x, y):\n    \"\"\"\n    Exponentiate two tuples.\n\n    Input:\n    x: tuple\n        The first tuple.\n    y: tuple\n        The second tuple.\n\n    Output:\n    z: tuple\n        The exponentiation of x and y.\n    \"\"\"\n    z = [math.pow(x[i], y[i]) for i in range(len(x))]\n    return z\n\nif __name__ == \"__main__\":\n    print(exponentiate((1, 2), (2, 3)))\n    print(exponentiate((1, 2), (3, 4)))\n    print(exponentiate((1, 2), (4, 5)))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def exponentiation(base, exponent):\n    \"\"\"\n    :type base: tuple\n    :type exponent: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(map(lambda x,y: x*y, base, exponent))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: Tuple[int, int]\n        :type b: int\n        :rtype: Tuple[int, int]\n        \"\"\"\n        if b == 0:\n            return (1, 0)\n        c, d = a\n        return self.pow(c, b//2) + self.pow(d, b%2)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from math import pow\n\ndef exponentiation(x,y):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n    return x ** y\n\ndef main():\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n    x = (3,2)\n    y = (2,3)\n    print exponentiation(x,y)\n    \nmain()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from utils import *\n\ndef exponentiation(x, y):\n    \"\"\"\n    Write a function that takes two tuples (x, y) and returns the exponentiation of x.\n    \"\"\"\n    return (x ** y)\n\nif __name__ == \"__main__\":\n    # tests\n    assert exponentiation((1, 2), (2, 3)) == (1, 4)\n    assert exponentiation((2, 3), (3, 4)) == (2, 9)\n    assert exponentiation((5, 2), (2, 3)) == (5, 8)\n    assert exponentiation((1, 2), (1, 2)) == (1, 1)\n    assert exponentiation((1, 2), (2, 3)) == (1, 4)\n    assert exponentiation((1, 2), (3, 4)) == (1, 9)\n    assert exponentiation((1, 2), (5, 6)) == (1, 25)\n    assert exponentiation((1, 2), (6, 7)) == (1, 49)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    x and y are two tuples of integers.\n\n    Return the tuple (result, i, j) where result is the result of the\n    exponentiation of x and y and i is the index of x and j is the index\n    of y.\n    \"\"\"\n    result = 1\n    i = 0\n    j = 0\n\n    while i < len(x) and j < len(y):\n        if x[i] == y[j]:\n            result = result * x[i]\n            i += 1\n            j += 1\n        else:\n            if x[i] > y[j]:\n                i += 1\n            else:\n                j += 1\n\n    return result, i, j\n\n\ndef test_exponentiation():\n    assert exponentiation((2, 3), (4, 5)) == (16, 0, 1)\n\n\nif __name__ == \"__main__\":\n    test_exponentiation()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\n\ndef exponentiation(a, b):\n    \"\"\"\n    Exponentiation of two integers.\n\n    Input:\n    a: Tuple of integers.\n    b: Tuple of integers.\n\n    Output:\n    Tuple of integers.\n    \"\"\"\n    return (a[0] * b[0]) + (a[1] * b[1])\n\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    a = (2, 3)\n    b = (1, 2)\n    c = exponentiation(a, b)\n\n    print(a, b, c)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import math\n\n\ndef exponentiation(a, b):\n    \"\"\"\n    >>> exponentiation((1, 2), (3, 4))\n    (9, 16)\n    >>> exponentiation((2, 3), (1, 2))\n    (4, 9)\n    >>> exponentiation((1, 2), (1, 2))\n    (1, 1)\n    >>> exponentiation((1, 2), (3, 4))\n    Traceback (most recent call last):\n   ...\n    ValueError: Exponentiation of a and b must be in the range (0, 3).\n    >>> exponentiation((1, 2), (3, 4))\n    Traceback (most recent call last):\n   ...\n    ValueError: Exponentiation of a and b must be in the range (0, 3).\n    >>> exponentiation((2, 3), (1, 2))\n    Traceback (most recent call last):\n   ...\n    ValueError: Exponentiation of a and b must be in the range (0, 3).\n    >>> exponentiation((1, 2), (1, 2))\n    Traceback (most recent call last):\n   ...\n    ValueError: Exponentiation of a and b must be in the range (0, 3).\n    >>> exponentiation((2, 3), (3, 4))\n    Traceback (most recent call last):\n   ...\n    ValueError: Exponentiation of a and b must be in the range (0, 3).\n    >>> exponentiation((1, 2), (3, 4))\n    Traceback (most recent call last):\n   ...\n    ValueError: Exponentiation of a and b must be in the range (0, 3).\n    \"\"\"\n    if a[0] == 0:\n        return b[0], b[1]\n    elif a[1] == 0:\n        return a[0], a[1]\n    elif a[0] < 0 or a[1] < 0:\n        raise ValueError('Exponentiation of a and b must be in the range (0, 3).')\n    elif a[0] == 1:\n        return b[0], b[1]\n    elif a[1] == 1:\n        return"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "class Tuple(object):\n    \"\"\"\n    A tuple of digits.\n    \"\"\"\n\n    def __init__(self, digits):\n        \"\"\"\n        Initialize the tuple with the given digits.\n        \"\"\"\n        self.digits = digits\n\n    def __str__(self):\n        \"\"\"\n        Return the string representation of the tuple.\n        \"\"\"\n        return str(self.digits)\n\n    def __repr__(self):\n        \"\"\"\n        Return the repr of the tuple.\n        \"\"\"\n        return repr(self.digits)\n\n\ndef exponentiation(a, b):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n    if isinstance(a, Tuple) and isinstance(b, Tuple):\n        return Tuple(a.digits ** b.digits)\n    else:\n        return Tuple(1)\n\n\nif __name__ == \"__main__\":\n    assert exponentiation((3, 4), (5, 6)) == Tuple(((3, 4), (5, 6)))\n    assert exponentiation((3, 4), 5) == Tuple((3, 4) ** 5)\n    assert exponentiation(Tuple((3, 4)), 5) == Tuple(((3, 4), 5) ** 5)\n    assert exponentiation(Tuple((3, 4)), (5, 6)) == Tuple(((3, 4), (5, 6)))\n    assert exponentiation(Tuple((3, 4)), 3) == Tuple(((3, 4), 3) ** 3)\n    assert exponentiation(Tuple((3, 4)), 0) == Tuple(((3, 4), 0) ** 0)\n    assert exponentiation(Tuple((3, 4)), 1) == Tuple(((3, 4), 1) ** 1)\n    assert exponentiation(Tuple((3, 4)), 2) == Tuple(((3, 4), 2) ** 2)\n    assert exponentiation(Tuple((3, 4)), 3) == Tuple(((3, 4), 3) ** 3)\n    assert exponentiation(Tuple((3, 4)), 4) == Tuple(((3, 4), 4) ** 4)\n    assert exponentiation("
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    Input:\n        x = (a, b)\n        y = (c, d)\n    Output:\n        ans = (a * c, a * d, b * c, b * d)\n    \"\"\"\n    a, b = x\n    c, d = y\n    ans = a, a * c, a * d, b * c, b * d\n    return ans\n\nif __name__ == '__main__':\n    print exponentiation((3, 4), (2, 3))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def exponentiate(a, b):\n    \"\"\"\n    a and b are two tuples of the form (x, n) where x is an integer and n is\n    an integer.\n\n    Return the tuple (x^a, x^b)\n    \"\"\"\n    x = a[0]\n    n = a[1]\n    for i in range(n-1):\n        x = pow(x, n)\n    return (x, b[0])\n\nif __name__ == '__main__':\n    print exponentiate((1,2), (3,2))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef exponentiate(x, y):\n    \"\"\"\n    x, y: tuples of two numbers\n    Return a tuple of two numbers.\n    \"\"\"\n    # Note: the exponentiation is the same as the power of the square root\n    return (int(sqrt(x[0] ** y[0])), int(sqrt(x[1] ** y[1])))\n\nif __name__ == \"__main__\":\n    # Test cases\n    assert exponentiate((1, 1), (1, 1)) == (1, 1)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)\n    assert exponentiate((2, 3), (2, 3)) == (4, 9)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "class Tuple(object):\n    \"\"\"\n    Represents a tuple.\n    \"\"\"\n    def __init__(self, values):\n        self.values = values\n\n    def __str__(self):\n        return \"(\" + \",\".join(map(str, self.values)) + \")\"\n\n\ndef exponentiation(base, exponent):\n    \"\"\"\n    Returns the result of the exponentiation of the given base and exponent.\n    \"\"\"\n    if exponent == 0:\n        return Tuple(base)\n    elif exponent == 1:\n        return Tuple(base.values[0] * base.values[1])\n    else:\n        return exponentiation(Tuple(base.values[0] * base.values[1]), exponent - 1) * \\\n               exponentiation(base, exponent - 2)\n\n\ndef exponentiation_recursive(base, exponent):\n    \"\"\"\n    Returns the result of the exponentiation of the given base and exponent.\n    \"\"\"\n    if exponent == 0:\n        return Tuple(base)\n    elif exponent == 1:\n        return Tuple(base.values[0] * base.values[1])\n    else:\n        return exponentiation_recursive(Tuple(base.values[0] * base.values[1]), exponent - 1) * \\\n               exponentiation_recursive(base, exponent - 2)\n\n\ndef exponentiation_iterative(base, exponent):\n    \"\"\"\n    Returns the result of the exponentiation of the given base and exponent.\n    \"\"\"\n    if exponent == 0:\n        return Tuple(base)\n    elif exponent == 1:\n        return Tuple(base.values[0] * base.values[1])\n    else:\n        return exponentiation_iterative(Tuple(base.values[0] * base.values[1]), exponent - 1) * \\\n               exponentiation_iterative(base, exponent - 2)\n\n\nif __name__ == \"__main__\":\n    base = Tuple(2, 3)\n    exponent = 2\n    print(base)\n    print(exponentiation(base, exponent))\n    print(exponentiation_recursive(base, exponent))\n    print(exponentiation_iter"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def exponentiation(base, exponent):\n    \"\"\"\n    Write a function to calculate the exponentiation of the given two\n    tuples.\n    \"\"\"\n\n    # Perform the exponentiation of the base\n    result = 1\n    for i in range(0, exponent[0]):\n        result *= base[0]\n\n    # Perform the exponentiation of the exponent\n    for i in range(1, exponent[1]):\n        result *= base[1]\n\n    return result\n\nif __name__ == '__main__':\n    print exponentiation((2, 3), (2, 5))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def exponentiation(x,y):\n    if x[0] == y[0]:\n        return x[1]**y[1]\n    else:\n        return exponentiation(x,(y[0],y[1]))**y[1]\n\nprint(exponentiation((2,3),(4,5)))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def exponentiate(base, exponent):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n    if exponent == 0:\n        return 1\n    elif exponent == 1:\n        return base\n    elif exponent == -1:\n        return 1 / base\n    else:\n        return base * exponentiate(base, exponent - 1)\n\n\n\n# Test Cases\nprint(exponentiate(2, 3))\nprint(exponentiate(2, -3))\nprint(exponentiate(2, 0))\nprint(exponentiate(2, -3))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\nimport math\n\ndef exponentiation(a, b):\n    exp_a = math.exp(a)\n    exp_b = math.exp(b)\n    return exp_a * exp_b\n\n#print(exponentiation(3, 4))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import operator\n\ndef exponentiation(x, y):\n    \"\"\"\n    For a pair of integers x and y, return the result of x^y.\n    \"\"\"\n    return reduce(operator.mul, x, 1)\n\nif __name__ == \"__main__\":\n    print(exponentiation(2, 3))\n    print(exponentiation(1, 1))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def exponentiate(num1, num2):\n    \"\"\"\n    Exponentiate a number to the power of a number.\n    Input: num1 = (num1, num2)\n    Output: (result, exponent)\n    \"\"\"\n    # print num1\n    # print num2\n    result = (num1[0], num1[1])\n    exponent = num2[0]\n    # print exponent\n    for i in range(1, exponent+1):\n        result = (result[0], result[1] * num1[1])\n    return result, exponent\n\nif __name__ == '__main__':\n    num1 = (3, 4)\n    num2 = (5, 6)\n    result, exponent = exponentiate(num1, num2)\n    print result\n    print exponent\n    print num1[0] * num2[0] * num1[1] * num2[1]"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/exponentiation/problem\n\nimport math\n\ndef exponentiation(a, b):\n    # Returns the exponentiation of a and b.\n    # Example:\n    # a = (1, 2, 3)\n    # b = (1, 4, 9)\n    # exp(a, b) = (1, 2, 6)\n    # exp(1, 1) = 1\n    # exp(1, 2) = 2\n    # exp(1, 3) = 6\n    # exp(2, 1) = 2\n    # exp(2, 2) = 4\n    # exp(2, 3) = 9\n\n    if a == b:\n        return a\n\n    if a[0] == b[0]:\n        return exponentiation(a[1:], b[1:]) * a[0]\n    else:\n        return exponentiation(a[1:], b[0:]) * b[1]\n\nif __name__ == '__main__':\n    a = input().split(' ')\n    b = input().split(' ')\n\n    print(exponentiation(a, b))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def exponentiate(x,y):\n    \"\"\"\n    x and y are two tuples of integers.\n\n    Returns a tuple of integers representing the exponentiation of the two\n    inputs.\n    \"\"\"\n    return (x[0]**y[0], x[1]**y[1])\n\n\"\"\"\nTest Cases\n\"\"\"\n\nassert exponentiate((1,2),(1,2)) == (1,4)\nassert exponentiate((2,3),(1,2)) == (2,9)\nassert exponentiate((2,3),(1,3)) == (2,27)\nassert exponentiate((2,3),(2,3)) == (2,27)\nassert exponentiate((2,3),(1,1)) == (2,1)\nassert exponentiate((2,3),(2,2)) == (2,9)\nassert exponentiate((2,3),(2,5)) == (2,27)\nassert exponentiate((2,3),(1,4)) == (2,16)\nassert exponentiate((2,3),(2,8)) == (2,27)\nassert exponentiate((2,3),(2,10)) == (2,27)\nassert exponentiate((2,3),(2,11)) == (2,27)\nassert exponentiate((2,3),(2,12)) == (2,27)\nassert exponentiate((2,3),(2,13)) == (2,27)\nassert exponentiate((2,3),(2,14)) == (2,27)\nassert exponentiate((2,3),(2,15)) == (2,27)\nassert exponentiate((2,3),(2,16)) == (2,27)\nassert exponentiate((2,3),(2,17)) == (2,27)\nassert exponentiate((2,3),(2,18)) == (2,27)\nassert exponentiate((2,3),(2,19)) == (2,27)\nassert exponentiate((2,3),(2,20)) == (2,27)\nassert exponentiate((2,3),(2,21)) == (2,27)\nassert exponentiate((2,3),(2,22)) =="
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n#import the libraries\nimport math\n\n#define the function\ndef exp(x, y):\n    \"\"\"\n    Perform the exponentiation of the given two tuples.\n    \"\"\"\n    return math.pow(x, y)\n\n#test the function\nif __name__ == \"__main__\":\n    #define the test data\n    x, y = (1, 2)\n    #run the function\n    print(exp(x, y))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def exponentiate(base, exponent):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n    if exponent == 0:\n        return base\n    else:\n        return exponentiate(base, exponent-1) * base\n\n#Test Cases\nbase = (1,2)\nexponent = (2,3)\nresult = exponentiate(base, exponent)\nprint result"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    x, y - Two tuples.\n    Return the exponentiation of x and y.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    result = 1\n    for i in range(len(x)):\n        result *= x[i]\n        result %= y[i]\n    return result\n\n\"\"\"\nTest cases.\n\"\"\"\n\nx = (1, 2, 3)\ny = (2, 3, 4)\n\nassert exponentiation(x, y) == 3\nassert exponentiation(x, y) == 3\nassert exponentiation(x, y) == 3\nassert exponentiation(x, y) == 3"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef exponentiation(x, y):\n\t\"\"\"\n\tWrite a function that takes two tuples as inputs and returns the exponentiation of the first element.\n\t\"\"\"\n\tprint \"exponentiation of %s and %s is %s\" % (x, y, x ** y)\n\nexponentiation(1, 2)\n\n#print \"exponentiation of %s and %s is %s\" % (1, 2, 1 ** 2)\n\n#exponentiation(2, 3)\n\n#print \"exponentiation of %s and %s is %s\" % (2, 3, 2 ** 3)"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/exponentiation-of-a-number\n\ndef exponentiation(x, y):\n    \"\"\"\n    :type x: int\n    :type y: tuple\n    :rtype: int\n    \"\"\"\n    if len(y) == 1:\n        return pow(x, y[0])\n    else:\n        return pow(x, y[0]) * exponentiation(x, y[1:])\n\nif __name__ == '__main__':\n    print(exponentiation(2, (2, 3)))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "from operator import mul\n\ndef exponentiation(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple([mul(x, y) for x, y in zip(a, b)])\n\n\nif __name__ == '__main__':\n    assert exponentiation((2, 3), (3, 5)) == (6, 25)"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef exponentiate(base, exp):\n    \"\"\"\n    :type base: tuple\n    :type exp: tuple\n    :rtype: tuple\n    \"\"\"\n    if not exp:\n        return base\n\n    return exponentiate(base, exp[1:]) * base ** exp[0]\n\n\nclass TestExponentiation(unittest.TestCase):\n    def test_exponentiate_with_empty_exponent(self):\n        self.assertEqual(exponentiate((1, 2), ()), (1, 2))\n\n    def test_exponentiate_with_exponent_zero(self):\n        self.assertEqual(exponentiate((1, 2), (0, 0)), (1, 2))\n\n    def test_exponentiate_with_exponent_one(self):\n        self.assertEqual(exponentiate((1, 2), (1, 0)), (1, 4))\n\n    def test_exponentiate_with_exponent_two(self):\n        self.assertEqual(exponentiate((1, 2), (2, 0)), (1, 8))\n\n    def test_exponentiate_with_exponent_three(self):\n        self.assertEqual(exponentiate((1, 2), (3, 0)), (1, 27))\n\n    def test_exponentiate_with_exponent_four(self):\n        self.assertEqual(exponentiate((1, 2), (4, 0)), (1, 64))\n\n    def test_exponentiate_with_exponent_five(self):\n        self.assertEqual(exponentiate((1, 2), (5, 0)), (1, 125))\n\n    def test_exponentiate_with_exponent_six(self):\n        self.assertEqual(exponentiate((1, 2), (6, 0)), (1, 216))\n\n    def test_exponentiate_with_exponent_seven(self):\n        self.assertEqual(exponentiate((1, 2), (7, 0)), (1, 468))\n\n    def test_exponentiate_with_exponent_eight(self):\n        self.assertEqual(exponentiate((1"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def exponentiate(x, y):\n    \"\"\"\n    x and y are two tuples.\n    Return the result of the exponentiation.\n    \"\"\"\n\n    if x == y:\n        return x\n    else:\n        if x[0] == 1:\n            return (y[0], y[1])\n        elif y[0] == 1:\n            return (x[0], x[1])\n        else:\n            x_int = int(x[0])\n            y_int = int(y[0])\n            res = (x_int ** y_int)\n            return (res, res)\n\nx = (1, 3)\ny = (2, 4)\n\nprint(exponentiate(x, y))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\nclass Solution:\n    def exponentiate(self, a: tuple[int, int], b: tuple[int, int]) -> tuple[int, int]:\n        \"\"\"\n        :param a: (x, y)\n        :param b: (x, y)\n        :return: (x, y)\n        \"\"\"\n        x, y = a\n        x, y = int(x), int(y)\n        if x == 0 and y == 0:\n            return (1, 1)\n        if x == 0:\n            return (1, b[1])\n        if y == 0:\n            return (a[0], 1)\n        if b[0] == 0:\n            return (1, 1)\n        if b[1] == 0:\n            return (1, 1)\n        return (x ** b[0], y ** b[1])"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    Input:\n        a = (x, y)\n        b = (z, w)\n    Output:\n        (x, z)\n        (y, w)\n    Explanation:\n        (x, y) and (z, w) are both positive integers.\n        The exponentiation of (x, y) is (x, y).\n        The exponentiation of (z, w) is (z, w).\n    \"\"\""
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def exponentiation(first, second):\n    return (first[0] ** second[0], first[1] ** second[1])\n\nif __name__ == \"__main__\":\n    assert (exponentiation(1, 1) == (1, 1))\n    assert (exponentiation(1, 2) == (1, 2))\n    assert (exponentiation(2, 1) == (2, 1))\n    assert (exponentiation(2, 2) == (4, 2))\n    assert (exponentiation(3, 1) == (3, 1))\n    assert (exponentiation(3, 2) == (9, 2))\n    assert (exponentiation(3, 3) == (27, 3))\n    assert (exponentiation(4, 1) == (4, 1))\n    assert (exponentiation(4, 2) == (16, 2))\n    assert (exponentiation(4, 3) == (64, 3))\n    assert (exponentiation(5, 1) == (5, 1))\n    assert (exponentiation(5, 2) == (25, 2))\n    assert (exponentiation(5, 3) == (125, 3))\n    assert (exponentiation(6, 1) == (6, 1))\n    assert (exponentiation(6, 2) == (36, 2))\n    assert (exponentiation(6, 3) == (216, 3))\n    assert (exponentiation(7, 1) == (7, 1))\n    assert (exponentiation(7, 2) == (49, 2))\n    assert (exponentiation(7, 3) == (343, 3))\n    assert (exponentiation(8, 1) == (8, 1))\n    assert (exponentiation(8, 2) == (64, 2))\n    assert (exponentiation(8, 3) == (512, 3))\n    assert (exponentiation(9, 1) == (9, 1))\n    assert (exponentiation(9, 2) == (81, 2))\n    assert (exponentiation(9, 3) == (927, 3))\n    assert (exponentiation(10, 1) == (10, 1))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from collections import namedtuple\n\n\ndef exponentiation(a, b):\n    \"\"\"\n    Performs the exponentiation of the given two tuples.\n    :param a: A tuple of two integers\n    :param b: A tuple of two integers\n    :return: The exponentiation of a and b\n    \"\"\"\n    return (a[0] ** b[0], a[1] ** b[1])\n\n\ndef main():\n    a = namedtuple('a', 'x y')\n    b = namedtuple('b', 'x y')\n\n    print(exponentiation(a(1, 2), b(3, 4)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "import math\n\n# Returns the exponentiation of the given tuple.\n# Input: (x, y)\n# Output: x^y\ndef exponentiation(x, y):\n    exponent = 1\n    for i in range(1, y):\n        exponent *= x\n    return exponent\n\nif __name__ == \"__main__\":\n    # Test Cases\n    # x = (1, 2)\n    # y = (3, 4)\n    # result = exponentiation(x, y)\n    # expected = (1, 9)\n    # assert result == expected\n\n    # x = (2, 3)\n    # y = (4, 5)\n    # result = exponentiation(x, y)\n    # expected = (16, 25)\n    # assert result == expected\n\n    # x = (3, 4)\n    # y = (5, 6)\n    # result = exponentiation(x, y)\n    # expected = (81, 64)\n    # assert result == expected\n\n    # x = (3, 4)\n    # y = (5, 6)\n    # result = exponentiation(x, y)\n    # expected = (81, 64)\n    # assert result == expected\n\n    # x = (5, 6)\n    # y = (7, 8)\n    # result = exponentiation(x, y)\n    # expected = (243, 64)\n    # assert result == expected"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    Args:\n        a: The first tuple to exponentiate.\n        b: The second tuple to exponentiate.\n    Returns:\n        The exponentiation of the two tuples.\n    \"\"\"\n    return (a[0] ** b[0], a[1] ** b[1])\n\nif __name__ == \"__main__\":\n    assert exponentiation((2, 3), (2, 3)) == (8, 9)\n    assert exponentiation((2, 3), (3, 2)) == (9, 8)\n    assert exponentiation((2, 3), (3, 1)) == (9, 6)\n    assert exponentiation((3, 2), (3, 2)) == (27, 9)\n    assert exponentiation((3, 2), (2, 3)) == (9, 9)\n    assert exponentiation((3, 2), (3, 1)) == (9, 6)\n    assert exponentiation((3, 2), (2, 1)) == (9, 3)\n    assert exponentiation((2, 2), (2, 2)) == (4, 4)\n    assert exponentiation((2, 2), (2, 1)) == (4, 2)\n    assert exponentiation((2, 2), (1, 2)) == (2, 4)"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def exponentiation(x, y):\n    if x == 0 or y == 0:\n        return 0\n    return x * exponentiation(y % x, x)\n\n# Your exponentiation function should accept two arguments.\n# Input type: (int, int)\n# Output type: int\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '({}, {})'.format(self.x, self.y)\n\nclass Solution(object):\n    def exponentiation(self, base, exponent):\n        \"\"\"\n        :type base: Tuple\n        :type exponent: Tuple\n        :rtype: Tuple\n        \"\"\"\n        a, b = base\n        c, d = exponent\n        if c == 0:\n            return Tuple(a, b)\n        return self.exponentiation(Tuple(a*b, c), d-1)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n\n    base = Tuple(1, 2)\n    exponent = Tuple(2, 3)\n    print solution.exponentiation(base, exponent)\n\n    base = Tuple(1, 1)\n    exponent = Tuple(1, 1)\n    print solution.exponentiation(base, exponent)\n\n    base = Tuple(1, 1)\n    exponent = Tuple(1, 2)\n    print solution.exponentiation(base, exponent)\n\n    base = Tuple(1, 1)\n    exponent = Tuple(2, 1)\n    print solution.exponentiation(base, exponent)\n\n    base = Tuple(1, 1)\n    exponent = Tuple(2, 2)\n    print solution.exponentiation(base, exponent)\n\n    base = Tuple(1, 1)\n    exponent = Tuple(2, 3)\n    print solution.exponentiation(base, exponent)\n\n    base = Tuple(1, 1)\n    exponent = Tuple(2, 4)\n    print solution.exponentiation(base, exponent)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# -*- coding: utf-8 -*-\n\nimport math\n\n\ndef exponentiation(a, b):\n    \"\"\"\n    Exponentiation of a and b.\n    \"\"\"\n    return math.pow(a, b)\n\n\nif __name__ == '__main__':\n    print(exponentiation((1, 2), (3, 4)))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(a[0] ** b[0] for a in a)\n\n\nclass Solution(object):\n    def exponentiation(self, a, b):\n        \"\"\"\n        :type a: tuple\n        :type b: tuple\n        :rtype: tuple\n        \"\"\"\n        return tuple(x ** y for x, y in zip(a, b))\n\n\nif __name__ == \"__main__\":\n    assert exponentiation((1, 2), (3, 4)) == (1 ** 3, 2 ** 4)\n    assert exponentiation((2, 3), (4, 5)) == (2 ** 4, 3 ** 5)\n    assert exponentiation((2, 3), (1, 2)) == (2 ** 1, 3 ** 2)"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from collections import namedtuple\n\nExponent = namedtuple(\"Exponent\", [\"exponent\", \"exponent_sign\"])\n\n\nclass Exponentiation:\n    def __init__(self, exponent_one, exponent_two):\n        self.exponent_one = exponent_one\n        self.exponent_two = exponent_two\n\n    def exponentiation(self):\n        \"\"\"\n        Returns the exponentiation of the given two tuples.\n\n        :rtype: Exponent\n        \"\"\"\n        return Exponent(self.exponent_one ** self.exponent_two, \"\")\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    exponentiation = Exponentiation(3, 2)\n    assert exponentiation.exponentiation().exponent == 9\n    assert exponentiation.exponentiation().exponent_sign == \"+\"\n\n    exponentiation = Exponentiation(3, -2)\n    assert exponentiation.exponentiation().exponent == 1\n    assert exponentiation.exponentiation().exponent_sign == \"-\"\n\n    exponentiation = Exponentiation(3, 0)\n    assert exponentiation.exponentiation().exponent == 1\n    assert exponentiation.exponentiation().exponent_sign == \"\"\n\n    exponentiation = Exponentiation(0, 2)\n    assert exponentiation.exponentiation().exponent == 0\n    assert exponentiation.exponentiation().exponent_sign == \"\"\n\n    exponentiation = Exponentiation(-3, 2)\n    assert exponentiation.exponentiation().exponent == 9\n    assert exponentiation.exponentiation().exponent_sign == \"+\"\n\n    exponentiation = Exponentiation(-3, -2)\n    assert exponentiation.exponentiation().exponent == 1\n    assert exponentiation.exponentiation().exponent_sign == \"-\"\n\n    exponentiation = Exponentiation(-3, 0)\n    assert exponentiation.exponentiation().exponent == 1\n    assert exponentiation.exponentiation().exponent_sign == \"\"\n\n    exponentiation = Exponentiation(0, -2)\n    assert exponentiation.exponentiation().exponent == 0"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\nclass Solution:\n    def exponentiation(self, base: int, exponent: int) -> Tuple[int, int]:\n        base = base % 10\n        exponent = exponent % 10\n        if exponent == 0:\n            return 1, 1\n\n        result = 1\n        while exponent > 0:\n            if exponent % 2 == 1:\n                result *= base\n            base *= base\n            exponent //= 2\n\n        return result, base"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def exponentiation(self, base, exponent):\n        \"\"\"\n        :type base: int\n        :type exponent: (int, int)\n        :rtype: int\n        \"\"\"\n        # base = base * base\n        return 1\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.exponentiation(base, exponent)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n\n    The exponentiation of two tuples x and y is defined as:\n\n    exp(x) = (x, x ** y)\n\n    \"\"\"\n    return (x, x ** y)\n\n\ndef exponentiation_tuple(x, y):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n\n    The exponentiation of two tuples x and y is defined as:\n\n    exp(x) = (x, x ** y)\n\n    \"\"\"\n    return (x, x ** y)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __iter__(self):\n        return iter([self.x])\n\n\ndef exponentiation(x, y):\n    \"\"\"\n    :type x: Tuple\n    :type y: Tuple\n    :rtype: Tuple\n    \"\"\"\n    return Tuple(pow(x.x, y.x, y.x))\n\n\nif __name__ == '__main__':\n    assert exponentiation(Tuple(2), Tuple(2)) == Tuple(4)\n    assert exponentiation(Tuple(2), Tuple(3)) == Tuple(8)\n    assert exponentiation(Tuple(3), Tuple(2)) == Tuple(9)\n    assert exponentiation(Tuple(3), Tuple(3)) == Tuple(27)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/exponentiation-of-a-number/discuss/156827/Python-solution-with-explicit-calls-and-logic-solution-with-more-optimization-in-the-solution\n\nclass Solution(object):\n    def exponentiation(self, base, exp):\n        \"\"\"\n        :type base: int\n        :type exp: int\n        :rtype: int\n        \"\"\"\n        if base == 1:\n            return exp\n        if exp == 0:\n            return 1\n        if exp % 2 == 0:\n            return self.exponentiation(base * base, exp / 2) * base\n        else:\n            return self.exponentiation(base * base, exp / 2) * base * base\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.exponentiation(3, 0))\n    print(s.exponentiation(3, 1))\n    print(s.exponentiation(3, 2))\n    print(s.exponentiation(3, 3))\n    print(s.exponentiation(3, 4))\n    print(s.exponentiation(3, 5))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def exponentiation(x, y):\n    \"\"\"\n    Example:\n    >>> exponentiation(1, 2)\n    (1, 4)\n    >>> exponentiation(2, 3)\n    (2, 9)\n    >>> exponentiation(3, 4)\n    (3, 16)\n    >>> exponentiation(4, 5)\n    (4, 25)\n    >>> exponentiation(5, 6)\n    (5, 36)\n    >>> exponentiation(6, 7)\n    (6, 49)\n    >>> exponentiation(7, 8)\n    (7, 64)\n    >>> exponentiation(8, 9)\n    (8, 81)\n    >>> exponentiation(9, 10)\n    (9, 1024)\n    \"\"\"\n    if x < 0 or y < 0:\n        raise ValueError(\"Negative number not allowed\")\n\n    if x == 0 or y == 0:\n        return (0, 1)\n\n    result = 1\n    while x > 0 and y > 0:\n        x, y = y, x % y\n        result = result * y\n    return (result, y)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    Example:\n        >>> exponentiation(3, 2)\n        (3, 8)\n    \"\"\"\n    return a, b**a\n\ndef exponentiation_recursive(a, b):\n    if a == 0:\n        return (1, b)\n    else:\n        return exponentiation_recursive(a - 1, b)\n\ndef exponentiation_iterative(a, b):\n    if a == 0:\n        return (1, b)\n    else:\n        return (a, b ** a)\n\ndef exponentiation_recursive_solution(a, b):\n    if a == 0:\n        return (1, b)\n    else:\n        return (a - 1, b ** a)\n\nif __name__ == '__main__':\n    assert exponentiation(3, 2) == (3, 8)\n    assert exponentiation_recursive(3, 2) == (3, 8)\n    assert exponentiation_iterative(3, 2) == (3, 8)\n    assert exponentiation_recursive_solution(3, 2) == (3, 8)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    Performs the exponentiation of a tuple a and b.\n    Input: a = (x, y), b = (n, m)\n    Output: (x^n, y^m)\n    \"\"\"\n    # (x, y) = a\n    # (n, m) = b\n    x = a[0] ** b[0]\n    y = a[1] ** b[1]\n    return (x, y)\n\nif __name__ == \"__main__\":\n    a = (1, 2)\n    b = (3, 4)\n    print(exponentiation(a, b))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef exponentiation(base, exponent):\n    \"\"\"\n    :type base: tuple\n    :type exponent: tuple\n    :rtype: tuple\n    \"\"\"\n    result = 1\n    for i in range(len(base)):\n        result *= base[i]\n        if exponent[i]!= 0:\n            result *= exponent[i]\n    return result\n\n\nclass TestExponentiation(unittest.TestCase):\n    def test_exponentiation(self):\n        self.assertEqual(exponentiation((3, 2), (1, 0)), 3 ** 2)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def exponentiation(a, b):\n    \"\"\"\n    a, b: 2-tuples\n    return: 2-tuples\n    \"\"\"\n    if a[0] == 0:\n        return b\n    if b[0] == 0:\n        return a\n    a, b = tuple(a), tuple(b)\n    if a[0] == 1:\n        return exponentiation(b, a)\n    if b[0] == 1:\n        return exponentiation(a, b)\n    if a[0] == 2:\n        return exponentiation(b, a)\n    if b[0] == 2:\n        return exponentiation(a, b)\n    return exponentiation(a, b)\n\nprint(exponentiation((1, 1), (2, 2)))\nprint(exponentiation((1, 1), (2, 1)))\nprint(exponentiation((1, 1), (2, 0)))\nprint(exponentiation((1, 1), (0, 1)))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/exponentiation-tuple\n# https://www.hackerrank.com/challenges/exponentiation-tuple/submissions/code/32891525\n\n# Iterate through all the tuples and compute the exponentiation.\n\n# Your solution should be in the form of a function.\ndef exponentiation(a, b):\n    return a ** b\n\n\ndef exponentiation_tuple(a, b):\n    if len(a)!= len(b):\n        return 0\n    return 1\n    \n# Test Cases\n\n# print(exponentiation(2, 3))\n# print(exponentiation_tuple(2, 3))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def exp(a, b):\n    if len(a)!= len(b):\n        raise Exception('The length of the two tuples should be equal.')\n    ret = [0] * len(a)\n    for i in range(len(a)):\n        ret[i] = a[i] ** b[i]\n    return ret\n\nif __name__ == '__main__':\n    a = (1, 2, 3)\n    b = (2, 3, 4)\n    print(exp(a, b))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def exponentiation(self, base: int, exponent: List[int]) -> int:\n        result = 1\n        for e in exponent:\n            result *= base\n            result = result ** e\n        return result\n\n\nif __name__ == '__main__':\n    assert Solution().exponentiation(5, [2, 3]) == 25\n    assert Solution().exponentiation(5, [2]) == 25\n    assert Solution().exponentiation(5, [3]) == 125\n    assert Solution().exponentiation(5, [4]) == 625\n    assert Solution().exponentiation(5, [5]) == 3125\n    assert Solution().exponentiation(5, [6]) == 12525"
    }
  ]
}