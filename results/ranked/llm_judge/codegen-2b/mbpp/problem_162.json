{
  "timestamp": "2025-09-14T18:33:58.973782",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 162,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/remove-non-ascii/problem\n#\n# python 3\n\ndef remove_non_ascii(s):\n    return \"\".join(chr(c) for c in s if 32 <= ord(chr(c)) <= 126)\n\n# https://www.hackerrank.com/challenges/remove-non-ascii/submissions/code/5396777\n# python 2\n\ndef remove_non_ascii_2(s):\n    return \"\".join(chr(c) for c in s if c >= 32 and c <= 126)\n\nif __name__ == \"__main__\":\n    s = input().strip()\n    print(remove_non_ascii(s))\n    print(remove_non_ascii_2(s))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return filter(lambda x: x.isalnum(), s)\n\n#Test Cases\nprint remove_non_alphanumeric(\"a1b2c3\")\nprint remove_non_alphanumeric(\"a!b$c\")\nprint remove_non_alphanumeric(\"a#b*c\")\nprint remove_non_alphanumeric(\"a(b)c[d]e\")\nprint remove_non_alphanumeric(\"a)bc(d(e\"))\nprint remove_non_alphanumeric(\"a)bc(d(e\"))\nprint remove_non_alphanumeric(\"a)bc(d(e\"))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def remove_non_alpha(string):\n    return ''.join(ch for ch in string if ch in string.upper() or ch in string.lower())\n\nif __name__ == \"__main__\":\n    print remove_non_alpha(\"Hello World\")"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/remove-non-alphanumeric-characters/problem\n# https://www.reddit.com/r/dailyprogrammer/comments/3j4u8y/20160812_challenge_206_easy_remove_non_alphanumeric/\n\ndef remove_non_alphanumeric(s):\n    return ''.join(i for i in s if i.isalnum())\n\n\ndef remove_non_alphanumeric_inplace(s):\n    for i in s:\n        if not i.isalnum():\n            s = s.replace(i, '')\n    return s\n\n\nif __name__ == '__main__':\n    s = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+'\n    print(remove_non_alphanumeric(s))\n    print(remove_non_alphanumeric_inplace(s))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(c for c in s if c.isalnum())\n\nif __name__ == '__main__':\n    s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    print remove_non_alphanumeric(s)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def remove_non_alphanumeric(string):\n    return ''.join(c for c in string if c.isalnum())\n\n# Test Cases\n\nstring = 'A man, a plan, a canal: Panama'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint remove_non_alphanumeric(string)\n\nstring = 'A quick brown fox jumps over the lazy dog'\nprint"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def remove_non_alphanumeric(text):\n    return re.sub('[^a-zA-Z0-9]', '', text)\n\nprint remove_non_alphanumeric('1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30-31-32-33-34-35-36-37-38-39-40-41-42-43-44-45-46-47-48-49-50-51-52-53-54-55-56-57-58-59-60-61-62-63-64-65-66-67-68-69-70-71-72-73-74-75-76-77-78-79-80-81-82-83-84-85-86-87-88-89-90-91-92-93-94-95-96-97-98-99-100-101-102-103-104-105-106-107-108-109-110-111-112-113-114-115-116-117-118-119-120-121-122-123-124-125-126-127-128-129-130-131-132-133-134-135-136-137-138-139-140-141-142-143-144-145-146-147-148-149-150-151-152-153-154-155-156-157-158-159-160-161-162-163-164-165-166-167-168-169-170-171-172-173-174-175-176-177-178-179-180-181-182-183-184-185-186-187-188-189-190-191-192-193-194-195-196-197-198-199-200-201-202-203-204-205-206-207-208-209-210-211-212-213-214-215-216-217-218-219-220-221-222-223-224-225-226-227-228-229-230-231-232-233"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/remove-non-alphanumeric-characters/\nclass Solution(object):\n    def removeNonAlphanumericCharacters(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(c for c in str if c.isalnum())\n\nif __name__ == \"__main__\":\n    print Solution().removeNonAlphanumericCharacters(\"abcde\")"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param str, a string\n    # @return a string\n    def removeNonAscii(self, str):\n        return \"\".join([i for i in str if ord(i) < 128])\n\n\nif __name__ == '__main__':\n    print Solution().removeNonAscii(\"\u0130H\u00c7\u00c7\u00dc\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\u00c7\ufffd"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeNonLetters(self, s):\n        return ''.join(chr(i) for i in range(0, 256) if chr(i).isalpha())\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeNonLetters(\"Hello World! Hello World!\")\n    print s.removeNonLetters(\"HelloWorld! HelloWorld! HelloWorld!\")"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def removeNonAlphanumeric(self, input):\n        \"\"\"\n        :type input: str\n        :rtype: str\n        \"\"\"\n        output = \"\"\n        for i in range(len(input)):\n            if input[i].isalnum():\n                output += input[i]\n        return output\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.removeNonAlphanumeric(\"123!@#$%^&*()_+-=[]{};':\\\",./<>? \")\n    print solution.removeNonAlphanumeric(\"123!@#$%^&*()_+-=[]{};':\\\",./<>? \")"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/remove-all-characters-but-alphanumeric/discuss/254598/Python-with-Python-and-C++\n\nclass Solution(object):\n    def removeChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: str\n        \"\"\"\n        return ''.join(ch for ch in s if ch.isalnum())\n\n\nif __name__ == '__main__':\n    print(Solution().removeChar('This is a test','s'))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import re\n\ndef remove_non_alphanum(string):\n    return re.sub('[^0-9a-zA-Z]', '', string)\n\nprint remove_non_alphanum(\"I like Python\")\nprint remove_non_alphanum(\"I love Python\")\nprint remove_non_alphanum(\"I love Python3\")\nprint remove_non_alphanum(\"abcdefghijklmnopqrstuvwxyz\")\nprint remove_non_alphanum(\"abcdefghijklmnopqrstuvwxyz1234567890\")"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def remove_non_alphanumeric(string):\n    non_alphanumeric = [c for c in string if c.isalpha() == False]\n    return ''.join(non_alphanumeric)\n\ndef main():\n    print remove_non_alphanumeric(\"abcd1234567890\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def removeNonAlphanumeric(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda c: c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', str))\n\nif __name__ == '__main__':\n    print Solution().removeNonAlphanumeric('abcde')\n    print Solution().removeNonAlphanumeric('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')\n    print Solution().removeNonAlphanumeric('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' * 100)\n    print Solution().removeNonAlphanumeric('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' * 1000)"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([i if ord(i) < 128 else'' for i in s])"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/remove-characters/\n\nclass Solution(object):\n    def remove_characters(self, s, chars):\n        \"\"\"\n        :type s: str\n        :type chars: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c in chars)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.remove_characters('a!b#c%d', '#'))\n    print(s.remove_characters('a#bc', '#'))\n    print(s.remove_characters('abcd', '#'))\n    print(s.remove_characters('abcd', 'bc'))\n    print(s.remove_characters('abcd', '#'))\n    print(s.remove_characters('abcd', 'ab'))\n    print(s.remove_characters('abcd', 'c'))\n    print(s.remove_characters('abcd', 'abcd'))\n    print(s.remove_characters('abcd', 'abd'))\n    print(s.remove_characters('abcd', 'd'))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "#Write your code here\ndef remove_non_alphanumeric(string):\n    return ''.join([i for i in string if i.isalnum()])\n\nif __name__ == '__main__':\n    string = \"asdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasd"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(c for c in s if c.isalnum())\n\nif __name__ == '__main__':\n    s = 'abcd1234'\n    print(remove_non_alphanumeric(s))\n    print(s)\n    \n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(remove_non_alphanumeric(s))\n    print(s)\n    \n    s = 'a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26'\n    print(remove_non_alphanumeric(s))\n    print(s)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution:\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in str if c.isalnum()])\n\n\nif __name__ == '__main__':\n    assert Solution().removeNonAscii(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n    assert Solution().removeNonAscii(\"abcd\") == \"abcd\"\n    assert Solution().removeNonAscii(\"abc\") == \"abc\"\n    assert Solution().removeNonAscii(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    assert Solution().removeNonAscii(\"abcdefghijklmnopqrstuvwxyz0123456789\") == \"abcdefghijklmnopqrstuvwxyz0123456789\""
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "from string import ascii_letters, digits\n\ndef remove_non_alphanumeric(string):\n    return ''.join(c for c in string if c in ascii_letters + digits)\n\nif __name__ == '__main__':\n    print remove_non_alphanumeric('hello world!')\n    print remove_non_alphanumeric('hello')\n    print remove_non_alphanumeric('Hello world!')"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(c for c in str if c.isalnum())"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "from string import ascii_letters as letters\n\ndef remove_non_alphanumeric(s):\n    return ''.join(c for c in s if c in letters)\n\nprint(remove_non_alphanumeric('abc123'))"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def remove_non_alphanum(s):\n    return ''.join(ch for ch in s if ch.isalnum())\n\n\nif __name__ == '__main__':\n    s = 'Hello, my name is John'\n    print remove_non_alphanum(s)"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: ord(x)<128, str))"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(ch for ch in s if ch.isalnum())\n\nprint(remove_non_alphanumeric(\"a1b2c3\"))"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def remove_non_alphanumeric(string):\n    return ''.join([c for c in string if c.isalnum()])\n\n\nif __name__ == '__main__':\n    print remove_non_alphanumeric(\"abc123\")"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "class Solution(object):\n    def removeNonAlphanumeric(self, input):\n        \"\"\"\n        :type input: str\n        :rtype: str\n        \"\"\"\n        return ''.join(ch for ch in input if ch.isalnum())"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "from string import ascii_letters, digits\n\ndef remove_non_alpha_non_num(string):\n    return ''.join(c for c in string if c in ascii_letters + digits)\n\nif __name__ == '__main__':\n    print remove_non_alpha_non_num('abc123')"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeNonAscii(self, str):\n        return ''.join(c for c in str if ord(c) >= 128)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeNonAscii('\\xbd\\xbd\\xbd\\xbd\\xbd\\xbd\\xbd\\xbd')"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return \"\".join([c for c in str if c.isalnum()])\n\nif __name__ == '__main__':\n    assert Solution().removeNonAscii(\"ABC\") == \"ABC\"\n    assert Solution().removeNonAscii(\"abc\") == \"abc\"\n    assert Solution().removeNonAscii(\"ABCabc\") == \"ABCabc\"\n    assert Solution().removeNonAscii(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n    assert Solution().removeNonAscii(\"ABC123\") == \"ABC\"\n    assert Solution().removeNonAscii(\"ABC1\") == \"ABC\"\n    assert Solution().removeNonAscii(\"ABC1\") == \"ABC\"\n    assert Solution().removeNonAscii(\"ABC\") == \"ABC\"\n    assert Solution().removeNonAscii(\"ABC\") == \"ABC\""
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "# http://www.programcreek.com/2012/12/leetcode-remove-all-non-alphanumeric-characters-java/\n\nclass Solution(object):\n    def removeNonAlphanumeric(self, str):\n        return str.translate(str.maketrans(\"\", \"\"), string.punctuation)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeNonAlphanumeric(\"\")\n    print s.removeNonAlphanumeric(\"abc\")\n    print s.removeNonAlphanumeric(\"a1b2c3\")\n    print s.removeNonAlphanumeric(\"a1b23\")\n    print s.removeNonAlphanumeric(\"\")\n    print s.removeNonAlphanumeric(\"abc\")\n    print s.removeNonAlphanumeric(\"a1b2c3\")\n    print s.removeNonAlphanumeric(\"a1b23\")\n    print s.removeNonAlphanumeric(\"a\")\n    print s.removeNonAlphanumeric(\"a1b2c3\")\n    print s.removeNonAlphanumeric(\"a1b23\")\n    print s.removeNonAlphanumeric(\"a\")\n    print s.removeNonAlphanumeric(\"a1b2c3\")\n    print s.removeNonAlphanumeric(\"a1b23\")"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeNonAscii(self, s):\n        return ''.join(c for c in s if c.isalnum())\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeNonAscii(\"123aABC\")"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in str if c in string.ascii_letters + string.digits])"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef only_alphanumeric(s):\n    alphanumeric = [c for c in s if c.isalpha()]\n    return ''.join(alphanumeric)\n\n\nif __name__ == '__main__':\n    print only_alphanumeric('abcdeabcde')\n    print only_alphanumeric('abcdeabcde123')\n    print only_alphanumeric('123abcdeabcde')\n    print only_alphanumeric('abcd123abcdeabcde')"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAlphanumeric(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(chr(i) for i in range(ord(s[0]), ord(s[-1])+1) if chr(i).isalnum())\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeNonAlphanumeric(\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z\")"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonLetters(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.isalpha(), str))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(c for c in s if c.isalnum())\n\nif __name__ == \"__main__\":\n    print Solution().removeNonLetters(\"a1b2c3\")"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeNonAlphanumeric(self, str):\n        return ''.join(c for c in str if c.isalnum())\n\nif __name__ == '__main__':\n    print Solution().removeNonAlphanumeric('abc')\n    print Solution().removeNonAlphanumeric('aaabbbccccddd')\n    print Solution().removeNonAlphanumeric('x')"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import re\n\ndef remove_non_alphanum(string):\n    return re.sub(r\"[^a-zA-Z0-9]\", \"\", string)\n\nprint(remove_non_alphanum(\"a aaa bbb ccc ddd eee\"))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import string\n\ndef remove_non_alphanum(s):\n    return ''.join(c for c in s if c.isalnum())\n\n#print(remove_non_alphanum(\"Hello\"))\nprint(remove_non_alphanum(\"1Hello2\"))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return \"\".join([i for i in str if ord(i)<128])"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeNonLetters(self, s):\n        return ''.join(filter(lambda x: x.isalnum(), s))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.removeNonLetters('a'))\n    print(s.removeNonLetters('b'))\n    print(s.removeNonLetters('abcd'))\n    print(s.removeNonLetters('abcde'))\n    print(s.removeNonLetters('abcde1'))\n    print(s.removeNonLetters('abcde2'))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def remove_non_alphanum(string):\n    return ''.join(filter(lambda x: x.isalnum(), string))\n\nif __name__ == \"__main__\":\n    s = \"Hello World\"\n    print(remove_non_alphanum(s))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isalnum())"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/remove-non-alphanumeric-characters/discuss/86725/Python-solution\ndef removeNonAlphaNum(s):\n    return ''.join([c for c in s if c.isalnum()])\n\n\n# Your RemoveNonAlphaNum function should return the same output as\n# the following.\n\n# def removeNonAlphaNum(s):\n#     return s.translate(None, str.punctuation)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import re\n\ndef remove_non_alphanum(string):\n    return re.sub(\"[^a-zA-Z0-9]\", \"\", string)\n\nif __name__ == \"__main__\":\n    string = \"Hello world! What a nice day!\"\n    print(remove_non_alphanum(string))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in str if c in string.ascii_letters + string.digits)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import re\n\ndef remove_non_alphanumeric(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)\n\ndef main():\n    s = 'Hello! How are you?'\n    print(remove_non_alphanumeric(s))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAlphanumeric(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.isalnum(), s))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def is_number(s):\n    return all(c.isdigit() for c in s)\n\ndef remove_non_alphanumeric(s):\n    return \"\".join(c for c in s if c.isalnum())\n\n# Testing\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric(\"\") == \"\"\n    assert remove_non_alphanumeric(\"abc\") == \"abc\"\n    assert remove_non_alphanumeric(\"abc123\") == \"abc123\"\n    assert remove_non_alphanumeric(\"1a2b\") == \"12b\"\n    assert remove_non_alphanumeric(\"!@#$%^&*()_+-=\") == \"!@#$%^&*()_+-=\"\n\nif __name__ == \"__main__\":\n    test_remove_non_alphanumeric()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    new_string = ''\n    for char in string:\n        if char.isalnum():\n            new_string += char\n    return new_string\n\nif __name__ == '__main__':\n    print(remove_non_alphanumeric('abc123'))\n    print(remove_non_alphanumeric('abc'))\n    print(remove_non_alphanumeric('abc\\t'))\n    print(remove_non_alphanumeric('\\t'))\n    print(remove_non_alphanumeric('abc 123'))\n    print(remove_non_alphanumeric('123 abc'))\n    print(remove_non_alphanumeric('123\\t abc'))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(chr(i) for i in range(0, 256) if chr(i).isalnum())"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeNonAscii(self, s):\n        return ''.join(c for c in s if c.isalnum())\n\nif __name__ == '__main__':\n    assert Solution().removeNonAscii('abc') == 'abc'\n    assert Solution().removeNonAscii('cba') == 'cba'\n    assert Solution().removeNonAscii('abc123') == 'abc123'"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport re\n\ndef remove_non_alphanumeric(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)\n\ndef main():\n    s = \"Hello World!\"\n    print remove_non_alphanumeric(s)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def remove_non_alphanum(s):\n    non_alphanum = []\n    for i in s:\n        if i.isalnum():\n            non_alphanum.append(i)\n    return ''.join(non_alphanum)\n\n\nif __name__ == '__main__':\n    s = 'abcd1234!@#$%^&*()'\n    print(s)\n    print(remove_non_alphanum(s))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in str if c.isalnum())"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return \"\".join(filter(lambda c: c.isalnum(), s))\n\nprint(remove_non_alphanumeric(\"a-zA-Z\"))\n#>>> a-zA-Z\n\nprint(remove_non_alphanumeric(\"a-zA-Z 123\"))\n#>>> a-zA-Z 123\n\nprint(remove_non_alphanumeric(\"123a-zA-Z\"))\n#>>> 123a-zA-Z\n\nprint(remove_non_alphanumeric(\"a 123-zA-Z\"))\n#>>> a 123-zA-Z\n\nprint(remove_non_alphanumeric(\"a 123-zA-Z\"))\n#>>> a 123-zA-Z\n\nprint(remove_non_alphanumeric(\"abc 123-zA-Z\"))\n#>>> abc 123-zA-Z\n\nprint(remove_non_alphanumeric(\"a 123-zA-Z - abc\"))\n#>>> a 123-zA-Z - abc\n\nprint(remove_non_alphanumeric(\"a 123-zA-Z - abc 123\"))\n#>>> a 123-zA-Z - abc 123\n\nprint(remove_non_alphanumeric(\"123a 123-zA-Z abc 123\"))\n#>>> 123a 123-zA-Z abc 123\n\nprint(remove_non_alphanumeric(\"123-zA-Z 123 123-zA-Z 123 123-zA-Z 123\"))\n#>>> 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123\n\nprint(remove_non_alphanumeric(\"123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123-zA-Z 123 123"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(i for i in s if i.isalnum())\n\nprint remove_non_alphanumeric(\"Hello World\")"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join([ch for ch in s if ch.isalnum()])\n\nprint(remove_non_alphanumeric('abc123abc'))\nprint(remove_non_alphanumeric('abc123abc'))\nprint(remove_non_alphanumeric('abc123abc'))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', str))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        # Note: we can use a list to do this\n        # return \"\".join(c for c in str if c.isalnum())\n        return \"\".join(c for c in str if c.isalnum() or c =='')"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef remove_non_alphanumeric(s):\n    s = s.strip()\n    s = s.translate(None, '\"{}.')\n    s = s.lower()\n    return s\n\nif __name__ == '__main__':\n    test_cases = [\n        ('Hello World!', 'h'),\n        ('How are you?', 'h'),\n        ('I am fine. How are you?', 'i'),\n        ('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'),\n        ('Hello World! How are you?')\n    ]\n\n    for test_case in test_cases:\n        print(remove_non_alphanumeric(test_case[0]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(ch for ch in s if ch.isalnum())\n\nprint remove_non_alphanumeric(\"Hello\")\nprint remove_non_alphanumeric(\"Hello world\")\nprint remove_non_alphanumeric(\"Hello world!@#%\")"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in str if c.isalpha())\n\nif __name__ == '__main__':\n    print Solution().removeNonAscii(\"Hello world!\")\n    print Solution().removeNonAscii(\"a\\tb\\nc\\n\\nd\")\n    print Solution().removeNonAscii(\"\")"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def remove_non_alpha(str):\n    return re.sub(r'[^\\w]', '', str)\n\nif __name__ == '__main__':\n    print remove_non_alpha('abcdefg')\n    print remove_non_alpha('abcdefg12345')\n    print remove_non_alpha('12345abcdefg')"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(text):\n\treturn text.translate(None,'')\n\ntext = input('Enter a string: ')\nprint('The string without non-alphanumeric characters is:'+ remove_non_alphanumeric(text))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return \"\".join([c for c in str if c.isalnum()])\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeNonAscii(\"a\\x00b\\x00c\"))\n    print(s.removeNonAscii(\"\\x00\\x00\\x00\"))\n    print(s.removeNonAscii(\"\\x00\\x00\\x00\\x00\\x00\"))\n    print(s.removeNonAscii(\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(c for c in s if c.isalnum())\n\nif __name__ == \"__main__\":\n    print Solution().removeNonLetters(\"Hello, world!\")"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeNonAscii(self, s):\n        s = s.upper()\n        return \"\".join(c for c in s if c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeNonAscii(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isalnum())"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(c for c in s if c.isalnum())\n\nprint(remove_non_alphanumeric('foo bar'))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    return ''.join(c for c in string if c.isalnum())\n\nprint(remove_non_alphanumeric(\"abc1234\"))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAlphanumeric(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.isalnum(), str))\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.removeNonAlphanumeric(\"!@#@!#@!@#\")\n    print sol.removeNonAlphanumeric(\"a\")\n    print sol.removeNonAlphanumeric(\"aab\")\n    print sol.removeNonAlphanumeric(\"aaabbbccc\")\n    print sol.removeNonAlphanumeric(\"abc\")\n    print sol.removeNonAlphanumeric(\"abcd\")\n    print sol.removeNonAlphanumeric(\"abcde\")\n    print sol.removeNonAlphanumeric(\"abcdefg\")\n    print sol.removeNonAlphanumeric(\"abcdefghijklmnopqrstuvwxyz\")"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import re\n\ndef remove_non_alpha(s):\n    return re.sub(r\"[^a-zA-Z]\", \"\", s)\n\nprint remove_non_alpha(\"abc123\")"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(c for c in s if c.isalnum())\n\n#print(remove_non_alphanumeric('abcd'))\n#print(remove_non_alphanumeric('abcd123'))\n#print(remove_non_alphanumeric('abcd123asd'))\n\ndef main():\n    print(remove_non_alphanumeric('abcd'))\n    print(remove_non_alphanumeric('abcd123'))\n    print(remove_non_alphanumeric('abcd123asd'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        for ch in str:\n            if ord(ch) < 128:\n                result += ch\n        return result\n\nif __name__ == \"__main__\":\n    assert Solution().removeNonAscii(\"abc\") == \"abc\"\n    assert Solution().removeNonAscii(\"abc1\") == \"abc\"\n    assert Solution().removeNonAscii(\"abc1\") == \"abc\"\n    assert Solution().removeNonAscii(\"1abc\") == \"1abc\"\n    assert Solution().removeNonAscii(\"1abc1\") == \"1abc\"\n    assert Solution().removeNonAscii(\"1abc1\") == \"1abc\"\n    assert Solution().removeNonAscii(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n    assert Solution().removeNonAscii(\"abcdefghijklmnopqrstuvwxyz1234567890\") == \"abcdefghijklmnopqrstuvwxyz\"\n    assert Solution().removeNonAscii(\"abcdefghijklmnopqrstuvwxyz!@#$%^&*()_+|\") == \"abcdefghijklmnopqrstuvwxyz\""
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return re.sub(r\"[^A-Za-z0-9]\", \"\", s)\n\n\nif __name__ == '__main__':\n    s = \"Hello, my name is john. I am 17 years old. I love to eat burger.\"\n    print(remove_non_alphanumeric(s))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def remove_non_alphanum(s):\n    return ''.join(c for c in s if c.isalnum())\n\nif __name__ == \"__main__\":\n    s = \"HelloWorld\"\n    print(remove_non_alphanum(s))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "class Solution:\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in str if c.isalnum()])"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def remove_non_alphanum(string):\n    return ''.join([i for i in string if i.isalnum()])\n\n\ndef test_remove_non_alphanum():\n    assert remove_non_alphanum('abcd') == 'abc'\n    assert remove_non_alphanum('abcdx') == 'abc'\n    assert remove_non_alphanum('abcd-') == 'abc'\n    assert remove_non_alphanum('abcd12') == 'abc'\n\nif __name__ == '__main__':\n    print(remove_non_alphanum('abcd'))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(c for c in s if c in string.ascii_letters + string.digits)"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(c for c in s if c.isalnum())\n\nprint(remove_non_alphanumeric('!@#$%^&*()'))\nprint(remove_non_alphanumeric('!@#$%^&*()', True))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    return \"\".join([i for i in string if i.isalnum()])\n\n\nif __name__ == \"__main__\":\n    print remove_non_alphanumeric(\"Hello! @#$%^&*()_+\")"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x in string.printable, str))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeNonAscii('abc')\n    print s.removeNonAscii('Hello World')\n    print s.removeNonAscii('\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join([i for i in s if i.isalnum()])\n\nif __name__ == \"__main__\":\n    s = 'hello world! This is a test.'\n    print(remove_non_alphanumeric(s))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def remove_non_alphanum(text):\n    return re.sub(r\"[^a-zA-Z0-9]\", \"\", text)\n\nif __name__ == \"__main__\":\n    print remove_non_alphanum(\"a1b2c3d4\")"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(c for c in str if c.isalnum())"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in s if c.isalnum()])"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeNonAscii(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda c: c.isalnum(), str))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/remove-numbers/problem\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TODO\n\n# In[ ]:\n\n# TOD"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import re\n\ndef remove_non_alphanumeric(s):\n    # YOUR CODE HERE\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert remove_non_alphanumeric(\"Hello world\") == \"HlLoW\", \"Hello\"\n    assert remove_non_alphanumeric(\"Hello World\") == \"HlLoW\", \"World\"\n    assert remove_non_alphanumeric(\"Hello\") == \"\", \"Hello\"\n    assert remove_non_alphanumeric(\"Hello!\") == \"\", \"Hello!\"\n    assert remove_non_alphanumeric(\"\") == \"\", \"\"\n    assert remove_non_alphanumeric(None) == \"\", \"\""
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# https://www.interviewbit.com/questions/remove-all-except-alphanumeric-characters-from-a-string/\n\ndef remove_non_alphanumeric(string):\n    return ''.join(ch for ch in string if ch.isalnum())\n\n# print(remove_non_alphanumeric('abcde'))\n# print(remove_non_alphanumeric('12345'))\n# print(remove_non_alphanumeric('abcdefghijklmnopqrstuvwxyz'))\n# print(remove_non_alphanumeric('a1234'))\n# print(remove_non_alphanumeric('abcd'))\n# print(remove_non_alphanumeric('abcde'))\n\nif __name__ == '__main__':\n    string = 'abcde'\n    print(remove_non_alphanumeric(string))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/remove-non-alphanumeric-characters/problem\n\n# I have no idea what this is supposed to do.\n\ndef remove_non_alphanumeric(s):\n    return ''.join(c for c in s if c.isalnum())\n\nif __name__ == \"__main__\":\n    input_string = \"abcdefg\"\n    print(remove_non_alphanumeric(input_string))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def remove_non_alpha(string):\n    return ''.join(c for c in string if c.isalpha())\n\nif __name__ == '__main__':\n    assert remove_non_alpha('Hello') == 'Hello'\n    assert remove_non_alpha('Hello123') == 'Hello'\n    assert remove_non_alpha('123Hello') == '123Hello'\n    assert remove_non_alpha('Hello!') == 'Hello'\n    assert remove_non_alpha('Hello_World') == 'Hello'\n    assert remove_non_alpha('Hello_World_') == 'Hello'\n    assert remove_non_alpha('Hello_World_!') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!_') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!_!') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!_!_') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!_!_!') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!_!_!_') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!_!_!_!') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!_!_!_!_') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!_!_!_!_!') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!_!_!_!_!_!_') == 'Hello'\n    assert remove_non_alpha('Hello_World_!_!"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def remove_non_alphanumeric(string):\n    non_alphanumeric_chars = \"!@#$%^&*()_+=-{}|:;\\\"<>?,./[\\\\]?\\\\'\"\n    for char in non_alphanumeric_chars:\n        string = string.replace(char, \"\")\n    return string\n\n# Test Cases\ntest_cases = [\n    (\"Hello World\", \"h wo rd\"),\n    (\"Hello World\", \"h wo rd\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\","
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from string import ascii_letters\n\ndef remove_non_alphanumeric(s):\n    return \"\".join(c for c in s if c in ascii_letters)\n\n# Example 1:\n\ns = \"leetcode\"\nprint(remove_non_alphanumeric(s))\n\n# Output: \"leotcode\"\n\n# Example 2:\n\ns = \"leetcode1leetcode2\"\nprint(remove_non_alphanumeric(s))\n\n# Output: \"lec1lec2\""
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Time:  O(n)\n# Space: O(1)\n\n# Example 1:\n# Input: \"leetcode\"\n# Output: \"lec\"\n# Example 2:\n# Input: \"1a\"\n# Output: \"1\"\n\nclass Solution(object):\n    def removeNonLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda c: c.isalpha(), s))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": ""
    }
  ]
}