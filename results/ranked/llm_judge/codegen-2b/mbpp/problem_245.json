{
  "timestamp": "2025-09-14T19:11:07.835147",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 245,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import math\n\ndef countPrimes(limit):\n    # base case\n    if limit == 1:\n        return 0\n\n    # first prime number is 2\n    prime = 2\n    prime_num = 2\n    primes = []\n\n    # while the prime number is not greater than limit\n    while prime_num < limit:\n        # check if the number is prime\n        if isPrime(prime_num):\n            # add prime number to the list\n            primes.append(prime_num)\n            # increase the prime number\n            prime_num += 1\n\n        # increase the prime number\n        prime += 1\n\n    # return the number of prime numbers less than limit\n    return len(primes)\n\ndef isPrime(num):\n    # base case\n    if num == 1:\n        return False\n    # check if the number is prime\n    if num % 2 == 0:\n        return False\n    # check if the number is divisible by 2 and 3\n    if num % 3 == 0:\n        return False\n    # check if the number is divisible by all of the numbers from 2 to sqrt(num)\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(countPrimes(100))\n    print(countPrimes(100))\n    print(countPrimes(1000))\n    print(countPrimes(10000))\n    print(countPrimes(100000))\n    print(countPrimes(1000000))\n    print(countPrimes(10000000))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def count_prime_numbers(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # http://www.cnblogs.com/yinzhijie/archive/2012/11/08/2877136.html\n    # https://www.cnblogs.com/zhezhi/p/3279806.html\n    # https://www.cnblogs.com/zhezhi/p/3279807.html\n    if n <= 2:\n        return 1\n\n    # prime numbers = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47\n    # http://www.cnblogs.com/zhezhi/p/3279807.html\n    # http://www.cnblogs.com/zhezhi/p/3279808.html\n    # http://www.cnblogs.com/zhezhi/p/3279809.html\n    # http://www.cnblogs.com/zhezhi/p/3279805.html\n    # http://www.cnblogs.com/zhezhi/p/3279806.html\n    # http://www.cnblogs.com/zhezhi/p/3279807.html\n    # http://www.cnblogs.com/zhezhi/p/3279808.html\n    # http://www.cnblogs.com/zhezhi/p/3279809.html\n    # http://www.cnblogs.com/zhezhi/p/3280110.html\n    # http://www.cnblogs.com/zhezhi/p/3280111.html\n    # http://www.cnblogs.com/zhezhi/p/3280112.html\n    # http://www.cnblogs.com/zhezhi/p/3280113.html\n    # http://www.cnblogs.com/zhezhi/p/3280114.html\n    # http://www.cnblogs.com/zhezhi/p/3280115.html\n    # http://www.cnblogs.com/zhezhi/p/328"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_primes(limit):\n    # Write your code here\n    primes = [False] * limit\n    primes[0] = True\n    primes[1] = True\n    for i in range(2, limit):\n        if primes[i]:\n            for j in range(i * 2, limit, i):\n                primes[j] = False\n    return sum(primes)\n\nprint(count_primes(100))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def is_prime(n):\n    \"\"\"\n    Returns true if n is prime, otherwise returns false.\n\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_numbers(n):\n    \"\"\"\n    Returns a list of prime numbers less than or equal to n.\n\n    >>> prime_numbers(10)\n    [2, 3, 5, 7]\n    >>> prime_numbers(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n    result = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            result.append(i)\n    return result\n\ndef main():\n    \"\"\"\n    Runs the main program.\n    \"\"\"\n    print(prime_numbers(20))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Time:  O(log n)\n# Space: O(1)\n\nclass Solution(object):\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 2:\n            return 0\n        if n < 3:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            return 22\n        if n == 24:\n            return 23\n        if n == 25:\n            return 24\n        if n == 26:\n            return 25\n        if n == 27:\n            return 26\n        if n == 28:\n            return 27\n        if n == 29:\n            return 28\n        if n == 30:\n            return 29\n        if n == 31:\n            return 30\n        if n == 32:\n            return 31\n        if n == 33:\n            return 32\n        if n == 34:\n            return 33\n        if n == 35:\n            return 34\n        if n == 36:\n            return 35\n        if n == 37:\n            return 36\n        if n == 38:\n            return 37\n        if n == 39:\n            return 38\n        if n == 40:\n            return 39\n        if n == 41:\n            return 40\n        if n =="
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def num_primes(N):\n    # This is a simple implementation of the algorithm used for finding prime numbers\n    # in the book \"Algorithms\" by Cormen et al.\n    # http://www.cs.princeton.edu/~rs/algorithms/\n    #\n    # A more efficient implementation can be found at\n    # http://www.cs.princeton.edu/~rs/algorithms/Prime.java.html\n\n    # Initialize the array of primes\n    primes = [2]\n\n    # Add the first number to the array of primes\n    for i in range(3, N):\n        # Add the next number to the array of primes\n        while primes[-1] * primes[-1] <= i:\n            primes.append(i)\n\n    return primes\n\n\ndef main():\n    print num_primes(500)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def count_primes(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n < 2:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n < 4:\n        return 0\n    if n % 2 == 0:\n        return count_primes(n/2)\n    if n < 4:\n        return 0\n    if n % 3 == 0:\n        return count_primes(n/3)\n    if n < 8:\n        return 0\n    if n % 5 == 0:\n        return count_primes(n/5)\n    if n < 12:\n        return 0\n    if n % 7 == 0:\n        return count_primes(n/7)\n    if n < 14:\n        return 0\n    if n % 11 == 0:\n        return count_primes(n/11)\n    if n < 19:\n        return 0\n    if n % 13 == 0:\n        return count_primes(n/13)\n    if n < 23:\n        return 0\n    if n % 17 == 0:\n        return count_primes(n/17)\n    if n < 29:\n        return 0\n    if n % 19 == 0:\n        return count_primes(n/19)\n    if n < 37:\n        return 0\n    if n % 23 == 0:\n        return count_primes(n/23)\n    if n < 41:\n        return 0\n    if n % 29 == 0:\n        return count_primes(n/29)\n    if n < 43:\n        return 0\n    if n % 37 == 0:\n        return count_primes(n/37)\n    if n < 47:\n        return 0\n    if n % 41 == 0:\n        return count_primes(n/41)\n    if n < 53:\n        return 0\n    if n % 43 == 0:\n        return count_primes(n/43)\n    if n < 59:\n        return 0\n    if n % 53 == 0:\n        return count_primes(n/53)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import timeit\n\n\ndef prime_numbers_less_than(n):\n    \"\"\"\n    Write a python function to count the number of prime numbers less than a given non-negative number.\n\n    >>> prime_numbers_less_than(20)\n    1\n    >>> prime_numbers_less_than(10)\n    1\n    >>> prime_numbers_less_than(3)\n    3\n    >>> prime_numbers_less_than(2)\n    2\n    >>> prime_numbers_less_than(1)\n    1\n    >>> prime_numbers_less_than(0)\n    0\n    >>> prime_numbers_less_than(5)\n    3\n    >>> prime_numbers_less_than(6)\n    3\n    >>> prime_numbers_less_than(7)\n    3\n    >>> prime_numbers_less_than(8)\n    3\n    >>> prime_numbers_less_than(9)\n    3\n    >>> prime_numbers_less_than(10)\n    3\n    >>> prime_numbers_less_than(11)\n    3\n    >>> prime_numbers_less_than(12)\n    3\n    >>> prime_numbers_less_than(13)\n    3\n    >>> prime_numbers_less_than(14)\n    3\n    >>> prime_numbers_less_than(15)\n    3\n    >>> prime_numbers_less_than(16)\n    3\n    >>> prime_numbers_less_than(17)\n    3\n    >>> prime_numbers_less_than(18)\n    3\n    >>> prime_numbers_less_than(19)\n    3\n    >>> prime_numbers_less_than(20)\n    3\n    >>> prime_numbers_less_than(21)\n    3\n    >>> prime_numbers_less_than(22)\n    3\n    >>> prime_numbers_less_than(23)\n    3\n    >>> prime_numbers_less_than(24)\n    3\n    >>> prime_numbers_less_than(25)\n    3\n    >>> prime_numbers_less_"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def count_primes(n):\n    \"\"\"\n    Count the number of prime numbers less than n\n    :param n:\n    :return:\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n    # 2 is prime\n    if n == 2:\n        return 2\n    # 2 is not prime\n    if n % 2 == 0:\n        return 0\n    # base case\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return 0\n    return n\n\n\nif __name__ == '__main__':\n    assert count_primes(0) == 0\n    assert count_primes(1) == 1\n    assert count_primes(2) == 2\n    assert count_primes(3) == 5\n    assert count_primes(4) == 11\n    assert count_primes(5) == 23\n    assert count_primes(6) == 47\n    assert count_primes(7) == 107\n    assert count_primes(8) == 211\n    assert count_primes(9) == 383\n    assert count_primes(10) == 769\n    assert count_primes(11) == 1543\n    assert count_primes(12) == 3079\n    assert count_primes(13) == 6151\n    assert count_primes(14) == 12289\n    assert count_primes(15) == 24593\n    assert count_primes(16) == 49157\n    assert count_primes(17) == 98317\n    assert count_primes(18) == 195313\n    assert count_primes(19) == 405647\n    assert count_primes(20) == 809971\n    assert count_primes(21) == 1634901\n    assert count_primes(22) == 3349919\n    assert count_primes(23) == 6787039\n    assert count_primes(24) == 13467063\n    assert count_primes(25) == 268435399"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def prime_number_less_than(N):\n    \"\"\"\n    Write a python function to count the number of prime numbers less than a given non-negative number.\n\n    Input: N is a non-negative integer.\n    Output: The number of prime numbers less than N.\n\n    Example:\n    >>> prime_number_less_than(10)\n    5\n    >>> prime_number_less_than(100)\n    14\n    >>> prime_number_less_than(200)\n    44\n    >>> prime_number_less_than(1000)\n    1006\n    >>> prime_number_less_than(10000)\n    2905\n    >>> prime_number_less_than(100000)\n    172454\n    >>> prime_number_less_than(1000000)\n    811894\n    >>> prime_number_less_than(10000000)\n    8171292\n    >>> prime_number_less_than(100000000)\n    81722862\n    >>> prime_number_less_than(1000000000)\n    817224082\n    >>> prime_number_less_than(10000000000)\n    817224092\n    >>> prime_number_less_than(100000000000)\n    8172240902\n    >>> prime_number_less_than(1000000000000)\n    81722409002\n    >>> prime_number_less_than(10000000000000)\n    817224090003\n    >>> prime_number_less_than(100000000000000)\n    8172240900003\n    >>> prime_number_less_than(1000000000000000)\n    817224090000003\n    >>> prime_number_less_than(10000000000000000)\n    81722409000000003\n    >>> prime_number_less_than(100000000000000000)\n    817224090000000003\n    >>> prime_number_less_than(1000000000000000000)\n    8172240900000000000000003\n    >>> prime_number_less_than(10000000000000000000)\n    817224090000000000000000003\n    >>> prime_number_less_than(100000000000000000000)\n    8172240900000000000000000003\n    >>> prime_number_less_than"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "#primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\ndef countPrimes(n):\n    result = 0\n    for i in range(2, n+1):\n        if isPrime(i):\n            result += 1\n    return result\n\ndef isPrime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# Complete the function below.\ndef countPrimes(n):\n  if n == 1:\n    return 0\n  if n == 2:\n    return 1\n  if n == 3:\n    return 2\n  if n == 4:\n    return 3\n  if n == 5:\n    return 4\n  if n == 6:\n    return 5\n  if n == 7:\n    return 6\n  if n == 8:\n    return 7\n  if n == 9:\n    return 8\n  if n == 10:\n    return 9\n  \n  i = 2\n  while i < n:\n    if n % i == 0:\n      n = n / i\n      break\n    i = i + 1\n  return countPrimes(n)\n\nn = int(input())\nprint(countPrimes(n))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "#  Use the prime numbers generator to count the number of prime numbers less than n.\n\ndef countPrime(n):\n    primeList = list(prime_sieve(n))\n    count = 0\n    for i in range(len(primeList)):\n        if primeList[i] <= n:\n            count += 1\n    return count\n\n#  Use the prime numbers generator to count the number of prime numbers less than n.\n\ndef countPrime2(n):\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n\n#  Use the prime numbers generator to count the number of prime numbers less than n.\n\ndef countPrime3(n):\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n\n#  Use the prime numbers generator to count the number of prime numbers less than n.\n\ndef countPrime4(n):\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n\n#  Use the prime numbers generator to count the number of prime numbers less than n.\n\ndef countPrime5(n):\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n\n#  Use the prime numbers generator to count the number of prime numbers less than n.\n\ndef countPrime6(n):\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n\n#  Use the prime numbers generator to count the number of prime numbers less than n.\n\ndef countPrime7(n):\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n\n#  Use the prime numbers generator to count the number of prime numbers less than n.\n\ndef countPrime8(n):\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def count_prime_numbers(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    if n <= 3:\n        return 1\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return 0\n    return n - 1\n\n\nclass Solution:\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return count_prime_numbers(n)\n\n# test\nsol = Solution()\nprint(sol.countPrimes(1))\nprint(sol.countPrimes(2))\nprint(sol.countPrimes(3))\nprint(sol.countPrimes(4))\nprint(sol.countPrimes(5))\nprint(sol.countPrimes(6))\nprint(sol.countPrimes(7))\nprint(sol.countPrimes(8))\nprint(sol.countPrimes(9))\nprint(sol.countPrimes(10))\nprint(sol.countPrimes(11))\nprint(sol.countPrimes(12))\nprint(sol.countPrimes(13))\nprint(sol.countPrimes(14))\nprint(sol.countPrimes(15))\nprint(sol.countPrimes(16))\nprint(sol.countPrimes(17))\nprint(sol.countPrimes(18))\nprint(sol.countPrimes(19))\nprint(sol.countPrimes(20))\nprint(sol.countPrimes(21))\nprint(sol.countPrimes(22))\nprint(sol.countPrimes(23))\nprint(sol.countPrimes(24))\nprint(sol.countPrimes(25))\nprint(sol.countPrimes(26))\nprint(sol.countPrimes(27))\nprint(sol.countPrimes(28))\nprint(sol.countPrimes(29))\nprint(sol.countPrimes(30))\nprint(sol.countPrimes(31))\nprint(sol."
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import math\n\ndef countPrimes(n):\n    # write your code here\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    if n == 3:\n        return 2\n    if n % 3 == 0:\n        return 0\n    if n % 5 == 0:\n        return 0\n    if n % 7 == 0:\n        return 0\n    if n % 11 == 0:\n        return 0\n    if n % 13 == 0:\n        return 0\n    if n % 17 == 0:\n        return 0\n    if n % 19 == 0:\n        return 0\n    if n % 23 == 0:\n        return 0\n    if n % 29 == 0:\n        return 0\n    if n % 31 == 0:\n        return 0\n    if n % 37 == 0:\n        return 0\n    if n % 41 == 0:\n        return 0\n    if n % 43 == 0:\n        return 0\n    if n % 47 == 0:\n        return 0\n    if n % 53 == 0:\n        return 0\n    if n % 59 == 0:\n        return 0\n    if n % 61 == 0:\n        return 0\n    if n % 67 == 0:\n        return 0\n    if n % 71 == 0:\n        return 0\n    if n % 73 == 0:\n        return 0\n    if n % 79 == 0:\n        return 0\n    if n % 83 == 0:\n        return 0\n    if n % 89 == 0:\n        return 0\n    if n % 97 == 0:\n        return 0\n    if n % 101 == 0:\n        return 0\n    if n % 103 == 0:\n        return 0\n    if n % 107 == 0:\n        return 0\n    if n % 109 == 0:\n        return 0\n    if n % 113 == 0:\n        return 0\n    if n % 127 == 0:\n        return 0\n    if n % 131 == 0:\n        return 0\n    if n % 137 == 0:\n        return 0\n    if n % 139 == 0:\n        return 0\n    if n % 149 == 0:\n        return 0\n    if n %"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {integer} n\n    # @return {integer}\n    def countPrimes(self, n):\n        # base case\n        if n < 2:\n            return 0\n        # count the number of primes less than n\n        # check each number\n        count = 0\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                continue\n            # check if the number is prime\n            root = TreeNode(i)\n            root.left = root.right = None\n            curr = root\n            while curr:\n                # curr is even, skip it\n                if curr.val % 2 == 0:\n                    curr = curr.right\n                else:\n                    # curr is odd, check if it is prime\n                    curr.right = curr.right.left\n                    curr = curr.right\n                # curr is even, skip it\n                if curr.val % 2 == 0:\n                    curr = curr.right\n                else:\n                    # curr is odd, check if it is prime\n                    curr.left = curr.left.right\n                    curr = curr.left\n                count += 1\n        return count\n\n# test cases\ns = Solution()\nprint s.countPrimes(10)\nprint s.countPrimes(20)\nprint s.countPrimes(30)\nprint s.countPrimes(40)"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "import math\nimport time\n\nstart_time = time.time()\n\ndef countPrimes(limit):\n    \"\"\"\n    >>> countPrimes(100)\n    24\n    >>> countPrimes(1000)\n    24\n    >>> countPrimes(10000)\n    24\n    >>> countPrimes(100000)\n    24\n    \"\"\"\n    primes = [2]\n    for i in range(3, limit, 2):\n        if primes[-1] < i:\n            primes.append(i)\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                primes[-1] = 0\n                break\n    return sum(primes)\n\nend_time = time.time()\nprint(end_time - start_time)"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def count_primes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 2:\n        return 0\n    primes = [1]\n    for i in range(2, n):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes.append(0)\n    return len(primes)\n\nif __name__ == \"__main__\":\n    print count_primes(10000)"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "import math\n\ndef count_primes(n):\n    count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n / i\n            if n == 1:\n                break\n    return count\n\nif __name__ == \"__main__\":\n    print(count_primes(100))"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "import math\nimport time\n\ndef get_primes(n):\n    \"\"\"\n    Return all prime numbers less than n.\n    \"\"\"\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(2 * i, n, i):\n                primes[j] = False\n    return [i for i in range(2, n) if primes[i]]\n\ndef is_prime(n):\n    \"\"\"\n    Return True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        if n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_primes(n):\n    \"\"\"\n    Return the number of prime numbers less than n.\n    \"\"\"\n    primes = get_primes(n)\n    count = 0\n    for i in range(len(primes)):\n        if is_prime(primes[i]):\n            count += 1\n    return count\n\ndef test():\n    assert count_primes(1) == 1\n    assert count_primes(2) == 2\n    assert count_primes(3) == 3\n    assert count_primes(4) == 5\n    assert count_primes(5) == 5\n    assert count_primes(6) == 5\n    assert count_primes(7) == 7\n    assert count_primes(8) == 11\n    assert count_primes(9) == 11\n    assert count_primes(10) == 11\n    assert count_primes(11) == 11\n    assert count_primes(12) == 23\n    assert count_primes(13) == 23"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "import math\nimport time\n\ndef count_primes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    primes = []\n    i = 2\n    while i < n:\n        if i not in primes:\n            primes.append(i)\n            i += 1\n    for i in range(2, n + 1):\n        if i not in primes:\n            primes.append(i)\n    return len(primes)\n\n\nif __name__ == '__main__':\n    start = time.clock()\n    print count_primes(10 ** 6)\n    print \"--- %s seconds ---\" % (time.clock() - start)"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def countPrimes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    count = 0\n    while i <= n:\n        if isPrime(i):\n            count += 1\n        i += 1\n    return count\n\n\ndef isPrime(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\nn = int(input())\nprint(countPrimes(n))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def count_prime(n):\n    \"\"\"\n    n: the number you want to count\n    return: the number of prime numbers less than n\n    \"\"\"\n    count = 0\n    for i in xrange(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = int(raw_input(\"please input a number:\"))\n    print count_prime(n)"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def count_prime_numbers_less_than(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    primes = [True for _ in range(2, n)]\n    for i in range(2, n):\n        if primes[i]:\n            j = i + i\n            while j < n:\n                primes[j] = False\n                j += i\n    return sum(primes)\n\n\ndef test():\n    assert count_prime_numbers_less_than(5) == 4\n    assert count_prime_numbers_less_than(1000) == 7077\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "import math\n\ndef countPrimes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    prime = [True] * n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if prime[i]:\n            for j in range(i * i, n, i):\n                prime[j] = False\n    return sum(prime)\n\nif __name__ == '__main__':\n    print(countPrimes(10))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "import time\nimport math\nimport sys\nfrom itertools import islice\n\ndef isPrime(n):\n    if n == 2:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimes(n):\n    primes = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if isPrime(i):\n            primes += 1\n    return primes\n\ndef main():\n    start = time.time()\n    n = int(sys.stdin.readline())\n    print(countPrimes(n))\n    end = time.time()\n    print(\"Runtime: %fs\" % (end - start))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def count_primes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 2:\n        return 0\n    prime_list = [True] * n\n    prime_list[0] = prime_list[1] = False\n    for i in range(2, n):\n        if prime_list[i]:\n            for j in range(2, int(n ** 0.5) + 1):\n                if i % j == 0:\n                    prime_list[i] = False\n                    break\n    return sum(prime_list)"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "import math\nimport time\n\ndef countPrimes(N):\n    \"\"\"\n    countPrimes(N) -> int\n    \n    Count the number of prime numbers less than N.\n    \n    Arguments:\n    N -- an integer\n    \n    Returns:\n    The number of prime numbers less than N.\n    \n    Example:\n    >>> countPrimes(10000)\n    5\n    >>> countPrimes(10000.5)\n    5\n    >>> countPrimes(10000.3)\n    4\n    >>> countPrimes(1000000)\n    5\n    \"\"\"\n    \n    count = 0\n    for i in range(2, int(math.sqrt(N)) + 1):\n        if N % i == 0:\n            count += 1\n    return count\n\nstart = time.time()\nprint countPrimes(10000)\nprint \"Time elapsed: %s\" % (time.time() - start)"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "import math\n\ndef countPrimes(num):\n    count = 0\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(countPrimes(10))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(N):\n    count = 0\n    for i in range(2, N):\n        if is_prime(i):\n            count += 1\n    return count\n\nprint count_primes(10000)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def is_prime(n):\n    \"\"\"\n    :param n: integer\n    :return: boolean\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(n):\n    \"\"\"\n    :param n: integer\n    :return: integer\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_primes(100))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def count_prime(n):\n    \"\"\"\n    Write a function count_prime(n) that returns the number of prime numbers less than or equal to n.\n\n    Example\n    Input:\n        n = 3\n    Output:\n        count_prime(n) = 3\n    Explanation:\n        3 is the number of prime numbers less than or equal to 3.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(n):\n    \"\"\"\n    Write a function is_prime(n) that returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(n**0.5)+1, 6):\n            if n % i == 0:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    n = 3\n    print(count_prime(n))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "import math\nimport sys\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_count(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    count = 0\n    for i in range(3, n+1, 2):\n        if is_prime(i):\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    n = int(sys.argv[1])\n    print(prime_count(n))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def isPrime(n):\n    \"\"\"\n    Returns true if n is a prime number\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimes(n):\n    \"\"\"\n    Returns the number of prime numbers less than n\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print countPrimes(100)"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "import math\n\n\ndef count_prime(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(1 for i in range(2, int(math.sqrt(n)) + 1) if is_prime(i))\n\ndef is_prime(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return True\n    if n < 17:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(count_prime(10))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def count_primes(n):\n    \"\"\"\n    :param n: the number to check\n    :return: the number of prime numbers less than n\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_primes(10))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def countPrime(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(2, n):\n        if n % i == 0:\n            while n % i == 0:\n                n /= i\n            res += 1\n    return res\n\n\nif __name__ == \"__main__\":\n    assert countPrime(100) == 19\n    assert countPrime(10) == 5\n    assert countPrime(6) == 4\n    assert countPrime(1) == 0"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    primes = [True] * n\n    primes[0] = False\n    primes[1] = False\n    i = 2\n    while i < n:\n        if primes[i]:\n            j = 2\n            while j < i:\n                primes[i * j] = False\n                j += 1\n            primes[i] = False\n        i += 1\n    return sum(primes)\n\nif __name__ == '__main__':\n    print(countPrimes(50))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef countPrimes(n):\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    i = 3\n    while i <= n:\n        if primes[i]:\n            j = 2\n            while j < i:\n                primes[i*j] = False\n                j += 1\n            i += 1\n    return sum(primes)\n\nif __name__ == \"__main__\":\n    print countPrimes(10)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def count_prime(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n\n    prime_set = set()\n\n    for i in range(2, n):\n        if i in prime_set:\n            continue\n\n        prime_set.add(i)\n\n        for j in range(2, int(n/i) + 1):\n            if i * j > n:\n                break\n\n            prime_set.discard(i * j)\n\n    return len(prime_set)\n\nif __name__ == '__main__':\n    print(count_prime(20))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def prime_count(N):\n    \"\"\"\n    :param N: int\n    :return: int\n    \"\"\"\n    sieve_size = int(N ** 0.5) + 1\n    sieve = [False for i in range(sieve_size)]\n    for i in range(2, sieve_size):\n        if sieve[i]:\n            for j in range(i * i, sieve_size, i):\n                sieve[j] = True\n    counter = 0\n    for i in range(2, sieve_size):\n        if sieve[i]:\n            counter += 1\n    return counter"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    count = 0\n    i = 2\n    while i * i < n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n\n\nprint countPrimes(10)\nprint countPrimes(20)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import math\n\ndef count_primes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n /= i\n        if n == 1:\n            break\n    return count"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_count(num):\n    num = int(num)\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += 1\n    return count\n\nprint(prime_count(10))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    # write your code here\n    primes = []\n    i = 2\n    while i < n:\n        if i in primes:\n            primes.remove(i)\n        else:\n            prime = True\n            while i * i < n:\n                if n % i == 0:\n                    prime = False\n                    break\n                i += 1\n            if prime:\n                primes.append(i)\n        i += 1\n    return len(primes)\n\ndef main():\n    n = int(input())\n    print(countPrimes(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n\tprimes = [1] * (n+1)\n\tfor i in range(2, n+1):\n\t\tif primes[i] == 1:\n\t\t\tcontinue\n\t\tfor j in range(2, i):\n\t\t\tif primes[i] % j == 0:\n\t\t\t\tbreak\n\t\t\tprimes[i] *= (i/j)\n\treturn primes[1:]\n\nif __name__ == \"__main__\":\n\tprint countPrimes(15)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def count_primes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    primes = [True] * (n+1)\n    primes[0] = False\n    primes[1] = False\n    i = 2\n    while i <= n:\n        if primes[i]:\n            j = i * 2\n            while j <= n:\n                primes[j] = False\n                j += i\n        i += 1\n    return sum(primes)\n\nif __name__ == '__main__':\n    n = 10\n    print(count_primes(n))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def countPrimes(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    prime = [True] * num\n    for i in range(2, num):\n        if prime[i] is True:\n            for j in range(i * i, num, i):\n                prime[j] = False\n    return sum(prime)\n\n\nif __name__ == '__main__':\n    print(countPrimes(100))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def prime_numbers(limit):\n    if limit < 2:\n        return 0\n\n    prime_numbers_list = []\n    for i in range(2, limit):\n        if i == 2:\n            prime_numbers_list.append(i)\n            continue\n\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime_numbers_list.append(i)\n    return len(prime_numbers_list)\n\nif __name__ == '__main__':\n    print(prime_numbers(7))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef countPrimes(limit):\n    primes = []\n    limit = int(limit)\n    if limit < 2:\n        return 0\n    for i in range(2, limit + 1):\n        if i % 2 == 0:\n            primes.append(i)\n        for j in range(3, int(sqrt(i)) + 1, 2):\n            if i % j == 0:\n                primes.append(i)\n    return len(primes)\n\nprint countPrimes(10)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def count_prime(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num % 2 == 0:\n        return 0\n    n = 3\n    while n < num:\n        if num % n == 0:\n            return 0\n        n += 2\n    return n\n\nif __name__ == \"__main__\":\n    print(count_prime(100))\n    print(count_prime(5))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\n\n\ndef count_prime(n):\n    \"\"\"\n    Write a function count_prime(n) that returns the number of prime numbers less than n.\n\n    n is the number that is to be counted.\n    \"\"\"\n    count = 0\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_prime(10))\n    print(count_prime(100))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def countPrimes(num):\n    # Your code here\n    prime_num = [True] * num\n    prime_num[0] = False\n    prime_num[1] = False\n    for i in range(2, num):\n        if prime_num[i]:\n            for j in range(2, i):\n                prime_num[i*j] = False\n    return sum(prime_num)\n\n\nif __name__ == '__main__':\n    print countPrimes(200)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\ndef countPrimes(n):\n    primes = []\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            primes.append(i)\n        elif i > 2 and (math.sqrt(i)) % 2 == 0:\n            primes.append(i)\n        i += 1\n    return len(primes)\n\nif __name__ == '__main__':\n    print(countPrimes(9))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import math\nimport itertools\n\ndef prime_numbers(n):\n    \"\"\"\n    Input: n - a positive integer\n    Output: the number of prime numbers less than n\n    \"\"\"\n    if n == 0:\n        return 0\n    # base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    # recursion\n    return sum(prime_numbers(i) for i in range(2, int(math.sqrt(n)) + 1) if n % i == 0)\n\n\ndef count_primes(n):\n    \"\"\"\n    Input: n - a positive integer\n    Output: the number of prime numbers less than n\n    \"\"\"\n    return sum(prime_numbers(n))\n\nif __name__ == '__main__':\n    print(count_primes(5))\n    print(count_primes(100))\n    print(prime_numbers(100))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    '''\n    @param n: a non-negative integer\n    @return: the number of prime numbers less than n\n    '''\n    # write your code here\n    # use the following algorithm:\n    # 1. set the prime numbers to a set\n    # 2. use the following algorithm to test whether a number is prime:\n    #   if the number is in the set, return 1.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is even, add 1 to the number and return 1.\n    #   if the number is odd, add 2 to the number and return 1.\n    #   if the number is greater than the number of prime numbers in the set, return 0.\n    #   if the number is greater than the number of prime numbers in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the set, return 0.\n    #   if the number is a multiple of a prime number in the"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    count = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            continue\n        if isPrime(i):\n            count += 1\n    return count\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(countPrimes(n))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def is_prime(n):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(n):\n    \"\"\"\n    This function returns the number of prime numbers less than a given non-negative number.\n    \"\"\"\n\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\nprint(count_primes(10))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import math\nimport timeit\n\ndef prime(n):\n    \"\"\"\n    Return the number of prime numbers less than n.\n    \"\"\"\n    num_primes = 0\n    for i in range(2, n):\n        if n % i == 0:\n            num_primes += 1\n        else:\n            break\n    return num_primes\n\ndef prime_numbers(n):\n    \"\"\"\n    Return a list of prime numbers less than n.\n    \"\"\"\n    num_primes = 0\n    for i in range(2, n):\n        if n % i == 0:\n            num_primes += 1\n        else:\n            break\n    return [i for i in range(2, n) if n % i == 0]\n\ndef main():\n    start = timeit.default_timer()\n    print(prime(100))\n    print(prime_numbers(100))\n    print(timeit.default_timer() - start)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import math\nfrom functools import reduce\n\ndef is_prime(number):\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        if number % i == 0:\n            return False\n    return True\n\ndef count_prime_numbers(number):\n    return sum(1 for i in range(2, number) if is_prime(i))\n\ndef main():\n    print(count_prime_numbers(10))\n    print(count_prime_numbers(100))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/count-primes/problem\n\ndef countPrimes(n):\n    count = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            count += 1\n        elif i % 3 == 0:\n            count += 2\n        elif i % 5 == 0:\n            count += 3\n        else:\n            pass\n    return count"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import math\n\ndef count_primes(n):\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 0\n    if n < 2 or n < 3:\n        return 0\n    if n == 3:\n        return 3\n    i = 3\n    while i < int(math.sqrt(n)):\n        if n % i == 0:\n            return 0\n        i += 2\n    if i * i!= n:\n        return 0\n    return i * i\n\nif __name__ == '__main__':\n    print(count_primes(4))\n    print(count_primes(20))\n    print(count_primes(100))\n    print(count_primes(1000))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def count_primes(n):\n    primes = [True] * n\n    i = 2\n    while i * i < n:\n        if primes[i]:\n            j = 2 * i\n            while j < n:\n                primes[j] = False\n                j += i\n        i += 1\n    return sum(primes)\n\nif __name__ == '__main__':\n    print(count_primes(100))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def prime_numbers(N):\n    \"\"\"\n    :param N: The highest number to be considered\n    :return: The number of prime numbers less than N\n    \"\"\"\n\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N % 2 == 0:\n        return 0\n    if N % 3 == 0:\n        return 0\n    if N % 5 == 0:\n        return 0\n    if N % 7 == 0:\n        return 0\n    if N % 11 == 0:\n        return 0\n\n    # If N is not a perfect square, then there are no prime numbers less than N\n    if N % (N - 1)!= 0:\n        return 0\n\n    # If N is a perfect square, then the number of prime numbers less than N is the number of factors\n    # of N minus 1\n    prime_factors = N\n    while prime_factors > 1:\n        prime_factors = prime_factors - 1\n        if N % prime_factors == 0:\n            return 0\n\n    return 1 + prime_numbers(prime_factors)\n\nif __name__ == '__main__':\n    print(prime_numbers(10))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    # write your code here\n    res = 0\n    for i in range(2, n):\n        if n % i == 0:\n            res += 1\n            while n % i == 0:\n                n = n // i\n            if i == n:\n                break\n    return res\n\nif __name__ == \"__main__\":\n    print countPrimes(100000)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def countPrime(n):\n    # write your code here\n    if n <= 1:\n        return 0\n    i = 2\n    primeCount = 0\n    while i <= n:\n        if isPrime(i):\n            primeCount += 1\n        i += 1\n    return primeCount\n\n\ndef isPrime(n):\n    # write your code here\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint countPrime(100)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def prime(n):\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return 0\n    if n == 1 or n == 4:\n        return 1\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return 0\n        i += 2\n    return i - 2\n\ndef count_primes(n):\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n):\n        if prime(i):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print count_primes(10)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(countPrimes(10))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef isPrime(n):\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_count(n):\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(prime_count(n))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(n):\n    count = 0\n    i = 2\n    while i < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return count\n\nif __name__ == \"__main__\":\n    print count_primes(100)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "from math import ceil\n\ndef count_primes(num):\n    if num < 2:\n        return 0\n    \n    # calculate the number of primes less than num\n    primes = [2]\n    for i in range(3, int(ceil(num**0.5))+1, 2):\n        # if the number is not divisible by the current prime, add it to the list of primes\n        while num % i == 0:\n            primes.append(i)\n            num //= i\n    return len(primes)\n    \n\nif __name__ == '__main__':\n    print(count_primes(10))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "import time\nimport math\n\n\ndef prime_count(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2:\n        return 0\n\n    # if n is even, no prime numbers less than n\n    if n % 2 == 0:\n        return 0\n\n    # if n is odd, no prime numbers less than n + 1\n    if n % 2 == 1:\n        return 0\n\n    # if n is a perfect square, no prime numbers less than n + 1\n    if n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n        return 0\n\n    # if n is a perfect cube, no prime numbers less than n + 1\n    if n % 2 == 0 and n % 3 == 1 and n % 5 == 0:\n        return 0\n\n    # if n is a perfect 4-digit number, no prime numbers less than n + 1\n    if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0:\n        return 0\n\n    # if n is a perfect 8-digit number, no prime numbers less than n + 1\n    if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 and n % 11 == 0:\n        return 0\n\n    # if n is a perfect 9-digit number, no prime numbers less than n + 1\n    if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 and n % 11 == 0 and n % 13 == 0:\n        return 0\n\n    # if n is a perfect 10-digit number, no prime numbers less than n + 1\n    if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 and n % 11 == 0 and n % 13 == 0 and n % 17 == 0:\n        return 0\n\n    # if n is a perfect 11-digit number, no prime numbers less than n + 1\n    if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 and n % 11 == 0 and n % 13 == 0 and n % 17 == 0 and n % 19 == 0:\n        return 0\n\n    # if"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\nimport time\n\n\ndef count_prime(limit):\n    \"\"\"\n    :type limit: int\n    :rtype: int\n    \"\"\"\n    # base case\n    if limit <= 2:\n        return 0\n\n    # find all prime numbers\n    primes = [2]\n    for i in range(3, int(math.sqrt(limit)) + 1):\n        if limit % i == 0:\n            primes.append(i)\n\n    # count the number of prime numbers less than limit\n    count = 0\n    for i in primes:\n        if i <= limit:\n            count += 1\n    return count\n\n\nstart_time = time.time()\nprint(count_prime(100))\nprint(\"--- %s seconds ---\" % (time.time() - start_time))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def count_primes(n):\n    count = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            continue\n        for j in range(2, n/i + 1):\n            if i*j > n:\n                break\n            if i*j == n:\n                count += 1\n                break\n    return count\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(count_primes(n))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    primes = [True] * n\n    primes[0] = False\n    primes[1] = False\n    for i in range(2, n):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)\n\nprint(countPrimes(100))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import time\n\ndef countPrimes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # http://stackoverflow.com/questions/18206517/count-prime-numbers-in-python\n    # https://www.mathsisfun.com/math/prime-numbers/\n    # https://stackoverflow.com/questions/11782689/how-to-count-the-number-of-prime-numbers-below-n-in-python\n    # https://stackoverflow.com/questions/332642/how-do-you-find-the-number-of-prime-numbers-below-n-in-python\n    # http://www.mathsisfun.com/algebra/prime-number-sieve.html\n    # https://en.wikipedia.org/wiki/Prime_number\n    # https://stackoverflow.com/questions/15490463/find-the-number-of-prime-numbers-in-a-range-of-numbers\n    # https://en.wikipedia.org/wiki/Prime_number\n    # https://stackoverflow.com/questions/84934/how-do-you-find-the-number-of-prime-numbers-in-a-range-of-numbers\n    # https://www.mathsisfun.com/algebra/prime-number-sieve.html\n    # https://stackoverflow.com/questions/332642/how-do-you-find-the-number-of-prime-numbers-below-n-in-python\n    # https://stackoverflow.com/questions/84934/how-do-you-find-the-number-of-prime-numbers-in-a-range-of-numbers\n    # https://stackoverflow.com/questions/332642/how-do-you-find-the-number-of-prime-numbers-below-n-in-python\n    # https://stackoverflow.com/questions/332642/how-do-you-find-the-number-of-prime-numbers-"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    primes = []\n    i = 2\n    while i < n:\n        if i in primes:\n            primes.remove(i)\n        else:\n            j = i + i\n            while j < n:\n                if j in primes:\n                    primes.remove(j)\n                else:\n                    primes.append(j)\n                j += j\n            i += 1\n    return len(primes)\n\nif __name__ == '__main__':\n    assert countPrimes(100) == 10\n    assert countPrimes(10) == 10\n    assert countPrimes(20) == 12\n    assert countPrimes(30) == 15\n    assert countPrimes(32) == 19"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def countPrimes(limit):\n    \"\"\"\n    @param limit: the limit\n    @return: the number of prime numbers less than limit\n    \"\"\"\n    if limit <= 0:\n        return 0\n    primes = [True] * limit\n    primes[0] = False\n    primes[1] = False\n    i = 2\n    while i * i <= limit:\n        if primes[i]:\n            j = i * i\n            while j <= limit:\n                primes[j] = False\n                j += i\n        i += 1\n    return sum(primes)\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    limit = int(input())\n    print(countPrimes(limit))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def count_primes(n):\n    \"\"\"\n    count_primes(n) --> int\n\n    Returns the number of prime numbers less than n.\n    \"\"\"\n\n    primes = [2]\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n /= i\n            i += 2\n        else:\n            i += 1\n    return len(primes)\n\nif __name__ == '__main__':\n    print(count_primes(15))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def count_prime(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    p = [2]\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            p.append(i)\n    return len(p)\n\nif __name__ == '__main__':\n    print(count_prime(20))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def count_primes(N):\n    # A list of primes\n    primes = [2]\n\n    # Keep track of the number of primes we have\n    num_primes = 0\n\n    # While the number of primes is less than the number of elements in the list,\n    # add a prime to the list\n    while num_primes < len(primes):\n        # If the current number is a prime\n        if N % primes[num_primes] == 0:\n            # Add the current number to the list of primes\n            primes.append(primes[num_primes])\n            # Update the number of primes we have\n            num_primes += 1\n        # If the current number is not a prime\n        else:\n            # Move to the next prime\n            primes.append(primes[num_primes])\n            # Update the number of primes we have\n            num_primes += 1\n\n    # Return the number of primes\n    return num_primes"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(2, n):\n        if isPrime(i):\n            result += 1\n        for j in range(i+1, n):\n            if isPrime(j):\n                result += 1\n    return result\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(countPrimes(10))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "import math\nimport time\n\n\ndef count_prime(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n / i\n            i += 1\n        else:\n            i += 1\n    return n\n\n\nif __name__ == '__main__':\n    t = time.time()\n    print(count_prime(math.sqrt(100)))\n    print(time.time() - t)"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef countPrime(n):\n    # your code goes here\n    prime = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            prime += 1\n            n = n - 1\n    return prime\n\nif __name__ == \"__main__\":\n    print countPrime(10)\n    print countPrime(20)\n    print countPrime(100)\n    print countPrime(200)\n    print countPrime(500)\n    print countPrime(1000)\n    print countPrime(2000)\n    print countPrime(5000)"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    :param n: The number to check.\n    :return: True if the number is prime.\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_recursive(n):\n    if n == 2:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_iterative(n):\n    if n == 2:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_iterative_recursive(n):\n    if n == 2:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n < 2 or n < 3:\n        return True\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    print(is_prime(12))\n    print(is_prime_recursive(12))\n    print(is_prime_iterative(12))\n    print(is_prime_iterative_recursive(12))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def prime_numbers(number):\n    \"\"\"\n    Return the number of prime numbers less than a given number.\n    \"\"\"\n    if number < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(2, number):\n            if number % i == 0:\n                count += 1\n        return count\n\nif __name__ == \"__main__\":\n    print(prime_numbers(10))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef countPrimes(n):\n    primes = []\n    for i in range(2, n+1):\n        if i not in primes:\n            if isPrime(i):\n                primes.append(i)\n    return len(primes)\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# print countPrimes(10000)\nprint countPrimes(100)"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def count_primes(limit):\n    primes = [True] * limit\n    primes[0] = False\n    primes[1] = False\n    i = 2\n    while i < limit:\n        if primes[i]:\n            for j in range(2, i):\n                primes[i * j] = False\n            primes[i] = False\n            i += 1\n    return i\n\n\nif __name__ == '__main__':\n    limit = int(input())\n    print(count_primes(limit))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "import math\n\ndef count_primes(limit):\n    \"\"\"\n    :type limit: int\n    :rtype: int\n    \"\"\"\n    if limit < 2:\n        return 0\n    n = 2\n    count = 0\n    while n < limit:\n        if is_prime(n):\n            count += 1\n        n += 1\n    return count\n\ndef is_prime(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(count_primes(100))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n < 9:\n        return True\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    if n % 7 == 0 or n % 11 == 0:\n        return False\n    r = n - 1\n    s = int(n ** 0.5)\n    while r > 10:\n        if r % s == 0 or r % (s + 2) == 0:\n            return False\n        r = r / s\n        s = int(s / 2)\n    return True\n\ndef count_primes(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(count_primes(n))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "# import the necessary packages\nfrom math import sqrt\n\n# define the number of primes to check\nprimes_num = 50\n\n# define the prime number list\nprimes = [2, 3]\n\n# define the square root of the number of primes\nsqrt_num = int(sqrt(primes_num))\n\n# count the number of prime numbers less than sqrt(n)\nfor i in range(2, sqrt_num):\n    if primes[i] * primes[i] > primes_num:\n        break\n    for j in range(i + 1, sqrt_num):\n        if primes[j] * primes[j] > primes_num:\n            break\n        for k in range(j + 1, sqrt_num):\n            if primes[k] * primes[k] > primes_num:\n                break\n            for l in range(k + 1, sqrt_num):\n                if primes[l] * primes[l] > primes_num:\n                    break\n                if primes[l] > primes[j] + primes[k] + primes[i]:\n                    break\n                else:\n                    primes.append(primes[l])\n\n# return the number of prime numbers less than n\nprint(sum(primes))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def count_prime_numbers(limit):\n    prime = [True] * limit\n    prime[0] = False\n    prime[1] = False\n    prime[2] = False\n\n    i = 3\n    while i < limit:\n        if prime[i]:\n            j = 2 * i\n            while j < limit:\n                prime[j] = False\n                j = 2 * i + 1\n            i += 1\n        else:\n            i += 1\n    return sum(prime)\n\n\ndef test():\n    assert count_prime_numbers(1000) == 469\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "import timeit\nimport math\n\ndef countPrime(n):\n    \"\"\"\n    >>> countPrime(100)\n    15\n    >>> countPrime(200)\n    20\n    \"\"\"\n    if n <= 1:\n        return 0\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return 0\n    return len(list(filter(lambda x: n % x == 0, range(2, int(math.sqrt(n)) + 1))))\n\n\nif __name__ == '__main__':\n    start = timeit.default_timer()\n    print(countPrime(100))\n    print(\"Time elapsed: {}\".format(timeit.default_timer() - start))"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def countPrimes(N):\n    \"\"\"\n    countPrimes(N):\n        counts the number of prime numbers less than N.\n    \"\"\"\n    sieve_size = N + 1\n    sieve = [True] * sieve_size\n    for i in range(3, sieve_size, 2):\n        sieve[i] = False\n    for i in range(sieve_size):\n        if sieve[i]:\n            for j in range(i * 2, sieve_size, i):\n                sieve[j] = False\n\n    count = 0\n    for i in range(sieve_size):\n        if sieve[i]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    N = int(input(\"Enter a number: \"))\n    print(\"The number of prime numbers less than {} is {}\".format(N, countPrimes(N)))"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "def count_primes(n):\n\tcount = 0\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\tcount += 1\n\t\t\twhile n % i == 0:\n\t\t\t\tn /= i\n\t\telse:\n\t\t\tbreak\n\treturn count\n\nprint count_primes(100)"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "def countPrimes(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2:\n        return 0\n    primes = [True] * n\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return sum(primes)\n\nif __name__ == '__main__':\n    print(countPrimes(100))"
    },
    {
      "rank": 97,
      "score": 7.0,
      "candidate": "import math\nimport operator\nimport timeit\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_primes(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef test():\n    start = timeit.default_timer()\n    print(count_primes(10**8))\n    print(\"Took %.6f\" % (timeit.default_timer() - start))\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "#\n# Problem 1: Write a python function to count the number of prime numbers less than a given non-negative number\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Write a function to count the number of prime numbers less than a given non-negative number.\n#\n# Example:\n#\n# num = 5\n#\n# Return: 3\n#\n# The three prime numbers are 1, 2, and 3.\n#\n# Note:\n#\n# 1 <= num <= 100\n#\n# Credits:\n# Special thanks to @mithmatt and @ts for adding this problem and creating all test cases.\n#\n\nclass Solution(object):\n    def countPrimes(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in xrange(2, num):\n            if i % 2 == 0:\n                continue\n            for j in xrange(3, num, i):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n        return count\n\n# Note:\n#\n# 1 <= num <= 100\n#\n# 1 <= x <= num\n#\n# Solution 1:\n#\n# int count = 0;\n# for (int x = 2; x <= num; x++)\n#     if (x % 2 == 0)\n#         continue;\n#     for (int y = 3; y <= num; y = y + x)\n#         if (x % y == 0)\n#             break;\n#     else\n#         count++;\n# return count;\n\n# Solution 2:\n#\n# int count = 0;\n# for (int x = 2; x <= num; x++)\n#     if (x % 2 == 0)\n#         continue;\n#     for (int y = 3; y <= num; y = y + x)\n#         if (x % y == 0)\n#             break;\n#     else:\n#         count++;\n# return count;"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Hint:\n# 1. If you want to use the primesieve module,\n#    import it and use primesieve.prime_sieve()\n#    To use primesieve with primesieve.prime_sieve()\n#    you need to write a custom primesieve.prime_sieve() that returns the primes\n#    in the range [2, x]\n\ndef count_primes(N):\n    \"\"\"\n    :param N: a non-negative integer\n    :return: a integer\n    \"\"\"\n\n    # your code here\n    return 0\n\nif __name__ == '__main__':\n    print(count_primes(10))"
    }
  ]
}