{
  "timestamp": "2025-09-14T19:34:31.551895",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 297,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/largest-product-of-two-sorted-arrays/\n\nclass Solution:\n    # @return an integer\n    def largestProduct(self, A, B):\n        if A is None or B is None or len(A) == 0 or len(B) == 0:\n            return 0\n        n = len(A)\n        m = len(B)\n        if n > m:\n            n, m = m, n\n        res = 1\n        for i in range(n):\n            for j in range(m):\n                res *= A[i]\n                res *= B[j]\n        return res\n\nif __name__ == '__main__':\n    A = [1,2,3,4,5]\n    B = [2,3,4,5,6]\n    print(Solution().largestProduct(A, B))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution(object):\n    def getLargest(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        fast = head\n        slow = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        if fast:\n            fast = fast.next\n            slow = slow.next\n        while fast:\n            fast = fast.next\n            slow = slow.next\n        result = slow\n        while result.next:\n            result = result.next\n            if result.next:\n                result = result.next\n        return result"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Your code here\n\ndef get_largest_products(arr1, arr2, number):\n    # write your code here\n    # for each element in arr1\n    # if it is bigger than arr2\n    # then add to the list\n    # else do nothing\n    largest_products = []\n    for i in range(0, len(arr1)):\n        if arr1[i] > arr2[0]:\n            largest_products.append(arr1[i] * arr2[0])\n        else:\n            pass\n    return largest_products\n\ndef get_largest_products_2(arr1, arr2, number):\n    # write your code here\n    # for each element in arr1\n    # if it is bigger than arr2\n    # then add to the list\n    # else do nothing\n    largest_products = []\n    for i in range(0, len(arr1)):\n        if arr1[i] > arr2[0]:\n            largest_products.append(arr1[i] * arr2[0])\n            largest_products.append(arr1[i] * arr2[1])\n        else:\n            pass\n    return largest_products\n\ndef get_largest_products_3(arr1, arr2, number):\n    # write your code here\n    # for each element in arr1\n    # if it is bigger than arr2\n    # then add to the list\n    # else do nothing\n    largest_products = []\n    for i in range(0, len(arr1)):\n        if arr1[i] > arr2[0]:\n            largest_products.append(arr1[i] * arr2[0])\n            largest_products.append(arr1[i] * arr2[1])\n            largest_products.append(arr1[i] * arr2[2])\n        else:\n            pass\n    return largest_products"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @param {integer} target\n    # @return {integer[]}\n    def largestProducts(self, nums1, nums2, target):\n        nums1.sort()\n        nums2.sort()\n        max_length = 0\n        max_value = 0\n        result = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                value = nums1[i] * nums2[j]\n                if value > max_value:\n                    max_value = value\n                    max_length = 1\n                else:\n                    max_length += 1\n                    if max_length >= target:\n                        result.append(max_value)\n                        max_value = 0\n                        max_length = 0\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestProducts([2, 3, 4], [5, 6, 7], 3))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def getMaxProduct(self, head: ListNode, k: int) -> ListNode:\n        curr = head\n        prev = None\n        while curr:\n            if prev:\n                curr.next = prev\n                prev = curr\n            else:\n                prev = curr\n            curr = curr.next\n        result = ListNode(0)\n        curr = head\n        while k > 0:\n            if curr:\n                if prev:\n                    curr.next = prev\n                    prev = curr\n                else:\n                    prev = curr\n                curr = curr.next\n                k -= 1\n            else:\n                break\n        return result.next"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param two lists\n    # @return a list of lists\n    def largestProduct(self, l1, l2):\n        result = []\n        curr = ListNode(0)\n        head = curr\n        while l1 and l2:\n            val = l1.val * l2.val\n            if val > head.val:\n                head.next = ListNode(val)\n                head = head.next\n            l1 = l1.next\n            l2 = l2.next\n        while l1:\n            val = l1.val * l2.val\n            if val > head.val:\n                head.next = ListNode(val)\n                head = head.next\n            l1 = l1.next\n        while l2:\n            val = l2.val * l1.val\n            if val > head.val:\n                head.next = ListNode(val)\n                head = head.next\n            l2 = l2.next\n        return result"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getLargestProduct(self, n, A, B):\n        \"\"\"\n        :type n: int\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        ans = 0\n        if not A:\n            return 0\n        if not B:\n            return 0\n        if not A or not B:\n            return 0\n        \n        a = A\n        b = B\n        \n        for i in range(n):\n            ans = max(ans, a.val * b.val)\n            if a.next:\n                a = a.next\n            if b.next:\n                b = b.next\n            else:\n                break\n        return ans\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getLargestProduct(5, [1, 2, 3], [2, 3, 4])"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def largestProducts(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        head, tail = None, None\n        res = []\n        while l1 and l2:\n            head = ListNode(0)\n            head.next = l1\n            tail = l1\n            l1 = l1.next\n            l2 = l2.next\n        while l1:\n            head.next = l1\n            l1 = l1.next\n        while l2:\n            head.next = l2\n            l2 = l2.next\n        res = [head.val]\n        head = head.next\n        while head:\n            res.append(head.val * head.next.val)\n            head = head.next.next\n        res.sort()\n        res.reverse()\n        return res[:self.num]"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def getLargestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: ListNode\n        :type nums2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if nums1 is None or nums2 is None:\n            return None\n        res = ListNode(-1)\n        curr = res\n        curr.next = ListNode(1)\n        curr.next.next = ListNode(1)\n        curr = curr.next.next\n        while nums1 is not None and nums2 is not None:\n            curr.val = nums1.val * nums2.val\n            curr.next = ListNode(1)\n            curr = curr.next\n            curr.next = ListNode(1)\n            curr = curr.next\n            nums1 = nums1.next\n            nums2 = nums2.next\n        while nums1 is not None:\n            curr.val = nums1.val * nums2.val\n            curr.next = ListNode(1)\n            curr = curr.next\n            nums1 = nums1.next\n        while nums2 is not None:\n            curr.val = nums1.val * nums2.val\n            curr.next = ListNode(1)\n            curr = curr.next\n            nums2 = nums2.next\n        return res.next\n\ns = Solution()\nprint(s.getLargestProduct([1,2,3], [4,5,6]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import collections\n\n\ndef largest_products(array1, array2, n):\n    \"\"\"\n    :type array1: List[int]\n    :type array2: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if len(array1) == 0 or len(array2) == 0:\n        return 0\n\n    # write your code here\n    lst1 = collections.Counter(array1)\n    lst2 = collections.Counter(array2)\n    count = 0\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] >= lst2[j]:\n                count += 1\n                if count >= n:\n                    return count\n    return 0\n\n\nif __name__ == '__main__':\n    array1 = [2, 3, 6, 7]\n    array2 = [3, 4, 6, 7]\n    n = 5\n    print(largest_products(array1, array2, n))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {integer} k\n    # @return {ListNode}\n    def getLargestN(self, head, k):\n        if not head:\n            return None\n        if k == 1:\n            return head\n        if k == 2:\n            return self.getLargestN2(head)\n        return self.getLargestN3(head, k)\n\n    def getLargestN2(self, head):\n        if not head:\n            return None\n        slow, fast = head, head\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next\n        return slow\n        \n    def getLargestN3(self, head, k):\n        if not head:\n            return None\n        if k == 1:\n            return head\n        if k == 2:\n            return self.getLargestN2(head)\n        if k == 3:\n            return self.getLargestN3(head, k-1)\n        slow, fast = head, head\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next\n        return slow"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# The method below is not right\n# Use the method in the following.\ndef largest_product(x, y):\n    \"\"\"\n    :type x: List[int]\n    :type y: List[int]\n    :rtype: int\n    \"\"\"\n    if not x or not y:\n        return 0\n    # Write your code here\n    length = len(x)\n    if not length or not len(y):\n        return 0\n    max_product = 0\n    for i in range(length):\n        product = x[i] * y[i]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n\n# The method below is not right\n# Use the method in the following.\ndef largest_product(x, y):\n    \"\"\"\n    :type x: List[int]\n    :type y: List[int]\n    :rtype: int\n    \"\"\"\n    if not x or not y:\n        return 0\n    # Write your code here\n    length = len(x)\n    if not length or not len(y):\n        return 0\n    max_product = 0\n    for i in range(length):\n        product = x[i] * y[i]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n\n# The method below is not right\n# Use the method in the following.\ndef largest_product(x, y):\n    \"\"\"\n    :type x: List[int]\n    :type y: List[int]\n    :rtype: int\n    \"\"\"\n    if not x or not y:\n        return 0\n    # Write your code here\n    length = len(x)\n    if not length or not len(y):\n        return 0\n    max_product = 0\n    for i in range(length):\n        product = x[i] * y[i]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n\n# The method below is not right\n# Use the method in the following.\ndef largest_product(x, y):\n    \"\"\"\n    :type x: List[int]\n    :type y: List"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/largest-product-from-two-sorted-lists/description/\n# algorithms\n# https://leetcode.com/problems/largest-product-from-two-sorted-lists/discuss/151853/Java-Python-JavaScript-O(1)-Solutions-O(1)\n# https://leetcode.com/problems/largest-product-from-two-sorted-lists/discuss/151857/Java-Python-JavaScript-O(1)-Solutions-O(1)\n# https://leetcode.com/problems/largest-product-from-two-sorted-lists/discuss/151854/Java-Python-JavaScript-O(1)-Solutions-O(1)\n# https://leetcode.com/problems/largest-product-from-two-sorted-lists/discuss/151855/Java-Python-JavaScript-O(1)-Solutions-O(1)\n# https://leetcode.com/problems/largest-product-from-two-sorted-lists/discuss/151856/Java-Python-JavaScript-O(1)-Solutions-O(1)\n# https://leetcode.com/problems/largest-product-from-two-sorted-lists/discuss/151859/Java-Python-JavaScript-O(1)-Solutions-O(1)\n# https://leetcode.com/problems/largest-product-from-two-sorted-lists/discuss/151860/Java-Python-JavaScript-O(1)-Solutions-O(1)\n# https://leetcode.com/problems/largest-product-from-two-sorted-lists/discuss/151862/Java-Python-JavaScript-O(1)-Solutions-O(1)\n# https://leetcode.com/problems/largest-product-from-two-sorted-lists/discuss/151863/Java-Python-JavaScript-O(1)-Solutions-O(1)\n# https://leetcode.com/problems/largest-product-from-two-s"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/largest-product-from-two-lists\n\n# Note: The input arrays will be given in strictly increasing order.\n#\n# Input Format:\n# The first line contains a single integer T, denoting the number of test cases.\n# Each test case consists of two lines. The first line contains two space-separated integers, denoting the size of the first list and the size of the second list respectively.\n# The second line contains T space-separated integers, denoting the first list and the second list.\n#\n# Output Format:\n# For each test case, output a single line containing the largest product found in the two lists.\n#\n# Constraints:\n# 1 <= T <= 50\n# 1 <= L[i] <= 100000\n# 1 <= R[i] <= 100000\n# All elements of L and R are in the range [0, 100000]\n\n# Time Complexity: O(T*log(n))\n# Space Complexity: O(1)\n\n# Example 1:\n# Input:\n# 2\n# 10 10\n# 3 3\n#\n# Output:\n# 3\n#\n# Explanation:\n# L = [10, 10], R = [3, 3], so the largest product is 3.\n# Example 2:\n# Input:\n# 2\n# 4 3\n# 5 3\n#\n# Output:\n# 6\n#\n# Explanation:\n# L = [4, 3], R = [5, 3], so the largest product is 6.\n# Example 3:\n# Input:\n# 5\n# 4 5\n# 3 1\n#\n# Output:\n# 5\n#\n# Explanation:\n# L = [4, 5], R = [3, 1], so the largest product is 5.\n# Example 4:\n# Input:\n# 3\n# 3 1\n# 4 1\n#\n# Output:\n# 4\n#\n# Explanation:\n# L = [3, 1], R = [4, 1], so the largest product is 4.\n# Example 5:\n# Input:\n# 3\n# 1 1\n# 1 2\n#\n# Output:\n# 3\n#\n# Explanation:\n# L ="
    },
    {
      "rank": 15,
      "score": 9.989610448658114,
      "candidate": "def getLargestProduct(first, second, k):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    largest_product = 0\n    for i in range(k):\n        for j in range(k):\n            if (i + j) <= len(first):\n                largest_product = max(largest_product, first[i] * second[j])\n    return largest_product\n\nclass Solution(object):\n    def largestProduct(self, first, second, k):\n        \"\"\"\n        :type first: List[int]\n        :type second: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # write your code here\n        largest_product = 0\n        for i in range(k):\n            for j in range(k):\n                if (i + j) <= len(first):\n                    largest_product = max(largest_product, first[i] * second[j])\n        return largest_product"
    },
    {
      "rank": 16,
      "score": 9.96646199810741,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getLargestProd(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not l1 or not l2:\n            return None\n\n        if l1.next and l2.next:\n            l1.next = self.getLargestProd(l1.next, l2.next)\n        if l1.next:\n            l2.next = self.getLargestProd(l1, l2.next)\n        if l1.val > l2.val:\n            return l1\n        else:\n            return l2"
    },
    {
      "rank": 17,
      "score": 9.934524872858905,
      "candidate": "# https://oj.leetcode.com/problems/largest-product-of-two-arrays/\n\n# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\nclass Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @return {integer}\n    def largestProduct(self, nums1, nums2):\n        # write your code here\n        if not nums1 or not nums2:\n            return 0\n        if len(nums1) < len(nums2):\n            nums1, nums2 = nums2, nums1\n        res = 0\n        for i in xrange(len(nums1)):\n            res = max(res, nums1[i] * nums2[i])\n        return res"
    },
    {
      "rank": 18,
      "score": 9.912679928279106,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def getLargestProduct(self, pList, n):\n        \"\"\"\n        :type pList: ListNode\n        :type n: int\n        :rtype: int\n        \"\"\"\n        pList.val *= n\n        pList.next = self.getLargestProduct(pList.next, n)\n        return pList.val\n\ndef test():\n    #pList = ListNode(10, ListNode(3, ListNode(15, ListNode(5))))\n    #pList = ListNode(2, ListNode(5, ListNode(3, ListNode(6))))\n    pList = ListNode(10, ListNode(3, ListNode(15, ListNode(5))))\n    n = 5\n    res = Solution().getLargestProduct(pList, n)\n    print(res)\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 19,
      "score": 9.886288635591674,
      "candidate": "# https://leetcode.com/problems/largest-product-of-two-arrays/\n\n\nclass Solution(object):\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        nums1.sort()\n        nums2.sort()\n        max_product = nums1[0] * nums2[0]\n        for i in range(1, len(nums1)):\n            for j in range(1, len(nums2)):\n                max_product = max(max_product, nums1[i] * nums2[j])\n        return max_product\n\n\nif __name__ == \"__main__\":\n    so = Solution()\n    print so.largestProduct([1, 2], [3, 4])\n    print so.largestProduct([3, 6, 7], [3, 4, 2])\n    print so.largestProduct([3, 4], [3, 4])"
    },
    {
      "rank": 20,
      "score": 9.846369540907558,
      "candidate": "import sys\n\ndef largest_product(l1, l2, n):\n    res = 1\n    for i in range(n):\n        res *= max(l1[i], l2[i])\n    return res\n\nif __name__ == \"__main__\":\n    n = int(sys.argv[1]) if len(sys.argv) > 1 else 1000000\n    l1 = list(map(int, sys.stdin.readline().split()))\n    l2 = list(map(int, sys.stdin.readline().split()))\n    print largest_product(l1, l2, n)"
    },
    {
      "rank": 21,
      "score": 9.836936616520118,
      "candidate": "# Your function should return a list of lists.\n# Example:\n# Input: [[1,2,3], [3,4,5], [2,3,5], [1,2,4]]\n# Output: [[2,3,5], [2,3,5], [3,4,5], [1,2,4]]\n\ndef find_largest_product(list_1, list_2):\n    result = []\n    for i in range(len(list_1)):\n        for j in range(len(list_2)):\n            product = list_1[i] * list_2[j]\n            if product > result[0]:\n                result = [[list_1[i], list_2[j]]]\n            elif product == result[0]:\n                result.append([list_1[i], list_2[j]])\n    return result\n\nprint find_largest_product([1, 2, 3], [3, 4, 5])"
    },
    {
      "rank": 22,
      "score": 9.812915271164513,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution:\n    def largestProducts(self, A, B):\n        \"\"\"\n        :type A: ListNode\n        :type B: ListNode\n        :rtype: int\n        \"\"\"\n        def largest(a, b):\n            if a is None:\n                return b\n            if b is None:\n                return a\n            if a.val < b.val:\n                return largest(a.next, b)\n            else:\n                return largest(a, b.next)\n        \n        ans = 0\n        head = None\n        while A is not None and B is not None:\n            a = largest(head, A)\n            b = largest(head, B)\n            ans = max(ans, a * b)\n            head = A.next\n            A = A.next\n            head = B.next\n            B = B.next\n        if A is not None:\n            ans = max(ans, A.val * B.val)\n        if B is not None:\n            ans = max(ans, A.val * B.val)\n        return ans"
    },
    {
      "rank": 23,
      "score": 9.803692619911272,
      "candidate": "# https://www.hackerrank.com/challenges/largest-product-from-two-sorted-lists/problem\n# Implement the solution for the given challenge\n\n# Example\n# https://www.hackerrank.com/challenges/largest-product-from-two-sorted-lists/submissions/code/44895901\n\n# Input Format\n# The first line contains two space-separated integers denoting the number of lists and the number of elements in each list.\n# The second line contains space-separated integers denoting the size of each list.\n# The third line contains the elements of the first list.\n# The next line contains the elements of the second list.\n# The last line contains a single integer denoting the number of elements in the two lists.\n# The number of lists and the number of elements in each list are both less than 100.\n# The second line and the last line are empty lines.\n\n# Output Format\n# Print the largest product of the two lists.\n\n# Input\n# 2\n# 5 2\n# 3 3 5\n# 4 4\n# 4 2 3\n# 1\n# 6\n# 6\n# Input\n# 2\n# 5 2\n# 3 3 5\n# 4 4\n# 4 2 3\n# 1\n# 6\n# 6\n# Input\n# 2\n# 5 2\n# 3 3 5\n# 4 4\n# 4 2 3\n# 1\n# 6\n# 6\n# Input\n# 2\n# 5 2\n# 3 3 5\n# 4 4\n# 4 2 3\n# 1\n# 6\n# 6\n# Input\n# 2\n# 5 2\n# 3 3 5\n# 4 4\n# 4 2 3\n# 1\n# 6\n# 6\n# Input\n# 2\n# 5 2\n# 3 3 5\n# 4 4\n# 4 2 3\n# 1\n# 6\n# 6\n# Input\n# 2\n# 5 2\n# 3 3 5\n# 4 4\n# 4 2 3\n# 1\n# 6\n# 6\n# Input\n# 2\n# 5 2\n# 3 3 5\n# 4 4\n# 4 2 3\n# 1\n# 6\n# 6\n# Input\n# 2\n# 5 2\n# 3 3 5\n# 4 4\n# 4"
    },
    {
      "rank": 24,
      "score": 9.796404602775567,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def largestProduct(self, num1, num2):\n        \"\"\"\n        :type num1: List[int]\n        :type num2: List[int]\n        :rtype: int\n        \"\"\"\n        def largestProduct(head):\n            if head is None:\n                return 0\n            if head.next is None:\n                return head.val\n            return max(largestProduct(head.next), head.val * largestProduct(head.next))\n        return largestProduct(ListNode(num1[0])).val * largestProduct(ListNode(num2[0])).val\n\nif __name__ == \"__main__\":\n    s = Solution()\n    # print s.largestProduct([1,2,3,4], [1,2,3,4])\n    print s.largestProduct([1,2], [1,2,3])\n    print s.largestProduct([1,2,3,4,5], [1,2,3,4])\n    print s.largestProduct([1,2,3,4,5,6], [1,2,3,4,5])"
    },
    {
      "rank": 25,
      "score": 9.765536855160976,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param a list of integers\n    # @param b list of integers\n    # @param target target number\n    # @return a list of lists of integers\n    def largestProduct(self, a, b, target):\n        if not a or not b:\n            return []\n\n        result = []\n        root = TreeNode(a[0] * b[0])\n        result.append([root])\n\n        for i in range(1, len(a)):\n            root.left = TreeNode(a[i] * b[i])\n            root.left.left = TreeNode(a[i-1] * b[i-1])\n            root.left.right = TreeNode(a[i-1] * b[i])\n            root.right = TreeNode(a[i] * b[i-1])\n            root.right.left = TreeNode(a[i] * b[i-2])\n            root.right.right = TreeNode(a[i] * b[i-2])\n            root = root.left\n\n        if target == 1:\n            return result\n\n        return self.largestProduct(result, b, target - 1)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    a = [2,3,6,7,10,12]\n    b = [2,3,5,7,10,12]\n    c = s.largestProduct(a, b, 10)\n    print(c)"
    },
    {
      "rank": 26,
      "score": 9.653100079016605,
      "candidate": "from collections import deque\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        # O(n*m)\n        # m = nums1.size + nums2.size\n        # n = max(nums1.size, nums2.size)\n        # ans = 1\n        # for i in range(n+1):\n        #     for j in range(m+1):\n        #         if i == 0:\n        #             ans = max(ans, nums1[i-1]*nums2[j-1])\n        #         else:\n        #             ans = max(ans, nums1[i-1]*nums2[j-1])\n        # return ans\n\n        # O(n*m)\n        # ans = 1\n        # for i in range(nums1.size):\n        #     for j in range(nums2.size):\n        #         ans = max(ans, nums1[i]*nums2[j])\n        # return ans\n\n        # O(n*m)\n        # ans = 1\n        # for i in range(nums1.size):\n        #     for j in range(nums2.size):\n        #         ans = max(ans, nums1[i]*nums2[j])\n        # return ans\n\n        # O(n*m)\n        # ans = 1\n        # for i in range(nums1.size):\n        #     for j in range(nums2.size):\n        #         if i == 0:\n        #             ans = max(ans, nums1[i-1]*nums2[j-1])\n        #         else:\n        #             ans = max(ans, nums1[i-1]*nums2"
    },
    {
      "rank": 27,
      "score": 9.590431926612766,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @param {integer} target\n    # @return {integer}\n    def largestProduct(self, nums1, nums2, target):\n        if not nums1 or not nums2:\n            return 0\n\n        ans = 0\n        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n\n        stack = []\n        for i in nums1:\n            while stack and stack[-1].val <= i:\n                stack.pop()\n            stack.append(i)\n        stack.append(0)\n\n        for i in nums2:\n            while stack and stack[-1].val <= i:\n                stack.pop()\n            stack.append(i)\n        stack.append(0)\n\n        while stack:\n            if stack[-1] > target:\n                ans = max(ans, stack[-1] * stack[-2])\n                stack.pop()\n            else:\n                stack.pop()\n\n        return ans\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.largestProduct([2, 3, 1], [1, 2, 3], 3))\n    print(s.largestProduct([1, 2, 1], [2, 3], 3))\n    print(s.largestProduct([1, 3], [1, 2, 3], 3))"
    },
    {
      "rank": 28,
      "score": 9.571228622793447,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def largestProduct(self, headA, headB):\n        \"\"\"\n        :type headA: ListNode\n        :type headB: ListNode\n        :rtype: int\n        \"\"\"\n        if not headA or not headB:\n            return 0\n\n        count = 0\n        curr_headA = headA\n        curr_headB = headB\n        while curr_headA and curr_headB:\n            curr_headA = curr_headA.next\n            curr_headB = curr_headB.next\n            count += curr_headA.val * curr_headB.val\n        return count\n\ns = Solution()\nheadA = ListNode(1)\nheadB = ListNode(3)\nheadA.next = headB\nheadB.next = ListNode(9)\nheadB.next = ListNode(15)\nheadA.next = headB\nheadB.next = ListNode(21)\nheadB.next = ListNode(25)\nheadA.next = headB\nheadB.next = ListNode(29)\nheadB.next = ListNode(33)\nheadA.next = headB\nheadB.next = ListNode(37)\nheadB.next = ListNode(41)\nheadA.next = headB\nheadB.next = ListNode(45)\nheadB.next = ListNode(49)\nheadA.next = headB\nheadB.next = ListNode(53)\nheadB.next = ListNode(57)\nheadA.next = headB\nheadB.next = ListNode(61)\nheadB.next = ListNode(65)\nheadA.next = headB\nheadB.next = ListNode(69)\nheadB.next = ListNode(73)\nheadA.next = headB\nheadB.next = ListNode(77)\nheadB.next = ListNode(81)\nheadA.next = headB\nheadB.next = ListNode(85"
    },
    {
      "rank": 29,
      "score": 9.431695664074866,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution(object):\n    def getLargest(self, headA, headB):\n        \"\"\"\n        :type headA: ListNode\n        :type headB: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not headA:\n            return headB\n        if not headB:\n            return headA\n        if headA.val > headB.val:\n            return self.getLargest(headB, headA)\n        else:\n            return self.getLargest(headA, headB)\n\nif __name__ == \"__main__\":\n    headA = ListNode(1)\n    headB = ListNode(2)\n    headA.next = ListNode(3)\n    headB.next = ListNode(4)\n    headA.next.next = ListNode(5)\n    headB.next.next = ListNode(6)\n    headA.next.next.next = ListNode(7)\n    headB.next.next.next = ListNode(8)\n    headA.next.next.next.next = ListNode(9)\n    headB.next.next.next.next = ListNode(10)\n    headA.next.next.next.next.next = ListNode(11)\n    headB.next.next.next.next.next = ListNode(12)\n    headA.next.next.next.next.next.next = ListNode(13)\n    headB.next.next.next.next.next.next = ListNode(14)\n    headA.next.next.next.next.next.next.next = ListNode(15)\n    headB.next.next.next.next.next.next.next.next = ListNode(16)\n    headA.next.next.next.next.next.next.next.next.next = ListNode(17)\n    headB.next.next.next.next.next.next.next.next.next.next = ListNode("
    },
    {
      "rank": 30,
      "score": 9.111264590867663,
      "candidate": "def get_largest_products(n, l1, l2):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists.\n    :param n: number of largest products\n    :param l1: list 1\n    :param l2: list 2\n    :return: List of lists\n    \"\"\"\n    # Create a dictionary for the largest product.\n    largest_products = {}\n    for i in range(n):\n        largest_products[i] = [1]\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            # If both lists are not empty, then the largest product is the product of both lists.\n            if l1[i] and l2[j]:\n                largest_products[i].append(l1[i] * l2[j])\n    return largest_products"
    },
    {
      "rank": 31,
      "score": 9.012961058027106,
      "candidate": "def largest_products(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: int\n    \"\"\"\n    # check l1 and l2\n    if l1 is None or l2 is None:\n        return 0\n\n    # sort l1 and l2\n    l1.sort()\n    l2.sort()\n\n    # calculate the number of largest\n    largest = 0\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] * l2[j] > largest:\n                largest = l1[i] * l2[j]\n\n    return largest\n\n\nif __name__ == \"__main__\":\n    print(largest_products([1, 2, 3, 4], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 32,
      "score": 8.779705287326276,
      "candidate": "from collections import Counter\n\ndef find_largest_product(arr1, arr2):\n\t\"\"\"\n\t:type arr1: list\n\t:type arr2: list\n\t:rtype: int\n\t\"\"\"\n\t\n\tif len(arr1) == 0 or len(arr2) == 0:\n\t\treturn 0\n\t\n\tcnt = Counter(arr1)\n\tcnt.update(arr2)\n\t\n\treturn max(cnt.values())\n\t\nif __name__ == \"__main__\":\n\tarr1 = [1,2,3,4,5]\n\tarr2 = [1,2,3,4,5]\n\tprint find_largest_product(arr1, arr2)"
    },
    {
      "rank": 33,
      "score": 8.740560612801593,
      "candidate": "def find_largest_product(L1, L2):\n    \"\"\"\n    L1: a list of integers\n    L2: a list of integers\n    Return: an integer\n    \"\"\"\n    # write your code here\n    if len(L1) == 0 or len(L2) == 0:\n        return 0\n\n    L1.sort()\n    L2.sort()\n    result = 0\n    for i in range(len(L1)):\n        for j in range(len(L2)):\n            result += L1[i] * L2[j]\n    return result\n\n\nif __name__ == '__main__':\n    L1 = [1, 2, 3, 4, 5, 6]\n    L2 = [1, 2, 3, 4, 5]\n    print find_largest_product(L1, L2)\n\n    L1 = [1, 2, 3, 4]\n    L2 = [1, 2, 3, 4]\n    print find_largest_product(L1, L2)\n\n    L1 = [1, 2, 3, 4, 5, 6]\n    L2 = [1, 2, 3, 4, 5]\n    print find_largest_product(L1, L2)\n\n    L1 = [1, 2, 3, 4]\n    L2 = [1, 2, 3, 4]\n    print find_largest_product(L1, L2)"
    },
    {
      "rank": 34,
      "score": 8.736953740506356,
      "candidate": "def largest_product(lst1, lst2):\n    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n    \n    count = 0\n    largest = 0\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] * lst2[j] > largest:\n                largest = lst1[i] * lst2[j]\n                count = 0\n            elif lst1[i] * lst2[j] == largest:\n                count += 1\n            if count == 2:\n                break\n    return largest\n\nif __name__ == \"__main__\":\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [1, 2, 3, 4, 5, 6]\n    print largest_product(lst1, lst2)"
    },
    {
      "rank": 35,
      "score": 8.720720946939492,
      "candidate": "def find_largest_products(arr1, arr2, target):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    n1, n2 = len(arr1), len(arr2)\n    max_prod = 0\n    for i in range(n1):\n        for j in range(n2):\n            if i == 0 or j == 0:\n                continue\n            prod = arr1[i] * arr2[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8]\n    target = 3\n    print(find_largest_products(arr1, arr2, target))"
    },
    {
      "rank": 36,
      "score": 8.710292413242792,
      "candidate": "def largest_product(nums1, nums2):\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n\n    res = 1\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            res *= max(nums1[i], nums2[j])\n\n    return res\n\nif __name__ == '__main__':\n    print largest_product([1, 2, 3], [4, 5, 6])"
    },
    {
      "rank": 37,
      "score": 8.664647908427158,
      "candidate": "def find_largest_products(l1, l2, k):\n    \"\"\"\n    Input: 2 lists and an integer\n    Output: the largest number of products from the 2 lists\n    \"\"\"\n    if not l1 or not l2 or len(l1) < k or len(l2) < k:\n        return 0\n\n    def largest_product(l):\n        if not l:\n            return 0\n        return max(largest_product(l[1:]), largest_product(l[:-1])) * l[0]\n\n    return largest_product(l1[:k])\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3]\n    l2 = [4, 5, 6]\n    k = 2\n    assert find_largest_products(l1, l2, k) == 15\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = [7, 8, 9, 10, 11, 12]\n    k = 3\n    assert find_largest_products(l1, l2, k) == 12"
    },
    {
      "rank": 38,
      "score": 8.629220720365252,
      "candidate": "def largest_product(list_1, list_2):\n\tif len(list_1) == 0 or len(list_2) == 0:\n\t\treturn 0\n\t\n\tlargest_product = list_1[0] * list_2[0]\n\tfor i in range(len(list_1)):\n\t\tif i == 0:\n\t\t\tproduct = list_1[i] * list_2[i]\n\t\telse:\n\t\t\tproduct = max(product, list_1[i] * list_2[i])\n\t\tif product > largest_product:\n\t\t\tlargest_product = product\n\tfor j in range(len(list_2)):\n\t\tif j == 0:\n\t\t\tproduct = list_1[j] * list_2[j]\n\t\telse:\n\t\t\tproduct = max(product, list_1[j] * list_2[j])\n\t\tif product > largest_product:\n\t\t\tlargest_product = product\n\treturn largest_product\n\ndef main():\n\tlist_1 = [1,2,3,4,5]\n\tlist_2 = [3,4,5,6,7]\n\tprint(largest_product(list_1, list_2))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 39,
      "score": 8.579695731048886,
      "candidate": "def largest_product(list_a, list_b, target_num):\n    \"\"\"\n    :type list_a: List[int]\n    :type list_b: List[int]\n    :type target_num: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(list_a)):\n        for j in range(len(list_b)):\n            if i == 0 and j == 0:\n                result += list_a[i] * list_b[j]\n            elif i == 0:\n                result += list_b[j] * list_a[i]\n            elif j == 0:\n                result += list_a[i] * list_b[j]\n            else:\n                result += list_a[i] * list_b[j]\n    return result\n\n\ndef main():\n    list_a = [3, 2, 4, 6, 1]\n    list_b = [1, 2, 3, 4, 5]\n    target_num = 3\n    print(largest_product(list_a, list_b, target_num))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.574546862427473,
      "candidate": "def largest_products(lst1, lst2, k):\n    \"\"\"\n    :type lst1: List[int]\n    :type lst2: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # your code here\n    return 0\n\nif __name__ == '__main__':\n    lst1 = [1,2,3,4,5]\n    lst2 = [2,3,4,5,6]\n    k = 4\n    print(largest_products(lst1, lst2, k))"
    },
    {
      "rank": 41,
      "score": 8.56814702868909,
      "candidate": "def find_largest_product(numbers1, numbers2):\n    # write your code here\n    products = [0] * n\n    for i in range(0, n):\n        products[i] = 1\n    for i in range(0, len(numbers1)):\n        for j in range(0, len(numbers2)):\n            products[i] *= numbers1[i] * numbers2[j]\n    return products\n\nif __name__ == '__main__':\n    numbers1 = [1,2,3]\n    numbers2 = [4,5,6]\n    print(find_largest_product(numbers1, numbers2))"
    },
    {
      "rank": 42,
      "score": 8.538424342429204,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef find_largest_products(n, arr1, arr2):\n    max_products = 0\n    for i in range(0, len(arr1)):\n        for j in range(0, len(arr2)):\n            product = arr1[i] * arr2[j]\n            if product > max_products:\n                max_products = product\n    return max_products\n\ndef main():\n    n = int(input())\n    arr1 = []\n    arr2 = []\n    for i in range(0, n):\n        arr1.append(int(input()))\n    for i in range(0, n):\n        arr2.append(int(input()))\n    print(find_largest_products(n, arr1, arr2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 8.506137025672833,
      "candidate": "def findLargestProduct(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    return max(list1) * max(list2)\n\nif __name__ == \"__main__\":\n    print(findLargestProduct([1, 2, 3], [2, 3, 4]))\n    print(findLargestProduct([1, 2, 3], [1, 2, 3]))\n    print(findLargestProduct([1, 2, 3, 4], [2, 3, 4, 5]))"
    },
    {
      "rank": 44,
      "score": 8.475781389010185,
      "candidate": "from collections import defaultdict\n\ndef find_largest_products(numbers_1, numbers_2):\n    largest_products = defaultdict(int)\n    for number in numbers_1:\n        for number_2 in numbers_2:\n            largest_products[number * number_2] += 1\n    return [largest_products[i] for i in sorted(largest_products)]\n\nif __name__ == '__main__':\n    numbers_1 = [1, 2, 3, 4, 5, 6, 7]\n    numbers_2 = [1, 2, 3, 4, 5, 6]\n    print(find_largest_products(numbers_1, numbers_2))"
    },
    {
      "rank": 45,
      "score": 8.468754598132097,
      "candidate": "def largest_product(first_list, second_list, target_number):\n    \"\"\"\n    :type first_list: List[int]\n    :type second_list: List[int]\n    :type target_number: int\n    :rtype: int\n    \"\"\"\n    if len(first_list) == 0 or len(second_list) == 0:\n        return 0\n\n    largest_product = 0\n    for i in range(0, len(first_list)):\n        for j in range(0, len(second_list)):\n            if i == 0 or j == 0:\n                if first_list[i] * second_list[j] > largest_product:\n                    largest_product = first_list[i] * second_list[j]\n            else:\n                if first_list[i] * second_list[j] > largest_product:\n                    largest_product = first_list[i] * second_list[j]\n\n    return largest_product"
    },
    {
      "rank": 46,
      "score": 8.439585443538789,
      "candidate": "import sys\n\ndef largest_product(a, b, size):\n    # write your code here\n    max_val = 0\n    max_val_index = 0\n    for i in range(0, size):\n        for j in range(0, size):\n            val = a[i] * b[j]\n            if val > max_val:\n                max_val = val\n                max_val_index = (i, j)\n    return max_val, max_val_index\n\ndef main():\n    a = [2, 3, 4, 5]\n    b = [1, 2, 3, 4, 5]\n    size = 3\n    max_val, max_val_index = largest_product(a, b, size)\n    print max_val, max_val_index\n    \nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.394669296022817,
      "candidate": "def largest_product(l1, l2, k):\n    \"\"\"\n    Input:\n    l1: A list of integers\n    l2: A list of integers\n    k: The number of largest products to be found.\n    Output:\n    The largest product.\n    \"\"\"\n    res = 0\n    for i in range(k):\n        res = max(res, l1[i] * l2[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    k = 2\n    print largest_product(l1, l2, k)\n    l1 = [1, 2, 3]\n    l2 = [1, 2, 3, 4, 5]\n    k = 4\n    print largest_product(l1, l2, k)\n    l1 = [1, 2, 3]\n    l2 = [1, 2]\n    k = 3\n    print largest_product(l1, l2, k)"
    },
    {
      "rank": 48,
      "score": 8.360149229544044,
      "candidate": "#!/bin/python\n\ndef getLargest(numbers, numbers2):\n    # Get the largest number\n    max_number = max(numbers)\n    max_number2 = max(numbers2)\n    # Calculate the largest product\n    largest_product = max_number * max_number2\n    # Print the largest product\n    print largest_product\n\ndef main():\n    # Get the list of numbers\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # Get the list of numbers\n    numbers2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # Get the largest number\n    max_number = max(numbers)\n    max_number2 = max(numbers2)\n    # Calculate the largest product\n    largest_product = max_number * max_number2\n    # Print the largest product\n    print largest_product\n    # Print the largest product\n    print largest_product\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.359993076429392,
      "candidate": "def largest_product(numbers, products):\n    if len(numbers)!= len(products):\n        return 0\n    return max(\n        [max(products[i] * products[j], 0) for i in range(len(products)) for j in range(i + 1, len(products))]\n    )\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6]\n    products = [1, 1, 2, 6, 24]\n    print(largest_product(numbers, products))"
    },
    {
      "rank": 50,
      "score": 8.339434694518864,
      "candidate": "from collections import deque\n\ndef largest_product_from_two_lists(a, b, k):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return max(a[0], b[0])\n    \n    d = deque(max(a[0], b[0]), max(a[-1], b[-1]))\n    ans = 1\n    for i in range(len(a)):\n        if i >= k:\n            break\n        for j in range(len(b)):\n            if j >= k:\n                break\n            ans *= d.popleft() * d.popleft()\n            ans *= a[i] * b[j]\n            d.append(a[i])\n            d.append(b[j])\n    return ans\n\nif __name__ == '__main__':\n    print(largest_product_from_two_lists([1, 2, 3], [2, 3, 4], 2))"
    },
    {
      "rank": 51,
      "score": 8.326486071669247,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getLargestProduct(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: int\n        \"\"\"\n        ans = 0\n        curr = ListNode(1)\n        curr.next = l1\n        head = curr\n        while l1 and l2:\n            ans = max(ans, curr.next.val * l1.val * l2.val)\n            curr.next = ListNode(l1.val * l2.val)\n            curr.next.next = l1.next\n            curr.next.next.next = l2.next\n            l1 = l1.next\n            l2 = l2.next\n        if l1:\n            curr.next = l1\n        if l2:\n            curr.next = l2\n        return ans\n\n# Note:\n# https://leetcode.com/problems/largest-product-of-two-lists/discuss/134527/C++-Dynamic-Programming-with-2-Nodes"
    },
    {
      "rank": 52,
      "score": 8.30581482349457,
      "candidate": "def findLargestProduct(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums1) == 0 or len(nums2) == 0:\n        return 0\n\n    largest_product = 0\n    current_max = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            if product > current_max:\n                current_max = product\n                largest_product = product\n    return largest_product\n\n\n# Your code here\n\nif __name__ == \"__main__\":\n    nums1 = [1,2,3]\n    nums2 = [2,3,4]\n    nums3 = [4,5,6]\n    print findLargestProduct(nums1, nums2)\n    print findLargestProduct(nums1, nums3)"
    },
    {
      "rank": 53,
      "score": 8.275433665507862,
      "candidate": "# import\nimport collections\n\n# custom\ndef find_largest_products(lst1, lst2, n):\n    \n    # make list of tuples\n    lst = [(x, y) for x in lst1 for y in lst2]\n    \n    # sort by size\n    lst.sort(key=lambda x: (len(x[0]), len(x[1]), x[0][0] * x[0][1], x[1][0] * x[1][1]))\n    \n    # print\n    for x in lst[:n]:\n        print('{} * {} = {}'.format(x[0][0], x[0][1], x[1][0] * x[1][1]))\n    \n    # return\n    return\n\n# run\nfind_largest_products([1, 2, 3], [4, 5, 6], 3)"
    },
    {
      "rank": 54,
      "score": 8.27194171882014,
      "candidate": "def largest_product_of_two_lists(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: int\n    \"\"\"\n    return max(largest_product(l1), largest_product(l2))\n\ndef largest_product(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: int\n    \"\"\"\n    if not l:\n        return 0\n\n    if len(l) == 1:\n        return l[0]\n\n    p, result = 1, l[0]\n    for i in range(1, len(l)):\n        p *= l[i]\n        result = max(result, p)\n\n    return result"
    },
    {
      "rank": 55,
      "score": 8.263811908754011,
      "candidate": "def largest_product(n, l1, l2):\n    \"\"\"\n    :type n: int\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            result = max(result, l1[i] * l2[j])\n    return result\n\nprint(largest_product(2, [2,3], [1,4]))\nprint(largest_product(3, [1,2,3], [1,2,3]))\nprint(largest_product(4, [1,2,3], [1,2,3]))\nprint(largest_product(2, [1,2], [1,2,3]))"
    },
    {
      "rank": 56,
      "score": 8.257867165865932,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def __init__(self):\n        self.cache = {}\n\n    def getLargestProduct(self, head1, head2):\n        \"\"\"\n        :type head1: ListNode\n        :type head2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head1 is None:\n            return head2\n        if head2 is None:\n            return head1\n        if head1.val == head2.val:\n            return self.getLargestProduct(head1.next, head2.next)\n        if head1.val > head2.val:\n            return self.getLargestProduct(head1, head2.next)\n        return self.getLargestProduct(head2, head1.next)\n\n    def getLargestProduct(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return head\n        if head.next is None:\n            return head\n        if head.next.next is None:\n            return head\n        if head.val > head.next.val:\n            return self.getLargestProduct(head.next)\n        return self.getLargestProduct(head.next.next)\n\nif __name__ == '__main__':\n    head1 = ListNode(2)\n    head1.next = ListNode(4)\n    head1.next.next = ListNode(6)\n    head2 = ListNode(2)\n    head2.next = ListNode(4)\n    head2.next.next = ListNode(6)\n    head2.next.next.next = ListNode(4)\n    head2.next.next.next.next = ListNode(4)\n    head2.next.next.next.next.next = ListNode(4)\n    head2.next.next.next.next.next.next = ListNode(4)\n    head2.next.next"
    },
    {
      "rank": 57,
      "score": 8.227830064041862,
      "candidate": "def find_largest_products(list_1, list_2, n):\n    # write your code here\n    res = []\n    for i in range(n):\n        res.append(list_1[i] * list_2[i])\n    return res\n\ndef main():\n    list_1 = [1, 2, 3, 4]\n    list_2 = [1, 2, 3]\n    print(find_largest_products(list_1, list_2, 2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.18530052942235,
      "candidate": "import time\n\n\ndef get_largest_product(n, l1, l2):\n    l1_max = [0] * n\n    l2_max = [0] * n\n    for i in range(0, n):\n        for j in range(i, n):\n            if l1[i] * l2[j] > l1_max[i] * l2_max[j]:\n                l1_max[i] = l1[i]\n                l2_max[i] = l2[i]\n    return l1_max, l2_max\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n    l1_max, l2_max = get_largest_product(11, l1, l2)\n\n    print('The largest product from l1 is {} and l2 is {}'.format(l1_max, l2_max))\n    print('Elapsed time: {}'.format(time.time() - start_time))"
    },
    {
      "rank": 59,
      "score": 8.142326136084295,
      "candidate": "class Solution:\n    # @param nums1, a list of integers\n    # @param nums2, a list of integers\n    # @param k, an integer\n    # @return a list of integers\n    def largestProduct(self, nums1, nums2, k):\n        if not nums1 or not nums2:\n            return []\n        if not nums1 or not nums2:\n            return []\n\n        res = []\n        for i in xrange(len(nums1)):\n            res.append(max(nums1[i], nums2[i]))\n        for i in xrange(k-1, -1, -1):\n            for j in xrange(len(nums1)):\n                if j+i < len(nums1):\n                    res[j] *= nums1[j+i]\n                    if j+i+1 < len(nums1):\n                        res[j] = max(res[j], res[j+1]*nums1[j+i+1])\n                if j+i < len(nums2):\n                    res[j] *= nums2[j+i]\n                    if j+i+1 < len(nums2):\n                        res[j] = max(res[j], res[j+1]*nums2[j+i+1])\n        return res"
    },
    {
      "rank": 60,
      "score": 8.063668510020321,
      "candidate": "def find_largest_products(n, nums1, nums2):\n    \"\"\"\n    :type n: int\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: int\n    \"\"\"\n    \n    # TODO: write your code here\n    \n    if not nums1 or not nums2:\n        return 0\n    \n    nums1.sort()\n    nums2.sort()\n    \n    result = 0\n    \n    for i in range(0, n):\n        result = max(result, nums1[i] * nums2[i])\n    \n    return result\n    \n    \nprint(find_largest_products(4, [1, 2, 3, 4], [2, 3, 5, 6]))"
    },
    {
      "rank": 61,
      "score": 8.004940730454877,
      "candidate": "import heapq\n\ndef find_largest_products(numbers_list1, numbers_list2):\n    heap = []\n    for number in numbers_list1:\n        heapq.heappush(heap, (number, number))\n    for number in numbers_list2:\n        heapq.heappush(heap, (number, number))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n        if len(heap) == 1:\n            break\n        for i in range(2, len(heap)):\n            heapq.heappush(heap, (heapq.heappop(heap)[1], heapq.heappop(heap)[0]))\n    return result\n\nif __name__ == '__main__':\n    numbers_list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    numbers_list2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    print(find_largest_products(numbers_list1, numbers_list2))"
    },
    {
      "rank": 62,
      "score": 7.966297466841009,
      "candidate": "def largest_products(numbers, products):\n    \"\"\"\n    :type numbers: List[int]\n    :type products: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(numbers)):\n        for j in range(len(products)):\n            if numbers[i] * products[j] > result:\n                result = numbers[i] * products[j]\n    return result"
    },
    {
      "rank": 63,
      "score": 7.917579063116882,
      "candidate": "from collections import defaultdict\n\ndef get_largest_products(numbers, products):\n    largest_products = defaultdict(int)\n    for number in numbers:\n        for product in products:\n            if number * product > 0:\n                largest_products[number * product] += 1\n    for number in largest_products:\n        largest_products[number] = max(largest_products[number], largest_products[number * number])\n    return list(largest_products.items())\n\nprint(get_largest_products([1,2,3], [2,3,4]))"
    },
    {
      "rank": 64,
      "score": 7.8234740247397525,
      "candidate": "import sys\n\ndef largest_product(arr1, arr2, n):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    numbers = []\n    for i in range(len(arr1)):\n        numbers.append(arr1[i] * arr2[i])\n    sorted_numbers = sorted(numbers)\n    result = 1\n    for i in range(n):\n        result *= sorted_numbers[i]\n    return result\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [2, 3, 4, 5]\n    n = 3\n    print(largest_product(arr1, arr2, n))"
    },
    {
      "rank": 65,
      "score": 7.80974998851386,
      "candidate": "import heapq\n\ndef get_largest_products(list_1, list_2, n):\n    \"\"\"\n    :type list_1: List[int]\n    :type list_2: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    heap = []\n    for i in range(len(list_1)):\n        heapq.heappush(heap, (list_1[i] * list_2[i], i))\n        while len(heap) > n:\n            heapq.heappop(heap)\n\n    return sum(heap)\n\nif __name__ == \"__main__\":\n    assert get_largest_products([1, 2, 3, 4], [1, 2, 3, 4], 4) == 24\n\n    assert get_largest_products([1, 2, 3, 4], [1, 2, 3, 4], 5) == 36\n\n    assert get_largest_products([1, 2, 3, 4], [1, 2, 3, 4], 6) == 144"
    },
    {
      "rank": 66,
      "score": 3.547625279534902,
      "candidate": "# https://leetcode.com/problems/largest-product-of-two-integers/description/\n# Given two lists, write a function to find the largest product of two numbers.\n\n# Example 1:\n# Input:\n# [1,2,3]\n# [4,5,6]\n# Output: 24\n# Explanation:\n# The largest product is 24, which is obtained by the two numbers 3 and 6.\n# Example 2:\n# Input:\n# [1,2,3]\n# [4,5]\n# Output: 6\n# Explanation:\n# The largest product is 6, which is obtained by the two numbers 3 and 5.\n# Note:\n# The length of both given lists is in range [1, 100].\n# The given lists may contain duplicates, and they are all unique.\n\n# 2017.05.15\n# Brute Force\nclass Solution(object):\n    def getLargestProduct(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: int\n        \"\"\"\n        # Note:\n        # In this problem, we can use O(N^2) space,\n        # and in the worst case, O(N^3) time.\n        max = min(arr1[0] * arr2[0], arr1[0] * arr2[1])\n        max = max if arr1[1] * arr2[0] > max else max\n        max = max if arr1[1] * arr2[1] > max else max\n\n        for i in range(1, len(arr1)):\n            max = max if arr1[i] * arr2[i] > max else max\n        return max"
    },
    {
      "rank": 67,
      "score": 3.5172629156595305,
      "candidate": "# Your code should work for both lists\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param A list of ListNode\n    # @param target target value\n    # @return a ListNode\n    def largestProduct(self, A, target):\n        if not A:\n            return None\n        head = ListNode(0)\n        head.next = A[0]\n        tail = head\n        for i in range(1, len(A)):\n            p = self.largestProduct(A[i:], target)\n            if p:\n                while p.next:\n                    tail.next = p.next\n                    p = p.next\n                    tail = tail.next\n            else:\n                tail.next = A[i]\n                tail = tail.next\n        return head.next"
    },
    {
      "rank": 68,
      "score": 3.512977069122544,
      "candidate": "# https://leetcode.com/problems/largest-product-of-two-numbers/description/\n# Given two lists, write a function to find the largest product of two numbers in the lists.\n#\n# Example 1:\n# Input: [1,3,5,10,15], [2,4,6,12,20]\n# Output: 24\n# Explanation: [(1*2)+(3*4)] * [(5*6)+(10*12)] = 24\n# Example 2:\n# Input: [1,2,3,4,5], [1,2,3,4,5]\n# Output: 6\n# Explanation: [(1*1)+(2*2)+(3*3)+(4*4)+(5*5)] = 6\n# Example 3:\n# Input: [1,2,3], [1,2,3,4]\n# Output: 24\n# Explanation: [(1*1)+(2*2)+(3*3)] * [(4*4)+(3*3)] = 24\n\nclass Solution(object):\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums1 or not nums2:\n            return 0\n        max_product = min(max(nums1), max(nums2))\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    max_product *= nums1[i]\n        return max_product\n\n# Note:\n#\n# 1. The input lists can be arbitrarily long.\n# 2. All the numbers in the input lists are in the range [0, 10^9].\n# 3. All the numbers in the input lists are distinct."
    },
    {
      "rank": 69,
      "score": 3.360849832873583,
      "candidate": "# https://leetcode.com/problems/largest-product-of-two-integers/discuss/2937/C%2B%2B-Python-Solution-with-O(n)-Time-O(1)-Space\n\nclass Solution(object):\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        max_value = 0\n        max_index = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    if max_value < nums1[i] * nums2[j]:\n                        max_value = nums1[i] * nums2[j]\n                        max_index = i\n                        max_index = j\n        return max_value"
    },
    {
      "rank": 70,
      "score": 3.339025746686511,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def largestProducts(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums1 or not nums2:\n            return 0\n        ans = 0\n        head1 = ListNode(0)\n        head2 = ListNode(0)\n        head = head1\n        for i in xrange(len(nums1)):\n            p = 1\n            while nums1[i] and nums2[i]:\n                p *= nums1[i]\n                p *= nums2[i]\n            if p > ans:\n                ans = p\n                head = head2\n            elif p < ans:\n                ans = p\n                head = head1\n            head.next = ListNode(p)\n            head = head.next\n        return ans"
    },
    {
      "rank": 71,
      "score": 3.320390741195726,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def largestProduct(self, headA, headB):\n        \"\"\"\n        :type headA: ListNode\n        :type headB: ListNode\n        :rtype: int\n        \"\"\"\n        p = headA\n        q = headB\n        res = 0\n        while p and q:\n            if p.val > q.val:\n                res = max(res, p.val * q.val)\n            p = p.next\n            q = q.next\n        if p:\n            res = max(res, p.val * q.val)\n        if q:\n            res = max(res, p.val * q.val)\n        return res"
    },
    {
      "rank": 72,
      "score": 3.2876658765313285,
      "candidate": "class Solution(object):\n    def largestProducts(self, num, A, B):\n        \"\"\"\n        :type num: int\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i in range(num):\n            ret += max(A[i] * B[i], A[i] * max(B[i], B[i+1]))\n        return ret\n\n\nif __name__ == \"__main__\":\n    assert Solution().largestProducts(2, [1, 2, 3], [2, 1, 1]) == 6"
    },
    {
      "rank": 73,
      "score": 3.1898960152550875,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getLargestProduct(self, headA, headB):\n        \"\"\"\n        :type headA: ListNode\n        :type headB: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not headA or not headB:\n            return None\n        preA = headA\n        preB = headB\n        while preA and preB:\n            a = preA.val * preB.val\n            preA = preA.next\n            preB = preB.next\n            if a > 0:\n                preA = headA\n                preB = headB\n            else:\n                break\n        while preA:\n            a = preA.val * preB.val\n            preA = preA.next\n            preB = preB.next\n            if a > 0:\n                preA = headA\n                preB = headB\n            else:\n                break\n        while preA and preB:\n            a = preA.val * preB.val\n            preA = preA.next\n            preB = preB.next\n            if a > 0:\n                preA = headA\n                preB = headB\n            else:\n                break\n        preA = headA\n        preB = headB\n        while preA and preB:\n            a = preA.val * preB.val\n            preA = preA.next\n            preB = preB.next\n            if a > 0:\n                preA = headA\n                preB = headB\n            else:\n                break\n        while preA and preB:\n            a = preA.val * preB.val\n            preA = preA.next\n            preB = preB.next\n            if a > 0:\n                preA = headA\n                preB = headB\n            else:\n                break\n        while preA and preB:\n            a = preA.val * preB.val\n            preA = preA.next\n            preB ="
    },
    {
      "rank": 74,
      "score": 3.1738499535539315,
      "candidate": "import collections\n\ndef largest_products(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums1) == 0 or len(nums2) == 0:\n        return 0\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    result = 0\n    for i in range(len(nums1)):\n        result = max(result, nums1[i] * nums2[i])\n    return result\n\n\nclass Solution(object):\n    def largestProducts(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        res = collections.defaultdict(int)\n        for i in range(len(nums1)):\n            res[nums1[i]] += nums2[i]\n        max_val = max(res.values())\n        return max_val\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.largestProducts([1, 2, 3], [1, 2, 3, 4])\n    print s.largestProducts([], [1, 2, 3])\n    print s.largestProducts([], [])"
    },
    {
      "rank": 75,
      "score": 3.1150628883808897,
      "candidate": "class Solution(object):\n    def getMaxProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        # O(n^2)\n        # find the max product\n        maxProduct = -1\n        # find the max product in the two lists\n        for i in range(0, len(nums1)):\n            for j in range(0, len(nums2)):\n                if i == j:\n                    maxProduct = max(maxProduct, nums1[i]*nums2[j])\n                elif j > i:\n                    maxProduct = max(maxProduct, nums1[i]*nums2[j])\n        return maxProduct"
    },
    {
      "rank": 76,
      "score": 3.113429389288178,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def largestProduct(self, headA, headB):\n        \"\"\"\n        :type headA: ListNode\n        :type headB: ListNode\n        :rtype: int\n        \"\"\"\n        if headA is None or headB is None:\n            return 0\n        \n        maxProduct = 0\n        a = headA\n        b = headB\n        while a and b:\n            maxProduct = max(maxProduct, a.val * b.val)\n            a = a.next\n            b = b.next\n        return maxProduct"
    },
    {
      "rank": 77,
      "score": 3.1099865664083457,
      "candidate": "def largest_products(L, R, k):\n    \"\"\"\n    :type L: List[int]\n    :type R: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(k):\n        res = max(res, largest_product(L, R))\n    return res\n\ndef largest_product(L, R):\n    \"\"\"\n    :type L: List[int]\n    :type R: List[int]\n    :rtype: int\n    \"\"\"\n    if not L or not R:\n        return 0\n    L.sort()\n    R.sort()\n    return max(L[-1]*R[-1], L[-1]*R[-2])\n\n# Your LargestProducts function should return the largest product of its arguments.\n# If there are multiple solutions, return the largest product from them.\n#\n# If there is no solution, return 0.\n#\n# The input lists will contain numbers from 1 to 9.\n#\n# Example 1:\n#\n# Input: L=[2,3,4], R=[3,4,5], k=2\n# Output: 6\n# Explanation:\n# L=[2,3,4] is a subsequence of R=[3,4,5].\n# So, the largest product is 6.\n# Note that L=[2,3,4] and R=[3,4,5] are not a subsequence of any other subsequence of R.\n# Example 2:\n#\n# Input: L=[1,2,3,4,5,6], R=[1,2,3,4,5,6], k=2\n# Output: 120\n# Explanation:\n# L=[1,2,3,4,5,6] is a subsequence of R=[1,2,3,4,5,6].\n# So, the largest product is 120.\n# Note that L=[1,2,3,4,5,6] and R=[1,2,3,4,5,6] are not a subsequence of any other subsequence of R.\n# Example 3:\n#\n# Input: L=[1,2,"
    },
    {
      "rank": 78,
      "score": 3.1036420969726017,
      "candidate": "# https://leetcode.com/problems/largest-product-of-two-numbers/description/\n\n# DP\nclass Solution:\n    # @param {integer} n\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @return {integer}\n    def largestProduct(self, n, nums1, nums2):\n        if n == 0:\n            return 0\n        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) < len(nums2):\n            return self.largestProduct(n, nums1, nums2)\n        if len(nums1) == 1 or len(nums2) == 1:\n            return max(nums1[0] * nums2[0], nums1[0] * nums2[0])\n        # dp[i][j] = max of dp[i - 1][j] + dp[i][j - 1]\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = max(dp[i - 1][j] + dp[i][j - 1], dp[i - 1][j - 1])\n        return dp[0][0]\n\n# https://leetcode.com/problems/largest-product-of-two-numbers/discuss/221249/C++-Code\nclass Solution2:\n    # @param {integer} n\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @return {integer}\n    def largestProduct(self, n, nums1, nums2):\n        if n == 0:\n            return 0\n        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 or len(nums2) == 1:"
    },
    {
      "rank": 79,
      "score": 3.0388229063984533,
      "candidate": "# https://leetcode.com/problems/largest-number-of-products-in-a-list/discuss/226517/Python-Cython-Solution\n\nclass Solution(object):\n    def __init__(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        \"\"\"\n        self.nums1 = nums1\n        self.nums2 = nums2\n        self.max_size = max(len(nums1), len(nums2))\n        self.max_result = 0\n\n    def largest_products(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        if len(self.nums1) < self.max_size:\n            return self.largest_products_1(self.nums1, self.nums2)\n        elif len(self.nums2) < self.max_size:\n            return self.largest_products_2(self.nums1, self.nums2)\n        else:\n            return self.max_result\n\n    def largest_products_1(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        self.max_result = -1\n        self.largest_products_1(nums1, nums2, 0, len(nums1) - 1)\n        return self.max_result\n\n    def largest_products_2(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        self.max_result = -1\n        self.largest_products_2(nums1, nums2, 0, len(nums1) - 1)\n        return self.max_result\n\n    def largest_products_1(self, nums1, nums2, start1, end1):\n        \"\"\"\n        :type nums1: List[int]"
    },
    {
      "rank": 80,
      "score": 3.0321162717874257,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getLargestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        # if len(nums1) == 0 or len(nums2) == 0:\n        #     return 0\n        # if len(nums1) < len(nums2):\n        #     return self.getLargestProduct(nums2, nums1)\n        #\n        # # if len(nums2) < len(nums1):\n        # #     return self.getLargestProduct(nums1, nums2)\n        #\n        # # if len(nums1) == len(nums2):\n        # #     max_product = nums1[0] * nums2[0]\n        # #     for i in range(1, len(nums1)):\n        # #         max_product = max(max_product, nums1[i] * nums2[i])\n        # #\n        # #     return max_product\n        #\n        # max_product = nums1[0] * nums2[0]\n        # for i in range(1, len(nums1)):\n        #     max_product = max(max_product, nums1[i] * nums2[i])\n        #\n        # for j in range(1, len(nums2)):\n        #     max_product = max(max_product, nums1[0] * nums2[j])\n        #\n        # return max_product\n        #\n        # max_product = nums1[0] * nums2[0]\n        # for i in range(1, len(nums1)):\n        #     max_product = max(max_product, nums1[i] * nums2[i])"
    },
    {
      "rank": 81,
      "score": 3.001789709824861,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    # @param {ListNode} headA\n    # @param {ListNode} headB\n    # @param {integer} k\n    # @return {ListNode}\n    def largestProducts(self, headA, headB, k):\n        if headA == None or headB == None or headA == headB or k == 0:\n            return None\n        nodeA = headA\n        nodeB = headB\n        headA = headA.next\n        headB = headB.next\n        if k == 1:\n            return nodeA.next if nodeA!= None else nodeB.next if nodeB!= None else None\n        \n        nodeA = nodeA.next\n        nodeB = nodeB.next\n        headA = headA.next\n        headB = headB.next\n        \n        while headA!= None and headB!= None:\n            nodeA = nodeA.next\n            nodeB = nodeB.next\n            headA = headA.next\n            headB = headB.next\n            \n            if k == 1:\n                return nodeA.next if nodeA!= None else nodeB.next if nodeB!= None else None\n            \n            nodeA = nodeA.next\n            nodeB = nodeB.next\n            \n            headA = headA.next\n            headB = headB.next\n            \n            k -= 1\n        \n        if headA!= None:\n            return headA\n        else:\n            return headB"
    },
    {
      "rank": 82,
      "score": 2.974796457446883,
      "candidate": "# https://leetcode.com/problems/largest-product-of-two-numbers/discuss/78857/Python-solution-using-recursion-and-stack\ndef largest_product(l1, l2):\n    if not l1 or not l2:\n        return 0\n    if len(l1) == 1:\n        return max(l2, default=0) * l1[0]\n    if len(l2) == 1:\n        return max(l1, default=0) * l2[0]\n    return max(largest_product(l1[1:], l2[1:]), largest_product(l1[1:], l2[:-1])) * l1[0] * l2[-1]\n\nclass Solution:\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        stack = [0]\n        for i in range(min(len(nums1), len(nums2))):\n            nums1[i] *= nums2[i]\n            stack[-1] += nums1[i]\n        if len(nums1) < len(nums2):\n            stack[-1] *= nums2[-1]\n        return stack[-1]"
    },
    {
      "rank": 83,
      "score": 2.935019358167664,
      "candidate": "class Solution(object):\n    def largestProducts(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: int\n        \"\"\"\n        if len(arr1) == 0 or len(arr2) == 0:\n            return 0\n\n        n = len(arr1)\n        m = len(arr2)\n        ans = 0\n        for i in range(n):\n            for j in range(m):\n                if arr1[i] * arr2[j] > ans:\n                    ans = arr1[i] * arr2[j]\n        return ans\n\n\nif __name__ == \"__main__\":\n    arr1 = [2,3,4]\n    arr2 = [1,2,3]\n    print(Solution().largestProducts(arr1, arr2))"
    },
    {
      "rank": 84,
      "score": 2.9231148392568707,
      "candidate": "# Example 1\n# Given [1,2,3,4,5], k = 2,\n# return [24, 12, 8, 6, 4, 3].\n\n# Example 2\n# Given [2,2,3,4,5], k = 2,\n# return [6, 4, 3, 2, 2].\n\n# Example 3\n# Given [1,2,3,4,5], k = 3,\n# return [6, 4, 3, 2, 1].\n\n# Example 4\n# Given [2,2,3,4,5], k = 3,\n# return [6, 4, 3, 2, 1].\n\n# Note:\n# The length of the first list will be most than k.\n# The length of the second list will be less than k.\n# The length of the first list will be greater than k.\n# k is a positive integer.\n\n# Related Topics\n# Dynamic Programming\n\nclass Solution(object):\n    def largestSumOfThree(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        n1, n2 = len(nums1), len(nums2)\n        if n1 > n2:\n            nums1, nums2 = nums2, nums1\n        if n1 == n2 == k:\n            return [nums1[i] * nums2[i] for i in range(k)]\n        if n1 == k:\n            return [nums1[i] * nums2[i] for i in range(n1 - k + 1)]\n        if n2 == k:\n            return [nums1[i] * nums2[i] for i in range(n2 - k + 1)]\n        return [nums1[i] * nums2[i] for i in range(min(n1, n2 - k + 1))] + [nums1[i] * nums2[i] for i in range(n1 - k + 1, n2)]"
    },
    {
      "rank": 85,
      "score": 2.918052065067787,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def largestProduct(self, list1, list2):\n        \"\"\"\n        :type list1: ListNode\n        :type list2: ListNode\n        :rtype: int\n        \"\"\"\n        if not list1 or not list2:\n            return 0\n        max_len = max(len(list1), len(list2))\n        max_prod = 0\n        cur_prod = 1\n        cur_len = 0\n        cur_max_len = 0\n        cur_max_prod = 0\n        cur_max_cur_prod = 0\n        cur_max_cur_len = 0\n        cur_max_cur_max_prod = 0\n        cur_max_cur_max_len = 0\n        cur_max_cur_max_cur_prod = 0\n        cur_max_cur_max_cur_len = 0\n        cur_max_cur_max_cur_max_prod = 0\n        cur_max_cur_max_cur_max_len = 0\n        cur_max_cur_max_cur_max_cur_prod = 0\n        cur_max_cur_max_cur_max_cur_len = 0\n        cur_max_cur_max_cur_max_cur_max_prod = 0\n        cur_max_cur_max_cur_max_cur_max_len = 0\n        cur_max_cur_max_cur_max_cur_max_cur_prod = 0\n        cur_max_cur_max_cur_max_cur_max_cur_len = 0\n        cur_max_cur_max_cur_max_cur_max_cur_max_prod = 0\n        cur_max_cur_max_cur_max_cur_max_cur_max_len = 0\n        cur_max_cur_max_cur_max_cur_max_cur_max_cur_prod = 0\n        cur_max_cur_max_cur_max_cur_max_cur"
    },
    {
      "rank": 86,
      "score": 2.8953474273369464,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def largestProduct(self, num1, num2):\n        \"\"\"\n        :type num1: ListNode\n        :type num2: ListNode\n        :rtype: int\n        \"\"\"\n        ret = 0\n        node1 = num1\n        node2 = num2\n        if node1 is None or node2 is None:\n            return 0\n        node1 = node1.next\n        node2 = node2.next\n        while node1 and node2:\n            ret = max(ret, node1.val * node2.val)\n            node1 = node1.next\n            node2 = node2.next\n        return ret\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.largestProduct(ListNode(1), ListNode(2))"
    },
    {
      "rank": 87,
      "score": 2.891775668452075,
      "candidate": "# https://leetcode.com/problems/largest-product-of-a-b/\n# From the problem description, it seems that the input list is a list of tuples, with first item of each tuple being the first item of the list, and the second item being the product of that item and the next item of the list.\n# The problem description is incorrect, since the input list is a list of tuples, not a list of lists.\n# Since the input list is a list of tuples, it is possible to use the \"list comprehension\" to write this function.\n# However, it is not clear to me how to write a function to find the largest product of a list of numbers.\n# I only have a few examples, and I can't find a way to use list comprehensions to find the largest product of a list of numbers.\n# I am using a for loop to find the largest product of a list of numbers, and then using a while loop to find the largest product of a list of numbers.\n# I am using a while loop to find the largest product of a list of numbers, but I am not sure how to use list comprehensions to find the largest product of a list of numbers.\n# So I am writing a function to find the largest product of a list of numbers.\n\n#!/usr/bin/python\nimport collections\n\nclass Solution:\n    def largestProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        m = collections.defaultdict(int)\n        for i in nums1:\n            for j in nums2:\n                m[i*j] = max(m[i*j], m[i]*j)\n\n        ans = 1\n        for i in m:\n            ans = max(ans, m[i])\n        return ans\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.largestProduct([1,2,3], [4,5,6]))\n    print(s.largestProduct([1,2,3,4], [5,6]))\n    print("
    },
    {
      "rank": 88,
      "score": 2.8387764301640743,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getLargestProduct(self, num1, num2):\n        \"\"\"\n        :type num1: ListNode\n        :type num2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        ret = []\n        p = ListNode(0)\n        p.next = num1\n        head = p\n        while p.next:\n            p = p.next\n            while p.next and p.next.val > p.val * p.next.val:\n                p = p.next\n            ret.append(p.val * p.next.val)\n            p.next = p.next.next\n        head.next = num2\n        return head"
    },
    {
      "rank": 89,
      "score": 2.8378038075156384,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {integer} n\n    # @param {ListNode} headA\n    # @param {ListNode} headB\n    # @return {integer}\n    def largestProduct(self, n, headA, headB):\n        if n == 0:\n            return 0\n        if n == 1:\n            return max(self.getProduct(headA), self.getProduct(headB))\n\n        headA, headB = self.getMaxHeads(headA, headB)\n\n        if headA and headB:\n            return max(self.getProduct(headA), self.getProduct(headB))\n        elif headA:\n            return self.getProduct(headA)\n        elif headB:\n            return self.getProduct(headB)\n\n    def getProduct(self, head):\n        if not head:\n            return 0\n        result = 1\n        while head:\n            result *= head.val\n            head = head.next\n        return result\n\n    def getMaxHeads(self, headA, headB):\n        headA, headB = headA or headB, headB or headA\n        if headA and headB:\n            return headA, headB\n        elif headA:\n            return headA, None\n        elif headB:\n            return None, headB"
    },
    {
      "rank": 90,
      "score": 2.8369945862504102,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        max_val = 0\n        max_idx = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                max_val = max(max_val, nums1[i] * nums2[j])\n                if max_val >= nums1[i] * nums2[j]:\n                    max_idx = i\n                    break\n        return max_val"
    },
    {
      "rank": 91,
      "score": 2.809466046416186,
      "candidate": "import collections\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def __init__(self):\n        self.max_sum = 0\n        self.max_len = 0\n        self.max_prod = 0\n\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        self.nums1 = nums1\n        self.nums2 = nums2\n\n        self.compute()\n        return self.max_prod\n\n    def compute(self):\n        nums1 = self.nums1\n        nums2 = self.nums2\n\n        self.max_sum = 0\n        self.max_len = 0\n        self.max_prod = 0\n\n        # create a dummy node to keep track of the current list\n        dummy = ListNode(0)\n        dummy.next = nums1\n        pre = dummy\n        dummy.next = nums2\n\n        # while the current list is not empty, add the product and keep track of the max sum\n        while dummy.next is not None:\n            # print 'pre: %s, next: %s' % (pre, dummy.next)\n            pre = dummy\n            dummy = dummy.next\n            max_sum = 0\n            max_len = 0\n            max_prod = 0\n\n            # while the current list is not empty, keep track of the max sum and max length\n            # and the max product\n            while dummy.next is not None:\n                # print 'pre: %s, next: %s' % (pre, dummy.next)\n                max_sum = max(max_sum, dummy.val * dummy.next.val)\n                max_len = max(max_len, len(str(dummy.val)))\n                max_prod = max(max_prod, dummy.val * dummy.next.val)\n                dummy ="
    },
    {
      "rank": 92,
      "score": 2.789776458528418,
      "candidate": "# Example 1:\n# Input: [2,3,6,7], k=2\n# Output: [9, 28]\n# Explanation:\n# The two lists are [2, 3, 6, 7], and the largest product is 9.\n# The two lists are [2, 3, 6, 7], and the largest product is 28.\n# Example 2:\n# Input: [2,2,2,2], k=2\n# Output: [8,8]\n# Explanation:\n# The two lists are [2, 2, 2, 2], and the largest product is 8.\n# Example 3:\n# Input: [1,2,3,4,5,6,7], k=6\n# Output: [24,120,720]\n# Explanation:\n# The two lists are [1, 2, 3, 4, 5, 6, 7], and the largest product is 720.\n\nclass Solution(object):\n    def largestProducts(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # naive solution\n        nums1.sort()\n        nums2.sort()\n        result = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if i == 0 or j == 0:\n                    result.append(max(nums1[i] * nums2[j], nums2[j] * nums1[i]))\n                else:\n                    result.append(max(nums1[i] * nums2[j], nums1[i - 1] * nums2[j], nums1[i] * nums2[j - 1], nums1[i - 1] * nums2[j - 1]))\n        return result"
    },
    {
      "rank": 93,
      "score": 2.682191573567576,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getLargestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: ListNode\n        :type nums2: ListNode\n        :rtype: int\n        \"\"\"\n        if nums1 is None:\n            return nums2.val\n        if nums2 is None:\n            return nums1.val\n        \n        nums1 = self.getList(nums1)\n        nums2 = self.getList(nums2)\n        \n        head1 = nums1\n        head2 = nums2\n        \n        while head1 and head2:\n            if head1.val > head2.val:\n                head1 = head1.next\n            else:\n                head2 = head2.next\n            \n        head = head1 if head1 else head2\n        \n        return head.val if head else 0\n    \n    def getList(self, head):\n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        pre = head\n        while pre.next and pre.next.next:\n            pre = pre.next.next\n        \n        pre.next = None\n        return head"
    },
    {
      "rank": 94,
      "score": 2.6455091078829516,
      "candidate": "class Solution(object):\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums1 or not nums2:\n            return 0\n        if len(nums1)!= len(nums2):\n            return 0\n        nums1.sort()\n        nums2.sort()\n        max_num = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if i == j:\n                    max_num = max(max_num, nums1[i] * nums2[j])\n                elif j + 1 == len(nums2):\n                    max_num = max(max_num, nums1[i] * nums2[j])\n                elif i + 1 == len(nums1):\n                    max_num = max(max_num, nums1[i] * nums2[j])\n                else:\n                    max_num = max(max_num, nums1[i] * nums2[j])\n        return max_num\n\n\nif __name__ == \"__main__\":\n    nums1 = [1, 2, 3, 4, 5]\n    nums2 = [1, 2, 3]\n    nums1.sort()\n    nums2.sort()\n    print Solution().largestProduct(nums1, nums2)"
    },
    {
      "rank": 95,
      "score": 2.61278275909789,
      "candidate": "# https://oj.leetcode.com/problems/largest-products/\n# Given two lists A and B, return the largest product of any pair of elements in A and B.\n#\n# The largest product in the list is the one with the largest value.\n#\n# Example:\n# Given A = [1, 2, 3, 4, 5], and B = [2, 6, 10, 15, 20],\n#\n# The largest product is 15*20 = 300.\n#\n# Note:\n# You may assume the two lists do not have duplicates.\n#\n# Follow up:\n# What if the given lists have duplicates?\n# In this case, when you get the largest product, you need to check whether\n# there is a pair of numbers both in A and B,\n# and return the larger of two numbers.\n# Example:\n# Given A = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6],\n# and B = [1, 3, 5, 7, 8, 9, 10],\n#\n# Return 4*3*7 = 48.\n#\n# Related Topics: Array\n# Similar Questions: (M) Largest Product in BST\n\nimport collections\n\nclass Solution(object):\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums1 or not nums2:\n            return 0\n\n        d = collections.defaultdict(lambda: 0)\n        for n1, n2 in zip(nums1, nums2):\n            d[n1] += n2\n        return max(d.values())\n\nif __name__ == \"__main__\":\n    print Solution().largestProduct([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6], [1, 3, 5, 7, 8, 9, 10])"
    },
    {
      "rank": 96,
      "score": 2.5971522479021942,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {integer} n\n    # @param {ListNode[]} lists\n    # @return {integer}\n    def largestProduct(self, n, lists):\n        ans = 0\n        for i in range(n):\n            if lists[i].next is None:\n                ans = max(ans, self.getMaxProduct(lists[i]))\n            else:\n                ans = max(ans, self.getMaxProduct(lists[i], lists[i].next))\n        return ans\n\n    def getMaxProduct(self, head, next):\n        ans = 0\n        while head is not None:\n            ans = max(ans, head.val * next.val)\n            head = head.next\n            next = next.next\n        return ans\n\n    def largestProduct_2(self, n, lists):\n        ans = 0\n        for i in range(n):\n            ans = max(ans, self.getMaxProduct(lists[i]))\n        return ans\n\nif __name__ == '__main__':\n    n = 2\n    lists = [[1, 2], [3, 4], [5, 6]]\n    s = Solution()\n    print(s.largestProduct(n, lists))\n    print(s.largestProduct_2(n, lists))"
    },
    {
      "rank": 97,
      "score": 2.50133813482529,
      "candidate": "# https://leetcode.com/problems/largest-products-from-two-sorted-lists/\n\n# DP\n# 1. find the max from two lists\n# 2. find the max from two lists\n# 3. find the max from two lists\n\nclass Solution(object):\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        if nums1 == [] or nums2 == []:\n            return 0\n        if nums1 == nums2:\n            return max(nums1)\n        if nums1 == []:\n            return max(nums2)\n        if nums2 == []:\n            return max(nums1)\n        # find the max of two lists\n        max_n1 = max(nums1)\n        max_n2 = max(nums2)\n        max_n = max(max_n1, max_n2)\n        # find the max from two lists\n        max_nums1 = [max_n]\n        max_nums2 = [max_n]\n        # find the max from two lists\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    max_nums1.append(max_nums1[-1] * nums1[i])\n                    max_nums2.append(max_nums2[-1] * nums2[j])\n        return max(max_nums1) * max(max_nums2)"
    },
    {
      "rank": 98,
      "score": 2.330351914369771,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def largestProduct(self, num1, num2):\n        \"\"\"\n        :type num1: ListNode\n        :type num2: ListNode\n        :rtype: int\n        \"\"\"\n        if num1 == None or num2 == None:\n            return 0\n        \n        head1 = ListNode(0)\n        head2 = ListNode(0)\n        \n        head1.next = num1\n        head2.next = num2\n        \n        while head1.next and head2.next:\n            num1 = head1.next\n            num2 = head2.next\n            \n            if num1.val > num2.val:\n                head1.next = num1.next\n            else:\n                head2.next = num2.next\n            \n            head1.next = num1\n            head2.next = num2\n        \n        if head1.next:\n            return head1.next.val\n        else:\n            return head2.next.val"
    },
    {
      "rank": 99,
      "score": 2.3043508798896877,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nimport sys\nsys.path.append(\"..\")\nfrom BSTUtils import TreeNode\n\n\nclass Solution(object):\n    def largestValues(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        if k == 1:\n            return max(root.val)\n        res = []\n        self.helper(root, k, res)\n        return max(res)\n\n    def helper(self, root, k, res):\n        if root is None:\n            return\n        if k == 1:\n            res.append(root.val)\n        self.helper(root.left, k-1, res)\n        self.helper(root.right, k-1, res)"
    },
    {
      "rank": 100,
      "score": 2.0830892135685897,
      "candidate": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\n\"\"\"\n\u8f93\u5165\uff1a\nnums1 = [1,2,3], nums2 = [4,5,6,7]\nnums1 = [3,2,1], nums2 = [1,2,3]\nnums1 = [1,1], nums2 = [1,1]\n\n\u8f93\u51fa\uff1a\n1,3\n3,7\n2,6\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def largestBSTSubtree(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        self.max = -1\n        self.dfs(root, k)\n        return self.max\n        \n    def dfs(self, root, k):\n        if root is None:\n            return\n        if k == 1:\n            self.max = max(self.max, root.val)\n            return\n        self.dfs(root.left, k-1)\n        self.dfs(root.right, k-1)\n        self.max = max(self.max, root.val*(k-1))"
    }
  ]
}