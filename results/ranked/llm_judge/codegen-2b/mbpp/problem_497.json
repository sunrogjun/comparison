{
  "timestamp": "2025-09-14T21:03:32.482360",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 497,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def is_in_same_order(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    return sorted(list1) == sorted(list2)\n\n# Your Solution here"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        if not A or not B:\n            return False\n        if len(A)!= len(B):\n            return False\n        # check if A and B have same length\n        # no of elements in A\n        n = len(A)\n        # no of elements in B\n        m = len(B)\n        # no of elements in common\n        k = 0\n        # no of elements in each list\n        a = 0\n        b = 0\n        # no of elements in each common\n        c = 0\n        # no of elements in each common\n        d = 0\n        # no of elements in each common\n        e = 0\n        # no of elements in each common\n        f = 0\n        # no of elements in each common\n        g = 0\n        # no of elements in each common\n        h = 0\n        # no of elements in each common\n        i = 0\n        # no of elements in each common\n        j = 0\n        # no of elements in each common\n        k = 0\n        # no of elements in each common\n        l = 0\n        # no of elements in each common\n        m = 0\n        # no of elements in each common\n        n = 0\n        # no of elements in each common\n        o = 0\n        # no of elements in each common\n        p = 0\n        # no of elements in each common\n        q = 0\n        # no of elements in each common\n        r = 0\n        # no of elements in each common\n        s = 0\n        # no of elements in each common\n        t = 0\n        # no of elements in each common\n        u = 0\n        # no of elements in each common\n        v = 0\n        # no of elements in each common\n        w = 0\n        # no of elements in each common\n        x = 0\n        # no of elements in each common\n        y = 0\n        # no of elements in each common\n        z = 0\n        # no of elements in each common\n        aa = 0\n        # no of elements"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import unittest\n\n# https://www.hackerrank.com/challenges/common-elements-between-two-lists/problem\n\ndef common_elements_between_lists(list_1, list_2):\n    if len(list_1) == 0 or len(list_2) == 0:\n        return 0\n    result = 0\n    for i in range(0, len(list_1)):\n        if list_1[i] in list_2:\n            result += 1\n    return result\n\n\nclass CommonElementsBetweenListsTest(unittest.TestCase):\n    def test_common_elements_between_lists(self):\n        self.assertEqual(common_elements_between_lists([1, 2, 3, 4], [1, 3, 4, 5]), 2)\n        self.assertEqual(common_elements_between_lists([], [1, 2, 3, 4]), 0)\n        self.assertEqual(common_elements_between_lists([1, 2, 3, 4], []), 0)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/common-elements-in-two-lists\n\n# For each list, the elements are in random order.\n# The common elements are those elements that appear in both lists.\n# Print the number of common elements.\n\n# Idea:\n#  1. sort the first list\n#  2. sort the second list\n#  3. compare the sorted lists\n#  4. find out which elements are common\n#  5. compare the rest of the lists\n#  6. print the number of common elements\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n)\n\n# my solution\ndef commonElements(a, b):\n    if len(a)!= len(b):\n        return 0\n    sorted_a = sorted(a)\n    sorted_b = sorted(b)\n    #print(sorted_a)\n    #print(sorted_b)\n    return len(set(sorted_a) & set(sorted_b))\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [2, 3, 4, 1]\n    print(commonElements(a, b))\n    \n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5]\n    print(commonElements(a, b))\n    \n    a = [1, 2, 3, 4]\n    b = [2, 3, 4, 1, 3]\n    print(commonElements(a, b))\n    \n    a = [1, 2, 3, 4]\n    b = [1, 2, 3]\n    print(commonElements(a, b))\n    \n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5]\n    print(commonElements(a, b))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-sorted-lists/description/\n\nclass Solution(object):\n    def isCommonElements(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n\n        l = len(A)\n        \n        for i in xrange(l):\n            if A[i]!= B[i]:\n                return False\n        \n        return True"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if A == [] and B == []:\n            return True\n        if A == [] or B == []:\n            return False\n        if A[0]!= B[0]:\n            return False\n        if len(A) == 1 and len(B) == 1:\n            return A[0] == B[0]\n        l1, l2 = len(A), len(B)\n        if l1 > l2:\n            return self.isInterleave(A[1:], B)\n        elif l2 > l1:\n            return self.isInterleave(A, B[1:])\n        else:\n            i, j = 0, 0\n            while i < l1 and j < l2:\n                if A[i] == B[j]:\n                    i += 1\n                    j += 1\n                else:\n                    return False\n            return i == l1 and j == l2\n\ndef main():\n    solution = Solution()\n    A = [1,2,3,3,3]\n    B = [3,3,3,3,2]\n    print solution.isInterleave(A, B)\n    A = [1,2,3,3,3,3]\n    B = [3,3,3,3,2]\n    print solution.isInterleave(A, B)\n    A = [1,2,3,3,3,3]\n    B = [3,3,3,3,2]\n    print solution.isInterleave(A, B)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        # \u53ef\u4ee5\u6307\u5b9a\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u6bd4\u8f83\n        # \u5982\u679c\u6bd4\u8f83\u5230\u4e86\uff0c\u53ef\u4ee5\u76f8\u5f53\u4e8eA\u4e2d\u7684\u5143\u7d20\u90fd\u6ee1\u8db3B\u4e2d\u7684\u5143\u7d20\uff0c\u5426\u5219\u4e0d\u4e00\u81f4\n        if len(A) == 0:\n            return len(B) == 0\n        if len(B) == 0:\n            return False\n        if A[0] == B[0]:\n            return self.isInterleave(A[1:], B[1:])\n        if A[0]!= B[0]:\n            return False\n        return self.isInterleave(A[1:], B[1:])\n\n\nif __name__ == '__main__':\n    A = ['aa', 'bbb', 'cc', 'ddd', 'eee']\n    B = ['cc', 'ddd', 'eee', 'ff', 'ggg']\n    print Solution().isInterleave(A, B)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def commonElements(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        if not nums1 or not nums2:\n            return False\n\n        nums1.sort()\n        nums2.sort()\n        return nums1 == nums2\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        nums1 = map(int, f.readline().strip().split(' '))\n        nums2 = map(int, f.readline().strip().split(' '))\n\n        # solve\n        s = \"%s\\n\" % (Solution().commonElements(nums1, nums2))\n        print s,"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import unittest\n\n__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def is_same_as(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: bool\n        \"\"\"\n        return sorted(arr1) == sorted(arr2)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/common-elements-in-two-lists/solution/\n#\nApproach #1: Sort [2,4,6,8] and [2,3,5,6] and compare\nComplexity Analysis\nTime Complexity: O(n log n), where n is the length of the lists.\nSpace Complexity: O(n).\n\n# 13ms 99.93%\nclass Solution {\n    public boolean isSameAs(int[] nums1, int[] nums2) {\n        if (nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0) return false;\n        Arrays.sort(nums1);\n        Arrays.sort(nums2);\n        return Arrays.equals(nums1, nums2);\n    }\n}\n\n# 12ms 100%\nclass Solution {\n    public boolean isSameAs(int[] nums1, int[] nums2) {\n        if (nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0) return false;\n        int[] m = new int[nums1.length];\n        for (int i = 0; i < nums1.length; i++) m[i] = nums1[i];\n        Arrays.sort(m);\n        return Arrays.equals(nums1, m);\n    }\n}\n\n# 12ms 100%\nclass Solution {\n    public boolean is"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-lists/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param l1, a list of integer\n    # @param l2, a list of integer\n    # @return a boolean\n    def isIntersect(self, l1, l2):\n        if len(l1)!= len(l2):\n            return False\n        \n        intersect = []\n        curr1 = l1\n        curr2 = l2\n        while curr1 and curr2:\n            if curr1.val == curr2.val:\n                intersect.append(curr1.val)\n                curr1 = curr1.next\n                curr2 = curr2.next\n            else:\n                if curr1.val > curr2.val:\n                    curr1 = curr1.next\n                else:\n                    curr2 = curr2.next\n                \n        return intersect == []\n        \n    # @param l1, a list of integer\n    # @param l2, a list of integer\n    # @return a boolean\n    def isIntersect1(self, l1, l2):\n        if len(l1)!= len(l2):\n            return False\n        \n        intersect = []\n        curr1 = l1\n        curr2 = l2\n        while curr1 and curr2:\n            if curr1.val == curr2.val:\n                intersect.append(curr1.val)\n                curr1 = curr1.next\n                curr2 = curr2.next\n            else:\n                if curr1.val > curr2.val:\n                    curr1 = curr1.next\n                else:\n                    curr2 = curr2.next\n                \n        return intersect == []"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import sys\n\n\ndef check_list(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    common_elements = set(list1).intersection(set(list2))\n    if len(common_elements) == len(list1) and len(common_elements) == len(list2):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5, 6]\n    list2 = [1, 2, 3, 4, 5, 6]\n    print(check_list(list1, list2))\n    list1 = [1, 2, 3, 4, 5, 6, 7]\n    list2 = [1, 2, 3, 4, 5, 6, 7]\n    print(check_list(list1, list2))\n    list1 = [1, 2, 3, 4, 5, 6]\n    list2 = [7, 6, 5, 4, 3, 2, 1]\n    print(check_list(list1, list2))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        return self.isInterleave1(A, B) or self.isInterleave1(B, A)\n    \n    def isInterleave1(self, A, B):\n        if len(A) == 0 or len(B) == 0:\n            return False\n        if len(A) > len(B):\n            A, B = B, A\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    A = [\"\", \"\", \"\", \"\", \"\"]\n    B = [\"\", \"\", \"\", \"\", \"\"]\n    print Solution().isInterleave(A, B)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-sorted-lists/description/\n# time:O(n)\n# space:O(1)\n# score:100(0ms)\nclass Solution:\n    def commonElements(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(A) == len(B) and A == B"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# write your code here\n# I have written this function in python for educational purposes.\n\ndef common_elements(list1, list2):\n    # list1, list2 are the given lists\n    # return the common elements between list1 and list2\n    common_elements_list = []\n    for element1 in list1:\n        if element1 in list2:\n            common_elements_list.append(element1)\n    return common_elements_list\n\nif __name__ == \"__main__\":\n    print common_elements([\"abc\", \"def\", \"ghi\"], [\"abc\", \"def\", \"abc\"])"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        def getCommon(A, B):\n            if len(A) == 0:\n                return B\n            if len(B) == 0:\n                return A\n            for i in range(len(A)):\n                if A[i]!= B[0]:\n                    return False\n            return getCommon(A[1:], B[1:])\n        return getCommon(A, B)"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-lists/\n# time complexity: O(n)\n# space complexity: O(n)\n# score:25.88\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: ListNode\n        :type B: ListNode\n        :rtype: bool\n        \"\"\"\n        if A is None or B is None:\n            return False\n        l1, l2 = [], []\n        while A is not None:\n            l1.append(A.val)\n            A = A.next\n        while B is not None:\n            l2.append(B.val)\n            B = B.next\n        if len(l1)!= len(l2):\n            return False\n        for i in range(len(l1)):\n            if l1[i]!= l2[i]:\n                return False\n        return True"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasSameElements(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        #if l1 == l2:\n        #    return True\n        #elif l1 is None:\n        #    return False\n        #elif l2 is None:\n        #    return False\n        #elif l1.val!= l2.val:\n        #    return False\n        #elif l1.next is None:\n        #    return False\n        #elif l2.next is None:\n        #    return False\n        #else:\n        #    return self.hasSameElements(l1.next, l2.next)\n        #return self.hasSameElements(l1.next, l2.next)\n\n        if l1 is None or l2 is None:\n            return False\n\n        while l1 is not None:\n            if l2 is not None and l1.val!= l2.val:\n                return False\n            else:\n                l1 = l1.next\n                l2 = l2.next\n        return True"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def is_sorted(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        # dp\n        # O(n) time, O(1) space\n        dp = [0] * len(nums2)\n        for i in xrange(len(nums1)):\n            for j in xrange(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    dp[j] += 1\n        return all(x == 1 for x in dp)\n\n\nif __name__ == \"__main__\":\n    assert Solution().is_sorted([3, 2, 1], [1, 2, 3])\n    assert Solution().is_sorted([1, 2, 3], [3, 2, 1])\n    assert Solution().is_sorted([1, 2, 1], [1, 2, 3])\n    assert Solution().is_sorted([3, 2, 1], [3, 2, 1])"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-sorted-lists/discuss/71137/Python-Python-Implement-Common-Elements-in-Two-Sorted-Lists\n\nclass Solution(object):\n    def commonElements(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        if A is None or B is None:\n            return 0\n        if len(A) > len(B):\n            return self.commonElements(B, A)\n        if len(A) == len(B):\n            cnt = 0\n            for i in range(len(A)):\n                if A[i] == B[i]:\n                    cnt += 1\n            return cnt\n        return 0\n\ns = Solution()\nA = [1,2,3,4,5]\nB = [3,4,5,1,2]\nprint(s.commonElements(A, B))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "# https://www.youtube.com/watch?v=9u_3p_k5sMw\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n\n        # sort the lists\n        A = sorted(A)\n        B = sorted(B)\n\n        # the first and second index in A and B\n        i = 0\n        j = 0\n\n        # the number of common elements\n        cnt = 0\n\n        # the number of elements in A after the first common element\n        a_cnt = 0\n\n        # the number of elements in B after the first common element\n        b_cnt = 0\n\n        # check if the first common element is in the same position\n        while i < len(A) and j < len(B):\n            if A[i] == B[j]:\n                cnt += 1\n                i += 1\n                j += 1\n            elif A[i] < B[j]:\n                a_cnt += 1\n                i += 1\n            else:\n                b_cnt += 1\n                j += 1\n\n        # check if the number of common elements is equal to the length of the shorter list\n        if cnt!= len(A) - a_cnt:\n            return False\n\n        # check if the number of common elements is equal to the length of the longer list\n        if cnt!= len(B) - b_cnt:\n            return False\n\n        return True"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    # Create a Counter for each list\n    c1 = Counter(list1)\n    c2 = Counter(list2)\n    # Check if there are any elements which are only in one of the lists\n    for k in c1.keys():\n        if not k in c2:\n            return False\n    for k in c2.keys():\n        if not k in c1:\n            return False\n    # If all the elements are in both the lists, then return true\n    return True"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    return sorted(list1) == sorted(list2)\n\nif __name__ == '__main__':\n    assert common_elements([1, 2, 3, 4], [2, 4, 5, 6])\n    assert not common_elements([1, 2, 3, 4], [4, 5, 6, 7])"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def common_elements(list_1, list_2):\n    return sorted(list_1) == sorted(list_2)\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5]\n    list_2 = [2, 3, 4, 5, 6]\n    print common_elements(list_1, list_2)"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def commonElements(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return False\n        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        return nums1 == nums2\n\ns = Solution()\nprint s.commonElements([1,2,3], [1,2,3,4])\nprint s.commonElements([1,2,3], [1,2,3,4,5])\nprint s.commonElements([1,2,3], [2,3,4,5])\nprint s.commonElements([1,2,3], [1,2,3,4,5,6])\nprint s.commonElements([1,2,3], [3,4,5,6])\nprint s.commonElements([1,2,3], [2,3,4,5,6])"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param A a list of integers\n    # @param B a list of integers\n    # @return a boolean\n    def isSubsequence(self, A, B):\n        if len(A) < len(B):\n            return False\n        elif len(A) == len(B):\n            return A == B\n        elif len(A) > len(B):\n            diff = len(A) - len(B)\n            for i in range(len(A)):\n                if A[i]!= B[i + diff]:\n                    return False\n            return True\n\nif __name__ == '__main__':\n    print Solution().isSubsequence([1, 2, 3], [2, 3, 1])"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-lists/\n\nclass Solution(object):\n    def commonElements(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums1) == 0:\n            return False\n        if len(nums2) == 0:\n            return False\n\n        # https://leetcode.com/problems/common-elements-in-two-lists/discuss/231635/Python-implementation-with-O(n)\n        # use two pointer to find out the first common element\n        i = j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                i += 1\n                j += 1\n            else:\n                if i == j:\n                    return False\n                else:\n                    i += 1\n                    j += 1\n\n        # if one of the two pointers reached the end, then the lists are not in the same order\n        if i == len(nums1) or j == len(nums2):\n            return False\n\n        # now both pointers are at the same position, which is the first common element\n        return True\n\ns = Solution()\nprint(s.commonElements([1, 2, 3, 4], [2, 3, 4, 5]))\nprint(s.commonElements([1, 2, 3], [1, 2, 3, 4]))\nprint(s.commonElements([1, 2, 3, 4, 5], [1, 2, 3, 4]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def check_if_elements_in_same_order(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        sorted_list1 = sorted(list1)\n        sorted_list2 = sorted(list2)\n        if sorted_list1 == sorted_list2:\n            return True\n        else:\n            return False\n\nprint(check_if_elements_in_same_order([1, 2, 3], [1, 2, 3, 4]))\nprint(check_if_elements_in_same_order([1, 2, 3], [1, 2, 3, 5]))\nprint(check_if_elements_in_same_order([1, 2, 3], [1, 2, 5, 3]))\nprint(check_if_elements_in_same_order([1, 2, 3], [1, 2, 5]))\nprint(check_if_elements_in_same_order([1, 2, 3], [1, 2]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isIntersecting(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        # The basic idea is to check if the first node of l1 and the first node of l2 are the same,\n        # and if the next node of l1 and the next node of l2 are the same.\n        # In this case, we can assume that the elements of l1 and l2 are in the same order.\n        # If the next nodes are not the same, we need to check if the next nodes of l1 and l2 are in the same order.\n        # So, we just need to compare the next nodes of l1 and l2.\n        # If they are the same, then we can check if the elements of l1 and l2 are in the same order.\n        # If not, we need to check the next node of l1 and the next node of l2.\n        # If they are the same, we can check if the elements of l1 and l2 are in the same order.\n        # If not, we need to check the next node of l1 and the next node of l2.\n        # If they are the same, we can check if the elements of l1 and l2 are in the same order.\n        # If not, we need to check the next node of l1 and the next node of l2.\n        # If they are the same, we can check if the elements of l1 and l2 are in the same order.\n        # If not, we need to check the next node of l1 and the next node of l2.\n        # If they are the same, we can check if the elements of l1 and l2 are in the same order.\n        # If not, we need to check the next node of l1 and the next node of l2.\n        # If they are the same, we can check if the elements of l1 and l2 are in the same order.\n        # If not, we"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def check_if_same(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n\n    elif len(l1) == 0:\n        return True\n\n    for i in range(0, len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n\n    return True\n\ndef check_if_same_sorted(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n\n    elif len(l1) == 0:\n        return True\n\n    for i in range(0, len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n\n    sorted_l1 = sorted(l1)\n    sorted_l2 = sorted(l2)\n\n    for i in range(0, len(sorted_l1)):\n        if sorted_l1[i]!= sorted_l2[i]:\n            return False\n\n    return True\n\ndef check_if_same_sorted_reverse(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n\n    elif len(l1) == 0:\n        return True\n\n    for i in range(0, len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n\n    sorted_l1 = sorted(l1, reverse=True)\n    sorted_l2 = sorted(l2, reverse=True)\n\n    for i in range(0, len(sorted_l1)):\n        if sorted_l1[i]!= sorted_l2[i]:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 5]\n    print(check_if_same(l1, l2))\n    print(check_if_same_sorted(l1, l2))\n    print(check_if_same_sorted_reverse(l1, l2))"
    },
    {
      "rank": 30,
      "score": 2.0,
      "candidate": "def common_elements(first_list, second_list):\n    \"\"\"\n    :type first_list: List[int]\n    :type second_list: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(first_list) == 0 or len(second_list) == 0:\n        return False\n\n    common = set(first_list) & set(second_list)\n    if len(common) == len(first_list) and len(common) == len(second_list):\n        return True\n\n    return False\n\n\n# Your CommonElements object will be instantiated and called as such:\n# obj = CommonElements(first_list, second_list)\n# param_1 = obj.common_elements(first_list, second_list)"
    },
    {
      "rank": 31,
      "score": 1.0,
      "candidate": "\"\"\"\nInput:\n\t1) A list of integers.\n\t2) A list of integers.\n\t3) A list of integers.\n\nOutput:\n\t1) True if the common elements are in the same order.\n\t2) False otherwise.\n\nExample:\nInput:\n\t[1,2,3]\n\t[3,1,2,4]\n\t[2,1,3,4]\n\nOutput:\n\tTrue\n\tFalse\n\tTrue\n\"\"\"\n\ndef commonElements(A, B):\n\t\"\"\"\n\t:type A: List[int]\n\t:type B: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn sorted(A) == sorted(B)\n\n\"\"\"\nInput:\n\t1) A list of integers.\n\t2) A list of integers.\n\t3) A list of integers.\n\nOutput:\n\t1) True if the common elements are in the same order.\n\t2) False otherwise.\n\nExample:\nInput:\n\t[1,2,3]\n\t[3,1,2,4]\n\t[2,1,3,4]\n\nOutput:\n\tTrue\n\tFalse\n\tTrue\n\"\"\"\n\ndef commonElements2(A, B):\n\t\"\"\"\n\t:type A: List[int]\n\t:type B: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn sorted(A) == sorted(B) and sorted(A) == sorted(B)\n\n\"\"\"\nInput:\n\t1) A list of integers.\n\t2) A list of integers.\n\t3) A list of integers.\n\nOutput:\n\t1) True if the common elements are in the same order.\n\t2) False otherwise.\n\nExample:\nInput:\n\t[1,2,3]\n\t[3,1,2,4]\n\t[2,1,3,4]\n\nOutput:\n\tTrue\n\tFalse\n\tTrue\n\"\"\"\n\ndef commonElements3(A, B):\n\t\"\"\"\n\t:type A: List[int]\n\t:type B: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn sorted(A) == sorted"
    },
    {
      "rank": 32,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-sorted-lists/description/\n# O(n) time\n# O(n) space\ndef commonElements(self, head1, head2):\n    \"\"\"\n    :type head1: ListNode\n    :type head2: ListNode\n    :rtype: bool\n    \"\"\"\n    # if the length of head1 and head2 are not the same\n    if len(head1)!= len(head2):\n        return False\n\n    # if the length of head1 and head2 is the same\n    # then traverse the lists and check if the element is the same\n    # then we can return true\n    for i in range(len(head1)):\n        if head1[i]!= head2[i]:\n            return False\n\n    return True\n\n# https://leetcode.com/problems/common-elements-in-two-sorted-lists/discuss/178863/Python-C%2B%2B-O(n)-Solution\ndef commonElements2(self, head1, head2):\n    \"\"\"\n    :type head1: ListNode\n    :type head2: ListNode\n    :rtype: bool\n    \"\"\"\n    # if the length of head1 and head2 are not the same\n    if len(head1)!= len(head2):\n        return False\n\n    # if the length of head1 and head2 is the same\n    # then traverse the lists and check if the element is the same\n    # then we can return true\n    for i in range(len(head1)):\n        if head1[i]!= head2[i]:\n            return False\n\n        if head1[i] == head2[i]:\n            return True\n\n    return True\n\n\n# https://leetcode.com/problems/common-elements-in-two-sorted-lists/discuss/178863/Python-C%2B%2B-O(n)-Solution\ndef commonElements3(self, head1, head2):\n    \"\"\"\n    :type head1: ListNode\n    :type head2: ListNode\n    :rtype: bool\n    \"\"\""
    },
    {
      "rank": 33,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-sorted-lists/\n\n\nclass Solution(object):\n    def is_same_array(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n        result = True\n        for i in xrange(0, len(A)):\n            if A[i]!= B[i]:\n                result = False\n                break\n        return result\n\n    def is_same_array_2(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n        for i in xrange(0, len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    assert Solution().is_same_array([1,2,3], [2,3,1]) == True\n    assert Solution().is_same_array([1,2,3], [1,2,3]) == True\n    assert Solution().is_same_array([1,2,3], [1,3,2]) == False"
    },
    {
      "rank": 34,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {ListNode} l1\n    # @param {ListNode} l2\n    # @return {boolean}\n    def hasSameElements(self, l1, l2):\n        if l1 is None and l2 is None:\n            return True\n        elif l1 is None or l2 is None:\n            return False\n        else:\n            while l1 and l2:\n                if l1.val!= l2.val:\n                    return False\n                l1 = l1.next\n                l2 = l2.next\n            return l1 == l2\n\nif __name__ == '__main__':\n    sol = Solution()\n    l1 = ListNode(1)\n    l1.next = ListNode(2)\n    l2 = ListNode(1)\n    l2.next = ListNode(3)\n    print(sol.hasSameElements(l1, l2))\n    l1 = ListNode(1)\n    l2 = ListNode(1)\n    print(sol.hasSameElements(l1, l2))\n    l1 = ListNode(1)\n    l2 = ListNode(2)\n    print(sol.hasSameElements(l1, l2))\n    l1 = ListNode(1)\n    l2 = ListNode(2)\n    l1.next = ListNode(3)\n    l2.next = ListNode(3)\n    print(sol.hasSameElements(l1, l2))"
    },
    {
      "rank": 35,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\nclass Solution:\n    def isIntersecting(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        if not l1 or not l2:\n            return False\n\n        curr1 = l1\n        curr2 = l2\n        res = False\n        while curr1:\n            if curr2 and curr1.val == curr2.val:\n                res = True\n                curr1 = curr1.next\n                curr2 = curr2.next\n            else:\n                curr1 = curr1.next\n                curr2 = curr2.next\n\n        return res\n\n\nif __name__ == '__main__':\n    l1 = ListNode(1)\n    l1.next = ListNode(2)\n    l1.next.next = ListNode(3)\n    l1.next.next.next = ListNode(4)\n    l1.next.next.next.next = ListNode(5)\n    l2 = ListNode(2)\n    l2.next = ListNode(1)\n    l2.next.next = ListNode(3)\n    l2.next.next.next = ListNode(4)\n    l2.next.next.next.next = ListNode(5)\n\n    print Solution().isIntersecting(l1, l2)"
    },
    {
      "rank": 36,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return True\n        p, q = head, head\n        while q is not None:\n            while p is not None and p.val == q.val:\n                p = p.next\n                q = q.next\n            if p is None:\n                return False\n            p = p.next\n            q = q.next\n        return True\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    head.next.next.next.next.next.next.next.next.next.next"
    },
    {
      "rank": 37,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head1\n    # @param {ListNode} head2\n    # @return {boolean}\n    def hasSameElements(self, head1, head2):\n        if head1 is None or head2 is None:\n            return False\n        if head1.val!= head2.val:\n            return False\n        temp1 = head1\n        temp2 = head2\n        while temp1 is not None and temp2 is not None:\n            if temp1.val!= temp2.val:\n                return False\n            temp1 = temp1.next\n            temp2 = temp2.next\n        return True"
    },
    {
      "rank": 38,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def hasCommonElement(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: bool\n        \"\"\"\n        if headA is None or headB is None:\n            return False\n        if headA == headB:\n            return True\n        slow = fast = headA\n        while fast and fast.next:\n            fast = fast.next.next\n            if fast == headB:\n                return True\n            if fast == headB:\n                return True\n            slow = slow.next\n        return False"
    },
    {
      "rank": 39,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def isSameList(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        if l1 is None and l2 is None:\n            return True\n        elif l1 is None or l2 is None:\n            return False\n        elif l1 == l2:\n            return True\n        elif l1.val!= l2.val:\n            return False\n        else:\n            return self.isSameList(l1.next, l2.next)"
    },
    {
      "rank": 40,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution:\n    # @param head1, a ListNode\n    # @param head2, a ListNode\n    # @return a boolean\n    def isPalindrome(self, head1, head2):\n        if head1 is None and head2 is None:\n            return True\n        if head1 is None or head2 is None:\n            return False\n        if head1.val!= head2.val:\n            return False\n        current = head1\n        while current.next:\n            current = current.next\n            if current.val!= head2.val:\n                return False\n            head2 = head2.next\n        return True\n\n    def isPalindrome2(self, head):\n        if head is None:\n            return True\n        current = head\n        while current.next:\n            current = current.next\n            temp = current.val\n            current.val = current.next.val\n            current.next = current.next.next\n            current.next.val = temp\n        return True\n\nif __name__ == '__main__':\n    sol = Solution()\n    head1 = ListNode(1)\n    head2 = ListNode(1)\n    head1.next = ListNode(2)\n    head2.next = ListNode(3)\n    head1.next.next = ListNode(4)\n    head2.next.next = ListNode(5)\n    head2.next.next.next = ListNode(6)\n    print(sol.isPalindrome(head1, head2))"
    },
    {
      "rank": 41,
      "score": 1.0,
      "candidate": "def is_same(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: bool\n    \"\"\"\n    if l1 is None or l2 is None:\n        return False\n\n    if len(l1)!= len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\n\ndef test():\n    assert is_same([1, 2, 3], [1, 2, 3])\n    assert is_same([1, 2, 3], [1, 2, 3, 1])\n    assert is_same([1, 2, 3], [1, 2, 3, 4])\n    assert is_same([1, 2, 3], [1, 2, 3, 4, 5])\n    assert is_same([1, 2, 3], [4, 5, 6])\n    assert is_same([1, 2, 3], [4, 5, 6, 4])\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 42,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\n__author__ = 'vivek'\n\nclass Solution:\n    # @param two ListNode\n    # @return a boolean\n    def hasSameElements(self, l1, l2):\n        if l1 is None or l2 is None:\n            return False\n        if l1 == l2:\n            return True\n        if l1.val!= l2.val:\n            return False\n        return self.hasSameElements(l1.next, l2.next)\n\n    # @param l1 ListNode\n    # @param l2 ListNode\n    # @return a boolean\n    def hasSameElements1(self, l1, l2):\n        if l1 is None or l2 is None:\n            return False\n        if l1 == l2:\n            return True\n        if l1.val!= l2.val:\n            return False\n        if self.hasSameElements1(l1.next, l2.next):\n            return True\n        return False\n\n    # @param l1 ListNode\n    # @param l2 ListNode\n    # @return a boolean\n    def hasSameElements2(self, l1, l2):\n        if l1 is None or l2 is None:\n            return False\n        if l1 == l2:\n            return True\n        if l1.val!= l2.val:\n            return False\n        if self.hasSameElements2(l1.next, l2.next):\n            return True\n        return False\n\ns = Solution()\nl1 = [1,2,3]\nl2 = [1,2,3]\nprint s.hasSameElements(l1, l2)\nprint s.hasSameElements1(l1, l2)\nprint s.hasSameElements2(l1, l2)"
    },
    {
      "rank": 43,
      "score": 1.0,
      "candidate": "# Your function should return true if the lists have the same length and the elements in the same order.\n# If they have different length, return false.\n\n# Example 1:\n# Input: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], [\"eat\", \"tan\", \"bat\", \"ate\", \"nat\", \"tan\"]\n# Output: true\n# Explanation: The lists are in the same order.\n# Example 2:\n# Input: [\"dog\", \"racecar\", \"car\", \"god\", \"runner\", \"runner\"], [\"dog\", \"car\", \"runner\", \"god\", \"runner\", \"racecar\"]\n# Output: false\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        return sorted(A) == sorted(B)"
    },
    {
      "rank": 44,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} headA\n    # @param {ListNode} headB\n    # @return {boolean}\n    def hasSameElements(self, headA, headB):\n        # write your code here\n        if headA is None or headB is None:\n            return False\n        \n        while headA and headB:\n            if headA.val!= headB.val:\n                return False\n            headA = headA.next\n            headB = headB.next\n        \n        return True"
    },
    {
      "rank": 45,
      "score": 1.0,
      "candidate": "from collections import Counter\n\nclass Solution(object):\n    def isSameList(self, list1, list2):\n        \"\"\"\n        :type list1: List[int]\n        :type list2: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(list1)!= len(list2):\n            return False\n\n        cnt = Counter(list1)\n        for i in cnt:\n            if i not in cnt or cnt[i]!= cnt[list2[i - list1[0]]]:\n                return False\n        return True"
    },
    {
      "rank": 46,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-sorted-lists/description/\n\nclass Solution:\n    # @param {ListNode} head1\n    # @param {ListNode} head2\n    # @return {ListNode}\n    def isInterleave(self, head1, head2):\n        if not head1 or not head2:\n            return None\n        if head1.val!= head2.val:\n            return None\n        p1, p2 = [head1], [head2]\n        while p1 and p2:\n            if p1[-1].val!= p2[0].val:\n                return None\n            p1.pop(), p2.pop()\n        return p1[0] if p1 else p2[0]\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.isInterleave([1,3,2,2,1], [3,1,2,3,1]))\n    print(solution.isInterleave([1,3,2,2,1], [3,2,3,1,2]))"
    },
    {
      "rank": 47,
      "score": 1.0,
      "candidate": "#\n# 1. Write a function which takes two lists as input and returns true if they are in the same order, otherwise returns false.\n#\n#\n\n#\n# 2. Write a function which takes two lists as input and returns the number of common elements.\n#\n\n#\n# 3. Write a function which takes two lists as input and returns the common elements.\n#\n\n#\n# 4. Write a function which takes two lists as input and returns the number of elements in the first list which are not in the second list.\n#\n\n#\n# 5. Write a function which takes two lists as input and returns the number of elements in the second list which are not in the first list.\n#\n\n#\n# 6. Write a function which takes two lists as input and returns the number of elements in the first list which are not in the second list.\n#\n\n#\n# 7. Write a function which takes two lists as input and returns the number of elements in the second list which are not in the first list.\n#\n\n#\n# 8. Write a function which takes two lists as input and returns the number of elements in the second list which are not in the first list.\n#\n\n#\n# 9. Write a function which takes two lists as input and returns the number of elements in the first list which are not in the second list.\n#\n\n#\n# 10. Write a function which takes two lists as input and returns the number of elements in the second list which are not in the first list.\n#\n\n#\n# 11. Write a function which takes two lists as input and returns the number of elements in the second list which are not in the first list.\n#\n\n#\n# 12. Write a function which takes two lists as input and returns the number of elements in the second list which are not in the first list.\n#\n\n#\n# 13. Write a function which takes two lists as input and returns the number of elements in the second list which are not in the first list.\n#\n\n#\n# 14. Write a function which takes two lists as input and returns the number of elements in the second list which are not in the first list.\n#\n\n#\n# 15. Write a function which takes two lists as input and returns the number of elements in the second list which are not in the first"
    },
    {
      "rank": 48,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: ListNode\n        :type B: ListNode\n        :rtype: bool\n        \"\"\"\n        # Write your code here\n        if A is None or B is None:\n            return False\n        if len(A)!= len(B):\n            return False\n        if A.val!= B.val:\n            return False\n        if len(A) == 0:\n            return True\n        if A.next is None or B.next is None:\n            return False\n        if A.val!= B.val:\n            return False\n        p = A\n        q = B\n        while p is not None and q is not None:\n            if p.val!= q.val:\n                return False\n            p = p.next\n            q = q.next\n        return True"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n        table = [[0 for _ in xrange(len(A[0]))] for _ in xrange(len(B[0]))]\n        for i in xrange(len(A)):\n            for j in xrange(len(B[i])):\n                if A[i][j]!= B[i][j]:\n                    return False\n                table[j][i] = 1\n        return True"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isInterleave(self, word1, word2, dict):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :type dict: Set[str]\n        :rtype: bool\n        \"\"\"\n        if len(word1)!= len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i] not in dict:\n                return False\n        dict.remove(word1[0])\n        for j in range(len(word2)):\n            if word2[j] not in dict:\n                return False\n        dict.remove(word2[0])\n        return True\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isInterleave(\"a\", \"ab\", set([\"a\", \"b\"]))\n    print s.isInterleave(\"a\", \"a\", set([\"a\"]))"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "# Write your code here.\n\n\"\"\"\nThe first test case:\n\nInput: [\"abc\", \"bcd\", \"cde\"]\nOutput: True\nExplanation: The common elements are \"a\", \"b\", \"c\" and \"d\".\n\nInput: [\"bca\", \"adc\", \"dce\"]\nOutput: True\nExplanation: The common elements are \"b\", \"c\", \"a\", \"d\".\n\nInput: [\"dcb\", \"bce\", \"cde\"]\nOutput: False\nExplanation: The common elements are \"d\", \"c\", \"b\".\n\nInput: [\"cba\", \"adb\", \"bce\"]\nOutput: False\nExplanation: The common elements are \"b\", \"c\", \"a\", \"d\".\n\"\"\"\n\n\ndef common_elements(first_list, second_list):\n    common_elements = []\n    if len(first_list)!= len(second_list):\n        return False\n    for i in range(len(first_list)):\n        if first_list[i] not in second_list:\n            break\n        else:\n            common_elements.append(first_list[i])\n    return common_elements\n\n\ndef test_common_elements():\n    assert common_elements([\"abc\", \"bcd\", \"cde\"], [\"abc\", \"bcd\", \"cde\"]) == True\n    assert common_elements([\"bca\", \"adc\", \"dce\"], [\"bca\", \"adc\", \"dce\"]) == True\n    assert common_elements([\"dcb\", \"bce\", \"cde\"], [\"dcb\", \"bce\", \"cde\"]) == False\n    assert common_elements([\"cba\", \"adb\", \"bce\"], [\"cba\", \"adb\", \"bce\"]) == False"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isSame(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        if l1 is None and l2 is None:\n            return True\n        elif l1 is None or l2 is None:\n            return False\n        elif l1.val!= l2.val:\n            return False\n        else:\n            return self.isSame(l1.next, l2.next)"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "# Write your code below\ndef is_same_order(a, b):\n    # your code here\n    return a == b"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-sorted-lists/discuss/166771/Python-Python-Solution-using-a-set-of-numbers-or-strings\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n\n        inter = set()\n        for a in A:\n            for b in B:\n                if a == b:\n                    inter.add(a)\n                    break\n\n        return len(inter) == len(A) and len(inter) == len(B)\n\n        # return len(inter) == len(A) and len(inter) == len(B) and A[0] == B[0]\n\n    # def isInterleave(self, A, B):\n    #     if len(A)!= len(B):\n    #         return False\n    #     inter = set()\n    #     for a in A:\n    #         for b in B:\n    #             if a == b:\n    #                 inter.add(a)\n    #                 break\n    #     return len(inter) == len(A) and len(inter) == len(B) and A[0] == B[0]\n\n    def isInterleave(self, A, B):\n        if len(A)!= len(B):\n            return False\n\n        inter = set()\n        for a in A:\n            for b in B:\n                if a == b:\n                    inter.add(a)\n                    break\n        return len(inter) == len(A) and len(inter) == len(B) and A[0] == B[0]\n\n\nif __name__ == \"__main__\":\n    A = [\"a\", \"b\", \"c\"]\n    B = [\"a\","
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "def check_if_elements_in_same_order(first_list, second_list):\n    # write your code here\n    if first_list == second_list:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    first_list = [1, 2, 3, 4]\n    second_list = [2, 1, 4, 3]\n    print(check_if_elements_in_same_order(first_list, second_list))"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "# write your code here\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        \n        p = slow\n        while p:\n            if p.val!= fast.val:\n                return False\n            p = p.next\n            fast = fast.next\n            slow = slow.next\n        \n        return True"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        # Base cases\n        if not A or not B:\n            return len(A) == len(B)\n        if len(A) > len(B):\n            return False\n\n        # Base case\n        if len(A) == 1:\n            return A[0] == B[0]\n        elif len(A) == 2:\n            return A[0] == B[0] and A[1] == B[1]\n\n        # Recursive case\n        res = self.isInterleave(A[1:], B[1:])\n        if not res:\n            return False\n        if len(A) == 2:\n            return A[0] == B[0] and A[1] == B[1]\n\n        # Merge\n        return self.isInterleave(A[2:], B[2:])\n\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        # Base cases\n        if not A or not B:\n            return len(A) == len(B)\n        if len(A) > len(B):\n            return False\n\n        # Base case\n        if len(A) == 1:\n            return A[0] == B[0]\n        elif len(A) == 2:\n            return A[0] == B[0] and A[1] == B[1]\n\n        # Recursive case\n        res = self.isInterleave(A[1:], B[1:])\n        if not res:\n            return False\n        if len(A) == 2:\n            return A[0] == B[0] and A[1] == B[1]\n\n        # Merge"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n        if len(A) == 0:\n            return True\n        if len(A) == 1:\n            if A[0] == B[0]:\n                return True\n            else:\n                return False\n        if len(A) == 2:\n            if A[0] == B[0] and A[1] == B[1]:\n                return True\n            else:\n                return False\n        # A[0] is the longest string\n        # B[0] is the shortest string\n        # A[1] is the second longest string\n        # B[1] is the second shortest string\n        # A[0] and B[0] is in the same order\n        # A[1] and B[1] is in the same order\n        # A[0] and B[1] are different\n        # A[1] and B[0] are different\n        # A[0] and B[0] are in the same order\n        # A[1] and B[1] are in the same order\n        # A[0] and B[1] are different\n        # A[1] and B[0] are different\n        # A[0] and B[0] are in the same order\n        # A[1] and B[1] are in the same order\n        # A[0] and B[1] are different\n        # A[1] and B[0] are different\n        # A[0] and B[0] are in the same order\n        # A[1] and B[1] are in the same order\n        # A[0] and B[1] are different\n        # A[1] and B[0] are different\n        # A[0] and B[0] are in the same order\n        # A[1] and B[1] are in the same order\n        # A[0] and B[1] are different\n        #"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def hasSameElements(self, headA, headB):\n        \"\"\"\n        :type headA: ListNode\n        :type headB: ListNode\n        :rtype: bool\n        \"\"\"\n        # TODO\n        return False\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.hasSameElements([1, 2], [1, 2]))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param first: A list of integers\n    @param second: A list of integers\n    @return: a boolean\n    \"\"\"\n    def isCommonElementsInSortedOrder(self, first, second):\n        # write your code here\n        # dp[i][j] is true iff the first[i] == second[j]\n        # dp[i][j] = dp[i-1][j-1] and dp[i-1][j]\n        dp = [[False for _ in xrange(len(second))] for _ in xrange(len(first)+1)]\n        for i in xrange(1, len(first)+1):\n            for j in xrange(1, len(second)+1):\n                if i == 1 or j == 1:\n                    dp[i][j] = first[0] == second[0]\n                elif first[i-1] == second[j-1]:\n                    dp[i][j] = dp[i-1][j-1] and dp[i-1][j]\n        return dp[-1][-1]\n\na = [1,2,3,4,5,6,7,8,9]\nb = [4,3,2,1,6,7,8,9,5]\n\nprint Solution().isCommonElementsInSortedOrder(a, b)"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-sorted-lists/description/\n\nclass Solution(object):\n    def isCommonElementsInSortedLists(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = [1,2]\n# param_2 = [3,4]\n# obj.isCommonElementsInSortedLists(param_1, param_2)"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "# Write your code here.\n\n# Returns true if the common elements are in the same order.\n# Returns false otherwise.\n# Returns 0 if the two lists are both empty.\n\n# Example 1:\n# Input:\n# [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n# [\"cake\", \"eat\", \"eat\", \"eat\", \"eat\", \"nat\"]\n# Output: true\n# Example 2:\n# Input:\n# [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n# [\"cake\", \"dog\", \"cat\", \"dog\", \"dog\"]\n# Output: false\n# Example 3:\n# Input:\n# [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n# [\"cake\", \"dog\", \"cat\", \"dog\", \"cat\", \"dog\"]\n# Output: true\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        if not A or not B:\n            return False\n        len_A = len(A)\n        len_B = len(B)\n        if len_A < len_B:\n            len_B = len_A\n            A, B = B, A\n        for i in xrange(0, len_B):\n            if A[i]!= B[i]:\n                return False\n        return True"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n    result = []\n    for elem in list1:\n        if elem not in result:\n            result.append(elem)\n    return result == list2\n\n# Your CommonElements object will be instantiated and called as such:\n# obj = CommonElements(list1, list2)\n# param_1 = obj.common_elements(list1, list2)"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def hasCycle(self, headA: ListNode, headB: ListNode) -> bool:\n        fast = slow = headA\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if fast == slow:\n            return False\n        slow = headB\n        while slow and slow.next:\n            fast = fast.next\n            slow = slow.next\n            if fast == slow:\n                break\n        if fast == slow:\n            return True\n        return False"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# Complete the function below.\ndef is_same(l1, l2):\n    # write your code here\n    if l1 == l2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 4, 5]\n    print(is_same(l1, l2))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def common_elements_in_same_order(list1, list2):\n    return list1 == list2\n\n# Test Cases\nlist1 = ['b', 'a', 'c']\nlist2 = ['a', 'b', 'c']\n\nprint common_elements_in_same_order(list1, list2)\n\nlist1 = ['b', 'a', 'c']\nlist2 = ['a', 'b', 'd']\n\nprint common_elements_in_same_order(list1, list2)\n\nlist1 = ['a', 'b', 'c']\nlist2 = ['a', 'b', 'c', 'd']\n\nprint common_elements_in_same_order(list1, list2)"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isSubsequence(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if not A or not B:\n            return False\n        return sorted(A) == sorted(B)\n\n    def isSubsequence2(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if not A or not B:\n            return False\n        return sorted(A) == sorted(B)"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isSame(self, first, second):\n        \"\"\"\n        :type first: List[int]\n        :type second: List[int]\n        :rtype: bool\n        \"\"\"\n        # write your code here\n        if len(first)!= len(second):\n            return False\n        return sorted(first) == sorted(second)\n\na = Solution()\nprint(a.isSame([1, 2, 3, 4, 5], [5, 1, 2, 3, 4]))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isCommonElementsTheSame(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        if not nums1 or not nums2:\n            return False\n\n        l1 = set(nums1)\n        l2 = set(nums2)\n\n        if l1 == l2:\n            return True\n\n        if len(l1) == len(l2):\n            return True\n\n        for n1 in l1:\n            if n1 in l2:\n                return True\n\n        return False"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n        table = [[False for j in range(len(B[0]))] for i in range(len(A))]\n        for i in range(len(A)):\n            for j in range(len(B[0])):\n                if A[i][j] == B[0][j]:\n                    table[i][j] = True\n                else:\n                    table[i][j] = False\n        for i in range(1, len(A)):\n            for j in range(1, len(B[0])):\n                if A[i][j] == B[i][j]:\n                    table[i][j] = True\n                else:\n                    table[i][j] = False\n        return all(table[i][j] for i in range(len(A)) for j in range(len(B[0])))\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/interleaving-strings/solution/\n\n# 1ms 100%\nclass Solution {\n    public boolean isInterleave(String[] strs, String[] strs1) {\n        int m = strs.length;\n        int n = strs1.length;\n        if (m == 0 || n == 0) return false;\n        if (m!= n) return false;\n\n        Map<String, Boolean> map = new HashMap<>();\n        for (int i = 0; i < m; i++) {\n            String s = strs[i];\n            if (!map.containsKey(s)) {\n                map.put(s, false);\n            }\n        }\n\n        for (int i = 0;"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from collections import Counter\n\nclass Solution(object):\n    def isCommonElementsTheSame(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(nums1) == len(nums2) and Counter(nums1) == Counter(nums2)\n\n    def isCommonElementsTheSame_1(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(nums1) == len(nums2) and nums1 == nums2"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if slow == fast:\n            return True\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if slow == fast:\n            return True\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-sorted-lists/description/\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: ListNode\n        :type B: ListNode\n        :rtype: bool\n        \"\"\"\n        if A is None or B is None:\n            return False\n        if A.val!= B.val:\n            return False\n        if A.val in {'#', '$'}:\n            return True\n        if A.next is None:\n            return A.val == B.val\n        if B.next is None:\n            return False\n        if A.val == B.val:\n            return self.isInterleave(A.next, B.next)\n        else:\n            return self.isInterleave(A.next, B) or self.isInterleave(A, B.next)"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n        elif len(A) == 0 or len(B) == 0:\n            return True\n        else:\n            return self.isInterleave(A[1:], B[1:]) and A[0] == B[0]"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param two lists\n    # @return a boolean\n    def isSame(self, A, B):\n        if len(A)!= len(B):\n            return False\n        i = 0\n        while i < len(A):\n            if A[i]!= B[i]:\n                return False\n            i += 1\n        return True\n\n    # @param two lists\n    # @return a boolean\n    def isSame(self, A, B):\n        if len(A)!= len(B):\n            return False\n        if len(A) == 0:\n            return True\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n\n    # @param two lists\n    # @return a boolean\n    def isSame(self, A, B):\n        if len(A)!= len(B):\n            return False\n        if len(A) == 0:\n            return True\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n\n    # @param A, B, the two lists\n    # @return a boolean\n    def isSame(self, A, B):\n        if len(A)!= len(B):\n            return False\n        if len(A) == 0:\n            return True\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n\n    # @param A, B, the two lists\n    # @return a boolean\n    def isSame(self, A, B):\n        if len(A)!= len(B):\n            return False\n        if len(A) == 0:\n            return True\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.isSame(A, B)"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/common-elements-in-two-lists\n\ndef common_elements(A, B):\n    # write your code here\n    if len(A) == 0 and len(B) == 0:\n        return True\n    elif len(A) == 0 or len(B) == 0:\n        return False\n\n    # Check if the common elements are in the same order.\n    # If they are not, return False.\n    # If they are in the same order, return True.\n    return sorted(A) == sorted(B)\n\n\nif __name__ == \"__main__\":\n    A = [1, 3, 5]\n    B = [2, 3, 5]\n\n    print(common_elements(A, B))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/common-elements-in-two-lists/problem\n\ndef common_elements(list1, list2):\n    # write your code here\n    common = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common.append(list1[i])\n    return common\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 4, 5, 7, 8]\n    common = common_elements(list1, list2)\n    print(common)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    # @param {ListNode} l1\n    # @param {ListNode} l2\n    # @return {boolean}\n    def isIntersection(self, l1, l2):\n        p1 = l1\n        p2 = l2\n        while p1 and p2:\n            if p1.val == p2.val:\n                p1 = p1.next\n                p2 = p2.next\n            else:\n                break\n        return p1 and p2\n\n\nif __name__ == '__main__':\n    s = Solution()\n    l1 = ListNode(1)\n    l1.next = ListNode(2)\n    l1.next.next = ListNode(3)\n    l2 = ListNode(1)\n    l2.next = ListNode(2)\n    l2.next.next = ListNode(4)\n    print s.isIntersection(l1, l2)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isSameOrder(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        return sorted(nums1) == sorted(nums2)\n\n    def isSameOrder_2(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        return sorted(nums1) == sorted(nums2)\n\n    def isSameOrder_3(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        for i in range(len(nums1)):\n            if nums1[i]!= nums2[i]:\n                return False\n        return True"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# Write your code here.\n\n\"\"\"\nNote:\n    The length of the given lists is less than 100.\n\"\"\"\n\n# Example 1:\n# Input:\n# [1,2,3,4], [5,6,7]\n# Output: True\n# Example 2:\n# Input:\n# [1,2,3,4], [1,2,3]\n# Output: False\n\"\"\"\nclass Solution(object):\n    def isSameList(self, l1, l2):\n        \"\"\"\n        :type l1: List[int]\n        :type l2: List[int]\n        :rtype: bool\n        \"\"\"\n        # http://www.tutorialspoint.com/programming/programming_tutorial/programming_tutorial_tutorial_part_7/\n        if len(l1)!= len(l2):\n            return False\n        for i in range(len(l1)):\n            if l1[i]!= l2[i]:\n                return False\n        return True"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def hasSameElements(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        l1_len = 0\n        while l1 is not None:\n            l1_len += 1\n            l1 = l1.next\n\n        l2_len = 0\n        while l2 is not None:\n            l2_len += 1\n            l2 = l2.next\n\n        if l1_len!= l2_len:\n            return False\n\n        curr = l1\n        prev = None\n        while curr is not None:\n            if curr.val!= prev.val:\n                return False\n            prev = curr\n            curr = curr.next\n        return True"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @return {boolean}\n    def isInterleave(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums1) == 0 or len(nums2) == 0:\n            return False\n        if len(nums1)!= len(nums2):\n            return False\n        \n        result = []\n        for i in range(len(nums1)):\n            result.append('')\n            \n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    result[i] += nums2[j]\n        \n        for i in range(len(nums1)):\n            if len(result[i])!= len(nums1):\n                return False\n        \n        return True"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isCommonElementsTheSame(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n        \n        result = [False] * len(A)\n        \n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                result[i] = True\n        \n        for i in range(len(A)):\n            if result[i]:\n                return False\n        \n        return True\n\nprint Solution().isCommonElementsTheSame([1, 2, 3, 4], [1, 2, 3, 4, 5])"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/sorted-list-common-elements\n\n# In[ ]:\n\n#!/bin/python\n\nclass Solution:\n    def commonElements(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n        \n        count = 0\n        for i in xrange(len(A)):\n            if A[i] == B[i]:\n                count += 1\n            \n        return count == len(A)\n\nprint Solution().commonElements([1,2,3,4], [1,3,4,5])\nprint Solution().commonElements([1,2,3,4], [2,3,4,5])\nprint Solution().commonElements([1,2,3,4], [1,2,3,4,5])\nprint Solution().commonElements([1,2,3,4], [1,2,3,5])\nprint Solution().commonElements([1,2,3,4], [1,2,3,4,5,6])\nprint Solution().commonElements([1,2,3,4], [2,3,4,5])\n\n\n# In[ ]:"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/common-elements-in-two-lists/discuss/275761/Python-Solutions-1-25-lines\n\nclass Solution(object):\n    def isInterleave(self, word1, word2, sub):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :type sub: str\n        :rtype: bool\n        \"\"\"\n        if len(sub) > len(word1) or len(sub) > len(word2):\n            return False\n\n        for i in range(len(word1)):\n            if word1[i]!= sub[i] and word2[i]!= sub[i]:\n                return False\n\n        for i in range(len(sub)):\n            if word1[i:i+len(sub)] == sub:\n                return True\n\n        return False\n\n    def isInterleave2(self, word1, word2, sub):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :type sub: str\n        :rtype: bool\n        \"\"\"\n        if len(sub) > len(word1) or len(sub) > len(word2):\n            return False\n\n        for i in range(len(sub)):\n            if word1[i:i+len(sub)] == sub:\n                return True\n\n        return False\n\n    def isInterleave3(self, word1, word2, sub):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :type sub: str\n        :rtype: bool\n        \"\"\"\n        if len(sub) > len(word1) or len(sub) > len(word2):\n            return False\n\n        for i in range(len(sub)):\n            if word1[i:i+len(sub)] == sub:\n                return True\n\n        return False\n\n    def isInterleave4(self, word1, word2, sub):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :type sub: str\n        :rtype: bool\n        \"\"\"\n        if len(sub) > len(word1)"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def common_elements(list1, list2):\n    # write your code here\n    common_elements_list = []\n    for i in range(len(list1)):\n        if i in list2:\n            common_elements_list.append(list1[i])\n    return common_elements_list\n\n\ndef test():\n    assert common_elements([1, 2, 3], [3, 2, 1]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [3, 1, 2]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [2, 1, 3]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [1, 3, 2]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [2, 3, 1]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [3, 2, 1]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [3, 1, 2]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [2, 3, 1]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [3, 2, 1]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [3, 1, 2]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [2, 3, 1]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    assert common_elements([1, 2, 3], [2, 3, 1]) == [1,"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, val=0, next=None):\n\t\tself.val = val\n\t\tself.next = next\n\nclass Solution:\n\t# @param l1, a list\n\t# @param l2, a list\n\t# @return a boolean\n\tdef hasSameElements(self, l1, l2):\n\t\tif l1 == None or l2 == None:\n\t\t\treturn False\n\t\tif l1 == l2:\n\t\t\treturn True\n\t\thead1 = l1\n\t\thead2 = l2\n\t\twhile head1!= None and head2!= None:\n\t\t\tif head1.val!= head2.val:\n\t\t\t\treturn False\n\t\t\thead1 = head1.next\n\t\t\thead2 = head2.next\n\t\treturn True\n\nif __name__ == '__main__':\n\ts = Solution()\n\tprint s.hasSameElements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def hasSameElements(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: bool\n        \"\"\"\n        curr1 = l1\n        curr2 = l2\n        while curr1 and curr2:\n            if curr1.val!= curr2.val:\n                return False\n            curr1 = curr1.next\n            curr2 = curr2.next\n        return curr1 is None"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Write your code here\n# This is the data structure you should use\nclass Solution(object):\n    def isInterleave(self, s1, s2, t1, t2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type t1: str\n        :type t2: str\n        :rtype: bool\n        \"\"\"\n        if not s1 or not s2:\n            return False\n        if s1 == t1 and s2 == t2:\n            return True\n        if s1 == t2 and s2 == t1:\n            return True\n        if not (s1 == t1 or s2 == t1 or s1 == t2 or s2 == t2):\n            return False\n        if s1[:len(t1)] == t1 or s2[:len(t2)] == t2:\n            return self.isInterleave(s1[len(t1):], s2[len(t2):], t1, t2)\n        if s1[:len(t1)] == t2 or s2[:len(t2)] == t1:\n            return self.isInterleave(s1[len(t1):], s2[len(t2):], t2, t1)\n        return False"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import collections\n\ndef common_elements(list1, list2):\n    # write your code here\n    \n    if not (isinstance(list1, collections.Iterable) and isinstance(list2, collections.Iterable)):\n        return False\n\n    elif len(list1)!= len(list2):\n        return False\n\n    elif len(list1) == 0:\n        return True\n\n    elif len(list2) == 0:\n        return True\n\n    else:\n        # create a dictionary to store the elements of the list\n        dic1 = collections.defaultdict(list)\n        dic2 = collections.defaultdict(list)\n\n        for element in list1:\n            dic1[element].append(1)\n\n        for element in list2:\n            dic2[element].append(1)\n\n        # check if the elements are the same in the two lists\n        if not set(dic1.keys()).isdisjoint(set(dic2.keys())):\n            return True\n\n        else:\n            return False\n\n#list1 = [1, 2, 3, 4]\n#list2 = [3, 2, 1, 4]\n\n#common_elements(list1, list2)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: ListNode\n        :type B: ListNode\n        :rtype: bool\n        \"\"\"\n        if A is None and B is None:\n            return True\n        if A is None or B is None:\n            return False\n\n        if A.val == B.val:\n            return self.isInterleave(A.next, B.next)\n\n        if A.val < B.val:\n            return self.isInterleave(A.next, B)\n        else:\n            return self.isInterleave(A, B.next)\n\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: ListNode\n        :type B: ListNode\n        :rtype: bool\n        \"\"\"\n        if A is None and B is None:\n            return True\n        if A is None or B is None:\n            return False\n\n        if A.val == B.val:\n            return self.isInterleave(A.next, B.next)\n\n        if A.val < B.val:\n            return self.isInterleave(A, B.next)\n        else:\n            return self.isInterleave(A.next, B)\n\nif __name__ == '__main__':\n    A = ListNode(1)\n    B = ListNode(1)\n    print(Solution().isInterleave(A, B))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isSubset(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        return all(A[i] == B[i] for i in range(len(A)))\n\n    def isSubset2(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: bool\n        \"\"\"\n        return sorted(A) == sorted(B)\n\nif __name__ == '__main__':\n    assert Solution().isSubset([1, 2], [2, 3]) == True\n    assert Solution().isSubset([1, 2], [1, 2]) == True\n    assert Solution().isSubset([1, 2], [2, 1]) == False\n    assert Solution().isSubset([1, 2, 3], [2, 3, 1]) == True\n    assert Solution().isSubset([1, 2, 3], [2, 1, 1]) == False"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def is_same_order(list1, list2):\n    # write your code here\n    return list1 == list2"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isInterleave(self, first, second, result):\n        \"\"\"\n        :type first: List[str]\n        :type second: List[str]\n        :type result: List[str]\n        :rtype: bool\n        \"\"\"\n        return self.helper(first, second, result, [], [])\n\n    def helper(self, first, second, result, temp, tmp):\n        if len(first) == 0:\n            return True\n        if len(second) == 0:\n            return False\n        if first[0]!= second[0]:\n            return False\n        if len(first) == 1 and len(second) == 1:\n            return True\n        if len(first) > 1 and len(second) > 1:\n            if self.helper(first[1:], second[1:], result, temp, tmp):\n                result.append(first[0])\n                if len(first) > 2:\n                    temp.append(first[0])\n                return self.helper(first[1:], second, result, temp, tmp)\n            else:\n                return False\n        else:\n            return self.helper(first[1:], second, result, temp, tmp)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Write your code here\ndef is_in_same_order(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n    else:\n        return all(list1[i] == list2[i] for i in range(len(list1)))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport collections\n\nclass Solution(object):\n    def isInterleave(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: bool\n        \"\"\"\n        if len(A)!= len(B):\n            return False\n        inter = collections.deque()\n        for i in range(len(A)):\n            if A[i] == B[i]:\n                inter.append(A[i])\n        if inter:\n            if inter.pop() == inter.popleft():\n                return True\n            else:\n                return False\n        else:\n            return False"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def common_elements(l1, l2):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :rtype: bool\n    \"\"\"\n    # Write your code here\n    return len(set(l1).intersection(set(l2))) == 0\n\n# Your CommonElements object will be instantiated and called as such:\n# obj = CommonElements()\n# param_1 = obj.common_elements(l1, l2)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def common_elements(list_1, list_2):\n    \"\"\"\n    :type list_1: List[int]\n    :type list_2: List[int]\n    :rtype: bool\n    \"\"\"\n    # Write your code here\n    if len(list_1)!= len(list_2):\n        return False\n\n    # Make a set of the elements\n    set_1 = set(list_1)\n    set_2 = set(list_2)\n\n    # Check if the sets are the same\n    if set_1 == set_2:\n        return True\n    else:\n        return False\n\n\n# Tests\n#>>> common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n#True\n#>>> common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7])\n#False"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef common_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n\n    # initialize dictionary\n    dict1 = {}\n    for i in range(len(list1)):\n        dict1[list1[i]] = True\n\n    # initialize dictionary\n    dict2 = {}\n    for i in range(len(list2)):\n        dict2[list2[i]] = True\n\n    # compare two dictionaries\n    for i in range(len(list1)):\n        if not dict1[list1[i]] and not dict2[list2[i]]:\n            return False\n\n    return True\n\n\nclass TestCommonElements(unittest.TestCase):\n    def test_common_elements(self):\n        self.assertFalse(common_elements([1, 2, 3], [3, 4, 5]))\n        self.assertTrue(common_elements([1, 2, 3], [1, 2, 3]))\n\n\nif __name__ == '__main__':\n    unittest.main()"
    }
  ]
}