{
  "timestamp": "2025-09-14T20:38:07.217117",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 440,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://www.reddit.com/r/dailyprogrammer/comments/3j3bvw/20150429_challenge_156_easy_regex_whitespace/\n\nimport re\n\ndef remove_whitespace(string):\n    return re.sub(r'\\s+', '', string)\n\n# test cases\n# print remove_whitespace(\"\")\n# print remove_whitespace(\"This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace(\"This is a test.  This is a test.\")\n# print remove_whitespace"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def remove_whitespaces(string):\n    return string.strip()\n\nif __name__ == '__main__':\n    string = \"  Hello World  \"\n    print remove_whitespaces(string)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeWhitespaces(self, s):\n        if not s:\n            return ''\n        return re.sub('\\s', '', s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeWhitespaces('   ')"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {string}\n    def removeWhitespace(self, s):\n        return s.replace(r'\\s+','')\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.removeWhitespace(\" \"))\n    print(s.removeWhitespace(\"   \"))\n    print(s.removeWhitespace(\"\\t\"))\n    print(s.removeWhitespace(\"\\n\"))\n    print(s.removeWhitespace(\"\\n \"))\n    print(s.removeWhitespace(\"\\n   \"))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/whitespace-removal-regex/problem\n\nimport re\n\n\ndef remove_whitespaces(string):\n    return re.sub(\"\\s+\", \" \", string)\n\nif __name__ == \"__main__\":\n    string = input().strip()\n    print(remove_whitespaces(string))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def remove_whitespace(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(\"\\s+\", \"\", s)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# I/O Imports\nimport re\n\n\n# Function to remove whitespaces\ndef remove_whitespaces(string):\n    return re.sub(r\"\\s\", \"\", string)\n\n\n# Test cases\ntest_cases = [\n    ('', ''),\n    ('Hello', 'Hello'),\n    ('  Hello  ', 'Hello'),\n    (' Hello', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello  ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('   Hello   ', 'Hello'),\n    (' Hello ', 'Hello'),\n    ('"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/regex-whitespace-removal/problem\n\ndef remove_whitespaces(s):\n    return ''.join(filter(lambda x: x.isspace(), s))\n\nif __name__ == \"__main__\":\n    s = input().strip()\n    print(remove_whitespaces(s))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import re\n\ndef remove_all_whitespaces(string):\n    return re.sub(\"\\s+\", \"\", string)\n\nprint(remove_all_whitespaces(\" \"))\nprint(remove_all_whitespaces(\"   \\t \\n\"))\nprint(remove_all_whitespaces(\"\\t   \\n   \\t \\n  \\t   \"))\nprint(remove_all_whitespaces(\"\\t   \\n   \\t \\n  \\t   \"))\nprint(remove_all_whitespaces(\"\\t   \\n   \\t \\n  \\t   \"))\nprint(remove_all_whitespaces(\"\\t   \\n   \\t \\n  \\t   \"))\nprint(remove_all_whitespaces(\"\\t   \\n   \\t \\n  \\t   \"))\nprint(remove_all_whitespaces(\"\\t   \\n   \\t \\n  \\t   \"))\nprint(remove_all_whitespaces(\"\\t   \\n   \\t \\n  \\t   \"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {string}\n    def removeWhitespaces(self, s):\n        return re.sub(\"\\s+\", \" \", s)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeWhitespaces(\"  a  \"))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/whitespace-regex\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white-space-removal/practice-problems/practice-question/\n# https://www.hackerearth.com/practice/data-structures/strings/algorithms/regex-white"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/remove-all-whitespaces-in-a-string/discuss/876426/Python-Solution-Using-Regular-Expression\n\nclass Solution:\n    # @param {string} str\n    # @return {string}\n    def removeWhitespaces(self, str):\n        return re.sub('[\\s]+', '', str)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeWhitespace(self, s):\n        return ''.join(filter(lambda x: x.isspace(), s))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeWhitespace('hello world')"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n\n# Your Solution here"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/remove-all-whitespace/\n\nclass Solution(object):\n    def removeWhiteSpaces(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(' ', '')"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def remove_whitespaces(string):\n    return string.replace(' ', '')\n\nif __name__ == \"__main__\":\n    string = \" I am a string \"\n    print(remove_whitespaces(string))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeWhitespaces(self, s):\n        return re.sub('\\s+', '', s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeWhitespaces(\"   \")\n    print s.removeWhitespaces(\"\\t\")\n    print s.removeWhitespaces(\"  \")\n    print s.removeWhitespaces(\"\\t\\t\\t\\t\\t\\t\\t\")\n    print s.removeWhitespaces(\"\\t\\t\\t\\t\\t\\t\")\n    print s.removeWhitespaces(\"\\t\\t\\t\\t\\t\")\n    print s.removeWhitespaces(\"\\t\\t\\t\\t\")\n    print s.removeWhitespaces(\"\\t\\t\\t\")\n    print s.removeWhitespaces(\"\\t\\t\")\n    print s.removeWhitespaces(\"\\t\")\n    print s.removeWhitespaces(\"\")"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeWhitespace(self, s):\n        return re.sub('\\s+', '', s)\n\n\nif __name__ == \"__main__\":\n    print Solution().removeWhitespace('   a   b   c   ')"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/remove-all-whitespaces\n\ndef remove_all_whitespaces(s):\n    return ''.join(filter(lambda x: x!='', s))\n\nif __name__ == '__main__':\n    s = input()\n    print(remove_all_whitespaces(s))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import re\n\ns = \" hello world   \"\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+','', s)\n\nprint remove_whitespaces(s)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def remove_whitespaces(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub('\\s+','', s)\n\nif __name__ == '__main__':\n    sol = Solution()\n    s ='  '\n    print(sol.remove_whitespaces(s))\n    s = '\\t\\t'\n    print(sol.remove_whitespaces(s))\n    s = '\\t\\t\\t'\n    print(sol.remove_whitespaces(s))\n    s =' \\t\\t  '\n    print(sol.remove_whitespaces(s))\n    s = '\\t\\t  '\n    print(sol.remove_whitespaces(s))\n    s = '\\t\\t  \\t'\n    print(sol.remove_whitespaces(s))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def remove_whitespace(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub('\\s+','', s)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def removeWhitespaces(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub('[\\s]+', '', str)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def remove_all_whitespaces(s):\n    return re.sub('\\s+', '', s)\n\nprint remove_all_whitespaces(\"a b c d e f g h i j k l m n o p q r s t u v w x y z \")"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "import re\n\ndef remove_all_whitespaces(text):\n    return re.sub('\\s+', '', text)\n\nif __name__ == '__main__':\n    s =''\n    print(remove_all_whitespaces(s))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def remove_whitespaces(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.strip()\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.remove_whitespaces(\"   \\t  \"))\n    print(s.remove_whitespaces(\"abc\"))\n    print(s.remove_whitespaces(\"\\n\\n\\n\"))\n    print(s.remove_whitespaces(\"a\\tb\\n\"))\n    print(s.remove_whitespaces(\"\\t\\t\"))\n    print(s.remove_whitespaces(\"\\n\\n\\n\"))\n    print(s.remove_whitespaces(\" \"))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def remove_whitespace(s):\n    return ''.join(c for c in s if c.isspace())\n\nprint(remove_whitespace(\"   \\t\\n \\n  \\t\\n\\n\"))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/remove-whitespace/\n\nclass Solution(object):\n    def removeWhitespaces(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.isspace(), s))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "import re\n\ndef remove_whitespaces(s):\n    return re.sub('\\s+', '', s)\n\nif __name__ == '__main__':\n    s = 'This is a test.'\n    print remove_whitespaces(s)"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "import re\n\ndef remove_whitespaces(string):\n    return re.sub(\"\\s+\", \" \", string)\n\nif __name__ == \"__main__\":\n    s = \"   This is a test string    \"\n    print remove_whitespaces(s)"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "import re\n\ns = \"   \"\nprint s\n\ns = re.sub(\"\\s+\", \"\", s)\nprint s"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s: str):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass Solution:\n    def removeWhiteSpace(self, s: String) -> String:\n        return re.sub(r'\\s+', '', s)"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def remove_whitespaces(s):\n    pattern = r'\\s+'\n    return re.sub(pattern, '', s)\n\nprint(remove_whitespaces(' hello world '))"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(\"\\s+\", \" \", s)\n\nif __name__ == \"__main__\":\n    s = \"I love this movie\"\n    print(remove_whitespaces(s))"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "import re\n\n\ndef remove_whitespaces(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return re.sub(\"\\s+\", \"\", string)\n\nif __name__ == '__main__':\n    assert remove_whitespaces(\" \") == \"\", \"Regex doesn't work\"\n    assert remove_whitespaces(\"\") == \"\", \"Regex doesn't work\"\n    assert remove_whitespaces(\"  \") == \"\", \"Regex doesn't work\"\n    assert remove_whitespaces(\"  a  b\") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\"  a  b  \") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\"a\") == \"a\", \"Regex doesn't work\"\n    assert remove_whitespaces(\"a  \") == \"a\", \"Regex doesn't work\"\n    assert remove_whitespaces(\"a b\") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\"a  b\") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\" a  b \") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\"a  b  \") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\" a b  \") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\" a b \") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\" a b  \") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\" a b \") == \"a b\", \"Regex doesn't work\"\n    assert remove_whitespaces(\" a b \") == \"a b\", \"Regex doesn't work\""
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def remove_whitespaces(s):\n    return re.sub('\\s+','', s)\n\nif __name__ == '__main__':\n    s ='   '\n    print remove_whitespaces(s)\n    print remove_whitespaces('   ')\n    print remove_whitespaces('')\n    print remove_whitespaces(None)\n    print remove_whitespaces(123)\n    print remove_whitespaces(123.45)\n    print remove_whitespaces(123.45, '.')"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def remove_all_whitespaces(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    return str.replace(\" \", \"\")\n\n# -----------------------------------------------------------------------------\n\nif __name__ == '__main__':\n    import sys\n    s = 'hello world'\n    print remove_all_whitespaces(s)\n    print sys.argv[1]"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def remove_whitespaces(s):\n    return re.sub('\\s+','', s)\n\ndef test():\n    assert remove_whitespaces('abcd') == 'abcd', 'Remove whitespaces'\n    assert remove_whitespaces('abcd ') == 'abcd', 'Remove whitespaces with space'\n    assert remove_whitespaces('abcd\\n') == 'abcd', 'Remove whitespaces with newline'\n    assert remove_whitespaces('abcd\\n ') == 'abcd', 'Remove whitespaces with newline and space'\n    assert remove_whitespaces('\\n') == '\\n', 'Remove whitespaces with newline'\n    assert remove_whitespaces('\\t') == '\\t', 'Remove whitespaces with tab'\n    assert remove_whitespaces('\\t\\t') == '\\t', 'Remove whitespaces with tab and tab'\n    assert remove_whitespaces('a') == 'a', 'Remove whitespaces with one letter'\n    assert remove_whitespaces('a b') == 'a b', 'Remove whitespaces with two letters'\n    assert remove_whitespaces(' a') == 'a', 'Remove whitespaces with one letter and space'\n    assert remove_whitespaces(' a ') == 'a', 'Remove whitespaces with one letter and space and space'\n    assert remove_whitespaces(' a b ') == 'a b', 'Remove whitespaces with one letter and space and space'\n    assert remove_whitespaces(' a \\t b ') == 'a \\t b', 'Remove whitespaces with one letter and space and tab'\n    assert remove_whitespaces('a\\tb') == 'a\\tb', 'Remove whitespaces with one letter and tab'\n    assert remove_whitespaces('a\\tb\\t') == 'a\\tb\\t', 'Remove whitespaces with one letter and tab and space'\n    assert remove_whitespaces('a\\tb\\t ') == 'a\\tb\\t', 'Remove whitespaces with one letter and tab and space and space'\n    assert remove_whitespaces('a\\tb\\t c') == 'a\\tb\\t c', '"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")\n\nprint(remove_whitespaces(\"This is a test\"))\nprint(remove_whitespaces(\"  This is a test  \"))\nprint(remove_whitespaces(\"  This is a test  \\t\"))\nprint(remove_whitespaces(\"This is a test  \\t  \"))\nprint(remove_whitespaces(\"This is a test  \\t  \\t\"))\nprint(remove_whitespaces(\"This is a test  \\t  \\t \\t\"))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "# TODO:\n# - Test cases\n# - Performance\n# - Test on strings that have more than one whitespace character\n\n# TODO:\n# - Performance\n# - Test on strings that have more than one whitespace character\n\nimport re\n\n# TODO:\n# - Test on strings that have more than one whitespace character\n\ndef remove_all_whitespaces(s):\n    return re.sub('\\s+', '', s)\n\n# TODO:\n# - Test on strings that have more than one whitespace character\n\ndef remove_all_whitespaces_regex(s):\n    return re.sub('\\s+', '', s)\n\n# TODO:\n# - Test on strings that have more than one whitespace character\n\nif __name__ == '__main__':\n    s ='  This is a test   '\n    print('Original string: {}'.format(s))\n    print('Regex pattern: {}'.format(re.compile(r'\\s+').pattern))\n    print('Remove all whitespaces: {}'.format(remove_all_whitespaces(s)))\n    print('Remove all whitespaces (regex): {}'.format(remove_all_whitespaces_regex(s)))\n    print('Remove all whitespaces (regex): {}'.format(remove_all_whitespaces_regex(s)))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import re\n\n# Complete the function below.\ndef remove_whitespaces(s):\n    return re.sub('\\s+', '', s)\n\nif __name__ == '__main__':\n    s ='  '\n    print remove_whitespaces(s)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\nclass Solution(object):\n    def remove_whitespace(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(None, str.split()))\n\nif __name__ == '__main__':\n    assert Solution().remove_whitespace(\"\") == \"\"\n    assert Solution().remove_whitespace(\"a\") == \"a\"\n    assert Solution().remove_whitespace(\"  \") == \"a\"\n    assert Solution().remove_whitespace(\"a  \") == \"a\"\n    assert Solution().remove_whitespace(\"a\\t\") == \"a\"\n    assert Solution().remove_whitespace(\"a\\n\") == \"a\"\n    assert Solution().remove_whitespace(\"a\\r\") == \"a\"\n    assert Solution().remove_whitespace(\"a\\n\\n\") == \"a\"\n    assert Solution().remove_whitespace(\"a\\n\\r\\n\") == \"a\"\n    assert Solution().remove_whitespace(\"a\\t\\n\") == \"a\"\n    assert Solution().remove_whitespace(\"a\\t\\r\\n\") == \"a\"\n    assert Solution().remove_whitespace(\"a\\n\\n\\r\\r\\n\") == \"a\"\n    assert Solution().remove_whitespace(\"\\t\\n\\r\\n\") == \"\\t\\n\\r\\n\""
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/regex-whitespace\n\ndef remove_whitespaces(s):\n    return s.replace(\" \",\"\")\n\nif __name__ == '__main__':\n    s = input()\n    print(remove_whitespaces(s))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import re\n\ndef remove_whitespaces(str_):\n    return re.sub('\\s+', '', str_)\n\nprint(remove_whitespaces('   '))\nprint(remove_whitespaces('\\t'))\nprint(remove_whitespaces('   \\t'))\nprint(remove_whitespaces('   \\n'))\nprint(remove_whitespaces('   \\n  '))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import re\n\ndef remove_whitespace(s):\n    return re.sub(\"\\s+\", \" \", s)\n\nif __name__ == \"__main__\":\n    s = \"This is a test string\"\n    print(remove_whitespace(s))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# Definition for a string\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\nclass Solution:\n    def removeWhitespace(self, s: String) -> String:\n        return re.sub(\"\\s\", \"\", s)\n\nif __name__ == \"__main__\":\n    s = String(\"This is a test\")\n    print(Solution().removeWhitespace(s))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeWhitespaces(self, str):\n        return re.sub(\"\\s\", \"\", str)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeWhitespaces(\" \\n\\t\\r\")"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import re\n\n# Complete the removeWhitespace function below.\ndef removeWhitespace(s):\n    return re.sub('\\s+', '', s)\n\nif __name__ == '__main__':\n    s =' a  b   c  '\n    print(removeWhitespace(s))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_whitespaces(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return re.sub('\\s+','', string)\n\n\nif __name__ == '__main__':\n    assert remove_whitespaces(' a b c d e f  ') == 'a b c d e f'\n    assert remove_whitespaces(' a b c d e f ') == 'a b c d e f'\n    assert remove_whitespaces(' a b c d e f  ') == 'a b c d e f'\n    assert remove_whitespaces(' a b c d e f ') == 'a b c d e f'\n    assert remove_whitespaces('a') == 'a'\n    assert remove_whitespaces('a ') == 'a'\n    assert remove_whitespaces('a b') == 'a b'\n    assert remove_whitespaces('a b c d e f') == 'a b c d e f'\n    assert remove_whitespaces('a b c d e f ') == 'a b c d e f'\n    assert remove_whitespaces('a b c d e f  ') == 'a b c d e f'\n    assert remove_whitespaces('a b c d e f ') == 'a b c d e f'\n    assert remove_whitespaces('a\\nb\\nc\\nd\\ne\\nf') == 'a b c d e f'\n    assert remove_whitespaces('a\\nb\\nc\\nd\\ne\\nf ') == 'a b c d e f'"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/remove-all-whitespaces\n\ndef remove_all_whitespaces(s):\n    return ''.join(i for i in s.strip() if i!='')\n\nif __name__ == \"__main__\":\n    s = input()\n    print(remove_all_whitespaces(s))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "import re\n\ns = \"  Hello World!   \"\nprint(re.sub('\\s+', '', s))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "# TODO:\n# - Remove whitespaces from start and end\n# - Remove multiple whitespaces\n# - Remove multiple spaces between words\n\nfrom string import whitespace\n\ndef remove_whitespaces(string):\n    return ''.join(char for char in string if char not in whitespace)\n\ndef remove_whitespaces_regex(string):\n    return ''.join(char for char in string if char not in whitespace)\n\nif __name__ == '__main__':\n    print(remove_whitespaces('  a  b  c  '))\n    print(remove_whitespaces_regex('  a  b  c  '))\n    print(remove_whitespaces_regex('a b c'))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def remove_all_whitespaces(string):\n    return re.sub(\"\\s+\", \"\", string)\n\n\nif __name__ == '__main__':\n    string = 'Hello world, this is a test'\n    print remove_all_whitespaces(string)\n    print remove_all_whitespaces('Hello World')\n    print remove_all_whitespaces('Hello World, this is a test')\n    print remove_all_whitespaces('Hello World, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this is a test')\n    print remove_all_whitespaces('Hello world, this"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import re\n\ndef remove_whitespaces(s):\n    return re.sub('\\s', '', s)\n\ndef main():\n    s =' a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z  A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z  1  2  3  4  5  6  7  8  9  0  -  =  +  #  $  %  &  *  (  )  ^  +  |  >  <  >  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n    def __repr__(self):\n        return '<String %r>' % self.s\n\nclass Solution:\n    def removeWhiteSpace(self, S):\n        \"\"\"\n        :type S: String\n        :rtype: String\n        \"\"\"\n        return re.sub(\"\\s\", \"\", S)\n\n\nif __name__ == \"__main__\":\n    assert Solution().removeWhiteSpace(\"\") == \"\"\n    assert Solution().removeWhiteSpace(\" \") == \"\"\n    assert Solution().removeWhiteSpace(\"\\n\") == \"\"\n    assert Solution().removeWhiteSpace(\"Hello World!\") == \"Hello World!\"\n    assert Solution().removeWhiteSpace(\"Hello\\nWorld!\") == \"HelloWorld!\"\n    assert Solution().removeWhiteSpace(\"Hello\\nWorld!\\n\") == \"Hello World!\"\n    assert Solution().removeWhiteSpace(\"Hello\\nWorld!\\n   \") == \"Hello World!\"\n    assert Solution().removeWhiteSpace(\"Hello\\nWorld!\\n   Hello\\nWorld!\\n\") == \"Hello World!\"\n    assert Solution().removeWhiteSpace(\"Hello\\nWorld!\\n   Hello\\nWorld!\\n   Hello\\nWorld!\\n\") == \"Hello World!\"\n    assert Solution().removeWhiteSpace(\"Hello\\nWorld!\\n   Hello\\nWorld!\\n   Hello\\nWorld!\\n   Hello\\nWorld!\\n   Hello\\nWorld!\\n   Hello\\nWorld!\\n\") == \"Hello World!\""
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/remove-all-spaces/discuss/93515/Easy-Python-Regex-solution\n\n\nclass Solution(object):\n    def remove_space(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub('\\s+', '', str)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def remove_all_whitespaces(s):\n    return re.sub(\"[\\s]+\", \"\", s)\n\n# Test Cases\nprint remove_all_whitespaces(\"\")\nprint remove_all_whitespaces(\" \")\nprint remove_all_whitespaces(\"a b c\")\nprint remove_all_whitespaces(\" a b c \")\nprint remove_all_whitespaces(\" a b c   \")\nprint remove_all_whitespaces(\"a b c   \")\nprint remove_all_whitespaces(\"a b c   \")\nprint remove_all_whitespaces(\"a b c   \")"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "class Solution:\n    def remove_whitespaces(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'\\s+','', str)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.remove_whitespaces('Hello World!')\n    print s.remove_whitespaces('Hello World')\n    print s.remove_whitespaces('Hello World')\n    print s.remove_whitespaces('Hello World')\n    print s.remove_whitespaces('Hello World')"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)\n\nif __name__ == '__main__':\n    s =' hello world '\n    print(remove_whitespaces(s))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n# import re\n# from string import whitespace\n\n# def remove_whitespaces(text):\n#     return re.sub(r'\\s+','', text)\n\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text)\n\n# text = \"   \\n\\t\\r\\n\\v\\f\\b\"\n# print remove_whitespaces(text"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import re\n\ndef remove_all_whitespaces(s):\n    return re.sub('\\s+', '', s)\n\nif __name__ == '__main__':\n    print(remove_all_whitespaces('This is a test string'))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_whitespace(s):\n    return re.sub(\"\\s+\", \"\", s)\n\n\nif __name__ == \"__main__\":\n    s = \"   Hello World  \"\n    print(remove_whitespace(s))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "# Complete the function below.\ndef remove_whitespaces(s):\n    return s.replace(\" \", \"\")\n\nif __name__ == \"__main__\":\n    s = \"   This is a test.   \"\n    print(remove_whitespaces(s))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string} str\n    # @return {string}\n    def remove_whitespace(self, str):\n        return re.sub(r'\\s+','', str)\n\nif __name__ == \"__main__\":\n    assert Solution().remove_whitespace(\"test\") == \"est\""
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def remove_whitespace(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.replace(\" \", \"\")\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.remove_whitespace(\"\")\n    print sol.remove_whitespace(\" \")\n    print sol.remove_whitespace(\"a\")\n    print sol.remove_whitespace(\"a b\")\n    print sol.remove_whitespace(\"a   b\")"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_whitespaces(string: str):\n    # Complete this function\n    return re.sub(\"\\s+\", \"\", string)\n\nif __name__ == \"__main__\":\n    print(remove_whitespaces(\" \"))\n    print(remove_whitespaces(\"  \"))\n    print(remove_whitespaces(\"\\t\\n\\n\"))\n    print(remove_whitespaces(\"\\t\\n\"))\n    print(remove_whitespaces(\"a \"))\n    print(remove_whitespaces(\"  a \"))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n#\n# Written by:\n#   Jakub Slizka\n#   University of Szeged\n#   jslizka@inf.u-szeged.hu\n#\n\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(\"\\s+\", \" \", string)\n\n\nif __name__ == \"__main__\":\n    print remove_whitespaces(\"a b c\")"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeWhitespace(self, str):\n        return re.sub('\\s+','', str)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def remove_all_whitespaces(string):\n    pattern = r'\\s+'\n    return re.sub(pattern, '', string)\n\nif __name__ == '__main__':\n    string = 'Hello, World!'\n    print remove_all_whitespaces(string)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def remove_whitespace(s):\n    return re.sub(\"\\s+\", \"\", s)\n\ndef main():\n    s = \"   Hello  World   \"\n    print remove_whitespace(s)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# https://stackoverflow.com/a/27851848\n\nimport re\n\ndef remove_whitespaces(s):\n    return re.sub('\\s+','', s)\n\n# https://stackoverflow.com/a/17079072\n\ndef remove_whitespaces_from_line(line):\n    return line.strip('\\n').strip('\\r')\n\nif __name__ == '__main__':\n    s ='' * 10\n    print(remove_whitespaces(s))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeWhitespace(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'\\s+','', str)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.removeWhitespace(\" \")\n    print sol.removeWhitespace(\"\")\n    print sol.removeWhitespace(\" a \")\n    print sol.removeWhitespace(\"a \")\n    print sol.removeWhitespace(\"a  \")\n    print sol.removeWhitespace(\"   a  \")\n    print sol.removeWhitespace(\"a  b c   d e  \")"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def remove_space(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub('\\s', '', str)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def remove_whitespaces(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub('\\s', '', str)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/whitespace-removal/problem\n\ndef remove_all_whitespaces(s):\n    return s.replace(\" \", \"\")\n\nif __name__ == \"__main__\":\n    s = \"  hello world  \"\n    print remove_all_whitespaces(s)\n    \n    s = \"   hello world   \"\n    print remove_all_whitespaces(s)\n    \n    s = \"hello world\"\n    print remove_all_whitespaces(s)"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def removeWhiteSpace(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return re.sub(\"\\s+\", \"\", s)\n\n# test cases\n\nsol = Solution()\n\nprint(sol.removeWhiteSpace(\" \"))\nprint(sol.removeWhiteSpace(\"a b c \"))\nprint(sol.removeWhiteSpace(\"a\\tb\\n\"))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# https://www.interviewcake.com/question/python-remove-all-whitespace-from-string\n\ndef remove_all_whitespace_from_string(text):\n    return text.strip()\n\n# Test Cases\n# Test Case 1\ntest_cases = [\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World\", \"Hello World\"),\n    (\" Hello World\", \"Hello World\"),\n    (\"Hello World"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from collections import Counter\n\ndef remove_whitespace(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\n# def remove_whitespace_regex(s):\n#     return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_2(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_3(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_4(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_5(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_6(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_7(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_8(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_9(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_10(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_11(s):\n    return ''.join(c for c in s if c not in'\\t\\n')\n\ndef remove_whitespace_regex_12(s):\n    return '"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "import re\n\ndef remove_whitespaces(string):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string using regex.\n    :param string: string to be cleaned\n    :return: cleaned string\n    \"\"\"\n    return re.sub('\\s+', '', string)\n\nif __name__ == \"__main__\":\n    s = \" \"\n    print(remove_whitespaces(s))\n    print(s.strip())"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex/answer/\n# https://www.interviewcake.com/question/remove-all-whitespaces-from-the-given-string-using-regex"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": ""
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# -*- coding: utf-8 -*-\n\n\"\"\"\nAccepted\n\"\"\"\ndef remove_whitespaces(string):\n    return re.sub('\\s+', '', string)\n\nif __name__ == '__main__':\n    string = 'Hello World'\n    print remove_whitespaces(string)"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Write your code here\ndef remove_whitespace(s):\n    return ''.join(filter(lambda x: x.isspace(), s))\n\nif __name__ == '__main__':\n    s ='  Hello World   '\n    print(remove_whitespace(s))\n    s =''\n    print(remove_whitespace(s))\n    s = 'Hello World'\n    print(remove_whitespace(s))\n    s ='Hello World   '\n    print(remove_whitespace(s))\n    s ='  Hello World   '\n    print(remove_whitespace(s))\n    s = 'Hello World   '\n    print(remove_whitespace(s))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param s: a string\n    @return: the string without whitespaces\n    \"\"\"\n    def removeWhitespaces(self, s):\n        return re.sub(\"[\\s]\", \"\", s)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeWhitespaces(\" \"))\n    print(s.removeWhitespaces(\"   \"))\n    print(s.removeWhitespaces(\"a\"))\n    print(s.removeWhitespaces(\"a \"))\n    print(s.removeWhitespaces(\"a   \"))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Complete the function below.\ndef remove_whitespace(string):\n    # Write your code here\n    return string.replace(\" \", \"\")\n\n\nif __name__ == '__main__':\n    test_str = \" I am a \"\n    print(remove_whitespace(test_str))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\n\ndef remove_whitespaces(string: str) -> str:\n    return re.sub(\"[\\s]+\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    assert remove_whitespaces(\"\") == \"\"\n    assert remove_whitespaces(\"\") == \"\"\n    assert remove_whitespaces(\"hello \") == \"hello\"\n    assert remove_whitespaces(\"hello world\") == \"hello world\""
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "import re\n\ns = \"This is a test string\"\n\ndef remove_whitespaces(s):\n    s = s.strip()\n    s = s.replace('\\n','')\n    s = s.replace('\\r','')\n    s = s.replace('\\t','')\n    s = s.replace(' ', '')\n    s = s.replace('\\u00A0', '')\n    s = s.replace('\\u2028', '')\n    s = s.replace('\\u2029', '')\n    s = s.replace('\\u0009', '')\n    s = s.replace('\\u000C', '')\n    s = s.replace('\\u000B', '')\n    s = s.replace('\\u000A', '')\n    return s\n\n\n# Test Cases\n\n# Test Case 1\n\ns = \"This is a test string\"\nprint(remove_whitespaces(s))\n\n# Test Case 2\n\ns = \"   This is a test string   \"\nprint(remove_whitespaces(s))\n\n# Test Case 3\n\ns = \"This is a test string\\n\"\nprint(remove_whitespaces(s))\n\n# Test Case 4\n\ns = \"This is a test string \\n\"\nprint(remove_whitespaces(s))\n\n# Test Case 5\n\ns = \"This is a test string\\n \"\nprint(remove_whitespaces(s))\n\n# Test Case 6\n\ns = \"This is a test string\"\nprint(remove_whitespaces(s))\n\n# Test Case 7\n\ns = \"This is a test string\\n \"\nprint(remove_whitespaces(s))\n\n# Test Case 8\n\ns = \"This is a test string\\n \"\nprint(remove_whitespaces(s))\n\n# Test Case 9\n\ns = \"This is a test string\"\nprint(remove_whitespaces(s))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def remove_whitespace(self, s):\n        return s.replace(\" \", \"\")"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "#Write your code here.\n\ndef remove_all_spaces(string):\n    return string.replace(' ', '')\n\ndef main():\n    test_cases = [\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),\n        (\"Hello World\", \"Hello World\"),"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "#Write your code here\n#Input: s - string, k - number of whitespaces to be removed\n#Output: s - string without whitespaces\ndef remove_whitespaces(s, k):\n    #Write your code here\n    if k == 0:\n        return s\n    else:\n        return s.replace(\" \", \"\")\n\n#Test Cases\ns = \"The quick brown fox jumped over the lazy dog\"\nk = 2\nprint(remove_whitespaces(s, k))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Your function should accept a string and return a string.\n\n# Input:\n# s = \"   sdf  \"\n# Output:\n# s = \"sdf\"\n\n\ndef remove_whitespaces(s):\n    return re.sub(\"\\s+\", \"\", s)\n\n\n# Test Cases\n# s = \"   sdf  \"\n# remove_whitespaces(s) == \"sdf\"\n# s = \"  \"\n# remove_whitespaces(s) == \"\"\n# s = \"   sdf  sdf \"\n# remove_whitespaces(s) == \"sdf sdf\"\n\n# s = \"   sdf  \"\n# remove_whitespaces(s) == \"sdf\"\n# s = \"  \"\n# remove_whitespaces(s) == \"\"\n# s = \"   sdf  sdf \"\n# remove_whitespaces(s) == \"sdf sdf\"\n\n# s = \"   sdf  sdf \"\n# remove_whitespaces(s) == \"sdf sdf\"\n# s = \"  \"\n# remove_whitespaces(s) == \"\"\n# s = \"   sdf  sdf \"\n# remove_whitespaces(s) == \"sdf sdf\"\n\n# s = \"   sdf  sdf \"\n# remove_whitespaces(s) == \"sdf sdf\"\n# s = \"  \"\n# remove_whitespaces(s) == \"\"\n# s = \"   sdf  sdf \"\n# remove_whitespaces(s) == \"sdf sdf\"\n\n# s = \"   sdf  sdf \"\n# remove_whitespaces(s) == \"sdf sdf\"\n# s = \"  \"\n# remove_whitespaces(s) == \"\"\n# s = \"   sdf  sdf \"\n# remove_whitespaces(s) == \"sdf sdf\""
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def remove_all_whitespaces(s):\n    return re.sub(r'\\s+', '', s)\n\nif __name__ == '__main__':\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc def  ') == 'abc def'\n    assert remove_all_whitespaces('  abc  def  ') == 'abc"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\nclass Solution(object):\n    def remove_space(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        d = defaultdict(int)\n        for c in s:\n            d[c] += 1\n        # remove all spaces\n        s = ''\n        for k, v in d.items():\n            if v == 1:\n                s += k\n        return s\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    s ='  '\n    print(sol.remove_space(s))\n    s =' '\n    print(sol.remove_space(s))\n    s =' \\t'\n    print(sol.remove_space(s))\n    s =' a'\n    print(sol.remove_space(s))\n    s =' a  '\n    print(sol.remove_space(s))\n    s =' a   '\n    print(sol.remove_space(s))\n    s =' a   b   '\n    print(sol.remove_space(s))\n    s = 'a a a '\n    print(sol.remove_space(s))\n    s = 'a a a  '\n    print(sol.remove_space(s))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def remove_whitespaces(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub(r'\\s+', '', str)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n\n    # print(sol.remove_whitespaces(' hello world '))\n    # print(sol.remove_whitespaces(''))\n    print(sol.remove_whitespaces('a b c'))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": ""
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/remove-all-whitespaces-from-a-string/\n# Given a string, remove all whitespaces.\n# \n# \n# Example 1:\n# \n# \n# Input: \"  \"\n# Output: \"\"\n# \n# \n# Example 2:\n# \n# \n# Input: \"a\"\n# Output: \"a\"\n# \n# \n# Example 3:\n# \n# \n# Input: \"   \"\n# Output: \"   \"\n# \n# \n# \n# Constraints:\n# \n# \n# 1 <= s.length <= 100\n# s[i] is either a space or a character in [a-zA-Z].\n# \n# \n# \n# Follow up: Could you do this in O(n) time and use only O(1) extra space?\n# \n# \n# \n# Related Topics\n# String\n# \n# \n# \n# Similar Questions\n# Remove Whitespace II\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def remove_whitespaces(self, s):\n        return ''.join(filter(lambda x: x.isspace(), s))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "#\n# Write a function to remove all whitespaces from the given string using regex.\n#\n# Example 1:\n#\n# Input:\n# s = \"   test   \"\n#\n# Output:\n# s = \"test\"\n#\n# Example 2:\n#\n# Input:\n# s = \"  \\t\\n\\n    \"\n#\n# Output:\n# s = \"    \"\n#\n# Example 3:\n#\n# Input:\n# s = \"1 test2\\t\\n3 test4\\n5 test6\"\n#\n# Output:\n# s = \"1test2\\t\\n3test4\\n5test6\"\n#\n# Note:\n# The string has length in range [1, 500].\n# The string consists only of English letters, digits, spaces and \\n.\n#\n#\n# Note:\n# The function will be called at least once and only once.\n#\n\nclass Solution(object):\n    def removeBlank(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.isspace(), s))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\ndef remove_spaces(string):\n    return string.strip()\n\n# \n# string = \"Hello world\"\n# print(remove_spaces(string))\n# \n# string = \"   Hello   world   \"\n# print(remove_spaces(string))\n# \n# string = \"  Hello  world  \"\n# print(remove_spaces(string))\n\n# \n# string = \"  \"\n# print(remove_spaces(string))\n# \n# string = \"Hello world\"\n# print(remove_spaces(string))\n# \n# string = \"Hello world\"\n# print(remove_spaces(string))\n\n# \n# string = \"Hello world\"\n# print(remove_spaces(string))\n# \n# string = \"Hello World\"\n# print(remove_spaces(string))\n# \n# string = \"Hello World\"\n# print(remove_spaces(string))\n# \n# string = \" Hello world \"\n# print(remove_spaces(string))\n# \n# string = \"Hello world\"\n# print(remove_spaces(string))\n\n# \n# string = \"  Hello world  \"\n# print(remove_spaces(string))\n# \n# string = \"  Hello World  \"\n# print(remove_spaces(string))\n# \n# string = \"  Hello World  \"\n# print(remove_spaces(string))\n# \n# string = \"Hello World\"\n# print(remove_spaces(string))\n# \n# string = \"Hello World\"\n# print(remove_spaces(string))\n# \n# string = \"Hello world\"\n# print(remove_spaces(string))\n# \n# string = \"Hello world\"\n# print(remove_spaces(string))\n# \n# string = \"Hello world\"\n# print(remove_spaces(string))\n# \n# string = \"Hello world\"\n# print(remove_spaces(string))\n# \n# string = \"Hello World\"\n# print(remove_sp"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from collections import deque\n\ndef remove_all_whitespaces(string):\n    # Your solution here.\n    return ''.join(filter(lambda x: x.isspace(), string))\n\nif __name__ == '__main__':\n    assert remove_all_whitespaces('hello world') == 'hello world'\n    assert remove_all_whitespaces(' hello world ') == 'hello world'\n    assert remove_all_whitespaces('hello world') == 'hello world'\n    assert remove_all_whitespaces(' hello world ') == 'hello world'\n    assert remove_all_whitespaces('hello  world') == 'hello world'\n    assert remove_all_whitespaces(' hello  world ') == 'hello world'\n    assert remove_all_whitespaces('hello  world') == 'hello world'\n    assert remove_all_whitespaces(' hello  world ') == 'hello world'\n    assert remove_all_whitespaces('') == ''\n    assert remove_all_whitespaces(' ') == ''"
    }
  ]
}