{
  "timestamp": "2025-09-14T19:39:57.893423",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 309,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def diff_sum_squared(n):\n    # write your code here\n    sum = 0\n    sum_squared = 0\n    for i in range(n):\n        sum += i\n        sum_squared += i**2\n    return (sum_squared - sum**2)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef sq_sum_diff(n):\n    if n < 1:\n        raise ValueError('n must be greater than 0.')\n    if n == 1:\n        return 1\n    return sqrt(sum(map(sqrt, range(1, n + 1)))) - sum(map(sqrt, range(1, n + 1))) ** 2\n\n\ndef main():\n    print sq_sum_diff(1)\n    print sq_sum_diff(2)\n    print sq_sum_diff(3)\n    print sq_sum_diff(4)\n    print sq_sum_diff(5)\n    print sq_sum_diff(6)\n    print sq_sum_diff(7)\n    print sq_sum_diff(8)\n    print sq_sum_diff(9)\n    print sq_sum_diff(10)\n    print sq_sum_diff(11)\n    print sq_sum_diff(12)\n    print sq_sum_diff(13)\n    print sq_sum_diff(14)\n    print sq_sum_diff(15)\n    print sq_sum_diff(16)\n    print sq_sum_diff(17)\n    print sq_sum_diff(18)\n    print sq_sum_diff(19)\n    print sq_sum_diff(20)\n    print sq_sum_diff(21)\n    print sq_sum_diff(22)\n    print sq_sum_diff(23)\n    print sq_sum_diff(24)\n    print sq_sum_diff(25)\n    print sq_sum_diff(26)\n    print sq_sum_diff(27)\n    print sq_sum_diff(28)\n    print sq_sum_diff(29)\n    print sq_sum_diff(30)\n    print sq_sum_diff(31)\n    print sq_sum_diff(32)\n    print sq_sum_diff(33)\n    print sq_sum_diff(34)\n    print sq_sum_diff(35)\n    print sq_sum_diff(36)\n    print sq_sum_diff(37)\n    print sq_sum_diff(38)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def solution(n):\n\treturn n * (n + 1) / 2\n\nif __name__ == '__main__':\n\tprint(solution(10))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "n = int(input())\n\ndef square_sum_diff(n):\n    sum_squared = 0\n    for i in range(n):\n        sum_squared += pow(i, 2)\n    return sum_squared - pow(sum(range(1, n + 1)), 2)\n\nprint(square_sum_diff(n))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\n\ndef sum_squared(n):\n    s = 0\n    for i in range(n):\n        s += i ** 2\n    return s\n\n\ndef sum_squared_diff(n):\n    s = 0\n    for i in range(n):\n        s += i ** 2\n        s -= sum_squared(n)\n    return s\n\n\ndef main():\n    n = int(input())\n    print(sum_squared_diff(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "n = 10\n\ndef f(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1):\n        sum1 += i**2\n        sum2 += i\n    return sum1 - sum2**2\n\nprint(f(n))\n\n\"\"\"\nOutput:\n\n1\n\n\"\"\""
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import math\n\ndef sum_squared(n):\n    sum_squared = 0\n    for i in range(n):\n        sum_squared += pow(i, 2)\n    return sum_squared\n\ndef calculate_difference(n):\n    return sum_squared(n) - sum_squared(n-1)\n\nif __name__ == \"__main__\":\n    print(calculate_difference(5))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def difference_squared(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += (i ** 2)\n    return s - sum((i ** 2) for i in range(1, n + 1))\n\nprint(difference_squared(5))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sumSquared(n):\n    sum_squared = 0\n    for i in range(n):\n        sum_squared += pow(i, 2)\n    return sum_squared\n\ndef squaredSum(n):\n    sum_squared = 0\n    for i in range(n):\n        sum_squared += pow(i, 2)\n    return sum_squared\n\nif __name__ == '__main__':\n    print sumSquared(3)\n    print squaredSum(3)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\n\ndef first_n(n):\n    sum = 0\n    for i in range(1, n):\n        sum += pow(i, 2)\n    return sum\n\ndef second_n(n):\n    sum = 0\n    for i in range(1, n):\n        sum += pow(i, 2)\n    return sum\n\nprint first_n(10) - second_n(10)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def difference(n):\n    sum = 0\n    for i in range(n):\n        sum += (i + 1) ** 2\n    return sum - sum_squares(n)\n\ndef sum_squares(n):\n    sum = 0\n    for i in range(n):\n        sum += (i + 1) ** 2\n    return sum\n\nprint(difference(4))\nprint(difference(5))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def find_diff(n):\n    sum_sq = 0\n    for i in range(n):\n        sum_sq += (i + 1)**2\n    return sum_sq - sum(map(lambda x: (x*x), range(n)))**2\n\ndef main():\n    print find_diff(10)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def calculate_diff(n):\n    sums = [0] * n\n    squareds = [0] * n\n    for i in range(n):\n        sums[i] = sum(range(1, n+1)) ** 2\n        squareds[i] = sum(range(1, n+1)) ** 2\n    diff = sum(squareds) - sums[0]\n    return diff\n\nif __name__ == \"__main__\":\n    print(calculate_diff(3))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/sum-of-squared-numbers/problem\n\ndef sum_squared(n):\n    sum = 0\n    for i in range(0, n):\n        sum += i**2\n    return sum\n\ndef sum_squared_n(n):\n    sum = 0\n    for i in range(0, n):\n        sum += i**2\n    return sum\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(sum_squared_n(n))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def solution(n):\n    sum_squares = 0\n    for i in range(n):\n        sum_squares += pow(i, 2)\n    return sum_squares - pow(sum(map(lambda x: x ** 2, range(n))), 2)\n\nprint(solution(10))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def diff(self, n):\n        sum = 0\n        for i in range(n):\n            sum += i**2\n        return sum - sum**2"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def sum_of_squares(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * sum_of_squares(n - 1) + n * (n - 1)\n\nif __name__ == '__main__':\n    print(sum_of_squares(3))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def get_diff(n):\n\ts = 0\n\tfor i in range(1, n + 1):\n\t\ts += i ** 2\n\treturn s\n\nif __name__ == '__main__':\n\tprint get_diff(10)"
    },
    {
      "rank": 19,
      "score": 9.95142772139694,
      "candidate": "# Time Complexity: O(n^2)\n# Space Complexity: O(n)\n\nclass Solution:\n    def difference(self, n: int) -> int:\n        return sum(map(lambda x: x * x, range(n))) - sum(map(lambda x: x * x, range(n)))"
    },
    {
      "rank": 20,
      "score": 9.941928993508103,
      "candidate": "n = int(input())\n\nsum_of_squares = sum(map(lambda x: x ** 2, range(1, n + 1)))\nsum_of_squares_sq = sum(map(lambda x: x ** 2, range(1, n + 1)))\n\ndiff = sum_of_squares - sum_of_squares_sq\n\nprint(diff)"
    },
    {
      "rank": 21,
      "score": 9.905173953795655,
      "candidate": "# https://www.hackerrank.com/challenges/sums-of-squares/problem\n\n# DFS\ndef sumOfSquares(n):\n    if n <= 0:\n        return 0\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n\n    return sum\n\n# DFS\ndef sumOfSquares2(n):\n    if n <= 0:\n        return 0\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n        sum += i\n\n    return sum\n\n# BFS\ndef sumOfSquares3(n):\n    if n <= 0:\n        return 0\n\n    sum = 0\n    queue = []\n    for i in range(1, n+1):\n        queue.append(i)\n\n    while len(queue) > 0:\n        sum += queue.pop(0)**2\n        sum += queue.pop(0)\n        for i in range(1, n+1):\n            if i not in queue:\n                queue.append(i)\n    return sum\n\n# BFS\ndef sumOfSquares4(n):\n    if n <= 0:\n        return 0\n\n    sum = 0\n    queue = []\n    for i in range(1, n+1):\n        queue.append(i)\n\n    while len(queue) > 0:\n        sum += queue.pop(0)**2\n        sum += queue.pop(0)\n        for i in range(1, n+1):\n            if i not in queue:\n                queue.append(i)\n    return sum\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(sumOfSquares(n))\n    print(sumOfSquares2(n))\n    print(sumOfSquares3(n))\n    print(sumOfSquares4(n))"
    },
    {
      "rank": 22,
      "score": 9.877488625086825,
      "candidate": "class Solution(object):\n    def calc(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        return sum(map(lambda x: x * x, range(1, n))) - sum(map(lambda x: x ** 2, range(1, n)))\n\n# Note:\n# 1. n is in range [1, 10000]\n# 2. The solution is O(n).\n# 3. The solution is in O(n) time and O(1) space."
    },
    {
      "rank": 23,
      "score": 9.874416912804335,
      "candidate": "def calc_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n    return sum\n\ndef calc_sum_squared(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n    return sum\n\nif __name__ == '__main__':\n    #print calc_sum(5)\n    #print calc_sum_squared(5)\n    print calc_sum(5) - calc_sum_squared(5)"
    },
    {
      "rank": 24,
      "score": 9.835314575684494,
      "candidate": "import math\n\ndef sum_square(n):\n    sum_square = 0\n    for i in range(1, n+1):\n        sum_square += pow(i, 2)\n    return sum_square\n\ndef sum_square_diff(n):\n    sum_square_diff = 0\n    for i in range(1, n+1):\n        sum_square_diff += pow(i, 2) - pow(n, 2)\n    return sum_square_diff\n\ndef main():\n    print sum_square_diff(10)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 9.80653171619689,
      "candidate": "# https://leetcode.com/problems/squared-sum-of-first-n-natural-numbers/discuss/118812/Python-solution\n\nclass Solution(object):\n    def diff(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a = [0] * n\n        for i in range(n):\n            a[i] = i\n        a.sort()\n        s = 0\n        for i in range(1, n):\n            s += a[i] * a[i]\n        return s"
    },
    {
      "rank": 26,
      "score": 9.804393503500492,
      "candidate": "from math import sqrt\n\n\ndef sum_of_squared_numbers(n):\n    squared_sum = 0\n    for i in range(n):\n        squared_sum += i ** 2\n\n    sum_of_squared_numbers = 0\n    for i in range(n):\n        sum_of_squared_numbers += (i ** 2)\n\n    return squared_sum - sum_of_squared_numbers\n\n\ndef main():\n    print sum_of_squared_numbers(4)\n    print sum_of_squared_numbers(6)\n    print sum_of_squared_numbers(10)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 9.782326508325069,
      "candidate": "# https://www.hackerrank.com/challenges/sum-of-squared-numbers\n\n#!/bin/python\n\nimport math\n\ndef sumOfSquaredNumbers(n):\n    sumOfSquaredNumbers = 0\n    for i in range(1, n+1):\n        sumOfSquaredNumbers += (i*i)\n    return sumOfSquaredNumbers\n\ndef main():\n    n = int(input())\n    print(sumOfSquaredNumbers(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 9.771359255699423,
      "candidate": "# Write your code here\n\ndef sum_squares(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_1(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_2(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_3(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_4(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_5(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_6(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_7(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_8(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_9(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\ndef sum_squares_10(n):\n    if n <= 0:\n        return 0\n    return sum(x ** 2 for x in range(1, n + 1))\n\nif __name__ == '__main__':\n    print sum_squares(1)\n    print sum_squares_1(1)\n    print sum_squares_2(1)"
    },
    {
      "rank": 29,
      "score": 9.763839237718791,
      "candidate": "# https://www.hackerrank.com/challenges/solution-to-the-ultimate-quiz\n# Solution to the Ultimate Quiz\n# https://www.hackerrank.com/challenges/solution-to-the-ultimate-quiz/problem\n\ndef solution(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += i ** 2\n    return s ** 2 - sum(map(lambda x: x ** 2, range(1, n + 1)))\n\n\ndef main():\n    n = int(input())\n    print(solution(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 9.747283222863654,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport time\n\n\ndef main():\n    start_time = time.time()\n\n    n = 1000000\n    # print(n)\n    # print(sum(range(1, n + 1)))\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n    # print(sum([x ** 2 for x in range(1, n + 1)]))\n\n    print(sum([x ** 2 for x in range(1, n + 1)]))\n    print(sum([x ** 2 for x in range(1, n + 1)]))\n    print(sum([x ** 2 for x in range(1, n + 1)]))\n    print(sum([x ** 2 for x in range(1, n + 1)]))\n    print(sum([x ** 2 for x in range(1, n + 1)]))\n\n    print(sum([x ** 2 for x in range(1, n + 1)]))\n    print(sum([x ** 2 for x in range(1, n + 1)]))\n    print(sum([x ** 2 for x in range(1, n + 1)]))\n    print(sum([x ** 2 for"
    },
    {
      "rank": 31,
      "score": 9.647528640246492,
      "candidate": "def difference(n):\n    return sum(map(lambda x: x**2, range(1, n+1))) - sum(map(lambda x: x**2, range(1, n+1)))\n\nprint(difference(10))"
    },
    {
      "rank": 32,
      "score": 9.618629888281092,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getSum(self, n):\n        if n == 1:\n            return 0\n        s = 0\n        for i in range(n):\n            s += pow(i, 2)\n        return s - pow(n, 2)"
    },
    {
      "rank": 33,
      "score": 9.574610929459542,
      "candidate": "# https://leetcode.com/problems/squared-sum-of-first-n-natural-numbers/discuss/105064/C++\n\nclass Solution(object):\n    def calculate(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        a = 1\n        b = 1\n        c = 1\n        d = 1\n        for _ in range(2, n):\n            a = a * 2\n            b = b * 2\n            c = c + b\n            d = d * 2\n        return a + b + c + d"
    },
    {
      "rank": 34,
      "score": 9.535339310917468,
      "candidate": "def sum_of_squared_numbers(n):\n    sum_of_squared_numbers = 0\n    for i in range(n):\n        sum_of_squared_numbers += (i+1)**2\n    return sum_of_squared_numbers\n\ndef sum_of_squared_numbers2(n):\n    sum_of_squared_numbers = 0\n    for i in range(n):\n        sum_of_squared_numbers += (i+1)**2\n    return sum_of_squared_numbers\n\ndef sum_of_squared_numbers3(n):\n    sum_of_squared_numbers = 0\n    for i in range(n):\n        sum_of_squared_numbers += (i+1)**2\n    return sum_of_squared_numbers\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(sum_of_squared_numbers(n))\n    print(sum_of_squared_numbers2(n))\n    print(sum_of_squared_numbers3(n))"
    },
    {
      "rank": 35,
      "score": 9.516582697482633,
      "candidate": "def diff(n):\n    result = 0\n    for i in range(n):\n        result += pow(i, 2)\n    return result - sum(pow(i, 2) for i in range(1, n + 1))\n\nprint diff(2)\nprint diff(3)"
    },
    {
      "rank": 36,
      "score": 9.497593217886118,
      "candidate": "def calculate_difference(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n    return sum - pow(n, 2)\n\nif __name__ == '__main__':\n    print calculate_difference(2)"
    },
    {
      "rank": 37,
      "score": 9.44216185946266,
      "candidate": "def difference(n):\n    sum_squares = 0\n    for i in range(n):\n        sum_squares += i ** 2\n    return sum_squares - sum(map(lambda x: x ** 2, range(n)))\n\nif __name__ == '__main__':\n    print difference(3)"
    },
    {
      "rank": 38,
      "score": 9.406832445439179,
      "candidate": "def calculate_difference(n):\n    return sum([(i**2) for i in range(1,n+1)]) - (sum([i**2 for i in range(1,n+1)]))**2\n\nif __name__ == '__main__':\n    assert calculate_difference(2) == 8, \"Result is wrong\""
    },
    {
      "rank": 39,
      "score": 9.401605761790348,
      "candidate": "# Time:  O(n^2)\n# Space: O(1)\n\nclass Solution(object):\n    def calcSquareDiff(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def sumOfSquares(num):\n            if num == 0:\n                return 0\n            return num * num\n\n        return sumOfSquares(n) - sumOfSquares(n - 1) ** 2"
    },
    {
      "rank": 40,
      "score": 9.196422297243725,
      "candidate": "def get_diff(n):\n    sum_sq_n = 0\n    sum_sq_n_prev = 0\n    for i in range(1,n+1):\n        sum_sq_n_prev = sum_sq_n\n        sum_sq_n += i**2\n    return sum_sq_n - sum_sq_n_prev**2"
    },
    {
      "rank": 41,
      "score": 9.176938547970494,
      "candidate": "# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, left, right):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution(object):\n    def getSum(self, root, n):\n        \"\"\"\n        :type root: Node\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        leftSum = self.getSum(root.left, n)\n        rightSum = self.getSum(root.right, n)\n        return (root.val + leftSum + rightSum) ** 2 - leftSum - rightSum\n\nif __name__ == '__main__':\n    sol = Solution()\n    root = Node(1, None, None)\n    root.left = Node(2, None, None)\n    root.left.left = Node(3, None, None)\n    root.left.right = Node(4, None, None)\n    root.right = Node(5, None, None)\n    root.right.left = Node(6, None, None)\n    root.right.right = Node(7, None, None)\n    root.right.right.left = Node(8, None, None)\n    root.right.right.right = Node(9, None, None)\n    print(sol.getSum(root, 3))"
    },
    {
      "rank": 42,
      "score": 9.165221055867626,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def calculate(self, n):\n        if n == 0:\n            return 0\n        return sum(map(lambda x: x * x, range(1, n))) - sum(map(lambda x: x * x, range(1, n))) ** 2"
    },
    {
      "rank": 43,
      "score": 8.992069723979347,
      "candidate": "def diff_sum_squared(n):\n    sum_squared = 0\n    for i in range(n):\n        sum_squared += i ** 2\n    return sum_squared - sum(map(lambda x: x ** 2, range(1, n + 1)))\n\ndef main():\n    print(diff_sum_squared(5))\n    print(diff_sum_squared(10))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.814437223621065,
      "candidate": "def sum_of_squares(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i**2\n    return sum_of_squares\n\ndef sq_sum(n):\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i**2\n    return sum_of_squares\n\nif __name__ == '__main__':\n    print sum_of_squares(5)\n    print sq_sum(5)\n    print sq_sum(10)"
    },
    {
      "rank": 45,
      "score": 8.732335163680562,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef difference(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += math.pow(i, 2)\n    return s - sum(map(lambda x: math.pow(x, 2), range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    print(difference(5))"
    },
    {
      "rank": 46,
      "score": 8.728828482282413,
      "candidate": "#!/usr/bin/env python\n\n# Standard modules\nimport sys\n\n# Custom modules\nimport utils\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        print(\"Usage: python3 {0} <number of n> <number of m>\".format(sys.argv[0]))\n        exit(1)\n\n    n = int(sys.argv[1])\n    m = int(sys.argv[2])\n    \n    if n > m:\n        print(\"n must be less than m\")\n        exit(1)\n\n    for i in range(1, n + 1):\n        sum_of_squares = 0\n        for j in range(1, m + 1):\n            sum_of_squares += i**2\n        difference = sum_of_squares - i**2\n        print(\"{0}^2 = {1} - {2} = {3}\".format(i, i**2, sum_of_squares, difference))"
    },
    {
      "rank": 47,
      "score": 8.634340459699532,
      "candidate": "def calculate_difference(n):\n    if n == 1:\n        return 0\n\n    sum = 0\n    sum_squared = 0\n    for i in range(1, n+1):\n        sum += i**2\n        sum_squared += i\n    difference = sum - sum_squared\n    return difference\n\nif __name__ == '__main__':\n    print(calculate_difference(1))\n    print(calculate_difference(2))\n    print(calculate_difference(3))\n    print(calculate_difference(4))"
    },
    {
      "rank": 48,
      "score": 8.62408804603412,
      "candidate": "from math import sqrt\n\ndef sum_of_squared_numbers(n):\n    squared_sum = 0\n    for i in range(1, n + 1):\n        squared_sum += (i ** 2)\n    return squared_sum - (sum(range(1, n + 1)) ** 2)\n\ndef difference(n):\n    return sqrt(sum_of_squared_numbers(n)) - sum_of_squared_numbers(n - 1)\n\nif __name__ == \"__main__\":\n    assert difference(5) == sqrt(sum_of_squared_numbers(5)) - sum_of_squared_numbers(4)\n    assert difference(10) == sqrt(sum_of_squared_numbers(10)) - sum_of_squared_numbers(9)\n    assert difference(15) == sqrt(sum_of_squared_numbers(15)) - sum_of_squared_numbers(14)"
    },
    {
      "rank": 49,
      "score": 8.57593875086543,
      "candidate": "n = int(input())\n\ns = 0\nfor i in range(1, n+1):\n    s += i**2\n\ns += sum(i**2 for i in range(1, n+1))\n\nprint(\"The difference is {}\".format(s))"
    },
    {
      "rank": 50,
      "score": 8.564710845793407,
      "candidate": "def sum_squared(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n\nprint(sum_squared(5))"
    },
    {
      "rank": 51,
      "score": 8.559507332825333,
      "candidate": "# Your code here!\n\ndef get_n_numbers(n):\n    return [i**2 for i in range(n)]\n\ndef get_sum_of_squares(n):\n    return sum([i**2 for i in range(n)])\n\ndef get_squared_sum(n):\n    return sum([i**2 for i in range(n)])\n\ndef get_difference(n):\n    return get_sum_of_squares(n) - get_squared_sum(n)\n\nif __name__ == '__main__':\n    print get_n_numbers(10)\n    print get_sum_of_squares(10)\n    print get_squared_sum(10)\n    print get_difference(10)"
    },
    {
      "rank": 52,
      "score": 8.557873833732623,
      "candidate": "def sum_squared(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n\ndef diff(n):\n    sum = sum_squared(n)\n    return sum - sum_squared(n - 1)\n\nif __name__ == \"__main__\":\n    print diff(3)\n    print diff(5)\n    print diff(7)"
    },
    {
      "rank": 53,
      "score": 8.529131239492557,
      "candidate": "def solve(n):\n    s1 = sum(map(lambda x: x**2, range(1, n + 1)))\n    s2 = sum(map(lambda x: x**2, range(1, n + 1)))**2\n    return s1 - s2\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))"
    },
    {
      "rank": 54,
      "score": 8.504423342860933,
      "candidate": "from math import sqrt\n\ndef calculate_difference(n):\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n    sum_of_squares = sum_of_squares**2\n    squared_sum = 0\n    for i in range(1, n+1):\n        squared_sum += i**2\n    return sum_of_squares - squared_sum\n\nif __name__ == \"__main__\":\n    print(calculate_difference(10))"
    },
    {
      "rank": 55,
      "score": 8.478421586716259,
      "candidate": "def sum_of_squares(n):\n    return sum(x**2 for x in range(1,n+1))\n\ndef difference(n):\n    return sum_of_squares(n) - sum(x**2 for x in range(1,n+1))\n\nprint(difference(4))"
    },
    {
      "rank": 56,
      "score": 8.476560716231871,
      "candidate": "def get_sum_squared(n):\n    sum_squared = 0\n    for i in range(1, n+1):\n        sum_squared += i**2\n    return sum_squared\n\ndef get_difference(n):\n    sum_squared = get_sum_squared(n)\n    sum_squared_n = sum_squared\n    for i in range(1, n+1):\n        sum_squared_n = sum_squared - i**2\n    return sum_squared_n\n\nif __name__ == '__main__':\n    print get_difference(5)"
    },
    {
      "rank": 57,
      "score": 8.474910918327804,
      "candidate": "import math\n\nn = 10\n\ndef diff(n):\n    s = 0\n    for i in range(1, n+1):\n        s += pow(i, 2)\n    return math.sqrt(s) - sum(map(lambda x: pow(x, 2), range(1, n+1)))\n\nprint(diff(n))"
    },
    {
      "rank": 58,
      "score": 8.439720415786168,
      "candidate": "# https://www.hackerrank.com/challenges/n-sum-squared/problem\n\ndef solution(n):\n    sum_squared = 0\n    for i in range(n):\n        sum_squared += i**2\n    return sum_squared - sum(i**2 for i in range(n))\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solution(n))"
    },
    {
      "rank": 59,
      "score": 8.419240901891328,
      "candidate": "#!/usr/bin/env python\n\ndef nth_power(n):\n    s = 0\n    for i in range(1,n+1):\n        s += i**i\n    return s\n\ndef power_sum(n):\n    return nth_power(n) - nth_power(n-1)\n\ndef sum_power(n):\n    s = 0\n    for i in range(1,n+1):\n        s += i**i\n    return s\n\ndef main():\n    print(sum_power(5))\n    print(power_sum(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.379463802612108,
      "candidate": "#!/usr/bin/python\n\nimport math\n\ndef main():\n    n = int(input())\n    sum = 0\n    for i in range(n):\n        sum += math.pow(i, 2)\n    sum_squared = sum ** 2\n    diff = sum_squared - sum\n    print(diff)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.367559283701315,
      "candidate": "#!/bin/python\n\nimport math\n\ndef getSum(n):\n    sum_sq = 0\n    for i in range(1,n+1):\n        sum_sq += i**2\n    return sum_sq\n\ndef getDiff(n):\n    return math.sqrt(getSum(n)) - n**2\n\ndef getDiff_recursive(n):\n    if n == 0:\n        return 0\n    else:\n        return getDiff(n-1) + getDiff_recursive(n-1)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(\"{:.2f}\".format(getDiff_recursive(n)))"
    },
    {
      "rank": 62,
      "score": 8.362496509512232,
      "candidate": "def calc_diff(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n    return sum - sum_of_squared(n)\n\ndef sum_of_squared(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n    return sum\n\nif __name__ == '__main__':\n    n = int(input('Enter the number of natural numbers: '))\n    print('The difference between the squared sum of {} natural numbers and the sum of squared {} natural numbers is {}'.format(n, n, calc_diff(n)))"
    },
    {
      "rank": 63,
      "score": 8.362490763291277,
      "candidate": "def get_difference(n):\n    sum_of_squared = 0\n    for i in range(n):\n        sum_of_squared += i**2\n    return sum_of_squared - (n * (n + 1))\n\ndef main():\n    print get_difference(5)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.329762693135226,
      "candidate": "def sum_squared_difference(n):\n    if n < 1:\n        return 0\n    else:\n        return sum(map(lambda x: x**2, range(n))) - sum(map(lambda x: x**2, range(1, n+1)))\n\nif __name__ == '__main__':\n    print sum_squared_difference(3)"
    },
    {
      "rank": 65,
      "score": 8.309665646298734,
      "candidate": "import timeit\n\nstart = timeit.default_timer()\n\ndef square_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += (i ** 2)\n    return sum\n\nprint(square_sum(10))\n\nstop = timeit.default_timer()\nprint(stop - start)"
    },
    {
      "rank": 66,
      "score": 8.282248251960082,
      "candidate": "import math\n\ndef sum_squares(n):\n    return (n ** 2) + (n * (n - 1) / 2)\n\ndef difference(n):\n    return sum_squares(n) - n * (n - 1)\n\ndef main():\n    print difference(4)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 8.280128409367212,
      "candidate": "def sumOfSquares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i\n    return sum\n\ndef sumOfSquares_1(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i\n    return sum\n\ndef sumOfSquares_2(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n        sum += i * i\n    return sum\n\ndef sumOfSquares_3(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n        sum += i * i\n        sum += i * i\n    return sum\n\n\nprint(sumOfSquares(5))\nprint(sumOfSquares_1(5))\nprint(sumOfSquares_2(5))\nprint(sumOfSquares_3(5))"
    },
    {
      "rank": 68,
      "score": 8.25902837312598,
      "candidate": "# https://www.hackerrank.com/challenges/solution-of-squares/problem\n\ndef solution(n):\n    s = sum(map(lambda x: x ** 2, range(1, n + 1)))\n    return s - n ** 2 * sum(map(lambda x: x ** 2, range(1, n)))\n\nif __name__ == \"__main__\":\n    print(solution(int(input())))"
    },
    {
      "rank": 69,
      "score": 8.198725861587372,
      "candidate": "def square_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum_squared = 0\n    for i in range(n):\n        sum_squared += i**2\n    return sum_squared\n\n\nif __name__ == '__main__':\n    print(square_sum(5))"
    },
    {
      "rank": 70,
      "score": 8.192498971506296,
      "candidate": "def diff(n):\n    s1 = 0\n    s2 = 0\n    for i in range(1,n+1):\n        s1 += i ** 2\n        s2 += i\n    return s1 - (s2 ** 2)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(diff(n))"
    },
    {
      "rank": 71,
      "score": 8.161471683431829,
      "candidate": "def difference(n):\n    sums = [0]*(n+1)\n    sums[0] = 1\n    for i in range(1,n+1):\n        sums[i] = sums[i-1] + (i*i)\n    return sum(sums) - sum(sums[:n])**2\n\nif __name__ == '__main__':\n    print(difference(10))"
    },
    {
      "rank": 72,
      "score": 8.07424561930988,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef get_sum_of_squared_n(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += pow(i, 2)\n    return s\n\ndef get_sum_of_squared_n_square(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += pow(i, 2)\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_squared_n(n))\n    print(get_sum_of_squared_n_square(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 8.017149166954587,
      "candidate": "def sum_of_squared(n):\n    return sum(i**2 for i in range(1, n+1))\n\nif __name__ == '__main__':\n    n = int(input())\n    print(sum_of_squared(n))"
    },
    {
      "rank": 74,
      "score": 7.932214212598203,
      "candidate": "def solution(n):\n    sum_squared = 0\n    sum_squared_squared = 0\n    for i in range(n):\n        sum_squared += pow(i, 2)\n        sum_squared_squared += pow(i, 2) * i\n    return pow(sum_squared - sum_squared_squared, 0.5)\n\nif __name__ == '__main__':\n    print(solution(10))"
    },
    {
      "rank": 75,
      "score": 7.926961747815845,
      "candidate": "def sum_squared(n):\n    total = 0\n    for i in range(n):\n        total += i ** 2\n    return total\n\ndef difference(n):\n    return sum_squared(n) - sum(i ** 2 for i in range(1, n + 1))\n\nprint(difference(10))"
    },
    {
      "rank": 76,
      "score": 7.840723203064883,
      "candidate": "def sumOfSquares(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n    return sum\n\ndef difference(n):\n    sumOfSquares = 0\n    for i in range(n):\n        sumOfSquares += pow(i, 2)\n    return sumOfSquares - sum\n\nif __name__ == '__main__':\n    print(difference(5))"
    },
    {
      "rank": 77,
      "score": 7.827380390067487,
      "candidate": "def sum_squared(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n\ndef squared_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n\nprint(squared_sum(5))\nprint(sum_squared(5))"
    },
    {
      "rank": 78,
      "score": 3.3632189475667,
      "candidate": "# @include\ndef sum_squares(n):\n    return sum(pow(i, 2) for i in range(1, n + 1)) - sum(pow(i, 2) for i in range(1, n + 1))\n# @exclude\n\n\ndef main():\n    print(sum_squares(10))\n    print(sum_squares(100))\n    print(sum_squares(1000))\n    print(sum_squares(10000))\n    print(sum_squares(100000))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 79,
      "score": 3.3399156302905486,
      "candidate": "# https://leetcode.com/problems/squared-sum-of-first-n-natural-numbers/discuss/72652/Java-Python-DP-solution\n\n# https://leetcode.com/problems/squared-sum-of-first-n-natural-numbers/discuss/176579/Java-Python-DP-solution-with-explanation-using-DP\n\nclass Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 1:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n] ** 2\n\nif __name__ == \"__main__\":\n    assert Solution().getSum(3) == 14"
    },
    {
      "rank": 80,
      "score": 3.3119352065712895,
      "candidate": "def sum_squared_numbers(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n    return sum\n\ndef sum_squared_numbers_2(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n        sum += pow(i, 3)\n    return sum\n\ndef sum_squared_numbers_3(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n        sum += pow(i, 3)\n        sum += pow(i, 4)\n    return sum\n\ndef sum_squared_numbers_4(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n        sum += pow(i, 3)\n        sum += pow(i, 4)\n        sum += pow(i, 5)\n    return sum\n\ndef sum_squared_numbers_5(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n        sum += pow(i, 3)\n        sum += pow(i, 4)\n        sum += pow(i, 5)\n        sum += pow(i, 6)\n    return sum\n\ndef sum_squared_numbers_6(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n        sum += pow(i, 3)\n        sum += pow(i, 4)\n        sum += pow(i, 5)\n        sum += pow(i, 6)\n        sum += pow(i, 7)\n    return sum\n\ndef sum_squared_numbers_7(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n        sum += pow(i, 3)\n        sum += pow(i, 4)\n        sum += pow(i, 5)\n        sum += pow(i, 6)\n        sum += pow(i, 7)\n        sum += pow(i, 8)\n    return sum\n\ndef sum"
    },
    {
      "rank": 81,
      "score": 3.2371298901740686,
      "candidate": "# Your code here!\n\ndef sum_squares_difference(n):\n    sum_squares = 0\n    for i in range(n):\n        sum_squares += pow(i, 2)\n    sum_squares_diff = pow(sum_squares, 2) - sum(pow(i, 2) for i in range(n))\n    return sum_squares_diff\n\n\nif __name__ == \"__main__\":\n    print(sum_squares_difference(5))"
    },
    {
      "rank": 82,
      "score": 3.2243753792381424,
      "candidate": "# https://leetcode.com/problems/difference-of-squared-sum-of-first-n-natural-numbers/discuss/63820/Python-solution-with-python-and-numpy-in-1-line\n\n# The solution is simply a numpy implementation.\n\nclass Solution(object):\n    def diffOfSquaredSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        nums = [0] * n\n        for i in range(n):\n            nums[i] = i + 1\n        return sum(map(lambda x: x * x, nums)) - sum(map(lambda x: x * x, nums)) ** 2\n\n\nif __name__ == \"__main__\":\n    assert Solution().diffOfSquaredSum(2) == 1, \"Test Case 1\"\n    assert Solution().diffOfSquaredSum(3) == 4, \"Test Case 2\"\n    assert Solution().diffOfSquaredSum(4) == 9, \"Test Case 3\""
    },
    {
      "rank": 83,
      "score": 3.2227883478225645,
      "candidate": "class Solution:\n    def diff(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        s = 0\n        for i in range(1, n):\n            s += pow(i, 2)\n        return s - sum(map(lambda x: pow(x, 2), range(1, n)))\n\nif __name__ == \"__main__\":\n    assert Solution().diff(2) == 1\n    assert Solution().diff(3) == 4\n    assert Solution().diff(5) == 9"
    },
    {
      "rank": 84,
      "score": 3.1890375760063017,
      "candidate": "def squared_sum_n_squared_sum(n):\n    # Your solution here\n    squared_sum = 0\n    for i in range(1, n+1):\n        squared_sum += i**2\n    sum_squared = 0\n    for i in range(1, n+1):\n        sum_squared += i**2\n    return squared_sum - sum_squared**2\n\nif __name__ == '__main__':\n    n = int(input())\n    print(squared_sum_n_squared_sum(n))"
    },
    {
      "rank": 85,
      "score": 3.148968363763159,
      "candidate": "class Solution(object):\n    def getDifference(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return pow(sum(range(1, n + 1)), 2) - sum(pow(i, 2) for i in range(1, n + 1))\n\n\nif __name__ == \"__main__\":\n    assert Solution().getDifference(3) == 8"
    },
    {
      "rank": 86,
      "score": 3.1406855464334,
      "candidate": "import time\n\nstart = time.time()\n\ndef sum_squared(n):\n    sum_squared = 0\n    for i in range(n):\n        sum_squared += i**2\n    return sum_squared\n\ndef sum_squared_diff(n):\n    sum_squared_diff = sum_squared(n) - sum_squared(n-1)\n    return sum_squared_diff\n\nprint(sum_squared_diff(10))\n\nprint(\"--- %s seconds ---\" % (time.time() - start))"
    },
    {
      "rank": 87,
      "score": 3.0831762857609557,
      "candidate": "from collections import Counter\n\nclass Solution:\n    def difference(self, n):\n        if n < 1:\n            return 0\n        cnt = Counter(range(1, n + 1))\n        ans = 0\n        for i in xrange(1, n + 1):\n            ans += cnt[i] * i\n        return ans\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.difference(2)\n    print sol.difference(3)\n    print sol.difference(4)\n    print sol.difference(5)\n    print sol.difference(6)\n    print sol.difference(7)\n    print sol.difference(8)\n    print sol.difference(9)\n    print sol.difference(10)"
    },
    {
      "rank": 88,
      "score": 3.0821358914477015,
      "candidate": "def calculate_sum(n):\n    # write your code here\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 2)\n    return sum\n\ndef calculate_diff(n):\n    # write your code here\n    sum = calculate_sum(n)\n    diff = sum - pow(n, 2)\n    return diff\n\nif __name__ == \"__main__\":\n    print(calculate_diff(5))\n    print(calculate_diff(100))"
    },
    {
      "rank": 89,
      "score": 3.0600427126013745,
      "candidate": "import unittest\nimport timeit\n\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(sum_of_squared_numbers(1), 0)\n        self.assertEqual(sum_of_squared_numbers(2), 0)\n        self.assertEqual(sum_of_squared_numbers(3), 1)\n        self.assertEqual(sum_of_squared_numbers(4), 4)\n        self.assertEqual(sum_of_squared_numbers(5), 15)\n        self.assertEqual(sum_of_squared_numbers(6), 42)\n        self.assertEqual(sum_of_squared_numbers(7), 134)\n\n    def test_2(self):\n        self.assertEqual(sum_of_squared_numbers(2), 0)\n        self.assertEqual(sum_of_squared_numbers(3), 1)\n        self.assertEqual(sum_of_squared_numbers(4), 4)\n        self.assertEqual(sum_of_squared_numbers(5), 15)\n        self.assertEqual(sum_of_squared_numbers(6), 42)\n        self.assertEqual(sum_of_squared_numbers(7), 134)\n\n    def test_3(self):\n        self.assertEqual(sum_of_squared_numbers(3), 1)\n        self.assertEqual(sum_of_squared_numbers(4), 4)\n        self.assertEqual(sum_of_squared_numbers(5), 15)\n        self.assertEqual(sum_of_squared_numbers(6), 42)\n        self.assertEqual(sum_of_squared_numbers(7), 134)\n\n    def test_4(self):\n        self.assertEqual(sum_of_squared_numbers(4), 4)\n        self.assertEqual(sum_of_squared_numbers(5), 15)\n        self.assertEqual(sum_of_squared_"
    },
    {
      "rank": 90,
      "score": 3.001176095027766,
      "candidate": "#\n# Example 1:\n#\n# Input:\n# n = 3\n#\n# Output:\n# 7\n#\n# Explanation:\n# The squared sum is 7, and the sum of the squared numbers is 7.\n#\n# Example 2:\n#\n# Input:\n# n = 4\n#\n# Output:\n# 27\n#\n# Explanation:\n# The squared sum is 15, and the sum of the squared numbers is 15.\n#\n# Note:\n# 1 <= n <= 100\n#\n\nclass Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 7\n        if n == 4:\n            return 15\n        return sum(self.getSum(n-1)) + self.getSum(n-2)\n\n\n\n#\n# Note:\n# The squared sum of the first n natural numbers is the sum of the squares of the first n natural numbers.\n# The sum of the squared numbers is the sum of the squares of the numbers.\n#"
    },
    {
      "rank": 91,
      "score": 2.991760011004711,
      "candidate": "import unittest\n\nclass Test(unittest.TestCase):\n    def test_difference_2(self):\n        self.assertEqual(difference(2), 4)\n        self.assertEqual(difference(3), 8)\n        self.assertEqual(difference(4), 16)\n        self.assertEqual(difference(5), 25)\n        self.assertEqual(difference(6), 36)\n        self.assertEqual(difference(7), 49)\n        self.assertEqual(difference(8), 64)\n        self.assertEqual(difference(9), 81)\n        self.assertEqual(difference(10), 100)\n        self.assertEqual(difference(11), 121)\n        self.assertEqual(difference(12), 144)\n        self.assertEqual(difference(13), 169)\n        self.assertEqual(difference(14), 196)\n        self.assertEqual(difference(15), 225)\n        self.assertEqual(difference(16), 256)\n        self.assertEqual(difference(17), 289)\n        self.assertEqual(difference(18), 324)\n        self.assertEqual(difference(19), 361)\n        self.assertEqual(difference(20), 403)\n        self.assertEqual(difference(21), 442)\n        self.assertEqual(difference(22), 497)\n        self.assertEqual(difference(23), 544)\n        self.assertEqual(difference(24), 609)\n        self.assertEqual(difference(25), 676)\n        self.assertEqual(difference(26), 753)\n        self.assertEqual(difference(27), 828)\n        self.assertEqual(difference(28), 905)\n        self.assertEqual(difference(29), 990)\n        self.assertEqual(difference(30), 1084)\n        self.assertEqual(difference(31), 1180)\n        self.assertEqual(difference(32), 1278)\n        self.assertE"
    },
    {
      "rank": 92,
      "score": 2.946044959323716,
      "candidate": "class Solution(object):\n    def sumOfSquares(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(nums)):\n            res += nums[i] ** 2\n        return res\n\n    def sumOfSquares_dp(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        res = 0\n        for i in range(n):\n            res += nums[i] ** 2\n            nums[i] = nums[i] ** 2\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.sumOfSquares([1,2,3]))\n    print(sol.sumOfSquares_dp([1,2,3]))"
    },
    {
      "rank": 93,
      "score": 2.9307461500144636,
      "candidate": "# https://leetcode.com/problems/difference-of-squared-sum-of-first-n-natural-numbers/description/\n\nclass Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def get_sum(x):\n            if x == 0: return 0\n            return x * (x + 1) / 2\n        return sum(get_sum(i) for i in range(1, n + 1))\n\n    def getDifference(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.getSum(n) - self.getSum(n) ** 2\n\n    def getDifference2(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def get_sum(x):\n            if x == 0: return 0\n            return x * (x + 1) / 2\n        return sum(get_sum(i) for i in range(1, n + 1)) - self.getSum(n) ** 2\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getDifference(4)\n    print s.getDifference2(4)"
    },
    {
      "rank": 94,
      "score": 2.9288811535542205,
      "candidate": "def sum_squared_difference(n):\n    if n == 1:\n        return 0\n    else:\n        return (sum_squared(n) - sum_squared(n-1)) ** 2\n\ndef sum_squared(n):\n    return sum([x**2 for x in range(1,n+1)])\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_squared_difference(1) == 0, \"Example\"\n    assert sum_squared_difference(2) == 1, \"Example\"\n    assert sum_squared_difference(3) == 2, \"Example\"\n    assert sum_squared_difference(4) == 4, \"Example\"\n    assert sum_squared_difference(5) == 9, \"Example\"\n    assert sum_squared_difference(6) == 16, \"Example\"\n    assert sum_squared_difference(7) == 25, \"Example\"\n    assert sum_squared_difference(8) == 36, \"Example\"\n    assert sum_squared_difference(9) == 49, \"Example\"\n    assert sum_squared_difference(10) == 64, \"Example\"\n    assert sum_squared_difference(11) == 81, \"Example\"\n    assert sum_squared_difference(12) == 100, \"Example\"\n    assert sum_squared_difference(13) == 121, \"Example\"\n    assert sum_squared_difference(14) == 144, \"Example\"\n    assert sum_squared_difference(15) == 169, \"Example\"\n    assert sum_squared_difference(16) == 196, \"Example\"\n    assert sum_squared_difference(17) == 225, \"Example\"\n    assert sum_squared_difference(18) == 289, \"Example\"\n    assert sum_squared_difference(19) == 364, \"Example\"\n    assert sum_squared_difference(20) == 513, \"Example\"\n    assert sum_squared_difference(21) == 684, \""
    },
    {
      "rank": 95,
      "score": 2.889789925295583,
      "candidate": "# I/O\n# https://www.hackerrank.com/challenges/summation-of-squared-numbers/problem\n\n# My solution\ndef sum_squared(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2\n    return sum\n\n# Test case\nassert sum_squared(3) == 6\nassert sum_squared(1) == 0\nassert sum_squared(4) == 36\nassert sum_squared(10) == 956\n\n# Driver program\n# Input\nn = int(input())\n\n# Output\nprint(sum_squared(n))"
    },
    {
      "rank": 96,
      "score": 2.8845958799755564,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getSum(self, n):\n        sum = 0\n        for i in range(n):\n            sum += i**2\n        return sum\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.getSum(4))\n    print(s.getSum(10))\n    print(s.getSum(100))"
    },
    {
      "rank": 97,
      "score": 2.8618531013186748,
      "candidate": "# https://www.hackerrank.com/challenges/sum-of-squared-numbers/problem\n\n# Solution using numpy\n# import numpy as np\n\n# def sum_squared_numbers(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_2(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_3(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_4(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_5(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_6(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_7(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_8(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_9(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_10(n):\n#     s = 0\n#     for i in range(n):\n#         s += i ** 2\n#     return s\n\n# def sum_squared_numbers_11(n):\n#     s = 0\n#"
    },
    {
      "rank": 98,
      "score": 2.8516224564408215,
      "candidate": "def nth_sum_of_squared_numbers(n):\n    sum_of_squared_numbers = 0\n    for i in range(n):\n        sum_of_squared_numbers += pow(i, 2)\n    return sum_of_squared_numbers - (n * (n + 1)) / 2\n\ndef test_nth_sum_of_squared_numbers():\n    assert nth_sum_of_squared_numbers(1) == 0\n    assert nth_sum_of_squared_numbers(2) == 0\n    assert nth_sum_of_squared_numbers(3) == 4\n    assert nth_sum_of_squared_numbers(4) == 8\n    assert nth_sum_of_squared_numbers(5) == 13\n\nif __name__ == \"__main__\":\n    test_nth_sum_of_squared_numbers()"
    },
    {
      "rank": 99,
      "score": 2.8443079399296294,
      "candidate": "def solution(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(map(lambda x: pow(x, 2), range(1, n))) - sum(map(lambda x: pow(x, 2), range(1, n)))\n\nif __name__ == \"__main__\":\n    assert solution(1) == 0\n    assert solution(2) == 1\n    assert solution(3) == 4\n    assert solution(4) == 9\n    assert solution(5) == 16"
    },
    {
      "rank": 100,
      "score": 2.397458626059359,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getSumSquares(self, n):\n        return sum(map(lambda x: x * x, range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    print Solution().getSumSquares(3)\n    print Solution().getSumSquares(4)\n    print Solution().getSumSquares(5)\n    print Solution().getSumSquares(6)\n    print Solution().getSumSquares(7)"
    }
  ]
}