{
  "timestamp": "2025-09-14T18:32:40.998145",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 159,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum_in_range(list, start, end):\n    return sum(list[i] for i in range(start, end))\n\n\nclass Solution(object):\n    def sumRange(self,nums, start, end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        return sum_in_range(nums, start, end)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def sum_range(nums, low, high):\n    \"\"\"\n    :type nums: List[int]\n    :type low: int\n    :type high: int\n    :rtype: int\n    \"\"\"\n    if low > high:\n        return 0\n    if low == high:\n        return nums[low]\n    mid = (low + high) / 2\n    return sum_range(nums, low, mid) + sum_range(nums, mid + 1, high)\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5]\n    print(sum_range(nums, 0, 2))\n    print(sum_range(nums, 3, 5))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def sum(numbers, start, end):\n    s = 0\n    for i in range(start, end):\n        s += numbers[i]\n    return s\n\ndef test_sum():\n    assert sum([1,2,3,4,5], 0, 4) == 15\n\ndef main():\n    test_sum()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        sum = 0\n        curr = head\n        while curr and curr.val < start:\n            curr = curr.next\n        while curr and curr.val <= end:\n            sum += curr.val\n            curr = curr.next\n        return sum\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    start, end = 1, 5\n    print Solution().getSum(head, start, end)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start > end:\n            return 0\n        nums_len = len(nums)\n        if start == 0 and end == nums_len - 1:\n            return sum(nums[start:end + 1])\n        if start > end:\n            return 0\n        if start == 0:\n            return sum(nums[end + 1:])\n        if end == nums_len - 1:\n            return sum(nums[:start])\n        return sum(nums[start:end + 1]) + sum(nums[start + 1:end + 1])"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in range(start,end):\n            total += nums[i]\n        return total"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n\"\"\"\n#!/usr/bin/env python\n\n# Copyright 2017 The Chromium Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# This is a simple script to compute the sum of the numbers in a list between the\n# indices of a specified range.\n\n# Example usage:\n#./sum_numbers_in_list.py [-i] list_file -r 1 3\n#\n# This will sum the numbers in the list between indices 1 and 3.\n\n# Note:\n# This script does not use any of the built-in Python libraries to compute the\n# sum. It simply computes the sum of the numbers in the list between the indices\n# specified by the user.\n\n# Written by: Michal Zalewski, mzalewski@google.com, 2017\n\n# Usage:\n#./sum_numbers_in_list.py [-i] list_file -r 1 3\n#\n# This will sum the numbers in the list between indices 1 and 3.\n\n# Example usage:\n#./sum_numbers_in_list.py [-i] list_file -r 1 3\n#\n# This will sum the numbers in the list between indices 1 and 3.\n\n# Example list_file:\n# -0\n# -1\n# -2\n# -3\n# -4\n# -5\n# -6\n# -7\n# -8\n# -9\n# -10\n# -11\n# -12\n# -13\n# -14\n# -15\n# -16\n# -17\n# -18\n# -19\n# -20\n# -21\n# -22\n# -23\n# -24\n# -25\n# -26\n# -27\n# -28\n# -29\n# -30\n# -31\n# -32\n# -33\n# -34\n# -35\n# -36\n# -37\n# -38\n# -39\n# -40\n# -41\n# -42\n# -43\n# -44\n# -45\n# -46\n# -47\n# -48\n# -49\n#"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        #if start >= end:\n        #    return 0\n        #return sum(nums[start:end])\n        #return sum(nums[start:end])\n        return sum(nums[start:end])"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getSum(self, arr, i, j):\n        \"\"\"\n        :type arr: List[int]\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        return sum(arr[i:j])\n        \n    def getSum(self, arr, i, j):\n        return sum(arr[i:j])\n        \n    def getSum(self, arr, i, j):\n        return sum(arr[i:j])"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# coding=utf-8\nimport time\nimport random\n\n__author__ = 'Zhuang Chen'\n'''\nclass Solution(object):\n    def getSum(self, list, start, end):\n        \"\"\"\n        :type list: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start > end:\n            return 0\n        if start == end:\n            return list[start]\n        sum = 0\n        for i in range(start, end):\n            sum += list[i]\n        return sum\n'''\n\nstart = time.time()\n\ndef getSum(list, start, end):\n    if start > end:\n        return 0\n    if start == end:\n        return list[start]\n    sum = 0\n    for i in range(start, end):\n        sum += list[i]\n    return sum\n\ndef getSum(list, start, end):\n    if start > end:\n        return 0\n    if start == end:\n        return list[start]\n    sum = 0\n    for i in range(start, end):\n        sum += list[i]\n    return sum\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    start = 0\n    end = 10\n    print(getSum(list, start, end))\n    print(time.time() - start)\n\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    start = 0\n    end = 10\n    print(getSum(list, start, end))\n    print(time.time() - start)\n\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    start = 0\n    end = 10\n    print(getSum(list, start, end))\n    print(time.time() - start)\n\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    start = 0\n    end = 10"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nGiven a list of numbers, return the sum of all numbers between indices i and j (i and j are both inclusive).\n\nExample:\nGiven nums = [1, 3, 5], and i = 0 and j = 2,\nreturn 6.\n\"\"\"\n\n\nclass Solution(object):\n    def sumNumbers(self, nums, i, j):\n        \"\"\"\n        :type nums: List[int]\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        return sum([nums[i] for i in range(i, j + 1)])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.sumNumbers([1, 3, 5], 0, 2)\n    print s.sumNumbers([1, 3, 5], 0, 1)\n    print s.sumNumbers([1, 3, 5], 1, 2)\n    print s.sumNumbers([1, 3, 5], 1, 1)\n    print s.sumNumbers([1, 3, 5], 2, 3)\n    print s.sumNumbers([1, 3, 5], 0, 4)\n    print s.sumNumbers([1, 3, 5], 0, 3)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        sum = 0\n        while head and start <= end:\n            sum += head.val\n            head = head.next\n            start += 1\n        return sum"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @param {integer} i\n    # @param {integer} j\n    # @return {integer}\n    def getSum(self, head, i, j):\n        if not head:\n            return 0\n        if head.val == 0:\n            return 0\n        ans = 0\n        p = head\n        for i in range(i, j):\n            p = p.next\n        while p:\n            ans += p.val\n            p = p.next\n        return ans\n\nif __name__ == '__main__':\n    print Solution().getSum([1,2,3], 0, 2)\n    print Solution().getSum([1,2,3], 1, 2)\n    print Solution().getSum([1,2,3], 1, 3)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        \n        if not head:\n            return 0\n        \n        curr = head\n        sum = 0\n        while curr and curr.next and curr.val < start:\n            curr = curr.next\n        while curr and curr.val <= end:\n            sum += curr.val\n            curr = curr.next\n        while curr:\n            sum += curr.val\n            curr = curr.next\n        \n        return sum"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if end < start:\n            return 0\n        elif end == start:\n            return nums[start]\n        else:\n            return nums[start] + self.sumRange(nums, start+1, end)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,3,4,5,6,7]\n    print(sol.sumRange(nums, 0, 5))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        while head and start <= end:\n            res += head.val\n            head = head.next\n            start += 1\n        return res\n\nif __name__ == '__main__':\n    l = ListNode(1)\n    l.next = ListNode(2)\n    l.next.next = ListNode(3)\n    l.next.next.next = ListNode(4)\n    l.next.next.next.next = ListNode(5)\n    l.next.next.next.next.next = ListNode(6)\n    l.next.next.next.next.next.next = ListNode(7)\n    l.next.next.next.next.next.next.next = ListNode(8)\n    l.next.next.next.next.next.next.next.next = ListNode(9)\n    l.next.next.next.next.next.next.next.next.next = ListNode(10)\n    l.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    l.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    l.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    l.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    l.next.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(15)\n    l.next.next.next.next.next.next.next.next."
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\n#\n#\n#\n#\n#\n#\n#\n#\n\ndef sum_from_range(arr, low, high):\n    #\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def sum(lst, start, end):\n\tsum = 0\n\tfor i in range(start, end):\n\t\tsum += lst[i]\n\treturn sum\n\ndef main():\n\tlst = [3,5,4,9,7,2,1]\n\tprint(sum(lst, 0, 4))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if head is None:\n            return 0\n        sum = 0\n        while head is not None and head.val!= None:\n            if head.val >= start and head.val <= end:\n                sum += head.val\n            head = head.next\n        return sum\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    head.next.next.next.next.next"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sumNumbers(self, root, low, high):\n        \"\"\"\n        :type root: TreeNode\n        :type low: int\n        :type high: int\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        if low == high:\n            return root.val\n        if low > high:\n            return 0\n        return self.sumNumbers(root.left, low, high) + self.sumNumbers(root.right, low, high) + self.sumNumbers(root, low, high - 1)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getSum(self, nums, start, end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start < 0 or end < 0:\n            return 0\n        if start >= len(nums) or end >= len(nums):\n            return 0\n        if start == end:\n            return nums[start]\n        if start >= end:\n            return 0\n        if start == 0 and end == len(nums) - 1:\n            return sum(nums[start:end + 1])\n        if start == 0:\n            return sum(nums[start:end + 1])\n        if end == len(nums) - 1:\n            return sum(nums[start:end + 1])\n        return sum(nums[start:end + 1]) + self.getSum(nums, start + 1, end)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getSum([1, 2, 3, 4, 5], 1, 4)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Function to find sum of the numbers in a list between the indices of a specified range.\ndef sumRange(numbers, start, end):\n    # if the end is less than the start\n    if end < start:\n        return 0\n    # else loop through the range\n    sum = 0\n    for i in range(start, end+1):\n        sum += numbers[i]\n    return sum\n\n# Test Cases\n# Input: numbers = [1, 2, 3, 4, 5], start = 0, end = 4\n# Output: sum = 15\n# Input: numbers = [1, 2, 3, 4, 5], start = 0, end = 2\n# Output: sum = 8\n# Input: numbers = [1, 2, 3, 4, 5], start = 2, end = 5\n# Output: sum = 14\n# Input: numbers = [1, 2, 3, 4, 5], start = 0, end = -1\n# Output: sum = 0\n# Input: numbers = [1, 2, 3, 4, 5], start = 0, end = -5\n# Output: sum = 0\n# Input: numbers = [1, 2, 3, 4, 5], start = -5, end = -1\n# Output: sum = 0\n# Input: numbers = [1, 2, 3, 4, 5], start = -5, end = -5\n# Output: sum = 0\n\n# Input: numbers = [1, 2, 3, 4, 5], start = -5, end = -5\n# Output: sum = 0\n\n# Input: numbers = [1, 2, 3, 4, 5], start = -5, end = -5\n# Output: sum = 0\n\n# Input: numbers = [1, 2, 3, 4, 5], start = 0, end = 4\n# Output: sum = 15\n\n# Input: numbers = [1, 2, 3, 4, 5], start = 0, end = 2\n# Output: sum = 8\n\n# Input: numbers = [1, 2, 3, 4, 5], start = 2, end = 5\n# Output: sum = 14\n\n# Input: numbers = [1, 2, 3, 4, 5], start = 0, end = -1\n#"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# @author: lishaohu\n# @date:   2017-04-20\n\ndef sum_of_numbers_in_range(numbers, start, end):\n    # write your code here\n    sum = 0\n    for index in range(start, end):\n        sum += numbers[index]\n    return sum\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7]\n    start = 2\n    end = 5\n    print sum_of_numbers_in_range(numbers, start, end)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param A, a list of integers\n    # @param m, an integer\n    # @param n, an integer\n    # @return an integer\n    def sumRange(self, A, m, n):\n        if m < 0 or n < 0 or m > len(A) or n > len(A):\n            return 0\n        if m == 0 and n == len(A) - 1:\n            return sum(A[m:n+1])\n        if n == len(A) - 1:\n            return sum(A[m:])\n        if m == 0:\n            return sum(A[n+1:])\n        if n == m:\n            return sum(A[:n])\n        return sum(A[m:n+1]) - sum(A[m+1:n+1])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.sumRange([1, 3, 4], 0, 1)\n    print s.sumRange([1, 3, 4], 1, 2)\n    print s.sumRange([1, 3, 4], 1, 3)\n    print s.sumRange([1, 3, 4], 2, 3)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getSum(self, arr, start, end):\n        \"\"\"\n        :type arr: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        return sum(arr[start:end])\n\n    def getSum2(self, arr, start, end):\n        \"\"\"\n        :type arr: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        return sum(arr[start:end])\n\n    def getSum3(self, arr, start, end):\n        \"\"\"\n        :type arr: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        return sum(arr[start:end])\n\n    def getSum4(self, arr, start, end):\n        \"\"\"\n        :type arr: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        return sum(arr[start:end])\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    s = Solution()\n    print s.getSum(arr, 0, len(arr) - 1)\n    print s.getSum2(arr, 0, len(arr) - 1)\n    print s.getSum3(arr, 0, len(arr) - 1)\n    print s.getSum4(arr, 0, len(arr) - 1)"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "import numpy as np\n\ndef sum_numbers_in_range(numbers, start, end):\n    return sum(numbers[start:end+1])\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(sum_numbers_in_range(numbers, 2, 5))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "# https://www.youtube.com/watch?v=jVVjY7JYzEQ\n\n# This is the naive way to do this problem.\n# We will find the sum of the numbers in the list that are between the indices we have provided.\n# We will then find the sum of the numbers that are between the indices of the list we have provided.\n# We will then add the two lists together to get the total sum.\ndef sum_of_numbers_in_range(list_of_numbers, start_index, end_index):\n    total_sum = 0\n    for i in range(start_index, end_index):\n        total_sum += list_of_numbers[i]\n    return total_sum\n\n\n# This is the more efficient way to do this problem.\n# We will find the sum of the numbers in the list that are between the indices we have provided.\n# We will then find the sum of the numbers that are between the indices of the list we have provided.\n# We will then add the two lists together to get the total sum.\ndef sum_of_numbers_in_range(list_of_numbers, start_index, end_index):\n    total_sum = 0\n    for i in range(start_index, end_index):\n        total_sum += list_of_numbers[i]\n    return total_sum + sum_of_numbers_in_range(list_of_numbers, start_index, end_index - 1)\n\n\n# This is the more efficient way to do this problem.\n# We will find the sum of the numbers in the list that are between the indices we have provided.\n# We will then find the sum of the numbers that are between the indices of the list we have provided.\n# We will then add the two lists together to get the total sum.\ndef sum_of_numbers_in_range(list_of_numbers, start_index, end_index):\n    total_sum = 0\n    for i in range(start_index, end_index):\n        total_sum += list_of_numbers[i]\n    return total_sum + sum_of_numbers_in_range(list_of_numbers, start_"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def sum_of_numbers_in_range(l, start, end):\n\ts = 0\n\tfor i in range(start, end + 1):\n\t\ts += l[i]\n\treturn s\n\nprint sum_of_numbers_in_range([1, 2, 3, 4, 5, 6, 7], 0, 4)"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getSum(self, arr, start, end):\n        \"\"\"\n        :type arr: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start >= end:\n            return 0\n        total = 0\n        for i in range(start, end):\n            total += arr[i]\n        return total\n\nif __name__ == '__main__':\n    s = Solution()\n    arr = [1, 2, 3, 4, 5, 6]\n    print s.getSum(arr, 0, len(arr) - 1)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} start\n    # @param {integer} end\n    # @return {integer}\n    def sumRange(self, nums, start, end):\n        if start >= end:\n            return 0\n        if start < 0:\n            start = 0\n        if end > len(nums):\n            end = len(nums)\n        return sum(nums[start:end])"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/sum-of-numbers-in-a-range/problem\n\ndef sum_range(nums, start, end):\n    total = 0\n    for i in range(start, end):\n        total += nums[i]\n    return total\n\n# Complete the sum_range function below.\ndef sum_range(nums, start, end):\n    total = 0\n    for i in range(start, end):\n        total += nums[i]\n    return total"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "# A helper function to get all the numbers in a list between indices\ndef get_numbers(list, start, end):\n    return [i for i in list[start:end+1]]\n\n# A helper function to sum all the numbers in a list between indices\ndef sum_numbers(list, start, end):\n    return sum(get_numbers(list, start, end))\n\n# A helper function to print the sum of all the numbers in a list between indices\ndef print_sum(list, start, end):\n    return \"{0} sum of {1} numbers in {2} to {3} is {4}\".format(list[start], end-start+1, start, end, sum_numbers(list, start, end))\n\n# A helper function to print the sum of all the numbers in a list between indices\ndef print_sum_numbers(list, start, end):\n    return \"{0} sum of {1} numbers in {2} to {3} is {4}\".format(list[start], end-start+1, start, end, sum_numbers(list, start, end))\n\n# A helper function to print the sum of all the numbers in a list between indices\ndef print_sum_numbers_no_loop(list, start, end):\n    return \"{0} sum of {1} numbers in {2} to {3} is {4}\".format(list[start], end-start+1, start, end, sum_numbers_no_loop(list, start, end))\n\n# A helper function to sum all the numbers in a list between indices\ndef sum_numbers_no_loop(list, start, end):\n    return sum(get_numbers(list, start, end))\n\n# A helper function to sum all the numbers in a list between indices\ndef sum_numbers_no_loop(list, start, end):\n    return sum(get_numbers(list, start, end))\n\n# A helper function to print the sum of all the numbers in a list between indices\ndef sum_numbers_no_loop(list, start, end):\n    return \"{0} sum of {1} numbers in {2} to {3} is {4}\".format"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def sumRange(nums, start, end):\n    if end - start < 0:\n        return 0\n    if start > end:\n        return 0\n    if start < 0:\n        return sumRange(nums, len(nums) + start, end)\n    if end == len(nums):\n        return sumRange(nums, start, end - 1)\n    if end == len(nums) + 1:\n        return sumRange(nums, start, end - 1)\n    if start > 0 and end < len(nums) and nums[start] == nums[end]:\n        return nums[start]\n    if start == 0:\n        return sumRange(nums, 1, end)\n    if end == len(nums) - 1:\n        return sumRange(nums, start, end - 1)\n    if start > 0 and end < len(nums) and nums[end] == nums[start]:\n        return nums[end]\n    return sumRange(nums[start:end], start, end - 1) + sumRange(nums[:end], start, end - 1)\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sumRange(nums, 0, 5))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import sys\nimport collections\n\nif __name__ == \"__main__\":\n    numbers = [int(x) for x in input().split()]\n    start = int(input())\n    end = int(input())\n    sum = collections.Counter(numbers)\n    result = sum.get(start, 0) + sum.get(end, 0)\n    print(result)"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getSum(self, A, i, j):\n        \"\"\"\n        :type A: List[int]\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        if i > j:\n            return 0\n        return sum(A[i:j])\n\nif __name__ == \"__main__\":\n    A = [1, 2, 3, 4]\n    s = Solution()\n    print s.getSum(A, 0, len(A) - 1)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def sum_of_numbers_in_range(numbers, start_index, end_index):\n    result = 0\n    for index in range(start_index, end_index):\n        result += numbers[index]\n    return result\n\n\ndef test_sum_of_numbers_in_range():\n    numbers = [1, 2, 3, 4, 5]\n    assert sum_of_numbers_in_range(numbers, 0, 3) == 15\n    assert sum_of_numbers_in_range(numbers, 2, 4) == 12\n    assert sum_of_numbers_in_range(numbers, 0, 10) == 55\n\n\nif __name__ == '__main__':\n    test_sum_of_numbers_in_range()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def sum_from_range(arr, start, end):\n    if not arr or start > end:\n        return 0\n    if not arr[start] or not arr[end]:\n        return 0\n    if arr[start] > arr[end]:\n        return sum_from_range(arr, start, end - 1)\n    if arr[start] == arr[end]:\n        return arr[start]\n    return arr[start] + sum_from_range(arr, start + 1, end)\n\ndef sum_from_range_recursive(arr, start, end):\n    if not arr or start > end:\n        return 0\n    if start == end:\n        return arr[start]\n    if arr[start] > arr[end]:\n        return sum_from_range_recursive(arr, start, end - 1)\n    if arr[start] == arr[end]:\n        return arr[start] + sum_from_range_recursive(arr, start + 1, end)\n    return arr[start] + sum_from_range_recursive(arr, start + 1, end)\n\ndef sum_from_range_recursive_1(arr, start, end):\n    if not arr or start > end:\n        return 0\n    if start == end:\n        return arr[start]\n    if arr[start] > arr[end]:\n        return sum_from_range_recursive_1(arr, start, end - 1)\n    if arr[start] == arr[end]:\n        return arr[start] + sum_from_range_recursive_1(arr, start + 1, end)\n    return arr[start] + sum_from_range_recursive_1(arr, start + 1, end)\n\ndef sum_from_range_recursive_2(arr, start, end):\n    if not arr or start > end:\n        return 0\n    if start == end:\n        return arr[start]\n    if arr[start] > arr[end]:\n        return sum_from_range_recursive_2(arr, start, end - 1)\n    if arr[start] == arr[end]:\n        return arr[start] + sum_from_range_"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef sum_range(list_, low, high):\n    sum = 0\n    for i in range(low, high):\n        sum += list_[i]\n    return sum\n\ndef sum_range_recursive(list_, low, high):\n    if low >= high:\n        return 0\n    return sum_range_recursive(list_, low + 1, high) + list_[low] + sum_range_recursive(list_, low, high - 1)\n\ndef sum_range_recursive_helper(list_, low, high, sum):\n    if low >= high:\n        return sum\n    return sum_range_recursive_helper(list_, low + 1, high, sum + list_[low])\n\ndef sum_range_recursive_helper2(list_, low, high, sum):\n    if low >= high:\n        return sum\n    return sum_range_recursive_helper2(list_, low + 1, high, sum + list_[low]) + list_[low]\n\ndef sum_range_recursive_helper3(list_, low, high, sum):\n    if low >= high:\n        return sum\n    return sum_range_recursive_helper3(list_, low + 1, high, sum + list_[low]) + list_[low] + sum_range_recursive_helper(list_, low, high - 1, sum)\n\ndef sum_range_recursive_helper4(list_, low, high, sum):\n    if low >= high:\n        return sum\n    return sum_range_recursive_helper4(list_, low + 1, high, sum + list_[low]) + list_[low] + sum_range_recursive_helper(list_, low, high - 1, sum)\n\ndef sum_range_recursive_helper5(list_, low, high, sum):\n    if low >= high:\n        return sum\n    return sum_range_recursive_helper5(list_, low + 1, high, sum + list_[low]) + list_[low] + sum_range_recursive"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def sum_range(l, start, end):\n    if start > end:\n        return 0\n    if start == end:\n        return l[start]\n    else:\n        return l[start] + sum_range(l, start+1, end)\n\n# Test Cases\n\ntest_cases = [\n    [[1, 2, 3, 4, 5], 2, 3, 5, 7],\n    [[1, 2, 3, 4, 5], 2, 1, 6, 7],\n    [[1, 2, 3, 4, 5], 3, 2, 6, 7],\n    [[1, 2, 3, 4, 5], 0, 2, 6, 7],\n    [[1, 2, 3, 4, 5], 3, 4, 6, 7],\n    [[1, 2, 3, 4, 5], 4, 3, 6, 7],\n    [[1, 2, 3, 4, 5], 5, 4, 6, 7],\n    [[1, 2, 3, 4, 5], 6, 5, 6, 7],\n    [[1, 2, 3, 4, 5], 7, 6, 7, 7],\n]\n\nfor t in test_cases:\n    print(sum_range(t[0], t[1], t[2]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-sum-of-numbers/problem\n\nn = int(input())\nnums = list(map(int, input().rstrip().split()))\n\nstart = int(input())\nend = int(input())\n\nresult = sum(nums[start:end])\n\nprint(\"Sum is {0}\".format(result))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getSum(self, list, start, end):\n        \"\"\"\n        :type list: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start < 0 or end < 0:\n            return 0\n        if start > end:\n            return 0\n        if end >= len(list):\n            return 0\n        if start == end:\n            return list[start]\n        if start > end:\n            return self.getSum(list, end, start - 1) + self.getSum(list, end + 1, len(list))\n        if start == end - 1:\n            return self.getSum(list, start + 1, end)\n        return self.getSum(list, start + 1, end) + self.getSum(list, start, end - 1)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def sum_range(lst, start, end):\n    total = 0\n    for i in range(start, end+1):\n        total += lst[i]\n    return total\n\ndef main():\n    lst = [1, 2, 3, 4, 5]\n    print(sum_range(lst, 0, 4))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        return sum(nums[start:end+1])\n        \n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.sumRange([1,2,3,4,5],1,3)\n    print sol.sumRange([1,2,3,4,5],3,5)\n    print sol.sumRange([1,2,3,4,5],2,4)\n    print sol.sumRange([1,2,3,4,5],1,5)\n    print sol.sumRange([1,2,3,4,5],1,6)\n    print sol.sumRange([1,2,3,4,5],1,7)\n    print sol.sumRange([1,2,3,4,5],1,8)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def sum_list(lst, low, high):\n    sum = 0\n    for i in range(low, high):\n        sum += lst[i]\n    return sum\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5]\n    print(sum_list(lst, 0, 5))\n    print(sum_list(lst, 0, 2))\n    print(sum_list(lst, 1, 3))\n    print(sum_list(lst, 1, 5))\n    print(sum_list(lst, 2, 4))\n    print(sum_list(lst, 2, 5))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# Complete the sumOfNumbersBetween function below.\ndef sumOfNumbersBetween(numbers, start, end):\n    return sum(numbers[i] for i in range(start, end) if i in numbers)\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sumOfNumbersBetween(numbers, 2, 5))\n    print(sumOfNumbersBetween(numbers, 1, 4))\n    print(sumOfNumbersBetween(numbers, 1, 3))\n    print(sumOfNumbersBetween(numbers, 3, 7))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start > end:\n            return 0\n        if start == end:\n            return nums[start]\n        if start == end+1:\n            return nums[start] + nums[end]\n        if start+1 == end:\n            return nums[start] + nums[end] + nums[start]\n        mid = start + (end-start)/2\n        return nums[start] + self.sumRange(nums,start,mid) + self.sumRange(nums,mid+1,end) + nums[mid]"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "# https://www.youtube.com/watch?v=3QzGf_xuYQY\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start < 0 or end < 0 or start > end:\n            return 0\n        if not head:\n            return 0\n        if start == end:\n            return head.val\n        sum = 0\n        cur = head\n        while cur and cur.val >= start and cur.val <= end:\n            sum += cur.val\n            cur = cur.next\n        return sum\n\n    # @param head, a list node\n    # @param start, an integer\n    # @param end, an integer\n    # @return an integer\n    def getSum2(self, head, start, end):\n        if not head or start > end:\n            return 0\n        sum = 0\n        cur = head\n        while cur and cur.val >= start and cur.val <= end:\n            sum += cur.val\n            cur = cur.next\n        return sum"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "# Write your code here\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\ndef sum_numbers(a, b, list_of_numbers):\n    sum = 0\n    for i in range(a, b):\n        sum += list_of_numbers[i]\n    return sum\n\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\ndef main():\n    print(\"Enter the list of numbers\")\n    list_of_numbers = [int(i) for i in input().split()]\n    print(\"Enter the first index\")\n    a = int(input())\n    print(\"Enter the second index\")\n    b = int(input())\n    print(\"Enter the list of numbers\")\n    list_of_numbers = [int(i) for i in input().split()]\n    print(\"Sum of the numbers in the list between the indices \" + str(a) + \" and \" + str(b))\n    print(sum_numbers(a, b, list_of_numbers))\n\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getSum(self, nums, m, n):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if m == 0 or n == 0:\n            return sum(nums)\n        if m > len(nums) or n > len(nums):\n            return 0\n        if m == n:\n            return sum(nums[:m])\n        if m > n:\n            return self.getSum(nums, m - 1, n) + nums[m]\n        if n > m:\n            return self.getSum(nums, m, n - 1) + nums[n]\n        return self.getSum(nums, m, n) + nums[m] + nums[n]\n\n\nif __name__ == \"__main__\":\n    assert Solution().getSum([1, 2, 3], 0, 0) == 6\n    assert Solution().getSum([1, 2, 3], 1, 1) == 3\n    assert Solution().getSum([1, 2, 3], 0, 2) == 6\n    assert Solution().getSum([1, 2, 3], 1, 2) == 3"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} start\n    # @param {integer} end\n    # @return {integer}\n    def sumRange(self, nums, start, end):\n        total = 0\n        for i in range(start, end + 1):\n            total += nums[i]\n        return total\n\nif __name__ == \"__main__\":\n    print Solution().sumRange([1, 2, 3, 4, 5], 0, 2)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def sum_list(l, start, end):\n    if start >= end:\n        return 0\n    if start < 0:\n        start = 0\n    if end > len(l):\n        end = len(l)\n    sum = 0\n    for i in range(start, end):\n        sum += l[i]\n    return sum\n\nif __name__ == '__main__':\n    l = [1,2,3,4,5,6,7,8,9,10]\n    print(sum_list(l, 0, 6))\n    print(sum_list(l, -1, -1))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start > end:\n            return 0\n        if start == end:\n            return nums[start]\n        if start == end-1:\n            return nums[start]+nums[end]\n        return nums[start]+nums[end-1]+nums[end]"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if end - start > 100000:\n            return sum(map(lambda x: nums[x], xrange(start,end)))\n        \n        return sum(map(lambda x: nums[x], xrange(start,end + 1)))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def sum(nums, start, end):\n    sum = 0\n    for i in range(start, end + 1):\n        sum += nums[i]\n    return sum\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5]\n    start = 0\n    end = 2\n    print sum(nums, start, end)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        return sum(nums[start:end])\n\nif __name__ == \"__main__\":\n    nums = [1,3,5,6]\n    print(Solution().sumRange(nums,0,2))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-sum-of-numbers-in-a-list-between-two-indices/problem\n\ndef sum_of_numbers_in_range(nums, start, end):\n    result = 0\n    for i in range(start, end):\n        result += nums[i]\n    return result\n\nif __name__ == '__main__':\n    nums = [int(i) for i in input().split()]\n    start = int(input())\n    end = int(input())\n    print(sum_of_numbers_in_range(nums, start, end))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nfrom collections import Counter\n\ndef sum_in_range(list, start, end):\n    return sum([i for i in range(start, end) if i in list])\n\n\nif __name__ == '__main__':\n    # list = [1, 2, 3, 4, 5]\n    # start = 0\n    # end = 4\n    # print(sum_in_range(list, start, end))\n    list = [1, 2, 3, 4, 5]\n    start = 1\n    end = 3\n    print(sum_in_range(list, start, end))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def sum_range(l, start, end):\n\ts = 0\n\tfor i in range(start, end+1):\n\t\ts += l[i]\n\treturn s\n\nl = [1, 2, 3, 4, 5]\nprint(sum_range(l, 0, 3))\nprint(sum_range(l, 1, 4))\nprint(sum_range(l, 2, 5))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getSum(self, A, start, end):\n        \"\"\"\n        :type A: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start > end:\n            return 0\n        res = 0\n        for i in xrange(start, end):\n            res += A[i]\n        return res\n\n\nif __name__ == '__main__':\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    start, end = 1, 6\n    solution = Solution()\n    print solution.getSum(A, start, end)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "# http://www.geeksforgeeks.org/sum-of-numbers-in-a-range-2-9-index-0/\n\ndef sum_of_numbers_in_range(numbers, start, end):\n    n = len(numbers)\n    if start > end:\n        return 0\n    if start == end:\n        return numbers[start]\n    mid = (start + end) / 2\n    return sum_of_numbers_in_range(numbers, start, mid) + sum_of_numbers_in_range(numbers, mid + 1, end)\n\ndef test_sum_of_numbers_in_range():\n    assert sum_of_numbers_in_range([1, 2, 3, 4], 0, 2) == 6\n    assert sum_of_numbers_in_range([1, 2, 3, 4], 1, 3) == 9\n    assert sum_of_numbers_in_range([1, 2, 3, 4], 2, 4) == 12\n\nif __name__ == '__main__':\n    test_sum_of_numbers_in_range()"
    },
    {
      "rank": 61,
      "score": 7.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start > end:\n            return 0\n        if start == end:\n            return nums[start]\n        if start == end - 1:\n            return nums[end]\n        if start == end - 2:\n            return nums[end] + nums[end - 1]\n        mid = (end + start) / 2\n        return self.sumRange(nums,start,mid) + self.sumRange(nums,mid + 1,end)\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [1,2,3]\n    print(sol.sumRange(nums,0,2))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start>end:\n            return 0\n        if start==end:\n            return nums[start]\n        if start==end-1:\n            return nums[start] + nums[end]\n        return nums[start] + self.sumRange(nums,start+1,end) - self.sumRange(nums,start,end-1)\n        \n        \n\na=Solution()\nprint(a.sumRange([1,3,5,6],0,2))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "# write a function to find sum of the numbers in a list between the indices of a specified range\n\n# the first and second index are inclusive\ndef sum_of_range(l, start, end):\n    return sum(l[start:end])\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_of_range(l, 0, 3))\n    print(sum_of_range(l, 1, 5))\n    print(sum_of_range(l, 3, 6))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "# Your code here\n\n#!/usr/bin/env python\n\nimport numpy as np\nimport math\n\ndef sum_range(lst, start, end):\n    if start == end:\n        return lst[start]\n    else:\n        return sum_range(lst, start+1, end) + sum_range(lst, start, end-1)\n\ndef sum_range_2(lst, start, end):\n    if start == end:\n        return lst[start]\n    else:\n        return sum_range_2(lst, start+1, end) + sum_range_2(lst, start, end-1)\n\ndef sum_range_3(lst, start, end):\n    if start == end:\n        return lst[start]\n    else:\n        return sum_range_3(lst, start+1, end) + sum_range_3(lst, start, end-1)\n\ndef sum_range_4(lst, start, end):\n    if start == end:\n        return lst[start]\n    else:\n        return sum_range_4(lst, start+1, end) + sum_range_4(lst, start, end-1)\n\ndef sum_range_5(lst, start, end):\n    if start == end:\n        return lst[start]\n    else:\n        return sum_range_5(lst, start+1, end) + sum_range_5(lst, start, end-1)\n\ndef sum_range_6(lst, start, end):\n    if start == end:\n        return lst[start]\n    else:\n        return sum_range_6(lst, start+1, end) + sum_range_6(lst, start, end-1)\n\ndef sum_range_7(lst, start, end):\n    if start == end:\n        return lst[start]\n    else:\n        return sum_range_7(lst, start+1, end) + sum_range_7(lst, start, end-1)\n\ndef sum_range_8(l"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def sumRange(self, root, low, high):\n        \"\"\"\n        :type root: TreeNode\n        :type low: int\n        :type high: int\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        if root.val <= low or root.val > high:\n            return 0\n        if root.val >= low and root.val <= high:\n            return root.val\n        return self.sumRange(root.left, low, high) + self.sumRange(root.right, low, high)\n        \n    def sumRange(self, root, low, high):\n        \"\"\"\n        :type root: TreeNode\n        :type low: int\n        :type high: int\n        :rtype: int\n        \"\"\"\n        return self.sumRangeHelper(root, low, high)\n    \n    def sumRangeHelper(self, root, low, high):\n        if root is None:\n            return 0\n        if root.val <= low or root.val > high:\n            return 0\n        if root.val >= low and root.val <= high:\n            return root.val\n        return self.sumRangeHelper(root.left, low, high) + self.sumRangeHelper(root.right, low, high)"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumRange(self, root: TreeNode, low: int, high: int) -> int:\n        res = 0\n        if not root:\n            return res\n        if root.val >= low and root.val <= high:\n            res += root.val\n        if root.left:\n            res += self.sumRange(root.left, low, root.val)\n        if root.right:\n            res += self.sumRange(root.right, root.val, high)\n        return res"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "# TODO:\n# 1. Use the range operator to get the indices of the list.\n# 2. Use the range operator to get the sum of the numbers.\n# 3. Use the range operator to get the sum of the numbers.\n\n# https://discuss.leetcode.com/topic/39558/java-solution-using-range-operators-and-a-for-loop\n# http://www.programcreek.com/2012/12/leetcode-range-sum-query/\n# http://www.programcreek.com/2012/12/leetcode-range-sum-query-with-solutions/\n# http://www.programcreek.com/2012/12/leetcode-range-sum-query-with-solutions/\n# http://www.programcreek.com/2012/12/leetcode-range-sum-query-with-solutions/\n# http://www.programcreek.com/2012/12/leetcode-range-sum-query-with-solutions/\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {integer} i\n    # @param {integer} j\n    # @return {integer}\n    def sumRange(self, head, i, j):\n        sum = 0\n        while head and i <= j:\n            sum += head.val\n            head = head.next\n            i += 1\n        return sum\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.sumRange([1,2,3], 2, 3)\n    print s.sumRange([1,2,3], 0, 1)\n    print s.sumRange([1,2,3], 1, 2)"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "# your code here\ndef sum_between(l, start, end):\n    total = 0\n    for i in range(start, end+1):\n        total += l[i]\n    return total\n\nprint sum_between([1,2,3,4,5,6], 0, 5)"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @param {integer} i\n    # @param {integer} j\n    # @return {integer}\n    def getSum(self, head, i, j):\n        sum = 0\n        if i == j:\n            return sum\n        if i > j:\n            return self.getSum(head, j, head.next.val)\n        if head == None:\n            return sum\n        if i == 0:\n            return self.getSum(head.next, 1, j)\n        if i == 1:\n            return head.val\n        sum = self.getSum(head.next, 1, j)\n        sum += self.getSum(head.next.next, 1, j)\n        sum += self.getSum(head.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next.next.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next.next.next.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next.next.next.next.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next.next.next.next.next.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next.next.next.next.next.next.next.next.next, 1, j)\n        sum += self.getSum(head.next.next.next.next.next.next.next.next.next.next.next.next"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/sum-of-numbers-in-a-range\n\n\ndef sum_of_numbers_in_a_range(arr, start, end):\n    # Complete this function\n    total = 0\n    for i in range(start, end):\n        total += arr[i]\n    return total\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_of_numbers_in_a_range(arr, 0, 5))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\t# @param head, a ListNode\n\t# @param m, an integer\n\t# @param n, an integer\n\t# @return a double\n\tdef getSum(self, head, m, n):\n\t\tif head == None:\n\t\t\treturn 0\n\t\tif head.next == None:\n\t\t\treturn head.val\n\t\tsum = 0\n\t\tpre = head\n\t\tcur = head\n\t\twhile cur!= None and cur.next!= None:\n\t\t\tcur = cur.next\n\t\t\tsum += cur.val\n\t\t\tif m == 0:\n\t\t\t\tcur = cur.next\n\t\t\telif m < cur.val and n < cur.val:\n\t\t\t\tbreak\n\t\t\telif m > cur.val and n > cur.val:\n\t\t\t\tbreak\n\t\t\tm -= 1\n\t\twhile cur!= None:\n\t\t\tcur = cur.next\n\t\t\tsum += cur.val\n\t\t\tif m == 0:\n\t\t\t\tcur = cur.next\n\t\t\telif m < cur.val and n < cur.val:\n\t\t\t\tbreak\n\t\t\telif m > cur.val and n > cur.val:\n\t\t\t\tbreak\n\t\t\tm -= 1\n\t\treturn sum"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# Your code here.\n\nclass Solution(object):\n    def getSum(self, nums, start, end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start < 0 or end >= len(nums):\n            return 0\n        if start >= end:\n            return sum(nums[start:end])\n        if start == end:\n            return sum(nums[start:end])\n        return sum(nums[start:end]) + self.getSum(nums, start + 1, end)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 0, 3)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 1, 3)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 2, 3)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 3, 3)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 4, 3)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 5, 3)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 6, 3)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 7, 3)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 0, 4)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 1, 4)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 2, 4)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 3, 4)\n    print s.getSum([1, 2, 3, 4, 5, 6, 7], 4, 4)\n    print s.getSum"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def sumNumbers(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        else:\n            sum = 0\n            curr = head\n            while curr:\n                sum += curr.val\n                curr = curr.next\n            return sum\n\nclass Solution(object):\n    def sumNumbers(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        else:\n            sum = 0\n            curr = head\n            while curr:\n                sum += curr.val\n                curr = curr.next\n            return sum"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        curr = head\n        sum = 0\n        while curr and curr.next and curr.next.next:\n            sum += curr.val\n            curr = curr.next.next\n            if curr and curr.next and curr.next.next:\n                curr = curr.next.next\n        while curr and curr.val >= start and curr.val <= end:\n            sum += curr.val\n            curr = curr.next\n        return sum"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} m\n    # @param {integer} n\n    # @return {integer}\n    def sumRange(self, nums, m, n):\n        if m == n:\n            return nums[m]\n        if m == -1 or n == -1:\n            return 0\n        if m == n:\n            return nums[m]\n        sum = 0\n        for i in range(m, n):\n            sum += nums[i]\n        return sum"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @param {integer} i\n    # @param {integer} j\n    # @return {integer}\n    def getSum(self, head, i, j):\n        sum = 0\n        while head and i <= j:\n            sum += head.val\n            head = head.next\n            i += 1\n        return sum\n\nif __name__ == \"__main__\":\n    n1 = ListNode(1)\n    n2 = ListNode(2)\n    n3 = ListNode(3)\n    n4 = ListNode(4)\n    n5 = ListNode(5)\n    n6 = ListNode(6)\n    n7 = ListNode(7)\n    n8 = ListNode(8)\n    n9 = ListNode(9)\n    n10 = ListNode(10)\n    n11 = ListNode(11)\n    n12 = ListNode(12)\n    n13 = ListNode(13)\n    n14 = ListNode(14)\n    n15 = ListNode(15)\n    n16 = ListNode(16)\n    n17 = ListNode(17)\n    n18 = ListNode(18)\n    n19 = ListNode(19)\n    n20 = ListNode(20)\n    n21 = ListNode(21)\n    n22 = ListNode(22)\n    n23 = ListNode(23)\n    n24 = ListNode(24)\n    n25 = ListNode(25)\n    n26 = ListNode(26)\n    n27 = ListNode(27)\n    n28 = ListNode(28)\n    n29 = ListNode(29)\n    n30 = ListNode(30)\n    n31 = ListNode(31)\n    n32 = ListNode(32)\n    n33 = ListNode(33)\n    n34 = ListNode(34)\n    n35 = ListNode(35)\n    n36 = ListNode(36)\n    n37 = ListNode(37)\n    n38 = ListNode(38)\n    n39 = ListNode(39)\n    n40 = ListNode(40)\n    n41 = ListNode(41"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def sumRange(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        pre = head\n        while pre and m <= n:\n            pre = pre.next\n            m += 1\n        while head and m <= n:\n            res += head.val\n            head = head.next\n            m += 1\n        return res"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# Example\n# [1, 2, 3, 4, 5, 6]\n# [2, 4, 6]\n# [2, 4, 6]\n# [2, 4, 6]\n# [2, 4, 6]\n# sum(2, 4, 6) = 12\n# sum(2, 4, 6) = 12\n# sum(2, 4, 6) = 12\n# sum(2, 4, 6) = 12\n\ndef sum_range(l, i, j):\n    return sum(l[i:j])\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6]\n    print(sum_range(l, 0, 5))\n    print(sum_range(l, 1, 5))\n    print(sum_range(l, 2, 5))\n    print(sum_range(l, 3, 5))\n    print(sum_range(l, 4, 5))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# https://www.hackerearth.com/problem/algorithm/sum-of-numbers-in-a-list/\n\nclass Solution:\n    # @param A : list of integers\n    # @param m : integer\n    # @param n : integer\n    # @return : integer\n    def sumRange(self, A, m, n):\n        # Write your code here\n        \n        #if m >= len(A) or m >= n or n >= len(A):\n        #    return 0\n        #if m == n:\n        #    return A[m]\n        \n        result = 0\n        for i in range(m, n+1):\n            result += A[i]\n        return result"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def sumNumbers(self, root, low, high):\n        \"\"\"\n        :type root: TreeNode\n        :type low: int\n        :type high: int\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if root.left:\n            self.sumNumbers(root.left, low, high)\n        if root.right:\n            self.sumNumbers(root.right, low, high)\n        return root.val + self.sumNumbers(root.left, low, high) + self.sumNumbers(root.right, low, high)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def getSum(self, head: ListNode, start: int, end: int) -> int:\n        sum = 0\n        while head and start <= end:\n            sum += head.val\n            head = head.next\n            start += 1\n        return sum"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import sys\n\ndef sum(a, l, r):\n    if l == r:\n        return a[l]\n    else:\n        return a[l] + sum(a, l + 1, r)\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum([1, 2, 3], 0, 4) == 6, \"SUM 1\"\n    assert sum([1, 2, 3], 1, 4) == 5, \"SUM 2\"\n    assert sum([1, 2, 3], 2, 4) == 4, \"SUM 3\"\n    assert sum([1, 2, 3], 3, 4) == 3, \"SUM 4\"\n    assert sum([1, 2, 3], 4, 4) == 0, \"SUM 5\"\n    assert sum([1, 2, 3], 0, 1) == 3, \"SUM 6\"\n    assert sum([1, 2, 3], -1, 1) == 3, \"SUM 7\"\n    assert sum([1, 2, 3], 1, 3) == 6, \"SUM 8\"\n    assert sum([1, 2, 3], 2, 3) == 5, \"SUM 9\"\n    assert sum([1, 2, 3], 3, 3) == 4, \"SUM 10\"\n    assert sum([1, 2, 3], 4, 3) == 3, \"SUM 11\"\n    assert sum([1, 2, 3], 0, 2) == 6, \"SUM 12\"\n    assert sum([1, 2, 3], -1, 2) == 6, \"SUM 13\"\n    assert sum([1, 2, 3], 1, 2) == 5, \"SUM 14\"\n    assert sum([1, 2, 3], 2, 2) == 4, \"SUM 15\"\n    assert sum([1, 2, 3], 3, 2) == 3, \"SUM 16\"\n    assert sum([1, 2, 3], 4, 2) == 2, \"SUM 17\"\n    assert sum([1, 2, 3], 0, 0) == 3, \"SUM 18\"\n    assert sum([1, 2, 3], -1"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\nclass Solution(object):\n    def getSum(self, A, start, end):\n        \"\"\"\n        :type A: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in range(start, end):\n            total += A[i]\n        return total\n\n    def getSum(self, A, start, end):\n        \"\"\"\n        :type A: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in range(start, end):\n            total += A[i]\n        return total\n\n    def getSum(self, A, start, end):\n        \"\"\"\n        :type A: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in range(start, end):\n            total += A[i]\n        return total\n\n    def getSum(self, A, start, end):\n        \"\"\"\n        :type A: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in range(start, end):\n            total += A[i]\n        return total\n\n    def getSum(self, A, start, end):\n        \"\"\"\n        :type A: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in range(start, end):\n            total += A[i]\n        return total\n\n    def getSum(self, A, start, end):\n        \"\"\"\n        :type A: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in range(start, end):\n            total += A[i]\n        return total\n\nif __name__ == \"__main__\":\n    A = [1"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        for i in range(start,end):\n            total += nums[i]\n        return total\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = []\n# param_2 = []\n# param_3 = []\n# obj.sumRange(param_1,param_2,param_3)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def sumNumbers(self, head: ListNode, low, high) -> int:\n        if head is None or head.val is None:\n            return 0\n        ans = 0\n        slow = head\n        fast = head\n        while fast.next and fast.next.val is not None:\n            fast = fast.next\n            slow = slow.next\n        while fast:\n            ans += fast.val\n            if fast.val >= low and fast.val <= high:\n                fast = fast.next\n            else:\n                slow = slow.next\n                fast = fast.next\n        return ans"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def getSum(self, A, i, j):\n        \"\"\"\n        :type A: List[int]\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        return sum(A[i:j+1])"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        cur = head\n        while cur and cur.val <= end:\n            total += cur.val\n            cur = cur.next\n        while cur and cur.val > start:\n            total -= cur.val\n            cur = cur.next\n        return total\n\n    def getSum2(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        total = 0\n        cur = head\n        while cur and cur.val <= end:\n            total += cur.val\n            cur = cur.next\n        while cur and cur.val > start:\n            total -= cur.val\n            cur = cur.next\n        return total"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode} head\n    # @param {integer} i\n    # @param {integer} j\n    # @return {integer}\n    def getSum(self, head, i, j):\n        result = 0\n        while head and i <= j:\n            result += head.val\n            head = head.next\n            i += 1\n        return result\n\n    # @param {ListNode} head\n    # @param {integer} i\n    # @param {integer} j\n    # @return {ListNode}\n    def getSum2(self, head, i, j):\n        result = 0\n        while i <= j:\n            result += head.val\n            head = head.next\n            i += 1\n        return head\n\n    # @param {ListNode} head\n    # @param {integer} i\n    # @param {integer} j\n    # @return {ListNode}\n    def getSum3(self, head, i, j):\n        result = 0\n        while i <= j:\n            if head:\n                result += head.val\n            i += 1\n            head = head.next\n        return head\n\n    # @param {ListNode} head\n    # @param {integer} i\n    # @param {integer} j\n    # @return {ListNode}\n    def getSum4(self, head, i, j):\n        result = 0\n        while i <= j:\n            if head:\n                result += head.val\n            head = head.next\n            i += 1\n        return head\n\n    # @param {ListNode} head\n    # @param {integer} i\n    # @param {integer} j\n    # @return {ListNode}\n    def getSum5(self, head, i, j):\n        result = 0\n        while i <= j:\n            if head:\n                result += head.val\n            head = head.next\n            i += 1\n        return head\n\n\nif __name__ == '__main__':\n    print Solution().getSum([1,2,3,4], 0, 2)\n    print Solution().getSum([1,2,3,4], 1, 2)\n    print Solution().get"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        sum = 0\n        while head and start <= end:\n            sum += head.val\n            head = head.next\n            start += 1\n        return sum"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        sum = 0\n        while head:\n            if head.val >= start and head.val <= end:\n                sum += head.val\n            head = head.next\n        return sum"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def sum_in_range(arr, start, end):\n    if end <= start:\n        return 0\n    if start == end:\n        return arr[start]\n    else:\n        return arr[start] + sum_in_range(arr, start+1, end)\n\ndef sum_in_range(arr, start, end):\n    if end <= start:\n        return 0\n    if start == end:\n        return arr[start]\n    else:\n        return arr[start] + sum_in_range(arr, start+1, end)\n\ndef sum_in_range(arr, start, end):\n    if end <= start:\n        return 0\n    if start == end:\n        return arr[start]\n    else:\n        return arr[start] + sum_in_range(arr, start+1, end)\n\ndef sum_in_range(arr, start, end):\n    if end <= start:\n        return 0\n    if start == end:\n        return arr[start]\n    else:\n        return arr[start] + sum_in_range(arr, start+1, end)\n\ndef sum_in_range(arr, start, end):\n    if end <= start:\n        return 0\n    if start == end:\n        return arr[start]\n    else:\n        return arr[start] + sum_in_range(arr, start+1, end)\n\ndef sum_in_range(arr, start, end):\n    if end <= start:\n        return 0\n    if start == end:\n        return arr[start]\n    else:\n        return arr[start] + sum_in_range(arr, start+1, end)\n\ndef sum_in_range(arr, start, end):\n    if end <= start:\n        return 0\n    if start == end:\n        return arr[start]\n    else:\n        return arr[start] + sum_in_range(arr, start+1, end)\n\ndef sum_in_range(arr, start, end):\n    if end <= start:\n        return 0\n    if start == end:\n        return arr[start]\n    else:\n        return arr[start]"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def getSum(self, head, start, end):\n        \"\"\"\n        :type head: ListNode\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        if start >= end:\n            return 0\n        if start == end:\n            return head.val\n        if start > end:\n            return self.getSum(head.next, start, end)\n        return self.getSum(head.next, start, end) + self.getSum(head.next, start + 1, end)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def sumRange(self,nums,start,end):\n        \"\"\"\n        :type nums: List[int]\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        if start>end:\n            return 0\n        if start==end:\n            return nums[start]\n        if start==end-1:\n            return nums[start]\n        if start==end-2:\n            return nums[start]+nums[end]\n        mid=start+(end-start)/2\n        return self.sumRange(nums,start,mid)+self.sumRange(nums,mid,end)\n\na=Solution()\nprint a.sumRange([1,2,3,4,5],0,2)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def sum_range(nums, start, end):\n    total = 0\n    for i in range(start, end):\n        total += nums[i]\n    return total\n\n# Test Cases\ntest_nums = [1,2,3]\ntest_start = 0\ntest_end = 2\n\nprint sum_range(test_nums, test_start, test_end)\n\n# Output\n#\n# 1"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\nimport unittest\nfrom datetime import datetime\n\nclass TestCases(unittest.TestCase):\n    def test_sum_from_1_to_3(self):\n        self.assertEqual(sum_from_1_to_3([]), 0)\n        self.assertEqual(sum_from_1_to_3([1]), 1)\n        self.assertEqual(sum_from_1_to_3([1,2,3]), 3)\n        self.assertEqual(sum_from_1_to_3([1,2,3,4]), 6)\n\n    def test_sum_from_1_to_10(self):\n        self.assertEqual(sum_from_1_to_10([]), 0)\n        self.assertEqual(sum_from_1_to_10([1]), 1)\n        self.assertEqual(sum_from_1_to_10([1,2,3,4,5,6,7,8,9,10]), 10)\n\n    def test_sum_from_1_to_100(self):\n        self.assertEqual(sum_from_1_to_100([]), 0)\n        self.assertEqual(sum_from_1_to_100([1]), 1)\n        self.assertEqual(sum_from_1_to_100([1,2,3,4,5,6,7,8,9,10]), 100)\n\n    def test_sum_from_1_to_1000(self):\n        self.assertEqual(sum_from_1_to_1000([]), 0)\n        self.assertEqual(sum_from_1_to_1000([1]), 1)\n        self.assertEqual(sum_from_1_to_1000([1,2,3,4,5,6,7,8,9,10]), 1000)\n\n    def test_sum_from_1_to_10000(self):\n        self.assertEqual(sum_from_1_to_10000([]), 0)\n        self.assertEqual(sum_from_1_to_10000([1"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @param start, an integer\n    # @param end, an integer\n    # @return an integer\n    def sumBetween(self, root, start, end):\n        if not root or start == end:\n            return 0\n        if start > end:\n            return 0\n        if not root:\n            return 0\n        return self.sumBetween(root.left, start, end) + self.sumBetween(root.right, start, end)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    # print(sol.sumBetween(root, 0, 4))\n    # print(sol.sumBetween(root, 1, 3))\n    # print(sol.sumBetween(root, 2, 2))\n    # print(sol.sumBetween(root, 3, 1))\n    # print(sol.sumBetween(root, 4, 0))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\ndef sum_range(l, i, j):\n    if i == j:\n        return l[i]\n    else:\n        return sum_range(l, i+1, j) + sum_range(l, i, j-1)\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print sum_range(l, 0, 10)"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def sum_between(list, start, end):\n    sum = 0\n    for i in range(start, end):\n        sum += list[i]\n    return sum\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\n# Your functions should not have any side effects!\ndef test_sum_between():\n    assert sum_between([1, 3, 5], 0, 2) == 6\n    assert sum_between([1, 3, 5], 1, 2) == 4\n    assert sum_between([1, 3, 5], 2, 3) == 1\n    assert sum_between([1, 3, 5], 3, 4) == 3\n    assert sum_between([1, 3, 5], 4, 5) == 0\n\nif __name__ == '__main__':\n    test_sum_between()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def sum_list(list_, start, end):\n    sum = 0\n    for i in range(start, end):\n        sum += list_[i]\n    return sum\n\n# Your code here\n\ndef sum_list(list_, start, end):\n    sum = 0\n    for i in range(start, end):\n        sum += list_[i]\n    return sum\n\nprint(sum_list([1,2,3,4], 0, 2))\nprint(sum_list([1,2,3,4], 1, 3))\nprint(sum_list([1,2,3,4], 1, 5))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/sum-of-range/\n\n# DFS\nclass Solution:\n    def sumRange(self,nums,m,n):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if m < 0 or n < 0:\n            return 0\n        if m > n:\n            return self.sumRange(nums, n, m)\n        if m == n:\n            return nums[m]\n        if m == 0 or n == len(nums):\n            return 0\n        if m == 1 or n == len(nums)-1:\n            return nums[m] + nums[n]\n        return nums[m] + self.sumRange(nums, m-1, n) + self.sumRange(nums, m, n-1)\n\n# BFS\nclass Solution2:\n    def sumRange(self,nums,m,n):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if m < 0 or n < 0:\n            return 0\n        if m > n:\n            return self.sumRange(nums, n, m)\n        if m == 0 or n == len(nums):\n            return nums[m]\n        if m == 1 or n == len(nums)-1:\n            return nums[m] + nums[n]\n        q = [m, n]\n        while q:\n            m, n = q.pop(0)\n            if m == n:\n                return nums[m]\n            q.append(m-1, n-1)\n            q.append(m, n-1)\n            q.append(m+1, n-1)\n            q.append(m-1, n)\n            q.append(m, n+1)\n            q.append(m+1, n)\n        return nums[m] + nums[n]\n\n# DP\nclass Solution3:"
    }
  ]
}