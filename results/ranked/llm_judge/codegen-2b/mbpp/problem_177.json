{
  "timestamp": "2025-09-14T18:40:44.222147",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 177,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import math\n\ndef is_square(number):\n    square = int(math.sqrt(number))\n    if number == square ** 2:\n        return True\n    else:\n        return False\n\ndef main():\n    test_cases = [\n        (1, True),\n        (2, True),\n        (3, True),\n        (4, True),\n        (5, True),\n        (6, True),\n        (7, False),\n        (8, False),\n        (9, False),\n        (10, False),\n        (11, False),\n        (12, False),\n        (13, False),\n        (14, False),\n        (15, False),\n        (16, False),\n        (17, False),\n        (18, False),\n        (19, False),\n        (20, False),\n        (21, False),\n        (22, False),\n        (23, False),\n        (24, False),\n        (25, False),\n        (26, False),\n        (27, False),\n        (28, False),\n        (29, False),\n        (30, False),\n        (31, False),\n        (32, False),\n        (33, False),\n        (34, False),\n        (35, False),\n        (36, False),\n        (37, False),\n        (38, False),\n        (39, False),\n        (40, False),\n        (41, False),\n        (42, False),\n        (43, False),\n        (44, False),\n        (45, False),\n        (46, False),\n        (47, False),\n        (48, False),\n        (49, False),\n        (50, False),\n        (51, False),\n        (52, False),\n        (53, False),\n        (54, False),\n        (55, False),\n        (56, False),\n        (57, False),\n        (58, False),\n        (59, False),\n        (60, False),\n        (61, False),\n        (62, False),\n        (63, False),\n        (64, False),\n        (65, False"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# http://www.geeksforgeeks.org/check-whether-a-number-can-be-represented-product-of-two-squares/\n# https://www.youtube.com/watch?v=ZJ3z0ZuH7kI\ndef is_square(num):\n    \"\"\"\n    :param num: number to check\n    :return: True if num is square else False\n    \"\"\"\n    return (num ** 2) == num\n\ndef is_product_of_two_squares(num):\n    \"\"\"\n    :param num: number to check\n    :return: True if num is product of two squares else False\n    \"\"\"\n    return num % 4 == 0 and num % 9 == 0\n\nif __name__ == '__main__':\n    print(is_square(1))\n    print(is_square(2))\n    print(is_square(3))\n    print(is_square(4))\n    print(is_square(5))\n    print(is_square(6))\n    print(is_square(7))\n    print(is_square(8))\n    print(is_square(9))\n    print(is_square(10))\n    print(is_square(11))\n    print(is_square(12))\n    print(is_square(13))\n    print(is_square(14))\n    print(is_square(15))\n    print(is_square(16))\n    print(is_square(17))\n    print(is_square(18))\n    print(is_square(19))\n    print(is_square(20))\n    print(is_square(21))\n    print(is_square(22))\n    print(is_square(23))\n    print(is_square(24))\n    print(is_square(25))\n    print(is_square(26))\n    print(is_square(27))\n    print(is_square(28))\n    print(is_square(29))\n    print(is_square(30))\n    print(is_square(31))\n    print(is_square(32))\n    print(is_square(33))\n    print("
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import math\n\ndef is_pandigital(n):\n    \"\"\"\n    Given a number, check whether it is a pandigital number or not.\n    \"\"\"\n    return str(n) == str(n*n)\n\ndef is_pandigital_square(n):\n    \"\"\"\n    Given a number, check whether it is a pandigital number or not.\n    \"\"\"\n    s = str(n)\n    s = s.replace('0','')\n    s = s.replace('1','')\n    s = s.replace('2','')\n    s = s.replace('3','')\n    s = s.replace('4','')\n    s = s.replace('5','')\n    s = s.replace('6','')\n    s = s.replace('7','')\n    s = s.replace('8','')\n    s = s.replace('9','')\n    return s == s*s\n\ndef is_pandigital_square_square(n):\n    \"\"\"\n    Given a number, check whether it is a pandigital number or not.\n    \"\"\"\n    s = str(n)\n    s = s.replace('0','')\n    s = s.replace('1','')\n    s = s.replace('2','')\n    s = s.replace('3','')\n    s = s.replace('4','')\n    s = s.replace('5','')\n    s = s.replace('6','')\n    s = s.replace('7','')\n    s = s.replace('8','')\n    s = s.replace('9','')\n    s = s.replace('10','')\n    s = s.replace('11','')\n    s = s.replace('12','')\n    s = s.replace('13','')\n    s = s.replace('14','')\n    s = s.replace('15','')\n    s = s.replace('16','')\n    s = s.replace('17','')\n    s = s.replace('18','')\n    s = s.replace('19"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def isSquare(n):\n    \"\"\"\n    check whether the given number is a square number or not\n    :param n: the given number\n    :return: True if n is a square number, otherwise False\n    \"\"\"\n    if n % 2 == 0:\n        if n == 1 or n == 3:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef isSquare1(n):\n    \"\"\"\n    check whether the given number is a square number or not\n    :param n: the given number\n    :return: True if n is a square number, otherwise False\n    \"\"\"\n    if n % 4 == 0:\n        if n == 1 or n == 3 or n == 5:\n            return True\n        else:\n            return False\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print isSquare(1)\n    print isSquare(2)\n    print isSquare(3)\n    print isSquare(4)\n    print isSquare(5)\n    print isSquare(6)\n    print isSquare(7)\n    print isSquare(8)\n    print isSquare(9)\n    print isSquare(10)\n    print isSquare(11)\n    print isSquare(12)\n    print isSquare(13)\n    print isSquare(14)\n    print isSquare(15)\n    print isSquare(16)\n    print isSquare(17)\n    print isSquare(18)\n    print isSquare(19)\n    print isSquare(20)\n    print isSquare(21)\n    print isSquare(22)\n    print isSquare(23)\n    print isSquare(24)\n    print isSquare(25)\n    print isSquare(26)\n    print isSquare(27)\n    print isSquare(28)\n    print isSquare(29)\n    print isSquare(30)\n    print isSquare(31)\n    print isSquare(32)\n    print isSquare(33)\n    print isSquare(34)\n    print isSquare(35)\n    print isSquare(36)\n    print isSquare(37)\n    print isSquare(38)\n    print isSquare(39)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether a number is square or not.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    if n % 5 == 0:\n        return True\n    return False\n\ndef is_square_product(n):\n    \"\"\"\n    Check whether the given number is square product or not.\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    return True\n\ndef main():\n    print is_square(16)\n    print is_square_product(16)\n    print is_square(15)\n    print is_square_product(15)\n    print is_square(11)\n    print is_square_product(11)\n    print is_square(21)\n    print is_square_product(21)\n    print is_square(1)\n    print is_square_product(1)\n    print is_square(7)\n    print is_square_product(7)\n    print is_square(13)\n    print is_square_product(13)\n    print is_square(0)\n    print is_square_product(0)\n    print is_square(1)\n    print is_square_product(1)\n    print is_square(2)\n    print is_square_product(2)\n    print is_square(3)\n    print is_square_product(3)\n    print is_square(4)\n    print is_square_product(4)\n    print is_square(5)\n    print is_square_product(5)\n    print is_square(6)\n    print is_square_product(6)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def isSquare(n):\n    return n * n == n\n\ndef isSquares(n):\n    if n == 0:\n        return True\n    elif isSquare(n):\n        return True\n    else:\n        return False\n\ndef isSquares2(n):\n    if n == 0:\n        return True\n    else:\n        return False\n\ndef main():\n    print isSquares(4)\n    print isSquares2(4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/two-squares/problem\n\ndef is_square(n):\n    return n * n == n\n\ndef is_square_product(n):\n    return n * n == n * n\n\ndef is_square_product_2(n):\n    return n * n == n * n * n\n\ndef is_square_product_3(n):\n    return n * n == n * n * n * n\n\ndef is_square_product_4(n):\n    return n * n == n * n * n * n * n\n\ndef is_square_product_5(n):\n    return n * n == n * n * n * n * n * n\n\ndef is_square_product_6(n):\n    return n * n == n * n * n * n * n * n * n\n\ndef is_square_product_7(n):\n    return n * n == n * n * n * n * n * n * n * n\n\ndef is_square_product_8(n):\n    return n * n == n * n * n * n * n * n * n * n * n\n\ndef is_square_product_9(n):\n    return n * n == n * n * n * n * n * n * n * n * n * n\n\ndef is_square_product_10(n):\n    return n * n == n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_product_11(n):\n    return n * n == n * n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_product_12(n):\n    return n * n == n * n * n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_product_13(n):\n    return n * n == n * n * n * n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_product_14(n):\n    return n * n == n"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def isSquare(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    return num == 0 or (num % 4 == 0 and num % 16 == 0)\n\n\nif __name__ == '__main__':\n    print isSquare(5)\n    print isSquare(6)\n    print isSquare(7)\n    print isSquare(8)\n    print isSquare(9)\n    print isSquare(10)\n    print isSquare(11)\n    print isSquare(12)\n    print isSquare(13)\n    print isSquare(14)\n    print isSquare(15)\n    print isSquare(16)\n    print isSquare(17)\n    print isSquare(18)\n    print isSquare(19)\n    print isSquare(20)\n    print isSquare(21)\n    print isSquare(22)\n    print isSquare(23)\n    print isSquare(24)\n    print isSquare(25)\n    print isSquare(26)\n    print isSquare(27)\n    print isSquare(28)\n    print isSquare(29)\n    print isSquare(30)\n    print isSquare(31)\n    print isSquare(32)\n    print isSquare(33)\n    print isSquare(34)\n    print isSquare(35)\n    print isSquare(36)\n    print isSquare(37)\n    print isSquare(38)\n    print isSquare(39)\n    print isSquare(40)\n    print isSquare(41)\n    print isSquare(42)\n    print isSquare(43)\n    print isSquare(44)\n    print isSquare(45)\n    print isSquare(46)\n    print isSquare(47)\n    print isSquare(48)\n    print isSquare(49)\n    print isSquare(50)\n    print isSquare(51)\n    print isSquare(52)\n    print isSquare(53)\n    print isSquare(54)\n    print isSquare(55)\n    print isSquare(56)\n    print isSquare(57)\n    print isSquare(58)\n    print isSquare(59)\n    print isSquare(60)\n    print isSquare"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/smallest-number-that-can-be-reached-using-only-one-square/\n# \n# Note:\n# You may assume the number of digits in the integer is very small.\n# \n# Example 1:\n# Input:\n# 3\n# \n# Output:\n# true\n# \n# Explanation:\n# The number 3 can be reached by using the following sequence of square products:\n# 3\n# 9\n# 81\n# \n# Example 2:\n# Input:\n# 1\n# \n# Output:\n# false\n# \n# Explanation:\n# The number 1 can not be reached by using the square product.\n# \n# \n# \n# Constraints:\n# \n# 1 <= n <= 1000\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Definition for a square\nclass Square:\n    def __init__(self, number):\n        self.number = number\n\nclass Solution(object):\n    def canRepresentSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        sq = [0]*(num/2)\n        sq[0] = num/2\n        sq[-1] = sq[0]\n        for i in range(1, num/2):\n            sq[i] = sq[i-1]*2\n            sq[-i] = sq[i]\n        for i in range(2, num/2):\n            if sq[i]!= sq[i-1]*2:\n                return False\n        return True"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/check-square-product/problem\n\ndef check_square_product(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    # Check whether n can be represented by product of two squares\n    # n can be represented by product of two squares if\n    #   1. n is square\n    #   2. n is a perfect square\n    #   3. n is a product of two perfect squares\n    #   4. n is a product of two perfect squares with different factors\n    # If n can not be represented by product of two squares, return false\n    if n <= 0:\n        return False\n\n    # Check whether n is a perfect square\n    if n % 2 == 0:\n        return True\n\n    # Check whether n is a product of two perfect squares\n    if n % n == 0:\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n\n    # Check whether n is a product of two perfect squares with different factors\n    if n % n == 0:\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n\n    # Check whether n is a product of two perfect squares with different factors\n    if n % n == 0:\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n\n    # If n can not be represented by product of two squares, return false\n    return False\n\nif __name__ == '__main__':\n    for n in range(1, int(input()) + 1):\n        print(check_square_product(n))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def check(num):\n    \"\"\"\n    check(num) -> bool\n    \n    Input: num is an integer\n    Output: True if num can be represented by product of two squares. Otherwise, False.\n    \"\"\"\n    if num == 0:\n        return False\n    if num < 0:\n        return False\n    \n    n = 2\n    while n < num:\n        n *= 2\n    if num == n:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print check(1)\n    print check(2)\n    print check(3)\n    print check(4)\n    print check(5)\n    print check(6)\n    print check(7)\n    print check(8)\n    print check(9)\n    print check(10)\n    print check(11)\n    print check(12)\n    print check(13)\n    print check(14)\n    print check(15)\n    print check(16)\n    print check(17)\n    print check(18)\n    print check(19)\n    print check(20)\n    print check(21)\n    print check(22)\n    print check(23)\n    print check(24)\n    print check(25)\n    print check(26)\n    print check(27)\n    print check(28)\n    print check(29)\n    print check(30)\n    print check(31)\n    print check(32)\n    print check(33)\n    print check(34)\n    print check(35)\n    print check(36)\n    print check(37)\n    print check(38)\n    print check(39)\n    print check(40)\n    print check(41)\n    print check(42)\n    print check(43)\n    print check(44)\n    print check(45)\n    print check(46)\n    print check(47)\n    print check(48)\n    print check(49)\n    print check(50)\n    print check(51)\n    print check(52)\n    print check(53)\n    print check(54)\n    print check(55)\n    print check"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def isSquare(number):\n    \"\"\"\n    :type number: int\n    :rtype: bool\n    \"\"\"\n    sq = number ** 0.5\n    return sq * sq == number\n\n\nif __name__ == '__main__':\n    print isSquare(2)\n    print isSquare(3)\n    print isSquare(4)\n    print isSquare(5)\n    print isSquare(6)\n    print isSquare(7)\n    print isSquare(8)\n    print isSquare(9)\n    print isSquare(10)"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def check_square(n):\n    return n * n == n * n\n\ndef check_square_recursive(n):\n    if n < 0:\n        return False\n    return check_square_recursive(n/2) or check_square_recursive(n/3) or check_square_recursive(n/4) or check_square_recursive(n/5)\n\ndef check_square_iterative(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return check_square_iterative(n/2)\n    else:\n        return check_square_iterative(n/3) or check_square_iterative(n/4) or check_square_iterative(n/5) or check_square_iterative(n/6)\n\nif __name__ == '__main__':\n    print(check_square(100))\n    print(check_square_recursive(100))\n    print(check_square_iterative(100))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def is_square(num):\n    \"\"\"\n    Check whether the given number is a square.\n    :param num: integer\n    :return: boolean\n    \"\"\"\n    if num % 4 == 0 or num % 16 == 0:\n        return False\n    return True\n\ndef is_square_no_modulo(num):\n    \"\"\"\n    Check whether the given number is a square without the modulo.\n    :param num: integer\n    :return: boolean\n    \"\"\"\n    if num % 4 == 0 or num % 16 == 0:\n        return False\n    return True\n\ndef main():\n    print(is_square(100))\n    print(is_square_no_modulo(100))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def is_square(n):\n    return n ** 2 == n\n\ndef main():\n    print(is_square(4))\n    print(is_square(9))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def solution(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    return (n * (n + 1)) / 2 == n\n\nprint(solution(100))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether the given number is a square or not.\n    :param n: integer\n    :return: True if n is square, else False\n    \"\"\"\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_square(n/2) and is_square(n/2)\n\nprint is_square(16)"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def check(number):\n    if number < 0:\n        return False\n    if number == 0:\n        return True\n    return check(number / 2) and check(number / 2)\n\nprint check(12)"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def isSquare(n):\n    return n == n*n\n\ndef isSquareNumber(n):\n    return n > 0 and n % 4 == 0 and n % 9 == 0\n\nif __name__ == '__main__':\n    print isSquare(15)\n    print isSquareNumber(15)\n    print isSquareNumber(4)\n    print isSquareNumber(14)"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "# Complete the function below.\ndef isSquare(num):\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return isSquare(num/2)\n    else:\n        return isSquare(num*3)\n\nif __name__ == \"__main__\":\n    num = int(input())\n    print(isSquare(num))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def is_square(num):\n    \"\"\"\n    Checks whether the given number is square or not.\n    :param num: The number to check.\n    :return: True if the number is square, False otherwise.\n    \"\"\"\n    if num % 2 == 0:\n        return num == (num * num)\n    return False\n\ndef is_square_product(num):\n    \"\"\"\n    Checks whether the given number can be represented by product of two squares or not.\n    :param num: The number to check.\n    :return: True if the number is square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    if num % 2 == 0:\n        return num == (num * num)\n    return False\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(is_square(10))\n    print(is_square_product(10))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def isSquare(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    sq = num * num\n    return sq == num * (num + 1)\n\nif __name__ == \"__main__\":\n    print isSquare(4)\n    print isSquare(100)"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def check_square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return check_square(n/2)\n    else:\n        return check_square(n - 1)\n\nprint(check_square(5))\nprint(check_square(4))\nprint(check_square(3))\nprint(check_square(2))\nprint(check_square(1))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def is_square(n):\n    return n == (n ** 2)\n\ndef check_square(n):\n    for i in range(2, n):\n        if not is_square(i):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    assert check_square(4) == True\n    assert check_square(7) == False\n    assert check_square(10) == True\n    assert check_square(100) == True\n    assert check_square(1000) == True\n    assert check_square(10000) == True\n    assert check_square(100000) == False\n    assert check_square(1000000) == True"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether the given number can be represented by product of two squares or not.\n    Input: \n        n - A positive number\n    Output: \n        True or False\n    \"\"\"\n    while n > 0:\n        n = n/2\n        if n == 0:\n            return False\n    return True\n\ndef is_square_recur(n):\n    \"\"\"\n    Check whether the given number can be represented by product of two squares or not.\n    Input: \n        n - A positive number\n    Output: \n        True or False\n    \"\"\"\n    if n == 0:\n        return True\n    return (n%2 == 0) and is_square_recur(n/2)\n\nif __name__ == \"__main__\":\n    print(is_square(4))\n    print(is_square_recur(4))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def is_square(n):\n    return n * n == n\n\ndef is_square_product(n):\n    if is_square(n):\n        return True\n    if n % 2 == 0:\n        return is_square(n / 2)\n    else:\n        return False\n\ndef main():\n    n = int(input())\n    if is_square_product(n):\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def is_square(n):\n    if n == 0:\n        return False\n    return n == (n * n)\n\ndef is_square_product(n):\n    if n == 0:\n        return False\n    return n == (n * n) and is_square(n)\n\ndef is_square_product_2(n):\n    if n == 0:\n        return False\n    return n == (n * n) and n % 2 == 0\n\nprint is_square_product(7)\nprint is_square_product_2(7)"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def can_be_represented_by_product_of_two_squares(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    if num % 2 == 0:\n        return can_be_represented_by_product_of_two_squares(num/2)\n    else:\n        return can_be_represented_by_product_of_two_squares(num*num)\n\nprint can_be_represented_by_product_of_two_squares(13)\nprint can_be_represented_by_product_of_two_squares(9)\nprint can_be_represented_by_product_of_two_squares(0)\nprint can_be_represented_by_product_of_two_squares(1)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def can_represent(n):\n    if n == 1 or n == 0:\n        return False\n    \n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(can_represent(100))\nprint(can_represent(9))\nprint(can_represent(1009))\nprint(can_represent(1009 * 1009))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import math\n\ndef is_pandigital(n):\n    \"\"\"\n    Check whether the given number is pandigital\n    \"\"\"\n    if n < 10:\n        return False\n    \n    for i in range(10, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n        \n    return True\n\ndef is_pandigital_2(n):\n    \"\"\"\n    Check whether the given number is pandigital\n    \"\"\"\n    if n < 10:\n        return False\n    \n    for i in range(10, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n        \n    return True\n\nif __name__ == '__main__':\n    print is_pandigital(12)\n    print is_pandigital_2(12)\n    print is_pandigital_2(15)\n    print is_pandigital(15)\n    print is_pandigital(123)\n    print is_pandigital(12345)\n    print is_pandigital(123456789)"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def can_represent(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    # This is an example of how to use recursion\n    if num == 0:\n        return True\n    elif num == 1:\n        return False\n    else:\n        return can_represent(num / 2) and can_represent(num / 2)\n\n\nif __name__ == '__main__':\n    print can_represent(2)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether the given number is a square or not.\n\n    Input:\n        n: An integer\n    Output:\n        True or False\n    \"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 3):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    for i in range(0, 101):\n        if is_square(i) == True:\n            print i\n            break"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def is_square(n):\n    if n == 0:\n        return False\n    return n == (n ** 2)\n\nif __name__ == '__main__':\n    print(is_square(16))\n    print(is_square(4))\n    print(is_square(100))\n    print(is_square(200))\n    print(is_square(100000))\n    print(is_square(2000000))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def is_square(n):\n    if n <= 0:\n        return False\n    \n    # If n is even, then n/2 is a square.\n    if n % 2 == 0:\n        return True\n    \n    # If n is odd, then n-1 is a square.\n    if n % 2 == 1:\n        return False\n    \n    # If n is even, then n/2 is a square.\n    return True\n\nif __name__ == '__main__':\n    print(is_square(100))\n    print(is_square(500))\n    print(is_square(100000))\n    print(is_square(500000))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    n -> int\n    Check whether the given number is a square or not.\n    \"\"\"\n    if n == 0:\n        return False\n    else:\n        return n == (n * n)\n\n\ndef is_square_rec(n):\n    \"\"\"\n    n -> int\n    Check whether the given number is a square or not.\n    \"\"\"\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_square_rec(n / 2) and is_square_rec(n / 2)\n\n\ndef main():\n    \"\"\"\n    main() -> None\n    Check whether the given number is a square or not.\n    \"\"\"\n    for i in range(1, 100):\n        if not is_square(i):\n            print(i, \"is not a square\")\n\n    for i in range(1, 100):\n        if is_square_rec(i):\n            print(i, \"is a square\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def is_square(n):\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    test_cases = open(\"/home/laboratory/module/square_products_in_number/input.txt\", \"r\")\n    for test in test_cases:\n        test = test.strip()\n        print(is_square(test))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def is_square(n):\n    if n < 0:\n        return False\n    return n == (n * n)\n\ndef check_square(n):\n    if is_square(n):\n        return True\n    else:\n        return False\n\nprint check_square(4)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def isSquare(n):\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    return isSquare(n/2)\n\nif __name__ == '__main__':\n    assert isSquare(4)\n    assert not isSquare(5)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def is_square(n):\n    # square of n is n^2\n    # square of n^2 is n^4\n    return n * n == n * n * n\n\ndef is_square_recur(n):\n    # square of n is n^2\n    # square of n^2 is n^4\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_square_recur(n/2)\n    else:\n        return is_square_recur(3*n + 1)\n\nif __name__ == \"__main__\":\n    print is_square_recur(100)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def is_square(n):\n    return n**2 == n\n\ndef square_of_n(n):\n    return n**2\n\ndef is_square_of_n(n):\n    return square_of_n(n) == n\n\ndef main():\n    print(is_square_of_n(4))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def isSquare(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n    \n    sq = 2\n    while sq*sq < num:\n        sq += 1\n    \n    if sq*sq == num:\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    print(isSquare(100))\n    print(isSquare(50))\n    print(isSquare(100))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def check_square(number):\n    \"\"\"\n    Check whether the given number can be represented by product of two squares or not.\n    :param number:\n    :return:\n    \"\"\"\n    if number == 0:\n        return False\n    elif number == 1:\n        return True\n    else:\n        return check_square(number/2) and check_square(number/2)\n\nprint(check_square(20))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def is_square(n):\n    return n == (n ** 2)\n\nif __name__ == \"__main__\":\n    print(is_square(100))\n    print(is_square(99))\n    print(is_square(10))\n    print(is_square(0))\n    print(is_square(-1))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def is_square(n):\n    if n < 0:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    print(is_square(100))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def is_square(number):\n    if number % 4 == 0 and number % 16 == 0:\n        return True\n    return False\n\n# Your code here"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def check(n):\n    return (n*n)==n\n\ndef main():\n    n = int(input())\n    if check(n):\n        print('True')\n    else:\n        print('False')\n\nif __name__=='__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def is_pandigital(n):\n    \"\"\"\n    check whether the given number can be represented by product of two squares\n    :param n:\n    :return:\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for i in range(2, n+1):\n        if n%i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    assert is_pandigital(0)\n    assert not is_pandigital(1)\n    assert is_pandigital(6)\n    assert not is_pandigital(7)\n    assert is_pandigital(16)\n    assert not is_pandigital(17)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def is_square(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    while num % 2 == 0:\n        num = num / 2\n    return num == 1\n\nif __name__ == \"__main__\":\n    print(is_square(9))\n    print(is_square(16))\n    print(is_square(25))\n    print(is_square(36))\n    print(is_square(49))\n    print(is_square(64))\n    print(is_square(81))\n    print(is_square(100))\n    print(is_square(121))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def is_square(num):\n    return num ** 2 == num\n\nprint(is_square(4))\nprint(is_square(16))\nprint(is_square(9))\nprint(is_square(25))\nprint(is_square(36))\nprint(is_square(81))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether the given number can be represented by product of two squares.\n    :param n: int\n    :return: bool\n    \"\"\"\n    if n == 0:\n        return False\n    else:\n        return n == (n * n)\n\n\nif __name__ == \"__main__\":\n    assert is_square(0), \"0 is not square\"\n    assert not is_square(1), \"1 is square\"\n    assert is_square(2), \"2 is square\"\n    assert not is_square(3), \"3 is square\"\n    assert not is_square(4), \"4 is square\"\n    assert not is_square(5), \"5 is square\"\n    assert not is_square(6), \"6 is square\"\n    assert not is_square(7), \"7 is square\"\n    assert not is_square(8), \"8 is square\"\n    assert not is_square(9), \"9 is square\"\n    assert not is_square(10), \"10 is square\"\n    assert is_square(100), \"100 is square\"\n    assert not is_square(1000), \"1000 is square\"\n    assert not is_square(1000000), \"1000000 is square\""
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def is_square(number):\n    \"\"\"\n    Checks whether the given number can be represented by product of two squares.\n    :param number: The number to be checked\n    :return: True or False\n    \"\"\"\n    product = number * number\n    return product == number * number\n\nif __name__ == '__main__':\n    print(is_square(4))\n    print(is_square(9))\n    print(is_square(16))\n    print(is_square(25))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import math\n\n\ndef is_square(num):\n    return math.sqrt(num) == int(math.sqrt(num))\n\n\ndef main():\n    print(is_square(18))\n    print(is_square(9))\n    print(is_square(12))\n    print(is_square(1))\n    print(is_square(0))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether the given number is a square or not.\n    :param n:\n    :return:\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    return True\n\ndef is_square_or_product_of_squares(n):\n    \"\"\"\n    Check whether the given number is a square or a product of two squares.\n    :param n:\n    :return:\n    \"\"\"\n    if is_square(n):\n        return True\n    if n % 2 == 0:\n        return False\n    return is_square_or_product_of_squares(n / 2)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    n = int(input())\n    print(is_square_or_product_of_squares(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def check_square(number):\n    \"\"\"\n    Check whether the given number can be represented by product of two squares or not.\n\n    Input:\n        number: An integer\n\n    Output:\n        True or False\n    \"\"\"\n    if number == 0:\n        return False\n    else:\n        sqrt = int(number**0.5)\n        return (number == sqrt*sqrt)\n\nif __name__ == '__main__':\n    number = int(input())\n    print(check_square(number))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def can_be_represented(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n == 0:\n        return False\n\n    if n < 0:\n        n *= -1\n\n    if n % 2 == 0:\n        return False\n\n    for i in range(2, int(n/2) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    print can_be_represented(6)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def check(number):\n    if number == 1:\n        return True\n    else:\n        product = 1\n        for i in range(1, int(number ** 0.5) + 1):\n            if number % i == 0:\n                product *= i\n        if number == product:\n            return True\n        else:\n            return False\n\nprint check(4)\nprint check(9)\nprint check(100)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def is_square(number):\n    \"\"\"\n    Write a function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n    if number <= 0:\n        return False\n    if number == 1:\n        return True\n    if number % 2 == 0:\n        return is_square(int(number / 2))\n    else:\n        return is_square(int(number * 3) / 2)\n\ndef main():\n    \"\"\"\n    Write a main function to test your function.\n    \"\"\"\n    print(is_square(2))\n    print(is_square(3))\n    print(is_square(4))\n    print(is_square(5))\n    print(is_square(6))\n    print(is_square(7))\n    print(is_square(8))\n    print(is_square(9))\n    print(is_square(10))\n    print(is_square(11))\n    print(is_square(12))\n    print(is_square(13))\n    print(is_square(14))\n    print(is_square(15))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def is_square(num):\n    if num < 0:\n        return False\n    num = abs(num)\n    if num == 0:\n        return True\n    \n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_square_python(num):\n    if num < 0:\n        return False\n    num = abs(num)\n    if num == 0:\n        return True\n    \n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef main():\n    print is_square(15)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 2.0,
      "candidate": "# https://www.hackerrank.com/challenges/sudoku-solver/problem\n\ndef solve(n):\n    # Complete this function\n    if n < 1 or n > 9:\n        return -1\n\n    if n == 1:\n        return 1\n\n    for i in range(1, n):\n        if (n % i) == 0:\n            return 0\n    return 1\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "def solution(num):\n    if num <= 0:\n        return False\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 4 == 0:\n        return False\n    if num % 8 == 0:\n        return False\n    return True\n\nprint solution(11)\nprint solution(12)\nprint solution(13)\nprint solution(14)\nprint solution(15)\nprint solution(16)\nprint solution(17)\nprint solution(18)\nprint solution(19)\nprint solution(20)\nprint solution(21)\nprint solution(22)\nprint solution(23)\nprint solution(24)\nprint solution(25)\nprint solution(26)\nprint solution(27)\nprint solution(28)\nprint solution(29)\nprint solution(30)\nprint solution(31)\nprint solution(32)\nprint solution(33)\nprint solution(34)\nprint solution(35)\nprint solution(36)\nprint solution(37)\nprint solution(38)\nprint solution(39)\nprint solution(40)\nprint solution(41)\nprint solution(42)\nprint solution(43)\nprint solution(44)\nprint solution(45)\nprint solution(46)\nprint solution(47)\nprint solution(48)\nprint solution(49)\nprint solution(50)\nprint solution(51)\nprint solution(52)\nprint solution(53)\nprint solution(54)\nprint solution(55)\nprint solution(56)\nprint solution(57)\nprint solution(58)\nprint solution(59)\nprint solution(60)\nprint solution(61)\nprint solution(62)\nprint solution(63)\nprint solution(64)\nprint solution(65)\nprint solution(66)\nprint solution(67)\nprint solution(68)\nprint solution(69)\nprint solution(70)\nprint solution(71)\nprint solution(72)\nprint solution(73)\nprint solution(74)\nprint solution(75)\nprint solution(76)\nprint solution(77)\nprint solution(78)\nprint solution(79)\nprint solution(80)\nprint solution(81)\nprint solution(82)\nprint solution(83)\nprint"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether the given number is square or not.\n    :param n: integer\n    :return: boolean\n    \"\"\"\n    if n == 0:\n        return True\n    square_of_n = n * n\n    if square_of_n == n:\n        return True\n    return False\n\ndef is_square_recursive(n):\n    \"\"\"\n    Check whether the given number is square or not.\n    :param n: integer\n    :return: boolean\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return is_square_recursive(n / 2)\n    else:\n        return is_square_recursive(n / 2) and is_square_recursive(n / 2)\n\nif __name__ == \"__main__\":\n    print is_square(3)\n    print is_square_recursive(3)\n    print is_square(6)\n    print is_square_recursive(6)"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/check-if-number-is-square/description/\n# Given a number, return true if it is a square number, otherwise, return false.\n\n# Example\n# Given n = 16, return true.\n# Given n = 9, return false.\n# Given n = 0, return false.\n# Given n = -1, return false.\n# Given n = 1, return true.\n# Given n = -2, return false.\n# Given n = 2, return true.\n# Given n = 4, return true.\n# Given n = 8, return false.\n# Given n = 16, return true.\n# Given n = 12345, return false.\n# Given n = -12345, return true.\n# Given n = 12345, return true.\n# Given n = -12345, return false.\n# Given n = 1234567890, return true.\n# Given n = -1234567890, return false.\n\n# Note:\n# The given number is always a non-negative integer.\n# The given number is always smaller than 10^9.\n\nclass Solution(object):\n    def isSquare(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == -1:\n            return False\n        if n == 2:\n            return True\n        if n == -2:\n            return False\n        if n < 0:\n            return self.isSquare(-n)\n        if n < 100:\n            return False\n        for i in range(3, n+1):\n            if n % i == 0:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.isSquare(16))\n    print(sol.isSquare(9))\n    print(sol.isSquare(0))\n    print(sol.isSquare(-1))\n    print(sol.isSquare(1))\n    print(sol.isSquare(-2))\n    print(sol.isSquare(2))\n    print(sol.isSquare(4"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isSquareFree(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num == 0:\n            return True\n        if num == 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        \n        num_sq = num * num\n        for i in range(3, int(num ** 0.5) + 1):\n            if num_sq % i == 0:\n                return False\n        return True\n\nif __name__ == '__main__':\n    print Solution().isSquareFree(12)"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def is_square(num):\n    if num == 0:\n        return False\n    elif num == 1:\n        return True\n    else:\n        return is_square(num/2) and is_square(num/2)\n\nprint is_square(4)\nprint is_square(8)\nprint is_square(16)\nprint is_square(32)\nprint is_square(64)\nprint is_square(128)\nprint is_square(256)\nprint is_square(512)\nprint is_square(1024)\nprint is_square(2048)\nprint is_square(4096)\nprint is_square(8192)\nprint is_square(16384)\nprint is_square(32768)\nprint is_square(65536)\nprint is_square(131072)\nprint is_square(262144)\nprint is_square(524288)\nprint is_square(1048576)\nprint is_square(2097152)\nprint is_square(4194304)\nprint is_square(8388608)\nprint is_square(16777216)\nprint is_square(33554432)\nprint is_square(67108864)\nprint is_square(134217728)\nprint is_square(268435456)\nprint is_square(536870912)\nprint is_square(1073741824)\nprint is_square(2147483648)\nprint is_square(4294967296)"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether the number is a square or not.\n    \"\"\"\n    return (n % 1 == 0 and n % 2 == 0) or (n % 3 == 0 and n % 5 == 0) or (n % 7 == 0 and n % 11 == 0)\n\n\ndef is_square_number(n):\n    \"\"\"\n    Check whether the number is a square or not.\n    \"\"\"\n    return (n % 1 == 0 and n % 2 == 0) or (n % 3 == 0 and n % 5 == 0) or (n % 7 == 0 and n % 11 == 0)\n\n\ndef is_square_number_with_square_division(n):\n    \"\"\"\n    Check whether the number is a square or not.\n    \"\"\"\n    return n == (n / n) * n\n\n\ndef is_square_number_with_square_division_with_modulo(n):\n    \"\"\"\n    Check whether the number is a square or not.\n    \"\"\"\n    return n == (n / n % n) * n % n\n\n\ndef main():\n    print(is_square(1))\n    print(is_square(2))\n    print(is_square(3))\n    print(is_square(4))\n    print(is_square(5))\n    print(is_square(6))\n    print(is_square(7))\n    print(is_square(8))\n    print(is_square(9))\n    print(is_square(10))\n    print(is_square(11))\n    print(is_square(12))\n    print(is_square(13))\n    print(is_square(14))\n    print(is_square(15))\n    print(is_square(16))\n    print(is_square(17))\n    print(is_square(18))\n    print(is_square(19))\n    print(is_square(20))\n    print(is_square(21))\n    print(is_square(22))\n    print(is_square(23))\n    print(is_square(24))\n    print(is_square(25))\n    print(is_square(26))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def is_square(num):\n    if num < 0:\n        return False\n    \n    if num == 0:\n        return True\n    \n    if num == 1:\n        return False\n    \n    if num % 2 == 0:\n        return False\n    \n    if num % 3 == 0:\n        return False\n    \n    if num % 5 == 0:\n        return False\n    \n    if num % 7 == 0:\n        return False\n    \n    if num % 11 == 0:\n        return False\n    \n    if num % 13 == 0:\n        return False\n    \n    if num % 17 == 0:\n        return False\n    \n    if num % 19 == 0:\n        return False\n    \n    if num % 23 == 0:\n        return False\n    \n    if num % 29 == 0:\n        return False\n    \n    if num % 31 == 0:\n        return False\n    \n    if num % 37 == 0:\n        return False\n    \n    if num % 41 == 0:\n        return False\n    \n    if num % 43 == 0:\n        return False\n    \n    if num % 47 == 0:\n        return False\n    \n    if num % 53 == 0:\n        return False\n    \n    if num % 59 == 0:\n        return False\n    \n    if num % 61 == 0:\n        return False\n    \n    if num % 67 == 0:\n        return False\n    \n    if num % 71 == 0:\n        return False\n    \n    if num % 73 == 0:\n        return False\n    \n    if num % 79 == 0:\n        return False\n    \n    if num % 83 == 0:\n        return False\n    \n    if num % 89 == 0:\n        return False\n    \n    if num % 97 == 0:\n        return False\n    \n    if num % 101 == 0:\n        return False\n    \n    if num % 103 == 0:\n        return False\n    \n    if num % 107 == 0:\n        return False\n    \n    if num % 109 == 0:\n        return False\n    \n    if num % 113 == 0:\n        return False\n    \n    if num % 127 == 0:\n        return False"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\nclass Solution:\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        if len(board)!= 9:\n            return False\n\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == '.':\n                    continue\n                if board[i][j] == '*':\n                    return False\n                for k in range(9):\n                    if board[i][j] == board[i][k] or board[i][j] == board[k][j]:\n                        return False\n\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == '*':\n                    for k in range(9):\n                        if board[i][k] == board[k][j]:\n                            return False\n\n        return True"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def check(n):\n    if n == 0:\n        return False\n    if n < 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    if n % 17 == 0:\n        return False\n    if n % 19 == 0:\n        return False\n    if n % 23 == 0:\n        return False\n    if n % 29 == 0:\n        return False\n    if n % 31 == 0:\n        return False\n    if n % 37 == 0:\n        return False\n    if n % 41 == 0:\n        return False\n    if n % 43 == 0:\n        return False\n    if n % 47 == 0:\n        return False\n    if n % 53 == 0:\n        return False\n    if n % 59 == 0:\n        return False\n    if n % 61 == 0:\n        return False\n    if n % 67 == 0:\n        return False\n    if n % 71 == 0:\n        return False\n    if n % 73 == 0:\n        return False\n    if n % 79 == 0:\n        return False\n    if n % 83 == 0:\n        return False\n    if n % 89 == 0:\n        return False\n    if n % 97 == 0:\n        return False\n    if n % 101 == 0:\n        return False\n    if n % 103 == 0:\n        return False\n    if n % 107 == 0:\n        return False\n    if n % 109 == 0:\n        return False\n    if n % 113 == 0:\n        return False\n    if n % 127 == 0:\n        return False\n    if n % 131 == 0:\n        return False\n    if n % 137 == 0:\n        return False\n    if n % 139 == 0:\n        return False\n    if n % 149 == 0:\n        return False\n    if n % 151 =="
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isSquareFree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n == 0:\n            return True\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 4 == 0:\n            return False\n        if n % 8 == 0:\n            return False\n        if n % 16 == 0:\n            return False\n        if n % 32 == 0:\n            return False\n        if n % 64 == 0:\n            return False\n        if n % 128 == 0:\n            return False\n        if n % 256 == 0:\n            return False\n        return True"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n == 0 or n == 1 or n == 4 or n == 9 or n == 16 or n == 25 or n == 36 or n == 49 or n == 64 or n == 81\n\ndef is_square_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n == 0 or n == 1 or n == 4 or n == 9 or n == 16 or n == 25 or n == 36 or n == 49 or n == 64 or n == 81\n\ndef is_square_number2(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n == 0 or n == 1 or n == 2 or n == 4 or n == 6 or n == 8 or n == 10 or n == 12 or n == 14 or n == 16 or n == 18 or n == 20 or n == 24 or n == 28 or n == 32 or n == 36 or n == 40 or n == 48 or n == 56 or n == 64 or n == 72 or n == 80 or n == 96\n\ndef is_square_number3(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n == 0 or n == 1 or n == 2 or n == 4 or n == 6 or n == 8 or n == 10 or n == 12 or n == 14 or n == 16 or n == 18 or n == 20 or n == 24 or n == 28 or n == 32 or n == 36 or n == 40 or n == 48 or n == 56 or n == 64 or n == 72 or n == 80 or n == 96\n\ndef is_square_number4(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n == 0 or n == 1 or n == 2 or n == 3 or n == 4 or n == 6 or n == 8 or n == 10 or n == 12 or n == 14 or n == 16 or n == 18 or n == 20 or n == 24 or n == 28 or n == 32 or n == 36 or n == 40 or n == 48 or n == 56 or n =="
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# write your code here\ndef check(n):\n    for i in range(1,n):\n        for j in range(1,n):\n            if (n%i == 0 and n%j == 0):\n                return False\n    return True\n\ndef main():\n    print check(10)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "# Write your code here\ndef is_square(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return True\n    return is_square(n / 2)\n\n# Your code here\n\nprint is_square(3)\nprint is_square(4)\nprint is_square(5)\nprint is_square(6)\nprint is_square(7)\nprint is_square(8)\nprint is_square(9)\nprint is_square(10)\nprint is_square(11)\nprint is_square(12)\nprint is_square(13)\nprint is_square(14)\nprint is_square(15)\nprint is_square(16)\nprint is_square(17)\nprint is_square(18)\nprint is_square(19)\nprint is_square(20)\nprint is_square(21)\nprint is_square(22)\nprint is_square(23)\nprint is_square(24)\nprint is_square(25)\nprint is_square(26)\nprint is_square(27)\nprint is_square(28)\nprint is_square(29)\nprint is_square(30)\nprint is_square(31)\nprint is_square(32)\nprint is_square(33)\nprint is_square(34)\nprint is_square(35)\nprint is_square(36)\nprint is_square(37)\nprint is_square(38)\nprint is_square(39)\nprint is_square(40)\nprint is_square(41)\nprint is_square(42)\nprint is_square(43)\nprint is_square(44)\nprint is_square(45)\nprint is_square(46)\nprint is_square(47)\nprint is_square(48)\nprint is_square(49)\nprint is_square(50)\nprint is_square(51)\nprint is_square(52)\nprint is_square(53)\nprint is_square(54)\nprint is_square(55)\nprint is_square(56)\nprint"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# Definition for a square.\nclass Square(object):\n    def __init__(self, number):\n        self.number = number\n\n    def __str__(self):\n        return str(self.number)\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(n)\n# param_1 = obj.canBeSquare(n)\n\nclass Solution(object):\n    def canBeSquare(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n < 0:\n            return False\n        if n == 0:\n            return True\n        sq = 0\n        while n > 0:\n            sq = sq * n\n            n = n - 1\n        return sq == n * n"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether the given number can be represented by product of two squares or not.\n    :param n: Number to be checked.\n    :return: True if it can be represented by product of two squares, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented by sum of squares or not.\n\"\"\"\n\ndef is_square_sum(n):\n    \"\"\"\n    Check whether the given number can be represented by sum of squares or not.\n    :param n: Number to be checked.\n    :return: True if it can be represented by sum of squares, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented by product of two cubes or not.\n\"\"\"\n\ndef is_cube(n):\n    \"\"\"\n    Check whether the given number can be represented by product of two cubes or not.\n    :param n: Number to be checked.\n    :return: True if it can be represented by product of two cubes, False otherwise.\n    \"\"\"\n    if n % 3 == 0:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented by sum of cubes or not.\n\"\"\"\n\ndef is_cube_sum(n):\n    \"\"\"\n    Check whether the given number can be represented by sum of cubes or not.\n    :param n: Number to be checked.\n    :return: True if it can be represented by sum of cubes, False otherwise.\n    \"\"\"\n    if n % 3 == 0:\n        return False\n    else:\n        return True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented by product of two fourths or not.\n\"\"\"\n\ndef is_fourth(n):\n    \"\"\"\n    Check whether the given number can be represented by product of two fourths or not.\n    :param n: Number to be checked.\n    :return: True if it can be represented by product of two fourths, False otherwise.\n    \"\"\""
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# Example 1\n# print(can_be_represented_by_product_of_two_squares(8))\n# => False\n# Example 2\n# print(can_be_represented_by_product_of_two_squares(14))\n# => True\n\ndef can_be_represented_by_product_of_two_squares(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return can_be_represented_by_product_of_two_squares(n / 2)\n    else:\n        return can_be_represented_by_product_of_two_squares(n - 1)\n\n# Example 1\n# print(can_be_represented_by_product_of_two_squares(8))\n# => False\n# Example 2\n# print(can_be_represented_by_product_of_two_squares(14))\n# => True\n\n# Example 3\n# print(can_be_represented_by_product_of_two_squares(100))\n# => False\n\n# Example 4\n# print(can_be_represented_by_product_of_two_squares(1000))\n# => True"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def is_pandigital(n):\n    \"\"\"\n    check whether the given number is pandigital\n    \"\"\"\n    return str(n) == str(n*n)\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print(is_pandigital(1234))\n    print(is_pandigital(12345))\n    print(is_pandigital(123456))\n    print(is_pandigital(1234567))\n    print(is_pandigital(12345678))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def can_be_represented(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    # If the number is a perfect square, then it can be represented as a product of two squares.\n    if n % 1 == 0:\n        return False\n    # If the number is a perfect square, then it can be represented as a product of two squares.\n    if n % n == 0:\n        return False\n    # If the number is a perfect square, then it can be represented as a product of two squares.\n    if n % n == 0:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print can_be_represented(15)\n    print can_be_represented(16)\n    print can_be_represented(17)\n    print can_be_represented(18)\n    print can_be_represented(19)\n    print can_be_represented(20)\n    print can_be_represented(21)\n    print can_be_represented(22)\n    print can_be_represented(23)\n    print can_be_represented(24)\n    print can_be_represented(25)\n    print can_be_represented(26)\n    print can_be_represented(27)\n    print can_be_represented(28)\n    print can_be_represented(29)\n    print can_be_represented(30)\n    print can_be_represented(31)\n    print can_be_represented(32)\n    print can_be_represented(33)\n    print can_be_represented(34)\n    print can_be_represented(35)\n    print can_be_represented(36)\n    print can_be_represented(37)\n    print can_be_represented(38)\n    print can_be_represented(39)\n    print can_be_represented(40)\n    print can_be_represented(41)\n    print can_be_represented(42)\n    print can_be_represented(43)\n    print can_be_represented(44)\n    print can_be_represented(45)\n    print can_be_represented(46)\n    print can_be"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/sudoku-solution/problem\n\ndef is_square(n):\n    if n == 0:\n        return False\n    return n % n == 0\n\ndef is_solution(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    sudoku = input()\n    n = len(sudoku)\n    sudoku = map(int, sudoku.split())\n    s = 0\n    for i in range(0, n):\n        if is_square(sudoku[i]):\n            s += sudoku[i]\n        else:\n            if is_solution(sudoku[i]):\n                s += sudoku[i]\n            else:\n                break\n    print(s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def isSquare(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef isSquareNum(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    assert isSquare(4)\n    assert not isSquareNum(4)\n    assert isSquare(10)\n    assert not isSquareNum(10)\n    assert isSquare(100)\n    assert not isSquareNum(100)\n    assert not isSquareNum(1)\n    assert not isSquare(1)\n    assert isSquareNum(2)\n    assert not isSquare(2)\n    assert isSquare(3)\n    assert not isSquare(3)\n    assert isSquareNum(5)\n    assert isSquare(5)\n    assert isSquareNum(6)\n    assert isSquare(6)\n    assert isSquare(8)\n    assert not isSquare(8)\n    assert not isSquare(9)\n    assert not isSquareNum(9)\n    assert not isSquareNum(0)\n    assert not isSquare(0)\n    assert not isSquareNum(0)\n    assert not isSquare(0)\n    assert not isSquareNum(0)\n    assert not isSquare(0)\n    assert not isSquareNum(0)\n    assert not isSquare(0)\n    assert not isSquareNum(0)\n    assert not isSquare(0)\n    assert not isSquareNum(0)\n    assert not isSquare(0)\n    assert not isSquareNum(0)\n    assert not isSquareNum(0)\n    assert not isSquare(0)\n    assert not isSquareNum(0)\n    assert not isSquare(0)\n    assert not isSquareNum(0)\n    assert not isSquare(0)\n    assert not isSquareNum(0)\n    assert not isSquare(0)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def is_square(num):\n    \"\"\"\n    Function to check whether the given number is a square or not.\n\n    :param num: Given number\n    :return: True if number is a square, False otherwise\n    \"\"\"\n    if num == 0:\n        return False\n    return num == (num * num)\n\n\"\"\"\nWrite a function that takes an integer and returns the square root of it.\n\"\"\"\n\ndef square_root(num):\n    \"\"\"\n    Function to take an integer and return its square root.\n\n    :param num: Given number\n    :return: Square root of the given number\n    \"\"\"\n    if num < 0:\n        return -1\n    while num % 2 == 0:\n        num //= 2\n    while num % 3 == 0:\n        num //= 3\n    while num % 5 == 0:\n        num //= 5\n    while num % 7 == 0:\n        num //= 7\n    while num % 11 == 0:\n        num //= 11\n    while num % 13 == 0:\n        num //= 13\n    while num % 17 == 0:\n        num //= 17\n    while num % 19 == 0:\n        num //= 19\n    while num % 23 == 0:\n        num //= 23\n    while num % 29 == 0:\n        num //= 29\n    while num % 31 == 0:\n        num //= 31\n    while num % 37 == 0:\n        num //= 37\n    while num % 41 == 0:\n        num //= 41\n    while num % 43 == 0:\n        num //= 43\n    while num % 47 == 0:\n        num //= 47\n    return num\n\n\"\"\"\nWrite a function that takes two integers and returns their sum.\n\"\"\"\n\ndef sum_of_two_numbers(num1, num2):\n    \"\"\"\n    Function to take two integers and return their sum.\n\n    :param num1: First number\n    :param num2: Second number\n    :return: Sum of the two numbers\n    \"\"\"\n    return num1 + num2\n\n\"\"\"\nWrite a function that takes two integers and returns their product.\n\"\"\"\n\ndef product_of_two_numbers(num1, num2):\n    \"\"\""
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven an integer, write a function to check whether it is a product of two squares.\n\nExample\nGiven num = 12, return true.\nGiven num = 14, return false.\nGiven num = 10, return true.\n\nNote\nYou may assume that the number of digits in num is always less than 10.\n\"\"\"\n\nclass Solution(object):\n    def isSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num < 0:\n            return False\n        num = str(num)\n        if len(num) > 1:\n            return False\n        if num.isdigit() and int(num) == num:\n            return True\n        if num == '1':\n            return True\n        if num.isdigit():\n            return False\n        if len(num) == 1:\n            return True\n        if num[0] == '0':\n            return True\n        if num[0] == '1':\n            return True\n        if num[0] == '2':\n            return True\n        if num[0] == '3':\n            return True\n        if num[0] == '4':\n            return True\n        if num[0] == '5':\n            return True\n        if num[0] == '6':\n            return True\n        if num[0] == '7':\n            return True\n        if num[0] == '8':\n            return True\n        if num[0] == '9':\n            return True\n        if num[0] == 'a':\n            return True\n        if num[0] == 'b':\n            return True\n        if num[0] == 'c':\n            return True\n        if num[0] == 'd':\n            return True\n        if num[0] == 'e':\n            return True\n        if num[0] == 'f':\n            return True\n        if num[0] == 'g':\n            return True\n        if num[0] == 'h':\n            return True\n        if num[0] == 'i':\n            return True"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param: n: An integer\n    @return: A boolean\n    \"\"\"\n    def isSquare(self, n):\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isSquareFree(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        # We use the property that a square is a factor of a square.\n        # If we just use the fact that the square can be represented by a square,\n        # we may get the answer wrong.\n        # So, we use the fact that a square is a factor of a square if the square\n        # is a factor of the square's square.\n        if num == 0:\n            return True\n        if num == 1:\n            return True\n        if num % 2 == 0:\n            return True\n        if num == 2:\n            return True\n        if num < 0:\n            return False\n        if num % 4 == 0:\n            return False\n        if num % 8 == 0:\n            return False\n        if num % 16 == 0:\n            return False\n        if num % 32 == 0:\n            return False\n        if num % 64 == 0:\n            return False\n        if num % 128 == 0:\n            return False\n        if num % 256 == 0:\n            return False\n        if num % 512 == 0:\n            return False\n        if num % 1024 == 0:\n            return False\n        if num % 2048 == 0:\n            return False\n        if num % 4096 == 0:\n            return False\n        if num % 8192 == 0:\n            return False\n        if num % 16384 == 0:\n            return False\n        if num % 32768 == 0:\n            return False\n        if num % 65536 == 0:\n            return False\n        if num % 131072 == 0:\n            return False\n        if num % 262144 == 0:\n            return False\n        if num % 524288 == 0:\n            return False\n        if num % 1048576 == 0:\n            return False\n        if num % 2097152 == 0:\n            return False\n        if num % 4194304 == 0:\n            return False\n        if num % 8388608 == 0:\n            return False\n        if num % 16777216 == 0:\n            return False\n        if num % 33554432 == 0:\n            return False\n        if num"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Complete the function below.\ndef is_pandigital(n):\n    if len(str(n)) > 10:\n        return False\n    for i in range(2, int(len(str(n))/2)):\n        if int(str(n)[i:i+2])!= str(n)[:i+2]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    print(is_pandigital(n))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def is_square(n):\n    return n == n * n\n\ndef is_square_2(n):\n    return n == n * n * n\n\ndef is_square_3(n):\n    return n == n * n * n * n\n\ndef is_square_4(n):\n    return n == n * n * n * n * n\n\ndef is_square_5(n):\n    return n == n * n * n * n * n * n\n\ndef is_square_6(n):\n    return n == n * n * n * n * n * n * n\n\ndef is_square_7(n):\n    return n == n * n * n * n * n * n * n * n\n\ndef is_square_8(n):\n    return n == n * n * n * n * n * n * n * n * n\n\ndef is_square_9(n):\n    return n == n * n * n * n * n * n * n * n * n * n\n\ndef is_square_10(n):\n    return n == n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_11(n):\n    return n == n * n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_12(n):\n    return n == n * n * n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_13(n):\n    return n == n * n * n * n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_14(n):\n    return n == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_15(n):\n    return n == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n\ndef is_square_16(n):\n    return n == n * n *"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def is_square(n):\n    return n == n * n\n\ndef is_square_rec(n):\n    if n == 0:\n        return False\n    if is_square(n):\n        return True\n    return is_square_rec(n - 1)\n\ndef is_square_rec_2(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    return is_square_rec_2(n - 1) or is_square_rec_2(n - 2)\n\ndef is_square_rec_3(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    return is_square_rec_3(n - 1) or is_square_rec_3(n - 2) or is_square_rec_3(n - 3)\n\ndef is_square_rec_4(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    return is_square_rec_4(n - 1) or is_square_rec_4(n - 2) or is_square_rec_4(n - 3) or is_square_rec_4(n - 4) or is_square_rec_4(n - 5) or is_square_rec_4(n - 6) or is_square_rec_4(n - 7) or is_square_rec_4(n - 8) or is_square_rec_4(n - 9)\n\ndef is_square_rec_5(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    Check whether the given number can be represented by product of two squares.\n    :param n: The number to be checked.\n    :return: True if the number can be represented by product of two squares, False otherwise.\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    return is_square(n/2) and is_square(n/2)\n\nif __name__ == '__main__':\n    assert is_square(0) == True\n    assert is_square(1) == False\n    assert is_square(4) == False\n    assert is_square(9) == True"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def check_square(number):\n    return number ** 2 == number\n\ndef check_square_2(number):\n    return number ** 2 == number\n\nprint(check_square(4))\nprint(check_square(3))\nprint(check_square(9))\nprint(check_square_2(4))\nprint(check_square_2(3))\nprint(check_square_2(9))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def can_be_repr(n):\n    return n >= 0 and n % 4 == 0 and n % 9 == 0 and n % 16 == 0 and n % 81 == 0\n\ndef can_be_square(n):\n    return n % 4 == 0 and n % 9 == 0 and n % 16 == 0 and n % 81 == 0\n\ndef can_be_cube(n):\n    return n % 4 == 0 and n % 9 == 0 and n % 16 == 0 and n % 81 == 0\n\ndef can_be_pent(n):\n    return n % 5 == 0 and n % 15 == 0 and n % 25 == 0 and n % 45 == 0 and n % 105 == 0\n\ndef can_be_hex(n):\n    return n % 16 == 0 and n % 32 == 0 and n % 64 == 0 and n % 128 == 0\n\ndef can_be_hexagon(n):\n    return n % 13 == 0 and n % 29 == 0 and n % 41 == 0 and n % 73 == 0 and n % 129 == 0\n\ndef can_be_heptagon(n):\n    return n % 17 == 0 and n % 37 == 0 and n % 59 == 0 and n % 97 == 0 and n % 137 == 0\n\ndef can_be_octagon(n):\n    return n % 19 == 0 and n % 37 == 0 and n % 59 == 0 and n % 97 == 0 and n % 137 == 0\n\ndef can_be_decagon(n):\n    return n % 23 == 0 and n % 47 == 0 and n % 67 == 0 and n % 97 == 0 and n % 127 == 0\n\ndef can_be_tetrahedron(n):\n    return n % 5 == 0 and n % 15 == 0 and n % 25 == 0 and n % 35 == 0\n\ndef can_be_pentagon(n):\n    return n % 7 == 0 and n % 14 == 0 and n % 21 == 0 and n % 28 == 0 and n % 42 == 0\n\ndef can_be_hexagon(n):\n    return n % 11 == 0 and n % 22 == 0 and n % 33 == 0 and n % 44 == 0 and n % 55 == 0\n\ndef can_be_heptagon("
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# The given number can be represented by product of two squares\n# if the sum of the squares is greater than or equal to the given number\n# and the product of the two squares is greater than or equal to the given number\n\n# The given number can be represented by product of two cubes\n# if the sum of the cubes is greater than or equal to the given number\n# and the product of the two cubes is greater than or equal to the given number\n\n# The given number can be represented by product of three cubes\n# if the sum of the cubes is greater than or equal to the given number\n# and the product of the three cubes is greater than or equal to the given number\n\n# The given number can be represented by product of four cubes\n# if the sum of the cubes is greater than or equal to the given number\n# and the product of the four cubes is greater than or equal to the given number\n\n# The given number can be represented by product of five cubes\n# if the sum of the cubes is greater than or equal to the given number\n# and the product of the five cubes is greater than or equal to the given number\n\n# The given number can be represented by product of six cubes\n# if the sum of the cubes is greater than or equal to the given number\n# and the product of the six cubes is greater than or equal to the given number\n\n# The given number can be represented by product of seven cubes\n# if the sum of the cubes is greater than or equal to the given number\n# and the product of the seven cubes is greater than or equal to the given number\n\n# The given number can be represented by product of eight cubes\n# if the sum of the cubes is greater than or equal to the given number\n# and the product of the eight cubes is greater than or equal to the given number\n\ndef is_square(num):\n    num = int(num)\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\ndef is_cube(num):\n    num = int(num)\n    if num % 3 == 0:\n        return True\n    else:\n        return False\n\ndef is_fourcube(num):\n    num = int(num)\n    if num % 4 == 0:\n        return True\n    else:\n        return False\n\ndef is_five"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/check-if-number-can-be-represented-by-product-of-squares/problem\n\ndef check(num):\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return False\n    return check(num / 2) and check(num / 2)\n\n#print(check(9))\n#print(check(16))\n#print(check(16 * 16))\n\n#print(check(10))\n#print(check(100))\n#print(check(100 * 100))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import math\n\n\ndef is_square(num):\n    \"\"\"\n    check whether the number is a square number or not.\n    :param num: the number to check\n    :return: true if the number is square else false\n    \"\"\"\n    return math.sqrt(num) == math.sqrt(num ** 2)\n\n\ndef is_square_number(num):\n    \"\"\"\n    check whether the number is a square number or not.\n    :param num: the number to check\n    :return: true if the number is square else false\n    \"\"\"\n    return math.sqrt(num) == math.sqrt(num ** 2)\n\n\nif __name__ == '__main__':\n    print is_square(4)\n    print is_square_number(4)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def is_square(n):\n    return (n * n == n)\n\ndef is_square_p(n):\n    return (n * n == n) and (n == n * n)\n\ndef is_square_q(n):\n    return (n * n == n) and (n == n * n) and (n!= 0)\n\ndef is_square_r(n):\n    return (n * n == n) and (n == n * n) and (n!= 0) and (n!= 0)\n\ndef is_square_s(n):\n    return (n * n == n) and (n == n * n) and (n!= 0) and (n!= 0) and (n!= 0)\n\ndef is_square_t(n):\n    return (n * n == n) and (n == n * n) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0)\n\ndef is_square_u(n):\n    return (n * n == n) and (n == n * n) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0)\n\ndef is_square_v(n):\n    return (n * n == n) and (n == n * n) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0)\n\ndef is_square_w(n):\n    return (n * n == n) and (n == n * n) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0)\n\ndef is_square_x(n):\n    return (n * n == n) and (n == n * n) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0) and (n!= 0)\n\ndef is_square_y(n):\n    return (n *"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Complete the function below.\ndef isSquare(number):\n    # your code here\n    if number < 0:\n        return False\n    if number == 0:\n        return False\n    if number == 1:\n        return True\n    square = number ** 2\n    if square == number:\n        return True\n    else:\n        return False\n\nprint(isSquare(4))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def is_square(n):\n    \"\"\"\n    A number is square if it is a perfect square or a product of two perfect square numbers.\n    :param n: The number to be checked.\n    :return: True if the number is square. Otherwise, False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    if n == 1:\n        return False\n    if n < 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_square_2(n):\n    \"\"\"\n    A number is square if it is a perfect square or a product of two perfect square numbers.\n    :param n: The number to be checked.\n    :return: True if the number is square. Otherwise, False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    if n == 1:\n        return False\n    if n < 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_square(2))\n    print(is_square_2(2))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def isSquareFree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n == 0:\n            return True\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return False\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        if n % 7 == 0:\n            return False\n        if n % 11 == 0:\n            return False\n        if n % 13 == 0:\n            return False\n        if n % 17 == 0:\n            return False\n        if n % 19 == 0:\n            return False\n        if n % 23 == 0:\n            return False\n        if n % 29 == 0:\n            return False\n        if n % 31 == 0:\n            return False\n        if n % 37 == 0:\n            return False\n        if n % 41 == 0:\n            return False\n        if n % 43 == 0:\n            return False\n        if n % 47 == 0:\n            return False\n        if n % 53 == 0:\n            return False\n        if n % 59 == 0:\n            return False\n        if n % 61 == 0:\n            return False\n        if n % 67 == 0:\n            return False\n        if n % 71 == 0:\n            return False\n        if n % 73 == 0:\n            return False\n        if n % 79 == 0:\n            return False\n        if n % 83 == 0:\n            return False\n        if n % 89 == 0:\n            return False\n        if n % 97 == 0:\n            return False\n        if n % 101 == 0:\n            return False\n        if n % 103 == 0:\n            return False\n        if n % 107 == 0:\n            return False\n        if n % 109 == 0:\n            return False\n        if n % 113 == 0:\n            return False\n        if n % 127 == 0:\n            return False\n        if n % 131 == 0:\n            return False\n        if n % 137 == 0:\n            return False"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/two-square-sum\n# Given an integer n, return true if it can be represented by the product of two square numbers.\ndef is_square(n):\n    if n == 0:\n        return False\n    return n == (n*n)\n\n\n# Your code here.\n\ndef is_square_sum(n):\n    if n <= 0:\n        return False\n    return is_square(n) and is_square(n+n)\n\n\nprint(is_square_sum(100))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def canRepresent(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n < 0:\n            return False\n        if n == 0:\n            return True\n        #if n % 4 == 0 and n % 16 == 0:\n        #    return True\n        #elif n % 4 == 0 and n % 8 == 0:\n        #    return True\n        #elif n % 16 == 0 and n % 8 == 0:\n        #    return True\n        #else:\n        #    return False\n        if n % 4 == 0 and n % 8 == 0:\n            return True\n        elif n % 4 == 0 and n % 16 == 0:\n            return True\n        elif n % 8 == 0 and n % 16 == 0:\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    print Solution().canRepresent(4)\n    print Solution().canRepresent(16)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def is_square(n):\n    return n * n == n\n\ndef is_square_2(n):\n    return n * n == n\n\ndef is_square_3(n):\n    return n * n == n\n\ndef is_square_4(n):\n    return n * n == n\n\ndef is_square_5(n):\n    return n * n == n\n\ndef is_square_6(n):\n    return n * n == n\n\ndef is_square_7(n):\n    return n * n == n\n\ndef is_square_8(n):\n    return n * n == n\n\ndef is_square_9(n):\n    return n * n == n\n\ndef is_square_10(n):\n    return n * n == n\n\ndef is_square_11(n):\n    return n * n == n\n\ndef is_square_12(n):\n    return n * n == n\n\ndef is_square_13(n):\n    return n * n == n\n\ndef is_square_14(n):\n    return n * n == n\n\ndef is_square_15(n):\n    return n * n == n\n\ndef is_square_16(n):\n    return n * n == n\n\ndef is_square_17(n):\n    return n * n == n\n\ndef is_square_18(n):\n    return n * n == n\n\ndef is_square_19(n):\n    return n * n == n\n\ndef is_square_20(n):\n    return n * n == n\n\ndef is_square_21(n):\n    return n * n == n\n\ndef is_square_22(n):\n    return n * n == n\n\ndef is_square_23(n):\n    return n * n == n\n\ndef is_square_24(n):\n    return n * n == n\n\ndef is_square_25(n):\n    return n * n == n\n\ndef is_square_26(n):\n    return n * n == n\n\ndef is_square_27(n):\n    return n * n == n"
    }
  ]
}