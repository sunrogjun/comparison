{
  "timestamp": "2025-09-14T20:34:35.994590",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 432,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    result = numbers[0]\n    for num in numbers:\n        if num < 0:\n            result = max(result, num)\n    return result\n\nnumbers = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_largest_negative_number(numbers))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def findLargestNegative(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head or not head.next:\n            return 0\n        while head.next:\n            head = head.next\n        # print head.val\n        # head = head.val\n        # print head\n        if head.val >= 0:\n            return head.val\n        else:\n            return self.findLargestNegative(head.next)\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    head.next.next.next.next.next.next.next.next.next.next.next.next."
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n# TODO: write your code here\ndef largestNegative(numbers):\n    if len(numbers) == 0:\n        return -1\n    else:\n        max_n = -1\n        for num in numbers:\n            if num < 0:\n                max_n = max(max_n, num)\n        return max_n\n\nif __name__ == '__main__':\n    numbers = [1, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n    print(largestNegative(numbers))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "numbers = [\n    -2, -1, 0, 1, 2,\n    -3, -2, -1, 0, 1, 2, 3,\n    -4, -3, -2, -1, 0, 1, 2, 3, 4,\n    -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5,\n    -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6,\n    -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7,\n    -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8,\n    -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    ]\n\n# print(max(numbers))\n\ndef find_max(numbers):\n    max_val = -1\n    for number in numbers:\n        if number > max_val:\n            max_val = number\n    return max_val\n\n# print(find_max(numbers))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# The MIT License (MIT)\n#\n# Copyright (c) 2013-2015 Johan Kanflo (github.com/kanflo)\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\n\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\nimport sys\n\n# Check the input\ntry:\n    if len(sys.argv)!= 2:\n        raise ValueError(\"Please provide a filename\")\nexcept ValueError:\n    print(\"Please provide a filename\")\n    sys.exit(1)\n\n# Get the data from the file\nwith open(sys.argv[1], \"r\") as f:\n    data = f.read().split(\"\\n\")\n\n# Find the largest negative number\nmax_negative_number = max(x for x in data if x.startswith(\"-\") and x!= \"-1\")\n\n# Print the result\nprint(max_negative_number)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def largest_negative(numbers):\n    return max(numbers)\n\nif __name__ == '__main__':\n    assert largest_negative([1, 2, -3]) == -3\n    assert largest_negative([-1, -2, -3]) == -3\n    assert largest_negative([-2, -1, -3]) == -3\n    assert largest_negative([-3, -2, -1]) == -3\n    assert largest_negative([-1, -2, -3, -4]) == -4\n    assert largest_negative([-4, -3, -2, -1]) == -4"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_largest_negative_number(numbers):\n    for number in numbers:\n        if number < 0:\n            return number\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, -6, -7, -8, -9, -10, -11, -12, -13]\n    print(find_largest_negative_number(numbers))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_largest_negative_number(numbers):\n    return max(numbers)\n\n\n# Test Cases\nnumbers = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8]\nprint(find_largest_negative_number(numbers))\n\nnumbers = [9, -9, 10, -10, 11, -11, 12, -12, 13, -13, 14, -14, 15, -15, 16, -16]\nprint(find_largest_negative_number(numbers))\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from __future__ import print_function\n\ndef largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    if not numbers:\n        return 0\n\n    max_num = 0\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n\n    return max_num\n\nif __name__ == '__main__':\n    numbers = [1, -2, -3, -4, -5]\n    print(largest_negative_number(numbers))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_max_neg(nums):\n    return max(nums) if nums else 0\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print find_max_neg(nums)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def largest_negative(nums):\n    return max([-x for x in nums])\n\nprint(largest_negative([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# +++your code here+++\n# Write output as a list of strings.\n\n# +++your code here+++\n# Write output as a list of lists.\n\n# BEGIN PYTHON FUNCTION\ndef largest_negative(input_list):\n    largest_negative = -1\n    for i in range(len(input_list)):\n        if input_list[i] < 0:\n            if largest_negative < input_list[i]:\n                largest_negative = input_list[i]\n    return largest_negative\n\n# END PYTHON FUNCTION\n\nprint largest_negative([-1, -3, -2, -1, 0, -2, -1, -1, -1])"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "numbers = [-10, -3, -1, 2, 5, 8]\n\n# return the largest negative number\ndef getMaxNegative(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# return the largest negative number\ndef getMaxNegative2(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# return the largest negative number\ndef getMaxNegative3(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# return the largest negative number\ndef getMaxNegative4(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# return the largest negative number\ndef getMaxNegative5(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# return the largest negative number\ndef getMaxNegative6(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# return the largest negative number\ndef getMaxNegative7(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# return the largest negative number\ndef getMaxNegative8(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# return the largest negative number\ndef getMaxNegative9(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# return the largest negative number\ndef getMaxNegative10(numbers):\n    return max(numbers, key=lambda x: -x)\n\n\n# test\nprint(getMaxNegative(numbers))\nprint(getMaxNegative2(numbers))\nprint(getMaxNegative3(numbers))\nprint(getMaxNegative4(numbers))\nprint(getMaxNegative5(numbers))\nprint(getMaxNegative6(numbers))\nprint(getMaxNegative7(numbers))\nprint(getMaxNegative8(numbers))\nprint(getMaxNegative9(numbers))\nprint(getMaxNegative10(numbers))"
    },
    {
      "rank": 14,
      "score": 9.0,
      "candidate": "import random\n\ndef largestNegativeNumber(list):\n    return max(list) if len(list) > 0 else 0\n\ndef main():\n    random.seed()\n    numbers = [random.randint(-1000, 1000) for _ in range(10000)]\n    print(largestNegativeNumber(numbers))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "numbers = [2, 3, -2, -4, 5, -6, -8, -10]\n\ndef largest_negative_num(numbers):\n    largest = 0\n    for num in numbers:\n        if num < 0:\n            largest = max(largest, num)\n    return largest\n\nlargest_negative_num(numbers)"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def largest_negative_number(numbers):\n    if not numbers:\n        return None\n\n    return max(numbers)\n\nprint(largest_negative_number([-5, -3, -2, -1, 1, 2, 3, 5]))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def find_largest_negative(list):\n    \"\"\"\n    :param list: A list of numbers\n    :return: The largest negative number from the list\n    \"\"\"\n    return max([-x for x in list if x >= 0])"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "# List of numbers\nnumbers = [1, -2, 3, 4, -5, 6, -7, 8, 9, -10, 11, 12]\n\n# Find the largest negative number\nmax_negative_number = max(numbers)\nprint(\"The largest negative number is {}\".format(max_negative_number))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport math\n\n\ndef largest_negative_number(lst):\n    \"\"\"\n    :param lst: List of int\n    :return: the largest negative number\n    \"\"\"\n    max_num = -999999\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print largest_negative_number(lst)"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def largest_negative(numbers):\n    \"\"\"\n    :param numbers: A list of integers\n    :return: The largest negative number from the given list\n    \"\"\"\n    max_num = -1\n    for num in numbers:\n        if num < 0:\n            max_num = max(max_num, num)\n    return max_num\n\nif __name__ == '__main__':\n    numbers = [1, -2, -3, -4]\n    print(largest_negative(numbers))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def largest_negative(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return max(nums) if nums else 0\n\n\nif __name__ == '__main__':\n    assert largest_negative([1, -2, 3, -4]) == 3\n    assert largest_negative([1, -1, -2, -3, -4, -5]) == -5"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef largest_negative_number_from_list(num_list):\n    max_num = -sys.maxint\n    for num in num_list:\n        if num < 0:\n            max_num = max(max_num, num)\n    return max_num\n\n\nif __name__ == '__main__':\n    num_list = [1, 2, 3, 4, 5]\n    print largest_negative_number_from_list(num_list)\n    num_list = [1, -2, -3, -4, -5]\n    print largest_negative_number_from_list(num_list)"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def largest_neg_num(list_of_nums):\n    \"\"\"\n    :type list_of_nums: List[int]\n    :rtype: int\n    \"\"\"\n    if list_of_nums is None or len(list_of_nums) == 0:\n        return None\n    else:\n        return max(list_of_nums)\n\nif __name__ == \"__main__\":\n    list_of_nums = [1, -3, -1, -4, -2, 0, 3, 5, 7]\n    print(largest_neg_num(list_of_nums))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "# write your code here\n\ndef largest_negative_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_num = -1\n    for num in nums:\n        if num < 0:\n            max_num = max(max_num, num)\n    return max_num"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "import sys\n\ndef largest_negative(num_list):\n    \"\"\"\n    :type num_list: List[int]\n    :rtype: int\n    \"\"\"\n    if len(num_list) == 0:\n        return -sys.maxsize\n\n    return max(num_list)\n\nif __name__ == '__main__':\n    num_list = [1, -2, -3, -4, -5]\n    print(largest_negative(num_list))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def largest_negative_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return max(nums) if nums else -1\n\n\nif __name__ == '__main__':\n    nums = [2, -1, 3, -4]\n    print(largest_negative_number(nums))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def largest_neg_num(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_num = -1\n    for num in nums:\n        if num > 0:\n            max_num = max(max_num, num)\n        elif num < 0:\n            max_num = max(max_num, num)\n    return max_num"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_max_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    if not numbers:\n        return 0\n\n    max_negative = numbers[0]\n\n    for number in numbers:\n        if number < 0:\n            max_negative = max(max_negative, number)\n    return max_negative\n\nif __name__ == '__main__':\n    numbers = [1, -2, 3, -5, -4, -3, -1]\n    print(find_max_negative_number(numbers))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "import math\nimport sys\n\n\ndef find_max_negative(lst):\n    max_negative = 0\n    for num in lst:\n        if num < 0:\n            max_negative = max(max_negative, num)\n    return max_negative\n\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: {} <list>\".format(sys.argv[0]))\n        return 1\n\n    lst = [int(i) for i in sys.argv[1].split(\",\")]\n    max_negative = find_max_negative(lst)\n    print(max_negative)\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "import heapq\n\n\ndef largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    numbers.sort()\n    max_heap = []\n    for i in range(len(numbers)):\n        if numbers[i] > 0:\n            heapq.heappush(max_heap, (-numbers[i]))\n    return heapq.heappop(max_heap)\n\n\nif __name__ == '__main__':\n    print(largest_negative_number([-2, -1, 0, 1, 2, 3, 4]))\n    print(largest_negative_number([-2, -1, 0, 1, 2, 3, 4, -3]))\n    print(largest_negative_number([-2, -1, 0, 1, 2, 3, 4, -3, -2]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_neg_num(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    max_num = -1\n    for num in list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nif __name__ == '__main__':\n    assert find_max_neg_num([-3, -2, -1, 0, 1, 2, 3]) == -1\n    assert find_max_neg_num([-1, -2, -3, -4]) == -4\n    assert find_max_neg_num([-1, -2, -3, -4, -5]) == -5\n    assert find_max_neg_num([-1, -2, -3, -4, -5, -6]) == -6\n    assert find_max_neg_num([-1, -2, -3, -4, -5, -6, -7]) == -7\n    assert find_max_neg_num([-1, -2, -3, -4, -5, -6, -7, -8]) == -8\n    assert find_max_neg_num([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -9"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from sys import argv\n\ndef largest_negative(list):\n    return max(map(lambda x: -x, list))\n\nif __name__ == \"__main__\":\n    list = map(int, argv[1].split())\n    print(largest_negative(list))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def max_neg(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            return nums[i]\n        else:\n            return -1\n\nnums = [1, 2, -3, 4, -5, 6]\nprint(max_neg(nums))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "numbers = [1, -2, 3, -4, 5, -6, 7, -8, 9]\n\ndef largest_negative(numbers):\n    return max(numbers)\n\nprint(largest_negative(numbers))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\ndef max_negative(nums):\n    max_num = -1\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nif __name__ == '__main__':\n    nums = [1,2,-3,4,-1,-2,5,6]\n    print max_negative(nums)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def max_negative_num(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_num = nums[0]\n    max_neg_num = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_neg_num = max(max_neg_num, nums[i])\n        else:\n            max_num = max(max_num, nums[i])\n    return max(max_num, max_neg_num)\n\nif __name__ == '__main__':\n    nums = [1, -1, -2, -3, -4, -5]\n    print(max_negative_num(nums))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def largestNegative(numbers):\n    for i in range(len(numbers)):\n        if numbers[i] < 0:\n            return numbers[i]\n    return 0\n\nprint largestNegative([-2, 1, -3, 4, -1])"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "# Write your code here\ndef find_max_negative(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num < 0:\n            max_num = max(max_num, num)\n    return max_num\n\nif __name__ == '__main__':\n    nums = [1, -3, -5, -2, -1]\n    print(find_max_negative(nums))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_max_neg(lst):\n    max_neg = -1\n    for num in lst:\n        if num < 0:\n            max_neg = num\n    return max_neg\n\ndef find_max_neg_rec(lst):\n    if len(lst) == 0:\n        return -1\n    else:\n        max_neg = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] < 0:\n                max_neg = lst[i]\n        return max_neg\n\ndef find_max_neg_iter(lst):\n    if len(lst) == 0:\n        return -1\n    else:\n        max_neg = lst[0]\n        for num in lst:\n            if num < 0:\n                max_neg = num\n        return max_neg\n\ndef main():\n    lst = [1, -2, -3, 4, -5, 6, -7]\n    print(\"max negative number:\", find_max_neg(lst))\n    print(\"max negative number recursively:\", find_max_neg_rec(lst))\n    print(\"max negative number iteratively:\", find_max_neg_iter(lst))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "numbers = [1, -2, 3, 4, -5, 6]\n\ndef largest_negative_number(numbers):\n    max_number = 0\n    for num in numbers:\n        if num < 0:\n            max_number = max(max_number, num)\n    return max_number\n\nprint(largest_negative_number(numbers))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import math\n\ndef find_max_negative(numbers):\n    max_num = -1\n    for i in numbers:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nif __name__ == '__main__':\n    numbers = [2, -2, -3, -4, -5, -6]\n    print(find_max_negative(numbers))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    if not numbers:\n        return None\n    max_num = numbers[0]\n    for num in numbers:\n        if num < 0:\n            max_num = max(max_num, num)\n        else:\n            max_num = max(max_num, num)\n    return max_num\n\nif __name__ == \"__main__\":\n    numbers = [2, -4, -1, 0, 5]\n    print(largest_negative_number(numbers))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    return max(numbers)\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, -1, -2, -3]\n    print(largest_negative_number(numbers))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def findMaxNegative(numbers):\n    maxNum = 0\n    for num in numbers:\n        if num < 0:\n            if num > maxNum:\n                maxNum = num\n    return maxNum\n\nnumbers = [2, -1, -3, -4, -5, -6, -7]\n\nprint findMaxNegative(numbers)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def findLargestNegative(numList):\n    \"\"\"\n    :type numList: List[int]\n    :rtype: int\n    \"\"\"\n    largest = -1\n    for i in numList:\n        if i < 0:\n            largest = max(largest, i)\n    return largest\n\n# Your FindLargestNegative function should return the largest negative number in the list.\n# If there is no negative number, return -1.\n#\n# Note:\n# The given list is guaranteed to have no duplicate elements.\n# The given list is sorted in non-descending order.\n# You are not allowed to use any built-in BigInteger library or\n# any other third-party libraries for this problem."
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import unittest\nimport sys\nsys.path.append('../')\nimport MaxNegative\n\n\nclass TestMaxNegative(unittest.TestCase):\n    def test_max_negative(self):\n        self.assertEqual(MaxNegative.max_negative([2, -1, -2, 3]), -2)\n        self.assertEqual(MaxNegative.max_negative([-2, -1, -2, 3]), -2)\n        self.assertEqual(MaxNegative.max_negative([-2, -1, -2, -3]), -3)\n        self.assertEqual(MaxNegative.max_negative([-2, -1, -2, -3, -4]), -4)\n        self.assertEqual(MaxNegative.max_negative([-2, -1, -2, -3, -4, -5]), -5)\n        self.assertEqual(MaxNegative.max_negative([-2, -1, -2, -3, -4, -5, -6]), -6)\n        self.assertEqual(MaxNegative.max_negative([-2, -1, -2, -3, -4, -5, -6, -7]), -7)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_max_neg(arr):\n    \"\"\"\n    Find the largest negative number from the given list.\n\n    :param arr: list\n    :return: the largest negative number\n    \"\"\"\n    max_val = 0\n    for num in arr:\n        if num < 0:\n            max_val = max(max_val, num)\n    return max_val\n\n\nif __name__ == \"__main__\":\n    arr = [-2, -1, 0, 1, 2, 3]\n    print find_max_neg(arr)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef largest_negative(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    cnt = Counter(lst)\n    return max(cnt.values())"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def findLargestNegative(nums):\n    if nums:\n        if nums[0] < 0:\n            return nums[0]\n        else:\n            return findLargestNegative(nums[1:])\n    else:\n        return None\n\nif __name__ == '__main__':\n    nums = [-2, -5, -3, -6, -1, -3, 1]\n    print findLargestNegative(nums)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def largest_neg_num(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # TODO: write your code here\n    # the idea is to use the smallest negative number to get the index\n    # when the smallest negative number is negative, we will add the index and the smallest negative number\n    # and when the smallest negative number is positive, we will add the index and the smallest negative number\n    # then we will use the index to find the largest negative number\n    return max(filter(lambda x: x < 0, nums))\n\n\nif __name__ == '__main__':\n    nums = [1, -3, 4, -2, -5]\n    print(largest_neg_num(nums))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def largest_negative(list):\n    \"\"\"\n    >>> largest_negative([1, -2, -3, -4, -5])\n    -5\n    >>> largest_negative([-5, -4, -3, -2, -1])\n    -5\n    >>> largest_negative([-1, -2, -3, -4, -5])\n    -1\n    \"\"\"\n    return max(list, key=lambda x: -x)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def largestNegative(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    max = numbers[0]\n    for number in numbers:\n        if number < 0:\n            max = max if max < number else number\n    return max"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import math\n\ndef largest_negative_number(numbers):\n    return max(numbers, key=lambda x: x * -1)\n\n\nif __name__ == '__main__':\n    print(largest_negative_number([-2, -1, 0, 1, 2, 3]))\n    print(largest_negative_number([-1, 0, 1, 2, 3, 4]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_max_negative(numbers):\n    # write your code here\n    max_num = -1\n    for number in numbers:\n        if number < 0:\n            max_num = max(max_num, number)\n    return max_num"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n# Complete the largestNegative function below.\ndef largestNegative(nums):\n    return max(nums)\n\nif __name__ == '__main__':\n    print largestNegative([1, -1, -2, -3])"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    if not numbers:\n        return 0\n    return max([-x for x in numbers if x >= 0])\n\nif __name__ == '__main__':\n    numbers = [1, 2, -1, -2, -3]\n    print(find_largest_negative_number(numbers))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\ndef largest_negative(a):\n    return max([-x for x in a if x < 0])\n\na = [1, 2, -3, 4, -5, 6, -7, 8, 9, 10]\nprint(largest_negative(a))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    n = max(numbers)\n    i = 0\n    while i < len(numbers) and numbers[i] >= 0:\n        n = max(n, numbers[i])\n        i += 1\n    return n\n\nnumbers = [3, -3, -2, -1, -4, -5]\nprint(largest_negative_number(numbers))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# Write your code here\n\ndef largest_negative(numbers):\n    return max(numbers) if numbers else 0\n\n# TEST\nprint(largest_negative([-1, -2, 1, 2, -3]))\nprint(largest_negative([-1, -2, 1, 2, -3, 4, -5]))\nprint(largest_negative([1, -2, -3, 4, -5, 1]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "# Your code here\n\ndef largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    max_num = 0\n    for number in numbers:\n        if number > 0:\n            max_num = max(max_num, number)\n    return max_num\n\nif __name__ == \"__main__\":\n    numbers = [1,2,3,4,5,6,7,8,9,10]\n    print(largest_negative_number(numbers))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import math\nimport operator\n\n\ndef largest_negative_number(numbers):\n    return max(numbers, key=operator.itemgetter(0))[0]\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, -3, 4, -5, 6, -7, 8]\n    print(largest_negative_number(numbers))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n# http://www.hackerearth.com/problem-pratice/algorithm/largest-negative-number-from-given-list/\n\nimport math\n\ndef largestNegativeNumber(numbers):\n    n = len(numbers)\n    #if n is 1: return numbers[0]\n    if n is 0: return 0\n    \n    # find the maximum\n    max = -math.inf\n    for x in numbers:\n        if x < max:\n            max = x\n    return max\n\nif __name__ == '__main__':\n    numbers = [1, -2, -3, -4, -5, -6, -7]\n    print largestNegativeNumber(numbers)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import collections\n\ndef largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    numbers = collections.Counter(numbers)\n    return max(numbers.keys())\n\n\nif __name__ == '__main__':\n    print(largest_negative_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def largest_negative_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = 0\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            n = max(n, nums[i])\n    return n\n\n\nif __name__ == '__main__':\n    print(largest_negative_number([-2, -1, 0, 1, 2, 3, 4]))\n    print(largest_negative_number([-2, -3, -4]))\n    print(largest_negative_number([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "numbers = [2, -3, -1, 5, 3, -6, 1, -9]\n\ndef get_max_negative(numbers):\n    \"\"\"\n    Get the largest negative number from the given list.\n    :param numbers: A list of numbers.\n    :return: The largest negative number from the given list.\n    \"\"\"\n    max_negative = 0\n    for i in range(len(numbers)):\n        if numbers[i] < 0:\n            max_negative = max(max_negative, numbers[i])\n\n    return max_negative\n\nprint(get_max_negative(numbers))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import sys\n\ndef max_negative_number(numbers):\n    max_number = -sys.maxsize\n    for number in numbers:\n        if number > max_number:\n            max_number = number\n    return max_number\n\nif __name__ == '__main__':\n    numbers = [1, 2, -1, 4, -4, -5]\n    print max_negative_number(numbers)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def findMaxNegative(nums):\n    return max(filter(lambda x: x < 0, nums))\n\nif __name__ == '__main__':\n    nums = [-3, -2, -1, 0, 1, 2, 3]\n    print(findMaxNegative(nums))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def findMaxNegative(numbers):\n    maxNegative = 0\n    for number in numbers:\n        if number < 0:\n            maxNegative = max(maxNegative, number)\n    return maxNegative\n\n\nif __name__ == '__main__':\n    numbers = [1, -5, -3, -4, -2, 3]\n    print(findMaxNegative(numbers))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def largestNegative(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    max_num = -1\n    for num in list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nif __name__ == '__main__':\n    list = [-1, -3, -4, -5, -10]\n    print(largestNegative(list))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# coding=utf-8\n\n# @author: Junaid Ali\n# @date:   2017-03-21\n\n# @param: numbers: list\n# @return: the largest negative number\n\ndef find_max_negative(numbers):\n    max_num = numbers[0]\n    for number in numbers:\n        if number < 0:\n            if number > max_num:\n                max_num = number\n    return max_num\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, -1, -2, -3, -4]\n    print find_max_negative(numbers)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# Write your code here\n\ndef largest_negative(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    max_num = -1\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < 0:\n            max_num = -num\n\n    return max_num\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5,6,7,8,9]\n    print largest_negative(nums)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def find_max_negative(numbers):\n    return max(numbers) if max(numbers) < 0 else -max(numbers)\n\n\nif __name__ == '__main__':\n    numbers = [-1, -2, -3, -4]\n    print(find_max_negative(numbers))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def get_max_negative(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    max_negative = -1\n    for i in lst:\n        if i < 0:\n            max_negative = max(max_negative, i)\n    return max_negative\n\n# Your MaxNegative function should return the largest negative number from the given list."
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def findMaxNegative(nums):\n    max = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            max = max if max > nums[i] else nums[i]\n    return max\n\nif __name__ == '__main__':\n    nums = [-2, -5, -3, -1, 2, 5, 3]\n    print(findMaxNegative(nums))\n    nums = [-3, -2, -1, 1, 2, 3]\n    print(findMaxNegative(nums))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "from collections import deque\n\ndef find_max_negative_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_num = -1\n    max_num_index = 0\n\n    # if the first element is negative, we will always find the max_num_index\n    # so we can start from the second element\n    for i in range(1, len(nums)):\n        # if the current number is negative, we will find the max_num_index\n        if nums[i] < 0:\n            max_num_index = i\n            max_num = nums[i]\n            break\n\n    # if we don't find the max_num_index, we will find it in the last element\n    # since the list is sorted, we will find the max_num_index in the last element\n    if max_num_index == 0:\n        max_num_index = len(nums) - 1\n        max_num = nums[max_num_index]\n\n    return max_num\n\n\n# print(find_max_negative_number([-3, -2, -1, 0, 1, 2, 3]))\n# print(find_max_negative_number([-3, -2, -1, 0, 1, 2, 3, -4]))\n# print(find_max_negative_number([-3, -2, -1, 0, 1, 2, 3, -4, -5]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import math\nimport numpy as np\n\n# Input: List\n# Output: The largest negative number from the list\n# Example: [1, -2, -3, -4, -5]\n\ndef largest_negative_number(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num < 0:\n            max_num = max(max_num, num)\n    return max_num\n\nif __name__ == '__main__':\n    assert largest_negative_number([1, 2, -3, -4, -5]) == -5\n    assert largest_negative_number([-2, -3, -4, -5, -6]) == -6\n    assert largest_negative_number([-2, -3, -4, -5, -6, -7]) == -7\n    assert largest_negative_number([-2, -3, -4, -5, -6, -7, -8]) == -8\n    assert largest_negative_number([-2, -3, -4, -5, -6, -7, -8, -9]) == -9\n    assert largest_negative_number([-2, -3, -4, -5, -6, -7, -8, -9, -10]) == -10\n    assert largest_negative_number([-2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == -11"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def largest_negative_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # O(n) time, O(n) space\n    max_num = -sys.maxsize\n    for num in nums:\n        if num > max_num:\n            max_num = num\n\n    return max_num\n\n\nif __name__ == \"__main__\":\n    nums = [1, -5, -3, 4, -6, -2, 5]\n    print(largest_negative_number(nums))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "import sys\n\ndef getMaxNeg(numbers):\n    maxNeg = -sys.maxint\n    for num in numbers:\n        if num < 0:\n            if num > maxNeg:\n                maxNeg = num\n    return maxNeg\n\nif __name__ == '__main__':\n    numbers = [1, -2, -3, -4, -5]\n    print getMaxNeg(numbers)"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n# write your code here\n#\ndef findLargestNegative(nums):\n    # write your code here\n    result = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            result = max(result, nums[i])\n    return result\n\nif __name__ == '__main__':\n    nums = [-10, -5, -3, -1, 1, 5, 10]\n    print findLargestNegative(nums)"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return max(numbers, key=lambda x: -x)\n\n# Your LargestNegativeNumber solution here."
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def find_max_negative(list_of_numbers):\n    max_num = max(list_of_numbers)\n    max_pos = 0\n    for i in range(len(list_of_numbers)):\n        if list_of_numbers[i] < 0:\n            max_pos = i\n            max_num = max(max_num, list_of_numbers[i])\n    return max_pos, max_num\n\nlist_of_numbers = [1, 2, -3, 4, -5, 6]\nprint(find_max_negative(list_of_numbers))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "# import the necessary packages\nfrom sys import argv\nfrom operator import itemgetter\n\n# construct the input file name\ninput_filename = argv[1]\n\n# construct the output file name\noutput_filename = argv[2]\n\n# construct the input file\ninput_file = open(input_filename, 'r')\n\n# construct the output file\noutput_file = open(output_filename, 'w')\n\n# read the input file\nfor line in input_file:\n    # split the input line into a list\n    line_list = line.split()\n    \n    # convert the input line to an integer\n    input_number = int(line_list[0])\n    \n    # check if the input number is negative\n    if input_number < 0:\n        # add the input number to the output list\n        output_list.append(input_number)\n\n# sort the output list\nsorted_output_list = sorted(output_list, key=itemgetter(-1))\n\n# write the sorted output to the output file\nfor item in sorted_output_list:\n    output_file.write(str(item) + '\\n')"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    max_number = -1\n    for number in numbers:\n        if number > max_number:\n            max_number = number\n\n    return max_number"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def find_largest_negative_number(list):\n    if list == []:\n        return -1\n\n    max_value = -1\n    for i in range(0, len(list)):\n        if list[i] < 0:\n            max_value = max(max_value, list[i])\n\n    return max_value\n\nif __name__ == \"__main__\":\n    print(find_largest_negative_number([1, 2, -3, -4, 5]))\n    print(find_largest_negative_number([-1, -2, -3, -4, 5]))\n    print(find_largest_negative_number([-1, -2, -3, -4, 5, 6]))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def largest_negative_number(numbers):\n    \"\"\"\n    Write a function to find the largest negative number from the given list.\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # your code here\n    return max(numbers, key=lambda x: -x)\n\nif __name__ == '__main__':\n    print(largest_negative_number([-1, -2, -3, -4, -5]))\n    print(largest_negative_number([-2, -3, -4, -5, -6]))\n    print(largest_negative_number([-2, -3, -4, -5, -6, -7]))\n    print(largest_negative_number([-2, -3, -4, -5, -6, -7, -8]))\n    print(largest_negative_number([-2, -3, -4, -5, -6, -7, -8, -9]))\n    print(largest_negative_number([-2, -3, -4, -5, -6, -7, -8, -9, -10]))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef largest_neg_num(list_of_nums):\n    \"\"\"\n    Returns the largest negative number from the given list.\n\n    list_of_nums: a list of numbers\n\n    Returns:\n    the largest negative number from the given list.\n    \"\"\"\n\n    return max(-1*list_of_nums[0], -1*max(list_of_nums[1:]) )\n\n\n\nif __name__ == \"__main__\":\n    list_of_nums = [1, 2, 3, 4, -5]\n    print(largest_neg_num(list_of_nums))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "import numpy as np\nimport sys\n\ndef max_negative_number(numbers):\n    \"\"\"\n    Args:\n        numbers: a list of integers\n    Returns:\n        The largest negative number from the given list.\n    \"\"\"\n    max_number = -sys.maxsize\n    for number in numbers:\n        if number < 0:\n            max_number = max(max_number, number)\n    return max_number\n\ndef max_negative_number_numpy(numbers):\n    \"\"\"\n    Args:\n        numbers: a list of integers\n    Returns:\n        The largest negative number from the given list.\n    \"\"\"\n    max_number = -sys.maxsize\n    for number in numbers:\n        if number < 0:\n            max_number = max(max_number, number)\n    return max_number\n\nif __name__ == '__main__':\n    numbers = [1, -2, -3, -4, -5, -6]\n    print(max_negative_number(numbers))\n    print(max_negative_number_numpy(numbers))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def largest_negative(numbers):\n    \"\"\"\n    Write a function to find the largest negative number from the given list.\n\n    Arguments:\n    numbers -- a list of integers\n\n    Returns:\n    The largest negative number from the given list.\n    \"\"\"\n    return max(numbers) - max(numbers)\n\n\nprint(largest_negative([-4, -3, -2, -1, 0, 1, 2, 3, 4]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# @include\ndef find_max_neg_num(nums):\n    max_num = -1\n    for num in nums:\n        if num < 0:\n            max_num = max(max_num, num)\n    return max_num\n# @exclude\n\n\ndef main():\n    nums = [-2, -3, -5, -10, -1]\n    print(find_max_neg_num(nums))\n\n    nums = [-1, 0, 1, 2, 3]\n    print(find_max_neg_num(nums))\n\n    nums = [-1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(find_max_neg_num(nums))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# from https://www.hackerrank.com/challenges/largest-negative-number/problem\n\nimport unittest\n\n# @include\ndef largest_negative_number(nums):\n    if len(nums) == 0:\n        return 0\n    max_num = -nums[0]\n    for num in nums:\n        if num < 0:\n            max_num = max(max_num, -num)\n        else:\n            max_num = max(max_num, num)\n    return max_num\n# @exclude\n\n\nclass TestMethods(unittest.TestCase):\n    def test_largest_negative_number(self):\n        self.assertEqual(largest_negative_number([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 9)\n        self.assertEqual(largest_negative_number([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 8)\n        self.assertEqual(largest_negative_number([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 7)\n        self.assertEqual(largest_negative_number([-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 6)\n        self.assertEqual(largest_negative_number([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 5)\n        self.assertEqual(largest_negative_number([-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 4)\n        self.assertEqual(largest_negative_number([-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 3)\n        self.assertEqual(largest_negative_number([-8, -7"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def largest_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if not numbers:\n        return None\n    return max(numbers) if numbers else -1"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "#\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def largestNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        head = ListNode(-1)\n        prev = head\n        for i in nums:\n            new_node = ListNode(i)\n            prev.next = new_node\n            prev = new_node\n        head.next = None\n\n        max_node = head\n        curr_node = head.next\n        while curr_node:\n            if curr_node.val < 0:\n                max_node = curr_node\n                curr_node = curr_node.next\n            else:\n                curr_node = curr_node.next\n        return max_node.val\n\n\n\nif __name__ == \"__main__\":\n    # nums = [2, -1, -4]\n    # nums = [-1, -4, -1, 2]\n    # nums = [-1, -4, -1, -2, -1]\n    # nums = [-1, -4, -1, -2, -1, -1]\n    # nums = [-1, -4, -1, -2, -1, -1, -1]\n    # nums = [-1, -4, -1, -2, -1, -1, -1, -1]\n    # nums = [-1, -4, -1, -2, -1, -1, -1, -1, -1]\n    # nums = [-1, -4, -1, -2, -1, -1, -1, -1, -1, -1]\n    nums = [-1, -4, -1, -2, -1, -1, -1, -1, -1, -1, -1]\n    print Solution().largestNumber(nums)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/largest-palindrome-from-a-string/\n# tags: easy, array\n# similar to:\n# http://www.jiuzhang.com/solutions/largest-palindrome-from-a-string/\n# http://www.jiuzhang.com/solutions/largest-palindrome-from-a-string/\n# http://www.jiuzhang.com/solutions/largest-palindrome-from-a-string/\n# https://leetcode.com/problems/largest-palindrome-from-a-string/\n# TODO:\n# 1. use a list to store the result\n# 2. use a helper function\n# 3. make sure the result is not negative\n# 4. implement a recursive solution\n\nclass Solution:\n    # @param {string[]} strs\n    # @return {string}\n    def largestPalindrome(self, strs):\n        if not strs:\n            return ''\n        strs.sort()\n        l = len(strs)\n        res = ''\n        for i in range(l):\n            for j in range(i, l):\n                if j - i + 1 > len(res):\n                    res = strs[i:j+1]\n                else:\n                    if res[j-i+1] == strs[i]:\n                        res = strs[i:j+1]\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.largestPalindrome(['a', 'aa', 'aaa']))\n    print(sol.largestPalindrome(['a']))\n    print(sol.largestPalindrome([]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport collections\n\n\ndef find_max_negative(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return max(nums, key=lambda x: x*-1)\n\n\ndef test_max_negative():\n    assert find_max_negative([-2, -3, -4]) == -4\n    assert find_max_negative([1, 2, 3]) == 3\n    assert find_max_negative([-2, -1, 1, 2]) == 2\n\n\nif __name__ == '__main__':\n    test_max_negative()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "#\n# TODO:\n#\n# - Test this function with your own list.\n#\n# - Add a test to verify that the function returns the largest negative number.\n#\n\n#\n# Import the necessary modules\n#\nimport timeit\n\n#\n# Define a function to find the largest negative number from the given list\n#\ndef find_largest_negative_number_from_list(list_of_numbers):\n    #\n    # Write your code here\n    #\n    #\n    #\n    return max(list_of_numbers)\n    \n#\n# Call your function\n#\nprint(timeit.timeit(find_largest_negative_number_from_list, number=1))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Approach 1: Sort and find largest negative number\n# Approach 2: Iterate over the list and find largest negative number\n\n# Approach 1: Sort and find largest negative number\ndef largestNegativeNum(nums):\n    return sorted(nums)[-1] if nums else -1\n\n# Approach 2: Iterate over the list and find largest negative number\ndef largestNegativeNum2(nums):\n    return max(x for x in nums if x < 0) if nums else -1\n\n# Note: the function is a generator function\n# Time complexity: O(n)\n# Space complexity: O(1)\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the problem, you can try to read the problem statement.\n# If you want to understand the"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_max_negative_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    if not numbers:\n        return 0\n    result = numbers[0]\n    for number in numbers:\n        if number < 0:\n            result = max(result, number)\n    return result\n\ndef test_find_max_negative_number():\n    assert find_max_negative_number([-1, -2, 3, -4, -5]) == 5\n\nif __name__ == '__main__':\n    test_find_max_negative_number()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def find_max_negative(numbers):\n    return max(numbers, key=lambda x: -x)\n\n# Your FindMaxNegative function should accept a list of integers and return the largest negative number.\n#\n# Example 1:\n# Input: [-10, 2, -3, -4]\n# Output: -4\n# Example 2:\n# Input: [-5, -3, -2, 1, 3]\n# Output: -5\n# Note:\n# The input numbers are all in the range [-1000, 1000]."
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# This is a simple solution.\ndef find_max_negative(a_list):\n    max_negative = -1\n    for item in a_list:\n        if item < 0:\n            max_negative = max(max_negative, item)\n    return max_negative\n\n# This is a more complex solution.\ndef find_max_negative_2(a_list):\n    max_negative = -1\n    for item in a_list:\n        if item < 0:\n            max_negative = max(max_negative, item)\n        elif item > 0:\n            max_negative = max(max_negative, item)\n    return max_negative\n\n# This is a more complex solution.\ndef find_max_negative_3(a_list):\n    max_negative = -1\n    for item in a_list:\n        if item < 0:\n            max_negative = max(max_negative, item)\n        elif item > 0:\n            max_negative = max(max_negative, -item)\n    return max_negative\n\n# This is a more complex solution.\ndef find_max_negative_4(a_list):\n    max_negative = -1\n    for item in a_list:\n        if item < 0:\n            max_negative = max(max_negative, item)\n        elif item > 0:\n            max_negative = max(max_negative, -item)\n        elif item == 0:\n            max_negative = max(max_negative, item)\n    return max_negative\n\n# This is a more complex solution.\ndef find_max_negative_5(a_list):\n    max_negative = -1\n    for item in a_list:\n        if item < 0:\n            max_negative = max(max_negative, item)\n        elif item > 0:\n            max_negative = max(max_negative, -item)\n        elif item == 0:\n            max_negative = max(max_negative, item)\n        elif item == 0:\n            max_negative = max(max_negative, -item)\n    return max_negative\n\n# This is a more complex solution.\ndef find_max_negative_"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def get_max_negative(nums):\n    max_negative = max(nums)\n    return max_negative\n\nprint(get_max_negative([2, -1, -2, -3]))"
    }
  ]
}