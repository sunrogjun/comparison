{
  "timestamp": "2025-09-14T20:01:12.816649",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 357,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def repeat(tup, n):\n    if n == 0:\n        return tup\n    return tuple(repeat(tup, n - 1) for _ in range(n))\n\n# Your code here"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n\nclass Solution(object):\n    def tupleRepetitions(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: Tuple\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return t.x\n        if n == 2:\n            return t.x * t.x\n        if n == 3:\n            return t.x * t.x * t.x\n        if n == 4:\n            return t.x * t.x * t.x * t.x\n        if n == 5:\n            return t.x * t.x * t.x * t.x * t.x\n        return self.tupleRepetitions(n - 1, t) * self.tupleRepetitions(n - 2, t) * self.tupleRepetitions(n - 3, t) * self.tupleRepetitions(n - 4, t) * self.tupleRepetitions(n - 5, t)\n\n    def tupleRepetitions(self, n, t):\n        return self.tupleRepetitions(n - 1, t) * self.tupleRepetitions(n - 2, t) * self.tupleRepetitions(n - 3, t) * self.tupleRepetitions(n - 4, t) * self.tupleRepetitions(n - 5, t)\n\nn = int(input())\nt = Tuple(input())\nprint(Solution().tupleRepetitions(n, t))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# ##############################################################################\n# ##\n# ##  Copyright (c) 2013-2015, Suleymani Rajendran <suleymani@rune.com>\n# ##############################################################################\n# ##\n# ##  This program is free software: you can redistribute it and/or modify\n# ##  it under the terms of the GNU General Public License as published by\n# ##  the Free Software Foundation, either version 3 of the License, or\n# ##  (at your option) any later version.\n# ##\n# ##  This program is distributed in the hope that it will be useful,\n# ##  but WITHOUT ANY WARRANTY; without even the implied warranty of\n# ##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# ##  GNU General Public License for more details.\n# ##\n# ##  You should have received a copy of the GNU General Public License\n# ##  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n# ##\n# ##############################################################################\n\nimport sys\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print(\"Usage: %s <number of times to repeat the given tuple>\" % sys.argv[0])\n        exit(1)\n    n = int(sys.argv[1])\n    print(\"Tuple: %s\" % tuple(range(1, n + 1)))\n    for i in range(1, n + 1):\n        print(\"Tuple: %s\" % tuple(range(1, n + 1)))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 1\n\n    def __iter__(self):\n        return self\n\n    def next(self):\n        self.y += 1\n        return self.x, self.y\n\n\n# Your Tuple object will be instantiated and called as such:\n# obj = Tuple(x)\n# param_1,param_2 = obj.next()\n# param_3,param_4 = obj.next()\n# param_5,param_6 = obj.next()\n# param_7,param_8 = obj.next()\n# param_9,param_10 = obj.next()\nclass Solution(object):\n    def repeat(self, t, n):\n        \"\"\"\n        :type t: List[Tuple]\n        :type n: int\n        :rtype: List[Tuple]\n        \"\"\"\n        return [t[0]]*n + self.repeat(t[1:], n-1)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def repeat(tup, n):\n    return tuple(tup * n)\n\nprint(repeat([1, 2, 3], 3))\n\nprint(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat(repeat"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from collections import deque\n\n\ndef repeat(tup, n):\n    \"\"\"\n    :type tup: tuple\n    :type n: int\n    :rtype: list\n    \"\"\"\n    t = deque(tup)\n    res = []\n    while n > 0:\n        res.append(t.pop())\n        n -= 1\n    return res\n\n\nif __name__ == '__main__':\n    print(repeat((1, 2, 3), 2))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/repeated-string-n-times\n\nimport unittest\nfrom typing import List\n\n\ndef repeat(tuple_to_repeat: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function to repeat the given tuple n times.\n\n    Example 1:\n\n    Input: tuple_to_repeat = [1, 2, 3], n = 3\n    Output: [1, 1, 1, 2, 2, 3]\n    Explanation:\n    The first element of the tuple is repeated once.\n    The second element is repeated twice.\n    The third element is repeated three times.\n    \"\"\"\n    result = []\n    for i in range(n):\n        result.extend(tuple_to_repeat)\n    return result\n\n\nclass TestCode(unittest.TestCase):\n    def test_repeat(self):\n        self.assertEqual(repeat([1, 2, 3], 3), [1, 1, 1, 2, 2, 3])\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def repeat(self, head: ListNode, n: int) -> ListNode:\n        curr = head\n        while curr:\n            curr = curr.next\n        \n        prev = head\n        for i in range(n):\n            prev.next = ListNode(prev.val)\n            prev = prev.next\n        return head\n\n    def repeat2(self, head: ListNode, n: int) -> ListNode:\n        curr = head\n        while curr:\n            curr = curr.next\n        \n        prev = head\n        while n:\n            prev.next = ListNode(prev.val)\n            prev = prev.next\n            n -= 1\n        return head\n\n    def repeat3(self, head: ListNode, n: int) -> ListNode:\n        curr = head\n        while curr:\n            curr = curr.next\n        \n        prev = head\n        while n:\n            prev.next = ListNode(prev.val)\n            prev = prev.next\n            n -= 1\n        return head\n\n# Note:\n# 1. The repeat function is defined in the following way:\n# 1.1 The repeat function is defined as repeat(head, n).\n# 1.2 The repeat function is defined as repeat(head, n) is the same as repeat2(head, n)\n# 2. The repeat function is defined as repeat(head, n) is the same as repeat3(head, n)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://www.codewars.com/kata/4c5d7c2d9b4d67a9a3/train/python\n\ndef repeat(tuple_to_repeat, n):\n    return tuple([tuple_to_repeat] * n)\n\n# Test Cases\n\n# repeat(1, 2) == (1, 1)\n# repeat(1, 3) == (1, 1, 1)\n# repeat(1, 4) == (1, 1, 1, 1)\n# repeat(1, 5) == (1, 1, 1, 1, 1)\n\n# repeat(1, 0) == ()\n# repeat(1, 1) == (1,)\n# repeat(1, 2) == (1, 1)\n# repeat(1, 3) == (1, 1, 1)\n# repeat(1, 4) == (1, 1, 1, 1)\n# repeat(1, 5) == (1, 1, 1, 1, 1)\n\n# repeat(1, -1) == ()\n# repeat(1, -2) == ()\n# repeat(1, -3) == ()\n# repeat(1, -4) == ()\n# repeat(1, -5) == ()\n\n# repeat(1, 0) == ()\n# repeat(1, 1) == (1,)\n# repeat(1, 2) == (1, 1)\n# repeat(1, 3) == (1, 1, 1)\n# repeat(1, 4) == (1, 1, 1, 1)\n# repeat(1, 5) == (1, 1, 1, 1, 1)\n\n# repeat(1, -1) == ()\n# repeat(1, -2) == ()\n# repeat(1, -3) == ()\n# repeat(1, -4) == ()\n# repeat(1, -5) == ()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.y += 1\n        return self.x,\n\ntuple = Tuple(1, 2, 3, 4, 5)\n\ndef repeat(tuple, n):\n    return tuple\n\nprint(repeat(tuple, 2))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def repeat(self, node, n):\n        \"\"\"\n        :type node: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if node is None:\n            return None\n        res = ListNode(node.val)\n        cur = res\n        while n > 0:\n            if n > 1:\n                cur.next = self.repeat(node.next, n - 1)\n            else:\n                cur.next = node.next\n            n -= 1\n            node = node.next\n        return res\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    node = ListNode(1)\n    res = solution.repeat(node, 2)\n    while res is not None:\n        print res.val\n        res = res.next"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def repeat(t):\n    s = str(t)\n    return s * n\n\nn = int(input())\nt = tuple(map(int, input().split()))\n\nprint(repeat(t))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = y\n\n\nclass Solution(object):\n    def repeat(self, t, n):\n        \"\"\"\n        :type t: Tuple\n        :type n: int\n        :rtype: List[Tuple]\n        \"\"\"\n        if n == 0:\n            return []\n        if n == 1:\n            return [t]\n        if n == 2:\n            return [t] + t\n        if n == 3:\n            return [t] + t + t\n        if n == 4:\n            return [t] + t + t + t\n        if n == 5:\n            return [t] + t + t + t + t\n        if n == 6:\n            return [t] + t + t + t + t + t\n        if n == 7:\n            return [t] + t + t + t + t + t + t\n        if n == 8:\n            return [t] + t + t + t + t + t + t + t\n        if n == 9:\n            return [t] + t + t + t + t + t + t + t + t + t\n        if n == 10:\n            return [t] + t + t + t + t + t + t + t + t + t + t + t\n        if n == 11:\n            return [t] + t + t + t + t + t + t + t + t + t + t + t + t + t\n        if n == 12:\n            return [t] + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def rep(t, n):\n    if n == 0:\n        return ()\n    else:\n        return rep(t, n-1) + (t,)\n\nprint rep((1, 2, 3), 3)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def rep(self, t, n):\n        \"\"\"\n        :type t: List[int]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for _ in range(n):\n            res.append(t)\n        return res\n\n    def rep2(self, t, n):\n        \"\"\"\n        :type t: List[int]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(n):\n            res.append(t)\n        return res\n\nif __name__ == '__main__':\n    assert Solution().rep(tuple(range(1, 10)), 1) == [1]\n    assert Solution().rep(tuple(range(1, 10)), 2) == [1,2]\n    assert Solution().rep(tuple(range(1, 10)), 3) == [1,2,3]\n    assert Solution().rep(tuple(range(1, 10)), 4) == [1,2,3,4]\n    assert Solution().rep(tuple(range(1, 10)), 5) == [1,2,3,4,5]\n    assert Solution().rep(tuple(range(1, 10)), 6) == [1,2,3,4,5,6]\n    assert Solution().rep(tuple(range(1, 10)), 7) == [1,2,3,4,5,6,7]\n    assert Solution().rep(tuple(range(1, 10)), 8) == [1,2,3,4,5,6,7,8]\n    assert Solution().rep(tuple(range(1, 10)), 9) == [1,2,3,4,5,6,7,8,9]\n    assert Solution().rep(tuple(range(1, 10)), 10) == [1,2,3,4,5,6,7,8,9,10]\n    assert Solution().rep(tuple(range(1, 10)), 0) == []\n    assert Solution().rep2(tuple(range(1, 10)), 1) == [1]"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/repeat-a-tuple/problem\n\ndef repeat(tuple):\n    for i in range(len(tuple)):\n        yield tuple[i]\n\ndef main():\n    tuple = (1, 2, 3)\n    for i in repeat(tuple):\n        print(i)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/repeat-a-tuple/problem\n# https://www.hackerrank.com/challenges/repeat-a-tuple/submissions/code/10987880\n\n\ndef repeat(tuple, n):\n    \"\"\"Repeat a tuple n times.\n\n    Example\n    >>> repeat((1, 2, 3), 3)\n    (1, 2, 3)\n    >>> repeat((1, 2, 3), 4)\n    (1, 2, 3, 1, 2, 3)\n    >>> repeat((1, 2, 3), 0)\n    ()\n    >>> repeat((1, 2, 3), -1)\n    ()\n    \"\"\"\n    if n == 0:\n        return ()\n    if n == 1:\n        return tuple\n    else:\n        return tuple + repeat(tuple, n - 1)\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    tuple = tuple(int(i) for i in input().split())\n    print(repeat(tuple, t))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def repeat(t):\n\tfor i in range(n):\n\t\tt = tuple(t)\n\nprint(repeat((1,2,3)))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Time:  O(n)\n# Space: O(n)\n\n# The idea is to count the number of times a given number appears in the given list.\n# So we can just keep track of the count and use it to repeat the tuple.\n# This is a problem for two numbers.\n# For example, [1, 2, 3] has 3 times 1 and 3 times 2.\n# It is impossible to repeat these two numbers.\n#\n# Note:\n# A tuple (t1, t2, t3) contains three numbers.\n# A tuple (1, 2, 3) contains three numbers.\n# A tuple (1, 2, 3, 4) contains four numbers.\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def repeat(self, t, times):\n        \"\"\"\n        :type t: List[int]\n        :type times: int\n        :rtype: List[int]\n        \"\"\"\n        if times == 0:\n            return []\n        if times == 1:\n            return [t[0]] * times\n        head = ListNode(0)\n        head.next = t\n        curr = head\n        while times > 1:\n            curr = curr.next\n            times -= 1\n        while curr.next:\n            curr = curr.next\n        curr.next = head.next\n        return head.next.next.next.next.next"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/repeat-a-tuple/problem\n\ndef repeat(t):\n    return [t] * n\n\ndef repeat_2(t):\n    return [t] * n\n\nn = int(input())\n\nprint(repeat(repeat_2(repeat(repeat_2(repeat_2(repeat(repeat(repeat(repeat_2(repeat(repeat(repeat_2(repeat(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat_2(repeat"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def rep(t, n):\n    return tuple(t) * n\n\nprint rep(('a', 'b', 'c'), 3)\nprint rep(('a', 'b', 'c'), 0)"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "from collections import namedtuple\n\n# tuples are immutable, so we can just create a named tuple\nTuple = namedtuple(\"Tuple\", \"x y z\")\n\ndef repeat(t, n):\n    \"\"\"Given a tuple t, return a tuple of length n, repeating t.\n    >>> repeat((1, 2, 3), 1)\n    (1, 2, 3)\n    >>> repeat((1, 2, 3), 2)\n    (1, 2, 3, 1, 2, 3)\n    >>> repeat((1, 2, 3), 3)\n    (1, 2, 3, 1, 2, 3, 1, 2, 3)\n    >>> repeat((1, 2, 3), 4)\n    (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n    \"\"\"\n    return [t]*n\n\nif __name__ == \"__main__\":\n    print repeat((1, 2, 3), 1)\n    print repeat((1, 2, 3), 2)\n    print repeat((1, 2, 3), 3)\n    print repeat((1, 2, 3), 4)"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b c')\n\ndef repeat(tup, n):\n    \"\"\"\n    >>> repeat((1, 2, 3), 2)\n    (1, 2, 3, 1, 2, 3)\n    \"\"\"\n    return tuple(tup) + repeat(tup, n - 1)\n\ndef main():\n    \"\"\"\n    >>> repeat((1, 2, 3), 2)\n    (1, 2, 3, 1, 2, 3)\n    \"\"\"\n    print(repeat((1, 2, 3), 2))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def repeat(t, n):\n    return tuple([t]*n)\n\nif __name__ == \"__main__\":\n    print(repeat((1, 2, 3), 2))\n    print(repeat((1, 2, 3), 3))\n    print(repeat((1, 2, 3), 4))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "import sys\n\ndef repeat(t, n):\n    return tuple(t) * n\n\ndef test_repeat():\n    assert repeat((1,2,3), 1) == (1,2,3)\n    assert repeat((1,2,3), 2) == (1,2,3,1,2,3)\n    assert repeat((1,2,3), 3) == (1,2,3,1,2,3,1,2,3)\n    assert repeat((1,2,3), 4) == (1,2,3,1,2,3,1,2,3,1,2,3)\n    assert repeat((1,2,3), 5) == (1,2,3,1,2,3,1,2,3,1,2,3,1,2,3)\n\nif __name__ == \"__main__\":\n    test_repeat()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from collections import deque\n\ndef repeat(t):\n    if len(t) == 0:\n        return []\n    elif len(t) == 1:\n        return [t]\n    else:\n        res = []\n        for i in range(0, len(t)):\n            res.append(repeat(t[i:]))\n        return res\n\ndef main():\n    t = (1, 2, 3, 4, 5)\n    res = repeat(t)\n    print res\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from collections import namedtuple\nfrom operator import mul\n\n\n# Your code will be read as a tuple of numbers.\ndef repeat(tup, n):\n    return tuple(tup) * n\n\n\ndef main():\n    tup = namedtuple('tup', 'a b c')\n    assert repeat(tup(1, 2, 3), 2) == (1, 2, 3)\n    assert repeat(tup(1, 2, 3), 3) == (1, 2, 3, 1, 2, 3)\n    assert repeat(tup(1, 2, 3), 4) == (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "import sys\n\ndef repeat(tup, n):\n    \"\"\"\n    >>> repeat((1,2,3), 3)\n    (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n    \"\"\"\n    if n < 1:\n        return tup\n    else:\n        return repeat(tup, n-1) + tup\n\nif __name__ == \"__main__\":\n    assert repeat((1,2,3), 3) == (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n    assert repeat((1,2,3), 1) == (1, 2, 3)\n    assert repeat((1,2,3), 2) == (1, 2, 3, 1, 2, 3)\n    assert repeat((1,2,3), 3) == (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    res = []\n    for i in range(n):\n        res.append(tup)\n    return res\n\n#Test Cases\n#tup = (1,2,3)\n#n = 3\n#res = repeat(tup, n)\n#print res\n\ntup = (1,2,3)\nn = 3\nres = repeat(tup, n)\nprint res"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def repeat_tuple(tup, times):\n    result = tup\n    for i in range(times):\n        result = tuple(result)\n    return result\n\n# Sample Inputs & Outputs\n# repeat_tuple([1, 2, 3], 10) -> (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n# repeat_tuple([1, 2, 3], 3) -> (1, 2, 3)\n# repeat_tuple([1, 2, 3], 2) -> (1, 2)\n# repeat_tuple([1, 2, 3], 1) -> (1)\n# repeat_tuple([1, 2, 3], 0) -> ()\n# repeat_tuple([], 10) -> ()\n# repeat_tuple([], 3) -> ()\n# repeat_tuple([], 2) -> ()\n# repeat_tuple([], 1) -> ()\n# repeat_tuple([], 0) -> ()\n\nprint(repeat_tuple([1, 2, 3], 10))\nprint(repeat_tuple([1, 2, 3], 3))\nprint(repeat_tuple([1, 2, 3], 2))\nprint(repeat_tuple([1, 2, 3], 1))\nprint(repeat_tuple([1, 2, 3], 0))\n\nprint(repeat_tuple([], 10))\nprint(repeat_tuple([], 3))\nprint(repeat_tuple([], 2))\nprint(repeat_tuple([], 1))\nprint(repeat_tuple([], 0))\n\nprint(repeat_tuple([], 0))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [tup]\n    else:\n        return [tup] + repeat(tup, n-1)\n\n# Example\n# repeat((1, 2, 3), 3)\n# [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    \"\"\"\n    Write a function to repeat the given tuple n times.\n\n    Example 1:\n    \n    Input: tup = (1,2,3), n = 3\n    Output: [1,2,3,1,2,3,1,2,3]\n    Explanation: \n    The tuple (1,2,3) is repeated 3 times:\n    (1,2,3) -> (1,2,3) -> (1,2,3) -> (1,2,3)\n\n    Example 2:\n    \n    Input: tup = (1,2,3), n = 2\n    Output: [1,2,3,1,2,3]\n    Explanation: \n    The tuple (1,2,3) is repeated 2 times:\n    (1,2,3) -> (1,2,3)\n    \n    Note:\n    \n    1 <= tup.length <= 1000\n    tup consists of unique integer values.\n    n will be an integer within the range [1, 10000].\n    \"\"\"\n    if not n or n < 0:\n        return tup\n    return [tup[i] for i in range(n)] + repeat(tup, n-1)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "import unittest\n\n\ndef repeat(tuple_, n):\n    \"\"\"Repeat a tuple n times.\"\"\"\n    return tuple(tuple_) * n\n\n\nclass RepeatTest(unittest.TestCase):\n    def test_repeat(self):\n        self.assertEqual(repeat((1, 2, 3), 2), (1, 2, 3, 1, 2, 3))\n        self.assertEqual(repeat((1, 2, 3), 0), ())\n        self.assertEqual(repeat((1, 2, 3), -1), ())\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def repeat(tuple, n):\n    \"\"\"\n    Input:\n    tuple - tuple to repeat\n    n - number of times to repeat\n\n    Output:\n    A list containing n copies of tuple\n    \"\"\"\n    result = []\n    for i in range(n):\n        result.append(tuple)\n    return result\n\nif __name__ == \"__main__\":\n    print(repeat((1, 2, 3), 3))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "#!/usr/bin/python\n\n# Complete the repeat function below.\ndef repeat(tuple_to_repeat, n):\n    if n == 0:\n        return tuple_to_repeat\n    else:\n        return repeat(tuple_to_repeat, n-1) + (tuple_to_repeat,)\n\nif __name__ == '__main__':\n    assert(repeat((1,2,3), 1) == (1,2,3,1,2,3))\n    assert(repeat((1,2,3), 2) == (1,2,3,1,2,3))\n    assert(repeat((1,2,3), 3) == (1,2,3,1,2,3))\n    assert(repeat((1,2,3), 4) == (1,2,3,1,2,3))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def repeat(tuple_to_repeat, n):\n    \"\"\"\n    :type tuple_to_repeat: tuple\n    :type n: int\n    :rtype: tuple\n    \"\"\"\n    return tuple(tuple_to_repeat) * n\n\ndef test_repeat():\n    assert repeat((1, 2, 3), 2) == (1, 2, 3, 1, 2, 3)\n    assert repeat((1, 2, 3), 3) == (1, 2, 3, 1, 2, 3)\n    assert repeat((1, 2, 3), 4) == (1, 2, 3, 1, 2, 3)\n\nif __name__ == '__main__':\n    test_repeat()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    \"\"\"\n    :type tup: tuple\n    :type n: int\n    :rtype: tuple\n    \"\"\"\n    return tuple([tup] * n)\n\n# Your repeat function will be called like this:\n# repeat(tup, n)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def repeat(tup, times):\n    \"\"\"\n    >>> repeat((1, 2, 3), 2)\n    (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n    >>> repeat((1, 2, 3), 0)\n    ()\n    \"\"\"\n    if times == 0:\n        return ()\n    else:\n        return tuple(repeat(tup, times - 1)) + tup\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    if n == 0:\n        return tup\n    else:\n        return tuple(repeat(tup, n-1)) + (tup,)\n\nprint(repeat((1,2,3), 3))\n\n\"\"\"\nInput:\nn = 5\ntup = (1,2,3)\n\nOutput:\n(1,2,3,1,2,3,1,2,3)\n\"\"\""
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'x y')\n\ndef repeat(tuple_to_repeat, times):\n    \"\"\"\n    Repeat the tuple tuple_to_repeat for times.\n\n    Args:\n        tuple_to_repeat (Tuple): The tuple to repeat.\n        times (int): The number of times to repeat the tuple.\n\n    Returns:\n        Tuple: The repeated tuple.\n    \"\"\"\n    return Tuple(tuple_to_repeat.x * times, tuple_to_repeat.y * times)\n\n# Your Tuple object will be instantiated and called as such:\n# t = Tuple(x,y)\n# print t.x, t.y\n# t = repeat(t, n)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import random\n\ndef repeat(tup, n):\n    \"\"\"\n    Input:\n        tup = a tuple of ints\n        n = the number of times to repeat tup\n    Output:\n        a tuple of ints\n    \"\"\"\n    return tuple(random.sample(tup, n))\n\ndef test_repeat():\n    assert repeat((1, 2, 3, 4), 3) == (1, 2, 3, 4)\n    assert repeat((1, 2, 3, 4), 0) == ()\n    assert repeat((1, 2, 3, 4), 1) == (1,)\n    assert repeat((1, 2, 3, 4), 2) == (1, 2)\n    assert repeat((1, 2, 3, 4), 3) == (1, 2, 3)\n    assert repeat((1, 2, 3, 4), 4) == (1, 2, 3, 4)\n    assert repeat((1, 2, 3, 4), 5) == (1, 2, 3, 4, 1)\n\nif __name__ == '__main__':\n    test_repeat()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def repeat(tuple_to_repeat, n):\n    \"\"\"\n    For example: repeat((1,2,3), 3) should return (1,1,1,2,2,3,3,3,3).\n    :param tuple_to_repeat: The tuple to repeat.\n    :param n: The amount of times to repeat the tuple.\n    :return: A list of n copies of the given tuple.\n    \"\"\"\n    return [tuple_to_repeat] * n\n\n\ndef repeat_with_s(tuple_to_repeat, n):\n    \"\"\"\n    For example: repeat_with_s((1,2,3), 3) should return (1,1,1,2,2,3,3,3,3).\n    :param tuple_to_repeat: The tuple to repeat.\n    :param n: The amount of times to repeat the tuple.\n    :return: A list of n copies of the given tuple.\n    \"\"\"\n    return [tuple_to_repeat] * n"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n# http://www.geeksforgeeks.org/write-a-function-to-repeat-the-given-tuple-n-times/\n\ndef repeat(tuple):\n    \"\"\"\n    Write a function to repeat the given tuple n times.\n\n    Input:\n    tuple - A tuple of integers\n    n - The number of times the tuple is to be repeated\n\n    Output:\n    A tuple of integers.\n\n    Examples:\n    repeat([1, 2, 3, 4]) => [1, 2, 3, 4, 1, 2, 3, 4]\n    repeat([1, 2, 3, 4], 3) => [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    repeat([1, 2, 3, 4], 2) => [1, 2, 3, 4, 1, 2, 3, 4]\n    repeat([1, 2, 3, 4], 1) => [1, 2, 3, 4]\n    repeat([1, 2, 3, 4], 0) => []\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return tuple\n\n    return repeat(tuple, n - 1) + tuple\n\nif __name__ == \"__main__\":\n    print repeat((1, 2, 3, 4))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    for i in range(n):\n        yield tup\n\n# Test Cases\n\nprint(repeat([1, 2, 3], 2))\nprint(repeat(('a', 'b', 'c'), 3))\nprint(repeat(('a', 'b', 'c'), 5))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    res = []\n    for i in range(n):\n        res.append(tup)\n    return res\n\n# print(repeat(tup, 5))\n\ndef main():\n    tup = (1, 2, 3)\n    print(repeat(tup, 10))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def repeat(tuple):\n    return [tuple] * n\n\n# Test Cases\n\n# tuple = repeat(('a', 'b'))\n# tuple = repeat(('a', 'b', 'c'))\n# tuple = repeat(('a', 'b', 'c', 'd'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e', 'f'))\n\n# tuple = repeat(('a', 'b', 'c'))\n# tuple = repeat(('a', 'b', 'c', 'd'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e', 'f'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e', 'f', 'g'))\n\n# tuple = repeat(('a', 'b', 'c'))\n# tuple = repeat(('a', 'b', 'c', 'd'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e', 'f'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e', 'f', 'g'))\n\n# tuple = repeat(('a', 'b', 'c'))\n# tuple = repeat(('a', 'b', 'c', 'd'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e', 'f'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e', 'f', 'g'))\n\n# tuple = repeat(('a', 'b', 'c'))\n# tuple = repeat(('a', 'b', 'c', 'd'))\n# tuple = repeat(('a', 'b', 'c', 'd', 'e'))\n# tuple ="
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "# Write your code below.\n\ndef repeat_tuple(tup, times):\n    result = []\n    for i in range(times):\n        result.append(tup)\n    return result"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nfrom collections import Counter\n\n# Your code here!\ndef repeat(t, n):\n    return [t] * n\n\n# Repeating a list of n times:\ndef repeat_list(t, n):\n    return [t] * n\n\n# Repeating a list of n times, but keeping the list in the same order:\ndef repeat_list_order(t, n):\n    return [t] * n\n\n# Repeating a list of n times, but keeping the list in the same order, but\n# adding a new element at the end\ndef repeat_list_order_add_last(t, n):\n    return [t] * n + [t]\n\n# Repeating a list of n times, but keeping the list in the same order, but\n# adding a new element at the end, but keeping the order the same\ndef repeat_list_order_add_last_keep_order(t, n):\n    return [t] * n + [t]\n\n# Repeating a list of n times, but keeping the list in the same order, but\n# adding a new element at the end, but keeping the order the same, but\n# adding a new element at the end\ndef repeat_list_order_add_last_keep_order_add_last(t, n):\n    return [t] * n + [t] + [t]\n\n# Repeating a list of n times, but keeping the list in the same order, but\n# adding a new element at the end, but keeping the order the same, but\n# adding a new element at the end, but keeping the order the same\ndef repeat_list_order_add_last_keep_order_add_last_keep_order(t, n):\n    return [t] * n + [t] + [t] + [t]\n\n# Repeating a list of n times, but keeping the list in the same order, but\n# adding a new element at the end, but keeping the order the same, but\n# adding a new element at the end, but keeping the order the same, and\n# adding a new element at the end\ndef repeat_list_order_add_last_keep_order_add_last_keep"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import deque\n\ndef rep_tup(tup, n):\n    \"\"\"\n    >>> rep_tup((1, 2, 3), 2)\n    (1, 1, 2, 2, 3, 3)\n    \"\"\"\n    tup_len = len(tup)\n    rep_list = deque()\n    for i in range(n):\n        for j in range(tup_len):\n            rep_list.append(tup[j])\n    return tuple(rep_list)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\n\ndef repeat(tup, n):\n    \"\"\"\n    :type tup: tuple\n    :type n: int\n    :rtype: tuple\n    \"\"\"\n    return tup * n\n\n\ndef repeat_namedtuple(tup, n):\n    \"\"\"\n    :type tup: namedtuple\n    :type n: int\n    :rtype: namedtuple\n    \"\"\"\n    return tup(*repeat(tup._fields, n))\n\n\nif __name__ == '__main__':\n    tup = namedtuple('tup', 'a b c')\n    print(repeat_namedtuple(tup, 3))\n    print(repeat_namedtuple(tup, 1))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    for i in range(n):\n        yield tup\n\ndef test():\n    assert list(repeat((1, 2), 2)) == [1, 2, 1, 2]\n    assert list(repeat((1, 2), 3)) == [1, 2, 1, 2, 1, 2]\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution(object):\n    def repeat(self, node, times):\n        \"\"\"\n        :type node: ListNode\n        :type times: int\n        :rtype: ListNode\n        \"\"\"\n        head = ListNode(0)\n        curr = head\n        while times > 0:\n            curr.next = node\n            node = curr.next\n            times -= 1\n            curr = curr.next\n        return head.next\n\nif __name__ == \"__main__\":\n    head = ListNode(0)\n    curr = head\n    while True:\n        curr.next = ListNode(0)\n        curr = curr.next\n        if not curr.next:\n            break\n\n    solution = Solution()\n    node = ListNode(1)\n    node.next = ListNode(2)\n    node = solution.repeat(node, 3)\n    while node:\n        print(node.val, node.next.val)\n        node = node.next.next\n    print(solution.repeat(head, 1))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def repeat_tuple(tuple_to_repeat, times):\n    result = tuple()\n    for i in range(times):\n        result.extend(tuple_to_repeat)\n    return result\n\nif __name__ == \"__main__\":\n    tuple_to_repeat = (1, 2, 3)\n    times = 2\n\n    print(repeat_tuple(tuple_to_repeat, times))\n\n    tuple_to_repeat = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    times = 10\n\n    print(repeat_tuple(tuple_to_repeat, times))\n\n    tuple_to_repeat = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    times = 5\n\n    print(repeat_tuple(tuple_to_repeat, times))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "# The solution below is a very simple implementation.\ndef repeat(tup, n):\n    return tuple(itertools.chain.from_iterable(repeat(tup, i) for i in range(n)))\n\nif __name__ == '__main__':\n    print(repeat((1, 2, 3), 2))\n    print(repeat((1, 2, 3), 3))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def repeat(t):\n    \"\"\"\n    >>> repeat((1,2,3))\n    (1, 2, 3)\n    >>> repeat((1,2,3))\n    (1, 2, 3)\n    >>> repeat((1,2,3))\n    (1, 2, 3)\n    >>> repeat((1,2,3))\n    (1, 2, 3)\n    >>> repeat((1,2,3))\n    (1, 2, 3)\n    \"\"\"\n    return tuple(t)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    if n == 1:\n        return tup\n    else:\n        return tuple([repeat(t, n - 1) for t in tup])\n\nprint(repeat((1, 2, 3, 4), 3))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "# Approach 1: Write a function that repeats a tuple n times.\n# Example: Given tuple = (1,2,3,4), repeat it n times. The output should be\n#    1,2,3,4,1,2,3,4,1,2,3,4...\n# Approach 2: Write a function that repeats a tuple n times.\n# Example: Given tuple = (1,2,3,4), repeat it n times. The output should be\n#    (1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),\n#    (1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),\n#    (1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),\n#    (1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),\n#    (1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),\n#    (1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),\n#    (1,2,3"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def repeat_tuple(tuple_to_repeat, n):\n    \"\"\"\n    :type tuple_to_repeat: tuple\n    :type n: int\n    :rtype: list\n    \"\"\"\n    result = []\n    for i in range(n):\n        result.append(tuple_to_repeat)\n    return result\n\nif __name__ == '__main__':\n    print(repeat_tuple((1, 2, 3), 3))\n    print(repeat_tuple((1, 2, 3), 2))\n    print(repeat_tuple((1, 2, 3), 1))\n    print(repeat_tuple((1, 2, 3), 0))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b c d')\n\ndef repeat(tuple):\n    \"\"\"\n    Input: tuple of length 4\n    Output: repeat tuple n times\n    \"\"\"\n    return tuple + tuple + tuple + tuple\n\nprint repeat(Tuple(1, 2, 3, 4))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def repeat(tup, n):\n    \"\"\"\n    Write a function to repeat the given tuple n times.\n\n    Example:\n        >>> repeat((1, 2, 3), 2)\n        (1, 1, 2, 2, 3, 3)\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return list(tup)\n    return [tup[0]] + repeat(tup[1:], n - 1)\n\nif __name__ == \"__main__\":\n    tup = (1, 2, 3)\n    n = 2\n    print(repeat(tup, n))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# O(n^2) solution\n# O(n) space solution\ndef repeat_tuple(tup, n):\n    for i in range(n):\n        yield tup\n\n# O(n^2) solution\ndef repeat_tuple_2(tup, n):\n    for i in range(n):\n        for j in range(n):\n            yield tup\n\n# O(n^2) solution\ndef repeat_tuple_3(tup, n):\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                yield tup\n\n# O(n^3) solution\ndef repeat_tuple_4(tup, n):\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    yield tup\n\n# O(n^3) solution\ndef repeat_tuple_5(tup, n):\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        yield tup\n\n# O(n^3) solution\ndef repeat_tuple_6(tup, n):\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        for n in range(n):\n                            yield tup\n\n# O(n^3) solution\ndef repeat_tuple_7(tup, n):\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        for n in range(n):\n                            for o in range(n):\n                                yield tup\n\n# O(n^3) solution\ndef repeat_tuple_8(tup, n):\n    for i in range(n):\n        for j in range(n):\n            for k"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def repeat(tuple_to_repeat, n):\n    \"\"\"\n    Input: tuple_to_repeat, n\n    Output: tuple_to_repeat repeated n times\n    \"\"\"\n    return tuple(tuple_to_repeat) * n\n\ndef main():\n    print(repeat((1, 2, 3), 3))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import time\n\ndef repeat(tup, n):\n    for i in range(n):\n        print tup\n\nrepeat(('a', 'b', 'c'), 3)\n\n# time.time()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def repeat(tuple_to_repeat, times):\n    \"\"\"\n    :type tuple_to_repeat: tuple\n    :type times: int\n    :rtype: tuple\n    \"\"\"\n    return tuple(itertools.repeat(x, times) for x in tuple_to_repeat)\n\n\nif __name__ == \"__main__\":\n    assert repeat((1, 2, 3), 2) == (1, 2, 3, 1, 2, 3)\n    assert repeat((1, 2, 3), 3) == (1, 2, 3, 1, 2, 3, 1, 2, 3)\n    assert repeat((1, 2, 3), 4) == (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n    assert repeat((1, 2, 3), 5) == (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef rep(tuple_to_repeat, times):\n    \"\"\"\n    :type tuple_to_repeat: tuple\n    :type times: int\n    :rtype: tuple\n    \"\"\"\n    return tuple(map(lambda x: x * times, tuple_to_repeat))\n\n\ndef main():\n    print(rep((1, 2, 3), 4))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# https://oj.leetcode.com/problems/repeated-substring-match/\n# Given a string, your task is to count how many times the string \"love\" occurs in the string.\n# Note:\n# 1. The string contains only lowercase English letters.\n# 2. The string length is less than 50.\n# 3. The string \"love\" is not a substring of the string.\n# 4. Example 1:\n# Input: \"love\"\n# Output: 2\n# Example 2:\n# Input: \"lovelemon\"\n# Output: 5\n# Example 3:\n# Input: \"lovelemonlovemon\"\n# Output: 7\n# Example 4:\n# Input: \"lovelemonmonmonmonmonmonmonmonmonmonmonmon\"\n# Output: 23\n# Example 5:\n# Input: \"lovelemonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmon\"\n# Output: 30\n# Example 6:\n# Input: \"lovelemonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmonmon\"\n# Output: 898\n\nclass Solution:\n    # @return an integer\n    def repeatedSubstring(self, s):\n        # write your code here\n        return self.repeat_str(s, \"love\")\n\n    def repeat_str(self, s, sub):\n        count = 0\n        for i in range(len(s)):\n            if s[i] == sub[0]:\n                count += 1\n                for j in range(1, len(sub)):\n                    if s[i+j] == sub[j]:\n                        count += 1\n        return count\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.repeatedSubstring(\"love\")\n    print s.repeatedSubstring(\"lovelemon\")\n    print s.repeatedSubstring(\"lovelemonlovemon\")\n    print s.repeatedSubstring(\"lovelemonlovemonlovemon\")\n    print s.repeatedSubstring(\"lovelemonlovemonlovemonlovemonlovemonlovemonlovemonlovemonlovemonlovemonlovemonlovemonlovemonlovemon"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution(object):\n    def repeat(self, t, n):\n        \"\"\"\n        :type t: List[int]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(n):\n            res.extend(t)\n        return res\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/repeat-n-times/solution/\n\n# 15ms 91.80%\nclass Solution {\n    public List<Integer> repeat(int[] t, int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            res.addAll(Arrays.asList(t));\n        }\n        return res;\n    }\n}\n\n# 16ms 93.29%\nclass Solution {\n    public List<Integer> repeat(int[] t, int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < t.length; j++) {\n                res.add(t[j]);\n            }\n        }\n        return res;\n    }\n}\n'''"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef repeat(t, n):\n    \"\"\"\n    :type t: List[int]\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    ans = []\n    for _ in range(n):\n        ans += t\n    return ans\n\n\nclass TestRepeat(unittest.TestCase):\n    def test_repeat(self):\n        self.assertEqual(repeat([1, 2, 3], 3), [1, 2, 3, 1, 2, 3])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "# Example 1\n# repeat((\"a\", 1, \"b\", \"c\"), 3) ==> (\"a\", 1, \"b\", \"c\", \"a\", 1, \"b\", \"c\", \"a\", 1, \"b\", \"c\")\n\n# Example 2\n# repeat((\"a\", 1, \"b\", \"c\"), 1) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 3\n# repeat((\"a\", 1, \"b\", \"c\"), 0) ==> ()\n\n# Example 4\n# repeat((\"a\", 1, \"b\", \"c\"), -1) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 5\n# repeat((\"a\", 1, \"b\", \"c\"), -2) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 6\n# repeat((\"a\", 1, \"b\", \"c\"), -3) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 7\n# repeat((\"a\", 1, \"b\", \"c\"), -4) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 8\n# repeat((\"a\", 1, \"b\", \"c\"), -5) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 9\n# repeat((\"a\", 1, \"b\", \"c\"), -6) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 10\n# repeat((\"a\", 1, \"b\", \"c\"), -7) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 11\n# repeat((\"a\", 1, \"b\", \"c\"), -8) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 12\n# repeat((\"a\", 1, \"b\", \"c\"), -9) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 13\n# repeat((\"a\", 1, \"b\", \"c\"), -10) ==> (\"a\", 1, \"b\", \"c\")\n\n# Example 14\n# repeat((\"a\", 1, \"b\", \"c\"), -11) ==> (\"a\", 1, \"b\", \"c\")"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "import unittest\n\n# Time:  O(n^2)\n# Space: O(n)\n# DP\n\nclass Solution(object):\n    def _repeat(self, n, s):\n        \"\"\"\n        :type n: int\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s + self._repeat(n - 1, s)\n\n    def repeat(self, n, s):\n        \"\"\"\n        :type n: int\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return self._repeat(n, s)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/repeat-string-n-times/solution/\n\n# 11ms 100%\nclass Solution {\n    public String repeat(int n, String s) {\n        if (n == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n\n# 12ms 97.68%\nclass Solution {\n    public String repeat(int n, String s) {\n        if (n == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n'''"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "# Example\n# Given [1,2,3], repeat([1,2,3], 3) should return [1,1,1,2,2,3,3,3].\n\nclass Solution(object):\n    def repeat(self, t, n):\n        \"\"\"\n        :type t: List[int]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        return [t[i] for i in range(n)]\n\n    def repeat2(self, t, n):\n        \"\"\"\n        :type t: List[int]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i in range(n):\n            result += t\n        return result"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.next = None\n\n    def __iter__(self):\n        cur = self\n        while cur:\n            yield cur.x\n            cur = cur.next\n\n\nclass Solution(object):\n    def repeat(self, t, n):\n        \"\"\"\n        :type t: Tuple\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        cur = t\n        for i in range(n):\n            res.append(cur.x)\n            cur = cur.next\n        return res"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def repeat(tuple, n):\n    \"\"\"\n    :type tuple: List[int]\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(n):\n        result.append(tuple)\n    return result\n\nprint(repeat([1, 2, 3], 2))\nprint(repeat([1, 2, 3], 3))\nprint(repeat([1, 2, 3], 4))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "import unittest\n\nfrom collections import namedtuple\nfrom functools import reduce\nfrom typing import List\n\nfrom utils.sorting_and_searching import *\n\n\nclass Test(unittest.TestCase):\n    def test_repeat_n_times(self):\n        # Test data\n        test_data = [\n            (1, 2, 3, 4),\n            (5, 6, 7, 8),\n            (9, 10, 11, 12),\n            (13, 14, 15, 16),\n            (17, 18, 19, 20),\n            (21, 22, 23, 24),\n            (25, 26, 27, 28),\n            (29, 30, 31, 32),\n        ]\n\n        # Run\n        result = repeat_n_times(test_data, 4)\n\n        # Assert\n        self.assertEqual(result, [\n            (1, 2, 3, 4),\n            (5, 6, 7, 8),\n            (9, 10, 11, 12),\n            (13, 14, 15, 16),\n            (17, 18, 19, 20),\n            (21, 22, 23, 24),\n            (25, 26, 27, 28),\n            (29, 30, 31, 32),\n        ])\n\n    def test_repeat_n_times_with_duplicates(self):\n        # Test data\n        test_data = [\n            (1, 2, 3, 4),\n            (5, 6, 7, 8),\n            (9, 10, 11, 12),\n            (13, 14, 15, 16),\n            (17, 18, 19, 20),\n            (21, 22, 23, 24),\n            (25, 26, 27, 28),\n            (29, 30, 31, 32),\n        ]\n\n        # Run\n        result = repeat_n_times(test_data, 5)\n\n        # Assert\n        self.assertEqual(result, [\n            (1, 2, 3, 4),\n            (5, 6, 7, 8),\n            (9, 10, 11, 12),\n            (13, 14, 15, 16),\n            (17, 18, 19, 20),\n            (21"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n\n    def repeat(self, times):\n        \"\"\"\n        :type times: int\n        :rtype: List[int]\n        \"\"\"\n        res = [self.nums[0]]\n        for i in range(1, times):\n            res.append(self.nums[0])\n            for j in range(1, len(self.nums)):\n                res.append(self.nums[j])\n        return res\n\nif __name__ == '__main__':\n    nums = [1,2]\n    s = Solution(nums)\n    print(s.repeat(3))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "class Solution:\n    def repeat(self, tup, n):\n        \"\"\"\n        :type tup: List[int]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i in range(n):\n            result.extend(tup)\n        return result"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def repeat(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        if n == 0:\n            return head\n        ret = ListNode(0)\n        while head:\n            ret.next = head\n            head = head.next\n        ret.next = head\n        cur = ret\n        for _ in xrange(n - 1):\n            cur = cur.next\n        return ret.next"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\n# class Tuple:\n#     def __init__(self, x):\n#         self.x = x\n#         self.next = None\n#\n#     def __iter__(self):\n#         self.next = self\n#         return self\n#\n#     def __next__(self):\n#         if self.next is None:\n#             raise StopIteration\n#         self.next = self.next.next\n#         return self.x\n#\n#\n# class Solution(object):\n#     def repeat(self, t, n):\n#         \"\"\"\n#         :type t: List[Tuple]\n#         :type n: int\n#         :rtype: List[Tuple]\n#         \"\"\"\n#         res = []\n#         for i in range(n):\n#             for tup in t:\n#                 res.append(tup)\n#         return res\n\nclass Solution(object):\n    def repeat(self, t, n):\n        \"\"\"\n        :type t: List[Tuple]\n        :type n: int\n        :rtype: List[Tuple]\n        \"\"\"\n        res = []\n        for i in range(n):\n            for tup in t:\n                res.append(tup)\n        return res"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Write your code here\ndef repeat(tuple_to_repeat):\n    # your code goes here\n    return tuple_to_repeat\n\n# tests\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])\n# repeat([1, 2, 3, 4, 5])"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __iter__(self):\n        return iter(self.x)\n\nclass Solution(object):\n    def repitition(self, t, n):\n        \"\"\"\n        :type t: List[Tuple]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        ret = []\n        for i in range(n):\n            ret.append(t)\n        return ret"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\nimport unittest\n\n# Unit tests\nclass UnitTests(unittest.TestCase):\n    def test_repeat_n_times(self):\n        self.assertEqual(repeat_n_times(2, [1, 2, 3, 4, 5, 6, 7]),\n                         [1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7])\n\n    def test_repeat_n_times_empty(self):\n        self.assertEqual(repeat_n_times(2, []), [])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# A simple solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n\n\n# Another solution\ndef repeat(tuple_to_repeat):\n    return tuple(tuple_to_repeat) * n"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __repr__(self):\n        return str(self.x)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\nclass Solution(object):\n    def repete(self, t, n):\n        \"\"\"\n        :type t: Tuple\n        :type n: int\n        :rtype: Tuple\n        \"\"\"\n        if n == 0:\n            return t\n        else:\n            return self.repete(t, n - 1) + (t, )\n\n    def repete2(self, t, n):\n        \"\"\"\n        :type t: Tuple\n        :type n: int\n        :rtype: Tuple\n        \"\"\"\n        if n == 0:\n            return t\n        else:\n            return (t, ) + self.repete2(t, n - 1)\n\n    def repete3(self, t, n):\n        \"\"\"\n        :type t: Tuple\n        :type n: int\n        :rtype: Tuple\n        \"\"\"\n        if n == 0:\n            return t\n        else:\n            return (t, ) + self.repete3(t, n - 1)\n\n    def repete4(self, t, n):\n        \"\"\"\n        :type t: Tuple\n        :type n: int\n        :rtype: Tuple\n        \"\"\"\n        if n == 0:\n            return t\n        else:\n            return (t, ) + self.repete4(t, n - 1)\n\n    def repete5(self, t, n):\n        \"\"\"\n        :type t: Tuple\n        :type n: int\n        :rtype: Tuple\n        \"\"\"\n        if n == 0:\n            return t\n        else:\n            return (t, ) + self.repete5(t, n - 1)\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.re"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def repeat(self, x, n):\n        \"\"\"\n        :type x: int\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        return [x]*n"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def repeat(tup, n):\n    for i in range(n):\n        yield tup\n\n# Your code should work for both of these cases.\nprint(list(repeat([1, 2], 2)))\nprint(list(repeat([1, 2], 3)))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef repeat(tuple_to_repeat):\n    \"\"\"\n    :type tuple_to_repeat: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for n in range(len(tuple_to_repeat)):\n        result.append(tuple_to_repeat[:n] + tuple_to_repeat[n:])\n    return result\n\n\ndef repeat_with_indices(tuple_to_repeat, n):\n    \"\"\"\n    :type tuple_to_repeat: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(n):\n        result.append(repeat(tuple_to_repeat)[i])\n    return result\n\n\nclass UnitTest(unittest.TestCase):\n\n    def test_repeat(self):\n        self.assertEqual(repeat([1, 2, 3, 4, 5]), [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\n        self.assertEqual(repeat([1, 2, 3, 4, 5]), [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\n        self.assertEqual(repeat([1, 2, 3, 4, 5]), [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\n\n    def test_repeat_with_indices(self):\n        self.assertEqual(repeat_with_indices([1, 2, 3, 4, 5], 3), [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\n        self.assertEqual(repeat_with_indices([1, 2, 3, 4, 5], 2), [[1, 2], [1, 2], [1, 2]])\n        self.assertEqual(repeat_with_indices([1"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/repeat-string-n-times/discuss/111514/Java-Solution-with-explanation\nclass Solution(object):\n    def repeatString(self, s, n):\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for _ in range(n):\n            res += s\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().repeatString(\"a\", 3) == \"aaaa\""
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n# This is a solution to the problem\ndef repeat_tuple(t: List[int], n: int) -> List[int]:\n    return [t[0]] * n + t[1:]\n\n\n# This is a solution to the problem\ndef repeat_tuple_2(t: List[int], n: int) -> List[int]:\n    return t + [t[0]] * n\n\n\n# This is a solution to the problem\ndef repeat_tuple_3(t: List[int], n: int) -> List[int]:\n    return t + [t[0]] * n + t[1:]\n\n\n# This is a solution to the problem\ndef repeat_tuple_4(t: List[int], n: int) -> List[int]:\n    return t + [t[0]] * n + [t[0]] * n\n\n\n# This is a solution to the problem\ndef repeat_tuple_5(t: List[int], n: int) -> List[int]:\n    return t + [t[0]] * n + [t[0]] * n + [t[0]] * n\n\n\n# This is a solution to the problem\ndef repeat_tuple_6(t: List[int], n: int) -> List[int]:\n    return t + [t[0]] * n + [t[0]] * n + [t[0]] * n + [t[0]] * n\n\n\n# This is a solution to the problem\ndef repeat_tuple_7(t: List[int], n: int) -> List[int]:\n    return t + [t[0]] * n + [t[0]] * n + [t[0]] * n + [t[0]] * n + [t[0]] * n\n\n\n# This is a solution to the problem\ndef repeat_tuple_8(t: List[int], n: int) -> List[int]:\n    return t + [t[0]] * n + [t[0]] * n + [t[0]] * n + [t[0]] * n + [t[0]] * n + [t[0]] * n\n\n\n# This is a solution to the problem\ndef repeat"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Your code here\ndef repeat(tup, n):\n    \"\"\"\n    >>> repeat([1, 2, 3], 2)\n    (1, 2, 3, 1, 2, 3)\n    >>> repeat([1, 2, 3], 3)\n    (1, 2, 3, 1, 2, 3, 1, 2, 3)\n    >>> repeat([1, 2, 3], 4)\n    (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n    \"\"\"\n    if n == 0:\n        return tup\n    else:\n        return repeat(tup, n-1) + tup\n\n# Your code here\ndef repeat_with_dict(tup, n):\n    \"\"\"\n    >>> repeat_with_dict([1, 2, 3], 2)\n    {1: 1, 2: 2, 3: 3}\n    >>> repeat_with_dict([1, 2, 3], 3)\n    {1: 1, 2: 2, 3: 3, 1: 1, 2: 2, 3: 3}\n    >>> repeat_with_dict([1, 2, 3], 4)\n    {1: 1, 2: 2, 3: 3, 1: 1, 2: 2, 3: 3, 1: 1, 2: 2, 3: 3, 1: 1, 2: 2, 3: 3}\n    \"\"\"\n    if n == 0:\n        return dict(tup)\n    else:\n        return repeat_with_dict(tup, n-1) + dict(tup)\n\n# Your code here\ndef repeat_with_list(tup, n):\n    \"\"\"\n    >>> repeat_with_list([1, 2, 3], 2)\n    [1, 2, 3, 1, 2, 3]\n    >>> repeat_with_list([1, 2, 3], 3)\n    [1, 2, 3, 1, 2, 3, 1, 2, 3]\n    >>> repeat_with_list([1, 2, 3], 4)\n    [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n    \"\"\"\n    if n == 0:\n        return"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def repeat(tuple_to_repeat, n):\n    \"\"\"\n    >>> repeat((1, 2), 2)\n    (1, 2, 1, 2)\n    \"\"\"\n    return tuple_to_repeat * n"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __iter__(self):\n        return self\n\n    def next(self):\n        self.y += 1\n        if self.y > 1:\n            raise StopIteration\n        return self.x\n\n# Note:\n#\n# You can use a list to store the result, but you should use a set to\n# remove duplicates.\n\n# Example:\n\n# Input:\n# n = 3\n# tuple = (1,2)\n# Output:\n# [1,2,1,2,1,2]\n# Set([1,2,1,2,1,2])\n\n# Time:  O(n)\n# Space: O(n)\n#\n# Runtime: 23 ms, faster than 65.76% of Python online submissions for Repeating Tuples.\n#\n# Total Accepted: 93499\n# Total Submissions: 254962\n# Difficulty: Easy\n# Contributor: LeetCode\n#\n# Given an array of n integers where n > 1, nums, return an array output such\n# that output[i] is equal to the product of all the elements of nums except\n# nums[i].\n#\n# Solve it without division and in O(n).\n#\n# For example, given [1,2,3,4], return [24,12,8,6].\n#\n# Follow up:\n# Could you solve it with constant space complexity? (Note: The output array\n# does not count as extra space for the purpose of space complexity analysis.)\n#\n# Companies\n# LinkedIn\n# Related Topics\n# Divide and Conquer\n# Similar Questions\n# Product of Array Except Self\n#\nimport unittest\nclass Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = [1] * len(nums)\n        for i in range(1, len(nums)):\n            res[i] = res[i - 1] * nums[i"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# TODO:\n# - add example\n# - add more tests\n# - add a function to repeat a tuple n times\n\ndef repeat(tuple, n):\n    \"\"\"\n    Write a function to repeat the given tuple n times.\n\n    >>> repeat((1, 2, 3), 2)\n    (1, 2, 3, 1, 2, 3)\n    >>> repeat((1, 2, 3), 4)\n    (1, 2, 3, 1, 2, 3, 1, 2, 3)\n    >>> repeat((1, 2, 3), -1)\n    Traceback (most recent call last):\n   ...\n    ValueError: n is less than 0\n    \"\"\"\n    # TODO: write a proper test case\n    if n < 0:\n        raise ValueError('n is less than 0')\n\n    result = tuple[:]\n    for _ in range(n):\n        result.extend(tuple)\n\n    return result\n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.next = None\n\n    def __iter__(self):\n        self.cur = self\n        return self\n\n    def next(self):\n        if self.cur is None:\n            self.cur = self.next\n            self.next = Tuple(self.cur.x)\n            return self.cur.x\n        else:\n            self.cur = self.cur.next\n            return self.cur.x\n\n# Your Solution here.\nclass Solution:\n    def rep(self, t, n):\n        if n == 0:\n            return\n        if n == 1:\n            return t\n        # cur = t\n        # for i in range(2, n):\n        #     cur = Tuple(cur.next)\n        #     cur.next = t\n        # return cur\n        # cur = t\n        # for i in range(n):\n        #     cur = Tuple(cur.next)\n        #     cur.next = t\n        # return cur\n        # cur = t\n        # for i in range(n):\n        #     cur = Tuple(cur.next)\n        #     cur.next = t\n        #     t = cur\n        # return t\n        # cur = t\n        # for i in range(n):\n        #     cur = Tuple(cur.next)\n        #     cur.next = t\n        #     t = cur\n        # return t\n        # cur = t\n        # for i in range(n):\n        #     cur = Tuple(cur.next)\n        #     cur.next = t\n        #     t = cur\n        # return t\n        # cur = t\n        # for i in range(n):\n        #     cur = Tuple(cur.next)\n        #     cur.next = t\n        #     t = cur\n        # return t\n        # cur = t\n        # for i in range(n):\n        #     cur = Tuple(cur.next)\n        #     cur.next = t\n        #     t = cur\n        # return t\n        #"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def repeat_tuple(tuple_to_repeat, n):\n    \"\"\"\n    Args:\n        tuple_to_repeat (tuple): The tuple to repeat.\n        n (int): The number of times to repeat the tuple.\n\n    Returns:\n        tuple: The repeated tuple.\n    \"\"\"\n    return tuple(tuple_to_repeat * n)\n\nif __name__ == '__main__':\n    tuple_to_repeat = (1, 2, 3)\n    n = 2\n\n    print(repeat_tuple(tuple_to_repeat, n))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def repeat(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n_n_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n_n_n_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n_n_n_n_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n_n_n_n_n_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n_n_n_n_n_n_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n_n_n_n_n_n_n_n_n(tup, n):\n    for i in range(n):\n        yield tup\n\ndef repeat_it_n_n_n_n_n_n_n_n_n_n_n_n(t"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\nclass Solution(object):\n    def repete(self, t, n):\n        \"\"\"\n        :type t: Tuple\n        :type n: int\n        :rtype: List[Tuple]\n        \"\"\"\n        res = []\n        for i in range(n):\n            res.append(t)\n        return res"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def rep(self, t, n):\n        \"\"\"\n        :type t: List[int]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        return [t[i] for i in range(n)]"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def repeat(self, t, n):\n        \"\"\"\n        :type t: Tuple\n        :type n: int\n        :rtype: List[Tuple]\n        \"\"\"\n        res = []\n        for _ in xrange(n):\n            res.append(t)\n        return res\n\nif __name__ == \"__main__\":\n    assert Solution().repeat([1,2,3], 3) == [1,2,3]\n    assert Solution().repeat([1,2,3], 0) == []"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __iter__(self):\n        return iter([self.x])\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n):\n    if n == 1:\n        return [t]\n    return [t] + repeat(t, n - 1)\n\n# Your Solution\ndef repeat(t, n"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def __init__(self):\n        self.count = 0\n\n    def repeat(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        newhead = ListNode(0)\n        newhead.next = head\n        tail = newhead\n        while n > 0:\n            tail.next = head\n            head = head.next\n            n -= 1\n        return newhead.next\n\n    def repeat2(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        newhead = ListNode(0)\n        newhead.next = head\n        tail = newhead\n        while n > 0:\n            tail.next = head\n            head = head.next\n            tail = tail.next\n            n -= 1\n        return newhead.next\n\n\nclass Solution2(object):\n    def __init__(self):\n        self.count = 0\n\n    def repeat(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        newhead = ListNode(0)\n        newhead.next = head\n        tail = newhead\n        while n > 0:\n            tail.next = head\n            head = head.next\n            tail = tail.next\n            n -= 1\n        return newhead.next\n\n    def repeat2(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        newhead = ListNode(0)\n        newhead.next = head\n        tail = newhead\n        while n > 0:\n            tail.next"
    }
  ]
}