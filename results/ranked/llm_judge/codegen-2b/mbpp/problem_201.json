{
  "timestamp": "2025-09-14T18:51:23.818385",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 201,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum4p(n):\n    return sum(n ** 4)\n\ndef main():\n    print(sum4p(10))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef sum_of_fourth_power(n):\n    \"\"\"\n    >>> sum_of_fourth_power(4)\n    24\n    >>> sum_of_fourth_power(6)\n    360\n    >>> sum_of_fourth_power(100)\n    282784\n    \"\"\"\n    return reduce(lambda x, y: x + y ** 4, range(1, n + 1))\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def sum4thPower(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 4 == 0:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    print(sum4thPower(100))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def sum_fourth_power(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n\nprint sum_fourth_power(5)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def sum_of_fourth_power(n):\n    s = 0\n    for i in range(1, n+1):\n        s = s + (i**4)\n    return s\n\nprint(sum_of_fourth_power(10))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def sum_of_fourth_power_n(n):\n    # Write your code here\n    sum_of_fourth_power_n = 0\n    for i in range(1, n + 1):\n        sum_of_fourth_power_n += (i ** 4)\n    return sum_of_fourth_power_n\n\n\nif __name__ == '__main__':\n    print sum_of_fourth_power_n(10)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def fourth_power_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nprint fourth_power_sum(20)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sum4(n):\n    return sum(i**4 for i in range(1, n+1))\n\ndef sum4_2(n):\n    return sum(i**4 for i in range(1, n+1))\n\nprint sum4(10)\nprint sum4_2(10)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sum4(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n\nif __name__ == '__main__':\n    print sum4(4)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def sum4(n):\n    s = 0\n    for i in range(1, n+1):\n        s += i**4\n    return s\n\nprint sum4(1000)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from itertools import count\nfrom operator import mul\n\ndef fourth_power(n):\n    \"\"\"\n    n: natural number\n    return: sum of fourth power of n natural numbers\n    \"\"\"\n    return sum(mul(mul(n, n), n, n))\n\nif __name__ == \"__main__\":\n    for i in count(1):\n        print(fourth_power(i))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# Sum of 4th power of natural numbers\n# https://www.hackerrank.com/challenges/sum-fourth-power-of-natural-numbers/problem\n\n# My solution\n# https://www.hackerrank.com/challenges/sum-fourth-power-of-natural-numbers/submissions/code/29181401\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\ndef sum_fourth_power_of_n_natural_numbers(n):\n    sum_fourth_power = 0\n    for i in range(1, n+1):\n        sum_fourth_power += i ** 4\n    return sum_fourth_power\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(sum_fourth_power_of_n_natural_numbers(n))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def sumOf4Power(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum\n\nprint sumOf4Power(10)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def nth_power(n):\n    sum = 0\n    for i in range(n):\n        sum += (i**4)\n    return sum\n\nprint nth_power(100)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def sum_fourth_power(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i ** 4)\n    return sum\n\nif __name__ == \"__main__\":\n    print(sum_fourth_power(5))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def sum4(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 4\n    return sum\n\nprint(sum4(10))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def sum_fourth_power(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nprint(sum_fourth_power(10))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def sum4(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nprint sum4(10)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def sum_fourth_power(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nprint sum_fourth_power(10)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def sum4(n):\n    return sum(n ** 4 for n in range(n))\n\nif __name__ == \"__main__\":\n    assert sum4(100) == 784179968"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def fourth_power(n):\n\ts = 0\n\tfor i in range(1, n):\n\t\ts += i ** 4\n\treturn s\n\nprint fourth_power(10)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def sum_of_fourth_power(n):\n    s = 0\n    for i in range(1, n):\n        s += i**4\n    return s\n\n# This solution is from Stack Overflow.\n# https://stackoverflow.com/questions/26001698/python-sum-of-fourth-power-of-natural-numbers\ndef sum_of_fourth_power(n):\n    s = 0\n    for i in range(1, n):\n        s += i**4\n    return s\n\n# This solution is from Stack Overflow.\n# https://stackoverflow.com/questions/26001698/python-sum-of-fourth-power-of-natural-numbers\ndef sum_of_fourth_power(n):\n    s = 0\n    for i in range(1, n):\n        s += i**4\n    return s\n\n# This solution is from Stack Overflow.\n# https://stackoverflow.com/questions/26001698/python-sum-of-fourth-power-of-natural-numbers\ndef sum_of_fourth_power(n):\n    s = 0\n    for i in range(1, n):\n        s += i**4\n    return s\n\n# This solution is from Stack Overflow.\n# https://stackoverflow.com/questions/26001698/python-sum-of-fourth-power-of-natural-numbers\ndef sum_of_fourth_power(n):\n    s = 0\n    for i in range(1, n):\n        s += i**4\n    return s\n\n# This solution is from Stack Overflow.\n# https://stackoverflow.com/questions/26001698/python-sum-of-fourth-power-of-natural-numbers\ndef sum_of_fourth_power(n):\n    s = 0\n    for i in range(1, n):\n        s += i**4\n    return s\n\n# This solution is from Stack Overflow.\n# https://stackoverflow.com/questions/26001698/python-sum-of-fourth-power-of-natural-numbers\ndef sum_of_fourth_"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def fourth_power(n):\n    return n ** 4\n\nif __name__ == '__main__':\n    print fourth_power(3)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param n, an integer\n    # @return an integer\n    def fourthRoot(self, n):\n        if n == 0 or n == 1:\n            return n\n        if n % 4 == 0:\n            return self.fourthRoot(self.fourthRoot(n/4)) * 4\n        else:\n            return self.fourthRoot(n/4)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.fourthRoot(4)\n    print s.fourthRoot(5)\n    print s.fourthRoot(6)\n    print s.fourthRoot(7)\n    print s.fourthRoot(8)\n    print s.fourthRoot(9)\n    print s.fourthRoot(10)\n    print s.fourthRoot(11)\n    print s.fourthRoot(12)\n    print s.fourthRoot(13)\n    print s.fourthRoot(14)\n    print s.fourthRoot(15)\n    print s.fourthRoot(16)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def sum_fourth_power_of_n_natural_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum\n\nprint(sum_fourth_power_of_n_natural_numbers(4))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def sum4P(n):\n    s = 0\n    for i in range(n):\n        s += pow(i, 4)\n    return s\n\n# This is the interface between the function and the driver\ndef main():\n    for n in range(1, 10):\n        print(sum4P(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def four_power_sum(n):\n    result = 0\n    for i in range(n,0,-1):\n        result += i**4\n    return result\n\nprint four_power_sum(10)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def sum_fourth_power_of_n_natural_numbers(n):\n    sum = 0\n    for i in range(1,n):\n        sum += i ** 4\n    return sum\n\ndef test():\n    assert(sum_fourth_power_of_n_natural_numbers(10) == sum_fourth_power_of_n_natural_numbers(100))\n    assert(sum_fourth_power_of_n_natural_numbers(100) == sum_fourth_power_of_n_natural_numbers(1000))\n    assert(sum_fourth_power_of_n_natural_numbers(1000) == sum_fourth_power_of_n_natural_numbers(10000))\n    assert(sum_fourth_power_of_n_natural_numbers(10000) == sum_fourth_power_of_n_natural_numbers(100000))\n    assert(sum_fourth_power_of_n_natural_numbers(100000) == sum_fourth_power_of_n_natural_numbers(1000000))\n    assert(sum_fourth_power_of_n_natural_numbers(1000000) == sum_fourth_power_of_n_natural_numbers(10000000))\n    assert(sum_fourth_power_of_n_natural_numbers(10000000) == sum_fourth_power_of_n_natural_numbers(100000000))\n    assert(sum_fourth_power_of_n_natural_numbers(100000000) == sum_fourth_power_of_n_natural_numbers(1000000000))\n    assert(sum_fourth_power_of_n_natural_numbers(1000000000) == sum_fourth_power_of_n_natural_numbers(10000000000))\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def sum_fourth(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i ** 4\n    return sum\n\nif __name__ == \"__main__\":\n    print(sum_fourth(4))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def sum_fourth(n):\n    return sum(i**4 for i in range(n))\n\nprint(sum_fourth(100))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def sum4(n):\n    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum\n\n\n\n# Test case\nn = 10\nprint(sum4(n))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def sum_of_fourth_power(n):\n    sum = 0\n    for i in range(1, n):\n        sum += i ** 4\n    return sum\n\nprint(sum_of_fourth_power(100))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def sum_four_power(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 4\n    return total\n\nprint(sum_four_power(100))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def sum_fourth_power_of_n_natural_numbers(n):\n    sum_of_fourth_power_of_n_natural_numbers = 0\n\n    for i in range(1, n):\n        sum_of_fourth_power_of_n_natural_numbers += i ** 4\n\n    return sum_of_fourth_power_of_n_natural_numbers\n\nif __name__ == '__main__':\n    # n = 10\n    # print sum_fourth_power_of_n_natural_numbers(n)\n    # n = 100\n    # print sum_fourth_power_of_n_natural_numbers(n)\n    # n = 1000\n    # print sum_fourth_power_of_n_natural_numbers(n)\n    # n = 10000\n    # print sum_fourth_power_of_n_natural_numbers(n)\n    # n = 100000\n    # print sum_fourth_power_of_n_natural_numbers(n)\n    # n = 1000000\n    # print sum_fourth_power_of_n_natural_numbers(n)\n    n = 10000000\n    print sum_fourth_power_of_n_natural_numbers(n)"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def fourthPower(n):\n    return n ** 4\n\ndef main():\n    n = 0\n    sum = 0\n    for i in range(1, 1000000):\n        if fourthPower(i) == i ** 4:\n            sum += i\n    print sum\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "def sum_fourth_power(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i ** 4)\n    return sum\n\ndef main():\n    print(sum_fourth_power(100))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "import math\n\ndef sum_fourth_power(n):\n    \"\"\"\n    :param n: natural number\n    :return: sum of fourth power of n natural numbers\n    \"\"\"\n    return sum(i ** 4 for i in range(1, n + 1))\n\nif __name__ == '__main__':\n    print sum_fourth_power(2)\n    print sum_fourth_power(3)\n    print sum_fourth_power(4)\n    print sum_fourth_power(5)\n    print sum_fourth_power(6)\n    print sum_fourth_power(7)\n    print sum_fourth_power(8)\n    print sum_fourth_power(9)\n    print sum_fourth_power(10)\n    print sum_fourth_power(11)\n    print sum_fourth_power(12)\n    print sum_fourth_power(13)\n    print sum_fourth_power(14)\n    print sum_fourth_power(15)\n    print sum_fourth_power(16)\n    print sum_fourth_power(17)\n    print sum_fourth_power(18)\n    print sum_fourth_power(19)\n    print sum_fourth_power(20)"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "def fourthPower(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 4)\n    return sum\n\nprint fourthPower(10)"
    },
    {
      "rank": 39,
      "score": 9.0,
      "candidate": "def sum_of_fourth_power(n):\n    \"\"\"\n    >>> sum_of_fourth_power(10)\n    1\n    >>> sum_of_fourth_power(100)\n    100\n    >>> sum_of_fourth_power(1000)\n    1000\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.0,
      "candidate": "def sum4(n):\n    return n * (n * n * n * n)\n\ndef sum4_rec(n):\n    if n == 1:\n        return n\n    else:\n        return n * (n * n * n * n) + sum4_rec(n - 1)\n\nprint sum4(10)\nprint sum4_rec(10)"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "def fourthPower(n):\n    \"\"\"\n    >>> fourthPower(5)\n    120\n    \"\"\"\n    return n * n * n * n * n\n\nif __name__ == '__main__':\n    print fourthPower(5)"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "#!/usr/bin/env python\n\ndef sumOfFourthPower(n):\n    sum = 0\n    for i in range(1, n):\n        sum += i ** 4\n    return sum\n\nif __name__ == '__main__':\n    print sumOfFourthPower(5)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def fourth_power_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of n natural numbers.\n\n    >>> fourth_power_sum(15)\n    30\n    >>> fourth_power_sum(20)\n    55\n    >>> fourth_power_sum(100)\n    5500\n    \"\"\"\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nif __name__ == '__main__':\n    print fourth_power_sum(15)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_sum_of_fourth_power_of_n(n):\n    sum_of_fourth_power = 0\n    for i in range(1, n + 1):\n        sum_of_fourth_power += i ** 4\n    return sum_of_fourth_power\n\nif __name__ == '__main__':\n    print find_sum_of_fourth_power_of_n(100)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def sum_fourth(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n\ndef main():\n    print(sum_fourth(20))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def get_sum_of_fourth_power_of_n_natural_numbers(n):\n    return sum(n**4)\n\nif __name__ == \"__main__\":\n    n = 100\n    print(get_sum_of_fourth_power_of_n_natural_numbers(n))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def sum_fourth_power_n(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 4\n    return sum\n\nif __name__ == \"__main__\":\n    print sum_fourth_power_n(100)\n    print sum_fourth_power_n(1000)\n    print sum_fourth_power_n(10000)\n    print sum_fourth_power_n(100000)\n    print sum_fourth_power_n(1000000)\n    print sum_fourth_power_n(10000000)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def f(n):\n    s = 0\n    for i in range(1, n):\n        s += i**4\n    return s\n\nprint f(100)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def sum_nth_power(n):\n    return sum(nth_power(n))\n\ndef nth_power(n):\n    if n < 2:\n        return 1\n    else:\n        return n * (n ** 3) / (n ** 4)\n\nprint(sum_nth_power(10))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(sum_of_fourth_power(5))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power(n):\n    sum_of_fourth_power = 0\n    for i in range(1, n+1):\n        sum_of_fourth_power += i**4\n    return sum_of_fourth_power\n\nprint sum_of_fourth_power(20)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power_n(n):\n    return sum(map(lambda x: x ** 4, range(1, n + 1)))\n\nif __name__ == '__main__':\n    print sum_of_fourth_power_n(10)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**4\n    return sum\n\nif __name__ == \"__main__\":\n    print(find_sum(10))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport sys\n\ndef find_sum_fourth_power_of_natural_numbers(n):\n    '''\n    n is a positive integer\n    return the sum of all the fourth power of natural numbers less than n\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nif __name__ == '__main__':\n    n = int(sys.argv[1])\n    print find_sum_fourth_power_of_natural_numbers(n)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_sum(n):\n    total = 0\n    for i in range(n):\n        total = total + (i**3)\n    return total\n\nprint \"The sum of the fourth power of natural numbers is\", find_sum(10)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def sum_fourth_power_n(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n\n\nif __name__ == '__main__':\n    print(sum_fourth_power_n(100))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def sum4Power(n):\n    return sum([n**4 for i in range(n)])\n\nprint(sum4Power(10))\n#>>> 49152\n\n#Test\nfor n in range(10):\n    print(sum4Power(n))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "# Your code here\n\ndef sum_fourth_power_of_n(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 4\n    return sum\n\nprint sum_fourth_power_of_n(4)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import math\n\ndef sum4pow(n):\n    return sum(int(math.pow(i, 4)) for i in range(1, n + 1))\n\nprint(sum4pow(1000))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def find_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 4\n    return sum\n\n# Test Cases\nprint find_sum(10)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def get_sum(n):\n    \"\"\"\n    n is the number of natural numbers\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nif __name__ == \"__main__\":\n    print get_sum(5)\n    print get_sum(6)\n    print get_sum(7)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def sum4(n):\n    \"\"\"\n    >>> sum4(100)\n    2625\n    >>> sum4(50)\n    1656\n    >>> sum4(10)\n    56\n    >>> sum4(4)\n    24\n    >>> sum4(1)\n    1\n    \"\"\"\n    return sum(n ** 4 for n in range(1, n + 1))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power_of_n_natural_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i**4)\n    return sum\n\n\nprint sum_of_fourth_power_of_n_natural_numbers(10)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sum4pow(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i**4 == n:\n            sum += i\n    return sum\n\nprint(sum4pow(10))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power_of_n_natural_numbers(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 4)\n    return sum\n\nprint(sum_of_fourth_power_of_n_natural_numbers(3))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power_of_n(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += i ** 4\n    return s\n\nif __name__ == \"__main__\":\n    print sum_of_fourth_power_of_n(10)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "import math\n\n\ndef fourth_power(n):\n    \"\"\"\n    Find the sum of the fourth power of n natural numbers.\n    \"\"\"\n\n    sum = 0\n\n    for i in range(1, n+1):\n        sum += i**4\n\n    return sum\n\nprint fourth_power(100)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def sum4power(n):\n    return sum(i**4 for i in range(1, n+1))\n\n\nprint(sum4power(10))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import time\n\n\ndef sum4p(n):\n    \"\"\"\n    >>> sum4p(1)\n    1\n    >>> sum4p(2)\n    4\n    >>> sum4p(3)\n    9\n    >>> sum4p(4)\n    16\n    >>> sum4p(5)\n    25\n    >>> sum4p(6)\n    36\n    \"\"\"\n    return sum(n ** 4)\n\n\ndef run():\n    \"\"\"\n    Runs the function and returns its result.\n    \"\"\"\n    start = time.time()\n    print(sum4p(10 ** 6))\n    print('Time elapsed: {}'.format(time.time() - start))\n    return sum4p(10 ** 6)\n\n\nif __name__ == '__main__':\n    print(run())"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "# @author: Michael Betancourt\n# @date:   2015-07-21\n# @usage:  python sum4pow.py n\n# @license: MIT\n# @note:   The function must return a number.\n\ndef sum4pow(n):\n  \"\"\"\n  Function to calculate the sum of the fourth power of n natural numbers.\n\n  @param n: The number of natural numbers\n  @return: The sum of the fourth power of n natural numbers.\n  \"\"\"\n  # The sum of the fourth power of the n natural numbers.\n  sum = 0\n\n  # Sum of the fourth power of each natural number.\n  for i in range(0, n):\n    sum += i ** 4\n\n  return sum\n\n# Run the function and print the output.\nprint sum4pow(10)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power_of_n_natural_numbers(n):\n    \"\"\"\n    >>> sum_of_fourth_power_of_n_natural_numbers(2)\n    28\n    >>> sum_of_fourth_power_of_n_natural_numbers(5)\n    1346\n    >>> sum_of_fourth_power_of_n_natural_numbers(6)\n    2340\n    \"\"\"\n\n    if n < 1:\n        return 0\n\n    result = 0\n    for i in range(n, 0, -1):\n        result += i ** 4\n        if result % 1000000 == 0:\n            print(result)\n\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def sumOf4thPower(n):\n    \"\"\"\n    n is an integer\n    return the sum of all fourth power of natural numbers\n    \"\"\"\n\n    # Initialize a dictionary to store all the results\n    results = {}\n\n    # Initialize a counter to keep track of the number of fourth powers\n    count = 0\n\n    # Initialize a counter to keep track of the number of natural numbers\n    num = 1\n\n    # Iterate over all the natural numbers from 1 to n\n    while num < n:\n        # Add the current number to the counter\n        count += 1\n\n        # Add the current number to the results dictionary\n        results[num] = num * num * num * num\n\n        # Increment the number of natural numbers\n        num += 1\n\n    # Return the sum of the fourth power of all the natural numbers\n    return sum(results.values())\n\nif __name__ == \"__main__\":\n    print sumOf4thPower(10)"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\n\ndef sumOfNthPower(n):\n    s = 0\n    for i in range(1, n):\n        s += i ** 4\n    return s\n\nprint(sumOfNthPower(4))\nprint(sumOfNthPower(5))\nprint(sumOfNthPower(6))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def sum4(n):\n    \"\"\"\n    sum4(n)\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if i ** 4 == i:\n            sum += i\n    return sum\n\nprint(sum4(5))\nprint(sum4(20))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power(n):\n    # sum of fourth power of natural number n\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (4*i**3)\n    return sum\n\nif __name__ == \"__main__\":\n    print(sum_of_fourth_power(5))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def sum4power(n):\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 4)\n    return sum\n\nprint(sum4power(10))\n#>>> 16"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def sum_fourth_power_of_n_natural_numbers(n):\n    \"\"\"\n    Input:\n        n: the number of the natural numbers\n    Output:\n        the sum of fourth power of n natural numbers\n    \"\"\"\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + pow(i,3)\n    return sum\n\nprint sum_fourth_power_of_n_natural_numbers(15)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def sum4p(n):\n    return sum(n**4)\n\nif __name__ == \"__main__\":\n    print(sum4p(1))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def sum_fourth_power(n):\n    return sum(n**4)\n\nprint(sum_fourth_power(4))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def sum_fourth_power_of_n(n):\n    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum\n\nprint sum_fourth_power_of_n(20)"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def sum_fourth(n):\n    \"\"\"\n    sum_fourth(n)\n    \n    :param n: an integer\n    :return: sum of fourth power of n natural numbers\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum\n\nprint(sum_fourth(4))\n\n\"\"\"\nOutput:\n\n>>> sum_fourth(4)\n10\n\"\"\""
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def fourth_power_sum(n):\n    return sum(1 + (n ** 4) / (2 * n ** 3))\n\nif __name__ == '__main__':\n    print fourth_power_sum(10)"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "# Function to find the sum of fourth power of n natural numbers\ndef sum4(n):\n    # Base Case\n    if n == 1:\n        return 1\n\n    # Recursive Case\n    return sum4(n-1) + sum4(n-2) + sum4(n-3) + sum4(n-4)\n\n# Test Cases\nprint(sum4(5))\nprint(sum4(6))\nprint(sum4(7))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def sum_fourth(n):\n    return sum([n ** 4 for _ in range(n)])\n\nprint sum_fourth(100)"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def sum4(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += pow(i, 4)\n    return sum\n\nprint(sum4(1))\nprint(sum4(5))\nprint(sum4(10))\nprint(sum4(100))\nprint(sum4(1000))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef fourthPower(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum\n\nprint fourthPower(10)"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power_of_n_natural_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nif __name__ == \"__main__\":\n    print sum_of_fourth_power_of_n_natural_numbers(10)"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def sum_nth_power(n):\n    \"\"\"\n    >>> sum_nth_power(6)\n    54\n    >>> sum_nth_power(10)\n    622\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        s += i ** 4\n    return s\n\ndef test():\n    assert sum_nth_power(6) == 54\n    assert sum_nth_power(10) == 622\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def nth_power_of_n(n):\n    \"\"\"\n    Find the sum of nth power of natural numbers.\n\n    Input:\n    n: A natural number.\n\n    Output:\n    The sum of nth power of natural numbers.\n\n    Explanation:\n    If n = 3, it is possible to divide the sum of the fourth power of natural\n    numbers into the sum of the fourth power of three natural numbers. The\n    sum of the fourth power of natural numbers is 1 + 1 + 1 + 1 = 4.\n\n    If n = 4, it is possible to divide the sum of the fourth power of natural\n    numbers into the sum of the fourth power of four natural numbers. The sum\n    of the fourth power of natural numbers is 1 + 1 + 1 + 1 + 1 = 4.\n    \"\"\"\n\n    sum_of_fourth_power_of_n = 0\n\n    for i in range(1, n + 1):\n        sum_of_fourth_power_of_n += i ** 4\n\n    return sum_of_fourth_power_of_n\n\nif __name__ == \"__main__\":\n    print nth_power_of_n(3)\n    print nth_power_of_n(4)\n    print nth_power_of_n(5)\n    print nth_power_of_n(6)\n    print nth_power_of_n(7)\n    print nth_power_of_n(8)\n    print nth_power_of_n(9)\n    print nth_power_of_n(10)"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n\n\nif __name__ == '__main__':\n    print sum_of_fourth_power_n(5)"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i == 1:\n            sum += i\n        elif i % 4 == 0:\n            sum += i ** 4\n        elif i % 4 == 1:\n            sum += i ** 3\n        elif i % 4 == 2:\n            sum += i ** 2\n        else:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    print(sum_of_fourth_power(4))\n    print(sum_of_fourth_power(15))\n    print(sum_of_fourth_power(100))\n    print(sum_of_fourth_power(500))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def nth(n):\n    return n*(n*(n*(n*(n*n))+1)-1)/6\n\ndef sum_of_four_n(n):\n    return nth(n)*nth(n)*nth(n)*nth(n)\n\nif __name__ == '__main__':\n    print sum_of_four_n(10)"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def sum_of_fourth_power_of_n(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**4)\n    return sum\n\nprint sum_of_fourth_power_of_n(100)\n#>>> 12246875\n\n#>>> sum_of_fourth_power_of_n(1000)\n#>>> 515302625"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def sum_fourth_power_of_n(n):\n    sum_of_fourth_power = 0\n    for i in range(n):\n        sum_of_fourth_power += i**4\n    return sum_of_fourth_power\n\nprint(sum_fourth_power_of_n(4))"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "# Import the required libraries\nfrom math import sqrt\n\n# Function to sum the fourth power of n natural numbers\ndef sum_fourth_power_n(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n\n# The following is the main function\nprint(\"Sum of the fourth power of n natural numbers\")\nprint(\"Sum of the fourth power of n natural numbers:\", sum_fourth_power_n(50))"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sum_of_fourth_power(n):\n    \"\"\"\n    sum_of_fourth_power(n) -> int\n\n    :param n: an integer\n    :return: sum of fourth power of n natural numbers\n    \"\"\"\n    return sum(map(lambda x: x ** 4, range(1, n + 1)))\n\n\nif __name__ == \"__main__\":\n    print sum_of_fourth_power(10)"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "def get_sum_of_fourth_power(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i**4 == n:\n            sum += i\n    return sum\n\nprint(get_sum_of_fourth_power(200))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import timeit\n\n\ndef sum_fourth_power(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n\n\nif __name__ == '__main__':\n    print(timeit.timeit(\"sum_fourth_power(10000)\", setup=\"from __main__ import sum_fourth_power\", number=1))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def sum_of_fourth_power_of_n_natural_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += pow(i, 4)\n    return sum\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_of_fourth_power_of_n_natural_numbers(2) == 4, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(3) == 12, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(4) == 36, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(5) == 210, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(6) == 420, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(7) == 730, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(8) == 840, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(9) == 1290, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(10) == 1680, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(11) == 2310, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(12) == 3600, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(13) == 4490, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(14) == 7390, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(15) == 11470, \"Example\"\n    assert sum_of_fourth_power_of_n_natural_numbers(16) == 16800, \""
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# @include\ndef sum4(n):\n    return sum(int(n ** 4))\n# @exclude\n\n\ndef main():\n    n = 10\n    sum4_expected = sum(int(n ** 4))\n    sum4_actual = sum4(n)\n    print(f\"sum4(n) = {sum4_actual}\")\n    print(f\"sum4_expected = {sum4_expected}\")\n    assert sum4_actual == sum4_expected, \"sum4 is wrong\"\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}