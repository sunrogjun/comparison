{
  "timestamp": "2025-09-14T20:55:59.098604",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 480,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    n -> the number of terms in the series\n\n    Returns the sum of geometric progression series.\n    \"\"\"\n    return (1 + n) ** n\n\n\ndef main():\n    \"\"\"\n    Testing\n    \"\"\"\n    print(sum_geometric_progression(0))\n    print(sum_geometric_progression(1))\n    print(sum_geometric_progression(2))\n    print(sum_geometric_progression(3))\n    print(sum_geometric_progression(4))\n    print(sum_geometric_progression(5))\n    print(sum_geometric_progression(6))\n    print(sum_geometric_progression(7))\n    print(sum_geometric_progression(8))\n    print(sum_geometric_progression(9))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def geom_progression_sum(n):\n    \"\"\"\n    Write a function to find the sum of geometric progression series.\n\n    Args:\n        n (int): The number of terms in the series.\n\n    Returns:\n        (int): The sum of geometric progression series.\n    \"\"\"\n    return (1 + (n + 1) * (1 + (n + 2) * (1 + (n + 3) * (1 + (n + 4) * (1 + (n + 5) * (1 + (n + 6) * (1 + (n + 7) * (1 + (n + 8) * (1 + (n + 9) * (1 + (n + 10) * (1 + (n + 11) * (1 + (n + 12) * (1 + (n + 13) * (1 + (n + 14) * (1 + (n + 15) * (1 + (n + 16) * (1 + (n + 17) * (1 + (n + 18) * (1 + (n + 19) * (1 + (n + 20) * (1 + (n + 21) * (1 + (n + 22) * (1 + (n + 23) * (1 + (n + 24) * (1 + (n + 25) * (1 + (n + 26) * (1 + (n + 27) * (1 + (n + 28) * (1 + (n + 29) * (1 + (n + 30) * (1 + (n + 31) * (1 + (n + 32) * (1 + (n + 33) * (1 + (n + 34) * (1 + (n + 35) * (1 + (n + 36) * (1 + (n + 37) * (1 + (n + 38) * (1 + (n + 39) * (1 + (n + 40) * (1 + (n + 41) * (1 + (n + 42) * (1 + (n + 43) * (1 + (n + 44) * (1 + (n + 45) * (1 + (n + 46) * (1 + (n + 47) * (1 + (n + 48) * (1 + (n + 49) * (1"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getSumGeoProg(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        s = 0\n        for i in range(2, n + 1):\n            s += i * (i - 1) // 2\n        return s"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        ans = 1\n        for i in range(1, n):\n            ans = ans * i\n        return ans"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # write your code here\n    ans = 0\n    for i in range(1, n+1):\n        ans += i**(n-i+1)\n    return ans\n\nif __name__ == '__main__':\n    print sum_geometric_progression(10)\n    print sum_geometric_progression(100)\n    print sum_geometric_progression(1000)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Definition for a  geometric progression.\nclass Progression:\n    def __init__(self, n, k):\n        self.n = n\n        self.k = k\n\n    def __repr__(self):\n        return \"Progression(%d, %d)\" % (self.n, self.k)\n\ndef solve(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return sum(map(lambda p: 1 << p.k, Progression(n, k)))\n\nif __name__ == \"__main__\":\n    #assert solve(4, 1) == 1\n    #assert solve(5, 2) == 8\n    assert solve(6, 2) == 16"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from math import sqrt\nfrom itertools import count\n\n\ndef sum_geometric_progression(start, end, step):\n    \"\"\"\n    :type start: int\n    :type end: int\n    :type step: int\n    :rtype: int\n    \"\"\"\n    if start < end:\n        return 0\n    if end == start:\n        return 1\n\n    n = start\n    while n <= end:\n        res = n\n        for i in count(start, step):\n            res *= n\n        n += step\n        res += 1\n        if res > end:\n            res = end\n        yield res\n        if res < end:\n            break\n\n\ndef main():\n    start = int(input())\n    end = int(input())\n    step = int(input())\n    print(sum_geometric_progression(start, end, step))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    n: The number of terms in the series.\n    Returns: The sum of geometric progression series.\n    \"\"\"\n    return sum(x ** n for x in range(1, n + 1))\n\nif __name__ == '__main__':\n    print sum_geometric_progression(4)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import math\n\n\ndef geometric_progression(n):\n    \"\"\"\n    Returns the sum of geometric progression series.\n    :param n: integer\n    :return: the sum of geometric progression series\n    \"\"\"\n    return sum(math.factorial(i) for i in range(1, n + 1))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(geometric_progression(10))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/geometric-progression\n# https://www.hackerrank.com/contests/w16/challenges/geometric-progression/submissions/code/22896636\n\ndef solve(n):\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    return n * solve(n - 1)\n\nif __name__ == \"__main__\":\n    print(solve(10))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.calculate(1, n)\n\n    def calculate(self, current, n):\n        if n == 1:\n            return current\n        else:\n            return self.calculate(current * current, n - 1)\n\nclass Solution(object):\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.calculate(1, n)\n\n    def calculate(self, current, n):\n        if n == 1:\n            return current\n        else:\n            return current + self.calculate(current * current, n - 1)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getSum(2))\n    print(sol.getSum(3))\n    print(sol.getSum(4))\n    print(sol.getSum(5))\n    print(sol.getSum(6))\n    print(sol.getSum(7))\n    print(sol.getSum(8))\n    print(sol.getSum(9))\n    print(sol.getSum(10))\n    print(sol.getSum(11))\n    print(sol.getSum(12))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 1\n    return sum_geometric_progression(n-1) + (n-1) * (n-2) / n\n\n\nif __name__ == \"__main__\":\n    assert sum_geometric_progression(2) == 1\n    assert sum_geometric_progression(3) == 4\n    assert sum_geometric_progression(4) == 9\n    assert sum_geometric_progression(5) == 16\n    assert sum_geometric_progression(6) == 25\n    assert sum_geometric_progression(7) == 49\n    assert sum_geometric_progression(8) == 64\n    assert sum_geometric_progression(9) == 81\n    assert sum_geometric_progression(10) == 100\n    assert sum_geometric_progression(11) == 121\n    assert sum_geometric_progression(12) == 144\n    assert sum_geometric_progression(13) == 169\n    assert sum_geometric_progression(14) == 200\n    assert sum_geometric_progression(15) == 225\n    assert sum_geometric_progression(16) == 256\n    assert sum_geometric_progression(17) == 289\n    assert sum_geometric_progression(18) == 324\n    assert sum_geometric_progression(19) == 361\n    assert sum_geometric_progression(20) == 400\n    assert sum_geometric_progression(21) == 436\n    assert sum_geometric_progression(22) == 482\n    assert sum_geometric_progression(23) == 529\n    assert sum_geometric_progression(24) == 576\n    assert sum_geometric_progression(25) == 621\n    assert sum_geometric_progression(26) == 672\n    assert sum_geometric_progression(27) == 729\n    assert sum_geometric_progression(28) == 784\n    assert sum_geometric_progression(29) == 841"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# Definition for a  geometric progression  array.\nclass Array:\n    def __init__(self, n):\n        self.n = n\n        self.arr = [1]\n\nclass Solution:\n    def geomSeriesSum(self, arr: Array) -> int:\n        \"\"\"\n        :type arr: Array\n        :rtype: int\n        \"\"\"\n        # Write your code here.\n        ans = 0\n        prod = 1\n        for i in range(arr.n):\n            ans += arr.arr[i] * prod\n            prod *= i + 1\n        return ans\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    arr = Array(5)\n    arr.arr = [1, 2, 3, 4, 5]\n    print(sol.geomSeriesSum(arr))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def sum_geometric_progression(start, end):\n    \"\"\"\n    :type start: int\n    :type end: int\n    :rtype: int\n    \"\"\"\n    return start * (end + 1)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# @include\ndef sum_geometric_progression_series(n):\n    return sum(x ** n for x in range(1, n + 1))\n# @exclude\n\n\ndef simple_test():\n    assert 3 == sum_geometric_progression_series(3)\n    assert 10 == sum_geometric_progression_series(4)\n    assert 8 == sum_geometric_progression_series(5)\n    assert 15 == sum_geometric_progression_series(6)\n    assert 15 == sum_geometric_progression_series(7)\n    assert 42 == sum_geometric_progression_series(8)\n    assert 60 == sum_geometric_progression_series(9)\n    assert 105 == sum_geometric_progression_series(10)\n    assert 225 == sum_geometric_progression_series(11)\n    assert -1 == sum_geometric_progression_series(12)\n    assert -1 == sum_geometric_progression_series(13)\n    assert -1 == sum_geometric_progression_series(14)\n    assert -1 == sum_geometric_progression_series(15)\n    assert -1 == sum_geometric_progression_series(16)\n\n\nif __name__ == \"__main__\":\n    simple_test()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def geom_progression(n):\n    \"\"\"\n    Calculate the sum of geometric progression series\n    \"\"\"\n\n    if n < 1:\n        return 0\n    else:\n        return sum(n ** i for i in range(1, n + 1))\n\nif __name__ == '__main__':\n    print(geom_progression(1))\n    print(geom_progression(2))\n    print(geom_progression(3))\n    print(geom_progression(4))\n    print(geom_progression(5))\n    print(geom_progression(6))\n    print(geom_progression(7))\n    print(geom_progression(8))\n    print(geom_progression(9))\n    print(geom_progression(10))\n    print(geom_progression(11))\n    print(geom_progression(12))\n    print(geom_progression(13))\n    print(geom_progression(14))\n    print(geom_progression(15))\n    print(geom_progression(16))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def geogp(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n * (n + 1) / 2\n    else:\n        return n * (n + 1)\n\n\ndef test_geogp():\n    assert geogp(1) == 1\n    assert geogp(2) == 2\n    assert geogp(3) == 3\n    assert geogp(4) == 8\n    assert geogp(5) == 27\n    assert geogp(6) == 64\n    assert geogp(7) == 243\n    assert geogp(8) == 865\n    assert geogp(9) == 3647\n    assert geogp(10) == 12864\n    assert geogp(11) == 52624\n    assert geogp(12) == 207096\n    assert geogp(13) == 878592\n    assert geogp(14) == 3533904\n    assert geogp(15) == 14080192\n    assert geogp(16) == 59520384\n    assert geogp(17) == 282489696\n    assert geogp(18) == 1358560032\n    assert geogp(19) == 6291456384\n    assert geogp(20) == 30365400672\n    assert geogp(21) == 145549542432\n    assert geogp(22) == 722180966464\n    assert geogp(23) == 3529371289664\n    assert geogp(24) == 16503628806432\n    assert geogp(25) == 8649856012864\n    assert geogp(26) == 4791116665664\n    assert geogp(27) == 220446080064\n    assert geogp(28) == 110906716864\n    assert geogp(29) == 549755813888\n    assert geogp(30) == 269801367648\n    assert"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import time\n\nstart = time.time()\n\ndef geometric_progression_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return sum(i ** n for i in range(1, n + 1))\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print(geometric_progression_sum(100))\n    print(geometric_progression_sum(10))\n    print(geometric_progression_sum(0))\n    print(geometric_progression_sum(1))\n    print(geometric_progression_sum(100))\n    print(geometric_progression_sum(1000))\n    print(geometric_progression_sum(1000000))\n    print(geometric_progression_sum(1000000000))\n    print(geometric_progression_sum(1000000000000))\n    print(geometric_progression_sum(100000000000000))\n    print(geometric_progression_sum(1000000000000000))\n    print(geometric_progression_sum(10000000000000000))\n    print(geometric_progression_sum(1000000000000000000))\n    print(geometric_progression_sum(10000000000000000000))\n    print(geometric_progression_sum(100000000000000000000))\n    print(geometric_progression_sum(1000000000000000000000))\n    print(geometric_progression_sum(10000000000000000000000))\n    print(geometric_progression_sum(100000000000000000000000))\n    print(geometric_progression_sum(1000000000000000000000000))\n    print(geometric_progression_sum(10000000000000000000000000))\n    print(geometric_progression_sum(10000000000000000000000000000))\n    print(geometric_progression_sum(100000000000000000000000000000))\n    print(geometric_progression_sum(1000000000000000000000000000000))\n    print(geometric_progression_sum(10000000000000000000000000000000))\n    print(geometric_progression_sum(1000000000000000000000000000000000))\n    print(geometric_progression_sum(100000000000000000000000000000000))\n    print(geometric_progression_sum(10000000000000000000000000000000000))\n    print(geometric_progression_"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/geometric-progression/problem\n\nimport sys\n\n\ndef geom_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    return sum(geom_progression(i) for i in range(1, n))\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(geom_progression(n))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None, next=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\nclass Solution:\n    def getSum(self, head):\n        \"\"\"\n        :type head: TreeNode\n        :rtype: int\n        \"\"\"\n        result = 0\n        while head:\n            result += head.val\n            head = head.next\n        return result\n\nif __name__ == '__main__':\n    head = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5, TreeNode(6), TreeNode(7)))\n    s = Solution()\n    print s.getSum(head)\n    head = TreeNode(1, TreeNode(2, TreeNode(3)), TreeNode(4, TreeNode(5)))\n    s = Solution()\n    print s.getSum(head)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# Definition for a  geometric progression.\n# class Progression(object):\n#     def __init__(self, a, b):\n#         self.a = a\n#         self.b = b\n#         self.n = 1\n#\n#     def __iter__(self):\n#         yield self.a\n#         while True:\n#             yield self.b * self.n\n#             self.n += 1\n#\n# def sum_geometric_progression(a, b):\n#     return sum(map(lambda x: x * (b ** x), range(a, b + 1)))\n\nclass Solution(object):\n    def sumGeometricProgression(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if b == 0:\n            return 0\n        res = 0\n        for i in range(a, b + 1):\n            res += i * (b ** i)\n        return res\n\n    def sumGeometricProgression2(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if b == 0:\n            return 0\n        return sum(map(lambda x: x * (b ** x), range(a, b + 1)))\n\nif __name__ == \"__main__\":\n    print Solution().sumGeometricProgression(1, 2)\n    print Solution().sumGeometricProgression(1, 3)\n    print Solution().sumGeometricProgression(1, 4)\n    print Solution().sumGeometricProgression(1, 5)\n    print Solution().sumGeometricProgression(1, 6)\n    print Solution().sumGeometricProgression(1, 7)\n    print Solution().sumGeometricProgression(1, 8)\n    print Solution().sumGeometricProgression(1, 9)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# TODO:\n# - use memoization to avoid repeated calculation\n# - use recursion to calculate the sum\n\nimport math\n\ndef sum_geometric_progression(n):\n    \"\"\"\n    Returns the sum of geometric progression series.\n    >>> sum_geometric_progression(5)\n    25\n    >>> sum_geometric_progression(20)\n    1225\n    >>> sum_geometric_progression(1000)\n    240160\n    >>> sum_geometric_progression(10000)\n    2.5e9\n    \"\"\"\n    if n < 2:\n        return n\n    return sum_geometric_progression(n - 1) + math.factorial(n) / math.factorial(n - 1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(1 for _ in range(n))\n\n# Your code here\nprint(sum_geometric_progression(4))\nprint(sum_geometric_progression(100))\nprint(sum_geometric_progression(1000))\nprint(sum_geometric_progression(10000))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# Definition for a  geometric progression\nclass Progression(object):\n    def __init__(self, n, k):\n        self.n = n\n        self.k = k\n\n    def __repr__(self):\n        return \"Progression(%d, %d)\" % (self.n, self.k)\n\n\nclass Solution(object):\n    def sumGeoProg(self, A):\n        \"\"\"\n        :type A: List[Progression]\n        :rtype: int\n        \"\"\"\n        n = 0\n        k = 0\n        for i in A:\n            n += i.n\n            k += i.k\n        return n * (1 - 1 / k)\n\n\ndef main():\n    solution = Solution()\n    nums = [Progression(n, k) for n, k in [\n        (2, 3),\n        (3, 4),\n        (5, 6),\n        (7, 8),\n        (9, 10),\n        (11, 12),\n        (13, 14),\n        (15, 16),\n        (17, 18),\n        (19, 20),\n        (21, 22),\n        (23, 24),\n        (25, 26),\n        (27, 28),\n        (29, 30),\n        (31, 32),\n        (33, 34),\n        (35, 36),\n        (37, 38),\n        (39, 40),\n        (41, 42),\n        (43, 44),\n        (45, 46),\n        (47, 48),\n        (49, 50),\n        (51, 52),\n        (53, 54),\n        (55, 56),\n        (57, 58),\n        (59, 60),\n        (61, 62),\n        (63, 64),\n        (65, 66),\n        (67, 68),\n        (69, 70),\n        (71, 72),\n        (73, 74),\n        (75, 76),\n        (77, 78),\n        (79, 80),\n        (81, 82),\n        (83, 84),\n        (85, 86),\n        (87, 88),\n        (89, 90),\n        ("
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "import math\n\ndef gps(start, end, n):\n    return (start + end) * (end + 1) * math.pow(end + 1, n) / (math.factorial(n))\n\ndef main():\n    start = 0\n    end = 10\n    n = 2\n\n    print gps(start, end, n)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "import math\n\n\ndef series(n):\n    \"\"\"\n    >>> series(4)\n    2\n    >>> series(5)\n    4\n    >>> series(6)\n    6\n    >>> series(7)\n    8\n    >>> series(8)\n    16\n    >>> series(9)\n    24\n    >>> series(10)\n    64\n    >>> series(11)\n    128\n    >>> series(12)\n    256\n    \"\"\"\n    return sum(math.factorial(i) * pow(2, i) for i in range(1, n))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/geometric-progression/discuss/873/Python-solution\n\n# DP\n# 4ms 100%\nclass Solution(object):\n    def calculate(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0: return 0\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] * i\n        return dp[n]"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/geometric-progression-sum/\n\nclass Solution(object):\n    def calculate(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return n\n        if k % 2 == 0:\n            return self.calculate(n - 1, k - 2) + self.calculate(n - 2, k - 2)\n        else:\n            return self.calculate(n - 1, k - 1) + self.calculate(n - 2, k - 1)\n\n\nif __name__ == '__main__':\n    print(Solution().calculate(4, 3))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def sum_geometric_progression(n):\n    return sum(1 for i in range(1,n+1))\n\nprint(sum_geometric_progression(10))\n\n# Your code here."
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "import math\n\n\ndef gpsum(n, start):\n    \"\"\"\n    Write a function gpsum(n, start) that returns the sum of geometric\n    progression series starting with n.\n\n    >>> gpsum(4, 2)\n    8\n    >>> gpsum(4, 3)\n    17\n    \"\"\"\n    return start * math.pow(n, 1.0 / n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "# Definition for a geometric progression.\nclass Progression(object):\n    def __init__(self, n, p):\n        self.n = n\n        self.p = p\n\n    def __repr__(self):\n        return \"Progression(%d, %d)\" % (self.n, self.p)\n\nclass Solution(object):\n    def findProgression(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def find_progression(p, n):\n            if p.n == 0:\n                return 1\n            return p.n * (find_progression(Progression(p.n - 1, p.p), n - p.n) + find_progression(Progression(p.n, p.p), n))\n        return find_progression(Progression(1, 1), n)\n\nif __name__ == \"__main__\":\n    n = 4\n    print Solution().findProgression(n)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# Definition for a  geometric progression.\nclass Progression(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.p = 1\n\n    def __add__(self, other):\n        if other.p == 1:\n            self.p = self.p * other.p\n            return Progression(self.a + other.a, self.b + other.b)\n        else:\n            return self.p * other\n\n\nclass Solution(object):\n    def getSumGeoProg(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        p = Progression(1, 1)\n        for i in range(2, n + 1):\n            p = p + p\n        return p.p\n\n\nif __name__ == \"__main__\":\n    print Solution().getSumGeoProg(10)"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "from math import pow\n\n\ndef series(n):\n    return sum(pow(i, n) for i in range(1, n+1))\n\n\ndef main():\n    print(series(3))\n    print(series(5))\n    print(series(6))\n    print(series(7))\n    print(series(8))\n    print(series(9))\n    print(series(10))\n    print(series(11))\n    print(series(12))\n    print(series(13))\n    print(series(14))\n    print(series(15))\n    print(series(16))\n    print(series(17))\n    print(series(18))\n    print(series(19))\n    print(series(20))\n    print(series(21))\n    print(series(22))\n    print(series(23))\n    print(series(24))\n    print(series(25))\n    print(series(26))\n    print(series(27))\n    print(series(28))\n    print(series(29))\n    print(series(30))\n    print(series(31))\n    print(series(32))\n    print(series(33))\n    print(series(34))\n    print(series(35))\n    print(series(36))\n    print(series(37))\n    print(series(38))\n    print(series(39))\n    print(series(40))\n    print(series(41))\n    print(series(42))\n    print(series(43))\n    print(series(44))\n    print(series(45))\n    print(series(46))\n    print(series(47))\n    print(series(48))\n    print(series(49))\n    print(series(50))\n    print(series(51))\n    print(series(52))\n    print(series(53))\n    print(series(54))\n    print(series(55))\n    print(series(56))\n    print(series(57))\n    print(series(58))\n    print(series(59))\n    print(series(60))\n    print(series(61))\n    print(series(62))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef series_sum(n, k):\n    return reduce(lambda x, y: x + y, map(lambda i: i * k, range(n)))\n\n\ndef series_sum_recursive(n, k):\n    return series_sum_recursive(n - 1, k) + k\n\n\ndef series_sum_iterative(n, k):\n    return sum(i * k for i in range(n + 1))\n\n\ndef main():\n    print(series_sum(3, 2))\n    print(series_sum_recursive(3, 2))\n    print(series_sum_iterative(3, 2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def sum_of_geometric_progression(n):\n    \"\"\"\n    n is the number of terms in the series.\n    Return the sum of geometric progression series.\n\n    Example:\n    >>> sum_of_geometric_progression(5)\n    25\n    >>> sum_of_geometric_progression(20)\n    1025\n    >>> sum_of_geometric_progression(20)\n    1025\n    >>> sum_of_geometric_progression(30)\n    181875\n    >>> sum_of_geometric_progression(50)\n    24609375\n    \"\"\"\n    return reduce(lambda x, y: x * y, range(1, n + 1))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/geometric-progression-sum\n\ndef geom_prog_sum(n, k):\n    \"\"\"\n    Returns the sum of geometric progression series.\n    Input: n - number of terms, k - number of terms per series\n    Output: sum of geometric progression series.\n    \"\"\"\n    return sum(x**k for x in range(1, n + 1))\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(geom_prog_sum(n, k))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sum_geometric_progression(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(num)\n\n\nif __name__ == '__main__':\n    assert sum_geometric_progression(1) == 1\n    assert sum_geometric_progression(2) == 2\n    assert sum_geometric_progression(3) == 6\n    assert sum_geometric_progression(4) == 24\n    assert sum_geometric_progression(5) == 120\n    assert sum_geometric_progression(6) == 720"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "import math\n\ndef gpsum(n):\n    \"\"\"\n    Return the sum of geometric progression series.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += math.pow(i+1, i+1)\n    return sum\n\nif __name__ == \"__main__\":\n    print gpsum(10)\n    print gpsum(20)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "# Definition for a  geometric progression.\nclass P(object):\n    def __init__(self, num, den):\n        self.num = num\n        self.den = den\n        self.curr_num = num\n        self.curr_den = den\n        self.curr_prod = 1\n        self.curr_term = 1\n\n    def __str__(self):\n        return str(self.curr_num) + \"/\" + str(self.curr_den)\n\n    def increment(self):\n        self.curr_num += 1\n        self.curr_den *= self.curr_num\n        self.curr_prod *= self.curr_num\n        self.curr_term *= self.curr_num\n\n    def get_prod(self):\n        return self.curr_prod\n\n    def get_term(self):\n        return self.curr_term\n\n    def get_num(self):\n        return self.curr_num\n\n    def get_den(self):\n        return self.curr_den\n\n    def get_curr_prod(self):\n        return self.curr_prod\n\n    def get_curr_term(self):\n        return self.curr_term\n\n    def get_curr_num(self):\n        return self.curr_num\n\ndef get_prod_term(n):\n    p = P(n, 1)\n    while p.get_num() > 1:\n        p.increment()\n    return p.get_term()\n\n\ndef get_prod_term_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return get_prod_term(n - 1) * n\n\n\ndef get_prod_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return get_prod_recursive(n - 1) * n\n\n\ndef get_prod_recursive_2(n):\n    if n == 1:\n        return 1\n    else:\n        return get_prod_recursive_2(n - 1) *"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    Write a function to find the sum of geometric progression series.\n\n    Input\n    -----\n    n: int\n        the number of terms in the geometric progression series\n\n    Output\n    ------\n    the sum of geometric progression series\n    \"\"\"\n    return sum(x * n for x in range(1, n + 1))\n\nif __name__ == \"__main__\":\n    # The geometric progression series is: 1, n, n^2, n^3,...\n    print sum_geometric_progression(5)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def get_sum_geometric_progression_series(start_index, end_index):\n    \"\"\"\n    :param start_index: int, start index of geometric progression series\n    :param end_index: int, end index of geometric progression series\n    :return: int, sum of geometric progression series\n    \"\"\"\n    if end_index == 0:\n        return 0\n    total = 0\n    for i in range(start_index, end_index):\n        total += i\n    return total"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def get_sum_of_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return get_sum_of_geometric_progression(n-1) + n\n\nif __name__ == '__main__':\n    print(get_sum_of_geometric_progression(3))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def sum_geometric_progression_series(n):\n    \"\"\"\n    n: the total number of elements in the series\n    Returns: the sum of geometric progression series\n    \"\"\"\n    return (n**2+n)/2\n\nif __name__ == \"__main__\":\n    print(sum_geometric_progression_series(5))\n    print(sum_geometric_progression_series(10))\n    print(sum_geometric_progression_series(100))\n    print(sum_geometric_progression_series(1000))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def get_sum_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return reduce(lambda x, y: x*(y+1), range(1, n+1), 1)\n\nif __name__ == '__main__':\n    print get_sum_geometric_progression(10)\n    # print get_sum_geometric_progression(20)\n    # print get_sum_geometric_progression(30)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def sum_of_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n * (1 + sum_of_geometric_progression(n - 1))\n\nif __name__ == '__main__':\n    print sum_of_geometric_progression(5)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def sum_geometric_progression(n):\n    return sum(i * (i + 1) ** j for i in range(1, n + 1) for j in range(1, int(n ** 0.5) + 1))\n\n\nif __name__ == '__main__':\n    print sum_geometric_progression(5)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def sum_geometric_progression_series(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 1\n    return n * sum_geometric_progression_series(n-1)\n\nif __name__ == '__main__':\n    assert sum_geometric_progression_series(1) == 1\n    assert sum_geometric_progression_series(2) == 3\n    assert sum_geometric_progression_series(5) == 25\n    assert sum_geometric_progression_series(10) == 1025"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef gps(n):\n    \"\"\"\n    Calculates the sum of geometric progression series.\n    \"\"\"\n    return sum(i ** n for i in range(1, n+1))\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(gps(2))\n    print(gps(3))\n    print(gps(4))\n    print(gps(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def series(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(series(n-1) * i for i in range(1, n+1))\n\nprint(series(5))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/geometric-progression/problem\n\ndef geometric_progression(n):\n    # 1, 1, 2, 6, 24, 120\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return sum(geometric_progression(i) for i in range(2, n))\n\nif __name__ == '__main__':\n    n = int(input())\n    print(geometric_progression(n))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def get_geom_progression_sum(n):\n    if n == 0:\n        return 0\n\n    result = 0\n\n    for i in range(1, n+1):\n        result += get_geom_progression_sum(i-1) * i\n\n    return result\n\nprint(get_geom_progression_sum(10))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from math import exp\n\ndef series(n):\n    return sum(exp(i) for i in range(n))\n\nif __name__ == \"__main__\":\n    assert series(2) == 1 + exp(1)\n    assert series(3) == 1 + exp(2) + exp(3)\n    assert series(4) == 1 + exp(3) + exp(4) + exp(5)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\ndef get_progression(n):\n    return [i+1 for i in range(n)]\n\ndef get_progression_sum(n):\n    \"\"\"\n    n: number of elements in the progression\n    \"\"\"\n    return sum(get_progression(n))\n\nProgression = namedtuple(\"Progression\", \"n sum\")\n\nif __name__ == '__main__':\n    print(get_progression_sum(10))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from math import log\n\ndef gpsum(n):\n    return sum(pow(i, n) for i in range(1, n + 1))\n\ndef gpsum2(n):\n    return sum(pow(i, n) for i in range(1, n + 1)) / (n - 1)\n\ndef gpsum3(n):\n    return sum(pow(i, n) for i in range(1, n + 1)) / log(n)\n\nif __name__ == '__main__':\n    print(gpsum(3))\n    print(gpsum2(3))\n    print(gpsum3(3))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import unittest\nfrom math import pow\n\ndef geom_prog(n):\n    return sum(pow(n, x) for x in range(1, n + 1))\n\nclass TestCode(unittest.TestCase):\n    def runTest(self):\n        self.assertEqual(geom_prog(1), 1)\n        self.assertEqual(geom_prog(2), 4)\n        self.assertEqual(geom_prog(3), 9)\n        self.assertEqual(geom_prog(4), 16)\n        self.assertEqual(geom_prog(5), 25)\n        self.assertEqual(geom_prog(6), 36)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/sum-of-geometric-progression-series/\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def getSum(self, nums):\n        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] * nums[1]\n        total = 0\n        for i in range(n):\n            total += (nums[i] * (n - i))\n        return total"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def gpsum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum([i*(i+1)/2 for i in range(n)])\n\nif __name__ == '__main__':\n    n = int(input())\n    print(gpsum(n))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def geom_progression(n):\n    progression = 1\n    for i in range(2, n+1):\n        progression *= i\n    return progression\n\nprint geom_progression(5)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    For n = 1, 2, 3, 4, 5,..., n, the geometric progression is\n    1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880.\n\n    For n = 0, the geometric progression is 1, 1, 1, 1, 1,...\n\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(1 for _ in range(1, n+1))\n\ndef test():\n    assert sum_geometric_progression(1) == 1\n    assert sum_geometric_progression(2) == 2\n    assert sum_geometric_progression(3) == 6\n    assert sum_geometric_progression(4) == 24\n    assert sum_geometric_progression(5) == 120\n    assert sum_geometric_progression(6) == 720\n    assert sum_geometric_progression(7) == 5040\n    assert sum_geometric_progression(8) == 40320\n    assert sum_geometric_progression(9) == 362880\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def gpsum(n):\n    \"\"\"\n    >>> gpsum(3)\n    5\n    >>> gpsum(4)\n    12\n    >>> gpsum(5)\n    27\n    \"\"\"\n    return sum([n**i for i in range(1, n+1)])"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import math\n\ndef sum_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 0\n\n    # Recursive case\n    return sum_geometric_progression(n-1) + math.factorial(n)\n\nif __name__ == \"__main__\":\n    print(sum_geometric_progression(5))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def find_geometric_progression(N):\n    \"\"\"\n    Input: N - integer, N >= 0\n    Output: sum(n^(1+i)) where i = 0, 1,..., N-1\n    \"\"\"\n    if N == 0:\n        return 1\n    prog = 1\n    for i in range(1, N):\n        prog = prog * (i + 1)\n    return prog\n\nif __name__ == \"__main__\":\n    N = int(input())\n    print(find_geometric_progression(N))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def sum_of_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(2, n+1):\n        result += i\n    return result\n\nif __name__ == \"__main__\":\n    print(sum_of_geometric_progression(100))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    Sum of geometric progression series.\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * sum_geometric_progression(n - 1)\n\nif __name__ == \"__main__\":\n    print(sum_geometric_progression(4))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def series_sum(n, m):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return m * series_sum(n - 1, m) + series_sum(n - 2, m)\n\n\ndef main():\n    print(series_sum(10, 4))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def find_sum_geometric_progression(start, end):\n    \"\"\"\n    :type start: int\n    :type end: int\n    :rtype: int\n    \"\"\"\n    if end <= start:\n        return 0\n\n    return sum(1 for i in range(start, end + 1))\n\n\nif __name__ == '__main__':\n    assert find_sum_geometric_progression(1, 3) == 3\n    assert find_sum_geometric_progression(2, 6) == 13"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    n is the size of geometric progression series.\n    Return the sum of geometric progression series.\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    return sum(map(lambda x: 1+x, range(1, n+1)))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import math\n\ndef gps(n):\n    return (1 + math.sqrt(5)) * (n + 1) * (n + 2) / 4\n\ndef gps_s(n):\n    return (1 + math.sqrt(5)) * (n + 1) * (n + 2) / 4\n\ndef gps_s_slow(n):\n    a = 1\n    b = 2\n    sum = 0\n    while b < n:\n        sum += a * b\n        a += 1\n        b += 2\n    return sum\n\ndef gps_s_fast(n):\n    a = 1\n    b = 2\n    sum = 0\n    while b < n:\n        sum += a * b\n        a += 1\n        b += 2\n    return sum\n\nif __name__ == '__main__':\n    print(gps(10))\n    print(gps_s(10))\n    print(gps_s_fast(10))\n    print(gps_s_slow(10))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def sumGeometricProgression(start, end, n):\n    if start > end:\n        return 0\n    else:\n        return (start + end) * (n + 1)\n\nif __name__ == \"__main__\":\n    print sumGeometricProgression(1, 10, 5)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sum_geometric_progression_series(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n) / math.factorial(n - 1)\n\n\nif __name__ == '__main__':\n    print(sum_geometric_progression_series(10))\n    print(sum_geometric_progression_series(100))\n    print(sum_geometric_progression_series(1000))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def sum_of_geometric_progression_series(n):\n    \"\"\"\n    sum_of_geometric_progression_series(n) -> integer\n\n    sum_of_geometric_progression_series(n) calculates the sum of geometric\n    progression series up to n.\n    \"\"\"\n    return sum(1 for _ in range(1, n + 1))\n\n\nprint(sum_of_geometric_progression_series(100))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def geog_prog(n):\n    \"\"\"\n    >>> geog_prog(10)\n    7\n    >>> geog_prog(15)\n    13\n    \"\"\"\n    return sum(n * i for i in range(2, n + 1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\n\n\ndef get_geometric_progression(start, n):\n    \"\"\"\n    Write a function to find the sum of geometric progression series.\n    \"\"\"\n    return math.factorial(start) / math.factorial(start - n)\n\n\nif __name__ == \"__main__\":\n    print(get_geometric_progression(10, 2))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def gpsum(n):\n    \"\"\"\n    n - number of terms\n    \"\"\"\n    return (n * (n + 1)) / 2\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print gpsum(10)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "import math\n\n\ndef geom_progression(n, start):\n    if n == 0:\n        return start\n    if n == 1:\n        return start * 2\n    return start * math.pow(2, n)\n\n\ndef sum_geom_progression(n, start):\n    return geom_progression(n, start) + sum_geom_progression(n - 1, start)\n\n\nprint(sum_geom_progression(5, 1))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getSum(self, n):\n        if n <= 1:\n            return 1\n        \n        return self.getSum(n-1) + self.getSum(n-2) * n"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    sum = 1\n    for i in range(2, n + 1):\n        sum = sum * i\n    return sum\n\nif __name__ == \"__main__\":\n    print(sum_geometric_progression(10))\n    print(sum_geometric_progression(100))\n    print(sum_geometric_progression(1000))\n    print(sum_geometric_progression(10000))\n    print(sum_geometric_progression(100000))\n    print(sum_geometric_progression(1000000))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "from math import floor\n\ndef sum_geometric_progression(start, end, n):\n    \"\"\"\n    :type start: int\n    :type end: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return start\n    return sum_geometric_progression(start, end, n - 1) + \\\n           floor((end - start) / (n - 1)) * sum_geometric_progression(start, end, n - 2)\n\nif __name__ == \"__main__\":\n    print sum_geometric_progression(1, 10, 5)"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    Write a function to find the sum of geometric progression series.\n\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 1\n    for i in range(2, n + 1):\n        sum *= i\n    return sum\n\nif __name__ == '__main__':\n    print sum_geometric_progression(10)"
    },
    {
      "rank": 80,
      "score": 6.0,
      "candidate": "# https://www.hackerrank.com/challenges/geometric-progression-sum\n\ndef geometric_progression_sum(n, k):\n    if k == 0:\n        return 0\n    return geometric_progression_sum(n - 1, k - 1) + (n ** k)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(geometric_progression_sum(n, k))"
    },
    {
      "rank": 81,
      "score": 2.0,
      "candidate": "# https://www.hackerrank.com/challenges/geometric-progression/problem\n\nimport math\n\n\ndef geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n) / math.factorial(n-1)\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n\n    for a0 in range(t):\n        n = int(input())\n\n        print(geometric_progression(n))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def getSum(self, n):\n        return sum(1 for i in range(1, n + 1))\n\n\nif __name__ == \"__main__\":\n    assert Solution().getSum(2) == 1\n    assert Solution().getSum(4) == 6\n    assert Solution().getSum(7) == 14"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def sum_geometric_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(1 for i in xrange(1, n+1))\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        :type cipher: str\n        :rtype: int\n        \"\"\"\n        n = cipher.split(\" \")[0]\n        return sum_geometric_progression(int(n))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getSum(self, n):\n        if n == 0:\n            return 0\n        # write your code here\n        res = 0\n        # left and right will be used to store the sum of the next level\n        # of the tree\n        left, right = 0, 0\n        # left and right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        # of the tree\n        # left, right will be used to store the sum of the next level\n        #"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Definition for a  point\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass Solution:\n    def sumGeoProgression(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n\n        prev = points[0]\n        prog = [1]\n        for p in points[1:]:\n            prog.append(prog[-1] * p.y)\n            prev = p\n        return sum(prog)\n\n\nif __name__ == '__main__':\n    points = [Point(1, 2), Point(1, 3), Point(2, 4), Point(2, 5), Point(3, 6)]\n    solution = Solution()\n    print(solution.sumGeoProgression(points))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import math\n\n\ndef sum_geometric_progression(N):\n    \"\"\"\n    :type N: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(N) * math.factorial(N - 1) / math.factorial(N - 2)\n\n\nif __name__ == '__main__':\n    assert sum_geometric_progression(0) == 0\n    assert sum_geometric_progression(1) == 1\n    assert sum_geometric_progression(2) == 3\n    assert sum_geometric_progression(3) == 8\n    assert sum_geometric_progression(10) == 143\n    assert sum_geometric_progression(20) == 1237"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/geometric-progression\n\nfrom math import sqrt\n\n\ndef geom_progression(n, k):\n    \"\"\"\n    :param n:\n    :param k:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    return geom_progression(n-1, k-1) + geom_progression(n-1, k)\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    n = int(input())\n    k = int(input())\n    print(geom_progression(n, k))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import timeit\n\n\ndef sum_geo_prog(n):\n    \"\"\"\n    >>> sum_geo_prog(1)\n    1\n    >>> sum_geo_prog(2)\n    4\n    >>> sum_geo_prog(3)\n    9\n    >>> sum_geo_prog(4)\n    16\n    >>> sum_geo_prog(5)\n    25\n    \"\"\"\n    return sum(map(lambda x: x**(1+n), range(1, n+1)))\n\n\ndef time_sum_geo_prog(n):\n    return timeit.timeit(\"sum_geo_prog(%s)\" % n, setup=\"from __main__ import sum_geo_prog\", number=1)\n\nif __name__ == \"__main__\":\n    print(time_sum_geo_prog(1))\n    print(time_sum_geo_prog(2))\n    print(time_sum_geo_prog(3))\n    print(time_sum_geo_prog(4))\n    print(time_sum_geo_prog(5))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def getSum(self, nums):\n        if not nums: return 0\n        return self.getSum(nums[:-1]) + nums[-1]\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(Solution().getSum(nums))\n    nums = [1, 1, 1]\n    print(Solution().getSum(nums))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Test(unittest.TestCase):\n    def test_sum_of_geometric_progression_series(self):\n        self.assertEqual(sum_of_geometric_progression_series(2, 1), 1)\n        self.assertEqual(sum_of_geometric_progression_series(2, 2), 4)\n        self.assertEqual(sum_of_geometric_progression_series(2, 3), 8)\n        self.assertEqual(sum_of_geometric_progression_series(2, 4), 16)\n        self.assertEqual(sum_of_geometric_progression_series(2, 5), 32)\n        self.assertEqual(sum_of_geometric_progression_series(2, 6), 64)\n        self.assertEqual(sum_of_geometric_progression_series(2, 7), 128)\n        self.assertEqual(sum_of_geometric_progression_series(2, 8), 256)\n        self.assertEqual(sum_of_geometric_progression_series(2, 9), 512)\n        self.assertEqual(sum_of_geometric_progression_series(2, 10), 1024)\n        self.assertEqual(sum_of_geometric_progression_series(2, 11), 2048)\n        self.assertEqual(sum_of_geometric_progression_series(2, 12), 4096)\n        self.assertEqual(sum_of_geometric_progression_series(2, 13), 8192)\n        self.assertEqual(sum_of_geometric_progression_series(2, 14), 16384)\n        self.assertEqual(sum_of_geometric_progression_series(2, 15), 32768)\n        self.assertEqual(sum_of_geometric_progression_series(2, 16), 65536)\n        self.assertEqual(sum_of_geometric_progression_series(2, 17), 131072)\n        self.assertEqual(sum_of_geometric_progression_series(2, 18), 262144)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for a  point.\n# class Point:\n#     def __init__(self, x=0, y=0):\n#         self.x = x\n#         self.y = y\n#         self.next = None\n\nclass Solution:\n    # @param {integer} n\n    # @param {integer} k\n    # @return {integer}\n    def getSum(self, n, k):\n        if k == 0:\n            return 1\n        if n == 0:\n            return 0\n        if k == 1:\n            return n\n        if n == 1:\n            return k\n        if k == 2:\n            return 3 * n\n        if n == 2:\n            return k * 3\n        if k == 3:\n            return 6 * n\n        if n == 3:\n            return k * 6\n        if k == 4:\n            return 9 * n\n        if n == 4:\n            return k * 9\n        if k == 5:\n            return 12 * n\n        if n == 5:\n            return k * 12\n        if k == 6:\n            return 15 * n\n        if n == 6:\n            return k * 15\n        if k == 7:\n            return 18 * n\n        if n == 7:\n            return k * 18\n        if k == 8:\n            return 21 * n\n        if n == 8:\n            return k * 21\n        if k == 9:\n            return 24 * n\n        if n == 9:\n            return k * 24\n        if k == 10:\n            return 27 * n\n        if n == 10:\n            return k * 27\n        if k == 11:\n            return 30 * n\n        if n == 11:\n            return k * 30\n        if k == 12:\n            return 33 * n\n        if n == 12:\n            return k * 33\n        if k == 13:\n            return 36 * n\n        if n == 13:\n            return k * 36\n        if k == 14:\n            return 39 * n\n        if n == 14:\n            return k * 39\n        if k == 15:\n            return 42 * n\n        if n == 15:\n            return k * 42\n        if k == 16"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getSum(self, n):\n        if n < 1:\n            return 0\n        return sum(x * (n-1) for x in range(1, n))\n\nif __name__ == '__main__':\n    assert Solution().getSum(3) == 8"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    # @param {integer[]} arr\n    # @return {integer}\n    def getSum(self, arr):\n        if not arr:\n            return 0\n        res = 0\n        curr = 1\n        for i in range(len(arr)):\n            curr *= arr[i]\n            res += curr\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.getSum([1, 2, 3, 4, 5])\n    print s.getSum([])\n    print s.getSum([1])"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @return an integer\n    def sumGeoProgression(self, root):\n        if not root:\n            return 0\n        sum = 0\n        pre = root\n        while pre:\n            if pre.left:\n                pre = pre.left\n            else:\n                if pre.val == 1:\n                    sum += pre.val\n                else:\n                    sum += pre.val * (pre.val - 1)\n                pre = pre.right\n        return sum"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def sum_geometric_progression_series(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(1, n + 1):\n        res += i**(1 + (n - i))\n    return res\n\n\nif __name__ == \"__main__\":\n    assert sum_geometric_progression_series(1) == 1\n    assert sum_geometric_progression_series(2) == 4\n    assert sum_geometric_progression_series(3) == 9\n    assert sum_geometric_progression_series(4) == 16\n    assert sum_geometric_progression_series(5) == 25\n    assert sum_geometric_progression_series(6) == 36\n    assert sum_geometric_progression_series(7) == 49\n    assert sum_geometric_progression_series(8) == 64\n    assert sum_geometric_progression_series(9) == 81\n    assert sum_geometric_progression_series(10) == 100"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return (n * (n + 1)) / 2\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getSum(100))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def sum_geometric_progression(N):\n    \"\"\"\n    :type N: int\n    :rtype: int\n    \"\"\"\n    # TODO: write your code here\n    return 1\n\nif __name__ == '__main__':\n    import sys\n\n    try:\n        N = int(sys.argv[1])\n    except:\n        N = 10\n\n    print(sum_geometric_progression(N))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {TreeNode} root\n    # @return {integer}\n    def sumGeometricSeries(self, root):\n        if not root: return 0\n        count = 0\n        self.sumGeometricSeriesRec(root, count)\n        return count\n\n    def sumGeometricSeriesRec(self, root, count):\n        if not root: return count\n        count += root.val\n        self.sumGeometricSeriesRec(root.left, count)\n        self.sumGeometricSeriesRec(root.right, count)\n        return count"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/sum-of-geometric-progression-series/\n# Definition for a geometric progression.\nclass GeometricProgression(object):\n    def __init__(self, n, k):\n        \"\"\"\n        initialize your data structure here.\n        :type n: int\n        :type k: int\n        \"\"\"\n        self.sum = 0\n        self.count = 0\n        self.total = 0\n        self.n = n\n        self.k = k\n        self.prog = [1]\n        self.prog.extend(range(2, n+1))\n        for i in range(n-1, -1, -1):\n            self.total += self.prog[i]*self.prog[i-1]\n            self.sum += self.total\n            self.count += 1\n            self.prog.pop()\n            self.prog.extend(range(2, n+1))\n\n\n    def getSum(self):\n        \"\"\"\n        Returns the sum of geometric progression.\n        :rtype: int\n        \"\"\"\n        return self.sum\n\n    def getCount(self):\n        \"\"\"\n        Returns the number of geometric progression.\n        :rtype: int\n        \"\"\"\n        return self.count\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 1ms 99.68%\nclass GeometricProgression {\n    public int getSum(int n, int k) {\n        int sum = 0;\n        int count = 0;\n        int total = 0;\n        int prog[] = new int[n+1];\n        prog[0] = 1;\n        for (int i = 1; i < n+1; i++) {\n            total += prog[i-1]*prog[i-2];\n            sum += total;\n            count++;\n            prog[i] = (int)Math.pow(2, i);\n        }"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param: n, an integer\n    @return: an integer\n    \"\"\"\n    def getSumGeom(self, n):\n        \"\"\"\n        @param: n, an integer\n        @return: an integer\n        \"\"\"\n        ans = 1\n        while n > 1:\n            ans = ans * n\n            n = n - 1\n        return ans"
    }
  ]
}