{
  "timestamp": "2025-09-14T19:39:29.308968",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 308,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n# Definition for a  word\nclass Word:\n    def __init__(self, s):\n        self.s = s\n        self.len = len(s)\n        self.cnt = 0\n\n    def __repr__(self):\n        return self.s\n\nclass Solution(object):\n    def findWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        words = []\n        for i in range(len(s)):\n            if i+5>len(s):\n                break\n            if s[i:i+5] in words:\n                continue\n            word = Word(s[i:i+5])\n            word.cnt += 1\n            if word.len == 5:\n                words.append(word.s)\n            elif word.len == 6:\n                words.append(word.s)\n            elif word.len == 7:\n                words.append(word.s)\n            elif word.len == 8:\n                words.append(word.s)\n            else:\n                pass\n        return words\n\n\nif __name__==\"__main__\":\n    s = \"abcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# import the library\nimport re\n\n# define a function to find all the words\ndef find_words(string):\n    # create a list to store words\n    words = []\n\n    # create a regular expression to match all the words\n    pattern = r\"[A-Za-z]+\"\n\n    # create a regular expression to match all the words\n    matcher = re.compile(pattern)\n\n    # create a loop to find all the words\n    for word in matcher.finditer(string):\n        # append the word to the list\n        words.append(word.group())\n\n    # return the list\n    return words\n\n# run the function\nprint(find_words('Python is a widely used general-purpose programming language'))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Created on Nov 30, 2017\n# @author: jake\n\nimport re\n\n\ndef find_five_char_word(string: str) -> list:\n    \"\"\"\n    :param string: str, string to check\n    :return: list, return all five characters long word\n    \"\"\"\n    result = []\n    for char in string:\n        if re.match(r'[a-zA-Z0-9]{5}', char):\n            result.append(char)\n    return result\n\n\ndef main():\n    string = 'abcd'\n    print(find_five_char_word(string))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\ndef find_five_chars_long_word(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    words = re.findall('[a-zA-Z]+', string)\n    if len(words) == 0:\n        return []\n    else:\n        return words\n\n\n# Your FindFiveCharsLongWord function should take a string and return a list of strings.\n# It should return the list of all words that are five characters long.\n# For example, if the input is 'Hello World', your function should return ['World', 'Hello']\n# You should NOT modify the original string."
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {string} s\n    # @return {string[]}\n    def findWords(self, s):\n        words = []\n        chars = list(s)\n        chars.sort()\n        for i in range(len(chars) - 4):\n            if chars[i] == chars[i+1] and chars[i+2] == chars[i+3] and chars[i+4] == chars[i+5]:\n                words.append(chars[i:i+5])\n        return words\n\n    # @param {string} s\n    # @return {string[]}\n    def findWords(self, s):\n        words = []\n        regex = re.compile('\\w+')\n        for m in regex.finditer(s):\n            words.append(m.group())\n        return words\n\nif __name__ == '__main__':\n    s = 'abcdabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabc"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import re\n\nclass Solution(object):\n    def findWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return self.findAll(\"\\\\w+\", s)\n\n    def findAll(self, pattern, s):\n        words = []\n        p = re.compile(pattern)\n        for word in p.findall(s):\n            if len(word) == 5:\n                words.append(word)\n        return words\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.findWords(\"Hello World\")"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import re\n\ndef five_characters_long_word(s):\n    pattern = re.compile(r'\\w{5}')\n    for word in pattern.findall(s):\n        if len(word) == 5:\n            return word\n\nif __name__ == \"__main__\":\n    s = \"Hello, world!\"\n    print five_characters_long_word(s)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def findFiveCharWords(self, s):\n        \"\"\"\n        :param s: str\n        :return: a list of strings\n        \"\"\"\n        result = []\n        for i in range(len(s)):\n            if i < len(s)-4:\n                for j in range(i+1, i+5):\n                    if s[i:j+1] == s[j:j+1] + s[i:i+1]:\n                        result.append(s[i:j+1])\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findFiveCharWords(\"aaaaa\")\n    print s.findFiveCharWords(\"aabbccdd\")"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\n# This is a simple script that finds all words in a string that are longer than 5 characters\n# and returns them to the user.\n\n# This is a quick test to see if the regex is working\n# print find_words(\"abcd\")\n\n# This is a more comprehensive test to see if the regex is working\n# print find_words(\"The quick brown fox jumps over the lazy dog\")\n\n# This is a simple test to see if the regex is working\n# print find_words(\"\")\n\n# This is a more comprehensive test to see if the regex is working\n# print find_words(\"This is a test string\")\n\n# This is a simple test to see if the regex is working\n# print find_words(\"abcde\")\n\n# This is a more comprehensive test to see if the regex is working\n# print find_words(\"The quick brown fox jumps over the lazy dog\")\n\n# This is a simple test to see if the regex is working\n# print find_words(\"abcdefghijklmnopqrstuvwxyz\")\n\n# This is a more comprehensive test to see if the regex is working\n# print find_words(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnop"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import re\n\ndef find_all_five_long_words(string):\n    regex = re.compile(r'[a-zA-Z]{5}')\n    words = regex.findall(string)\n    return words\n\nif __name__ == '__main__':\n    string = 'Hello World! Hello World! Hello World!'\n    words = find_all_five_long_words(string)\n    print words"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import re\n\ndef find_5_word(text):\n    regex = re.compile(\"^[a-zA-Z0-9]{5,}$\")\n    words = [word for word in text.split() if regex.match(word)]\n    return words\n\nif __name__ == \"__main__\":\n    text = \"a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import re\n\ndef find_all_five_chars(string):\n    return [char for char in string if len(char) == 5]\n\nif __name__ == '__main__':\n    s = 'abcdefghijklmnopqrstuvwxyz1234567890'\n    print(find_all_five_chars(s))"
    },
    {
      "rank": 13,
      "score": 9.97108792940294,
      "candidate": "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def findFiveCharLongestWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        words = [s]\n        word = \"\"\n        while word!= \"\":\n            word = \"\"\n            for i in range(len(words[-1])):\n                if len(words[-1]) - i > 5:\n                    word = words[-1][:i + 5]\n                    break\n                elif len(words[-1]) - i == 5:\n                    word = words[-1][:i + 5]\n                    break\n            if word:\n                words.append(word)\n        return \" \".join(words[-1:])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.findFiveCharLongestWord(\"Hello World\"))\n    print(s.findFiveCharLongestWord(\"Hello\"))\n    print(s.findFiveCharLongestWord(\"\"))\n    print(s.findFiveCharLongestWord(\"a\"))\n    print(s.findFiveCharLongestWord(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(s.findFiveCharLongestWord(\"abcdefghijklmnopqrstuvwxyz\"))"
    },
    {
      "rank": 14,
      "score": 9.953585255834046,
      "candidate": "# I know I have to change the regex to work with the new version of Python.\n# I think I will have to refactor the code to work with the new version of Python.\ndef five_chars_long_word(s):\n    return [word for word in s.split() if len(word) == 5]\n\n# I have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have to think about the case of multiple words.\n# I will have"
    },
    {
      "rank": 15,
      "score": 9.945082028040622,
      "candidate": "def five_word_long_word(str):\n    words = re.findall(r'\\w{5,}', str)\n    if words:\n        return words\n    return []\n\nif __name__ == \"__main__\":\n    test_str = \"Hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world!\"\n    print five_word_long_word(test_str)"
    },
    {
      "rank": 16,
      "score": 9.901972961716961,
      "candidate": "# https://www.hackerrank.com/challenges/find-all-five-chars-long-word/problem\n\ndef find_five_chars_long_word(string):\n    return [word for word in string.split() if len(word) == 5]\n\nif __name__ == \"__main__\":\n    with open(\"input.txt\") as f:\n        string = f.read()\n\n    print(find_five_chars_long_word(string))"
    },
    {
      "rank": 17,
      "score": 9.884840307260053,
      "candidate": "# https://leetcode.com/problems/find-all-five-character-words/discuss/133548/Java-Python-Regex-Solution\n\nclass Solution(object):\n    def findFiveCharWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [word for word in s.split(' ') if len(word) == 5]"
    },
    {
      "rank": 18,
      "score": 9.884145576796884,
      "candidate": "def findFiveCharLongWord(string):\n    word = re.findall(r'[a-z]{5,}', string)\n    return word\n\n\nif __name__ == \"__main__\":\n    s = \"Hello World!\"\n    print findFiveCharLongWord(s)"
    },
    {
      "rank": 19,
      "score": 9.86755994905824,
      "candidate": "import re\n\ndef five_chars_word(s):\n    words = re.findall(r\"[a-zA-Z]{5,}\", s)\n    return words"
    },
    {
      "rank": 20,
      "score": 9.859428117689756,
      "candidate": "from collections import Counter\n\ndef find_all_five_characters(string):\n    # write your code here\n    char_list = []\n    regex_list = [\"[a-z]+\", \"[A-Z]+\", \"[0-9]+\", \"[^a-zA-Z0-9]+\"]\n    for i in range(0, len(string)):\n        for j in range(0, len(string[i])):\n            for k in range(0, len(regex_list)):\n                if string[i][j] in regex_list[k]:\n                    char_list.append(string[i][j])\n    return char_list\n\ndef main():\n    string = \"HelloWorld\"\n    print find_all_five_characters(string)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 9.824486726530662,
      "candidate": "class Solution(object):\n    def findFiveCharWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        import re\n        words = []\n        for word in re.findall(r'[a-zA-Z]{5,}', s):\n            if len(word) == 5:\n                words.append(word)\n        return words"
    },
    {
      "rank": 22,
      "score": 9.820038947901322,
      "candidate": "__author__ = 'Danyang'\n\nclass Solution(object):\n    def find_all_str(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        def _check(s):\n            \"\"\"\n            :type s: str\n            \"\"\"\n            if len(s) < 5:\n                return\n\n            if s[0] == s[-1] and s[0] == s[-2] and s[0] == s[-3] and s[0] == s[-4]:\n                return\n\n            return\n\n        res = []\n        for i in xrange(len(s)):\n            if s[i] == s[i-1]:\n                if s[i] == s[i+1]:\n                    res.append(s[i-1:i+2])\n                    _check(s[i-1:i+2])\n                    _check(s[i+1:i+3])\n                    _check(s[i-1:i+2])\n                    _check(s[i+1:i+3])\n            else:\n                _check(s[i:i+2])\n\n        return res\n\n    def find_all_str_2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in xrange(len(s)):\n            if s[i] == s[i+1]:\n                res.append(s[i:i+2])\n        return res\n\n\nif __name__ == \"__main__\":\n    s = \"abcd\"\n    print Solution().find_all_str(s)\n    print Solution().find_all_str_2(s)"
    },
    {
      "rank": 23,
      "score": 9.746792219916394,
      "candidate": "class Solution(object):\n    def findFiveCharWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(len(s)):\n            if i+5 > len(s):\n                continue\n            if s[i:i+5] in res:\n                continue\n            res.append(s[i:i+5])\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().findFiveCharWords(\"aabcccccaaa\")"
    },
    {
      "rank": 24,
      "score": 9.643812953446636,
      "candidate": "from string import ascii_lowercase\nimport re\n\ndef find_all_chars_long_word(string):\n    result = []\n    for char in string:\n        if re.search(r'[a-z]{5,}', char):\n            result.append(char)\n    return result\n\nif __name__ == '__main__':\n    string = \"abcd\"\n    print(find_all_chars_long_word(string))"
    },
    {
      "rank": 25,
      "score": 9.510082469030056,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def findWords(self, s):\n        \"\"\"\n        use regex\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        regex = '^[a-zA-Z]+$'\n        words = []\n        for word in s.split():\n            if len(word) > 5:\n                words.append(word)\n        return words\n\n    def findWords2(self, s):\n        \"\"\"\n        use a set\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        words = set()\n        for word in s.split():\n            if len(word) > 5:\n                words.add(word)\n        return list(words)\n\n\nif __name__ == \"__main__\":\n    print(Solution().findWords2(\"word\"))\n    print(Solution().findWords2(\"abcd\"))\n    print(Solution().findWords2(\"abcd\"))\n    print(Solution().findWords2(\"abcd\"))"
    },
    {
      "rank": 26,
      "score": 9.296492409318557,
      "candidate": "class Solution(object):\n    def findWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        words = []\n        s = s.lower()\n        for i in range(len(s)):\n            if s[i] == s[i+1]:\n                if s[i] == s[i+2]:\n                    if s[i] == s[i+3]:\n                        if s[i] == s[i+4]:\n                            if s[i] == s[i+5]:\n                                words.append(s[i:i+5])\n        return words"
    },
    {
      "rank": 27,
      "score": 9.170882339577844,
      "candidate": "class Solution(object):\n    def findWords(self, s, dict):\n        \"\"\"\n        :type s: str\n        :type dict: set[str]\n        :rtype: List[str]\n        \"\"\"\n        words = []\n        for word in self.findFiveCharWords(s, dict):\n            words.append(word)\n        return words\n\n    def findFiveCharWords(self, s, dict):\n        for i in range(len(s)):\n            if s[i:i + 5] in dict:\n                yield s[i:i + 5]\n        return\n\nif __name__ == '__main__':\n    s = \"Hello world, my name is John\"\n    dict = set(['Hello', 'world','my', 'name', 'John'])\n    print Solution().findWords(s, dict)\n    print Solution().findWords(\"\", dict)"
    },
    {
      "rank": 28,
      "score": 9.164180526118887,
      "candidate": "from collections import defaultdict\n\ndef find_5_word(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    return sorted(set(string.split()), key=len, reverse=True)\n\nif __name__ == '__main__':\n    s = 'a b c d e f g'\n    print(find_5_word(s))"
    },
    {
      "rank": 29,
      "score": 9.118642878148359,
      "candidate": "from string import ascii_lowercase\nfrom itertools import chain\n\n\ndef find_all_chars_long_word(string):\n    chars = [ch for ch in ascii_lowercase]\n    long_word = []\n    for i, word in enumerate(string.split(' ')):\n        if len(word) > 3:\n            for char in word:\n                if char not in chars:\n                    break\n            else:\n                long_word.append(word)\n    return long_word\n\n\nif __name__ == '__main__':\n    string = 'this is a test string'\n    long_word = find_all_chars_long_word(string)\n    print(long_word)"
    },
    {
      "rank": 30,
      "score": 8.918704224792583,
      "candidate": "def five_char_long_words(string):\n    \"\"\"\n    string: string\n    return: a list of all five character long words in the string\n    \"\"\"\n    return [word for word in re.findall(r'\\w{5}', string)]\n\nif __name__ == '__main__':\n    string = \"aabccd\"\n    print five_char_long_words(string)"
    },
    {
      "rank": 31,
      "score": 8.906069577474776,
      "candidate": "import re\n\ndef five_long_word(s):\n    return re.findall(r'[A-Za-z]{5,}', s)\n\nif __name__ == '__main__':\n    assert five_long_word(\"The quick brown fox jumps over the lazy dog\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n    assert five_long_word(\"Hello World\") == ['Hello', 'World']\n    assert five_long_word(\"Hello, world\") == ['Hello', 'world']\n    assert five_long_word(\"Hello, world!\") == ['Hello', 'world', '!']"
    },
    {
      "rank": 32,
      "score": 8.89319520292073,
      "candidate": "import re\n\ndef all_chars_long_word_regex(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    for word in re.findall(r\"[\\w\\W]{5,}\", s):\n        if len(word) == 5:\n            res.append(word)\n    return res\n\nif __name__ == '__main__':\n    assert all_chars_long_word_regex(\"the word\") == ['the', 'word']\n    assert all_chars_long_word_regex(\"the word with space\") == ['the', 'word', 'with','space']\n    assert all_chars_long_word_regex(\"the word with space with space\") == ['the', 'word', 'with','space', 'with','space']\n    assert all_chars_long_word_regex(\"the word with space with space with space\") == ['the', 'word', 'with','space', 'with','space', 'with','space']"
    },
    {
      "rank": 33,
      "score": 8.890021140089575,
      "candidate": "class Solution(object):\n    def findFiveCharWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        count = 0\n        words = []\n        for i in range(len(s)):\n            if s[i:i+5] == s[:i+5]:\n                count += 1\n                if count == 5:\n                    words.append(s[i:i+5])\n                    count = 0\n        return words"
    },
    {
      "rank": 34,
      "score": 8.822815104011912,
      "candidate": "def findFiveCharWord(string):\n    if string is None:\n        return None\n    return [w for w in re.findall(r'[A-Za-z]+', string)]"
    },
    {
      "rank": 35,
      "score": 8.822519596457047,
      "candidate": "#!/usr/bin/python\n\ndef check_if_5_chars_exist(string):\n    return ''.join(c for c in string if len(c) == 5)\n\nif __name__ == '__main__':\n    print check_if_5_chars_exist('aabbccddeeff')"
    },
    {
      "rank": 36,
      "score": 8.742381171970763,
      "candidate": "import re\n\n\ndef is_five_char_long(string):\n    regex = re.compile('[A-Za-z]{5}')\n    if regex.match(string):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    string = \"This is a test string\"\n    print(is_five_char_long(string))"
    },
    {
      "rank": 37,
      "score": 8.725815537311243,
      "candidate": "class Solution(object):\n    def findFiveCharWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        words = set()\n        for i in range(len(s)):\n            if s[i] in ['a', 'e', 'i', 'o', 'u']:\n                if i - 1 >= 0 and s[i-1] in ['a', 'e', 'i', 'o', 'u']:\n                    words.add(''.join(s[i-2:i+1]))\n                if i + 1 < len(s) and s[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                    words.add(''.join(s[i-1:i+2]))\n            elif s[i] in ['b', 'c', 'd', 'f', 'g', 'j', 'k','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'z']:\n                if i - 1 >= 0 and s[i-1] in ['b', 'c', 'd', 'f', 'g', 'j', 'k','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'z']:\n                    words.add(''.join(s[i-2:i+1]))\n                if i + 1 < len(s) and s[i+1] in ['b', 'c', 'd', 'f', 'g', 'j', 'k','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'z']:\n                    words.add(''.join(s[i-1:i+2]))\n            elif s[i] in ['c', 'e', 'i', 'o', 'u', 'y']:\n                if i - 2 >= 0 and s[i-2] in ['c', 'e', 'i', 'o', 'u', 'y']:\n                    words.add(''.join(s[i-3:i+1]"
    },
    {
      "rank": 38,
      "score": 8.680547463676588,
      "candidate": "# Definition for a word.\nclass Word:\n    def __init__(self, s):\n        self.s = s\n\n    def __repr__(self):\n        return self.s\n\nclass Solution:\n    def findWords(self, s: str) -> List[Word]:\n        words = []\n        for i in range(len(s)):\n            if i < len(s) - 4:\n                j = i + 1\n                while j < i + 4:\n                    if s[i:j] in words:\n                        words.remove(s[i:j])\n                    j += 1\n            words.append(Word(s[i:i+4]))\n        return words"
    },
    {
      "rank": 39,
      "score": 8.617265532883454,
      "candidate": "import re\n\ndef find_all_word_in_string(string):\n    # write your code here\n    pattern = re.compile(r\"\\w{5,}\")\n    match = pattern.findall(string)\n    return match\n\nif __name__ == '__main__':\n    print find_all_word_in_string(\"Hello World\")"
    },
    {
      "rank": 40,
      "score": 8.610686422978315,
      "candidate": "class Solution(object):\n    def findFiveCharLongestWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        def word(s):\n            if len(s) < 5:\n                return None\n            return [s[0], s[1], s[2], s[3], s[4]]\n        return [word(s) for s in s.split()]"
    },
    {
      "rank": 41,
      "score": 8.608716227339848,
      "candidate": "# https://leetcode.com/problems/find-five-longest-words/description/\n\nimport re\n\ndef five_longest_words(string):\n    # write your code here\n    if not string or len(string) < 5:\n        return []\n    words = []\n    for i in range(len(string)):\n        if string[i] =='':\n            continue\n        if string[i:i+5] in words:\n            words.append(string[i:i+5])\n    return words\n\nif __name__ == '__main__':\n    print five_longest_words(\"Hello World\")\n    print five_longest_words(\"Hello world\")\n    print five_longest_words(\"Hello Worl\")\n    print five_longest_words(\"Hello world 123\")\n    print five_longest_words(\"Hello world 123 hello world\")\n    print five_longest_words(\"Hello world 123 hello world and hello world\")\n    print five_longest_words(\"Hello world 123 hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello world and hello"
    },
    {
      "rank": 42,
      "score": 8.59352307036605,
      "candidate": "#!/usr/bin/python\n\nclass WordDictionary:\n    def __init__(self):\n        self.words = {}\n        self.word_len = 0\n\n    def add_word(self, word):\n        if word in self.words:\n            return\n        self.words[word] = self.word_len\n        self.word_len += len(word)\n\n    def find_five_chars(self, string):\n        regex = '^[a-zA-Z]+$'\n        match = re.findall(regex, string)\n        if match:\n            return match\n        else:\n            return []\n\n    def find_word(self, string):\n        match = re.findall(regex, string)\n        if match:\n            return match[0]\n        else:\n            return None\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.add_word(\"word\")\n# param_2 = obj.find_five_chars(\"Hello World!\")\n# param_3 = obj.find_word(\"Hello World!\")"
    },
    {
      "rank": 43,
      "score": 8.540521698146632,
      "candidate": "import re\n\ndef find_word(string):\n    return re.findall(r'\\w{5,}', string)\n\nif __name__ == '__main__':\n    string = 'The quick brown fox jumped over the lazy dog.'\n    print(find_word(string))"
    },
    {
      "rank": 44,
      "score": 8.523273853791832,
      "candidate": "class Solution:\n    # @return a list of words\n    def findWords(self, s):\n        words = []\n        for i in range(len(s)):\n            if i+5 > len(s):\n                break\n            if s[i:i+5] in words:\n                continue\n            if s[i:i+5] == s[i+1:i+5] and s[i:i+5]!= s[i+2:i+5]:\n                words.append(s[i:i+5])\n        return words\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findWords('aabccccdd')\n    print s.findWords('cbbb')\n    print s.findWords('abbc')\n    print s.findWords('abbcccdd')"
    },
    {
      "rank": 45,
      "score": 8.495468835710984,
      "candidate": "import re\n\ndef is_valid_word(s):\n    if len(s) < 5:\n        return False\n    if len(s) == 5:\n        return True\n    if s[0]!= s[4]:\n        return False\n    if s[1]!= s[2]:\n        return False\n    if s[3]!= s[4]:\n        return False\n    if s[0]!= s[3]:\n        return False\n    return True\n\ndef find_all_words(s):\n    words = []\n    pattern = re.compile(\"[a-zA-Z0-9]{5}\")\n    for m in re.finditer(pattern, s):\n        words.append(m.group())\n    return words\n\nif __name__ == \"__main__\":\n    s = \"Hello World!\"\n    words = find_all_words(s)\n    print(words)"
    },
    {
      "rank": 46,
      "score": 8.489100117144543,
      "candidate": "class Solution(object):\n    def findFiveCharLongestWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # Use re.findall() to get all five characters long words\n        words = re.findall(r\"\\w{5}\", s)\n        # Use set() to remove duplicate words\n        words = set(words)\n        # Use list() to get all words\n        words = list(words)\n        # Return the longest word\n        return max(words, key=len)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findFiveCharLongestWord(\"abcabcbb\")\n    print s.findFiveCharLongestWord(\"bbbbb\")\n    print s.findFiveCharLongestWord(\"bab\")"
    },
    {
      "rank": 47,
      "score": 8.486654401650776,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def findAllWords(self, s):\n        words = set()\n        pattern = r\"\\b[a-zA-Z]+\\b\"\n        regex = re.compile(pattern)\n        for match in regex.finditer(s):\n            words.add(match.group())\n        return list(words)"
    },
    {
      "rank": 48,
      "score": 8.484486095834004,
      "candidate": "def five_characters(s):\n    if len(s) < 5:\n        return False\n    for i in range(len(s)):\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\n\nprint five_characters('abcdabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde"
    },
    {
      "rank": 49,
      "score": 8.427964466453867,
      "candidate": "import re\n\ndef five_chars_long_word(string):\n    regex = re.compile(r'\\w{5}')\n    return regex.findall(string)\n\n# Test Cases\n\ns = 'Hello World'\nprint five_chars_long_word(s)"
    },
    {
      "rank": 50,
      "score": 8.33674144424782,
      "candidate": "class Solution(object):\n    def findFiveCharLongestWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if len(s) == 0:\n            return []\n\n        regex = re.compile(r'\\w{5,}')\n        ans = []\n        for i in range(len(s)):\n            if regex.match(s[i:i+5]):\n                ans.append(s[i:i+5])\n                if i+5 > len(s):\n                    break\n\n        return ans"
    },
    {
      "rank": 51,
      "score": 8.33673389207171,
      "candidate": "#!/usr/bin/env python\n\n# import the modules needed to run the program\nimport re\n\n# define the regular expression to check\nr = re.compile(r\"\\w{5}\")\n\n# function to check if the given string has the word\ndef check(word):\n    return r.match(word)\n\n# function to find all the words with five character length\ndef find_all_5(s):\n    return [word for word in s.split() if check(word)]\n\n# function to print all the words in the given string\ndef print_all_5(s):\n    for word in find_all_5(s):\n        print word\n\n# test the function\nprint find_all_5(\"I love python\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")\nprint find_all_5(\"Python is great!\")"
    },
    {
      "rank": 52,
      "score": 8.336534363091877,
      "candidate": "import re\nimport string\n\n\ndef find_longest_word(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    # word_length = 0\n    # word = ''\n    # for i in range(len(string)):\n    #     if string[i] in string[i + 1:]:\n    #         word += string[i]\n    #         word_length += 1\n    #     else:\n    #         if word_length > 5:\n    #             return [word]\n    #         else:\n    #             word = ''\n    #             word_length = 0\n    #     if i == len(string) - 1:\n    #         if word_length > 5:\n    #             return [word]\n    #         else:\n    #             word = ''\n    #             word_length = 0\n\n    # pattern = r'\\b(?:[a-zA-Z]\\w+|[a-zA-Z]|[^a-zA-Z]\\w+|[^a-zA-Z]|[^a-zA-Z\\s]+)\\b'\n    pattern = r'\\b(?:[a-zA-Z]\\w+|[a-zA-Z]|[^a-zA-Z]\\w+|[^a-zA-Z]|[^a-zA-Z\\s]+)\\b'\n    regex = re.compile(pattern, re.I)\n\n    result = []\n    for word in regex.findall(string):\n        if len(word) > 5:\n            result.append(word)\n    return result\n\n\nif __name__ == '__main__':\n    print(find_longest_word('This is a test'))"
    },
    {
      "rank": 53,
      "score": 8.310265319539537,
      "candidate": "# write your code here\n\ndef find_word(str):\n    pattern = r\"^\\w{5,}$\"\n    regex = re.compile(pattern)\n    matches = regex.findall(str)\n    return matches\n\nif __name__ == \"__main__\":\n    str = \"Hello World! My name is John, I love Python and I love to program!\"\n    print find_word(str)"
    },
    {
      "rank": 54,
      "score": 8.305936744473371,
      "candidate": "class Solution(object):\n    def fiveLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in xrange(len(s) - 4):\n            if s[i:i+5] in res:\n                continue\n            if s[i:i+5] not in res:\n                res.append(s[i:i+5])\n        return res\n\nif __name__ == \"__main__\":\n    s = \"abcd\"\n    print Solution().fiveLetters(s)"
    },
    {
      "rank": 55,
      "score": 8.29371985700947,
      "candidate": "import re\n\ndef word_regex(string):\n    return re.findall(r'[a-zA-Z]{5,}', string)\n\nprint word_regex('the quick brown fox jumped over the lazy dog')"
    },
    {
      "rank": 56,
      "score": 8.230208757802126,
      "candidate": "import re\n\ndef find_five_chars_long_word(string):\n    words = re.findall(r\"\\w{5,}\", string)\n    return words\n\nif __name__ == \"__main__\":\n    string = \"Hello world, this is a test string.\"\n    words = find_five_chars_long_word(string)\n    print words"
    },
    {
      "rank": 57,
      "score": 8.228486226914367,
      "candidate": "import re\n\n\ndef find_all_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r\"\\w{5,}\", string)\n\n\nif __name__ == '__main__':\n    s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"
    },
    {
      "rank": 58,
      "score": 8.224024295035612,
      "candidate": "import re\n\ndef find_five_words(string):\n    regex = re.compile(\"(.{5,})\")\n    match = regex.search(string)\n    while match:\n        match = regex.search(string)\n        if match.group(0) == match.group(1):\n            yield match.group(0)\n\nif __name__ == \"__main__\":\n    string = \"the quick brown fox jumps over the lazy dog\"\n    print(find_five_words(string))\n    \n    string = \"I am testing this out\"\n    print(find_five_words(string))"
    },
    {
      "rank": 59,
      "score": 8.213636204395558,
      "candidate": "def word_length(s):\n    # Your code here\n    regex = re.compile('[A-Za-z]{5,}')\n    for word in regex.findall(s):\n        if len(word) == 5:\n            print word\n\nword_length('The quick brown fox jumps over the lazy dog.')"
    },
    {
      "rank": 60,
      "score": 8.206040144038568,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\ndef find_five_chars(string):\n    regex = re.compile(r'\\w{5}')\n    return regex.findall(string)\n\nif __name__ == '__main__':\n    string = 'My dog has five fingers. My cat has five fingers. My mouse has five fingers.'\n    print(find_five_chars(string))"
    },
    {
      "rank": 61,
      "score": 8.19402839116286,
      "candidate": "import re\n\ndef find_five_chars_word(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    word = \"\"\n    for i in range(0, len(string)):\n        if string[i] in string[i+1:i+5]:\n            if word:\n                return [word]\n            else:\n                word = string[i:i+5]\n    return [word]\n\nif __name__ == '__main__':\n    s = \"Hello World\"\n    print find_five_chars_word(s)"
    },
    {
      "rank": 62,
      "score": 8.167659402818922,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def findWords(self, s):\n        words = []\n        words.append(self.checkWord(s, \"\", 0, 0))\n        words.append(self.checkWord(s, \"\", 1, 0))\n        words.append(self.checkWord(s, \"\", 0, 1))\n        words.append(self.checkWord(s, \"\", 1, 1))\n        words.append(self.checkWord(s, \"\", 0, 0, 1))\n        return words\n\n    def checkWord(self, s, word, i, j):\n        if (i == len(s)):\n            return word\n        elif (j == len(s)):\n            return word\n        elif (s[i]!= s[j]):\n            return self.checkWord(s, word + s[i], i + 1, j)\n        else:\n            return self.checkWord(s, word + s[j], i, j + 1)\n\n\nif __name__ == \"__main__\":\n    s = \"abcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd"
    },
    {
      "rank": 63,
      "score": 8.058404383762031,
      "candidate": "import re\n\ndef find_five(text):\n    regex = re.compile(r'[a-zA-Z]+')\n    return regex.findall(text)\n\n\nif __name__ == '__main__':\n    text = 'the quick brown fox jumps over the lazy dog'\n    print(find_five(text))"
    },
    {
      "rank": 64,
      "score": 7.935530356401672,
      "candidate": "def find_all_word(string):\n    regex = r'\\w{5,}'\n    words = re.findall(regex, string)\n    return words\n\nif __name__ == '__main__':\n    string = 'This is a test.'\n    print find_all_word(string)"
    },
    {
      "rank": 65,
      "score": 7.914987398830185,
      "candidate": "class Solution(object):\n    def findFiveCharLongestWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        re = re.compile(r'[a-z]+')\n        words = []\n        for i in range(len(s)):\n            word = ''\n            for j in range(i, len(s)):\n                if re.search(s[i:j+1], word):\n                    if len(word) > 5:\n                        words.append(word)\n                    else:\n                        break\n                else:\n                    word += s[i:j+1]\n            if len(word) > 5:\n                words.append(word)\n            else:\n                break\n        return ''.join(words)\n\nif __name__ == '__main__':\n    s = Solution()\n    s.findFiveCharLongestWord('Hello World')\n    print s.findFiveCharLongestWord('Hello World')"
    },
    {
      "rank": 66,
      "score": 7.882856365457775,
      "candidate": "class Solution(object):\n    def isFiveCharWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if len(s) < 5:\n            return []\n\n        re = re.compile('[a-zA-Z]+')\n        result = []\n        for i in range(len(s)):\n            if re.match(s[i:i+5]):\n                result.append(s[i:i+5])\n        return result\n\n\nif __name__ == '__main__':\n    s = \"Hello World\"\n    print Solution().isFiveCharWord(s)"
    },
    {
      "rank": 67,
      "score": 7.833478861951167,
      "candidate": "import re\n\ndef find_long_word(s):\n    # write your code here\n    re_pattern = re.compile(r'\\w{5,}')\n    return re_pattern.findall(s)\n\nif __name__ == '__main__':\n    s = 'Hello World, Hello World'\n    print(find_long_word(s))"
    },
    {
      "rank": 68,
      "score": 7.7947847418302105,
      "candidate": "import re\n\ndef is_five_char_long(string):\n    if len(string) < 5:\n        return False\n    if string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4]:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    string = \"this is a test\"\n    print is_five_char_long(string)\n    print is_five_char_long(\"aabcc\")"
    },
    {
      "rank": 69,
      "score": 7.65098224148845,
      "candidate": "# write your code here\ndef fiveChars(s):\n    pattern = r'\\w{5}'\n    return re.findall(pattern, s)\n\n\nif __name__ == '__main__':\n    # s = 'hello'\n    s = 'abcabcabcabcabcabcabc'\n    print(fiveChars(s))\n\n    # s = 'aabbcc'\n    s = 'abbcc'\n    print(fiveChars(s))"
    },
    {
      "rank": 70,
      "score": 7.6334459729775865,
      "candidate": "# https://leetcode.com/problems/word-pattern/discuss/3924/Very-Easy-Regex-solution-with-explanation-and-explanation-for-solution-using-patterns\nclass Solution(object):\n    def findFiveCharWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        words = []\n        for i in xrange(len(s)):\n            if i + 5 > len(s):\n                break\n            elif s[i:i+5] in words:\n                words.remove(s[i:i+5])\n            else:\n                words.append(s[i:i+5])\n        return words"
    },
    {
      "rank": 71,
      "score": 7.530162743728034,
      "candidate": "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def findFiveCharLongestWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        longest_word = ''\n        pattern = r'[a-z]+'\n        for word in s.split():\n            if len(word) > 5 and word.startswith(pattern):\n                if len(longest_word) < len(word):\n                    longest_word = word\n        return longest_word\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findFiveCharLongestWord('this is a test')"
    },
    {
      "rank": 72,
      "score": 3.446030604275131,
      "candidate": "# https://www.hackerearth.com/practice/string-searching/code-challenges/practice-problems/algorithm/five-characters-long-word-in-string/\n# https://www.hackerearth.com/practice/string-searching/code-challenges/practice-problems/algorithm/five-characters-long-word-in-string/problem-statement/\n# https://www.hackerearth.com/practice/string-searching/code-challenges/practice-problems/algorithm/five-characters-long-word-in-string/practice-test-case/\n# https://www.hackerearth.com/practice/string-searching/code-challenges/practice-problems/algorithm/five-characters-long-word-in-string/\n\ndef five_characters_long_word(string):\n    # First find all strings of length 5\n    strings = []\n    for i in range(0, len(string)):\n        if string[i:i+5] == string[i:i+5]:\n            strings.append(string[i:i+5])\n    # Now find the longest string\n    max_length = 0\n    longest_string = \"\"\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_string = s\n    return longest_string\n\n\nif __name__ == \"__main__\":\n    s = \"tacos\"\n    print(five_characters_long_word(s))"
    },
    {
      "rank": 73,
      "score": 3.4416786583583274,
      "candidate": "class Solution(object):\n    def findFiveCharLongestWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for i in range(len(s)):\n            if i == 0 or s[i]!= s[i - 1]:\n                if len(res) > 5:\n                    res = res[:5]\n                else:\n                    res = res + s[i]\n        return res"
    },
    {
      "rank": 74,
      "score": 3.3065654456034856,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport re\n\ndef find_all_five_characters_word(string):\n    \"\"\"\n    Find all five characters long word in the given string by using regex.\n\n    @param string: string\n    @return: a list of all five characters long word in the given string\n    \"\"\"\n    regex = re.compile(r\"[a-zA-Z]{5}\")\n    return regex.findall(string)\n\nif __name__ == '__main__':\n    test_string = \"Hello, my name is John, and I love you, and I love you too much.\"\n    print find_all_five_characters_word(test_string)\n\n    test_string = \"Hello, my name is John, and I love you, and I love you too much.\"\n    print find_all_five_characters_word(test_string)"
    },
    {
      "rank": 75,
      "score": 3.2225560714543438,
      "candidate": "class Solution(object):\n    def findFiveCharWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        if len(s) <= 5:\n            return [s]\n        l = len(s)\n        res = []\n        for i in xrange(l):\n            if i < l - 4:\n                if s[i:i+5] == s[i+1:i+4] and s[i] == s[i+4]:\n                    res.append(s[i:i+5])\n            if i < l - 3:\n                if s[i:i+5] == s[i+1:i+4] and s[i] == s[i+4]:\n                    res.append(s[i:i+5])\n            if i < l - 2:\n                if s[i:i+5] == s[i+1:i+4] and s[i] == s[i+4]:\n                    res.append(s[i:i+5])\n            if i < l - 1:\n                if s[i:i+5] == s[i+1:i+4] and s[i] == s[i+4]:\n                    res.append(s[i:i+5])\n            if i < l - 0:\n                if s[i:i+5] == s[i+1:i+4] and s[i] == s[i+4]:\n                    res.append(s[i:i+5])\n        return res\n\ns = Solution()\nprint s.findFiveCharWord(\"the sky is blue\")"
    },
    {
      "rank": 76,
      "score": 3.1573424126399297,
      "candidate": "# https://www.geeksforgeeks.org/given-string-find-all-5-character-long-words/\nclass Solution:\n    def allFiveChars(self, str):\n        regex = re.compile(\"[a-zA-Z0-9]{5}\")\n        for word in regex.findall(str):\n            if len(word) == 5:\n                yield word\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.allFiveChars(\"hello\"))\n    print(s.allFiveChars(\"aabccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s.allFiveChars(\"aabbccddeeff\"))\n    print(s."
    },
    {
      "rank": 77,
      "score": 3.1440471043732576,
      "candidate": "# Your function should return a list of strings.\n\n# For example:\n# Given \"Hello World\", the function should return [\"Hello\", \"World\"].\n\n# Note:\n# The length of given string will not exceed 500.\n\nclass Solution:\n    # @param s, a string\n    # @return a list of strings\n    def findFiveCharLongestWord(self, s):\n        regex = r'(.){5,}'\n        return [word for word in s.split(regex) if len(word) > 5]\n\nif __name__ == '__main__':\n    print Solution().findFiveCharLongestWord(\"Hello World\")"
    },
    {
      "rank": 78,
      "score": 3.0996493039748536,
      "candidate": "class Solution:\n    def findFiveCharLongestWord(self, s: str) -> str:\n        if not s:\n            return ''\n        regex = '.*(.).*'\n        pattern = re.compile(regex)\n        words = []\n        for word in pattern.findall(s):\n            if len(word) == 5:\n                words.append(word)\n        return ''.join(words)"
    },
    {
      "rank": 79,
      "score": 3.0911317264526295,
      "candidate": "import re\n\ndef find_five_char_long_word(str):\n    \"\"\"\n    :type str: str\n    :rtype: list[str]\n    \"\"\"\n    return [word for word in str if re.search(r'\\w{5}', word)]\n\n\nif __name__ == '__main__':\n    assert find_five_char_long_word('abcdefghijklmnopqrstuvwxyz') == ['abcdefghijklmnopqrstuvwxyz']\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('hello world') == ['hello']\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_word('Hello World') == []\n    assert find_five_char_long_"
    },
    {
      "rank": 80,
      "score": 3.0858748803487273,
      "candidate": "# Definition for a word.\nclass Word:\n    def __init__(self, c):\n        self.chars = c\n\n\nclass Solution:\n    def findFiveCharWords(self, s: str) -> List[Word]:\n        def helper(s, c, i):\n            if i == len(s):\n                yield Word(c)\n            else:\n                for j in range(i, len(s)):\n                    if s[j] == c:\n                        if len(s[i:j+1]) == 5:\n                            yield Word(c)\n                        else:\n                            yield from helper(s, c, j+1)\n\n        return list(helper(s, '', 0))"
    },
    {
      "rank": 81,
      "score": 3.075706028932168,
      "candidate": "class Solution(object):\n    def findAllWords(self, s, dic):\n        \"\"\"\n        :type s: str\n        :type dic: set\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        words = [x for x in s.split(\" \") if len(x) > 1]\n        for word in words:\n            if word in dic:\n                res.append(word)\n        return res"
    },
    {
      "rank": 82,
      "score": 3.0014829024263134,
      "candidate": "class Solution(object):\n    def findAllWords(self, s, dict):\n        \"\"\"\n        :type s: str\n        :type dict: Set[str]\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        words = []\n        for i in range(len(s)):\n            if s[i] in dict:\n                words.append(s[i])\n                if i > 0 and s[i-1] in dict and s[i+1] in dict:\n                    words.append(s[i-1])\n                    words.append(s[i+1])\n        return words"
    },
    {
      "rank": 83,
      "score": 2.996085804825999,
      "candidate": "class Solution(object):\n    def allLettersOfGivenString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j] and s[i:j+1] in res:\n                    continue\n                else:\n                    res.append(s[i:j+1])\n        return res\n\n    def allLettersOfGivenString1(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    res.append(s[i:j+1])\n                    break\n        return res\n\n\nif __name__ == \"__main__\":\n    s = \"abc\"\n    sol = Solution()\n    print sol.allLettersOfGivenString1(s)"
    },
    {
      "rank": 84,
      "score": 2.979117064741703,
      "candidate": "import re\n\n# Example\n# Input: \"Hello world\"\n# Output: [\"Hello\", \"world\"]\n# Note:\n# The word is defined as a string of lowercase letters.\n# The length of word is greater than 5.\n# Input string will be always in lowercase.\n\n# TLE\n# def find_five_chars_long_word(s):\n#     regex = re.compile(r\"\\b[a-z]{5,}\\b\")\n#     return [word for word in regex.findall(s)]\n\n# Solution:\n# Use regex to find all words, then check if they are all of the same length.\n# If they are, then return the list of words.\n\ndef find_five_chars_long_word(s):\n    regex = re.compile(r\"\\b[a-z]{5,}\\b\")\n    words = regex.findall(s)\n    return [word for word in words if len(word) == 5]"
    },
    {
      "rank": 85,
      "score": 2.9599033526603566,
      "candidate": "import re\n\n\nclass Solution(object):\n    def findAllWords(self, s, dict):\n        \"\"\"\n        :type s: str\n        :type dict: Set[str]\n        :rtype: List[str]\n        \"\"\"\n        words = []\n        for word in re.findall(r'\\w+', s):\n            if word in dict:\n                words.append(word)\n        return words\n\n\nif __name__ == '__main__':\n    so = Solution()\n    print so.findAllWords('Hello world', set(['world', 'hello']))"
    },
    {
      "rank": 86,
      "score": 2.934524872858905,
      "candidate": "# https://leetcode.com/problems/find-all-five-character-words/discuss/83470/Python-Cython-O(n)-Time-O(1)-Space-O(1)-dp-solution-with-explanation\nclass Solution(object):\n    def findFiveCharWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        words = []\n        for i in range(len(s)):\n            if i + 5 < len(s):\n                if s[i:i + 5] in words:\n                    words.append(s[i:i + 5])\n                else:\n                    words.append(s[i:i + 5])\n        return words"
    },
    {
      "rank": 87,
      "score": 2.9132878683648986,
      "candidate": "# Time:  O(n)\n# Space: O(n)\n\n# The above solution is in the book.\n# The solution below is in the book.\n\nclass Solution(object):\n    def findFiveCharWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [word for word in s.split(' ') if len(word) == 5 and len(word) == 5]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.findFiveCharWords('abcdabcdabcd')"
    },
    {
      "rank": 88,
      "score": 2.9103284110031478,
      "candidate": "class Solution(object):\n    def findFiveCharWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        regex = re.compile('[a-z]{5,}')\n        return [w for w in regex.findall(s)]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findFiveCharWords(\"hello world\"))"
    },
    {
      "rank": 89,
      "score": 2.8883261386792682,
      "candidate": "# time: O(n)\n# space: O(1)\n\n# 5ms\nclass Solution:\n    def findWords(self, s: str) -> List[str]:\n        words = []\n        for word in re.findall('[a-zA-Z]+', s):\n            if len(word) == 5:\n                words.append(word)\n        return words\n\n# 4ms\nclass Solution2:\n    def findWords(self, s: str) -> List[str]:\n        words = []\n        for word in re.findall('[a-zA-Z]+', s):\n            if len(word) == 5:\n                words.append(word)\n        return words\n\n\nif __name__ == '__main__':\n    s = \"hello world\"\n    print(Solution().findWords(s))\n    print(Solution2().findWords(s))"
    },
    {
      "rank": 90,
      "score": 2.8258147799235465,
      "candidate": "# Your function should return a list of words.\n# If the word is not a 5-character word, return an empty list.\n# If the word is a 5-character word, return a list of words where each word is represented by a list of indices of characters.\n\n# Example 1:\n# Input:\n# s = \"leetcode\"\n# Output:\n# [[\"le\",\"ee\",\"ee\",\"ot\",\"key\"],[\"l\",\"e\",\"e\",\"e\",\"o\"],[\"t\",\"e\",\"e\",\"e\",\"e\"]]\n# Explanation:\n# \"leetcode\" is a 5-character word.\n# \"leet\" is a 5-character word.\n# \"key\" is a 5-character word.\n# \"leot\" is not a 5-character word.\n# \"e\" is a 5-character word.\n# \"e\" is a 5-character word.\n# \"ot\" is a 5-character word.\n# \"e\" is a 5-character word.\n# \"e\" is a 5-character word.\n\n# Note:\n# The length of s will be in the range [1, 1000].\n# The length of s will be in the range [1, 1000].\n\n# import collections\n# class Solution(object):\n#     def findWords(self, s):\n#         \"\"\"\n#         :type s: str\n#         :rtype: List[List[str]]\n#         \"\"\"\n#         words = collections.defaultdict(list)\n#         for i in range(len(s)):\n#             if s[i] in '0123456789':\n#                 words[s[i]].append(i)\n#         return words.values()\n\nclass Solution(object):\n    def findWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        dic = {}\n        result = []\n        for i in range(len(s)):\n            if s[i] in dic:\n                dic[s[i]].append(i)\n            else:\n                dic[s[i]] = [i]\n        for k, v in dic.items():\n            if len"
    },
    {
      "rank": 91,
      "score": 2.812915271164514,
      "candidate": "# https://www.hackerrank.com/challenges/string-search-and-replace/problem\n\n# In[1]:\n\n#!/bin/python\nimport re\n\n# Complete the replaceString function below.\ndef replaceString(s, old, new):\n    return s.replace(old, new)\n\n\nif __name__ == '__main__':\n    s = input().strip()\n    old = input().strip()\n    new = input().strip()\n    print(replaceString(s, old, new))\n\n\n# In[ ]:"
    },
    {
      "rank": 92,
      "score": 2.803692619911272,
      "candidate": "import re\n\n# your function will be called like this:\n# word = find_all_strings(text)\n\n# word will be a list of strings\ndef find_all_strings(text):\n    return [word for word in re.findall(r'\\w+', text)]\n\n# word will be a list of strings\ndef find_all_strings(text):\n    return [word for word in re.findall(r'\\w+', text)]\n\n# word will be a list of strings\ndef find_all_strings(text):\n    return [word for word in re.findall(r'\\w+', text)]"
    },
    {
      "rank": 93,
      "score": 2.765536855160976,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def findAllWords(self, s):\n        words = []\n        s = s.lower()\n        for i in range(len(s)):\n            if s[i] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n                words.append(s[:i]+s[i+1:])\n        return words\n\nif __name__ == '__main__':\n    s = \"leetcode\"\n    words = Solution().findAllWords(s)\n    print(words)"
    },
    {
      "rank": 94,
      "score": 2.7366730180988488,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def findFiveCharWords(self, s):\n        words = []\n        if len(s) == 0:\n            return words\n        for i in range(len(s)):\n            if i == 0:\n                if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n                    words.append(s[:5])\n            else:\n                if s[i] == s[i-1] and s[i-1] == s[i-2] and s[i-2] == s[i-3] and s[i-3] == s[i-4]:\n                    words.append(s[:i+1])\n        return words\n\n    def findFiveCharWords_regex(self, s):\n        if len(s) == 0:\n            return []\n        words = []\n        for i in range(len(s)):\n            if i == 0:\n                if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n                    words.append(s[:5])\n            else:\n                if s[i] == s[i-1] and s[i-1] == s[i-2] and s[i-2] == s[i-3] and s[i-3] == s[i-4]:\n                    words.append(s[:i+1])\n        return words\n\n# test\ns = \"aabbcc\"\nprint Solution().findFiveCharWords(s)\nprint Solution().findFiveCharWords_regex(s)\n\n# solution by @Poojan\n# @Poojan\ndef findFiveCharWords(s):\n    if len(s) == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        if i == 0:\n            if s[0] == s[1] and s[1] == s[2] and s[2] =="
    },
    {
      "rank": 95,
      "score": 2.6932638306027887,
      "candidate": "#!/usr/bin/env python\n\n# This is the standard library module that we use to type our\n# tests.\nimport unittest\nimport re\n\n# This module is the \"sandwich\" of the unit tests.\nimport test_regex_find_five_chars_word\n\n\nclass TestRegexFindFiveCharsWord(unittest.TestCase):\n    \"\"\"Test class for regex_find_five_chars_word.\"\"\"\n\n    def test_regex_find_five_chars_word(self):\n        self.assertEqual(re.findall(test_regex_find_five_chars_word.regex,\n                                    test_regex_find_five_chars_word.test_string),\n                         ['abcd', 'efgh', 'ijkl','mnop', 'qrst'])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 96,
      "score": 2.6531000790166055,
      "candidate": "def is_valid_word(word):\n    if len(word) == 5:\n        return True\n    return False\n\ndef find_all_5_word(text):\n    if text is None:\n        return []\n    words = text.split()\n    return [w for w in words if is_valid_word(w)]\n\nif __name__ == '__main__':\n    text = 'abcd'\n    print(find_all_5_word(text))"
    },
    {
      "rank": 97,
      "score": 2.5755806650416857,
      "candidate": "# Your function should return a list of words.\n\n# Example 1:\n\n# Input:\n# s = \"the sky is blue\"\n# Output:\n# ['sky', 'blue', 'is', 'blue','sky' ]\n\n# Example 2:\n\n# Input:\n# s = \"a\"\n# Output:\n# [ 'a' ]\n\n\ndef five_chars_long_words(s):\n    words = []\n    for i in range(1, len(s) + 1):\n        if len(s[:i]) == 5:\n            words.append(s[:i])\n\n    return words\n\nif __name__ == '__main__':\n    s = \"the sky is blue\"\n    words = five_chars_long_words(s)\n    print words\n    s = \"a\"\n    words = five_chars_long_words(s)\n    print words"
    },
    {
      "rank": 98,
      "score": 2.571228622793446,
      "candidate": "# https://www.hackerrank.com/challenges/find-five-word\n# https://www.hackerrank.com/challenges/find-five-word/problem\n\n# Definition for a  word: string\nclass Word:\n    def __init__(self, word):\n        self.word = word\n        self.count = 0\n\n    def __str__(self):\n        return self.word\n\n    def __repr__(self):\n        return self.word\n\nclass Solution:\n    def findFiveWord(self, s):\n        words = []\n        for i in range(len(s)):\n            word = Word(s[i:])\n            if word.word not in words:\n                words.append(word)\n        words.sort(key=lambda w: w.count)\n        return words[0].word + \" \" + words[1].word + \" \" + words[2].word + \" \" + words[3].word + \" \" + words[4].word\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findFiveWord(\"the sky is blue\"))"
    },
    {
      "rank": 99,
      "score": 2.4451487290492384,
      "candidate": "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def findAllWords(self, s):\n        words = []\n        for i in range(len(s)):\n            if s[i] =='':\n                if len(words) == 5:\n                    words.append(s[:i])\n                else:\n                    words.append(s[:i+1])\n            else:\n                words.append(s[:i])\n        return words\n\nif __name__ == '__main__':\n    s = 'aabcccccaa'\n    print Solution().findAllWords(s)"
    },
    {
      "rank": 100,
      "score": 2.240273919813974,
      "candidate": "# https://leetcode.com/problems/find-all-the-five-character-long-words/discuss/56954/Python-DP-solution-with-regex-with-explanation\n\nclass Solution(object):\n    def findAllWords(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        words = words + ['a', 'b', 'c', 'd', 'e']\n        res = []\n        for word in words:\n            if s.find(word) == -1:\n                continue\n            if len(word) == 5:\n                res.append(word)\n        return res"
    }
  ]
}