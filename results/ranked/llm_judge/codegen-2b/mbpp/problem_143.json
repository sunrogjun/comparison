{
  "timestamp": "2025-09-14T18:25:30.028525",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 143,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import random\n\ndef random_selection(input_list, number_of_elements):\n    \"\"\"\n    :type input_list: list[list]\n    :type number_of_elements: int\n    :rtype: list[list]\n    \"\"\"\n    selected_list = []\n    for i in range(number_of_elements):\n        selected_list.append(random.choice(input_list))\n    return selected_list\n\n\n# Your Solution here.\n#\ndef selection(input_list, number_of_elements):\n    selected_list = []\n    for i in range(number_of_elements):\n        selected_list.append(input_list[random.randint(0, len(input_list) - 1)])\n    return selected_list\n\nif __name__ == '__main__':\n    input_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(selection(input_list, 2))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport copy\n\ndef find_elements(list_of_lists, list_to_find):\n    \"\"\"\n    Returns a list of every element in the list_of_lists that is equal to the given list_to_find.\n    \"\"\"\n    elements = []\n    for element in list_of_lists:\n        if element == list_to_find:\n            elements.append(element)\n    return elements\n\ndef find_elements_2(list_of_lists, list_to_find):\n    \"\"\"\n    Returns a list of every element in the list_of_lists that is equal to the given list_to_find.\n    \"\"\"\n    elements = []\n    for element in list_of_lists:\n        if element[0] == list_to_find[0] and element[1] == list_to_find[1]:\n            elements.append(element)\n    return elements\n\ndef find_elements_3(list_of_lists, list_to_find):\n    \"\"\"\n    Returns a list of every element in the list_of_lists that is equal to the given list_to_find.\n    \"\"\"\n    elements = []\n    for element in list_of_lists:\n        if element[0] == list_to_find[0] and element[1] == list_to_find[1]:\n            elements.append(element)\n    return elements\n\ndef find_elements_4(list_of_lists, list_to_find):\n    \"\"\"\n    Returns a list of every element in the list_of_lists that is equal to the given list_to_find.\n    \"\"\"\n    elements = []\n    for element in list_of_lists:\n        if element[0] == list_to_find[0] and element[1] == list_to_find[1]:\n            elements.append(element)\n    return elements\n\ndef find_elements_5(list_of_lists, list_to_find):\n    \"\"\"\n    Returns a list of every element in the list_of_lists that is equal to the given"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def extract(l, i, j):\n    \"\"\"\n    Input:\n    l - 2-dimensional list\n    i - start index\n    j - end index\n    Output:\n    list of elements\n    \"\"\"\n    return [l[i][j] for i in range(i, len(l))]\n\ndef main():\n    l = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    print extract(l, 1, 2)\n    print extract(l, 0, 0)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param A, a list of lists of integers\n    # @param k, an integer\n    # @return a list of lists of integers\n\n    def __init__(self, A, k):\n        self.A = A\n        self.k = k\n        self.n = len(A)\n        self.m = len(A[0])\n\n    def get_k_th_element(self, A, k):\n        i = 0\n        while i < self.n:\n            j = 0\n            while j < self.m:\n                if A[i][j] == k:\n                    return [i, j]\n                j += 1\n            i += 1\n        return None\n\n    def get_k_th_element_recursive(self, A, k, i, j):\n        if i == self.n and j == self.m:\n            return [i, j]\n        if i < self.n and A[i][j] == k:\n            return self.get_k_th_element_recursive(A, k, i + 1, j)\n        else:\n            return self.get_k_th_element_recursive(A, k, i, j + 1)\n\n    def get_k_th_element_iterative(self, A, k):\n        i = 0\n        j = 0\n        while i < self.n and j < self.m:\n            if A[i][j] == k:\n                return [i, j]\n            else:\n                i += 1\n                j += 1\n        return None\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(A,k)\n# param_1 = obj.get_k_th_element(A,k)\n# param_2 = obj.get_k_th_element_iterative(A,k)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/two-dimensions-to-one-dimension/discuss/221499/Python-Solution-in-O(n)\n\nclass Solution(object):\n    def extract(self, nums, k):\n        \"\"\"\n        :type nums: List[List[int]]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # dp\n        nums.sort()\n        dp = [0] * (len(nums) + 1)\n        for i in range(len(nums) + 1):\n            for j in range(len(nums) + 1):\n                if i == 0 or j == 0:\n                    dp[i] = j\n                elif i == 1:\n                    dp[i] = nums[j - 1]\n                elif j == 1:\n                    dp[i] = nums[i - 1]\n                else:\n                    dp[i] = min(dp[i - 1], dp[j - 1]) + nums[i - 1]\n        # print(dp)\n        # print(nums)\n        return dp[k]"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def extract(matrix, indices):\n    \"\"\"\n    >>> extract([[1, 2], [3, 4], [5, 6], [7, 8]], [0, 1])\n    [[5, 6], [7, 8]]\n    >>> extract([[1, 2], [3, 4], [5, 6], [7, 8]], [1, 1])\n    [[2, 4]]\n    \"\"\"\n    if len(indices) == 1:\n        return [matrix[indices[0]]]\n    else:\n        return [matrix[row][indices[0]] for row in indices]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nimport os\nimport sys\n\n# Complete the twoDListElements function below.\ndef twoDListElements(matrix):\n    return [matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[0]))]\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    matrix = [[int(i) for i in raw_input().split()] for j in range(n)]\n\n    fptr.write('\\n'.join(str(i) for i in twoDListElements(matrix)))\n\n    fptr.close()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def extract(list, x, y):\n    if x < 0 or x > len(list) - 1 or y < 0 or y > len(list[0]) - 1:\n        return []\n    return list[x][y]\n\n\n\ndef test():\n    list = [[1,2,3], [4,5,6], [7,8,9]]\n    assert extract(list, 0, 0) == [1,2,3]\n    assert extract(list, 0, 1) == [4,5,6]\n    assert extract(list, 1, 0) == [7,8,9]\n    assert extract(list, 1, 1) == []\n    assert extract(list, 0, 2) == []\n    assert extract(list, 2, 0) == []\n    assert extract(list, 2, 1) == []\n    assert extract(list, 2, 2) == []\n    assert extract(list, 2, 3) == []\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def extract(list_of_elements, number_of_elements):\n    \"\"\"\n    Input:\n        list_of_elements: A list of elements to be extracted\n        number_of_elements: The number of elements to be extracted\n    Output:\n        A list of the extracted elements.\n    \"\"\"\n    elements_to_extract = []\n    for i in range(0, number_of_elements):\n        elements_to_extract.append(list_of_elements[i])\n    return elements_to_extract\n\nprint extract([1,2,3,4,5,6,7,8], 3)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return str(self.x) +'' + str(self.y)\n\nclass Solution:\n    def extract(self, points, k):\n        \"\"\"\n        :type points: List[Point]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if not points:\n            return []\n        if len(points) == 1:\n            return [points[0].x, points[0].y]\n        if len(points) == 2:\n            return [points[0].x, points[0].y]\n\n        res = []\n        res.extend(self.extract(points[:k], k))\n        res.extend(self.extract(points[k:], k))\n        return res"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def extract_element(list, x, y):\n    \"\"\"\n    Input: list is a two dimensional list, x and y are integers\n    Output: return the value of the element at (x, y)\n    \"\"\"\n    return list[y][x]\n\n#Test\n\nlist = [[1, 2, 3], [4, 5, 6]]\nprint extract_element(list, 0, 0)\nprint extract_element(list, 1, 1)\nprint extract_element(list, 2, 1)\nprint extract_element(list, 1, 2)\nprint extract_element(list, 1, 2)\nprint extract_element(list, 1, 3)\nprint extract_element(list, 1, 3)\nprint extract_element(list, 2, 2)\nprint extract_element(list, 2, 2)\nprint extract_element(list, 2, 3)\nprint extract_element(list, 2, 3)\nprint extract_element(list, 3, 2)\nprint extract_element(list, 3, 2)\nprint extract_element(list, 3, 3)\nprint extract_element(list, 3, 3)\nprint extract_element(list, 4, 2)\nprint extract_element(list, 4, 2)\nprint extract_element(list, 4, 3)\nprint extract_element(list, 4, 3)\nprint extract_element(list, 5, 2)\nprint extract_element(list, 5, 2)\nprint extract_element(list, 5, 3)\nprint extract_element(list, 5, 3)\nprint extract_element(list, 6, 2)\nprint extract_element(list, 6, 2)\nprint extract_element(list, 6, 3)\nprint extract_element(list, 6, 3)\nprint extract_element(list, 7, 2)\nprint extract_element(list, 7, 2)\nprint extract_element(list, 7, 3)\nprint extract_element(list, 7, 3)\nprint extract_element(list, 8, 2)\nprint extract_element(list, 8, 2)\nprint extract_element(list, 8, 3)\nprint extract_element(list, 8, 3)\nprint extract_element(list, 9, 2"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def extract_elements(arr, arr_size, element):\n    return [arr[i][element] for i in range(arr_size)]\n\ndef main():\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(arr, len(arr), 0))\n    print(extract_elements(arr, len(arr), 1))\n    print(extract_elements(arr, len(arr), 2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def extract(list, key):\n\tfor i in range(0, len(list)):\n\t\tif key in list[i]:\n\t\t\treturn list[i]\n\treturn None\n\ndef test():\n\ttest_cases = [\n\t\t[[3,4,5], 4],\n\t\t[[[1,2,3],[4,5,6]], 3],\n\t\t[[[1,2,3],[4,5,6],[7,8,9]], 6],\n\t\t[[[1,2,3],[4,5,6],[7,8,9],[10,11,12]], 10]\n\t]\n\tfor i in range(0, len(test_cases)):\n\t\tres = extract(test_cases[i][0], test_cases[i][1])\n\t\tprint \"Case #{0}: {1}\".format(i+1, res)\n\ntest()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# -*- coding: utf-8 -*-\n# @Author: Gillett Hernandez\n# @Date:   2016-08-01 21:00:48\n# @Last Modified by:   Gillett Hernandez\n# @Last Modified time: 2016-08-03 20:29:22\n\nclass Solution(object):\n    def everyElement(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        return [i for i in range(len(matrix)) for j in range(len(matrix[0])) if matrix[i][j] == 0]\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.everyElement([[1, 1, 1], [1, 0, 1], [1, 1, 1]]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def extract_elements(my_list, elements):\n    for element in elements:\n        for i in range(len(my_list)):\n            if my_list[i] == element:\n                my_list.remove(element)\n                return True\n    return False\n\nif __name__ == \"__main__\":\n    my_list = [[1,2,3],[4,5,6]]\n    elements = [1,2]\n    extract_elements(my_list, elements)\n    print my_list"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-element/problem\n\ndef extract_element(A, x, y):\n    \"\"\"\n    :type A: List[List[int]]\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    return A[x][y]\n\nif __name__ == \"__main__\":\n    A = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n    x = 1\n    y = 2\n    print(extract_element(A, x, y))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def extract_element(list_of_list, index):\n    return list_of_list[index]\n\ndef test_extract_element():\n    test_cases = [\n        [[1,2,3], 0],\n        [[1,2,3], 1],\n        [[1,2,3], 2],\n        [[1,2,3], 3],\n        [[1,2,3], 4],\n        [[1,2,3], 5],\n        [[1,2,3], 6],\n        [[1,2,3], 7],\n        [[1,2,3], 8],\n        [[1,2,3], 9],\n        [[1,2,3], 10],\n        [[1,2,3], 11],\n        [[1,2,3], 12],\n        [[1,2,3], 13],\n        [[1,2,3], 14],\n        [[1,2,3], 15],\n        [[1,2,3], 16],\n        [[1,2,3], 17],\n        [[1,2,3], 18],\n        [[1,2,3], 19],\n        [[1,2,3], 20],\n        [[1,2,3], 21],\n        [[1,2,3], 22],\n        [[1,2,3], 23],\n        [[1,2,3], 24],\n        [[1,2,3], 25],\n        [[1,2,3], 26],\n        [[1,2,3], 27],\n        [[1,2,3], 28],\n        [[1,2,3], 29],\n        [[1,2,3], 30],\n        [[1,2,3], 31],\n        [[1,2,3], 32],\n        [[1,2,3], 33],\n        [[1,2,3], 34],\n        [[1,2,3], 35],\n        [[1,2,3], 36],\n        [[1,2,3], 37],\n        [[1,2,3], 38],\n        [[1,2,3], 39],\n        [[1,2,3], 40],\n        [[1,2,3], 41],\n        [[1,2,3"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "#!/bin/python\n\ndef extract(list, index):\n    return [list[i] for i in index]\n\nif __name__ == '__main__':\n    list = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    print extract(list, [0, 1])"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def extract_elements(list, elements):\n    return [list[i] for i in elements]\n\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 3]))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "import copy\n\ndef every_elem(x, y, values):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :type values: list[list[int]]\n    :rtype: list[int]\n    \"\"\"\n    result = []\n    for i in range(x):\n        for j in range(y):\n            if values[i][j] == 1:\n                result.append(values[i][j])\n    return result\n\ndef test_every_elem():\n    assert every_elem([[0, 1, 0], [1, 0, 1], [0, 1, 0]], 3, [[1, 1, 1], [1, 0, 1], [1, 1, 1]]) == [[1, 1, 1]]\n\nif __name__ == '__main__':\n    test_every_elem()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def extract_elements(lst, index_list):\n    \"\"\"\n    :param lst: a list of lists\n    :param index_list: a list of indices\n    :return: a list of lists\n    \"\"\"\n    return [lst[i] for i in index_list]\n\nif __name__ == '__main__':\n    lst = [[1,2,3],[4,5,6]]\n    index_list = [0, 1]\n    result = extract_elements(lst, index_list)\n    print(result)"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def extract(list_, indices):\n    if indices == []:\n        return list_\n    else:\n        return extract(list_[indices[0]], indices[1:])\n\n\n# Test cases\n\ntest_cases = [\n    [[1, 2, 3], []],\n    [[1, 2, 3], [1, 2]],\n    [[1, 2, 3], [2, 3]],\n    [[1, 2, 3], [1, 3]],\n    [[1, 2, 3], [3, 1]],\n    [[1, 2, 3], [3, 2]],\n    [[1, 2, 3], [2, 1]],\n    [[1, 2, 3], [2, 3]],\n    [[1, 2, 3], [3, 2]],\n    [[1, 2, 3], [3, 1]],\n    [[1, 2, 3], [1, 2, 3]],\n    [[1, 2, 3], [1, 3, 2]],\n    [[1, 2, 3], [2, 1, 3]],\n    [[1, 2, 3], [2, 3, 1]],\n    [[1, 2, 3], [3, 2, 1]],\n    [[1, 2, 3], [3, 1, 2]],\n    [[1, 2, 3], [3, 2, 3]],\n    [[1, 2, 3], [3, 1, 1]],\n    [[1, 2, 3], [2, 3, 1]],\n    [[1, 2, 3], [2, 1, 3]],\n    [[1, 2, 3], [2, 3, 2]],\n    [[1, 2, 3], [3, 2, 2]],\n    [[1, 2, 3], [3, 2, 1]],\n    [[1, 2, 3], [2, 2, 2]],\n    [[1, 2, 3], [1, 3, 3]],\n    [[1, 2, 3], [2, 3, 3]],\n    [[1, 2, 3], [3, 3, 2]],\n    [[1, 2, 3], [3, 3, 1]],\n    [[1"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param nums, a list of lists of integers\n    # @param k, an integer\n    # @return a list of integers\n\n    def __init__(self):\n        self.res = []\n\n    def getElement(self, nums, k):\n        self.res = []\n        for i in range(len(nums)):\n            for j in range(len(nums[i])):\n                if nums[i][j] == k:\n                    self.res.append(nums[i][j])\n\n        return self.res"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def extract_elements(list_of_lists, list_size, element):\n    return [list_of_lists[i][j] for i in range(list_size) for j in range(list_size) if list_of_lists[i][j] == element]\n\ndef main():\n    list_of_lists = [[0, 0, 0, 0, 0, 0],\n                     [0, 0, 1, 1, 1, 0],\n                     [0, 1, 1, 1, 1, 0],\n                     [0, 1, 1, 1, 1, 0],\n                     [0, 1, 1, 1, 1, 0],\n                     [0, 0, 1, 1, 1, 0]]\n    list_size = len(list_of_lists)\n    element = 2\n    result = extract_elements(list_of_lists, list_size, element)\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def extract(list, element, column_index, row_index):\n    \"\"\"\n    :param list: A 2D list\n    :param element: A element to be extracted\n    :param column_index: The column index to be extracted\n    :param row_index: The row index to be extracted\n    :return: A list of the extracted elements\n    \"\"\"\n    return [list[row_index][column_index] for row_index in range(len(list))]\n\nif __name__ == '__main__':\n    list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    assert extract(list, 1, 0, 0) == [1, 4, 7]\n    assert extract(list, 2, 0, 0) == [2, 5, 8]\n    assert extract(list, 3, 0, 0) == [3, 6, 9]\n    assert extract(list, 4, 0, 0) == []\n    assert extract(list, 1, 1, 0) == [2, 5]\n    assert extract(list, 2, 1, 0) == [3, 6]\n    assert extract(list, 3, 1, 0) == [4, 7]\n    assert extract(list, 4, 1, 0) == []\n    assert extract(list, 1, 0, 1) == [1, 4, 7]\n    assert extract(list, 2, 0, 1) == [2, 5]\n    assert extract(list, 3, 0, 1) == [3, 6]\n    assert extract(list, 4, 0, 1) == [4, 7]\n    assert extract(list, 5, 0, 1) == []\n    assert extract(list, 1, 1, 1) == [2, 5]\n    assert extract(list, 2, 1, 1) == [3, 6]\n    assert extract(list, 3, 1, 1) == [4, 7]\n    assert extract(list, 4, 1, 1) == []\n    assert extract(list, 1, 2, 0) == [1, 4, 7]\n    assert extract(list, 2, 2, 0) == [2, 5]\n    assert extract(list, 3, 2, 0"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def extract(l, i, j):\n    return l[i][j]\n\ndef test_extract():\n    assert extract([[1, 2, 3], [4, 5, 6]], 0, 1) == 3\n    assert extract([[1, 2, 3], [4, 5, 6]], 1, 0) == 4\n    assert extract([[1, 2, 3], [4, 5, 6]], 2, 1) == 6\n\nif __name__ == '__main__':\n    test_extract()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "import collections\nclass Solution(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        \"\"\"\n        self.list = nums\n        self.count = collections.Counter(self.list)\n\n    def get(self, index):\n        return self.list[index]\n\n    def getCount(self, index):\n        return self.count[index]\n\n    def getList(self):\n        return self.list"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def extract(data, index):\n    return data[index]\n\ndef test():\n    assert extract(range(5), 0) == 0\n    assert extract(range(5), 1) == 1\n    assert extract(range(5), 2) == 2\n    assert extract(range(5), 3) == 3\n    assert extract(range(5), 4) == 4\n\ndef test_extract_iter():\n    assert list(extract_iter(range(5), 0)) == [0]\n    assert list(extract_iter(range(5), 1)) == [1]\n    assert list(extract_iter(range(5), 2)) == [2]\n    assert list(extract_iter(range(5), 3)) == [3]\n    assert list(extract_iter(range(5), 4)) == [4]\n\ndef test_extract_iter_2():\n    assert list(extract_iter(range(5), 0)) == [0]\n    assert list(extract_iter(range(5), 1)) == [1]\n    assert list(extract_iter(range(5), 2)) == [2]\n    assert list(extract_iter(range(5), 3)) == [3]\n    assert list(extract_iter(range(5), 4)) == [4]"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def extract_list(matrix, element):\n    return [matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[0])) if matrix[i][j] == element]\n\nmatrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n\nextracted_matrix = extract_list(matrix, 1)\nprint extracted_matrix\n\nextracted_matrix = extract_list(matrix, 2)\nprint extracted_matrix\n\nextracted_matrix = extract_list(matrix, 3)\nprint extracted_matrix\n\nextracted_matrix = extract_list(matrix, 4)\nprint extracted_matrix"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def extract_all(arr, index):\n    return [arr[i][index] for i in range(len(arr))]\n\ndef test():\n    assert extract_all([[1, 2], [3, 4]], 0) == [1, 3]\n    assert extract_all([[1, 2], [3, 4]], 1) == [2, 4]\n    assert extract_all([[1, 2], [3, 4]], 2) == [1, 2]\n    assert extract_all([[1, 2], [3, 4]], 3) == [3, 4]\n    assert extract_all([[1, 2], [3, 4]], 4) == []\n    assert extract_all([[1, 2], [3, 4]], 5) == []\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def get_elements(list_two_dim, element_list):\n    return_list = []\n    for list_one_dim in list_two_dim:\n        for element in element_list:\n            if list_one_dim == element:\n                return_list.append(list_one_dim)\n    return return_list\n\nif __name__ == '__main__':\n    test_cases = [\n        [[1, 2, 3], [1, 2, 3]],\n        [[1, 2, 3], [1, 2, 4]],\n        [[1, 2, 3], [1, 3, 3]],\n        [[1, 2, 3], [1, 3, 4]],\n        [[1, 2, 3], [2, 3, 3]],\n        [[1, 2, 3], [2, 3, 4]],\n        [[1, 2, 3], [3, 3, 3]],\n        [[1, 2, 3], [3, 3, 4]],\n        [[1, 2, 3], [4, 3, 3]],\n        [[1, 2, 3], [4, 3, 4]],\n        [[1, 2, 3], [3, 4, 3]],\n        [[1, 2, 3], [3, 4, 4]],\n        [[1, 2, 3], [4, 4, 3]],\n        [[1, 2, 3], [4, 4, 4]]\n    ]\n    for test_case in test_cases:\n        element_list = test_case[0]\n        print(get_elements(test_case[1], element_list))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "import sys\n\n# https://www.hackerrank.com/challenges/extract-element/problem\n\ndef extract_element(list_, index):\n    \"\"\"\n    Extract every specified element from a given two dimensional list.\n    :param list_: a list of lists\n    :param index: an integer\n    :return: a list of integers\n    \"\"\"\n\n    if len(list_) == 0:\n        return []\n\n    if len(list_[index]) == 0:\n        return []\n\n    return list_[index]\n\nif __name__ == '__main__':\n    lst = []\n    for line in sys.stdin:\n        lst.append(line.strip().split())\n\n    print(extract_element(lst, 2))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-element\n\ndef extract_element(l,i,j):\n    \"\"\"\n    :type l: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    return l[i][j]"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def extract(list, i, j):\n    \"\"\"\n    :type list: List[List[int]]\n    :type i: int\n    :type j: int\n    :rtype: int\n    \"\"\"\n    if i < 0 or j < 0 or i > len(list) or j > len(list[0]):\n        return 0\n    return list[i][j]\n\n\ndef test():\n    assert extract([[1,2,3],[4,5,6]], 1, 1) == 3\n    assert extract([[1,2,3],[4,5,6]], 1, 2) == 6\n    assert extract([[1,2,3],[4,5,6]], 1, 3) == 3\n    assert extract([[1,2,3],[4,5,6]], 1, 4) == 0\n    assert extract([[1,2,3],[4,5,6]], 2, 1) == 4\n    assert extract([[1,2,3],[4,5,6]], 2, 2) == 5\n    assert extract([[1,2,3],[4,5,6]], 2, 3) == 6\n    assert extract([[1,2,3],[4,5,6]], 2, 4) == 0\n    assert extract([[1,2,3],[4,5,6]], 3, 1) == 4\n    assert extract([[1,2,3],[4,5,6]], 3, 2) == 5\n    assert extract([[1,2,3],[4,5,6]], 3, 3) == 6\n    assert extract([[1,2,3],[4,5,6]], 3, 4) == 0\n    assert extract([[1,2,3],[4,5,6]], 4, 1) == 0\n    assert extract([[1,2,3],[4,5,6]], 4, 2) == 0\n    assert extract([[1,2,3],[4,5,6]], 4, 3) == 0\n    assert extract([[1,2,3],[4,5,6]], 4, 4) == 0\n    assert extract([[1,2,3],[4,5,6]"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param A, a list of lists of integers\n    # @param indices, a list of indices\n    # @return an integer list\n    def extract(self, A, indices):\n        if not A or not indices:\n            return []\n        ans = []\n        for i in indices:\n            ans.append(A[i])\n        return ans\n\nif __name__ == \"__main__\":\n    A = [[1,2,3],[4,5,6],[7,8,9]]\n    indices = [0,1]\n    Solution().extract(A, indices)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def find_elements(list_of_lists, target_element):\n    if len(list_of_lists)!= len(target_element):\n        return []\n    return [list_of_lists[i][j] for i in range(len(list_of_lists)) for j in range(len(list_of_lists[i])) if list_of_lists[i][j] == target_element]\n\nlist_of_lists = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n\nprint find_elements(list_of_lists, 3)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def get_elements(lst, x, y):\n    \"\"\"\n    Returns a list of the elements in a given two dimensional list.\n    \"\"\"\n    # x: 0\n    # y: 0\n    # lst: [[1, 2], [3, 4]]\n    # x: 0\n    # y: 1\n    # lst: [[1, 2], [3, 4], [5, 6]]\n    # x: 1\n    # y: 0\n    # lst: [[1, 2], [3, 4], [5, 6]]\n    # x: 1\n    # y: 1\n    # lst: [[1, 2], [3, 4], [5, 6]]\n    result = []\n    for row in lst:\n        for elem in row:\n            result.append(elem)\n    return result\n\ndef main():\n    lst = [[1, 2], [3, 4]]\n    print get_elements(lst, 0, 0)\n    print get_elements(lst, 1, 0)\n    print get_elements(lst, 0, 1)\n    print get_elements(lst, 1, 1)\n    lst = [[1, 2], [3, 4], [5, 6]]\n    print get_elements(lst, 0, 0)\n    print get_elements(lst, 1, 0)\n    print get_elements(lst, 0, 1)\n    print get_elements(lst, 1, 1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "# TODO: Write a recursive function to extract every element in a given list.\n\ndef extract(list, index):\n    if index >= len(list):\n        return None\n    elif index < 0:\n        return None\n    else:\n        if index == 0:\n            return list[index]\n        else:\n            return extract(list, index - 1)\n\n\n\n# TODO: Test your function and print the result.\n\ndef test_extract():\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 2, 3]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [7, 8, 9]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -1) == None\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == None\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == None\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -10) == None"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/two-dimensions-array\n# Time complexity: O(n)\n# Space complexity: O(1)\n\ndef get_element(list_, index):\n    return list_[index]\n\ndef extract_all(list_, index):\n    return [get_element(list_, index)]\n\ndef extract_all_except(list_, index):\n    return [get_element(list_, index)] + extract_all(list_, index+1)\n\ndef extract_all_except_index(list_, index):\n    return [get_element(list_, index)] + extract_all(list_, index+1) + extract_all(list_, index+2)\n\ndef extract_all_except_index_plus_one(list_, index):\n    return [get_element(list_, index)] + extract_all(list_, index+1) + extract_all(list_, index+2) + extract_all(list_, index+3)\n\ndef extract_all_except_index_minus_one(list_, index):\n    return [get_element(list_, index)] + extract_all(list_, index+1) + extract_all(list_, index+2) + extract_all(list_, index+3) + extract_all(list_, index+4)\n\ndef extract_all_except_index_minus_one_plus_one(list_, index):\n    return [get_element(list_, index)] + extract_all(list_, index+1) + extract_all(list_, index+2) + extract_all(list_, index+3) + extract_all(list_, index+4) + extract_all(list_, index+5)\n\ndef extract_all_except_index_minus_one_minus_one_plus_one(list_, index):\n    return [get_element(list_, index)] + extract_all(list_, index+1) + extract_all(list_, index+2) + extract_all(list_, index+3) + extract_all(list_, index+4)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def extract(list, pos):\n    return list[pos[0]][pos[1]]\n\ndef test():\n    list = [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']]\n    pos = [0, 0]\n    print extract(list, pos)\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 41,
      "score": 6.0,
      "candidate": "def extract_elements(list_, elements):\n    \"\"\"\n    :param list_: list of list\n    :param elements: list of elements to extract\n    :return: list of list\n    \"\"\"\n    return [list_[i][elements[i]] for i in range(len(list_))]\n\nif __name__ == '__main__':\n    list_ = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    elements = [1, 2, 3]\n    print extract_elements(list_, elements)"
    },
    {
      "rank": 42,
      "score": 1.0,
      "candidate": "def extract(data, rows, cols):\n    \"\"\"\n    Args:\n        data (list[list]): input two dimensional list\n        rows (list): rows of the input two dimensional list\n        cols (list): columns of the input two dimensional list\n\n    Returns:\n        list[list]: extracted elements\n    \"\"\"\n    extracted = []\n    for i in range(len(rows)):\n        for j in range(len(cols)):\n            if data[rows[i]][cols[j]] == 0:\n                extracted.append([])\n                continue\n            extracted[-1].append(data[rows[i]][cols[j]])\n    return extracted\n\n\"\"\"\nWrite a function to check whether the given input two dimensional list is a valid list.\nThe input two dimensional list is valid if it contains only zeroes or only ones.\n\"\"\"\ndef isValid(data, rows, cols):\n    \"\"\"\n    Args:\n        data (list[list]): input two dimensional list\n        rows (list): rows of the input two dimensional list\n        cols (list): columns of the input two dimensional list\n\n    Returns:\n        bool: true if the input two dimensional list is valid\n    \"\"\"\n    for i in range(len(rows)):\n        for j in range(len(cols)):\n            if data[rows[i]][cols[j]]!= 0 and data[rows[i]][cols[j]]!= 1:\n                return False\n    return True\n\n\"\"\"\nWrite a function to print every specified element from a given two dimensional list.\n\"\"\"\ndef printList(data, rows, cols):\n    \"\"\"\n    Args:\n        data (list[list]): input two dimensional list\n        rows (list): rows of the input two dimensional list\n        cols (list): columns of the input two dimensional list\n\n    Returns:\n        None\n    \"\"\"\n    for i in range(len(rows)):\n        for j in range(len(cols)):\n            if data[rows[i]][cols[j]] == 0:\n                print(\"0\")\n            elif data[rows[i]][cols[j]] == 1:\n                print(\"1\")"
    },
    {
      "rank": 43,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[][]} grid\n    # @param {integer} r\n    # @param {integer} c\n    # @return {void} Do not return anything, modify grid in-place instead.\n    def extract(self, grid, r, c):\n        if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]):\n            return\n        for i in range(r, len(grid)):\n            for j in range(c, len(grid[0])):\n                grid[i][j] = grid[i][j] % grid[i][j]\n        for i in range(r, len(grid)):\n            for j in range(c, len(grid[0])):\n                grid[i][j] = grid[i][j] % grid[i][j]"
    },
    {
      "rank": 44,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-a-list-element\n\n\ndef extract_list(l, k):\n    \"\"\"\n    :type l: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for row in l:\n        res += [row[k]]\n    return res\n\n\nif __name__ == '__main__':\n    l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 1\n    print(extract_list(l, k))"
    },
    {
      "rank": 45,
      "score": 1.0,
      "candidate": "def extract(arr, k):\n    res = []\n    for i in arr:\n        res.append(i[k])\n    return res\n\ndef extract_2(arr, k):\n    res = []\n    for i in arr:\n        res.append(i[k])\n    return res\n\ndef test_extract():\n    arr = [\n        [1,2,3],\n        [4,5,6],\n        [7,8,9],\n        [10,11,12]\n    ]\n    res = extract(arr, 0)\n    print(res)\n    assert res == [1, 2, 3]\n    res = extract(arr, 1)\n    print(res)\n    assert res == [4, 5, 6]\n    res = extract(arr, 2)\n    print(res)\n    assert res == [7, 8, 9]\n    res = extract(arr, 3)\n    print(res)\n    assert res == [10, 11, 12]\n\ndef test_extract_2():\n    arr = [\n        [1,2,3],\n        [4,5,6],\n        [7,8,9],\n        [10,11,12]\n    ]\n    res = extract_2(arr, 0)\n    print(res)\n    assert res == [1, 2, 3]\n    res = extract_2(arr, 1)\n    print(res)\n    assert res == [4, 5, 6]\n    res = extract_2(arr, 2)\n    print(res)\n    assert res == [7, 8, 9]\n    res = extract_2(arr, 3)\n    print(res)\n    assert res == [10, 11, 12]\n\ndef test_extract_2_2():\n    arr = [\n        [1,2,3],\n        [4,5,6],\n        [7,8,9],\n        [10,11,12]\n    ]\n    res = extract_2(arr, 0)\n    print(res)\n    assert res == [1, 2, 3]\n    res = extract_2(arr, 1)\n    print(res"
    },
    {
      "rank": 46,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def everyElement(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        if root is None:\n            return 0\n        if root.val == val:\n            res += 1\n        if root.left is not None:\n            res += self.everyElement(root.left, val)\n        if root.right is not None:\n            res += self.everyElement(root.right, val)\n        return res"
    },
    {
      "rank": 47,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[][]} matrix\n    # @param {integer} rowIndex\n    # @param {integer} columnIndex\n    # @return {integer}\n    def getElement(self, matrix, rowIndex, columnIndex):\n        # base case\n        if rowIndex == 0 or columnIndex == 0:\n            return matrix[rowIndex][columnIndex]\n\n        # recursive case\n        return matrix[rowIndex][columnIndex] + self.getElement(matrix, rowIndex - 1, columnIndex) + self.getElement(matrix, rowIndex - 1, columnIndex - 1)\n\n\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    s = Solution()\n    print(s.getElement(matrix, 2, 3))"
    },
    {
      "rank": 48,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u4ece\u5217\u8868\u4e2d\u63d0\u53d6\u6307\u5b9a\u5143\u7d20\uff0c\u5e76\u4e14\u6307\u5b9a\u6bcf\u4e00\u884c\u7684\u6570\u91cf\ndef extract(list, item, num):\n    for i in range(len(list)):\n        if list[i] == item:\n            return list[i:i+num]\n\n# \u4ece\u5217\u8868\u4e2d\u63d0\u53d6\u6307\u5b9a\u5143\u7d20\uff0c\u5e76\u4e14\u6307\u5b9a\u6bcf\u4e00\u884c\u7684\u6570\u91cf\ndef extract2(list, item, num):\n    for i in range(len(list)):\n        if list[i] == item:\n            return list[i:i+num]\n\n# \u4ece\u5217\u8868\u4e2d\u63d0\u53d6\u6307\u5b9a\u5143\u7d20\uff0c\u5e76\u4e14\u6307\u5b9a\u6bcf\u4e00\u884c\u7684\u6570\u91cf\ndef extract3(list, item, num):\n    for i in range(len(list)):\n        if list[i] == item:\n            return list[i:i+num]\n\n# \u4ece\u5217\u8868\u4e2d\u63d0\u53d6\u6307\u5b9a\u5143\u7d20\uff0c\u5e76\u4e14\u6307\u5b9a\u6bcf\u4e00\u884c\u7684\u6570\u91cf\ndef extract4(list, item, num):\n    for i in range(len(list)):\n        if list[i] == item:\n            return list[i:i+num]\n\n# \u4ece\u5217\u8868\u4e2d\u63d0\u53d6\u6307\u5b9a\u5143\u7d20\uff0c\u5e76\u4e14\u6307\u5b9a\u6bcf\u4e00\u884c\u7684\u6570\u91cf\ndef extract5(list, item, num):\n    for i in range(len(list)):\n        if list[i] == item:\n            return list[i:i+num]\n\n# \u4ece\u5217\u8868\u4e2d\u63d0\u53d6\u6307\u5b9a\u5143\ufffd"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def everyElement(self, root: TreeNode, indices: List[List[int]]) -> bool:\n        if not root:\n            return True\n        if len(indices) == 1 and indices[0] == []:\n            return True\n        if len(indices) > 1:\n            return False\n        if root.left:\n            if not self.everyElement(root.left, indices[0]):\n                return False\n        if root.right:\n            if not self.everyElement(root.right, indices[0]):\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    tree = TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4, TreeNode(5))), TreeNode(6)), TreeNode(7, TreeNode(8, TreeNode(9)), TreeNode(10)))\n    print(sol.everyElement(tree, [[0, 1], [2, 3]]))\n    print(sol.everyElement(tree, [[0, 1, 2], [3, 4]]))\n    print(sol.everyElement(tree, [[0, 1, 2], [3, 4, 5]]))\n    print(sol.everyElement(tree, [[0, 1, 2], [3, 4, 5, 6]]))\n    print(sol.everyElement(tree, [[0, 1, 2], [3, 4, 5, 6, 7]]))\n    print(sol.everyElement(tree, [[0, 1, 2, 3], [4, 5, 6]]))\n    print(sol.everyElement(tree, [[0, 1, 2, 3, 4], [5, 6, 7]]))\n    print(sol.everyElement(tree, [[0, 1, 2, 3, 4, 5], [6, 7, 8]]))\n    print(sol.everyElement(tree, [[0, 1, 2, 3, 4, 5,"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "def extract_nth(a_list, n):\n    \"\"\"\n    :type a_list: List[List[int]]\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    return [a_list[i][n] for i in range(len(a_list))]\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert extract_nth([[1, 2], [3, 4], [5, 6]], 1) == [1, 2]\n    assert extract_nth([[1, 2], [3, 4], [5, 6]], 2) == [3, 4]\n    assert extract_nth([[1, 2], [3, 4], [5, 6]], 3) == [5, 6]\n    assert extract_nth([[1, 2], [3, 4], [5, 6]], 4) == []\n    assert extract_nth([[1, 2], [3, 4], [5, 6]], 5) == []\n    assert extract_nth([[1, 2], [3, 4], [5, 6]], 6) == []"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution:\n    def __init__(self):\n        self.map = {}\n\n    def extract(self, A, index):\n        if index not in self.map:\n            self.map[index] = []\n        return self.map[index]\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        solution = Solution()\n        self.assertEqual(solution.extract([[1, 2], [3, 4]], 0), [[1, 2]])\n        self.assertEqual(solution.extract([[1, 2], [3, 4]], 1), [[2, 3]])\n        self.assertEqual(solution.extract([[1, 2], [3, 4]], 2), [[3, 4]])\n        self.assertEqual(solution.extract([[1, 2], [3, 4]], 3), [[]])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "def get_elements(list_of_lists, elements):\n    \"\"\"\n    Input: list_of_lists is a list of lists\n    elements is a list of integers\n    Output: a list of integers\n    \"\"\"\n    return [list_of_lists[i][elements[i]] for i in range(len(list_of_lists))]\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_elements([[1,2], [3,4,5], [6,7,8,9]], [2,4]) == [2,4], \"2nd example\"\n    assert get_elements([[1,2], [3,4,5], [6,7,8,9]], [2,3,4]) == [2,3,4], \"2nd example\"\n    assert get_elements([[1,2], [3,4,5], [6,7,8,9]], [1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9], \"2nd example\"\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "import os\nimport numpy as np\nfrom numpy import linspace, sin, cos, pi\n\n\ndef extract_elements_from_matrix(matrix, elements):\n    \"\"\"\n    Extract elements from a given two dimensional list.\n\n    :param matrix: A two dimensional list.\n    :param elements: A list of elements to extract.\n    :return: The extracted elements.\n    \"\"\"\n    extracted_elements = []\n    for i in range(len(elements)):\n        for j in range(len(elements)):\n            extracted_elements.append(matrix[i][j])\n    return extracted_elements\n\n\ndef generate_example_data(num_rows, num_columns):\n    \"\"\"\n    Generate example data for testing.\n\n    :param num_rows: The number of rows.\n    :param num_columns: The number of columns.\n    :return: A numpy matrix containing the given number of rows and columns.\n    \"\"\"\n    example_data = np.zeros((num_rows, num_columns))\n    for i in range(num_rows):\n        for j in range(num_columns):\n            example_data[i][j] = i + 1\n    return example_data\n\n\ndef extract_elements(num_rows, num_columns, elements):\n    \"\"\"\n    Extract elements from a given two dimensional list.\n\n    :param num_rows: The number of rows.\n    :param num_columns: The number of columns.\n    :param elements: A list of elements to extract.\n    :return: The extracted elements.\n    \"\"\"\n    extracted_elements = extract_elements_from_matrix(generate_example_data(num_rows, num_columns), elements)\n    return extracted_elements\n\n\ndef test_extract_elements(num_rows, num_columns, elements):\n    \"\"\"\n    Test extraction of elements.\n\n    :param num_rows: The number of rows.\n    :param num_columns: The number of columns.\n    :param elements: A list of elements to extract.\n    :return: The extracted elements.\n    \"\"\"\n    extracted_elements"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def everyElement(self, root: TreeNode, val: int) -> bool:\n        if not root:\n            return False\n        if root.val == val:\n            return True\n        if root.val < val:\n            return self.everyElement(root.right, val)\n        return self.everyElement(root.left, val)\n\nif __name__ == \"__main__\":\n    t1 = TreeNode(val=1, left=TreeNode(val=2, left=None, right=TreeNode(val=3, left=None, right=None)), right=TreeNode(val=4, left=None, right=None))\n    t2 = TreeNode(val=2, left=TreeNode(val=3, left=None, right=None), right=TreeNode(val=4, left=None, right=None))\n    t3 = TreeNode(val=3, left=TreeNode(val=4, left=None, right=None), right=None)\n    t4 = TreeNode(val=4, left=None, right=None)\n    t5 = TreeNode(val=5, left=None, right=None)\n    t6 = TreeNode(val=6, left=None, right=None)\n    t7 = TreeNode(val=7, left=None, right=None)\n    t8 = TreeNode(val=8, left=None, right=None)\n\n    assert Solution().everyElement(t1, 1) == True\n    assert Solution().everyElement(t2, 2) == True\n    assert Solution().everyElement(t3, 3) == True\n    assert Solution().everyElement(t4, 4) == True\n    assert Solution().everyElement(t5, 5) == False\n    assert Solution().everyElement(t6, 6) == False\n    assert Solution().everyElement(t7, 7) == False\n    assert Solution().everyElement(t8,"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[][]} matrix\n    # @param {integer} rowIndex\n    # @param {integer} colIndex\n    # @return {void} Do not return anything, modify matrix in-place instead.\n    def getRow(self, matrix, rowIndex, colIndex):\n        row = matrix[rowIndex]\n        if colIndex >= len(row):\n            return\n\n        result = []\n        for i in range(len(row)):\n            if i!= colIndex:\n                result.append(row[i])\n        matrix[rowIndex] = result\n\n    # @param {integer[][]} matrix\n    # @return {void} Do not return anything, modify matrix in-place instead.\n    def getCol(self, matrix):\n        for row in matrix:\n            self.getRow(matrix, row, colIndex)\n\n    # @param {integer[][]} matrix\n    # @return {void} Do not return anything, modify matrix in-place instead.\n    def getRowAndCol(self, matrix):\n        for row in matrix:\n            self.getRow(matrix, row, colIndex)\n            self.getRow(matrix, row, colIndex)\n\n    def getRowAndCol2(self, matrix):\n        for row in matrix:\n            for col in range(len(row)):\n                self.getRow(matrix, row, col)\n                self.getRow(matrix, row, col)\n\n    # @param {integer[][]} matrix\n    # @return {void} Do not return anything, modify matrix in-place instead.\n    def getRowAndCol3(self, matrix):\n        for row in matrix:\n            for col in range(len(row)):\n                self.getRow(matrix, row, col)\n                self.getRow(matrix, row, col)\n                self.getRow(matrix, row, col)\n\n    # @param {integer[][]} matrix\n    # @return {void} Do not return anything, modify matrix in-place instead.\n    def getRowAndCol4(self, matrix):\n        for row in matrix:\n            for col in range(len(row)):\n                self"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def getElement(self, matrix, i, j):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if matrix[i][j] == 0:\n            return 0\n        return matrix[i][j]\n\n# test\nmatrix = [\n    [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param A, a list of lists of integers\n    # @param indices, a list of lists of integers\n    # @return a list of integers\n    def extract(self, A, indices):\n        return [A[row][col] for row, col in indices]\n\n\nif __name__ == '__main__':\n    A = [[1, 2], [3, 4]]\n    indices = [[0, 0], [1, 1]]\n    sol = Solution()\n    print(sol.extract(A, indices))"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode[]} listNodes\n    # @param {integer} index\n    # @return {ListNode}\n    def get(self, listNodes, index):\n        curr_node = listNodes[0]\n        for i in range(index):\n            curr_node = curr_node.next\n        return curr_node\n\nif __name__ == '__main__':\n    sol = Solution()\n    listNodes = [1,2,3,4,5,6,7]\n    print(sol.get(listNodes, 2))\n    print(sol.get(listNodes, 3))"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\nimport unittest\nfrom numpy import array\n\ndef extract(arr, x, y):\n    return arr[x][y]\n\nclass TestFunction(unittest.TestCase):\n\n    def test_extract(self):\n        arr = array([[1, 2, 3], [4, 5, 6]])\n        self.assertEqual(extract(arr, 0, 0), 1)\n        self.assertEqual(extract(arr, 0, 1), 2)\n        self.assertEqual(extract(arr, 0, 2), 3)\n        self.assertEqual(extract(arr, 1, 0), 4)\n        self.assertEqual(extract(arr, 1, 1), 5)\n        self.assertEqual(extract(arr, 1, 2), 6)\n        self.assertEqual(extract(arr, 2, 0), arr.shape[0])\n        self.assertEqual(extract(arr, 2, 1), arr.shape[1])\n        self.assertEqual(extract(arr, 2, 2), arr.shape[2])\n\n    def test_extract_error(self):\n        arr = array([[1, 2, 3], [4, 5, 6]])\n        self.assertRaises(IndexError, extract, arr, 3, 0)\n        self.assertRaises(IndexError, extract, arr, 0, 3)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def extract_element(list_, element):\n    for element in list_:\n        if element == element:\n            return element\n    return None\n\n\ndef main():\n    test_cases = [\n        [[1, 2, 3], 3],\n        [[1, 2, 3], 4],\n        [[1, 2, 3], 5],\n        [[1, 2, 3], 6],\n        [[1, 2, 3], 7],\n        [[1, 2, 3], 8],\n        [[1, 2, 3], 9],\n        [[1, 2, 3], 10],\n        [[1, 2, 3], 11],\n        [[1, 2, 3], 12],\n        [[1, 2, 3], 13],\n        [[1, 2, 3], 14],\n        [[1, 2, 3], 15],\n        [[1, 2, 3], 16],\n        [[1, 2, 3], 17],\n        [[1, 2, 3], 18],\n        [[1, 2, 3], 19],\n        [[1, 2, 3], 20],\n        [[1, 2, 3], 21],\n        [[1, 2, 3], 22],\n        [[1, 2, 3], 23],\n        [[1, 2, 3], 24],\n        [[1, 2, 3], 25],\n        [[1, 2, 3], 26],\n        [[1, 2, 3], 27],\n        [[1, 2, 3], 28],\n        [[1, 2, 3], 29],\n        [[1, 2, 3], 30],\n        [[1, 2, 3], 31],\n        [[1, 2, 3], 32],\n        [[1, 2, 3], 33],\n        [[1, 2, 3], 34],\n        [[1, 2, 3], 35],\n        [[1, 2, 3], 36],\n        [[1, 2, 3], 37],\n        [[1, 2, 3], 38],\n        [[1, 2, 3], 39],\n        [[1, 2, 3], 40],\n        [[1, 2, 3], 41],\n        [[1, 2, 3], 42],\n        [[1, 2, 3], 43],\n        [[1, 2, 3], 44],\n        [[1"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "class Solution:\n    def findSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(len(nums)):\n            if i - k >= 0:\n                res.append(nums[i - k])\n        return res"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-from-a-2d-list/problem\ndef extract(arr, index):\n    \"\"\"\n    :type arr: List[List[int]]\n    :type index: int\n    :rtype: int\n    \"\"\"\n    return arr[index]\n\n# Your function will be called like this:\n# arr = [[1,2,3],[4,5,6]]\n# index = 2\n# Your function should return the value 3.\narr = [[1,2,3],[4,5,6]]\nindex = 2\nprint(extract(arr, index))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "from collections import namedtuple\n\n\nclass Solution:\n    def find_elements(self, matrix: List[List[int]], k: int) -> List[int]:\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if k == 1:\n            return [x for x in matrix]\n        elif k == 2:\n            return [x for x in matrix if matrix[0][0] == x]\n        elif k == 3:\n            return [x for x in matrix if matrix[0][0] == x and matrix[1][0] == x]\n        elif k == 4:\n            return [x for x in matrix if matrix[0][0] == x and matrix[0][1] == x]\n        elif k == 5:\n            return [x for x in matrix if matrix[0][0] == x and matrix[1][0] == x and matrix[1][1] == x]\n        else:\n            return [x for x in matrix if matrix[0][0] == x and matrix[1][0] == x and matrix[2][0] == x]\n\n\nif __name__ == '__main__':\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    print(Solution().find_elements(matrix, 3))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "import numpy as np\nfrom numpy.linalg import norm\n\ndef extract_element(list_of_lists, index):\n    \"\"\"\n    Extracts the element at the specified index in the given list of lists.\n\n    :param list_of_lists: a list of lists.\n    :param index: the index of the element to extract.\n    :return: the element at the given index.\n    \"\"\"\n    return list_of_lists[index]\n\n\ndef extract_all_elements(list_of_lists):\n    \"\"\"\n    Extracts all the elements from the given list of lists.\n\n    :param list_of_lists: a list of lists.\n    :return: the list of extracted elements.\n    \"\"\"\n    return list_of_lists\n\n\ndef extract_all_elements_with_index(list_of_lists):\n    \"\"\"\n    Extracts all the elements from the given list of lists.\n\n    :param list_of_lists: a list of lists.\n    :return: the list of extracted elements.\n    \"\"\"\n    return list_of_lists\n\n\ndef extract_all_elements_with_index_and_index_list(list_of_lists, index_list):\n    \"\"\"\n    Extracts all the elements from the given list of lists.\n\n    :param list_of_lists: a list of lists.\n    :param index_list: the list of indices of the elements to extract.\n    :return: the list of extracted elements.\n    \"\"\"\n    return list_of_lists\n\n\ndef extract_all_elements_with_index_and_index_list_with_index(list_of_lists, index_list, index):\n    \"\"\"\n    Extracts all the elements from the given list of lists.\n\n    :param list_of_lists: a list of lists.\n    :param index_list: the list of indices of the elements to extract.\n    :param index: the index of the element to extract.\n    :return: the list of extracted elements.\n    \"\"\"\n    return list_of_lists\n\n\ndef extract_all_elements_with_index_and_index_list_with_index_and_index_list(list_of"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    # @param root, a tree node\n    # @param indices, a list of integers\n    # @return a list of integers\n    def extract(self, root, indices):\n        res = []\n        self.extract_helper(root, indices, res)\n        return res\n\n    def extract_helper(self, root, indices, res):\n        if root is None:\n            return\n        if indices.index(root.val)!= -1:\n            res.append(root.val)\n        if root.left is not None:\n            self.extract_helper(root.left, indices, res)\n        if root.right is not None:\n            self.extract_helper(root.right, indices, res)"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        \"\"\"\n        self.nums = nums\n\n    def getElement(self, row, col):\n        \"\"\"\n        :type row: int\n        :type col: int\n        :rtype: int\n        \"\"\"\n        return self.nums[row][col]\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.getElement(row,col)"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def extract(list, k):\n\treturn [list[i] for i in range(len(list)) if list[i] == k]\n\ndef test():\n\tassert extract([1, 2, 3], 1) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 2) == [[1, 3]]\n\tassert extract([1, 2, 3], 3) == [[1, 2]]\n\tassert extract([1, 2, 3], 4) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 5) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 6) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 7) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 8) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 9) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 10) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 11) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 12) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 13) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 14) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 15) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 16) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 17) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 18) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 19) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 20) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 21) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 22) == [[1, 2, 3]]\n\tassert extract([1, 2, 3], 23) == [[1"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "# Example 1:\n# Input: [[1,2], [3,4], [5,6]]\n# Output: [1,2,5,6]\n# Example 2:\n# Input: [[1,2], [3,4], [5,6], [7,8]]\n# Output: [1,2,6,8]\n# Note:\n# The input list is always valid, each element is unique and is in the range of [0, 100].\n\nclass Solution(object):\n    def everyElement(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if not mat:\n            return []\n        \n        ret = []\n        for row in mat:\n            ret += row\n        \n        return ret\n\n# Note:\n# Given a 2D list, you need to extract every element in the given list."
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def everyElement(self, root, indices):\n        \"\"\"\n        :type root: TreeNode\n        :type indices: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        if len(indices) == 0:\n            return True\n        \n        if root.val in indices[0]:\n            return self.everyElement(root.left, indices[1:]) or self.everyElement(root.right, indices[1:])\n        else:\n            return False"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "import unittest\n\nclass Solution:\n    # @param {integer[][]} matrix\n    # @param {integer} target\n    # @return {integer[][]}\n    def matrixSubmatrix(self, matrix, target):\n        res = [[0] * len(matrix[0]) for _ in range(len(matrix))]\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == target:\n                    res[i][j] = 1\n        return res\n\n    def matrixSubmatrix_2(self, matrix, target):\n        res = [[0] * len(matrix[0]) for _ in range(len(matrix))]\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == target:\n                    res[i][j] = 1\n                    for k in range(i+1, len(matrix)):\n                        if matrix[k][j] == target:\n                            res[i][j] = 1\n                            break\n                    for k in range(i-1, -1, -1):\n                        if matrix[k][j] == target:\n                            res[i][j] = 1\n                            break\n                    for k in range(j+1, len(matrix[i])):\n                        if matrix[i][k] == target:\n                            res[i][j] = 1\n                            break\n                    for k in range(j-1, -1, -1):\n                        if matrix[i][k] == target:\n                            res[i][j] = 1\n                            break\n                    for k in range(i, len(matrix)-1):\n                        if matrix[k][j] == target:\n                            res[i][j] = 1\n                            break\n                    for k in range(i+1, len(matrix)-1):\n                        if matrix[k][j] == target:\n                            res[i][j] = 1\n                            break\n                    for k in range(j, len(matrix[i])-1):\n                        if matrix[k][j] == target:"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[][]} matrix\n    # @param {integer} target\n    # @return {integer[][]}\n    def searchMatrix(self, matrix, target):\n        if not matrix:\n            return []\n        if not matrix[0]:\n            return [matrix[0]]\n        \n        result = []\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == target:\n                    result.append([i,j])\n                    break\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.searchMatrix([[1,3,5,7],\n                            [10,11,16,20],\n                            [23,30,34,50]],\n                           3)"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-a-sublist/problem\n\ndef extract(list, index):\n    return list[index]\n\ndef extract_list(list, index):\n    return list[index]\n\ndef extract_range(list, start, end):\n    return list[start:end]\n\ndef extract_all(list, index):\n    return list[index:]\n\ndef extract_all_list(list, index):\n    return list[index:]\n\ndef extract_all_range(list, start, end):\n    return list[start:end]\n\ndef extract_all_range_list(list, start, end):\n    return list[start:end]\n\ndef extract_all_range_range(list, start, end):\n    return list[start:end]\n\ndef extract_all_range_range_list(list, start, end):\n    return list[start:end]\n\ndef extract_all_range_range_range(list, start, end):\n    return list[start:end]\n\ndef extract_all_range_range_range_list(list, start, end):\n    return list[start:end]\n\nif __name__ == \"__main__\":\n    list = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    print(extract(list, 0))\n    print(extract(list, 1))\n    print(extract(list, 2))\n\n    print(extract_list(list, 0))\n    print(extract_list(list, 1))\n    print(extract_list(list, 2))\n\n    print(extract_range(list, 0, 2))\n    print(extract_range(list, 1, 3))\n    print(extract_range(list, 0, 3))\n\n    print(extract_all(list, 0))\n    print(extract_all(list, 1))\n    print(extract_all(list, 2))\n\n    print(extract_all_list(list, 0))\n    print(extract_all_list(list, 1"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param A: An integer array\n    @param k: An integer\n    @return: A list of integers\n    \"\"\"\n    def extract(self, A, k):\n        # write your code here\n        if len(A) == 0:\n            return []\n        if len(A) == 1:\n            if k == 0:\n                return A\n            else:\n                return []\n        if k == 0:\n            return A[0]\n        else:\n            return A[k]\n\nif __name__ == \"__main__\":\n    A = [1,2,3,4,5,6,7,8,9,10]\n    print Solution().extract(A, 5)"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-from-a-2d-list/problem\n# https://www.hackerrank.com/challenges/extract-from-a-2d-list/submissions/code/45121895\n\n# Sample Inputs\n\n# [['a','b','c'],['d','e','f'],['g','h','i']]\n# [['a','b','c'],['d','e','f'],['g','h','i']]\n# [['a','b','c'],['d','e','f'],['g','h','i'],['j','k','l']]\n\n# Sample Outputs\n\n# [['a','b','c'],['g','h','i']]\n# [['d','e','f'],['g','h','i']]\n# [['j','k','l']]\n\ndef extract(arr, indices):\n    # Write your code here\n    return_list = []\n    for index in indices:\n        return_list.append(arr[index])\n    return return_list\n\n\n\ndef main():\n    n = int(input())\n    arr = [[int(x) for x in input().split()] for i in range(n)]\n    indices = input().split()\n    return_list = extract(arr, indices)\n    for i in range(len(return_list)):\n        print(return_list[i])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/remove-element-from-array/\n\n\nclass Solution(object):\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return nums\n\n        res = []\n        for i in range(len(nums)):\n            if nums[i]!= val:\n                res.append(nums[i])\n        return res"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from collections import deque\n\n\ndef extract(lst, index):\n    \"\"\"\n    :type lst: List[List[int]]\n    :type index: int\n    :rtype: int\n    \"\"\"\n    # print(index)\n    if index == len(lst):\n        return 1\n    if index == len(lst) + 1:\n        return 0\n    if index == len(lst) + 2:\n        return 0\n    if index == len(lst) + 3:\n        return 0\n    if index == len(lst) + 4:\n        return 0\n    if index == len(lst) + 5:\n        return 0\n    if index == len(lst) + 6:\n        return 0\n    if index == len(lst) + 7:\n        return 0\n    if index == len(lst) + 8:\n        return 0\n    if index == len(lst) + 9:\n        return 0\n    if index == len(lst) + 10:\n        return 0\n    if index == len(lst) + 11:\n        return 0\n    if index == len(lst) + 12:\n        return 0\n    if index == len(lst) + 13:\n        return 0\n    if index == len(lst) + 14:\n        return 0\n    if index == len(lst) + 15:\n        return 0\n    if index == len(lst) + 16:\n        return 0\n    if index == len(lst) + 17:\n        return 0\n    if index == len(lst) + 18:\n        return 0\n    if index == len(lst) + 19:\n        return 0\n    if index == len(lst) + 20:\n        return 0\n    if index == len(lst) + 21:\n        return 0\n    if index == len(lst) + 22:\n        return 0\n    if index == len(lst) + 23:\n        return 0\n    if index == len(lst) + 24:\n        return 0\n    if index == len(lst) + 25:\n        return 0\n    if index == len(lst) + 26:\n        return 0"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def extract_elements(numbers, elements):\n    return [numbers[i] for i in elements]\n\ndef test_extract_elements():\n    assert extract_elements([[1,2],[3,4]], [1,2]) == [1,3]\n    assert extract_elements([[1,2],[3,4]], [2,1]) == [2,3]\n    assert extract_elements([[1,2],[3,4]], [3,1]) == [3,4]\n    assert extract_elements([[1,2],[3,4]], [1,3]) == [1,4]\n    assert extract_elements([[1,2],[3,4]], [2,3]) == [2,4]\n    assert extract_elements([[1,2],[3,4]], [3,2]) == [3,4]\n    assert extract_elements([[1,2],[3,4]], [1,4]) == [1,4]\n    assert extract_elements([[1,2],[3,4]], [2,4]) == [2,4]\n    assert extract_elements([[1,2],[3,4]], [3,4]) == [3,4]\n    assert extract_elements([[1,2],[3,4]], [1,2,3]) == [1,2,3]\n    assert extract_elements([[1,2],[3,4]], [1,2,4]) == [1,2,4]\n    assert extract_elements([[1,2],[3,4]], [1,2,5]) == [1,2,5]\n    assert extract_elements([[1,2],[3,4]], [1,4,2]) == [1,4,2]\n    assert extract_elements([[1,2],[3,4]], [1,4,5]) == [1,4,5]\n    assert extract_elements([[1,2],[3,4]], [2,1,3]) == [2,1,3]\n    assert extract_elements([[1,2],[3,4"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# Example:\n# Given [[1,2,3], [4,5,6], [7,8,9]],\n# return [[1,2,3], [4,5,6], [7,8,9]]\n\n# Solution:\n# For every element, extract the first element, then extract the second element.\n#\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param root, a tree node\n    # @param k, an integer\n    # @return a list of tree node\n    def getNthFromRoot(self, root, k):\n        res = []\n        cur = root\n        while cur or k:\n            if k < 0:\n                cur = cur.left\n                k -= 1\n            elif k > 0:\n                cur = cur.right\n                k -= 1\n            else:\n                res.append(cur)\n                break\n        return res\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = []\n# param_2 = 2\n# obj.getNthFromRoot(param_1, param_2)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Example\n# >>> input_list = [[1,2,3], [4,5,6], [7,8,9]]\n# >>> print extract(input_list, 0)\n# [[1,2,3], [4,5,6], [7,8,9]]\n# >>> print extract(input_list, 1)\n# [[1,4,7], [2,5,8], [3,6,9]]\n# >>> print extract(input_list, 2)\n# [[1,2,3], [4,5,6], [7,8,9]]\n\n# Your function should return a list of lists.\n\n# Hint:\n# You may use a for loop or a list comprehension.\n\n# Challenge:\n# Write a function that returns a list of lists containing every element in the given list.\n\n# Examples:\n# input_list = [[1,2,3], [4,5,6], [7,8,9]]\n# print extract(input_list, 0)\n# [[1,2,3], [4,5,6], [7,8,9]]\n# print extract(input_list, 1)\n# [[1,4,7], [2,5,8], [3,6,9]]\n# print extract(input_list, 2)\n# [[1,2,3], [4,5,6], [7,8,9]]\n\n\ndef extract(input_list, index):\n    return [item for sublist in input_list for item in sublist if index == 0]\n\n\ndef extract2(input_list, index):\n    return [item for sublist in input_list for item in sublist if index == 0]\n\n\ndef extract3(input_list, index):\n    return [item for sublist in input_list for item in sublist if index == 0]\n\n\ndef extract4(input_list, index):\n    return [item for sublist in input_list for item in sublist if index == 0]\n\n\nif __name__ == '__main__':\n    print extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0)\n    print extract([[1, 2, 3"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "#!/bin/python\n\nclass Solution:\n    # @param A, a list of lists of integers\n    # @param k, an integer\n    # @return a list of lists of integers\n    def getRow(self, A, k):\n        result = []\n        for i in range(len(A)):\n            result.append([])\n            for j in range(len(A[i])):\n                result[i].append(A[i][j])\n\n        result = self.getRow(result, k)\n        return result\n\n    # @param A, a list of lists of integers\n    # @param k, an integer\n    # @return a list of lists of integers\n    def getRow2(self, A, k):\n        result = []\n        for i in range(len(A)):\n            result.append([])\n            for j in range(len(A[i])):\n                if (i == k and j == k):\n                    result[i].append(A[i][j])\n                else:\n                    result[i].append(A[i][j])\n\n        result = self.getRow2(result, k)\n        return result\n\n    def getRow3(self, A, k):\n        result = []\n        for i in range(len(A)):\n            result.append([])\n            for j in range(len(A[i])):\n                if (i == k and j == k):\n                    result[i].append(A[i][j])\n                else:\n                    if (i == k and j < k):\n                        result[i].append(A[i][j])\n                    elif (i < k and j == k):\n                        result[i].append(A[i][j])\n                    elif (i < k and j < k):\n                        result[i].append(A[i][j])\n                    else:\n                        result[i].append(A[i][j])\n\n        result = self.getRow3(result, k)\n        return result\n\n\n    def getRow4(self, A, k):\n        result = []\n        for i in range(len(A)):\n            result.append([])\n            for j in range"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/extract-element\n\nimport unittest\n\n\ndef extract_element(list_, index):\n    \"\"\"\n    :type list_: List[List[int]]\n    :type index: int\n    :rtype: int\n    \"\"\"\n    if index == 0:\n        return list_[0][0]\n    if index == 1:\n        return list_[0][1]\n    if index == 2:\n        return list_[0][2]\n\n\ndef test_extract_element(test_case):\n    \"\"\"\n    :type test_case: List[List[int]]\n    \"\"\"\n    assert extract_element(test_case, 0) == test_case[0][0]\n    assert extract_element(test_case, 1) == test_case[0][1]\n    assert extract_element(test_case, 2) == test_case[0][2]\n    assert extract_element(test_case, 3) is None\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [[1, 2, 3], 0],\n        [[1, 2, 3], 1],\n        [[1, 2, 3], 2],\n        [[1, 2, 3], 3],\n        [[1, 2, 3], 4],\n        [[1, 2, 3], 5],\n        [[1, 2, 3], 6],\n        [[1, 2, 3], 7],\n        [[1, 2, 3], 8],\n        [[1, 2, 3], 9],\n        [[1, 2, 3], 10],\n        [[1, 2, 3], 11],\n        [[1, 2, 3], 12],\n        [[1, 2, 3], 13],\n        [[1, 2, 3], 14],\n        [[1, 2, 3], 15],\n        [[1, 2, 3], 16],\n        [[1, 2, 3], 17],\n        [[1, 2, 3], 18],\n        [[1, 2, 3], 19],\n        [[1, 2, 3], 20],\n        [[1, 2, 3], 21],\n        [[1, 2, 3], 22],\n        [[1"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://oj.leetcode.com/problems/remove-element/\n\nclass Solution:\n    # @param A, a list of integers\n    # @param e, an integer\n    # @return a list of integers\n    def removeElement(self, A, e):\n        length = len(A)\n        if length == 0:\n            return []\n\n        # remove all elements equal to e\n        result = []\n        for i in range(length):\n            if A[i]!= e:\n                result.append(A[i])\n\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeElement([1, 2, 3, 1], 1)\n    print s.removeElement([1, 2, 3, 4], 4)\n    print s.removeElement([1, 2, 3, 4], 1)\n    print s.removeElement([1, 2, 3, 4], 5)"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from collections import deque\n\nclass Solution(object):\n    def __init__(self, nums):\n        \"\"\"\n        initialize your data structure here.\n        :type nums: List[List[int]]\n        \"\"\"\n        self.nums = nums\n        self.res = []\n\n    def getRow(self, row):\n        \"\"\"\n        :type row: int\n        :rtype: List[int]\n        \"\"\"\n        if row >= len(self.nums):\n            return []\n        if row == len(self.nums) - 1:\n            return self.nums[row]\n        return self.nums[row][1:]\n\n    def getCol(self, col):\n        \"\"\"\n        :type col: int\n        :rtype: List[int]\n        \"\"\"\n        if col >= len(self.nums[0]):\n            return []\n        if col == len(self.nums[0]) - 1:\n            return self.nums[0][col]\n        return self.nums[0][col] + self.getRow(row)\n\n    def get(self, row, col):\n        \"\"\"\n        :type row: int\n        :type col: int\n        :rtype: int\n        \"\"\"\n        if row < 0 or col < 0:\n            return -1\n        if row >= len(self.nums) or col >= len(self.nums[0]):\n            return -1\n        return self.nums[row][col]\n\n    def getAll(self, row, col):\n        \"\"\"\n        :type row: int\n        :type col: int\n        :rtype: List[int]\n        \"\"\"\n        if row < 0 or col < 0:\n            return []\n        if row >= len(self.nums) or col >= len(self.nums[0]):\n            return []\n        return self.nums[row][col:] + self.getRow(row) + self.getCol(col)\n\n\n    def getRowCol(self, row, col):\n        if row < 0 or col < 0:\n            return -1\n        if row >= len(self.nums) or col >= len"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def extract(input_list, input_index):\n    output = []\n    for i in input_list:\n        output.append(i[input_index])\n    return output\n\ndef test_extract():\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 2, 3]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [4, 5, 6]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [7, 8, 9]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [4, 5, 6]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [7, 8, 9]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [4, 5, 6]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6) == [7, 8, 9]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7) == [4, 5, 6]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8) == [7, 8, 9]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9) == [4, 5, 6]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == [7, 8, 9]\n    assert extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 11) == [4, 5, 6]\n    assert extract([[1, 2, 3], [4, 5, 6"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def get_elements(list_of_lists, indices):\n    \"\"\"\n    Return every element of a list of lists.\n    \"\"\"\n    return [list_of_lists[i] for i in indices]\n\n# Your function should return a list of lists.\n# The list of lists has the same length as the list of indices.\n# The elements in the returned list are lists.\n# The length of each list is equal to the number of elements in the corresponding list of indices.\n# The elements of the returned list are in the same order as the indices.\n\n# Example 1:\n# Input:\n# indices = [[1,2,3],[3,4,5]]\n# list_of_lists = [[1,2,3],[3,4,5]]\n# Output: [[2,3],[4,5]]\n# Explanation:\n# The elements of indices are [1, 2, 3], and the elements of list_of_lists are [1, 2, 3].\n# The returned list has two elements: [[2, 3], [4, 5]]\n# The elements of the returned list are [2, 3], [4, 5] in the same order as the indices.\n\n# Example 2:\n# Input:\n# indices = [[1,2,3],[3,4,5]]\n# list_of_lists = [[1,2,3],[1,2,3]]\n# Output: [[2,3],[2,3]]\n# Explanation:\n# The elements of indices are [1, 2, 3], and the elements of list_of_lists are [1, 2, 3].\n# The returned list has two elements: [[2, 3], [2, 3]]\n# The elements of the returned list are [2, 3], [2, 3] in the same order as the indices.\n\n# Example 3:\n# Input:\n# indices = [[1,2,3],[3,4,5]]\n# list_of_lists = [[1,2,3],[1,2,3]]\n# Output: []\n# Explanation:\n# The elements of indices are [1, 2, 3], and the elements of list_of_lists are [1, 2, 3].\n# The returned list has no elements."
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def get_elements(list_, index):\n    return [list_[i] for i in index]\n\n\ndef test_get_elements():\n    list_ = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert get_elements(list_, [0, 1]) == [1, 2]\n    assert get_elements(list_, [0, 2]) == [1, 2]\n    assert get_elements(list_, [1, 1]) == [3, 4]\n    assert get_elements(list_, [2, 0]) == [3, 4]\n    assert get_elements(list_, [2, 1]) == [3, 4]\n    assert get_elements(list_, [3, 0]) == [5, 6]\n    assert get_elements(list_, [3, 1]) == [5, 6]\n    assert get_elements(list_, [3, 2]) == [5, 6]\n    assert get_elements(list_, [4, 0]) == [7, 8]\n    assert get_elements(list_, [4, 1]) == [7, 8]\n    assert get_elements(list_, [4, 2]) == [7, 8]\n\n\nif __name__ == '__main__':\n    test_get_elements()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def get_elements(list, i, j):\n    \"\"\"\n    @param list: A list of list of integers\n    @param i: The starting index\n    @param j: The ending index\n    @return: The elements in the range [i, j)\n    \"\"\"\n    # TODO: write the code\n\n\n# Your code here\n\n# test case\ninputs = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ni = 1\nj = 3\nprint get_elements(inputs, i, j)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def get_all_elements(list_of_lists, key):\n    result = []\n    for list in list_of_lists:\n        for item in list:\n            if item[key] == key:\n                result.append(item)\n    return result\n\n\n\n# https://www.hackerrank.com/challenges/extract-all-elements/problem\n\nimport unittest\n\n\nclass TestExtractAllElements(unittest.TestCase):\n    def test_extract_all_elements(self):\n        test_cases = [[[1, 2, 3], [3, 4, 5], [2, 3, 4]], [[1, 2, 3], [4, 5, 6], [2, 3, 4]]]\n        for test in test_cases:\n            actual = get_all_elements(test[0], test[1])\n            expected = test[2]\n            self.assertEqual(actual, expected)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# TODO:\n#   * Implement the function\n\n# Example\n# input = [[1, 2], [3, 4], [5, 6], [7, 8]]\n# output = [[1, 2], [3, 4], [5, 6], [7, 8]]\n# output = [[1, 3], [5, 7], [9, 11]]\n# output = [[3, 5], [7, 9]]\n# output = [[1, 2], [4, 6]]\n# output = [[3, 4], [5, 6], [7, 8]]\n\n# Output:\n# [[1, 2], [3, 4], [5, 6], [7, 8]]\n# [[3, 5], [7, 9]]\n# [[1, 4], [5, 7]]\n# [[1, 2], [4, 6]]\n# [[3, 4], [5, 6], [7, 8]]\n\ndef extract_elements(input_list, elements):\n    # Create a list of the elements that we want to extract\n    element_list = list(elements)\n\n    # Create a list of all elements in the input list that are not in the element list\n    all_elements = list(set(input_list) - set(element_list))\n\n    # Create a list of all elements that are in the input list but not in the element list\n    not_in_element_list = list(set(input_list) & set(element_list))\n\n    # Create a list of all elements that are in the input list but not in the all elements list\n    not_in_all_elements = list(set(input_list) - set(all_elements))\n\n    # Create a list of all elements that are in the all elements list but not in the input list\n    not_in_all_elements_but_in_input_list = list(set(all_elements) - set(input_list))\n\n    # Create a list of all elements that are not in the input list\n    not_in_input_list = list(set(input_list) - set(element_list))\n\n    # Create a list of all elements that are not in the all elements list\n    not_in_all_elements ="
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# Definition for a ListNode.\nclass ListNode(object):\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def everyElement(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return False\n        curr = head\n        while curr:\n            if curr.val == k:\n                return True\n            curr = curr.next\n        return False\n\nclass Solution2(object):\n    def everyElement(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        curr = head\n        while curr:\n            if curr.val == k:\n                curr = curr.next\n            else:\n                curr = curr.next\n        return curr is None\n\nif __name__ == \"__main__\":\n    head = ListNode(1, ListNode(2, ListNode(3)))\n    k = 2\n    print Solution().everyElement(head, k)\n    print Solution2().everyElement(head, k)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        \"\"\"\n        self.nums = nums\n        self.result = []\n        self.result_dict = {}\n        self.result_dict_tmp = {}\n\n    def find_elements(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        for i in range(m):\n            for j in range(n):\n                if i == j:\n                    continue\n                if self.result_dict_tmp.get(i, j) == 0:\n                    self.result_dict_tmp[i, j] = 1\n                    self.find_elements(i + 1, n)\n                    self.result_dict_tmp[i, j] = 0\n                if self.result_dict_tmp.get(i, j) == 1:\n                    self.result.append(self.nums[i][j])\n        return self.result\n\n\nif __name__ == \"__main__\":\n    sol = Solution([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    print(sol.find_elements(2, 3))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def extract_elements(list_of_lists, elements_to_extract):\n    \"\"\"\n    Input: list of lists, elements_to_extract\n    Output: list of elements\n\n    Example:\n    >>> list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]\n    >>> extract_elements(list_of_lists, [2,5,7])\n    [2, 5, 7]\n    \"\"\"\n    return [element for element in list_of_lists[0] if element in elements_to_extract]\n\n\ndef extract_elements_2(list_of_lists, elements_to_extract):\n    \"\"\"\n    Input: list of lists, elements_to_extract\n    Output: list of elements\n\n    Example:\n    >>> list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]\n    >>> extract_elements_2(list_of_lists, [2,5,7])\n    [2, 5, 7]\n    \"\"\"\n    return [element for element in list_of_lists[0] if element in elements_to_extract]\n\n\ndef extract_elements_3(list_of_lists, elements_to_extract):\n    \"\"\"\n    Input: list of lists, elements_to_extract\n    Output: list of elements\n\n    Example:\n    >>> list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]\n    >>> extract_elements_3(list_of_lists, [2,5,7])\n    [2, 5, 7]\n    \"\"\"\n    return [element for element in list_of_lists[0] if element in elements_to_extract]\n\n\ndef extract_elements_4(list_of_lists, elements_to_extract):\n    \"\"\"\n    Input: list of lists, elements_to_extract\n    Output: list of elements\n\n    Example:\n    >>> list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]\n    >>> extract_elements_4("
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def get_elements(list_, indices):\n    for index in indices:\n        list_ = list_[index]\n    return list_\n\n\n# Testing\n# list_ = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# indices = [[0, 1], [1, 2], [2, 3]]\n# get_elements(list_, indices) = [1, 5, 9]\n\n# list_ = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# indices = [[0, 1], [2, 3], [4, 5]]\n# get_elements(list_, indices) = [1, 6, 9]\n\nlist_ = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindices = [[0, 1], [2, 3], [3, 4]]\nget_elements(list_, indices)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/extract-all-numbers-from-a-sorted-matrix/description/\n\nclass Solution(object):\n    def __init__(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        \"\"\"\n        self.matrix = matrix\n        self.result = []\n\n    def allNumbers(self, matrix, row, col):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type row: int\n        :type col: int\n        :rtype: List[int]\n        \"\"\"\n        self.result = []\n        self.process(matrix, row, col, 0, 0)\n        return self.result\n\n    def process(self, matrix, row, col, r, c):\n        if r < len(matrix) and c < len(matrix[0]):\n            if matrix[r][c] == 1:\n                self.result.append(matrix[r][c])\n            self.process(matrix, r, c + 1, r, c)\n            self.process(matrix, r, c - 1, r, c)\n            self.process(matrix, r + 1, c, r, c)\n            self.process(matrix, r - 1, c, r, c)\n            self.process(matrix, r, c + 1, r, c + 1)\n            self.process(matrix, r, c - 1, r, c - 1)\n            self.process(matrix, r + 1, c, r + 1, c)\n            self.process(matrix, r - 1, c, r - 1, c)\n\n# Note:\n# 1. O(n^2) time, O(1) space\n# 2. The solution is a sorted list of numbers.\n# 3. Recursion is not possible.\n\n# Note:\n# 1. O(n^2) time, O(1) space\n# 2. Recursion is not possible.\n\n# Note:\n# 1. O(n^2) time, O(1) space\n# 2. Recursion is not possible.\n\n# Note:\n# 1"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def everyElement(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        if root.val == val:\n            return True\n        if root.val < val:\n            return self.everyElement(root.right, val)\n        else:\n            return self.everyElement(root.left, val)\n\nclass Solution2(object):\n    def everyElement(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        if root.val == val:\n            return True\n        if root.val < val:\n            return self.everyElement(root.right, val)\n        else:\n            return self.everyElement(root.left, val)\n\nclass Solution3(object):\n    def everyElement(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        if root.val == val:\n            return True\n        if root.val < val:\n            return self.everyElement(root.right, val)\n        else:\n            return self.everyElement(root.left, val)\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.left.left = TreeNode(3)\n    root.left.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right = TreeNode(6)\n    root.right.left = TreeNode(7)\n    root.right.left.left = TreeNode(8)\n    root.right.right = TreeNode(9)\n    root."
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def extract(list_of_lists, index):\n    \"\"\"\n    Return a list of every element in the given list.\n    \"\"\"\n    return [list_of_lists[i] for i in index]\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert extract([[1, 2], [3, 4], [5, 6]], [0, 1]) == [1, 3, 5], \"One\"\n    assert extract([[1, 2], [3, 4], [5, 6]], [0, 2]) == [3, 5], \"Two\"\n    assert extract([[1, 2], [3, 4], [5, 6]], [1, 1]) == [2, 4], \"Three\"\n    assert extract([[1, 2], [3, 4], [5, 6]], [0, 2, 3]) == [1, 3, 5], \"Four\""
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def everyElement(self, root: TreeNode, k: int) -> bool:\n        if not root:\n            return False\n        if root.left is None and root.right is None:\n            return k == root.val\n        if root.left:\n            return self.everyElement(root.left, k) and self.everyElement(root.right, k)\n        if root.right:\n            return self.everyElement(root.right, k)\n        return False\n\n    # @param root: The root of binary tree.\n    # @param k: An integer.\n    # @return: True if there exist two leaf nodes in the binary tree which value is k, otherwise false.\n    def hasPathSum(self, root: TreeNode, k: int) -> bool:\n        if not root:\n            return False\n        if root.left is None and root.right is None:\n            return k == root.val\n        if root.left:\n            return self.hasPathSum(root.left, k) and self.hasPathSum(root.right, k)\n        if root.right:\n            return self.hasPathSum(root.right, k)\n        return False\n\n    # @param root: The root of binary tree.\n    # @param k: An integer.\n    # @return: True if there exist two leaf nodes in the binary tree which value is k, otherwise false.\n    def hasPathSum(self, root: TreeNode, k: int) -> bool:\n        if not root:\n            return False\n        if root.left is None and root.right is None:\n            return k == root.val\n        if root.left:\n            return self.hasPathSum(root.left, k) and self.hasPathSum(root.right, k)\n        if root.right:\n            return self.hasPathSum(root.right, k)\n        return False"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# The list to be extracted\nlist = [[1, 2], [3, 4], [5, 6], [7, 8]]\n\n# The list to be extracted\nlist = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]\n\n# The list to be extracted\nlist = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]\n\n# The list to be extracted\nlist = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]\n\n# The list to be extracted\nlist = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]\n\n# The list to be extracted\nlist = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]\n\n# The list to be extracted\nlist = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22]]\n\n# The list to be extracted\nlist = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24]]\n\n# The list to be extracted\nlist = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26]]\n\n# The list to be extracted\nlist = [[1,"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Example 1:\n# Given a list of length 5, you should return a list of length 5 with\n# [1,2,3,4,5]\n# Example 2:\n# Given a list of length 4, you should return a list of length 4 with\n# [1,2,3,4]\n# Example 3:\n# Given a list of length 3, you should return a list of length 3 with\n# [1,2,3]\n# Example 4:\n# Given a list of length 2, you should return a list of length 2 with\n# [1,2]\n# Example 5:\n# Given a list of length 0, you should return an empty list.\n# Example 6:\n# Given a list of length 1, you should return a list of length 1 with\n# [1]\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def everyElement(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: List[int]\n        \"\"\"\n        if root is None:\n            return []\n        res = []\n        if root.val == val:\n            res.append(root.val)\n        res += self.everyElement(root.left, val)\n        res += self.everyElement(root.right, val)\n        return res\n\n# Test\ntests = [\n    (([1,2,3,4,5], 1), [1,2,3,4,5]),\n    (([1,2,3,4], 1), [1,2,3,4]),\n    (([1,2,3], 1), [1,2,3]),\n    (([1,2], 1), [1,2]),\n    (([1], 1), [1]),\n    (([], 1), []),\n    (([1,2,3,4,5,6,7,8], 4), [1,2,3,4,5,6,7,8]),\n    (([1,2"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def __init__(self):\n        self.result = []\n\n    def findElements(self, mat, e):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type e: int\n        :rtype: List[int]\n        \"\"\"\n        # print mat\n        for i in range(len(mat)):\n            for j in range(len(mat[i])):\n                if mat[i][j] == e:\n                    # print mat[i][j]\n                    self.result.append(mat[i][j])\n        return self.result\n\n    def findElements2(self, mat, e):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type e: int\n        :rtype: List[int]\n        \"\"\"\n        # print mat\n        for i in range(len(mat)):\n            for j in range(len(mat[i])):\n                if mat[i][j] == e:\n                    self.result.append(mat[i][j])\n        return self.result\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    # print sol.findElements([[1,2],[3,4]], 1)\n    print sol.findElements([[1,2,3],[3,4,5],[5,6,7]], 2)\n    print sol.findElements([[1,2,3],[3,4,5],[5,6,7]], 7)\n    print sol.findElements([[1,2,3],[3,4,5],[5,6,7]], 6)"
    }
  ]
}