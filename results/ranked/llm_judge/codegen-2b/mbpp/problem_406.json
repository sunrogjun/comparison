{
  "timestamp": "2025-09-14T20:23:05.344230",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 406,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def first_common(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return i, j\n    return -1, -1\n\ndef main():\n    list1 = [1, 2, 3, 4]\n    list2 = [1, 2, 3, 4, 5]\n    print(first_common(list1, list2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-common-element\n# https://www.geeksforgeeks.org/first-common-element-tuple-list/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-list/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-2/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-3/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-4/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-5/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-6/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-7/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-8/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-9/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-10/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-11/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-12/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-13/\n# https://www.geeksforgeeks.org/count-the-common-elements-in-a-tuple-14/\n# https://www.geeks"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def findFirstCommon(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        def findCommon(nums1, nums2):\n            for i in range(len(nums1)):\n                if nums1[i] == nums2[0]:\n                    return nums1[i]\n            return nums2[0]\n        return findCommon(nums1, nums2)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findFirstCommon([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n    print s.findFirstCommon([1, 2, 3, 4, 5], [1, 2, 3, 4, 6])\n    print s.findFirstCommon([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def firstCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return reduce(lambda x, y: x if x == y else 0, nums, 0)\n\n\nif __name__ == \"__main__\":\n    print Solution().firstCommonElement([1, 3, 4, 5])\n    print Solution().firstCommonElement([3, 4])\n    print Solution().firstCommonElement([])\n    print Solution().firstCommonElement([1, 2, 3])\n    print Solution().firstCommonElement([1, 2, 3, 5, 6, 7])\n    print Solution().firstCommonElement([1, 2, 3, 4, 5, 6, 7])"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/common-first-element-in-a-given-sorted-list/\n# \u4e0d\u540c\u7684\u70b9\uff1a\n# 1. \u53ef\u4ee5\u5229\u7528\u6bd4\u8f83\u64cd\u4f5c\uff0c\u6bd4\u8f83\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u4e0d\u518d\u6bd4\u8f83\u5143\u7d20\n# 2. \u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u6bcf\u6b21\u6bd4\u8f83\uff0c\u6bd4\u8f83\u54c8\u5e0c\u8868\u4e2d\u7684key\uff0c\n# 3. \u6bd4\u8f83\u64cd\u4f5c\uff0c\u6bd4\u8f83\u6bcf\u6b21\u7684key\uff0c\u8fd4\u56de\u54c8\u5e0c\u8868\u4e2d\u7684key\n\n# https://oj.leetcode.com/discuss/2452/python-solution\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def getIntersectionNode(self, head):\n        if head == None:\n            return None\n        p = head\n        while p!= None:\n            q = p.next\n            if q == None:\n                return None\n            while q.next!= None:\n                p = p.next\n                q = q.next\n            else:\n                return p\n        return None\n\nif __name__ == '__main__':\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, None))))\n    solution = Solution()\n    print solution.getIntersectionNode(head)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-common-element-in-a-linked-list\n\n\ndef find_common_element(lst):\n    \"\"\"\n    :type lst: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n\n    if len(lst) == 1:\n        return lst[0][0]\n\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][0] == lst[j][0]:\n                return lst[i][0]\n\n    return lst[0][0]\n\n\nif __name__ == \"__main__\":\n    lst = [\n        (1, 2),\n        (1, 3),\n        (1, 4),\n        (1, 5),\n        (2, 3),\n        (2, 4),\n        (2, 5),\n        (3, 4),\n        (3, 5),\n        (4, 5)\n    ]\n    print(find_common_element(lst))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/find-common-element-in-a-given-sorted-array/\n# tags: easy, array, sort, hashmap\n\n\"\"\"\nGiven a sorted array of integers, return the first common element in the array.\n\nIf there is no common element, return -1.\n\nYou may assume that the array is non-empty and is sorted in ascending order.\n\"\"\"\n\nclass Solution(object):\n    def firstCommon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return -1\n        return nums[0]"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __str__(self):\n        return \"%s, %s\" % (self.x, self.y)\n\n\nclass Solution(object):\n    def findFirstCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        max_x = nums[0].x\n        max_y = nums[0].y\n\n        for num in nums:\n            if num.x == max_x:\n                max_y = max(max_y, num.y)\n            elif num.x > max_x:\n                max_x = num.x\n                max_y = num.y\n\n        return max_x\n\n\nif __name__ == \"__main__\":\n    nums = [Tuple(1), Tuple(1), Tuple(1), Tuple(1), Tuple(1)]\n    print Solution().findFirstCommonElement(nums)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/find-common-element-in-sorted-array/\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def findCommo(self, head):\n        if not head:\n            return None\n        if not head.next:\n            return head.val\n        common = head.val\n        while head.next and head.next.next:\n            common = head.val\n            head = head.next\n            while head.next and head.next.val == common:\n                head = head.next\n        return common\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution(object):\n    def findCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        return reduce(lambda x, y: x if x == y else None, nums, None)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution(object):\n    def findCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        return reduce(lambda x, y: x if x == y else x or y, nums, 0)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def first_common(arr):\n    \"\"\"\n    :type arr: List[tuple]\n    :rtype: tuple\n    \"\"\"\n    common = [None] * len(arr)\n    for i, t in enumerate(arr):\n        if common[i] is not None:\n            for j, u in enumerate(arr):\n                if i!= j and common[i]!= common[j]:\n                    break\n            else:\n                common[i] = common[j]\n    return common[0] if common[0] is not None else None\n\nif __name__ == '__main__':\n    arr = [\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n        (1,"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/common-first-element-in-a-given-sorted-list/\n\n\nclass Solution(object):\n    def firstCommon(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        return self.firstCommonRecu(nums1, 0, len(nums1) - 1, nums2, 0, len(nums2) - 1)\n\n    def firstCommonRecu(self, nums1, start1, end1, nums2, start2, end2):\n        if start1 == end1 and start2 == end2:\n            return nums1[start1]\n        if start1 == end1:\n            return self.firstCommonRecu(nums1, start1 + 1, end1, nums2, start2, end2)\n        if start2 == end2:\n            return self.firstCommonRecu(nums1, start1, end1, nums2, start2 + 1, end2)\n        if nums1[start1] < nums2[start2]:\n            return self.firstCommonRecu(nums1, start1 + 1, end1, nums2, start2, end2)\n        else:\n            return self.firstCommonRecu(nums1, start1, end1, nums2, start2 + 1, end2)\n\n\nif __name__ == \"__main__\":\n    print(Solution().firstCommon(list(range(1, 10)), list(range(1, 10))))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/common-first-element-in-a-sorted-matrix/description/\n\nclass Solution(object):\n    def firstCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.commonElement(nums, 0, len(nums) - 1)\n\n    def commonElement(self, nums, i, j):\n        # print(i, j)\n        if i == j:\n            return nums[i]\n        mid = (i + j) / 2\n        if nums[mid]!= nums[i] and nums[mid]!= nums[j]:\n            return nums[mid]\n        return self.commonElement(nums, i, mid)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.firstCommonElement([1,2,3]))\n    print(sol.firstCommonElement([1,1,1]))\n    print(sol.firstCommonElement([-1,-1,-1]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import sys\nimport time\nimport random\n\n# https://leetcode.com/problems/common-first-element-in-a-sorted-array/discuss/228063/Python-O(1)-solution-with-explaination\ndef first_common(arr):\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n\nif __name__ == '__main__':\n    t = time.time()\n    arr = [random.randint(1, 100) for _ in range(100)]\n    print(\"Time: {}\".format(time.time() - t))\n    print(\"First common element is {}\".format(first_common(arr)))\n    print(arr)\n    # arr = [1, 2, 3, 3, 4, 5]\n    # arr = [1, 2, 3, 4, 5]\n    # arr = [1, 2, 2, 2, 2, 2, 2, 2, 2]\n    # arr = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def findCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        return nums[0]"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def __lt__(self, other):\n        return self.x < other.x\n\nclass Solution(object):\n    def firstCommon(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        # write your code here\n        n = len(nums)\n        if n == 0:\n            return Tuple(0)\n        if n == 1:\n            return nums[0]\n        min_x = nums[0].x\n        for i in range(1, n):\n            if nums[i].x < min_x:\n                min_x = nums[i].x\n        return nums[0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [Tuple(x) for x in range(1, 5)]\n    print s.firstCommon(nums)\n    print s.firstCommon([(0,0), (1,1), (2,2), (3,3), (4,4)])"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef first_common(arr):\n    \"\"\"\n    :type arr: List[Tuple[int]]\n    :rtype: int\n    \"\"\"\n    # create a dictionary to store the first element of each tuple\n    d = defaultdict(int)\n    for i, t in enumerate(arr):\n        d[t] = i\n    # return the first element in dictionary\n    return d[arr[0]]\n\nif __name__ == \"__main__\":\n    print(first_common([(1,2),(3,4),(3,4),(3,4)]))\n    print(first_common([(1,2),(3,4),(3,4),(3,4),(3,4)]))\n    print(first_common([(1,2),(3,4),(3,4),(3,4),(3,4),(3,4)]))\n    print(first_common([(1,2),(3,4),(3,4),(3,4),(3,4),(3,4),(3,4)]))\n    print(first_common([(1,2),(3,4),(3,4),(3,4),(3,4),(3,4),(3,4),(3,4)]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-common-element\n# https://www.hackerrank.com/challenges/first-common-element/problem\n# https://www.hackerrank.com/challenges/first-common-element/examples\n\ndef find_first_common_element(lst):\n    \"\"\"\n    :type lst: List[tuple]\n    :rtype: int\n    \"\"\"\n    return min(map(lambda x: min(x), lst))\n\n# Test Cases\n# [('a', 'b'), ('a', 'b'), ('a', 'b')]\n# ['a', 'a', 'a']\n# [('a', 'b'), ('b', 'a')]\n# [('a', 'b'), ('a', 'a')]\n# [('a', 'b'), ('a', 'a'), ('b', 'a')]\n# [('a', 'b'), ('a', 'b'), ('a', 'a'), ('b', 'a')]\n# [('a', 'b'), ('a', 'b'), ('a', 'a'), ('b', 'a'), ('b', 'a')]\n\nprint(find_first_common_element([('a', 'b'), ('a', 'b'), ('a', 'b')]))\nprint(find_first_common_element(['a', 'a', 'a']))\nprint(find_first_common_element([('a', 'b'), ('b', 'a')]))\nprint(find_first_common_element([('a', 'b'), ('a', 'a')]))\nprint(find_first_common_element([('a', 'b'), ('a', 'a'), ('b', 'a')]))\nprint(find_first_common_element([('a', 'b'), ('a', 'b'), ('a', 'a'), ('b', 'a')]))\nprint(find_first_common_element([('a', 'b'), ('a', 'b'), ('a', 'a'), ('b', 'a'), ('b', 'a')]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/common-first-element-in-a-sorted-array/\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution(object):\n    def findFirstCommonNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not headA:\n            return headB\n        if not headB:\n            return headA\n        currA = headA\n        currB = headB\n        while currA and currB:\n            if currA.val == currB.val:\n                currA = currA.next\n                currB = currB.next\n            else:\n                return currA\n        return currA\n\nif __name__ == \"__main__\":\n    s = Solution()\n    a1 = ListNode(1)\n    a2 = ListNode(2)\n    a3 = ListNode(3)\n    a4 = ListNode(4)\n    a5 = ListNode(5)\n    a6 = ListNode(6)\n    a7 = ListNode(7)\n    a8 = ListNode(8)\n    a9 = ListNode(9)\n    a10 = ListNode(10)\n    a11 = ListNode(11)\n    a12 = ListNode(12)\n    a13 = ListNode(13)\n    a14 = ListNode(14)\n    a15 = ListNode(15)\n    a16 = ListNode(16)\n    a17 = ListNode(17)\n    a18 = ListNode(18)\n    a19 = ListNode(19)\n    a20 = ListNode(20)\n    a21 = ListNode(21)\n    a22 = ListNode(22)\n    a23 = ListNode(23)\n    a24 = ListNode("
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-common-element/problem\n# https://www.geeksforgeeks.org/find-the-first-common-element-in-a-set-of-tuples/\n\n\ndef first_common_element(arr):\n    \"\"\"\n    Find the first common element in given list of tuple.\n    :param arr: A list of tuple\n    :return: The first common element in given list of tuple.\n    \"\"\"\n    if not arr:\n        return None\n\n    # If the first element of each tuple is the same, return the first element\n    # of first tuple.\n    if arr[0][0] == arr[0][1]:\n        return arr[0][0]\n\n    # If there is no common element, return None\n    for i in range(1, len(arr)):\n        # If the first element of the tuple is different, return the first\n        # common element of all tuple.\n        if arr[i][0]!= arr[0][0]:\n            return arr[0][0]\n\n    return arr[0][0]\n\n\nif __name__ == '__main__':\n    test_cases = [([1, 1], 1), ([1, 2], 1), ([1, 3], 1), ([1, 1, 1], 1), ([1, 2, 3], 1), ([1, 2, 3, 4], 1), ([1, 2, 3, 4, 5], 1), ([1, 2, 3, 4, 5, 6], 1), ([1, 2, 3, 4, 5, 6, 7], 1), ([1, 2, 3, 4, 5, 6, 7, 8], 1), ([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1), ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 1), ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 1), ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "import collections\n\n\ndef first_common_element(L):\n    \"\"\"\n    :type L: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    if len(L) == 0:\n        return 0\n    if len(L) == 1:\n        return L[0][0]\n    dic = collections.defaultdict(set)\n    for i in L:\n        dic[i[0]].add(i[1])\n    for k in dic:\n        if len(dic[k]) == 1:\n            return k\n    return 0\n\n\nif __name__ == '__main__':\n    L = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 6)]\n    print(first_common_element(L))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def first_common(lst):\n    \"\"\"\n    :type lst: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    if not lst:\n        return -1\n    elif len(lst) == 1:\n        return lst[0][0]\n    elif len(lst) == 2:\n        return lst[0][0]\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i][0] == lst[i+1][0]:\n                return lst[i][0]\n    return -1\n\n\nif __name__ == '__main__':\n    lst = [\n        (1, 1),\n        (2, 2),\n        (2, 3),\n        (3, 3),\n        (3, 4),\n        (4, 4),\n        (5, 5),\n        (5, 6),\n        (6, 6),\n        (7, 7),\n        (8, 8),\n        (8, 9),\n        (9, 9)\n    ]\n    print(first_common(lst))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def first_common(L):\n    \"\"\"\n    Write a function first_common(L) that returns the first common element in the list.\n    \"\"\"\n\n    if len(L) <= 1:\n        return L[0]\n\n    for i in range(0, len(L)):\n        for j in range(i+1, len(L)):\n            if L[i] == L[j]:\n                return L[i]\n\n    return L[0]"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def find_common_first_elem(list_of_tuples):\n    \"\"\"\n    :type list_of_tuples: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if not list_of_tuples:\n        return None\n    common_elem = None\n    for elem in list_of_tuples:\n        if common_elem is None:\n            common_elem = elem[0]\n        elif common_elem!= elem[0]:\n            common_elem = None\n            break\n    return common_elem\n\n\nif __name__ == '__main__':\n    tuples = [('a', 2), ('b', 3), ('c', 4)]\n    print(find_common_first_elem(tuples))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def common_first_element(list_of_tuples):\n    \"\"\"\n    :type list_of_tuples: List[Tuple]\n    :rtype: Tuple\n    \"\"\"\n    return next(t for t in list_of_tuples if t[0] == list_of_tuples[0][0])[0]\n\n\nif __name__ == '__main__':\n    print(common_first_element([(1, 2), (1, 3), (2, 3)]))\n    print(common_first_element([(1, 2), (1, 2), (1, 3), (2, 3)]))\n    print(common_first_element([(1, 2), (1, 3), (1, 4), (2, 3)]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef find_first_common(seq):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n\n    Example\n    Given\n    [\n        (1, 2, 3),\n        (1, 2, 4),\n        (1, 3, 4),\n        (1, 3, 5),\n        (2, 3, 4),\n        (2, 3, 5),\n        (2, 4, 5),\n        (3, 4, 5)\n    ]\n\n    Return\n    [\n        (1, 2, 3),\n        (1, 2, 4),\n        (1, 3, 4),\n        (1, 3, 5),\n        (2, 3, 4),\n        (2, 3, 5),\n        (2, 4, 5),\n        (3, 4, 5)\n    ]\n    \"\"\"\n    d = defaultdict(list)\n    for t in seq:\n        d[t[0]].append(t[1:])\n    return d.items()[0][0]\n\nif __name__ == \"__main__\":\n    assert find_first_common([(1, 2, 3), (1, 2, 4), (1, 3, 4), (1, 3, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]) == (1, 2, 3)\n    assert find_first_common([(1, 2, 3), (1, 2, 4), (1, 3, 4), (1, 3, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]) == (1, 2, 3)\n    assert find_first_common([(1, 2, 3), (1, 2, 4), (1, 3, 4), (1, 3, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]) == (1, 2, 3)\n    assert find_first_common([(1, 2, 3), (1, 2, 4), (1, 3, 4),"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_common_first_element(my_list):\n    \"\"\"\n    :type my_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if not my_list:\n        return None\n    for i in range(len(my_list)):\n        if my_list[0][0] == my_list[i][0]:\n            return my_list[0][0]\n    return None\n\nif __name__ == \"__main__\":\n    my_list = [(1, 1), (1, 2), (1, 2), (2, 1), (2, 2)]\n    print(find_common_first_element(my_list))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def find_first_common_elem(lst):\n    \"\"\"\n    lst: list of tuple\n    return: int\n    \"\"\"\n    lst = sorted(lst)\n    return lst[0][0] if len(lst) > 0 else None\n\nif __name__ == '__main__':\n    lst = [\n        (1, 2, 3, 4),\n        (3, 1, 2, 4),\n        (1, 2, 1, 2),\n        (3, 1, 2, 4),\n        (1, 2, 3, 4),\n        (3, 1, 2, 4)\n    ]\n    print find_first_common_elem(lst)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def common_first(tuples):\n    common_value = 0\n    for tup in tuples:\n        for i in range(len(tup)):\n            if tup[i] == common_value:\n                break\n        else:\n            common_value += 1\n    return common_value\n\nprint common_first([(1, 1), (2, 2), (3, 3), (1, 2), (3, 2)])"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import operator\n\n\ndef find_common_first(lst):\n    \"\"\"\n    :type lst: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    if not lst:\n        return 0\n    first = max(lst, key=operator.itemgetter(0))\n    return first[0]\n\n\nif __name__ == '__main__':\n    lst = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    print(find_common_first(lst))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def find_common_first_element(list_of_tuples):\n    \"\"\"\n    :type list_of_tuples: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not list_of_tuples:\n        return None\n    common_element = list_of_tuples[0]\n    for t in list_of_tuples:\n        if t!= common_element:\n            return common_element\n    return common_element\n\n\nif __name__ == '__main__':\n    assert find_common_first_element(((1, 2, 3), (1, 2, 4), (1, 2, 5))) == 1\n    assert find_common_first_element(((1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 3))) == 1\n    assert find_common_first_element(((1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 3), (1, 2, 4), (1, 2, 5))) == 1\n    assert find_common_first_element(((1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 3), (1, 2, 4), (1, 2, 5))) == 1"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport timeit\n\nstart_time = timeit.default_timer()\n\ndef common_first(lst):\n    \"\"\"\n    :param lst: list of tuple\n    :return: common first element in list of tuple\n    \"\"\"\n    for i in range(0, len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i][0] == lst[j][0]:\n                return lst[i][0]\n\n    return lst[-1][0]\n\nprint(\"Common first element: {}\".format(common_first([(1,), (2,), (1,), (1,)])))\n\nprint(\"Time: {}\".format(timeit.default_timer() - start_time))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import unittest\n\ndef first_common(l1, l2):\n    \"\"\"\n    :type l1: List[tuple]\n    :type l2: List[tuple]\n    :rtype: tuple\n    \"\"\"\n    if not l1 or not l2:\n        return None\n    common = l1[0]\n    for t in l2:\n        if t[0]!= common[0]:\n            return None\n        elif t[1] < common[1]:\n            common = t\n    return common\n\n\nclass TestFirstCommon(unittest.TestCase):\n    def test_first_common(self):\n        self.assertEqual(first_common([(1, 2), (1, 3), (1, 2)], [(1, 3), (1, 2)]), (1, 2))\n        self.assertEqual(first_common([(1, 2), (1, 3), (1, 3)], [(1, 2), (1, 3), (1, 2)]), (1, 2))\n        self.assertEqual(first_common([(1, 2), (1, 3), (1, 3)], [(1, 3), (1, 2), (1, 3)]), (1, 3))\n        self.assertEqual(first_common([(1, 2), (1, 3), (1, 3)], [(1, 3), (1, 2), (1, 3)]), (1, 3))\n        self.assertEqual(first_common([(1, 2), (1, 3), (1, 3)], [(1, 3), (1, 2), (1, 3), (1, 2)]), (1, 2))\n        self.assertEqual(first_common([(1, 2), (1, 3), (1, 3)], [(1, 3), (1, 2), (1, 3), (1, 2), (1, 3)]), (1, 3))\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "# Definition for a tuple\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\nclass Solution(object):\n    def firstCommon(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        return Tuple(nums1[0])\n\n        # Iterate through both lists and find common element.\n        # Return the first one found.\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    return nums1[i]\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums1 = [Tuple(1), Tuple(2), Tuple(3)]\n    nums2 = [Tuple(1), Tuple(2), Tuple(3)]\n    print(sol.firstCommon(nums1, nums2))\n    nums1 = [Tuple(1), Tuple(2), Tuple(3), Tuple(4)]\n    nums2 = [Tuple(1), Tuple(2), Tuple(3)]\n    print(sol.firstCommon(nums1, nums2))\n    nums1 = [Tuple(1), Tuple(2), Tuple(3), Tuple(4)]\n    nums2 = [Tuple(1), Tuple(2), Tuple(3), Tuple(4)]\n    print(sol.firstCommon(nums1, nums2))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_common_first_element(arr):\n    \"\"\"\n    :type arr: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    count = defaultdict(int)\n    for e in arr:\n        count[e[0]] += 1\n    common = None\n    for i in count:\n        if count[i] == len(arr):\n            common = i\n            break\n    return common"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/common-first-elements/problem\ndef common_first_element(list_of_tuples):\n    return list(filter(lambda x: x[0] == x[1], list_of_tuples))[0]\n\n\nif __name__ == '__main__':\n    list_of_tuples = [(1, 2), (3, 4), (1, 2), (3, 4)]\n    print(common_first_element(list_of_tuples))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef find_common_first_element(list_of_tuples):\n    \"\"\"\n    :type list_of_tuples: List[tuple]\n    :rtype: tuple\n    \"\"\"\n    counter = Counter(list_of_tuples)\n    first_element = max(counter.elements(), key=counter.elements().get)\n    return first_element\n\nif __name__ == '__main__':\n    list_of_tuples = [\n        (1, 1, 2),\n        (2, 3, 2),\n        (1, 3, 1),\n        (1, 2, 1),\n        (2, 1, 3)\n    ]\n    print(find_common_first_element(list_of_tuples))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_common_first_element(L):\n    \"\"\"\n    :type L: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not L:\n        return None\n    if len(L) == 1:\n        return L[0][0]\n\n    pairs = []\n    for i in range(len(L)):\n        for j in range(i + 1, len(L)):\n            pairs.append((L[i][0], L[j][0]))\n\n    pairs = sorted(pairs)\n\n    for i in range(len(pairs)):\n        if pairs[i][0] == pairs[i + 1][0]:\n            return pairs[i][0]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-common-element-in-a-list/problem\n\ndef find_common_element(list1, list2):\n    common_element = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] == common_element:\n            common_element = list2[i]\n    return common_element\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 3, 4, 5, 6]\n    common_element = find_common_element(list1, list2)\n    print(common_element)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def find_common_first_element(list_of_tuples):\n    \"\"\"\n    :type list_of_tuples: List[tuple]\n    :rtype: tuple\n    \"\"\"\n    common_element = list(set(list_of_tuples[0]))\n    for tuple in list_of_tuples:\n        common_element.intersection_update(set(tuple))\n    return tuple(common_element)\n\nprint(find_common_first_element([(1, 2), (1, 2), (1, 2)]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport collections\n\ndef find_common_first_element(lst):\n    \"\"\"\n    lst: list of tuple\n    return: common first element\n    \"\"\"\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n\n    dic = collections.defaultdict(list)\n    for i in lst:\n        dic[i[0]].append(i)\n\n    for key in dic:\n        if len(dic[key]) == 1:\n            return dic[key][0][1]\n        else:\n            lst = list(dic[key])\n            lst.sort()\n            return lst[0][1]\n\n# print find_common_first_element([(1,2),(1,3),(2,3)])\n# print find_common_first_element([(1,2),(1,3),(2,4)])\n# print find_common_first_element([(1,2),(1,3),(2,3)])\n# print find_common_first_element([(1,2),(2,3),(2,4)])\n# print find_common_first_element([(1,2),(2,3),(2,4),(3,5),(3,6)])\n\n# print find_common_first_element([(1,2),(1,3),(2,4)])\n# print find_common_first_element([(1,2),(2,3),(2,4)])\n# print find_common_first_element([(1,2),(2,3),(2,4),(3,5),(3,6)])\n# print find_common_first_element([(1,2),(2,3),(3,4),(3,5),(4,6)])\n# print find_common_first_element([(1,2),(2,3),(3,4),(3,5),(4,6),(5,6)])\n# print find_common_first_element([(1,2),("
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def first_common(list_of_tuples):\n    \"\"\"\n    Returns the first common element in given list of tuple.\n    >>> first_common([(1, 2), (1, 2), (2, 3)])\n    (1, 2)\n    >>> first_common([(1, 2), (1, 2), (1, 2, 3)])\n    (1, 2)\n    >>> first_common([(1, 2), (1, 2), (1, 2, 3)])\n    (1, 2)\n    >>> first_common([(1, 2), (2, 3)])\n    (1, 2)\n    \"\"\"\n    common_element = None\n    for i in range(len(list_of_tuples)):\n        for j in range(i+1, len(list_of_tuples)):\n            if list_of_tuples[i] == list_of_tuples[j]:\n                common_element = list_of_tuples[i][0]\n                break\n    return common_element\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\n# First Element\ndef first_element(lst):\n    return lst[0][0]\n\n# Second Element\ndef second_element(lst):\n    return lst[1][0]\n\n# Third Element\ndef third_element(lst):\n    return lst[2][0]\n\n# Fourth Element\ndef fourth_element(lst):\n    return lst[3][0]\n\n# First Element\ndef first_element(lst):\n    return lst[0][0]\n\n# Second Element\ndef second_element(lst):\n    return lst[1][0]\n\n# Third Element\ndef third_element(lst):\n    return lst[2][0]\n\n# Fourth Element\ndef fourth_element(lst):\n    return lst[3][0]\n\n# First Element\ndef first_element(lst):\n    return lst[0][0]\n\n# Second Element\ndef second_element(lst):\n    return lst[1][0]\n\n# Third Element\ndef third_element(lst):\n    return lst[2][0]\n\n# Fourth Element\ndef fourth_element(lst):\n    return lst[3][0]\n\n# First Element\ndef first_element(lst):\n    return lst[0][0]\n\n# Second Element\ndef second_element(lst):\n    return lst[1][0]\n\n# Third Element\ndef third_element(lst):\n    return lst[2][0]\n\n# Fourth Element\ndef fourth_element(lst):\n    return lst[3][0]\n\n# First Element\ndef first_element(lst):\n    return lst[0][0]\n\n# Second Element\ndef second_element(lst):\n    return lst[1][0]\n\n# Third Element\ndef third_element(lst):\n    return lst[2][0]\n\n# Fourth Element\ndef fourth_element(lst):\n    return lst[3][0]\n\n# First Element\ndef first_element(lst):\n    return lst[0][0]"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def find_first(lst):\n    \"\"\"\n    :type lst: List[Tuple]\n    :rtype: Tuple\n    \"\"\"\n    return min(lst, key=lambda t: t[0])"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def findCommon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        mid = len(nums) / 2\n        return self.findCommon(nums[:mid])\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findCommon([1, 2, 3, 4, 5]))\n    print(sol.findCommon([-1, -2, -3]))\n    print(sol.findCommon([-1, -2, -3, -4]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def firstCommon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.find(nums, 0, len(nums) - 1)\n\n    def find(self, nums, start, end):\n        if start == end:\n            return nums[start]\n\n        mid = (start + end) / 2\n        if nums[mid] == nums[start]:\n            return nums[mid]\n        if nums[mid] == nums[end]:\n            return nums[mid]\n        if nums[start] < nums[end]:\n            return self.find(nums, start, mid - 1)\n        else:\n            return self.find(nums, mid + 1, end)\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5]\n    print Solution().firstCommon(nums)"
    },
    {
      "rank": 48,
      "score": 2.0,
      "candidate": "from collections import Counter\n\nclass Solution(object):\n    def findCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        cnt = Counter(nums)\n        for key in cnt:\n            if cnt[key] == 1:\n                return key\n        return nums[0]\n\n# Note:\n# 1. Since each element is unique, we can find the first element by counting\n#    the number of times each element appears in the list.\n# 2. If there are multiple elements that have the same number of occurrences,\n#    we can use the first element that appears.\n# 3. We can achieve the same result by using the index of the first element\n#    that appears."
    },
    {
      "rank": 49,
      "score": 2.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def findCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        if not nums: return None\n        if len(nums) == 1: return nums[0]\n        p = nums[0]\n        for t in nums[1:]:\n            if t!= p:\n                return t\n        return p\n\n# Note:\n# 1. We can use a hash table to store all the first element for each element.\n# 2. We can use a hash table to store all the first element for each element."
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\nclass Solution:\n    # @param {List[Tuple[int]]} nums\n    # @return {Tuple<Integer>}\n\n    def findCommonOne(self, nums):\n        if not nums:\n            return None\n        # create a map to store the result\n        result = defaultdict(int)\n        for t in nums:\n            # update the result map with the first element\n            result[t[0]] += 1\n            # if the result map is not empty, return the first element\n            if result:\n                return t[0]\n        return None\n\n    def findCommonOne_2(self, nums):\n        # write your code here\n        if not nums:\n            return None\n        # find the max value in nums\n        max_value = max(nums)\n        # create a map to store the result\n        result = defaultdict(int)\n        # iterate through the list\n        for t in nums:\n            # update the result map with the first element\n            result[t] += 1\n            # if the result map is not empty, return the first element\n            if result:\n                return t\n        return None\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 4),\n        (1, 3, 4),\n        (1, 3, 4),\n        (1, 3, 5),\n        (2, 3, 4),\n        (2, 3, 5),\n        (2, 3, 6),\n        (3, 4, 5),\n        (3, 4, 6),\n        (3, 4, 7),\n        (3, 5, 6),\n        (3, 5, 7),\n        (3, 5, 8),\n        (3, 6, 7),\n        (3, 6, 8),\n        (3, 6, 9),\n        (3, 7, 8),\n        (3, 7, 9),\n        (3, 7, 10),\n        (3, 8, 9),\n        (3, 8, 10),\n        (3,"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __lt__(self, other):\n        return self.x < other.x\n\n    def __str__(self):\n        return str(self.x)\n\n# Your Solution\nclass Solution(object):\n    def findCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        # return max(map(lambda x: x[0], nums))\n        return max(filter(lambda x: x[0] == x[1], nums))"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def firstCommon(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        i = 0\n        for i in range(len(nums1)):\n            while i < len(nums2) and nums1[i]!= nums2[i]:\n                i += 1\n            if i == len(nums2):\n                return -1\n        return nums1[i]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.firstCommon([1, 2, 3], [1, 2, 3]))\n    print(sol.firstCommon([1, 2, 3], [1, 4, 5]))\n    print(sol.firstCommon([1, 2, 3], [1, 2, 4]))\n    print(sol.firstCommon([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution:\n    def findCommon(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i].x == nums[j].x:\n                    return nums[i].x\n        return -1"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-common-element-in-given-list-of-tuples/\n\nclass Solution(object):\n    def find_first(self, arr, k):\n        \"\"\"\n        :type arr: List[Tuple[int, int]]\n        :rtype: int\n        \"\"\"\n        n = len(arr)\n        for i in range(n):\n            for j in range(i+1, n):\n                if arr[i] == arr[j]:\n                    return arr[i][0]\n        return -1\n\nif __name__ == '__main__':\n    arr = [(-1, 0), (-1, 1), (-1, 2), (-1, 3), (0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3)]\n    sol = Solution()\n    print(sol.find_first(arr, 1))"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {List[Tuple[int]]} nums\n    # @return {Tuple[int]}\n    def findCommonNode(self, nums):\n        # write your code here\n        n = len(nums)\n        if n == 0:\n            return None\n        if n == 1:\n            return tuple(nums[0])\n        \n        def findCommon(nums, i):\n            if i == n:\n                return None\n            if len(nums[i]) == 1:\n                return nums[i][0]\n            if len(nums[i]) == 0:\n                return findCommon(nums, i + 1)\n            for j in range(len(nums[i])):\n                if nums[i][j]!= nums[i][0]:\n                    return nums[i][0]\n            return findCommon(nums, i + 1)\n        \n        return findCommon(nums, 0)"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def firstCommon(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        # if len(nums) == 1:\n        #     return nums[0].x\n        # if len(nums) == 2:\n        #     return nums[0].x\n        # if len(nums) == 3:\n        #     return nums[0].x\n        # return nums[0].x\n        return min(map(lambda x: x.x, filter(lambda y: y.x!= x.x, nums)))\n\n\nif __name__ == '__main__':\n    nums = [Tuple(1), Tuple(2), Tuple(3), Tuple(4), Tuple(5)]\n    print(Solution().firstCommon(nums))\n    nums = [Tuple(1), Tuple(2), Tuple(2), Tuple(2), Tuple(2)]\n    print(Solution().firstCommon(nums))\n    nums = [Tuple(1), Tuple(2), Tuple(2), Tuple(2), Tuple(2), Tuple(2)]\n    print(Solution().firstCommon(nums))"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def firstCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n\n        # find the first common element\n        for i in range(n):\n            if nums[i] == nums[0]:\n                return nums[i]\n\n        # find the first common element\n        for i in range(1, n):\n            if nums[i] == nums[0]:\n                return nums[i]\n            else:\n                j = max(0, i - 1)\n                while j < i:\n                    if nums[j] == nums[i]:\n                        return nums[j]\n                    j += 1\n\n        return -1\n\n    def firstCommonOne2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n\n        # find the first common element\n        for i in range(n):\n            if nums[i] == nums[0]:\n                return nums[i]\n\n        # find the first common element\n        for i in range(1, n):\n            if nums[i] == nums[0]:\n                return nums[i]\n            j = max(0, i - 1)\n            while j < i:\n                if nums[j] == nums[i]:\n                    return nums[j]\n                j += 1\n\n        return -1\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.firstCommonOne([1,2,3])\n    print s.firstCommonOne2([1,2,3])"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution:\n    def findFirstCommon(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: int\n        \"\"\"\n        n1 = len(nums1)\n        n2 = len(nums2)\n        if n1 == 0 or n2 == 0:\n            return 0\n        if n1!= n2:\n            return 0\n        for i in range(n1):\n            for j in range(n2):\n                if nums1[i] == nums2[j]:\n                    return j\n        return 0"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/common-first-element-in-a-list-of-tuples\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Solution:\n# Time complexity: O(n)\n# Space complexity: O(1)\n# Recursion:\n# Recursion: O(n)\n# Backtracking: O(n)\n\ndef common_first_element(lst):\n    \"\"\"\n    Find common first element in a given list of tuple.\n\n    :param lst: List of tuple.\n    :return: First common element of all the elements in the list.\n    \"\"\"\n    if not lst:\n        return None\n\n    # Recursion\n    # Recursion: O(n)\n    # Backtracking: O(n)\n    return common_first_element_recursion(lst, 0)\n\n\ndef common_first_element_recursion(lst, index):\n    \"\"\"\n    Find common first element in a given list of tuple.\n\n    :param lst: List of tuple.\n    :param index: Index of the element.\n    :return: First common element of all the elements in the list.\n    \"\"\"\n    if index == len(lst):\n        return None\n\n    # Recursion: O(n)\n    # Backtracking: O(n)\n    return common_first_element_recursion(lst, index+1) or \\\n           common_first_element_recursion(lst, index)\n\n\nif __name__ == \"__main__\":\n    lst = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n    print(common_first_element(lst))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "import collections\n\n# Definition for a tuple\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def findCommon(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        res = collections.defaultdict(list)\n        for t in nums:\n            res[t.x].append(t)\n        for i, v in enumerate(res.items()):\n            if len(v) == 1:\n                return v[0][0]\n        return None\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.findCommon([(1, 2), (1, 2), (2, 3), (3, 4), (3, 5)])\n    print sol.findCommon([(1, 2), (1, 2), (2, 3), (3, 4), (3, 5)])\n    print sol.findCommon([(1, 2), (1, 2), (2, 3), (3, 4), (3, 5)])\n    print sol.findCommon([(1, 2), (1, 2), (2, 3), (3, 4), (3, 5)])\n    print sol.findCommon([(1, 2), (1, 2), (2, 3), (3, 4), (3, 5)])\n    print sol.findCommon([(1, 2), (1, 2), (2, 3), (3, 4), (3, 5)])\n    print sol.findCommon([(1, 2), (1, 2), (2, 3), (3, 4), (3, 5)])\n    print sol.findCommon([(1, 2), (1, 2), (2, 3), (3, 4), (3, 5)])\n    print sol.findCommon([(1, 2), (1, 2), (2, 3), (3, 4), (3, 5)])\n    print sol.findCommon([(1, 2), (1, 2), (2, 3"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findFirstCommon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        res = nums[0]\n        for i in range(1, n):\n            if nums[i]!= res:\n                return res\n            res = nums[i]\n        return res"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param nums, a list of lists of integers\n    # @return a integer\n    def firstCommonElement(self, nums):\n        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return nums[0][0]\n        for i in range(n):\n            for j in range(n):\n                if nums[i][j]!= nums[j][i]:\n                    return nums[i][0]\n        return -1\n\nif __name__ == \"__main__\":\n    assert Solution().firstCommonElement([[1,2,3], [1,2,3], [1,2,3]]) == 1\n    assert Solution().firstCommonElement([[1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 1\n    assert Solution().firstCommonElement([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 1\n    assert Solution().firstCommonElement([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 1\n    assert Solution().firstCommonElement([[1,2,3], [4,5,6], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 1\n    assert Solution().firstCommonElement([[1,2,3], [4,5,6], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 1\n    assert Solution().firstCommonElement([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == -1\n    assert Solution().firstCommonElement([[1,2,3], [1,2,3],"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-the-common-element-in-all-sorted-arrays/\n# Given an array of n integers, your task is to find one element \n# that occurs more than \u230a n/2 \u230b times.\n\n# Example 1:\n# Input: [1,2,3,1,2,3]\n# Output: 1\n# Explanation: The three numbers 1, 2, and 3 occur three times (1, 2, and 3), \n# and 1 is the answer.\n# Example 2:\n# Input: [4,1,3,4,2,3]\n# Output: 4\n# Explanation: The three numbers 1, 2, and 3 occur three times (1, 2, and 3), \n# and 4 is the answer.\n\nclass Solution(object):\n    def findCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i] == nums[j]:\n                    return nums[i]\n        return -1\n\ns = Solution()\nprint(s.findCommonElement([1,2,3,1,2,3]))\nprint(s.findCommonElement([4,1,3,4,2,3]))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-common-element-in-given-sorted-array/description/\n# time: O(n)\n# space: O(1)\n\nclass Solution(object):\n    def firstCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.firstCommonElement1(nums)\n\n    def firstCommonElement1(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n <= 1:\n            return nums[0] if n else 0\n\n        left = 0\n        right = n - 1\n        while left < right:\n            mid = left + (right - left) / 2\n            if nums[mid] == nums[0]:\n                return nums[mid]\n            elif nums[mid] < nums[0]:\n                left = mid + 1\n            else:\n                right = mid\n\n        return nums[left] if left!= 0 else 0\n\nif __name__ == \"__main__\":\n    assert Solution().firstCommonElement([1, 2, 3, 4]) == 1\n    assert Solution().firstCommonElement([1, 2, 3, 4, 5]) == 1\n    assert Solution().firstCommonElement([1, 2, 3, 4, 5, 6]) == 1\n    assert Solution().firstCommonElement([1, 2, 3, 4, 5, 6, 7]) == 1\n    assert Solution().firstCommonElement([1, 2, 3, 4, 5, 6, 7, 8]) == 1\n    assert Solution().firstCommonElement([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert Solution().firstCommonElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert Solution().firstCommonElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1\n    assert Solution().firstCommonElement([1, 2, 3, 4, 5, 6, 7, 8, 9"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-the-common-element-of-a-given-list/\n\n\n# 2.1\n# def find_common(self, lst):\n#     \"\"\"\n#     :type lst: List[Tuple[int, int]]\n#     :rtype: int\n#     \"\"\"\n#     # print lst\n#     return lst[0][0]\n\n\n# 2.2\n# def find_common(self, lst):\n#     \"\"\"\n#     :type lst: List[Tuple[int, int]]\n#     :rtype: int\n#     \"\"\"\n#     # print lst\n#     return max(lst[0][0], lst[1][0])\n\n\n# 2.3\n# def find_common(self, lst):\n#     \"\"\"\n#     :type lst: List[Tuple[int, int]]\n#     :rtype: int\n#     \"\"\"\n#     # print lst\n#     return max(lst[0][0], lst[1][0], lst[2][0])\n\n\n# 2.4\n# def find_common(self, lst):\n#     \"\"\"\n#     :type lst: List[Tuple[int, int]]\n#     :rtype: int\n#     \"\"\"\n#     # print lst\n#     return max(lst[0][0], lst[1][0], lst[2][0], lst[3][0])\n\n\n# 2.5\n# def find_common(self, lst):\n#     \"\"\"\n#     :type lst: List[Tuple[int, int]]\n#     :rtype: int\n#     \"\"\"\n#     # print lst\n#     return max(lst[0][0], lst[1][0], lst[2][0], lst[3][0], lst[4][0])\n\n\n# 2.6\n# def find_common(self, lst):\n#     \"\"\"\n#     :type lst: List[Tuple[int, int]]\n#     :rtype: int\n#     \"\"\"\n#     # print lst\n#"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# https://www.geeksforgeeks.org/write-a-function-that-finds-the-common-first-element-in-a-given-list-of-tuples/\n# https://www.geeksforgeeks.org/write-a-function-to-find-the-common-first-element-in-a-given-list-of-tuples/\n# https://www.geeksforgeeks.org/write-a-function-to-find-the-common-first-element-in-a-given-list-of-tuples/\n# https://www.geeksforgeeks.org/find-common-first-element-in-a-given-list-of-tuples/\n# https://www.geeksforgeeks.org/find-common-first-element-in-a-given-list-of-tuples/\n# https://www.geeksforgeeks.org/find-common-first-element-in-a-given-list-of-tuples/\n\ndef common_first_element(tuples):\n    \"\"\"\n    :type tuples: List[Tuple]\n    :rtype: Tuple\n    \"\"\"\n    if not tuples:\n        return None\n\n    first_element = tuple(tuples[0])\n    for tuple in tuples:\n        if tuple!= first_element:\n            return tuple\n\n    return first_element\n\n# Note:\n# There is a problem in this function. It doesn't work for the case of\n# tuples with duplicates.\n# In that case, the first element in the first tuple would be the common\n# element in all tuples.\n# For example,\n# A = (1, 2, 3, 4)\n# B = (1, 2, 3, 4, 5)\n# C = (1, 2, 3, 4)\n# D = (1, 2, 3, 4, 5)\n# E = (1, 2, 3, 4)\n# In the above example, the common element is 3\n# It would be better to use a hash table to store all unique elements\n# and compare the hash table with the first element.\n\nif __name__ == '__main__':\n    tuples = ["
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x\n\n\nclass Solution(object):\n    def findCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return None\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i].x == nums[i-1].x:\n                return nums[i].x\n        return None\n\nif __name__ == '__main__':\n    so = Solution()\n    nums = [\n        (1, 2, 3),\n        (1, 2, 3),\n        (1, 2, 3),\n    ]\n    print so.findCommonOne(nums)\n    nums = [\n        (1, 2, 3),\n        (2, 3, 4),\n        (1, 2, 3),\n    ]\n    print so.findCommonOne(nums)\n    nums = [\n        (1, 2, 3),\n        (2, 3, 4),\n        (1, 2, 3),\n    ]\n    print so.findCommonOne(nums)\n    nums = [\n        (1, 2, 3),\n        (2, 3, 4),\n        (1, 2, 3),\n    ]\n    print so.findCommonOne(nums)"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param nums, a list of integer\n    # @return an integer\n    def findFirstCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        # the common element is the first element in the list\n        # for every element in the list, we just count its occurences\n        # and find the first occurence which is at least 2\n        common = 0\n        for i in range(n):\n            if nums[i]!= common:\n                common = nums[i]\n                break\n        \n        # if there are no common elements, return 0\n        if common == 0:\n            return 0\n        \n        # the common element is the first element in the list\n        # for every element in the list, we just count its occurences\n        # and find the first occurence which is at least 2\n        for i in range(n):\n            if nums[i] == common:\n                common = 1\n                break\n        \n        # if the common element is 1, then it is the first element\n        # in the list\n        if common == 1:\n            return 0\n        \n        # the common element is the last element in the list\n        # for every element in the list, we just count its occurences\n        # and find the first occurence which is at least 2\n        for i in range(n-1, -1, -1):\n            if nums[i] == common:\n                common = 1\n                break\n        \n        # if the common element is 1, then it is the first element\n        # in the list\n        if common == 1:\n            return 0\n        \n        return common\n        \n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.findFirstCommonOne(nums)"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findCommon(self, nums):\n        if not nums:\n            return 0\n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            m = (l + r) / 2\n            if nums[m] == nums[0]:\n                return m\n            elif nums[m] < nums[0]:\n                l = m + 1\n            else:\n                r = m - 1\n        return l"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/first-common-element-of-a-given-list\n\n\ndef first_common_element(arr):\n    # Write your code here\n    common = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                common += 1\n    return common\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    arr = [4, 5, 6, 7, 8]\n    arr = [1, 2, 3, 4]\n    arr = [1, 3, 4, 5]\n    arr = [1, 3, 4, 5, 7]\n    arr = [1, 3, 4, 5, 6]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5, 7]\n    arr = [1, 2, 3, 4, 5, 6]\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def find_first_common(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n\n        first_common = nums[0]\n        for num in nums:\n            if num == first_common:\n                first_common = num\n            else:\n                return first_common\n\n        return first_common\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.find_first_common([1,2,3])\n    print solution.find_first_common([1,1,2,2,3,3])\n    print solution.find_first_common([1,2,3,4,5,6,7,8,9,10])\n    print solution.find_first_common([1,2,3,4,5,6,7,8,9,10,11,12,13])\n    print solution.find_first_common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n    print solution.find_first_common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def find_first_common_element(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        first_common = nums[0]\n        for n in nums:\n            if first_common!= n:\n                return -1\n            first_common = first_common\n        return first_common\n\nclass Solution2(object):\n    def find_first_common_element(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        pivot = nums[0]\n        for n in nums:\n            if n < pivot:\n                pivot = n\n        for n in nums:\n            if n == pivot:\n                return n\n        return -1"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class Solution:\n    def firstCommon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        max_len = max(map(len, nums))\n        # for i in range(1, max_len+1):\n        #     if i < max_len:\n        #         if nums[0][i-1] == nums[0][i]:\n        #             return nums[0][i-1]\n        #     if nums[0][i] == nums[0][max_len-1]:\n        #         return nums[0][i]\n        #     for i in range(1, n):\n        #         if nums[i][i-1] == nums[i][i]:\n        #             return nums[i][i-1]\n        #     return nums[n-1][n-1]\n        # return nums[0][0]\n        \n        for i in range(1, max_len+1):\n            if i < max_len:\n                if nums[0][i-1] == nums[0][i]:\n                    return nums[0][i-1]\n            if nums[0][i] == nums[0][max_len-1]:\n                return nums[0][i]\n            for i in range(1, n):\n                if nums[i][i-1] == nums[i][i]:\n                    return nums[i][i-1]\n            return nums[n-1][n-1]\n        return nums[0][0]"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n\n    def __eq__(self, other):\n        return self.x == other.x\n\n    def __hash__(self):\n        return hash(self.x)\n\nclass Solution(object):\n    def findCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        if not nums:\n            return None\n        for i, n in enumerate(nums):\n            for j, m in enumerate(nums):\n                if i!= j and n == m:\n                    return n\n        return None\n\nif __name__ == \"__main__\":\n    print Solution().findCommonOne([(1,2),(3,4),(1,2),(5,6)])"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findCommonNode(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return nums[0]"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution(object):\n    def firstCommon(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        return sorted(nums, key=lambda x: x)[0]\n\n\nif __name__ == '__main__':\n    so = Solution()\n    nums = [\n        (1,2),\n        (3,3),\n        (1,3)\n    ]\n    print so.firstCommon(nums)"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-common-element-in-a-list-of-tuples/description/\n\n# Definition for a tuple.\n# class Tuple(object):\n#     def __init__(self, x):\n#         self.x = x\n#         self.y = y\n\nclass Solution(object):\n    def find_common_element(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        result = nums[0][0]\n        for n in nums:\n            if n[0] == result:\n                result = n[1]\n            else:\n                result = None\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.find_common_element([(1, 2), (1, 2), (1, 3), (2, 2), (2, 3), (3, 2)]))\n    print(sol.find_common_element([(1, 1), (1, 1), (1, 1), (1, 2), (2, 3), (3, 2)]))\n    print(sol.find_common_element([(1, 1), (1, 1), (1, 1), (1, 2), (2, 3), (3, 2)]))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def firstCommon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    return nums[i]\n        return -1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.firstCommon([1,2,3])\n    print s.firstCommon([1,2,3,4])"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findCommon(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0][0]\n        \n        nums_len = len(nums)\n        \n        # find first element in each list\n        for i in range(nums_len):\n            for j in range(nums_len):\n                if i == j:\n                    continue\n                first = min(nums[i][0], nums[j][0])\n                if first == nums[i][0]:\n                    return first\n                elif first == nums[j][0]:\n                    return first\n        \n        return nums[0][0]"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "import collections\n\n\nclass Solution:\n    def find_first_common(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = collections.Counter(nums)\n        for key in nums:\n            if nums[key] > 1:\n                return key\n        return -1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1, 2, 3]\n    print(s.find_first_common(nums))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def firstCommonElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        # if len(nums1) == 0 or len(nums2) == 0:\n        #     return None\n\n        # if len(nums1) < len(nums2):\n        #     return self.firstCommonElement(nums2, nums1)\n\n        # for i in range(0, len(nums1)):\n        #     if nums1[i] == nums2[0]:\n        #         return nums1[i]\n\n        # return self.firstCommonElement(nums2[1:], nums1[1:])\n\n        # for i in range(1, len(nums1)):\n        #     for j in range(1, len(nums2)):\n        #         if nums1[i] == nums2[j]:\n        #             return nums1[i]\n\n        # return self.firstCommonElement(nums2[1:], nums1[1:])"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\nclass Solution:\n    def firstCommonNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # First check if both lists are empty.\n        if headA == None or headB == None:\n            return None\n        # If both lists are empty, then return the head of one of them.\n        if headA == headB:\n            return headA\n        # If one of the lists is empty, return the head of the other.\n        if headA == None:\n            return headB\n        if headB == None:\n            return headA\n        # If both lists are not empty, then check the length and return the first node.\n        while headA!= None and headA.next!= None and headB!= None and headB.next!= None:\n            if headA.val!= headB.val:\n                return headA\n            headA = headA.next\n            headB = headB.next\n        # Return the first node in the other list.\n        return headB\n\nif __name__ == \"__main__\":\n    headA = ListNode(1)\n    headA.next = ListNode(2)\n    headA.next.next = ListNode(3)\n    headB = ListNode(2)\n    headB.next = ListNode(3)\n    headB.next.next = ListNode(4)\n    headB.next.next.next = ListNode(5)\n    headB.next.next.next.next = ListNode(6)\n    headB.next.next.next.next.next = ListNode(7)\n    headB.next.next.next.next.next.next = ListNode(8)\n    headB.next.next.next.next.next.next.next = ListNode(9)\n    headB.next.next.next.next.next.next.next.next ="
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/find-the-common-element-of-a-group-of-numbers/discuss/158034/Python-O(N)-O(1)-Space\n\nclass Solution(object):\n    def firstCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # O(N) time and O(1) space\n        if len(nums) == 0:\n            return 0\n        \n        # find the first common element\n        for i in range(len(nums)):\n            if nums[i] == nums[0]:\n                return nums[i]\n        return nums[0]"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {ListNode[]} list\n    # @return {ListNode}\n    def findFirstCommon(self, list):\n        \"\"\"\n        :type list: ListNode[]\n        :rtype: ListNode\n        \"\"\"\n        if not list:\n            return None\n\n        head = list[0]\n        for i in range(1, len(list)):\n            head = self.find(head, list[i])\n            if head is None:\n                break\n        return head\n\n    def find(self, head, node):\n        while head and head!= node:\n            head = head.next\n        return head\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    head = ListNode(1, ListNode(2, ListNode(3, None)))\n    head = sol.findFirstCommon(head)\n    print(head.val)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param A, a list of tuple\n    # @return an integer\n    def find_common_element(self, A):\n        \"\"\"\n        :type A: List[tuple]\n        :rtype: int\n        \"\"\"\n        if not A:\n            return -1\n        for i in xrange(len(A)):\n            for j in xrange(i+1, len(A)):\n                if A[i][0] == A[j][0]:\n                    return A[i][0]\n        return -1"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution(object):\n    def findCommonOne(self, arr):\n        \"\"\"\n        :type arr: List[Tuple]\n        :rtype: int\n        \"\"\"\n        l = len(arr)\n        if l == 0:\n            return -1\n\n        min_idx = 0\n        max_idx = l - 1\n\n        while min_idx < max_idx:\n            mid = (min_idx + max_idx) // 2\n            if arr[mid].x == arr[max_idx].x:\n                return arr[mid].x\n            elif arr[mid].x < arr[max_idx].x:\n                min_idx = mid + 1\n            else:\n                max_idx = mid\n\n        return arr[min_idx].x"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def firstCommon(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        n = len(nums)\n        for i in range(n):\n            for j in range(n):\n                if nums[i] == nums[j]:\n                    return nums[i]\n        return None"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\nclass Solution:\n    \"\"\"\n    @param A: A list of lists of integers\n    @param B: A list of integers\n    @return: a integer\n    \"\"\"\n    def findCommonElement(self, A, B):\n        \"\"\"\n        :type A: List[List[int]]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        # use default dict to store first element of each list\n        first_element = defaultdict(list)\n        for element in A:\n            first_element[element[0]].append(element[1])\n\n        # use default dict to store first element of each list\n        first_element_B = defaultdict(list)\n        for element in B:\n            first_element_B[element].append(element)\n\n        for element in first_element:\n            if element in first_element_B:\n                return element\n        return -1\n\n\nif __name__ == '__main__':\n    A = [[1,2,3],[3,2,1],[2,3,1]]\n    B = [3,2,1]\n    assert Solution().findCommonElement(A, B) == 1"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "import collections\n\n\nclass Solution(object):\n    def firstCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n\n        def find(x):\n            \"\"\"\n            :type x: int\n            :rtype: int\n            \"\"\"\n            if x not in seen:\n                seen.add(x)\n                for y in nums:\n                    if x == y:\n                        return x\n                    elif x > y:\n                        x = find(y)\n            return -1\n\n        seen = collections.defaultdict(int)\n        for x in nums:\n            seen[x] = 1\n        return find(nums[0])\n\n\nif __name__ == '__main__':\n    print(Solution().firstCommonElement([2, 2]))\n    print(Solution().firstCommonElement([1, 1]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/common-first-element-in-given-list-of-tuple/\n\nclass Solution:\n    # @param {List[Tuple]} nums\n    # @return {Tuple}\n    def find_common_first_element(self, nums):\n        if not nums:\n            return None\n        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] == nums[0]:\n                return nums[i]\n        return None\n\nclass Solution2:\n    # @param {List[Tuple]} nums\n    # @return {Tuple}\n    def find_common_first_element(self, nums):\n        if not nums:\n            return None\n        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] == nums[0]:\n                return nums[i]\n        return None\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s = Solution2()\n    print(s.find_common_first_element([(1,2),(2,3)]))\n    print(s.find_common_first_element([(1,2),(1,2),(2,3)]))\n    print(s.find_common_first_element([(1,2),(1,2),(2,3),(2,3)]))\n    print(s.find_common_first_element([(1,2),(2,3)]))\n    print(s.find_common_first_element([(1,2),(2,3),(1,2),(1,2),(2,3)]))\n    print(s.find_common_first_element([(1,2),(2,3),(1,2),(1,2),(2,3),(2,3)]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/find-common-element-in-a-given-list/problem\n\nfrom collections import Counter\nfrom itertools import groupby\n\n\ndef find_common_element(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: List of tuples.\n    :return: Common element.\n    \"\"\"\n    # Get key value pairs of tuples.\n    key_value_pairs = [(tuple(x), x[0]) for x in list_of_tuples]\n    # Sort key value pairs by key value.\n    key_value_pairs = sorted(key_value_pairs, key=lambda x: x[1])\n    # Group key value pairs by key.\n    key_value_pairs = groupby(key_value_pairs, lambda x: x[0])\n    # Get most common key value pair from group key value pairs.\n    common_key_value_pair = next(key_value_pairs)\n\n    # Get the most common key value pair from list of tuples.\n    common_key_value_pair = next(iter(common_key_value_pair))\n\n    # Return the common key value pair.\n    return common_key_value_pair\n\n\nif __name__ == '__main__':\n    # Sample Input\n    # [[('a', 1), ('b', 1)], [('a', 1), ('b', 2), ('a', 2)], [('a', 1), ('c', 2)]]\n    list_of_tuples = [[('a', 1), ('b', 1)], [('a', 1), ('b', 2), ('a', 2)], [('a', 1), ('c', 2)]]\n    # Sample Output\n    # a\n    # b\n    # c\n    print(find_common_element(list_of_tuples))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "import collections\n\n\nclass Solution:\n    \"\"\"\n    @param {integer[]} nums\n    @return {integer}\n    \"\"\"\n\n    def firstCommonOne(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        return collections.defaultdict(int)(*nums).itervalues().next()\n\n\nif __name__ == '__main__':\n    assert Solution().firstCommonOne([1, 2, 3, 4, 5, 6]) == 1\n    assert Solution().firstCommonOne([1, 2, 3, 4, 5, 6]) == 1\n    assert Solution().firstCommonOne([1, 2, 3, 4, 5, 6]) == 1\n    assert Solution().firstCommonOne([-1, 2, 3, 4, 5, 6]) == -1\n    assert Solution().firstCommonOne([1, 2, 3, 4, 5, 6]) == 1"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution(object):\n    def firstCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                return nums[i]"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, x):\n        self.x = x\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def findCommon(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        if not nums:\n            return None\n        elif len(nums) == 1:\n            return nums[0]\n        else:\n            for i in range(len(nums)):\n                for j in range(i + 1, len(nums)):\n                    if nums[i].x == nums[j].x:\n                        return nums[i]\n        return None"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __str__(self):\n        return str(self.x)\n\n    def __eq__(self, other):\n        return self.x == other.x\n\n    def __hash__(self):\n        return hash(self.x)\n\nclass Solution(object):\n    def findCommon(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        if not nums:\n            return None\n        \n        return min(nums, key=lambda t: t[0])"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/common-first-element-in-a-sorted-matrix/\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution(object):\n    def findFirstCommonOne(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        if not root.left and root.right:\n            return root.right.val\n        if not root.right and root.left:\n            return root.left.val\n        return max(self.findFirstCommonOne(root.left), self.findFirstCommonOne(root.right))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param: arr: An integer array\n    @return: An integer\n    \"\"\"\n    def findFirstCommon(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # write your code here\n        \n        if len(arr) == 0:\n            return None\n        \n        if len(arr) == 1:\n            return arr[0]\n        \n        max = arr[0]\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max:\n                max = arr[i]\n        \n        return max"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\nclass Solution:\n    def firstCommonElement(self, nums1: List[int], nums2: List[int]) -> int:\n        nums1.sort()\n        nums2.sort()\n        for i in range(min(len(nums1), len(nums2))):\n            if nums1[i] == nums2[i]:\n                return nums1[i]\n        return -1\n\n\nif __name__ == \"__main__\":\n    assert Solution().firstCommonElement([1,2], [3,4]) == 2\n    assert Solution().firstCommonElement([1,2], [3,2]) == 2\n    assert Solution().firstCommonElement([1,2], [1,2]) == 1\n    assert Solution().firstCommonElement([1,2,3], [1,2,3]) == 1"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def firstCommonElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        else:\n            return nums[0]"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __str__(self):\n        return str(self.x)\n\n\nclass Solution(object):\n    def find_common_element(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        nums.sort()\n        return nums[0]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [\n        (1, 2),\n        (1, 3),\n        (1, 4),\n        (1, 5),\n        (2, 3),\n        (2, 4),\n        (2, 5),\n        (3, 4),\n        (3, 5),\n        (4, 5)\n    ]\n    print s.find_common_element(nums)"
    }
  ]
}