{
  "timestamp": "2025-09-14T17:52:29.981223",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 69,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def nth_tetrahedral_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # http://mathworld.wolfram.com/TetrahedralNumber.html\n    n = n - 1\n    if n < 0:\n        return 0\n    if n % 2 == 0:\n        n = n / 2\n        if n % 3 == 0:\n            n = n / 3\n            if n % 5 == 0:\n                n = n / 5\n                if n % 7 == 0:\n                    n = n / 7\n                    if n % 11 == 0:\n                        n = n / 11\n                        if n % 13 == 0:\n                            n = n / 13\n                            if n % 17 == 0:\n                                n = n / 17\n                                if n % 19 == 0:\n                                    n = n / 19\n                                    if n % 23 == 0:\n                                        n = n / 23\n                                        if n % 29 == 0:\n                                            n = n / 29\n                                            if n % 31 == 0:\n                                                n = n / 31\n                                                if n % 37 == 0:\n                                                    n = n / 37\n                                                    if n % 41 == 0:\n                                                        n = n / 41\n                                                        if n % 43 == 0:\n                                                            n = n / 43\n                                                            if n % 47 == 0:\n                                                                n = n / 47\n                                                                if n % 53 == 0:\n                                                                    n = n / 53\n                                                                    if n % 59 == 0:\n                                                                        n = n / 59\n                                                                        if n % 61 == 0:\n                                                                            n = n / 61\n    return n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from utils.lists import get_tetrahedron_number_by_row\n\n\ndef tetrahedron_nth(n):\n    \"\"\"\n    :param n: a positive integer\n    :return: the nth tetrahedral number\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 25\n    elif n == 6:\n        return 36\n    elif n == 7:\n        return 49\n    elif n == 8:\n        return 64\n    elif n == 9:\n        return 81\n    elif n == 10:\n        return 100\n    elif n == 11:\n        return 121\n    else:\n        return 0\n\n\ndef main():\n    \"\"\"\n    Test the function by using the provided input.\n    \"\"\"\n    print(tetrahedron_nth(1))\n    print(tetrahedron_nth(2))\n    print(tetrahedron_nth(3))\n    print(tetrahedron_nth(4))\n    print(tetrahedron_nth(5))\n    print(tetrahedron_nth(6))\n    print(tetrahedron_nth(7))\n    print(tetrahedron_nth(8))\n    print(tetrahedron_nth(9))\n    print(tetrahedron_nth(10))\n    print(tetrahedron_nth(11))\n    print(tetrahedron_nth(12))\n    print(tetrahedron_nth(13))\n    print(tetrahedron_nth(14))\n    print(tetrahedron_nth(15))\n    print(tetrahedron_nth(16))\n    print(tetrahedron_nth(17))\n    print(tetrahedron_nth(18))\n    print(tetrahedron_nth(19))\n    print(tet"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getNthTetrahedronNum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return 0\n        elif n == 0:\n            return 1\n        elif n == 1:\n            return 4\n        elif n == 2:\n            return 6\n        elif n == 3:\n            return 10\n        else:\n            t1 = n // 3\n            t2 = n % 3\n            return self.getNthTetrahedronNum(t1) + self.getNthTetrahedronNum(t2) + self.getNthTetrahedronNum(t1 + t2) + self.getNthTetrahedronNum(t2 + t1)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import unittest\n\ndef nth_tetrahedron(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    :param n: A positive integer.\n    :return: The nth tetrahedral number.\n    \"\"\"\n    def f(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n == 3:\n            return 27\n        if n % 2 == 0:\n            return (f(n / 2) * (f(n - 1) + f(n - 2))) % 27\n        else:\n            return (f(n - 1) * (f(n - 2) + f(n - 3))) % 27\n    return f(n)\n\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(nth_tetrahedron(1), 1)\n        self.assertEqual(nth_tetrahedron(2), 4)\n        self.assertEqual(nth_tetrahedron(3), 27)\n        self.assertEqual(nth_tetrahedron(4), 6)\n        self.assertEqual(nth_tetrahedron(5), 0)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getTetrahedralNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def get_tetrahedral_number(num):\n            result = 0\n            num = str(num)\n            for i in range(len(num)-1):\n                if num[i] == '0':\n                    result += 1\n                else:\n                    result += int(num[i]) * pow(10, i)\n            return result\n        \n        for i in range(2, n+1):\n            result = get_tetrahedral_number(i)\n            if result > n:\n                return result\n        return n"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import sys\nimport math\n\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    nth_tetrahedral(n):\n    Compute the nth tetrahedral number.\n\n    Inputs:\n    n = The number to compute.\n\n    Outputs:\n    The nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 28\n    elif n == 7:\n        return 36\n    elif n == 8:\n        return 45\n    elif n == 9:\n        return 55\n    elif n == 10:\n        return 66\n    elif n == 11:\n        return 78\n    elif n == 12:\n        return 90\n    elif n == 13:\n        return 102\n    elif n == 14:\n        return 114\n    elif n == 15:\n        return 126\n    elif n == 16:\n        return 144\n    elif n == 17:\n        return 153\n    elif n == 18:\n        return 165\n    elif n == 19:\n        return 177\n    elif n == 20:\n        return 189\n    else:\n        raise ValueError(\"n must be a positive integer.\")\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    if len(sys.argv)!= 2:\n        print(\"Usage: {} <n>\".format(sys.argv[0]))\n        sys.exit(1)\n\n    n = int(sys.argv[1])\n    print(nth_tetrahedral(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import time\n\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    nth_tetrahedral(n)\n\n    Returns the nth tetrahedral number.\n\n    n = 10\n    >>> nth_tetrahedral(n)\n    624\n    \"\"\"\n    tetrahedron_numbers = [\n        1, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\n        479001600, 6227020800, 87178291200, 1307674368000\n    ]\n\n    t = time.time()\n    for i in range(n):\n        nth_tetrahedral(n)\n    print(time.time() - t)\n\n    return tetrahedron_numbers[n]\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedral(10))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import math\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        raise ValueError('n should be positive')\n\n    if n == 1:\n        return 4\n    if n == 2:\n        return 6\n    if n == 3:\n        return 8\n    if n == 4:\n        return 12\n    if n == 5:\n        return 20\n    if n == 6:\n        return 30\n    if n == 7:\n        return 40\n    if n == 8:\n        return 60\n    if n == 9:\n        return 80\n\n    # n-1\n    return 4 * nth_tetrahedral(n-1) + 6 * nth_tetrahedral(n-2) + 8 * nth_tetrahedral(n-3) + 12 * nth_tetrahedral(n-4) + 20 * nth_tetrahedral(n-5) + 30 * nth_tetrahedral(n-6) + 40 * nth_tetrahedral(n-7) + 60 * nth_tetrahedral(n-8) + 80 * nth_tetrahedral(n-9)\n\n\nif __name__ == '__main__':\n    print(nth_tetrahedral(10))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from euler import is_pandigital\n\n\ndef get_tetrahedron_numbers(n):\n    return [\n        n*(3*n-1)/2,\n        n*(3*n-1)/2*(n-1),\n        n*(3*n-1)/2*(n-1)*(n-2),\n        n*(3*n-1)/2*(n-1)*(n-2)*(n-3)\n    ]\n\n\ndef get_tetrahedron_numbers_iter(n):\n    return [\n        n*(3*n-1)/2,\n        n*(3*n-1)/2*(n-1),\n        n*(3*n-1)/2*(n-1)*(n-2),\n        n*(3*n-1)/2*(n-1)*(n-2)*(n-3)\n    ]\n\n\ndef is_tetrahedron_number(n):\n    return all(is_pandigital(x) for x in get_tetrahedron_numbers(n))\n\n\ndef is_tetrahedron_number_iter(n):\n    return all(is_pandigital(x) for x in get_tetrahedron_numbers_iter(n))\n\n\nif __name__ == '__main__':\n    assert is_tetrahedron_number(5)\n    assert is_tetrahedron_number_iter(5)\n    assert not is_tetrahedron_number(6)\n    assert not is_tetrahedron_number_iter(6)\n    assert not is_tetrahedron_number(7)\n    assert not is_tetrahedron_number_iter(7)\n    assert not is_tetrahedron_number(8)\n    assert not is_tetrahedron_number_iter(8)\n    assert not is_tetrahedron_number(9)\n    assert not is_tetrahedron_number_iter(9)\n    assert is_tetrahedron_number(100)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import time\n\n\nclass Solution(object):\n\n    @staticmethod\n    def solve(n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return -1\n\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0 and n / i == i:\n                count += 1\n            if n % i == 0 and n / i!= i:\n                count += i\n\n        return count\n\n\ndef time_solve(n):\n    t1 = time.time()\n    result = Solution.solve(n)\n    t2 = time.time()\n    print(t2 - t1)\n    return result\n\n\nif __name__ == '__main__':\n    print(time_solve(100))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def nth_tetrahedron(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        t = nth_tetrahedron(n-1)\n        return t * (t-1) * (t-2)\n\nif __name__ == '__main__':\n    print(nth_tetrahedron(4))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\ndef nth_tetrahedron(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n)/(4*math.factorial(n-1)*math.factorial(n-2)*math.factorial(n-3))\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedron(5))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def nth_tetrahedron(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return nth_tetrahedron_recursive(n, 0)\n\ndef nth_tetrahedron_recursive(n, k):\n    if k == n:\n        return 1\n    elif k < n:\n        return nth_tetrahedron_recursive(n, k+1) + nth_tetrahedron_recursive(n-k, k)\n    else:\n        return 0\n\nif __name__ == \"__main__\":\n    assert nth_tetrahedron(5) == 10\n    assert nth_tetrahedron(20) == 2168\n    assert nth_tetrahedron(0) == 1\n    assert nth_tetrahedron(1) == 1\n    assert nth_tetrahedron(2) == 4\n    assert nth_tetrahedron(3) == 7\n    assert nth_tetrahedron(4) == 12\n    assert nth_tetrahedron(5) == 15\n    assert nth_tetrahedron(6) == 20\n    assert nth_tetrahedron(7) == 27\n    assert nth_tetrahedron(8) == 32\n    assert nth_tetrahedron(9) == 36\n    assert nth_tetrahedron(10) == 40\n    assert nth_tetrahedron(11) == 45\n    assert nth_tetrahedron(12) == 50\n    assert nth_tetrahedron(13) == 55\n    assert nth_tetrahedron(14) == 60\n    assert nth_tetrahedron(15) == 65\n    assert nth_tetrahedron(16) == 70\n    assert nth_tetrahedron(17) == 75\n    assert nth_tetrahedron(18) == 80\n    assert nth_tetrahedron(19) == 85\n    assert nth_tetra"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import time\n\n\ndef nth_tetrahedron(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 40\n    elif n == 4:\n        return 100\n    elif n == 5:\n        return 400\n    elif n == 6:\n        return 1000\n    elif n == 7:\n        return 4000\n    elif n == 8:\n        return 10000\n    elif n == 9:\n        return 40000\n    elif n == 10:\n        return 100000\n    elif n == 11:\n        return 4000000\n    elif n == 12:\n        return 10000000\n    elif n == 13:\n        return 40000000\n    elif n == 14:\n        return 100000000\n    elif n == 15:\n        return 400000000\n    elif n == 16:\n        return 1000000000\n    elif n == 17:\n        return 4000000000\n    elif n == 18:\n        return 10000000000\n    elif n == 19:\n        return 40000000000\n    elif n == 20:\n        return 100000000000\n    elif n == 21:\n        return 4000000000000\n    elif n == 22:\n        return 10000000000000\n    elif n == 23:\n        return 40000000000000\n    elif n == 24:\n        return 100000000000000\n    elif n == 25:\n        return 400000000000000\n    elif n == 26:\n        return 1000000000000000\n    elif n == 27:\n        return 400000000000000000\n    elif n == 28:\n        return 10000000000000000000\n    else:\n        return -1\n\n\ndef time_tetrahedron(n):\n    \"\"\"\n    Returns the time taken to run the function.\n    \"\"\"\n    t1 = time.time()\n    nth_tetrahedron(n)\n    t2 = time.time()\n    return t2 - t1\n\n\nif __name__ == \"__main__\":"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import time\n\n\ndef find_tetrahedron_n(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    start = time.clock()\n    tetrahedron_n = 1\n    for i in range(1, n + 1):\n        tetrahedron_n *= 4\n        tetrahedron_n += 1\n    end = time.clock()\n    print(\"Time:\", end - start)\n    return tetrahedron_n\n\n\ndef test_tetrahedron_n():\n    assert find_tetrahedron_n(1) == 1\n    assert find_tetrahedron_n(2) == 4\n    assert find_tetrahedron_n(3) == 9\n    assert find_tetrahedron_n(4) == 16\n    assert find_tetrahedron_n(5) == 25\n    assert find_tetrahedron_n(6) == 36\n    assert find_tetrahedron_n(7) == 49\n    assert find_tetrahedron_n(8) == 64\n    assert find_tetrahedron_n(9) == 81\n\n\nif __name__ == \"__main__\":\n    test_tetrahedron_n()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def nth_tetrahedral(n):\n    n = int(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 12\n    if n == 6:\n        return 20\n    if n == 7:\n        return 34\n    if n == 8:\n        return 55\n    if n == 9:\n        return 89\n    if n == 10:\n        return 144\n    if n == 11:\n        return 233\n    if n == 12:\n        return 377\n    if n == 13:\n        return 610\n    if n == 14:\n        return 987\n    if n == 15:\n        return 1597\n    if n == 16:\n        return 2584\n    if n == 17:\n        return 4181\n    if n == 18:\n        return 6765\n    if n == 19:\n        return 10946\n    if n == 20:\n        return 17711\n    if n == 21:\n        return 28657\n    if n == 22:\n        return 46368\n    if n == 23:\n        return 75025\n    if n == 24:\n        return 121393\n    if n == 25:\n        return 196418\n    if n == 26:\n        return 317811\n    if n == 27:\n        return 514229\n    if n == 28:\n        return 832040\n    if n == 29:\n        return 1346269\n    if n == 30:\n        return 2178309\n    if n == 31:\n        return 3597169\n    if n == 32:\n        return 6227020\n    if n == 33:\n        return 102334155\n    if n == 34:\n        return 201660610\n    if n == 35:\n        return 40000019\n    if n == 36:\n        return 80000019\n    if n == 37:\n        return 160000744\n    if n == 38:\n        return 30000017\n    if n == 39:\n        return 60000010\n    if n == 40:\n        return 125000034\n    if n == 41:"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import math\n\ndef tn(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 32\n    elif n == 6:\n        return 64\n    elif n == 7:\n        return 128\n    elif n == 8:\n        return 256\n    elif n == 9:\n        return 512\n    elif n == 10:\n        return 1024\n    elif n == 11:\n        return 2048\n    elif n == 12:\n        return 4096\n    elif n == 13:\n        return 8192\n    elif n == 14:\n        return 16384\n    elif n == 15:\n        return 32768\n    elif n == 16:\n        return 65536\n    elif n == 17:\n        return 131072\n    elif n == 18:\n        return 262144\n    elif n == 19:\n        return 524288\n    elif n == 20:\n        return 1048576\n    elif n == 21:\n        return 2097152\n    elif n == 22:\n        return 4194304\n    elif n == 23:\n        return 8388608\n    elif n == 24:\n        return 16777216\n    elif n == 25:\n        return 33554432\n    elif n == 26:\n        return 67108864\n    elif n == 27:\n        return 134217728\n    elif n == 28:\n        return 268435456\n    elif n == 29:\n        return 536870912\n    elif n == 30:\n        return 1073741824\n    elif n == 31:\n        return 2147483648\n    else:\n        return 0\n\nif __name__ == '__main__':\n    print tn(10)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nimport sys\n\nsys.path.append(\"../../\")\nfrom problems.problem import Problem\nfrom algorithms.algorithm import Algorithm\nfrom libs.numbers import is_prime\n\n# pylint: disable=too-many-instance-attributes\n\n\nclass Solution(Problem):\n    \"\"\"\n    https://projecteuler.net/problem=4\n    \"\"\"\n\n    @staticmethod\n    def solve(input_data: list[int]) -> int:\n        \"\"\"\n        Solves the problem\n        :param input_data:\n        :return:\n        \"\"\"\n        n = input_data[0]\n        # TODO:\n        # 1. check if n is prime or not\n        # 2. check if n is even or odd\n        # 3. compute the number of prime numbers that are smaller than n\n        # 4. compute the number of prime numbers that are greater than n\n        # 5. compute the number of prime numbers that are equal to n\n        # 6. compute the number of prime numbers that are greater than or equal to n\n        # 7. compute the number of prime numbers that are less than or equal to n\n        # 8. compute the number of prime numbers that are equal to or less than n\n        # 9. compute the number of prime numbers that are equal to or greater than n\n        # 10. compute the number of prime numbers that are greater than or equal to or less than n\n        # 11. compute the number of prime numbers that are greater than or equal to or less than n\n        # 12. compute the number of prime numbers that are greater than or equal to or less than n\n        # 13. compute the number of prime numbers that are greater than or equal to or less than n\n        # 14. compute the number of prime numbers that are greater than or equal to or less than n\n        # 15. compute the number of prime numbers that are greater than or equal to or less than n\n        # 16. compute the number of prime numbers that are greater than or equal to or less than n\n        # 17. compute the number of prime numbers that are greater than or equal to or less than n\n        # 18. compute the number of prime numbers that are greater than or equal to or less than n\n        # 19. compute the number of prime numbers that are"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef get_tetrahedron_numbers(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    tetrahedron_numbers = defaultdict(int)\n    tetrahedron_numbers[1] = 1\n    tetrahedron_numbers[2] = 2\n    tetrahedron_numbers[3] = 3\n    tetrahedron_numbers[4] = 4\n    tetrahedron_numbers[5] = 6\n    tetrahedron_numbers[6] = 8\n    tetrahedron_numbers[8] = 16\n    tetrahedron_numbers[16] = 36\n    tetrahedron_numbers[36] = 64\n    tetrahedron_numbers[64] = 128\n    tetrahedron_numbers[128] = 256\n    tetrahedron_numbers[256] = 512\n    tetrahedron_numbers[512] = 1024\n    tetrahedron_numbers[1024] = 2048\n    tetrahedron_numbers[2048] = 4096\n    tetrahedron_numbers[4096] = 8192\n    tetrahedron_numbers[8192] = 16384\n    tetrahedron_numbers[16384] = 32768\n    tetrahedron_numbers[32768] = 65536\n    tetrahedron_numbers[65536] = 131072\n    tetrahedron_numbers[131072] = 262144\n    tetrahedron_numbers[262144] = 524288\n    tetrahedron_numbers[524288] = 1048576\n    tetrahedron_numbers[1048576] = 2097152\n    tetrahedron_numbers[2097152] = 4194304\n    tetrahedron_numbers[4194304] = 8388608\n    tetrahedron_numbers[8388608] = 16777216\n    tetrahedron_numbers["
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef nth_tetrahedron(n):\n    \"\"\"\n    :param n: The nth tetrahedral number\n    :return: The nth tetrahedral number\n    \"\"\"\n\n    if n == 1:\n        return 10\n    if n == 2:\n        return 30\n    if n == 3:\n        return 70\n    if n == 4:\n        return 130\n    if n == 5:\n        return 210\n    if n == 6:\n        return 330\n    if n == 7:\n        return 510\n    if n == 8:\n        return 630\n    if n == 9:\n        return 930\n    if n == 10:\n        return 1050\n    if n == 11:\n        return 1530\n    if n == 12:\n        return 2100\n\n    return nth_tetrahedron(n-1) + nth_tetrahedron(n-2) + nth_tetrahedron(n-3) + nth_tetrahedron(n-4)\n\n\ndef main():\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    print(nth_tetrahedron(1))\n    print(nth_tetrahedron(2))\n    print(nth_tetrahedron(3))\n    print(nth_tetrahedron(4))\n    print(nth_tetrahedron(5))\n    print(nth_tetrahedron(6))\n    print(nth_tetrahedron(7))\n    print(nth_tetrahedron(8))\n    print(nth_tetrahedron(9))\n    print(nth_tetrahedron(10))\n    print(nth_tetrahedron(11))\n    print(nth_tetrahedron(12))\n    print(nth_tetrahedron(13))\n    print(nth_tetrahedron(14))\n    print(nth_tetrahedron(15))\n    print(nth_tetrahedron(16))\n    print"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def nth_tetrahedral(n):\n    \"\"\"\n    nth_tetrahedral(n) -> int\n\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return 1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "import numpy as np\n\ndef nth_tetrahedron(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    n = int(n)\n    return sum([i * (i + 1) * (i + 2) for i in range(n)])\n\n\ndef main():\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    print(nth_tetrahedron(1))\n    print(nth_tetrahedron(2))\n    print(nth_tetrahedron(3))\n    print(nth_tetrahedron(4))\n    print(nth_tetrahedron(5))\n    print(nth_tetrahedron(6))\n    print(nth_tetrahedron(7))\n    print(nth_tetrahedron(8))\n    print(nth_tetrahedron(9))\n    print(nth_tetrahedron(10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef nth_tetrahedron(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return factorial(n) / (factorial(n - 1) * factorial(n - 2) * factorial(n - 3))\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedron(5))\n    print(nth_tetrahedron(6))\n    print(nth_tetrahedron(7))\n    print(nth_tetrahedron(8))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def getTetrahedron(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 4\n        elif n == 2:\n            return 27\n        elif n == 3:\n            return 64\n        elif n == 4:\n            return 125\n        elif n == 5:\n            return 216\n        elif n == 6:\n            return 625\n        elif n == 7:\n            return 1296\n        elif n == 8:\n            return 3125\n        elif n == 9:\n            return 7824\n        else:\n            return 10 ** n"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def nth_tetrahedron(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return nth_tetrahedron_recursive(n)\n\ndef nth_tetrahedron_recursive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 1\n\n    if n == 1:\n        return 4\n    if n == 2:\n        return 10\n    if n == 3:\n        return 36\n    if n == 4:\n        return 154\n\n    return nth_tetrahedron_recursive(n - 1) + nth_tetrahedron_recursive(n - 2) + nth_tetrahedron_recursive(n - 3)\n\nif __name__ == \"__main__\":\n    nth_tetrahedron(4)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/tetrahedral-numbers/problem\n\nimport math\n\ndef get_tetrahedral_numbers(n):\n    return [math.factorial(n + 1) / (math.factorial(n) * math.factorial(n - 1))]\n\ndef main():\n    n = int(input().strip())\n    print(get_tetrahedral_numbers(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def nth_tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    def nth_tetrahedral_helper(n, num_tetrahedra):\n        if n == 1:\n            return num_tetrahedra\n        if n % 4 == 0:\n            return nth_tetrahedral(n / 4) + num_tetrahedra\n        return nth_tetrahedral(n / 4) + nth_tetrahedral(n % 4) + num_tetrahedra\n    return nth_tetrahedral_helper(n, 0)\n\nif __name__ == '__main__':\n    print(nth_tetrahedral(1))\n    print(nth_tetrahedral(2))\n    print(nth_tetrahedral(3))\n    print(nth_tetrahedral(4))\n    print(nth_tetrahedral(5))\n    print(nth_tetrahedral(6))\n    print(nth_tetrahedral(7))\n    print(nth_tetrahedral(8))\n    print(nth_tetrahedral(9))\n    print(nth_tetrahedral(10))\n    print(nth_tetrahedral(11))\n    print(nth_tetrahedral(12))\n    print(nth_tetrahedral(13))\n    print(nth_tetrahedral(14))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def nth_tetrahedron(n):\n    \"\"\"\n    nth_tetrahedron(n) -> int\n\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return (n*(3*n-1)/2 + n - 1)\n\nif __name__ == '__main__':\n    assert nth_tetrahedron(1) == 12\n    assert nth_tetrahedron(2) == 22\n    assert nth_tetrahedron(3) == 33\n    assert nth_tetrahedron(4) == 44\n    assert nth_tetrahedron(5) == 55\n    assert nth_tetrahedron(6) == 66\n    assert nth_tetrahedron(7) == 77\n    assert nth_tetrahedron(8) == 88\n    assert nth_tetrahedron(9) == 99\n    assert nth_tetrahedron(10) == 100\n    assert nth_tetrahedron(11) == 111\n    assert nth_tetrahedron(12) == 112\n    assert nth_tetrahedron(13) == 113\n    assert nth_tetrahedron(14) == 114\n    assert nth_tetrahedron(15) == 115\n    assert nth_tetrahedron(16) == 116\n    assert nth_tetrahedron(17) == 117\n    assert nth_tetrahedron(18) == 118\n    assert nth_tetrahedron(19) == 119\n    assert nth_tetrahedron(20) == 120\n    assert nth_tetrahedron(21) == 121\n    assert nth_tetrahedron(22) == 122\n    assert nth_tetrahedron(23) == 123\n    assert nth_tetrahedron(24) == 124\n    assert nth_tetrahedron(25) == 125\n    assert nth_tetrahedron(26) == 126\n    assert nth_tetrahedron(27) == 127\n    assert n"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "import timeit\n\n\nclass Solution(object):\n    def getTetrahedronNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = int(n)\n        if n <= 1:\n            return 1\n        return (n + 2) / 2\n\n\nif __name__ == '__main__':\n    start = timeit.default_timer()\n    test_cases = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6),\n        (6, 7),\n        (7, 8),\n        (8, 9),\n        (9, 10),\n        (10, 11),\n        (11, 12),\n        (12, 13),\n        (13, 14),\n        (14, 15),\n        (15, 16),\n        (16, 17),\n        (17, 18),\n        (18, 19),\n        (19, 20),\n        (20, 21),\n        (21, 22),\n        (22, 23),\n        (23, 24),\n        (24, 25),\n        (25, 26),\n        (26, 27),\n        (27, 28),\n        (28, 29),\n        (29, 30),\n        (30, 31),\n        (31, 32),\n        (32, 33),\n        (33, 34),\n        (34, 35),\n        (35, 36),\n        (36, 37),\n        (37, 38),\n        (38, 39),\n        (39, 40),\n        (40, 41),\n        (41, 42),\n        (42, 43),\n        (43, 44),\n        (44, 45),\n        (45, 46),\n        (46, 47),\n        (47, 48),\n        (48, 49),\n        (49, 50),\n        (50, 51),\n        (51, 52),\n        (52, 53),\n        (53, 54),\n        (54, 55),\n        (55, 56),\n        (56, 57),\n        (57, 58),\n        (58, 59),"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "from math import factorial\nimport timeit\n\n# This code is a simple implementation of the solution from\n# https://www.hackerrank.com/contests/tetrahedron-numbers/challenges/tetrahedron-numbers-and-the-solution/problem\n\n# This solution is not the most efficient. It creates a list of\n# numbers that can be sorted in increasing order.\n# This is not a problem for most people.\n\ndef tetrahedron_numbers(n):\n    numbers = [1, 1, 1, 2]\n    for i in range(1, n):\n        numbers += [1 + (2**(i + 1)) + (3**(i + 1)) - 1]\n    return numbers\n\ndef tetrahedron_numbers_solution(n):\n    numbers = [1, 1, 1, 2]\n    for i in range(1, n):\n        numbers += [1 + (2**(i + 1)) + (3**(i + 1)) - 1]\n    return numbers\n\n\nif __name__ == '__main__':\n    start_time = timeit.default_timer()\n\n    n = int(input())\n    print(tetrahedron_numbers(n))\n\n    print(\"Time elapsed: {}\".format(timeit.default_timer() - start_time))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def get_tetrahedron(n):\n    \"\"\"\n    Find the nth tetrahedron.\n    \"\"\"\n    tetrahedron = []\n    for i in range(0, n):\n        tetrahedron.append(i + 1)\n    tetrahedron.sort()\n    return tetrahedron[n - 1]\n\ndef main():\n    \"\"\"\n    Main.\n    \"\"\"\n    n = int(input())\n    tetrahedron = get_tetrahedron(n)\n    print(tetrahedron)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "import math\n\n\ndef get_tetrahedron(i):\n    \"\"\"\n    Return the nth tetrahedron number\n    \"\"\"\n    return math.factorial(i) / (4 * (i + 1))\n\n\ndef get_tetrahedron_number(n):\n    \"\"\"\n    Return the nth tetrahedron number\n    \"\"\"\n    return math.factorial(n) / (4 * (n + 1))\n\n\ndef main():\n    \"\"\"\n    Test the function\n    \"\"\"\n    for i in range(1, 10):\n        print(\"{0} = {1}\".format(get_tetrahedron(i), get_tetrahedron_number(i)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def get_tetrahedron_number(n):\n    \"\"\"\n    Input:\n        n: A positive integer\n    Output:\n        A tetrahedral number\n    \"\"\"\n    return (n*(n+1))/2\n\n\ndef main():\n    print(get_tetrahedron_number(1))\n    print(get_tetrahedron_number(2))\n    print(get_tetrahedron_number(3))\n    print(get_tetrahedron_number(4))\n    print(get_tetrahedron_number(5))\n    print(get_tetrahedron_number(6))\n    print(get_tetrahedron_number(7))\n    print(get_tetrahedron_number(8))\n    print(get_tetrahedron_number(9))\n    print(get_tetrahedron_number(10))\n    print(get_tetrahedron_number(11))\n    print(get_tetrahedron_number(12))\n    print(get_tetrahedron_number(13))\n    print(get_tetrahedron_number(14))\n    print(get_tetrahedron_number(15))\n    print(get_tetrahedron_number(16))\n    print(get_tetrahedron_number(17))\n    print(get_tetrahedron_number(18))\n    print(get_tetrahedron_number(19))\n    print(get_tetrahedron_number(20))\n    print(get_tetrahedron_number(21))\n    print(get_tetrahedron_number(22))\n    print(get_tetrahedron_number(23))\n    print(get_tetrahedron_number(24))\n    print(get_tetrahedron_number(25))\n    print(get_tetrahedron_number(26))\n    print(get_tetrahedron_number(27))\n    print(get_tetrahedron_number(28))\n    print("
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/tetrahedral\n\nfrom itertools import count\n\n\ndef tetrahedral_nth(n):\n    \"\"\"\n    nth tetrahedral number\n    :param n:\n    :return:\n    \"\"\"\n    return next(count(1, n))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(tetrahedral_nth(n))"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "def get_tetrahedron(n):\n    \"\"\"\n    Get the nth tetrahedral number.\n    \"\"\"\n    return sum(1 for i in range(1, n + 1) if i % 3 == 0)\n\n# Your Tensorflow code is here."
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "def get_tetrahedral_numbers(n):\n    \"\"\"\n    For a given n, return the nth tetrahedral number.\n\n    Example:\n    >>> get_tetrahedral_numbers(1)\n    1\n    >>> get_tetrahedral_numbers(5)\n    12\n    >>> get_tetrahedral_numbers(8)\n    168\n    >>> get_tetrahedral_numbers(10)\n    8128\n    \"\"\"\n    t = 1\n    for i in range(2, n+1):\n        t *= (n-i+1)//2\n    return t"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import math\n\n\ndef tetrahedron_n(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n\n    :param n: integer\n    :return: integer\n    \"\"\"\n    return math.factorial(4*n)/(2**(4*n) * math.factorial(n))\n\n\nif __name__ == '__main__':\n    print(tetrahedron_n(1))\n    print(tetrahedron_n(2))\n    print(tetrahedron_n(3))\n    print(tetrahedron_n(4))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef get_nth_tetrahedral_number(n):\n    \"\"\"\n    :param n: Integer, the nth tetrahedral number\n    :return: The nth tetrahedral number\n    \"\"\"\n    return factorial(n) / (factorial(n - 1) * factorial(n - 2) * factorial(n - 3))\n\n\nif __name__ == \"__main__\":\n    print(get_nth_tetrahedral_number(4))\n    print(get_nth_tetrahedral_number(5))\n    print(get_nth_tetrahedral_number(6))\n    print(get_nth_tetrahedral_number(7))\n    print(get_nth_tetrahedral_number(8))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef tetrahedron(n):\n    \"\"\"\n    n is a positive integer.\n    Return the nth tetrahedral number.\n    \"\"\"\n    tetrahedron_numbers = []\n    for i in range(0, n):\n        tetrahedron_numbers.append(tetrahedron(n-i-1))\n    return sum(tetrahedron_numbers)\n\ndef main():\n    \"\"\"\n    A test function.\n    \"\"\"\n    print(tetrahedron(100))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (3 * n - 1) / 2\n\n\nif __name__ == '__main__':\n    print(tetrahedral_number(4))\n    print(tetrahedral_number(5))\n    print(tetrahedral_number(6))\n    print(tetrahedral_number(7))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from math import factorial\n\ndef get_nth_tetrahedral(n):\n    \"\"\"\n    Write a function get_nth_tetrahedral that takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    return factorial(n) / (factorial(n - 1) * factorial(n - 2) * factorial(n - 3))\n\nprint(get_nth_tetrahedral(3))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from math import factorial\n\ndef get_nth_tetrahedral_number(n):\n    \"\"\"\n    Input:\n        n - the number to find.\n    Output:\n        The nth tetrahedral number.\n    Explanation:\n        A tetrahedron has 4 faces and each face has 4 vertices.\n        The number of tetrahedra can be found by adding the number of faces\n        to the number of vertices.\n        For example, the number of tetrahedra is 6 + 4 = 10.\n    \"\"\"\n    return get_nth_tetrahedral_number_recursive(n)\n\ndef get_nth_tetrahedral_number_recursive(n):\n    \"\"\"\n    Input:\n        n - the number to find.\n    Output:\n        The nth tetrahedral number.\n    Explanation:\n        The recursive function is based on the following equation:\n        (n + 1) * (n + 2) * (n + 3) / 6.\n        For example, the number of tetrahedra is 6 + 4 = 10.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return get_nth_tetrahedral_number_recursive(n - 1) * (n + 1) * (n + 2) / 6\n\ndef get_nth_tetrahedral_number_iterative(n):\n    \"\"\"\n    Input:\n        n - the number to find.\n    Output:\n        The nth tetrahedral number.\n    Explanation:\n        The iterative function is based on the following equation:\n        (n + 1) * (n + 2) * (n + 3) / 6.\n        For example, the number of tetrahedra is 6 + 4 = 10.\n    \"\"\"\n    # Iterative function:\n    # 1. Compute the number of tetrahedra\n    # 2. Add the number of tetrahedra to the result\n    # 3. Return the result\n    #\n    # Recursive function:\n    # 1. Compute the number of tetrahedra\n    # 2. Add the number of tetrahedra to the result"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def get_tetrahedron_nth(n):\n    return ((3 * n) - 1) * (3 * n - 2) / 2\n\n\ndef main():\n    n = input(\"Enter n: \")\n    print(get_tetrahedron_nth(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from utils import get_nth_tetrahedral_number\n\nif __name__ == '__main__':\n    print(get_nth_tetrahedral_number(5))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def tetrahedron_n(n):\n    return n * (n+1) / 2\n\n# Recursive solution\ndef recursive_tetrahedron_n(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 10\n    return recursive_tetrahedron_n(n-1) + recursive_tetrahedron_n(n-2)\n\n# Iterative solution\ndef iterative_tetrahedron_n(n):\n    return (n*(n+1))/2 + n*(n+2) / 2 + (n-1) * (n-2) / 2\n\n# Tried to solve this using a recursion/iteration approach, but it failed\n# due to an incorrect number of solutions\ndef main():\n    print(\"Recursive\")\n    print(recursive_tetrahedron_n(5))\n    print(\"Iterative\")\n    print(iterative_tetrahedron_n(5))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from utils.constants import N\n\n\ndef nth_tetrahedron(n):\n    \"\"\"\n    nth_tetrahedron(n) -> int\n\n    Input is an integer n, return the nth tetrahedron.\n    \"\"\"\n    if n < 1 or n > N:\n        return 0\n\n    def is_valid_tetrahedron(n, m):\n        if m % 2 == 0:\n            return n % 4 == 0\n\n        if m % 3 == 0:\n            return n % 5 == 0\n\n        return n % 6 == 0\n\n    def count_tetrahedron(n, m):\n        return (m + 1) * (m + 2) // 2\n\n    def count_tetrahedron_with_odd_n(n):\n        return count_tetrahedron(n, n + 1)\n\n    def count_tetrahedron_with_even_n(n):\n        return count_tetrahedron(n, n - 1)\n\n    def count_tetrahedron_with_odd_m(n, m):\n        return count_tetrahedron(n, m + 1)\n\n    def count_tetrahedron_with_even_m(n, m):\n        return count_tetrahedron(n, m - 1)\n\n    def count_tetrahedron_with_odd_n_and_even_m(n, m):\n        return count_tetrahedron_with_odd_n(n) + count_tetrahedron_with_even_m(n, m)\n\n    def count_tetrahedron_with_even_n_and_odd_m(n, m):\n        return count_tetrahedron_with_even_n(n) + count_tetrahedron_with_odd_m(n, m)\n\n    if is_valid_tetrahedron(n, 1):\n        return 1\n    elif is_valid_tetrahedron(n, 2):\n        return 2\n    elif is_valid_tetrahedron(n, 3):\n        return 3\n    el"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import time\n\n\ndef tetrahedron(n):\n    t = 0\n    for i in range(1, n+1):\n        t += i*(i-1)*(i-2)\n    return t\n\n\nif __name__ == '__main__':\n    start = time.time()\n    print(tetrahedron(10))\n    print(\"--- %s seconds ---\" % (time.time() - start))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def get_nth_tetrahedral(n):\n    \"\"\"\n    For example, given n = 6, return 9.\n    \"\"\"\n    return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    n = int(input())\n    print(get_nth_tetrahedral(n))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef tetrahedron_numbers(n):\n    \"\"\"\n    n: integer\n    returns: n-th tetrahedral number\n    \"\"\"\n    tetrahedron_numbers_ = []\n    for i in range(n + 1):\n        tetrahedron_numbers_.append(1)\n        for j in range(i + 1):\n            if i % j == 0:\n                tetrahedron_numbers_.append(i * j)\n                tetrahedron_numbers_.append(i * j + 1)\n                tetrahedron_numbers_.append(i * j + 2)\n    return sum(tetrahedron_numbers_)\n\n\ndef main():\n    \"\"\"\n    main\n    \"\"\"\n    print(tetrahedron_numbers(3))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (sqrt(5) + 1) * (n - 1) * (n + 1) / 2\n\nif __name__ == '__main__':\n    assert nth_tetrahedral(5) == 15"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from __future__ import annotations\n\n\ndef tetrahedron_number(n: int) -> int:\n    \"\"\"\n    nth tetrahedral number\n    :param n:\n    :return:\n    \"\"\"\n    return (\n        tetrahedron_number(n - 1) + 1\n        + (n % 4 == 0)\n        + (n % 4 == 1)\n        + (n % 4 == 2)\n        + (n % 4 == 3)\n    )\n\n\nif __name__ == \"__main__\":\n    print(tetrahedron_number(2))\n    print(tetrahedron_number(3))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from time import time\nfrom math import factorial\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(factorial(n) / (factorial(n - 1) * factorial(n - 2) * factorial(n - 3)))\n\n\nif __name__ == '__main__':\n    start = time()\n    print nth_tetrahedral_number(1000)\n    print time() - start"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "# Definition for a tetrahedron.\nclass Tetrahedron:\n    def __init__(self, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4):\n        self.x1 = x1\n        self.y1 = y1\n        self.z1 = z1\n        self.x2 = x2\n        self.y2 = y2\n        self.z2 = z2\n        self.x3 = x3\n        self.y3 = y3\n        self.z3 = z3\n        self.x4 = x4\n        self.y4 = y4\n        self.z4 = z4\n\n    def __str__(self):\n        return '{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}'.format(self.x1, self.y1, self.z1, self.x2, self.y2, self.z2, self.x3, self.y3, self.z3, self.x4, self.y4, self.z4)\n\ndef nth_tetrahedron(n):\n    \"\"\"\n    :type n: int\n    :rtype: Tetrahedron\n    \"\"\"\n    tetrahedrons = [\n        Tetrahedron(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),\n        Tetrahedron(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),\n        Tetrahedron(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),\n        Tetrahedron(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),\n        Tetrahedron(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),\n        Tetrahedron(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),\n        Tetrahedron(7, 8, 9"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef tetrahedron_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    :param n: the number to be calculated\n    :return: the nth tetrahedral number\n    \"\"\"\n    return sqrt(1 + 8 * n + 24 * n * n)\n\n\nif __name__ == '__main__':\n    assert tetrahedron_number(1) == 1, 'First tetrahedron number should be 1.'\n    assert tetrahedron_number(2) == 4, 'Second tetrahedron number should be 4.'\n    assert tetrahedron_number(3) == 9, 'Third tetrahedron number should be 9.'\n    assert tetrahedron_number(4) == 16, 'Fourth tetrahedron number should be 16.'\n    assert tetrahedron_number(5) == 25, 'Fifth tetrahedron number should be 25.'\n    assert tetrahedron_number(6) == 36, 'Sixth tetrahedron number should be 36.'\n    assert tetrahedron_number(7) == 49, 'Seventh tetrahedron number should be 49.'\n    assert tetrahedron_number(8) == 64, 'Eighth tetrahedron number should be 64.'\n    assert tetrahedron_number(9) == 81, 'Ninth tetrahedron number should be 81.'\n    assert tetrahedron_number(10) == 100, 'Tenth tetrahedron number should be 100.'"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import math\n\ndef get_tetrahedron(n):\n    n = int(n)\n    tetrahedron = 1\n    for i in range(n):\n        tetrahedron *= (n - i)\n    return tetrahedron\n\ndef tetrahedron_number(n):\n    return int(math.floor(math.sqrt(n)))\n\ndef main():\n    n = int(input())\n    tetrahedron = get_tetrahedron(n)\n    print(tetrahedron)\n    tetrahedron_number = tetrahedron_number(n)\n    print(tetrahedron_number)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_tetrahedron(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n + 1) / (math.factorial(n) * math.factorial(n - 1) * math.factorial(n - 2) * math.factorial(n - 3))\n\n\nif __name__ == '__main__':\n    print(find_tetrahedron(4))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from utils import *\n\ndef nth_tetrahedron(n):\n    \"\"\"\n    Returns the nth tetrahedron number.\n    \"\"\"\n    return nth_tetrahedron_recursive(n, 1)\n\ndef nth_tetrahedron_recursive(n, depth):\n    \"\"\"\n    Returns the nth tetrahedron number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 40\n    elif n == 4:\n        return 100\n    else:\n        if depth == 1:\n            return 4 * nth_tetrahedron_recursive(n - 1, 1)\n        else:\n            return 4 * nth_tetrahedron_recursive(n - 1, depth - 1) + 10 * nth_tetrahedron_recursive(n - 2, depth - 1) + 40 * nth_tetrahedron_recursive(n - 3, depth - 1)\n\nif __name__ == '__main__':\n    print nth_tetrahedron(5)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import time\nstart = time.time()\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    Input:\n        n: the number to find\n    Output:\n        the nth tetrahedral number\n    Explanation:\n        The nth tetrahedral number is the sum of the following numbers:\n        (1, 4, 7, 8, 9, 12, 14, 15, 16, 19, 21, 22, 23, 25, 26, 27, 28, 31, 32,\n        33, 34, 37, 38, 39, 40, 43, 44, 45, 46, 49, 50, 51, 52, 55, 56, 57, 58,\n        61, 62, 63, 64, 67, 68, 69, 70, 73, 74, 75, 76, 79, 80, 81, 82, 85, 86,\n        87, 88, 91, 92, 93, 94, 97, 98, 99, 100, 103, 104, 105, 106, 109, 110,\n        111, 112, 115, 116, 117, 118, 121, 122, 123, 124, 127, 128, 129, 130,\n        133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152,\n        153, 154, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 171, 172,\n        175, 176, 177, 178, 181, 182, 183, 184, 187, 188, 189, 190, 193, 194,\n        195, 196, 199, 200, 201, 202, 205, 206, 207, 208, 211, 212, 213, 214,\n        217, 218, 219, 220, 223, 224, 225, 226, 229, 230, 231, 232, 235, 236,\n        237, 238, 241, 242, 243, 244, 247, 248, 249, 250, 253, 254, 255, 256,\n        259, 260, 261, 262, 265, 266, 267, 268, 271, 272, 273, 274, 277, 278,\n        279, 280, 283, 284, 285, 286, 289, 290, 291, 292, 295, 296, 297, 298,\n        301, 302, 303, 304, 307, 308, 309"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def nth_tetrahedral(n):\n    \"\"\"\n    For example, the 4th tetrahedral number is 12.\n    \"\"\"\n\n    # Use the formula: nth_tetrahedral(n) = (n-1) * (n-2) / 2 + (n-3)\n    #\n    # We want to find the first 3 numbers that have a value of 12,\n    # so we need to find all of the numbers that have a value of 12 and\n    # then we can find the next 3 numbers that have a value of 12.\n    #\n    # We can do this by simply counting the numbers with a value of 12,\n    # and then we can find the next 3 numbers that have a value of 12.\n    #\n    # This can be done by using a counter to count the numbers with a value\n    # of 12, and then using a for loop to find the next 3 numbers that have a\n    # value of 12.\n    #\n    # For example, if the counter is 3, then the next 3 numbers are:\n    # 12, 15, 18.\n    #\n    # We can also do this by using a for loop to find the next 3 numbers\n    # that have a value of 12.\n    #\n    # The number of numbers that have a value of 12 is 3.\n    #\n    # We can then find the next 3 numbers by using a for loop to find the\n    # next 3 numbers that have a value of 12.\n    #\n    # The number of numbers that have a value of 12 is 3.\n    #\n    # We can then find the next 3 numbers by using a for loop to find the\n    # next 3 numbers that have a value of 12.\n    #\n    # The number of numbers that have a value of 12 is 3.\n    #\n    # We can then find the next 3 numbers by using a for loop to find the\n    # next 3 numbers that have a value of 12.\n    #\n    # The number of numbers that have a value of 12 is 3.\n    #\n    # We can then find the next 3 numbers by using a for loop to find the\n    # next 3 numbers that have a value of 12.\n    #\n    # The number of numbers that have a value of 12"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import math\nfrom itertools import count\n\n\ndef get_tetrahedron_numbers():\n    numbers = []\n    for i in range(1, 100):\n        numbers.append(int((math.factorial(i) * math.factorial(i - 1) *\n                            math.factorial(i - 2) * math.factorial(i - 3))\n                            / (math.factorial(i) * math.factorial(i + 1) *\n                               math.factorial(i + 2) * math.factorial(i + 3))))\n    return numbers\n\n\ndef get_tetrahedron_numbers_iter():\n    numbers = []\n    for i in count(1):\n        numbers.append(int((math.factorial(i) * math.factorial(i - 1) *\n                            math.factorial(i - 2) * math.factorial(i - 3))\n                            / (math.factorial(i) * math.factorial(i + 1) *\n                               math.factorial(i + 2) * math.factorial(i + 3))))\n    return numbers\n\n\ndef get_tetrahedron_numbers_list():\n    numbers = []\n    for i in range(1, 100):\n        numbers.append(int((math.factorial(i) * math.factorial(i - 1) *\n                            math.factorial(i - 2) * math.factorial(i - 3))\n                            / (math.factorial(i) * math.factorial(i + 1) *\n                               math.factorial(i + 2) * math.factorial(i + 3))))\n    return numbers\n\n\nif __name__ == '__main__':\n    tetrahedron_numbers = get_tetrahedron_numbers()\n    tetrahedron_numbers_iter = get_tetrahedron_numbers_iter()\n    tetrahedron_numbers_list = get_tetrahedron_numbers_list()\n    print(tetrahedron_numbers)\n    print(tetrahedron_numbers_iter)\n    print(tetrahed"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def nth_tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n = n + 1\n    return (n - 1) * (n - 2) * (n - 3) / 6\n\ndef main():\n    for i in range(1, 101):\n        print(nth_tetrahedral(i))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import math\n\ndef teth(n):\n    return math.factorial(3 * n + 1) / (math.factorial(3 * n) * math.factorial(n))\n\n# Your code here\nprint(teth(2))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def get_tetrahedron_numbers(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    tetrahedron_numbers = []\n    for i in range(1, n + 1):\n        tetrahedron_numbers.append(i * (i - 1) / 2)\n        tetrahedron_numbers.append(i * (i - 1) * (i - 2) / 6)\n        tetrahedron_numbers.append(i * (i - 1) * (i - 2) * (i - 3) / 24)\n    return tetrahedron_numbers\n\n\nif __name__ == '__main__':\n    n = int(input())\n    tetrahedron_numbers = get_tetrahedron_numbers(n)\n    print(tetrahedron_numbers)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef tetrahedron_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Tn = T4 * T5 * T6 * T7 * T8 * T9 * T10 * T11 * T12 * T13 * T14 * T15 * T16 * T17 * T18 * T19 * T20 * T21 * T22 * T23 * T24 * T25 * T26 * T27 * T28 * T29 * T30 * T31 * T32 * T33 * T34 * T35 * T36 * T37 * T38 * T39 * T40 * T41 * T42 * T43 * T44 * T45 * T46 * T47 * T48 * T49 * T50 * T51 * T52 * T53 * T54 * T55 * T56 * T57 * T58 * T59 * T60 * T61 * T62 * T63 * T64 * T65 * T66 * T67 * T68 * T69 * T70 * T71 * T72 * T73 * T74 * T75 * T76 * T77 * T78 * T79 * T80 * T81 * T82 * T83 * T84 * T85 * T86 * T87 * T88 * T89 * T90 * T91 * T92 * T93 * T94 * T95 * T96 * T97 * T98 * T99 * T100 * T101 * T102 * T103 * T104 * T105 * T106 * T107 * T108 * T109 * T110 * T111 * T112 * T113 * T114 * T115 * T116 * T117 * T118 * T119 * T120 * T121 * T122 * T123 * T124 * T125 * T126 * T127 * T128 * T129 * T130 * T131 * T132 * T133 * T134 * T135 * T136 * T137 * T138 * T139 * T140 * T141 * T142 * T143 * T144 * T145 * T146 * T147 * T148 * T149 * T150 * T151 * T152 * T153 * T154 * T155 * T156 * T157 * T158 * T159 * T160"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import os\nimport sys\n\nif __name__ == '__main__':\n    f = open(os.path.join(os.path.dirname(__file__), 'tetrahedron.txt'), 'r')\n    tetrahedron_numbers = [int(line.strip()) for line in f.readlines()]\n    f.close()\n    print(tetrahedron_numbers[int(sys.argv[1])])"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import math\n\ndef get_nth_tetrahedral_number(n):\n    \"\"\"\n    n is an integer between 1 and 100.\n    Return the nth tetrahedral number.\n    \"\"\"\n    return (1 + (5 * n - 1) ** 2 + n ** 2) ** (1.0 / 3)\n\ndef get_tetrahedral_numbers(n):\n    \"\"\"\n    n is an integer between 1 and 100.\n    Return a list of the nth tetrahedral numbers.\n    \"\"\"\n    return [get_nth_tetrahedral_number(i) for i in range(1, n + 1)]\n\nif __name__ == \"__main__\":\n    print(get_nth_tetrahedral_number(1))\n    print(get_nth_tetrahedral_number(2))\n    print(get_nth_tetrahedral_number(3))\n    print(get_nth_tetrahedral_number(4))\n    print(get_nth_tetrahedral_number(5))\n    print(get_nth_tetrahedral_number(6))\n    print(get_tetrahedral_numbers(1))\n    print(get_tetrahedral_numbers(2))\n    print(get_tetrahedral_numbers(3))\n    print(get_tetrahedral_numbers(4))\n    print(get_tetrahedral_numbers(5))\n    print(get_tetrahedral_numbers(6))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def nth_tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    tetrahedron_numbers = [1, 3, 6, 10, 15, 21, 28]\n    tetrahedron_numbers.sort()\n    return tetrahedron_numbers[n - 1]\n\nprint(nth_tetrahedral(10))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedron_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n) / (2 ** n)\n\n\nif __name__ == '__main__':\n    print(nth_tetrahedron_number(5))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef tetrahedral_nth(n):\n    \"\"\"\n    nth tetrahedral number\n    \"\"\"\n    n = int(n)\n    return (math.factorial(n) - (math.factorial(n-2) * math.factorial(n-1))) / math.factorial(n)\n\nif __name__ == '__main__':\n    print(tetrahedral_nth(1))\n    print(tetrahedral_nth(5))\n    print(tetrahedral_nth(10))\n    print(tetrahedral_nth(20))\n    print(tetrahedral_nth(100))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def get_nth_tetrahedron(n):\n    \"\"\"\n    For example, given n = 3, return 13.\n    \"\"\"\n    return sum(1 for x in range(1, n+1) if n % x == 0)\n\nif __name__ == '__main__':\n    print(get_nth_tetrahedron(3))\n    print(get_nth_tetrahedron(6))\n    print(get_nth_tetrahedron(100))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\ndef get_tetrahedron(n):\n    return 4*n*(n+1)/6\n\ndef is_tetrahedron(n):\n    return (get_tetrahedron(n) == n)\n\ndef is_tetrahedron_number(n):\n    return is_tetrahedron(n)\n\ndef is_tetrahedron_number_iter(n):\n    for i in range(n):\n        if not is_tetrahedron(i):\n            return False\n    return True\n\ndef get_tetrahedron_number(n):\n    return get_tetrahedron(n)\n\ndef get_tetrahedron_number_iter(n):\n    for i in range(n):\n        yield get_tetrahedron(i)\n\ndef main():\n    n = 100\n    for i in range(n):\n        if is_tetrahedron_number(i):\n            print(i)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def nth_tetrahedron(n):\n    return (n * (n + 1) * (2 * n + 1) // 6)\n\nif __name__ == '__main__':\n    print(nth_tetrahedron(1))\n    print(nth_tetrahedron(2))\n    print(nth_tetrahedron(3))\n    print(nth_tetrahedron(4))\n    print(nth_tetrahedron(5))\n    print(nth_tetrahedron(6))\n    print(nth_tetrahedron(7))\n    print(nth_tetrahedron(8))\n    print(nth_tetrahedron(9))\n    print(nth_tetrahedron(10))\n    print(nth_tetrahedron(100))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def get_tetrahedron_number(n):\n    \"\"\"\n    n: a positive integer\n    return: the nth tetrahedral number\n    \"\"\"\n    return sum([1 for i in range(n)])\n\nif __name__ == \"__main__\":\n    print get_tetrahedron_number(10)\n    print get_tetrahedron_number(100)\n    print get_tetrahedron_number(1000)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def tetrahedral_n(n):\n    \"\"\"\n    nth tetrahedral number\n    :param n:\n    :return:\n    \"\"\"\n    t = 0\n    while n > 0:\n        t += n % 10\n        n //= 10\n    return t\n\nif __name__ == '__main__':\n    import time\n\n    for i in range(1, 100):\n        start = time.time()\n        t = tetrahedral_n(i)\n        end = time.time()\n        print(t, i, end - start)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "import math\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n    \"\"\"\n    return math.factorial(n) / (4 * (n + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import math\n\ndef tetrahedral_number(n):\n    return math.factorial(n)/(4*n*(n-1)*(n-2))\n\nif __name__ == '__main__':\n    print(tetrahedral_number(4))\n    print(tetrahedral_number(5))\n    print(tetrahedral_number(6))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "from utils import *\n\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        tetrahedra = [1, 4, 6, 8, 12]\n        result = 0\n        for i in range(1, n + 1):\n            result = result + tetrahedra[i - 1] * pow(10, i)\n        return result\n\n\nif __name__ == '__main__':\n    print nth_tetrahedral(5)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "from math import factorial\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    nth_tetrahedral_number(n)\n\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return int(factorial(n) / (factorial(n-1) * factorial(n-2) * factorial(n-3)))\n\n\nif __name__ == '__main__':\n    assert nth_tetrahedral_number(1) == 30\n    assert nth_tetrahedral_number(2) == 85\n    assert nth_tetrahedral_number(3) == 265\n    assert nth_tetrahedral_number(4) == 1265\n    assert nth_tetrahedral_number(5) == 6145"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "from time import time\nfrom math import factorial\n\n\ndef get_nth_tetrahedron(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return factorial(n) / (factorial(n - 1) * factorial(n - 2) * factorial(n - 3))\n\n\nif __name__ == '__main__':\n    start = time()\n    print(get_nth_tetrahedron(6))\n    print(time() - start)"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getTetrahedronNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (n+1) * (2*n-1) // 6"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def nth_tetrahedral_number(n):\n    \"\"\"\n    nth_tetrahedral_number(n) -> int\n\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return pow(10, n - 1)\n\nif __name__ == '__main__':\n    print(nth_tetrahedral_number(5))\n    print(nth_tetrahedral_number(7))\n    print(nth_tetrahedral_number(10))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def getTetrahedralNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return (n - 1) * (n - 2) / 2 + n - 1\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(1, Solution().getTetrahedralNumber(1))\n        self.assertEqual(4, Solution().getTetrahedralNumber(4))\n        self.assertEqual(14, Solution().getTetrahedralNumber(14))\n        self.assertEqual(100, Solution().getTetrahedralNumber(100))\n        self.assertEqual(1000, Solution().getTetrahedralNumber(1000))\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from collections import Counter\nimport math\n\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n\n    Example 1:\n    nth_tetrahedral(1) = 12\n    Example 2:\n    nth_tetrahedral(2) = 28\n    Example 3:\n    nth_tetrahedral(3) = 56\n    Example 4:\n    nth_tetrahedral(4) = 84\n    Example 5:\n    nth_tetrahedral(5) = 120\n    Example 6:\n    nth_tetrahedral(6) = 168\n    Example 7:\n    nth_tetrahedral(7) = 280\n    Example 8:\n    nth_tetrahedral(8) = 336\n    Example 9:\n    nth_tetrahedral(9) = 360\n    Example 10:\n    nth_tetrahedral(10) = 396\n\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if n < 1:\n        return 0\n    if n == 1:\n        return 12\n    if n == 2:\n        return 28\n    if n == 3:\n        return 56\n    if n == 4:\n        return 84\n    if n == 5:\n        return 120\n    if n == 6:\n        return 168\n    if n == 7:\n        return 280\n    if n == 8:\n        return 336\n    if n == 9:\n        return 360\n    if n == 10:\n        return 396\n    return nth_tetrahedral(n-1) + nth_tetrahedral(n-2)\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedral(7))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def getNthTetrahedralNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # n is 1-indexed\n        n = n - 1\n        # the first two numbers are always 3\n        return 3 * n + 2\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.getNthTetrahedralNumber(1))\n    print(sol.getNthTetrahedralNumber(2))\n    print(sol.getNthTetrahedralNumber(3))\n    print(sol.getNthTetrahedralNumber(4))\n    print(sol.getNthTetrahedralNumber(5))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def getNthTetrahedron(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def get_nth_tetrahedron(n):\n            if n == 0:\n                return 1\n            elif n == 1:\n                return 3\n            elif n % 2 == 0:\n                return get_nth_tetrahedron(n / 2) + get_nth_tetrahedron(n / 2)\n            else:\n                return get_nth_tetrahedron(n / 2) + get_nth_tetrahedron(n / 2 - 1)\n        return get_nth_tetrahedron(n)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0 or n > 10:\n        return None\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(nth_tetrahedral(0), 1)\n        self.assertEqual(nth_tetrahedral(1), 4)\n        self.assertEqual(nth_tetrahedral(2), 7)\n        self.assertEqual(nth_tetrahedral(3), 12)\n        self.assertEqual(nth_tetrahedral(4), 20)\n        self.assertEqual(nth_tetrahedral(5), 28)\n        self.assertEqual(nth_tetrahedral(6), 36)\n        self.assertEqual(nth_tetrahedral(7), 40)\n        self.assertEqual(nth_tetrahedral(8), 48)\n        self.assertEqual(nth_tetrahedral(9), 56)\n        self.assertEqual(nth_tetrahedral(10), 64)\n        self.assertEqual(nth_tetrahedral(11), 72)\n        self.assertEqual(nth_tetrahedral(12), 80)\n        self.assertEqual(nth_tetrahedral(13), 88)\n        self.assertEqual(nth_tetrahedral(14), 96)\n        self.assertEqual(nth_tetrahedral(15), 104)\n        self.assertEqual(nth_tetrahedral(16), 112)\n        self.assertEqual(nth_tetrahedral(17), 120)\n        self.assertEqual(nth_tetrahedral(18), 128)\n        self.assertEqual(nth_tetrahedral(19), 136)\n        self.assertEqual(nth_tetrahedral("
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def getNthTetrahedronNumber(self, n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 4\n        if n == 2:\n            return 6\n        if n == 3:\n            return 8\n        if n == 4:\n            return 10\n        if n == 5:\n            return 12\n        if n == 6:\n            return 14\n        if n == 7:\n            return 16\n        if n == 8:\n            return 18\n        if n == 9:\n            return 20\n        if n == 10:\n            return 22\n        if n == 11:\n            return 24\n        if n == 12:\n            return 26\n        if n == 13:\n            return 28\n        if n == 14:\n            return 30\n        if n == 15:\n            return 32\n        if n == 16:\n            return 34\n        if n == 17:\n            return 36\n        if n == 18:\n            return 38\n        if n == 19:\n            return 40\n        if n == 20:\n            return 42\n        if n == 21:\n            return 44\n        if n == 22:\n            return 46\n        if n == 23:\n            return 48\n        if n == 24:\n            return 50\n        if n == 25:\n            return 52\n        if n == 26:\n            return 54\n        if n == 27:\n            return 56\n        if n == 28:\n            return 58\n        if n == 29:\n            return 60\n        if n == 30:\n            return 62\n        if n == 31:\n            return 64\n        if n == 32:\n            return 66\n        if n == 33:\n            return 68\n        if n == 34:\n            return 70\n        if n == 35:\n            return 72\n        if n == 36:\n            return 74\n        if n == 37:\n            return 76\n        if n == 38:\n            return 78\n        if n == 39:\n            return 80\n        if n == 40:\n            return 82\n        if n == 41:\n            return 84\n        if n == 42:\n            return 86"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import math\nfrom collections import namedtuple\n\nTetrahedron = namedtuple(\"Tetrahedron\", \"n1 n2 n3 n4\")\n\n\ndef tetrahedron_numbers(n):\n    \"\"\"\n    Return the nth tetrahedron number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    return math.factorial(n) / (4 * math.factorial(n - 1) * math.factorial(n - 2) * math.factorial(n - 3))\n\n\ndef main():\n    \"\"\"\n    Try to solve the problem!\n    \"\"\"\n    tetrahedron_numbers(3)\n    tetrahedron_numbers(4)\n    tetrahedron_numbers(5)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def tetra_n(n):\n    \"\"\"\n    Input: n\n    Output: the nth tetrahedral number\n    \"\"\"\n    # the formula is:\n    # nth tetrahedral number
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def getNthTetrahedronNumber(self, n):\n        n = int(n)\n        a = 2\n        b = 3\n        c = 4\n        d = 5\n        e = 6\n        f = 7\n        g = 8\n        h = 9\n        i = 10\n        j = 11\n        k = 12\n        l = 13\n        m = 14\n        n = 15\n        o = 16\n        p = 17\n        q = 18\n        r = 19\n        s = 20\n        t = 21\n        u = 22\n        v = 23\n        w = 24\n        x = 25\n        y = 26\n        z = 27\n\n        def nthTetrahedronNumber(n):\n            if n <= 1:\n                return 1\n            else:\n                if n % 2 == 0:\n                    return nthTetrahedronNumber(n / 2) * (n - 1)\n                else:\n                    return nthTetrahedronNumber(n - 1) * (n + 1)\n        return nthTetrahedronNumber(n)\n\n\nif __name__ == \"__main__\":\n    assert Solution().getNthTetrahedronNumber(1) == 1\n    assert Solution().getNthTetrahedronNumber(2) == 6\n    assert Solution().getNthTetrahedronNumber(3) == 15\n    assert Solution().getNthTetrahedronNumber(4) == 40\n    assert Solution().getNthTetrahedronNumber(5) == 120\n    assert Solution().getNthTetrahedronNumber(6) == 720\n    assert Solution().getNthTetrahedronNumber(7) == 5040\n    assert Solution().getNthTetrahedronNumber(8) == 40320\n    assert Solution().getNthTetrahedronNumber(9) == 362880\n    assert Solution().getNthTetrahedronNumber(10) == 3628800\n    assert Solution().getNthTetrahedronNumber(11) == 39916800\n    assert Solution().getNth"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def getNthTetrahedronNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return (n*(n+1)/2 + n*(n+1)/2 - n*(n+1)*(n+1)/6)%(10**9+7)\n\nif __name__ == '__main__':\n    assert Solution().getNthTetrahedronNumber(1) == 4\n    assert Solution().getNthTetrahedronNumber(2) == 5\n    assert Solution().getNthTetrahedronNumber(3) == 6\n    assert Solution().getNthTetrahedronNumber(4) == 7\n    assert Solution().getNthTetrahedronNumber(5) == 8\n    assert Solution().getNthTetrahedronNumber(6) == 9\n    assert Solution().getNthTetrahedronNumber(7) == 10\n    assert Solution().getNthTetrahedronNumber(8) == 11\n    assert Solution().getNthTetrahedronNumber(9) == 12\n    assert Solution().getNthTetrahedronNumber(10) == 13\n    assert Solution().getNthTetrahedronNumber(11) == 14\n    assert Solution().getNthTetrahedronNumber(12) == 15\n    assert Solution().getNthTetrahedronNumber(13) == 16\n    assert Solution().getNthTetrahedronNumber(14) == 17\n    assert Solution().getNthTetrahedronNumber(15) == 18\n    assert Solution().getNthTetrahedronNumber(16) == 19\n    assert Solution().getNthTetrahedronNumber(17) == 20\n    assert Solution().getNthTetrahedronNumber(18) == 21\n    assert Solution().getNthTetrahedronNumber(19) == 22\n    assert Solution().getNthTetrahedronNumber(20) == 23\n    assert Solution().getNthTetrahedronNumber(21) == 24"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from utils import nth_tetrahedron, get_tetrahedra\nfrom utils import get_triangles, get_tetrahedra_from_triangles\nfrom utils import get_tetrahedra_from_triangles_with_edges\n\n\ndef nth_tetrahedron_count(n):\n    \"\"\"\n    Return the number of nth tetrahedron.\n\n    Example:\n        >>> nth_tetrahedron_count(3)\n        5\n        >>> nth_tetrahedron_count(4)\n        11\n    \"\"\"\n    return sum(1 for t in get_tetrahedra(n))\n\n\ndef tetrahedron_count(n):\n    \"\"\"\n    Return the number of tetrahedrons.\n\n    Example:\n        >>> tetrahedron_count(3)\n        5\n        >>> tetrahedron_count(4)\n        11\n    \"\"\"\n    return sum(1 for t in get_tetrahedra(n))\n\n\ndef get_tetrahedron_count(n):\n    \"\"\"\n    Return the number of tetrahedrons.\n\n    Example:\n        >>> get_tetrahedron_count(3)\n        5\n        >>> get_tetrahedron_count(4)\n        11\n    \"\"\"\n    return sum(1 for t in get_tetrahedra(n))\n\n\ndef get_tetrahedron_count_from_triangles(triangles):\n    \"\"\"\n    Return the number of tetrahedrons.\n\n    Example:\n        >>> get_tetrahedron_count_from_triangles(get_triangles())\n        5\n        >>> get_tetrahedron_count_from_triangles(get_triangles_with_edges())\n        11\n    \"\"\"\n    return sum(1 for t in get_tetrahedra_from_triangles(triangles))\n\n\ndef get_tetrahedron_count_from_triangles_with_edges(triangles):\n    \"\"\"\n    Return the number of tetrahedrons.\n\n    Example:\n        >>> get_tetrahedron"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def nth_tetrahedron(n):\n    \"\"\"\n    nth_tetrahedron(n) -> int\n    \n    Returns the nth tetrahedral number.\n    \n    Example 1:\n        \n    Input: 4\n    Output: 6\n    Explanation: \n        The 4th tetrahedron is the hexahedron with the vertices\n        (-1, -1, -1), (0, -1, -1), (1, -1, -1), (-1, 0, -1), (0, 1, -1),\n        (1, 1, -1), (-1, -1, 0), (0, -1, 1), (1, -1, 1), (-1, 0, 1), \n        (0, 1, 1), (1, 1, 1)\n    Note:\n        0 <= n <= 100\n    \"\"\"\n    \n    n = n % 100\n    n = n - 1\n    n = n / 4\n    n = n + 1\n    \n    return n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedron(4))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def get_tetrahedron_number(n):\n    \"\"\"\n    Write a function that returns the nth tetrahedral number.\n    \"\"\"\n\ndef get_tetrahedron_number_2(n):\n    \"\"\"\n    Write a function that returns the nth tetrahedral number.\n    \"\"\"\n\ndef main():\n    \"\"\"\n    Run the main program.\n    \"\"\"\n    #print(get_tetrahedron_number(1))\n    #print(get_tetrahedron_number(2))\n    #print(get_tetrahedron_number_2(1))\n    #print(get_tetrahedron_number_2(2))\n    #print(get_tetrahedron_number_2(3))\n    #print(get_tetrahedron_number_2(4))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\nclass Solution(object):\n    def getTetrahedronNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.getTetrahedronNumber_recursive(n)\n\n    def getTetrahedronNumber_recursive(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 4\n        elif n == 3:\n            return 6\n        elif n == 4:\n            return 8\n        elif n == 5:\n            return 10\n        elif n == 6:\n            return 12\n        elif n == 7:\n            return 14\n        elif n == 8:\n            return 16\n        elif n == 9:\n            return 18\n        elif n == 10:\n            return 20\n        elif n == 11:\n            return 22\n        else:\n            return self.getTetrahedronNumber_recursive(n - 1) * self.getTetrahedronNumber_recursive(n - 2) * self.getTetrahedronNumber_recursive(n - 3)\n\n\nclass Solution2(object):\n    def getTetrahedronNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.getTetrahedronNumber_recursive(n)\n\n    def getTetrahedronNumber_recursive(self, n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 4\n        elif n == 3:\n            return 6\n        elif n == 4:\n            return 8\n        elif n == 5:\n            return 10\n        elif n == 6:\n            return 12\n        elif n == 7:\n            return 14\n        elif n == 8:\n            return 16\n        elif n == 9:\n            return 18\n        elif n == 10:\n            return 20\n        elif n == 11:\n            return 22\n        else:\n            return self"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "import math\n\ndef get_tetrahedral_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2) * math.factorial(n-3))\n\nif __name__ == \"__main__\":\n    print get_tetrahedral_number(1)\n    print get_tetrahedral_number(2)\n    print get_tetrahedral_number(3)\n    print get_tetrahedral_number(4)\n    print get_tetrahedral_number(5)\n    print get_tetrahedral_number(6)\n    print get_tetrahedral_number(7)\n    print get_tetrahedral_number(8)\n    print get_tetrahedral_number(9)\n    print get_tetrahedral_number(10)\n    print get_tetrahedral_number(11)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import timeit\n\n\nclass Solution(object):\n    def getTetrahedralNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.tetrahedral_number(n)\n\n    @staticmethod\n    def tetrahedral_number(n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    @staticmethod\n    def time_taken(setup, func, number=1000):\n        t1 = timeit.Timer(setup)\n        count = 0\n        for x in range(number):\n            count += t1.timeit(setup)\n        return count / number\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.time_taken(\"def getTetrahedralNumber(n):\", \"s = Solution()\"))\n    print(s.tetrahedral_number(1))\n    print(s.tetrahedral_number(2))\n    print(s.tetrahedral_number(3))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def nth_tetrahedral_number(n):\n    \"\"\"\n    nth tetrahedral number\n    :param n:\n    :return:\n    \"\"\"\n    if n < 1 or n > 100000:\n        return -1\n    n = n - 1\n    tetrahedron_numbers = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360, 375, 390, 405, 420, 435, 450, 465, 480, 495, 510, 525, 540, 555, 570, 585, 600, 615, 630, 645, 660, 675, 690, 705, 720, 735, 750, 765, 780, 795, 810, 825, 840, 855, 870, 885, 900, 915, 930, 945, 960, 975, 990, 1005, 1020, 1035, 1050, 1065, 1080, 1095, 1110, 1125, 1140, 1155, 1170, 1185, 1200, 1215, 1230, 1245, 1260, 1275, 1290, 1305, 1320, 1335, 1350, 1365, 1380, 1395, 1410, 1425, 1440, 1455, 1470, 1485, 1500, 1515, 1530, 1545, 1560, 1575, 1590, 1605, 1620, 1635, 1650, 1665, 1680, 1695, 1710, 1725, 1740, 1755, 1770, 1785, 1800, 1815, 1830, 1845, 1860, 1875, 1890, 1905, 1920, 1925, 1940, 1955, 1970, 1985, 2000, 2015, 2030, 2045, 2060, 2075, 2090, 2105, 2120, 2135, 2150, 2165, 2180, 2195, 2210, 2225, 2240, 2255, 2270, 2285, 2300, 2315, 2330, 2345, 2360, 2375, 2390, 2405, 2420, 2435"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def get_tetrahedron_number(n):\n    if n < 1:\n        raise ValueError('Value of n must be a positive integer.')\n\n    tetrahedron_numbers = [\n        1,\n        2,\n        6,\n        24,\n        120,\n        720,\n        5040,\n        40320,\n        362880,\n        3628800,\n        39916800,\n        479001600,\n        6227020800,\n        87178291200,\n        13076743680000,\n        209227898880000,\n        35568742809600000,\n        640237370572800000,\n        121645100408832000,\n        2432902008176640000,\n        51090942171709440000,\n        1124000727777607680000,\n        25852016738884976640000,\n        620448401733239439360000,\n        15511210043330985984000000,\n        403291461126605635584000000,\n        10888869450418352160768000000,\n        304888344611713860501504000000,\n        8841761993739701954543616000000,\n        265252859812191058636308480000000,\n        822283865417792281772555296000000,\n        26313083693369353016721801376000000,\n        86833176188118864955180193360000000,\n        295232823651334381216917966896000000,\n        8792416938282169414275008540960000000,\n        3197715607874015803870648054400000000,\n        887393793814339445657079112512000000,\n        365427179718021879768186005635584000000,\n        11998881953125607529369713894400000000,\n        4718689254597001236018066141736416000000,\n        1759970644462956606099459782754368000000,\n        655547380756843629738"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Solution:\n    # @return an integer\n    def getTetrahedron(self, n):\n        if n == 1: return 1\n        if n == 2: return 4\n        if n == 3: return 27\n        if n == 4: return 64\n        if n == 5: return 125\n        if n == 6: return 216\n        if n == 7: return 343\n        if n == 8: return 512\n        if n == 9: return 729\n        if n == 10: return 1000\n        if n == 11: return 1365\n        if n == 12: return 1729\n        if n == 13: return 2187\n        if n == 14: return 2881\n        if n == 15: return 3655\n        if n == 16: return 4465\n        if n == 17: return 5315\n        if n == 18: return 6145\n        if n == 19: return 7085\n        if n == 20: return 8785\n        if n == 21: return 10585\n        if n == 22: return 12365\n        if n == 23: return 14185\n        if n == 24: return 16385\n        if n == 25: return 18605\n        if n == 26: return 20985\n        if n == 27: return 23185\n        if n == 28: return 25685\n        if n == 29: return 28185\n        if n == 30: return 30615\n        if n == 31: return 33165\n        if n == 32: return 35145\n        if n == 33: return 37105\n        if n == 34: return 39885\n        if n == 35: return 42805\n        if n == 36: return 45585\n        if n == 37: return 48285\n        if n == 38: return 50985\n        if n == 39: return 53085\n        if n == 40: return 56185\n        if n == 41: return 58975\n        if n == 42: return 61585\n        if n == 43: return 64285\n        if n == 44: return 66705\n        if n == 45: return 69845\n        if n == 46: return 72945\n        if n == 47: return 75945\n        if n == 48: return 78985\n        if n == 49: return 82985"
    }
  ]
}