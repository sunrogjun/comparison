{
  "timestamp": "2025-09-14T20:48:19.111297",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 463,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\n\"\"\"\nThis is a sample script to replace all the vowels with consonants.\nInput: string s = \"hello\"\nOutput: string s = \"holc\"\n\"\"\"\n\ndef replace_vowels(s):\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    return ''.join(ch for ch in s if ch not in vowels)\n\nif __name__ == \"__main__\":\n    s = input()\n    print(replace_vowels(s))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return \"\"\n        if len(oldChar) == 0:\n            return s\n        if len(newChar) == 0:\n            return s\n        return s.replace(oldChar, newChar)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceChar(\"aabcc\", \"a\", \"b\")"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param str, a string\n    # @param from, a character\n    # @param to, a character\n    # @return a string\n\n    def replace(self, str, from, to):\n        if len(str) == 0:\n            return str\n        if len(from) == 1 and len(to) == 1:\n            return str.replace(from, to)\n        if len(from) == 1:\n            return str.replace(from, to)\n        if len(to) == 1:\n            return str.replace(from, to)\n        #print(str)\n        ret = []\n        for i in range(len(str)):\n            if str[i] == from:\n                ret.append(to)\n            else:\n                ret.append(str[i])\n        return ''.join(ret)\n\n\nif __name__ == \"__main__\":\n    print(Solution().replace(\"pwwkew\", \"a\", \"b\"))\n    print(Solution().replace(\"aba\", \"a\", \"b\"))\n    print(Solution().replace(\"pwwkew\", \"p\", \"a\"))\n    print(Solution().replace(\"aba\", \"a\", \"a\"))\n    print(Solution().replace(\"pwwkew\", \"p\", \"a\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceCharacters(self, s, chars):\n        \"\"\"\n        :type s: str\n        :type chars: List[str]\n        :rtype: str\n        \"\"\"\n        result = []\n        for c in s:\n            if c in chars:\n                result.append(chars[c])\n            else:\n                result.append(c)\n        return ''.join(result)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: int\n        :type newChar: int\n        :rtype: str\n        \"\"\"\n        if oldChar not in s:\n            return s\n        return s.replace(oldChar, newChar)\n\n    def replaceChar2(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: int\n        :type newChar: int\n        :rtype: str\n        \"\"\"\n        if oldChar not in s:\n            return s\n        return s.replace(oldChar, newChar)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        for index in range(len(s)):\n            if s[index] == oldChar:\n                s[index] = newChar\n        return s\n\n    def replaceChar1(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        newStr = []\n        for index, char in enumerate(s):\n            if char == oldChar:\n                newStr.append(newChar)\n            else:\n                newStr.append(char)\n        return ''.join(newStr)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    string: A string.\n    old_char: The old character.\n    new_char: The new character.\n    return: A new string with the characters replaced.\n    \"\"\"\n    return \"\".join(c if c!= old_char else new_char for c in string)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = \"Hello World!\"\n    print(replace_char(string, \"e\", \"o\"))\n    print(replace_char(string, \"e\", \"o\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def replace(string, old, new):\n    return string.replace(old, new)\n\ndef main():\n    s = \"Hello World!\"\n    print(s)\n    print(replace(s, 'o', '0'))\n    print(replace(s, 'o', '0'))\n    print(replace(s, 'o', '0'))\n    print(replace(s, 'o', '0'))\n    print(replace(s, 'o', '0'))\n    print(replace(s, 'o', '0'))\n    print(replace(s, 'o', '0'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @param oldchars, a string of old chars\n    # @param newchar, a string of new chars\n    # @return a string\n    def replace(self, s, oldchars, newchars):\n        if not s:\n            return s\n\n        res = ''\n        for ch in s:\n            if ch in oldchars:\n                res += newchars[ord(ch)-ord(oldchars[0])]\n            else:\n                res += ch\n        return res\n\n    # @param s, a string\n    # @param oldchars, a string of old chars\n    # @param newchars, a string of new chars\n    # @return a string\n    def replace_all(self, s, oldchars, newchars):\n        if not s:\n            return s\n\n        res = ''\n        for ch in s:\n            if ch in oldchars:\n                res += newchars[ord(ch)-ord(oldchars[0])]\n            else:\n                res += ch\n        return res"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def replace(s, old, new):\n    \"\"\"\n    :type s: str\n    :type old: str\n    :type new: str\n    :rtype: str\n    \"\"\"\n    return s.replace(old, new)\n\nclass Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        return s.replace(old, new)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        return s.replace(old, new)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceChar('hello', 'o', 'X')\n    print s.replaceChar('hello', 'o', 'X')\n    print s.replaceChar('hello', 'o', 'x')"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceCharacters(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        chars = list(charsToReplace)\n        for i, c in enumerate(s):\n            if c in chars:\n                chars[chars.index(c)] = charsToInsert\n            else:\n                chars.append(c)\n        return ''.join(chars)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return \"\"\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == oldChar:\n                s[i] = newChar\n        return \"\".join(s)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldStr, newStr):\n        \"\"\"\n        :type s: str\n        :type oldStr: str\n        :type newStr: str\n        :rtype: str\n        \"\"\"\n        if len(oldStr) > len(s):\n            return s\n        for i in range(len(s)):\n            if s[i] == oldStr:\n                s[i] = newStr\n        return s\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceChar('abcd', 'a', 'b'))\n    print(s.replaceChar('abcd', 'b', 'a'))\n    print(s.replaceChar('abcd', 'a', 'b'))\n    print(s.replaceChar('abcd', 'c', 'a'))\n    print(s.replaceChar('abcd', 'a', 'c'))\n    print(s.replaceChar('abcd', 'c', 'b'))\n    print(s.replaceChar('abcd', 'b', 'c'))\n    print(s.replaceChar('abcd', 'b', 'a'))\n    print(s.replaceChar('abcd', 'a', 'b'))\n    print(s.replaceChar('abcd', 'd', 'c'))\n    print(s.replaceChar('abcd', 'c', 'd'))\n    print(s.replaceChar('abcd', 'a', 'b'))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        # https://leetcode.com/problems/replace-char/discuss/81680/Python-DP-solution-with-explanation\n        if not s:\n            return ''\n\n        s_len = len(s)\n        m = s_len - 1\n        while m >= 0:\n            if s[m] == oldChar:\n                s[m] = newChar\n                m -= 1\n                continue\n            m -= 1\n\n        return s"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def replace_chars(string, chars_to_replace):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    :type string: str\n    :type chars_to_replace: str\n    :rtype: str\n    \"\"\"\n    for c in chars_to_replace:\n        string = string.replace(c,'')\n    return string\n\nif __name__ == \"__main__\":\n    string = 'This is a string'\n    chars_to_replace = 'a'\n    print replace_chars(string, chars_to_replace)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceCharacters(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        if len(charsToReplace)!= len(charsToInsert):\n            raise ValueError(\"charsToReplace and charsToInsert must be of same length\")\n        if len(charsToReplace) == 0:\n            return s\n        if len(s) == 0:\n            return s\n        index = 0\n        for i in range(len(s)):\n            if s[i] == charsToReplace[index]:\n                s[i] = charsToInsert[index]\n                index += 1\n                if index == len(charsToReplace):\n                    index = 0\n            else:\n                index += 1\n                if index == len(charsToReplace):\n                    index = 0\n        return s\n\n\nif __name__ == \"__main__\":\n    print Solution().replaceCharacters(\"aaabbb\", \"a\", \"a\")\n    print Solution().replaceCharacters(\"aaabbb\", \"a\", \"b\")\n    print Solution().replaceCharacters(\"aaabbb\", \"a\", \"ab\")\n    print Solution().replaceCharacters(\"aaabbb\", \"a\", \"bb\")\n    print Solution().replaceCharacters(\"aaabbb\", \"a\", \"bac\")\n    print Solution().replaceCharacters(\"aaabbb\", \"a\", \"babc\")"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "class Solution:\n    # @return a string\n    def replace(self, s, old, new):\n        return s.replace(old, new)\n\nif __name__ == '__main__':\n    print Solution().replace('hello', 'll', 'l')\n    print Solution().replace('hello', 'll', 'l')\n    print Solution().replace('hello', 'll', 'l')\n    print Solution().replace('hello', 'll', 'l')"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# https://www.codeeval.com/open_challenges/102/\ndef replace(s, old_str, new_str):\n  return s.replace(old_str, new_str)\n\nif __name__ == '__main__':\n  tests = [\n    ('abcd', 'bdcd', 'abcd'),\n    ('abc', 'bcd', 'abc'),\n    ('ab', 'bcd', 'ab'),\n    ('abcde', 'bcd', 'abcde'),\n    ('abcdef', 'bcd', 'abcdef'),\n    ('abcdefg', 'bcd', 'abcdefg'),\n    ('abcdefgh', 'bcd', 'abcdefgh'),\n    ('abcdefghi', 'bcd', 'abcdefghi'),\n    ('abcdefghij', 'bcd', 'abcdefghij'),\n    ('abcdefghijkl', 'bcd', 'abcdefghijkl'),\n    ('abcdefghijklm', 'bcd', 'abcdefghijklm'),\n    ('abcdefghijklmn', 'bcd', 'abcdefghijklmn'),\n    ('abcdefghijklmnop', 'bcd', 'abcdefghijklmnop'),\n    ('abcdefghijklmnopq', 'bcd', 'abcdefghijklmnopq'),\n    ('abcdefghijklmnopqr', 'bcd', 'abcdefghijklmnopqr'),\n    ('abcdefghijklmnopqrs', 'bcd', 'abcdefghijklmnopqrs'),\n    ('abcdefghijklmnopqrst', 'bcd', 'abcdefghijklmnopqrst'),\n    ('abcdefghijklmnopqrstu', 'bcd', 'abcdefghijklmnopqrstu'),\n    ('abcdefghijklmnopqrstuv', 'bcd', 'abcdefghijklmnopqrstuv'),\n    ('abcdefghijklmnopqrstuvw', 'bcd', 'abcdefghijklmnopqrstuvw'),\n    ('abcdefghijklmnopqrstuvwx',"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if len(old) == 1 and len(new) == 1:\n            return s.replace(old, new)\n        if len(new) > len(old):\n            return self.replaceChar(s, new, old)\n        return self.replaceChar(s, old, new)\n\n    def replaceChar(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        if s[0] == old:\n            return s[1:] + new\n        if s[-1] == old:\n            return new + s[:-1]\n        return s[0:len(s) - 1] + new + s[len(s) - 1]"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import string\n\ndef replace_char(s, old_char, new_char):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    :param s: string\n    :param old_char: character to replace\n    :param new_char: character to replace with\n    :return: string\n    \"\"\"\n    return s.replace(old_char, new_char)\n\ndef replace_char_with_lower(s, old_char, new_char):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    :param s: string\n    :param old_char: character to replace\n    :param new_char: character to replace with\n    :return: string\n    \"\"\"\n    return s.replace(old_char, new_char.lower())\n\ndef replace_char_with_upper(s, old_char, new_char):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    :param s: string\n    :param old_char: character to replace\n    :param new_char: character to replace with\n    :return: string\n    \"\"\"\n    return s.replace(old_char, new_char.upper())\n\ndef replace_char_with_digit(s, old_char, new_char):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    :param s: string\n    :param old_char: character to replace\n    :param new_char: character to replace with\n    :return: string\n    \"\"\"\n    return s.replace(old_char, new_char.isdigit() and new_char or'')\n\ndef replace_char_with_space(s, old_char, new_char):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    :param s: string\n    :param old_char: character to replace\n    :param new_char: character to replace with\n    :return: string\n    \"\"\"\n    return s.replace(old_char, new_char and new_char or'')\n\ndef replace_char_with_space_with_lower(s, old_char, new_char):\n    \"\"\"\n    Write a function to replace characters in a string."
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        return s.replace(old, new)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        if oldChar not in s:\n            return s\n        if newChar not in s:\n            return s\n        return s.replace(oldChar, newChar)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return s\n        if len(s) == 1:\n            return s.replace(oldChar, newChar)\n        if oldChar == newChar:\n            return s\n        return s.replace(oldChar, newChar)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceChar(\"a\", \"b\", \"c\")\n    print s.replaceChar(\"abcd\", \"a\", \"c\")\n    print s.replaceChar(\"abcd\", \"d\", \"c\")\n    print s.replaceChar(\"abcde\", \"c\", \"d\")\n    print s.replaceChar(\"abcde\", \"e\", \"d\")"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    :type string: str\n    :type old_char: str\n    :type new_char: str\n    :rtype: str\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n\ndef main():\n    string = \"aabbcc\"\n    print(\"Original string: {}\".format(string))\n    print(\"Replace character: {}\".format(replace_char(string, \"a\", \"b\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"b\", \"c\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"c\", \"d\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"d\", \"e\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"e\", \"f\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"f\", \"g\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"g\", \"h\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"h\", \"i\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"i\", \"j\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"j\", \"k\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"k\", \"l\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"l\", \"m\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"m\", \"n\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"n\", \"o\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"o\", \"p\")))\n    print(\"Replace character: {}\".format(replace_char(string, \"p\", \"q\")))\n    print(\"Replace character: {}\".format(replace_char("
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldch, newch):\n        \"\"\"\n        :type s: str\n        :type oldch: str\n        :type newch: str\n        :rtype: str\n        \"\"\"\n        for i in range(len(s)):\n            if s[i] == oldch:\n                s[i] = newch\n        return s"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if s == '':\n            return ''\n        if old == '':\n            return s\n        if new == '':\n            return s\n        if len(s) == 0:\n            return ''\n        if len(old) == 0:\n            return s\n        if len(new) == 0:\n            return s\n        if len(s) < len(old):\n            return s\n        if len(s) < len(new):\n            return s\n        return s[0:len(s)-len(old)] + new + s[len(s)-len(old):]\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replace('', 'a', 'b')\n    print s.replace('', 'a', '')\n    print s.replace('', '', 'b')\n    print s.replace('', 'a', 'a')\n    print s.replace('', 'a', 'a', 'a')\n    print s.replace('', 'a', 'a', 'a', 'a')\n    print s.replace('', 'a', 'a', 'a', 'a', 'a')\n    print s.replace('', 'a', 'a', 'a', 'a', 'a', 'a')\n    print s.replace('', 'a', 'a', 'a', 'a', 'a', 'a', 'a')\n    print s.replace('', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a')\n    print s.replace('', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a')\n    print s.replace('', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a')\n    print s.replace('', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceCharacters(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        if not charsToReplace:\n            return s\n        result = []\n        for i in range(len(s)):\n            if s[i] in charsToReplace:\n                result.append(charsToInsert)\n            else:\n                result.append(s[i])\n        return ''.join(result)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceCharacters(\"abcde\", \"bc\", \"z\")\n    print s.replaceCharacters(\"abcde\", \"bc\", \"z\")\n    print s.replaceCharacters(\"abcde\", \"bc\", \"z\")\n    print s.replaceCharacters(\"abcde\", \"bc\", \"z\")\n    print s.replaceCharacters(\"abcde\", \"bc\", \"z\")"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceCharacters(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: List[str]\n        :type charsToInsert: List[str]\n        :rtype: str\n        \"\"\"\n        if s is None or len(s) == 0:\n            return \"\"\n        if len(charsToReplace) == 0:\n            return s\n        if len(charsToInsert) == 0:\n            return s\n        r = \"\"\n        for c in s:\n            if c in charsToReplace:\n                r += charsToInsert[charsToReplace.index(c)]\n            else:\n                r += c\n        return r"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        return s.replace(old, new)\n\n    def replace2(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if len(new) == 0:\n            return s\n        if len(old) == 0:\n            return s\n        if len(old) > len(new):\n            return self.replace(s, old, new)\n        if len(old) < len(new):\n            return self.replace(s, old, new)\n        return self.replace(s, old, new)"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "class Solution:\n    def replaceCharacters(self, s: str, chars: str) -> str:\n        chars = chars.replace(\" \", \"\")\n        return \"\".join(chars[ord(c)-ord(\"a\")] for c in s)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        new_list = list(new)\n        for i in range(len(s)):\n            if s[i] == old:\n                new_list[i] = new[0]\n            else:\n                new_list[i] = s[i]\n        return ''.join(new_list)"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldStr, newStr):\n        \"\"\"\n        :type s: str\n        :type oldStr: str\n        :type newStr: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n\n        if not oldStr or not newStr:\n            return s\n\n        if s[0] == oldStr[0]:\n            return self.replaceChar(s[1:], oldStr[1:], newStr[1:])\n\n        if s[-1] == oldStr[-1]:\n            return self.replaceChar(s[:-1], oldStr[:-1], newStr[:-1])\n\n        return s[0] + newStr + self.replaceChar(s[1:], oldStr[1:], newStr[1:]) + s[-1]\n\n\nif __name__ == \"__main__\":\n    print Solution().replaceChar(\"hello\", \"ll\", \"ooo\")"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        if not old:\n            return s\n        if not new:\n            return s\n        if len(s) == len(old):\n            return s[:len(old)] + new\n        if len(s) < len(old):\n            return s\n        return s[:len(old)] + new + s[len(old):]"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if oldChar not in s:\n            return s\n        else:\n            return s.replace(oldChar, newChar)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.replaceChar(\"hello\", \"o\", \"0\")\n    s.replaceChar(\"hello\", \"o\", \"0\")\n    s.replaceChar(\"hello\", \"o\", \"0\")\n    s.replaceChar(\"hello\", \"o\", \"0\")\n    s.replaceChar(\"hello\", \"o\", \"0\")\n    s.replaceChar(\"hello\", \"o\", \"0\")"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/replace-characters-in-string/\n\nclass Solution(object):\n    def replaceChar(self, S, oldch, newch):\n        \"\"\"\n        :type S: str\n        :type oldch: str\n        :type newch: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c if c!= oldch else newch for c in S])\n\n    def replaceChar(self, S, oldch, newch):\n        \"\"\"\n        :type S: str\n        :type oldch: str\n        :type newch: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c if c!= oldch else newch for c in S])\n\nif __name__ == \"__main__\":\n    print Solution().replaceChar('leetcode', 'e', 'o')"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        return s.replace(oldChar, newChar)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceChar(\"Hello\", \"a\", \"b\")\n    print s.replaceChar(\"aaabbbcccddd\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar(\"aabbbcccaaaa\", \"a\", \"b\")\n    print s.replaceChar"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        return s.replace(old, new)"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n\ndef replace_char_s(string, old_char, new_char):\n    return ''.join(replace_char(c, old_char, new_char) for c in string)\n\nclass Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if len(old)!= len(new):\n            return s\n        return replace_char_s(s, old, new)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replace(\"hello\", \"\", \"\")\n    print s.replace(\"hello\", \"o\", \"\")\n    print s.replace(\"hello\", \"o\", \"a\")\n    print s.replace(\"hello\", \"a\", \"o\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace(\"hello\", \"a\", \"o\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace(\"hello\", \"a\", \"o\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace(\"hello\", \"a\", \"o\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace(\"hello\", \"a\", \"o\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace(\"hello\", \"a\", \"o\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace(\"hello\", \"a\", \"o\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace(\"hello\", \"a\", \"o\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace(\"hello\", \"a\", \"o\")\n    print s.replace(\"hello\", \"a\", \"a\")\n    print s.replace"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @param old, a string\n    # @param new, a string\n    # @return a string\n    def replace(self, s, old, new):\n        length = len(s)\n        if length == 0:\n            return s\n        if length == 1:\n            return s[0] in old and s[0] in new and new or old[new.find(s[0])]\n        \n        # check whether the old string is a substring of the new string\n        if not new in old:\n            return s\n        \n        new_s = new\n        old_s = old\n        \n        for i in range(length):\n            if new_s in old_s:\n                new_s = new_s[:new_s.find(old_s)] + new_s[new_s.find(old_s) + len(old_s):]\n            else:\n                old_s = old_s[:old_s.find(new_s)] + old_s[old_s.find(new_s) + len(new_s):]\n            \n        return new_s\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replace(\"aaabb\", \"a\", \"a\"))\n    print(s.replace(\"aaabb\", \"a\", \"b\"))\n    print(s.replace(\"aaabb\", \"a\", \"b\"))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        if not old or not new:\n            return s\n        if len(old) == 1:\n            return s.replace(old, new)\n        result = []\n        for c in s:\n            if c == old:\n                result.append(new)\n            else:\n                result.append(c)\n        return ''.join(result)\n\n# Note:\n# s = \"aaa\", old = \"a\", new = \"b\" -> \"bbb\"\n# s = \"aaabb\", old = \"a\", new = \"b\" -> \"bbb\"\n# s = \"aababb\", old = \"a\", new = \"b\" -> \"bbb\"\n# s = \"aababb\", old = \"b\", new = \"a\" -> \"bbb\"\n# s = \"aababb\", old = \"b\", new = \"a\" -> \"bbb\""
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return s\n        if len(old) == 0:\n            return s\n        if len(new) == 0:\n            return s\n        index = 0\n        while index < len(s):\n            if s[index] == old:\n                s[index] = new\n            index += 1\n        return s\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replace(\"abcde\", \"b\", \"c\")"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceCharacters(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c if c in charsToInsert else charsToReplace for c in s])"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        return s.replace(oldChar, newChar)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceChar(\"hello\", \"l\", \"o\")"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceCharacters(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        \n        i = 0\n        while i < len(s):\n            if s[i] in charsToReplace:\n                s = s[:i] + charsToInsert + s[i + 1:]\n            i += 1\n        return s\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceCharacters(\"abcde\", \"bc\", \"d\")\n    print s.replaceCharacters(\"abcde\", \"bc\", \"d\")\n    print s.replaceCharacters(\"abcde\", \"bc\", \"d\")\n    print s.replaceCharacters(\"abcde\", \"bc\", \"d\")"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def replace_chars(string, chars_to_replace, new_char):\n    \"\"\"\n    :type string: str\n    :type chars_to_replace: str\n    :type new_char: str\n    :rtype: str\n    \"\"\"\n    # Write your code here\n    return string.replace(chars_to_replace, new_char)\n\nif __name__ == '__main__':\n    print(replace_chars('abcde', 'c', 'd'))\n    print(replace_chars('abcde', 'e', 'c'))\n    print(replace_chars('abcde', 'b', 'c'))\n    print(replace_chars('abcde', 'd', 'e'))\n    print(replace_chars('abcde', 'c', 'd'))\n    print(replace_chars('abcde', 'd', 'e'))\n    print(replace_chars('abcde', 'e', 'd'))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChars(self, s, chars):\n        \"\"\"\n        :type s: str\n        :type chars: str\n        :rtype: str\n        \"\"\"\n        ret = ''\n        for i in range(0, len(s)):\n            if s[i] in chars:\n                ret += chars[i]\n            else:\n                ret += s[i]\n        return ret\n\n\nif __name__ == \"__main__\":\n    print Solution().replaceChars(\"abcabcbb\", \"bbbb\")"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        s_new = ''\n        for ch in s:\n            if ch == oldChar:\n                s_new += newChar\n            else:\n                s_new += ch\n        return s_new\n\n    def replaceChar2(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        s_new = ''\n        for i, ch in enumerate(s):\n            if ch == oldChar:\n                s_new += newChar\n            else:\n                s_new += ch\n        return s_new\n\n    def replaceChar3(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        s_new = ''\n        for ch in s:\n            if ch == oldChar:\n                s_new += newChar\n            else:\n                s_new += ch\n        return s_new\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceChar('hello', 'h', 'e'))\n    print(s.replaceChar('hello', 'o', 'e'))\n    print(s.replaceChar('hello', 'h', 'e'))\n    print(s.replaceChar('hello', 'o', 'e'))\n    print(s.replaceChar('hello', 'o', 'e'))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceCharacters(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        result = ''\n        for c in s:\n            if c in charsToReplace:\n                result += charsToInsert\n            else:\n                result += c\n        return result"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldch, newch):\n        \"\"\"\n        :type s: str\n        :type oldch: str\n        :type newch: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return ''\n        if len(s) == 1:\n            if s[0] == oldch:\n                return newch\n            return s\n        if s[0] == oldch:\n            return self.replaceChar(s[1:], oldch, newch)\n        return s[0] + self.replaceChar(s[1:], oldch, newch)\n\n    def replaceChar(self, s, oldch, newch):\n        if len(s) == 0:\n            return ''\n        if len(s) == 1:\n            if s[0] == oldch:\n                return newch\n            return s\n        if s[0] == oldch:\n            return self.replaceChar(s[1:], oldch, newch)\n        return s[0] + self.replaceChar(s[1:], oldch, newch)\n\nif __name__ == '__main__':\n    print Solution().replaceChar('abcde', 'c', 'f')\n    print Solution().replaceChar('abcde', 'd', 'f')\n    print Solution().replaceChar('abcde', 'c', 'f')\n    print Solution().replaceChar('abcde', 'a', 'f')\n    print Solution().replaceChar('abcde', 'b', 'f')\n    print Solution().replaceChar('abcde', 'e', 'f')\n    print Solution().replaceChar('abcde', 'c', 'f')\n    print Solution().replaceChar('abcde', 'd', 'f')\n    print Solution().replaceChar('abcde', 'a', 'f')\n    print Solution().replaceChar('abcde', 'b', 'f')\n    print Solution().replaceChar('abcde', 'e', 'f')"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "# Definition for a character\nclass Character:\n    def __init__(self, x):\n        self.x = x\n\n    def __str__(self):\n        return str(self.x)\n\nclass Solution:\n    def replaceChars(self, s, chars):\n        \"\"\"\n        :type s: str\n        :type chars: List[Character]\n        :rtype: str\n        \"\"\"\n        if s == None or len(s) == 0 or chars == None or len(chars) == 0:\n            return s\n        result = \"\"\n        for char in s:\n            if char in chars:\n                result += chars[chars.index(char)]\n            else:\n                result += char\n        return result\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.replaceChars(\"hello\", [Character(65), Character(97)])"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if oldChar == newChar:\n            return s\n        res = ''\n        for i in range(len(s)):\n            if s[i] == oldChar:\n                res += newChar\n            else:\n                res += s[i]\n        return res\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.replaceChar('abc', 'a', 'b')\n    print solution.replaceChar('abc', 'a', 'b')\n    print solution.replaceChar('abc', 'a', 'c')\n    print solution.replaceChar('abcd', 'a', 'b')\n    print solution.replaceChar('abcd', 'a', 'c')\n    print solution.replaceChar('abcd', 'a', 'd')"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        return s.replace(oldChar, newChar)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceChar(\"abcd\", 'a', 'b')\n    print s.replaceChar(\"abcd\", 'b', 'a')\n    print s.replaceChar(\"abcd\", 'c', 'b')\n    print s.replaceChar(\"abcd\", 'd', 'a')\n    print s.replaceChar(\"abcd\", 'a', 'a')\n    print s.replaceChar(\"abcd\", 'a', 'b')\n    print s.replaceChar(\"abcd\", 'b', 'a')\n    print s.replaceChar(\"abcd\", 'b', 'c')\n    print s.replaceChar(\"abcd\", 'c', 'b')"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return s\n        \n        if s[0] == oldChar:\n            return self.replaceChar(s[1:], oldChar, newChar)\n        \n        if s[-1] == oldChar:\n            return self.replaceChar(s[:-1], oldChar, newChar)\n        \n        return s[0] + self.replaceChar(s[1:], oldChar, newChar) + s[-1]"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def replace_char(string, char1, char2):\n    \"\"\"\n    Input: string, char1, char2\n    Output: string\n    \"\"\"\n    return string.replace(char1, char2)\n\nif __name__ == \"__main__\":\n    string = \"abcd\"\n    print(string)\n    print(replace_char(string, \"a\", \"b\"))\n    print(replace_char(string, \"a\", \"c\"))\n    print(replace_char(string, \"b\", \"d\"))\n    print(replace_char(string, \"c\", \"d\"))\n    print(replace_char(string, \"d\", \"e\"))\n    print(replace_char(string, \"e\", \"f\"))\n    print(replace_char(string, \"e\", \"g\"))\n    print(replace_char(string, \"g\", \"h\"))\n    print(replace_char(string, \"h\", \"i\"))\n    print(replace_char(string, \"i\", \"j\"))\n    print(replace_char(string, \"j\", \"k\"))\n    print(replace_char(string, \"k\", \"l\"))\n    print(replace_char(string, \"l\", \"m\"))\n    print(replace_char(string, \"m\", \"n\"))\n    print(replace_char(string, \"n\", \"o\"))\n    print(replace_char(string, \"o\", \"p\"))\n    print(replace_char(string, \"p\", \"q\"))\n    print(replace_char(string, \"q\", \"r\"))\n    print(replace_char(string, \"r\", \"s\"))\n    print(replace_char(string, \"s\", \"t\"))\n    print(replace_char(string, \"t\", \"u\"))\n    print(replace_char(string, \"u\", \"v\"))\n    print(replace_char(string, \"v\", \"w\"))\n    print(replace_char(string, \"w\", \"x\"))\n    print(replace_char(string, \"x\", \"y\"))\n    print(replace_char(string, \"y\", \"z\"))\n    print(replace_char(string, \"z\", \" \"))\n    print(replace"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        return s.replace(oldChar, newChar)\n\n    def replaceChar1(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c if c!= oldChar else newChar for c in s)\n\n    def replaceChar2(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c if c!= oldChar else newChar for c in s)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.replaceChar(\"hello\", 'o', 'e'))\n    print(s.replaceChar(\"hello\", 'l', 'r'))\n    print(s.replaceChar(\"hello\", 'e', 'r'))\n    print(s.replaceChar(\"hello\", 'o', 'r'))\n    print(s.replaceChar(\"hello\", 'l', 'o'))\n    print(s.replaceChar(\"hello\", 'e', 'l'))\n    print(s.replaceChar(\"hello\", 'l', 'l'))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def replace_char(s, old, new):\n    \"\"\"\n    :type s: str\n    :type old: str\n    :type new: str\n    :rtype: str\n    \"\"\"\n    if len(s) == 0:\n        return s\n    if len(old) == 0:\n        return s\n    if len(new) == 0:\n        return s\n    new_string = \"\"\n    for i in range(len(s)):\n        if s[i] == old:\n            new_string += new\n        else:\n            new_string += s[i]\n    return new_string\n\n\ndef test():\n    assert replace_char(\"hello\", \"ll\", \"oo\") == \"hooo\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"oo\") == \"hooo\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\", \"hello\"\n    assert replace_char(\"hello\", \"ll\", \"\") == \"\","
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        return s.replace(oldChar, newChar)\n\n    def replaceChar1(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for i in range(len(s)):\n            if s[i]!= oldChar:\n                res += s[i]\n        res += newChar\n        return res\n\n    def replaceChar2(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for i in range(len(s)):\n            if s[i] == oldChar:\n                res += newChar\n            else:\n                res += s[i]\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceChar(\"aaabb\", \"a\", \"b\")\n    print s.replaceChar(\"aaabb\", \"b\", \"a\")\n    print s.replaceChar(\"aaabb\", \"a\", \"a\")\n    print s.replaceChar(\"aaabb\", \"a\", \"b\")\n    print s.replaceChar(\"aaabb\", \"b\", \"a\")\n    print s.replaceChar(\"aaabb\", \"a\", \"a\")\n    print s.replaceChar(\"aaabb\", \"b\", \"a\")\n    print s.replaceChar(\"aaabb\", \"a\", \"b\")\n    print s.replaceChar(\"aaabb\", \"b\", \"a\")\n    print s.replaceChar(\"aaabb\", \"a\", \"b\")\n    print s.replaceChar(\"aaabb\", \"b\", \"a\")\n    print s.replaceChar(\"aaabb\", \"a\", \"b\")\n    print s.replaceChar(\"aaabb\", \"b\", \"a\")"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def replace_char(s, old_ch, new_ch):\n    \"\"\"\n    :type s: str\n    :type old_ch: str\n    :type new_ch: str\n    :rtype: str\n    \"\"\"\n    return s.replace(old_ch, new_ch)\n\n# Your ReplaceChar solution here."
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param str, a string\n    # @param old, a string\n    # @param new, a string\n    # @return a string\n    def replace(self, str, old, new):\n        index = str.find(old)\n        if index == -1:\n            return str\n        return self.replace(str[:index]+new+str[index+len(old):], old, new)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replace(\"hello, world\", \"o\", \"e\"))\n    print(s.replace(\"hello, world\", \"o\", \"e\", \"o\", \"e\"))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def replace_all(text, old, new):\n    \"\"\"\n    :type text: str\n    :type old: str\n    :type new: str\n    :rtype: str\n    \"\"\"\n    # write your code here\n    return text.replace(old, new)\n\nif __name__ == '__main__':\n    print(replace_all('I am a string', 'a', 'A'))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "# Implement this function.\n\n# Example\n# s = 'abcdefg'\n# replace_chars(s, 'c', 'f')\n# print s\n\ndef replace_chars(s, old, new):\n    if not s:\n        return ''\n    \n    new_string = ''\n    for i in range(len(s)):\n        if s[i] == old:\n            new_string += new\n        else:\n            new_string += s[i]\n    return new_string"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def replace_char(s, old, new):\n    return s.replace(old, new)\n\nif __name__ == \"__main__\":\n    s = \"abcdabcdabcd\"\n    old = \"a\"\n    new = \"b\"\n    print replace_char(s, old, new)\n    s = \"abcdabcdabcd\"\n    old = \"c\"\n    new = \"d\"\n    print replace_char(s, old, new)\n    s = \"abcdabcdabcd\"\n    old = \"b\"\n    new = \"a\"\n    print replace_char(s, old, new)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def replace_char(s, old_char, new_char):\n    \"\"\"\n    :type s: str\n    :type old_char: str\n    :type new_char: str\n    :rtype: str\n    \"\"\"\n    return s.replace(old_char, new_char)\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    s = \"abcdef\"\n    print(replace_char(s, \"a\", \"b\"))\n    print(replace_char(s, \"e\", \"f\"))\n    print(replace_char(s, \"a\", \"z\"))\n    print(replace_char(s, \"a\", \"b\"))\n    print(replace_char(s, \"f\", \"b\"))\n    print(replace_char(s, \"a\", \"a\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @param from, a character\n    # @param to, another character\n    # @return a string\n    def replace(self, s, from, to):\n        return ''.join(c if c!= from else to for c in s)\n\n    def replaceChar(self, s, from, to):\n        return ''.join(c if c!= from else to for c in s)\n\n    def replaceString(self, s, from, to):\n        return ''.join(to if c!= from else c for c in s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replace('aaabbcc', 'a', 'b'))\n    print(s.replace('aaabbcc', 'a', 'b'))\n    print(s.replace('aaabbcc', 'a', 'b'))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @param old, a string\n    # @param newChar, a character\n    # @return a string\n    def replace(self, s, old, newChar):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        i = 0\n        while i < len(s):\n            if s[i] == old:\n                s = s[:i] + newChar + s[i+1:]\n                i += 1\n            i += 1\n        return s"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# Definition for a character:\n#   'c' --> 'a'\nclass Character(object):\n    def __init__(self, ch):\n        self.ch = ch\n\n    def __str__(self):\n        return self.ch\n\nclass Solution(object):\n    def replaceChars(self, s, charsToReplace):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: List[Character]\n        :rtype: str\n        \"\"\"\n        charsToReplace = list(charsToReplace)\n        if not charsToReplace:\n            return s\n\n        r = []\n        for c in s:\n            if c in charsToReplace:\n                r.append(charsToReplace.pop(0))\n            else:\n                r.append(c)\n        return \"\".join(r)\n\n\nif __name__ == \"__main__\":\n    s = \"leetcode\"\n    charsToReplace = [\"l\", \"e\", \"t\", \"o\"]\n    print Solution().replaceChars(s, charsToReplace)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        i = 0\n        while i < len(s):\n            if s[i] == old:\n                s[i] = new\n            i += 1\n        return s\n\nif __name__ == \"__main__\":\n    print Solution().replaceChar(\"banana\", \"a\", \"n\")"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        return s.replace(old, new)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        result = []\n        for i in range(len(s)):\n            if s[i] == oldChar:\n                result.append(newChar)\n            else:\n                result.append(s[i])\n        return ''.join(result)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceChar('abcde', 'b', 'c')\n    print s.replaceChar('abcde', 'e', 'c')\n    print s.replaceChar('abcde', 'a', 'c')"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def replaceChars(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        return ''.join(charsToInsert if c in charsToReplace else c for c in s)"
    },
    {
      "rank": 72,
      "score": 7.0,
      "candidate": "# https://www.hackerrank.com/challenges/singly-linked-list-strings/problem\n\ndef replace(str, old, new):\n    \"\"\"\n    :param str: The string to be modified.\n    :param old: The character to be replaced.\n    :param new: The character to replace the old one.\n    :return: The modified string.\n    \"\"\"\n    str = str.replace(old, new)\n    return str\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    a = input()\n    b = input()\n    \n    res = ''\n    for i in range(n):\n        res += replace(a, b[i], a[i])\n    \n    print(res)"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        def replace_all(s, old, new):\n            return s.replace(old, new)\n\n        if len(old) == 1:\n            return replace_all(s, old, new)\n        if len(old) == 0:\n            return s\n\n        for i in range(len(s)):\n            if s[i] == old[0]:\n                if len(old) == 1:\n                    s[i] = new[0]\n                elif len(old) > 1:\n                    s[i] = replace_all(s[i+1:i+len(old)-1], old[1:], new)\n        return s\n\n\nif __name__ == '__main__':\n    assert Solution().replace('aaabb', 'b', 'a') == 'aaabb'\n    assert Solution().replace('aaabb', 'b', 'a') == 'aaabb'\n    assert Solution().replace('aaabb', 'b', 'a') == 'aaabb'"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/replace-all-substrings-in-a-string/description/\n\nclass Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return s\n        if len(old) == 0:\n            return s\n        if len(new) == 0:\n            return s\n        if len(old) > len(new):\n            return self.replace(s[:-1], old[:-1], new)\n        if len(old) == len(new):\n            return s[:len(old)] + new + s[len(old):]\n        if len(old) > len(s):\n            return self.replace(s[:-1], old[:-1], new) + self.replace(s[-1], old[-1], new)\n        return self.replace(s[:-1], old[:-1], new) + s[-1] + new[-1]\n\n    def replace_all(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return s\n        if len(old) == 0:\n            return s\n        if len(new) == 0:\n            return s\n        if len(old) > len(new):\n            return self.replace_all(s[:-1], old[:-1], new)\n        if len(old) == len(new):\n            return s[:len(old)] + new + s[len(old):]\n        if len(old) > len(s):\n            return self.replace_all(s[:-1], old[:-1], new) + self.replace_all(s[-1], old[-1], new)\n        return self.replace_all(s[:-1], old[:-1], new) + s[-1] + new[-1]\n\nclass Solution2"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param s: The string\n    @param from: The characters to replace\n    @param to: The characters to insert\n    @return: The string after replacement\n    \"\"\"\n    def replace(self, s, from_str, to_str):\n        # write your code here\n        if from_str == to_str:\n            return s\n        if s == '':\n            return ''\n\n        from_str_len = len(from_str)\n        to_str_len = len(to_str)\n        length = len(s)\n        new_s = ''\n        for i in range(length):\n            if i < from_str_len and s[i] == from_str[i]:\n                new_s += to_str[i]\n            else:\n                new_s += s[i]\n        return new_s\n\n    def replace_all(self, s, from_str, to_str):\n        # write your code here\n        if s == '':\n            return ''\n\n        from_str_len = len(from_str)\n        to_str_len = len(to_str)\n        length = len(s)\n        new_s = ''\n        for i in range(length):\n            if i < from_str_len and s[i] == from_str[i]:\n                new_s += to_str[i]\n            else:\n                new_s += s[i]\n        return new_s"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# Your function will be called like this:\n# replaceChars(string, charsToReplace, charsToReplaceWith)\n# string - string to be changed\n# charsToReplace - list of characters that need to be replaced\n# charsToReplaceWith - replacement characters (string of length 1)\n\ndef replaceChars(string, charsToReplace, charsToReplaceWith):\n    newString = \"\"\n    for i in range(len(string)):\n        if string[i] in charsToReplace:\n            newString += charsToReplaceWith\n        else:\n            newString += string[i]\n    return newString\n\n\n\nprint(replaceChars(\"Hello World\", \"ll\", \"l\"))\n\n#print(replaceChars(\"Hello World\", \"ll\", \"l\"))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "#\n# Replace characters in a string.\n#\n# Write a function replace_chars that takes a string and a list of characters.\n# The function should return a string with all the characters in the list\n# replaced by the character in the list.\n#\n# Example:\n# replace_chars(\"Hello, world!\", [\"H\", \"e\", \"l\", \"l\", \"o\", \"!\", \"W\", \"o\", \"r\", \"l\", \"d\"])\n#\n# Returns:\n# \"He,llo, world!\"\n#\n\n# Your Solution\n#\n# Note:\n# - You may assume the string is always non-empty\n# - You may assume the list contains no duplicates\n# - The list will be in the same order as the characters in the string\n# - You may assume the characters in the list are in lowercase\n\nclass Solution(object):\n    def replace_chars(self, s, chars):\n        \"\"\"\n        :type s: str\n        :type chars: List[str]\n        :rtype: str\n        \"\"\"\n        ret = ''\n        for c in s:\n            for char in chars:\n                if c == char:\n                    ret +=''\n                else:\n                    ret += c\n        return ret\n\n    def test(self):\n        self.assertEqual(self.replace_chars('Hello, world!', ['H', 'e', 'l', 'l', 'o', '!', 'W', 'o', 'r', 'l', 'd']), 'He,llo, world!')\n        self.assertEqual(self.replace_chars('Hello, world!', ['H', 'e', 'l', 'l', 'o', '!', 'W', 'o', 'r', 'l', 'd', 'a']), 'He,llo, world!')\n        self.assertEqual(self.replace_chars('Hello, world!', ['H', 'e', 'l', 'l', 'o', '!', 'W', 'o', 'r', 'l', 'd', 'a', '!']), 'He,llo, world!')\n        self.assertEqual(self.replace_chars('Hello, world!', ['H', '"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/replace-characters/problem\n\n\ndef replace_characters(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # TODO\n    return \"\".join(c for c in string if c not in \"aeiou\")\n\n\nif __name__ == \"__main__\":\n    print(replace_characters(\"hello\"))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        if not old:\n            return s\n        if len(old)!= len(new):\n            return s\n        if s[-1] == old[-1]:\n            return s[:-1] + new + s[-1]\n        else:\n            return s[:-1] + new\n\n    def replace_all(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        if not old:\n            return s\n        if len(old)!= len(new):\n            return s\n        if s[-1] == old[-1]:\n            return s[:-1] + new + s[-1]\n        else:\n            return s[:-1] + new\n\n    def replace_str(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        if not old:\n            return s\n        if len(old)!= len(new):\n            return s\n        if s[-1] == old[-1]:\n            return s[:-1] + new + s[-1]\n        else:\n            return s[:-1] + new\n\n    def replace_str_2(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        if not old:\n            return s\n        if len(old)!= len(new):\n            return s\n        if s[-1] == old[-1]:\n            return s[:-1] +"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if not s or s == oldChar:\n            return s\n        result = ''\n        for c in s:\n            if c == oldChar:\n                result += newChar\n            else:\n                result += c\n        return result\n\n\nif __name__ == '__main__':\n    print Solution().replaceChar('aaabbcc', 'a', 'b')"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        return s.replace(old, new)\n\n\n    def replace2(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        d = {ord(old):ord(new)}\n        res = []\n        for c in s:\n            if c in d:\n                res.append(d[ord(c)])\n            else:\n                res.append(c)\n        return ''.join(res)\n\nif __name__ == \"__main__\":\n    print Solution().replace(\"abbc\", \"b\", \"d\")"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        ret = ''\n        for ch in s:\n            if ch == oldChar:\n                ret += newChar\n            else:\n                ret += ch\n        return ret\n\n    def replaceChar1(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if s == '':\n            return ''\n        if s[0] == oldChar:\n            return self.replaceChar1(s[1:], oldChar, newChar)\n        if s[-1] == oldChar:\n            return self.replaceChar1(s[:-1], oldChar, newChar)\n        return s[0] + self.replaceChar1(s[1:], oldChar, newChar) + s[-1]\n\n    def replaceChar2(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if s == '':\n            return ''\n        if s[0] == oldChar:\n            return self.replaceChar2(s[1:], oldChar, newChar)\n        if s[-1] == oldChar:\n            return self.replaceChar2(s[:-1], oldChar, newChar)\n        return s[0] + self.replaceChar2(s[1:], oldChar, newChar) + s[-1]\n\n    def replaceChar3(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if s == '':\n            return ''\n        if s[0] == oldChar:\n            return self.replaceChar3(s[1:], oldChar, newChar)\n        if s"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @param from, a character\n    # @param to, a character\n    # @return a string\n    def replace(self, s, from, to):\n        if not s:\n            return \"\"\n        from_len = len(from)\n        to_len = len(to)\n        start = 0\n        end = 0\n        for i in range(len(s)):\n            if s[i] == from:\n                end = i + from_len\n                start = i\n            else:\n                if start!= i:\n                    s[start:i] = to * (end - i)\n                    i += to_len - from_len\n                start = i + 1\n        if start < len(s):\n            s[start:] = to * (end - start)\n        return s\n\n    def replace_all(self, s, from, to):\n        if not s:\n            return \"\"\n        from_len = len(from)\n        to_len = len(to)\n        start = 0\n        end = 0\n        for i in range(len(s)):\n            if s[i] == from:\n                end = i + from_len\n                start = i\n            else:\n                if start!= i:\n                    s[start:i] = to * (end - i)\n                    i += to_len - from_len\n                start = i + 1\n        if start < len(s):\n            s[start:] = to * (end - start)\n        return s\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replace(\"abc\", \"a\", \"b\")\n    print s.replace(\"abc\", \"a\", \"c\")\n    print s.replace_all(\"abc\", \"a\", \"c\")\n    print s.replace_all(\"abc\", \"a\", \"b\")\n    print s.replace_all(\"abc\", \"a\", \"b\", \"c\")\n    print s.replace_all(\"abc\", \"a\", \"c\", \"b\")"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def replace_char(str, old, new):\n    \"\"\"\n    :type str: str\n    :type old: str\n    :type new: str\n    :rtype: str\n    \"\"\"\n    return str.replace(old, new)\n\nclass Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        return s.replace(old, new)\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replace('abcd', 'b', 'c'))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/replace-all/discuss/61172/Java-C-Python-DP-O(n^2)\n\nclass Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        # http://www.cnblogs.com/zuoyuan/p/3729892.html\n        if s == None or oldChar == None or newChar == None:\n            return s\n        sLen = len(s)\n        if sLen == 0:\n            return ''\n        i = 0\n        while i < sLen:\n            if s[i] == oldChar:\n                s[i] = newChar\n            i += 1\n        return s"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    :type string: str\n    :type old_char: str\n    :type new_char: str\n    :rtype: str\n    \"\"\"\n    # TODO: write a function to replace characters.\n    return string\n\n# Test Cases\n\n# Test Case 1:\nstring = 'abc'\nold_char = 'a'\nnew_char = 'b'\nprint(replace_char(string, old_char, new_char))\n\n# Test Case 2:\nstring = 'abcd'\nold_char = 'a'\nnew_char = 'd'\nprint(replace_char(string, old_char, new_char))\n\n# Test Case 3:\nstring = 'abcd'\nold_char = 'a'\nnew_char = 'a'\nprint(replace_char(string, old_char, new_char))\n\n# Test Case 4:\nstring = 'abcd'\nold_char = 'c'\nnew_char = 'a'\nprint(replace_char(string, old_char, new_char))\n\n# Test Case 5:\nstring = 'abcd'\nold_char = 'c'\nnew_char = 'd'\nprint(replace_char(string, old_char, new_char))\n\n# Test Case 6:\nstring = 'abcd'\nold_char = 'a'\nnew_char = 'a'\nprint(replace_char(string, old_char, new_char))\n\n# Test Case 7:\nstring = 'abcd'\nold_char = 'b'\nnew_char = 'a'\nprint(replace_char(string, old_char, new_char))\n\n# Test Case 8:\nstring = 'abcd'\nold_char = 'd'\nnew_char = 'b'\nprint(replace_char(string, old_char, new_char))\n\n# Test Case 9:\nstring = 'abcd'\nold_char = 'a'\nnew_char = 'd'\nprint(replace_char(string, old_char, new_char))\n\n# Test Case 10:\nstring = 'abcd'"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Definition for a character:\n#   'c' --> 'a'\n#   '1' --> '1'\n#   'a' --> 'a'\n#   '1a' --> 'a'\n#   'aa' --> 'a'\n\nclass Solution:\n    # @param s, a string\n    # @param from, a character\n    # @param to, a character\n    # @return a string\n    def replaceChar(self, s, from, to):\n        # write your code here\n        if s is None or from is None or to is None:\n            return s\n        result = ''\n        for i in range(len(s)):\n            if s[i] == from:\n                result += to\n            else:\n                result += s[i]\n        return result"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/replace-characters\n# Sample Inputs & Outputs\n# Sample Input\n#   \"Hello, world!\"\n# Sample Output\n#   \"Hylo, world!\"\n\ndef replace_characters(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c if c in string else'' for c in string)\n\n# Test Cases\nprint(replace_characters('Hello, world!'))\nprint(replace_characters('Hello, world?'))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @param old, a string\n    # @param newa, a string\n    # @param newb, a string\n    # @return a string\n    def replaceChar(self, s, old, newa, newb):\n        if s == None:\n            return s\n        if old in s:\n            s = s.replace(old, newa)\n        if old in newa:\n            s = s.replace(old, newb)\n        return s\n\nif __name__ == \"__main__\":\n    print Solution().replaceChar(\"aabcccc\", \"a\", \"b\", \"b\")\n    print Solution().replaceChar(\"aabcccc\", \"a\", \"b\", \"a\")\n    print Solution().replaceChar(\"aabcccc\", \"a\", \"b\", \"aa\")\n    print Solution().replaceChar(\"aabcccc\", \"a\", \"b\", \"b\")"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def replaceCharacters(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        if charsToReplace == '' or charsToInsert == '':\n            return s\n\n        # if charsToReplace =='':\n        #     return s.replace(' ','')\n        # else:\n        #     return s.replace(charsToReplace, charsToInsert)\n\n        # replace all chars\n        # return s.replace(charsToReplace, charsToInsert)\n\n        # replace one char\n        # return s.replace(charsToReplace, charsToInsert[0])"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return s\n        new_s = ''\n        for i in range(len(s)):\n            if s[i]!= oldChar:\n                new_s += s[i]\n            else:\n                new_s += newChar\n        return new_s\n\n    def replaceChar_2(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        if len(s) == 0:\n            return s\n        new_s = ''\n        for i in range(len(s)):\n            if s[i]!= oldChar:\n                new_s += s[i]\n            else:\n                new_s += newChar\n        return new_s\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.replaceChar('abcd', 'b', 'c'))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def replaceCharacters(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        if charsToReplace =='':\n            return s\n        if len(charsToReplace) == 0:\n            return s\n\n        if len(charsToReplace)!= len(charsToInsert):\n            raise ValueError(\"charsToReplace and charsToInsert should have same length\")\n\n        if len(s) == 0:\n            return \"\"\n\n        result = []\n        for i in xrange(len(s)):\n            if s[i] in charsToReplace:\n                result.append(charsToInsert[i])\n            else:\n                result.append(s[i])\n\n        return ''.join(result)\n\n    def replaceCharacters_2(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        if len(charsToReplace) == 0:\n            return s\n        if len(charsToReplace)!= len(charsToInsert):\n            raise ValueError(\"charsToReplace and charsToInsert should have same length\")\n\n        result = []\n        for i in xrange(len(s)):\n            if s[i] in charsToReplace:\n                result.append(charsToInsert[i])\n            else:\n                result.append(s[i])\n\n        return ''.join(result)\n\n    def replaceCharacters_3(self, s, charsToReplace, charsToInsert):\n        \"\"\"\n        :type s: str\n        :type charsToReplace: str\n        :type charsToInsert: str\n        :rtype: str\n        \"\"\"\n        if len(charsToReplace) == 0:\n            return s\n        if len(charsToReplace)!= len(charsToInsert):\n            raise"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param s: The string\n    @param oldchars: All the old characters you want to replace\n    @param newchar: The new character you want to replace with\n    @return: The new string\n    \"\"\"\n    def replaceChar(self, s, oldchars, newchar):\n        \"\"\"\n        :type s: str\n        :type oldchars: str\n        :type newchar: str\n        :rtype: str\n        \"\"\"\n        for old in oldchars:\n            s = s.replace(old, newchar)\n        return s\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replaceChar(\"hello\", \"ll\", \"o\")"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Example 1\n# Given s = \"hello\",\n# replace(s, \"ll\", \"l\")\n# returns \"helll\"\n\n# Example 2\n# Given s = \"bat\",\n# replace(s, \"at\", \"\")\n# returns \"b\"\n\n# Example 3\n# Given s = \"Hello, my name is John\",\n# replace(s, \"my\", \"\")\n# returns \"Hello, my name is John\"\n\n# Note:\n# The string contains only lowercase letters,\n# and the replacement string contains only lowercase letters.\n# You may assume both s and s2 are non-empty strings.\n\nclass Solution(object):\n    def replace(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if s is None or old is None or new is None:\n            return s\n        result = []\n        for c in s:\n            if c == old:\n                result.append(new)\n            else:\n                result.append(c)\n        return \"\".join(result)\n\n    def replace2(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        if s is None or old is None or new is None:\n            return s\n        result = []\n        for c in s:\n            if c == old:\n                result.append(new)\n            else:\n                result.append(c)\n        return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    Solution().replace(\"hello\", \"ll\", \"l\")\n    Solution().replace(\"bat\", \"at\", \"\")\n    Solution().replace(\"Hello, my name is John\", \"my\", \"\")"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param str, a string\n    # @param old, a string\n    # @param new, a string\n    # @return a string\n    def replace(self, str, old, new):\n        if not str:\n            return str\n        if not old:\n            return str\n        if not new:\n            return str\n        res = ''\n        for i in range(len(str)):\n            if str[i] == old:\n                res += new\n            else:\n                res += str[i]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.replace('hello', '', 'a')\n    print s.replace('hello', 'h', 'a')\n    print s.replace('hello', 'he', 'a')\n    print s.replace('hello', 'ell', 'a')\n    print s.replace('hello', 'ello', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace('hello', 'll', 'a')\n    print s.replace"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def replaceChar(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        for i in range(len(s)):\n            if s[i] == oldChar:\n                s[i] = newChar\n        return s\n\n    def replaceChar_1(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        for i in range(len(s)):\n            if s[i] == oldChar:\n                s[i] = newChar\n                s = s[:i] + newChar + s[i+1:]\n        return s\n\n    def replaceChar_2(self, s, oldChar, newChar):\n        \"\"\"\n        :type s: str\n        :type oldChar: str\n        :type newChar: str\n        :rtype: str\n        \"\"\"\n        new = []\n        for c in s:\n            if c == oldChar:\n                new.append(newChar)\n            else:\n                new.append(c)\n        return \"\".join(new)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.replaceChar(\"abc\", 'a', 'b')\n    print s.replaceChar(\"abc\", 'a', 'c')\n    print s.replaceChar(\"abc\", 'a', 'b')"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def replace_char(s, old_char, new_char):\n    \"\"\"\n    :type s: str\n    :type old_char: str\n    :type new_char: str\n    :rtype: str\n    \"\"\"\n    return s.replace(old_char, new_char)\n\n# Your Solution here.\ndef replace_char_2(s, old_char, new_char):\n    \"\"\"\n    :type s: str\n    :type old_char: str\n    :type new_char: str\n    :rtype: str\n    \"\"\"\n    if not isinstance(s, str):\n        return s\n    else:\n        return s.replace(old_char, new_char)\n\nif __name__ == '__main__':\n    s = \"hello world\"\n    print(replace_char(s, 'h', 'a'))\n    print(replace_char_2(s, 'h', 'a'))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param s, a string\n    # @param chars, a set of characters\n    # @return a string\n    def replaceChars(self, s, chars):\n        return ''.join(c if c in chars else s[i] for i, c in enumerate(s))\n\n\nif __name__ == \"__main__\":\n    print(Solution().replaceChars(\"mississippi\", \"ssi\"))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution:\n    def replaceChar(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        return s.replace(old, new)\n\n    def replaceChar2(self, s, old, new):\n        \"\"\"\n        :type s: str\n        :type old: str\n        :type new: str\n        :rtype: str\n        \"\"\"\n        for i in range(len(s)):\n            if s[i] == old:\n                s[i] = new\n        return s\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    s = \"abc\"\n    s = \"abcd\"\n    print(sol.replaceChar(s, 'a', 'b'))\n    print(sol.replaceChar(s, 'a', 'd'))\n    print(sol.replaceChar(s, 'a', 'd'))\n    print(sol.replaceChar2(s, 'a', 'b'))\n    print(sol.replaceChar2(s, 'a', 'd'))\n    print(sol.replaceChar2(s, 'a', 'd'))\n    print(sol.replaceChar2(s, 'a', 'd'))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def replace_char(s, old_char, new_char):\n    \"\"\"\n    :type s: str\n    :type old_char: str\n    :type new_char: str\n    :rtype: str\n    \"\"\"\n    return ''.join(char if char!= old_char else new_char for char in s)\n\nclass Solution:\n    def replace_chars(self, s: str, oldchars: str, newchar: str) -> str:\n        \"\"\"\n        :type s: str\n        :type oldchars: str\n        :type newchar: str\n        :rtype: str\n        \"\"\"\n        if not oldchars:\n            return s\n        if not s:\n            return s\n        if len(oldchars)!= len(newchar):\n            return s\n        if not s:\n            return s\n        s = s.upper()\n        return ''.join(replace_char(s, oldchars[i], newchar) for i in range(len(s)))\n\nif __name__ == '__main__':\n    assert Solution().replace_chars('', 'a', 'b') == 'bbb'\n    assert Solution().replace_chars('', 'b', 'a') == 'a'\n    assert Solution().replace_chars('', 'aa', 'b') == 'bbb'\n    assert Solution().replace_chars('', 'aa', 'a') == 'a'\n    assert Solution().replace_chars('', 'aa', 'b') == 'bbb'\n    assert Solution().replace_chars('', 'aa', 'a') == 'a'\n    assert Solution().replace_chars('', 'aa', 'aa') == 'aa'\n    assert Solution().replace_chars('', 'aa', 'aaa') == 'aaa'\n    assert Solution().replace_chars('', 'aa', 'aaaa') == 'aaaa'\n    assert Solution().replace_chars('', 'aaa', 'aa') == 'aaa'\n    assert Solution().replace_chars('', 'aaa', 'aaa') == 'aaa'\n    assert Solution().replace_chars('', 'aaa', 'aaaa') == 'aaaa'\n    assert Solution().replace_ch"
    }
  ]
}