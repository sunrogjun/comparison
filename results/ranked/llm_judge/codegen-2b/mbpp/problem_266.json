{
  "timestamp": "2025-09-14T19:20:32.798075",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 266,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/dictionary-filter/problem\n\ndef filter_dictionary(dictionary, filter_values):\n    \"\"\"\n    Filter a dictionary based on values.\n    Input:\n    dictionary: A dictionary.\n    filter_values: A list of values to filter.\n\n    Output:\n    A list of values that are in dictionary.\n    \"\"\"\n\n    # Create a new list to store filtered values.\n    filtered_dictionary = []\n\n    # Iterate over the dictionary and add values to filtered list.\n    for key in dictionary:\n        if dictionary[key] in filter_values:\n            filtered_dictionary.append(dictionary[key])\n\n    return filtered_dictionary"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\nclass Solution:\n    # @param dictionary, a dictionary\n    # @param target,   a list of values\n    # @return a list of keys\n    def findAllCommonKeys(self, dictionary, target):\n        # write your code here\n        result = []\n        for key in dictionary:\n            if key in target:\n                result.append(key)\n        return result"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import sys\n\nif __name__ == \"__main__\":\n    dict = {\n            \"a\": 1,\n            \"b\": 2,\n            \"c\": 3\n        }\n    print filter(lambda x: x in (\"a\", \"b\", \"c\"), dict)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/dictionary-update/problem\n\ndef dictionary_update(dictionary, word):\n    \"\"\"\n    Update a dictionary.\n    \"\"\"\n    if word in dictionary:\n        dictionary[word] += 1\n    else:\n        dictionary[word] = 1\n\ndef main():\n    \"\"\"\n    Main entry point of the program.\n    \"\"\"\n    dictionary = {}\n    n = int(input())\n    for _ in range(n):\n        word = input()\n        dictionary_update(dictionary, word)\n    print(len(dictionary))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/filter-bst/\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def filter(self, root, values):\n        \"\"\"\n        :type root: TreeNode\n        :type values: List[int]\n        :rtype: List[TreeNode]\n        \"\"\"\n        def filter_rec(root, values):\n            if root is None:\n                return []\n            if root.val in values:\n                return [root]\n            return filter_rec(root.left, values) + filter_rec(root.right, values)\n        return filter_rec(root, values)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def filter_dict(dictionary, values):\n    if values is None:\n        return dictionary\n    else:\n        filtered_dictionary = {}\n        for key in dictionary:\n            if dictionary[key] in values:\n                filtered_dictionary[key] = dictionary[key]\n        return filtered_dictionary\n\nif __name__ == '__main__':\n    dictionary = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n    values = None\n    print filter_dict(dictionary, values)\n    values = ['key1', 'key3']\n    print filter_dict(dictionary, values)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {TreeNode} root\n    # @param {List[TreeNode]} nodes\n    # @return {TreeNode}\n    def filterInternal(self, root, nodes):\n        if not root:\n            return root\n        if not root.left and not root.right:\n            return root\n        if not nodes:\n            return root\n        if root.val not in nodes:\n            return root\n        node = root\n        while node:\n            if node.val in nodes:\n                node = root\n            else:\n                node = node.left if node.left else node.right\n        return root\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.left.right.left = TreeNode(6)\n    root.left.right.right = TreeNode(7)\n    root.right.left = TreeNode(8)\n    root.right.right = TreeNode(9)\n    root.right.right.left = TreeNode(10)\n    root.right.right.right = TreeNode(11)\n    root.right.right.right.left = TreeNode(12)\n    root.right.right.right.right = TreeNode(13)\n    root.right.right.right.right.left = TreeNode(14)\n    root.right.right.right.right.right = TreeNode(15)\n    root.right.right.right.right.right.left = TreeNode(16)\n    root.right.right.right.right.right.right = TreeNode(17)\n    root.right.right.right.right.right.right.left = TreeNode(18)\n    root.right.right.right.right.right.right.right = TreeNode(19)\n    root.right"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Definition for a dictionary.\nclass Dict:\n    def __init__(self, pairs):\n        \"\"\"\n        :type pairs: List[Tuple[str, int]]\n        \"\"\"\n        self.pairs = pairs\n\nclass Solution:\n    def filterDict(self, dict, val):\n        \"\"\"\n        :type dict: Dict\n        :type val: int\n        :rtype: Dict\n        \"\"\"\n        if not dict:\n            return dict\n        for k, v in dict.pairs:\n            if v == val:\n                dict.pairs.remove((k, v))\n        return dict"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Definition for a  dictionary node.\nclass DictNode:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def __str__(self):\n        return str(self.val)\n\n    def __repr__(self):\n        return str(self.val)\n\n\nclass Solution:\n    def filter(self, root: DictNode, k: int) -> DictNode:\n        \"\"\"\n        Use a recursive solution.\n        \"\"\"\n        if root is None:\n            return None\n        if root.val == k:\n            return root\n        elif root.val < k:\n            return self.filter(root.right, k)\n        else:\n            return self.filter(root.left, k)\n\n    def filter2(self, root: DictNode, k: int) -> DictNode:\n        \"\"\"\n        Use a recursive solution.\n        \"\"\"\n        if root is None:\n            return None\n        if root.val == k:\n            return root\n        elif root.val < k:\n            return self.filter2(root.right, k)\n        else:\n            return self.filter2(root.left, k)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n\n    k = 4\n    k1 = 3\n    k2 = 5\n    k3 = 7\n    k4 = 8\n    k5 = 11\n    k6 = 12\n\n    root = DictNode(k1)\n    root.left = DictNode(k2)\n    root.right = DictNode(k3)\n    root.right.left = DictNode(k4)\n    root.right.right = DictNode(k5)\n    root.right.right.left = DictNode(k6)\n\n    print(sol.filter2(root, k))\n\n    root = DictNode(k1)\n    root.left = DictNode(k2)\n    root.right = DictNode(k3)\n    root.right.left = DictNode(k4)\n    root"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\nclass Solution(object):\n    def filterDict(self, filter_dict, word_dict):\n        \"\"\"\n        :type filter_dict: List[str]\n        :type word_dict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        if len(filter_dict) == 0:\n            return word_dict\n        elif len(filter_dict) > len(word_dict):\n            return word_dict\n        res = []\n        for key in word_dict:\n            if key in filter_dict:\n                res.append(key)\n        return res"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/filter-dictionary-by-values\n# https://www.hackerrank.com/challenges/filter-dictionary-by-keys\n# https://www.hackerrank.com/challenges/filter-dictionary-by-keys-and-values\n\n\ndef filter_dictionary(dictionary):\n    \"\"\"\n    :type dictionary: dict\n    :rtype: dict\n    \"\"\"\n    # Create a new dictionary with only the values that are in the dictionary.\n    filtered_dictionary = {}\n    for key in dictionary:\n        if dictionary[key] in filtered_dictionary:\n            continue\n        filtered_dictionary[key] = dictionary[key]\n\n    return filtered_dictionary\n\n\nif __name__ == \"__main__\":\n    # TODO: Write the program using the given functions.\n    # The program should filter the dictionary created in the previous exercise.\n    dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}\n    print(filter_dictionary(dictionary))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def filterDict(self, filterDict, targetDict):\n        \"\"\"\n        :type filterDict: List[Tuple[int, int]]\n        :type targetDict: List[Tuple[int, int]]\n        :rtype: List[Tuple[int, int]]\n        \"\"\"\n        def get_index(key):\n            for i, v in enumerate(filterDict):\n                if v[0] == key:\n                    return i\n            return -1\n\n        def get_value(key):\n            for i, v in enumerate(filterDict):\n                if v[0] == key:\n                    return v[1]\n            return 0\n\n        return [t for t in targetDict if get_index(t[0])!= -1 and get_value(t[0]) == t[1]]"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/dict-filtering/problem\n\ndef filter_dict(dictionary, filter_values):\n    return {k: v for k, v in dictionary.items() if v in filter_values}\n\nif __name__ == '__main__':\n    dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    filter_values = {2, 3}\n\n    print(filter_dict(dictionary, filter_values))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# Definition for a dictionary.\nclass Dict:\n    def __init__(self, word_dict):\n        \"\"\"\n        :type word_dict: dict[str, int]\n        \"\"\"\n        self.word_dict = word_dict\n\n    def filter(self, values):\n        \"\"\"\n        :type values: List[str]\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for value in values:\n            if value in self.word_dict:\n                result.append(value)\n        return result\n\nclass Solution:\n    def filterDict(self, dict, values):\n        \"\"\"\n        :type dict: Dict\n        :type values: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for value in values:\n            if value in dict:\n                res.append(value)\n        return res"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from collections import OrderedDict\nfrom collections import defaultdict\nimport random\n\nclass Solution(object):\n    def filter_values(self, nums, k, nums2):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        random.shuffle(nums)\n        nums2.sort()\n        res = []\n        for i in range(k):\n            if nums2[i] < nums[i]:\n                res.append(nums2[i])\n            else:\n                res.append(nums[i])\n        return res\n\n# Note:\n# 1. It's okay to use defaultdict instead of OrderedDict, because the values are always sorted\n# 2. It's okay to use a random list instead of a fixed list, because the values are always sorted"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @param values, a list of integers\n    # @return a tree node\n    def filter_tree(self, root, values):\n        if not root:\n            return None\n        if not root.left and not root.right:\n            if values[root.val] == 1:\n                return root\n            return None\n        if root.left:\n            self.filter_tree(root.left, values)\n        if root.right:\n            self.filter_tree(root.right, values)\n        if values[root.val] == 1:\n            return root\n        return None\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\nroot.right.left = TreeNode(6)\nroot.right.right = TreeNode(7)\nroot.right.right.left = TreeNode(8)\nroot.right.right.right = TreeNode(9)\nroot.right.right.right.left = TreeNode(10)\nroot.right.right.right.right = TreeNode(11)\nroot.right.right.right.right.left = TreeNode(12)\nroot.right.right.right.right.right = TreeNode(13)\nroot.right.right.right.right.right.left = TreeNode(14)\nroot.right.right.right.right.right.right = TreeNode(15)\nroot.right.right.right.right.right.right.left = TreeNode(16)\nroot.right.right.right.right.right.right.right = TreeNode(17)\nroot.right.right.right.right.right.right.right.left = TreeNode(18)\nroot.right.right.right.right.right.right.right.right.left = TreeNode(19)\nroot.right.right."
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/dictionary-lookup\n\n# Complete the filterDictionary function below.\ndef filterDictionary(dict, key):\n    if key in dict:\n        return dict[key]\n    else:\n        return None\n\n\nif __name__ == '__main__':\n    dict = {'a': 1, 'b': 2, 'c': 3}\n    print(filterDictionary(dict, 'a'))\n    print(filterDictionary(dict, 'z'))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def filter_values(dictionary, values):\n    \"\"\"\n    Given a dictionary and a list of values, return a new dictionary with the values\n    of the dictionary filtered based on the values list.\n    >>> filter_values({1:2, 3:4}, [1, 3])\n    {1: 2, 3: 4}\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value in values:\n            filtered_dict[key] = value\n    return filtered_dict\n\ndef main():\n    \"\"\"\n    >>> filter_values({1:2, 3:4}, [1, 3])\n    {1: 2, 3: 4}\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Definition for a dictionary.\nclass Dict(object):\n    def __init__(self, pairs):\n        \"\"\"\n        :type pairs: List[Tuple[str, str]]\n        \"\"\"\n        self.pairs = pairs\n\n    def __getitem__(self, key):\n        return self.pairs[key]\n\n# Your Dict object will be instantiated and called as such:\n# obj = Dict(pairs)\n# param_1 = obj[key]\n# param_2 = obj.get(key)\n# param_3 = obj.pairs[key]"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/filter-and-return-unique-subsets/discuss/56637/Python-solution-using-dynamic-programming\n\n# For each dictionary element, we can have the following four possibilities:\n# 1. The element is a subset of the target.\n# 2. The element is a superset of the target.\n# 3. The element is a subset of the target, but the element is not the same as the target.\n# 4. The element is a superset of the target, but the element is not the same as the target.\n# So, we can write a function to filter the dictionary and return all unique subsets.\n# The problem is, we can only filter the subset or superset of the target.\n# We can write a function to filter the subset or superset of the target, but we need to be careful.\n# If the target is the subset of the target, we can simply return the target.\n# If the target is the superset of the target, we can simply return the target.\n# If the target is the subset of the target, but the target is not the same as the target,\n# we can return the target, and then filter the subset of the target.\n# If the target is the superset of the target, but the target is not the same as the target,\n# we can return the target, and then filter the superset of the target.\n#\n# Example:\n# Given the dictionary:\n# {1: [1], 2: [2], 3: [3, 3, 3], 4: [4], 5: [5, 5]}\n# and the target set: [1, 2, 3], return all unique subsets.\n#\n# Note:\n# The number of elements in the target set is in the range [0, 10^4].\n# The number of elements in each dictionary element is in the range [0, 10^5].\n# The size of the target set is in the range [0, 10^5].\n# The size of the dictionary will not exceed 10^5.\n# The target set, the dictionary element, and the output are all in sorted order.\n#\n# Tags: Dynamic Programming\n# Similar Problems: (M) All Subsets\n#\n# Author: X"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "# https://github.com/pyspark/pyspark/blob/master/python/pyspark/sql/dataframe.py\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import Row\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.types import *\n\nimport sys\nsys.path.append(\"../../../\")\n\nsc = SparkSession.builder.appName(\"PythonSparkSqlExamples-Filter\").getOrCreate()\n\n# Create the dataframe\ndata = sc.parallelize([Row(name=\"Alice\", age=2, city=\"San Francisco\", timezone=-8),\n                       Row(name=\"Bob\", age=5, city=\"New York\", timezone=7),\n                       Row(name=\"Charlie\", age=3, city=\"Tokyo\", timezone=8)])\n\n# Create the schema\nschema = StructType([StructField(\"name\", StringType(), True),\n                     StructField(\"age\", IntegerType(), True),\n                     StructField(\"city\", StringType(), True),\n                     StructField(\"timezone\", IntegerType(), True)])\n\n# Create the dataframe\ndf = data.toDF(schema)\n\n# Create the filter function\nfilter_func = FilterFunction(\"city\", lambda city: city.lower() == \"new york\")\n\n# Apply the filter function\ndf = df.withColumn(\"name\", filter_func(\"name\"))\n\n# Write the dataframe to file\ndf.write.json(\"data/output.json\")\n\n# Read the dataframe from file\ndf2 = sc.read.json(\"data/output.json\")\n\n# Print the dataframe\ndf2.printSchema()\n\n# Print the dataframe\ndf2.show()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef filter_dict(dictionary, filter_function):\n    \"\"\"\n    Filter a dictionary based on values.\n\n    :param dictionary: A dictionary.\n    :param filter_function: A function that takes a key and value, and returns True if the value is to be kept.\n    :return: A new dictionary.\n    \"\"\"\n    filtered_dictionary = defaultdict(dict)\n    for key, value in dictionary.items():\n        if filter_function(key, value):\n            filtered_dictionary[key][value] = dictionary[key][value]\n    return filtered_dictionary"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, values):\n    return {k: v for k, v in dictionary.items() if v in values}"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, filter_values):\n    \"\"\"\n    :type dictionary: dict\n    :type filter_values: list\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value in filter_values:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "import collections\n\ndef filter_values(dictionary, values):\n    filtered_dictionary = collections.OrderedDict()\n    for key in dictionary:\n        if key in values:\n            filtered_dictionary[key] = dictionary[key]\n    return filtered_dictionary\n\ndef main():\n    dictionary = {'a': 1, 'b': 2, 'c': 3}\n    values = [2, 1, 3]\n    filtered_dictionary = filter_values(dictionary, values)\n    print(filtered_dictionary)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, keys):\n    \"\"\"\n    :type dictionary: dict\n    :type keys: list\n    :rtype: dict\n    \"\"\"\n    return {k: dictionary[k] for k in keys}\n\nif __name__ == '__main__':\n    dictionary = {'a': 1, 'b': 2, 'c': 3}\n    keys = ['a', 'b', 'c']\n    assert filter_dict(dictionary, keys) == {'a': 1, 'b': 2}"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    filtered_dictionary = {}\n    for key, value in dictionary.items():\n        if value in values:\n            filtered_dictionary[key] = value\n    return filtered_dictionary"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "import collections\n\ndef filter_dict(dictionary, filter_values):\n    \"\"\"\n    Write a function that filters a dictionary based on values.\n    :param dictionary: the dictionary to filter\n    :param filter_values: a list of values to filter the dictionary with\n    :return: the filtered dictionary\n    \"\"\"\n    filtered_dictionary = collections.OrderedDict()\n    for key in dictionary:\n        if dictionary[key] in filter_values:\n            filtered_dictionary[key] = dictionary[key]\n    return filtered_dictionary"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def filter_dictionary(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[int]\n    :rtype: dict\n    \"\"\"\n    result = {}\n    for key in dictionary:\n        if dictionary[key] in values:\n            result[key] = dictionary[key]\n    return result"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def filter_values(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value in values}"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def filter_dict(dict_to_filter, filter_dict):\n    \"\"\"\n    :type dict_to_filter: dict\n    :type filter_dict: dict\n    :rtype: dict\n    \"\"\"\n    filtered_dict = dict()\n    for key in filter_dict:\n        if key in dict_to_filter:\n            if filter_dict[key] == dict_to_filter[key]:\n                filtered_dict[key] = dict_to_filter[key]\n    return filtered_dict\n\nif __name__ == '__main__':\n    dict_to_filter = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n    filter_dict(dict_to_filter, {'key1': 'value1', 'key3': 'value3'})"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "import collections\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def filter(self, root: TreeNode, values: list[int]) -> TreeNode:\n        if not root:\n            return None\n        \n        values = sorted(values)\n        \n        if not root.val in values:\n            return root\n        \n        if not root.left and not root.right:\n            return None\n        \n        if not root.left:\n            return self.filter(root.right, values)\n        elif not root.right:\n            return self.filter(root.left, values)\n        \n        curr = root.left\n        while curr:\n            if curr.val in values:\n                return curr\n            curr = curr.right\n        \n        curr = root.right\n        while curr:\n            if curr.val in values:\n                return curr\n            curr = curr.left\n        \n        return None"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    return {k: v for k, v in dictionary.items() if k in values}\n\nif __name__ == '__main__':\n    dictionary = {'a': 1, 'b': 2, 'c': 3}\n    values = ['a', 'b']\n    assert filter_dict(dictionary, values) == {'a': 1, 'b': 2}"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n# Your FilterDict class should implement a filter function that takes in\n# a dictionary and returns a list of keys.\nclass FilterDict(object):\n    def __init__(self, dictionary):\n        self.dictionary = dictionary\n\n    def filter(self, values):\n        return [key for key in self.dictionary.keys() if self.dictionary[key] in values]\n\n\n# Your filterDictionary function should take in a dictionary and return a new dictionary.\ndef filterDictionary(dictionary):\n    newDictionary = defaultdict(list)\n\n    for key in dictionary:\n        if dictionary[key] in dictionary:\n            newDictionary[key].append(dictionary[key])\n\n    return newDictionary\n\nif __name__ == \"__main__\":\n    dictionary = {\"a\": [\"a\", \"b\", \"c\"], \"b\": [\"d\", \"e\", \"f\"], \"c\": [\"g\", \"h\", \"i\"]}\n    f = FilterDict(dictionary)\n    print f.filter([])\n    print f.filter([\"a\", \"b\"])\n    print f.filter([\"b\", \"c\"])\n    print f.filter([\"a\", \"c\"])\n    print f.filter([\"b\", \"c\"])\n    print f.filter([\"a\", \"b\", \"c\"])\n    print f.filter([\"a\", \"b\", \"c\", \"d\"])"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "# https://www.geeksforgeeks.org/write-a-function-to-filter-a-dictionary-based-on-values/\n\ndef filter_dictionary(dictionary, values):\n    filtered = {}\n    for key, value in dictionary.items():\n        if value in values:\n            filtered[key] = value\n    return filtered\n\nif __name__ == '__main__':\n    dictionary = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}\n    values = [1, 2, 4]\n    filtered = filter_dictionary(dictionary, values)\n    print(filtered)\n    print(dictionary)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef filter_dict(dictionary, filter_value):\n    \"\"\"\n    Given a dictionary and a value, return a dictionary\n    with all the entries from the dictionary filtered by\n    the value.\n    \"\"\"\n    new_dictionary = {}\n    for key, value in dictionary.items():\n        if value == filter_value:\n            new_dictionary[key] = value\n    return new_dictionary\n\ndef filter_dict_by_count(dictionary, filter_value):\n    \"\"\"\n    Given a dictionary and a value, return a dictionary\n    with all the entries from the dictionary filtered by\n    the value.\n    \"\"\"\n    new_dictionary = {}\n    for key, value in dictionary.items():\n        if value == filter_value:\n            new_dictionary[key] = value\n    return new_dictionary\n\ndef filter_dict_by_key(dictionary, filter_value):\n    \"\"\"\n    Given a dictionary and a value, return a dictionary\n    with all the entries from the dictionary filtered by\n    the value.\n    \"\"\"\n    new_dictionary = {}\n    for key, value in dictionary.items():\n        if key == filter_value:\n            new_dictionary[key] = value\n    return new_dictionary\n\ndef filter_dict_by_value(dictionary, filter_value):\n    \"\"\"\n    Given a dictionary and a value, return a dictionary\n    with all the entries from the dictionary filtered by\n    the value.\n    \"\"\"\n    new_dictionary = {}\n    for key, value in dictionary.items():\n        if value == filter_value:\n            new_dictionary[key] = value\n    return new_dictionary\n\ndef filter_dict_by_count_and_key(dictionary, filter_value):\n    \"\"\"\n    Given a dictionary and a value, return a dictionary\n    with all the entries from the dictionary filtered by\n    the value.\n    \"\"\"\n    new_dictionary = {}\n    for key, value in dictionary.items():\n        if value == filter_value:\n            new_dictionary[key] = value\n    return new_dictionary\n\ndef filter_dict_by_count_and_value(dictionary"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def filter_dict(dict_, filter_dict):\n    \"\"\"\n    filter_dict(dict_, filter_dict) -> dict\n\n    Input:\n        dict_: a dictionary\n        filter_dict: a dictionary of keys to values to filter the dictionary by.\n\n    Output:\n        a filtered dictionary\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict_.items():\n        if key in filter_dict:\n            if filter_dict[key] == value:\n                filtered_dict[key] = value\n    return filtered_dict"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "import collections\n\ndef filter_dict(dictionary, filter_values):\n    \"\"\"\n    Return a new dictionary with values from dictionary that have values in filter_values.\n    \"\"\"\n    if isinstance(filter_values, collections.Iterable):\n        filtered_dictionary = {}\n        for key, value in dictionary.items():\n            if value in filter_values:\n                filtered_dictionary[key] = value\n        return filtered_dictionary\n    else:\n        return {key: value for key, value in dictionary.items() if value in filter_values}\n\nif __name__ == \"__main__\":\n    dictionary = {\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n       'six': 6,\n       'seven': 7,\n        'eight': 8,\n        'nine': 9,\n        'ten': 10,\n        'eleven': 11,\n        'twelve': 12,\n        'thirteen': 13,\n        'fourteen': 14,\n        'fifteen': 15,\n       'sixteen': 16,\n       'seventeen': 17,\n        'eighteen': 18,\n        'nineteen': 19,\n        'twenty': 20,\n        'thirty': 30,\n        'forty': 40,\n        'fifty': 50,\n       'sixty': 60,\n       'seventy': 70,\n        'eighty': 80,\n        'ninety': 90,\n    }\n\n    print(filter_dict(dictionary, [20, 30, 40, 50]))\n    print(filter_dict(dictionary, [20, 30]))\n    print(filter_dict(dictionary, [20, 30, 40]))\n    print(filter_dict(dictionary, [20, 30, 40, 50]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    filtered_dictionary = {}\n\n    for key, value in dictionary.items():\n        if value in values:\n            filtered_dictionary[key] = value\n\n    return filtered_dictionary"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, filter_values):\n    \"\"\"\n    :type dictionary: dict\n    :type filter_values: list\n    :rtype: dict\n    \"\"\"\n    filtered_dictionary = {}\n    for key, value in dictionary.items():\n        if value in filter_values:\n            filtered_dictionary[key] = value\n    return filtered_dictionary"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def filter_dict(dict_, filter_dict):\n    \"\"\"\n    :type dict_: dict\n    :type filter_dict: dict\n    :rtype: dict\n    \"\"\"\n    # This solution is different from the solution of the other problem.\n    # Because we can't use the filter function to filter a dictionary,\n    # we need to make a copy of the dictionary.\n    # Then, we can use the filter function to filter the copy.\n    #\n    # Time complexity: O(n)\n    filtered_dict = dict(filter_dict)\n    filtered_dict.update({k: dict_[k] for k in filter_dict})\n    return filtered_dict\n\n\nif __name__ == '__main__':\n    # This problem is a bit harder to solve.\n    #\n    # The main idea is to use a dictionary to filter the dictionary.\n    #\n    # Here's an example.\n    #\n    # Input:\n    #   {\"a\": \"a\", \"b\": \"b\", \"c\": \"c\"}\n    #   {\"a\": \"a\", \"c\": \"c\"}\n    #\n    # Output:\n    #   {\"a\": \"a\", \"c\": \"c\"}\n    #\n    # Note:\n    #   We can't use filter function to filter a dictionary.\n    #   We need to make a copy of the dictionary.\n    #   Then, we can use the filter function to filter the copy.\n    #\n    #   Also, we can't use filter function to filter a dictionary.\n    #   We need to make a copy of the dictionary.\n    #   Then, we can use the filter function to filter the copy.\n    #\n    #   Therefore, we can use the filter function to filter a dictionary.\n    #\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    filter_dict({'a': 'a', 'b': 'b', 'c': 'c'}, {'a': 'a', 'c': 'c'})\n    filter_dict({'a': 'a', 'b': 'b', 'c': 'c'}, {'a': 'a', 'c': 'c'})\n    filter_"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "import collections\n\ndef filter_dict(dictionary, keys):\n    \"\"\"\n    :param dictionary: A dictionary, which values are to be filtered.\n    :param keys: A list of keys to filter.\n    :return: A new dictionary, which values are filtered.\n    \"\"\"\n    return {\n        key: dictionary[key]\n        for key in keys\n        if dictionary[key]\n    }\n\ndef main():\n    \"\"\"\n    Write a function to filter a dictionary based on values.\n    \"\"\"\n    dictionary = {\n        'name': 'John',\n        'age': 21,\n        'height': 1.8,\n        'weight': 180,\n        'address': 'US',\n        'city': 'San Francisco',\n        'zip': '94107'\n    }\n\n    result = filter_dict(dictionary, ['name', 'address'])\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# Your function will be called like this:\n# for each_key, each_value in dictionary.iteritems():\n#     filter_func(each_key, each_value)\n\ndef filter_dictionary(dictionary, filter_func):\n    \"\"\"\n    :type dictionary: dict\n    :rtype: dict\n    \"\"\"\n    for key in dictionary.keys():\n        if filter_func(key, dictionary[key]):\n            del dictionary[key]\n    return dictionary\n\n\ndef filter_dictionary2(dictionary, filter_func):\n    \"\"\"\n    :type dictionary: dict\n    :rtype: dict\n    \"\"\"\n    for key in dictionary.keys():\n        if filter_func(key, dictionary[key]):\n            del dictionary[key]\n    return dictionary\n\n\nif __name__ == '__main__':\n    dictionary = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n    filter_func = lambda x, y: x == 'key1'\n    print filter_dictionary(dictionary, filter_func)\n    print filter_dictionary2(dictionary, filter_func)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, filter_func):\n    \"\"\"\n    Filter a dictionary based on values.\n    :type dictionary: dict\n    :type filter_func: (dict, list) -> bool\n    :rtype: dict\n    \"\"\"\n    for key in dictionary:\n        if not filter_func(dictionary, key):\n            del dictionary[key]\n    return dictionary"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def filter_by_value(dictionary, value):\n    \"\"\"\n    :type dictionary: dict\n    :type value: int\n    :rtype: dict\n    \"\"\"\n    return {k: v for k, v in dictionary.items() if v == value}\n\nif __name__ == '__main__':\n    dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    print(filter_by_value(dictionary, 2))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\ndef filter_dict(dictionary, filter_value):\n    \"\"\"\n    dictionary: a dictionary\n    filter_value: a value to be filtered out\n    \"\"\"\n\n    return {key: value for key, value in dictionary.items()\n            if value!= filter_value}\n\n\nif __name__ == '__main__':\n\n    dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    filter_dict(dictionary, 'a')\n    print(dictionary)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param {Dictionary} dict\n    # @param {list} values\n    # @return {list}\n    def filterDict(self, dict, values):\n        result = []\n        for key in dict:\n            if dict[key] not in values:\n                continue\n            result.append(key)\n        return result"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import collections\n\nclass FilterDict(object):\n    \"\"\"\n    A filter dictionary object.\n    \"\"\"\n\n    def __init__(self, dct):\n        self.dct = dct\n\n    def __iter__(self):\n        return iter(self.dct.items())\n\n    def __getitem__(self, key):\n        return self.dct[key]\n\n    def __len__(self):\n        return len(self.dct)\n\n    def __contains__(self, item):\n        return item in self.dct\n\n    def __getattr__(self, name):\n        return self.dct[name]\n\n    def get(self, key, default=None):\n        return self.dct.get(key, default)\n\n    def filter(self, func):\n        return FilterDict(collections.defaultdict(func, self.dct))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def filter_dict(dict_obj, filter_dict):\n    if filter_dict is None:\n        return dict_obj\n\n    filtered_dict = {}\n    for key in filter_dict:\n        if dict_obj.get(key) == filter_dict[key]:\n            filtered_dict[key] = dict_obj[key]\n\n    return filtered_dict\n\ndef filter_dict_test():\n    test_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\n    test_dict_filtered = filter_dict(test_dict, {'a': 1, 'c': 3})\n\n    assert test_dict_filtered == {'a': 1, 'c': 3}\n\ndef filter_dict_test2():\n    test_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\n    test_dict_filtered = filter_dict(test_dict, {'a': 1, 'c': 3, 'd': 4})\n\n    assert test_dict_filtered == {'c': 3, 'd': 4}"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "import collections\n\nclass FilterDict(object):\n    def __init__(self, dic):\n        self.dic = dic\n    def filter(self, values):\n        new_dic = collections.OrderedDict()\n        for key, value in self.dic.items():\n            if value in values:\n                new_dic[key] = value\n        return new_dic"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None, parent=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.parent = parent\n\n\nclass Solution:\n    # @param root, a tree node\n    # @param values, a list of integer\n    # @return a tree node\n    def filter(self, root, values):\n        if not root:\n            return root\n        if not values or root.val not in values:\n            return root\n        if len(values) == 1 and root.val == values[0]:\n            return root\n        if root.val in values:\n            root.left = self.filter(root.left, values)\n            root.right = self.filter(root.right, values)\n        return root"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from collections import OrderedDict\n\ndef filter_dict(dictionary, filter_values):\n    \"\"\"\n    :type dictionary: dict\n    :type filter_values: list\n    :rtype: dict\n    \"\"\"\n    filtered_dictionary = OrderedDict()\n    for key, value in dictionary.items():\n        if value in filter_values:\n            filtered_dictionary[key] = value\n    return filtered_dictionary\n\ndef main():\n    \"\"\"\n    Use filter_dict() to filter a dictionary.\n    \"\"\"\n    dictionary = OrderedDict()\n    dictionary[1] = \"a\"\n    dictionary[2] = \"b\"\n    dictionary[3] = \"c\"\n    dictionary[4] = \"d\"\n    dictionary[5] = \"e\"\n    dictionary[6] = \"f\"\n    dictionary[7] = \"g\"\n    dictionary[8] = \"h\"\n    dictionary[9] = \"i\"\n    dictionary[10] = \"j\"\n    dictionary[11] = \"k\"\n    dictionary[12] = \"l\"\n    dictionary[13] = \"m\"\n    dictionary[14] = \"n\"\n    dictionary[15] = \"o\"\n    dictionary[16] = \"p\"\n    dictionary[17] = \"q\"\n    dictionary[18] = \"r\"\n    dictionary[19] = \"s\"\n    dictionary[20] = \"t\"\n    dictionary[21] = \"u\"\n    dictionary[22] = \"v\"\n    dictionary[23] = \"w\"\n    dictionary[24] = \"x\"\n    dictionary[25] = \"y\"\n    dictionary[26] = \"z\"\n    dictionary[27] = \"0\"\n    dictionary[28] = \"1\"\n    dictionary[29] = \"2\"\n    dictionary[30] = \"3\"\n    dictionary[31] = \"4\"\n    dictionary[32] = \"5\"\n    dictionary[33] = \"6\"\n    dictionary[34] = \"7\""
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def filter_tree(self, root, values):\n        \"\"\"\n        :type root: TreeNode\n        :type values: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return None\n        if not values:\n            return root\n        if root.val in values:\n            return root\n        if root.val not in values:\n            return self.filter_tree(root.left, values)\n        if root.val in values:\n            return self.filter_tree(root.right, values)\n        return root\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    values = [1,2,3,4,5,6,7]\n    print Solution().filter_tree(root, values)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def filter_values(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[int]\n    :rtype: dict\n    \"\"\"\n    filtered_dictionary = {}\n    for key, value in dictionary.items():\n        if value in values:\n            filtered_dictionary[key] = value\n    return filtered_dictionary"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import collections\n\nfrom typing import Dict, List\n\n\ndef filter_dict(dictionary: Dict[str, int], filter_dict: Dict[str, int]) -> Dict[str, int]:\n    \"\"\"\n    :param dictionary: A dictionary\n    :param filter_dict: A dictionary of the same key/value pairs\n    :return: A dictionary of the same key/value pairs\n    \"\"\"\n    filtered_dict = {}\n    for key in filter_dict:\n        if key in dictionary:\n            filtered_dict[key] = dictionary[key]\n\n    return filtered_dict\n\n\ndef test_filter_dict():\n    dictionary = collections.OrderedDict(\n        [(\"A\", 1), (\"B\", 2), (\"C\", 3), (\"D\", 4)]\n    )\n    filter_dict = collections.OrderedDict(\n        [(\"A\", 1), (\"C\", 3), (\"D\", 4)]\n    )\n    assert filter_dict == filter_dict\n    assert filter_dict == filter_dict\n\n\nif __name__ == \"__main__\":\n    test_filter_dict()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, filter_value):\n    filtered_dict = {}\n    for key in dictionary:\n        if dictionary[key] == filter_value:\n            filtered_dict[key] = dictionary[key]\n    return filtered_dict\n\n\ndef main():\n    dictionary = {'a': 1, 'b': 2, 'c': 3}\n    filtered_dict = filter_dict(dictionary, 3)\n    print filtered_dict\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef filter_dict(dictionary, filter_func):\n    \"\"\"\n    :type dictionary: dict\n    :type filter_func: function\n    :rtype: dict\n    \"\"\"\n    new_dictionary = defaultdict(list)\n    for k, v in dictionary.items():\n        if filter_func(k, v):\n            new_dictionary[k].append(v)\n    return new_dictionary"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, values):\n    \"\"\"\n    Return a dictionary where the keys are the elements of values and the values\n    are False if the key is not in the dictionary or if the value is not in values.\n    :param dictionary: a dictionary\n    :param values: a list of values\n    :return: a filtered dictionary\n    \"\"\"\n    result = {}\n    for key in values:\n        if key in dictionary:\n            if dictionary[key] in values:\n                result[key] = True\n    return result\n\ndef test():\n    dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n    result = filter_dict(dictionary, [1, 2, 3])\n    print(result)\n    assert result == {'a': True, 'b': True, 'c': True, 'd': True, 'e': True, 'f': True}\n    result = filter_dict(dictionary, [2, 3, 4, 5, 6, 7])\n    print(result)\n    assert result == {'a': True, 'b': True, 'c': True, 'd': True, 'e': True, 'f': True}\n    result = filter_dict(dictionary, [5, 6, 7])\n    print(result)\n    assert result == {'a': False, 'b': False, 'c': False, 'd': False, 'e': False, 'f': False}\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# https://www.tutorialspoint.com/python/python_dictionary.htm\n\n# input\n# {'a': 1, 'b': 2, 'c': 3}\n# output\n# {'a': 1}\n# {'b': 2}\n# {'c': 3}\n# {'d': 4}\n\ndef filter_dictionary(dictionary, values):\n    result = {}\n    for key, value in dictionary.items():\n        if value in values:\n            result[key] = value\n    return result\n\nif __name__ == '__main__':\n    dictionary = {'a': 1, 'b': 2, 'c': 3}\n    values = {'a': 1, 'b': 2}\n    result = filter_dictionary(dictionary, values)\n    print(result)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def filter_dict(d, k, v):\n    \"\"\"\n    :type d: dict\n    :type k: str\n    :type v: list\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for kk, vv in d.items():\n        if kk == k and vv in v:\n            filtered_dict[kk] = vv\n    return filtered_dict\n\ndef filter_dict_2(d, k, v):\n    \"\"\"\n    :type d: dict\n    :type k: str\n    :type v: list\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for kk, vv in d.items():\n        if kk == k and vv in v:\n            filtered_dict[kk] = vv\n    return filtered_dict\n\ndef filter_dict_3(d, k, v):\n    \"\"\"\n    :type d: dict\n    :type k: str\n    :type v: list\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for kk, vv in d.items():\n        if kk == k:\n            filtered_dict[kk] = vv\n    return filtered_dict\n\nif __name__ == '__main__':\n    d = {'a': 'a', 'b': 'b', 'c': 'c'}\n    print filter_dict(d, 'a', ['a', 'b'])\n    print filter_dict(d, 'c', ['c'])\n    print filter_dict(d, 'a', ['a', 'b', 'c'])\n    print filter_dict(d, 'b', ['b', 'c'])\n    print filter_dict(d, 'a', ['a', 'b', 'c'])\n    print filter_dict(d, 'c', ['c'])\n    print filter_dict(d, 'a', ['a', 'b', 'c'])\n    print filter_dict(d, 'b', ['b', 'c'])\n    print filter_dict(d, 'a', ['a', 'b', 'c'])\n    print filter"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import collections\n\nclass FilterDict(collections.Mapping):\n    def __init__(self, d):\n        self._dict = d\n\n    def __getitem__(self, key):\n        if key in self._dict:\n            return self._dict[key]\n        else:\n            raise KeyError\n\n    def __iter__(self):\n        for key in self._dict:\n            yield key\n\n    def __len__(self):\n        return len(self._dict)\n\n    def __str__(self):\n        return str(self._dict)\n\n    def __repr__(self):\n        return str(self._dict)\n\n    def __contains__(self, key):\n        return key in self._dict\n\n    def __eq__(self, other):\n        return self._dict == other._dict\n\n    def __ne__(self, other):\n        return self._dict!= other._dict"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import re\n\ndef filter_dict(dictionary, filter_dict):\n    \"\"\"\n    Return a new dictionary with only the values in filter_dict.\n    \"\"\"\n    new_dict = {}\n    for key in dictionary:\n        if key in filter_dict:\n            new_dict[key] = dictionary[key]\n    return new_dict\n\n\ndef filter_dict_match(dictionary, filter_dict):\n    \"\"\"\n    Return a new dictionary with only the values in filter_dict.\n    \"\"\"\n    new_dict = {}\n    for key in dictionary:\n        if re.match(filter_dict, key):\n            new_dict[key] = dictionary[key]\n    return new_dict"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, filter_func):\n    \"\"\"\n    Filter a dictionary using a filter function.\n    \"\"\"\n    filtered_dictionary = {}\n    for key in dictionary:\n        if filter_func(dictionary[key]):\n            filtered_dictionary[key] = dictionary[key]\n    return filtered_dictionary"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def filter_dict(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[int]\n    :rtype: dict\n    \"\"\"\n    result = {}\n    for key, value in dictionary.items():\n        if value in values:\n            result[key] = value\n    return result"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def filter_dictionary(dictionary, values):\n    \"\"\"\n    Write a function to filter a dictionary based on values.\n    :param dictionary: a dictionary\n    :param values: a list of values\n    :return: a new dictionary\n    \"\"\"\n    return {k: v for k, v in dictionary.items() if k in values}\n\nif __name__ == '__main__':\n    dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    print(filter_dictionary(dictionary, [1, 2, 3]))\n    dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    print(filter_dictionary(dictionary, [1, 2, 3]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import collections\n\ndef filter_dict(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: collections.Iterable[str]\n    :rtype: dict\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value in values}"
    },
    {
      "rank": 67,
      "score": 2.0,
      "candidate": "# Definition for a dictionary.\nclass Dictionary(object):\n    def __init__(self, wordList):\n        \"\"\"\n        Initialize your data structure here.\n        :type wordList: List[str]\n        \"\"\"\n        self.dic = {}\n        for w in wordList:\n            self.dic[w] = 1\n\n    def search(self, query):\n        \"\"\"\n        Returns if the dict contains an entry for the given key.\n        :type query: str\n        :rtype: bool\n        \"\"\"\n        return query in self.dic\n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the data structure.\n        :type word: str\n        \"\"\"\n        if word in self.dic:\n            self.dic[word] += 1\n        else:\n            self.dic[word] = 1\n\n    def delete(self, word):\n        \"\"\"\n        Delete a word from the data structure.\n        :type word: str\n        \"\"\"\n        if word in self.dic:\n            if self.dic[word] == 1:\n                del self.dic[word]\n            else:\n                self.dic[word] -= 1\n        else:\n            return False\n\n    def update(self, word, value):\n        \"\"\"\n        Set a value of a key.\n        :type word: str\n        :type value: int\n        \"\"\"\n        if word in self.dic:\n            self.dic[word] = value\n        else:\n            return False\n\n    def getRandomWord(self, wordList):\n        \"\"\"\n        Get a random word from the data structure.\n        :type wordList: List[str]\n        :rtype: str\n        \"\"\"\n        return random.choice(wordList)\n\n    def getRandomWordWithPrefix(self, prefix):\n        \"\"\"\n        Get a random word from the data structure.\n        :type prefix: str\n        :rtype: str\n        \"\"\"\n        return self.getRandomWord(self.dic[prefix])\n\nclass Solution(object):\n    def filterWords(self, dict, wordList):\n        \"\"\"\n        :type dict: Dictionary\n        :type wordList: List"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/filter-strings-in-a-dictionary/\n# Given a dictionary and a list of keys, return the list of values that\n# match the keys.\n#\n# Example\n# Given the following dictionary and keys:\n#\n#     {'a': 1, 'b': 2, 'c': 3}\n#     ['a', 'b']\n#\n# Return:\n#     [1, 2]\n#\n# Explanation:\n# The dictionary contains three keys 'a', 'b', and 'c'.\n# The keys 'a', 'b', and 'c' map to the values 1, 2, and 3, respectively.\n# Because the keys 'a', 'b', and 'c' are present in the dictionary, we\n# return [1, 2].\n#\n# Note:\n# The length of the keys and values will be between 1 and 100.\n# The given keys and values are all strings.\n# The number of keys will not exceed 100.\n# The number of values will not exceed 10,000.\n# The given keys and values are all unique.\n\n# https://leetcode.com/problems/filter-strings-in-a-dictionary/discuss/143047/Python-Dynamic-Programming-Solution-with-O(n)-Time-and-O(n)-Space\nclass Solution(object):\n    def filterDict(self, dict, keys):\n        \"\"\"\n        :type dict: dict[str, int]\n        :type keys: List[str]\n        :rtype: List[int]\n        \"\"\"\n        # Create a set to store the values of each key.\n        # This set will be used to check if the key is already in the dict.\n        values = set()\n\n        # Check if the given keys are all strings.\n        for key in keys:\n            if not isinstance(key, str):\n                return []\n\n        # Create a queue to store all the keys in the dict.\n        # The queue will be used to check if a given key is already in the dict.\n        queue = collections.deque()\n        # Create a set to store the keys in the dict that are not in the queue.\n        # This set will"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "# Your Solution\ndef filter_by_values(dictionary, values):\n    if not values:\n        return dictionary\n    return {key: value for key, value in dictionary.items() if value in values}"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def filter_values(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for num in nums:\n            if num == target:\n                result.append(num)\n        return result"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def filter_dict(dictionary, values):\n    \"\"\"\n    Input: A dictionary and a list of values.\n    Output: A new dictionary with the filtered values.\n    \"\"\"\n    filtered_dictionary = {}\n    for key, value in dictionary.items():\n        if value in values:\n            filtered_dictionary[key] = value\n    return filtered_dictionary\n\ndef filter_list(list_of_values, list_of_values_to_filter):\n    \"\"\"\n    Input: A list of values, and a list of values to filter.\n    Output: A new list of values without the values in the list_of_values_to_filter.\n    \"\"\"\n    filtered_list = []\n    for value in list_of_values:\n        if value not in list_of_values_to_filter:\n            filtered_list.append(value)\n    return filtered_list\n\ndef filter_dict_list(dictionary, values):\n    \"\"\"\n    Input: A dictionary and a list of values.\n    Output: A new dictionary with the filtered values.\n    \"\"\"\n    filtered_dictionary = {}\n    for key, value in dictionary.items():\n        if value in values:\n            filtered_dictionary[key] = value\n    return filtered_dictionary\n\nif __name__ == \"__main__\":\n    dictionary = {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'd': 4,\n        'e': 5\n    }\n    values = [\n        'a',\n        'b',\n        'c',\n        'd',\n        'e'\n    ]\n    filtered_dictionary = filter_dict(dictionary, values)\n    print(filtered_dictionary)\n    print(type(filtered_dictionary))\n\n    filtered_dictionary = filter_dict_list(dictionary, values)\n    print(filtered_dictionary)\n    print(type(filtered_dictionary))\n\n    filtered_list = filter_list(values, values)\n    print(filtered_list)\n    print(type(filtered_list))\n\n    filtered_list = filter_list(values"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\n# class Dict(object):\n#     def __init__(self, data=None):\n#         self._data = data or {}\n#         self._data.clear()\n\nclass Solution(object):\n    def filter(self, filter_dict, word):\n        \"\"\"\n        :type filter_dict: List[str]\n        :type word: str\n        :rtype: List[str]\n        \"\"\"\n        filter_dict = filter_dict if filter_dict else []\n        word = word.lower()\n        ret = []\n        for k, v in filter_dict:\n            if word in k:\n                ret.append(k)\n        return ret"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {dict} dictionary\n    # @param {list} words\n    # @return {list}\n    def filterDict(self, dic, words):\n        res = []\n        for w in words:\n            if w in dic:\n                res.append(w)\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    # dic = {'a': 1, 'b': 2, 'c': 3}\n    # words = ['b', 'a', 'c', 'd', 'e']\n    # print s.filterDict(dic, words)\n    dic = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    words = ['a', 'b', 'c', 'd']\n    print s.filterDict(dic, words)\n    words = ['a', 'b', 'c', 'd', 'e', 'f']\n    print s.filterDict(dic, words)\n    words = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n    print s.filterDict(dic, words)"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "import collections\n\nclass Solution(object):\n    def filterDict(self, filterDict, targetDict):\n        \"\"\"\n        :type filterDict: Dict[Any, Any]\n        :type targetDict: Dict[Any, Any]\n        :rtype: Dict[Any, Any]\n        \"\"\"\n        result = collections.defaultdict(dict)\n        for k, v in filterDict.iteritems():\n            if k in targetDict:\n                result[k][targetDict[k]] = v\n            elif v in targetDict:\n                result[k][targetDict[v]] = v\n        return result\n\nif __name__ == \"__main__\":\n    assert Solution().filterDict({'a': 1, 'b': 2}, {'a': 1, 'c': 3}) == {'a': 1, 'c': 3}\n    assert Solution().filterDict({'a': 1, 'b': 2}, {'b': 2, 'c': 3}) == {'a': 1, 'b': 2}\n    assert Solution().filterDict({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == {'a': 1, 'b': 2}\n    assert Solution().filterDict({'a': 1, 'b': 2}, {'a': 1}) == {'a': 1, 'b': 2}\n    assert Solution().filterDict({'a': 1, 'b': 2}, {'a': 2}) == {}"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def filter_dict(dictionary, keys):\n    \"\"\"\n    :param dictionary: a dictionary\n    :param keys: a list of keys to filter\n    :return: a filtered dictionary\n    \"\"\"\n\n    return {k: v for k, v in dictionary.items() if k in keys}\n\n\ndef filter_list(list_, keys):\n    \"\"\"\n    :param list_: a list\n    :param keys: a list of keys to filter\n    :return: a filtered list\n    \"\"\"\n    return [x for x in list_ if x in keys]"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def filter_dict(dict_to_filter, filter_values):\n    filtered_dict = {}\n    for key, value in dict_to_filter.iteritems():\n        if value in filter_values:\n            filtered_dict[key] = value\n    return filtered_dict\n\n# Sample Inputs & Outputs\n# {'a': '1', 'b': '2', 'c': '3', 'd': '4'}\n# ['a', 'c', 'd']\n# {'a': '1', 'b': '2', 'c': '3'}\n# ['a', 'c']\n# {'a': '1', 'b': '2'}\n# ['a']\n\n# Sample Inputs & Outputs\n# {'a': 1, 'b': 2, 'c': 3}\n# ['a']\n# {'a': 1, 'b': 2}\n# ['a']\n# {'a': 1}\n# ['a']\n\n# Sample Inputs & Outputs\n# {'a': '1', 'b': '2', 'c': '3'}\n# ['a', 'c']\n# {'a': '1', 'b': '2'}\n# ['a', 'c']\n# {'a': '1'}\n# ['a']\n\n# Sample Inputs & Outputs\n# {'a': '1', 'b': '2', 'c': '3', 'd': '4'}\n# ['a', 'c', 'd']\n# {'a': '1', 'b': '2', 'd': '4'}\n# ['a', 'c', 'd']\n# {'a': '1'}\n# ['a']\n\n# Sample Inputs & Outputs\n# {'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5'}\n# ['a', 'c', 'd', 'e']\n# {'a': '1', 'b': '2', 'd': '4', 'e': '5'}\n# ['a', 'c', 'd', 'e']\n# {'a': '1'}"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\n# https://leetcode.com/problems/filter-unique-elements/description/\n# Given a non-empty array of integers, return the k most frequent elements.\n\n# Example:\n\n# Input: nums = [1,1,2], k = 2\n# Output: [1,2]\n# Note:\n\n# 1 <= k <= nums.length <= 10000\n# nums[i]\u00a0is an integer and nums[i] is unique.\n# The value of each nums[i] is guaranteed to be greater than 0.\n# Please optimize your algorithm to use less extra memory.\n\n# Related Topics\n# Hash Table\n# Similar Questions\n# Top K Frequent Elements II\n\n# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def start_inclusive(self):\n        return self.start\n\n    def end_inclusive(self):\n        return self.end\n\n    def length(self):\n        return self.end - self.start\n\nclass Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # Hash Table\n        # HashTable: O(NlogN)\n        # Time Limit Exceeded: O(N)\n        # Space Limit Exceeded: O(N)\n        # Use a hash table to store frequency.\n        # If the frequency is 0, then it means not in the list.\n        # If the frequency is 1, then it means only one element.\n        # If the frequency is 2, then it means two elements.\n        # If the frequency is 3, then it means three elements.\n        # If the frequency is more than 3, then it means more than three elements.\n        # The frequency is stored in a hash table.\n        # Then we can use the hash table to get the top k elements.\n        # The frequency of each element is stored in a dictionary.\n        # If the frequency is 0, then the element is"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def filter_dict(dictionary, filter_dict):\n    return {key: value for key, value in dictionary.items() if filter_dict[key] == value}\n\nfilter_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nfilter_dict = filter_dict.copy()\nfilter_dict.pop('a')\nprint(filter_dict)\n\nfilter_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nfilter_dict = filter_dict.copy()\nfilter_dict.pop('a', 'b', 'c', 'd')\nprint(filter_dict)\n\nfilter_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nfilter_dict = filter_dict.copy()\nfilter_dict.pop('a', 'b', 'c', 'd', 'e')\nprint(filter_dict)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def filter_dictionary(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list\n    :rtype: dict\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value in values}\n\n\n# Your FilterDictionary object will be instantiated and called as such:\n# obj = FilterDictionary(dictionary, values)\n# param_1 = obj.filter_dictionary(dictionary, values)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Definition for a dictionary.\nclass Dict(dict):\n    def __init__(self, init_dict):\n        \"\"\"\n        Initialize your data structure here.\n        :type data: dict\n        \"\"\"\n        super(Dict, self).__init__()\n        for k, v in init_dict.items():\n            self.setdefault(k, [])\n            self[k].append(v)\n\nclass Solution(object):\n    def filterDict(self, filterDict, word):\n        \"\"\"\n        :type filterDict: List[List[str]]\n        :type word: str\n        :rtype: List[str]\n        \"\"\"\n        if not filterDict:\n            return []\n        filtered = []\n        for key in filterDict:\n            filtered_word = []\n            for word_item in key:\n                if word_item in word:\n                    filtered_word.append(word_item)\n            if filtered_word:\n                filtered.append(filtered_word)\n        return filtered\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.filterDict([[1], [2, 3], [4], [1, 2], [3, 4], [1, 2, 3]]))\n    print(sol.filterDict([[1], [2, 3], [4], [1, 2], [3, 4], [1, 2, 3]]))\n    print(sol.filterDict([[1], [2, 3], [4], [1, 2], [3, 4], [1, 2, 3]]))\n    print(sol.filterDict([[1], [2, 3], [4], [1, 2], [3, 4], [1, 2, 3]]))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def filter_tree(self, root: TreeNode, values: List[int]) -> TreeNode:\n        res = None\n        if root is None:\n            return root\n        if not values:\n            return root\n        if root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val in values:\n            res = root\n        elif root.val"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# Example\n# >>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})\n# {'a': 1, 'd': 4}\n# >>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, {'a': 1})\n# {'b': 2, 'c': 3, 'd': 4}\n# >>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, {'a': 1, 'b': 2})\n# {'c': 3, 'd': 4}\n# >>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, {'a': 1, 'b': 2, 'c': 3})\n# {'d': 4}\n# >>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, {'a': 1, 'b': 2, 'c': 3, 'd': 4})\n# {}\n# >>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})\n# {'d': 4, 'e': 5}\n# >>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, {'a': 1, 'b': 2, 'c': 3, 'd': 4})\n# {}\n# >>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})\n# {}\n\ndef filter_dict(dictionary, filter_dict):\n    if not filter_dict:\n        return dictionary\n    for key in filter_dict:\n        if key not in dictionary:\n            return {}\n    return {k"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef filter_dict(dictionary, keys_to_filter):\n    \"\"\"\n    :type dictionary: dict\n    :type keys_to_filter: list\n    :rtype: dict\n    \"\"\"\n    filtered_dict = defaultdict(dict)\n\n    for key, value in dictionary.items():\n        if key in keys_to_filter:\n            filtered_dict[key] = value\n\n    return filtered_dict"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/filter-and-sort-a-dictionary-based-on-the-values/discuss/282433/Python-O(N)-time-O(1)-space\n\nclass Solution(object):\n    def filterDict(self, dict, val):\n        \"\"\"\n        :type dict: dict\n        :type val: int\n        :rtype: dict\n        \"\"\"\n        if not dict:\n            return dict\n\n        return {k: v for k, v in dict.items() if v == val}\n\n    def filterDict2(self, dict, val):\n        \"\"\"\n        :type dict: dict\n        :type val: int\n        :rtype: dict\n        \"\"\"\n        if not dict:\n            return dict\n\n        return {k: v for k, v in dict.items() if v == val}\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    dict = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f'}\n    print(sol.filterDict(dict, 1))\n    print(sol.filterDict2(dict, 1))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def filter(self, root: TreeNode, values: List[int]) -> TreeNode:\n        if not root:\n            return None\n        res = self.helper(root, values)\n        return res\n\n    def helper(self, node, values):\n        if not node:\n            return None\n        if node.val in values:\n            return node\n        if not node.left and not node.right:\n            return None\n        res = self.helper(node.left, values)\n        if res:\n            return res\n        res = self.helper(node.right, values)\n        if res:\n            return res\n        return None"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import collections\n\n# Your code will be similar to this:\n\n# Given a dictionary d, return a dictionary with only the keys in d that have a value greater than x.\ndef filter_by_value(d, x):\n    return {k: v for k, v in d.items() if v > x}\n\n# Your function should return the filtered dictionary.\n\n# Example 1:\n\n# Input:\n# d = {1:1, 2:2, 3:3, 4:4, 5:5}\n# x = 2\n# Output: {2:2, 3:3, 4:4}\n# Explanation: All keys with values less than 2 are removed.\n# Example 2:\n\n# Input:\n# d = {1:1, 2:2, 3:3, 4:4, 5:5}\n# x = 2.5\n# Output: {2:2, 3:3, 4:4}\n# Explanation: All keys with values less than 2.5 are removed.\n# Example 3:\n\n# Input:\n# d = {1:1, 2:2, 3:3, 4:4, 5:5}\n# x = -1\n# Output: {}\n# Explanation: All keys with values greater than -1 are removed.\n# Example 4:\n\n# Input:\n# d = {1:1, 2:2, 3:3, 4:4, 5:5}\n# x = 2.5\n# Output: {}\n# Explanation: All keys with values greater than or equal to 2.5 are removed.\n# Example 5:\n\n# Input:\n# d = {1:1, 2:2, 3:3, 4:4, 5:5}\n# x = 2.5\n# Output: {}\n# Explanation: All keys with values greater than or equal to 2.5 are removed.\n# Example 6:\n\n# Input:\n# d = {1:1, 2:2, 3:3, 4:4, 5:5}\n# x = 2\n# Output: {}\n# Explanation: All keys with values equal to 2 are removed.\n\n# Note:\n\n# 1 <= d.length <= 1000\n# 1 <= d[i] <="
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class FilterDict(object):\n\n    def __init__(self, data):\n        self.data = data\n\n    def filter(self, key_value_pairs):\n        \"\"\"\n        :type key_value_pairs: List[Tuple[str, Any]]\n        \"\"\"\n        return [k for k, v in self.data.items() if v in key_value_pairs]\n\n\nif __name__ == '__main__':\n    data = {\n        'a': 1,\n        'b': 2,\n        'c': 3\n    }\n\n    print(FilterDict(data).filter(key_value_pairs=[('a', 1), ('b', 2)]))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# https://www.geeksforgeeks.org/write-a-function-to-filter-a-dictionary-based-on-values/\n\ndef filter_dictionary(dictionary, values):\n    result = {}\n    for key in dictionary:\n        if dictionary[key] in values:\n            result[key] = dictionary[key]\n    return result\n\n# test cases\n# dictionary = {'A': 'A', 'B': 'B', 'C': 'C'}\n# values = ['A', 'B', 'C']\n# expected = {'A': 'A', 'B': 'B', 'C': 'C'}\n# filter_dictionary(dictionary, values) == expected\n\n# dictionary = {'A': 'A', 'B': 'B'}\n# values = ['A', 'B', 'C']\n# expected = {'A': 'A', 'B': 'B'}\n# filter_dictionary(dictionary, values) == expected\n\n# dictionary = {'A': 'A', 'B': 'B', 'C': 'C'}\n# values = ['A', 'B']\n# expected = {'A': 'A', 'B': 'B'}\n# filter_dictionary(dictionary, values) == expected\n\n# dictionary = {'A': 'A', 'B': 'B'}\n# values = ['A', 'B', 'C']\n# expected = {'A': 'A', 'B': 'B'}\n# filter_dictionary(dictionary, values) == expected\n\n# dictionary = {'A': 'A', 'B': 'B', 'C': 'C'}\n# values = ['A', 'C', 'D']\n# expected = {'A': 'A', 'C': 'C'}\n# filter_dictionary(dictionary, values) == expected\n\n# dictionary = {'A': 'A', 'B': 'B'}\n# values = ['A', 'B', 'C']\n# expected = {'A': 'A', 'B': 'B'}\n# filter_dictionary(dictionary, values) == expected\n\n# dictionary = {'A': 'A', 'B': 'B'}"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def filter_by_value(my_dict, val):\n    for key, value in my_dict.items():\n        if value == val:\n            del my_dict[key]\n\n\"\"\"\nYou are given a list of words, each word is a string.\n\nGiven a list of words, filter the dictionary to only contain the words that have a count greater than 5.\n\nExample:\n\nGiven [\"dog\", \"hello\", \"leetcode\", \"hacker\"], the function should return [\"dog\", \"leetcode\"],\nas 'dog' and 'leetcode' have a count greater than 5.\n\nNote:\n\nThe function will modify the input list in place,\nso the output list should be kept in the same order as the input list.\n\"\"\"\n\nclass Solution(object):\n    def filterWords(self, words, val):\n        \"\"\"\n        :type words: List[str]\n        :type val: int\n        :rtype: List[str]\n        \"\"\"\n        words = set(words)\n        words -= set(val)\n        return list(words)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def filter_dict(dictionary, filter_dict):\n    \"\"\"\n    :type dictionary: dict\n    :type filter_dict: dict\n    :rtype: dict\n    \"\"\"\n    if filter_dict is None:\n        return dictionary\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if key in filter_dict and filter_dict[key] == value:\n            filtered_dict[key] = value\n    return filtered_dict\n\ndef main():\n    \"\"\"\n    main()\n    \"\"\"\n    test_cases = [\n        {\n            'dictionary': {'a': 'b', 'c': 'd', 'e': 'f', 'g': 'h', 'i': 'j'},\n            'filter_dict': {'a': 'b', 'e': 'f'}\n        },\n        {\n            'dictionary': {'a': 'b', 'c': 'd', 'e': 'f', 'g': 'h', 'i': 'j'},\n            'filter_dict': None\n        },\n        {\n            'dictionary': {'a': 'b', 'c': 'd', 'e': 'f', 'g': 'h', 'i': 'j'},\n            'filter_dict': {'a': 'b', 'c': 'd', 'e': 'f', 'g': 'h'}\n        }\n    ]\n    for test_case in test_cases:\n        result = filter_dict(test_case['dictionary'], test_case['filter_dict'])\n        print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef filter_dict(dictionary, key, value):\n    \"\"\"\n    :type dictionary: dict\n    :type key: str\n    :type value: int\n    :rtype: dict\n    \"\"\"\n    if key not in dictionary:\n        return dictionary\n\n    filtered_dict = defaultdict(dict)\n    for key, value in dictionary.items():\n        if value == value:\n            filtered_dict[key] = value\n\n    return filtered_dict\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert filter_dict({'key': 1, 'key1': 1, 'key2': 1}, 'key1', 1) == {'key1': 1}, \"Simple\"\n    assert filter_dict({'key': 1, 'key1': 1, 'key2': 1}, 'key', 2) == {'key': 2}, \"Simple\"\n    assert filter_dict({'key': 1, 'key1': 1, 'key2': 1}, 'key1', 1) == {'key': 1}, \"Simple\"\n    assert filter_dict({'key': 1, 'key1': 1, 'key2': 1}, 'key2', 2) == {'key2': 2}, \"Simple\"\n    assert filter_dict({'key': 1, 'key1': 1, 'key2': 1}, 'key3', 2) == {}, \"Simple\"\n    assert filter_dict({'key': 1, 'key1': 1, 'key2': 1}, 'key1', 1) == {'key1': 1}, \"Simple\"\n    assert filter_dict({'key': 1, 'key1': 1, 'key2': 1}, 'key2', 1) == {'key2': 1}, \"Simple\"\n    assert filter_dict({'key': 1, 'key1': 1, 'key2': 1}, 'key3', 1) == {'key3': 1}, \"Simple\"\n    assert filter_dict({'key': 1, 'key1': 1, 'key2': 1}, 'key1', 1) == {'key': 1}, \"Simple\"\n    assert filter_dict"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def filter_dict(dictionary, filter_value):\n    \"\"\"\n    :type dictionary: dict\n    :type filter_value: list[str]\n    :rtype: dict\n    \"\"\"\n    filtered_dictionary = {}\n    for key, value in dictionary.items():\n        if filter_value.count(key) > 0:\n            filtered_dictionary[key] = value\n    return filtered_dictionary\n\n\nif __name__ == \"__main__\":\n    dictionary = {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8}\n    filter_dict(dictionary, ['1', '2', '4', '5'])\n    print(dictionary)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from collections import Counter\n\ndef filter_dict(input_dict, values):\n    \"\"\"\n    :type input_dict: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for key in input_dict:\n        if input_dict[key] in values:\n            filtered_dict[key] = input_dict[key]\n    return filtered_dict\n\ndef filter_dict2(input_dict, values):\n    \"\"\"\n    :type input_dict: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for key in input_dict:\n        if input_dict[key] in values:\n            filtered_dict[key] = input_dict[key]\n    return filtered_dict\n\ndef filter_dict3(input_dict, values):\n    \"\"\"\n    :type input_dict: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for key in input_dict:\n        if input_dict[key] in values:\n            filtered_dict[key] = input_dict[key]\n    return filtered_dict\n\ndef filter_dict4(input_dict, values):\n    \"\"\"\n    :type input_dict: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for key in input_dict:\n        if input_dict[key] in values:\n            filtered_dict[key] = input_dict[key]\n    return filtered_dict\n\ndef filter_dict5(input_dict, values):\n    \"\"\"\n    :type input_dict: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for key in input_dict:\n        if input_dict[key] in values:\n            filtered_dict[key] = input_dict[key]\n    return filtered_dict\n\ndef filter_dict6(input_dict, values):\n    \"\"\"\n    :type input_"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def filter(self, root: TreeNode, values: List[int]) -> TreeNode:\n        if root is None:\n            return None\n        if len(values) == 0:\n            return root\n        if len(values) == 1:\n            return root if root.val == values[0] else None\n        if root.val in values:\n            return root\n        if root.left:\n            self.filter(root.left, values[:])\n        if root.right:\n            self.filter(root.right, values[:])\n        return None"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://oj.leetcode.com/problems/filter-unique-elements/\n# Given a non-empty list of integers, return the k most frequent elements.\n#\n# Example 1:\n# Input: [1,1,1,2,2,3] and k = 2\n# Output: [1,2] (although [1,1] and [2,2] are also valid outputs)\n#\n# Example 2:\n# Input: [3,2,1,2,1,2,1,2,3,1] and k = 2\n# Output: [3,1]\n#\n# Note:\n# You may assume k is always valid, 1 \u2264 k \u2264 number of unique elements.\n# Your algorithm's time complexity must be better than O(n log n),\n# where n is the number of unique elements.\n#\n# Follow up:\n# Could you solve it in linear time?\n#\n#\n# Companies\n# Microsoft\n# Related Topics\n# Hash Table\n# Similar Questions\n# Top K Frequent Elements\n#\nimport unittest\nclass Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # Hash table\n        n = len(nums)\n        table = {}\n        for i, num in enumerate(nums):\n            if num not in table:\n                table[num] = i\n            else:\n                table[num] = table[num]\n\n        # sort\n        nums.sort()\n\n        # get top k\n        ans = []\n        for i in range(k):\n            ans.append(nums[table[nums[i]]])\n        return ans\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# https://www.hackerrank.com/challenges/filter-a-dictionary\n# https://www.hackerrank.com/challenges/filter-a-dictionary/problem\n\n# Note:\n# 1. The dictionary is not modified.\n# 2. The function returns a new dictionary with the filtered elements.\n\ndef filter_dict(dictionary, filter_func):\n    return {key: value for key, value in dictionary.items() if filter_func(key, value)}\n\ndef filter_dict_1(dictionary, filter_func):\n    return {key: value for key, value in dictionary.items() if filter_func(value)}\n\ndef filter_dict_2(dictionary, filter_func):\n    return {key: value for key, value in dictionary.items() if filter_func(key)}\n\n# Test Cases\n\n# Input:\n#   dictionary = {'a': 1, 'b': 2, 'c': 3}\n#   filter_func = lambda key, value: key.startswith('a')\n# Output:\n#   {'a': 1}\n\n# Input:\n#   dictionary = {'a': 1, 'b': 2, 'c': 3}\n#   filter_func = lambda key, value: key.startswith('a')\n# Output:\n#   {'a': 1}\n\n# Input:\n#   dictionary = {'a': 1, 'b': 2, 'c': 3}\n#   filter_func = lambda key, value: key.startswith('a')\n# Output:\n#   {'a': 1, 'b': 2, 'c': 3}\n\n# Input:\n#   dictionary = {'a': 1, 'b': 2, 'c': 3}\n#   filter_func = lambda key, value: key.startswith('a')\n# Output:\n#   {'a': 1, 'b': 2}\n\n# Input:\n#   dictionary = {'a': 1, 'b': 2, 'c': 3}\n#   filter_func = lambda key, value: key.startswith('a')\n# Output:\n#   {'a': 1, '"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def filter(self, root: TreeNode, values: List[int]) -> TreeNode:\n        if not root:\n            return None\n        \n        if not root.left and not root.right:\n            if root.val in values:\n                return root\n            else:\n                return None\n        \n        if root.left:\n            res = self.filter(root.left, values)\n            if res:\n                return res\n        \n        if root.right:\n            res = self.filter(root.right, values)\n            if res:\n                return res\n        \n        if root.val in values:\n            return root\n        else:\n            return None"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import collections\n\ndef filter_dict(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    filtered_dict = {}\n    for k, v in dictionary.items():\n        if k in values:\n            filtered_dict[k] = v\n    return filtered_dict\n\ndef filter_dict_by_values(dictionary, values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[str]\n    :rtype: dict\n    \"\"\"\n    return filter_dict(dictionary, values)\n\ndef filter_dict_by_keys(dictionary, keys):\n    \"\"\"\n    :type dictionary: dict\n    :type keys: list[str]\n    :rtype: dict\n    \"\"\"\n    return filter_dict(dictionary, keys)\n\ndef filter_dict_by_values_and_keys(dictionary, values, keys):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[str]\n    :type keys: list[str]\n    :rtype: dict\n    \"\"\"\n    return filter_dict_by_values(filter_dict_by_keys(dictionary, keys), values)\n\ndef filter_dict_by_values_and_keys_and_keys_in_values(dictionary, values, keys, keys_in_values):\n    \"\"\"\n    :type dictionary: dict\n    :type values: list[str]\n    :type keys: list[str]\n    :type keys_in_values: list[str]\n    :rtype: dict\n    \"\"\"\n    return filter_dict_by_values_and_keys(filter_dict_by_keys_and_values(dictionary, keys, values), keys_in_values)\n\nif __name__ == \"__main__\":\n    dictionary = {'a': 1, 'b': 2, 'c': 3}\n    print(filter_dict(dictionary, ['a', 'b', 'c']))\n    print(filter_dict_by_values(dictionary, ['a', 'b', 'c']))\n    print(filter_dict_by_keys"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def filter(self, root: TreeNode, values: list[int]) -> TreeNode:\n        if root is None:\n            return None\n        if not values:\n            return root\n        if root.val in values:\n            return root\n        if root.val in values:\n            return self.filter(root.left, values)\n        return self.filter(root.right, values)\n\n\n# TESTS\nfor tree, values, expected in [\n    (None, [], None),\n    (None, [1], None),\n    (None, [1, 2], None),\n    (None, [1, 2, 3], None),\n    (None, [1, 2, 3, 4], None),\n    (None, [1, 2, 3, 4, 5], None),\n    (None, [1, 2, 3, 4, 5, 6], None),\n    (None, [1, 2, 3, 4, 5, 6, 7], None),\n    (None, [1, 2, 3, 4, 5, 6, 7, 8], None),\n    (None, [1, 2, 3, 4, 5, 6, 7, 8, 9], None),\n    (None, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], None),\n    (None, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], None),\n    (None, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], None),\n    (None, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], None),\n    (None, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], None),\n    (None, [1, 2, 3, 4,"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# https://leetcode.com/problems/filter-a-dictionary/\n\n\nclass Solution(object):\n    def filterDict(self, filterDict, word):\n        \"\"\"\n        :type filterDict: dict\n        :type word: str\n        :rtype: list[str]\n        \"\"\"\n        ans = []\n        for k in filterDict.keys():\n            if filterDict[k] == word:\n                ans.append(k)\n        return ans\n\n\nclass Solution2(object):\n    def filterDict(self, filterDict, word):\n        \"\"\"\n        :type filterDict: dict\n        :type word: str\n        :rtype: list[str]\n        \"\"\"\n        ans = []\n        for k in filterDict.keys():\n            if k.find(word) >= 0:\n                ans.append(k)\n        return ans\n\n\nclass Solution3(object):\n    def filterDict(self, filterDict, word):\n        \"\"\"\n        :type filterDict: dict\n        :type word: str\n        :rtype: list[str]\n        \"\"\"\n        ans = []\n        for k in filterDict.keys():\n            if word in k:\n                ans.append(k)\n        return ans"
    }
  ]
}