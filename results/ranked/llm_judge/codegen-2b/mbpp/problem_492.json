{
  "timestamp": "2025-09-14T21:01:17.878040",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 492,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/add-consecutive-numbers\n# https://www.hackerrank.com/challenges/add-consecutive-numbers/problem\n\n\ndef add_consecutive_numbers(numbers):\n    \"\"\"\n    :param numbers: List of ints\n    :return: List of ints\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i] + result[i - 1])\n    return result\n\n\nif __name__ == \"__main__\":\n    numbers = list(map(int, input().split()))\n    result = add_consecutive_numbers(numbers)\n    print(result)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param num, a list of integer\n    # @return a list of integer\n    def addAll(self, num):\n        res = []\n        for i in num:\n            if res:\n                res.append(i)\n            else:\n                res.append(i)\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.addAll([1,2,3,4,5])\n    print s.addAll([1,2,3,4,5,6])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/add-adjacent-numbers/\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution(object):\n    def addNums(self, head, nums):\n        \"\"\"\n        :type head: ListNode\n        :type nums: List[int]\n        :rtype: ListNode\n        \"\"\"\n        if not nums:\n            return head\n        if not head:\n            return ListNode(nums[0])\n        if not head.next:\n            head.next = ListNode(nums[0])\n            return head.next\n        pre = head\n        curr = head.next\n        while curr and curr.next:\n            pre = curr\n            curr = curr.next\n        pre.next = ListNode(nums[0])\n        curr = head\n        while curr and curr.next:\n            curr.val += nums[0]\n            curr = curr.next\n        return head\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head = Solution().addNums(head, [1, 2, 3, 4, 5])\n    print(head.val)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/add-consecutive-numbers/problem\n\n# -*- coding:utf-8 -*-\n\nimport sys\nimport math\n\ndef add_consecutive_numbers(arr):\n    # write your code here\n    i = 0\n    j = 0\n    k = 0\n    n = len(arr)\n    res = []\n\n    while i < n:\n        if arr[i] == arr[j]:\n            k += 1\n            res.append(arr[i])\n            i += 1\n            j += 1\n        else:\n            if k > 1:\n                res.append(arr[j])\n                k = 1\n            i += 1\n            j += 1\n\n    return res\n\nif __name__ == '__main__':\n    # Read input\n    arr = list(map(int, sys.stdin.readline().strip().split(' ')))\n\n    # Write output\n    print''.join(str(i) for i in add_consecutive_numbers(arr))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef add_consecutive_numbers(numbers):\n    numbers_dict = defaultdict(int)\n    for number in numbers:\n        numbers_dict[number] += 1\n\n    consecutive_numbers = set()\n    for number in numbers_dict:\n        if numbers_dict[number] > 1:\n            consecutive_numbers.add(number)\n\n    return consecutive_numbers\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print add_consecutive_numbers(numbers)\n    numbers = [1, 2, 3, 4]\n    print add_consecutive_numbers(numbers)\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print add_consecutive_numbers(numbers)\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    num_list = []\n    for num in numbers:\n        if num not in num_list:\n            num_list.append(num)\n        else:\n            num_list.append(num + num_list.pop())\n\n    return sum(num_list)\n\nclass Solution:\n    # @param {List[int]} nums\n    # @return {int}\n    def getSum(self, nums):\n        return sum(nums)\n\nif __name__ == '__main__':\n    nums = [1, 3, 5, 7, 9]\n    print(Solution().getSum(nums))\n    nums = [1, 2, 3, 4, 5]\n    print(Solution().getSum(nums))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def add_consecutive_numbers(self, nums: List[int]) -> int:\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        i = 0\n        res = 0\n        while i < len(nums):\n            if nums[i]!= nums[i-1]:\n                res += nums[i] - nums[i-1]\n                i += 1\n            else:\n                i += 1\n        return res"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [numbers[i] for i in range(len(numbers)) if i < len(numbers)-1 and numbers[i] == numbers[i+1]]\n\n\ndef test():\n    assert add_consecutive_numbers([1, 2, 3]) == [1, 2, 3]\n    assert add_consecutive_numbers([3, 4, 5]) == [3, 4, 5]\n    assert add_consecutive_numbers([2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6]\n    assert add_consecutive_numbers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef add_consecutive(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(len(list_)):\n        result.append(list_[i])\n        if i < len(list_) - 1:\n            result.append(list_[i + 1])\n    return result\n\nif __name__ == '__main__':\n    print(add_consecutive([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# https://oj.leetcode.com/problems/add-adjacent-numbers/\n# Given a list, for each index i, the previous and next numbers are\n# given by the elements i-1 and i+1.\n# Return a list with the numbers added together.\n\n# Example 1:\n# Input: [1,2,3]\n# Output: [2,4,3]\n\n# Example 2:\n# Input: [1,2,3,4]\n# Output: [3,6,7,8]\n\n# Note:\n# The list is only read once and will not be changed.\n# The input list will not be empty and will always have length at least 2.\n\n# Follow up:\n# Could you do it without using any extra space?\n\n# 2018.04.22\nclass Solution(object):\n    def addAdjacentNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums or len(nums) == 1:\n            return nums\n        res = []\n        for i, num in enumerate(nums):\n            if i > 0:\n                res.append(nums[i - 1] + nums[i])\n            if i < len(nums) - 1:\n                res.append(nums[i + 1] + nums[i])\n        return res\n\nif __name__ == \"__main__\":\n    sln = Solution()\n    nums = [1,2,3]\n    res = sln.addAdjacentNumbers(nums)\n    print(res)\n    nums = [1,2,3,4]\n    res = sln.addAdjacentNumbers(nums)\n    print(res)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Definition for a Node.\nclass Node:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a list node\n    # @return a list node\n    def addNodes(self, head, val):\n        curr = head\n        while curr:\n            if curr.next:\n                curr.next.next = Node(val, curr.next)\n            else:\n                curr.next = Node(val)\n            curr = curr.next\n        return head\n\nif __name__ == '__main__':\n    head = None\n    solution = Solution()\n    head = solution.addNodes(head, 1)\n    head = solution.addNodes(head, 2)\n    head = solution.addNodes(head, 3)\n    print head.val"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @param {list} nums\n    # @return {list}\n\n    def add_consecutive(self, nums):\n        # write your code here\n        if len(nums) == 0:\n            return nums\n        nums.sort()\n        ans = []\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                ans.append(nums[i])\n        return ans\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.add_consecutive([1,3,5])\n    print s.add_consecutive([1,2,3])\n    print s.add_consecutive([1,2,4])\n    print s.add_consecutive([2,3,4])\n    print s.add_consecutive([2,3,5])\n    print s.add_consecutive([2,3,6])"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# write your code here\ndef add_consecutive(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(list) == 0:\n        return []\n    \n    res = []\n    cur = list[0]\n    res.append(cur)\n    for i in xrange(1,len(list)):\n        if list[i] == cur:\n            cur = cur + 1\n        else:\n            res.append(cur)\n            cur = list[i]\n    res.append(cur)\n    return res\n\nif __name__ == '__main__':\n    l = [1,2,3,4,5,6,7,8,9,10]\n    print(add_consecutive(l))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\nclass Solution:\n    def addConsecutiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums.sort()\n        res = []\n        prev = 0\n        for num in nums:\n            if prev == 0:\n                res.append(num)\n            else:\n                res.append(prev + num)\n            prev = num\n        return res\n\nif __name__ == '__main__':\n    assert Solution().addConsecutiveNumbers([1,2,3,4,5,6]) == [1, 2, 3, 4, 5, 6]\n    assert Solution().addConsecutiveNumbers([1,2,3,4,5,6,7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert Solution().addConsecutiveNumbers([1,2,3,4,5,6,7,8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert Solution().addConsecutiveNumbers([1,2,3,4,5,6,7,8,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert Solution().addConsecutiveNumbers([1,2,3,4,5,6,7,8,9,10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from collections import deque\n\n\ndef add_consecutive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for i in range(len(numbers)):\n        if len(res) == 0:\n            res.append(numbers[i])\n        elif numbers[i] - res[-1] == 1:\n            res.append(numbers[i])\n        else:\n            res.append(numbers[i] + res[-1])\n    return res\n\n\nclass Solution:\n    def addConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return add_consecutive(nums)\n\n\nif __name__ == '__main__':\n    assert Solution().addConsecutive([1,2,3]) == [1, 2, 3, 1, 2, 3]\n    assert Solution().addConsecutive([1,1,1]) == [1, 2, 3]"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def add_consecutive(nums):\n    \"\"\"\n    Add consecutive numbers of a given list.\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for i in range(len(nums)):\n        if i > 0 and nums[i-1] == nums[i]:\n            res.append(nums[i-1] + nums[i])\n        else:\n            res.append(nums[i])\n    return res\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(add_consecutive(nums))\n    print(add_consecutive([1, 2, 3, 4, 5]))\n    print(add_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(add_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    numbers = sorted(numbers)\n    numbers.append(0)\n    for i in range(len(numbers) - 1):\n        numbers[i] += numbers[i + 1]\n    return numbers\n\nprint(add_consecutive_numbers([0,1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(numbers)\n\nif __name__ == \"__main__\":\n    assert add_consecutive_numbers([1, 2, 3, 4, 5]) == 15\n    assert add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8]) == 42"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def add_numbers(numbers):\n    result = []\n    for number in numbers:\n        result.append(number)\n    for i in range(len(numbers)):\n        for j in range(len(result)):\n            if result[j] == 0:\n                result[j] = number\n                break\n        else:\n            result.append(number)\n    return result\n\nif __name__ == \"__main__\":\n    numbers = [2, 3, 4, 5, 6, 7, 8, 9]\n    print add_numbers(numbers)\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    print add_numbers(numbers)\n    numbers = [1]\n    print add_numbers(numbers)\n    numbers = []\n    print add_numbers(numbers)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def addConsecutiveNumbers(self, head: ListNode) -> ListNode:\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        cur = head\n        while cur:\n            next = cur.next\n            cur.next = head\n            head = cur\n            cur = next\n        return head"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/add-consecutive-numbers\n\nimport math\n\ndef add_consecutive_numbers(l):\n    sum = 0\n    for i in range(len(l)):\n        sum += l[i]\n        if i < len(l) - 1:\n            sum += l[i+1]\n    return sum\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7]\n    print(add_consecutive_numbers(l))\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(add_consecutive_numbers(l))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# A function to sum a list.\ndef sum_list(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\n# A function to add consecutive numbers of a given list.\ndef add_consecutive_numbers(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += number\n        print(total_sum)\n        if total_sum == numbers[-1]:\n            break\n    return total_sum\n\n# A function to get the sum of a list.\ndef get_sum_of_list(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += number\n    return total_sum\n\n# A function to get the sum of a list.\ndef get_sum_of_list_2(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += number\n    return total_sum\n\n# A function to get the sum of a list.\ndef get_sum_of_list_3(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += number\n    return total_sum\n\n# A function to get the sum of a list.\ndef get_sum_of_list_4(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += number\n    return total_sum\n\n# A function to get the sum of a list.\ndef get_sum_of_list_5(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += number\n    return total_sum\n\n# A function to get the sum of a list.\ndef get_sum_of_list_6(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += number\n    return total_sum\n\n# A function to get the sum of a list.\ndef get_sum_of_list_7(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += number\n    return total_sum\n\n# A function to get the sum of a list"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def addNums(self, head, nums):\n        \"\"\"\n        :type head: ListNode\n        :type nums: List[int]\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        curr = head\n        prev = head\n        for i in range(len(nums)):\n            curr = curr.next\n            prev = prev.next\n            curr.next = ListNode(nums[i])\n        return prev\n\n# Note:\n# This method is called addNums.\n# The method addNums() is a method of class ListNode,\n# so we can use it to call the method addNums() of class Solution."
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "import collections\n\ndef add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return add_consecutive_numbers_recursive(numbers, collections.deque())\n\ndef add_consecutive_numbers_recursive(numbers, result):\n    if len(numbers) == 0:\n        return result\n\n    if len(result) == 0:\n        result.append(numbers[0])\n        return result\n\n    if numbers[0] == result[-1]:\n        result.append(numbers[0])\n        return result\n\n    for i in range(1, len(numbers)):\n        if numbers[i] == result[-1] + 1:\n            result.append(numbers[i])\n            return result\n\n    return add_consecutive_numbers_recursive(numbers[1:], result)"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def add_consecutive(lst):\n    \"\"\"\n    >>> add_consecutive([3, 1, 5, 2, 6, 4])\n    [3, 4, 5, 6, 7, 8]\n    >>> add_consecutive([4, 2, 6, 8])\n    [4, 6, 8]\n    >>> add_consecutive([1, 2, 3])\n    [1, 2, 3]\n    >>> add_consecutive([])\n    []\n    >>> add_consecutive([1])\n    [1]\n    \"\"\"\n    \n    result = []\n    \n    for i in range(len(lst)):\n        result.append(lst[i])\n        if i < len(lst)-1:\n            result.append(lst[i]+lst[i+1])\n        else:\n            result.append(lst[i])\n    \n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def addConsecutiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        n = 0\n        for n in nums:\n            res.append(n)\n            if n!= 0 and n % 10 == 0:\n                n = n / 10 * 10 + n % 10\n            else:\n                n = n + 1\n        return res"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [lst[0]+1]+[lst[i]+lst[i-1] for i in range(1,len(lst))]"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(nums):\n    if not nums:\n        return 0\n    \n    result = 0\n    for i in xrange(len(nums) - 1):\n        result += nums[i] + nums[i+1]\n    return result\n\nif __name__ == '__main__':\n    nums = [2, 3, 5, 6, 7, 9]\n    print add_consecutive_numbers(nums)"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "import collections\n\n\ndef add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i-1]!= numbers[i]:\n            result.append(numbers[i])\n    return result\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3]\n    print(add_consecutive_numbers(numbers))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i]\n        if i!= len(numbers)-1:\n            sum += numbers[i+1]\n    return sum\n\nif __name__ == '__main__':\n    print(add_consecutive_numbers([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(nums):\n  \"\"\"\n  nums: a list of integers\n\n  Returns a new list of integers\n  \"\"\"\n  result = []\n  for num in nums:\n    result.append(num)\n    result.append(num + 1)\n    result.append(num + 2)\n  return result\n\n#test cases\nnums = [1,2,3,4]\nprint(add_consecutive_numbers(nums))\n\nnums = [5,6,7,8,9]\nprint(add_consecutive_numbers(nums))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i + 1 < len(numbers):\n            result.append(numbers[i] + numbers[i+1])\n        else:\n            result.append(numbers[i])\n    return result\n\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(add_consecutive_numbers(numbers))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def add_consecutive(num_list):\n    \"\"\"\n    :type num_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for i in range(len(num_list)):\n        if i == 0:\n            res.append(num_list[i])\n        elif num_list[i] == num_list[i - 1]:\n            res.append(num_list[i])\n        else:\n            res.append(num_list[i - 1] + num_list[i])\n    return res\n\nif __name__ == '__main__':\n    assert add_consecutive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert add_consecutive([1, 2, 3]) == [1, 2, 3]\n    assert add_consecutive([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert add_consecutive([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def add(self, list_, num):\n        \"\"\"\n        :type list_: List[int]\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        if len(list_) == 0:\n            return []\n        if len(list_) == 1:\n            return list_ + [list_[0] + num]\n        result = []\n        for i in range(len(list_) - 1):\n            result.append(list_[i] + list_[i + 1])\n        result.append(list_[-1] + num)\n        return result\n\n\nif __name__ == \"__main__\":\n    assert Solution().add([1, 2, 3, 4], 2) == [3, 4, 5, 6]\n    assert Solution().add([1], 2) == [2]\n    assert Solution().add([], 2) == []"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef add_consecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i]\n        if i < len(nums) - 1:\n            result += nums[i+1]\n    return result\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    nums = [1, 3, 5, 7, 9]\n    print(add_consecutive(nums))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def add_consecutive(num_list):\n    \"\"\"\n    :type num_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [num_list[0]] + [num_list[i] + num_list[i+1] for i in range(len(num_list)-1)] + [num_list[-1]]\n\ndef test_add_consecutive():\n    assert add_consecutive([1,2,3]) == [1,2,3,1,2,3]\n    assert add_consecutive([1,2,3,4]) == [1,2,3,4,1,2,3,4]\n    assert add_consecutive([1,2,3,4,5]) == [1,2,3,4,5,1,2,3,4,5]\n    assert add_consecutive([1,2,3,4,5,6]) == [1,2,3,4,5,6,1,2,3,4,5,6]\n    assert add_consecutive([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7,1,2,3,4,5,6,7]\n\nif __name__ == '__main__':\n    test_add_consecutive()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        while num > 0:\n            res = res * 10 + num % 10\n            num /= 10\n        return res"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(list):\n    \"\"\"\n    Input:\n        list: A list of integers.\n    Output:\n        A list of integers.\n    \"\"\"\n    result = []\n    for num in list:\n        if len(result) > 0:\n            result.append(num + result[-1])\n        else:\n            result.append(num)\n    return result\n\n\nif __name__ == '__main__':\n    assert add_consecutive_numbers([1, 2, 3]) == [1, 2, 3, 1, 2, 3]\n    assert add_consecutive_numbers([4, 5]) == [4, 5, 4, 5]"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def addConsecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    def helper(nums, left, right):\n        if left == right:\n            return nums[left]\n        \n        if left == right-1:\n            return nums[left] + nums[left+1]\n        \n        return nums[left] + nums[left+1] + nums[right] + nums[left+2]\n\n    return helper(nums, 0, len(nums)-1)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    ret = []\n    for i in range(0, len(numbers)):\n        if i == 0:\n            ret.append(numbers[i])\n        elif i == len(numbers) - 1:\n            ret.append(numbers[i] + ret[-1])\n        else:\n            ret.append(numbers[i] + ret[-1] + numbers[i+1])\n    return ret\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(add_consecutive_numbers(numbers))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(nums):\n  \"\"\"\n  Write a function to add consecutive numbers of a given list.\n  :param nums: a list of integers\n  :return: a list of integers\n  \"\"\"\n  result = []\n  for i in range(len(nums)):\n    if i == len(nums) - 1:\n      result.append(nums[i] + nums[i + 1])\n    else:\n      result.append(nums[i] + nums[i + 1] + nums[i + 2])\n  return result\n\nif __name__ == \"__main__\":\n  assert add_consecutive_numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 6]\n  assert add_consecutive_numbers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6, 7]\n  assert add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7, 8]\n  assert add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/add-consecutive-numbers/problem\n\ndef add_consecutive_numbers(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    if not list:\n        return 0\n    length = len(list)\n    max_num = 0\n    for i in range(length):\n        if i < length - 1:\n            if list[i] + list[i+1] > max_num:\n                max_num = list[i] + list[i+1]\n    return max_num\n\n\nif __name__ == '__main__':\n    n = int(input())\n    list = list(map(int, input().split()))\n    print(add_consecutive_numbers(list))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i] + result[i-1])\n    return result\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6]\n    print(add_consecutive_numbers(numbers))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def addNums(self, head, nums):\n        \"\"\"\n        :type head: ListNode\n        :type nums: List[int]\n        :rtype: ListNode\n        \"\"\"\n        ret = ListNode(0)\n        prev = ret\n        cur = head\n        while cur:\n            prev.next = ListNode(cur.val + sum(nums))\n            prev = prev.next\n            cur = cur.next\n            cur = cur.next\n        return ret.next\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(3)\n    head.next.next = ListNode(5)\n    head.next.next.next = ListNode(7)\n    head.next.next.next.next = ListNode(9)\n    solution = Solution()\n    print solution.addNums(head, [1, 2, 3, 4, 5, 6])"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# write your code here\ndef add_consecutive_numbers(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not list:\n        return list\n    \n    result = []\n    for i in range(len(list)):\n        if i == 0 or i == len(list) - 1:\n            result.append(list[i])\n        else:\n            result.append(list[i] + list[i - 1])\n    \n    return result\n\nprint(add_consecutive_numbers([1, 2, 3, 4]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/add-consecutive-numbers\n\ndef add_consecutive(lst):\n    i = 0\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or i == len(lst)-1:\n            result.append(lst[i])\n        else:\n            result.append(lst[i] + lst[i-1])\n    return result\n\n# Test cases\nprint(add_consecutive(list(range(1,100))))\nprint(add_consecutive(list(range(1,100,2))))\nprint(add_consecutive(list(range(1,100,3))))\nprint(add_consecutive(list(range(1,100,5))))\nprint(add_consecutive(list(range(1,100,7))))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    sum_list = []\n    for i in numbers:\n        sum_list.append(sum_list[-1] + i)\n    return sum_list\n\ndef test_add_consecutive_numbers():\n    assert add_consecutive_numbers([1,2,3,4]) == [1,2,3,4,5]\n\nif __name__ == '__main__':\n    test_add_consecutive_numbers()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "# Your code here.\n\ndef add_consecutive(numbers):\n    numbers.sort()\n    result = [0] * (len(numbers) + 1)\n    for i in range(len(numbers)):\n        result[i+1] = result[i] + numbers[i]\n    return result\n\nprint add_consecutive([1,2,3,4,5,6,7])"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    n = len(numbers)\n    if n == 0:\n        return numbers\n    elif n == 1:\n        return numbers + [numbers[0] + 1]\n    else:\n        return [numbers[i] + 1 for i in range(n - 1)] + numbers\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(add_consecutive_numbers(numbers))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/add-consecutive-numbers\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef add_consecutive_numbers(nums):\n    for i in range(0, len(nums) - 1):\n        nums[i] = nums[i] + nums[i + 1]\n    return nums\n\nprint add_consecutive_numbers(nums)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def add_consecutive(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    if len(list) == 0:\n        return 0\n    result = 0\n    for i in range(0, len(list)):\n        result = result + list[i]\n        if i < len(list) - 1:\n            result = result + list[i + 1]\n    return result"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def add_consecutive(my_list):\n    \"\"\"\n    :type my_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    \n    count = 0\n    carry = 0\n    \n    for num in my_list:\n        if count == 0:\n            num += carry\n        elif carry!= 0:\n            num += carry\n        else:\n            num += count\n        carry = 0\n        count += 1\n    \n    if carry!= 0:\n        num += carry\n    \n    return num"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def add_consecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for n in nums:\n        if n == 0:\n            result.append(1)\n        else:\n            result.append(n + result[-1])\n    return result"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    i = 1\n    for n in numbers:\n        if i < n:\n            i = i * 10 + n\n        else:\n            i = i * 10 + n\n    return i\n\ndef test():\n    assert add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1234567890\n    assert add_consecutive_numbers([]) == 0\n    assert add_consecutive_numbers([-1, -2]) == -2\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\n# Complete the function below.\n\ndef add_consecutive_numbers(nums):\n    \"\"\"\n    Returns a list of consecutive numbers.\n\n    Example:\n    >>> add_consecutive_numbers([1, 2, 3, 4])\n    [1, 2, 3, 4, 1, 2, 3, 4]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    consecutive_numbers = []\n    current_number = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] == current_number:\n            consecutive_numbers.append(current_number)\n        else:\n            consecutive_numbers.append(current_number)\n            current_number = nums[i]\n\n    consecutive_numbers.append(current_number)\n    return consecutive_numbers\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4]\n    print(add_consecutive_numbers(nums))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def addConsecutive(list):\n    res = []\n    for i in list:\n        res.append(i)\n        if i!= res[-1]:\n            res.append(res[-1] + 1)\n    return res\n\ndef main():\n    print(addConsecutive([1, 2, 3, 4, 5, 6]))\n    print(addConsecutive([1, 2, 3, 4]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n <= 1:\n        return 0\n    else:\n        return (nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4] + nums[n - 5]) % 1000000\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(add_consecutive_numbers(nums))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def add_consecutive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    \n    result = []\n    for num in numbers:\n        result.append(num)\n        \n        if len(result) > 1:\n            result[len(result)-1] += result[len(result)-2]\n            result.pop()\n    \n    return result"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def addConsecutive(self, head):\n        if not head or not head.next:\n            return head\n        \n        # find the first node that is not consecutive\n        curr = head\n        while curr.next and curr.next.next:\n            curr = curr.next\n        \n        # now curr points to the first node that is not consecutive\n        if curr.next:\n            curr.next = self.addConsecutive(curr.next)\n        \n        return head\n\n# Note:\n# 1. It's not possible to add consecutive numbers if a node is not consecutive.\n# 2. If a node is consecutive, we can simply add it to the head of the list.\n# 3. If a node is not consecutive, we can add it to the head of the list, and then update the next node."
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def addConsecutiveNumbers(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for i in range(len(nums)):\n        if i == 0:\n            res.append(nums[i])\n        else:\n            res.append(nums[i] + res[i-1])\n    return res\n\n# Your addConsecutiveNumbers function will be called like this:\n# nums = [1,2,3]\n# print your_function(nums)\n\nif __name__ == '__main__':\n    assert addConsecutiveNumbers([1,2,3]) == [1,2,3,1,2,3]\n    assert addConsecutiveNumbers([1]) == [1]\n    assert addConsecutiveNumbers([]) == []\n    assert addConsecutiveNumbers([1,2]) == [1,2,1,2]"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def add_consecutive(numbers):\n  sum_of_numbers = 0\n  for i in range(len(numbers)):\n    sum_of_numbers += numbers[i]\n    numbers[i] = sum_of_numbers\n  return numbers\n\nif __name__ == '__main__':\n  numbers = [1, 3, 5, 7, 9]\n  print add_consecutive(numbers)\n  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  print add_consecutive(numbers)\n  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  print add_consecutive(numbers)\n  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  print add_consecutive(numbers)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    nums.sort()\n    ans = []\n    for i in range(len(nums) - 1):\n        ans.append(nums[i] + nums[i + 1])\n    return ans"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(list):\n    \"\"\"\n    >>> add_consecutive_numbers([1, 2, 3])\n    [1, 3, 5]\n    >>> add_consecutive_numbers([1, 2, 3, 4])\n    [1, 4, 7, 10]\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5])\n    [1, 5, 10, 15, 20]\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6])\n    [1, 6, 11, 16, 22, 27]\n    >>> add_consecutive_numbers([1, 2, 3, 4, 5, 6, 7])\n    [1, 7, 14, 21, 28, 36, 45]\n    \"\"\"\n    if not list:\n        return []\n\n    # Add the first element\n    result = [list[0]]\n\n    # Add the rest of the elements\n    for i in range(1, len(list)):\n        if list[i] == list[i-1] + 1:\n            result.append(list[i])\n        else:\n            result.append(list[i-1] + 1)\n\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(nums):\n    n = len(nums)\n    i = 0\n    while i < n:\n        for j in range(i, n):\n            nums[j] += nums[j-1]\n        i += 1\n    return nums\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    nums = add_consecutive_numbers(nums)\n    print(nums)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def addConsecutiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return nums\n        \n        result = []\n        for i in range(n):\n            for j in range(i+1, n):\n                result.append(nums[i] + nums[j])\n        return result"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param num, a list of integer\n    # @return a list of integer\n    def add_consecutive(self, num):\n        result = []\n        if len(num) == 1:\n            result.append(num[0])\n            return result\n        \n        for i in range(1, len(num)):\n            if num[i-1] + num[i] == num[i]:\n                result.append(num[i-1])\n            else:\n                result.append(num[i-1] + num[i])\n        \n        return result"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from collections import deque\n\ndef consecutive_numbers(nums):\n    n = len(nums)\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return consecutive_numbers_helper(nums, n)\n\n\ndef consecutive_numbers_helper(nums, n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    sum = 0\n    for i in range(0, n):\n        sum += nums[i]\n    return sum\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(consecutive_numbers(nums))\n    nums = [2, 3, 4, 5, 6]\n    print(consecutive_numbers(nums))\n    nums = [1, 2, 3, 4, 5, 6]\n    print(consecutive_numbers(nums))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def add_consecutive(nums):\n    \"\"\"\n    Add consecutive numbers of a list.\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in nums:\n        if result and result[-1] == i - 1:\n            result.append(i)\n        else:\n            result.append(i)\n    return result\n\n\nif __name__ == '__main__':\n    assert add_consecutive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert add_consecutive([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert add_consecutive([-1, -2, -3, -4, -5, -6]) == [-1, -2, -3, -4, -5, -6]\n    assert add_consecutive([-1, -2, -3, -4, -5, -6, -7]) == [-1, -2, -3, -4, -5, -6, -7]\n    assert add_consecutive([-1, -2, -3, -4, -5, -6, -7, -8]) == [-1, -2, -3, -4, -5, -6, -7, -8]\n    assert add_consecutive([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\n    assert add_consecutive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def add_numbers(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in list_:\n        result = result + i\n    return result\n\nif __name__ == \"__main__\":\n    print(add_numbers([1,2,3,4,5,6]))\n    print(add_numbers([1,1,1,1,1,1,1]))\n    print(add_numbers([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(nums):\n    \"\"\"\n    Write a function to add consecutive numbers of a given list.\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    i = 0\n    result = 0\n    while i < len(nums) - 1:\n        result += nums[i]\n        i += 1\n    return result\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5]\n    assert add_consecutive_numbers(nums) == 15\n    nums = [1,2,3,4,5,6]\n    assert add_consecutive_numbers(nums) == 23\n    nums = [1,2,3,4]\n    assert add_consecutive_numbers(nums) == 6"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# https://leetcode.com/problems/add-consecutive-numbers/discuss/83957/Python-solution\n\nclass Solution(object):\n    def addConsecutiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                res.append(nums[i])\n            else:\n                res.append(nums[i] + res.pop())\n        return res"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "import collections\n\n\ndef add_consecutive_numbers(list_of_numbers):\n    \"\"\"\n    Add consecutive numbers of a given list.\n\n    Input: list of numbers, where each number is an integer.\n\n    Output: A list of integers.\n\n    Example:\n        >>> list_of_numbers = [2, 1, 3, 5, 7]\n        >>> add_consecutive_numbers(list_of_numbers)\n        [2, 3, 5, 7, 9]\n    \"\"\"\n    res = collections.deque(list_of_numbers)\n    for i in range(len(list_of_numbers) - 1):\n        res.append(res[i] + res[i + 1])\n    return list(res)"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport re\nimport sys\n\ndef add_consecutive_numbers(numbers):\n    return re.sub(r'\\b\\d+\\b', lambda m: str(int(m.group(0)) + 1), ''.join(numbers))\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print \"Usage: {} <list>\".format(sys.argv[0])\n        sys.exit(1)\n\n    numbers = sys.argv[1].split(',')\n    print add_consecutive_numbers(numbers)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    numbers_length = len(numbers)\n    if numbers_length == 0:\n        return []\n    elif numbers_length == 1:\n        return [numbers[0]]\n    else:\n        result = []\n        for i in range(numbers_length):\n            if i == 0:\n                result.append(numbers[0])\n            else:\n                result.append(numbers[i - 1] + numbers[i])\n        return result\n\n\n\n# TESTS\nfor numbers, expected in [\n    ([], []),\n    ([1, 2, 3], [1, 2, 3]),\n    ([1, 2, 3], [1, 3, 6]),\n    ([1, 2, 3], [3, 6, 10]),\n    ([1, 2, 3], [3, 6, 10]),\n]:\n    assert add_consecutive_numbers(numbers) == expected"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def add_consecutive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [sum(numbers[:i] + [numbers[i]] + numbers[i+1:]) for i in range(len(numbers) - 1)]\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive([1, 2, 3]) == [1, 3, 6]\n    assert add_consecutive([1, 2, 3, 4]) == [1, 3, 6, 10]\n    assert add_consecutive([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i]!= numbers[i - 1]:\n            result.append(numbers[i])\n    return result\n\n# Your AddConsecutiveNumbers solution(from C) goes here."
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def addNums(self, head, nums):\n        \"\"\"\n        :type head: ListNode\n        :type nums: List[int]\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while nums:\n            cur = ListNode(nums.pop(0))\n            pre.next = cur\n            pre = cur\n        return dummy.next"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\n\nclass Solution:\n    def addToEnd(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return ListNode(val)\n        new_head = ListNode(val)\n        new_head.next = head\n        return new_head\n\n    def addToEnd_iter(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return ListNode(val)\n        new_head = ListNode(val)\n        new_head.next = head\n        return new_head\n\n    def addToEnd_recursive(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return ListNode(val)\n        new_head = ListNode(val)\n        new_head.next = head\n        new_head.next.next = new_head\n        return new_head\n\n    def addToEnd_recursive2(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return ListNode(val)\n        new_head = ListNode(val)\n        new_head.next = head\n        new_head.next.next = new_head\n        return new_head\n\nif __name__ == \"__main__\":\n    s = Solution()\n    head = ListNode(0)\n    head = s.addToEnd(head, 1)\n    head = s.addToEnd(head, 2)\n    head = s.addToEnd(head, 3)\n    head = s.addToEnd(head, 4)\n    head"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "from itertools import count\nfrom functools import reduce\n\ndef add_consecutive_numbers(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    \n    # return the first number\n    if len(nums) == 0:\n        return nums\n    \n    # return the first number\n    return nums[0] + add_consecutive_numbers(nums[1:])\n    \n    \nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4]\n    print(add_consecutive_numbers(nums))\n    print(reduce(lambda x, y: x + y, nums))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def add_consecutive(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    add_list = []\n    for number in list_of_numbers:\n        add_list.append(number)\n        if len(add_list) == 1:\n            add_list.append(0)\n    for i in range(len(list_of_numbers) - 1):\n        add_list[i] += add_list[i + 1]\n    return add_list\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6]\n    add_list = add_consecutive(numbers)\n    print(add_list)\n    print(add_list[0])\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def add_consecutive(numbers):\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) + add_consecutive(numbers[1:])\n\ndef test():\n    assert(add_consecutive([1, 2, 3, 4]) == 15)\n    assert(add_consecutive([1, 2, 3, 4, 5]) == 21)\n    assert(add_consecutive([1, 2, 3, 4, 5, 6]) == 28)\n    assert(add_consecutive([1, 2, 3, 4, 5, 6, 7]) == 35)\n    assert(add_consecutive([1, 2, 3, 4, 5, 6, 7, 8]) == 42)\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "import time\n\nstart_time = time.time()\n\n\ndef add_consecutive_numbers(numbers):\n    \"\"\"\n    :param numbers: A list of integers\n    :return: A list of integers\n    \"\"\"\n    consecutive_numbers = []\n\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == numbers[i + 1]:\n                consecutive_numbers.append(numbers[i] + numbers[j])\n            else:\n                break\n\n    return consecutive_numbers\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6]\n    print(add_consecutive_numbers(numbers))\n    print(time.time() - start_time)"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # Complete this function\n    result = 0\n    for i in range(len(numbers)):\n        if i + 1 == len(numbers):\n            result = result + numbers[i]\n        else:\n            result = result + numbers[i] + numbers[i + 1]\n    return result\n\nif __name__ == '__main__':\n    numbers = [1,2,3,4,5,6,7,8,9]\n    print(add_consecutive_numbers(numbers))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param nums: a list of integers\n    @return: a list of integers\n    \"\"\"\n    def add(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return nums\n        res = []\n        for i in range(len(nums)):\n            if i < len(nums) - 1 and nums[i] + nums[i+1] in res:\n                continue\n            res.append(nums[i] + nums[i+1])\n        return res\n\n\nif __name__ == '__main__':\n    nums = [1,2,3]\n    print Solution().add(nums)\n    nums = [1]\n    print Solution().add(nums)\n    nums = [1,2,3,4]\n    print Solution().add(nums)\n    nums = [1,2,3,4,5,6,7]\n    print Solution().add(nums)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def addLists(self, head):\n        # base case\n        if head is None or head.next is None:\n            return head\n\n        # helper function\n        def add_list(head, list_to_add):\n            # base case\n            if head.next is None:\n                new_head = ListNode(list_to_add[0])\n                new_head.next = head\n                return new_head\n            else:\n                new_head = ListNode(0)\n                new_head.next = head\n                return add_list(new_head, list_to_add)\n\n        # recursive step\n        return add_list(None, [head.val] + list(head.next))\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n        self._test([1, 2, 3, 4, 5], [2, 4, 6, 8, 10])\n        self._test([1, 2, 3], [1, 2, 3])\n        self._test([1, 2, 3], [2, 3, 4])\n        self._test([1, 2, 3], [1, 3, 4])\n        self._test([1, 2, 3], [2, 4, 5])\n        self._test([1, 2, 3], [1, 2, 4])\n        self._test([1, 2, 3], [1, 2, 3])\n\n    def _test(self, head, expected):\n        head = Solution().addLists(head)\n        self.assertEqual(head.val, expected[0])\n        self.assertEqual(head.next.val, expected[1])\n        self.assertEqual(head.next.next.val, expected[2])\n        self.assertEqual(head.next.next.next.val, expected[3])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def addNums(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if k == 0:\n            return None\n        if k == 1:\n            return ListNode(nums[0] + nums[1])\n        head = ListNode(0)\n        curr = head\n        for i in range(2, k):\n            curr.next = ListNode(curr.next.val + nums[i])\n            curr = curr.next\n        curr.next = ListNode(curr.next.val + nums[k])\n        return head.next"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from collections import deque\n\ndef add_consecutive(lst):\n    \"\"\"\n    Add consecutive numbers of the given list.\n    \"\"\"\n    ret = []\n    for i in range(len(lst)):\n        ret.append(lst[i])\n        if i < len(lst) - 1:\n            ret.append(lst[i+1])\n    return ret\n\n\nif __name__ == \"__main__\":\n    assert add_consecutive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert add_consecutive([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert add_consecutive([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert add_consecutive([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert add_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert add_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert add_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert add_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    assert add_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def addLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        if not lists:\n            return None\n        head = ListNode(0)\n        curr = head\n        for node in lists:\n            curr.next = ListNode(node.val)\n            curr = curr.next\n            node = node.next\n        return head.next"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution:\n    def addConsecutiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                continue\n            result.append(nums[i])\n        result.append(nums[-1])\n        return result\n\nclass Solution2:\n    def addConsecutiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                continue\n            result.append(nums[i])\n        result.append(nums[-1])\n        return result\n\nclass Solution3:\n    def addConsecutiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                continue\n            result.append(nums[i])\n        result.append(nums[-1])\n        return result\n\nif __name__ == '__main__':\n    nums = [1,3,5,7]\n    print(Solution().addConsecutiveNumbers(nums))\n    print(Solution2().addConsecutiveNumbers(nums))\n    print(Solution3().addConsecutiveNumbers(nums))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def add_consecutive_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for i in range(len(numbers)):\n        if i == 0:\n            res.append(numbers[0])\n        else:\n            res.append(numbers[i] + res[i - 1])\n    return res\n\n# Your add_consecutive_numbers solution\n# def add_consecutive_numbers(numbers):\n#     res = []\n#     for i in range(len(numbers)):\n#         if i == 0:\n#             res.append(numbers[0])\n#         else:\n#             res.append(numbers[i] + res[i - 1])\n#     return res"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def addLists(self, head, val):\n        if not head:\n            return None\n        \n        pre, cur = head, head\n        while cur and cur.next:\n            cur = cur.next\n        \n        cur.next = ListNode(val)\n        cur = cur.next\n        \n        while head:\n            cur.next = head\n            head = head.next\n            cur = cur.next\n        \n        return pre"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def add(self, head):\n        if not head:\n            return head\n\n        pre = head\n        cur = head.next\n        cur.next = None\n        while cur:\n            cur = cur.next\n            cur.next = pre.next\n            pre.next = cur\n\n        return head\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n\n    print(Solution().add(head))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Your function should return the sum of all numbers from the list\n\n# Note:\n# The input list will be in increasing order.\n\n# Example:\n# Input: [1,2,3,4,5]\n# Output: 15\n# Explanation: Add the numbers 1, 2, 3, 4, 5 and return 15.\n\n# Note:\n# The input list will not have duplicates.\n# The input list will not be empty.\n\n# Example:\n# Input: [1]\n# Output: 1\n# Explanation: Add the numbers 1 and return 1.\n\nclass Solution(object):\n    def add(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        s = sum(nums)\n        for i in range(1, len(nums)):\n            s += nums[i]\n            nums[i] = s % 10\n            s //= 10\n        return s\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.add([1, 2, 3, 4, 5])\n    print s.add([1])\n    print s.add([1, 2])\n    print s.add([1, 2, 3])\n    print s.add([1, 2, 3, 4])"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0):\n#         self.val = val\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def addLists(self, head, val):\n        if head is None:\n            return None\n        node = ListNode(val)\n        pre = node\n        curr = head\n        while curr is not None:\n            if curr.val == val:\n                pre.next = curr.next\n                break\n            else:\n                pre = curr\n            curr = curr.next\n        if curr is None:\n            pre.next = None\n        return node.next"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @param k, an integer\n    # @return a tree node\n    def add_k_consecutive(self, root, k):\n        if root is None:\n            return None\n        if root.val == k:\n            return root\n        if root.val + k <= k:\n            return self.add_k_consecutive(root.right, k - root.val)\n        else:\n            return self.add_k_consecutive(root.left, k - root.val)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def addConsecutiveNumbers(self, root: TreeNode, digits: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        self.addConsecutiveNumbersHelper(root, digits)\n\n    def addConsecutiveNumbersHelper(self, root, digits):\n        if root is None:\n            return\n        if root.left is None and root.right is None:\n            if root.val in digits:\n                digits.remove(root.val)\n            else:\n                digits.append(root.val)\n        self.addConsecutiveNumbersHelper(root.left, digits)\n        self.addConsecutiveNumbersHelper(root.right, digits)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def add_consecutive(num_list):\n    \"\"\"\n    :type num_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # write your code here\n    result = []\n    for num in num_list:\n        result.append(num)\n        result.append(num)\n    return result\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 5, 6, 7, 8, 9, 10]\n    print(add_consecutive(nums))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def add_consecutive_numbers(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: int\n    \"\"\"\n    n = 0\n    for i in range(1, len(l)):\n        if i == 1:\n            n += l[i-1]\n        else:\n            n += l[i-1] + l[i]\n    return n\n\nclass Solution:\n    def addConsecutiveNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = 0\n        for i in range(1, len(nums)):\n            if i == 1:\n                n += nums[i-1]\n            else:\n                n += nums[i-1] + nums[i]\n        return n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.addConsecutiveNumbers([1,2,3,4,5]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def addNums(self, head, nums):\n        \"\"\"\n        :type head: ListNode\n        :type nums: List[int]\n        :rtype: ListNode\n        \"\"\"\n        if head == None:\n            return None\n        if head.next == None:\n            return head\n        pre = head\n        for i in range(0, len(nums)):\n            if pre.next == None:\n                pre.next = ListNode(nums[i])\n            else:\n                pre.next = ListNode(nums[i])\n                pre = pre.next\n        return head"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import unittest\n\n\nclass Solution(object):\n\n    def add_consecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        \n        ret = 0\n        for i in range(len(nums) - 1):\n            ret += nums[i]\n            if nums[i] == nums[i + 1]:\n                ret += nums[i + 1]\n            else:\n                ret += nums[i] + nums[i + 1]\n        return ret\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/add-consecutive-numbers/solution/\n\nApproach #1: Sort [0, i.1, i.2,..., i.j]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the array.\nSpace Complexity: O(n)\n\n# 7ms 100%\nclass Solution {\n    public int add_consecutive(int[] nums) {\n        Arrays.sort(nums);\n        int ret = 0;\n        for (int i = 0; i < nums.length - 1; i++) {\n            ret += nums[i];\n            if (nums[i] == nums[i + 1]) {\n                ret += nums[i + 1];\n            } else {\n                ret += nums[i] + nums[i + 1];\n            }\n        }\n        return ret;\n    }\n}\n\n# 7ms 100%\nclass Solution {\n    public int add_consecutive(int[] nums) {\n        Arrays.sort(nums);\n        int ret = 0;\n        for (int i = 0; i < nums.length - 1; i++) {\n            ret += nums[i];\n            if (nums[i]"
    }
  ]
}