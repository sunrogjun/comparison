{
  "timestamp": "2025-09-14T19:53:14.309320",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 339,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_min_len(string):\n    \"\"\"\n    >>> find_min_len('aabbccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def minimize_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string.replace(\"e\", \"\")\n    # return string.replace(\"t\", \"\")\n    # return string.replace(\"a\", \"\")\n    # return string"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n\ndef min_length(string):\n    # Write your code here\n    \"\"\"\n    string : string to be minised\n    Returns the minimum length of the string\n    \"\"\"\n    # your code here\n    i = 0\n    while i < len(string):\n        if string[i] == string[0]:\n            string = string[1:]\n            break\n        else:\n            i += 1\n    return len(string)\n\nif __name__ == '__main__':\n    test_string = 'asdf'\n    print(min_length(test_string))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def min_length(s):\n    \"\"\"\n    :param s: string\n    :return: string\n    \"\"\"\n    # write your code here\n    return s[0:1] if len(s) > 1 else s\n\nif __name__ == \"__main__\":\n    s = \"aaabbb\"\n    print(min_length(s))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# https://www.codewars.com/kata/minimize-string-length-in-python/train/python\n\ndef minimize_string_length(string):\n    return len(string)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def minLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return min(len(s), len(s) - len(set(s)))\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    s = \"abcd\"\n    print(sol.minLength(s))\n    s = \"aaaa\"\n    print(sol.minLength(s))\n    s = \"abcabc\"\n    print(sol.minLength(s))\n    s = \"abcabcabc\"\n    print(sol.minLength(s))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def min_len(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\nif __name__ == '__main__':\n    s = 'abcd'\n    print(min_len(s))\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(min_len(s))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def remove_char(string):\n    if len(string) == 1:\n        return ''\n    else:\n        return string[1:len(string)]\n\ndef min_length(string):\n    return len(remove_char(string))\n\n\nif __name__ == '__main__':\n    assert min_length(\"abcd\") == 4\n    assert min_length(\"abcdabc\") == 4\n    assert min_length(\"abcdabcde\") == 4\n    assert min_length(\"abcdabcdeabc\") == 4\n    assert min_length(\"abcdabcdeabcdeabc\") == 4\n    assert min_length(\"abcdabcdeabcdeabcdeabc\") == 4\n    assert min_length(\"abcdabcdeabcdeabcdeabcdeabc\") == 4\n    assert min_length(\"abcdabcdeabcdeabcdeabcdeabcdeabc\") == 4\n    assert min_length(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 9,
      "score": 9.370583536698913,
      "candidate": "def min_length(str1):\n    # write your code here\n    count = 0\n    min_len = len(str1)\n    for i in range(len(str1)):\n        if str1[i] == str1[count]:\n            count += 1\n        else:\n            if count == 0:\n                min_len = i\n            count = 1\n    return min_len\n\ndef main():\n    str1 = 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 10,
      "score": 9.234050852198141,
      "candidate": "def remove_one_char(string):\n    length = len(string)\n    if length < 2:\n        return string\n    for i in range(length-1):\n        if string[i] == string[i+1]:\n            string = string[:i] + string[i+1:]\n            break\n    return string\n\nif __name__ == \"__main__\":\n    string = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 11,
      "score": 9.21346272767743,
      "candidate": "def remove_only_one_char(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[-1]:\n            count += 1\n    return string[:-count]\n\nprint remove_only_one_char(\"hello\")\nprint remove_only_one_char(\"abcd\")\nprint remove_only_one_char(\"\")"
    },
    {
      "rank": 12,
      "score": 9.205959372648458,
      "candidate": "import sys\n\n# Complete the min_length function below.\ndef min_length(str_input):\n    char_count = 0\n    for char in str_input:\n        if char in str_input:\n            char_count += 1\n    return char_count\n\nif __name__ == '__main__':\n    fptr = open('./sample.txt', 'r')\n    # fptr = open(sys.argv[1], 'r')\n    str_input = fptr.read()\n    print min_length(str_input)"
    },
    {
      "rank": 13,
      "score": 9.177268828905222,
      "candidate": "def remove_one_char(s):\n    n = len(s)\n    if n == 0:\n        return \"\"\n    elif n == 1:\n        return s\n    else:\n        return s[0] + remove_one_char(s[1:])\n\n\nif __name__ == \"__main__\":\n    s = \"aabbcc\"\n    print(remove_one_char(s))"
    },
    {
      "rank": 14,
      "score": 9.122564458729856,
      "candidate": "def remove_char(str, c):\n    \"\"\"\n    remove_char(str, c)\n    Args:\n        str: string\n        c: char\n    Returns:\n        new_str: string\n    \"\"\"\n    if len(str) == 0:\n        return str\n    new_str = \"\"\n    for i in range(0, len(str)):\n        if str[i] == c:\n            continue\n        new_str += str[i]\n    return new_str\n\ndef main():\n    str = \"aabbccddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
    },
    {
      "rank": 15,
      "score": 8.973005557553902,
      "candidate": "def min_len(str):\n    \"\"\"\n    Returns the minimum length string to remove all characters in str.\n    \"\"\"\n    if not str:\n        return 0\n\n    # We can remove the character if it is not in str.\n    for char in str:\n        if char not in str:\n            return len(str)\n\n    return min(len(str) for str in str)\n\n\nif __name__ == '__main__':\n    print(min_len('abcdabcde'))\n    print(min_len('abcdabcdeabcde'))\n    print(min_len('abcdabcdeabcdeabcde'))"
    },
    {
      "rank": 16,
      "score": 8.95994420569242,
      "candidate": "def min_length(str_in):\n    \"\"\"\n    str_in: string to be reduced\n    \"\"\"\n    length = len(str_in)\n    occurences = {}\n    for char in str_in:\n        if char in occurences:\n            occurences[char] += 1\n        else:\n            occurences[char] = 1\n    for char in occurences:\n        if occurences[char] == 1:\n            length -= 1\n    return length\n\nstr_in = \"abacd\"\nprint(min_length(str_in))"
    },
    {
      "rank": 17,
      "score": 8.946210893390457,
      "candidate": "import re\n\n# https://www.hackerrank.com/challenges/minimize-the-length-of-string\ndef minimize_string(string):\n    min_length = len(string)\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                min_length = min(min_length, len(string) - j)\n    return min_length\n\nif __name__ == \"__main__\":\n    string = input().strip()\n    print(minimize_string(string))"
    },
    {
      "rank": 18,
      "score": 8.932217008005624,
      "candidate": "#!/bin/python\n\n# write your code here\ndef min_length(s):\n    min_len = len(s)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                s = s[:i] + s[i+1:]\n                min_len = min(min_len, len(s))\n    return min_len\n\nprint(min_length(\"cab\"))\nprint(min_length(\"bbbb\"))\nprint(min_length(\"cabb\"))\nprint(min_length(\"bbbbb\"))"
    },
    {
      "rank": 19,
      "score": 8.910084504002544,
      "candidate": "def min_length_str(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string)\n\n\nprint(min_length_str('abcabcabcabc'))\nprint(min_length_str('aabbccdd'))\nprint(min_length_str('bbbbb'))"
    },
    {
      "rank": 20,
      "score": 8.85571690049604,
      "candidate": "def minimize(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s[::-1] if len(s) > 1 else s\n\nif __name__ == \"__main__\":\n    print(minimize(\"aaabbb\"))"
    },
    {
      "rank": 21,
      "score": 8.850707355641543,
      "candidate": "def remove_only_one_char(s):\n    if not s: return s\n    \n    min_length = len(s)\n    # initialize a list to store the occurrences of each character\n    occ_list = [0] * 26\n    for i in range(len(s)):\n        # initialize a list to store the occurrences of each character\n        occ_list[ord(s[i]) - ord('a')] += 1\n        \n    for i in range(len(s)):\n        if occ_list[i] == 1:\n            min_length = min(min_length, len(s[:i]))\n    return s[:min_length]\n\ndef main():\n    s = \"abacadababacadababacad\"\n    s = \"abacadabacadabacadabacadabacad\"\n    s = \"abacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadab"
    },
    {
      "rank": 22,
      "score": 8.8281618090209,
      "candidate": "#!/usr/bin/python\nimport sys\nimport re\n\ndef main():\n    if len(sys.argv) < 2:\n        sys.exit('Usage: python2 remove_duplicate.py <string>')\n\n    s = sys.argv[1]\n    result = []\n    for i in range(len(s)):\n        if s[i] not in result:\n            result.append(s[i])\n    print ''.join(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 8.81367773444215,
      "candidate": "def min_length(s):\n    return len(s) if len(s) == 1 else 0\n\nprint min_length(\"a\")\nprint min_length(\"aa\")\nprint min_length(\"aaa\")\nprint min_length(\"aaaa\")\nprint min_length(\"aaaaa\")\nprint min_length(\"aaaaaaaaa\")\nprint min_length(\"aabab\")"
    },
    {
      "rank": 24,
      "score": 8.76828871349479,
      "candidate": "def remove_occurrence_of_char(s):\n    \"\"\"\n    Write a python function to remove the occurrence of only one character from the string s.\n    \"\"\"\n    occurrences = {}\n    for i in range(len(s)):\n        if s[i] in occurrences:\n            occurrences[s[i]] += 1\n        else:\n            occurrences[s[i]] = 1\n    return s[:occurrences[s[0]]]\n\nprint remove_occurrence_of_char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 25,
      "score": 8.750282588864879,
      "candidate": "def min_length_of_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string) - min(len(string) - len(string.replace(\"A\", \"\")), len(string.replace(\"A\", \"\")))\n\nprint min_length_of_string(\"AABCD\")"
    },
    {
      "rank": 26,
      "score": 8.715724466237427,
      "candidate": "def remove_one_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join([c for c in s if c!= c.lower()])\n\nif __name__ == \"__main__\":\n    s = \"Hello World\"\n    print remove_one_char(s)\n    s = \"Hello World\"\n    print s.lower()\n    print s.upper()"
    },
    {
      "rank": 27,
      "score": 8.692801520950061,
      "candidate": "import math\n\ndef length_of_string(string):\n    return len(string)\n\ndef solution(string):\n    length = length_of_string(string)\n    count = 1\n    for i in range(length-1):\n        if string[i] == string[i+1]:\n            count += 1\n        else:\n            count = 1\n    return count\n\nprint solution(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 28,
      "score": 8.632293453617281,
      "candidate": "def min_len(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string) - len(string.replace(\" \", \"\"))\n\nif __name__ == '__main__':\n    print(min_len(\"aabcc\"))"
    },
    {
      "rank": 29,
      "score": 8.625262456968262,
      "candidate": "import re\n\ndef find_min_length(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return min([len(string.replace(c, '')) for c in string])\n\nif __name__ == '__main__':\n    print(find_min_length('abcabcabc'))\n    print(find_min_length('abbcbbc'))\n    print(find_min_length('abbccccc'))\n    print(find_min_length('abbcccccc'))\n    print(find_min_length('abbcccccccc'))"
    },
    {
      "rank": 30,
      "score": 8.625142247198651,
      "candidate": "def min_length(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n\n    count = {}\n    for c in s:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n\n    l = 0\n    for c, v in count.items():\n        if v == 1:\n            l += 1\n        else:\n            break\n\n    return l\n\nif __name__ == '__main__':\n    s = 'abcabcabcabc'\n    print min_length(s)"
    },
    {
      "rank": 31,
      "score": 8.616253589228675,
      "candidate": "def min_str_length(str):\n    str_len = len(str)\n    if str_len == 1:\n        return str\n    else:\n        for i in range(0, len(str)):\n            if str[i] == str[0]:\n                return str[:i]\n        return str\n\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")\nprint min_str_length(\"abcdabcdabcd\")"
    },
    {
      "rank": 32,
      "score": 8.610076160146226,
      "candidate": "class Solution(object):\n    def removeDuplicateLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        return \"\".join(sorted(set(s)))\n\n\nif __name__ == \"__main__\":\n    Solution().removeDuplicateLetters(\"aabbcc\")"
    },
    {
      "rank": 33,
      "score": 8.606486429141842,
      "candidate": "import os\n\ndef min_length(string):\n    length = len(string)\n    min_length = length\n    for i in range(length):\n        for j in range(length):\n            if string[i] == string[j] and i!= j:\n                min_length = min(min_length, i - j)\n    return min_length\n\nif __name__ == '__main__':\n    filename = os.path.join(os.getcwd(), 'data.txt')\n    with open(filename, 'r') as f:\n        for line in f.readlines():\n            string = line.strip()\n            print(min_length(string))"
    },
    {
      "rank": 34,
      "score": 8.60156811074208,
      "candidate": "def min_length_string(string):\n    min_length = len(string)\n    for i in range(0, len(string)):\n        if string[i] in string:\n            min_length = min(min_length, len(string.replace(string[i], \"\")))\n    return min_length\n\nprint(min_length_string(\"aabccc\"))"
    },
    {
      "rank": 35,
      "score": 8.565425580227462,
      "candidate": "def remove_one_char(string):\n    # write your code here\n    if len(string) < 2:\n        return string\n    for i in range(1, len(string)):\n        if string[i]!= string[0]:\n            string = string[0:i] + string[i+1:]\n    return string\n\ndef main():\n    print(remove_one_char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 36,
      "score": 8.548876241946822,
      "candidate": "def min_length(s):\n    min_len = len(s)\n    for i in xrange(len(s) - 1):\n        if s[i] == s[i+1]:\n            min_len = min(min_len, 1)\n    return min_len\n\nprint min_length(\"abcd\")"
    },
    {
      "rank": 37,
      "score": 8.542875062379007,
      "candidate": "import sys\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Please enter a string to remove a character from\")\n        return\n\n    s = sys.argv[1]\n    # Remove the first character from the string\n    s = s[1:]\n    # Remove the last character from the string\n    s = s[:-1]\n    # Remove the first occurrence of the second character from the string\n    s = s.replace(s[0], \"\")\n    # Remove the last occurrence of the second character from the string\n    s = s.replace(\"\" + s[-1], \"\")\n\n    print(s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.53012858503943,
      "candidate": "import re\n\n# test cases\ntest_cases = [\n    (\"abcd\", \"cbd\"),\n    (\"abcd\", \"d\"),\n    (\"abc\", \"c\"),\n    (\"abcd\", \"d\")\n]\n\ndef min_length_with_one_char(s):\n    \"\"\"\n    Returns the minimum length of the string s by removing the occurrence of only one character.\n    \"\"\"\n    min_length = len(s)\n    for c in s:\n        if c in s:\n            min_length = min(min_length, len(s.replace(c, '')))\n    return min_length\n\n# test cases\nfor s, expected in test_cases:\n    print(min_length_with_one_char(s))"
    },
    {
      "rank": 39,
      "score": 8.499905739299377,
      "candidate": "def min_len(s):\n    return len(s) if len(s) == 1 else max(0, len(s) - 1)\n\ndef min_len_2(s):\n    return len(s) if len(s) == 1 else max(0, len(s) - 2)\n\ndef min_len_3(s):\n    return len(s) if len(s) == 1 else max(0, len(s) - 3)\n\ndef min_len_4(s):\n    return len(s) if len(s) == 1 else max(0, len(s) - 4)\n\ndef min_len_5(s):\n    return len(s) if len(s) == 1 else max(0, len(s) - 5)\n\ndef min_len_6(s):\n    return len(s) if len(s) == 1 else max(0, len(s) - 6)\n\ndef min_len_7(s):\n    return len(s) if len(s) == 1 else max(0, len(s) - 7)\n\ndef min_len_8(s):\n    return len(s) if len(s) == 1 else max(0, len(s) - 8)\n\ndef min_len_9(s):\n    return len(s) if len(s) == 1 else max(0, len(s) - 9)\n\nif __name__ == '__main__':\n    s = 'abccc'\n    print(min_len(s))\n    print(min_len_2(s))\n    print(min_len_3(s))\n    print(min_len_4(s))\n    print(min_len_5(s))\n    print(min_len_6(s))\n    print(min_len_7(s))\n    print(min_len_8(s))\n    print(min_len_9(s))"
    },
    {
      "rank": 40,
      "score": 8.478208546788407,
      "candidate": "def min_length_string(s):\n    min_length = len(s)\n    for i in range(len(s)):\n        for j in range(i):\n            if s[i] == s[j]:\n                min_length = min(min_length, 1 + min_length_string(s[:i] + s[i+1:]))\n    return min_length\n\nif __name__ == '__main__':\n    print(min_length_string('ababbacacad'))\n    print(min_length_string('ababbacac'))\n    print(min_length_string('bab'))\n    print(min_length_string('bab'))\n    print(min_length_string('babb'))\n    print(min_length_string('babb'))\n    print(min_length_string('abcabc'))"
    },
    {
      "rank": 41,
      "score": 8.437695832075478,
      "candidate": "def min_length(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string) - 1\n\nif __name__ == '__main__':\n    assert min_length('abc') == 3\n    assert min_length('aaabbbccccc') == 7\n    assert min_length('aabbbcccccc') == 5\n    assert min_length('abcde') == 0\n    assert min_length('abcd') == 1\n    assert min_length('abcdd') == 1\n    assert min_length('abcde') == 0\n    assert min_length('abcdeabcde') == 0\n    assert min_length('abcdeabcdeabcdeabcde') == 1\n    assert min_length('abcdeabcdeabcdeabcdeabcde') == 1\n    assert min_length('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde') == 1\n    assert min_length('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde') == 0"
    },
    {
      "rank": 42,
      "score": 8.408439383654278,
      "candidate": "def min_length(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s: return 0\n    count = [0] * 26\n    for i in s:\n        count[ord(i) - ord('a')] += 1\n    return max(count)\n\nif __name__ == '__main__':\n    s = 'aaabbbcccdddeee'\n    print min_length(s)"
    },
    {
      "rank": 43,
      "score": 8.386620303250325,
      "candidate": "#!/usr/bin/env python\n\nimport re\n\ndef remove_only_one(string):\n    return re.sub(r'^(.).*?(.)$', r'\\1\\2', string)\n\nprint remove_only_one('abcdabcd')\nprint remove_only_one('abcd')\nprint remove_only_one('abcd')\nprint remove_only_one('abcdabcda')"
    },
    {
      "rank": 44,
      "score": 8.375312293858853,
      "candidate": "def minimize_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if len(s) == 0:\n        return ''\n    min_str = ''\n    for c in s:\n        if min_str == '' or min_str.count(c) < 1:\n            min_str += c\n    return min_str"
    },
    {
      "rank": 45,
      "score": 8.351614956112536,
      "candidate": "import re\n\ndef min_str(s):\n    min_length = len(s)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                min_length = min(min_length, len(s.replace(s[i], \"\")) + 1)\n    return min_length\n\n\nif __name__ == '__main__':\n    s = 'abbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb"
    },
    {
      "rank": 46,
      "score": 8.331556294201176,
      "candidate": "def remove_only_one_char(string):\n    \"\"\"\n    Input: string\n    Output: the string with all the occurences of only one character removed.\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return \"\"\n    elif length == 1:\n        return string\n    elif length == 2:\n        return string[0] + string[1]\n    else:\n        for i in range(2, length):\n            if string[i] == string[0]:\n                return string[0:i] + remove_only_one_char(string[i:])\n            else:\n                return string"
    },
    {
      "rank": 47,
      "score": 8.327375965969855,
      "candidate": "import sys\n\ndef remove_one_char(s):\n    count = 0\n    for c in s:\n        if c in s:\n            count += 1\n    return s[:count]\n\nif __name__ == \"__main__\":\n    s = sys.argv[1]\n    print remove_one_char(s)"
    },
    {
      "rank": 48,
      "score": 8.327367757082776,
      "candidate": "import re\nimport sys\n\ndef remove_only_one_char(string):\n    pattern = re.compile(r'^[^A-Z]*$')\n    return pattern.sub('', string)\n\nif __name__ == '__main__':\n    string = sys.argv[1]\n    print remove_only_one_char(string)"
    },
    {
      "rank": 49,
      "score": 8.298597569547805,
      "candidate": "import re\n\ndef remove_occurrence(string, character):\n    return re.sub('[{0}]'.format(character), '', string)\n\ndef main():\n    s = 'ababacabababacababababacabababacababababacabababababacababababacabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbbbbbbbbbb"
    },
    {
      "rank": 50,
      "score": 8.2938925966498,
      "candidate": "def remove_only_one_char(string):\n    count = 0\n    for c in string:\n        if c not in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return len(string) - count\n\nif __name__ == '__main__':\n    print remove_only_one_char('abcdefghijklmnopqrstuvwxyz')"
    },
    {
      "rank": 51,
      "score": 8.289838256518838,
      "candidate": "def remove_occurrence_of_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    occurence_count = 0\n    for char in string:\n        if char not in string:\n            occurence_count += 1\n    return string[:occurence_count]\n\nprint(remove_occurrence_of_char('abcabcabc'))"
    },
    {
      "rank": 52,
      "score": 8.251903304236286,
      "candidate": "def min_len_one_char_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count_one_char = 0\n    for i in range(len(string)):\n        if string[i] == 'a':\n            count_one_char += 1\n    return len(string) - count_one_char\n\nif __name__ == '__main__':\n    print min_len_one_char_string('abcdabcd')"
    },
    {
      "rank": 53,
      "score": 8.214125058964552,
      "candidate": "def min_length_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    d = {}\n    for i in range(len(s)):\n        if s[i] not in d:\n            d[s[i]] = 1\n        else:\n            d[s[i]] += 1\n    min_key = ''\n    min_count = 0\n    for k in d:\n        if d[k] < min_count:\n            min_key = k\n            min_count = d[k]\n    return min_key\n\nprint(min_length_string('aab'))\nprint(min_length_string('abcd'))\nprint(min_length_string('aa'))\nprint(min_length_string('ab'))\nprint(min_length_string('ba'))\nprint(min_length_string('aa'))\nprint(min_length_string('aa'))\nprint(min_length_string('aa'))"
    },
    {
      "rank": 54,
      "score": 8.212735598038213,
      "candidate": "import re\n\ndef min_length_string(string):\n    \"\"\"\n    Write a function to remove only one character from the string.\n    Input:\n        string: string to be modified\n    Output:\n        min_length_string(string): new string after removing only one character\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char not in new_string:\n            new_string += char\n    return new_string\n\ndef main():\n    string = 'Hello, world!'\n    print min_length_string(string)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.211579567659316,
      "candidate": "def min_len(str_to_min):\n    \"\"\"\n    :type str_to_min: str\n    :rtype: int\n    \"\"\"\n    min_len = len(str_to_min)\n    count = {}\n    for c in str_to_min:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    for c in count:\n        if count[c] == 1:\n            min_len -= 1\n    return min_len\n\nif __name__ == '__main__':\n    test_case = 'abccdee'\n    print min_len(test_case)"
    },
    {
      "rank": 56,
      "score": 8.209707251476969,
      "candidate": "import sys\n\ndef min_length(str_to_minimize):\n    \"\"\"\n    :type str_to_minimize: str\n    :rtype: str\n    \"\"\"\n    count = {}\n    for i in range(len(str_to_minimize)):\n        if str_to_minimize[i] not in count:\n            count[str_to_minimize[i]] = 1\n        else:\n            count[str_to_minimize[i]] += 1\n    min_len = 0\n    for i in count:\n        if count[i] == 1:\n            min_len = max(min_len, len(i))\n    return str_to_minimize[:min_len]\n\nif __name__ == \"__main__\":\n    print min_length(sys.argv[1])"
    },
    {
      "rank": 57,
      "score": 8.2048573255218,
      "candidate": "def remove_only_one_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if len(string) == 1:\n        return string\n    elif len(string) == 2:\n        return string[0] + string[1]\n    else:\n        for i in range(1, len(string) - 1):\n            if string[i] == string[i - 1] and string[i] == string[i + 1]:\n                string = string[0:i] + string[i + 2:]\n    return string\n\nif __name__ == \"__main__\":\n    string = \"aabbcc\"\n    print(remove_only_one_char(string))"
    },
    {
      "rank": 58,
      "score": 8.172253082181854,
      "candidate": "import re\n\ndef findMin(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    \n    if len(s) == 1:\n        return 1\n    \n    min_len = len(s)\n    for i in range(len(s)):\n        if s[i] == s[0]:\n            if i == 0:\n                return 0\n            else:\n                min_len = min(min_len, i + 1)\n    return min_len\n\nif __name__ == '__main__':\n    s = \"abcd\"\n    print(findMin(s))"
    },
    {
      "rank": 59,
      "score": 8.163300679823958,
      "candidate": "def minimize(str):\n    minlen = len(str)\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                minlen = minlen - 1\n    return minlen\n\ndef test():\n    assert minimize(\"bab\") == 2\n    assert minimize(\"aaa\") == 1\n    assert minimize(\"babab\") == 0\n    assert minimize(\"bbbb\") == 1\n    assert minimize(\"a\") == 0\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 60,
      "score": 8.144125099485041,
      "candidate": "def min_length(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    if len(string) == 0:\n        return 0\n\n    min_length = len(string)\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                if len(string) < min_length:\n                    min_length = len(string)\n                string = string[:i] + string[j+1:]\n    return min_length\n\nprint min_length(\"hello\")\nprint min_length(\"abcd\")\nprint min_length(\"abcdabc\")"
    },
    {
      "rank": 61,
      "score": 8.143591138329747,
      "candidate": "# input: a string\n# output: a string\n\ndef remove_char(string):\n    new_string = \"\"\n    for c in string:\n        if new_string == \"\":\n            new_string = c\n        elif c == new_string:\n            pass\n        else:\n            new_string += c\n    return new_string\n\nstring = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 62,
      "score": 8.121884567141883,
      "candidate": "import re\n\ndef min_length(string):\n    # TODO: write your code here\n    string = string.lower()\n    pattern = re.compile('[a-z]')\n    return len(pattern.sub('', string))\n\nif __name__ == '__main__':\n    assert min_length('abcd') == 4\n    assert min_length('abcdabc') == 3\n    assert min_length('abcdabcd') == 2\n    assert min_length('abcdabcde') == 1"
    },
    {
      "rank": 63,
      "score": 8.105983444291466,
      "candidate": "def min_len(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            count = 0\n    return len(s) - count\n\nprint min_len(\"ababcbc\")"
    },
    {
      "rank": 64,
      "score": 8.08452234024709,
      "candidate": "import re\n\ndef min_length(str):\n    \"\"\"\n    min_length(str) -> int\n    \n    Returns the length of the string str, which is the smallest possible length of the string str.\n    \n    str - string to be minimized\n    \n    Returns:\n    int - length of the string str\n    \"\"\"\n    return min_length_helper(str, 0, len(str))\n\ndef min_length_helper(str, start, length):\n    if length == 0:\n        return length\n    \n    if str[start] in str:\n        return min_length_helper(str, start + 1, length - 1)\n    else:\n        return min_length_helper(str, start + 1, length)\n\nif __name__ == \"__main__\":\n    print min_length(\"abcabcabc\")"
    },
    {
      "rank": 65,
      "score": 8.024835682833125,
      "candidate": "def min_length(input_str):\n    # write your code here\n    if len(input_str) <= 1:\n        return len(input_str)\n    else:\n        return min_length(input_str[1:]) + 1\n\n\nif __name__ == \"__main__\":\n    input_str = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
      "rank": 66,
      "score": 7.990432406683839,
      "candidate": "def remove_one_char(string):\n    result = ''\n    for i in range(len(string)):\n        if string[i]!= string[0]:\n            result += string[i]\n    return result\n\nprint remove_one_char('abcdeabcde')\nprint remove_one_char('abcdeabcde')\nprint remove_one_char('abcdeabcde')\nprint remove_one_char('abcdeabcde')\nprint remove_one_char('abcdeabcde')\nprint remove_one_char('abcdeabcde')"
    },
    {
      "rank": 67,
      "score": 7.938028884277233,
      "candidate": "def remove_char(string, char):\n    \"\"\"\n    :type string: str\n    :type char: str\n    :rtype: str\n    \"\"\"\n    return \"\".join([c for c in string if c!= char])\n\nprint remove_char(\"abcd\", \"a\")\nprint remove_char(\"abcd\", \"b\")\nprint remove_char(\"abcd\", \"c\")\nprint remove_char(\"abcd\", \"d\")\nprint remove_char(\"abcd\", \"e\")\nprint remove_char(\"abcd\", \"f\")"
    },
    {
      "rank": 68,
      "score": 7.915588979966494,
      "candidate": "import sys\n\n\ndef get_min_length(string):\n    \"\"\"\n    Return the minimum length of the string.\n\n    :param string:\n    :return:\n    \"\"\"\n    if len(string) == 0:\n        return 0\n    min_length = 1\n    for i in range(len(string)):\n        if string[i] not in string[:i]:\n            min_length = min(min_length, 1 + get_min_length(string[:i] + string[i + 1:]))\n    return min_length\n\n\nif __name__ == '__main__':\n    if len(sys.argv) == 2:\n        string = sys.argv[1]\n        print(\"The minimum length of the string is: \" + str(get_min_length(string)))\n    else:\n        print(\"Usage: python3 {0} <string>\".format(sys.argv[0]))"
    },
    {
      "rank": 69,
      "score": 7.8912769574414305,
      "candidate": "def remove_only_one_char(s):\n    \"\"\"\n    Write a function to remove only one character from the string.\n\n    Input: s - string\n    Output: s - string without only one character\n    \"\"\"\n    # Your code here\n    temp = s.split()\n    return''.join(temp)\n\ndef test_remove_only_one_char():\n    assert remove_only_one_char('aaabbbcccc') == 'aabbbcccc'\n    assert remove_only_one_char('abbbcccc') == 'abbbcccc'\n    assert remove_only_one_char('abbbccc') == 'abbbccc'\n    assert remove_only_one_char('abbbcc') == 'abbbcc'\n    assert remove_only_one_char('abbb') == 'abbb'\n    assert remove_only_one_char('abb') == 'abb'\n    assert remove_only_one_char('aabb') == 'aabb'\n    assert remove_only_one_char('aabbc') == 'aabbc'\n    assert remove_only_one_char('aabbcc') == 'aabbcc'\n    assert remove_only_one_char('aabbccc') == 'aabbccc'\n    assert remove_only_one_char('aabbcccc') == 'aabbcccc'\n    assert remove_only_one_char('aabbccccc') == 'aabbccccc'\n    assert remove_only_one_char('aabbcccccc') == 'aabbcccccc'\n    assert remove_only_one_char('aabbccccccc') == 'aabbccccccc'\n\nif __name__ == '__main__':\n    test_remove_only_one_char()"
    },
    {
      "rank": 70,
      "score": 7.868947655733293,
      "candidate": "def min_length_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if len(s) == 0:\n        return s\n    s_len = len(s)\n    min_len = s_len\n    min_index = 0\n    for i in range(s_len):\n        if s[i] == s[min_index]:\n            if i - min_index == 1:\n                return s[:i]\n            elif i - min_index > 1:\n                min_len = min(min_len, i - min_index)\n                min_index = i\n    if min_index == s_len - 1:\n        return s[:min_index + 1]\n    return s[:min_index + 1] + min_length_string(s[min_index + 1:])\n\n\nif __name__ == '__main__':\n    print(min_length_string('abcd'))\n    print(min_length_string('abcdabcd'))\n    print(min_length_string('abcdabcdabcd'))\n    print(min_length_string('abcdabcdabcdabcd'))\n    print(min_length_string('abcdabcdabcdabcdabcd'))"
    },
    {
      "rank": 71,
      "score": 7.84634113240411,
      "candidate": "import re\n\ndef minimize(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    return re.subn(r\"[^a-zA-Z]\", \"\", str)[0]\n\nif __name__ == '__main__':\n    print minimize('abcabcabcabc')"
    },
    {
      "rank": 72,
      "score": 7.834022619458933,
      "candidate": "def minStringLength(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    return 1\n    # return len(s)\n\nif __name__ == '__main__':\n    s = 'aabbcc'\n    print minStringLength(s)"
    },
    {
      "rank": 73,
      "score": 7.780351419995229,
      "candidate": "import sys\n\ndef minimum_length(s):\n    if not s:\n        return 0\n\n    # s = 'abc'\n    # print(s)\n    # print(len(s))\n\n    # s = 'abcd'\n    # print(s)\n    # print(len(s))\n\n    # s = 'abcdefghijklmnopqrstuvwxyz'\n    # print(s)\n    # print(len(s))\n\n    # s = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n    # print(s)\n    # print(len(s))\n\n    # s = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv"
    },
    {
      "rank": 74,
      "score": 7.738292593776799,
      "candidate": "def remove_char(s):\n    if not s:\n        return s\n    if len(s) == 1:\n        return \"\"\n    for i in range(1, len(s)):\n        if s[i] == s[0]:\n            s = s[:i] + s[i + 1:]\n    return s\n\nif __name__ == \"__main__\":\n    s = \"aabccc\"\n    print(remove_char(s))"
    },
    {
      "rank": 75,
      "score": 7.7320703513377165,
      "candidate": "def minimize_string(s):\n    s_len = len(s)\n    min_len = s_len\n    # for each character\n    for i in range(0, s_len):\n        # count how many times each character appears in the string\n        count = 0\n        for j in range(0, s_len):\n            if s[j] == s[i]:\n                count += 1\n        # if the character appears only once, delete it\n        if count == 1:\n            s = s[:i] + s[i+1:]\n            min_len = min(min_len, len(s))\n    return min_len\n\nprint minimize_string(\"abcccc\")"
    },
    {
      "rank": 76,
      "score": 7.705183449260731,
      "candidate": "def min_length(s):\n    count = {}\n    for c in s:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    result = []\n    for c, count in count.items():\n        if count == 1:\n            result.append(c)\n    return ''.join(result)\n\n\nif __name__ == \"__main__\":\n    s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"
    },
    {
      "rank": 77,
      "score": 7.5819855281879285,
      "candidate": "def min_length(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    min_len = len(s)\n    for i in range(0, len(s)):\n        for j in range(0, len(s)):\n            if i!= j and s[i] == s[j]:\n                min_len = min(min_len, len(s) - (j - i))\n    return min_len\n\nif __name__ == '__main__':\n    assert(min_length(\"b\") == 1)\n    assert(min_length(\"abbabbb\") == 2)"
    },
    {
      "rank": 78,
      "score": 7.562924366763077,
      "candidate": "def min_len(string, target):\n    if len(string) == 1:\n        return 1\n    else:\n        return min(min_len(string[1:], target), min_len(string[:-1], target)) + 1\n\n\nprint(min_len(\"abc\", \"c\"))\nprint(min_len(\"aabb\", \"b\"))\nprint(min_len(\"aaabbb\", \"b\"))\nprint(min_len(\"aabbbbb\", \"b\"))"
    },
    {
      "rank": 79,
      "score": 7.4878043221155455,
      "candidate": "def min_str(string):\n    \"\"\"\n    Input: string\n    Output: Minimum length of the string without any character occurrence.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            count += 1\n    return len(string) - count\n\nprint(min_str(\"aaaaaa\"))\nprint(min_str(\"aaa\"))\nprint(min_str(\"aaaa\"))\nprint(min_str(\"aa\"))\nprint(min_str(\"\"))"
    },
    {
      "rank": 80,
      "score": 7.464609382504557,
      "candidate": "import re\n\ndef remove_occurence(string):\n    new_string = \"\"\n    for char in string:\n        if char in new_string:\n            continue\n        new_string = new_string + char\n    return new_string\n\ndef main():\n    print(remove_occurence(\"hello\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 3.0,
      "candidate": "import unittest\nfrom solution import remove_one\n\nclass TestSolution(unittest.TestCase):\n    def test_minimize(self):\n        self.assertEqual(remove_one('abcabcabc'), 'abcabc')\n        self.assertEqual(remove_one('abcabc'), 'abc')\n        self.assertEqual(remove_one('abcc'), 'abc')\n        self.assertEqual(remove_one('abc'), 'abc')\n        self.assertEqual(remove_one('abc'), 'abc')\n        self.assertEqual(remove_one('abcabc'), 'abc')\n        self.assertEqual(remove_one('abcabcabc'), 'abc')\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 82,
      "score": 3.0,
      "candidate": "def min_len(s):\n    \"\"\"\n    Minimize the length of the string s by removing only one occurrence of characters.\n    :param s: string\n    :return: string\n    \"\"\"\n    # Initialize the list of characters to be deleted\n    deleted = []\n    # Initialize the length of the string to be minimized\n    length = len(s)\n    # Initialize the index to be used in the loop\n    index = 0\n    # Initialize the number of characters to be deleted\n    count = 0\n    # Initialize the number of characters to be deleted\n    count_1 = 0\n    # Initialize the number of characters to be deleted\n    count_2 = 0\n    # Initialize the number of characters to be deleted\n    count_3 = 0\n    # Initialize the number of characters to be deleted\n    count_4 = 0\n    # Initialize the number of characters to be deleted\n    count_5 = 0\n    # Initialize the number of characters to be deleted\n    count_6 = 0\n    # Initialize the number of characters to be deleted\n    count_7 = 0\n    # Initialize the number of characters to be deleted\n    count_8 = 0\n    # Initialize the number of characters to be deleted\n    count_9 = 0\n    # Initialize the number of characters to be deleted\n    count_10 = 0\n    # Initialize the number of characters to be deleted\n    count_11 = 0\n    # Initialize the number of characters to be deleted\n    count_12 = 0\n    # Initialize the number of characters to be deleted\n    count_13 = 0\n    # Initialize the number of characters to be deleted\n    count_14 = 0\n    # Initialize the number of characters to be deleted\n    count_15 = 0\n    # Initialize the number of characters to be deleted\n    count_16 = 0\n    # Initialize the number of characters to be deleted\n    count_17 = 0\n    # Initialize the number of characters to be deleted\n    count_18 = 0\n    # Initialize the number of characters to be deleted\n    count_19 = 0\n    # Initialize the number of characters to be deleted\n    count_20 = 0\n    # Initialize the number of characters to be deleted"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "# Function to check whether a given string is only contains one character\ndef is_only_one_char(str_to_check):\n    if str_to_check == \"\":\n        return True\n    if len(str_to_check) == 1:\n        return True\n    else:\n        return False\n\n# Function to check whether a given string is only contains one character\ndef check_if_only_one_char(str_to_check):\n    if str_to_check == \"\":\n        return True\n    if len(str_to_check) == 1:\n        return True\n    else:\n        return False\n\n# Function to check whether a given string is only contains one character\ndef check_if_only_one_char(str_to_check):\n    if str_to_check == \"\":\n        return True\n    if len(str_to_check) == 1:\n        return True\n    else:\n        return False\n\n# Function to check whether a given string is only contains one character\ndef check_if_only_one_char(str_to_check):\n    if str_to_check == \"\":\n        return True\n    if len(str_to_check) == 1:\n        return True\n    else:\n        return False\n\n# Function to check whether a given string is only contains one character\ndef check_if_only_one_char(str_to_check):\n    if str_to_check == \"\":\n        return True\n    if len(str_to_check) == 1:\n        return True\n    else:\n        return False\n\n# Function to check whether a given string is only contains one character\ndef check_if_only_one_char(str_to_check):\n    if str_to_check == \"\":\n        return True\n    if len(str_to_check) == 1:\n        return True\n    else:\n        return False\n\n# Function to check whether a given string is only contains one character\ndef check_if_only_one_char(str_to_check):\n    if str_to_check == \"\":\n        return True\n    if len(str_to_check) == 1:\n        return True\n    else:"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "import unittest\n\n\ndef min_length_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if s == \"\":\n        return 0\n\n    s = s.upper()\n    return 1 + min(s.count(c) for c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\n\nclass TestMinLengthString(unittest.TestCase):\n\n    def test_min_length_string(self):\n        self.assertEqual(min_length_string(\"\"), 0)\n        self.assertEqual(min_length_string(\"A\"), 1)\n        self.assertEqual(min_length_string(\"ABC\"), 2)\n        self.assertEqual(min_length_string(\"ABCD\"), 3)\n        self.assertEqual(min_length_string(\"ABCDE\"), 4)\n        self.assertEqual(min_length_string(\"ABCDEFG\"), 4)\n        self.assertEqual(min_length_string(\"ABCDEFGHIJ\"), 6)\n        self.assertEqual(min_length_string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), 26)\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "def remove_only_one_char(str):\n    return ''.join(c for c in str if c not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\nprint(remove_only_one_char('abcdabcde'))\nprint(remove_only_one_char('abcdabcde'))\nprint(remove_only_one_char('abcdabcde'))"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "# Note:\n# Given a string, we could do this by doing a loop to find the minimum number of times a character appears.\n# But, this would be too slow.\n# We could do this by using a map, which maps each character to its frequency.\n#\n# time complexity: O(n)\n# space complexity: O(n)\n#\n#\n#\n# Note:\n# You could also use a hashmap, but the hashmap would be slower.\n#\n#\n#\n#\n#\n#\n# Example:\n# Input:\n# s = \"aabbcc\"\n#\n# Output:\n# \"abbc\"\n#\n#\n#\n#\n#\n#\n#\n# Note:\n# s will have length in range [1, 100].\n# s[i] will be a character in string.\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def min_length_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    # TODO:\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    assert min_length_string(\"ab\") == 2\n    assert min_length_string(\"abbbbb\") == 2\n    assert min_length_string(\"abbbbbabbbbbbbb\") == 2\n    assert min_length_string(\"abbbbbabbbbbbbbbb\") == 2\n    assert min_length_string(\"abbbbbabbbbbbbbbbbb\") == 3\n    assert min_length_string(\"abbbbbabbbbbbbbbbbbbbb\") == 3\n    assert min_length_string(\"abbbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\") == 4\n    assert min_length_string(\"abbbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\") == 4"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def remove_only_one(str):\n    if len(str) < 2:\n        return str\n    \n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                str = str[:i] + str[j+1:]\n                break\n\n    return str\n\n\nif __name__ == \"__main__\":\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc\") == \"abcabcabc\"\n    assert remove_only_one(\"abcabcabc"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def remove_char(string):\n    return len(string) - len(set(string))\n\ndef test_remove_char():\n    assert remove_char('abcd') == 3\n    assert remove_char('abcdefghij') == 2\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') == 3\n    assert remove_char('abcd') =="
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def remove_one_char(s):\n    \"\"\"\n    :param s: string to be removed\n    :return: string without one character\n    \"\"\"\n    return \"\".join([c for c in s if c not in \"abcd\"])\n\ndef remove_one_char_1(s):\n    \"\"\"\n    :param s: string to be removed\n    :return: string without one character\n    \"\"\"\n    return \"\".join([c for c in s if c not in \"abcdefghijklmnopqrstuvwxyz\"])\n\ndef remove_one_char_2(s):\n    \"\"\"\n    :param s: string to be removed\n    :return: string without one character\n    \"\"\"\n    return \"\".join([c for c in s if c not in \"0123456789\"])\n\ndef remove_one_char_3(s):\n    \"\"\"\n    :param s: string to be removed\n    :return: string without one character\n    \"\"\"\n    return \"\".join([c for c in s if c not in \"0123456789abcdefghijklmnopqrstuvwxyz\"])\n\ndef remove_one_char_4(s):\n    \"\"\"\n    :param s: string to be removed\n    :return: string without one character\n    \"\"\"\n    return \"\".join([c for c in s if c not in \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"])\n\ndef remove_one_char_5(s):\n    \"\"\"\n    :param s: string to be removed\n    :return: string without one character\n    \"\"\"\n    return \"\".join([c for c in s if c not in \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"])\n\ndef remove_one_char_6(s):\n    \"\"\"\n    :param s: string to be removed\n    :return: string without one character\n    \"\"\"\n    return \"\".join([c for c in s if c not in \"0123456789"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "import re\n\n\ndef remove_one_char(string):\n    return re.sub(r'\\b\\w+\\b', '', string)\n\n\nprint remove_one_char('abcabc')\n\n\n\"\"\"\nWrite a python function to remove all the substrings of a given string.\n\"\"\"\n\ndef remove_substring(string):\n    return ''.join(re.findall(r'\\b\\w+\\b', string))\n\n\nprint remove_substring('abcabc')\n\n\n\"\"\"\nWrite a python function to remove all the substrings of a given string.\n\"\"\"\n\ndef remove_substring2(string):\n    return ''.join(sorted(re.findall(r'\\b\\w+\\b', string)))\n\n\nprint remove_substring2('abcabc')\n\n\n\"\"\"\nWrite a python function to remove all the substrings of a given string.\n\"\"\"\n\ndef remove_substring3(string):\n    return ''.join(sorted(set(re.findall(r'\\b\\w+\\b', string))))\n\n\nprint remove_substring3('abcabc')\n\n\n\"\"\"\nWrite a python function to remove all the substrings of a given string.\n\"\"\"\n\ndef remove_substring4(string):\n    return ''.join(sorted(set(re.findall(r'\\b\\w+\\b', string)), key=len))\n\n\nprint remove_substring4('abcabc')\n\n\n\"\"\"\nWrite a python function to remove all the substrings of a given string.\n\"\"\"\n\ndef remove_substring5(string):\n    return ''.join(sorted(set(re.findall(r'\\b\\w+\\b', string)), key=len, reverse=True))\n\n\nprint remove_substring5('abcabc')"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def remove_char(s):\n    # remove any character that appears only once\n    return ''.join(s.split(s[0]))\n\ndef remove_char2(s):\n    # remove any character that appears only once\n    return s.replace('a','',1)\n\ndef remove_char3(s):\n    # remove any character that appears only once\n    return s.replace('a','',1)\n\nprint remove_char('aabbccddeeeeeee')\nprint remove_char('aabbccddeeeeeee')\nprint remove_char2('aabbccddeeeeeee')\nprint remove_char3('aabbccddeeeeeee')"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "# Example\n#\n# str = 'aabcccbbb'\n#\n# Return: 'aabbcbbb'\n\n# Ref.\n# http://www.geeksforgeeks.org/remove-occurrence-of-character-in-a-string-python/\n\ndef remove_occurrence_of_only_one_character(str):\n    return ''.join(c for c in str if c not in ('a', 'b', 'c'))\n\nif __name__ == '__main__':\n    print(remove_occurrence_of_only_one_character('aabcccbbb'))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "import unittest\n\n\ndef length_of_the_longest_substring_without_repeating_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    length = 0\n    dp = [0 for _ in range(256)]\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i] == s[j]:\n                dp[ord(s[i])] = max(dp[ord(s[i])], dp[ord(s[j])] + 1)\n            else:\n                dp[ord(s[i])] = max(dp[ord(s[i])], dp[ord(s[j])] + 1)\n                dp[ord(s[j])] = max(dp[ord(s[i])], dp[ord(s[j])] + 1)\n\n    for c in range(len(s)):\n        if dp[c] == len(s):\n            length = max(length, dp[c])\n\n    return length\n\n\nclass Test(unittest.TestCase):\n\n    def test(self):\n        self.assertEqual(length_of_the_longest_substring_without_repeating_char('abcabc'), 1)\n        self.assertEqual(length_of_the_longest_substring_without_repeating_char('abcabcdef'), 2)\n        self.assertEqual(length_of_the_longest_substring_without_repeating_char('abbbc'), 2)\n        self.assertEqual(length_of_the_longest_substring_without_repeating_char('abbbc'), 2)\n        self.assertEqual(length_of_the_longest_substring_without_repeating_char('abbbc'), 2)\n        self.assertEqual(length_of_the_longest_substring_without_repeating_char('abbbc'), 2)\n        self.assertEqual(length_of_the_longest_substring_without_repeating_char('abbbc'), 2)\n        self.assert"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "# https://www.hackerrank.com/challenges/the-minimax-game/problem\n\n# TODO:\n# 1. Make it work for any string.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string in the input.\n\n# TODO:\n# 1. Make it work with string"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def remove_char(s):\n    \"\"\"\n    Remove all occurances of only one character.\n    \"\"\"\n    return ''.join(ch for ch in s if ch!= 'a')\n\ndef remove_all_char(s):\n    \"\"\"\n    Remove all occurances of all characters.\n    \"\"\"\n    return ''.join(ch for ch in s)\n\ndef remove_char_count(s):\n    \"\"\"\n    Remove all occurances of only one character by counting the occurances.\n    \"\"\"\n    return ''.join(ch for ch in s if ch!= 'a')\n\ndef remove_all_char_count(s):\n    \"\"\"\n    Remove all occurances of all characters by counting the occurances.\n    \"\"\"\n    return ''.join(ch for ch in s)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    s = 'abcabcabc'\n    print(s)\n    print(remove_char_count(s))\n    print(remove_all_char_count(s))\n    print(remove_char(s))\n    print(remove_all_char(s))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def min_length_string(s):\n    # Your code here\n    if len(s) == 0:\n        return 0\n    result = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            result += 1\n    return result\n\nprint min_length_string('abcd')\n\n\"\"\"\nWrite a python function to find the longest common subsequence (LCS) between two strings.\n\nFor example, if the two strings are \"abc\" and \"abcd\", the LCS is \"abc\"\n\"\"\"\n\ndef lcs(s1, s2):\n    # Your code here\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m):\n        for j in range(n):\n            if s1[i] == s2[j]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp[m-1][n-1]\n\nprint lcs('abc', 'abcd')\n\n\"\"\"\nWrite a python function to find the longest common subsequence (LCS) between two strings.\n\nFor example, if the two strings are \"abc\" and \"abcd\", the LCS is \"abc\"\n\"\"\"\n\ndef lcs2(s1, s2):\n    # Your code here\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m):\n        for j in range(n):\n            if s1[i] == s2[j]:\n                dp[i][j] = max(dp[i][j-1], dp[i"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# I/O Imports\nimport sys\n\n# Constants\nCHAR_SET = set(\"abcdefghijklmnopqrstuvwxyz\")\n\n\ndef min_length(s):\n    \"\"\"\n    Return the minimum length of s.\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s)\n\n\ndef remove_one_char(s):\n    \"\"\"\n    Remove one character from s.\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s[:-1]\n\n\ndef remove_char(s):\n    \"\"\"\n    Remove one character from s.\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s[1:]\n\n\ndef test_min_length():\n    assert min_length(\"abcdefghijklmnopqrstuvwxyz\") == 10\n    assert min_length(\"abcdefghijklmnopqrstuvwxyz\") == 10\n    assert min_length(\"abcdefghijklmnopqrstuvwxyz\") == 10\n    assert min_length(\"abcdefghijklmnopqrstuvwxyz\") == 10\n    assert min_length(\"abcdefghijklmnopqrstuvwxyz\") == 10\n    assert min_length(\"abcdefghijklmnopqrstuvwxyz\") == 10\n\n\ndef test_remove_one_char():\n    assert remove_one_char(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n    assert remove_one_char(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n    assert remove_one_char(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n    assert remove_one_char(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n    assert remove_one_char(\"abcdef"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def remove_one_char(s):\n    \"\"\"\n    Input: s - a string\n    Output: a string of s with only one occurrence of one character.\n    \"\"\"\n    chars = []\n    for c in s:\n        if c not in chars:\n            chars.append(c)\n    return ''.join(chars)\n\ndef test_remove_one_char():\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_one_char('abcd') == 'd'\n    assert remove_"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "import unittest\n\nclass Solution(object):\n    def removeDuplicates(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: int\n        \"\"\"\n        if not strs:\n            return 0\n        if len(strs) == 1:\n            return len(strs[0])\n        res = 0\n        for i in xrange(len(strs)):\n            if strs[i] == strs[i-1]:\n                continue\n            res += 1\n            strs[i-1] = strs[i]\n        return res\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/minimize-the-length-of-the-string-by-removing-occurrence-of-only-one-character/solution/\n# Approach #1: Sort and Remove Duplicates\n# Complexity Analysis\n# Time Complexity: O(N) where N is the number of strings.\n# Space Complexity: O(N) where N is the number of strings.\n#\n\n# 2ms 100%\nclass Solution {\n    public int removeDuplicates(int[] A) {\n        int res = 0;\n        for (int i = 0; i < A.length; i++) {\n            if (A[i] == A[i - 1]) continue;\n            res++;\n            A[i - 1] = A[i];\n        }\n        return res;\n    }\n}\n\n# 3ms 100%\nclass Solution {\n    public int removeDuplicates(int[] A) {\n        int n = A.length;\n        if (n == 1) return n;\n        int last = A[0];\n        int res = 1;\n        for (int i = 1; i < n; i++) {\n            if (A[i]!= last) {\n                last = A[i];\n                res++;\n            }\n        }\n        return res"
    }
  ]
}