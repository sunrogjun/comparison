{
  "timestamp": "2025-09-14T17:53:24.614132",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codegen-2b",
  "dataset": "mbpp",
  "problem_number": 71,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def volume(radius):\n    \"\"\"\n    Given radius, return the volume of a sphere.\n\n    Example:\n    >>> volume(1)\n    1\n    >>> volume(2)\n    4\n    >>> volume(3)\n    12\n    >>> volume(4)\n    64\n    >>> volume(5)\n    1536\n    >>> volume(6)\n    32768\n    >>> volume(7)\n    536870912\n    >>> volume(8)\n    1073741824\n    >>> volume(9)\n    2147483648\n    >>> volume(10)\n    4294967296\n    \"\"\"\n    return radius * 4 * 3 * 2 * 6\n\nprint(volume(4))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\nclass Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @param {integer} z\n    # @return {integer}\n    def sphereVolume(self, x, y, z):\n        r = math.sqrt((x * x) + (y * y) + (z * z))\n        return math.pi * r * r * r\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.sphereVolume(4, 3, 2))\n    print(s.sphereVolume(1, 0, 0))\n    print(s.sphereVolume(0, 0, 0))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Function to calculate the volume of a sphere\n\n    :param radius: the radius of the sphere\n    :return: the volume of the sphere\n    \"\"\"\n    return 4/3 * 3.14159 * radius**3\n\ndef main():\n    \"\"\"\n    Write a function to calculate the volume of a sphere.\n\n    :return: the volume of the sphere\n    \"\"\"\n    print sphere_volume(5)\n    return\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "#%%\ndef sphere_volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the sphere.\n\n    Returns\n    -------\n    volume : float\n        The volume of the sphere.\n    \"\"\"\n    return 4/3*np.pi*radius**3\n\n#%%\ndef sphere_surface_area(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the sphere.\n\n    Returns\n    -------\n    surface_area : float\n        The surface area of the sphere.\n    \"\"\"\n    return 2*np.pi*radius**2\n\n#%%\ndef sphere_surface_area(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the sphere.\n\n    Returns\n    -------\n    surface_area : float\n        The surface area of the sphere.\n    \"\"\"\n    return 2*np.pi*radius**2\n\n#%%\ndef sphere_volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the sphere.\n\n    Returns\n    -------\n    volume : float\n        The volume of the sphere.\n    \"\"\"\n    return 4/3*np.pi*radius**3\n\n#%%\ndef sphere_surface_area(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the sphere.\n\n    Returns\n    -------\n    surface_area : float\n        The surface area of the sphere.\n    \"\"\"\n    return 2*np.pi*radius**2\n\n#%%\ndef sphere_volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the sphere.\n\n    Returns\n    -------\n    volume : float\n        The volume of the sphere.\n    \"\"\"\n    return 4/3*np.pi*radius**3\n\n#%%\ndef sphere_surface_area(radius):"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def volume(radius):\n    \"\"\"\n    The volume of a sphere is:\n    4/3 * pi * radius^3.\n\n    Return the volume of a sphere with radius radius.\n    \"\"\"\n\n    return 4.0 / 3.0 * 3.1415926 * radius ** 3\n\ndef test():\n    assert volume(1) == 1.0\n    assert volume(2) == 4.0 / 3.0\n    assert volume(3) == 8.0 / 3.0\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    Given radius, calculate the volume of a sphere.\n\n    >>> sphere_volume(3)\n    3.141592653589793\n    >>> sphere_volume(4)\n    16\n    >>> sphere_volume(5)\n    29.41592653589793\n    \"\"\"\n    return math.pi * math.pow(radius, 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef sphere_volume(radius):\n    return 4/3 * 3.14159 * radius * radius * radius\n\n\nif __name__ == '__main__':\n    print sphere_volume(1)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(r):\n    return 4.0 / 3.0 * math.pi * r * r * r\n\ndef main():\n    print sphere_volume(4)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: float\n    \"\"\"\n    return 4/3 * math.pi * radius**3\n\nprint(sphere_volume(3))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution:\n    \"\"\"\n    @param radius: A float\n    @return: An integer\n    \"\"\"\n    def sphereVolume(self, radius):\n        \"\"\"\n        :type radius: float\n        :rtype: int\n        \"\"\"\n        return 4.0 / 3.0 * 3.14159 * radius * radius * radius\n\ns = Solution()\n\nprint(s.sphereVolume(1.0))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def sphere_volume(radius):\n    return 4/3 * 3.14159 * radius**3\n\nprint sphere_volume(3)\nprint sphere_volume(4)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def sphere_volume(radius):\n    return 4 * 3.14159 * radius ** 3\n\nif __name__ == \"__main__\":\n    print sphere_volume(1)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/volume-of-a-sphere/discuss/206834/Python-Solution-with-explanation\n# https://discuss.leetcode.com/topic/103800/python-solution-with-explanation\n\nclass Solution(object):\n    def volume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return x**2*y**2*z**2"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import math\ndef volume(r):\n    return math.pi * (r**3)\n\nprint(volume(2))\nprint(volume(3))\nprint(volume(4))\nprint(volume(5))\nprint(volume(6))\nprint(volume(7))\nprint(volume(8))\nprint(volume(9))\nprint(volume(10))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    Return the volume of a sphere with radius 'radius'.\n    \"\"\"\n    return 4.0/3.0 * math.pi * pow(radius, 3)\n\n#print sphere_volume(3)\n\n\"\"\"\nTesting\n\"\"\"\n\ndef main():\n    \"\"\"\n    Call sphere_volume() and print its result.\n    \"\"\"\n    print sphere_volume(3)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# https://leetcode.com/problems/sphere-volume/\n\nclass Solution(object):\n    def volume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return x * y * z\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.volume(x, y, z)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import math\n\ndef sphereVolume(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return math.pi * pow(radius, 3)\n\nif __name__ == \"__main__\":\n    print sphereVolume(2)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# Complete the function below.\ndef volume(radius):\n  \"\"\"\n  Function to find the volume of a sphere.\n\n  Args:\n    radius: float\n  Returns:\n    float\n  \"\"\"\n\n  return 4.0/3.0 * 3.141592653589793 * pow(radius, 3)\n\nif __name__ == '__main__':\n  print volume(4)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from math import pi, sqrt\n\n\ndef sphere_volume(radius):\n    \"\"\"\n    Returns the volume of a sphere with radius.\n\n    >>> sphere_volume(3)\n    12\n    >>> sphere_volume(4)\n    36\n    \"\"\"\n    return pi * radius * radius * radius / 3\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    Given radius of a sphere, return the volume of the sphere.\n    \"\"\"\n    return math.pi * pow(radius, 3)\n\n# Test Cases\n\nassert sphere_volume(1) == 1.0\nassert sphere_volume(2) == 4.0\nassert sphere_volume(3) == 12.0\nassert sphere_volume(4) == 64.0\nassert sphere_volume(5) == 256.0\nassert sphere_volume(6) == 1024.0\nassert sphere_volume(7) == 4096.0\nassert sphere_volume(8) == 16384.0\nassert sphere_volume(9) == 65536.0\nassert sphere_volume(10) == 262144.0\nassert sphere_volume(11) == 1048576.0\nassert sphere_volume(12) == 4194304.0"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    return 4.0 / 3.0 * math.pi * math.pow(radius, 3.0)\n\ndef main():\n    print sphere_volume(1)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def sphereVolume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return ((x**2 + y**2 + z**2)**.5)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: float\n    \"\"\"\n    return 4/3 * 3.14159 * radius * radius * radius\n\nif __name__ == '__main__':\n    print sphere_volume(3)\n    print sphere_volume(4)\n    print sphere_volume(5)\n    print sphere_volume(6)\n    print sphere_volume(7)\n    print sphere_volume(8)\n    print sphere_volume(9)\n    print sphere_volume(10)\n    print sphere_volume(11)\n    print sphere_volume(12)\n    print sphere_volume(13)\n    print sphere_volume(14)\n    print sphere_volume(15)\n    print sphere_volume(16)\n    print sphere_volume(17)\n    print sphere_volume(18)\n    print sphere_volume(19)\n    print sphere_volume(20)\n    print sphere_volume(21)\n    print sphere_volume(22)\n    print sphere_volume(23)\n    print sphere_volume(24)\n    print sphere_volume(25)\n    print sphere_volume(26)\n    print sphere_volume(27)\n    print sphere_volume(28)\n    print sphere_volume(29)\n    print sphere_volume(30)\n    print sphere_volume(31)\n    print sphere_volume(32)\n    print sphere_volume(33)\n    print sphere_volume(34)\n    print sphere_volume(35)\n    print sphere_volume(36)\n    print sphere_volume(37)\n    print sphere_volume(38)\n    print sphere_volume(39)\n    print sphere_volume(40)\n    print sphere_volume(41)\n    print sphere_volume(42)\n    print sphere_volume(43)\n    print sphere_volume(44)\n    print sphere_volume(45)\n    print sphere_volume(46)\n    print sphere_volume(47)\n    print sphere_volume(48)\n    print sphere_volume(49)\n    print sphere_volume(50)\n    print sphere_volume(51)\n    print sphere_volume(52)\n    print sphere_"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/sphere-volume/problem\n\nimport math\n\ndef volume(radius):\n    return math.pi * radius * radius * radius\n\ndef main():\n    radius = int(input())\n    print(volume(radius))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# https://www.hackerrank.com/challenges/sphere-volume/problem\n\ndef sphere_volume(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: float\n    \"\"\"\n    volume = 4 * 3.1415926 * radius * radius * radius\n    return volume\n\nif __name__ == \"__main__\":\n    radius = int(input())\n    print(sphere_volume(radius))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(r):\n    \"\"\"\n    Returns the volume of a sphere with radius r.\n    \"\"\"\n    return math.pi * r * r * r\n\ndef test():\n    \"\"\"\n    Testing your function\n    \"\"\"\n    assert sphere_volume(3) == 1.0\n    assert sphere_volume(2) == 1.0\n    assert sphere_volume(1) == 1.0\n    assert sphere_volume(0.5) == 1.0\n    assert sphere_volume(-1) == 0\n    assert sphere_volume(-2) == 0\n    assert sphere_volume(1.1) == 0\n    assert sphere_volume(2.1) == 0\n\ntest()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "import math\n\ndef volume(r):\n    return r * r * 3.141592654\n\ndef sphere_volume(r):\n    return volume(r) / math.pi\n\nprint sphere_volume(1)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "import math\n\ndef volume(radius):\n    \"\"\"\n    Returns the volume of a sphere with a given radius.\n\n    :param radius: The radius of the sphere.\n    :return: The volume of the sphere.\n    \"\"\"\n    return math.pi * radius * radius * radius / 3.0\n\nif __name__ == \"__main__\":\n    print(volume(1.0))\n    print(volume(2.0))\n    print(volume(3.0))\n    print(volume(4.0))\n    print(volume(5.0))\n    print(volume(6.0))\n    print(volume(7.0))\n    print(volume(8.0))\n    print(volume(9.0))\n    print(volume(10.0))\n    print(volume(11.0))\n    print(volume(12.0))\n    print(volume(13.0))\n    print(volume(14.0))\n    print(volume(15.0))\n    print(volume(16.0))\n    print(volume(17.0))\n    print(volume(18.0))\n    print(volume(19.0))\n    print(volume(20.0))\n    print(volume(21.0))\n    print(volume(22.0))\n    print(volume(23.0))\n    print(volume(24.0))\n    print(volume(25.0))\n    print(volume(26.0))\n    print(volume(27.0))\n    print(volume(28.0))\n    print(volume(29.0))\n    print(volume(30.0))\n    print(volume(31.0))\n    print(volume(32.0))\n    print(volume(33.0))\n    print(volume(34.0))\n    print(volume(35.0))\n    print(volume(36.0))\n    print(volume(37.0))\n    print(volume(38.0))\n    print(volume(39.0))\n    print(volume(40.0))\n    print(volume(41.0))\n    print(volume(42.0))\n    print(volume(43.0))\n    print"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "#!/usr/bin/python\n\ndef sphere_volume(radius):\n    return 4.0/3.0 * 3.1415926 * radius**3\n\n# Test Cases\n\nprint sphere_volume(1.0)\nprint sphere_volume(2.0)\nprint sphere_volume(3.0)\nprint sphere_volume(4.0)\n\nprint sphere_volume(5.0)\nprint sphere_volume(6.0)\nprint sphere_volume(7.0)\nprint sphere_volume(8.0)\n\nprint sphere_volume(9.0)\nprint sphere_volume(10.0)\nprint sphere_volume(11.0)\nprint sphere_volume(12.0)\n\nprint sphere_volume(13.0)\nprint sphere_volume(14.0)\nprint sphere_volume(15.0)\nprint sphere_volume(16.0)"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "class Solution:\n    # @return an integer\n    def volume(self, radius):\n        return (4/3) * (radius * radius * radius)\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.volume(1))\n    print(s.volume(2))\n    print(s.volume(3))\n    print(s.volume(4))\n    print(s.volume(5))\n    print(s.volume(6))\n    print(s.volume(7))\n    print(s.volume(8))\n    print(s.volume(9))\n    print(s.volume(10))\n    print(s.volume(11))\n    print(s.volume(12))\n    print(s.volume(13))\n    print(s.volume(14))\n    print(s.volume(15))\n    print(s.volume(16))\n    print(s.volume(17))\n    print(s.volume(18))\n    print(s.volume(19))\n    print(s.volume(20))\n    print(s.volume(21))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(r):\n    return math.pi * r * r * 3.0\n\n# Your code here\n#r = float(input())\n#print(sphere_volume(r))\n\nprint(sphere_volume(2))\nprint(sphere_volume(3))\nprint(sphere_volume(4))\nprint(sphere_volume(5))\nprint(sphere_volume(6))\nprint(sphere_volume(7))\nprint(sphere_volume(8))\nprint(sphere_volume(9))\nprint(sphere_volume(10))\nprint(sphere_volume(11))\nprint(sphere_volume(12))\nprint(sphere_volume(13))\nprint(sphere_volume(14))\nprint(sphere_volume(15))\nprint(sphere_volume(16))\nprint(sphere_volume(17))\nprint(sphere_volume(18))\nprint(sphere_volume(19))\nprint(sphere_volume(20))\nprint(sphere_volume(21))\nprint(sphere_volume(22))\nprint(sphere_volume(23))\nprint(sphere_volume(24))\nprint(sphere_volume(25))\nprint(sphere_volume(26))\nprint(sphere_volume(27))\nprint(sphere_volume(28))\nprint(sphere_volume(29))\nprint(sphere_volume(30))\nprint(sphere_volume(31))\nprint(sphere_volume(32))\nprint(sphere_volume(33))\nprint(sphere_volume(34))\nprint(sphere_volume(35))\nprint(sphere_volume(36))\nprint(sphere_volume(37))\nprint(sphere_volume(38))\nprint(sphere_volume(39))\nprint(sphere_volume(40))\nprint(sphere_volume(41))\nprint(sphere_volume(42))\nprint(sphere_volume(43))\nprint(sphere_volume(44))\nprint(sphere_volume(45))\nprint(sphere_volume(46))\nprint(sphere_volume(47))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius ** 3\n\nprint(volume_sphere(3))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def sphere_volume(r):\n    \"\"\"\n    Return the volume of a sphere of radius r.\n\n    Example:\n    >>> sphere_volume(1)\n    1.0\n    >>> sphere_volume(2)\n    4.0\n    >>> sphere_volume(3)\n    16.0\n    >>> sphere_volume(4)\n    64.0\n    >>> sphere_volume(5)\n    256.0\n    >>> sphere_volume(6)\n    1024.0\n    >>> sphere_volume(7)\n    4096.0\n    >>> sphere_volume(8)\n    262144.0\n    >>> sphere_volume(9)\n    5242880.0\n    >>> sphere_volume(10)\n    3.7625E+15\n    >>> sphere_volume(11)\n    1.4E+16\n    >>> sphere_volume(12)\n    4.3E+17\n    \"\"\"\n    return 4.0 * r * r * r\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def sphere_volume(r):\n    \"\"\"\n    Calculate the volume of a sphere with radius r.\n\n    Example:\n        >>> sphere_volume(1)\n        3.141592653589793\n        >>> sphere_volume(2)\n        16.0\n        >>> sphere_volume(3)\n        5040.0\n    \"\"\"\n    return 4/3 * 3.141592653589793 * r**3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    return 4/3 * math.pi * radius**3\n\nprint(sphere_volume(1))\nprint(sphere_volume(2))\nprint(sphere_volume(3))\nprint(sphere_volume(4))\nprint(sphere_volume(5))\nprint(sphere_volume(6))\nprint(sphere_volume(7))\nprint(sphere_volume(8))\nprint(sphere_volume(9))\nprint(sphere_volume(10))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    return math.pi * 4 * radius ** 3\n\nif __name__ == '__main__':\n    print sphere_volume(2)"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    For a sphere, the volume is pi*r^3.\n    \"\"\"\n    return 4.0 * 3.14159 * radius**3\n\ndef main():\n    \"\"\"\n    Use the previous function to write a program that prints the volume of a\n    sphere with a radius of 2.\n    \"\"\"\n    print sphere_volume(2)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "def volume(radius):\n    \"\"\"\n    Returns the volume of a sphere of radius `radius`\n    \"\"\"\n    return 4/3 * pi * radius ** 3\n\nprint(volume(3))"
    },
    {
      "rank": 39,
      "score": 9.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Returns the volume of a sphere.\n    \"\"\"\n    return 4/3 * radius**3\n\nprint sphere_volume(4)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def sphereVolume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        x, y, z = sorted([x, y, z])\n        delta = x*x + y*y + z*z - x*x - y*y - z*z\n        return 4 * x * y * z / 3 * math.sqrt(delta)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    Find the volume of a sphere with radius 'radius'.\n\n    Returns:\n        volume: The volume of the sphere.\n    \"\"\"\n    return math.pi * (4/3) * pow(radius, 3)\n\ndef main():\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    print sphere_volume(1)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere with given radius.\n\n    :param radius: the radius of the sphere.\n    :return: the volume of the sphere.\n    \"\"\"\n    return math.pi * radius * radius * radius\n\n\ndef main():\n    \"\"\"\n    Test function.\n    \"\"\"\n    print(sphere_volume(3.0))\n    print(sphere_volume(4.0))\n    print(sphere_volume(5.0))\n    print(sphere_volume(6.0))\n    print(sphere_volume(7.0))\n    print(sphere_volume(8.0))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(r):\n    return r * r * 3.14159 / 4\n\nif __name__ == '__main__':\n    print volume(5)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(r):\n    \"\"\"\n    Calculate the volume of a sphere with radius r\n    \"\"\"\n    return math.pi * r * r * r / 3\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    r = input(\"Enter radius: \")\n    print(\"Volume of a sphere with radius {} is {}\".format(r, sphere_volume(r)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# A sphere has a diameter of r, which is a positive number\n# The area of the sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n# The volume of a sphere is 4 * pi * r^3\n# The volume of a sphere is 4 * pi * r^2\n#"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculates the volume of a sphere with radius.\n    :param radius: float\n    :return: float\n    \"\"\"\n    return (4/3) * math.pi * radius**3\n\nif __name__ == '__main__':\n    print sphere_volume(3.0)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef sphere_volume(radius):\n    \"\"\"\n    Returns the volume of a sphere given its radius.\n    \"\"\"\n    return 4/3 * sqrt(radius**3)\n\ndef main():\n    \"\"\"\n    Write a program that calculates the volume of a sphere with a radius of\n    1.5.\n    \"\"\"\n    print sphere_volume(1.5)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Find the volume of a sphere with radius radius.\n\n    >>> sphere_volume(5)\n    12.5\n\n    >>> sphere_volume(4)\n    0.16666666666666666\n    \"\"\"\n    return radius * radius * 3.14159\n\n#print(sphere_volume(5))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def sphere_volume(r):\n    \"\"\"\n    r: radius of sphere\n    return: volume of sphere\n    \"\"\"\n    return 4/3 * 3.14159 * r * r * r\n\n# Test cases\nassert sphere_volume(1) == 4\nassert sphere_volume(2) == 12\nassert sphere_volume(3) == 24\nassert sphere_volume(4) == 64\nassert sphere_volume(5) == 96"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    return math.pi * radius ** 3\n\nprint(sphere_volume(3))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Write a function to calculate the volume of a sphere.\n    The function should return the value of the volume.\n    \"\"\"\n    return 4/3 * 3.14159 * radius**3\n\n\ndef main():\n    \"\"\"\n    Write a function to calculate the volume of a sphere.\n    The function should return the value of the volume.\n    \"\"\"\n    assert 0 <= radius <= 10\n    assert sphere_volume(radius) == volume(radius)\n\ndef volume(radius):\n    \"\"\"\n    Write a function to calculate the volume of a sphere.\n    The function should return the value of the volume.\n    \"\"\"\n    return 4/3 * 3.14159 * radius**3\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    :param radius: The radius of the sphere.\n    :return: The volume of the sphere.\n    \"\"\"\n    return math.pi * 4 / 3 * radius**3\n\nif __name__ == '__main__':\n    print volume(3)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Input: radius of a sphere\n    Output: Volume of the sphere\n    \"\"\"\n    return 4.0 / 3.0 * pi * pow(radius, 3)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print sphere_volume(4.0)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(r):\n    \"\"\"\n    Input:\n        r: radius of the sphere\n    Output:\n        Volume of the sphere\n    \"\"\"\n    return math.pi * 4 * r * r\n\nif __name__ == '__main__':\n    print sphere_volume(1)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return math.pi*radius*radius*radius\n\nif __name__ == '__main__':\n    print sphere_volume(3)\n    print sphere_volume(4)\n    print sphere_volume(5)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def volume(radius):\n    \"\"\"\n    Computes the volume of a sphere.\n\n    Input:\n    radius -- the radius of the sphere\n    \"\"\"\n    return 4/3 * math.pi * radius**3\n\ndef main():\n    \"\"\"\n    Write a test function to test your function.\n    \"\"\"\n    print volume(3)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sphere_volume(radius):\n    return 4.0 / 3.0 * math.pi * pow(radius, 3)\n\n\nif __name__ == '__main__':\n    print sphere_volume(1.0)\n    print sphere_volume(2.0)\n    print sphere_volume(3.0)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return 4/3 * math.pi * radius ** 3\n\nif __name__ == '__main__':\n    print(sphere_volume(1))\n    print(sphere_volume(2))\n    print(sphere_volume(3))\n    print(sphere_volume(4))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(r):\n    return 4.0/3.0 * math.pi * r**3\n\ndef main():\n    #print(sphere_volume(5))\n    print(sphere_volume(2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Find the volume of a sphere using the following method:\n\n    Let the radius be r. The volume is r^3.\n\n    Note that the volume of a sphere is not a real number.\n    \"\"\"\n    return 4/3*3.14159*radius**3\n\n#print sphere_volume(5)\n\nprint sphere_volume(1)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __repr__(self):\n        return str(self.x) + \" \" + str(self.y) + \" \" + str(self.z)\n\nclass Solution:\n    # @param point, a list of Point\n    # @return an integer\n    def volume(self, point):\n        if len(point)!= 3:\n            return 0\n        \n        x1 = point[0].x\n        y1 = point[0].y\n        z1 = point[0].z\n        \n        x2 = point[1].x\n        y2 = point[1].y\n        z2 = point[1].z\n        \n        x3 = point[2].x\n        y3 = point[2].y\n        z3 = point[2].z\n        \n        x = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1)\n        y = (x2 - x1) * (y2 - y1) + (z2 - z1) * (z2 - z1)\n        z = (x2 - x1) * (z2 - z1) + (y2 - y1) * (y2 - y1)\n        \n        return x * y * z\n\nif __name__ == '__main__':\n    point = [Point(1, 2, 3), Point(2, 3, 4), Point(3, 4, 5)]\n    s = Solution()\n    print(s.volume(point))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import math\n\ndef volume(r):\n    return 4/3 * math.pi * r * r * r\n\nif __name__ == '__main__':\n    print volume(1)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import math\n\ndef sphereVolume(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return 4/3 * math.pi * radius**3\n\nif __name__ == '__main__':\n    print sphereVolume(2)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def volume(r, h):\n    \"\"\"\n    Input:\n        r: radius\n        h: height\n    Output:\n        volume\n    \"\"\"\n    return 4/3 * r**3 * h\n\nprint volume(5, 5)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n\n    r: radius\n    \"\"\"\n    return (4/3)*math.pi*r*r*r\n\ndef main():\n    print sphere_volume(3)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    Returns the volume of a sphere with radius r.\n    \"\"\"\n    return 4/3 * math.pi * radius**3\n\n\nprint sphere_volume(3)\nprint sphere_volume(5)\nprint sphere_volume(6)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "class Solution(object):\n    \"\"\"\n    @param radius: The radius of the sphere\n    @return: The volume of the sphere\n    \"\"\"\n    def calculate(self, radius):\n        \"\"\"\n        :type radius: int\n        :rtype: int\n        \"\"\"\n        return 4/3*3.14159*radius*radius*radius"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef volume(radius):\n    \"\"\"\n    Find the volume of a sphere.\n    \"\"\"\n    return 4/3 * 3.14159 * radius * radius * radius\n\n\ndef main():\n    print(\"Enter the radius: \")\n    radius = input()\n    print(\"The volume of the sphere is: %s\" % volume(radius))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    Function to calculate the volume of a sphere.\n\n    :param radius: the radius of the sphere.\n    :type radius: int\n    :rtype: float\n    \"\"\"\n    return math.pi * 4.0 * math.pow(radius, 3.0) / 3.0\n\n\n# Test Cases\n# radius = 5\n# print sphere_volume(radius)\n# radius = 7.5\n# print sphere_volume(radius)\n# radius = 10\n# print sphere_volume(radius)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\ndef sphere_volume(r):\n    \"\"\"\n    :param r: radius of sphere\n    :return: volume of sphere\n    \"\"\"\n    return math.pi * (4.0 / 3.0) * r ** 3\n\ndef main():\n    \"\"\"\n    Simple test program to show that the function works.\n    \"\"\"\n    r = 4.0\n    print sphere_volume(r)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "from __future__ import print_function\nimport math\n\ndef sphere_volume(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return 4 * math.pi * radius**3\n\n\nif __name__ == \"__main__\":\n    radius = float(input(\"Enter radius: \"))\n    volume = sphere_volume(radius)\n    print(\"The volume of a sphere with radius {} is {}\".format(radius, volume))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# https://www.hackerrank.com/challenges/sphere-volume/problem\n# https://www.codewars.com/kata/sphere-volume/train/python\n\ndef sphere_volume(radius):\n    # Write your code here\n    return 4.0/3.0 * 3.1415926 * radius ** 3"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sphere_volume(radius):\n    \"\"\"\n    Volume of a sphere.\n    :param radius: radius of the sphere\n    :return: volume of the sphere\n    \"\"\"\n    return 4.0 * math.pi * math.pow(radius, 3)\n\n\ndef main():\n    print(sphere_volume(5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "# import the necessary packages\nimport math\n\ndef volume(radius, height):\n    \"\"\"\n    This function calculates the volume of a sphere.\n    \n    Arguments:\n    radius -- the radius of the sphere\n    height -- the height of the sphere\n    \"\"\"\n    return math.pi * radius**3 * height\n\nif __name__ == \"__main__\":\n    print \"This program will calculate the volume of a sphere.\"\n    print \"Enter the radius of the sphere: \"\n    radius = float(input())\n    print \"Enter the height of the sphere: \"\n    height = float(input())\n    print \"The volume of the sphere is: \" + str(volume(radius, height))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Returns the volume of a sphere.\n\n    The volume of a sphere is the 4/3 * pi * r^3.\n    \"\"\"\n    return 4.0/3.0 * 3.14159 * radius * radius * radius\n\ndef main():\n    \"\"\"\n    Unit tests for sphere_volume().\n    \"\"\"\n    assert sphere_volume(1.0) == 4.0/3.0 * 3.14159 * 1.0 * 1.0 * 1.0\n    assert sphere_volume(2.0) == 4.0/3.0 * 3.14159 * 2.0 * 2.0 * 2.0\n    assert sphere_volume(3.0) == 4.0/3.0 * 3.14159 * 3.0 * 3.0 * 3.0\n    assert sphere_volume(4.0) == 4.0/3.0 * 3.14159 * 4.0 * 4.0 * 4.0\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    :param radius: The radius of the sphere.\n    :return: The volume of the sphere.\n    \"\"\"\n    return 4/3*pi*pow(radius, 3)\n\n\nif __name__ == '__main__':\n    print(volume_sphere(4))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Given the radius of a sphere, return the volume of the sphere.\n    \"\"\"\n    return 4/3 * 3.14159 * radius**3\n\ndef main():\n    \"\"\"\n    Write a function that takes the radius of a sphere and returns the\n    volume of the sphere.\n    \"\"\"\n    print sphere_volume(3)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "import math\nimport sys\n\n\ndef sphere_volume(radius):\n    \"\"\"\n    Return the volume of a sphere.\n\n    @param radius: The radius of the sphere.\n    @type radius: float\n    @return: The volume of the sphere.\n    @rtype: float\n    \"\"\"\n    return 4/3 * math.pi * radius * radius * radius\n\n\ndef main():\n    \"\"\"\n    Write a function to find the volume of a sphere.\n\n    @return: The volume of the sphere.\n    @rtype: float\n    \"\"\"\n    if len(sys.argv) < 2:\n        print(\"Please enter a radius.\")\n        return 1\n    else:\n        radius = float(sys.argv[1])\n        print(\"The volume of the sphere is \" + str(sphere_volume(radius)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Returns the volume of a sphere with radius `radius`\n    \"\"\"\n    return 4/3 * radius * radius * radius\n\nif __name__ == \"__main__\":\n    assert sphere_volume(5) == 12\n    assert sphere_volume(1) == 1\n    assert sphere_volume(0.1) == 0.0"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    :param radius: the radius of the sphere\n    :return: the volume of the sphere\n    \"\"\"\n    return 4/3 * math.pi * radius**3\n\nif __name__ == \"__main__\":\n    print(sphere_volume(4))\n    print(sphere_volume(3))\n    print(sphere_volume(2))\n    print(sphere_volume(1))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "import math\n\n\ndef sphere_volume(r):\n    return 4.0/3.0 * math.pi * r * r * r\n\n\ndef test_sphere_volume():\n    assert sphere_volume(1) == 4.0\n    assert sphere_volume(2) == 8.0\n    assert sphere_volume(3) == 16.0\n    assert sphere_volume(4) == 32.0\n    assert sphere_volume(5) == 64.0\n\n\nif __name__ == \"__main__\":\n    test_sphere_volume()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def sphereVolume(r):\n    \"\"\"\n    :param r: radius of the sphere\n    :return: volume of the sphere\n    \"\"\"\n    return 4/3 * r**3\n\nif __name__ == \"__main__\":\n    print sphereVolume(5)"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return 4/3 * math.pi * radius * radius * radius\n\nprint sphere_volume(3)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Returns the volume of a sphere with radius `radius`.\n    \"\"\"\n    return 4/3 * 3.14159 * radius * radius * radius\n\nif __name__ == \"__main__\":\n    assert sphere_volume(1) == 4/3 * 3.14159, \"sphere_volume()\"\n    assert sphere_volume(2) == 12/5 * 3.14159, \"sphere_volume()\"\n    assert sphere_volume(3) == 24/7 * 3.14159, \"sphere_volume()\"\n    assert sphere_volume(4) == 64/11 * 3.14159, \"sphere_volume()\"\n    assert sphere_volume(5) == 256/33 * 3.14159, \"sphere_volume()\"\n    assert sphere_volume(6) == 1024/49 * 3.14159, \"sphere_volume()\"\n    assert sphere_volume(7) == 4096/97 * 3.14159, \"sphere_volume()\"\n    assert sphere_volume(8) == 16384/193 * 3.14159, \"sphere_volume()\"\n    assert sphere_volume(9) == 65536/385 * 3.14159, \"sphere_volume()\""
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "#!/usr/bin/python\n\n# http://www.tutorialspoint.com/math_geometry/sphere_volume.htm\n\ndef sphere_volume(radius):\n    return 4/3 * 3.14159 * radius**3\n\nif __name__ == \"__main__\":\n    print sphere_volume(3.0)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# -*- coding: utf-8 -*-\n# @Author: omi\n# @Date:   2014-08-10 09:36:50\n# @Last Modified by:   omi\n# @Last Modified time: 2015-04-21 14:01:17\n\nclass Solution(object):\n    def sphereVolume(self, radius):\n        \"\"\"\n        :type radius: int\n        :rtype: int\n        \"\"\"\n        return 4/3*3.1415*radius*radius*radius\n\nprint Solution().sphereVolume(3)"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def sphere_volume(r):\n    \"\"\"\n    :type r: int\n    :rtype: float\n    \"\"\"\n    return 4/3 * 3.14159 * r * r * r\n\nif __name__ == \"__main__\":\n    assert sphere_volume(1) == 4/3 * 3.14159\n    assert sphere_volume(2) == 8/3 * 3.14159\n    assert sphere_volume(3) == 12/3 * 3.14159\n    assert sphere_volume(4) == 16/3 * 3.14159\n    assert sphere_volume(5) == 20/3 * 3.14159\n    assert sphere_volume(6) == 24/3 * 3.14159\n    assert sphere_volume(7) == 28/3 * 3.14159\n    assert sphere_volume(8) == 32/3 * 3.14159\n    assert sphere_volume(9) == 36/3 * 3.14159\n    assert sphere_volume(10) == 40/3 * 3.14159\n    assert sphere_volume(11) == 44/3 * 3.14159\n    assert sphere_volume(12) == 48/3 * 3.14159\n    assert sphere_volume(13) == 52/3 * 3.14159\n    assert sphere_volume(14) == 56/3 * 3.14159\n    assert sphere_volume(15) == 60/3 * 3.14159\n    assert sphere_volume(16) == 64/3 * 3.14159\n    assert sphere_volume(17) == 68/3 * 3.14159\n    assert sphere_volume(18) == 72/3 * 3.14159\n    assert sphere_volume(19) == 76/3 * 3.14159\n    assert sphere_volume(20) == 80/3 * 3.14159\n    assert sphere_volume(21) == 84/3 * 3.14159\n    assert sphere_volume(22) == 88/3 * 3.14159\n    assert sphere_volume(23) == 92/3 * 3.14159\n    assert sphere_volume(24) == 96/3 * 3.14159\n    assert sphere_volume(25) == 100/3 * 3.14159\n    assert sphere_"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# Function to find the volume of a sphere\n# @param x, y, z - The coordinates of the sphere center\n# @return The volume of the sphere\ndef volume(x, y, z):\n    \"\"\"\n    @param x, y, z - The coordinates of the sphere center\n    @return The volume of the sphere\n    \"\"\"\n    r = x ** 2 + y ** 2 + z ** 2\n    return 4.0 / 3.0 * math.pi * r ** 3\n\n# Test cases\nx = 1\ny = 2\nz = 3\nassert volume(x, y, z) == 0\n\nx = 4\ny = 5\nz = 6\nassert volume(x, y, z) == 8"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "import math\n\nclass Solution(object):\n    def sphereVolume(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        return math.pi * (x**2 + y**2 + z**2) / 3\n\n\nif __name__ == \"__main__\":\n    assert Solution().sphereVolume(1, 2, 3) == 1 * 3 * 4 / 3, \"1x2x3\"\n    assert Solution().sphereVolume(1, 1, 1) == 1, \"1x1x1\"\n    assert Solution().sphereVolume(0, 0, 0) == 0, \"0x0x0\""
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\n\ndef volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere\n    :param radius: radius of the sphere\n    :return: the volume of the sphere\n    \"\"\"\n    return math.pi * (radius ** 3)\n\nif __name__ == '__main__':\n    print(volume(1))\n    print(volume(2))\n    print(volume(3))\n    print(volume(4))\n    print(volume(5))\n    print(volume(6))\n    print(volume(7))\n    print(volume(8))\n    print(volume(9))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return math.pi * radius**3\n\nif __name__ == '__main__':\n    assert sphere_volume(3) == 12\n    assert sphere_volume(4) == 64\n    assert sphere_volume(5) == 256\n    assert sphere_volume(6) == 1024\n    assert sphere_volume(7) == 4096\n    assert sphere_volume(8) == 16384\n    assert sphere_volume(9) == 65536\n    assert sphere_volume(10) == 32768\n    assert sphere_volume(11) == 131072\n    assert sphere_volume(12) == 524288\n    assert sphere_volume(13) == 262144\n    assert sphere_volume(14) == 1048576\n    assert sphere_volume(15) == 4194304\n    assert sphere_volume(16) == 16777216\n    assert sphere_volume(17) == 67108864\n    assert sphere_volume(18) == 335544320\n    assert sphere_volume(19) == 134217728\n    assert sphere_volume(20) == 536870912\n    assert sphere_volume(21) == 268435456\n    assert sphere_volume(22) == 1073741824\n    assert sphere_volume(23) == 4294967296\n    assert sphere_volume(24) == 1844673600\n    assert sphere_volume(25) == 72057594039\n    assert sphere_volume(26) == 351843720888\n    assert sphere_volume(27) == 175921860444\n    assert sphere_volume(28) == 84373138816\n    assert sphere_volume(29) == 360287970196\n    assert sphere_volume(30) == 1835483585664\n    assert sphere_volume(31) == 765393480384\n    assert sphere_volume(32) == 35359738368\n    assert sphere_volume(33) == 182236360032\n    assert sphere_volume(34) == 757218656064\n    assert sphere_volume(35) == 2882303761512\n    assert sphere_volume"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "import math\n\ndef sphere_volume(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    return math.pi * radius**3\n\nif __name__ == '__main__':\n    print sphere_volume(3)\n    print sphere_volume(4)\n    print sphere_volume(5)\n    print sphere_volume(6)\n    print sphere_volume(7)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import math\n\n\ndef volume(radius, height):\n    \"\"\"\n    Return the volume of a sphere with radius `radius` and height `height`.\n\n    :param radius: the radius of the sphere\n    :type radius: float\n    :param height: the height of the sphere\n    :type height: float\n    :rtype: float\n    \"\"\"\n    return math.pi * (radius ** 2) * height\n\n\ndef main():\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    assert volume(1, 1) == 1\n    assert volume(1, 2) == 4\n    assert volume(1, 3) == 8\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "import math\n\n\ndef volume(radius):\n    \"\"\"\n    :param radius: radius of the sphere\n    :return: volume of the sphere\n    \"\"\"\n    return 4 / 3 * math.pi * radius ** 3\n\n\nprint(\"Volume of a sphere:\", volume(4))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Definition for a point\nclass Point:\n    def __init__(self, x=0.0, y=0.0, z=0.0):\n        self.x = x\n        self.y = y\n        self.z = z\n\nclass Solution:\n    def volume(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        x1, y1, z1 = points[0].x, points[0].y, points[0].z\n        x2, y2, z2 = points[1].x, points[1].y, points[1].z\n        x3, y3, z3 = points[2].x, points[2].y, points[2].z\n        x4, y4, z4 = points[3].x, points[3].y, points[3].z\n        return abs((x1 - x2) * (y3 - y4) * (z1 - z4) - (x3 - x4) * (y1 - y2) * (z3 - z4) + (x1 - x2) * (y3 - y4) * (z2 - z4) - (x3 - x4) * (y1 - y2) * (z1 - z4) + (x2 - x1) * (y1 - y2) * (z3 - z4) - (x4 - x3) * (y1 - y2) * (z1 - z4) + (x2 - x1) * (y3 - y4) * (z1 - z2)) / 6\n\nif __name__ == \"__main__\":\n    points = [Point(1, 1, 1), Point(2, 2, 2), Point(3, 3, 3), Point(4, 4, 4)]\n    print(Solution().volume(points))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def sphereVolume(radius):\n    \"\"\"\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return (4/3) * (pi * radius ** 3)\n\nif __name__ == \"__main__\":\n    print sphereVolume(3)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    Function to calculate the volume of a sphere\n    \"\"\"\n    return 4/3 * 3.14159 * radius**3\n\n\nif __name__ == '__main__':\n    print sphere_volume(3)\n    print sphere_volume(4)\n    print sphere_volume(5)\n    print sphere_volume(6)\n    print sphere_volume(7)\n    print sphere_volume(8)\n    print sphere_volume(9)\n    print sphere_volume(10)"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "#%%\nimport math\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    :param radius: radius of the sphere\n    :return: the volume of the sphere\n    \"\"\"\n    return math.pi * 4 / 3 * radius ** 3\n\n#%%\ndef sphere_volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    :param radius: radius of the sphere\n    :return: the volume of the sphere\n    \"\"\"\n    return math.pi * 4 / 3 * radius ** 3\n\n#%%\n\n#%%\ndef sphere_volume(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    :param radius: radius of the sphere\n    :return: the volume of the sphere\n    \"\"\"\n    return math.pi * 4 / 3 * radius ** 3\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def volume(radius):\n    \"\"\"\n    Compute the volume of a sphere with a given radius.\n    \"\"\"\n    return 4/3*pi*radius**3\n\nprint(volume(1))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def volume(radius):\n    \"\"\"\n    :param radius: the radius of the sphere\n    :return: the volume of the sphere\n    \"\"\"\n    return 4/3 * radius**3\n\nprint(volume(5))\nprint(volume(3))"
    }
  ]
}