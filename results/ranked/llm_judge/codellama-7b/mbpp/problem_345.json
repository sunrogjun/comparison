{
  "timestamp": "2025-09-15T00:54:35.709036",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 345,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_angle(angle1, angle2):\n    \"\"\"\n    >>> find_angle(30, 60)\n    90\n    >>> find_angle(180, 20)\n    160\n    >>> find_angle(120, 90)\n    60\n    \"\"\"\n    return 180 - (angle1 + angle2)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def third_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)\n\n\nprint(third_angle(30, 60))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def third_angle(a, b):\n    return 180 - (a + b)\n\n\nassert third_angle(45, 45) == 90, \"First Test Case Failed\"\nassert third_angle(120, 30) == 90, \"Second Test Case Failed\""
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def third_angle(angle_1: int, angle_2: int) -> int:\n    \"\"\"\n    >>> third_angle(90, 90)\n    360\n    >>> third_angle(90, 90)\n    360\n    >>> third_angle(1, 90)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 90 degrees.\n    >>> third_angle(180, 180)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 90 degrees.\n    >>> third_angle(181, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 90 degrees.\n    \"\"\"\n\n    if angle_1 <= 0 or angle_1 >= 90 or angle_2 <= 0 or angle_2 >= 90:\n        raise ValueError(\"Angles must be between 0 and 90 degrees.\")\n\n    angle_1 = angle_1 % 180\n    angle_2 = angle_2 % 180\n    if angle_1 + angle_2 >= 180:\n        return 180 - (angle_1 + angle_2)\n    return 180 - (angle_1 + angle_2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def third_angle(a: int, b: int) -> int:\n    \"\"\"Return the third angle of a triangle given two angles.\n\n    >>> third_angle(120, 90)\n    60\n    >>> third_angle(30, 60)\n    90\n    >>> third_angle(60, 30)\n    90\n    >>> third_angle(45, 45)\n    90\n    \"\"\"\n    return 180 - a - b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def third_angle(angle1, angle2):\n    if angle1 + angle2 > 180:\n        return -1\n    else:\n        return 180 - angle1 - angle2"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def third_angle(angle_1, angle_2):\n    return 180 - (angle_1 + angle_2)\n\nprint(third_angle(30, 60))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def angle_function(x,y):\n    if x+y == 180:\n        return 180 - x - y\n    else:\n        return 180 - x - y\n\nprint(angle_function(30,60))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_third_angle(angle1, angle2):\n    # Check if sum of two angles is 180.\n    if angle1 + angle2 == 180:\n        # Check if one angle is 90.\n        if angle1 == 90:\n            return 90\n        elif angle2 == 90:\n            return 90\n        else:\n            # Check if the two angles are equal.\n            if angle1 == angle2:\n                return 90\n            else:\n                # If not equal, then find the third angle.\n                return 180 - angle1 - angle2\n    else:\n        return None\n\nprint(find_third_angle(45, 45))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def third_angle(angle1: int, angle2: int) -> int:\n    \"\"\"\n    >>> third_angle(90, 90)\n    360\n    >>> third_angle(90, 180)\n    60\n    >>> third_angle(90, 45)\n    90\n    >>> third_angle(180, 180)\n    360\n    >>> third_angle(180, 90)\n    360\n    >>> third_angle(90, 270)\n    360\n    >>> third_angle(180, 360)\n    180\n    >>> third_angle(180, 45)\n    90\n    \"\"\"\n    return 180 - angle1 - angle2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def third_angle(angle_a, angle_b):\n    return (180 - (angle_a + angle_b))\n\n\nassert third_angle(60, 30) == 90\nassert third_angle(45, 55) == 45\nassert third_angle(85, 40) == 105"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def find_third_angle(angle_1, angle_2):\n    return (180 - (angle_1 + angle_2))\n\n\nprint(find_third_angle(90, 90))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from math import acos, degrees\n\n\ndef third_angle(a, b):\n    return round(degrees(acos((a**2 + b**2 - 180) / (2 * a * b))))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def find_angle(a, b):\n    c = (180 - a - b)\n    return c\n\n\na = int(input(\"Enter first angle: \"))\nb = int(input(\"Enter second angle: \"))\n\nprint(find_angle(a, b))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# This is the function we're trying to test\ndef find_third_angle(angle1, angle2):\n    return 180 - angle1 - angle2\n\n\n# This is the test\ndef test(angle1, angle2, expected):\n    answer = find_third_angle(angle1, angle2)\n    if answer == expected:\n        print(\"Thumbs up. Expected: {0}, Answer: {1}\".format(expected, answer))\n    else:\n        print(\"Thumbs down. Expected: {0}, Answer: {1}\".format(expected, answer))\n\n\n# These are the tests, and you need to write more of your own.\ntest(120, 30, 90)\ntest(30, 45, 90)\ntest(20, 130, 90)\ntest(45, 45, 90)\ntest(180, 180, 90)\ntest(180, 90, 30)\ntest(45, 30, 90)\ntest(30, 45, 90)\ntest(180, 90, 30)\ntest(90, 30, 90)\ntest(180, 30, 90)\ntest(45, 45, 90)\ntest(30, 180, 90)\ntest(180, 180, 90)\ntest(90, 45, 90)\ntest(45, 180, 90)\ntest(180, 180, 90)\ntest(45, 90, 30)\ntest(90, 45, 90)\ntest(90, 180, 30)\ntest(180, 90, 30)\ntest(90, 90, 30)\ntest(45, 135, 90)\ntest(135, 45, 90"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def angle_third(angle1, angle2):\n    if angle1 + angle2 > 180:\n        return 180 - (angle1 + angle2)\n    else:\n        return 180 - (angle1 + angle2)\n\n\ndef main():\n    print(angle_third(70, 80))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from math import acos\n\n\ndef third_angle(a, b):\n    return round(acos((a**2 + b**2 - 180**2) / (2*a*b)), 2)\n\n\nprint(third_angle(90, 90))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# This is the answer using the pythagorean theorem\n# def find_third_angle(angle_1, angle_2):\n#     # Calculate the hypotenuse of the triangle\n#     hypotenuse = (angle_1 ** 2 + angle_2 ** 2) ** .5\n\n#     # Calculate the third angle of the triangle\n#     third_angle = 180 - (angle_1 + angle_2)\n\n#     return third_angle\n\n\n# This is my answer using the cosine rule\ndef find_third_angle(angle_1, angle_2):\n    # Calculate the side of the triangle opposite angle_2\n    side_2 = (angle_1 ** 2 + angle_2 ** 2 - 180 ** 2) ** .5\n\n    # Calculate the side of the triangle opposite angle_1\n    side_1 = (angle_2 ** 2 + 180 ** 2 - angle_1 ** 2) ** .5\n\n    # Calculate the third angle of the triangle\n    third_angle = (180 - angle_1 - angle_2)\n\n    return third_angle"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def find_third_angle(angle_a, angle_b):\n    \"\"\"\n    Find the third angle of a triangle using two angles.\n\n    Parameters\n    ----------\n    angle_a : int\n        The first angle of the triangle.\n    angle_b : int\n        The second angle of the triangle.\n\n    Returns\n    -------\n    int\n        The third angle of the triangle.\n\n    Examples\n    --------\n    >>> find_third_angle(90, 30)\n    60\n    \"\"\"\n    return 180 - angle_a - angle_b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def find_third_angle(angle_1, angle_2):\n    return 180 - angle_1 - angle_2\n\n\ndef main():\n    print(find_third_angle(40, 60))\n    print(find_third_angle(80, 100))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from math import acos, degrees\n\n\ndef find_third_angle(angle_1, angle_2):\n    \"\"\"\n    >>> find_third_angle(90, 90)\n    180\n    >>> find_third_angle(45, 45)\n    135\n    \"\"\"\n    angle_1 = degrees(acos(angle_1 / 180))\n    angle_2 = degrees(acos(angle_2 / 180))\n    angle_3 = 180 - (angle_1 + angle_2)\n    return angle_3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def third_angle(angle_1: int, angle_2: int):\n    return 180 - (angle_1 + angle_2)\n\n\nif __name__ == \"__main__\":\n    print(third_angle(40, 50))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def find_angle(angle1, angle2):\n    return (180 - (angle1 + angle2))\n\n\nif __name__ == '__main__':\n    print(find_angle(100, 180))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def third_angle(angle1: int, angle2: int) -> int:\n    \"\"\"\n    >>> third_angle(60, 30)\n    90\n    >>> third_angle(45, 45)\n    90\n    >>> third_angle(90, 90)\n    180\n    >>> third_angle(90, 45)\n    90\n    >>> third_angle(30, 60)\n    60\n    >>> third_angle(30, 150)\n    120\n    \"\"\"\n    return 180 - angle1 - angle2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def find_third_angle(a, b):\n    return 180 - (a + b)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def third_angle(angle_1, angle_2):\n    return (180 - angle_1 - angle_2)\n\n\nprint(third_angle(70, 80))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def third_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def third_angle(angle1, angle2):\n    return 180 - angle1 - angle2\n\nif __name__ == '__main__':\n    print(third_angle(90, 60))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def third_angle(a, b):\n    return 180 - a - b\n\n\nassert third_angle(30, 45) == 90\nassert third_angle(90, 30) == 60\nassert third_angle(45, 30) == 90"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def third_angle(a, b):\n    return 180 - (a + b)"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def find_angle(angle_1: float, angle_2: float) -> float:\n    \"\"\"\n    This function takes in two angles and returns the third.\n\n    >>> find_angle(120, 30)\n    90.0\n    >>> find_angle(20, 30)\n    120.0\n    >>> find_angle(30, 120)\n    90.0\n    \"\"\"\n    return 180 - angle_1 - angle_2\n\n\ndef test_find_angle():\n    \"\"\"\n    >>> test_find_angle()\n    \"\"\"\n    assert find_angle(120, 30) == 90.0\n    assert find_angle(20, 30) == 120.0\n    assert find_angle(30, 120) == 90.0\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "from math import acos, degrees\n\n\ndef find_third_angle(angle_1: float, angle_2: float) -> float:\n    \"\"\"\n    Returns the third angle of a triangle.\n\n    >>> find_third_angle(90, 90)\n    180.0\n    >>> find_third_angle(60, 30)\n    90.0\n    >>> find_third_angle(120, 60)\n    180.0\n    >>> find_third_angle(90, 90.001)\n    180.005\n    >>> find_third_angle(180, 180)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180.\n    >>> find_third_angle(-1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180.\n    >>> find_third_angle(90, 181)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180.\n    \"\"\"\n    if not (0 < angle_1 < 180 and 0 < angle_2 < 180):\n        raise ValueError(\"Angles must be between 0 and 180.\")\n\n    return degrees(acos((-1 * (angle_1 + angle_2) + 180) / (180 - angle_1 - angle_2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "import math\n\ndef angle_sum(angle_1, angle_2):\n    return angle_1 + angle_2\n\ndef angle_difference(angle_1, angle_2):\n    return math.fabs(angle_1 - angle_2)\n\ndef find_third_angle(angle_1, angle_2):\n    return 180 - angle_sum(angle_1, angle_2)\n\ndef find_third_angle_2(angle_1, angle_2):\n    return 180 - angle_difference(angle_1, angle_2)\n\nif __name__ == '__main__':\n    angle_1 = float(input('Enter the first angle: '))\n    angle_2 = float(input('Enter the second angle: '))\n\n    print('The third angle is:')\n    print(find_third_angle(angle_1, angle_2))\n    print(find_third_angle_2(angle_1, angle_2))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def find_angle(angle1, angle2):\n    return (180 - angle1 - angle2)\n\n\nif __name__ == '__main__':\n    print(find_angle(90, 180))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "def find_angle(angle1, angle2):\n    return (180 - (angle1 + angle2))\n\n\ndef main():\n    angle1 = int(input(\"Enter angle1: \"))\n    angle2 = int(input(\"Enter angle2: \"))\n\n    angle3 = find_angle(angle1, angle2)\n\n    print(f\"The third angle is: {angle3}\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "# This function returns the angle in degrees\ndef find_angle(opposite, adjacent):\n    return (opposite / adjacent) * (180 / 3.14)\n\n\nprint(find_angle(3, 4))"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "def find_third_angle(angle_1, angle_2):\n    return 180 - (angle_1 + angle_2)\n\n\ndef test_find_third_angle():\n    \"\"\"\n    >>> find_third_angle(90, 30)\n    60\n    >>> find_third_angle(135, 45)\n    90\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "def third_angle(a, b):\n    return 180 - a - b\n\n\ndef main():\n    print(third_angle(120, 60))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "def find_third_angle(angle1, angle2):\n    return 180 - angle1 - angle2"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "def third_angle(alpha, beta):\n    return 180 - (alpha + beta)\n\n\nif __name__ == '__main__':\n    print(third_angle(24, 34))"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2\n\n\nif __name__ == '__main__':\n    print(find_angle(120, 60))"
    },
    {
      "rank": 43,
      "score": 9.0,
      "candidate": "def find_third_angle(angle_1, angle_2):\n    return 180 - angle_1 - angle_2"
    },
    {
      "rank": 44,
      "score": 9.0,
      "candidate": "def find_angle(angle_1, angle_2):\n    return (180 - (angle_1 + angle_2))\n\n\nangle_1 = int(input(\"Enter the first angle: \"))\nangle_2 = int(input(\"Enter the second angle: \"))\n\nprint(\"The third angle is: {}\".format(find_angle(angle_1, angle_2)))"
    },
    {
      "rank": 45,
      "score": 9.0,
      "candidate": "def find_angle(angle1, angle2):\n    angle3 = (180 - angle1 - angle2)\n    return angle3\n\nangle1 = int(input(\"Enter first angle of triangle: \"))\nangle2 = int(input(\"Enter second angle of triangle: \"))\nangle3 = find_angle(angle1, angle2)\nprint(f\"Third angle of triangle is {angle3}\")"
    },
    {
      "rank": 46,
      "score": 9.0,
      "candidate": "def third_angle(a,b):\n    if a+b == 180:\n        return 180-a-b\n    else:\n        return 180-(a+b)\n\n\n\nif __name__ == '__main__':\n    a = float(input(\"Enter first angle: \"))\n    b = float(input(\"Enter second angle: \"))\n    print(third_angle(a,b))"
    },
    {
      "rank": 47,
      "score": 9.0,
      "candidate": "def find_angle(angle_1, angle_2):\n    return (180 - angle_1 - angle_2)"
    },
    {
      "rank": 48,
      "score": 9.0,
      "candidate": "def third_angle(angle1, angle2):\n    return (180 - angle1 - angle2)"
    },
    {
      "rank": 49,
      "score": 9.0,
      "candidate": "def third_angle(a, b):\n    \"\"\"\n    >>> third_angle(100, 100)\n    120.0\n    >>> third_angle(1, 1)\n    120.0\n    \"\"\"\n    return 180.0 - (a + b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.0,
      "candidate": "def find_third_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def get_third_angle(angle_a, angle_b):\n    \"\"\"\n    >>> get_third_angle(120, 30)\n    90\n    >>> get_third_angle(45, 45)\n    45\n    \"\"\"\n    return (angle_a + angle_b - 180)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def third_angle(angle1: int, angle2: int) -> int:\n    \"\"\"\n    >>> third_angle(120, 30)\n    90\n    \"\"\"\n    return 180 - angle1 - angle2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def third_angle(a, b):\n    return (180 - (a + b))\n\n\nassert third_angle(90, 30) == 90"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_third_angle(angle_a, angle_b):\n    return 180 - (angle_a + angle_b)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def third_angle(angle_1: float, angle_2: float) -> float:\n    \"\"\"\n    Finds the third angle of a triangle using two angles.\n    \"\"\"\n    return (180 - angle_1 - angle_2)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def angle_triple(a, b):\n    return (180 - (a + b))\n\n\nprint(angle_triple(30, 60))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def third_angle(a, b):\n    return 180 - (a + b)\n\n\nassert third_angle(90, 45) == 90\nassert third_angle(120, 40) == 120"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def find_third_angle(angle1, angle2):\n    return (180 - angle1 - angle2)\n\n\nprint(find_third_angle(30, 60))\nprint(find_third_angle(70, 40))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def find_third_angle(angle1, angle2):\n    \"\"\"\n    >>> find_third_angle(90, 90)\n    180\n    >>> find_third_angle(120, 60)\n    60\n    >>> find_third_angle(120, 60) != 180\n    True\n    >>> find_third_angle(45, 45)\n    135\n    \"\"\"\n    return 180 - angle1 - angle2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def third_angle(angle1, angle2):\n    \"\"\"\n    >>> third_angle(45, 80)\n    90\n    \"\"\"\n    return 180 - angle1 - angle2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def third_angle(a, b):\n    return 180 - a - b\n\nassert third_angle(60, 30) == 90"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import math\n\n\ndef third_angle(a, b):\n    \"\"\"\n    >>> third_angle(90, 30)\n    60\n    >>> third_angle(60, 30)\n    90\n    \"\"\"\n    return math.degrees(math.acos((math.cos(math.radians(a)) - math.cos(math.radians(b)) * math.cos(math.radians(b))) / (math.sin(math.radians(b)) * math.cos(math.radians(a)))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def third_angle(angle_1, angle_2):\n    \"\"\"\n    Finds the third angle of a triangle using two angles\n\n    Parameters:\n        angle_1: an int representing the first angle\n        angle_2: an int representing the second angle\n\n    Returns:\n        the third angle as an int\n    \"\"\"\n    angle_1 = angle_1 * (180/math.pi)\n    angle_2 = angle_2 * (180/math.pi)\n    return (180 - angle_1 - angle_2) * (math.pi/180)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_third_angle(a, b):\n    return 180 - a - b\n\n\nprint(find_third_angle(60, 30))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "# Since the function is being written in a way that it can be tested,\n# we can use the built-in math library.\nimport math\n\n\ndef find_third_angle(angle1: float, angle2: float) -> float:\n    \"\"\"\n    Finds the third angle of a triangle using two angles.\n    >>> find_third_angle(45, 90)\n    135.0\n    >>> find_third_angle(120, 54)\n    36.0\n    >>> find_third_angle(45, 45)\n    Traceback (most recent call last):\n    ...\n    ValueError: Angles do not add up to 180 degrees\n    >>> find_third_angle(180, 180)\n    Traceback (most recent call last):\n    ...\n    ValueError: Angles do not add up to 180 degrees\n    >>> find_third_angle(181, 1)\n    Traceback (most recent call last):\n    ...\n    ValueError: Angles do not add up to 180 degrees\n    \"\"\"\n    # Error handling.\n    if angle1 + angle2 != 180:\n        raise ValueError(\"Angles do not add up to 180 degrees\")\n\n    # We can use math.sin to calculate the sine of an angle.\n    # We know that the sine of an angle is the opposite / hypotenuse.\n    # We know the hypotenuse is the length of the side that is opposite\n    # the angle, so we can use pythagorean theorem to find the length\n    # of the side opposite the angle.\n    # We can use math.sqrt to find the length of the side.\n    # We can use math.cos to calculate the cosine of an angle.\n    # We know the cosine of an angle is the adjacent / hypotenuse.\n    # We know the hypotenuse is the length of the side that is opposite\n    # the angle, so we can use pythagorean theorem to find the length\n    # of the side.\n    # We can use math.sqrt to find the length of the side.\n    # We can then use math.asin"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import math\n\n\n# This function will find the third angle\ndef find_angle(x, y):\n    # This will return the third angle\n    return math.degrees(math.acos((math.cos(math.radians(x)) - math.cos(math.radians(y))) /\n                                  (math.sin(math.radians(x)) * math.sin(math.radians(y)))))\n\n\n# This function will call the function above to find the third angle\ndef find_angle_with_input():\n    # This will get the first angle\n    x = float(input(\"Enter the first angle: \"))\n    # This will get the second angle\n    y = float(input(\"Enter the second angle: \"))\n    # This will call the function to find the third angle\n    angle = find_angle(x, y)\n    # This will return the third angle\n    print(\"The third angle is: \" + str(angle))\n\n\n# This will call the function above to find the third angle\nfind_angle_with_input()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from math import acos, degrees, radians\n\n\ndef third_angle(angle1, angle2):\n    return round(degrees(acos(((1 - (angle1 / 180) ** 2) - (angle2 / 180) ** 2) / (2 * (1 - (angle1 / 180) ** 2)))), 2)\n\n\nif __name__ == '__main__':\n    print(third_angle(30, 180))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2\n\n\nif __name__ == '__main__':\n    print(find_angle(10, 15))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "from math import acos, degrees\n\ndef get_angle(alpha, beta):\n    return degrees(acos(((100 - alpha) / 100) / ((100 - beta) / 100)))\n\nassert get_angle(30, 60) == 90"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def third_angle(a, b):\n    return (180 - a - b)\n\n\nassert third_angle(60, 60) == 60, \"Should be 60\"\nassert third_angle(90, 60) == 30, \"Should be 30\""
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# IMPORTS\nfrom math import acos\n\n# FUNCTIONS\ndef angle(alpha, beta):\n    \"\"\"\n    Finds the third angle of a triangle given two angles.\n    \"\"\"\n    if alpha + beta > 180:\n        return 180 - alpha - beta\n\n    return 180 - alpha - beta - acos(((alpha + beta) / 180) * ((180 - alpha) * (180 - beta)))\n\n# main\ndef main():\n    print(\"Enter two angles of a triangle:\")\n    alpha = float(input(\"Enter the first angle: \"))\n    beta = float(input(\"Enter the second angle: \"))\n    print(f\"The third angle is {angle(alpha, beta)}\")\n\n# PROGRAM RUN\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "import math\n\n\ndef third_angle(angle1, angle2):\n    return math.degrees(math.acos((math.cos(math.radians(angle1)) - math.cos(math.radians(angle2))) / (-math.sin(math.radians(angle2)))))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def third_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)\n\n\nprint(third_angle(30, 60))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "from math import acos, degrees\n\n\n# iterative solution\ndef third_angle(angle1, angle2):\n    \"\"\"Find the third angle of a triangle using two angles.\"\"\"\n    if angle1 + angle2 > 180:\n        return None\n    if angle1 == angle2:\n        return 0\n    for i in range(1, 180):\n        if angle1 + angle2 + i == 180:\n            return i\n\n\n# recursive solution\ndef third_angle2(angle1, angle2):\n    \"\"\"Find the third angle of a triangle using two angles.\"\"\"\n    if angle1 + angle2 > 180:\n        return None\n    if angle1 == angle2:\n        return 0\n    if angle1 + angle2 == 180:\n        return 0\n    return acos(((angle1 ** 2) + (angle2 ** 2) - (180 ** 2)) / (2 * angle1 * angle2))\n\n\ndef main():\n    \"\"\"Print the result of the third_angle function.\"\"\"\n    print(third_angle(30, 60))\n    print(third_angle(90, 90))\n    print(third_angle(50, 45))\n    print(third_angle(50, 45))\n    print(third_angle(90, 10))\n    print(third_angle(180, 170))\n    print(third_angle(100, 90))\n    print(third_angle(90, 80))\n    print(third_angle(100, 80))\n    print(third_angle(80, 70))\n    print(third_angle(80, 70))\n    print(third_angle(80, 70))\n    print(third_angle(10, 10))\n    print(third_angle(10, 10))\n    print(third_angle(10, 10))\n    print(third_angle(10, 10))\n    print(third_angle(10, 10))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def third_angle(a, b):\n    return 180 - a - b\n\n\ndef test_third_angle():\n    assert third_angle(45, 60) == 90\n    assert third_angle(90, 120) == 60\n    assert third_angle(180, 240) == 120\n\n\nif __name__ == \"__main__\":\n    test_third_angle()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "from math import degrees, radians, sin, tan\n\n\n# pylint: disable=invalid-name\ndef find_third_angle(angle_a, angle_b):\n    \"\"\"\n    Return the third angle of a triangle.\n    \"\"\"\n    return degrees(\n        acos(\n            (sin(radians(angle_a)) * sin(radians(angle_b))) /\n            (cos(radians(angle_a)) * cos(radians(angle_b)))\n        )\n    )"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def third_angle(angle1, angle2):\n    return (180 - (angle1 + angle2))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "from math import acos, degrees\nfrom decimal import Decimal, getcontext\n\n\ndef third_angle(angle_1: float, angle_2: float) -> float:\n    \"\"\"\n    Finds the third angle of a triangle using two angles.\n\n    >>> third_angle(90, 90)\n    60.0\n    >>> third_angle(54, 36)\n    90.0\n    >>> third_angle(20, 50)\n    108.0\n    >>> third_angle(45, 45)\n    90.0\n    >>> third_angle(45, 90)\n    45.0\n    >>> third_angle(180, 180)\n    0.0\n    >>> third_angle(90, 30)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180 degrees.\n    >>> third_angle(90, -10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180 degrees.\n    >>> third_angle(181, 181)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180 degrees.\n    >>> third_angle(30, 100)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180 degrees.\n    >>> third_angle(180, 179)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180 degrees.\n    >>> third_angle(181, 179)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180 degrees.\n    >>> third_angle(181, 180)\n    Traceback (most recent call last):\n        ...\n    ValueError: Angles must be between 0 and 180 degrees.\n    >>> third_angle(18"
    },
    {
      "rank": 79,
      "score": 7.0,
      "candidate": "def third_angle(x: int, y: int) -> int:\n    \"\"\"Return the third angle of a triangle.\"\"\"\n    return 180 - (x + y)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# def get_third_angle(angle_1, angle_2):\n#     \"\"\"\n#     Calculate the third angle of a triangle.\n\n#     :param angle_1: First angle of the triangle\n#     :param angle_2: Second angle of the triangle\n#     :return: Third angle of the triangle\n#     \"\"\"\n#     return 180 - angle_1 - angle_2\n\n\ndef get_third_angle(angle_1, angle_2):\n    \"\"\"\n    Calculate the third angle of a triangle.\n\n    :param angle_1: First angle of the triangle\n    :param angle_2: Second angle of the triangle\n    :return: Third angle of the triangle\n    \"\"\"\n    return 180 - angle_1 - angle_2"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def third_angle(angle1, angle2):\n    return (180 - angle1 - angle2)\n\n\nassert third_angle(30, 40) == 90, \"Third Angle of triangle is 90\""
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def third_angle(a, b):\n    return (180 - a - b)\n\n\ndef test_third_angle():\n    assert third_angle(60, 30) == 90\n    assert third_angle(20, 50) == 110\n    assert third_angle(180, 20) == 160"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def angle_sum(a: float, b: float) -> float:\n    return a + b\n\n\ndef find_angle(a: float, b: float) -> float:\n    angle = 180 - (angle_sum(a, b))\n    return angle\n\n\nprint(find_angle(60, 30))\nprint(find_angle(120, 60))\nprint(find_angle(45, 35))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from math import acos, pi\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_angle(angle_1: int, angle_2: int) -> int:\n    return int(acos((angle_1**2 + angle_2**2 - 180) / (2 * angle_1 * angle_2)))\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_angle2(angle_1: int, angle_2: int) -> int:\n    return int(180 - angle_1 - angle_2)\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_angle3(angle_1: int, angle_2: int) -> int:\n    return int(pi - angle_1 - angle_2)\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_angle4(angle_1: int, angle_2: int) -> int:\n    return int(2 * pi - angle_1 - angle_2)\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_angle5(angle_1: int, angle_2: int) -> int:\n    return int(pi - angle_1 - angle_2 + 180)\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_angle6(angle_1: int, angle_2: int) -> int:\n    return int(2 * pi - angle_1 - angle_2 + 180)\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_angle7(angle_1: int, angle_2: int) -> int:\n    return int(2 * pi - angle_1 - angle_2 + 360)\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef find_angle8(angle_1: int, angle_2: int) -> int:\n    return int(pi - angle_1 - angle_2 - 180)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def third_angle(angle_1, angle_2):\n    return 180 - (angle_1 + angle_2)\n\n\nif __name__ == '__main__':\n    print(third_angle(60, 60))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def find_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)\n\n\ndef test_find_angle():\n    \"\"\"Test for find_angle function.\"\"\"\n    assert find_angle(60, 30) == 90\n    assert find_angle(45, 45) == 180\n    assert find_angle(30, 30) == 120\n\n\nif __name__ == '__main__':\n    test_find_angle()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# We know that the sum of the two angles of a triangle is 180 degrees, so we can use that to get the third angle.\n\ndef find_third_angle(angle1, angle2):\n    angle3 = 180 - (angle1 + angle2)\n    return angle3\n\n\nassert find_third_angle(60, 30) == 90, \"The answer should be 90\"\nassert find_third_angle(30, 60) == 90, \"The answer should be 90\"\nassert find_third_angle(45, 45) == 90, \"The answer should be 90\""
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def find_third_angle(angle_1, angle_2):\n    \"\"\"\n    >>> find_third_angle(60, 30)\n    90\n    \"\"\"\n    return 180 - (angle_1 + angle_2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def third_angle(angle_1: float, angle_2: float) -> float:\n    \"\"\"Find the third angle of a triangle using two angles.\n\n    Args:\n        angle_1 (float): First angle of the triangle.\n        angle_2 (float): Second angle of the triangle.\n\n    Returns:\n        float: Third angle of the triangle.\n    \"\"\"\n    return 180 - angle_1 - angle_2\n\n\nif __name__ == \"__main__\":\n    first_angle = 30\n    second_angle = 60\n    print(third_angle(first_angle, second_angle))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# This is the function\ndef find_angle(angle1, angle2):\n    if angle1 + angle2 == 180:\n        return 180 - angle1 - angle2\n    else:\n        return None\n\n\n# This is the test\ndef test_find_angle():\n    assert find_angle(60, 30) == 90\n\n\nif __name__ == '__main__':\n    test_find_angle()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2\n\n\ndef test_find_angle():\n    \"\"\"Input angle1, angle2, expected output.\"\"\"\n    assert find_angle(60, 60) == 60\n    assert find_angle(45, 45) == 90\n    assert find_angle(120, 45) == 60"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def find_angle(angle1, angle2):\n    angle1 = float(angle1)\n    angle2 = float(angle2)\n\n    if angle1 + angle2 == 180:\n        return 180 - angle1 - angle2\n    else:\n        return None\n\n\nif __name__ == '__main__':\n    print(find_angle(30, 90))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from math import acos, degrees\nfrom typing import Union\n\n\ndef find_angle(a: int, b: int) -> Union[float, None]:\n    \"\"\"Find the third angle of a triangle using two angles.\n\n    Args:\n        a (int): First angle of a triangle.\n        b (int): Second angle of a triangle.\n\n    Returns:\n        Union[float, None]: Third angle of a triangle or None.\n    \"\"\"\n    if a == 0 or b == 0:\n        return None\n    elif a > 90 or b > 90:\n        return None\n    else:\n        c = acos((a**2 + b**2 - 100) / (2 * a * b))\n        return degrees(c)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def angle(alpha, beta):\n    return 180 - alpha - beta\n\n\ndef test_angle():\n    assert angle(120, 60) == 60\n    assert angle(180, 120) == 0\n    assert angle(90, 30) == 60\n    assert angle(30, 120) == 60\n    assert angle(120, 45) == 90\n    assert angle(45, 120) == 90\n    assert angle(180, 90) == 0\n    assert angle(90, 90) == 0"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def get_angle(angle_a, angle_b):\n    return 180 - angle_a - angle_b\n\n\n# Tests\nassert get_angle(30, 60) == 90\nassert get_angle(135, 45) == 90\nassert get_angle(45, 60) == 90\nassert get_angle(80, 60) == 90"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_angle(angle1: int, angle2: int) -> int:\n    \"\"\"\n    >>> find_angle(90, 90)\n    180\n    >>> find_angle(90, 180)\n    360\n    >>> find_angle(90, 0)\n    90\n    >>> find_angle(0, 90)\n    0\n    \"\"\"\n    return 180 - (angle1 + angle2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from math import acos, degrees\nfrom unittest import TestCase\n\n\ndef find_angle(a, b):\n    return round(degrees(acos((b ** 2 + a ** 2 - 2 * a * b * cos(rad)) / (a ** 2 + b ** 2))))\n\n\nclass TestAngle(TestCase):\n\n    def test_angle(self):\n        assert find_angle(60, 30) == 90"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from math import acos\n\n\ndef find_third_angle(angle_1: float, angle_2: float) -> float:\n    \"\"\"\n    This function will find the third angle of a triangle using two angles.\n\n    >>> find_third_angle(90, 30)\n    60.0\n    >>> find_third_angle(45, 45)\n    45.0\n    >>> find_third_angle(60, 30)\n    60.0\n    >>> find_third_angle(45, 90)\n    45.0\n    \"\"\"\n    # check if the sum of the two angles is 180\n    if angle_1 + angle_2 == 180:\n        return 180 - (angle_1 + angle_2)\n    # check if the sum of the two angles is greater than 180\n    elif angle_1 + angle_2 > 180:\n        raise ValueError(\"The sum of the two angles must be less than 180\")\n    # check if the sum of the two angles is less than 180\n    elif angle_1 + angle_2 < 180:\n        # check if the two angles are equal\n        if angle_1 == angle_2:\n            return 180 - (angle_1 + angle_2)\n        # check if the two angles are not equal\n        else:\n            return float(180 - (angle_1 + angle_2))\n\n\ndef find_third_angle_using_acos(angle_1: float, angle_2: float) -> float:\n    \"\"\"\n    This function will find the third angle of a triangle using two angles.\n\n    >>> find_third_angle_using_acos(90, 30)\n    60.0\n    >>> find_third_angle_using_acos(45, 45)\n    45.0\n    >>> find_third_angle_using_acos(60, 30)\n    60.0\n    >>> find_third_angle_using_acos(45, 90)\n    45.0\n    \"\"\""
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_angle(a, b):\n    return 180 - a - b\n\n\ndef test_find_angle():\n    assert find_angle(90, 30) == 60\n    assert find_angle(45, 30) == 90\n    assert find_angle(90, 45) == 90\n    assert find_angle(60, 30) == 60\n    assert find_angle(30, 30) == 90\n    assert find_angle(30, 60) == 60\n    assert find_angle(30, 90) == 30"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_third_angle(angle_1: float, angle_2: float) -> float:\n    \"\"\"\n    >>> find_third_angle(30, 60)\n    90.0\n    \"\"\"\n    return 180 - (angle_1 + angle_2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}