{
  "timestamp": "2025-09-14T22:41:49.621730",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 53,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Define the list of tuples\ntuples = [(2, 5), (3, 4), (1, 3)]\n\n# Define a lambda function to sort the list of tuples\nlambda_func = lambda x: x[1]\n\n# Sort the list of tuples\ntuples.sort(key=lambda_func)\n\n# Print the sorted list of tuples\nprint(tuples)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def sort_by_second(tup):\n    return sorted(tup, key=lambda x: x[1])\n\n\ndef main():\n    data = [(1, 2), (4, 3), (9, 7), (0, 5), (5, 4)]\n    print(sort_by_second(data))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from random import randint\n\n\ndef sort_tuples(tuples, key=None):\n    return sorted(tuples, key=key)\n\n\ndef main():\n    # Create a list of tuples\n    my_tuples = [(randint(1, 100), randint(1, 100)) for i in range(10)]\n\n    # Sort the list of tuples\n    sorted_tuples = sort_tuples(my_tuples, key=lambda x: x[0])\n\n    # Print the sorted list\n    print(sorted_tuples)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples, key=None):\n    \"\"\"Sort tuples in place.\"\"\"\n    if key is None:\n        tuples.sort()\n    else:\n        tuples.sort(key=key)\n\ndef test():\n    \"\"\"Run the test cases.\"\"\"\n    cases = [\n        (([(1, 3), (3, 2), (2, 1)],), [(1, 3), (2, 1), (3, 2)]),\n        (([(1, 3), (3, 2), (2, 1)], lambda tup: tup[1]),\n         [(2, 1), (3, 2), (1, 3)]),\n    ]\n\n    for args, expected in cases:\n        sort_tuples(*args)\n        assert args[0] == expected\n\n    print 'pass'\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples using lambda.\nHints:\nUse lambda to write anonymous functions.\nUse sort() to sort a list.\n\n\"\"\""
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\ndef main():\n    t = [(1, \"a\"), (1, \"b\"), (2, \"a\"), (2, \"b\")]\n    print(sort_tuples(t))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Example:\n# Input: [('b', 3), ('c', 5), ('a', 1), ('d', 4)]\n# Output: [('a', 1), ('b', 3), ('c', 5), ('d', 4)]\n\n\n# This is an input class. Do not edit.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\ndef get_sorted_list(head):\n    \"\"\"\n    :type head: ListNode\n    :rtype: ListNode\n    \"\"\"\n    # if not head:\n    #     return None\n    # if not head.next:\n    #     return head\n    # curr = head\n    # while curr:\n    #     curr_next = curr.next\n    #     while curr_next:\n    #         if curr.val > curr_next.val:\n    #             curr.next = curr_next.next\n    #             curr_next.next = curr\n    #             curr = curr.next\n    #         else:\n    #             curr = curr_next\n    #             curr_next = curr_next.next\n    # return head\n\n    if not head:\n        return None\n    if not head.next:\n        return head\n    curr = head\n    while curr:\n        curr_next = curr.next\n        while curr_next:\n            if curr.val > curr_next.val:\n                curr.next = curr_next.next\n                curr_next.next = curr\n                curr = curr.next\n            else:\n                curr = curr_next\n                curr_next = curr_next.next\n    return head"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef sort_list_of_tuples(lst: List[tuple]) -> List[tuple]:\n    \"\"\"Sort a list of tuples.\n\n    Args:\n        lst (List[tuple]): list of tuples to be sorted\n\n    Returns:\n        List[tuple]: sorted list of tuples\n    \"\"\"\n    return sorted(lst, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    lst = [(1, \"A\"), (2, \"B\"), (3, \"C\")]\n    print(sort_list_of_tuples(lst))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sort_list_of_tuples(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1], reverse=True)\n\n\ndef main():\n    list_of_tuples = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    print(sort_list_of_tuples(list_of_tuples))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples, key_index):\n    \"\"\"Sort a list of tuples using lambda.\n\n    Args:\n        tuples (list): List of tuples to be sorted.\n        key_index (int): Index of the tuple to be used as key.\n\n    Returns:\n        list: Sorted list of tuples.\n\n    Examples:\n        >>> sort_tuples([(3, 4), (2, 3), (1, 2)], 0)\n        [(1, 2), (2, 3), (3, 4)]\n        >>> sort_tuples([(3, 4), (2, 3), (1, 2)], 1)\n        [(3, 4), (2, 3), (1, 2)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[key_index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples, key=lambda x: x):\n    \"\"\"\n    >>> tuples = [(2, 5), (1, 8), (2, 3), (1, 1)]\n    >>> sort_tuples(tuples)\n    [(1, 1), (1, 8), (2, 3), (2, 5)]\n    \"\"\"\n    return sorted(tuples, key=key)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def sort_tuple(list_tuples):\n    list_tuples.sort(key=lambda x: x[0])\n    return list_tuples\n\nprint(sort_tuple([(3, 4), (2, 3), (1, 2)]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples using lambda.\nHints:\nUse lambda to create anonymous functions\n\n\n\"\"\"\ndef myFunc(e):\n    return e[1]\n\nmyList= [(1,3),(3,2),(2,1)]\nmyList.sort(key=myFunc)\nprint myList"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# l = [(\"a\", 1), (\"b\", 10), (\"c\", 100)]\n# l.sort(key=lambda x: x[1])\n# print(l)\n\n\ndef sort_list_of_tuples(l: list, key: int):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n    return l.sort(key=lambda x: x[key])\n\n\ndef test_sort_list_of_tuples():\n    l = [(\"a\", 1), (\"b\", 10), (\"c\", 100)]\n    assert sort_list_of_tuples(l, 1) is None\n    assert l == [(\"a\", 1), (\"c\", 100), (\"b\", 10)]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def sort_tuples(t):\n    return sorted(t, key=lambda x: x[0])\n\nif __name__ == '__main__':\n    t = [(1,2), (1,4), (1,3)]\n    print(sort_tuples(t))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "\"\"\"Question 17\nLevel 2\nQuestion:\nWrite a function to sort a list of tuples using lambda.\nSuppose a list of tuples is given as:\nL = [(2, 'universal'), (1, 'python'), (3, 'computer')].\nWrite a lambda function to sort the list of tuples by descending order of second element.\nHints:\nUse lambda to define an anonymous function.\nUse sort() to sort the list.\n\n\"\"\""
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def sort_tuples_by_index_1(list_of_tuples, index):\n    return sorted(list_of_tuples, key=lambda x: x[index])\n\ndef sort_tuples_by_index_2(list_of_tuples, index):\n    return sorted(list_of_tuples, key=lambda x: x[index], reverse=True)\n\ndef sort_tuples_by_index_3(list_of_tuples, index):\n    return sorted(list_of_tuples, key=lambda x: x[index], reverse=True)\n\ndef main():\n    l = [(4, 3), (1, 2), (3, 1), (2, 4)]\n    print(sort_tuples_by_index_1(l, 0))\n    print(sort_tuples_by_index_1(l, 1))\n\n    print(sort_tuples_by_index_2(l, 0))\n    print(sort_tuples_by_index_2(l, 1))\n\n    print(sort_tuples_by_index_3(l, 0))\n    print(sort_tuples_by_index_3(l, 1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples, key):\n    return sorted(tuples, key=key)\n\n\ndef test_lambda():\n    \"\"\"\n    >>> sort_tuples(\n    ...     [(1, 3), (2, 2), (3, 1)],\n    ...     lambda t: t[1]\n    ... )\n    [(3, 1), (2, 2), (1, 3)]\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def sort_tuples_using_lambda(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    print(sort_tuples_using_lambda([('a', 2), ('b', 1), ('c', 3)]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples using lambda.\nHints:\nUse lambda to generate function.\n\n\"\"\"\ndef sort_tuple(li):\n    li.sort(key=lambda x: x[1])\n    return li\n\nli=[(2,5), (1,2), (4,6), (3,4)]\nprint sort_tuple(li)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples, key=None):\n    return sorted(tuples, key=lambda x: x[key])\n\n\nif __name__ == '__main__':\n    tuples = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n    print(sort_tuples(tuples, key=0))\n    print(sort_tuples(tuples, key=1))\n    print(sort_tuples(tuples, key=2))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def sort_tuples(tup):\n    return sorted(tup, key=lambda x:x[0])\n\nif __name__ == '__main__':\n    tup = [(2, 2), (1, 1), (3, 3)]\n    print(sort_tuples(tup))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def sort_tuples_by_first_value(tuples):\n    \"\"\"Sort a list of tuples by first value.\"\"\"\n    return sorted(tuples, key=lambda tup: tup[0])\n\n\ndef main():\n    \"\"\"Run sample sort_tuples_by_first_value function.\"\"\"\n    print(sort_tuples_by_first_value([(1, 2), (5, 1), (1, -1)]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples using lambda.\nHints:\nUse lambda to create anonymous functions\nUse sort() to sort a list\n\n\"\"\"\ndef sort_tuples(tuples):\n\treturn sorted(tuples, key=lambda tup:(tup[1], tup[0]))\ntuples = [(1, 2), (3, 4), (5, -1), (7, 8), (5, 12)]\nprint sort_tuples(tuples)"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def sort_tuples(tuples, key=None, reverse=False):\n    return sorted(tuples, key=lambda tup: tup[key], reverse=reverse)\n\n\ndef main():\n    tuples = [\n        (1, 2, 3),\n        (1, 4, 5),\n        (2, 3, 1),\n        (2, 3, 2),\n        (2, 3, 3),\n        (2, 3, 4),\n    ]\n    print(tuples)\n    print(sort_tuples(tuples, key=0))\n    print(sort_tuples(tuples, key=1))\n    print(sort_tuples(tuples, key=2))\n    print(sort_tuples(tuples, key=0, reverse=True))\n    print(sort_tuples(tuples, key=1, reverse=True))\n    print(sort_tuples(tuples, key=2, reverse=True))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "def sort_tuples(tuples, key):\n    return sorted(tuples, key=key)\n\ndef main():\n    tuples = [(3, 4), (2, 2), (1, 1), (1, 2), (2, 1)]\n    tuples_sorted = sort_tuples(tuples, lambda t: t[0])\n    print(tuples_sorted)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def sort_tuples(tuples, key):\n    return sorted(tuples, key=lambda t: t[key])\n\n\ndef test_lambda_sort():\n    assert sort_tuples([(1, 2), (2, 1), (2, 3)], 0) == [(1, 2), (2, 1), (2, 3)]\n    assert sort_tuples([(1, 2), (2, 1), (2, 3)], 1) == [(2, 1), (1, 2), (2, 3)]"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "def sort_list_using_lambda(list_of_tuples):\n    list_of_tuples.sort(key=lambda x: x[1])\n    return list_of_tuples\n\n\nif __name__ == '__main__':\n    print(sort_list_using_lambda([(1, 2), (3, 4), (5, 6)]))"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def sort_list(l):\n    return sorted(l, key=lambda x: x[0])\n\nl = [(3, 'c'), (1, 'a'), (2, 'b')]\n\nprint(sort_list(l))"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def main():\n    list_of_tuples = [(1, 2), (5, 1), (6, 100), (2, 1)]\n    list_of_tuples.sort(key=lambda x: x[1])\n    print(list_of_tuples)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def sort_tuples(tuples, key=lambda x: x[0]):\n    \"\"\"\n    Sort a list of tuples by a key.\n\n    :param tuples: List of tuples to sort\n    :type tuples: list\n    :param key: Key to sort by, defaults to the first element of the tuple\n    :type key: lambda\n    :return: Sorted list of tuples\n    :rtype: list\n    \"\"\"\n    return sorted(tuples, key=key)\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]))"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "def sort_tuples(tuples, key=None):\n    \"\"\"Sort tuples by key\"\"\"\n    return sorted(tuples, key=key)\n\n\ndef test_lambda():\n    \"\"\"Test lambda\"\"\"\n    assert sort_tuples(\n        [(1, 3), (3, 2), (2, 1)], key=lambda x: x[0]\n    ) == [(1, 3), (2, 1), (3, 2)]\n\n    assert sort_tuples(\n        [(1, 3), (3, 2), (2, 1)], key=lambda x: x[1]\n    ) == [(3, 2), (2, 1), (1, 3)]\n\n\nif __name__ == \"__main__\":\n    test_lambda()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, lambda_func):\n    return sorted(tuples, key=lambda_func)\n\n\ndef main():\n    list_of_tuples = [(2, 1), (0, 0), (1, 2), (2, 0)]\n    print(list_of_tuples)\n    print(sort_tuples(list_of_tuples, lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def sort_list(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n\ndef main():\n    lst = [(1, 2), (2, 1), (1, 3), (3, 1), (1, 4), (4, 1)]\n    print(sort_list(lst))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def sort_by_second(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\ndef test_sort_by_second():\n    tuples = [(1, 3), (2, 2), (4, 1)]\n    assert sort_by_second(tuples) == [(4, 1), (1, 3), (2, 2)]\n\n\nif __name__ == '__main__':\n    test_sort_by_second()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "# Tuples can be sorted by using lambda\n\n\ndef sort_tuples_by_lambda(tuples, index):\n    return sorted(tuples, key=lambda tup: tup[index])\n\n\ntuples = [(2, 1), (3, 4), (5, 6)]\n\nprint(sort_tuples_by_lambda(tuples, 0))\nprint(sort_tuples_by_lambda(tuples, 1))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def sort_tuples(tup_list):\n    return sorted(tup_list, key=lambda x: x[0])\n\nif __name__ == '__main__':\n    tup_list = [(3, 'C'), (2, 'B'), (1, 'A')]\n    print(sort_tuples(tup_list))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def sort_list_of_tuples(tuples, key):\n    return sorted(tuples, key=key)\n\n\nif __name__ == \"__main__\":\n    test_list = [(1, 3), (1, 4), (1, 5)]\n    sorted_list = sort_list_of_tuples(test_list, lambda x: x[0])\n    print(sorted_list)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def lambda_sort(tup):\n    return sorted(tup, key=lambda x: x[1])\n\nif __name__ == '__main__':\n    tup = [(1, 2), (2, 3), (4, 1)]\n    print(lambda_sort(tup))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sort_list_of_tuples(lst: list, key: int = 0) -> list:\n    return sorted(lst, key=lambda x: x[key])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_tuples([(2, 2), (3, 3), (1, 1)]))\n    print(sort_list_of_tuples([(2, 2), (3, 3), (1, 1)], key=1))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def sort_list(tup_list):\n    tup_list.sort(key=lambda x: x[1])\n    return tup_list\n\n\nprint(sort_list([(1, 2), (2, 1), (3, 2)]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples using lambda.\nHints:\nUse lambda to define anonymous functions.\nUse sort() to sort a list.\n\n\"\"\"\ntuples = [(2, 'second'), (1, 'first'), (3, 'third'), (1, 'first'), (2, 'second')]\ntuples.sort(key=lambda t: t[0])\nprint tuples"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples_list, sort_by_index):\n    return sorted(tuples_list, key=lambda x: x[sort_by_index])\n\n\ndef main():\n    tuples_list = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    print(sort_tuples(tuples_list, 0))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def main():\n    # Ask user for input.\n    user_input = input(\"Please input list of tuples separated by commas: \")\n    input_list = user_input.split(\",\")\n\n    # Convert the list of strings into a list of tuples.\n    tuple_list = []\n    for t in input_list:\n        tuple_list.append(tuple(t.split(\" \")))\n\n    # Sort the list of tuples using lambda.\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n\n    # Display sorted list.\n    print(sorted_list)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# This is the list of tuples\ntuples = [(3, 5), (1, 2), (4, 4), (0, 3)]\n\n# Sort the list of tuples using lambda\nsorted_tuples = sorted(tuples, key=lambda tup: tup[1])\n\nprint(sorted_tuples)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, key=None):\n    return sorted(tuples, key=key)\n\nif __name__ == '__main__':\n    t = [(2, 1), (2, 3), (2, 5), (2, 4), (2, 6)]\n    print(sort_tuples(t, key=lambda x: x[1]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, ascending=True):\n    \"\"\"Sort a list of tuples using lambda.\"\"\"\n    if ascending:\n        tuples.sort(key=lambda x: x[0])\n    else:\n        tuples.sort(key=lambda x: x[0], reverse=True)\n    return tuples\n\n\nif __name__ == '__main__':\n    import random\n    import pprint\n\n    tuples = [(random.randint(0, 100), i) for i in range(20)]\n    pprint.pprint(tuples)\n    print('ascending:')\n    pprint.pprint(sort_tuples(tuples.copy(), ascending=True))\n    print('descending:')\n    pprint.pprint(sort_tuples(tuples.copy(), ascending=False))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from operator import itemgetter\n\n\ndef sort_tuples(tuples, sort_index, reverse=False):\n    return sorted(tuples, key=itemgetter(sort_index), reverse=reverse)\n\n\nif __name__ == '__main__':\n    tuples = [(3, 'b'), (2, 'a'), (1, 'c')]\n    print(sort_tuples(tuples, 0, True))\n    print(sort_tuples(tuples, 1))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, key):\n    return sorted(tuples, key=lambda tup: tup[key])\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    print(sort_tuples(tuples, 0))\n    print(sort_tuples(tuples, 1))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def sort_by_first_element(tup):\n    tup.sort(key=lambda x: x[0])\n    return tup\n\ndef sort_by_second_element(tup):\n    tup.sort(key=lambda x: x[1])\n    return tup\n\ndef main():\n    tup = [(2, 5), (1, 2), (4, 4), (3, 3)]\n    tup = sort_by_first_element(tup)\n    print(tup)\n\n    tup = [(2, 5), (1, 2), (4, 4), (3, 3)]\n    tup = sort_by_second_element(tup)\n    print(tup)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from itertools import chain\n\n\ndef sort_list_of_tuples(list_of_tuples, key=lambda x: x):\n    return sorted(list_of_tuples, key=key)\n\n\ndef test_lambda():\n    \"\"\"\n    >>> sort_list_of_tuples([(1, 2), (3, 4), (5, 6)], key=lambda x: x[0])\n    [(1, 2), (3, 4), (5, 6)]\n    >>> sort_list_of_tuples([(1, 2), (3, 4), (5, 6)], key=lambda x: x[1])\n    [(3, 4), (1, 2), (5, 6)]\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, key, reverse=False):\n    return sorted(tuples, key=lambda t: t[key], reverse=reverse)\n\n\nif __name__ == '__main__':\n    data = [(1, 2), (3, 4), (5, 6)]\n    print(sort_tuples(data, 0))\n    print(sort_tuples(data, 1, reverse=True))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def sort_tuples(lst, key=None):\n    return sorted(lst, key=key)\n\ndef main():\n    lst = [(2, 3), (3, 2), (3, 1), (1, 3)]\n    key = lambda x: (x[1], x[0])\n    print(sort_tuples(lst, key))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef sort_tuples(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"Returns a list of tuples sorted by the first element.\n\n    Args:\n        tuples (List[Tuple[int, int]]): list of tuples to sort\n\n    Examples:\n        >>> assert sort_tuples([(1, 2), (5, 6), (2, 1)]) == [(1, 2), (2, 1), (5, 6)]\n    \"\"\"\n    return sorted(tuples, key=lambda tup: tup[0])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2), (5, 6), (2, 1)]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def sort_by_lambda(arr, func):\n    return sorted(arr, key=func)\n\n\ndef main():\n    arr = [(1, 2), (3, 4), (5, 6)]\n    print(sort_by_lambda(arr, lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])\n\ndef test(tuples, expected):\n    sorted_tuples = sort_tuples(tuples)\n    if sorted_tuples == expected:\n        print('Correct result: ' + str(sorted_tuples))\n    else:\n        print('Incorrect result: ' + str(sorted_tuples))\n\n\nif __name__ == '__main__':\n    test([(2, 'b'), (1, 'a'), (3, 'c')], [(1, 'a'), (2, 'b'), (3, 'c')])\n    test([(3, 'c'), (1, 'a'), (2, 'b')], [(1, 'a'), (2, 'b'), (3, 'c')])\n    test([(1, 'a'), (2, 'b'), (3, 'c')], [(1, 'a'), (2, 'b'), (3, 'c')])"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "# Tuples to sort\ntuples = [(4, 1), (2, 4), (2, 3), (4, 2), (1, 2)]\n\n# Sorts the tuples\nsorted_tuples = sorted(tuples, key=lambda x: (x[0], x[1]))\n\n# Prints the sorted tuples\nfor t in sorted_tuples:\n    print(t)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def sort_tuples_by_index(tuples, index, reverse=False):\n    \"\"\"Sort tuples by index.\n\n    Args:\n        tuples (list): List of tuples.\n        index (int): Index of the tuple to sort.\n        reverse (bool): Reverse order of sorting.\n\n    Returns:\n        list: Sorted list of tuples.\n\n    \"\"\"\n    return sorted(tuples, key=lambda tup: tup[index], reverse=reverse)\n\n\ndef main():\n    tuples = [(1, 2, 3), (2, 1, 3), (1, 3, 2), (2, 3, 1)]\n    sorted_tuples = sort_tuples_by_index(tuples, 0)\n    print(\"Sorted tuples by first index:\")\n    for tuple in sorted_tuples:\n        print(tuple)\n\n    sorted_tuples = sort_tuples_by_index(tuples, 1)\n    print(\"Sorted tuples by second index:\")\n    for tuple in sorted_tuples:\n        print(tuple)\n\n    sorted_tuples = sort_tuples_by_index(tuples, 2, reverse=True)\n    print(\"Sorted tuples by third index in reverse order:\")\n    for tuple in sorted_tuples:\n        print(tuple)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def sort_by_name(students):\n    return sorted(students, key=lambda student: student[0])\n\n\ndef test_sort_by_name():\n    assert sort_by_name([('Bob', 78), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]) == [\n        ('Adam', 92), ('Bob', 78), ('Bart', 66), ('Lisa', 88)]\n\n\nif __name__ == '__main__':\n    print(sort_by_name([('Bob', 78), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def sort_list_of_tuples(lst):\n    return sorted(lst, key=lambda x: x[0])\n\nif __name__ == '__main__':\n    print(sort_list_of_tuples([(1, 4), (3, 1), (2, 2)]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, key):\n    return sorted(tuples, key=lambda x: x[key])\n\nif __name__ == '__main__':\n    print(sort_tuples([(2, 2), (3, 3), (1, 1)], 0))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\ndef test_lambda_sort_tuples():\n    assert sort_tuples([('A', 1), ('B', 2), ('C', 3)]) == [('C', 3), ('B', 2), ('A', 1)]\n    assert sort_tuples([('B', 2), ('A', 1), ('C', 3)]) == [('C', 3), ('B', 2), ('A', 1)]"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def sort_list_of_tuples(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])\n\n\ndef main():\n    list_of_tuples = [(1, 3), (2, 2), (3, 1)]\n    print(sort_list_of_tuples(list_of_tuples))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sort_list_of_tuples(tuples, key=None, reverse=False):\n    return sorted(tuples, key=key, reverse=reverse)\n\n\ndef main():\n    # 3.1\n    print(sort_list_of_tuples([(1, \"one\"), (2, \"two\"), (3, \"three\")]))\n    # 3.2\n    print(sort_list_of_tuples(\n        [(\"one\", 1), (\"two\", 2), (\"three\", 3)], key=lambda x: x[1]))\n    # 3.3\n    print(sort_list_of_tuples(\n        [(\"one\", 1), (\"two\", 2), (\"three\", 3)], key=lambda x: x[1], reverse=True))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sort_list_of_tuples(tup_list, key_index, reverse=False):\n    \"\"\"\n    Sorts a list of tuples by the index of the tuple.\n    \"\"\"\n    return sorted(tup_list, key=lambda x: x[key_index], reverse=reverse)\n\nprint(sort_list_of_tuples([(5, 'b'), (2, 'a'), (3, 'c')], 0))\nprint(sort_list_of_tuples([(5, 'b'), (2, 'a'), (3, 'c')], 1))\nprint(sort_list_of_tuples([(5, 'b'), (2, 'a'), (3, 'c')], 0, True))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def sort_tuples(list_of_tuples, key_index, reverse=False):\n    return sorted(list_of_tuples, key=lambda x: x[key_index], reverse=reverse)\n\nif __name__ == '__main__':\n    list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n    print(sort_tuples(list_of_tuples, 0))\n    print(sort_tuples(list_of_tuples, 1, reverse=True))\n    print(sort_tuples(list_of_tuples, 0, reverse=True))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, key):\n    return sorted(tuples, key=key)\n\ndef test(tuples, key, expected_answer):\n    answer = sort_tuples(tuples, key)\n    if answer == expected_answer:\n        print(\"Test Passed\")\n    else:\n        print(\"Test Failed\")\n\ntest([(1, 2), (3, 4), (5, 6)], lambda x: x[1], [(3, 4), (5, 6), (1, 2)])\ntest([(1, 2), (3, 4), (5, 6)], lambda x: x[0], [(1, 2), (3, 4), (5, 6)])\ntest([(1, 2), (2, 4), (5, 6)], lambda x: x[1], [(5, 6), (2, 4), (1, 2)])\ntest([(1, 2), (2, 4), (5, 6)], lambda x: x[0], [(1, 2), (2, 4), (5, 6)])\ntest([(1, 2), (2, 4), (5, 6)], lambda x: x[0] + x[1], [(5, 6), (2, 4), (1, 2)])\ntest([(1, 2), (2, 4), (5, 6)], lambda x: x[1] + x[0], [(5, 6), (2, 4), (1, 2)])\ntest([(1, 2), (2, 4), (5, 6)], lambda x: x[0] * x[1], [(1, 2), (2, 4), (5, 6)])\ntest([(1, 2), (2, 4), (5, 6)], lambda x: x[1] * x[0], [(1, 2), (2, 4), (5, 6)])"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, key):\n    return sorted(tuples, key=lambda x: x[key])\n\ntuples = [(\"a\", \"b\"), (\"c\", \"d\"), (\"e\", \"f\")]\nprint(sort_tuples(tuples, 0))\nprint(sort_tuples(tuples, 1))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples using lambda.\nHints:\nUse lambda to create anonymous functions.\nUse operator.itemgetter to sort by a specified column in a list of tuples.\n\n\"\"\"\nimport operator\nL = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four'), (5, 'five')]\nL.sort(key=lambda x: x[1])\nprint L"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, key=None):\n    return sorted(tuples, key=key)\n\n\ndef main():\n    print(sort_tuples([(1, 2), (2, 1), (1, 3), (1, 1)]))\n\n    print(sort_tuples([(1, 2), (2, 1), (1, 3), (1, 1)],\n                      key=lambda x: x[0]))\n\n    print(sort_tuples([(1, 2), (2, 1), (1, 3), (1, 1)],\n                      key=lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def sort_tuples_using_lambda(input_list, sort_by_index=0):\n    return sorted(input_list, key=lambda x: x[sort_by_index])\n\n\ndef main():\n    input_list = [(1, 2), (1, 3), (2, 1)]\n    print(\"Sorted list of tuples: \" +\n          str(sort_tuples_using_lambda(input_list, sort_by_index=1)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# write a function that takes a list of tuples, and returns a list of those tuples sorted in ascending order by their second element.\n\ndef sort_list(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    list_of_tuples = [(1, 2), (5, 1), (6, 2), (2, 2), (3, 5)]\n    print(sort_list(list_of_tuples))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, key):\n    return sorted(tuples, key=lambda x: x[key])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2, 3), (4, 5, 6)], 2))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "from itertools import product\n\n\ndef sort_tuples(tuples, key):\n    return sorted(tuples, key=lambda x: x[key])\n\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (5, 6), (2, 3), (0, 9)]\n    for key, value in enumerate(tuples):\n        print(key, value)\n    print(\"-\" * 80)\n    for key, value in sort_tuples(tuples, 1):\n        print(key, value)\n    print(\"-\" * 80)\n    for key, value in product(range(len(tuples)), tuples):\n        print(key, value)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "# tuples = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n\n# tuples.sort(key=lambda x: x[1])\n\n# print(tuples)\n\n\ndef sort_tuples(list_of_tuples, key):\n    \"\"\"\n    Sort a list of tuples using lambda\n    :param list_of_tuples:\n    :param key:\n    :return:\n    \"\"\"\n    list_of_tuples.sort(key=lambda x: x[key])\n    return list_of_tuples\n\n\ntuples = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\nprint(sort_tuples(tuples, 1))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def lambda_sort(tuples, key=lambda x: x):\n    \"\"\"\n    >>> lambda_sort([(1, 2), (2, 1), (2, 2)])\n    [(1, 2), (2, 1), (2, 2)]\n    >>> lambda_sort([(1, 2), (2, 1), (2, 2)], key=lambda x: x[1])\n    [(1, 2), (2, 1), (2, 2)]\n    >>> lambda_sort([(1, 2), (2, 1), (2, 2)], key=lambda x: x[1] + x[0])\n    [(2, 1), (1, 2), (2, 2)]\n    \"\"\"\n    tuples.sort(key=key)\n    return tuples\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "from itertools import chain\n\n\ndef sort_tuples(lst, reverse=False):\n    \"\"\"Sort a list of tuples using lambda.\n\n    :param lst: list of tuples to sort\n    :param reverse: sort in reverse order if True\n    :return: sorted list of tuples\n    \"\"\"\n    return sorted(lst, key=lambda x: x[0], reverse=reverse)\n\n\ndef main():\n    lst = [(2, 'z'), (1, 'b'), (3, 'a')]\n    print(sort_tuples(lst))\n    print(sort_tuples(lst, reverse=True))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "# def sort_tuples(tuples_list):\n#     return sorted(tuples_list, key=lambda x: x[1])\n\ndef sort_tuples(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 3), (2, 4), (3, 2)]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def sort_list(lst, key=lambda x: x[1]):\n    return sorted(lst, key=key)\n\nif __name__ == '__main__':\n    lst = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    print(sort_list(lst, key=lambda x: x[1]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def sort_list_of_tuples(tuples, index):\n    return sorted(tuples, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    print(sort_list_of_tuples([(1, 2), (3, 4), (5, 6)], 0))\n    print(sort_list_of_tuples([(1, 2), (3, 4), (5, 6)], 1))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def lambda_sort(list_of_tuples, index):\n    return sorted(list_of_tuples, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    l = [(1, 2), (5, 1), (1, 4)]\n    print(lambda_sort(l, 0))\n    print(lambda_sort(l, 1))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples, key=None):\n    return sorted(tuples, key=lambda t: t[key])\n\n\nif __name__ == '__main__':\n    tuples = [(1, 10), (2, 20), (3, 30)]\n    print(sort_tuples(tuples, key=0))\n    print(sort_tuples(tuples, key=1))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def main():\n    # Get the list of tuples\n    tpls = [(2, 3), (3, 2), (1, 2), (1, 3)]\n    \n    # Sort the list using lambda\n    tpls.sort(key=lambda x: x[0])\n\n    # Print the sorted list\n    print(tpls)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def sort_list_of_tuples(tuples, sort_by_index):\n    \"\"\"\n    Sorts a list of tuples by a specified index.\n\n    :param tuples: list of tuples\n    :param sort_by_index: index to sort by\n    :return: sorted list of tuples\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[sort_by_index])\n\n\ndef main():\n    print(sort_list_of_tuples([(2, 3), (1, 2), (3, 1)], 0))\n    print(sort_list_of_tuples([(2, 3), (1, 2), (3, 1)], 1))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "from itertools import groupby\n\n\ndef sort_using_lambda(tuples):\n    return [max(g) for _, g in groupby(sorted(tuples), lambda t: t[0])]\n\n\ndef test_lambda_sort():\n    \"\"\"\n    >>> test_lambda_sort()\n    \"\"\"\n    assert sort_using_lambda([(1, 3), (2, 2), (4, 1)]) == [(2, 2), (4, 1), (1, 3)]"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples, key=None):\n    return sorted(tuples, key=lambda t: t[key])\n\n\ndef test_lambda_sort():\n    assert sort_tuples([(1, 2), (3, 4), (5, 6)], key=0) == [(1, 2), (3, 4), (5, 6)]\n    assert sort_tuples([(1, 2), (3, 4), (5, 6)], key=1) == [(3, 4), (1, 2), (5, 6)]"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# A list of tuples\nt = [(1, 2), (5, 1), (6, 100), (7, 10)]\n\n\n# Without using lambda\ndef sort_tuples(t):\n    t.sort(key=lambda x: x[1])\n    return t\n\n\n# Using lambda\ndef sort_tuples_using_lambda(t):\n    t.sort(key=lambda x: x[1])\n    return t\n\n\nprint(sort_tuples(t))\nprint(sort_tuples_using_lambda(t))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples, key=None):\n    if not key:\n        return sorted(tuples)\n    return sorted(tuples, key=lambda x: x[key])\n\n\nprint(sort_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 0))\nprint(sort_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 1))\nprint(sort_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 2))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def sort_tuple_lambda(tup_list, key):\n    return sorted(tup_list, key=lambda x: key(x))\n\n\nprint(\n    sort_tuple_lambda(\n        [(\"A\", 10), (\"B\", 1), (\"C\", 3)], lambda x: x[1]\n    )\n)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def sort_tuple_list(list_of_tuples: list, key: str = \"first\") -> list:\n    \"\"\"Sorts a list of tuples using lambda.\n\n    Args:\n        list_of_tuples (list): list of tuples to sort.\n        key (str, optional): name of the key to sort by. Defaults to \"first\".\n\n    Returns:\n        list: sorted list of tuples.\n    \"\"\"\n    if key == \"first\":\n        return sorted(list_of_tuples, key=lambda x: x[0])\n    if key == \"second\":\n        return sorted(list_of_tuples, key=lambda x: x[1])\n    else:\n        return list_of_tuples\n\n\nif __name__ == \"__main__\":\n    list_of_tuples = [(2, 3), (1, 2), (1, 1)]\n    print(sort_tuple_list(list_of_tuples))\n    print(sort_tuple_list(list_of_tuples, key=\"second\"))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def main():\n    # \u5b9a\u4e49\u4e00\u4e2a\u5217\u8868\n    lst = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    # \u5047\u8bbe\u8981\u6839\u636e\u7b2c\u4e00\u4e2a\u5143\u7d20\u6392\u5e8f\n    lst.sort(key=lambda x: x[0])\n    print(lst)\n    # \u5047\u8bbe\u8981\u6839\u636e\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6392\u5e8f\n    lst.sort(key=lambda x: x[1])\n    print(lst)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def sort_list_of_tuples(tuples, key=None):\n    return sorted(tuples, key=key)\n\n\nif __name__ == '__main__':\n    print(sort_list_of_tuples([(1, 2), (3, 4)], key=lambda x: x[1]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a function to sort a list of tuples using lambda.\nSuppose a list of tuples is given as:\nL = [(2, 'string2'), (0, 'string0'), (1, 'string1')]\nYour function should sort the list according to second element of each tuple in ascending order.\nHints:\nIn case of same elements, check the first element to break the tie.\n\n\"\"\"\ndef sort_tuples_by_index_one(tup):\n    return sorted(tup, key=lambda x: x[1])\n\nL = [(2, 'string2'), (0, 'string0'), (1, 'string1')]\nprint sort_tuples_by_index_one(L)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def sort_by_name(a, b):\n    return a[1] < b[1]\n\n\ndef sort_by_age(a, b):\n    return a[2] < b[2]\n\n\ndef sort_by_name_and_age(a, b):\n    if a[1] == b[1]:\n        return a[2] < b[2]\n    else:\n        return a[1] < b[1]\n\n\ndef main():\n    # list of tuples\n    l = [('john', 1, 43), ('adam', 2, 12), ('eve', 3, 94)]\n\n    print(\"Unsorted list:\")\n    for item in l:\n        print(item)\n\n    # sort by name\n    print(\"Sorted by name:\")\n    l.sort(key=lambda x: x[1])\n    for item in l:\n        print(item)\n\n    # sort by age\n    print(\"Sorted by age:\")\n    l.sort(key=lambda x: x[2])\n    for item in l:\n        print(item)\n\n    # sort by name and age\n    print(\"Sorted by name and age:\")\n    l.sort(key=lambda x: (x[1], x[2]))\n    for item in l:\n        print(item)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def sort_list_of_tuples(list_of_tuples, key):\n    return sorted(list_of_tuples, key=lambda x: x[key])\n\nprint(sort_list_of_tuples([(1, 2), (2, 3), (3, 4)], 0))\nprint(sort_list_of_tuples([(1, 2), (2, 3), (3, 4)], 1))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def lambda_sort(tuples, key, reverse=False):\n    return sorted(tuples, key=lambda k: key(k), reverse=reverse)\n\n\ndef main():\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    print(lambda_sort(tuples, lambda t: t[0]))\n    print(lambda_sort(tuples, lambda t: t[1], True))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples, key):\n    return sorted(tuples, key=lambda x: x[key])\n\n\ndef test_lambda_sort():\n    assert sort_tuples([(1, 2), (2, 1)], 0) == [(1, 2), (2, 1)]\n    assert sort_tuples([(1, 2), (2, 1)], 1) == [(2, 1), (1, 2)]\n    assert sort_tuples([(1, 2), (2, 1)], 2) == [(1, 2), (2, 1)]"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def sort_list_using_lambda(lst):\n    \"\"\"\n    Sort a list of tuples using lambda.\n\n    Args:\n        lst(list): list of tuples.\n\n    Returns:\n        list: sorted list.\n    \"\"\"\n    return sorted(lst, key=lambda tup: tup[0])\n\n\nif __name__ == '__main__':\n    print(sort_list_using_lambda([(1, 4), (4, 1), (2, 2), (3, 3)]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef sort_tuples(data: List[Tuple[int, int]], reverse: bool = False) -> None:\n    \"\"\"Sorts a list of tuples.\n\n    Args:\n        data (List[Tuple[int, int]]): list of tuples to be sorted\n        reverse (bool): whether to sort in reverse order\n    \"\"\"\n    data.sort(key=lambda tup: tup[1], reverse=reverse)\n\n\nif __name__ == \"__main__\":\n    data = [(1, 2), (2, 1), (2, 3), (2, 4)]\n    sort_tuples(data)\n    print(data)\n    sort_tuples(data, reverse=True)\n    print(data)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples, reverse=False):\n    return sorted(tuples, key=lambda x: x[1], reverse=reverse)\n\n\nprint(sort_tuples([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], reverse=True))"
    }
  ]
}