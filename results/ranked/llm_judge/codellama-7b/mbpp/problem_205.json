{
  "timestamp": "2025-09-14T23:50:57.424762",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 205,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef _is_subset(list1: List, list2: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\n\n\ndef is_subset(list1: List, list2: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    return _is_subset(list1, list2) or _is_subset(list2, list1)\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3], [1, 2, 3, 4, 5]))\n    print(is_subset([1, 2, 3], [1, 2, 3, [4, 5]]))\n    print(is_subset([1, 2, 3], [1, 2, 3, [[4, 5]]]))\n    print(is_subset([1, 2, 3], [1, 2, 3, 4, 5, [[6, 7]]]))\n    print(is_subset([1, 2, 3], [1, 2, 3, [[4, 5], [6, 7]]]))\n    print(is_subset([1, 2, 3], [1, 2, 3, [[4, 5], [6, 7]]]))\n    print(is_subset([1, 2, 3], [1, 2, 3, [[4, 5], [6, 7]]]))\n    print(is_subset([1, 2, 3], [1, 2, 3, [[4, 5], [6, 7]]]))\n    print(is_subset([1, 2, 3], [1, 2, 3, [[4, 5], [6, 7]]]))\n    print(is_subset([1, 2, 3], [1, 2, 3, [[4, 5], [6, 7]]]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef check_subset(list_a: List[int], list_b: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not list_a or not list_b:\n        return False\n\n    for i in list_a:\n        if isinstance(i, list):\n            if not check_subset(i, list_b):\n                return False\n        else:\n            if i not in list_b:\n                return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(check_subset([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(check_subset([1, 2, [3]], [1, 2, [3]]))\n    print(check_subset([1, 2, [3]], [1, 2, 3]))\n    print(check_subset([1, 2, 3, 4], [1, 2, 3, 4, 5]))\n    print(check_subset([1, 2, 3, 4], [1, 2, 3, 4, 5, [6, 7]]))\n    print(check_subset([1, 2, 3, 4], [1, 2, 3, 4, 5, [6, 7], 8]))\n    print(check_subset([1, 2, 3, 4], [1, 2, 3, 4, 5, [6, 7], 8, 9]))\n    print(check_subset([1, 2, 3, 4], [1, 2, 3, 4, 5, [6, 7], 8, 9, 10]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_subset(l1: List, l2: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def helper(l1, l2, memo):\n        if not l1:\n            return True\n        if not l2:\n            return False\n\n        if (l1[0], l2[0]) in memo:\n            return memo[(l1[0], l2[0])]\n\n        if isinstance(l2[0], list):\n            memo[(l1[0], l2[0])] = helper(l1[1:], l2[0], memo)\n            return memo[(l1[0], l2[0])]\n\n        memo[(l1[0], l2[0])] = l2[0] == l1[0]\n        return memo[(l1[0], l2[0])]\n\n    return helper(l1, l2, {})\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3], [1, 2, 3]))\n    print(is_subset([1, 2, 3], [3, 2, 1]))\n    print(is_subset([1, 2, 3], [1, 2, 3, 4]))\n    print(is_subset([1, 2, 3], [1, [2], 3]))\n    print(is_subset([1, 2, 3], [1, [2], 3, [4]]))\n    print(is_subset([1, 2, 3], [1, [2, 3], 3, [4]]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def is_subset(list1, list2):\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\n\ndef main():\n    print(is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]))\n    print(is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]))\n    print(is_subset([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_subset(outer: List, inner: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def rec_helper(outer: List, inner: List) -> bool:\n        if not outer:\n            return not inner\n        if not inner:\n            return True\n\n        for i, elem in enumerate(outer):\n            if isinstance(elem, list):\n                if rec_helper(elem, inner):\n                    return True\n            else:\n                if not inner:\n                    return True\n                elif elem == inner[0]:\n                    return rec_helper(outer[i + 1 :], inner[1:])\n\n        return False\n\n    return rec_helper(outer, inner)\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, [1, 2]], [1, [1, 2]]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_subset(l1: List, l2: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n)\n\n    n = size of l1\n    m = size of l2\n    \"\"\"\n\n    def is_subset_helper(l1: List, l2: List) -> bool:\n        if l1 == []:\n            return True\n        if l2 == []:\n            return False\n\n        if l1[0] in l2[0]:\n            return is_subset_helper(l1[1:], l2[1:])\n        return is_subset_helper(l1[1:], l2)\n\n    return is_subset_helper(l1, l2)\n\n\nif __name__ == \"__main__\":\n    print(is_subset([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]]))\n    print(is_subset([1, 2], [[1, 2], [3, 4], [5, 6]]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_subset(nested_list: List[List[int]], nested_list_subset: List[List[int]]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    nested_list_set = set(nested_list)\n\n    for nested_list_subset_item in nested_list_subset:\n        if nested_list_subset_item not in nested_list_set:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_subset([[1, 2, 3]], [[1, 2]]))\n    print(is_subset([[1, 2, 3]], [[1, 2, 3]]))\n    print(is_subset([[1, 2, 3]], [[1, 2, 3, 4]]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def is_subset(list_a, list_b):\n    for item in list_a:\n        if item not in list_b:\n            return False\n    return True\n\n\ndef main():\n    list_a = [[1, 2, 3], [4, 5, 6], [7, 8]]\n    list_b = [[1, 2, 3], [4, 5, 6]]\n    print(is_subset(list_a, list_b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n) where n is the number of elements in the nested list\n# Space complexity: O(n)\ndef is_nested_list_subset(nested_list: List, nested_list_subset: List) -> bool:\n    if not nested_list_subset:\n        return True\n    if not nested_list:\n        return False\n\n    for i in range(len(nested_list)):\n        if is_nested_list_subset(nested_list[i], nested_list_subset[0]):\n            return True\n    return False\n\n\n# Time complexity: O(n) where n is the number of elements in the nested list\n# Space complexity: O(n)\ndef is_nested_list_subset_optimized(nested_list: List, nested_list_subset: List) -> bool:\n    if not nested_list_subset:\n        return True\n    if not nested_list:\n        return False\n\n    for i in range(len(nested_list)):\n        if is_nested_list_subset_optimized(nested_list[i], nested_list_subset[0]):\n            return True\n\n    return nested_list == nested_list_subset\n\n\nif __name__ == \"__main__\":\n    assert is_nested_list_subset([1, [2, 3], 4], [[1, [2, 3]]]) == True\n    assert is_nested_list_subset([1, [2, 3], 4], [[1, [2, 3]], [4]]) == True\n    assert is_nested_list_subset([1, [2, 3], 4], [[1, [2, 3]], [4], [5]]) == False\n    assert is_nested_list_subset([1, [2, 3], 4], [[1, [2, 3]], [4], [5], [6]]) == False\n    assert is_nested_list_subset([1, [2, 3], 4], [[1, [2, 3]], [4], [5, 6]]) == False\n    assert is_nested_list_subset([1, [2, 3], 4], [["
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from typing import List, Optional\n\n\n# Time complexity: O(n*m) where n and m are lengths of lists\n# Space complexity: O(n)\ndef is_subset(l1: List[List[int]], l2: List[List[int]]) -> bool:\n    \"\"\"Return True if l2 is subset of l1.\"\"\"\n    return is_subset_recursive(l1, l2, 0, 0)\n\n\ndef is_subset_recursive(l1: List[List[int]], l2: List[List[int]],\n                        i1: int, i2: int) -> bool:\n    if i2 == len(l2):\n        return True\n\n    if i1 == len(l1):\n        return False\n\n    if isinstance(l1[i1], list):\n        return is_subset_recursive(l1[i1], l2, 0, i2)\n    else:\n        if l1[i1] in l2[i2]:\n            return is_subset_recursive(l1, l2, i1 + 1, i2 + 1)\n\n\n# Time complexity: O(n*m) where n and m are lengths of lists\n# Space complexity: O(n)\ndef is_subset_hash(l1: List[List[int]], l2: List[List[int]]) -> bool:\n    \"\"\"Return True if l2 is subset of l1.\"\"\"\n    hash_map = {}\n    for i in range(len(l2)):\n        if isinstance(l2[i], list):\n            for j in range(len(l2[i])):\n                hash_map[l2[i][j]] = 0\n        else:\n            hash_map[l2[i]] = 0\n\n    for i in range(len(l1)):\n        if isinstance(l1[i], list):\n            for j in range(len(l1[i])):\n                if l1[i][j] in hash_map:\n                    hash_map[l1[i][j]] += 1\n        else:\n            if l1[i] in hash_map:\n                hash"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def is_subset(a, b):\n    \"\"\"\n    :type a: List[NestedInteger]\n    :type b: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    if not a:\n        return True\n    elif not b:\n        return False\n    else:\n        return is_subset(a, b[:-1]) and (a[-1] == b[-1] or not a[-1].isInteger())\n\n\ndef is_subset_v2(a, b):\n    \"\"\"\n    :type a: List[NestedInteger]\n    :type b: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    if not a:\n        return True\n    elif not b:\n        return False\n    else:\n        if a[-1].isInteger():\n            return is_subset_v2(a, b[:-1]) and a[-1] == b[-1]\n        else:\n            return is_subset_v2(a, b[:-1]) and is_subset_v2(a[-1].getList(), b[-1].getList())\n\n\ndef is_subset_v3(a, b):\n    \"\"\"\n    :type a: List[NestedInteger]\n    :type b: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    if not a:\n        return True\n    elif not b:\n        return False\n    else:\n        return is_subset_v3(a, b[:-1]) and (a[-1] == b[-1] or not a[-1].isInteger())"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def containsNestedList(self, list1, list2):\n        \"\"\"\n        :type list1: List[NestedInteger]\n        :type list2: List[NestedInteger]\n        :rtype: bool\n        \"\"\"\n        if not list2:\n            return True\n        elif not list1:\n            return False\n        elif list2[0].isInteger():\n            return self.containsNestedList(list1[1:], list2[1:])\n        else:\n            return self.containsNestedList(list1[1:], list2[1:]) or \\\n                self.containsNestedList(list1[1:], list2[0].getList())"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def is_subset(s, g):\n    # Time Complexity: O(n*m), Space Complexity: O(1)\n    return all(any(e == i for i in g) for e in s)\n\n\ndef is_subset_recursive(s, g):\n    # Time Complexity: O(n*m), Space Complexity: O(1)\n    def is_subset_helper(s, g):\n        if not s:\n            return True\n        for i in g:\n            if s[0] == i:\n                return is_subset_helper(s[1:], g)\n        return False\n\n    return is_subset_helper(s, g)\n\n\n# Time Complexity: O(n*m), Space Complexity: O(n)\ndef is_subset_recursive_2(s, g):\n    def is_subset_helper(s, g):\n        if not s:\n            return True\n        if not g:\n            return False\n        return s[0] == g[0] and is_subset_helper(s[1:], g[1:]) or is_subset_helper(s, g[1:])\n\n    return is_subset_helper(s, g)\n\n\n# Time Complexity: O(n*m), Space Complexity: O(n)\ndef is_subset_recursive_3(s, g):\n    def is_subset_helper(s, g):\n        if not s:\n            return True\n        if not g:\n            return False\n        if s[0] == g[0]:\n            return is_subset_helper(s[1:], g[1:])\n        return is_subset_helper(s, g[1:])\n\n    return is_subset_helper(s, g)\n\n\n# Time Complexity: O(n*m), Space Complexity: O(n)\ndef is_subset_recursive_4(s, g):\n    def is_subset_helper(s, g):\n        if not s:\n            return True\n        if not g:\n            return False\n        if s[0] == g[0]:\n            return is_subset_helper(s"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n).\n# Space complexity: O(1).\ndef is_subset(list_1: List[int], list_2: List[int]) -> bool:\n    for num in list_1:\n        if num not in list_2:\n            return False\n\n    return True\n\n\n# Time complexity: O(n).\n# Space complexity: O(1).\ndef is_subset_2(list_1: List[int], list_2: List[int]) -> bool:\n    # Flatten both lists.\n    list_1 = flatten(list_1)\n    list_2 = flatten(list_2)\n\n    for num in list_1:\n        if num not in list_2:\n            return False\n\n    return True\n\n\ndef flatten(list_1: List[int]) -> List[int]:\n    flattened_list = []\n\n    for num in list_1:\n        if isinstance(num, int):\n            flattened_list.append(num)\n        else:\n            flattened_list += flatten(num)\n\n    return flattened_list\n\n\n# Time complexity: O(n).\n# Space complexity: O(1).\ndef is_subset_3(list_1: List[int], list_2: List[int]) -> bool:\n    # Flatten both lists.\n    list_1 = flatten(list_1)\n    list_2 = flatten(list_2)\n\n    # Sort both lists.\n    list_1.sort()\n    list_2.sort()\n\n    for i in range(len(list_1)):\n        if list_1[i] != list_2[i]:\n            return False\n\n    return True\n\n\n# Time complexity: O(n).\n# Space complexity: O(1).\ndef is_subset_4(list_1: List[int], list_2: List[int]) -> bool:\n    # Flatten both lists.\n    list_1 = flatten(list_1)\n    list_2 = flatten(list_2)\n\n    # Sort both lists.\n    list_1"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_subset(list_a: List[int], list_b: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for num in list_a:\n        if num not in list_b:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2], [1, 2, 3]))\n    print(is_subset([1, 2, 3], [1, 2, 3, 4]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_subset(outer: List[List[int]], inner: List[int]) -> bool:\n    \"\"\"\n    This function uses the fact that the outer list is sorted to find the start and end of the inner list in the outer list.\n    Then it iterates over the outer list, and compares the inner list with the current sublist.\n\n    >>> is_subset([[1, 2, 3], [3, 4, 5], [6]], [3, 4, 5])\n    True\n    >>> is_subset([[1, 2, 3], [3, 4, 5], [6]], [2, 4, 5])\n    False\n    >>> is_subset([[1, 2, 3], [3, 4, 5], [6]], [3, 4, 7])\n    False\n    \"\"\"\n    start_outer = 0\n    end_outer = len(outer) - 1\n\n    for start in range(len(outer)):\n        if outer[start] == inner:\n            start_outer = start\n            break\n\n    for end in range(len(outer) - 1, -1, -1):\n        if outer[end] == inner:\n            end_outer = end\n            break\n\n    for i in range(start_outer, end_outer + 1):\n        if outer[i] == inner:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def is_subset(list1, list2):\n    \"\"\"\n    :type list1: List[NestedInteger]\n    :type list2: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    def contains(nested_list, target):\n        \"\"\"\n        :type nested_list: List[NestedInteger]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        for nested_int in nested_list:\n            if nested_int.getInteger() == target:\n                return True\n            if nested_int.isList():\n                if contains(nested_int.getList(), target):\n                    return True\n        return False\n\n    for nested_int in list1:\n        if nested_int.isList():\n            for nested_int2 in list2:\n                if nested_int2.isList():\n                    if contains(nested_int2.getList(), nested_int.getInteger()):\n                        break\n                else:\n                    if nested_int2.getInteger() == nested_int.getInteger():\n                        break\n            else:\n                return False\n        else:\n            for nested_int2 in list2:\n                if nested_int2.isList():\n                    if contains(nested_int2.getList(), nested_int.getInteger()):\n                        break\n                else:\n                    if nested_int2.getInteger() == nested_int.getInteger():\n                        break\n            else:\n                return False\n    return True\n\n\n# Test cases:\nprint(is_subset([[1, 4], [2, 2]], [[1, 2, 2], [1, 4]]))\nprint(is_subset([1, [4, [2]]], [[4], [1, [2]]]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_subset(l1: List[List[int]], l2: List[List[int]]) -> bool:\n    \"\"\"\n    Time Complexity: O(m*n)\n    Space Complexity: O(m*n)\n\n    :param l1: nested list\n    :param l2: nested list\n    :return: if l1 is a subset of l2\n    \"\"\"\n\n    def is_subset_helper(l1: List[int], l2: List[int]) -> bool:\n        \"\"\"\n        Time Complexity: O(n)\n        Space Complexity: O(n)\n\n        :param l1: nested list\n        :param l2: nested list\n        :return: if l1 is a subset of l2\n        \"\"\"\n\n        # If l1 is empty, we have found a subset.\n        if not l1:\n            return True\n\n        # If l2 is empty, we have not found a subset.\n        if not l2:\n            return False\n\n        # If the first element in l1 is in l2, we recursively check if the rest of l1 is a subset of l2.\n        if l1[0] in l2:\n            return is_subset_helper(l1[1:], l2)\n\n        # Otherwise, we recursively check if the rest of l1 is a subset of l2, and then check if the first element of l1 is in l2.\n        return is_subset_helper(l1[1:], l2) or is_subset_helper(l1, l2[1:])\n\n    # We recursively check if l1 is a subset of l2.\n    return is_subset_helper(l1, l2)\n\n\nif __name__ == \"__main__\":\n    print(is_subset([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]]))\n    print(is_subset([[1, 2], [3, 4]], [[1, 2], [5, 6]]))\n    print(is_subset([[1, 2], [3, 4]], [["
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef is_subset(list1: List[List[int]], list2: List[List[int]]) -> bool:\n    \"\"\"\n    :param list1: nested list\n    :param list2: nested list\n    :return: true if list1 is a subset of list2\n    >>> is_subset([[1,2],[3,4]], [[1,2],[3,4],[5,6]])\n    True\n    >>> is_subset([[1,2],[3]], [[1,2],[3,4],[5,6]])\n    False\n    \"\"\"\n    if not list1:\n        return True\n\n    if not list2:\n        return False\n\n    i, j = 0, 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] == list2[j]:\n            i += 1\n            j += 1\n        elif list1[i] < list2[j]:\n            i += 1\n        else:\n            j += 1\n\n    return i == len(list1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.234050852198141,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef is_subset(l1: List[int], l2: List[int]) -> bool:\n    if len(l1) > len(l2):\n        return False\n\n    i1, i2 = 0, 0\n    while i1 < len(l1):\n        if l1[i1] in l2[i2:]:\n            i2 = l2.index(l1[i1], i2)\n        else:\n            return False\n        i1 += 1\n\n    return True\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef is_subset_2(l1: List[int], l2: List[int]) -> bool:\n    if len(l1) > len(l2):\n        return False\n\n    return all(i in l2 for i in l1)\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3], [1, 2, 3]))\n    print(is_subset([1, 2, 3], [1, 2]))\n    print(is_subset([1, 2, 3], [1, 4, 2]))\n    print(is_subset([1, 2, 3], [1, 4, 2, 3]))\n    print(is_subset([1, 2, 3], [1, 4, 2, 3, 5]))\n\n    print(is_subset_2([1, 2, 3], [1, 2, 3]))\n    print(is_subset_2([1, 2, 3], [1, 2]))\n    print(is_subset_2([1, 2, 3], [1, 4, 2]))\n    print(is_subset_2([1, 2, 3], [1, 4, 2, 3]))\n    print(is_subset_2([1, 2, 3], [1, 4, 2, 3, 5]))"
    },
    {
      "rank": 21,
      "score": 9.226766272351448,
      "candidate": "from collections import defaultdict\n\ndef is_subset(list1, list2):\n    \"\"\"\n    :type list1: List[NestedInteger]\n    :type list2: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    if list1 == list2:\n        return True\n    d1 = nested_dict(list1)\n    d2 = nested_dict(list2)\n\n    for key, value in d1.items():\n        if key not in d2 or value > d2[key]:\n            return False\n\n    return True\n\ndef nested_dict(nested_list):\n    d = defaultdict(int)\n    for nested_int in nested_list:\n        if nested_int.isInteger():\n            d[1] += 1\n        else:\n            d.update(nested_dict(nested_int.getList()))\n    return d"
    },
    {
      "rank": 22,
      "score": 9.21346272767743,
      "candidate": "from typing import List\n\n\ndef is_nested_list_subset(\n        nested_list: List[List[int]],\n        nested_list_subset: List[List[int]]) -> bool:\n    \"\"\"Checks if a nested list is a subset of another nested list.\n\n    Args:\n        nested_list: a nested list\n        nested_list_subset: a nested list\n\n    Returns:\n        True if the first nested list is a subset of the second nested list\n    \"\"\"\n    # Check that the first list is a subset of the second list\n    # and that the first list is a subset of the second list\n    # Check that the first list is a subset of the second list\n    return is_list_subset(nested_list, nested_list_subset) and is_list_subset(nested_list_subset, nested_list)\n\n\ndef is_list_subset(\n        list_a: List[int],\n        list_b: List[int]) -> bool:\n    \"\"\"Checks if a list is a subset of another list.\n\n    Args:\n        list_a: a list\n        list_b: a list\n\n    Returns:\n        True if the first list is a subset of the second list\n    \"\"\"\n    # Check if list_a is a subset of list_b\n    for item in list_a:\n        if item not in list_b:\n            return False\n    return True\n\n\ndef main():\n    list_a = [[1, 2], [3], [4, 5, 6]]\n    list_b = [[1, 2], [3], [4, 5, 6], [7, 8]]\n    list_c = [[1, 2], [4, 5, 6]]\n    print(is_nested_list_subset(list_a, list_b))\n    print(is_nested_list_subset(list_a, list_c))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 9.205959372648458,
      "candidate": "def is_subset(list1, list2):\n    \"\"\"\n    :type list1: List[NestedInteger]\n    :type list2: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    if len(list1) < len(list2):\n        return False\n    if not list1 and not list2:\n        return True\n    if not list1:\n        return False\n    if not list2:\n        return True\n    if list1[0].isInteger():\n        if list2[0].isInteger():\n            if list1[0].getInteger() == list2[0].getInteger():\n                return is_subset(list1[1:], list2[1:])\n            else:\n                return False\n        else:\n            return is_subset(list1[1:], list2)\n    else:\n        if list2[0].isInteger():\n            return is_subset(list1, list2[1:])\n        else:\n            return is_subset(list1[1:], list2[1:])\n\n\nprint(is_subset([1, [4, [6]]], [1, [4, [6]]]))\nprint(is_subset([1, [4, [6]]], [1, [4, [7]]]))\nprint(is_subset([1, [4, [6]]], [1, [5, [6]]]))\nprint(is_subset([1, [4, [6]]], [1, [4, [6, [7]]]]))\nprint(is_subset([1, [4, [6]]], [1, [4, [7, [6]]]]))"
    },
    {
      "rank": 24,
      "score": 9.177268828905222,
      "candidate": "def nested_list_is_subset(nested_list, subset):\n    \"\"\"\n    :type nested_list: List[List[int]]\n    :type subset: List[int]\n    :rtype: bool\n    \"\"\"\n    for item in nested_list:\n        if item == subset:\n            return True\n    return False\n\n\ndef main():\n    print(nested_list_is_subset(\n        [1, 4, [2, 2]],\n        [2, 2]\n    ))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 9.122564458729856,
      "candidate": "def is_subset(list1, list2):\n    for item in list1:\n        if item in list2:\n            continue\n        else:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2], [1, 2, 3]))\n    print(is_subset([1, 2], [1, 3, 2]))\n    print(is_subset([1, 2], [1, 2, 2]))\n    print(is_subset([1, 2], [1, 2, 2, 2]))\n    print(is_subset([1, 2], [1, 2, 2, 2, 2]))\n    print(is_subset([1, 2], [1, 2, 2, 3]))"
    },
    {
      "rank": 26,
      "score": 8.973005557553902,
      "candidate": "def is_subset(a, b):\n    \"\"\"\n    :type a: list[list[int]]\n    :type b: list[list[int]]\n    :rtype: bool\n    \"\"\"\n    a_set = set(map(tuple, a))\n    b_set = set(map(tuple, b))\n    return a_set <= b_set\n\n\nif __name__ == '__main__':\n    print(is_subset([[1, 2], [3]], [[1, 2], [3, 4]]))\n    print(is_subset([[1, 2], [3, 4]], [[1, 2], [3]]))\n    print(is_subset([[1, 2], [3, 4]], [[1, 2], [3]]))"
    },
    {
      "rank": 27,
      "score": 8.95994420569242,
      "candidate": "def is_subset(main_list, sub_list):\n    if len(main_list) < len(sub_list):\n        return False\n    main_set = set(main_list)\n    sub_set = set(sub_list)\n    return sub_set.issubset(main_set)\n\n\nif __name__ == \"__main__\":\n    assert is_subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) is True\n    assert is_subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) is True\n    assert is_subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7]) is False\n    assert is_subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]) is False"
    },
    {
      "rank": 28,
      "score": 8.85571690049604,
      "candidate": "def is_subset(list1, list2):\n    if not list1:\n        return True\n\n    if not list2:\n        return False\n\n    for element1 in list1:\n        if isinstance(element1, list):\n            if not is_subset(element1, list2):\n                return False\n        elif element1 in list2:\n            list2.remove(element1)\n        else:\n            return False\n\n    return True\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, [3, 4], [5, 6], [7, 8]]\n    list2 = [1, 2, [3, 4], [5, 6]]\n    print(is_subset(list1, list2))"
    },
    {
      "rank": 29,
      "score": 8.855395696632057,
      "candidate": "def check_subset(list1, list2):\n    if not list1:\n        return True\n    if not list2:\n        return False\n\n    return check_subset(list1[1:], list2) and list1[0] in list2\n\n\ndef main():\n    list1 = [[1, 2], [3, 4], [5, 6]]\n    list2 = [[1, 2], [3, 4]]\n    list3 = [[1, 2], [3, 4], [5, 6], [7, 8]]\n\n    print(check_subset(list1, list2))\n    print(check_subset(list1, list3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 8.850707355641543,
      "candidate": "def check_subset(list1, list2):\n    list1 = flatten(list1)\n    list2 = flatten(list2)\n    return all([i in list1 for i in list2])\n\n\ndef flatten(lst):\n    return [j for i in lst for j in i]"
    },
    {
      "rank": 31,
      "score": 8.76828871349479,
      "candidate": "def is_subset(l1, l2):\n    return all(elem in l2 for elem in l1)\n\n\ndef is_subset_2(l1, l2):\n    return not (any(elem not in l2 for elem in l1))"
    },
    {
      "rank": 32,
      "score": 8.750282588864879,
      "candidate": "def is_subset(nested_list_1, nested_list_2):\n    # TODO: Write your code here\n    for item in nested_list_1:\n        if item not in nested_list_2:\n            return False\n    return True\n\n\ndef main():\n    print(\"Here is a list of lists: \" + str(is_subset([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])))\n    print(\"Here is a list of lists: \" + str(is_subset([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])))\n    print(\"Here is a list of lists: \" + str(is_subset([[1, 2], [3, 4]], [[1, 2], [3, 4]])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.715724466237427,
      "candidate": "def is_subset(list1, list2):\n    return set(list1).issubset(set(list2))\n\n\ndef main():\n    list1 = [[1, 2], [3, 4, 5]]\n    list2 = [[1, 2, 3], [4, 5]]\n    print(is_subset(list1, list2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 8.625142247198651,
      "candidate": "def is_subset(list1, list2):\n    \"\"\"\n    :param list1: nested list\n    :param list2: nested list\n    :return: bool\n    \"\"\"\n    if not list1 or not list2:\n        return False\n\n    if not isinstance(list1, list):\n        return False\n\n    if not isinstance(list2, list):\n        return False\n\n    return is_subset_helper(list1, list2)\n\n\ndef is_subset_helper(list1, list2):\n    \"\"\"\n    :param list1: nested list\n    :param list2: nested list\n    :return: bool\n    \"\"\"\n    if not list1:\n        return True\n\n    if not list2:\n        return False\n\n    if not isinstance(list1, list):\n        if list1 in list2:\n            return True\n        return False\n\n    if not isinstance(list2, list):\n        return False\n\n    if list1[0] in list2:\n        return is_subset_helper(list1[1:], list2)\n\n    return is_subset_helper(list1, list2[1:])\n\n\ndef main():\n    list1 = [1, 2, 3]\n    list2 = [[1, 2, 3], 4, 5]\n    list3 = [[1, 2, 3], 4, 5, 6]\n    list4 = [[1, 2, 3], 4, 5, [6, 7, 8]]\n    list5 = [[1, 2, 3], 4, 5, [6, 7, 8], 9]\n    list6 = [1, 2, 3, 4, 5, [6, 7, 8], 9]\n    list7 = [1, 2, 3, 4, 5, [6, 7, 8], 9, 10]\n    list8 = [1, 2, 3, 4, 5, [6, 7, 8], 9, 10, 11]\n    list9 = ["
    },
    {
      "rank": 35,
      "score": 8.610076160146226,
      "candidate": "def is_subset(list_one, list_two):\n    # check if list_one is a subset of list_two\n    # if list_one is a subset of list_two, return True\n    # if list_one is not a subset of list_two, return False\n    list_one_set = set(list_one)\n    list_two_set = set(list_two)\n\n    if list_one_set.issubset(list_two_set):\n        return True\n\n    return False\n\n\ndef main():\n    list_one = [1, 2, 3]\n    list_two = [3, 4, 5, [1, 2, 3]]\n\n    print(is_subset(list_one, list_two))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.60156811074208,
      "candidate": "def contains(list1, list2):\n    \"\"\"\n    list1 is the bigger list\n    \"\"\"\n    if list1 == []:\n        return True\n    if list2 == []:\n        return False\n    if list1[0] in list2:\n        return contains(list1[1:], list2[list2.index(list1[0]):])\n    return contains(list1[1:], list2)\n\nprint contains([1,2,3], [1,3,2,3])\nprint contains([1,2,3], [1,3,2])\nprint contains([1,2,3], [1,3,4])"
    },
    {
      "rank": 37,
      "score": 8.565425580227462,
      "candidate": "def is_subset(list1, list2):\n    \"\"\"\n    Takes 2 lists and check if list2 is a subset of list1\n\n    Args:\n        list1: list\n        list2: list\n    Returns:\n        bool\n    \"\"\"\n    if len(list2) > len(list1):\n        return False\n    if len(list1) == 0:\n        return False\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list2.remove(list1[i])\n    if len(list2) > 0:\n        return False\n    return True\n\n\nprint(is_subset([1, 2, 3, 4, 5, 6], [1, 3, 5, 7]))\nprint(is_subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]))\nprint(is_subset([1, 2, 3, 4, 5, 6], [1, 3, 6, 7]))\nprint(is_subset([1, 2, 3, 4, 5, 6], [1, 3, 6]))"
    },
    {
      "rank": 38,
      "score": 8.53012858503943,
      "candidate": "def is_subset(list1, list2):\n    if not list2:\n        return True\n    if not list1:\n        return False\n    if list1[0] in list2[0]:\n        return is_subset(list1[1:], list2)\n    else:\n        return is_subset(list1, list2[1:])\n\n\nprint(is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5]))\nprint(is_subset([1, 2, 3, 4], [1, 2, 3, 5]))\nprint(is_subset([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 39,
      "score": 8.499905739299377,
      "candidate": "def is_sublist(l1, l2):\n    if len(l1) == 0:\n        return True\n    if len(l2) == 0:\n        return False\n    if l1[0] in l2[0]:\n        return is_sublist(l1[1:], l2[1:])\n    else:\n        return is_sublist(l1, l2[1:])\n\n\ndef main():\n    print(is_sublist([1, 2, 3], [[1, 2, 3]]))\n    print(is_sublist([1, 2, 3], [[1, 2, 3, 4]]))\n    print(is_sublist([1, 2, 3], [[1, 2], [3]]))\n    print(is_sublist([1, 2, 3], [[1, 2, 3], [4, 5]]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.48796797856353,
      "candidate": "def is_subset(l1, l2):\n    if len(l1) > len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] == l2[i]:\n            continue\n        else:\n            return False\n\n    return True\n\n\ndef main():\n    print(is_subset([1, 2, [3]], [1, [3], 2]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.478208546788407,
      "candidate": "def is_subset(list1, list2):\n    for item in list1:\n        if isinstance(item, list):\n            if item not in list2:\n                return False\n        else:\n            if item not in list2:\n                return False\n    return True\n\n\nlist1 = [[1, 2, 3], [4, 5, 6]]\nlist2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlist3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], 10]\n\nprint(is_subset(list1, list2))\nprint(is_subset(list1, list3))"
    },
    {
      "rank": 42,
      "score": 8.437695832075478,
      "candidate": "def check_subset(a, b):\n    if len(a) > len(b):\n        return False\n\n    if not a and not b:\n        return True\n\n    for i in range(len(a)):\n        if isinstance(a[i], list):\n            if not isinstance(b[i], list):\n                return False\n            if not check_subset(a[i], b[i]):\n                return False\n        else:\n            if a[i] != b[i]:\n                return False\n\n    return True\n\n\nif __name__ == '__main__':\n    a = [[[1, 2, 3], [4, 5]], [6, 7]]\n    b = [[[1, 2], [4, 5]], [6]]\n    print(check_subset(a, b))"
    },
    {
      "rank": 43,
      "score": 8.408439383654278,
      "candidate": "def is_subset(a, b):\n    for i in a:\n        for j in i:\n            if j not in b:\n                return False\n    return True\n\n\ndef main():\n    a = [[1, 2], [3, 4], [5, 6]]\n    b = [[1, 2], [3, 4]]\n    print(is_subset(a, b))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.386620303250325,
      "candidate": "def is_subset(list1, list2):\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\n\ndef main():\n    list1 = [[1, 2, 3], [4, 5]]\n    list2 = [[1, 2, 3], [4, 5], [6, 7]]\n    print(is_subset(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.351614956112536,
      "candidate": "from typing import List\n\n\ndef is_subset(list_a: List[int], list_b: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    if not list_a:\n        return True\n\n    if not list_b:\n        return False\n\n    if list_a[0] in list_b:\n        return is_subset(list_a[1:], list_b)\n\n    return is_subset(list_a, list_b[1:])\n\n\nif __name__ == \"__main__\":\n    list_a = [1, 2, [3, 4, 5], 7, [8, 9, [10, 11, 12]]]\n    list_b = [1, [2, 3, 4, 5], 7, 8, [9, 10, 11, 12]]\n\n    print(is_subset(list_a, list_b))"
    },
    {
      "rank": 46,
      "score": 8.334608500525688,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef contains_nested_list(list1: List, list2: List) -> bool:\n    if not list1 or not list2:\n        return False\n\n    for l1 in list1:\n        if isinstance(l1, list):\n            if contains_nested_list(l1, list2):\n                return True\n        else:\n            if l1 in list2:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_nested_list([1, 2], [1, 2]))\n    print(contains_nested_list([1, 2, [3]], [1, 2, [3]]))\n    print(contains_nested_list([1, 2, [3]], [1, [2, 3]]))\n    print(contains_nested_list([1, 2, [3]], [1, [2, [3]]]))\n    print(contains_nested_list([1, 2, [3]], [1, [2, [3]]]))\n    print(contains_nested_list([1, 2, [3]], [1, [2, [4]]]))\n    print(contains_nested_list([1, 2, [3]], [1, [2, [3, 4]]]))\n    print(contains_nested_list([1, 2, [3, 4]], [1, [2, [3, 4]]]))"
    },
    {
      "rank": 47,
      "score": 8.331556294201176,
      "candidate": "def is_subset(list_a, list_b):\n    for item in list_a:\n        if item not in list_b:\n            return False\n    return True\n\n\ndef test_is_subset():\n    assert is_subset([\"dog\", \"cat\", \"fish\"], [\"dog\", \"cat\", \"fish\", \"snake\"]) == True\n    assert is_subset([\"dog\", \"cat\", \"fish\"], [\"dog\", \"cat\", \"bird\", \"snake\"]) == False\n    assert is_subset([\"dog\", \"cat\", \"fish\"], [\"dog\", \"cat\"]) == False\n    assert is_subset([\"dog\", \"cat\", \"fish\"], [\"dog\", \"cat\", \"fish\"]) == True\n    assert is_subset([\"dog\", \"cat\", \"fish\"], [\"dog\", \"cat\", \"fish\", \"snake\"]) == True\n\n\nif __name__ == \"__main__\":\n    test_is_subset()"
    },
    {
      "rank": 48,
      "score": 8.327375965969855,
      "candidate": "def check_subset(l1, l2):\n    \"\"\"\n    :param l1: nested list\n    :param l2: nested list\n    :return: boolean\n    \"\"\"\n    l1_set = set(tuple(x) for x in l1)\n    l2_set = set(tuple(x) for x in l2)\n\n    return l1_set.issubset(l2_set)\n\n\ndef main():\n    print(check_subset([[1, 2], [3]], [[1, 2, 3], [3]]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.327367757082776,
      "candidate": "from typing import List\n\n\ndef is_subset(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    list1.sort()\n    list2.sort()\n\n    i, j = 0, 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] == list2[j]:\n            i += 1\n            j += 1\n        elif list1[i] < list2[j]:\n            i += 1\n        else:\n            return False\n\n    if i == len(list1) and j == len(list2):\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3], [1, 2, 3, 4]))\n    print(is_subset([1, 2, 3], [1, 2, 4]))\n    print(is_subset([1, 2, 3], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 50,
      "score": 8.298597569547805,
      "candidate": "def is_subset(sub_list, main_list):\n    sub_set = set(sub_list)\n    for l in main_list:\n        if isinstance(l, list):\n            if is_subset(sub_set, l):\n                return True\n        else:\n            if l in sub_set:\n                sub_set.remove(l)\n    return not sub_set\n\n\ndef main():\n    sub_list = [[1, 3, 4], 2, 5]\n    main_list = [[1, 2, 3, 4], [2, 3, 5], [3, 4, 5], [4, 5, 6]]\n    print(is_subset(sub_list, main_list))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.294940769211511,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n).\n# Space complexity: O(n).\ndef check_subset(big_list: List[List[int]], small_list: List[List[int]]) -> bool:\n    if len(small_list) == 0:\n        return True\n\n    for i in range(len(big_list)):\n        if is_subset(big_list[i], small_list[0]):\n            if check_subset(big_list[i:], small_list[1:]):\n                return True\n\n    return False\n\n\ndef is_subset(big_list: List[int], small_list: List[int]) -> bool:\n    big_list_index = 0\n    small_list_index = 0\n\n    while big_list_index < len(big_list) and small_list_index < len(small_list):\n        if big_list[big_list_index] == small_list[small_list_index]:\n            big_list_index += 1\n            small_list_index += 1\n\n        elif big_list[big_list_index] < small_list[small_list_index]:\n            big_list_index += 1\n\n        else:\n            return False\n\n    return big_list_index == len(big_list) and small_list_index == len(small_list)\n\n\nprint(check_subset([1, 2, 3, 4], [[1, 2, 3, 4], [1, 2, 3], [1, 2]]))\nprint(check_subset([1, 2, 3, 4], [[1, 2], [1, 3], [3, 4]]))\nprint(check_subset([1, 2, 3, 4], [[1, 2], [1, 3], [2, 3]]))"
    },
    {
      "rank": 52,
      "score": 8.251903304236286,
      "candidate": "def is_subset(smaller, bigger):\n    for i in range(len(smaller)):\n        for j in range(len(smaller[i])):\n            if smaller[i][j] not in bigger[i]:\n                return False\n\n    return True\n\n\nprint(is_subset([[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5], [6, 7]]))"
    },
    {
      "rank": 53,
      "score": 8.214125058964552,
      "candidate": "def is_subset(list1, list2):\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\n\n\ndef main():\n    list1 = [[1, 2, 3], 4, [5, 6]]\n    list2 = [[1, 2, 3], 4, [5, 6, 7]]\n    result = is_subset(list1, list2)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.212735598038213,
      "candidate": "def is_subset(superset, subset):\n    \"\"\"\n    :type superset: List[NestedInteger]\n    :type subset: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    if not superset:\n        return not subset\n    if not subset:\n        return True\n    for i in range(len(superset)):\n        if isinstance(superset[i], list):\n            if is_subset(superset[i], subset):\n                return True\n        else:\n            if isinstance(superset[i], int):\n                if isinstance(subset[0], int):\n                    if superset[i] == subset[0]:\n                        return is_subset(superset[i+1:], subset[1:])\n    return False"
    },
    {
      "rank": 55,
      "score": 8.211579567659316,
      "candidate": "def is_subset(list1, list2):\n    for item in list1:\n        if not check_item(item, list2):\n            return False\n    return True\n\n\ndef check_item(item, list2):\n    for sub_item in list2:\n        if item == sub_item:\n            return True\n    return False\n\n\nprint(is_subset([1, 2, [3]], [[1, 2, [3]], [1, 2, [3, 4]]]))\nprint(is_subset([1, 2, [3]], [[1, 2, [3, 4]]]))\nprint(is_subset([1, 2, [3, 4]], [[1, 2, [3]]]))"
    },
    {
      "rank": 56,
      "score": 8.209707251476969,
      "candidate": "def is_subset(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n\nprint(is_subset([1, 2, 3], [1, 2, 3, 4, 5]))\nprint(is_subset([1, 2], [1, 2, 3, 4, 5]))\nprint(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(is_subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]))\nprint(is_subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nprint(is_subset([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6]))\nprint(is_subset([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 57,
      "score": 8.172253082181854,
      "candidate": "def is_subset(small, big):\n    small_set = set(small)\n    for item in big:\n        if isinstance(item, list):\n            if not is_subset(small_set, item):\n                return False\n        elif item not in small_set:\n            return False\n    return True\n\n\ndef main():\n    print(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, [5, 6, 7], 8]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, [5, 6, 7]]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 8.163300679823958,
      "candidate": "def is_subset(list1, list2):\n    for item in list1:\n        if not isinstance(item, list):\n            if item not in list2:\n                return False\n        else:\n            if not is_subset(item, list2):\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5]))\n    print(is_subset([1, 2, 3, 4], [1, 2, 3, 5, 6]))\n    print(is_subset([1, 2, 3, 4], [1, 2, 3, 4, [5, 6]]))\n    print(is_subset([1, 2, 3, 4], [1, 2, 3, 4, [5, 6, [7, 8]]]))\n    print(is_subset([1, 2, 3, 4], [1, 2, 3, 4, [5, 6, [7, 8, 9]]]))"
    },
    {
      "rank": 59,
      "score": 8.144125099485041,
      "candidate": "def check_subset(list_a, list_b):\n    list_a_len = len(list_a)\n    list_b_len = len(list_b)\n\n    if list_a_len == list_b_len:\n        for i in range(list_a_len):\n            if list_a[i] != list_b[i]:\n                return False\n        return True\n\n    for i in range(list_a_len):\n        for j in range(list_b_len):\n            if list_a[i] == list_b[j]:\n                break\n        else:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(check_subset([1, 2, 3], [1, 2, 3]))\n    print(check_subset([1, 2, 3], [1, 2, 3, 4]))\n    print(check_subset([1, 2, 3], [1, 2, 4]))\n    print(check_subset([1, 2, 3], [1, 2, 3, [1, 2]]))\n    print(check_subset([1, 2, 3], [1, 2, 3, [1, 2, 3]]))\n    print(check_subset([1, 2, 3], [1, 2, 3, [1, 2, 3, 4]]))\n    print(check_subset([1, 2, 3], [1, 2, 3, [1, 2, 3, [1, 2]]]))\n    print(check_subset([1, 2, 3], [1, 2, 3, [1, 2, 3, [1, 2, 3]]]))\n    print(check_subset([1, 2, 3], [1, 2, 3, [1, 2, 3, [1, 2, 3, 4]]]))"
    },
    {
      "rank": 60,
      "score": 8.121884567141883,
      "candidate": "def is_subset(list1, list2):\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\n\ndef main():\n    list1 = [1, 2, 3, 4, [5, 6, 7, 8], 9]\n    list2 = [1, 2, 3, 4, [5, 6, 7, 8], 9, 10, 11, 12, 13, 14, 15]\n    print(is_subset(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.08452234024709,
      "candidate": "def check_subset(list1, list2):\n    if not list1 or not list2:\n        return False\n    if not list1:\n        return True\n    if not list2:\n        return False\n    if list1[0] in list2:\n        return check_subset(list1[1:], list2)\n    return check_subset(list1[1:], list2[1:])\n\n\nif __name__ == \"__main__\":\n    print(check_subset([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 62,
      "score": 7.990432406683839,
      "candidate": "def is_subset(list_a, list_b):\n    return is_subset_rec(list_a, list_b, 0, 0)\n\n\ndef is_subset_rec(list_a, list_b, i, j):\n    if i == len(list_a) and j == len(list_b):\n        return True\n    if i == len(list_a) or j == len(list_b):\n        return False\n    if isinstance(list_a[i], list):\n        return is_subset_rec(list_a[i], list_b, 0, j)\n    if isinstance(list_b[j], list):\n        return is_subset_rec(list_a, list_b[j], i, 0)\n    return list_a[i] == list_b[j] and is_subset_rec(list_a, list_b, i + 1, j + 1)\n\n\nprint(is_subset([1, [2, 3]], [[1, 2, 3], 4, 5]))"
    },
    {
      "rank": 63,
      "score": 7.8912769574414305,
      "candidate": "def nested_subset(list_a, list_b):\n    if list_a == list_b:\n        return True\n\n    if len(list_a) > len(list_b):\n        return False\n\n    for item_a in list_a:\n        if type(item_a) is list:\n            if not nested_subset(item_a, list_b):\n                return False\n        else:\n            try:\n                list_b.index(item_a)\n            except ValueError:\n                return False\n    return True\n\n\nprint(nested_subset([1, 2, 3], [1, [2, 3]]))\nprint(nested_subset([1, [2, 3]], [1, [2, 3]]))\nprint(nested_subset([1, [2, 3]], [1, [2, 3, 4]]))\nprint(nested_subset([1, [2, 3]], [1, [2, 3, [4]]]))\nprint(nested_subset([1, [2, 3]], [1, [2, 3, [4]], 5]))\nprint(nested_subset([1, [2, 3]], [1, [2, 3, [4, 5]]]))\nprint(nested_subset([1, [2, 3]], [1, [2, 3, [4, 5]], 6]))\nprint(nested_subset([1, [2, 3]], [[1, [2, 3]], 4]))\nprint(nested_subset([1, [2, 3]], [[1, [2, 3]], [4, [5, 6]]]))\nprint(nested_subset([1, [2, 3]], [[1, [2, 3]], [4, [5, 6]], 7]))"
    },
    {
      "rank": 64,
      "score": 7.868947655733293,
      "candidate": "def is_subset(l1, l2):\n    for i in l1:\n        if i not in l2:\n            return False\n    return True\n\n\nprint(is_subset([1, 2, [3, 4]], [1, 2, [3, 4, 5]]))"
    },
    {
      "rank": 65,
      "score": 7.84634113240411,
      "candidate": "def is_subset(a, b):\n    \"\"\"\n    :type a: List[List[int]]\n    :type b: List[List[int]]\n    :rtype: bool\n    \"\"\"\n    return sorted(a) in sorted(b)\n\n\n# Test cases:\nprint(is_subset([[1], [2]], [[1], [2]]))\nprint(is_subset([[1], [2]], [[1], [2, 3]]))\nprint(is_subset([[1, 2], [3, 4]], [[1], [2], [3], [4]]))\nprint(is_subset([[1, 2], [3, 4]], [[1], [2, 3], [3, 4]]))\nprint(is_subset([[1, 2], [3, 4]], [[1, 2], [3, 4]]))\nprint(is_subset([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]]))"
    },
    {
      "rank": 66,
      "score": 7.738292593776799,
      "candidate": "from typing import List\n\n\ndef is_subset(l1: List[int], l2: List[int]) -> bool:\n    if not l1:\n        return True\n    elif not l2:\n        return False\n\n    if l1[0] in l2[0]:\n        return is_subset(l1[1:], l2[1:])\n\n    return is_subset(l1, l2[1:])\n\n\nif __name__ == \"__main__\":\n    assert is_subset([1, 2], [1, 2, 3, 4, 5]) is True\n    assert is_subset([1, 2, 3], [1, 2, 3, 4, 5]) is True\n    assert is_subset([1, 4], [1, 2, 3, 4, 5]) is True\n    assert is_subset([1, 2, 4], [1, 2, 3, 4, 5]) is False\n    assert is_subset([1, 2, 3, 4, 5], [1, 2]) is False"
    },
    {
      "rank": 67,
      "score": 7.7320703513377165,
      "candidate": "# O(n^2)\ndef is_subset(a, b):\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                return True\n    return False\n\n\n# O(n)\ndef is_subset_2(a, b):\n    for i in range(len(a)):\n        if a[i] not in b:\n            return False\n    return True\n\n\ndef main():\n    a = [[1, 2], [3, 4]]\n    b = [[1, 2], [3, 4], [5, 6]]\n    print(is_subset(a, b))\n    print(is_subset_2(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 7.705183449260731,
      "candidate": "def subset_exists(list1, list2):\n    def is_subset(list1, list2):\n        for element in list1:\n            if isinstance(element, list):\n                if not is_subset(element, list2):\n                    return False\n            else:\n                if element not in list2:\n                    return False\n        return True\n\n    if is_subset(list1, list2):\n        return True\n\n    for element in list1:\n        if isinstance(element, list):\n            if subset_exists(element, list2):\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert subset_exists([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6], [7, 8]])\n    assert subset_exists([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) is False\n    assert subset_exists([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10, 11]]) is False\n    assert subset_exists([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10, 11], [12, 13]]) is False"
    },
    {
      "rank": 69,
      "score": 7.5819855281879285,
      "candidate": "class Solution:\n    def __init__(self):\n        self.result = True\n\n    def __check(self, l1, l2):\n        for i in l1:\n            if i not in l2:\n                return False\n\n        return True\n\n    def check(self, list1, list2):\n        for i in list1:\n            if isinstance(i, list):\n                if not self.__check(i, list2):\n                    self.result = False\n                    break\n            elif i not in list2:\n                self.result = False\n                break\n\n        return self.result\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.check([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]]))"
    },
    {
      "rank": 70,
      "score": 7.562924366763077,
      "candidate": "def is_subset(sub, sup):\n    \"\"\"\n    :param sub: a nested list\n    :param sup: a nested list\n    :return: True if sub is a subset of sup, False otherwise\n    \"\"\"\n    # Base cases\n    if not sub:\n        return True\n    if not sup:\n        return False\n    # Recursive cases\n    if sub[0] in sup[0]:\n        return is_subset(sub[1:], sup[1:])\n    else:\n        return is_subset(sub, sup[1:])\n\n\ndef main():\n    assert is_subset([[1, 2], [3]], [[1, 2], [3], [4]])\n    assert is_subset([[1, 2], [3]], [[1, 2], [3, 4]])\n    assert not is_subset([[1, 2], [3]], [[1, 2], [4]])\n    assert not is_subset([[1, 2], [3]], [[1, 2], [3]])\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 7.464609382504557,
      "candidate": "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef is_subset(list_a: List[List[int]], list_b: List[List[int]]) -> bool:\n    \"\"\"\n    :param list_a: nested list\n    :param list_b: nested list\n    :return: True if list_a is a subset of list_b\n    \"\"\"\n    if len(list_a) > len(list_b):\n        return False\n\n    list_a_set = set(list_a)\n\n    for item in list_b:\n        if item in list_a_set:\n            list_a_set.remove(item)\n\n    return not list_a_set\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef is_subset_2(list_a: List[List[int]], list_b: List[List[int]]) -> bool:\n    \"\"\"\n    :param list_a: nested list\n    :param list_b: nested list\n    :return: True if list_a is a subset of list_b\n    \"\"\"\n    if len(list_a) > len(list_b):\n        return False\n\n    list_a_set = set(list_a)\n\n    for item in list_b:\n        if item in list_a_set:\n            list_a_set.remove(item)\n            if not list_a_set:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_subset([[1, 2]], [[1, 2, 3], [1, 2, 3]]))\n    print(is_subset([[1, 2, 3]], [[1, 2, 3], [1, 2, 3]]))\n    print(is_subset([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]]))\n    print(is_subset([[1, 2], [3, 4]], [[1, 2], [3, 4]]"
    },
    {
      "rank": 72,
      "score": 7.134571892399572,
      "candidate": "def is_subset(a, b):\n    a_set = set(a)\n    b_set = set(b)\n\n    return a_set.issubset(b_set)\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 73,
      "score": 3.5186378916625025,
      "candidate": "class Solution(object):\n    def isSubsetEqual(self, list1, list2):\n        \"\"\"\n        :type list1: List[List[int]]\n        :type list2: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if list1 == []:\n            return True\n        if list2 == []:\n            return False\n        if list1[0] in list2:\n            return self.isSubsetEqual(list1[1:], list2)\n        else:\n            return self.isSubsetEqual(list1, list2[1:])\n\n\nclass Solution2(object):\n    def isSubsetEqual(self, list1, list2):\n        \"\"\"\n        :type list1: List[List[int]]\n        :type list2: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if list1 == []:\n            return True\n        if list2 == []:\n            return False\n        if list1[0] == list2[0]:\n            return self.isSubsetEqual(list1[1:], list2[1:])\n        else:\n            return self.isSubsetEqual(list1, list2[1:])"
    },
    {
      "rank": 74,
      "score": 3.280989211409767,
      "candidate": "from typing import List\n\n\ndef is_subset(subset: List[int], superset: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not superset:\n        return not subset\n\n    if not subset:\n        return True\n\n    head_superset = superset[0]\n\n    if isinstance(head_superset, list):\n        return any(\n            is_subset(subset, superset)\n            for superset in superset\n            if is_subset(subset, superset)\n        )\n\n    return is_subset(subset[1:], superset[1:]) if head_superset == subset[0] else False\n\n\nif __name__ == \"__main__\":\n    assert is_subset([], [])\n    assert is_subset([1, 2], [1, 2])\n    assert is_subset([1, 2, 3], [1, 2, 3])\n    assert not is_subset([1, 2, 3], [1, 2])\n    assert is_subset([1, 2, 3], [1, [2, 3]])\n    assert is_subset([1, [2, 3]], [1, [2, 3]])\n    assert is_subset([1, [2, 3]], [1, [2, 3, 4]])"
    },
    {
      "rank": 75,
      "score": 3.2731526355942604,
      "candidate": "def contains_nested_list(small, large):\n    \"\"\"\n    Time complexity: O(n^2).\n    Space complexity: O(1).\n    \"\"\"\n\n    # Check small list is in large list.\n    small_str = str(small)\n    large_str = str(large)\n\n    return small_str in large_str\n\n\ndef main():\n    small = [[1, 1], [2, 2]]\n    large = [[1, 1], [2, 2], [3, 3]]\n\n    print(contains_nested_list(small, large))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 3.2607584333525357,
      "candidate": "from typing import List\n\n\ndef is_subset(list_1: List, list_2: List) -> bool:\n    \"\"\"\n    O(n^2)\n    \"\"\"\n    if not list_1 or not list_2:\n        return False\n\n    for i in range(len(list_1)):\n        for j in range(len(list_2)):\n            if list_1[i] == list_2[j]:\n                return True\n\n    return False\n\n\ndef is_subset_recursive(list_1: List, list_2: List) -> bool:\n    \"\"\"\n    O(n^2)\n    \"\"\"\n    if not list_1 or not list_2:\n        return False\n\n    for i in range(len(list_1)):\n        for j in range(len(list_2)):\n            if is_equal(list_1[i], list_2[j]):\n                return True\n\n    return False\n\n\ndef is_equal(list_1: List, list_2: List) -> bool:\n    \"\"\"\n    O(n)\n    \"\"\"\n    if len(list_1) != len(list_2):\n        return False\n\n    for i in range(len(list_1)):\n        if list_1[i] != list_2[i]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    list_1 = [[1, 2], [3], [4, 5, 6]]\n    list_2 = [[1, 2], [4, 5, 6]]\n    assert is_subset(list_1, list_2) == True\n\n    list_1 = [[1, 2], [3], [4, 5, 6]]\n    list_2 = [[1, 2], [3, 4, 5, 6]]\n    assert is_subset(list_1, list_2) == False\n\n    list_1 = [[1, 2], [3], [4, 5, 6]]\n    list_2 = [[1, 2], [3]]\n    assert is_subset(list_1, list_2"
    },
    {
      "rank": 77,
      "score": 3.2148817241628143,
      "candidate": "from typing import List\n\n\ndef is_subset(list1: List, list2: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n    if not list2:\n        return True\n\n    if not list1:\n        return False\n\n    if list1[0] in list2:\n        return is_subset(list1[1:], list2)\n\n    return is_subset(list1[1:], list2)\n\n\nif __name__ == \"__main__\":\n    assert is_subset([1, 2], [1, 2, 3, 4, 5]) == True\n    assert is_subset([1, 3], [1, 2, 3, 4, 5]) == True\n    assert is_subset([1, 5], [1, 2, 3, 4, 5]) == False\n    assert is_subset([1, 2, 3, 4, 5], [1, 2]) == False\n    assert is_subset([1, 2, 3, 4, 5], [1, 3]) == False\n    assert is_subset([1, 2, 3, 4, 5], [1, 5]) == False\n    assert is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n    assert is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == False"
    },
    {
      "rank": 78,
      "score": 3.206770642398715,
      "candidate": "from typing import List, Optional\n\n\ndef is_subset(lst1: List, lst2: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    for element in lst1:\n        if isinstance(element, list):\n            if not is_subset(element, lst2):\n                return False\n        elif element not in lst2:\n            return False\n\n    return True\n\n\ndef is_subset_optimized(lst1: List, lst2: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n\n    def is_subset_helper(lst1: List, lst2: List) -> Optional[bool]:\n        if not lst1 and not lst2:\n            return True\n\n        if lst2 and not lst1:\n            return False\n\n        if lst1 and not lst2:\n            return False\n\n        if isinstance(lst1[0], list) and isinstance(lst2[0], list):\n            return is_subset_helper(lst1[0], lst2[0])\n\n        if isinstance(lst1[0], list) and not isinstance(lst2[0], list):\n            return False\n\n        if not isinstance(lst1[0], list) and isinstance(lst2[0], list):\n            return False\n\n        if lst1[0] == lst2[0]:\n            return is_subset_helper(lst1[1:], lst2[1:])\n\n        return False\n\n    return is_subset_helper(lst1, lst2)\n\n\nif __name__ == \"__main__\":\n    assert is_subset([[1, 2]], [[1, 2, 3], [1, 2, 3]])\n    assert is_subset([[1, 2, 3]], [[1, 2, 3, 4], [1, 2, 3, 4]])\n    assert is_subset([1, 2, 3], [1, 2, 3, 4, 5])\n    assert"
    },
    {
      "rank": 79,
      "score": 3.1390799628431454,
      "candidate": "def is_subset(l1, l2):\n    \"\"\"\n    :param l1: nested list\n    :param l2: nested list\n    :return: True if l2 is a subset of l1\n    \"\"\"\n    if l1 == []:\n        return True\n    if l2 == []:\n        return False\n    if l1[0] in l2[0]:\n        return is_subset(l1[1:], l2[1:])\n    return is_subset(l1[1:], l2)\n\n\nif __name__ == '__main__':\n    print(is_subset([1, 2, 3, 4, 5], [2, 3, 5]))\n    print(is_subset([1, 2, 3, 4, 5], [2, 3, 5, 6]))\n    print(is_subset([1, 2, 3, 4, 5], [2, 3, 5, 1, 2, 3]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_subset([1, 2, 3, 4, 5], [2, 3, 5, 1, 2, 3, 4, 5]))\n    print(is_subset([1, 2, 3, 4, 5], [2, 3, 5, 1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 80,
      "score": 3.105195445136788,
      "candidate": "def is_nested_list_subset(nested_list_1, nested_list_2):\n    \"\"\"\n    :param nested_list_1: list of nested lists\n    :param nested_list_2: list of nested lists\n    :return: bool\n    \"\"\"\n    for nested_list_1_item in nested_list_1:\n        for nested_list_2_item in nested_list_2:\n            if nested_list_1_item == nested_list_2_item:\n                return True\n    return False\n\n\nprint(is_nested_list_subset([[[1, 2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[1, 2, 3], [4, 5]], [[6, 7], [8, 9]]]))\nprint(is_nested_list_subset([[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5]]))\nprint(is_nested_list_subset([[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5, 6]]))"
    },
    {
      "rank": 81,
      "score": 3.1012580870133375,
      "candidate": "def is_subset(nested_list1, nested_list2):\n    \"\"\"\n    :param nested_list1: nested list to check\n    :param nested_list2: nested list to check if it is a subset of nested_list1\n    :return: bool\n    \"\"\"\n    return all(item in nested_list1 for item in nested_list2)\n\n\nif __name__ == \"__main__\":\n    assert is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5]) is False\n    assert is_subset([1, 2, 3, 4], [1, 2, 3, 4]) is True\n    assert is_subset([1, 2, 3, 4], [1, 2, 3]) is False\n    assert is_subset([1, 2, 3, 4], [1, 2]) is False\n    assert is_subset([1, 2, 3, 4], [1]) is False\n    assert is_subset([1, 2, 3, 4], []) is False\n    assert is_subset([1, 2, 3, 4], [[1, 2], 3, 4]) is False\n    assert is_subset([1, 2, 3, 4], [1, 2, 3, 4]) is True\n    assert is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5]) is False\n    assert is_subset([1, 2, 3, 4], [1, 2, 3, [4, 5]]) is False\n    assert is_subset([1, 2, 3, 4], [1, 2, 3, [4, 5], 6]) is False"
    },
    {
      "rank": 82,
      "score": 3.096213121079169,
      "candidate": "# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\nclass NestedInteger:\n    def __init__(self, value=None):\n        \"\"\"\n        If value is not specified, initializes an empty list.\n        Otherwise, initializes a single integer equal to value.\n        \"\"\"\n\n    def isInteger(self):\n        \"\"\"\n        @return True if this NestedInteger holds a single integer, rather than a nested list.\n        :rtype bool\n        \"\"\"\n\n    def add(self, elem):\n        \"\"\"\n        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n        :rtype void\n        \"\"\"\n\n    def setInteger(self, value):\n        \"\"\"\n        Set this NestedInteger to hold a single integer equal to value.\n        :rtype void\n        \"\"\"\n\n    def getInteger(self):\n        \"\"\"\n        @return the single integer that this NestedInteger holds, if it holds a single integer\n        Return None if this NestedInteger holds a nested list\n        :rtype int\n        \"\"\"\n\n    def getList(self):\n        \"\"\"\n        @return the nested list that this NestedInteger holds, if it holds a nested list\n        Return None if this NestedInteger holds a single integer\n        :rtype List[NestedInteger]\n        \"\"\"\n\n\ndef contains_nested_list(superset, subset):\n    if not superset:\n        return False\n    elif superset.isInteger():\n        return superset.getInteger() == subset.getInteger()\n    else:\n        return contains_nested_list(\n            superset.getList()[0], subset) or contains_nested_list(superset.getList()[1:], subset)\n\n\ndef main():\n    superset = NestedInteger([NestedInteger(1), NestedInteger(4), NestedInteger(9)])\n    subset = NestedInteger(9)\n    print(contains_nested_list(superset, subset))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 3.0907435114305426,
      "candidate": "from typing import List\n\n\ndef is_subset(list1: List[List[int]], list2: List[List[int]]) -> bool:\n    \"\"\"Checks if list2 is a subset of list1\n\n    Args:\n        list1 (List[List[int]]): The list to check\n        list2 (List[List[int]]): The list to check against\n\n    Returns:\n        bool: True if list2 is a subset of list1\n    \"\"\"\n    if not list1 or not list2:\n        return False\n\n    if len(list1) > len(list2):\n        return is_subset(list2, list1)\n\n    for item in list1:\n        if item in list2:\n            continue\n        else:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_subset([[1]], [[1]]) == True\n    assert is_subset([[1]], [[1, 2]]) == True\n    assert is_subset([[1]], [[1, 2, 3]]) == True\n    assert is_subset([[1]], [[1, 2, 3], [4, 5]]) == True\n    assert is_subset([[1], [2]], [[1, 2], [3, 4]]) == True\n    assert is_subset([[1], [2]], [[1, 2, 3], [4, 5]]) == True\n    assert is_subset([[1], [2]], [[1, 2, 3], [4, 5], [6, 7]]) == True\n    assert is_subset([[1], [2]], [[1, 2, 3], [4, 5], [6, 7], [8, 9]]) == True\n    assert is_subset([[1], [2]], [[1, 2, 3], [4, 5], [6, 7], [8, 9], [10, 11]]) == True\n    assert is_subset([[1], [2]], [[1, 2, 3], [4, 5], [6, 7], [8, 9], [10, 11], ["
    },
    {
      "rank": 84,
      "score": 3.0584818066013315,
      "candidate": "from typing import List\n\n\ndef _is_subset(small: List[int], big: List[int]) -> bool:\n    for item in small:\n        if item not in big:\n            return False\n    return True\n\n\ndef is_subset(small: List[int], big: List[int]) -> bool:\n    \"\"\"Check if a nested list is a subset of another nested list.\n\n    Args:\n        small (List[int]): The smaller nested list\n        big (List[int]): The bigger nested list\n\n    Returns:\n        bool: True if small is a subset of big, False otherwise\n    \"\"\"\n    for item in small:\n        if isinstance(item, list):\n            if not is_subset(item, big):\n                return False\n        else:\n            if item not in big:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_subset([[1, 2, 3]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(is_subset([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(is_subset([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]))\n    print(is_subset([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13]]))\n    print(is_subset([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4,"
    },
    {
      "rank": 85,
      "score": 3.0551211460433545,
      "candidate": "def is_subset(list1, list2):\n    \"\"\"\n    :param list1: nested list\n    :param list2: nested list\n    :return: boolean\n    \"\"\"\n    if len(list1) > len(list2):\n        return False\n\n    for item in list1:\n        if isinstance(item, list):\n            if not is_subset(item, list2):\n                return False\n        else:\n            if item not in list2:\n                return False\n\n    return True\n\n\ndef is_subset_2(list1, list2):\n    \"\"\"\n    :param list1: nested list\n    :param list2: nested list\n    :return: boolean\n    \"\"\"\n    if len(list1) > len(list2):\n        return False\n\n    for item in list1:\n        if isinstance(item, list):\n            if not is_subset_2(item, list2):\n                return False\n        else:\n            if item not in list2:\n                return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    list1 = [1, [2, 3], 4, [5, 6, 7], 8, [9, 10, 11, 12]]\n    list2 = [[1, 2, 3], [4, 5, 6], 7, 8, [9, 10, 11, 12]]\n    list3 = [[1, 2, 3], [4, 5, 6], 7, 8, [9, 10, 11]]\n    list4 = [1, [2, 3], 4, [5, 6, 7], 8, [9, 10, 11, 12, 13]]\n    list5 = [1, [2, 3], 4, [5, 6, 7], 8, [9, 10, 11]]\n\n    print(is_subset(list1, list2))\n    print(is_subset(list1, list3))\n    print(is_subset(list1,"
    },
    {
      "rank": 86,
      "score": 3.0256930174299406,
      "candidate": "def is_subset(list1, list2):\n    \"\"\"\n    :type list1: List[NestedInteger]\n    :type list2: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    return is_subset_helper(list1, list2, set())\n\n\ndef is_subset_helper(list1, list2, set1):\n    \"\"\"\n    :type list1: List[NestedInteger]\n    :type list2: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    for item in list1:\n        if isinstance(item, list):\n            if not is_subset_helper(item, list2, set1):\n                return False\n        else:\n            if item.getInteger() not in set1:\n                set1.add(item.getInteger())\n                if item.getInteger() not in list2:\n                    return False\n    return True\n\n\ndef is_subset_helper2(list1, list2):\n    \"\"\"\n    :type list1: List[NestedInteger]\n    :type list2: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    set2 = set(map(lambda x: x.getInteger(), list2))\n    for item in list1:\n        if isinstance(item, list):\n            if not is_subset_helper2(item, list2):\n                return False\n        else:\n            if item.getInteger() not in set2:\n                return False\n    return True\n\n\ndef is_subset_helper3(list1, list2):\n    \"\"\"\n    :type list1: List[NestedInteger]\n    :type list2: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    set2 = set(map(lambda x: x.getInteger(), list2))\n    for item in list1:\n        if isinstance(item, list):\n            if not is_subset_helper3(item, list2):\n                return False\n        else:\n            if item.getInteger() not in set2:\n                return False\n    return True\n\n\ndef is_subset_helper4(list1, list2"
    },
    {
      "rank": 87,
      "score": 2.9899687090492137,
      "candidate": "from typing import List\n\n\ndef is_subset(list_a: List[int], list_b: List[int]) -> bool:\n    \"\"\"\n    This is a O(m*n) solution, where m and n are the lengths of list_a and list_b.\n    \"\"\"\n\n    if len(list_a) > len(list_b):\n        return False\n\n    for element in list_a:\n        if isinstance(element, list):\n            if not is_subset(element, list_b):\n                return False\n        else:\n            if element not in list_b:\n                return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_subset([[1], [2, 3]], [[1], [2, 3], [4, 5]]) == True\n    assert is_subset([[1, 2], [3, 4]], [[1, 2, 3], [4, 5]]) == False\n    assert is_subset([[1, 2], [3, 4]], [[1, 2, 3, 4], [5, 6]]) == True"
    },
    {
      "rank": 88,
      "score": 2.9612859956720685,
      "candidate": "def is_subset(list1, list2):\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\n\ndef test_is_subset():\n    assert is_subset([1, 2], [1, 2, 3])\n    assert not is_subset([1, 2, 3], [1, 2])\n    assert not is_subset([[1, 2], 3], [1, [2, 3]])\n    assert is_subset([[1, 2], 3], [1, [2, 3], [4, 5]])\n    assert is_subset([1, [2, 4]], [1, [2, 3], [4, 5]])\n    assert not is_subset([1, [2, 4]], [1, [3, 3], [4, 5]])"
    },
    {
      "rank": 89,
      "score": 2.915690965234999,
      "candidate": "from typing import List\n\n\ndef is_subset(l1: List[List[int]], l2: List[List[int]]) -> bool:\n    \"\"\"\n    Use recursion.\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    if not l1 or not l2:\n        return False\n\n    return is_subset_recursive(l1, l2, 0, 0)\n\n\ndef is_subset_recursive(l1: List[List[int]], l2: List[List[int]], i1: int, i2: int) -> bool:\n    if i1 == len(l1):\n        return i2 == len(l2)\n\n    if i2 == len(l2):\n        return False\n\n    if l1[i1] == l2[i2]:\n        return is_subset_recursive(l1, l2, i1 + 1, i2 + 1)\n\n    return is_subset_recursive(l1, l2, i1 + 1, i2) or is_subset_recursive(l1, l2, i1, i2 + 1)\n\n\nif __name__ == \"__main__\":\n    assert is_subset([[1, 2, 3]], [[1, 2, 3]]) == True\n    assert is_subset([[1, 2, 3]], [[1, 2, 4]]) == False\n    assert is_subset([[1, 2, 3]], [[1, 2], [3]]) == False\n    assert is_subset([[1, 2], [3]], [[1, 2, 3]]) == False\n    assert is_subset([[1, 2], [3]], [[1, 2], [3]]) == True\n    assert is_subset([[1, 2], [3]], [[1, 2], [3, 4]]) == False\n    assert is_subset([[1, 2], [3, 4]], [[1, 2], [3]]) == False\n    assert is_subset([[1, 2], [3, 4]], [[1, 2"
    },
    {
      "rank": 90,
      "score": 2.9134205347616597,
      "candidate": "def is_subset(s, t):\n    \"\"\"\n    :type s: List[NestedInteger]\n    :type t: List[NestedInteger]\n    :rtype: bool\n    \"\"\"\n    if not s:\n        return True\n    if not t:\n        return False\n    if s[0].isInteger():\n        return is_subset_helper(s[1:], t[1:], s[0].getInteger())\n    return is_subset_helper(s[1:], t[1:], s[0].getList())\n\n\ndef is_subset_helper(s, t, s_val):\n    if not s:\n        return True\n    if not t:\n        return False\n    if s[0].isInteger():\n        return is_subset_helper(s[1:], t[1:], s_val + s[0].getInteger())\n    if s[0].getList() == s_val:\n        return is_subset_helper(s[1:], t[1:], s_val + s[0].getList())\n    return is_subset_helper(s[1:], t[1:], s_val + s[0].getList()) or is_subset_helper(s[1:], t[1:], s_val + s[0].getList())\n\n\nprint(is_subset([[[[1, 1], [1, 1]]], [[1, 1], [1, 1]]], [[[[1, 1], [1, 1]]], [[1, 1], [1, 1]]]))"
    },
    {
      "rank": 91,
      "score": 2.865831213403319,
      "candidate": "def is_subset(sub, big):\n    if sub == big:\n        return True\n\n    if len(sub) > len(big):\n        return False\n\n    if len(sub) == len(big):\n        return is_equal(sub, big)\n\n    for i in range(len(big)):\n        if is_equal(sub, big[i]):\n            return True\n\n    return False\n\n\ndef is_equal(sub, big):\n    if len(sub) != len(big):\n        return False\n\n    for i in range(len(sub)):\n        if sub[i] != big[i]:\n            return False\n\n    return True\n\n\n# test cases\nassert is_subset([1, [2, 2]], [[1, [2, 2]]]) == True\nassert is_subset([1, [2, 2]], [[1, [3, 3]]]) == False\nassert is_subset([1, [2, 2]], [[1, [2, 2, 2]]]) == False\nassert is_subset([1, [2, 2]], [[1, [2, 2]], [3, [4, 4]]]) == True"
    },
    {
      "rank": 92,
      "score": 2.8315221485757687,
      "candidate": "def is_subset(list_a, list_b):\n    \"\"\"\n    :type list_a: List[List[int]]\n    :type list_b: List[List[int]]\n    :rtype: bool\n    \"\"\"\n    if len(list_a) == 0:\n        return True\n    if len(list_b) == 0:\n        return False\n    for sublist_a in list_a:\n        for sublist_b in list_b:\n            if len(sublist_a) > len(sublist_b):\n                continue\n            if len(sublist_a) == len(sublist_b) and sublist_a == sublist_b:\n                return True\n            if len(sublist_a) <= len(sublist_b) and sublist_a == sublist_b[:len(sublist_a)]:\n                return True\n    return False\n\n\ndef is_subset_solution(list_a, list_b):\n    \"\"\"\n    :type list_a: List[List[int]]\n    :type list_b: List[List[int]]\n    :rtype: bool\n    \"\"\"\n    if len(list_a) == 0:\n        return True\n    if len(list_b) == 0:\n        return False\n    for sublist_a in list_a:\n        if len(sublist_a) > len(list_b):\n            continue\n        if len(sublist_a) == len(list_b) and sublist_a == list_b:\n            return True\n        if len(sublist_a) <= len(list_b) and sublist_a == list_b[:len(sublist_a)]:\n            return True\n    return False"
    },
    {
      "rank": 93,
      "score": 2.8104618399143315,
      "candidate": "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\nclass Solution1:\n    def containsNestedList(self, l1: List[int], l2: List[int]) -> bool:\n        return self.contains(l1, l2)\n\n    def contains(self, l1: List[int], l2: List[int]) -> bool:\n        if not l1:\n            return False\n        elif not l2:\n            return True\n        elif isinstance(l1, int):\n            return l1 == l2[0] and self.contains(l1, l2[1:])\n        elif isinstance(l1, list):\n            return self.contains(l1[0], l2) or self.contains(l1[1:], l2)"
    },
    {
      "rank": 94,
      "score": 2.7650190934976613,
      "candidate": "def is_subset(main_list, sub_list):\n    return all(elem in main_list for elem in sub_list)\n\n\nif __name__ == '__main__':\n    assert is_subset([1, 2, 3, 4], [1, 2])\n    assert not is_subset([1, 2, 3, 4], [1, 2, 2])\n    assert is_subset([[1, 2], [3, 4]], [1, 2])\n    assert is_subset([[1, 2], [3, 4]], [[1, 2]])\n    assert not is_subset([[1, 2], [3, 4]], [1, 2, 3])"
    },
    {
      "rank": 95,
      "score": 2.716407286306361,
      "candidate": "from typing import List\n\n\ndef is_subset(list1: List, list2: List) -> bool:\n    \"\"\"\n    Time Complexity: O(m*n)\n    Space Complexity: O(m*n)\n    \"\"\"\n    if not list1 and not list2:\n        return True\n\n    if not list1 or not list2:\n        return False\n\n    if list1[0] in list2:\n        return is_subset(list1[1:], list2)\n\n    return is_subset(list1[1:], list2)\n\n\nif __name__ == \"__main__\":\n    assert is_subset([1, 2, 3], [1, 2, 3, 4, 5]) == True\n    assert is_subset([1, 2, 3], [1, 2, 4, 5]) == False\n    assert is_subset([1, 2, 3], [1, 2, 3]) == True\n    assert is_subset([1, 2, 3], [1, 2, 3, 1, 2, 3]) == True\n    assert is_subset([1, 2, 3], [1, 2, 3, 1, 2, 3, 1, 2, 3]) == True\n    assert is_subset([1, 2, 3], [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) == True\n    assert is_subset([1, 2, 3], [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) == True\n    assert is_subset([1, 2, 3], [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) == True\n    assert is_subset([1, 2, 3],"
    },
    {
      "rank": 96,
      "score": 2.703840939892348,
      "candidate": "from typing import List\n\n\ndef is_sublist(list_a: List[int], list_b: List[int]) -> bool:\n    \"\"\"\n    time: O(n)\n    space: O(n)\n    \"\"\"\n\n    def helper(list_a, list_b, i):\n        if i == len(list_a):\n            return True\n        if list_a[i] in list_b:\n            return helper(list_a, list_b, i + 1)\n        return False\n\n    def helper2(list_a, list_b, i):\n        if i == len(list_b):\n            return True\n        if i == len(list_a):\n            return False\n        if list_b[i] in list_a:\n            return helper2(list_a, list_b, i + 1)\n        return helper2(list_a, list_b, i + 1)\n\n    return helper(list_a, list_b, 0) and helper2(list_a, list_b, 0)\n\n\nif __name__ == \"__main__\":\n    assert is_sublist([1, 2, 3], [1, 2, 3])\n    assert is_sublist([1, 2], [1, 2, 3])\n    assert is_sublist([1, 2, 3], [1, 2, 3, 4, 5])\n    assert is_sublist([1, 2], [1, 2, 3, 4, 5])\n    assert not is_sublist([1, 2, 3], [1, 2])\n    assert not is_sublist([1, 2], [1, 2, 3])"
    },
    {
      "rank": 97,
      "score": 2.658163778008114,
      "candidate": "class Solution(object):\n    def isSubset(self, superset, subset):\n        \"\"\"\n        :type superset: List[List[int]]\n        :type subset: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if not superset:\n            return False\n        for i in range(len(superset)):\n            if self.isSubsetHelper(superset[i], subset):\n                return True\n        return False\n\n    def isSubsetHelper(self, superset, subset):\n        if not subset:\n            return True\n        for i in range(len(superset)):\n            if self.isSubsetHelper(superset[i], subset[0]):\n                return True\n        return False\n\n\nclass SolutionB(object):\n    def isSubset(self, superset, subset):\n        \"\"\"\n        :type superset: List[List[int]]\n        :type subset: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if not superset:\n            return False\n        for i in range(len(superset)):\n            if self.isSubsetHelper(superset[i], subset):\n                return True\n        return False\n\n    def isSubsetHelper(self, superset, subset):\n        if not subset:\n            return True\n        for i in range(len(superset)):\n            if self.isSubsetHelper(superset[i], subset[0]):\n                return True\n        return False\n\n\nif __name__ == '__main__':\n    superset = [[1, 2, 3], [3, 4, 5], [1, 1, 2]]\n    subset = [[1, 2, 2]]\n    solution = Solution()\n    print solution.isSubset(superset, subset)"
    },
    {
      "rank": 98,
      "score": 2.6281079063084394,
      "candidate": "from typing import List\n\n\ndef is_subset(superset: List[List[int]], subset: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a nested list is a subset of another nested list.\n    \"\"\"\n    if not subset:\n        return True\n\n    for sublist in superset:\n        if sublist == subset[0]:\n            if is_subset(sublist, subset[1:]):\n                return True\n\n    return False\n\n\ndef main():\n    superset = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    subset = [[1, 2, 3], [4, 5, 6]]\n    print(is_subset(superset, subset))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 99,
      "score": 2.4642815314958164,
      "candidate": "# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\nclass NestedInteger:\n    def __init__(self, value=None):\n        pass\n\n    def isInteger(self):\n        \"\"\"\n        @return True if this NestedInteger holds a single integer, rather than a nested list.\n        :rtype bool\n        \"\"\"\n\n    def getInteger(self):\n        \"\"\"\n        @return the single integer that this NestedInteger holds, if it holds a single integer\n        Return None if this NestedInteger holds a nested list\n        :rtype int\n        \"\"\"\n\n    def getList(self):\n        \"\"\"\n        @return the nested list that this NestedInteger holds, if it holds a nested list\n        Return None if this NestedInteger holds a single integer\n        :rtype List[NestedInteger]\n        \"\"\"\n\n\ndef find_nested_list_subset(list_a, list_b):\n    \"\"\"\n    Time: O(m*n)\n    Space: O(m*n)\n    \"\"\"\n    return _find_nested_list_subset(list_a, list_b, {})\n\n\ndef _find_nested_list_subset(list_a, list_b, cache):\n    if not list_a:\n        return True\n\n    if not list_b:\n        return False\n\n    if list_a in cache:\n        return cache[list_a]\n\n    if list_a.isInteger() and list_b.isInteger():\n        cache[list_a] = list_a.getInteger() == list_b.getInteger()\n    else:\n        if list_a.isInteger() or list_b.isInteger():\n            cache[list_a] = False\n        else:\n            cache[list_a] = _find_nested_list_subset(list_a.getList(), list_b.getList(), cache)\n\n    return cache[list_a]\n\n\nif __name__ == '__main__':\n    # Test 1\n    a1 = NestedInteger(1)\n    a2 = NestedInteger(1)\n    b1 = NestedInteger(["
    },
    {
      "rank": 100,
      "score": 2.44348070391175,
      "candidate": "from typing import List, Optional\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef contains_list(\n    nested_list: List[List[int]],\n    subset: List[int],\n) -> bool:\n    \"\"\"\n    Check if a nested list is a subset of another nested list.\n    \"\"\"\n    if not subset:\n        return True\n\n    if not nested_list:\n        return False\n\n    for nested in nested_list:\n        if isinstance(nested, list) and contains_list(nested, subset):\n            return True\n\n        if nested == subset[0]:\n            if len(subset) == 1:\n                return True\n            elif len(subset) > 1:\n                for i in range(len(nested_list)):\n                    if contains_list(nested_list[i:], subset[1:]):\n                        return True\n\n    return False\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef contains_list_v2(\n    nested_list: List[List[int]],\n    subset: List[int],\n) -> bool:\n    \"\"\"\n    Check if a nested list is a subset of another nested list.\n    \"\"\"\n    if not subset:\n        return True\n\n    if not nested_list:\n        return False\n\n    for nested in nested_list:\n        if isinstance(nested, list):\n            if contains_list_v2(nested, subset):\n                return True\n        elif nested == subset[0]:\n            if len(subset) == 1:\n                return True\n            elif len(subset) > 1:\n                for i in range(len(nested_list)):\n                    if contains_list_v2(nested_list[i:], subset[1:]):\n                        return True\n\n    return False\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef contains_list_v3(\n    nested_list: List[List[int]],\n    subset: List[int],\n) -> bool:\n    \"\"\"\n    Check if a nested list is a subset of another nested list.\n    \"\"\"\n    if not subset:"
    }
  ]
}