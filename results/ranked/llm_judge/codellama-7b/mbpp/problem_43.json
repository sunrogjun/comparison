{
  "timestamp": "2025-09-14T22:37:20.410682",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 43,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def counting_sort(arr):\n    \"\"\"\n    :param: arr - array to be sorted\n    Sort the given array by using counting sort method\n    Time complexity: O(n+k)\n    Space complexity: O(k)\n    where n is the number of elements in the given array and k is the range of elements in the given array\n    \"\"\"\n    # Step 1: Get the range of the array\n    min_elem = arr[0]\n    max_elem = arr[0]\n\n    for elem in arr[1:]:\n        if elem < min_elem:\n            min_elem = elem\n        elif elem > max_elem:\n            max_elem = elem\n\n    # Step 2: Create a count array to store count of individual elements and initialize all values as 0\n    count_arr_len = max_elem - min_elem + 1\n    count_arr = [0] * count_arr_len\n\n    # Step 3: Store count of each element\n    for elem in arr:\n        count_arr[elem - min_elem] += 1\n\n    # Step 4: Update count for each element by summing previous counts\n    for i in range(1, count_arr_len):\n        count_arr[i] += count_arr[i - 1]\n\n    # Step 5: Create a result array to store sorted elements\n    result = [None] * len(arr)\n\n    # Step 6: Place elements in the result array\n    for elem in reversed(arr):\n        result[count_arr[elem - min_elem] - 1] = elem\n        count_arr[elem - min_elem] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(\"Enter the array to be sorted\")\n    arr = list(map(int, input().split()))\n\n    print(counting_sort(arr))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def counting_sort(arr):\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(k)\n\n    where n is the number of elements in array\n    and k is the largest number in the array\n    \"\"\"\n    if not arr:\n        return arr\n\n    # find the max number\n    max_num = max(arr)\n\n    # create a counting array\n    counting_arr = [0] * (max_num + 1)\n\n    # count the number of occurences\n    for num in arr:\n        counting_arr[num] += 1\n\n    # modify the counting array such that counting_arr[i] now contains the\n    # number of elements less than or equal to i\n    for idx in range(1, len(counting_arr)):\n        counting_arr[idx] += counting_arr[idx - 1]\n\n    # create a result array\n    result = [None] * len(arr)\n\n    # place the elements in the resultant array\n    for num in reversed(arr):\n        result[counting_arr[num] - 1] = num\n        counting_arr[num] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n\n    print(\"Enter the elements of the array to be sorted\")\n    arr = [int(num) for num in input().split()]\n\n    print(\"Original array: {}\".format(arr))\n    print(\"Sorted array: {}\".format(counting_sort(arr)))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(k)\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    max_value = max(arr)\n    buckets = [0] * (max_value + 1)\n\n    for i in arr:\n        buckets[i] += 1\n\n    for i in range(1, len(buckets)):\n        buckets[i] += buckets[i - 1]\n\n    result = [0] * len(arr)\n\n    for i in range(len(arr) - 1, -1, -1):\n        result[buckets[arr[i]] - 1] = arr[i]\n        buckets[arr[i]] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 2, 1, 2, 1, 5]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def counting_sort(arr, maximum):\n\n    # create a count array to store counts of individual elements\n    count = [0] * maximum\n\n    # store counts of each element in count array\n    for el in arr:\n        count[el] += 1\n\n    # update count array with cumulative counts\n    for i in range(1, maximum):\n        count[i] += count[i - 1]\n\n    # create an empty output array\n    output = [None] * len(arr)\n\n    # place elements in sorted order\n    for el in arr:\n        output[count[el] - 1] = el\n        count[el] -= 1\n\n    return output\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([3, 2, 5, 7, 4, 6, 8, 1, 9, 3, 2, 5, 7, 4, 6, 8, 1, 9], 10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def counting_sort(arr):\n    if len(arr) == 0:\n        return arr\n\n    max_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n\n    count_arr = [0 for _ in range(max_element + 1)]\n\n    for i in range(len(arr)):\n        count_arr[arr[i]] += 1\n\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    output_arr = [0 for _ in range(len(arr))]\n    for i in range(len(arr) - 1, -1, -1):\n        output_arr[count_arr[arr[i]] - 1] = arr[i]\n        count_arr[arr[i]] -= 1\n\n    return output_arr\n\n\ndef main():\n    print(counting_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def counting_sort(arr):\n    result = [0] * len(arr)\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    for i in range(1, max_val + 1):\n        count[i] += count[i - 1]\n\n    for i in range(len(arr) - 1, -1, -1):\n        result[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [1, 3, 2, 4, 5],\n        [2, 1, 3, 5, 6, 4, 7, 8, 9, 11, 10, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 1, 1"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef count_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\n    # find max and min\n    min_value, max_value = array[0], array[0]\n    for value in array:\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n\n    # count the number of occurrence of each element\n    count_array = [0] * (max_value - min_value + 1)\n    for value in array:\n        count_array[value - min_value] += 1\n\n    # sum the count to get the index of the next element\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    # store the sorted result in another array\n    sorted_array = [None] * len(array)\n    for value in array[::-1]:\n        sorted_array[count_array[value - min_value] - 1] = value\n        count_array[value - min_value] -= 1\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    assert count_sort([]) == []\n    assert count_sort([2, 1]) == [1, 2]\n    assert count_sort([0, 5, 3, 2, 2]) == [0, 2, 2, 3, 5]"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def counting_sort(array, maximum):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    # Create an output array with the same length as the original array.\n    output = [0] * len(array)\n\n    # Create a count array to count the number of occurrences of each element in the array.\n    count = [0] * (maximum + 1)\n\n    # Count the number of occurrences of each element in the array.\n    for num in array:\n        count[num] += 1\n\n    # Update the count array such that count[i] now contains the number of elements less than or equal to i.\n    for i in range(1, maximum + 1):\n        count[i] += count[i - 1]\n\n    # Place the elements of the array in the sorted order.\n    for i in reversed(array):\n        output[count[i] - 1] = i\n        count[i] -= 1\n\n    return output\n\n\ndef main():\n    array = [1, 2, 1, 3, 5, 6, 7, 8, 4, 2, 3, 3, 5, 6, 8, 2, 6]\n    print(counting_sort(array, 9))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(n+k)\n    \"\"\"\n    length = len(array)\n\n    if length == 0 or length == 1:\n        return array\n\n    # find the max element in the array\n    max_element = array[0]\n    for i in range(1, length):\n        if array[i] > max_element:\n            max_element = array[i]\n\n    # initialize a count array and store the count of each element\n    count = [0] * (max_element + 1)\n    for i in range(length):\n        count[array[i]] += 1\n\n    # update the count array by shifting count of each element by the previous count\n    for i in range(1, max_element + 1):\n        count[i] += count[i - 1]\n\n    # initialize a sorted array and store the elements in the array\n    sorted_array = [0] * length\n    for i in range(length - 1, -1, -1):\n        sorted_array[count[array[i]] - 1] = array[i]\n        count[array[i]] -= 1\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1]) == [1]\n    assert counting_sort([1, 2, 3]) == [1, 2, 3]\n    assert counting_sort([3, 2, 1]) == [1, 2, 3]\n    assert counting_sort([4, 5, 2, 25, 3, 1, 0, 0, 1]) == [0, 0, 1, 1, 2, 3, 4, 5, 25]"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def count_sort(array, maximum):\n    \"\"\"\n    >>> array = [1, 2, 3, 5, 4, 2, 8, 4, 3, 1, 2, 0]\n    >>> count_sort(array, 10)\n    [0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 8]\n    \"\"\"\n    size = len(array)\n    output = [0] * size\n    count = [0] * (maximum + 1)\n\n    for i in range(size):\n        count[array[i]] += 1\n\n    for i in range(1, maximum + 1):\n        count[i] += count[i - 1]\n\n    i = size - 1\n    while i >= 0:\n        output[count[array[i]] - 1] = array[i]\n        count[array[i]] -= 1\n        i -= 1\n\n    for i in range(size):\n        array[i] = output[i]\n\n    return array\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not array:\n        return array\n\n    min_value = array[0]\n    max_value = array[0]\n\n    for element in array[1:]:\n        if element < min_value:\n            min_value = element\n        elif element > max_value:\n            max_value = element\n\n    counts = [0] * (max_value - min_value + 1)\n\n    for element in array:\n        counts[element - min_value] += 1\n\n    sorted_array = []\n\n    for i, count in enumerate(counts):\n        sorted_array.extend([i + min_value] * count)\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1]) == [1]\n    assert counting_sort([1, 2, 1]) == [1, 1, 2]\n    assert counting_sort([2, 1, 2]) == [1, 2, 2]\n    assert counting_sort([3, 1, 2, 3]) == [1, 2, 3, 3]\n    assert counting_sort([5, 3, 1, 8, 2]) == [1, 2, 3, 5, 8]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def counting_sort(array, max_value):\n    counts = [0] * (max_value + 1)\n    for i in array:\n        counts[i] += 1\n\n    sorted_array = []\n    for i in range(len(counts)):\n        for _ in range(counts[i]):\n            sorted_array.append(i)\n    return sorted_array\n\n\ndef main():\n    array = [5, 2, 1, 3, 5, 4, 2, 1, 1]\n    sorted_array = counting_sort(array, max(array))\n    print(sorted_array)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array) -> array:\n    \"\"\"\n    Counting sort algorithm.\n    :param arr: array to sort.\n    :return: new sorted array.\n    >>> arr = array('H', [12, 11, 13, 5, 6, 7])\n    >>> counting_sort(arr) == sorted(arr)\n    True\n    \"\"\"\n    result = array(arr.typecode, [None] * len(arr))\n    tmp = array(arr.typecode, [0] * (max(arr) + 1))\n    for num in arr:\n        tmp[num] += 1\n    for idx in range(1, len(tmp)):\n        tmp[idx] += tmp[idx - 1]\n    for num in reversed(arr):\n        result[tmp[num] - 1] = num\n        tmp[num] -= 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def counting_sort(arr):\n    max_element = int(input(\"Enter maximum element: \"))\n    count_arr = [0] * (max_element + 1)\n\n    for i in range(len(arr)):\n        count_arr[arr[i]] += 1\n\n    index = 0\n\n    for i in range(len(count_arr)):\n        while count_arr[i] > 0:\n            arr[index] = i\n            index += 1\n            count_arr[i] -= 1\n\n    return arr\n\n\ndef main():\n    arr_input = [int(num) for num in input(\"Enter numbers separated by space: \").split()]\n    print(arr_input)\n    print(counting_sort(arr_input))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def counting_sort(a):\n    max_element = int(input(\"Enter the maximum possible element: \"))\n    count_arr = [0 for _ in range(max_element + 1)]\n\n    for i in a:\n        count_arr[i] += 1\n\n    index = 0\n    for i in range(max_element + 1):\n        for j in range(count_arr[i]):\n            a[index] = i\n            index += 1\n\n    print(f\"Sorted array: {a}\")\n\n\ndef main():\n    a = [int(i) for i in input(\"Enter the array: \").split()]\n    counting_sort(a)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def counting_sort(array):\n    \"\"\"\n    Solution to the counting sort problem.\n    :param array: The array to be sorted.\n    :return: The sorted array.\n    \"\"\"\n    # Find the min and max elements in the array.\n    min_element = min(array)\n    max_element = max(array)\n\n    # Create a count array of length max_element - min_element + 1.\n    count_array = [0] * (max_element - min_element + 1)\n\n    # Count the occurrences of each element in the array.\n    for element in array:\n        count_array[element - min_element] += 1\n\n    # Find the cumulative sums in the count array.\n    for index in range(1, len(count_array)):\n        count_array[index] += count_array[index - 1]\n\n    # Build the output array.\n    output = [None] * len(array)\n    for index in range(len(array) - 1, -1, -1):\n        output[count_array[array[index] - min_element] - 1] = array[index]\n        count_array[array[index] - min_element] -= 1\n\n    return output\n\nif __name__ == \"__main__\":\n    array = [1, 3, 2, 5, 4, 7, 6, 9, 8]\n    print(counting_sort(array))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from array import array\nfrom typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(k)\n    \"\"\"\n\n    if len(arr) == 0:\n        return []\n\n    # Find the minimum and maximum elements in the array\n    min_element = arr[0]\n    max_element = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < min_element:\n            min_element = arr[i]\n        elif arr[i] > max_element:\n            max_element = arr[i]\n\n    # Create a count array to store count of individual elements and\n    # initialize all values as 0\n    count_arr = array(\"i\", [0] * (max_element - min_element + 1))\n\n    # Store count of each element\n    for i in range(0, len(arr)):\n        count_arr[arr[i] - min_element] += 1\n\n    # Change count_arr[i] so that count_arr[i] now contains actual\n    # position of this element in output array\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    # Output array to store sorted elements\n    output_arr = array(\"i\", [0] * len(arr))\n\n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output_arr[count_arr[arr[i] - min_element] - 1] = arr[i]\n        count_arr[arr[i] - min_element] -= 1\n\n    return output_arr\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 4, 2, 0, 5]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k) where n is the length of the array and k is the range of elements\n    Space Complexity: O(k) where k is the range of elements\n    \"\"\"\n    if not arr:\n        return []\n\n    # find the range of elements\n    min_el, max_el = arr[0], arr[0]\n\n    for el in arr:\n        if el < min_el:\n            min_el = el\n        elif el > max_el:\n            max_el = el\n\n    # create an empty array of the size of the range\n    count_arr = [0] * (max_el - min_el + 1)\n\n    # count the number of elements in the array\n    for el in arr:\n        count_arr[el - min_el] += 1\n\n    # update the count array\n    for idx in range(1, len(count_arr)):\n        count_arr[idx] += count_arr[idx - 1]\n\n    # create an empty array of the size of the original array\n    sorted_arr = [None] * len(arr)\n\n    # place the elements in the sorted array\n    for el in arr[::-1]:\n        count_arr[el - min_el] -= 1\n        sorted_arr[count_arr[el - min_el]] = el\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1]) == [1]\n    assert counting_sort([1, 2, 2, 3, 3, 3]) == [1, 2, 2, 3, 3, 3]\n    assert counting_sort([5, 6, 3, 2, 1, 4]) == [1, 2, 3, 4, 5, 6]\n    assert counting_sort([-1, 2, 0, 0, 3]) == [-1, 0, 0, 2, 3]"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not array:\n        return []\n\n    sorted_array = [0 for _ in range(len(array))]\n\n    # find the maximum number in the array\n    max_num = max(array)\n\n    # create a count array\n    count_array = [0 for _ in range(max_num + 1)]\n\n    # count the frequency of each number in the array\n    for num in array:\n        count_array[num] += 1\n\n    # get the count of the previous number\n    for index in range(1, max_num + 1):\n        count_array[index] += count_array[index - 1]\n\n    # get the sorted array\n    for index in range(len(array) - 1, -1, -1):\n        count_array[array[index]] -= 1\n        sorted_array[count_array[array[index]]] = array[index]\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([3, 2, 5, 7, 6, 1, 4]))"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def counting_sort(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(k)\n\n    Args:\n        arr: list, input array.\n\n    Returns:\n        list, sorted array.\n    \"\"\"\n    # find the max number\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n\n    # init the count list\n    count = [0] * (max_num + 1)\n\n    # count the number of each number\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # compute the total number of elements less than i\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # output the sorted result\n    sorted_arr = [None] * len(arr)\n    for i in range(len(arr) - 1, -1, -1):\n        sorted_arr[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n\n    return sorted_arr\n\nif __name__ == \"__main__\":\n    array = [1, 3, 4, 5, 6, 7, 8, 2]\n    sorted_array = counting_sort(array)\n    print(sorted_array)"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def counting_sort(array: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    min_value = min(array)\n    max_value = max(array)\n\n    counts = [0] * (max_value - min_value + 1)\n    for i in range(len(array)):\n        counts[array[i] - min_value] += 1\n\n    index = 0\n    for i in range(len(counts)):\n        for _ in range(counts[i]):\n            array[index] = i + min_value\n            index += 1\n\n    return array\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([5, 6, 3, 2, 5, 2, 3, 2, 7, 2, 1, 3]))"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k)\n    \"\"\"\n    if len(array) == 0:\n        return array\n\n    min_value = array[0]\n    max_value = array[0]\n\n    for i in range(1, len(array)):\n        if array[i] < min_value:\n            min_value = array[i]\n        if array[i] > max_value:\n            max_value = array[i]\n\n    count_array = [0] * (max_value - min_value + 1)\n\n    for i in range(0, len(array)):\n        count_array[array[i] - min_value] += 1\n\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    output_array = [0] * len(array)\n\n    for i in range(len(array) - 1, -1, -1):\n        output_array[count_array[array[i] - min_value] - 1] = array[i]\n        count_array[array[i] - min_value] -= 1\n\n    return output_array\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1]) == [1]\n    assert counting_sort([3, 5, 4, 2, 1]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    size = len(array)\n    max_value = max(array)\n\n    count_array = [0] * (max_value + 1)\n\n    for i in range(size):\n        count_array[array[i]] += 1\n\n    for i in range(1, max_value + 1):\n        count_array[i] += count_array[i - 1]\n\n    output_array = [0] * size\n\n    for i in range(size - 1, -1, -1):\n        count_array[array[i]] -= 1\n        output_array[count_array[array[i]]] = array[i]\n\n    return output_array\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([5, 3, 4, 2, 1]) == [1, 2, 3, 4, 5]\n    assert counting_sort([]) == []\n    assert counting_sort([1, 1, 1, 1]) == [1, 1, 1, 1]"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def counting_sort(array):\n    if len(array) == 0:\n        return array\n\n    max_val = max(array)\n    min_val = min(array)\n\n    count_array = [0] * (max_val - min_val + 1)\n\n    for i in range(0, len(array)):\n        count_array[array[i] - min_val] += 1\n\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    output = [0] * len(array)\n\n    for i in range(len(array) - 1, -1, -1):\n        output[count_array[array[i] - min_val] - 1] = array[i]\n        count_array[array[i] - min_val] -= 1\n\n    return output\n\nif __name__ == \"__main__\":\n    array = [4, 2, 2, 8, 3, 3, 1]\n    print(counting_sort(array))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    arr_min, arr_max = min(arr), max(arr)\n\n    count_arr = array(\"i\", [0 for _ in range(arr_max - arr_min + 1)])\n    for i in range(len(arr)):\n        count_arr[arr[i] - arr_min] += 1\n\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    sorted_arr = array(\"i\", [0 for _ in range(len(arr))])\n\n    for i in range(len(arr) - 1, -1, -1):\n        sorted_arr[count_arr[arr[i] - arr_min] - 1] = arr[i]\n        count_arr[arr[i] - arr_min] -= 1\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    arr = array(\"i\", [5, 6, 8, 4, 3, 7, 1, 2])\n    print(*counting_sort(arr))"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(k)\n\n    :param arr: The array to be sorted\n    :return: The sorted array\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    # Find the minimum element in the array\n    min_elem = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n\n    # Create a new array to store the count of elements\n    count = [0] * (max(arr) - min_elem + 1)\n\n    # Count the elements in the array\n    for elem in arr:\n        count[elem - min_elem] += 1\n\n    # Find the index where the elements should be stored\n    index = 0\n    for i in range(len(count)):\n        while count[i] > 0:\n            arr[index] = i + min_elem\n            count[i] -= 1\n            index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(counting_sort(array(\"I\", [3, 1, 5, 2, 4])))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from array import array\n\n\ndef count_sort(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n+k)\n    \"\"\"\n    max_value = arr[-1]\n    min_value = arr[0]\n\n    for i in range(len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        elif arr[i] < min_value:\n            min_value = arr[i]\n\n    count = [0] * (max_value - min_value + 1)\n\n    for i in range(len(arr)):\n        count[arr[i] - min_value] += 1\n\n    sorted_arr = array(\"i\")\n    for i in range(len(count)):\n        for j in range(count[i]):\n            sorted_arr.append(i + min_value)\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"i\", [1, 5, 3, 2, 4])\n    print(count_sort(arr))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def counting_sort(array):\n    \"\"\"\n    Counting sort.\n\n    Time complexity: O(n + k), where n is the length of the array, and k is the maximum element.\n    Space complexity: O(k).\n    \"\"\"\n    if len(array) == 0:\n        return array\n\n    max_num = max(array)\n\n    buckets = [0] * (max_num + 1)\n\n    for num in array:\n        buckets[num] += 1\n\n    result = []\n\n    for i in range(len(buckets)):\n        if buckets[i] > 0:\n            result.extend([i] * buckets[i])\n\n    return result\n\n\ndef main():\n    print(\"Counting sort: \" + str(counting_sort([0, 5, 3, 2, 2])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def counting_sort(array):\n    if len(array) == 0:\n        return array\n\n    max_element = array[0]\n    min_element = array[0]\n\n    for i in range(1, len(array)):\n        if max_element < array[i]:\n            max_element = array[i]\n        elif min_element > array[i]:\n            min_element = array[i]\n\n    count = [0] * (max_element - min_element + 1)\n\n    for i in range(0, len(array)):\n        count[array[i] - min_element] += 1\n\n    index = 0\n\n    for i in range(0, len(count)):\n        while count[i] > 0:\n            array[index] = min_element + i\n            index += 1\n            count[i] -= 1\n\n    return array\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([3, 2, 1, 4, 5, 1, 2, 1, 3, 5]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(k)\n    \"\"\"\n    max_element = max(arr)\n    min_element = min(arr)\n\n    range_element = max_element - min_element + 1\n\n    count_arr = [0] * range_element\n\n    output_arr = [0] * len(arr)\n\n    for i in range(0, len(arr)):\n        count_arr[arr[i] - min_element] += 1\n\n    for i in range(1, range_element):\n        count_arr[i] += count_arr[i - 1]\n\n    for i in range(len(arr) - 1, -1, -1):\n        output_arr[count_arr[arr[i] - min_element] - 1] = arr[i]\n        count_arr[arr[i] - min_element] -= 1\n\n    return output_arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([1, 2, 4, 3, 5]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def counting_sort(array, maximum):\n    count = [0] * (maximum + 1)\n    for i in range(len(array)):\n        count[array[i]] += 1\n    for i in range(1, maximum + 1):\n        count[i] += count[i - 1]\n    result = [0] * len(array)\n    for i in range(len(array) - 1, -1, -1):\n        result[count[array[i]] - 1] = array[i]\n        count[array[i]] -= 1\n    return result\n\n\ndef main():\n    print(counting_sort([5, 6, 3, 4, 2, 5, 5, 2], 6))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_value = max(arr)\n    min_value = min(arr)\n\n    count = array(\"i\", [0] * (max_value - min_value + 1))\n\n    for num in arr:\n        count[num - min_value] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    result = array(\"i\", [None] * len(arr))\n\n    for num in reversed(arr):\n        result[count[num - min_value] - 1] = num\n        count[num - min_value] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(counting_sort(array(\"i\", [5, 6, 3, 4, 1, 2])))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def counting_sort(array, maximum=-1):\n    if maximum == -1:\n        maximum = max(array)\n    count = [0] * (maximum + 1)\n    for i in range(len(array)):\n        count[array[i]] += 1\n    total = 0\n    for i in range(len(count)):\n        old_count = count[i]\n        count[i] = total\n        total += old_count\n    new_array = [0] * len(array)\n    for i in range(len(array)):\n        new_array[count[array[i]]] = array[i]\n        count[array[i]] += 1\n    return new_array\n\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(counting_sort(array, 10))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def counting_sort(array: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    max_num = 0\n    for i in range(len(array)):\n        if array[i] > max_num:\n            max_num = array[i]\n\n    count = [0] * (max_num + 1)\n    for i in range(len(array)):\n        count[array[i]] += 1\n\n    pos = 0\n    for i in range(len(count)):\n        for j in range(count[i]):\n            array[pos] = i\n            pos += 1\n\n    return array\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 4, 5, 2, 3, 1]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# In counting sort, we create a new array with same length as the input array.\n# For each index of the input array, we update the corresponding index of the output array\n# with the number of times the element is present in the input array.\ndef counting_sort(input_list: List[int]) -> List[int]:\n    if len(input_list) == 0:\n        return []\n\n    # Find the minimum and maximum elements in the list\n    min_val = min(input_list)\n    max_val = max(input_list)\n\n    # Create a new array with size equal to max_val - min_val + 1\n    # Initialize all the elements to 0\n    output_list = [0] * (max_val - min_val + 1)\n\n    # Traverse the input_list and for each element in the input_list,\n    # update the corresponding index of the output_list\n    for element in input_list:\n        output_list[element - min_val] += 1\n\n    # Traverse the output_list and for each element in the output_list,\n    # update the corresponding index of the input_list\n    index = 0\n    for i in range(len(output_list)):\n        while output_list[i] > 0:\n            input_list[index] = i + min_val\n            index += 1\n            output_list[i] -= 1\n\n    return input_list\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 2, 1, 3, 3, 2, 4, 2, 1, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n+k) where k is the range of the input array\n    Space Complexity: O(k)\n    \"\"\"\n    max_value = max(arr)\n\n    counter = array(\"I\", [0] * (max_value + 1))\n\n    for num in arr:\n        counter[num] += 1\n\n    index = 0\n\n    for i, count in enumerate(counter):\n        while count > 0:\n            arr[index] = i\n            index += 1\n            count -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(counting_sort(array(\"I\", [1, 5, 2, 7, 4, 3, 1, 1, 2, 5, 3])))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef count_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(k)\n    \"\"\"\n    if not array:\n        return array\n\n    max_num = max(array)\n    count = [0] * (max_num + 1)\n\n    for num in array:\n        count[num] += 1\n\n    sorted_array = []\n\n    for num, count in enumerate(count):\n        sorted_array += [num] * count\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    assert count_sort([2, 1, 3, 5, 4]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array) -> array:\n    \"\"\"\n    Time complexity: O(n+k) where n is the size of the array and k is the range of the array.\n    Space complexity: O(k) where k is the range of the array.\n    \"\"\"\n    max_num = max(arr)\n    count_arr = array(\"L\", [0] * (max_num + 1))\n    for num in arr:\n        count_arr[num] += 1\n\n    sorted_arr = array(\"L\", [0] * len(arr))\n    for index, count in enumerate(count_arr):\n        if count != 0:\n            sorted_arr[index] = index\n            count -= 1\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort(array(\"L\", [4, 3, 2, 1, 2, 1, 0, 1, 0])) == array(\n        \"L\", [0, 0, 1, 1, 1, 2, 2, 3, 4]\n    )"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if not arr:\n        return arr\n\n    largest: int = max(arr)\n    smallest: int = min(arr)\n\n    result: List[int] = [0] * len(arr)\n\n    # create buckets\n    buckets: List[int] = [0] * (largest - smallest + 1)\n\n    for num in arr:\n        buckets[num - smallest] += 1\n\n    # fill the buckets\n    for i in range(1, len(buckets)):\n        buckets[i] = buckets[i - 1] + buckets[i]\n\n    # put the numbers in the buckets in the result list\n    for num in arr:\n        result[buckets[num - smallest] - 1] = num\n        buckets[num - smallest] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([5, 3, 2, 1, 4]) == [1, 2, 3, 4, 5]\n    assert counting_sort([5, 3, 2, 1, 4]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(k)\n    \"\"\"\n\n    # finding the max element\n    max_element = arr[0]\n    for num in arr:\n        if num > max_element:\n            max_element = num\n\n    count = [0] * (max_element + 1)\n\n    for num in arr:\n        count[num] += 1\n\n    sorted_arr = []\n\n    for i in range(len(count)):\n        if count[i] != 0:\n            sorted_arr += [i] * count[i]\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([5, 6, 3, 2, 10, 9, 8, 4, 7, 1]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not array:\n        return []\n\n    largest = max(array)\n\n    count = [0] * (largest + 1)\n\n    for i in array:\n        count[i] += 1\n\n    for i in range(1, largest + 1):\n        count[i] += count[i - 1]\n\n    output = [0] * len(array)\n\n    for i in reversed(array):\n        count[i] -= 1\n        output[count[i]] = i\n\n    return output\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1]) == [1]\n    assert counting_sort([1, 2, 3]) == [1, 2, 3]\n    assert counting_sort([3, 2, 1]) == [1, 2, 3]\n    assert counting_sort([4, 5, 6, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not array:\n        return array\n\n    min_value = array[0]\n    max_value = array[0]\n\n    for value in array:\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n\n    count_array = [0 for _ in range(max_value - min_value + 1)]\n\n    for value in array:\n        count_array[value - min_value] += 1\n\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    sorted_array = [0 for _ in array]\n\n    for value in array:\n        sorted_array[count_array[value - min_value] - 1] = value\n        count_array[value - min_value] -= 1\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    array = [4, 3, 2, 1, 5, 6]\n    sorted_array = counting_sort(array)\n    print(sorted_array)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from array import array\nfrom typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_num = max(arr)\n    count = array(\"i\", [0] * (max_num + 1))\n\n    for num in arr:\n        count[num] += 1\n\n    i = 0\n    for num in range(len(count)):\n        while count[num] > 0:\n            arr[i] = num\n            i += 1\n            count[num] -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([1, 4, 7, 2, 1, 3, 2, 1]) == [1, 1, 1, 2, 2, 3, 4, 7]"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef counting_sort(array, exp1):\n    n = len(array)\n    output = [0] * n\n    count = [0] * 10\n\n    for i in range(0, n):\n        index = array[i] // exp1\n        count[index % 10] += 1\n\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n\n    i = n - 1\n    while i >= 0:\n        index = array[i] // exp1\n        output[count[index % 10] - 1] = array[i]\n        count[index % 10] -= 1\n        i -= 1\n\n    for i in range(0, len(array)):\n        array[i] = output[i]\n\n\ndef main():\n    array = [5, 6, 3, 4, 2, 1]\n    start = timer()\n    counting_sort(array, 1)\n    end = timer()\n    print(end - start)\n    print(array)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def counting_sort(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(max(arr)-min(arr))\n\n    :param arr: The given array.\n    :return: A sorted array.\n    \"\"\"\n\n    # Find the minimum value in the array\n    min_value: int = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_value:\n            min_value = arr[i]\n\n    # Create a count array\n    count: list = [0 for _ in range(max(arr) - min_value + 1)]\n\n    # Fill the count array\n    for i in range(len(arr)):\n        count[arr[i] - min_value] += 1\n\n    # Update the count array with the count of the previous elements\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Fill the sorted array\n    sorted_arr: list = [0 for _ in range(len(arr))]\n    for i in range(len(arr) - 1, -1, -1):\n        sorted_arr[count[arr[i] - min_value] - 1] = arr[i]\n        count[arr[i] - min_value] -= 1\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([1, 2, 4, 3, 5]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not numbers:\n        return numbers\n\n    number_length = len(numbers)\n\n    # Get the maximum number in the array\n    maximum_number = max(numbers)\n\n    # Initialize a count array with all zeros\n    count_array = [0] * (maximum_number + 1)\n\n    # Initialize a result array with all zeros\n    result_array = [0] * number_length\n\n    # Fill the count array\n    for number in numbers:\n        count_array[number] += 1\n\n    # Fill the result array\n    for i in range(1, maximum_number + 1):\n        count_array[i] += count_array[i - 1]\n\n    # Fill the result array with the sorted numbers\n    for number in reversed(numbers):\n        result_array[count_array[number] - 1] = number\n        count_array[number] -= 1\n\n    return result_array\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([3, 1, 4, 1, 5, 9, 2, 6, 5]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef count_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if not arr:\n        return arr\n\n    max_element = max(arr)\n    min_element = min(arr)\n\n    # Creating the count array and initializing all values to 0.\n    count_arr = [0 for _ in range(max_element - min_element + 1)]\n\n    # Finding the frequency of each element\n    for el in arr:\n        count_arr[el - min_element] += 1\n\n    # Updating the count array such that now it contains the actual position of element from the array.\n    # Eg: count_arr[i] stores the count of the number of times i+min_element is present in arr\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    # Declaring the output array\n    output_arr = [None for _ in range(len(arr))]\n\n    # Storing the sorted elements in the output array\n    for el in arr:\n        output_arr[count_arr[el - min_element] - 1] = el\n        count_arr[el - min_element] -= 1\n\n    return output_arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 4, 5, 3, 1]\n    print(count_sort(arr))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_element = max(arr)\n\n    count_arr = [0 for _ in range(max_element + 1)]\n\n    for i in range(len(arr)):\n        count_arr[arr[i]] += 1\n\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    output_arr = [0 for _ in range(len(arr))]\n\n    for i in range(len(arr)):\n        output_arr[count_arr[arr[i]] - 1] = arr[i]\n        count_arr[arr[i]] -= 1\n\n    return output_arr\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 2, 4, 3, 5, 3, 2, 1]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array, maximum: int) -> array:\n    \"\"\"\n    Time Complexity: O(n+m)\n    Space Complexity: O(n+m)\n    \"\"\"\n    if len(arr) == 0 or maximum == 0:\n        return arr\n\n    counter: array = array(\"I\", [0] * (maximum + 1))\n\n    for num in arr:\n        counter[num] += 1\n\n    for i in range(1, maximum + 1):\n        counter[i] += counter[i - 1]\n\n    result: array = array(\"I\", [0] * len(arr))\n\n    for num in reversed(arr):\n        result[counter[num] - 1] = num\n        counter[num] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert counting_sort(array(\"I\", [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1]), 1) == array(\n        \"I\", [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    )"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def counting_sort(array, k):\n    count = [0] * k\n\n    for i in range(len(array)):\n        count[array[i]] += 1\n\n    for i in range(1, k):\n        count[i] += count[i - 1]\n\n    result = [0] * len(array)\n    for i in range(len(array) - 1, -1, -1):\n        result[count[array[i]] - 1] = array[i]\n        count[array[i]] -= 1\n\n    return result\n\n\ndef main():\n    array = [1, 4, 1, 2, 7, 5, 2]\n    result = counting_sort(array, 9)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def counting_sort(arr, k):\n    \"\"\"\n    Time complexity: O(n+k)\n    Space complexity: O(k)\n    \"\"\"\n    count = [0] * k\n\n    for i in arr:\n        count[i] += 1\n\n    # prefix sum\n    for i in range(1, k):\n        count[i] += count[i - 1]\n\n    sorted_arr = [0] * len(arr)\n\n    for i in range(len(arr) - 1, -1, -1):\n        sorted_arr[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n\n    return sorted_arr\n\n\ndef main():\n    arr = [1, 5, 2, 1, 4, 0]\n    k = max(arr) + 1\n    print(counting_sort(arr, k))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    length = len(array)\n    max_num = max(array)\n    min_num = min(array)\n    result = [0] * length\n\n    # Create a count array to store count of individual elements and\n    # initialize count array as 0\n    count_arr = [0] * (max_num - min_num + 1)\n\n    # Store the count of elements\n    for num in array:\n        count_arr[num - min_num] += 1\n\n    # Change count_arr[i] so that count_arr[i] now contains actual\n    # position of this element in output array\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    # Build the output array\n    for num in reversed(array):\n        result[count_arr[num - min_num] - 1] = num\n        count_arr[num - min_num] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def counting_sort(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_element = int(input(\"Enter the largest element: \"))\n    count_arr = [0] * (max_element + 1)\n    output_arr = [0] * len(arr)\n\n    for i in arr:\n        count_arr[i] += 1\n\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    for i in range(len(arr) - 1, -1, -1):\n        output_arr[count_arr[arr[i]] - 1] = arr[i]\n        count_arr[arr[i]] -= 1\n\n    for i in range(0, len(arr)):\n        arr[i] = output_arr[i]\n\n    return arr\n\n\ndef main():\n    arr_input = list(map(int, input(\"Enter the array: \").split()))\n    print(arr_input)\n    counting_sort(arr_input)\n    print(arr_input)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def counting_sort(array, maximum=-1):\n    # find maximum value\n    if maximum == -1:\n        maximum = max(array)\n\n    # initialize array to store counts\n    counts = [0 for _ in range(maximum + 1)]\n\n    # count frequencies\n    for i in array:\n        counts[i] += 1\n\n    # calculate cummulative frequencies\n    for i in range(1, maximum + 1):\n        counts[i] += counts[i - 1]\n\n    # create output array\n    output = [0 for _ in array]\n\n    # place elements in output array in sorted order\n    for i in reversed(array):\n        output[counts[i] - 1] = i\n        counts[i] -= 1\n\n    return output\n\ndef main():\n    array = [5, 4, 3, 2, 1]\n    print(counting_sort(array))\n\n    array = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n    print(counting_sort(array))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def counting_sort(array):\n    \"\"\"\n    :param array: list[int] -- the array to be sorted\n    :return: list[int] -- the sorted array\n\n    Time complexity: O(n).\n    Space complexity: O(max(array) - min(array)).\n    \"\"\"\n    # Find the min and max of the array.\n    min_val = array[0]\n    max_val = array[0]\n    for i in range(1, len(array)):\n        if array[i] < min_val:\n            min_val = array[i]\n        elif array[i] > max_val:\n            max_val = array[i]\n\n    # Counting sort.\n    count = [0] * (max_val - min_val + 1)\n    for i in array:\n        count[i - min_val] += 1\n\n    # Calculate the total number of elements smaller than i.\n    total = 0\n    for i in range(len(count)):\n        old = count[i]\n        count[i] = total\n        total += old\n\n    # Output.\n    output = [None] * len(array)\n    for i in range(len(array)):\n        output[count[array[i] - min_val]] = array[i]\n        count[array[i] - min_val] += 1\n\n    return output\n\n\ndef main():\n    array = [1, 4, 2, 5, 8, 7, 6, 3]\n    print(counting_sort(array))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def counting_sort(arr):\n    # find the minimum and maximum\n    min_num = min(arr)\n    max_num = max(arr)\n\n    # count the number of each element\n    count = [0] * (max_num - min_num + 1)\n\n    for i in range(len(arr)):\n        count[arr[i] - min_num] += 1\n\n    # cumulative sum\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # create the result array\n    res = [0] * len(arr)\n\n    # place the element in the result array\n    for i in range(len(arr) - 1, -1, -1):\n        res[count[arr[i] - min_num] - 1] = arr[i]\n        count[arr[i] - min_num] -= 1\n\n    return res\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 23, 45, 67, 90]\n    print(counting_sort(arr))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(k)\n    \"\"\"\n\n    if not array:\n        return array\n\n    min_element = array[0]\n    max_element = array[0]\n\n    for element in array[1:]:\n        if element < min_element:\n            min_element = element\n        elif element > max_element:\n            max_element = element\n\n    counting_array = [0] * (max_element - min_element + 1)\n\n    for element in array:\n        counting_array[element - min_element] += 1\n\n    current_index = 0\n\n    for i, count in enumerate(counting_array):\n        while count > 0:\n            array[current_index] = i + min_element\n            current_index += 1\n            count -= 1\n\n    return array\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1]) == [1]\n    assert counting_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert counting_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    assert counting_sort([3, 2, 4, 1, 5]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def counting_sort(arr):\n    max_value = max(arr)\n    min_value = min(arr)\n    output = [0] * (max_value - min_value + 1)\n    count = [0] * (max_value - min_value + 1)\n\n    for i in range(len(arr)):\n        count[arr[i] - min_value] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i] - min_value] - 1] = arr[i]\n        count[arr[i] - min_value] -= 1\n\n    return output\n\n\nprint(counting_sort([5, 6, 3, 2, 2]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n + k) where k is the range of numbers\n# Space complexity: O(k)\ndef counting_sort(nums: List[int]) -> List[int]:\n    if not nums:\n        return nums\n\n    min_num, max_num = nums[0], nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n        elif nums[i] > max_num:\n            max_num = nums[i]\n\n    # +1 to include max_num\n    count_list = [0] * (max_num - min_num + 1)\n\n    # Count the number of occurence of each number\n    for i in range(0, len(nums)):\n        count_list[nums[i] - min_num] += 1\n\n    # Get the cumulative sum\n    for i in range(1, len(count_list)):\n        count_list[i] += count_list[i - 1]\n\n    sorted_list = [0] * len(nums)\n\n    # Place the element in the correct index\n    for i in reversed(range(0, len(nums))):\n        sorted_list[count_list[nums[i] - min_num] - 1] = nums[i]\n        count_list[nums[i] - min_num] -= 1\n\n    return sorted_list\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 4, 7, 3, 2, 5, 6, 8]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array) -> array:\n    \"\"\"\n    :param: arr: array to be sorted\n    :return: sorted array\n    \"\"\"\n    # Find the minimum element in the array\n    min_element = min(arr)\n\n    # Find the range of the array\n    range_of_array = max(arr) - min_element + 1\n\n    # Create a count array to store counts of individual elements\n    count_array = array(\"L\", [0] * range_of_array)\n\n    # Store counts of each element\n    for element in arr:\n        count_array[element - min_element] += 1\n\n    # Modify counts to represent indices of elements\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    # Create a sorted array to store the result\n    sorted_array = array(\"L\", [0] * len(arr))\n\n    # Find the element and place it in the sorted array\n    for element in reversed(arr):\n        count_array[element - min_element] -= 1\n        sorted_array[count_array[element - min_element]] = element\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    print(counting_sort(array(\"L\", [1, 0, 1, 2, 0, 1, 3, 0, 1])))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k) where n is the number of elements in the array\n    and k is the range of elements in the array\n    Space Complexity: O(k) where k is the range of elements in the array\n    \"\"\"\n    if not array:\n        return array\n\n    min_num = array[0]\n    max_num = array[0]\n\n    for num in array:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n\n    count_list = [0 for _ in range(max_num - min_num + 1)]\n\n    for num in array:\n        count_list[num - min_num] += 1\n\n    index = 0\n\n    for i in range(max_num - min_num + 1):\n        for _ in range(count_list[i]):\n            array[index] = i + min_num\n            index += 1\n\n    return array\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1, 2, 3]) == [1, 2, 3]\n    assert counting_sort([1, 2, 3, 3, 3, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7, 3, 3, 3]"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    min_value = min(arr)\n    max_value = max(arr)\n\n    count = [0] * (max_value - min_value + 1)\n\n    for element in arr:\n        count[element - min_value] += 1\n\n    index = 0\n\n    for i in range(len(count)):\n        for _ in range(count[i]):\n            arr[index] = i + min_value\n            index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([1, 2, 5, 3, 4]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not array:\n        return array\n\n    min_value = array[0]\n    max_value = array[0]\n\n    for num in array:\n        if num < min_value:\n            min_value = num\n        elif num > max_value:\n            max_value = num\n\n    count = [0] * (max_value - min_value + 1)\n\n    for num in array:\n        count[num - min_value] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    result = [0] * len(array)\n\n    for num in reversed(array):\n        result[count[num - min_value] - 1] = num\n        count[num - min_value] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([5, 3, 2, 1, 4]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    max_element = max(arr)\n\n    count_arr = [0] * (max_element + 1)\n\n    for i in arr:\n        count_arr[i] += 1\n\n    for i in range(1, max_element + 1):\n        count_arr[i] += count_arr[i - 1]\n\n    output_arr = [0] * len(arr)\n\n    for i in range(len(arr) - 1, -1, -1):\n        output_arr[count_arr[arr[i]] - 1] = arr[i]\n        count_arr[arr[i]] -= 1\n\n    return output_arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([1, 2, 4, 3, 5, 3, 2, 1]) == [1, 1, 2, 2, 3, 3, 4, 5]"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef count_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    min_el, max_el = min(arr), max(arr)\n\n    count = [0] * (max_el - min_el + 1)\n\n    for el in arr:\n        count[el - min_el] += 1\n\n    i = 0\n\n    for el, c in enumerate(count):\n        while c > 0:\n            arr[i] = el + min_el\n            c -= 1\n            i += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(count_sort([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr):\n    # find minimum and maximum elements\n    min_element = min(arr)\n    max_element = max(arr)\n\n    # create an array of length max_element - min_element + 1\n    count_array = array(\"i\", [0] * (max_element - min_element + 1))\n\n    # count the frequency of each element in the array\n    for i in arr:\n        count_array[i - min_element] += 1\n\n    # sum the frequency of elements\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    # create a sorted array\n    sorted_array = array(\"i\", [0] * len(arr))\n\n    # store the elements in the sorted array\n    for i in range(len(arr) - 1, -1, -1):\n        sorted_array[count_array[arr[i] - min_element] - 1] = arr[i]\n        count_array[arr[i] - min_element] -= 1\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    print(counting_sort(array(\"i\", [1, 4, 3, 2, 5])))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def count_sort(arr):\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(k)\n\n    :param arr: The array to be sorted\n    :return: The sorted array\n    \"\"\"\n    # maximum element in the array\n    max_element = max(arr)\n\n    # Create a count array to store count of individual elements and\n    # initialize all values as 0\n    count_arr = [0 for _ in range(max_element + 1)]\n\n    # Store the count of each element\n    for item in arr:\n        count_arr[item] += 1\n\n    # Change count_arr[i] so that count_arr[i] now contains actual\n    # position of this element in output array\n    for i in range(1, max_element + 1):\n        count_arr[i] += count_arr[i - 1]\n\n    # Create a temporary array to store the sorted array\n    temp_arr = [None for _ in range(len(arr))]\n\n    # Build the output array\n    for item in arr:\n        temp_arr[count_arr[item] - 1] = item\n        count_arr[item] -= 1\n\n    return temp_arr\n\n\nif __name__ == \"__main__\":\n    print(count_sort([5, 3, 1, 2, 4]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "from gfg.algorithms.sorting.sorting_helpers import print_list\n\n\ndef counting_sort(arr: list, maximum: int) -> None:\n    count = [0] * maximum\n\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    index = 0\n\n    for j in range(len(count)):\n        while count[j] > 0:\n            arr[index] = j\n            count[j] -= 1\n            index += 1\n\n\nif __name__ == \"__main__\":\n    arr = [5, 3, 1, 2, 4]\n    print_list(arr)\n    counting_sort(arr, 6)\n    print_list(arr)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef count_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return arr\n\n    max_num = max(arr)\n    min_num = min(arr)\n\n    count = [0] * (max_num - min_num + 1)\n\n    for num in arr:\n        count[num - min_num] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    result = [0] * len(arr)\n\n    for num in arr:\n        result[count[num - min_num] - 1] = num\n        count[num - min_num] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(count_sort([5, 3, 1, 2, 4]))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def counting_sort(arr):\n    # get the max element\n    max_elem = max(arr)\n\n    # init the count array\n    count = [0] * (max_elem + 1)\n\n    # count the number of elements\n    for elem in arr:\n        count[elem] += 1\n\n    # sum the count to get the final position\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # init the output array\n    out = [None] * len(arr)\n\n    # put the elements to the correct position\n    for elem in arr:\n        count[elem] -= 1\n        out[count[elem]] = elem\n\n    return out\n\n\nif __name__ == \"__main__\":\n    arr = [5, 6, 3, 4, 2, 1, 0]\n    print(counting_sort(arr))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def count_sort(array):\n    if len(array) < 2:\n        return array\n\n    max_value = max(array)\n    min_value = min(array)\n    count = [0 for _ in range(max_value - min_value + 1)]\n    output = [0 for _ in range(len(array))]\n\n    for i in range(len(array)):\n        count[array[i] - min_value] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for i in range(len(array) - 1, -1, -1):\n        output[count[array[i] - min_value] - 1] = array[i]\n        count[array[i] - min_value] -= 1\n\n    return output\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(count_sort(arr))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    arr_min, arr_max = min(arr), max(arr)\n\n    # Calculating the size of the counting array\n    size = arr_max - arr_min + 1\n\n    # Initializing the counting array\n    counting_arr = [0] * size\n\n    # Filling the counting array with the frequency of each element\n    for i in range(len(arr)):\n        counting_arr[arr[i] - arr_min] += 1\n\n    # Updating the count array with the sum of previous counts\n    for i in range(1, size):\n        counting_arr[i] += counting_arr[i - 1]\n\n    # Creating the result array\n    res_arr = [0] * len(arr)\n\n    # Filling the result array with the sorted elements\n    for i in range(len(arr) - 1, -1, -1):\n        res_arr[counting_arr[arr[i] - arr_min] - 1] = arr[i]\n        counting_arr[arr[i] - arr_min] -= 1\n\n    return array(\"i\", res_arr)\n\n\nif __name__ == \"__main__\":\n    print(counting_sort(array(\"I\", [3, 5, 1, 2, 4])))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def counting_sort(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # find max\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n\n    # count array\n    count_arr = [0] * (max_num + 1)\n    for num in arr:\n        count_arr[num] += 1\n\n    # update count_arr to cumulative count\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    # output array\n    output_arr = [0] * len(arr)\n\n    for num in arr:\n        output_arr[count_arr[num] - 1] = num\n        count_arr[num] -= 1\n\n    return output_arr\n\n\nif __name__ == \"__main__\":\n    array = [1, 4, 5, 2, 6, 2, 3, 1, 7, 9, 3]\n    print(counting_sort(array))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def counting_sort(array):\n\n    if len(array) == 0:\n        return array\n\n    max_value = max(array)\n    min_value = min(array)\n\n    count_array = [0] * (max_value - min_value + 1)\n\n    for value in array:\n        count_array[value - min_value] += 1\n\n    index = 0\n    for i in range(0, len(count_array)):\n        for j in range(0, count_array[i]):\n            array[index] = i + min_value\n            index += 1\n\n    return array\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([5, 4, 3, 2, 1]))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(max(arr))\n    \"\"\"\n\n    max_val = max(arr)\n    buckets = [0] * (max_val + 1)\n\n    for val in arr:\n        buckets[val] += 1\n\n    sorted_arr = []\n\n    for i in range(max_val + 1):\n        if buckets[i] > 0:\n            sorted_arr += [i] * buckets[i]\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([5, 6, 3, 2, 5]) == [2, 3, 5, 5, 6]"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    max_element = max(arr)\n\n    count = [0] * (max_element + 1)\n\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    output = [0] * len(arr)\n\n    for i in range(len(arr) - 1, -1, -1):\n        count[arr[i]] -= 1\n        output[count[arr[i]]] = arr[i]\n\n    return output\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 2, 5, 3, 4]))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(k)\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\n    # find the max and min values in the array\n    min_value = array[0]\n    max_value = array[0]\n\n    for value in array:\n        if value < min_value:\n            min_value = value\n        elif value > max_value:\n            max_value = value\n\n    # create a counting array for the given range\n    counting_array = [0] * (max_value - min_value + 1)\n\n    for value in array:\n        counting_array[value - min_value] += 1\n\n    # find the running sum\n    for index in range(1, len(counting_array)):\n        counting_array[index] += counting_array[index - 1]\n\n    # create the sorted array\n    sorted_array = [None] * len(array)\n\n    for value in reversed(array):\n        counting_array[value - min_value] -= 1\n        index = counting_array[value - min_value]\n        sorted_array[index] = value\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([5]) == [5]\n    assert counting_sort([5, 5]) == [5, 5]\n    assert counting_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    min_value = min(nums)\n    max_value = max(nums)\n\n    count = [0] * (max_value - min_value + 1)\n\n    for num in nums:\n        count[num - min_value] += 1\n\n    sorted_nums = []\n\n    for index, num in enumerate(count):\n        if num > 0:\n            sorted_nums += [index + min_value] * num\n\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 2, 4, 3, 5, 3, 2]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(k)\n    \"\"\"\n    if not array:\n        return array\n\n    min_value = min(array)\n    max_value = max(array)\n\n    count_array = [0 for _ in range(max_value - min_value + 1)]\n\n    for value in array:\n        count_array[value - min_value] += 1\n\n    for index in range(1, len(count_array)):\n        count_array[index] += count_array[index - 1]\n\n    sorted_array = [0 for _ in range(len(array))]\n\n    for value in reversed(array):\n        count_array[value - min_value] -= 1\n        sorted_array[count_array[value - min_value]] = value\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([5, 6, 3, 2, 10]) == [2, 3, 5, 6, 10]"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_num = max(arr)\n    count = [0] * (max_num + 1)\n\n    for num in arr:\n        count[num] += 1\n\n    for i in range(1, max_num + 1):\n        count[i] += count[i - 1]\n\n    output = [0] * len(arr)\n\n    for num in arr:\n        output[count[num] - 1] = num\n        count[num] -= 1\n\n    return output\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([1, 4, 5, 2, 6, 7, 1, 1, 1]) == [1, 1, 1, 1, 2, 4, 5, 6, 7]"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from array import array\nfrom typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    :param - array to be sorted\n    return - sorted array\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    max_value = max(arr)\n\n    count_arr = [0 for _ in range(max_value + 1)]\n\n    for value in arr:\n        count_arr[value] += 1\n\n    sorted_arr = array(\"I\", [])\n\n    for index, value in enumerate(count_arr):\n        if index != 0:\n            sorted_arr.extend([index] * value)\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    test_case_1 = [5, 4, 3, 2, 1]\n    test_case_2 = [1, 2, 3, 4, 5]\n    test_case_3 = [5, 3, 1]\n    test_case_4 = [1, 2, 0]\n    test_case_5 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    test_case_6 = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n    print(counting_sort(test_case_1))\n    print(counting_sort(test_case_2))\n    print(counting_sort(test_case_3))\n    print(counting_sort(test_case_4))\n    print(counting_sort(test_case_5))\n    print(counting_sort(test_case_6))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from array import array\n\n\ndef counting_sort(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_element = max(arr)\n    min_element = min(arr)\n\n    size = max_element - min_element + 1\n    count_arr = [0] * size\n\n    for element in arr:\n        count_arr[element - min_element] += 1\n\n    idx = 0\n    for i in range(len(count_arr)):\n        for j in range(count_arr[i]):\n            arr[idx] = i + min_element\n            idx += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(counting_sort(array(\"I\", [5, 6, 3, 4, 1, 2])))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(n+k)\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n\n    # find the minimum and maximum elements\n    min_val, max_val = min(arr), max(arr)\n\n    # find the range\n    range_ = max_val - min_val + 1\n\n    # create a count array\n    count = [0 for _ in range(range_)]\n\n    # populate the count array\n    for el in arr:\n        count[el - min_val] += 1\n\n    # populate the count array\n    for i in range(1, range_):\n        count[i] += count[i - 1]\n\n    # create a result array\n    result = [0 for _ in range(len(arr))]\n\n    # populate the result array\n    for i in range(len(arr) - 1, -1, -1):\n        result[count[arr[i] - min_val] - 1] = arr[i]\n        count[arr[i] - min_val] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert counting_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    assert counting_sort([1, 2, 3, 2, 1]) == [1, 1, 2, 2, 3]\n    assert counting_sort([3, 2, 4, 1, 6, 5, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_number = max(arr)\n    counts = [0] * (max_number + 1)\n\n    for number in arr:\n        counts[number] += 1\n\n    index = 0\n\n    for i in range(max_number + 1):\n        for j in range(counts[i]):\n            arr[index] = i\n            index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([1, 2, 4, 5, 3]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def count_sort(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_element = max(arr)\n    min_element = min(arr)\n    range_of_elements = max_element - min_element + 1\n    count_array = [0 for _ in range(range_of_elements)]\n    output_arr = [0 for _ in range(len(arr))]\n\n    for i in range(0, len(arr)):\n        count_array[arr[i] - min_element] += 1\n\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    for i in range(len(arr) - 1, -1, -1):\n        output_arr[count_array[arr[i] - min_element] - 1] = arr[i]\n        count_array[arr[i] - min_element] -= 1\n\n    for i in range(0, len(arr)):\n        arr[i] = output_arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 23, 21, 19, 29, 101]\n    print(count_sort(arr))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def counting_sort(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    min_num = min(arr)\n    max_num = max(arr)\n\n    count_arr = [0] * (max_num - min_num + 1)\n\n    for num in arr:\n        count_arr[num - min_num] += 1\n\n    count = 0\n\n    for i in range(len(count_arr)):\n        while count_arr[i] > 0:\n            arr[count] = i + min_num\n            count += 1\n            count_arr[i] -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([1, 2, 2, 4, 5, 5, 5, 7, 7, 8]) == [1, 2, 2, 4, 5, 5, 5, 7, 7, 8]"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    length = len(arr)\n\n    if length == 0:\n        return arr\n\n    # find the minimum and maximum elements\n    minimum = arr[0]\n    maximum = arr[0]\n    for i in range(1, length):\n        if arr[i] < minimum:\n            minimum = arr[i]\n        elif arr[i] > maximum:\n            maximum = arr[i]\n\n    # count the frequency of each element\n    count = [0] * (maximum - minimum + 1)\n\n    for i in range(length):\n        count[arr[i] - minimum] += 1\n\n    # sum the frequencies\n    for i in range(1, maximum - minimum + 1):\n        count[i] += count[i - 1]\n\n    # create a sorted array\n    temp = [0] * length\n\n    for i in range(length):\n        temp[count[arr[i] - minimum] - 1] = arr[i]\n        count[arr[i] - minimum] -= 1\n\n    return temp\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1]) == [1]\n    assert counting_sort([1, 2, 3, 2, 1]) == [1, 1, 2, 2, 3]\n    assert counting_sort([2, 5, 3, 0, 2, 3, 0, 1, 4, 2]) == [\n        0,\n        0,\n        1,\n        2,\n        2,\n        2,\n        3,\n        3,\n        4,\n        5,\n    ]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    max_value = max(arr)\n\n    count = [0 for _ in range(max_value + 1)]\n\n    for num in arr:\n        count[num] += 1\n\n    index = 0\n\n    for i in range(max_value + 1):\n        for _ in range(count[i]):\n            arr[index] = i\n            index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert count_sort([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5]\n    assert count_sort([5, 3, 1, 4, 2, -1, 0]) == [-1, 0, 1, 2, 3, 4, 5]"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def counting_sort(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    result = [None] * len(arr)\n\n    # Find the maximum number in the array\n    max_num = max(arr)\n\n    # Count the number of each number in the array\n    count = [0] * (max_num + 1)\n\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Compute the index of each number\n    for i in range(1, max_num + 1):\n        count[i] += count[i - 1]\n\n    # Reconstruct the sorted array\n    for i in range(len(arr) - 1, -1, -1):\n        result[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n\n    return result\n\nif __name__ == \"__main__\":\n    array = [1, 3, 2, 4, 5, 6, 7, 8, 9]\n    print(counting_sort(array))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def count_sort(arr):\n    n = len(arr)\n    output = [0] * n\n\n    count = [0] * 10\n\n    for i in range(0, n):\n        count[arr[i]] += 1\n\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n\n    i = n - 1\n    while i >= 0:\n        output[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n        i -= 1\n\n    for i in range(0, len(arr)):\n        arr[i] = output[i]\n\n\ndef main():\n    arr = [2, 1, 3, 4, 5]\n    count_sort(arr)\n    print(arr)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not array:\n        return []\n\n    min_value = array[0]\n    max_value = array[0]\n\n    for num in array:\n        if num > max_value:\n            max_value = num\n        if num < min_value:\n            min_value = num\n\n    count = [0 for _ in range(max_value - min_value + 1)]\n\n    for num in array:\n        count[num - min_value] += 1\n\n    sorted_array = []\n\n    for i, count in enumerate(count):\n        if count:\n            sorted_array.extend([i + min_value] * count)\n\n    return sorted_array\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([1, 2, 3]) == [1, 2, 3]\n    assert counting_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n    ]\n    assert counting_sort([3, 2, 5, 6, 7, 8, 9, 4, 1, 0]) == [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n    ]"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(max(arr))\n    \"\"\"\n\n    if not arr:\n        return arr\n\n    max_element = max(arr)\n    count_array = [0] * (max_element + 1)\n\n    for i in arr:\n        count_array[i] += 1\n\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    output_arr = [0] * len(arr)\n\n    for i in range(len(arr) - 1, -1, -1):\n        count_array[arr[i]] -= 1\n        output_arr[count_array[arr[i]]] = arr[i]\n\n    return output_arr\n\n\nif __name__ == \"__main__\":\n    assert count_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def count_sort(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(k)\n    \"\"\"\n\n    max_num = max(arr)\n    min_num = min(arr)\n\n    count_array = [0 for _ in range(max_num - min_num + 1)]\n\n    for num in arr:\n        count_array[num - min_num] += 1\n\n    sorted_arr = []\n    for i, count in enumerate(count_array):\n        for _ in range(count):\n            sorted_arr.append(i + min_num)\n\n    return sorted_arr\n\n\nif __name__ == \"__main__\":\n    assert count_sort([1, 3, 2, 4, 5]) == [1, 2, 3, 4, 5]\n    assert count_sort([1, 3, 2, 4, 5, 7, 6]) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    max_value = max(arr)\n\n    count = [0] * (max_value + 1)\n\n    for item in arr:\n        count[item] += 1\n\n    total = 0\n\n    for i in range(max_value + 1):\n        old_count = count[i]\n        count[i] = total\n        total += old_count\n\n    output = [0] * len(arr)\n\n    for item in arr:\n        output[count[item]] = item\n        count[item] += 1\n\n    return output\n\n\nif __name__ == \"__main__\":\n    assert counting_sort([]) == []\n    assert counting_sort([2, 3, 1, 2, 4]) == [1, 2, 2, 3, 4]"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef counting_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_value = max(array)\n    buckets = [0 for _ in range(max_value + 1)]\n\n    for value in array:\n        buckets[value] += 1\n\n    i = 0\n    for index, value in enumerate(buckets):\n        if value:\n            array[i : i + value] = [index] * value\n            i += value\n\n    return array\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([3, 2, 5, 4, 1]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def count_sort(arr):\n    if len(arr) == 0:\n        return arr\n\n    min_element = min(arr)\n    max_element = max(arr)\n    range_of_elements = max_element - min_element + 1\n\n    count_arr = [0 for _ in range(range_of_elements)]\n    output_arr = [0 for _ in range(len(arr))]\n\n    for i in range(0, len(arr)):\n        count_arr[arr[i] - min_element] += 1\n\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    for i in range(len(arr) - 1, -1, -1):\n        output_arr[count_arr[arr[i] - min_element] - 1] = arr[i]\n        count_arr[arr[i] - min_element] -= 1\n\n    for i in range(0, len(arr)):\n        arr[i] = output_arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(count_sort([5, 4, 3, 2, 1]))\n    print(count_sort([1, 2, 3, 4, 5]))\n    print(count_sort([5, 3, 2, 1, 6]))\n    print(count_sort([1, 2, 5, 3, 4]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def counting_sort(array):\n    if len(array) == 0:\n        return array\n\n    min_element = array[0]\n    max_element = array[0]\n\n    for i in range(len(array)):\n        if array[i] < min_element:\n            min_element = array[i]\n        elif array[i] > max_element:\n            max_element = array[i]\n\n    count_array = [0 for _ in range(max_element - min_element + 1)]\n\n    for i in range(len(array)):\n        count_array[array[i] - min_element] += 1\n\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    result = [None for _ in range(len(array))]\n\n    for i in range(len(array) - 1, -1, -1):\n        result[count_array[array[i] - min_element] - 1] = array[i]\n        count_array[array[i] - min_element] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def count_sort(arr):\n    if not arr:\n        return arr\n\n    min_element = min(arr)\n    max_element = max(arr)\n\n    count_arr = [0] * (max_element - min_element + 1)\n\n    for i in range(len(arr)):\n        count_arr[arr[i] - min_element] += 1\n\n    idx = 0\n    for i in range(len(count_arr)):\n        while count_arr[i] > 0:\n            arr[idx] = i + min_element\n            idx += 1\n            count_arr[i] -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [3, 2, 5, 1, 5, 2, 1, 2, 3, 5, 1, 2, 4, 6, 1, 3, 2, 2, 2, 3, 4, 6, 8, 4, 3, 6]\n    print(count_sort(arr))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def counting_sort(arr):\n    min_val = min(arr)\n    max_val = max(arr)\n    count = [0] * (max_val - min_val + 1)\n    for i in range(len(arr)):\n        count[arr[i] - min_val] += 1\n\n    index = 0\n    for i in range(len(count)):\n        while count[i] > 0:\n            arr[index] = i + min_val\n            index += 1\n            count[i] -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(counting_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 22, 33, 44]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def counting_sort(array):\n    \"\"\"\n    Time Complexity: O(n+k)\n    \"\"\"\n    length = len(array)\n    k = max(array)\n\n    count = [0] * (k + 1)\n\n    for i in range(length):\n        count[array[i]] += 1\n\n    index = 0\n    for i in range(k + 1):\n        for j in range(count[i]):\n            array[index] = i\n            index += 1\n\n\nif __name__ == \"__main__\":\n    array = [4, 1, 1, 2, 2, 4, 3, 3, 1]\n    counting_sort(array)\n    print(array)"
    }
  ]
}