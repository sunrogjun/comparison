{
  "timestamp": "2025-09-15T00:55:57.854054",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 348,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def check_twice(a, b, c):\n    return (b**2 - 4*a*c) < 0\n\nprint(check_twice(3, 1, 1))\nprint(check_twice(2, 3, 1))\nprint(check_twice(1, 2, 3))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\ndef quadratic_equation(a, b, c):\n    \"\"\"\n    >>> quadratic_equation(1, -6, 5)\n    True\n    >>> quadratic_equation(2, -1, 1)\n    False\n    >>> quadratic_equation(1, 0, 1)\n    False\n    >>> quadratic_equation(-1, -2, 3)\n    False\n    >>> quadratic_equation(1, 1, 1)\n    False\n    >>> quadratic_equation(1, 1, -1)\n    True\n    >>> quadratic_equation(1, 0, 0)\n    False\n    \"\"\"\n    if a == 0:\n        return False\n    if (b*b) - (4*a*c) < 0:\n        return False\n    x1 = (-b + math.sqrt((b*b) - (4*a*c))) / (2*a)\n    x2 = (-b - math.sqrt((b*b) - (4*a*c))) / (2*a)\n    return (x1 == 2*x2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def check_twice(a, b, c):\n    \"\"\"\n    This function will check whether the root is twice of the other or not.\n\n    >>> check_twice(1, -4, 4)\n    True\n    >>> check_twice(1, 4, 4)\n    False\n    >>> check_twice(1, 1, 1)\n    False\n    >>> check_twice(1, 1, 2)\n    True\n    >>> check_twice(1, 2, 2)\n    False\n    >>> check_twice(1, 2, 1)\n    True\n    \"\"\"\n    if a != 1:\n        return False\n    if (b * b - 4 * c) == 0:\n        return True\n    if (b * b - 4 * c) > 0:\n        return False\n    if (b * b - 4 * c) < 0:\n        return True\n\n\ndef main():\n    a = int(input(\"Enter the value of a : \"))\n    b = int(input(\"Enter the value of b : \"))\n    c = int(input(\"Enter the value of c : \"))\n    print(check_twice(a, b, c))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def quadratic(a, b, c):\n    \"\"\"\n    >>> quadratic(2, 3, 1)\n    False\n    >>> quadratic(1, 4, 1)\n    True\n    \"\"\"\n    if (b ** 2) - (4 * a * c) < 0:\n        return False\n    else:\n        return (b ** 2 - 4 * a * c) / (2 * a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def check_twice(a, b, c):\n    return (b**2 - 4*a*c)**0.5 == 2*a\n\n\na = int(input())\nb = int(input())\nc = int(input())\n\nif check_twice(a, b, c):\n    print(\"The roots are twice.\")\nelse:\n    print(\"The roots are not twice.\")"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def quadratic_equation(a, b, c):\n    if (b**2) - (4*a*c) >= 0:\n        return ((-b + (b**2 - (4*a*c))**0.5)/(2*a), (-b - (b**2 - (4*a*c))**0.5)/(2*a))\n    else:\n        return (0, 0)\n\ndef check_quadratic_equation(a, b, c):\n    x1, x2 = quadratic_equation(a, b, c)\n    if (x1 == 2*x2):\n        return True\n    else:\n        return False\n\nprint(check_quadratic_equation(1, 1, 1))\nprint(check_quadratic_equation(1, 1, 2))\nprint(check_quadratic_equation(1, 1, 3))\nprint(check_quadratic_equation(1, 1, 4))\nprint(check_quadratic_equation(1, 1, 5))\nprint(check_quadratic_equation(1, 1, 6))\nprint(check_quadratic_equation(1, 1, 7))\nprint(check_quadratic_equation(1, 1, 8))\nprint(check_quadratic_equation(1, 1, 9))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def check(a, b, c):\n    x = (-b + (b**2 - 4*a*c)**0.5) / 2*a\n    y = (-b - (b**2 - 4*a*c)**0.5) / 2*a\n    if x == 2*y:\n        return \"Twice\"\n    else:\n        return \"Not twice\"\n\na, b, c = map(int, input().split())\nprint(check(a, b, c))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def check_twice(a, b, c):\n    \"\"\"\n    >>> check_twice(1, 0, 4)\n    True\n    >>> check_twice(1, 0, 3)\n    False\n    >>> check_twice(1, 0, 2)\n    False\n    \"\"\"\n    if (b**2 - 4*a*c) == 0:\n        return False\n    return int((-b + (b**2 - 4*a*c)**0.5)/(2*a)) == int((-b - (b**2 - 4*a*c)**0.5)/(2*a))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def quadratic(a,b,c):\n    if a == 0:\n        return -c/b\n    else:\n        D = b**2-4*a*c\n        if D < 0:\n            return \"no real root\"\n        else:\n            return (-b+D**0.5)/(2*a),(-b-D**0.5)/(2*a)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def check_twice(a,b,c):\n    if a!=0:\n        return (b*b) - (4*a*c)\n    else:\n        return (b*b) - (4*c)\n\ndef main():\n    a = int(input(\"Enter the value of a: \"))\n    b = int(input(\"Enter the value of b: \"))\n    c = int(input(\"Enter the value of c: \"))\n    result = check_twice(a,b,c)\n    if result == 0:\n        print(\"Both roots are equal\")\n    elif result < 0:\n        print(\"The roots are complex\")\n    else:\n        print(\"The roots are real\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef is_twice(a, b, c):\n    if a == 0:\n        if b == 0:\n            return False\n        else:\n            return True\n    else:\n        if b == 0:\n            return True\n        else:\n            return (sqrt(b**2 - 4*a*c) / (2*a)) == 2\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n\n    if is_twice(a, b, c):\n        print(\"True\")\n    else:\n        print(\"False\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 9.370583536698913,
      "candidate": "def check(a, b, c):\n    return (b * b) - (4 * a * c) == 0 or ((b * b) - (4 * a * c)) == 0\n\n\nprint(check(1, 3, 1))\nprint(check(1, 3, 2))"
    },
    {
      "rank": 13,
      "score": 9.234050852198141,
      "candidate": "import math\n\ndef is_root_twice(a, b, c):\n    if a == 0:\n        return False\n    else:\n        root1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n        root2 = (-b - math.sqrt(b**2 - 4*a*c))/(2*a)\n        if root1 == 2*root2:\n            return True\n        else:\n            return False\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(is_root_twice(a, b, c))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 9.226766272351448,
      "candidate": "def check(a, b, c):\n    if a != 0:\n        if a**2 - 4*b*c < 0:\n            return False\n        else:\n            x = (a**2 - 4*b*c)**0.5\n            if x == 0:\n                return True\n            else:\n                return False\n    else:\n        if b == 0 and c == 0:\n            return True\n        else:\n            return False\n\n\na = int(input(\"Enter value of a: \"))\nb = int(input(\"Enter value of b: \"))\nc = int(input(\"Enter value of c: \"))\n\nif check(a, b, c):\n    print(\"Yes\")\nelse:\n    print(\"No\")"
    },
    {
      "rank": 15,
      "score": 9.205959372648458,
      "candidate": "def check(a,b,c):\n    if(a==0):\n        if(b==0):\n            return \"The equation is invalid\"\n        else:\n            return \"The equation has a unique root\"\n    else:\n        d=(b**2)-(4*a*c)\n        if(d<0):\n            return \"The equation has no real root\"\n        elif(d==0):\n            return \"The equation has one real root\"\n        else:\n            return \"The equation has two real roots\"\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\nprint(check(a,b,c))"
    },
    {
      "rank": 16,
      "score": 9.183391466815202,
      "candidate": "def check_twice(a, b, c):\n    if (b**2-4*a*c) == 0:\n        return True\n    else:\n        return False\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nc = int(input(\"Enter c: \"))\n\nif check_twice(a, b, c) == True:\n    print(\"True\")\nelse:\n    print(\"False\")"
    },
    {
      "rank": 17,
      "score": 9.122564458729856,
      "candidate": "import math\n\ndef is_twice(a, b, c):\n    if a == 0:\n        return False\n\n    if b == 0:\n        return True\n\n    if a == 0:\n        return False\n\n    if math.sqrt(b ** 2 - 4 * a * c) % 1 == 0:\n        return True\n    else:\n        return False\n\nprint(is_twice(1, 3, -2))\nprint(is_twice(2, 3, -2))\nprint(is_twice(1, 3, -1))\nprint(is_twice(1, 3, 2))"
    },
    {
      "rank": 18,
      "score": 8.932217008005624,
      "candidate": "def quadratic_roots(a, b, c):\n    # a != 0\n    if a == 0:\n        return \"invalid\"\n\n    # delta = b^2 - 4 * a * c\n    delta = b ** 2 - 4 * a * c\n\n    if delta < 0:\n        return \"No solution\"\n\n    # x = (-b +- sqrt(delta)) / (2 * a)\n    x1 = (-b + delta ** 0.5) / (2 * a)\n    x2 = (-b - delta ** 0.5) / (2 * a)\n\n    if x1 == x2:\n        return \"x1 = x2\"\n\n    if x1 * 2 == x2:\n        return \"x1 is twice of x2\"\n\n    return \"x1 = %.2f, x2 = %.2f\" % (x1, x2)\n\n\ndef main():\n    a, b, c = map(int, input(\"Enter a, b, c (separated by comma): \").split(\",\"))\n    print(quadratic_roots(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 8.910084504002544,
      "candidate": "def quadratic(a, b, c):\n    return a*b*c\n\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nc = int(input(\"Enter c: \"))\n\nif (quadratic(a, b, c) > 0):\n    print(\"Quadratic is positive\")\nelif (quadratic(a, b, c) < 0):\n    print(\"Quadratic is negative\")\nelse:\n    print(\"Quadratic is zero\")"
    },
    {
      "rank": 20,
      "score": 8.902145503295483,
      "candidate": "import math\n\ndef quadratic_equation(a,b,c):\n    if a==0:\n        return \"a should not be zero\"\n    else:\n        discriminant = math.pow(b,2)-4*a*c\n        if discriminant==0:\n            return \"The roots of the equation are real and equal.\"\n        elif discriminant>0:\n            root1 = (-b+math.sqrt(discriminant))/(2*a)\n            root2 = (-b-math.sqrt(discriminant))/(2*a)\n            if root1==2*root2:\n                return \"The roots are real and equal\"\n            else:\n                return \"The roots are real and unequal\"\n        else:\n            return \"The roots are imaginary\"\n\nprint(quadratic_equation(1,2,3))\nprint(quadratic_equation(1,2,4))\nprint(quadratic_equation(1,2,0))"
    },
    {
      "rank": 21,
      "score": 8.855395696632057,
      "candidate": "from math import sqrt\n\n\ndef check_twice(a, b, c):\n    if a != 0:\n        d = (b**2) - (4*a*c)\n        if d == 0:\n            return True\n        if d > 0:\n            root = sqrt(d)\n            if (b - root) == (2*root) or (b + root) == (2*root):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\n\nprint(check_twice(1, 0, -1))\nprint(check_twice(1, 2, 1))\nprint(check_twice(2, 3, 1))\nprint(check_twice(2, 0, 0))\nprint(check_twice(1, 1, 0))"
    },
    {
      "rank": 22,
      "score": 8.850707355641543,
      "candidate": "def check(a, b, c):\n    if (b * b - 4 * a * c) < 0:\n        return False\n    else:\n        return (b * b - 4 * a * c) / (2 * a) == (b * -b - 4 * a * c) / (2 * a)\n\n\nprint(check(1, 4, 1))\nprint(check(1, 3, 1))\nprint(check(2, 3, 1))\nprint(check(1, 2, 1))"
    },
    {
      "rank": 23,
      "score": 8.81367773444215,
      "candidate": "import math\n\ndef quadratic_equation(a, b, c):\n    if a == 0:\n        return \"a cannot be zero.\"\n    else:\n        root_1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n        root_2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n        if root_1 == 2*root_2:\n            return True\n        else:\n            return False\n\nprint(quadratic_equation(3, 4, 1))\nprint(quadratic_equation(2, 3, 1))"
    },
    {
      "rank": 24,
      "score": 8.715724466237427,
      "candidate": "import math\n\ndef quadratic(a, b, c):\n    if a == 0:\n        return -c/b\n    else:\n        root = math.pow((-b + math.sqrt(math.pow(b, 2) - 4*a*c))/2*a, 0.5)\n        if root == 2*(-b + math.sqrt(math.pow(b, 2) - 4*a*c))/2*a:\n            return True\n        else:\n            return False\n\n\nprint(quadratic(1, -4, 3))\nprint(quadratic(1, -4, 5))"
    },
    {
      "rank": 25,
      "score": 8.692801520950061,
      "candidate": "import math\n\n\ndef quadratic_equation(a, b, c):\n    if a == 0:\n        return None\n    elif a < 0:\n        a = a * -1\n        b = b * -1\n        c = c * -1\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b / (2 * a)\n    else:\n        discriminant = math.sqrt(discriminant)\n        return (-b - discriminant) / (2 * a), (-b + discriminant) / (2 * a)\n\n\ndef quadratic_equation_2(a, b, c):\n    if a == 0:\n        return None\n    elif a < 0:\n        a = a * -1\n        b = b * -1\n        c = c * -1\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b / (2 * a)\n    else:\n        discriminant = math.sqrt(discriminant)\n        if (-b - discriminant) / (2 * a) == (-b + discriminant) / (2 * a):\n            return -b / (2 * a)\n        else:\n            return None\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    x1, x2 = quadratic_equation(a, b, c)\n    print(x1, x2)\n    x1, x2 = quadratic_equation_2(a, b, c)\n    print(x1, x2)"
    },
    {
      "rank": 26,
      "score": 8.625262456968262,
      "candidate": "import math\ndef check_quad_equation(a,b,c):\n    if a==0:\n        return None\n    else:\n        x1 = (-b + math.sqrt(b**2 - 4*a*c))/2*a\n        x2 = (-b - math.sqrt(b**2 - 4*a*c))/2*a\n        if x1==2*x2:\n            return True\n        else:\n            return False\n\nprint(check_quad_equation(1,2,1))\nprint(check_quad_equation(1,4,1))"
    },
    {
      "rank": 27,
      "score": 8.625142247198651,
      "candidate": "def check(a, b, c):\n    d = (b ** 2) - (4 * a * c)\n    if d > 0:\n        return False\n    elif d == 0:\n        return True\n    else:\n        return True\n\n\na = float(input(\"Enter a: \"))\nb = float(input(\"Enter b: \"))\nc = float(input(\"Enter c: \"))\nif check(a, b, c):\n    print(\"The root is twice\")\nelse:\n    print(\"The root is not twice\")"
    },
    {
      "rank": 28,
      "score": 8.616253589228675,
      "candidate": "def check(a, b, c):\n    if (b**2 - 4*a*c) > 0:\n        root1 = (-b + (b**2 - 4*a*c)**0.5) / 2*a\n        root2 = (-b - (b**2 - 4*a*c)**0.5) / 2*a\n        if root1 == 2*root2:\n            return True\n    return False\n\n\nprint(check(1, 5, 6))\nprint(check(1, 2, 1))\nprint(check(1, 0, 0))"
    },
    {
      "rank": 29,
      "score": 8.608819999274287,
      "candidate": "from math import sqrt\ndef check_quadratic_equation(a, b, c):\n    if a != 0:\n        root1 = (-b + sqrt(b**2 - 4*a*c)) / (2*a)\n        root2 = (-b - sqrt(b**2 - 4*a*c)) / (2*a)\n        if root1 == 2*root2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
      "rank": 30,
      "score": 8.60156811074208,
      "candidate": "def quadratic_equation(a,b,c):\n    if a == 0:\n        if b == 0:\n            print(\"The equation is a tautology\")\n        else:\n            print(\"The equation has no solution\")\n    else:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        if x1 == x2*2:\n            print(\"The roots are equal\")\n        else:\n            print(\"The roots are not equal\")\n\na = int(input())\nb = int(input())\nc = int(input())\nquadratic_equation(a,b,c)\n\n\"\"\"\nINPUT 1:\nEnter the value of a: 1\nEnter the value of b: 2\nEnter the value of c: 1\n\nOUTPUT 1:\nThe roots are equal\n\nINPUT 2:\nEnter the value of a: 1\nEnter the value of b: 2\nEnter the value of c: 3\n\nOUTPUT 2:\nThe roots are not equal\n\"\"\""
    },
    {
      "rank": 31,
      "score": 8.548876241946822,
      "candidate": "import math\ndef quadratic_equation(a,b,c):\n    d = b*b - 4*a*c\n    if(d < 0):\n        return False\n    else:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        if(x1 == x2 or x1*2 == x2):\n            return True\n        else:\n            return False\n\nprint(quadratic_equation(2, 3, 1))\nprint(quadratic_equation(1, 2, 1))"
    },
    {
      "rank": 32,
      "score": 8.542875062379007,
      "candidate": "def is_twice(a, b, c):\n    \"\"\"\n    This function will check whether one root of the quadratic equation is twice of the other or not.\n    :param a: a\n    :param b: b\n    :param c: c\n    :return: true or false\n    \"\"\"\n    if (b * b - 4 * a * c) == 0:\n        return True\n    elif (b * b - 4 * a * c) > 0:\n        if (b + b * b / (2 * a)) == 2 * (b - b * b / (2 * a)):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nc = int(input(\"Enter c: \"))\n\nif is_twice(a, b, c):\n    print(\"True\")\nelse:\n    print(\"False\")"
    },
    {
      "rank": 33,
      "score": 8.53012858503943,
      "candidate": "def check_root(a, b, c):\n    if (a*b*2) == c:\n        return True\n    else:\n        return False\n\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\nif check_root(a, b, c) == True:\n    print(\"The roots are twice\")\nelse:\n    print(\"The roots are not twice\")"
    },
    {
      "rank": 34,
      "score": 8.478208546788407,
      "candidate": "import math\n\ndef check_twice(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"Roots are Complex\"\n    elif d == 0:\n        root = -b/(2*a)\n        return \"Root is \" + str(root)\n    elif d > 0:\n        root1 = (-b + math.sqrt(d)) / (2*a)\n        root2 = (-b - math.sqrt(d)) / (2*a)\n        if root1 == 2*root2:\n            return \"Root is \" + str(root1)\n        else:\n            return \"Roots are not twice\"\n\nprint(check_twice(1, 3, 1))\nprint(check_twice(1, 5, 1))\nprint(check_twice(1, 4, 1))"
    },
    {
      "rank": 35,
      "score": 8.408439383654278,
      "candidate": "def is_twice(a, b, c):\n    if b**2 - 4*a*c < 0:\n        return \"Imaginary\"\n    elif b**2 - 4*a*c == 0:\n        return \"Two equal roots\"\n    else:\n        if b > 0:\n            if 2*c/b < 0:\n                return \"Two roots are twice\"\n            else:\n                return \"No root is twice\"\n        else:\n            if 2*c/b > 0:\n                return \"Two roots are twice\"\n            else:\n                return \"No root is twice\"\n\n\nprint(is_twice(2, 3, -1))\nprint(is_twice(1, -6, 6))\nprint(is_twice(1, 0, -5))"
    },
    {
      "rank": 36,
      "score": 8.351614956112536,
      "candidate": "def check(a, b, c):\n    if a == 0:\n        if b != 0:\n            return True\n        return False\n    else:\n        d = (b ** 2) - (4 * a * c)\n        if d == 0:\n            return True\n        else:\n            return False\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\n\nif check(a, b, c):\n    print(\"The root is twice\")\nelse:\n    print(\"The root is not twice\")"
    },
    {
      "rank": 37,
      "score": 8.334608500525688,
      "candidate": "def check(a, b, c):\n    if (b ** 2) - (4 * a * c) > 0:\n        return 1\n    elif (b ** 2) - (4 * a * c) == 0:\n        return 0\n    else:\n        return -1\n\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\nprint(check(a, b, c))"
    },
    {
      "rank": 38,
      "score": 8.331556294201176,
      "candidate": "from math import sqrt\n\n\ndef quadratic(a, b, c):\n    if a == 0:\n        if b == 0 and c == 0:\n            return \"Invalid equation\"\n        else:\n            return \"x=0\"\n    elif b == 0:\n        return \"Invalid equation\"\n    else:\n        if ((-b / (2 * a)) ** 2) - (c / a) == 0:\n            return \"x=0\"\n        else:\n            if (-b / (2 * a)) * 2 == sqrt(((-b / (2 * a)) ** 2) - (c / a)):\n                return \"x=2\"\n            else:\n                return \"x1 and x2\"\n\n\nprint(quadratic(1, 2, 1))\nprint(quadratic(1, 1, 1))\nprint(quadratic(1, 1, 0))\nprint(quadratic(1, 0, 0))\nprint(quadratic(1, 0, 1))"
    },
    {
      "rank": 39,
      "score": 8.327367757082776,
      "candidate": "def quadratic_roots(a, b, c):\n    if a == 0:\n        print(\"a can't be zero\")\n    else:\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            print(\"There are no roots\")\n        elif discriminant == 0:\n            root = -b/(2*a)\n            print(\"There is one root\", root)\n        else:\n            root1 = (-b + (discriminant**0.5))/(2*a)\n            root2 = (-b - (discriminant**0.5))/(2*a)\n            print(\"There are two roots\", root1, root2)\n\nquadratic_roots(2, 3, 1)"
    },
    {
      "rank": 40,
      "score": 8.294940769211511,
      "candidate": "def quadratic(a, b, c):\n    if a == 0:\n        if b == 0 and c == 0:\n            return \"The roots are 0\"\n        else:\n            return \"The roots are imaginary\"\n\n    elif b * b - 4 * a * c < 0:\n        return \"The roots are imaginary\"\n    else:\n        return \"The roots are real\"\n\n\nprint(quadratic(2, 3, 1))"
    },
    {
      "rank": 41,
      "score": 8.2938925966498,
      "candidate": "def quadratic_equation(a, b, c):\n    discriminant = (b**2) - (4*a*c)\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        if root1 == 2*root2:\n            return True\n        return False\n    return \"Roots are imaginary\"\n\n\nprint(quadratic_equation(2, 3, 1))\nprint(quadratic_equation(3, 4, 1))\nprint(quadratic_equation(1, 1, 1))"
    },
    {
      "rank": 42,
      "score": 8.289838256518838,
      "candidate": "def check(a,b,c):\n    if a!=0:\n        d = b**2-4*a*c\n        if d==0:\n            return \"The roots are equal\"\n        elif d>0:\n            root1 = (-b+d**0.5)/(2*a)\n            root2 = (-b-d**0.5)/(2*a)\n            if root1==2*root2:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\nprint(check(1,3,2))\nprint(check(1,3,4))\nprint(check(1,3,5))\nprint(check(1,3,0))"
    },
    {
      "rank": 43,
      "score": 8.251903304236286,
      "candidate": "import math\n\ndef check_root(a,b,c):\n    if a==0:\n        if b==0 and c==0:\n            return \"All are roots\"\n        else:\n            return \"No roots\"\n    \n    if (b**2-4*a*c)<0:\n        return \"No roots\"\n    \n    else:\n        x1=(-b+math.sqrt(b**2-4*a*c))/(2*a)\n        x2=(-b-math.sqrt(b**2-4*a*c))/(2*a)\n\n        if x1==2*x2:\n            return \"One root is twice of the other\"\n        else:\n            return \"No roots\"\n\na=float(input(\"Enter value of a: \"))\nb=float(input(\"Enter value of b: \"))\nc=float(input(\"Enter value of c: \"))\n\nprint(check_root(a,b,c))"
    },
    {
      "rank": 44,
      "score": 8.211579567659316,
      "candidate": "from math import sqrt\n\ndef check_quadratic(a, b, c):\n    if (a*b) >= 0:\n        return True\n    else:\n        return False\n\ndef check_quadratic_solution(a, b, c):\n    if (a*b) >= 0:\n        return True\n    else:\n        return False\n\nprint(check_quadratic(2, 3, 1))\nprint(check_quadratic(1, 1, 1))\nprint(check_quadratic(1, 3, 1))\nprint(check_quadratic(1, 0, 0))\n\nprint(check_quadratic_solution(1, 0, 0))\n\nprint(sqrt(1))\nprint(sqrt(4))\nprint(sqrt(9))\nprint(sqrt(25))\nprint(sqrt(16))\n\n\ndef check_quadratic_solution(a, b, c):\n    if (a*b) >= 0:\n        return True\n    else:\n        return False\n\nprint(check_quadratic_solution(1, 0, 0))\n\nprint(sqrt(1))\nprint(sqrt(4))\nprint(sqrt(9))\nprint(sqrt(25))\nprint(sqrt(16))"
    },
    {
      "rank": 45,
      "score": 8.209707251476969,
      "candidate": "def check(a, b, c):\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return \"All roots are real\"\n            else:\n                return \"No real roots\"\n        else:\n            return \"One root real and the other complex\"\n    else:\n        if b == 0:\n            return \"No real roots\"\n        else:\n            x1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n            x2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n            if x1 == x2 * 2:\n                return \"The roots are real and equal\"\n            else:\n                return \"The roots are real and not equal\"\n\na = float(input(\"Enter a: \"))\nb = float(input(\"Enter b: \"))\nc = float(input(\"Enter c: \"))\nprint(check(a, b, c))"
    },
    {
      "rank": 46,
      "score": 8.2048573255218,
      "candidate": "def check(a,b,c):\n    if a == 0:\n        if b == 0 and c == 0:\n            return True\n        else:\n            return False\n    elif b*b - 4*a*c < 0:\n        return False\n    else:\n        if b*b - 4*a*c == 0:\n            return True\n        else:\n            return False\n\nprint(check(1, 1, 2))\nprint(check(1, 1, 1))\nprint(check(1, 1, 3))\nprint(check(1, 1, 0))"
    },
    {
      "rank": 47,
      "score": 8.193565922652176,
      "candidate": "def check_quad_equation(a, b, c):\n    if (b*b - 4*a*c) > 0:\n        x1 = (-b + (b*b - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b*b - 4*a*c)**0.5)/(2*a)\n        if x1 == 2*x2:\n            return True\n    return False\n\nprint(check_quad_equation(1, 5, 1))\nprint(check_quad_equation(1, 1, 1))\nprint(check_quad_equation(1, 1, 0))\nprint(check_quad_equation(1, 0, 0))"
    },
    {
      "rank": 48,
      "score": 8.179564342560925,
      "candidate": "def check_quadratic_equation(a, b, c):\n    if a == 0:\n        return \"The equation is not a quadratic equation.\"\n    discriminant = b**2 - 4*a*c\n    if discriminant == 0:\n        return True\n    else:\n        return False\n\ndef main():\n    print(\"Quadratic equation checker\")\n    a = float(input(\"Enter the value of 'a': \"))\n    b = float(input(\"Enter the value of 'b': \"))\n    c = float(input(\"Enter the value of 'c': \"))\n    if check_quadratic_equation(a, b, c):\n        print(\"One root of the quadratic equation is twice of the other.\")\n    else:\n        print(\"One root of the quadratic equation is not twice of the other.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.172253082181854,
      "candidate": "def check_twice(a, b, c):\n    root1 = (-b + (b**2 - 4*a*c)**(1/2))/(2*a)\n    root2 = (-b - (b**2 - 4*a*c)**(1/2))/(2*a)\n    if root1 == 2*root2:\n        return True\n    else:\n        return False\n\nprint(check_twice(1, 3, 2))\nprint(check_twice(1, 4, 1))"
    },
    {
      "rank": 50,
      "score": 8.163300679823958,
      "candidate": "from math import sqrt\n\ndef quadratic(a, b, c):\n    if a == 0:\n        return -c/b\n    else:\n        if (b**2 - 4*a*c) >= 0:\n            return (-b + sqrt(b**2 - 4*a*c))/(2*a), (-b - sqrt(b**2 - 4*a*c))/(2*a)\n        else:\n            return \"Roots are imaginary\"\n\nprint(quadratic(2, 1, 1))\nprint(quadratic(1, 2, 1))\nprint(quadratic(1, -1, -2))"
    },
    {
      "rank": 51,
      "score": 8.143591138329747,
      "candidate": "import math\n\ndef check(a,b,c):\n    d = (b**2) - (4*a*c)\n    if d == 0:\n        return True\n    elif d > 0:\n        root = math.sqrt(d)/(2*a)\n        if root == 2:\n            return True\n    return False\n\nprint(check(1,1,-1))\nprint(check(1,1,1))\nprint(check(1,1,3))\nprint(check(1,1,4))\nprint(check(1,1,5))\nprint(check(1,1,6))\nprint(check(1,1,7))\nprint(check(1,1,8))\nprint(check(1,1,9))\nprint(check(1,1,10))"
    },
    {
      "rank": 52,
      "score": 8.121884567141883,
      "candidate": "def quadratic(a, b, c):\n    if a == 0:\n        return \"not a quadratic equation\"\n    elif (b**2 - 4 * a * c) < 0:\n        return \"complex roots\"\n    else:\n        return (b**2 - 4 * a * c)\n\n\nprint(quadratic(2, 3, 1))\nprint(quadratic(1, 4, 1))\nprint(quadratic(1, 1, 1))"
    },
    {
      "rank": 53,
      "score": 8.105983444291466,
      "candidate": "import math\n\ndef is_root_twice(a, b, c):\n    discriminant = b*b - 4*a*c\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    if root1 == 2*root2:\n        return True\n    else:\n        return False\n\nprint(is_root_twice(1, 1, 1))"
    },
    {
      "rank": 54,
      "score": 8.040197642997851,
      "candidate": "import math\n\n\ndef is_twice(a, b, c):\n    try:\n        root = math.sqrt(b ** 2 - 4 * a * c)\n        if root * 2 == b / a:\n            return True\n        return False\n    except:\n        return False\n\n\nprint(is_twice(1, 1, 1))\nprint(is_twice(1, 2, 1))\nprint(is_twice(1, 4, 1))\nprint(is_twice(1, 9, 1))\nprint(is_twice(1, 16, 1))"
    },
    {
      "rank": 55,
      "score": 7.990432406683839,
      "candidate": "def quadratic_equation(a, b, c):\n    if a == 0:\n        print(\"a cannot be zero\")\n        return False\n\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"No real root\")\n        return False\n    elif discriminant == 0:\n        print(\"One root\")\n        return False\n    else:\n        root = discriminant**0.5\n        root_1 = (-b + root)/2*a\n        root_2 = (-b - root)/2*a\n        if root_1 == 2*root_2:\n            print(\"The roots are equal\")\n        else:\n            print(\"The roots are not equal\")\n        return False\n\n\nif __name__ == \"__main__\":\n    quadratic_equation(1, 1, 1)\n    quadratic_equation(1, 2, 1)\n    quadratic_equation(1, 3, 1)"
    },
    {
      "rank": 56,
      "score": 7.915588979966494,
      "candidate": "def check(a, b, c):\n    if (a**2 - 4*b) == 0:\n        print(\"The roots are equal\")\n    elif (a**2 - 4*b) < 0:\n        print(\"The roots are imaginary\")\n    else:\n        root1 = (-b + a**2) / (2*a)\n        root2 = (-b - a**2) / (2*a)\n        if root1 == 2*root2:\n            print(\"The roots are equal\")\n        else:\n            print(\"The roots are not equal\")\n\n\na, b, c = [int(x) for x in input(\"Enter a, b, c : \").split()]\ncheck(a, b, c)"
    },
    {
      "rank": 57,
      "score": 7.8912769574414305,
      "candidate": "def check(a,b,c):\n    if (b**2 - 4*a*c) == 0:\n        return True\n    else:\n        return False\n\na,b,c = map(int,input().split())\nprint(check(a,b,c))"
    },
    {
      "rank": 58,
      "score": 7.868947655733293,
      "candidate": "import math\n\n\ndef quadratic(a, b, c):\n    if a == 0:\n        if b == 0:\n            return \"both roots are equal to zero\"\n        else:\n            return -c / b\n    else:\n        d = b ** 2 - 4 * a * c\n        if d < 0:\n            return \"No real roots\"\n        else:\n            return (-b + math.sqrt(d)) / 2 * a, (-b - math.sqrt(d)) / 2 * a\n\n\nprint(quadratic(3, 4, 1))"
    },
    {
      "rank": 59,
      "score": 7.738292593776799,
      "candidate": "def quadratic_equation(a, b, c):\n    if a == 0:\n        if b == 0:\n            return \"This is a line\"\n        else:\n            return \"This is a line with a point\"\n    else:\n        x1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        x2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        if x1 == 2 * x2:\n            return \"The root of the quadratic equation is twice of the other\"\n        else:\n            return \"The root of the quadratic equation is not twice of the other\"\n\n\nprint(quadratic_equation(1, 1, 1))\nprint(quadratic_equation(1, 2, 1))\nprint(quadratic_equation(2, 1, 1))"
    },
    {
      "rank": 60,
      "score": 7.7320703513377165,
      "candidate": "def quadratic_equation_check(a,b,c):\n    if (b**2) - (4*a*c) > 0:\n        return False\n    elif (b**2) - (4*a*c) == 0:\n        return True\n    else:\n        return True\n\nprint(quadratic_equation_check(1, 5, 6))"
    },
    {
      "rank": 61,
      "score": 7.705183449260731,
      "candidate": "def check_quadratic(a, b, c):\n    return (a*c) == (b**2)\n\nif __name__ == '__main__':\n    a = int(input(\"Enter value of a: \"))\n    b = int(input(\"Enter value of b: \"))\n    c = int(input(\"Enter value of c: \"))\n\n    if check_quadratic(a, b, c):\n        print(\"The root of quadratic equation is twice of the other.\")\n    else:\n        print(\"The root of quadratic equation is not twice of the other.\")\n\n\"\"\"\nOutput:\n>>> check_quadratic(1, 2, 3)\nThe root of quadratic equation is not twice of the other.\n>>> check_quadratic(1, 4, 4)\nThe root of quadratic equation is twice of the other.\n\"\"\""
    },
    {
      "rank": 62,
      "score": 7.4878043221155455,
      "candidate": "def check(a, b, c):\n    if (b*b) - (4*a*c) < 0:\n        return None\n    else:\n        root = (-b + ((b*b) - (4*a*c))**(1/2))/(2*a)\n        if root == 2*(-b/(2*a)):\n            return True\n        else:\n            return False\n\nprint(check(1, 3, 1))\nprint(check(1, 3, 2))"
    },
    {
      "rank": 63,
      "score": 7.464609382504557,
      "candidate": "def checkTwice(a, b, c):\n    x = (-b + (b**2 - 4*a*c)**0.5)/2*a\n    y = (-b - (b**2 - 4*a*c)**0.5)/2*a\n    if x/y == 2:\n        return True\n    return False\n\nprint(checkTwice(1, -12, 11))\nprint(checkTwice(1, 8, 1))\nprint(checkTwice(1, 8, 0))"
    },
    {
      "rank": 64,
      "score": 7.134571892399572,
      "candidate": "def check(a, b, c):\n    if a == 0:\n        return False\n    if b ** 2 - 4 * a * c == 0:\n        return True\n    elif (b ** 2 - 4 * a * c) > 0:\n        root1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        root2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        if root1 == 2 * root2:\n            return True\n    return False\n\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nc = int(input(\"Enter c: \"))\n\nif check(a, b, c):\n    print(\"Yes\")\nelse:\n    print(\"No\")"
    },
    {
      "rank": 65,
      "score": 3.5536931639277487,
      "candidate": "def check_root(a, b, c):\n    root1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    root2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    if root1/root2 == 2:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(check_root(a, b, c))\n\n\"\"\"\na, b, c = 1, 2, 1\n\"\"\""
    },
    {
      "rank": 66,
      "score": 3.527633556811759,
      "candidate": "def is_root_twice(a, b, c):\n    root1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    root2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return root1 == root2 * 2 or root2 == root1 * 2\n\n\nprint(is_root_twice(1, -12, 15))\nprint(is_root_twice(1, 2, 1))"
    },
    {
      "rank": 67,
      "score": 3.3805640014388096,
      "candidate": "# Solution\n\n\ndef check_quadratic_equation(a, b, c):\n    \"\"\"\n    >>> check_quadratic_equation(1, 1, 1)\n    (0, 2)\n    >>> check_quadratic_equation(1, 1, 0)\n    (1, -1)\n    >>> check_quadratic_equation(1, 1, 2)\n    (1, -2)\n    >>> check_quadratic_equation(1, 1, 3)\n    (None, None)\n    \"\"\"\n    if a == 0:\n        if b == 0 and c == 0:\n            return None, None\n        else:\n            return None, -c / b\n    else:\n        D = b ** 2 - 4 * a * c\n        if D < 0:\n            return None, None\n        elif D == 0:\n            return -b / (2 * a), -b / (2 * a)\n        else:\n            x1 = (-b + D ** 0.5) / (2 * a)\n            x2 = (-b - D ** 0.5) / (2 * a)\n            if x1 == x2 * 2:\n                return x1, x2\n            else:\n                return None, None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 3.371159828098542,
      "candidate": "def check(a, b, c):\n    if ((b*b) - (4*a*c)) == 0:\n        return True\n    elif ((b*b) - (4*a*c)) > 0:\n        if ((-b + (b*b - 4*a*c)**0.5) / (2*a)) == ((-b - (b*b - 4*a*c)**0.5) / (2*a)):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\n\nprint(check(a, b, c))"
    },
    {
      "rank": 69,
      "score": 3.361271843241129,
      "candidate": "def check_quadratic_equation(a, b, c):\n    if a == 0:\n        return None\n    else:\n        if (b**2 - 4*a*c) >= 0:\n            return ((-b + (b**2 - 4*a*c)**0.5)/(2*a)) == ((-b - (b**2 - 4*a*c)**0.5)/(2*a))\n        else:\n            return False\n\n\nprint(check_quadratic_equation(1, 5, 6))\nprint(check_quadratic_equation(1, 1, 1))\nprint(check_quadratic_equation(1, 0, 0))"
    },
    {
      "rank": 70,
      "score": 3.2961161683571483,
      "candidate": "import math\n\ndef quadratic_equation(a, b, c):\n    if a == 0:\n        if b == 0:\n            return math.inf\n        return -c/b\n    D = b**2 - 4*a*c\n    if D >= 0:\n        return (-b + math.sqrt(D))/(2*a), (-b - math.sqrt(D))/(2*a)\n    return None\n\n\ndef check_root_twice(a, b, c):\n    root1, root2 = quadratic_equation(a, b, c)\n    return root1 == 2*root2\n\n\nprint(check_root_twice(1, -3, 2))\nprint(check_root_twice(1, -3, 4))"
    },
    {
      "rank": 71,
      "score": 3.276276502495047,
      "candidate": "def check(a, b, c):\n    if a != 0:\n        root1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        root2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    else:\n        root1 = -c / b\n        root2 = -c / b\n    if root1 == 2 * root2:\n        return True\n    else:\n        return False\n\n\na = int(input(\"Enter value of a: \"))\nb = int(input(\"Enter value of b: \"))\nc = int(input(\"Enter value of c: \"))\n\nprint(check(a, b, c))"
    },
    {
      "rank": 72,
      "score": 3.2331678737162495,
      "candidate": "def check_root(a, b, c):\n    if a == 0:\n        return False\n    else:\n        return (b**2 - 4*a*c) == 0\n\nprint(check_root(2, 3, 1))\nprint(check_root(1, 1, 1))"
    },
    {
      "rank": 73,
      "score": 3.2202034639827124,
      "candidate": "def check_quadratic(a, b, c):\n    if a == 0:\n        return -1\n    else:\n        D = b**2 - 4*a*c\n        if D < 0:\n            return 0\n        else:\n            if D == 0:\n                return 2\n            else:\n                if (b + D**0.5)/2/a == (b - D**0.5)/2/a:\n                    return 1\n                else:\n                    return 0\n\n\nprint(check_quadratic(1, -10, 2))"
    },
    {
      "rank": 74,
      "score": 3.1352512866044417,
      "candidate": "def quadratic(a,b,c):\n    if a==0:\n        return \"error\"\n    else:\n        D=b**2-4*a*c\n        if D==0:\n            return \"Two roots are equal\"\n        elif D>0:\n            return \"Two different roots\"\n        else:\n            return \"No real roots\"\n\na=int(input(\"Enter the value of a: \"))\nb=int(input(\"Enter the value of b: \"))\nc=int(input(\"Enter the value of c: \"))\n\nprint(quadratic(a,b,c))\n\n\"\"\"\nThe formula to find the roots of quadratic equation is:\n\nLet a,b,c be the co-efficients of the quadratic equation ax^2+bx+c=0.\n\nThen the roots of the quadratic equation are:\n\n1.If a=0, then the roots are -c/b.\n\n2.Otherwise, the value of discriminant is D=b^2-4ac.\n\nIf D>0, then the roots are real and distinct.\n\nIf D=0, then the roots are real and equal.\n\nIf D<0, then the roots are imaginary.\n\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\n\ndef check_root(a,b,c):\n    if a==0:\n        return \"error\"\n    else:\n        D=b**2-4*a*c\n        if D==0:\n            return \"Two roots are equal\"\n        elif D>0:\n            root1=(-b+D**0.5)/2*a\n            root2=(-b-D**0.5)/2*a\n            if root1==2*root2:\n                return \"One root is twice of the other\"\n            else:\n                return \"The roots are not twice of each other\"\n        else:\n            return \"No real roots\"\n\na=int(input(\"Enter the value of a: \"))\nb=int(input(\"Enter the value of b: \"))\nc=int(input(\"Enter the value of c: \"))\n\nprint("
    },
    {
      "rank": 75,
      "score": 3.128560525744229,
      "candidate": "def check_twice(a, b, c):\n    \"\"\"\n    a, b and c are the coefficients of the quadratic equation\n    \"\"\"\n    if b**2 - 4*a*c >= 0:\n        root1 = (-b + (b**2 - 4*a*c)**0.5)/2*a\n        root2 = (-b - (b**2 - 4*a*c)**0.5)/2*a\n    else:\n        root1 = (-b - (b**2 - 4*a*c)**0.5)/2*a\n        root2 = (-b + (b**2 - 4*a*c)**0.5)/2*a\n\n    if root1 == 2*root2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ncheck_twice(1, 3, 2)"
    },
    {
      "rank": 76,
      "score": 3.119254835305283,
      "candidate": "# Solution\n\n\ndef check_twice(a, b, c):\n    \"\"\"\n    a: int\n    b: int\n    c: int\n\n    return: bool\n    \"\"\"\n    if b**2 - 4*a*c <= 0:\n        return False\n    else:\n        return (-b + b**2 - 4*a*c) / (2*a) == (-b - b**2 - 4*a*c) / (2*a)\n\n\n# Test cases\nprint(check_twice(1, 0, 0))\nprint(check_twice(2, 3, 1))"
    },
    {
      "rank": 77,
      "score": 3.116670228982126,
      "candidate": "def check_quadratic_equation(a, b, c):\n    if a != 0:\n        d = b**2 - 4*a*c\n        if d == 0:\n            return True\n        elif d < 0:\n            return False\n        else:\n            if b < 0:\n                return (b - math.sqrt(d))/(2*a) == -(b + math.sqrt(d))/(2*a)\n            else:\n                return (b + math.sqrt(d))/(2*a) == -(b - math.sqrt(d))/(2*a)\n    else:\n        return False\n\n\nprint(check_quadratic_equation(1, 0, 0))\nprint(check_quadratic_equation(1, 1, 0))\nprint(check_quadratic_equation(1, 1, 1))\nprint(check_quadratic_equation(1, 1, 2))\nprint(check_quadratic_equation(1, 1, 3))\nprint(check_quadratic_equation(1, 1, 4))\nprint(check_quadratic_equation(1, 1, 5))\nprint(check_quadratic_equation(1, 1, 6))\nprint(check_quadratic_equation(1, 1, 7))\nprint(check_quadratic_equation(1, 1, 8))\nprint(check_quadratic_equation(1, 1, 9))\nprint(check_quadratic_equation(1, 1, 10))\nprint(check_quadratic_equation(1, 1, 11))\nprint(check_quadratic_equation(1, 1, 12))\nprint(check_quadratic_equation(1, 1, 13))\nprint(check_quadratic_equation(1, 1, 14))\nprint(check_quadratic_equation(1, 1, 15))\nprint(check_quadratic_equation(1, 1, 16))\nprint(check_quadratic_equation"
    },
    {
      "rank": 78,
      "score": 3.0871064177637724,
      "candidate": "def check_quadratic_equation(a, b, c):\n    \"\"\"\n    >>> check_quadratic_equation(1, 0, 0)\n    'The roots are real and distinct.'\n    >>> check_quadratic_equation(1, 1, 1)\n    'The roots are real and equal.'\n    >>> check_quadratic_equation(1, 0, 1)\n    'The roots are real and complex.'\n    >>> check_quadratic_equation(0, 0, 0)\n    'The roots are real and equal.'\n    >>> check_quadratic_equation(1, 0, 1)\n    'The roots are real and complex.'\n    \"\"\"\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return \"The roots are real and equal.\"\n            else:\n                return \"The roots are real and complex.\"\n        else:\n            return \"The roots are real and distinct.\"\n    else:\n        D = (b ** 2) - (4 * a * c)\n        if D < 0:\n            return \"The roots are real and complex.\"\n        elif D == 0:\n            return \"The roots are real and equal.\"\n        else:\n            return \"The roots are real and distinct.\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 3.0399321322955517,
      "candidate": "def is_twice(a, b, c):\n    root1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    root2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return root1 / 2 == root2 or root2 / 2 == root1\n\n\nprint(is_twice(1, 0, -1))\nprint(is_twice(1, 1, 1))\nprint(is_twice(1, 3, 2))\nprint(is_twice(1, 2, 2))\nprint(is_twice(1, 1, 2))"
    },
    {
      "rank": 80,
      "score": 3.033033879552781,
      "candidate": "# Solution\n\n\ndef check_quad(a, b, c):\n    if a == 0:\n        return \"Not a quadratic equation\"\n    else:\n        root1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        root2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        if root1 == 2*root2:\n            return \"True\"\n        else:\n            return \"False\"\n\n\n# Tests\ndef test_check_quad():\n    assert check_quad(1, 0, -4) == \"True\"\n    assert check_quad(1, 0, -1) == \"False\"\n    assert check_quad(1, 0, 0) == \"Not a quadratic equation\"\n\n\ntest_check_quad()"
    },
    {
      "rank": 81,
      "score": 3.0313369445657417,
      "candidate": "from decimal import Decimal\n\n\ndef quadratic_equation(a, b, c):\n    if a == 0:\n        if b == 0:\n            return -1\n        else:\n            return -c/b\n    else:\n        x = (-b + Decimal.sqrt(Decimal(b**2 - 4*a*c))) / (2*a)\n        y = (-b - Decimal.sqrt(Decimal(b**2 - 4*a*c))) / (2*a)\n        if x == 2*y:\n            return True\n        else:\n            return False\n\n\na, b, c = map(int, input().split())\nresult = quadratic_equation(a, b, c)\nif result is True:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
    },
    {
      "rank": 82,
      "score": 2.995140999094344,
      "candidate": "def quadratic_equation(a, b, c):\n    if (a*c) == b*b:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 83,
      "score": 2.9871026259204174,
      "candidate": "from math import sqrt\n\n\ndef check(a, b, c):\n    if a == 0:\n        if b == 0 and c == 0:\n            return True\n        else:\n            return False\n    discriminant = sqrt(b ** 2 - 4 * a * c)\n    if discriminant == 0:\n        return True\n    else:\n        return False\n\n\na = int(input(\"Enter value of a: \"))\nb = int(input(\"Enter value of b: \"))\nc = int(input(\"Enter value of c: \"))\n\nif check(a, b, c):\n    print(\"Yes\")\nelse:\n    print(\"No\")"
    },
    {
      "rank": 84,
      "score": 2.9583666183402335,
      "candidate": "# def quadratic(a,b,c):\n#     if a == 0:\n#         return 0\n#     else:\n#         return (b**2 - 4*a*c)\n\n# def is_double_root(a,b,c):\n#     if a == 0:\n#         return \"Invalid Input\"\n#     else:\n#         root = (b**2 - 4*a*c)\n#         if root == 0:\n#             return True\n#         else:\n#             return False\n\n# print(is_double_root(3,4,5))\n\n\n# def quadratic(a,b,c):\n#     if a == 0:\n#         return 0\n#     else:\n#         return (-b+((b**2 - 4*a*c)**0.5))/(2*a)\n\n# print(quadratic(1,1,1))\n\n\n# def quadratic(a,b,c):\n#     if a == 0:\n#         return 0\n#     else:\n#         return (-b+((b**2 - 4*a*c)**0.5))/(2*a)\n\n# print(quadratic(1,1,1))\n\ndef quadratic(a,b,c):\n    if a == 0:\n        return 0\n    else:\n        return (-b+((b**2 - 4*a*c)**0.5))/(2*a)\n\nprint(quadratic(1,1,1))"
    },
    {
      "rank": 85,
      "score": 2.9502248515783736,
      "candidate": "# solution\ndef check_root(a, b, c):\n    \"\"\"\n    :param a: int, float\n    :param b: int, float\n    :param c: int, float\n    :return: bool\n    \"\"\"\n    if (b ** 2 - 4 * a * c) < 0:\n        return False\n    else:\n        root1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        root2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        if root1 == 2 * root2:\n            return True\n        else:\n            return False\n\n\n# test\na, b, c = 1, -5, 6\nprint(check_root(a, b, c))\n\na, b, c = 1, -4, 4\nprint(check_root(a, b, c))"
    },
    {
      "rank": 86,
      "score": 2.915710695498295,
      "candidate": "# Solution\n\n\ndef check_twice(a, b, c):\n    \"\"\"\n    >>> check_twice(1, 5, 4)\n    False\n    >>> check_twice(1, 5, 8)\n    True\n    \"\"\"\n    x1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    x2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return x1 == 2 * x2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 2.8949902500744202,
      "candidate": "# Solution\n\n\ndef check_twice(a, b, c):\n    \"\"\"\n    >>> check_twice(1, 4, 1)\n    True\n    >>> check_twice(1, 4, 4)\n    False\n    \"\"\"\n    return (b**2 - 4*a*c)**0.5 == 2*b\n\n\n# Demo\na = 1\nb = 4\nc = 1\nprint(check_twice(a, b, c))\n\na = 1\nb = 4\nc = 4\nprint(check_twice(a, b, c))"
    },
    {
      "rank": 88,
      "score": 2.8341700424544767,
      "candidate": "def is_twice(a, b, c):\n    if a == 0:\n        return False\n    d = b * b - 4 * a * c\n    if d < 0:\n        return False\n    if d == 0:\n        return True\n    return (b + d ** 0.5) / (2 * a) == (b - d ** 0.5) / (2 * a)\n\n\na = 1\nb = 2\nc = 1\nprint(is_twice(a, b, c))"
    },
    {
      "rank": 89,
      "score": 2.8331696305875136,
      "candidate": "def check_root(a, b, c):\n    return (b**2 - 4*a*c) < 0\n\n\nprint(check_root(1, 5, 6))"
    },
    {
      "rank": 90,
      "score": 2.813422721421487,
      "candidate": "def is_root_twice(a, b, c):\n    if b == 0:\n        if c == 0:\n            return \"Both root is equal.\"\n        else:\n            return \"There is no root.\"\n    else:\n        if (b**2) - (4 * a * c) == 0:\n            return \"There is one root is twice of the other.\"\n        else:\n            return \"There is no root.\"\n\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nc = int(input(\"Enter c: \"))\nprint(is_root_twice(a, b, c))"
    },
    {
      "rank": 91,
      "score": 2.78377007162923,
      "candidate": "def quadratic(a, b, c):\n    if a != 0:\n        root1 = (-b + ((b**2) - (4 * a * c))**0.5) / (2 * a)\n        root2 = (-b - ((b**2) - (4 * a * c))**0.5) / (2 * a)\n        if root1 == root2:\n            return f\"The roots are same i.e {root1} and {root2}\"\n        elif root1 != root2:\n            return f\"The roots are different i.e {root1} and {root2}\"\n    else:\n        return \"The equation has no solution\"\n\n\nprint(quadratic(1, 4, 4))"
    },
    {
      "rank": 92,
      "score": 2.7408560849779047,
      "candidate": "# Solution\n\n\ndef check_twice(a, b, c):\n    \"\"\"\n    Checks if one root of the quadratic equation is twice of the other or not\n\n    Args:\n       a : First parameter of the equation\n       b : Second parameter of the equation\n       c : Third parameter of the equation\n    Returns:\n       bool\n    \"\"\"\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return False\n    else:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        if root1 == 2 * root2:\n            return True\n        else:\n            return False\n\n\n# Test Cases\n\nprint(\"Pass\" if (check_twice(1, 0, -2) == True) else \"Fail\")  # Pass\nprint(\"Pass\" if (check_twice(1, -10, -10) == False) else \"Fail\")  # Pass\nprint(\"Pass\" if (check_twice(1, 0, 2) == False) else \"Fail\")  # Pass\nprint(\"Pass\" if (check_twice(1, 0, 0) == False) else \"Fail\")  # Pass\nprint(\"Pass\" if (check_twice(1, 0, 1) == False) else \"Fail\")  # Pass"
    },
    {
      "rank": 93,
      "score": 2.69788169163985,
      "candidate": "def quadratic_root(a, b, c):\n    \"\"\"\n    >>> quadratic_root(2, 4, 1)\n    'Quadratic equation has no real root'\n    >>> quadratic_root(1, 4, 1)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, 0)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, 1)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, -1)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, -2)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, 2)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, -3)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, 3)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, 5)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, -5)\n    'Quadratic equation has real root'\n    >>> quadratic_root(1, 1, 6)\n    'Quadratic equation has no real root'\n    >>> quadratic_root(1, 1, -6)\n    'Quadratic equation has no real root'\n    >>> quadratic_root(1, 1, 7)\n    'Quadratic equation has no real root'\n    >>> quadratic_root(1, 1, -7)\n    'Quadratic equation has no real root'\n    \"\"\"\n    if a == 0:\n        return \"Quadratic equation has real root\"\n    if b * b - 4 * a * c < 0:\n        return \"Quadratic equation has no real root\"\n    else:\n        if b * b - 4 * a * c == 0:\n            return \"Quadratic equation has real root\"\n        else:\n            if b * b - 4 * a"
    },
    {
      "rank": 94,
      "score": 2.6353807966796072,
      "candidate": "def is_twice(a, b, c):\n    return (b ** 2) - (4 * a * c) == 0\n\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\n\nprint(is_twice(a, b, c))"
    },
    {
      "rank": 95,
      "score": 2.5693656153309585,
      "candidate": "def check_twice(a,b,c):\n    return (4 * a * c - b ** 2) >= 0\n\n\nprint(check_twice(1,1,1))\nprint(check_twice(1,2,1))\nprint(check_twice(1,1,2))\nprint(check_twice(1,2,2))\nprint(check_twice(1,1,0))\nprint(check_twice(1,0,1))"
    },
    {
      "rank": 96,
      "score": 2.560496286010432,
      "candidate": "def check_quadratic_equation(a, b, c):\n    if b**2 - 4 * a * c < 0:\n        return 0\n    else:\n        if (b + (b**2 - 4 * a * c)**0.5) / (2 * a) == (b - (b**2 - 4 * a * c)**0.5) / (2 * a):\n            return 1\n        else:\n            return 0\n\n\nprint(check_quadratic_equation(2, 3, 1))\nprint(check_quadratic_equation(1, 4, 1))"
    },
    {
      "rank": 97,
      "score": 2.521853022396565,
      "candidate": "def check(a, b, c):\n    if a < 0:\n        d = (b**2 - 4*a*c)**0.5\n        if d == 0:\n            return False\n        if d > 0:\n            return False\n        else:\n            return True\n    else:\n        d = (b**2 - 4*a*c)**0.5\n        if d == 0:\n            return False\n        if d > 0:\n            return True\n        else:\n            return False\n\n\na, b, c = map(float, input().split())\nif check(a, b, c):\n    print(\"Yes\")\nelse:\n    print(\"No\")"
    },
    {
      "rank": 98,
      "score": 2.3790295802953083,
      "candidate": "import math\n\n\ndef is_twice(a, b, c):\n    discriminant = math.sqrt(b ** 2 - 4 * a * c)\n    if discriminant == 0:\n        return True\n    else:\n        return False\n\n\ndef main():\n    a, b, c = map(int, input(\"Enter the values of a, b, c: \").split())\n    if is_twice(a, b, c):\n        print(\"The root is twice\")\n    else:\n        print(\"The root is not twice\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 99,
      "score": 2.365305544069416,
      "candidate": "def quadratic_equation(a, b, c):\n    \"\"\"\n    >>> quadratic_equation(1, 1, 1)\n    False\n    >>> quadratic_equation(1, 2, 1)\n    True\n    >>> quadratic_equation(1, 3, 1)\n    False\n    >>> quadratic_equation(1, 4, 1)\n    True\n    >>> quadratic_equation(1, 5, 1)\n    False\n    \"\"\"\n    x1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    x2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return x1 == 2 * x2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 2.2844751907436787,
      "candidate": "import math\n\ndef check_root(a, b, c):\n    root1 = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    root2 = (-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    if root1 == root2 * 2:\n        return True\n    else:\n        return False\n\n\nprint(check_root(4, 2, 1))\nprint(check_root(1, 2, 1))"
    }
  ]
}