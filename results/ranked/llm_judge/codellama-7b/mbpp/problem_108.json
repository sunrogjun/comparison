{
  "timestamp": "2025-09-14T23:06:55.919021",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 108,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_single(arr):\n    if len(arr) == 0:\n        return None\n\n    # First element must be the single element\n    if len(arr) == 1:\n        return arr[0]\n\n    if arr[0] != arr[1]:\n        return arr[0]\n\n    # The last element must be the single element\n    if len(arr) == 2:\n        return arr[-1]\n\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n\n    return None\n\n\ndef main():\n    arr1 = [1, 1, 2, 3, 3, 4, 4, 5, 5]\n    arr2 = [2, 2, 3, 4, 4, 5, 5, 6, 6]\n    arr3 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n    arr4 = [2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\n    arr5 = [1, 2, 2, 3, 3, 4, 4, 5, 5]\n    arr6 = [2, 3, 3, 4, 4, 5, 5, 6, 6]\n    arr7 = [1, 1, 2, 3, 3, 4, 4, 5, 5]\n    arr8 = [1, 2, 3, 3, 4, 4, 5, 5, 6]\n    arr9 = [1, 1, 2, 2, 3, 3, 4, 4, 5]\n    arr10 = [1, 2, 2, 3, 3, 4, 4, 5,"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef find_single_element(arr):\n    count = Counter(arr)\n    for i in count.keys():\n        if count[i] == 1:\n            return i\n    return None\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3, 4, 4, 5, 3, 5, 6, 6]\n    print(find_single_element(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def find_single_element(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n\nif __name__ == \"__main__\":\n    print(find_single_element([1, 1, 2, 2, 3, 4, 4, 5, 3, 6, 6, 7, 8, 8]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_single_element(arr):\n    # Checking for null array\n    if not arr:\n        return None\n    # Checking for null array\n    if len(arr) == 1:\n        return arr[0]\n\n    # If the array is not sorted, then we will sort it first\n    if not sorted(arr):\n        arr.sort()\n\n    # We will use two pointer approach to find the single element\n    left, right = 0, len(arr) - 1\n\n    # We will use two pointer approach to find the single element\n    while left < right:\n        mid = (left + right) // 2\n\n        # If the left and right elements are same\n        if arr[left] == arr[mid] == arr[right]:\n            left += 1\n            right -= 1\n        # If the left and right elements are different\n        elif arr[left] == arr[mid] or arr[mid] == arr[right]:\n            # If the left and right elements are different, but the middle element is same as left element,\n            # then we will move the right pointer left\n            if arr[left] == arr[mid]:\n                right -= 1\n            # If the left and right elements are different, but the middle element is same as right element,\n            # then we will move the left pointer right\n            elif arr[right] == arr[mid]:\n                left += 1\n        # If the left and right elements are different, and the middle element is different from both of them\n        else:\n            return arr[mid]\n\n    # If the array has only one element\n    if left == right:\n        return arr[left]\n\n\n\nif __name__ == \"__main__\":\n    print(find_single_element([1,1,2,3,3,4,4,8,8]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def find_unique_in_sorted_array(input_arr):\n    if len(input_arr) == 0:\n        return -1\n    if len(input_arr) == 1:\n        return input_arr[0]\n\n    if len(input_arr) == 2:\n        if input_arr[0] != input_arr[1]:\n            return input_arr[0]\n        else:\n            return input_arr[1]\n\n    if len(input_arr) == 3:\n        if input_arr[0] != input_arr[1] and input_arr[0] != input_arr[2]:\n            return input_arr[0]\n        if input_arr[1] != input_arr[0] and input_arr[1] != input_arr[2]:\n            return input_arr[1]\n        if input_arr[2] != input_arr[0] and input_arr[2] != input_arr[1]:\n            return input_arr[2]\n\n    if len(input_arr) % 2 == 0:\n        mid = len(input_arr) // 2\n        if input_arr[mid] == input_arr[mid - 1]:\n            return find_unique_in_sorted_array(input_arr[:mid])\n        else:\n            return find_unique_in_sorted_array(input_arr[mid:])\n    else:\n        mid = len(input_arr) // 2\n        if input_arr[mid] != input_arr[mid - 1]:\n            return find_unique_in_sorted_array(input_arr[:mid])\n        else:\n            return find_unique_in_sorted_array(input_arr[mid:])\n\n\ndef main():\n    print(find_unique_in_sorted_array([1, 1, 2, 2, 3]))\n    print(find_unique_in_sorted_array([1, 1, 1, 2, 2, 3]))\n    print(find_unique_in_sorted_array([1, 1, 1, 2, 2, 2, 3]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_single_element(arr):\n    arr.sort()\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10,\n           10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13,\n           13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n           15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18,\n           18"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_single(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n    return arr[0]\n\n\ndef main():\n    print(find_single([1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def single_number(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    head = arr[0]\n    tail = arr[1]\n\n    while tail != head:\n        if tail == None:\n            return head\n        elif head == None:\n            return tail\n        else:\n            head = arr[2 * head]\n            tail = arr[2 * tail + 1]\n\n    return head\n\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    print(single_number(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_single_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    # First element is the single element\n    if arr[0] != arr[1]:\n        return arr[0]\n\n    # Last element is the single element\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n\n    # The element that is not the first or last element\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\n    return None\n\nprint(find_single_element([1,1,2,3,3,4,4,8,8]))\nprint(find_single_element([1,2,3,3,4,4,8,8]))\nprint(find_single_element([1,1,2,2,3,3,4,4,8,8]))\nprint(find_single_element([1,1,2,2,3,3,4,4,8,8,8,8]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_single(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    mid = len(arr)//2\n    if mid % 2 == 0:\n        mid -= 1\n    if arr[mid] != arr[mid-1]:\n        return find_single(arr[:mid])\n    return find_single(arr[mid:])\n\n\ndef main():\n    print(find_single([1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 8, 8, 8, 8, 9, 9]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def find_single_element(arr):\n    n = len(arr)\n\n    for i in range(0,n-1,2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\n    return arr[-1]\n\narr = [1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]\nprint(find_single_element(arr))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def find_unique_num(arr):\n    length = len(arr)\n    if length == 1:\n        return arr[0]\n    elif length == 2:\n        return (arr[0] ^ arr[1])\n    else:\n        return (arr[0] ^ arr[1] ^ arr[2])\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3, 4, 4, 5, 5]\n    print(\"Original array:\")\n    print(arr)\n    print(\"Unique element:\")\n    print(find_unique_num(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    length = len(arr)\n    if length == 1:\n        return arr[0]\n\n    # Find the element that appears twice.\n    # If the array is sorted, the element that appears twice\n    # will be the same as the element that appears once.\n    # Find the element that appears twice by subtracting the element that appears once.\n    # If the length of the array is odd, the element that appears twice\n    # will be the middle element.\n    # If the length of the array is even, the element that appears twice\n    # will be the midpoint of the two middle elements.\n    # If the length of the array is even, the element that appears twice\n    # will be the midpoint of the two middle elements.\n    # The element that appears once will be the element to the left of the element that appears twice.\n    # If the length of the array is odd, the element that appears once will be the first element.\n    # If the length of the array is even, the element that appears once will be the element to the left of the element that appears twice.\n\n    element_that_appears_twice = find_element_that_appears_twice(arr)\n\n    if length % 2 == 0:\n        return arr[length // 2 - 1]\n    else:\n        return arr[length // 2]\n\n\ndef find_element_that_appears_twice(arr):\n    # If the array is sorted, the element that appears twice\n    # will be the same as the element that appears once.\n    length = len(arr)\n    element_that_appears_once = arr[length // 2]\n    element_that_appears_twice = element_that_appears_once\n\n    # Find the element that appears twice by subtracting the element that appears once.\n    for element in arr:\n        if element == element_that_appears_once:\n            continue\n\n        element_that_appears_twice -= element\n\n    return element_that_appears_twice"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def find_single_number(arr):\n    single_number = 0\n    for number in arr:\n        single_number = single_number ^ number\n    return single_number\n\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 4, 4, 7, 7, 8, 8, 9, 9]\n    print(find_single_number(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def find_single_element(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]\n\n\nif __name__ == \"__main__\":\n    print(find_single_element([1, 1, 2, 3, 3, 4, 4, 8, 8]))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] != arr[i + 1]:\n            i += 1\n        else:\n            i += 2\n    return arr[i]\n\n\ndef main():\n    print(\"The single element in the array is : \" + str(find_single_element([1, 1, 2, 3, 3, 4, 4, 8, 8])))\n    print(\"The single element in the array is : \" + str(find_single_element([1, 1, 2, 3, 4, 4, 8, 8])))\n    print(\"The single element in the array is : \" + str(find_single_element([1, 2, 3, 3, 4, 4, 8, 8])))\n    print(\"The single element in the array is : \" + str(find_single_element([1, 2, 3, 4, 4, 8, 8])))\n    print(\"The single element in the array is : \" + str(find_single_element([1, 2, 3, 4, 5, 6, 6])))\n    print(\"The single element in the array is : \" + str(find_single_element([1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 6])))\n    print(\"The single element in the array is : \" + str(find_single_element([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6])))\n\n\nmain()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def single_number(arr):\n    # find the element that appears only once in a sorted array\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\n\n# test case\nprint(single_number([1, 2, 3, 4, 3, 2, 1]))\nprint(single_number([1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1]))\nprint(single_number([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def find_unique_element(nums: list) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if len(nums) <= 2:\n        return nums[0]\n\n    mid = len(nums) // 2\n\n    if nums[mid] != nums[mid - 1]:\n        return nums[mid]\n    if nums[mid] == nums[mid + 1]:\n        return nums[mid + 1]\n\n    if nums[mid] == nums[0]:\n        return find_unique_element(nums[mid:])\n    return find_unique_element(nums[:mid])\n\n\nprint(find_unique_element([1, 1, 2, 3, 3, 4, 4, 8, 8]))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def find_single_element(input_array):\n    if len(input_array) == 1:\n        return input_array[0]\n\n    left = 0\n    right = len(input_array) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if input_array[mid] == input_array[mid - 1]:\n            left = mid + 1\n        elif input_array[mid] == input_array[mid + 1]:\n            right = mid - 1\n        else:\n            return input_array[mid]\n\n    return input_array[left]"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def find_single_number(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n    return arr[-1]\n\n\nif __name__ == \"__main__\":\n    print(find_single_number([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def find_element(array):\n    i = 0\n    while i < len(array) - 1:\n        if array[i] != array[i+1]:\n            return array[i]\n        i += 2\n    return array[-1]\n\nprint(find_element([1, 1, 2, 2, 3, 4, 4, 5, 3, 2, 1, 2, 2]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "# O(n) Time | O(1) Space\ndef singleNonDuplicate(nums):\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def find_single(arr):\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==2:\n        return arr[0] if arr[0]!=arr[1] else -1\n    mid=len(arr)//2\n    if arr[mid]!=arr[mid-1] and arr[mid]!=arr[mid+1]:\n        return arr[mid]\n    elif arr[mid]==arr[mid-1]:\n        return find_single(arr[:mid])\n    else:\n        return find_single(arr[mid:])\n\nif __name__==\"__main__\":\n    inp=[1,2,3,4,4,4,7,8,9,10]\n    print(find_single(inp))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def find_single_element(array):\n    \"\"\"\n    >>> find_single_element([1, 1, 2, 3, 3, 4, 4, 5, 5])\n    2\n    \"\"\"\n    i = 0\n    while i < len(array) - 1:\n        if array[i] != array[i + 1]:\n            i += 1\n        else:\n            return array[i + 1]\n    return array[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def single_number(nums):\n    \"\"\"\n    :param nums: list - list of numbers\n    :return: int or None - the unique number in the list of numbers\n\n    >>> single_number([1, 1, 2, 2, 3, 4, 4])\n    3\n\n    >>> single_number([2, 2, 2, 1, 1, 1, 5, 4, 4])\n    5\n    \"\"\"\n    unique_num = None\n    for i in range(len(nums)):\n        if i == 0:\n            unique_num = nums[i]\n        elif nums[i] != unique_num:\n            unique_num ^= nums[i]\n    return unique_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def find_single_number(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[1] if arr[0] == arr[1] else arr[0]\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    return find_single_number(left) if left[-1] == right[0] else find_single_number(right)\n\n\ndef main():\n    print(find_single_number([1, 1, 2, 3, 3, 4, 4, 8, 8]))\n    print(find_single_number([1, 2, 3, 3, 4, 4, 8, 8]))\n    print(find_single_number([1, 2, 3, 4, 4, 8, 8]))\n    print(find_single_number([2, 2, 3, 3, 4, 4, 8, 8]))\n    print(find_single_number([2, 2, 2, 2, 2, 2]))\n    print(find_single_number([1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def find_unique(arr):\n    if not arr:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if mid == 0 and mid == len(arr) - 1:\n            if arr[left] != arr[right]:\n                return arr[left]\n            else:\n                return arr[right]\n        elif mid == 0:\n            if arr[mid] != arr[right]:\n                return arr[mid]\n            else:\n                left += 1\n        elif mid == len(arr) - 1:\n            if arr[mid] != arr[left]:\n                return arr[mid]\n            else:\n                right -= 1\n        else:\n            if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n                return arr[mid]\n            elif arr[mid] == arr[mid - 1]:\n                left += 1\n            elif arr[mid] == arr[mid + 1]:\n                right -= 1\n\n\nprint(find_unique([1, 1, 3, 3, 5, 5, 7, 7, 9, 9]))\nprint(find_unique([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_unique(list):\n    for i in range(1, len(list)):\n        if list[i] != list[i - 1]:\n            if list[i] != list[i + 1]:\n                return list[i]\n    return list[0]\n\n\na = [1, 1, 2, 3, 3, 4, 4, 5, 5]\nprint(find_unique(a))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n    return arr[0]\n\n\ndef find_single_element_eff(arr):\n    return (arr[0] + arr[-1]) - (arr[-1] + arr[0])\n\n\ndef find_single_element_eff_2(arr):\n    return (arr[0] + arr[-1]) - sum(arr)\n\n\nif __name__ == \"__main__\":\n    print(find_single_element([1, 1, 2, 3, 3, 4, 4, 8, 8]))\n    print(find_single_element_eff([1, 1, 2, 3, 3, 4, 4, 8, 8]))\n    print(find_single_element_eff_2([1, 1, 2, 3, 3, 4, 4, 8, 8]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def find_single_element(array):\n    single_element = 0\n    for i in array:\n        single_element = single_element ^ i\n    return single_element\n\n\nif __name__ == \"__main__\":\n    array = [2, 3, 4, 5, 6, 5, 3, 4]\n    print(find_single_element(array))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def find_single_number(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] ^ arr[1]\n\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                low = mid + 1\n            else:\n                high = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                low = mid + 1\n            else:\n                high = mid\n    return arr[low]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 3, 3, 4, 5, 5]\n    print(find_single_number(arr))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def find_unique(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            return arr[i]\n\n\narr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]\nprint(find_unique(arr))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] != arr[i+1]:\n            return arr[i]\n        i += 2\n    return arr[-1]\n\n\nif __name__ == \"__main__\":\n    print(find_single_element([2, 2, 3, 3, 5, 5, 6, 6, 8, 8, 9, 9]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def find_unique(array):\n    for i in range(1, len(array)):\n        if array[i] != array[i - 1]:\n            if i == len(array) - 1:\n                return array[i]\n            elif array[i] != array[i + 1]:\n                return array[i]\n\n\nprint(find_unique([1, 1, 2, 3, 3, 4, 4, 8, 8]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def find_element(arr):\n    if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        return arr[0] if arr[0] != arr[1] else arr[1]\n\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return find_element(arr[:mid])\n    return find_element(arr[mid:])\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6]\n    print(find_element(arr))\n\nmain()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def single_number(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result ^= arr[i]\n    return result\n\n\ndef single_number_2(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    result = 0\n    for i in range(len(arr)):\n        result ^= arr[i]\n    return result\n\n\ndef single_number_3(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    result = 0\n    for i in range(len(arr)):\n        result = result ^ arr[i]\n    return result\n\n\nprint(single_number([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]))\nprint(single_number_2([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]))\nprint(single_number_3([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            return arr[i]\n\n    return None\n\n\ndef main():\n    print(find_single_element([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\n    print(find_single_element([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    i = 0\n    while i < len(arr):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n        i += 2\n\n\ndef main():\n    arr = [2, 3, 4, 4, 3, 2, 1, 2, 8, 1, 2, 3, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 1]\n    print(f\"Single element is: {find_single_element(arr)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_unique_element(arr):\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n        i += 2\n\n    return arr[-1]\n\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 4, 5, 6, 7, 7]\n    result = find_unique_element(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_unique(nums):\n    if len(nums) == 1:\n        return nums[0]\n\n    if len(nums) == 0:\n        return None\n\n    if len(nums) == 2:\n        return nums[0] if nums[0] != nums[1] else nums[1]\n\n    mid = len(nums) // 2\n\n    if mid == 0:\n        return nums[0]\n\n    if mid == len(nums) - 1:\n        return nums[-1]\n\n    left = nums[:mid]\n    right = nums[mid:]\n\n    left_unique = find_unique(left)\n    right_unique = find_unique(right)\n\n    if left_unique is not None and right_unique is not None:\n        return left_unique if left_unique != right_unique else right_unique\n\n    if left_unique is not None:\n        return left_unique\n\n    if right_unique is not None:\n        return right_unique\n\n\ndef main():\n    nums = [1, 1, 2, 3, 3, 4, 4, 5, 5]\n    print(find_unique(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    single_element = arr[0]\n    for i in range(1, len(arr)):\n        if single_element != arr[i]:\n            if i == len(arr) - 1:\n                single_element = arr[i]\n            else:\n                if arr[i] != arr[i + 1]:\n                    single_element = arr[i]\n                else:\n                    single_element = arr[i]\n    return single_element\n\n\nprint(find_single_element([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def single_num(arr):\n    i, j = 0, 1\n    while i < len(arr) and j < len(arr):\n        if arr[i] != arr[j]:\n            return arr[i]\n        i += 2\n        j += 2\n\n\nprint(single_num([1, 1, 2, 3, 3, 4, 4, 8, 8]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def find_single(arr):\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n\n    low, high = 0, len(arr) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if mid == 0 and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        if mid == len(arr) - 1 and arr[mid] != arr[mid - 1]:\n            return arr[mid]\n        if arr[mid] != arr[mid + 1] and arr[mid] != arr[mid - 1]:\n            return arr[mid]\n        elif arr[mid] < arr[mid + 1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None\n\n\ndef main():\n    print(find_single([1, 1, 2, 3, 3, 4, 4, 8, 8]))\n    print(find_single([1, 1, 2, 3, 3, 4, 4, 5, 8, 8]))\n    print(find_single([1, 1, 2, 3, 3, 4, 4, 5, 6, 8, 8]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def single_number(arr):\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n\n    # find the single element by comparing first and last element\n    if arr[0] != arr[-1]:\n        return arr[0]\n\n    # find the single element by comparing other elements\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\n\nprint(single_number([2, 3, 3, 2, 5, 4, 5, 4]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def find_single(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n\n\narr = [1, 1, 2, 2, 3, 4, 4, 5, 5]\nprint(find_single(arr))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_unique(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        if arr[0] != arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n\n    mid = len(arr) // 2\n\n    if mid > 0 and mid < len(arr):\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        elif arr[mid] == arr[mid - 1]:\n            return find_unique(arr[:mid])\n        else:\n            return find_unique(arr[mid:])\n\n\ndef main():\n    print(find_unique([1, 2, 3, 4, 4, 4, 7, 8, 8]))\n    print(find_unique([1, 1, 2, 2, 2, 3, 3, 4, 4, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_single(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[1] if arr[0] == arr[1] else arr[0]\n\n    mid = len(arr) // 2\n\n    if mid % 2 == 0:\n        mid -= 1\n\n    if arr[mid] != arr[mid - 1]:\n        return find_single(arr[:mid])\n    else:\n        return find_single(arr[mid:])\n\n\ndef main():\n    print(find_single([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def once_appeared(arr):\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid > 0 and arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        elif mid < len(arr) - 1 and arr[mid] == arr[mid + 1]:\n            right = mid - 1\n        else:\n            return arr[mid]\n\n    return None\n\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 4, 4, 4, 5, 5]\n    arr2 = [1, 2, 3, 3, 4, 4, 4, 5, 5]\n    arr3 = [1, 2, 3, 3, 4, 4, 4, 5, 5, 6]\n    arr4 = [1, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6]\n\n    print(once_appeared(arr))\n    print(once_appeared(arr2))\n    print(once_appeared(arr3))\n    print(once_appeared(arr4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_single(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n    return arr[0]\n\n\narr = [1, 1, 2, 3, 3, 4, 4, 4]\nprint(find_single(arr))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def find_single(nums):\n    for i in range(len(nums) - 1):\n        if nums[i] != nums[i + 1]:\n            return nums[i]\n\n    return nums[-1]\n\n\ndef test_find_single():\n    assert find_single([1, 1, 2, 3, 3, 4, 4, 8, 8]) == 2\n    assert find_single([1, 2, 3, 3, 4, 4, 8, 8]) == 1\n    assert find_single([1, 1, 2, 2, 3, 3, 4, 4, 8, 8]) == 4\n    assert find_single([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 8, 8]) == 6\n    assert find_single([1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]) == 1\n    assert find_single([1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 8"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def find_element(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            return arr[i]\n\n    return arr[-1]\n\n\ndef main():\n    print(find_element([1, 1, 2, 3, 3, 4, 4, 5, 5]))\n    print(find_element([1, 2, 3, 4, 4, 5, 6, 6]))\n    print(find_element([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def find_element(array):\n    if len(array) == 1:\n        return array[0]\n\n    mid = len(array)//2\n\n    if mid % 2 == 0:\n        left_half = array[:mid]\n        right_half = array[mid+1:]\n    else:\n        left_half = array[:mid+1]\n        right_half = array[mid:]\n\n    left_half_single = find_element(left_half)\n    right_half_single = find_element(right_half)\n\n    if left_half_single is not None and right_half_single is not None:\n        return None\n    elif left_half_single is None:\n        return right_half_single\n    else:\n        return left_half_single\n\n\nif __name__ == \"__main__\":\n    array = [1, 1, 2, 3, 3, 4, 4, 5, 5]\n    print(find_element(array))\n    array = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6]\n    print(find_element(array))\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_element(array))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_single_number(arr):\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n        i += 2\n    return arr[len(arr) - 1]\n\nprint(find_single_number([1, 1, 2, 3, 3, 4, 4, 8, 8]))\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_element(lst):\n    # First we check if the array is empty or has only one element.\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n\n    # If the array has at least two elements, then we will find the difference of the first two elements.\n    # We will then compare this difference with the difference between the next two elements.\n    # If the difference of the first two elements is equal to the difference between the next two elements,\n    # then we have found the element that appears only once.\n\n    diff = abs(lst[1] - lst[0])\n    for i in range(2, len(lst)):\n        if abs(lst[i] - lst[i - 1]) != diff:\n            return lst[i - 1]\n\n    return None\n\n\ndef main():\n    lst = [1, 1, 2, 3, 3, 4, 4, 5, 6, 6]\n    print(\"Original list:\")\n    print(lst)\n    print(\"Element that appears only once:\")\n    print(find_element(lst))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    # two pointers\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid - 1]:\n            # even\n            if mid % 2 == 0:\n                left = mid + 1\n            # odd\n            else:\n                right = mid - 1\n        else:\n            if mid % 2 == 0:\n                if arr[mid] != arr[mid + 1]:\n                    return arr[mid]\n                else:\n                    left = mid + 1\n            else:\n                if arr[mid] != arr[mid - 1]:\n                    return arr[mid]\n                else:\n                    right = mid - 1\n\n    return arr[left]\n\n\nprint(find_single_element([1, 1, 2, 3, 3, 4, 4, 8, 8]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_unique(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    for i in range(0, n, 2):\n        if i == n-1:\n            return arr[i]\n\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\n\ndef main():\n    arr = [1, 2, 2, 3, 3, 4, 4, 5, 5]\n    print(find_unique(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def find_single(arr):\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[-1]\n\ndef find_single_optimized(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    middle = len(arr) / 2\n    left_half = arr[:middle]\n    right_half = arr[middle:]\n\n    left_half_single = find_single(left_half)\n    right_half_single = find_single(right_half)\n\n    if left_half_single != right_half_single:\n        return left_half_single if left_half_single < right_half_single else right_half_single\n    return find_single(left_half + right_half)\n\nprint(find_single_optimized([1, 1, 2, 3, 3, 4, 4, 8, 8]))\nprint(find_single_optimized([1, 1, 2, 2, 3, 3, 4, 4, 8, 8]))\nprint(find_single_optimized([1, 2, 3, 4, 4, 8, 8]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_single_element(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    start, end = 0, len(arr) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n        if mid % 2 == 0 and arr[mid] == arr[mid + 1]:\n            start = mid + 1\n        elif mid % 2 == 1 and arr[mid] == arr[mid - 1]:\n            start = mid + 1\n        else:\n            end = mid\n\n    return arr[start]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9]\n    print(find_single_element(arr))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        if arr[0] != arr[1]:\n            return arr[0]\n        else:\n            return find_single_element(arr[1:])"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def find_unique(arr):\n    if len(arr) < 2:\n        return arr[0]\n\n    mid = len(arr) // 2\n    if len(arr) % 2 == 0:\n        return find_unique(arr[:mid]) ^ find_unique(arr[mid:])\n    else:\n        return find_unique(arr[:mid]) ^ find_unique(arr[mid + 1:])\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [1, 1, 2, 2, 3, 3],\n        [1, 2, 3, 3, 4, 4],\n        [1, 1, 2, 2, 3, 4],\n        [1, 2, 3, 3, 4, 5],\n    ]\n    for test_case in test_cases:\n        print(f\"The unique element in the array {test_case} is: {find_unique(test_case)}\")"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def find_unique_in_sorted_array(arr):\n    \"\"\"\n    :param arr: array of numbers\n    :return: the element that appears only once\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        else:\n            if arr[mid - 1] == arr[mid]:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n    return arr[left]\n\n\nprint(find_unique_in_sorted_array([1, 1, 2, 3, 3, 4, 4, 8, 8]))\nprint(find_unique_in_sorted_array([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 8, 8, 8, 8, 9, 9, 9]))\nprint(find_unique_in_sorted_array([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 8, 8, 8, 8, 9, 9, 9, 11, 11, 11]))\nprint(find_unique_in_sorted_array([1, 2, 3, 3, 3, 4, 4, 4, 8, 8, 8, 8, 9, 9, 9, 11, 11, 11]))\nprint(find_unique_in_sorted_array([1, 2, 3, 3, 3, 4, 4, 4, 8, 8, 8, 8, 9, 9,"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def find_element(arr):\n    if len(arr) < 2:\n        return arr[0]\n\n    if arr[0] != arr[1]:\n        return arr[0]\n\n    start = 1\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                start = mid + 1\n            else:\n                end = mid - 1\n        else:\n            return arr[mid]\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_element([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]))\n    print(find_element([1, 2, 3, 4, 4, 5, 6, 7, 8, 8]))\n    print(find_element([1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]))\n    print(find_element([1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]))\n    print(find_element([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def single_element(lst):\n    if len(lst) == 1:\n        return lst[0]\n\n    if lst[0] != lst[1]:\n        return lst[0]\n    if lst[-1] != lst[-2]:\n        return lst[-1]\n\n    mid = len(lst) // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    left_single = single_element(left)\n    right_single = single_element(right)\n    return left_single if left_single != right_single else right_single\n\n\nprint(single_element([2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    n = len(arr)\n    for i in range(1, n, 2):\n        if arr[i] != arr[i - 1]:\n            return arr[i - 1]\n    return arr[-1]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 4, 4, 7, 7, 8, 8]\n    print(f\"Element that appears only once in {arr} is {find_single_element(arr)}\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return -1\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    return find_single_element(arr[1:-1])\n\n\nprint(find_single_element([1, 1, 3, 3, 4, 4, 5, 5]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def find_single_element(arr):\n    \"\"\"\n    :param arr: sorted array\n    :return: single element\n    \"\"\"\n    if len(arr) <= 2:\n        return arr[-1]\n\n    low = 0\n    high = len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                low = mid + 2\n            else:\n                high = mid\n        else:\n            if arr[mid - 1] == arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n    return arr[low]\n\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 4, 4, 4, 5, 5]\n    print(find_single_element(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_single(arr):\n    i = 0\n    while i < len(arr):\n        if i == 0:\n            i += 1\n        elif arr[i] != arr[i-1]:\n            i += 1\n        elif i == len(arr) - 1:\n            break\n        else:\n            i += 2\n    return arr[i]"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def find_unique(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            if arr[i] != arr[i - 1]:\n                return arr[i]\n\n\n# print(find_unique([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def find_unique(arr):\n    n = len(arr)\n\n    # Base case\n    if n == 1:\n        return arr[0]\n\n    # If array is empty\n    if n == 0:\n        return None\n\n    # If array has 2 elements\n    if n == 2:\n        if arr[0] != arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n\n    # If array has odd number of elements\n    if n % 2 != 0:\n        mid = n // 2\n        if arr[mid] != arr[mid - 1]:\n            return arr[mid]\n        else:\n            return find_unique(arr[:mid] + arr[mid + 1:])\n\n    # If array has even number of elements\n    mid = n // 2\n    if arr[mid] != arr[mid - 1]:\n        return arr[mid]\n    else:\n        return find_unique(arr[mid:] + arr[:mid])\n\n\nif __name__ == \"__main__\":\n    print(\"Enter the array elements: \", end=\"\")\n    arr = [int(x) for x in input().split()]\n    print(\"The unique element in the array is: \", find_unique(arr))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "# This is the array\n# a = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n\n\ndef find_unique(a):\n    for i in range(len(a)):\n        if i % 2 == 1:\n            if i == len(a) - 1:\n                return a[i]\n            if a[i] != a[i + 1]:\n                return a[i]\n\n\na = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\nprint(find_unique(a))"
    },
    {
      "rank": 71,
      "score": 7.0,
      "candidate": "def find_single_element(arr):\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] != arr[i+1]:\n            i += 1\n        else:\n            arr.pop(i+1)\n    return arr[0]\n\n\nprint(find_single_element([1, 1, 2, 3, 3, 4, 4, 8, 8]))"
    },
    {
      "rank": 72,
      "score": 7.0,
      "candidate": "def find_single_element(arr):\n    left, right = 0, len(arr)-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid-1]:\n            left = mid + 1\n        elif arr[mid] == arr[mid+1]:\n            right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]\n\n\ndef main():\n    print(find_single_element([1, 1, 2, 3, 3, 4, 4, 8, 8]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def find_unique_element(lst):\n    if len(lst) == 1:\n        return lst[0]\n\n    for i in range(0, len(lst), 2):\n        if i == len(lst) - 1:\n            return lst[i]\n\n        if lst[i] != lst[i + 1]:\n            return lst[i]\n\n\nlst = [0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 9]\n\nprint(find_unique_element(lst))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def once_appeared_in_sorted_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    return once_appeared_in_sorted_array(arr[1:-1])\n\n\ndef once_appeared_in_sorted_array2(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    if len(arr) % 2 == 0:\n        mid = len(arr) // 2\n        return once_appeared_in_sorted_array2([arr[mid - 1], arr[mid], arr[mid + 1]])\n    mid = len(arr) // 2\n    return once_appeared_in_sorted_array2([arr[mid], arr[mid + 1]])\n\n\ndef once_appeared_in_sorted_array3(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    mid = len(arr) // 2\n    return once_appeared_in_sorted_array3([arr[mid - 1], arr[mid], arr[mid + 1]])\n\n\ndef once_appeared_in_sorted_array4(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    mid = len(arr) // 2\n    return once_appeared_in_sorted_array4([arr[mid - 1], arr[mid], arr[mid + 1]])\n\n\ndef once_appeared_in_sorted_array5"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def find_the_single_number(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        x = arr[0]\n        y = arr[1]\n        for i in range(2, n):\n            if x != y:\n                x, y = y, arr[i]\n            else:\n                return x\n\n\ndef find_the_single_number_optimized(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        x = arr[0]\n        y = arr[1]\n        for i in range(2, n):\n            if x != y:\n                x, y = y, arr[i]\n            else:\n                return x\n        if x != y:\n            return x\n        else:\n            return y\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11]\n    print(\"find the single number in the array\")\n    result = find_the_single_number(arr)\n    print(result)\n\n    result = find_the_single_number_optimized(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def find_single_element(arr):\n    \"\"\"\n    :param: array - input array\n    return: element in array which appears only once\n    \"\"\"\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] != arr[i+1]:\n            return arr[i]\n        i += 2\n    return arr[i]\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_single_element(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 1, 2, 3, 3, 4, 4, 5, 5]\nsolution = 2\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 1, 2, 3, 3, 4, 4, 6, 5, 6, 7, 7]\nsolution = 5\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def find_unique(lst):\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n\n    mid = len(lst) // 2\n    left = lst[:mid]\n    right = lst[mid:]\n\n    if mid % 2 == 0:\n        left_unique = find_unique(left)\n        right_unique = find_unique(right)\n\n        if left_unique == right_unique:\n            return find_unique(left)\n        return left_unique if left_unique is not None else right_unique\n\n    else:\n        left_unique = find_unique(left)\n        right_unique = find_unique(right)\n\n        if left[-1] == right[0] or left_unique == right_unique:\n            return find_unique(left)\n        return right_unique if right_unique is not None else left_unique\n\n\nprint(find_unique([1, 1, 2, 3, 3, 4, 4, 5]))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def find_unique_in_sorted_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[1] if arr[0] == arr[1] else arr[0]\n\n    if arr[0] != arr[1]:\n        return arr[0]\n\n    if arr[len(arr)-1] != arr[len(arr)-2]:\n        return arr[len(arr)-1]\n\n    for i in range(len(arr)-2):\n        if arr[i] != arr[i+1] and arr[i] != arr[i-1]:\n            return arr[i]\n\n\nprint(find_unique_in_sorted_array([1, 1, 2, 3, 3, 4, 4, 8, 8]))\nprint(find_unique_in_sorted_array([2, 2, 2, 3, 3, 4, 4, 8, 8]))\nprint(find_unique_in_sorted_array([2, 2, 2, 2, 2, 2, 2, 2]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def find_unique_number(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if arr[0] != arr[1]:\n        return arr[0]\n\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_single_number(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            if i == n - 1:\n                return arr[i]\n            elif arr[i] != arr[i + 1]:\n                return arr[i]\n\n\ndef find_single_number_2(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 0:\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i - 1]:\n                return arr[i]\n\n\nif __name__ == \"__main__\":\n    assert find_single_number([1, 1, 2, 2, 3]) == 3\n    assert find_single_number([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 2\n    assert find_single_number([1, 2, 3, 4, 5]) == 1\n    assert find_single_number([1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]) == 2\n    assert find_single_number([1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6]) == 2\n\n    assert find_single_number_2([1"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def finder(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        if arr[0] != arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n\n    if len(arr) % 2 != 0:\n        mid = (len(arr) // 2) + 1\n        mid_left = arr[:mid]\n        mid_right = arr[mid:]\n    else:\n        mid = len(arr) // 2\n        mid_left = arr[:mid]\n        mid_right = arr[mid:]\n\n    mid_left_result = finder(mid_left)\n    mid_right_result = finder(mid_right)\n\n    if mid_left_result != mid_right_result:\n        return mid_left_result\n    else:\n        return mid_right_result\n\n\n\nif __name__ == \"__main__\":\n    arr = [1, 1, 2, 3, 3, 4, 4, 5, 5]\n    print(finder(arr))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def find_single_element(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            return arr[i]\n\n\ndef find_single_element_eff(arr):\n    return (2*arr[0] - sum(arr))\n\n\ndef main():\n    arr1 = [1, 1, 2, 3, 3, 4, 4, 4]\n    arr2 = [1, 2, 3, 3, 4, 4, 4, 4]\n    arr3 = [1, 1, 2, 3, 4, 4, 4, 4]\n    arr4 = [1, 2, 3, 4, 4, 4, 4, 4]\n    arr5 = [1, 1, 2, 3, 4, 4, 4, 4]\n    arr6 = [1, 2, 3, 4, 5, 6, 6, 6]\n    arr7 = [1, 2, 3, 4, 4, 4, 4, 4]\n    arr8 = [1, 1, 2, 2, 2, 2, 2, 2]\n    print(find_single_element(arr1))\n    print(find_single_element(arr2))\n    print(find_single_element(arr3))\n    print(find_single_element(arr4))\n    print(find_single_element(arr5))\n    print(find_single_element(arr6))\n    print(find_single_element(arr7))\n    print(find_single_element(arr8))\n\n    print(find_single_element_eff(arr1))\n    print(find_single_element_eff(arr2))\n    print(find_single_element_eff(arr3))\n    print(find_single_element_eff(arr4))\n    print(find_single_element_eff(arr5))\n    print(find_single_element_eff(arr6))\n    print(find"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def find_element(arr):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    # check for array length\n    if len(arr) == 1:\n        return arr[0]\n\n    # find the mid element\n    mid = len(arr) // 2\n\n    # check for the left half\n    if mid > 0 and mid < len(arr):\n        if arr[mid - 1] == arr[mid]:\n            return find_element(arr[:mid])\n\n    # check for the right half\n    if mid < len(arr):\n        if arr[mid] == arr[mid + 1]:\n            return find_element(arr[mid + 1:])\n\n    return arr[mid]\n\ndef find_element_2(arr):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    # check for array length\n    if len(arr) == 1:\n        return arr[0]\n\n    # find the mid element\n    mid = len(arr) // 2\n\n    # check for the left half\n    if mid > 0 and mid < len(arr):\n        if arr[mid - 1] == arr[mid]:\n            return find_element_2(arr[:mid])\n\n    # check for the right half\n    if mid < len(arr):\n        if arr[mid] == arr[mid + 1]:\n            return find_element_2(arr[mid + 1:])\n\n    return arr[mid]\n\n\nif __name__ == '__main__':\n    arr = [2, 2, 4, 4, 6, 6, 8, 8, 10, 10]\n    print(find_element(arr))\n    print(find_element_2(arr))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def find_single_element(arr):\n    \"\"\"\n    :param: arr - input array\n    return: element in array which appears only once\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            return arr[i]\n\n    return arr[-1]\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_single_element(arr)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1, 1, 2, 2, 3, 4, 4, 5, 5]\nsolution = 3\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 1, 2, 2, 3, 3, 4, 5]\nsolution = 4\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9]\nsolution = 7\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def find_single_number(arr):\n    \"\"\"\n    :param: arr - sorted array of numbers\n    return:  element in array which appears only once\n    \"\"\"\n    if len(arr) <= 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] ^ arr[1]\n\n    mid = len(arr) // 2\n    left_side = find_single_number(arr[:mid])\n    right_side = find_single_number(arr[mid:])\n    return find_single_number_helper(left_side, right_side)\n\n\ndef find_single_number_helper(left_side, right_side):\n    \"\"\"\n    :param: left_side - element from left side of array\n    :param: right_side - element from right side of array\n    return:  element in array which appears only once\n    \"\"\"\n    if left_side == right_side:\n        return left_side\n\n    return left_side ^ right_side\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_single_number(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 1, 2, 2, 3]\nsolution = 3\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 1, 2, 2, 3, 4, 4, 5, 5]\nsolution = 3\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def find_unique(arr):\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[0]\n\n    left = 0\n    right = n - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            right = mid - 1\n        else:\n            return arr[mid]\n    return arr[left]\n\n\narr = [1,1,2,2,3,4,4,5,5,6,6,7,8,8]\nprint(find_unique(arr))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def find_unique(arr):\n    n = len(arr)\n\n    if n == 1:\n        return arr[0]\n\n    if n == 2:\n        return arr[0] ^ arr[1]\n\n    low = 0\n    high = n - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if mid == 0 and (arr[mid] != arr[mid+1] and arr[mid] != arr[mid-1]):\n            return arr[mid]\n\n        if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n            low = mid + 1\n        elif arr[mid] == arr[mid-1]:\n            high = mid - 1\n        elif arr[mid] == arr[mid+1]:\n            low = mid + 1\n        else:\n            return arr[mid]\n\n    return arr[low]\n\ndef find_unique_2(arr):\n    n = len(arr)\n\n    if n == 1:\n        return arr[0]\n\n    if n == 2:\n        return arr[0] ^ arr[1]\n\n    low = 0\n    high = n - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if mid == 0 and (arr[mid] != arr[mid+1] and arr[mid] != arr[mid-1]):\n            return arr[mid]\n\n        if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n            low = mid + 1\n        elif arr[mid] == arr[mid-1]:\n            high = mid - 1\n        elif arr[mid] == arr[mid+1]:\n            low = mid + 1\n        else:\n            return arr[mid]\n\n    return arr[low]\n\n\n\nif __name__ == \"__main__\":\n    print(find_unique([1,1,2,3,3,4,4,8,8]))\n    print(find_unique([1,1,2,2"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def find_single_element(array):\n    for i in range(0, len(array), 2):\n        if i == len(array) - 1:\n            return array[i]\n        elif array[i] != array[i + 1]:\n            return array[i]\n\n\ndef test_find_single_element():\n    assert find_single_element([1, 1, 2, 3, 3, 4, 4, 8, 8]) == 2\n    assert find_single_element([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 1"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_single_element(arr):\n    \"\"\"\n    Return the single element\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n\n    # find the single element\n    # the element will be between left and right\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # left half is increasing\n        if arr[mid] > arr[mid + 1]:\n            right = mid\n        # right half is increasing\n        elif arr[mid] < arr[mid - 1]:\n            left = mid\n        # element is not in its half\n        else:\n            return arr[mid]\n\n    # single element will be in left half\n    return arr[left]\n\n\ndef test_find_single_element():\n    \"\"\"\n    >>> test_find_single_element()\n    \"\"\"\n    assert find_single_element([1, 1, 2, 3, 3, 4, 4, 8, 8]) == 2\n    assert find_single_element([0, 1, 1, 2, 3, 3, 4, 4, 8, 8]) == 0\n    assert find_single_element([0, 1, 1, 2, 3, 3, 4, 4, 8, 8]) == 0\n    assert find_single_element([1, 1, 2, 2, 4, 4, 5, 5, 6, 6]) == 3\n    assert find_single_element([1, 2, 3, 3, 4, 5, 5, 6, 7, 8]) == 1\n    assert find_single_element([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 6\n    assert find_single_element([1, 1, 2, 3, 3, 3, 4, 4, 4,"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def find_unique(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        if arr[0] != arr[1]:\n            return arr[0]\n        else:\n            return find_unique(arr[1:])\n\n\ndef test_find_unique():\n    assert find_unique([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 5\n\n\nif __name__ == \"__main__\":\n    test_find_unique()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def find_single_element(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            return arr[i]\n\n\ndef test_find_single_element():\n    assert find_single_element([1, 1, 2, 2, 3, 3, 4, 5]) == 4\n\n\nif __name__ == \"__main__\":\n    test_find_single_element()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# This is a O(n) solution.\ndef find_unique_element(input_list):\n    \"\"\"\n    :param input_list: list - list of numbers to be iterated over.\n    :return: int - integer value of the unique element.\n    \"\"\"\n    if len(input_list) <= 2:\n        return input_list[0]\n\n    if input_list[0] != input_list[1]:\n        return input_list[0]\n\n    if input_list[-1] != input_list[-2]:\n        return input_list[-1]\n\n    for i in range(1, len(input_list) - 1):\n        if input_list[i - 1] != input_list[i] and input_list[i] != input_list[i + 1]:\n            return input_list[i]\n\n    return None\n\n\ndef test_function(test_case):\n    output = find_unique_element(test_case[0])\n    if output == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [[1, 1, 2], 2]\ntest_function(test_case_1)\n\ntest_case_2 = [[1, 1, 2, 3, 3, 4, 4, 8, 8], 2]\ntest_function(test_case_2)\n\ntest_case_3 = [[2, 1, 3, 1, 3, 5, 6, 7, 8, 2, 3, 5, 7, 9, 9, 9], 8]\ntest_function(test_case_3)\n\ntest_case_4 = [[2, 2, 2, 0, 1, 1, 2, 2, 2, 0, 1, 1, 2, 2, 2], 0]\ntest_function(test_case_4)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_single_element(arr):\n    if len(arr) <= 2:\n        return arr[0]\n\n    if arr[0] != arr[1]:\n        return arr[0]\n\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n\n    low = 2\n    high = len(arr) - 2\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if (mid + 1) % 2 == 0:\n                low = mid + 2\n            else:\n                high = mid - 1\n        else:\n            return arr[mid]\n\n\ndef find_single_element_v2(arr):\n    if len(arr) <= 2:\n        return arr[0]\n\n    low = 0\n    high = len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid - 1]:\n            if (mid + 1) % 2 == 0:\n                low = mid + 2\n            else:\n                high = mid - 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                low = mid + 1\n            else:\n                high = mid - 2\n        else:\n            return arr[mid]\n\n    return arr[low]\n\n\ndef find_single_element_v3(arr):\n    if len(arr) <= 2:\n        return arr[0]\n\n    low = 0\n    high = len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid - 1]:\n            if (mid + 1) % 2 == 0:\n                low = mid + 2\n            else:\n                high = mid - 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                low = mid +"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def find_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n\n    mid = len(arr) // 2\n    if mid > 0 and arr[mid] == arr[mid - 1]:\n        return find_element(arr[:mid])\n\n    if mid < len(arr) - 1 and arr[mid] == arr[mid + 1]:\n        return find_element(arr[mid + 1:])\n\n    return arr[mid]\n\n\ndef find_element_eff(arr):\n    \"\"\"\n    :param: arr - input array\n    return: element that appears only once in the array\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n\n    mid = len(arr) // 2\n    if mid > 0 and arr[mid] == arr[mid - 1]:\n        return find_element_eff(arr[:mid])\n\n    if mid < len(arr) - 1 and arr[mid] == arr[mid + 1]:\n        return find_element_eff(arr[mid + 1:])\n\n    return arr[mid]\n\n\ndef test_find_element(arr, expected_answer):\n    answer = find_element(arr)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\ndef test_find_element_eff(arr, expected_answer):\n    answer = find_element_eff(arr)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\nif __name__ == \"__main__\":\n    test_find_element([1, 1, 2, 2, 3, 4, 4"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def find_unique(arr):\n    \"\"\"\n    :param: arr - input array\n    return: element in array which appears only once\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        return arr[0]\n\n    mid = len(arr) // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    if len(left_arr) == 1:\n        return left_arr[0]\n\n    left_unique = find_unique(left_arr)\n    right_unique = find_unique(right_arr)\n\n    if left_unique is not None and right_unique is not None:\n        return left_unique if left_unique == right_unique else None\n\n    if left_unique is not None:\n        return left_unique\n\n    return right_unique\n\n\ndef main():\n    \"\"\"\n    driver function\n    \"\"\"\n    arr = [1, 1, 2, 3, 3, 4, 4, 5, 5]\n    print(\"Input array:\", arr)\n    print(\"Unique element:\", find_unique(arr))\n\n    arr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n    print(\"Input array:\", arr)\n    print(\"Unique element:\", find_unique(arr))\n\n    arr = [1, 1, 2, 2, 3, 3, 4, 4, 5]\n    print(\"Input array:\", arr)\n    print(\"Unique element:\", find_unique(arr))\n\n    arr = [1, 1, 2, 2, 3, 3, 4, 4]\n    print(\"Input array:\", arr)\n    print(\"Unique element:\", find_unique(arr))\n\n    arr = [1, 1, 2, 2, 3, 3]"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_single_number(arr):\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return -1\n\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid == 0 or mid == n - 1:\n            return arr[mid]\n        if arr[mid - 1] == arr[mid] and arr[mid] == arr[mid + 1]:\n            left = mid + 1\n        elif arr[mid - 1] == arr[mid]:\n            right = mid - 1\n        elif arr[mid] == arr[mid + 1]:\n            left = mid + 1\n        else:\n            return arr[mid]\n    return arr[left]\n\n\nprint(find_single_number([1, 1, 2, 3, 3, 4, 4, 8, 8]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_unique(arr):\n    return arr[0] ^ arr[-1]\n\n\ndef find_xor(arr):\n    xor = 0\n    for i in arr:\n        xor ^= i\n    return xor\n\n\nif __name__ == \"__main__\":\n    arr = [1, 1, 2, 2, 3, 3, 4, 4]\n    print(find_unique(arr))\n    print(find_xor(arr))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def find_unique_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return (arr[0] ^ arr[1])\n    else:\n        pivot = len(arr) // 2\n        left = arr[:pivot]\n        right = arr[pivot:]\n        return find_unique_element(left) ^ find_unique_element(right)\n\n\narr = [0, 0, 1, 2, 2]\nprint(find_unique_element(arr))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_single_element(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Args:\n       arr(array): Input array\n    Returns:\n       int: The element that appears only once in a sorted array\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    # Set first and last element as a single element\n    single_element = arr[0]\n\n    # Iterate through the list and find the single element\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            single_element = arr[i]\n        else:\n            continue\n\n    return single_element\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_single_element(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Tests\n# Test 1\narr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\nsolution = 6\ntest_case = [arr, solution]\ntest_function(test_case)\n\n# Test 2\narr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\nsolution = 7\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_unique(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return -1\n\n    if arr[0] != arr[1]:\n        return arr[0]\n\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n\n    mid = len(arr) // 2\n    left = find_unique(arr[:mid])\n    right = find_unique(arr[mid:])\n\n    if left != -1 and right != -1:\n        return -1\n\n    return left if left != -1 else right\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3]\n    res = find_unique(arr)\n    print(f\"The element that appears only once in the given array is: {res}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}