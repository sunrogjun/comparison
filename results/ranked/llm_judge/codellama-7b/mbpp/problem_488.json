{
  "timestamp": "2025-09-15T02:00:16.804272",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 488,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def diameter(radius):\n    return radius * 2\n\n\nprint(diameter(2))\nprint(diameter(10))\nprint(diameter(100))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\n\ndef diameter(radius):\n    \"\"\"\n    Diameter of a circle is the distance between its center and the edge of the circle.\n    \"\"\"\n    return radius * 2\n\n\ndef area(radius):\n    \"\"\"\n    Area of a circle is the surface area.\n    \"\"\"\n    return math.pi * (radius ** 2)\n\n\ndef circumference(radius):\n    \"\"\"\n    Circumference of a circle is the distance around the circle.\n    \"\"\"\n    return 2 * math.pi * radius"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(3))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def diameter(r):\n    return 2 * r\n\n\ndef diameter_of_a_circle(r):\n    return 2 * r\n\n\nif __name__ == '__main__':\n    print(diameter(10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def diameter_of_circle(radius):\n    return radius * 2\n\n\nprint(diameter_of_circle(3))\nprint(diameter_of_circle(5))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def diameter(radius):\n    return 2 * radius"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\nprint(diameter_of_circle(10))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_diameter(r):\n    \"\"\"\n    Finds the diameter of a circle.\n\n    Args:\n     r (float): radius of a circle.\n\n    Returns:\n     float: diameter of a circle.\n    \"\"\"\n    return 2 * r\n\ndef main():\n    \"\"\"\n    The main function to run the script.\n    \"\"\"\n    print(find_diameter(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def diameter_of_circle(radius):\n    return radius * 2\n\n\nprint(diameter_of_circle(4))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_diameter(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    print(find_diameter(3))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def diameter(radius):\n    return radius * 2"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def diameter_of_circle(radius):\n    return radius * 2\n\nprint(diameter_of_circle(3))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def diameter(radius):\n    return radius * 2"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import math\n\ndef diameter_of_circle(radius):\n    return 2 * radius\n\ndef circumference_of_circle(radius):\n    return 2 * math.pi * radius\n\ndef area_of_circle(radius):\n    return math.pi * (radius ** 2)"
    },
    {
      "rank": 15,
      "score": 9.994871054599585,
      "candidate": "def diameter(radius):\n    return radius*2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2*3.14*radius\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14*radius**2\n\n\"\"\"\nWrite a function to find the radius of a circle given the diameter.\n\"\"\"\n\ndef radius(diameter):\n    return diameter/2\n\n\"\"\"\nWrite a function to find the diameter of a circle given the radius.\n\"\"\"\n\ndef diameter_2(radius):\n    return radius*2\n\n\"\"\"\nWrite a function to find the circumference of a circle given the radius.\n\"\"\"\n\ndef circumference_2(radius):\n    return 2*3.14*radius\n\n\"\"\"\nWrite a function to find the area of a circle given the radius.\n\"\"\"\n\ndef area_2(radius):\n    return 3.14*radius**2\n\n\"\"\"\nWrite a function to find the area of a circle given the circumference.\n\"\"\"\n\ndef area_3(circumference):\n    return (circumference/3.14)**2\n\n\"\"\"\nWrite a function to find the circumference of a circle given the area.\n\"\"\"\n\ndef circumference_3(area):\n    return 3.14*area**0.5\n\n\"\"\"\nWrite a function to find the radius of a circle given the area.\n\"\"\"\n\ndef radius_2(area):\n    return area**0.5\n\n\"\"\"\nWrite a function to find the diameter of a circle given the area.\n\"\"\"\n\ndef diameter_3(area):\n    return 2*area**0.5\n\n\"\"\"\nWrite a function to find the radius of a circle given the circumference.\n\"\"\"\n\ndef radius_3(circumference):\n    return circumference/(2*3.14)\n\n\"\"\"\nWrite a function to find the diameter of a circle given the circumference.\n\"\"\"\n\ndef diameter_4(circumference):"
    },
    {
      "rank": 16,
      "score": 9.986386105138218,
      "candidate": "def find_diameter(radius):\n    return radius * 2\n\n\nif __name__ == '__main__':\n    r = float(input('Radius: '))\n    print(f'Diameter: {find_diameter(r)}')"
    },
    {
      "rank": 17,
      "score": 9.956053652692468,
      "candidate": "def diameter(r):\n    \"\"\"\n    Diameter of a circle is the length of the diameter.\n    \"\"\"\n    return 2 * r"
    },
    {
      "rank": 18,
      "score": 9.916524682621745,
      "candidate": "def find_diameter(radius):\n    \"\"\"Find the diameter of a circle.\n\n    Args:\n        radius: The radius of a circle.\n\n    Returns:\n        The diameter of a circle.\n    \"\"\"\n    return radius * 2\n\n\ndef main():\n    radius = 2\n    print(f\"Radius: {radius}\")\n    print(f\"Diameter: {find_diameter(radius)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 9.914205005815116,
      "candidate": "def diameter_of_circle(radius):\n    \"\"\"\n    Calculate diameter of a circle.\n\n    Arguments:\n        radius {float} -- radius of the circle\n\n    Returns:\n        float -- diameter of the circle\n    \"\"\"\n    diameter = radius * 2\n    return diameter"
    },
    {
      "rank": 20,
      "score": 9.91102795635931,
      "candidate": "import math\n\n\ndef diameter(radius: float) -> float:\n    \"\"\"\n    >>> diameter(10)\n    20.0\n    \"\"\"\n    return radius * 2\n\n\ndef diameter_with_pi(radius: float) -> float:\n    \"\"\"\n    >>> diameter_with_pi(10)\n    31.41592653589793\n    \"\"\"\n    return math.pi * radius * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.875488384292849,
      "candidate": "def diameter_of_circle(radius):\n    \"\"\"\n    Diameter of circle = 2 * radius\n    \"\"\"\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    print(diameter_of_circle(3))"
    },
    {
      "rank": 22,
      "score": 9.821599733344717,
      "candidate": "def diameter(radius):\n    return 2 * radius\n\nassert diameter(2) == 4\nassert diameter(1) == 4"
    },
    {
      "rank": 23,
      "score": 9.81791378961879,
      "candidate": "def diameter_of_circle(radius):\n    return 2*radius\n\nprint(diameter_of_circle(5))"
    },
    {
      "rank": 24,
      "score": 9.809332323437877,
      "candidate": "def diameter(radius):\n    \"\"\"\n    Diameter of a circle is equal to the sum of its radius.\n\n    >>> diameter(1)\n    2\n    >>> diameter(2)\n    4\n    >>> diameter(10)\n    20\n    \"\"\"\n    return radius * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.803057317056014,
      "candidate": "def diameter(radius):\n    return 2 * radius\n\n\ndef test_cases():\n    assert diameter(2) == 4\n    print(\"All test cases passed...\")\n\n\nif __name__ == \"__main__\":\n    test_cases()"
    },
    {
      "rank": 26,
      "score": 9.798691122568526,
      "candidate": "def diameter_of_circle(r):\n    return 2 * r\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(4))"
    },
    {
      "rank": 27,
      "score": 9.79313456468043,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(5))"
    },
    {
      "rank": 28,
      "score": 9.78633073888843,
      "candidate": "from math import sqrt\n\n\ndef diameter(radius: int) -> int:\n    \"\"\"\n    Diameter of a circle.\n    >>> diameter(5)\n    10\n    \"\"\"\n    return 2 * radius\n\n\ndef diameter_with_sqrt(radius: int) -> int:\n    \"\"\"\n    Diameter of a circle.\n    >>> diameter_with_sqrt(5)\n    10\n    \"\"\"\n    return 2 * radius * sqrt(1 - pow(radius / 2, 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.742769639883736,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(10))"
    },
    {
      "rank": 30,
      "score": 9.733219824326605,
      "candidate": "def diameter_of_circle(radius):\n    return radius * 2\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(5))"
    },
    {
      "rank": 31,
      "score": 9.61512417427292,
      "candidate": "import math\n\n\ndef diameter(radius):\n    \"\"\"\n    Returns the diameter of a circle.\n    \"\"\"\n    return 2 * radius\n\n\ndef area(radius):\n    \"\"\"\n    Returns the area of a circle.\n    \"\"\"\n    return math.pi * radius * radius\n\n\ndef circumference(radius):\n    \"\"\"\n    Returns the circumference of a circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.598069846996758,
      "candidate": "def diameter(radius: float) -> float:\n    \"\"\"\n    :param radius: radius of the circle\n    :return: diameter of the circle\n    \"\"\"\n    return 2 * radius\n\n\ndef main():\n    radius = float(input(\"Please provide the radius of the circle: \"))\n    print(f\"The diameter of the circle is {diameter(radius)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 9.495289301418596,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(1))"
    },
    {
      "rank": 34,
      "score": 9.463324593492588,
      "candidate": "def diameter(radius):\n    return 2 * radius"
    },
    {
      "rank": 35,
      "score": 9.438161643660377,
      "candidate": "def diameter(radius):\n    \"\"\"\n    Find the diameter of a circle.\n\n    :param radius: Radius of the circle.\n    :return: Diameter of the circle.\n    \"\"\"\n    return radius * 2\n\n\ndef test_diameter():\n    \"\"\"\n    >>> diameter(5)\n    10\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 36,
      "score": 9.344531223645047,
      "candidate": "from math import sqrt\n\n\ndef find_diameter(r):\n    return 2 * r * sqrt(1 - pow(r, 2))\n\n\ndef test_diameter():\n    \"\"\"\n    >>> find_diameter(1)\n    1.0\n    >>> find_diameter(2)\n    2.92893218813452\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.330044740962162,
      "candidate": "def diameter_of_circle(r):\n    return 2 * r\n\n\nif __name__ == '__main__':\n    print diameter_of_circle(2)"
    },
    {
      "rank": 38,
      "score": 9.24472381245166,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    radius = int(input('Radius of the circle: '))\n    print(f'Diameter of the circle: {diameter_of_circle(radius)}')"
    },
    {
      "rank": 39,
      "score": 9.111264590867663,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(1))"
    },
    {
      "rank": 40,
      "score": 8.97648630055139,
      "candidate": "def diameter_of_circle(radius: int) -> float:\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    print(diameter_of_circle(1))"
    },
    {
      "rank": 41,
      "score": 8.932690854729941,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(5))"
    },
    {
      "rank": 42,
      "score": 8.825008445883254,
      "candidate": "def diameter(radius):\n    return 2*radius\n\ndef test_diameter():\n\n    radius = 10\n    expected_diameter = 20\n    assert diameter(radius) == expected_diameter"
    },
    {
      "rank": 43,
      "score": 8.805716287685573,
      "candidate": "def diameter(r):\n    return 2 * r\n\n\nprint(diameter(5))"
    },
    {
      "rank": 44,
      "score": 8.793156641036285,
      "candidate": "def diameter(radius):\n    return radius * 2\n\n\nif __name__ == '__main__':\n    radius = int(input('Enter the radius of the circle: '))\n    print(f'The diameter of the circle with radius {radius} is {diameter(radius)}')"
    },
    {
      "rank": 45,
      "score": 8.779705287326276,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius"
    },
    {
      "rank": 46,
      "score": 8.740560612801593,
      "candidate": "from math import sqrt\n\n\ndef diameter_of_circle(radius):\n    return 2 * radius\n\n\ndef diameter_of_circle_alt(radius):\n    return 2 * sqrt(radius)"
    },
    {
      "rank": 47,
      "score": 8.740329346019525,
      "candidate": "def diameter(radius):\n    return 2 * radius\n\n\nif __name__ == '__main__':\n    radius = float(input(\"Enter the radius of the circle: \"))\n    print(diameter(radius))"
    },
    {
      "rank": 48,
      "score": 8.736953740506356,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(3) == 6\n    assert diameter_of_circle(1) == 2"
    },
    {
      "rank": 49,
      "score": 8.629220720365252,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(2))"
    },
    {
      "rank": 50,
      "score": 8.574633413461592,
      "candidate": "import math\n\n\ndef diameter(radius):\n    return 2 * radius\n\n\ndef circumference(radius):\n    return 2 * math.pi * radius"
    },
    {
      "rank": 51,
      "score": 8.56814702868909,
      "candidate": "import math\n\n\ndef diameter(radius: float) -> float:\n    \"\"\"Calculate the diameter of a circle.\n\n    >>> diameter(2)\n    4.0\n    >>> diameter(3)\n    6.0\n    >>> diameter(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be greater than zero\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"radius must be greater than zero\")\n    return 2 * radius\n\n\ndef area(radius: float) -> float:\n    \"\"\"Calculate the area of a circle.\n\n    >>> area(2)\n    12.566370614359172\n    >>> area(3)\n    28.274333882308138\n    >>> area(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be greater than zero\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"radius must be greater than zero\")\n    return math.pi * radius ** 2\n\n\ndef circumference(radius: float) -> float:\n    \"\"\"Calculate the circumference of a circle.\n\n    >>> circumference(2)\n    12.566370614359172\n    >>> circumference(3)\n    18.84955592153876\n    >>> circumference(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be greater than zero\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"radius must be greater than zero\")\n    return 2 * math.pi * radius\n\n\ndef circumference_alt(radius: float) -> float:\n    \"\"\"Calculate the circumference of a circle.\n\n    >>> circumference(2)\n    12.566370614359172\n    >>> circumference(3)\n    18.84955592153876\n    >>> circumference(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError"
    },
    {
      "rank": 52,
      "score": 8.562794843921932,
      "candidate": "from math import sqrt\n\n\ndef diameter(r):\n    return 2 * sqrt(r ** 2 + r ** 2)\n\n\ndef test_diameter():\n    \"\"\"\n    >>> test_diameter()\n    \"\"\"\n    assert diameter(5) == 14\n    assert diameter(1) == 4\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 53,
      "score": 8.557573484178743,
      "candidate": "from math import sqrt\n\n\ndef diameter(r):\n    return 2 * sqrt(r**2 + r**2)\n\n\ndef test_diameter():\n    assert diameter(1) == 4\n    assert diameter(2) == 8"
    },
    {
      "rank": 54,
      "score": 8.551047744187692,
      "candidate": "def diameter_of_circle(r):\n    return 2 * r\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(3))"
    },
    {
      "rank": 55,
      "score": 8.51531448935733,
      "candidate": "import math\n\ndef diameter_of_a_circle(radius):\n    return 2*radius\n\ndef diameter_of_a_circle_using_pi(radius):\n    return 2*radius*math.pi\n\nradius = int(input(\"Enter the radius of the circle: \"))\n\nprint(\"Diameter of the circle using radius:\", diameter_of_a_circle(radius))\nprint(\"Diameter of the circle using PI:\", diameter_of_a_circle_using_pi(radius))"
    },
    {
      "rank": 56,
      "score": 8.394669296022817,
      "candidate": "import math\n\n\ndef diameter(radius):\n    return radius * 2\n\n\ndef circumference(radius):\n    return math.pi * radius * 2\n\n\ndef area(radius):\n    return math.pi * radius ** 2\n\n\nprint(diameter(5))\nprint(circumference(5))\nprint(area(5))"
    },
    {
      "rank": 57,
      "score": 8.37760721284547,
      "candidate": "import math\n\n\ndef diameter_of_a_circle(radius):\n    \"\"\"\n    >>> diameter_of_a_circle(1)\n    2\n    >>> diameter_of_a_circle(2)\n    4\n    >>> diameter_of_a_circle(3)\n    6\n    \"\"\"\n    return radius * 2\n\n\ndef diameter_of_a_circle2(radius):\n    \"\"\"\n    >>> diameter_of_a_circle2(1)\n    2\n    >>> diameter_of_a_circle2(2)\n    4\n    >>> diameter_of_a_circle2(3)\n    6\n    \"\"\"\n    return math.pi * radius * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.360149229544044,
      "candidate": "def diameter(r):\n    return 2*r"
    },
    {
      "rank": 59,
      "score": 8.359993076429392,
      "candidate": "def diameter(radius):\n    return radius * 2\n\n\nprint(diameter(10))"
    },
    {
      "rank": 60,
      "score": 8.3360471140323,
      "candidate": "def diameter_of_circle(radius):\n    return radius * 2\n\n\nif __name__ == '__main__':\n    print(diameter_of_circle(1))"
    },
    {
      "rank": 61,
      "score": 8.333127989138008,
      "candidate": "def diameter(radius: float) -> float:\n    \"\"\"Return the diameter of a circle.\n\n    :param radius: The radius of a circle.\n    :type radius: float\n    :return: The diameter of a circle.\n    :rtype: float\n    \"\"\"\n\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    radius = float(input(\"Enter the radius of a circle: \"))\n    print(diameter(radius))"
    },
    {
      "rank": 62,
      "score": 8.30581482349457,
      "candidate": "import math\n\n\ndef diameter(radius):\n    return radius * 2\n\n\ndef diameter_math(radius):\n    return math.pi * radius * 2\n\n\nprint(diameter(1))\nprint(diameter_math(1))"
    },
    {
      "rank": 63,
      "score": 8.27861448689892,
      "candidate": "def diameter(radius):\n    return radius * 2\n\n\nprint(diameter(5))"
    },
    {
      "rank": 64,
      "score": 8.228214516073676,
      "candidate": "def diameter(radius: int) -> float:\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    print(diameter(10))"
    },
    {
      "rank": 65,
      "score": 8.227830064041862,
      "candidate": "def diameter(radius):\n    return radius * 2\n\n\ndef diameter_test():\n    \"\"\"\n    >>> diameter_test()\n    \"\"\"\n    print(\"Diameter:\", diameter(10))\n\n\nif __name__ == \"__main__\":\n    diameter_test()"
    },
    {
      "rank": 66,
      "score": 8.2122013327866,
      "candidate": "def diameter(radius):\n    \"\"\"\n    >>> diameter(10)\n    20.0\n    \"\"\"\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.153386747402896,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\nprint(diameter_of_circle(2))"
    },
    {
      "rank": 68,
      "score": 8.142326136084295,
      "candidate": "def find_diameter(radius):\n    \"\"\"\n    Return the diameter of a circle with given radius.\n    \"\"\"\n    return 2 * radius"
    },
    {
      "rank": 69,
      "score": 8.046163853802275,
      "candidate": "def diameter(radius: float) -> float:\n    return radius * 2\n\n\nif __name__ == \"__main__\":\n    assert diameter(1) == 2\n    assert diameter(3) == 6\n    assert diameter(5) == 10"
    },
    {
      "rank": 70,
      "score": 8.004940730454877,
      "candidate": "def diameter(radius):\n    return radius * 2\n\n\nassert diameter(1) == 2, \"Should be 2\"\nassert diameter(5) == 10, \"Should be 10\"\nassert diameter(10) == 20, \"Should be 20\""
    },
    {
      "rank": 71,
      "score": 7.9315350974076,
      "candidate": "from math import sqrt\n\n\ndef diameter_of_circle(r):\n    return 2 * r\n\n\ndef diameter_of_circle_using_pi(r):\n    return 2 * sqrt(r ** 2)\n\n\ndef diameter_of_circle_using_pi_2(r):\n    return 2 * sqrt(r ** 2 * 0.25)"
    },
    {
      "rank": 72,
      "score": 7.917579063116882,
      "candidate": "def diameter_of_circle(radius):\n    \"\"\"\n    Returns the diameter of a circle.\n\n    >>> diameter_of_circle(1)\n    2\n\n    >>> diameter_of_circle(2)\n    4\n\n    >>> diameter_of_circle(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be positive\n\n    >>> diameter_of_circle(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be positive\n\n    >>> diameter_of_circle(-2)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be positive\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"radius must be positive\")\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 7.7556635563676375,
      "candidate": "def diameter(radius):\n    return radius * 2\n\n#test\nassert diameter(5) == 10\nassert diameter(2.5) == 5"
    },
    {
      "rank": 74,
      "score": 7.5013362069721365,
      "candidate": "def diameter_of_circle(r):\n    return 2*r\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(3) == 6\n    assert diameter_of_circle(5) == 10\n\nif __name__ == '__main__':\n    test_diameter_of_circle()\n    print 'Success! All asserts passed.'"
    },
    {
      "rank": 75,
      "score": 3.410595332031922,
      "candidate": "import math\n\ndef diameter_of_circle(r):\n    \"\"\"\n    r: radius of the circle\n    return: diameter of the circle\n    \"\"\"\n    return 2*r\n\n\ndef test_function(test_case):\n    r = test_case[0]\n    solution = test_case[1]\n    output = diameter_of_circle(r)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [(3, 6), (5, 10)]\n\ntest_function(test_case_1)"
    },
    {
      "rank": 76,
      "score": 3.399889507281152,
      "candidate": "import math\n\n\ndef diameter(radius):\n    return 2 * radius\n\n\ndef diameter_2(radius):\n    return math.pi * radius * 2\n\n\ndef diameter_3(radius):\n    return 2 * math.pi * radius\n\n\ndef diameter_4(radius):\n    return 4 * math.pi * radius / 3"
    },
    {
      "rank": 77,
      "score": 3.3959877626660866,
      "candidate": "def diameter(radius):\n    return radius * 2\n\n\ndef diameter_of_a_circle(radius):\n    diameter_of_a_circle = 2 * radius\n    return diameter_of_a_circle\n\n\ndef diameter_of_a_circle_using_pi(radius):\n    diameter_of_a_circle_using_pi = 2 * radius * 3.14\n    return diameter_of_a_circle_using_pi\n\n\n# print(diameter(10))\n# print(diameter_of_a_circle(10))\n# print(diameter_of_a_circle_using_pi(10))\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\n\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\n\ndef area(radius):\n    return 3.14 * radius * radius"
    },
    {
      "rank": 78,
      "score": 3.381068679919604,
      "candidate": "def diameter(radius):\n    return radius * 2\n\n\ndef test_diameter():\n    assert diameter(1) == 2\n    assert diameter(2) == 4\n    assert diameter(3) == 6"
    },
    {
      "rank": 79,
      "score": 3.268059875848947,
      "candidate": "def find_diameter(radius: int) -> int:\n    \"\"\"\n    >>> find_diameter(10)\n    20\n    \"\"\"\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 3.2380045506025392,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(2) == 4\n    assert diameter_of_circle(1) == 2\n    assert diameter_of_circle(0) == 0\n    assert diameter_of_circle(1.5) == 3"
    },
    {
      "rank": 81,
      "score": 3.199533029579756,
      "candidate": "def diameter_of_circle(radius):\n    \"\"\"\n    Diameter of a circle.\n\n    >>> diameter_of_circle(2)\n    4.0\n    >>> diameter_of_circle(1)\n    2.0\n    >>> diameter_of_circle(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be > 0\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"Radius must be > 0\")\n    return radius * 2\n\n\ndef diameter_of_circle_1(radius):\n    \"\"\"\n    Diameter of a circle.\n\n    >>> diameter_of_circle(2)\n    4.0\n    >>> diameter_of_circle(1)\n    2.0\n    >>> diameter_of_circle(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be > 0\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"Radius must be > 0\")\n    return 2 * radius\n\n\ndef diameter_of_circle_2(radius):\n    \"\"\"\n    Diameter of a circle.\n\n    >>> diameter_of_circle(2)\n    4.0\n    >>> diameter_of_circle(1)\n    2.0\n    >>> diameter_of_circle(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be > 0\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"Radius must be > 0\")\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 3.1920013107988066,
      "candidate": "def diameter(r):\n    return 2 * r\n\n\ndef test_diameter():\n    assert diameter(10) == 20\n    assert diameter(20) == 40\n    assert diameter(30) == 60\n    assert diameter(40) == 80"
    },
    {
      "rank": 83,
      "score": 3.1590358350986256,
      "candidate": "def diameter(r):\n    return 2 * r\n\nprint(diameter(3))\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(r):\n    return 2 * 3.14 * r\n\nprint(circumference(3))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(r):\n    return 3.14 * r ** 2\n\nprint(area(3))"
    },
    {
      "rank": 84,
      "score": 3.0976814847698746,
      "candidate": "import math\n\n\ndef diameter_of_circle(r):\n    return 2 * r\n\n\ndef diameter_of_circle_alt(r):\n    return math.pi * r * 2\n\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(10) == 20\n    assert diameter_of_circle(100) == 200\n    assert diameter_of_circle(1000) == 2000\n    assert diameter_of_circle(10000) == 20000\n\n\ndef test_diameter_of_circle_alt():\n    assert diameter_of_circle_alt(10) == 20\n    assert diameter_of_circle_alt(100) == 200\n    assert diameter_of_circle_alt(1000) == 2000\n    assert diameter_of_circle_alt(10000) == 20000"
    },
    {
      "rank": 85,
      "score": 3.084261832042647,
      "candidate": "def diameter_of_a_circle(radius):\n    return 2 * radius\n\n\ndef diameter_of_a_circle_v2(radius):\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    print(diameter_of_a_circle(5))\n    print(diameter_of_a_circle_v2(5))"
    },
    {
      "rank": 86,
      "score": 3.0678743707667713,
      "candidate": "def find_diameter(radius):\n    return radius * 2\n\ndef test_diameter():\n\n    assert find_diameter(1) == 2\n    assert find_diameter(3) == 6\n    assert find_diameter(100) == 200\n\n    print('Passed.')\n\nif __name__ == \"__main__\":\n    test_diameter()"
    },
    {
      "rank": 87,
      "score": 3.0445557531093925,
      "candidate": "import math\n\n\ndef diameter_of_circle(radius):\n    return 2 * radius\n\n\ndef diameter_of_circle_alt(radius):\n    return 2 * math.pi * radius\n\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(1) == 2\n    assert diameter_of_circle(2) == 4\n    assert diameter_of_circle(3) == 6\n    assert diameter_of_circle(4) == 8\n    assert diameter_of_circle(5) == 10\n\n\ndef test_diameter_of_circle_alt():\n    assert diameter_of_circle_alt(1) == 2 * math.pi\n    assert diameter_of_circle_alt(2) == 4 * math.pi\n    assert diameter_of_circle_alt(3) == 6 * math.pi\n    assert diameter_of_circle_alt(4) == 8 * math.pi\n    assert diameter_of_circle_alt(5) == 10 * math.pi"
    },
    {
      "rank": 88,
      "score": 3.028839873324565,
      "candidate": "def diameter_of_circle(radius):\n    return 2 * radius\n\n\ndef diameter_of_circle_2(radius):\n    return 2 * radius\n\n\ndef diameter_of_circle_3(radius):\n    return 2 * radius"
    },
    {
      "rank": 89,
      "score": 3.01755733321886,
      "candidate": "def find_diameter(radius):\n    return 2 * radius\n\n\ndef test_find_diameter():\n    assert find_diameter(5) == 10\n    assert find_diameter(10) == 20"
    },
    {
      "rank": 90,
      "score": 2.9812773683891134,
      "candidate": "def diameter(radius):\n    return 2 * radius\n\n\ndef test_diameter():\n    assert diameter(2) == 4\n\n\nif __name__ == '__main__':\n    test_diameter()"
    },
    {
      "rank": 91,
      "score": 2.924159625053748,
      "candidate": "def diameter(radius):\n    return 2 * radius\n\n\ndef test_diameter():\n    assert diameter(1) == 2"
    },
    {
      "rank": 92,
      "score": 2.9222580888788743,
      "candidate": "def diameter_of_circle(r: float) -> float:\n    \"\"\"\n    >>> diameter_of_circle(1)\n    2.0\n    \"\"\"\n    return 2 * r\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 2.898051880185639,
      "candidate": "def diameter_of_circle(radius: float) -> float:\n    \"\"\"\n    >>> diameter_of_circle(5)\n    10.0\n    >>> diameter_of_circle(-5)\n    10.0\n    \"\"\"\n    return 2 * radius\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 2.87951139986876,
      "candidate": "def diameter_of_circle(radius):\n    \"\"\"\n    This function returns the diameter of a circle.\n    \"\"\"\n    return radius * 2\n\n\ndef test_diameter_of_circle():\n    \"\"\"\n    This function tests diameter_of_circle.\n    \"\"\"\n    assert diameter_of_circle(2) == 4"
    },
    {
      "rank": 95,
      "score": 2.8789102640717332,
      "candidate": "import math\n\n\ndef diameter_of_circle(radius):\n    return radius * 2\n\n\ndef diameter_of_circle_math(radius):\n    return math.pi * radius * 2\n\n\nprint(diameter_of_circle(3))\nprint(diameter_of_circle_math(3))"
    },
    {
      "rank": 96,
      "score": 2.8128405058173755,
      "candidate": "def diameter_of_circle(radius):\n    return radius * 2\n\nassert diameter_of_circle(5) == 10, \"Should be 10\"\nassert diameter_of_circle(10) == 20, \"Should be 20\"\nassert diameter_of_circle(15) == 30, \"Should be 30\""
    },
    {
      "rank": 97,
      "score": 2.7639137403644853,
      "candidate": "import math\n\n\ndef diameter(radius):\n    return 2 * radius\n\n\ndef diameter_from_diam(diam):\n    return math.sqrt(diam ** 2 / 4)\n\n\ndef diameter_from_circumf(circumference):\n    return circumference / (2 * math.pi)\n\n\ndef diameter_from_area(area):\n    return math.sqrt(area / math.pi)\n\n\ndef diameter_from_circumf_hypot(circumference):\n    return math.sqrt(circumference ** 2 - (4 * math.pi)) / 2\n\n\ndef diameter_from_area_hypot(area):\n    return math.sqrt(area - (math.pi * area ** 2)) / (2 * math.pi)\n\n\ndef diameter_from_diam_hypot(diam):\n    return math.sqrt(diam ** 2 - 4 * math.pi) / 2\n\n\ndef diameter_from_area_hypot_2(area):\n    return (area ** 2 - math.pi * area) / (2 * math.pi * math.pi)\n\n\ndef diameter_from_circumf_hypot_2(circumference):\n    return math.sqrt(circumference ** 2 - 4 * math.pi) / 2\n\n\ndef diameter_from_diam_hypot_2(diam):\n    return math.sqrt(diam ** 2 - 4 * math.pi) / 2\n\n\ndef diameter_from_area_hypot_3(area):\n    return math.sqrt(area - math.pi * area) / (2 * math.pi)\n\n\ndef diameter_from_circumf_hypot_3(circumference):\n    return math.sqrt(circumference ** 2 - 4 * math.pi) / 2\n\n\ndef diameter_from_diam_hypot_3(diam):\n    return math.sqrt(diam ** 2 - 4 * math.pi) / 2"
    },
    {
      "rank": 98,
      "score": 2.7007416698702014,
      "candidate": "def find_diameter(radius):\n    return radius * 2\n\n\ndef find_diameter_in_cm(radius_in_cm):\n    return radius_in_cm * 2 * 100\n\n\ndef find_diameter_in_in(radius_in_in):\n    return radius_in_in * 2 * 39.37"
    },
    {
      "rank": 99,
      "score": 2.6889862777390254,
      "candidate": "def diameter_of_circle(r):\n    return 2 * r\n\n\ndef test_diameter_of_circle():\n    assert diameter_of_circle(1) == 2\n\n\nif __name__ == '__main__':\n    print diameter_of_circle(1)"
    },
    {
      "rank": 100,
      "score": 2.490485767791258,
      "candidate": "def diameter_of_circle(radius):\n    return radius * 2\n\n\ndef diameter_of_circle_with_pi(radius):\n    return radius * 2 * 3.141592653589793\n\n\ndef diameter_of_circle_with_pi_2(radius):\n    return radius * 2 * 3.141592653589793"
    }
  ]
}