{
  "timestamp": "2025-09-14T23:36:30.548739",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 173,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than_number(list_of_numbers: List[int], number: int) -> List[Any]:\n    \"\"\"Returns a list of all the values in a list that are greater than a specified number.\n\n    Args:\n        list_of_numbers (List[int]): The list of numbers\n        number (int): The number to compare\n\n    Examples:\n        >>> greater_than_number([1, 2, 3, 4, 5], 3)\n        [4, 5]\n    \"\"\"\n    return [num for num in list_of_numbers if num > number]\n\n\nif __name__ == \"__main__\":\n    print(greater_than_number([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef find_all_greater(lst: List[Any], num: int) -> List[Any]:\n    \"\"\"Finds all elements greater than a specified number.\n\n    Args:\n        lst (List[Any]): List of elements.\n        num (int): Number to compare elements against.\n\n    Examples:\n        >>> find_all_greater([1, 2, 3, 4, 5], 3)\n        [4, 5]\n    \"\"\"\n    return [item for item in lst if item > num]\n\n\nif __name__ == \"__main__\":\n    print(find_all_greater([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef find_greater(list_of_numbers: List[int], number: int) -> List[int]:\n    \"\"\"Returns all the numbers in a list that are greater than a specified number.\n\n    Args:\n        list_of_numbers (List[int]): list of numbers\n        number (int): number to compare with\n\n    Examples:\n        >>> find_greater([1, 2, 3, 4, 5, 6], 3)\n        [4, 5, 6]\n    \"\"\"\n    return [num for num in list_of_numbers if num > number]\n\n\nif __name__ == \"__main__\":\n    print(find_greater([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than(arr: List[Any], n: int) -> List[Any]:\n    \"\"\"Returns all values in a list that are greater than a specified number.\n\n    Examples:\n        >>> greater_than([1, 2, 3, 4, 5, 6], 3)\n        [4, 5, 6]\n    \"\"\"\n    return [x for x in arr if x > n]\n\n\nif __name__ == \"__main__\":\n    print(greater_than([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef find_greater(given_list: List[Any], number: int) -> List[Any]:\n    \"\"\"\n    >>> find_greater([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    \"\"\"\n    return [value for value in given_list if value > number]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than(list_: List[Any], value: Any) -> List[Any]:\n    \"\"\"Returns a list of all the values in a list that are greater than a specified number.\n\n    Args:\n        list_ (List[Any]): list of values to compare with the specified value.\n        value (Any): the specified value to compare with the values in the list.\n\n    Examples:\n        >>> greater_than([1, 2, 3, 4, 5], 3)\n        [4, 5]\n\n    Returns:\n        List[Any]: a list of all the values in a list that are greater than a specified number.\n    \"\"\"\n    return [element for element in list_ if element > value]\n\n\nif __name__ == \"__main__\":\n    print(greater_than([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def greater_than(num, list):\n    return [x for x in list if x > num]\n\n\nprint(greater_than(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than(num: int, lst: List[Any]) -> List[Any]:\n    \"\"\"Find all the values in a list that are greater than a specified number.\n\n    Examples:\n        >>> greater_than(2, [1, 2, 3, 4])\n        [3, 4]\n\n    Args:\n        num: The specified number.\n        lst: The list.\n\n    Returns:\n        The list with all the values greater than the specified number.\n    \"\"\"\n    return [item for item in lst if item > num]\n\n\nif __name__ == \"__main__\":\n    print(greater_than(2, [1, 2, 3, 4]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_values_greater_than(list, threshold):\n    greater_than_list = []\n    for item in list:\n        if item > threshold:\n            greater_than_list.append(item)\n    return greater_than_list\n\n\ndef main():\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_values_greater_than(list, 5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than(num: int, arr: List[Any]) -> List[Any]:\n    \"\"\"Returns all the values in a list that are greater than a specified number.\n\n    Args:\n        num (int): specified number\n        arr (List[Any]): list of values\n\n    Examples:\n        >>> greater_than(2, [1, 2, 3, 4, 5])\n        [3, 4, 5]\n    \"\"\"\n    return [element for element in arr if element > num]\n\n\nif __name__ == \"__main__\":\n    print(greater_than(2, [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef find_greater(input_list: List[int], number: int) -> List[int]:\n    \"\"\"Returns all the values in a list that are greater than a specified number.\n\n    Args:\n        input_list (List[int]): input list\n        number (int): number to compare\n\n    Examples:\n        >>> find_greater([1, 2, 3, 4, 5], 3)\n        [4, 5]\n\n    Returns:\n        List[int]: List of values that are greater than a specified number\n    \"\"\"\n    return [num for num in input_list if num > number]\n\n\ndef find_greater_with_lambda(input_list: List[int], number: int) -> List[int]:\n    \"\"\"Returns all the values in a list that are greater than a specified number.\n\n    Args:\n        input_list (List[int]): input list\n        number (int): number to compare\n\n    Examples:\n        >>> find_greater_with_lambda([1, 2, 3, 4, 5], 3)\n        [4, 5]\n\n    Returns:\n        List[int]: List of values that are greater than a specified number\n    \"\"\"\n    return list(filter(lambda num: num > number, input_list))\n\n\nif __name__ == \"__main__\":\n    print(find_greater([1, 2, 3, 4, 5], 3))\n    print(find_greater_with_lambda([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import List, Optional\n\n\ndef find_greater_than(array: List[int], limit: Optional[int] = 0) -> List[int]:\n    \"\"\"Return a list of all values greater than the limit.\n\n    >>> find_greater_than([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    >>> find_greater_than([1, 2, 3, 4, 5])\n    [4, 5]\n    \"\"\"\n    return [num for num in array if num > limit]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_values(list, value):\n    return [i for i in list if i > value]\n\n\ndef main():\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_values(list, 4))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef find_greater_than(list: List[Any], val: Any) -> List[Any]:\n    \"\"\"Finds all the values in a list that are greater than a specified number.\n\n    Args:\n        list (List[Any]): The list to search.\n        val (Any): The value to compare with.\n\n    Examples:\n        >>> find_greater_than([1, 2, 3], 0)\n        [1, 2, 3]\n        >>> find_greater_than([1, 2, 3], 1)\n        [2, 3]\n        >>> find_greater_than([1, 2, 3], 2)\n        [3]\n        >>> find_greater_than([1, 2, 3], 3)\n        []\n        >>> find_greater_than([1, 2, 3], 4)\n        []\n    \"\"\"\n    return [i for i in list if i > val]\n\n\nif __name__ == \"__main__\":\n    print(find_greater_than([1, 2, 3], 0))\n    print(find_greater_than([1, 2, 3], 1))\n    print(find_greater_than([1, 2, 3], 2))\n    print(find_greater_than([1, 2, 3], 3))\n    print(find_greater_than([1, 2, 3], 4))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from typing import List, Optional\n\n\ndef greater_than(lst: List[int], val: Optional[int] = None) -> List[int]:\n    \"\"\"Return a list with all the values in a list that are greater than a specified number.\n\n    Examples:\n        >>> assert greater_than([1, 2, 3], 1) == [2, 3]\n        >>> assert greater_than([1, 2, 3], 2) == [3]\n        >>> assert greater_than([1, 2, 3], 3) == []\n        >>> assert greater_than([1, 2, 3], None) == []\n        >>> assert greater_than([1, 2, 3], 0) == [1, 2, 3]\n        >>> assert greater_than([1, 2, 3], -1) == [1, 2, 3]\n    \"\"\"\n    if val is None:\n        return []\n\n    return [i for i in lst if i > val]\n\n\nif __name__ == \"__main__\":\n    print(greater_than([1, 2, 3], 1))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than(input_list: List[int], number: int) -> List[Any]:\n    \"\"\"Returns all the values in a list that are greater than a specified number.\n\n    Args:\n        input_list (List[int]): a list of integers\n        number (int): a number\n\n    Examples:\n        >>> greater_than([1, 2, 3, 4, 5], 3)\n        [4, 5]\n    \"\"\"\n    return [x for x in input_list if x > number]\n\n\nif __name__ == \"__main__\":\n    print(greater_than([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from typing import List, Callable\n\n\ndef find_all_greater(list_of_ints: List[int], number: int) -> List[int]:\n    \"\"\"Find all integers greater than a number in a list.\n\n    Args:\n        list_of_ints (List[int]): list of integers\n        number (int): integer to find\n\n    Returns:\n        List[int]: list of integers greater than number\n    \"\"\"\n    return [item for item in list_of_ints if item > number]\n\n\n# Simple test\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_all_greater(l, 5))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def greater_than(list, number):\n    \"\"\"\n    return all the values in a list that are greater than a specified number\n    \"\"\"\n    return [x for x in list if x > number]"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def find_greater_than(numbers, threshold):\n    \"\"\"Returns a list of all the numbers in a list that are greater than a specified number.\"\"\"\n    return [number for number in numbers if number > threshold]"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def find_greater(lst, num):\n    return [x for x in lst if x > num]"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def find_greater_than(num, lst):\n    return [n for n in lst if n > num]"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def find_greater(lst, num):\n    \"\"\"\n    >>> find_greater([1,2,3,4], 2)\n    [3, 4]\n    \"\"\"\n    return [item for item in lst if item > num]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "def greater_than(lst, num):\n    return [x for x in lst if x > num]"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def values_greater_than(lst, num):\n    return [i for i in lst if i > num]\n\n\ndef test_values_greater_than():\n    \"\"\"\n    >>> test_values_greater_than()\n    \"\"\"\n    assert values_greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [6, 7, 8, 9]\n    assert values_greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == [7, 8, 9]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def greater_than(list_of_numbers, n):\n    return [x for x in list_of_numbers if x > n]\n\n\nif __name__ == '__main__':\n    print(greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def find_greater_values(list, number):\n    return [value for value in list if value > number]\n\n\ndef test_find_greater_values():\n    assert find_greater_values([1, 2, 3, 4, 5], 3) == [4, 5]"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def values_above_threshold(input_list, threshold):\n    return [x for x in input_list if x > threshold]\n\nprint(values_above_threshold([1, 2, 3, 4, 5], 3))\nprint(values_above_threshold([1, 2, 3, 4, 5], 4))\nprint(values_above_threshold([1, 2, 3, 4, 5], 5))\nprint(values_above_threshold([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_greater_than(list, num):\n    result = []\n    for item in list:\n        if item > num:\n            result.append(item)\n    return result\n\n\nprint(find_greater_than([1, 2, 3, 4, 5], 3)) # [4, 5]\nprint(find_greater_than([1, 2, 3, 4, 5], 10)) # []\nprint(find_greater_than([5, 3, 2, 1, 4], 3)) # [5, 4]\nprint(find_greater_than([1, 2, 3, 4, 5], 1)) # [2, 3, 4, 5]\nprint(find_greater_than([1, 2, 3, 4, 5], 0)) # [1, 2, 3, 4, 5]"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def find_all_greater_than(list, num):\n    # return [x for x in list if x > num]\n    return filter(lambda x: x > num, list)\n\nif __name__ == '__main__':\n    print(find_all_greater_than([5, 2, 3, 4, 6, 8, 10, 12], 5))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def find_greater_than(list, n):\n    return [x for x in list if x > n]\n\n# print(find_greater_than([1,2,3,4,5,6,7,8,9], 5))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def find_all_greater_than(lst, num):\n    return [x for x in lst if x > num]\n\nif __name__ == '__main__':\n    print(find_all_greater_than([1,2,3,4,5,6,7,8,9,10], 5))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def find_greater(lst, num):\n    \"\"\"\n    >>> find_greater([1,2,3,4,5], 3)\n    [4, 5]\n    >>> find_greater([6,5,4,3,2,1], 5)\n    [6]\n    >>> find_greater([1,2,3,4,5], 6)\n    []\n    \"\"\"\n    return [x for x in lst if x > num]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_greater_than_x(given_list: List[int], x: int) -> List[int]:\n    \"\"\"\n    Return the values greater than x\n    >>> find_greater_than_x([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    >>> find_greater_than_x([1, 1, 1, 1, 1], 0)\n    [1, 1, 1, 1, 1]\n    >>> find_greater_than_x([1, 2, 3, 4, 5], 6)\n    []\n    \"\"\"\n    return [num for num in given_list if num > x]\n\n\ndef find_greater_than_x_using_filter(given_list: List[int], x: int) -> List[int]:\n    \"\"\"\n    Return the values greater than x\n    >>> find_greater_than_x_using_filter([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    >>> find_greater_than_x_using_filter([1, 1, 1, 1, 1], 0)\n    [1, 1, 1, 1, 1]\n    >>> find_greater_than_x_using_filter([1, 2, 3, 4, 5], 6)\n    []\n    \"\"\"\n    return list(filter(lambda num: num > x, given_list))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def greater_than_x(lst, x):\n    return [n for n in lst if n > x]\n\n\ndef test_function():\n    assert greater_than_x([1, 2, 3, 4, 5, 6], 3) == [4, 5, 6]\n    assert greater_than_x([1, 2, 3, 4, 5, 6], 4) == [5, 6]\n    assert greater_than_x([1, 2, 3, 4, 5, 6], 6) == []\n    assert greater_than_x([1, 2, 3, 4, 5, 6], 5) == []\n    assert greater_than_x([1, 2, 3, 4, 5, 6], 0) == [1, 2, 3, 4, 5, 6]\n    assert greater_than_x([1, 2, 3, 4, 5, 6], 7) == []\n    assert greater_than_x([1, 2, 3, 4, 5, 6], 5.5) == [6]\n    assert greater_than_x([1, 2, 3, 4, 5, 6], 4.5) == [5, 6]\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def greater_than(num_list, num):\n    # filter(function, iterable)\n    # Returns a list of the items in iterable for which function returns true.\n    return list(filter(lambda x: x > num, num_list))\n\n\nif __name__ == '__main__':\n    print(greater_than([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from typing import List, Any\n\n\ndef find_all_greater(nums: List[int], limit: int) -> List[int]:\n    \"\"\"Finds all numbers greater than a specified number.\n\n    Args:\n        nums (List[int]): List of numbers.\n        limit (int): Number to compare with.\n\n    Returns:\n        List[int]: List of numbers greater than the limit.\n    \"\"\"\n    return [num for num in nums if num > limit]\n\n\nif __name__ == \"__main__\":\n    print(find_all_greater([1, 2, 3, 4, 5, 6], 4))\n    print(find_all_greater([1, 2, 3, 4, 5, 6], 7))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_greater_than(mylist, val):\n    return [i for i in mylist if i > val]\n\n\ndef test_find_greater_than():\n    assert find_greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [6, 7, 8, 9]\n    assert find_greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def get_higher(list, number):\n    return [i for i in list if i > number]\n\nprint(get_higher([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\nprint(get_higher([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\nprint(get_higher([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(get_higher([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\nprint(get_higher([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\nprint(get_higher([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def greater_than(lst, num):\n    return [x for x in lst if x > num]\n\n\nprint(greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def greater_than(lst, val):\n    return [num for num in lst if num > val]\n\n\ndef test_greater_than():\n    assert greater_than([1, 2, 3, 4, 5], 3) == [4, 5]\n\n\nif __name__ == \"__main__\":\n    test_greater_than()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def find_greater_than(list, num):\n    \"\"\"\n    >>> find_greater_than([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    >>> find_greater_than([1, 2, 3, 4, 5], 5)\n    []\n    \"\"\"\n    greater_than = []\n    for item in list:\n        if item > num:\n            greater_than.append(item)\n    return greater_than\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_greater(lst, num):\n    return [element for element in lst if element > num]"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def greater_than(input_list, num):\n    \"\"\"\n    Return all the values in a list that are greater than a specified number.\n\n    >>> greater_than([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    >>> greater_than([1, 2, 3, 4, 5], 6)\n    []\n    >>> greater_than([1, 2, 3, 4, 5], 5)\n    []\n    \"\"\"\n    return [n for n in input_list if n > num]"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_values_greater_than(lst, num):\n    return [x for x in lst if x > num]"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def find_all_greater_than(list, number):\n    return [x for x in list if x > number]\n\ndef test_cases():\n    assert find_all_greater_than([1, 2, 3, 4, 5, 6], 3) == [4, 5, 6]\n    assert find_all_greater_than([1, 2, 3, 4, 5, 6], 4) == [5, 6]\n    assert find_all_greater_than([1, 2, 3, 4, 5, 6], 6) == [6]\n    assert find_all_greater_than([1, 2, 3, 4, 5, 6], 7) == []\n    assert find_all_greater_than([1, 2, 3, 4, 5, 6], 0) == [1, 2, 3, 4, 5, 6]\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_greater_than(list, number):\n    return [x for x in list if x > number]\n\ndef main():\n    print(find_greater_than([1, 2, 3, 4, 5], 3)) # [4, 5]\n    print(find_greater_than([1, 2, 3, 4, 5], 6)) # []\n    print(find_greater_than([1, 2, 3, 4, 5], 0)) # [1, 2, 3, 4, 5]\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_greater(lst, num):\n    return [x for x in lst if x > num]\n\n\nif __name__ == '__main__':\n    print(find_greater([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def find_greater_than(list, number):\n    \"\"\"Return a list of all values in a list that are greater than a specified number.\n\n    >>> find_greater_than([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    \"\"\"\n    return [x for x in list if x > number]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_large_values(list, num):\n    result = []\n    for i in range(len(list)):\n        if list[i] > num:\n            result.append(list[i])\n    return result\n\n\ndef test_find_large_values():\n    assert find_large_values([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [6, 7, 8, 9]\n    assert find_large_values([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == [7, 8, 9]\n    assert find_large_values([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == [9]\n    assert find_large_values([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == []"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from typing import List, Optional\n\n\ndef greater_than(lst: List[int], value: int) -> List[int]:\n    \"\"\"Returns a list of values greater than a specified number.\n\n    Args:\n        lst (List[int]): list of numbers\n        value (int): number to compare\n\n    Returns:\n        List[int]: list of values greater than a specified number\n    \"\"\"\n    return [n for n in lst if n > value]\n\n\ndef main():\n    print(greater_than([1, 2, 3, 4, 5], 3))\n    print(greater_than([1, 2, 3, 4, 5], 6))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def greater_than(list, num):\n    \"\"\"\n    >>> greater_than([1,2,3,4,5], 3)\n    [4, 5]\n    \"\"\"\n    return [num for num in list if num > num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def find_greater_than(numbers, threshold):\n    \"\"\"Returns a list of all numbers in a list that are greater than a specified number.\n\n    >>> find_greater_than([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    \"\"\"\n    return [x for x in numbers if x > threshold]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def larger_than_n(lst, n):\n    return [x for x in lst if x > n]\n\n\nprint(larger_than_n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def greater_than_num(lst, num):\n    result = []\n    for i in lst:\n        if i > num:\n            result.append(i)\n    return result\n\nprint(greater_than_num([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def large_than_10(lst):\n    result = []\n    for num in lst:\n        if num > 10:\n            result.append(num)\n    return result\n\nif __name__ == '__main__':\n    print(large_than_10([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def greater_than(list_of_values, specified_number):\n    return [x for x in list_of_values if x > specified_number]\n\n\nprint(greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def greater_than(num, lst):\n    return [i for i in lst if i > num]\n\n\nprint(greater_than(3, [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def greater_than(input_list, num):\n    return [x for x in input_list if x > num]\n\n\nprint(greater_than([1, 2, 3, 4, 5, 6, 7, 8], 4))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def values_greater_than(lst, value):\n    return [x for x in lst if x > value]"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def greater_than(list, number):\n    return [i for i in list if i > number]\n\n\ndef test_cases():\n    assert greater_than([1, 2, 3, 4, 5], 3) == [4, 5]\n    assert greater_than([1, 2, 3, 4, 5], 6) == []\n    assert greater_than([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n    assert greater_than([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5]\n    assert greater_than([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5]\n    assert greater_than([1, 2, 3, 4, 5], 4) == [5]\n\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def greater_than(lst, num):\n    result = []\n    for i in lst:\n        if i > num:\n            result.append(i)\n    return result"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def greater_than(lst, num):\n    return [x for x in lst if x > num]\n\n\nif __name__ == '__main__':\n    print(greater_than([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def greater_than(list, n):\n    \"\"\"\n    Return all the values in a list that are greater than a specified number.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    :param list: List of values.\n    :type list: list\n    :param n: A specified number.\n    :type n: int\n    :return: All the values in a list that are greater than a specified number.\n    :rtype: list\n    \"\"\"\n    return [i for i in list if i > n]\n\n\ndef main():\n    list = [1, 2, 3, 4, 5, 6]\n    n = 4\n    print(greater_than(list, n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def greater_than_num(num, l):\n    return [x for x in l if x > num]\n\n\ndef test_greater_than_num():\n    assert greater_than_num(3, [3, 4, 5, 6, 7, 8, 9]) == [4, 5, 6, 7, 8, 9]\n\n\nif __name__ == '__main__':\n    test_greater_than_num()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def greater_than(numbers, target):\n    return [x for x in numbers if x > target]\n\n\nprint(greater_than([1, 2, 3, 4, 5], 3))\nprint(greater_than([1, 2, 3, 4, 5], 10))\nprint(greater_than([1, 2, 3, 4, 5], 5))\nprint(greater_than([1, 2, 3, 4, 5], 0))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def find_greater_than(list, number):\n    return [x for x in list if x > number]\n\nprint(find_greater_than([1, 2, 3, 4, 5], 3))\nprint(find_greater_than([1, 2, 3, 4, 5], 4))\nprint(find_greater_than([1, 2, 3, 4, 5], 5))\nprint(find_greater_than([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_greater_than(nums, val):\n    \"\"\"Finds all values in a list that are greater than a specified number.\n\n    Args:\n        nums: List of numbers.\n        val: Number to compare against.\n\n    Returns:\n        List of numbers that are greater than val.\n    \"\"\"\n    return [n for n in nums if n > val]\n\nif __name__ == '__main__':\n    print(find_greater_than([1, 2, 3, 4, 5, 6], 4))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def greater_than(list, number):\n    return [x for x in list if x > number]\n\nif __name__ == '__main__':\n    print(greater_than([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def greater_than_10(list):\n    result = []\n    for num in list:\n        if num > 10:\n            result.append(num)\n    return result\n\nif __name__ == '__main__':\n    print(greater_than_10([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def find_greater(lst, n):\n    return [i for i in lst if i > n]\n\ndef main():\n    print(find_greater([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def greater_than(input_list, number):\n    \"\"\"\n    >>> greater_than([1, 2, 3, 4, 5], 3)\n    [4, 5]\n\n    >>> greater_than([1, 2, 3, 4, 5], 6)\n    []\n\n    >>> greater_than([1, 2, 3, 4, 5], 1)\n    [2, 3, 4, 5]\n    \"\"\"\n    output = []\n    for item in input_list:\n        if item > number:\n            output.append(item)\n    return output\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def greater_than(list_: list, number: int) -> list:\n    \"\"\"Greater than.\"\"\"\n    return [el for el in list_ if el > number]\n\n\ndef main():\n    print(greater_than([1, 2, 3, 4, 5, 6, 7], 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def get_greater(lst, num):\n    greater_lst = []\n    for x in lst:\n        if x > num:\n            greater_lst.append(x)\n    return greater_lst\n\nlst = [1, 2, 3, 4, 5]\nnum = 3\n\nprint(get_greater(lst, num))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def find_values_greater_than(input_list, number):\n    \"\"\"\n    input_list: a list of numbers\n    number: a number\n    return: a list of numbers\n    \"\"\"\n    result = []\n    for i in input_list:\n        if i > number:\n            result.append(i)\n    return result\n\ninput_list = [1, 3, 5, 7, 9, 11]\nprint(find_values_greater_than(input_list, 6))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def greater_than(list_of_numbers, number):\n    return [num for num in list_of_numbers if num > number]\n\n\nprint(greater_than([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def larger(num_list, number):\n    new_list = []\n    for item in num_list:\n        if item > number:\n            new_list.append(item)\n    return new_list\n\nprint(larger([1,2,3,4,5,6], 3))\nprint(larger([1,2,3,4,5,6], 4))\nprint(larger([1,2,3,4,5,6], 5))\nprint(larger([1,2,3,4,5,6], 6))\nprint(larger([1,2,3,4,5,6], 7))\nprint(larger([1,2,3,4,5,6], 8))\nprint(larger([1,2,3,4,5,6], 9))\nprint(larger([1,2,3,4,5,6], 10))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def find_values_greater_than(lst, num):\n    \"\"\"\n    >>> find_values_greater_than([5, 4, 3, 2, 1], 3)\n    [4, 5]\n    \"\"\"\n    return [x for x in lst if x > num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than(lst: List[Any], num: int) -> List[Any]:\n    \"\"\"Returns all values in a list that are greater than a specified number.\n\n    Args:\n        lst (List[Any]): list to check.\n        num (int): value to check against.\n\n    Examples:\n        >>> greater_than([1, 2, 3, 4, 5], 3)\n        [4, 5]\n    \"\"\"\n    return [num for num in lst if num > num]\n\n\nif __name__ == \"__main__\":\n    print(greater_than([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def find_greater(lst: list, threshold: int) -> list:\n    \"\"\"\n    >>> find_greater([1, 3, 5, 8, 10, 12, 17, 19, 21], 10)\n    [10, 12, 17, 19, 21]\n    \"\"\"\n    return [i for i in lst if i > threshold]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def greater_than(lst: list, num: int) -> list:\n    \"\"\"\n    >>> greater_than([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    \"\"\"\n    return [x for x in lst if x > num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_greater_values(list_of_numbers: List[int], number: int) -> List[int]:\n    \"\"\"Find all numbers in a list that are greater than a specified number.\n\n    Args:\n        list_of_numbers (List[int]): list of numbers\n        number (int): number to compare against\n\n    Returns:\n        List[int]: numbers that are greater than the specified number\n    \"\"\"\n\n    return [num for num in list_of_numbers if num > number]\n\n\nif __name__ == \"__main__\":\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_greater_values(list_of_numbers, 4))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def find_greater(lst, number):\n    \"\"\"\n    >>> find_greater([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    \"\"\"\n    return [x for x in lst if x > number]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef greater_than(lst: List[int], number: int) -> List[int]:\n    \"\"\"Find all the values in a list that are greater than a specified number.\n\n    Args:\n        lst (List[int]): list of integers\n        number (int): specified number\n\n    Returns:\n        List[int]: list of integers greater than the specified number\n    \"\"\"\n    return [i for i in lst if i > number]\n\n\nif __name__ == \"__main__\":\n    print(greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def find_greater(list, threshold):\n    greater_list = []\n    for element in list:\n        if element > threshold:\n            greater_list.append(element)\n    return greater_list\n\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    threshold = 5\n    greater_list = find_greater(list, threshold)\n    print(greater_list)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def find_values(lst, num):\n    \"\"\"\n    >>> find_values([1,2,3,4,5,6,7,8,9], 5)\n    [6, 7, 8, 9]\n    >>> find_values([1,2,3,4,5,6,7,8,9], 6)\n    [7, 8, 9]\n    >>> find_values([1,2,3,4,5,6,7,8,9], 7)\n    [8, 9]\n    >>> find_values([1,2,3,4,5,6,7,8,9], 8)\n    [9]\n    >>> find_values([1,2,3,4,5,6,7,8,9], 9)\n    []\n    >>> find_values([1,2,3,4,5,6,7,8,9], 10)\n    []\n    \"\"\"\n    return [x for x in lst if x > num]\n\ndef find_values_no_for(lst, num):\n    \"\"\"\n    >>> find_values_no_for([1,2,3,4,5,6,7,8,9], 5)\n    [6, 7, 8, 9]\n    >>> find_values_no_for([1,2,3,4,5,6,7,8,9], 6)\n    [7, 8, 9]\n    >>> find_values_no_for([1,2,3,4,5,6,7,8,9], 7)\n    [8, 9]\n    >>> find_values_no_for([1,2,3,4,5,6,7,8,9], 8)\n    [9]\n    >>> find_values_no_for([1,2,3,4,5,6,7,8,9], 9)\n    []\n    >>> find_values_no_for([1,2,3,4,5,6,7,8,9], 10)\n    []\n    \"\"\"\n    return list(filter(lambda x: x"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def greater_than(list_of_nums, num):\n    \"\"\"\n    >>> greater_than([1, 2, 3, 4, 5], 3)\n    [4, 5]\n    >>> greater_than([1, 2, 3, 4, 5], 6)\n    []\n    \"\"\"\n    return [n for n in list_of_nums if n > num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def find_greater_than(num, lst):\n    \"\"\"Returns all the values in a list that are greater than a specified number.\n\n    Args:\n        num (int): The specified number.\n        lst (list): A list of numbers.\n\n    Returns:\n        list: A list of numbers that are greater than the specified number.\n    \"\"\"\n    return [n for n in lst if n > num]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def find_nums_greater_than_n(lst, n):\n    \"\"\"\n\n    :param lst: list to be searched\n    :param n: number to be compared to\n    :return: list with values greater than n\n    \"\"\"\n    greater_than_n = []\n    for i in range(0, len(lst)):\n        if lst[i] > n:\n            greater_than_n.append(lst[i])\n    return greater_than_n\n\n\nif __name__ == '__main__':\n    print(find_nums_greater_than_n([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than(input_list: List[Any], number: int) -> List[Any]:\n    \"\"\"Returns all the values in a list that are greater than a specified number.\n\n    Args:\n        input_list (List[Any]): list of values\n        number (int): specified number\n\n    Examples:\n        >>> greater_than([1, 2, 3, 4, 5], 3)\n        [4, 5]\n        >>> greater_than([1, 2, 3, 4, 5], 6)\n        []\n        >>> greater_than([1, 2, 3, 4, 5], -1)\n        [1, 2, 3, 4, 5]\n    \"\"\"\n    return [i for i in input_list if i > number]\n\n\ndef main():\n    print(greater_than([1, 2, 3, 4, 5], 3))\n    print(greater_than([1, 2, 3, 4, 5], 6))\n    print(greater_than([1, 2, 3, 4, 5], -1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def find_greater(list_of_nums, num):\n    greater_than = []\n    for i in list_of_nums:\n        if i > num:\n            greater_than.append(i)\n    return greater_than\n\nlist_of_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnum = 5\nprint(find_greater(list_of_nums, num)) # [6, 7, 8, 9, 10]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than or equal to a specified number.\n\"\"\"\n\ndef find_greater_equal(list_of_nums, num):\n    greater_than_equal = []\n    for i in list_of_nums:\n        if i >= num:\n            greater_than_equal.append(i)\n    return greater_than_equal\n\nlist_of_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnum = 5\nprint(find_greater_equal(list_of_nums, num)) # [5, 6, 7, 8, 9, 10]\n\n\"\"\"\nWrite a function to find all the values in a list that are less than a specified number.\n\"\"\"\n\ndef find_less(list_of_nums, num):\n    less_than = []\n    for i in list_of_nums:\n        if i < num:\n            less_than.append(i)\n    return less_than\n\nlist_of_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnum = 5\nprint(find_less(list_of_nums, num)) # [1, 2, 3, 4]\n\n\"\"\"\nWrite a function to find all the values in a list that are less than or equal to a specified number.\n\"\"\"\n\ndef find_"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than(list_: List[Any], n: int) -> List[Any]:\n    \"\"\"Returns list of values in a list that are greater than a number.\n\n    Args:\n        list_ (List[Any]): list of values to be checked\n        n (int): number to compare values to\n\n    Examples:\n        >>> greater_than([1, 2, 3, 4, 5], 3)\n        [4, 5]\n        >>> greater_than([1, 2, 3, 4, 5], 6)\n        []\n    \"\"\"\n    return [x for x in list_ if x > n]\n\n\nif __name__ == \"__main__\":\n    print(greater_than([1, 2, 3, 4, 5], 3))\n    print(greater_than([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List, Any\n\n\ndef get_values_greater_than(lst: List[Any], val: Any) -> List[Any]:\n    \"\"\"Finds all values in a list that are greater than a specified number.\n\n    Args:\n        lst (List[Any]): list of values\n        val (Any): value to compare against\n\n    Examples:\n        >>> assert get_values_greater_than([1, 2, 3, 4, 5], 3) == [4, 5]\n    \"\"\"\n    return [x for x in lst if x > val]\n\n\nif __name__ == \"__main__\":\n    print(get_values_greater_than([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_all_greater(my_list, val):\n    \"\"\"\n    Find all the values in a list that are greater than a specified number.\n\n    Args:\n     my_list: A list of integers.\n     val: An integer.\n\n    Returns:\n     A list of all the integers in my_list that are greater than val.\n    \"\"\"\n\n    return [item for item in my_list if item > val]\n\n\nif __name__ == '__main__':\n    print(find_all_greater([5, 3, 1, 2, 4], 3))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_greater_than(given_list: List, number: int) -> List:\n    \"\"\"Finds all the values in a list that are greater than a specified number.\n\n    Args:\n        given_list (List): List of integers.\n        number (int): Number to check against.\n\n    Returns:\n        List: List of all values in the given list that are greater than the specified number.\n    \"\"\"\n    return [i for i in given_list if i > number]\n\n\nif __name__ == \"__main__\":\n    print(find_greater_than([1, 2, 3, 4, 5, 6], 4))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef greater_than(target: int, lst: List[int]) -> List[int]:\n    \"\"\"Returns a list of all values in a list that are greater than a specified number.\n\n    Args:\n        target: Number to compare with.\n        lst: List to search through.\n\n    Examples:\n        >>> greater_than(2, [3, 2, 5, 7, 4])\n        [3, 5, 7]\n\n    \"\"\"\n    return [x for x in lst if x > target]\n\n\nif __name__ == \"__main__\":\n    print(greater_than(2, [3, 2, 5, 7, 4]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_num_greater_than(lst, num):\n    \"\"\"Return a list of all values in lst that are greater than num.\"\"\"\n    return [x for x in lst if x > num]\n\n\nif __name__ == '__main__':\n    print(find_num_greater_than([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_greater_than(lst, num):\n    \"\"\"\n    >>> find_greater_than([1, 2, 3, 4, 5, 6, 7], 3)\n    [4, 5, 6, 7]\n    \"\"\"\n    return [x for x in lst if x > num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef greater_than(nums: List[int], threshold: int) -> List[int]:\n    \"\"\"Returns all the values in a list that are greater than a specified number.\n\n    Args:\n        nums (List[int]): list of numbers\n        threshold (int): threshold number\n\n    Returns:\n        List[int]: list of numbers greater than threshold\n    \"\"\"\n    return [num for num in nums if num > threshold]\n\n\nif __name__ == \"__main__\":\n    print(greater_than([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_greater(arr, n):\n    return [x for x in arr if x > n]\n\nif __name__ == '__main__':\n    print(find_greater([1,2,3,4,5], 3))\n    print(find_greater([1,2,3,4,5], 6))\n    print(find_greater([1,2,3,4,5], 0))\n    print(find_greater([1,2,3,4,5], 5))\n    print(find_greater([1,2,3,4,5], -1))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List, Any\n\n\ndef greater_than(data: List[Any], number: int) -> List[Any]:\n    \"\"\"Return all values in a list that are greater than a specified number.\n\n    Args:\n        data (List[Any]): list of values\n        number (int): number to compare\n\n    Returns:\n        List[Any]: list of values greater than number\n    \"\"\"\n    return [num for num in data if num > number]\n\n\nif __name__ == \"__main__\":\n    print(greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(greater_than([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], \"f\"))"
    }
  ]
}