{
  "timestamp": "2025-09-15T01:32:11.868742",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 426,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def remove_odd_chars(string):\n    # O(n) time, O(n) space\n    odd_chars = set(string)\n    odd_chars.remove(\"\")\n    result = []\n    for char in string:\n        if char not in odd_chars:\n            result.append(char)\n    return \"\".join(result)\n\n\ndef test_remove_odd_chars():\n    \"\"\"\n    >>> test_remove_odd_chars()\n    True\n    \"\"\"\n    assert remove_odd_chars(\"abc\") == \"abc\"\n    assert remove_odd_chars(\"abb\") == \"b\"\n    assert remove_odd_chars(\"abcabbc\") == \"abc\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def remove_odd_char(string):\n    new_string = []\n    for i in string:\n        if i.isalpha():\n            new_string.append(i)\n    return \"\".join(new_string)\n\n\ndef remove_odd_char_2(string):\n    new_string = []\n    for i in string:\n        if i.isalpha():\n            new_string.append(i)\n    return \"\".join(new_string)\n\n\ndef main():\n    string = \"A12312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def remove_odd_chars(string):\n    return ''.join(filter(lambda x: x.isalpha(), string))\n\n\nprint(remove_odd_chars(\"abc1234567890abcdefghijklmnopqrstuvwxyz\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def remove_odd(s):\n    return ''.join([ch for ch in s if ch.isalpha()])\n\n\ndef main():\n    print(remove_odd(\"abcdefghi\"))\n    print(remove_odd(\"abc1efghi2\"))\n    print(remove_odd(\"abc1efghi2xyz\"))\n    print(remove_odd(\"abc1efghi2xyz123\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def remove_odd(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char\n    return new_string\n\n\nprint(remove_odd(\"This is a string\"))\nprint(remove_odd(\"This is 1 string\"))\nprint(remove_odd(\"This 1 is 1 a string\"))\n\n\"\"\"\nWrite a function to remove duplicate characters in a string.\n\"\"\"\n\ndef remove_dup(string):\n    new_string = \"\"\n    for char in string:\n        if char not in new_string:\n            new_string += char\n    return new_string\n\nprint(remove_dup(\"This is a string\"))\nprint(remove_dup(\"This is a string\"))\nprint(remove_dup(\"This is a string\"))\n\n\"\"\"\nWrite a function to remove duplicate characters in a string.\n\"\"\"\n\ndef remove_dup(string):\n    new_string = \"\"\n    for char in string:\n        if char not in new_string:\n            new_string += char\n    return new_string\n\nprint(remove_dup(\"This is a string\"))\nprint(remove_dup(\"This is a string\"))\nprint(remove_dup(\"This is a string\"))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def remove_odd(string):\n    return ''.join(char for char in string if char.isalpha())\n\nprint(remove_odd('abcdeffghi'))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def remove_odd_chars(s):\n    res = \"\"\n\n    for char in s:\n        if char in \"aeiou\":\n            res += char\n\n    return res\n\n\ndef main():\n    print(remove_odd_chars(\"aeiou\"))\n    print(remove_odd_chars(\"abcdefghijklmno\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def remove_odd(string):\n    \"\"\"\n    >>> remove_odd(\"abcdefg\")\n    'bdf'\n    \"\"\"\n    return \"\".join(char for char in string if char.isalnum())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def remove_odd_characters(string):\n    \"\"\"\n    >>> remove_odd_characters('abbbbbcde')\n    'bbbbc'\n    >>> remove_odd_characters('abbbbbcde')\n    'bbbbc'\n    \"\"\"\n    return ''.join(filter(lambda x: x.isalpha(), string))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def remove_odd_chars(string):\n    \"\"\"Remove odd chars from a string.\n\n    Args:\n        string (str): The string to remove odd chars from.\n\n    Returns:\n        str: The string with odd chars removed.\n    \"\"\"\n    new_string = ''\n\n    for char in string:\n        if char.isalpha() or char.isdigit():\n            new_string += char\n\n    return new_string\n\n\ndef main():\n    print(remove_odd_chars('Af31234gdf45h234i'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 9.0,
      "candidate": "def remove_odd_char(str):\n    \"\"\"\n    >>> remove_odd_char('abcdefg')\n    'bdf'\n    \"\"\"\n    res = ''\n    for s in str:\n        if s.isdigit() or s.isalpha():\n            res += s\n    return res\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 9.0,
      "candidate": "def remove_odd(string):\n    \"\"\"\n    >>> remove_odd(\"abc\")\n    'abc'\n    >>> remove_odd(\"abcd\")\n    'ac'\n    >>> remove_odd(\"abcde\")\n    'ace'\n    \"\"\"\n    result = \"\"\n    for c in string:\n        if c % 2 == 0:\n            result += c\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "def remove_odd(string):\n    \"\"\"Removes odd characters from a string.\n\n    Args:\n        string: string to remove odd characters from\n\n    Returns:\n        new_string: string without odd characters\n\n    \"\"\"\n\n    new_string = \"\"\n\n    for letter in string:\n        if letter.isalpha():\n            new_string += letter\n\n    return new_string"
    },
    {
      "rank": 14,
      "score": 9.0,
      "candidate": "def remove_odd(string):\n    return \"\".join(c for c in string if c.isalpha())\n\ndef main():\n    print(remove_odd(\"abcd123\"))\n    print(remove_odd(\"abcd123ef\"))\n    print(remove_odd(\"abcd123efgh\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def remove_odd_chars(string):\n    result = []\n    for char in string:\n        if char.isalpha():\n            result.append(char)\n\n    return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    print(remove_odd_chars(string))"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def remove_odd_chars(str):\n    # check if the string is empty\n    if len(str) == 0:\n        return \"\"\n\n    # check if the first character is odd\n    if str[0] % 2 == 1:\n        return remove_odd_chars(str[1:])\n\n    # check if the last character is odd\n    if str[-1] % 2 == 1:\n        return str[-1] + remove_odd_chars(str[:-1])\n\n    # if the string is already good\n    return str\n\n\n# TEST CASES\nprint(remove_odd_chars(\"\"))  # \"\"\nprint(remove_odd_chars(\"a\"))  # \"\"\nprint(remove_odd_chars(\"abc\"))  # \"c\"\nprint(remove_odd_chars(\"abcd\"))  # \"bcd\"\nprint(remove_odd_chars(\"abcde\"))  # \"cde\"\nprint(remove_odd_chars(\"abcdef\"))  # \"cdef\"\nprint(remove_odd_chars(\"abcdefg\"))  # \"cdefg\"\nprint(remove_odd_chars(\"abcdefgh\"))  # \"cdefgh\"\nprint(remove_odd_chars(\"abcdefghi\"))  # \"cdefghi\"\nprint(remove_odd_chars(\"abcdefghij\"))  # \"cdefghij\"\nprint(remove_odd_chars(\"abcdefghijk\"))  # \"cdefghijk\"\nprint(remove_odd_chars(\"abcdefghijkl\"))  # \"cdefghijkl\""
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def remove_odd_chars(s):\n    return ''.join([char for char in s if char.isdigit() or char.isalpha()])\n\n\ndef main():\n    print(remove_odd_chars(\"A1b2c3d4e5\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def odd_characters(string):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    result = []\n    for s in string:\n        if s.isalpha():\n            result.append(s)\n\n    return ''.join(result)"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def remove_odd_char(text):\n    result = ''\n    for i in range(len(text)):\n        if i % 2 == 0:\n            result += text[i]\n    return result\n\n\nprint(remove_odd_char('abcdefgh'))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string: str) -> str:\n    \"\"\"Returns a string with all odd characters removed.\n\n    >>> remove_odd_chars(\"The quick brown fox jumps over the lazy dog\")\n    'Tqckbrwnfxjmpsthlzydog'\n    \"\"\"\n    return \"\".join(i for i in string if i.isalnum())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    return ''.join([c for c in string if c.isalpha()])\n\ndef test_remove_odd():\n    assert remove_odd('abc') == 'abc'\n    assert remove_odd('abcdef') == 'ac'\n    assert remove_odd('abcdefghijkl') == 'acdefghj'\n    assert remove_odd('abcdefghijklmn') == 'acdefghjkm'"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    return ''.join(filter(lambda x: x.isalpha(), string))\n\n\nif __name__ == '__main__':\n    print(remove_odd('Hello World!'))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def odd_char_remover(string):\n    \"\"\"\n    >>> odd_char_remover(\"A man, a plan, a canal: Panama\")\n    'manplancan'\n    \"\"\"\n    return \"\".join([char for char in string if char not in \"13579\"])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    return \"\".join(filter(lambda c: c.isdigit(), string))\n\ndef remove_odd_characters_two(string):\n    return \"\".join(filter(lambda c: c.isdigit(), string))\n\ndef remove_odd_characters_three(string):\n    return \"\".join(filter(lambda c: c.isdigit(), string))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def remove_odd_char(s):\n    # return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)\n    return ''.join(s[i] for i in range(0, len(s), 2))\n\n\nif __name__ == '__main__':\n    print(remove_odd_char('hello'))\n    print(remove_odd_char('hello world'))\n    print(remove_odd_char('odd'))\n    print(remove_odd_char('odd characters'))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def remove_odd_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return \"\".join(c for c in s if c.isalpha())\n\nif __name__ == '__main__':\n    print(remove_odd_char(\"abc\"))\n    print(remove_odd_char(\"aabbc\"))\n    print(remove_odd_char(\"aabbcc\"))\n    print(remove_odd_char(\"abbbcc\"))\n    print(remove_odd_char(\"abbbbbcc\"))\n    print(remove_odd_char(\"abbbbcc\"))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def remove_odd_chars(s):\n    return ''.join(c for c in s if c.isalpha())\n\n\ndef main():\n    print(remove_odd_chars(\"aabbbcccddd\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def remove_odd_chars(strng):\n    return \"\".join([c for c in strng if strng.count(c) % 2 == 0])\n\n\ndef test_remove_odd_chars():\n    assert remove_odd_chars(\"\") == \"\"\n    assert remove_odd_chars(\"a\") == \"\"\n    assert remove_odd_chars(\"aa\") == \"a\"\n    assert remove_odd_chars(\"aab\") == \"ab\"\n    assert remove_odd_chars(\"aaab\") == \"ab\"\n    assert remove_odd_chars(\"aabbb\") == \"ab\"\n    assert remove_odd_chars(\"aabbbb\") == \"ab\"\n    assert remove_odd_chars(\"aabbbbc\") == \"ab\"\n    assert remove_odd_chars(\"aabbbbcd\") == \"abcd\""
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    odd = False\n    result = ''\n    for c in string:\n        if odd:\n            odd = False\n        else:\n            odd = True\n            result += c\n    return result\n\n\nif __name__ == '__main__':\n    assert remove_odd('abc') == 'b'\n    assert remove_odd('abcde') == 'ace'"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def remove_odd_characters(str):\n    str_list = [str[i] for i in range(len(str)) if i % 2 == 0]\n    return \"\".join(str_list)\n\n\nif __name__ == \"__main__\":\n    print(remove_odd_characters(\"abcdef\"))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def remove_odd_char(s):\n    \"\"\"\n    :param s: input string\n    :return: string with odd characters removed\n    \"\"\"\n    return ''.join(s[i] for i in range(len(s)) if s[i] % 2 == 0)\n\ndef remove_odd_char_2(s):\n    \"\"\"\n    :param s: input string\n    :return: string with odd characters removed\n    \"\"\"\n    new_string = ''\n    for i in range(len(s)):\n        if s[i] % 2 == 0:\n            new_string += s[i]\n    return new_string\n\ndef main():\n    print(remove_odd_char('abcde'))\n    print(remove_odd_char_2('abcde'))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    \"\"\"\n    :param string: str - string to evaluate\n    :return: str - string without odd characters\n\n    This function counts the characters in a string and removes all characters that appear\n    an odd number of times.\n    \"\"\"\n    # Create a dictionary to hold the count of characters\n    character_count = {}\n    for char in string:\n        # If the character is in the dictionary, increment its count\n        if char in character_count:\n            character_count[char] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            character_count[char] = 1\n\n    # Create a string to hold the final result\n    result = \"\"\n\n    # Loop through the string and check if the character is in the dictionary\n    for char in string:\n        # If the character is not in the dictionary, it is an odd character\n        if char not in character_count:\n            # Add it to the final string\n            result += char\n        # If the character's count is even, it is not an odd character\n        elif character_count[char] % 2 == 0:\n            # Add it to the final string\n            result += char\n\n    # Return the final string\n    return result"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    odd_chars = set(\"abcdefghijklmnopqrstuvwxyz\")\n    new_string = \"\"\n    for c in string:\n        if c not in odd_chars:\n            new_string += c\n    return new_string\n\nprint(remove_odd_chars(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_odd_chars(\"abcdefghijklmnopqrstuvwxyz1234567890\"))\nprint(remove_odd_chars(\"abcdefghijklmnopqrstuvwxyz!@#$%^&*()_+\"))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def remove_odd_characters(s):\n    return ''.join([i for i in s if i.isalpha()])\n\n\nassert remove_odd_characters(\"abc\") == \"abc\"\nassert remove_odd_characters(\"abc123\") == \"abc\"\nassert remove_odd_characters(\"abc123def456\") == \"abcdef\"\nassert remove_odd_characters(\"abc123def456ghi\") == \"abcdefghi\""
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def remove_odd_characters(str):\n    return ''.join([c for c in str if c.isalpha()])\n\ndef main():\n    print(remove_odd_characters(\"Hey, what's your name?\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    # O(n)\n    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += char\n    return result\n\n\ndef remove_odd_characters_2(string):\n    # O(n)\n    return \"\".join(char for char in string if char.isalpha())\n\n\nif __name__ == \"__main__\":\n    print(remove_odd_characters(\"abc1234\"))\n    print(remove_odd_characters_2(\"abc1234\"))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += char\n    return result\n\n\nprint(remove_odd_chars(\"abcdefghi\"))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\n\ndef test_remove_odd():\n    assert remove_odd(\"abcde\") == \"ac\"\n    assert remove_odd(\"abcdef\") == \"ac\"\n    assert remove_odd(\"abcdefgh\") == \"ac\""
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    result = ''\n\n    for char in string:\n        if char.isdigit():\n            result += char\n\n    return result\n\n\ndef remove_odd_chars_optimized(string):\n    return ''.join(char for char in string if char.isdigit())\n\n\nprint(remove_odd_chars('a1b2c3d4'))\nprint(remove_odd_chars_optimized('a1b2c3d4'))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    return ''.join([x for x in string if x.isalpha()])\n\n\nif __name__ == '__main__':\n    input_str = \"abcdefgh\"\n    print remove_odd(input_str)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += char\n    return result\n\n\nprint(remove_odd_characters(\"abcdef\"))\nprint(remove_odd_characters(\"abc123def\"))\nprint(remove_odd_characters(\"abc123def\"))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def remove_odd_char(string):\n    return \"\".join(filter(lambda char: char.isalpha(), string))\n\n\nif __name__ == \"__main__\":\n    assert remove_odd_char(\"abcd\") == \"bcd\"\n    assert remove_odd_char(\"abcd12345\") == \"bcd45\"\n    assert remove_odd_char(\"12345\") == \"\"\n    assert remove_odd_char(\"\") == \"\"\n    assert remove_odd_char(\"123abc456\") == \"456\""
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def remove_odd(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha() or c.isspace():\n            result += c\n    return result\n\n\nif __name__ == \"__main__\":\n    print(remove_odd(\"abc123\"))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# This is the answer I came up with:\n\ndef remove_odd(s):\n    new_string = \"\"\n    for i in s:\n        if i.isdigit():\n            continue\n        else:\n            new_string += i\n    return new_string\n\n# This is the solution to the problem:\n\ndef remove_odd_solution(s):\n    new_string = \"\"\n    for i in s:\n        if i.isdigit():\n            new_string += i\n    return new_string"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return \"\".join(char for char in string if char.isalpha())\n\n\nif __name__ == \"__main__\":\n    print(remove_odd_chars(\"abcde12345\"))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\n\nif __name__ == \"__main__\":\n    print(remove_odd_characters(\"Hello World\"))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def remove_odd_char(str):\n    new_str = \"\"\n\n    for i in str:\n        if i % 2 == 0:\n            new_str += i\n\n    return new_str\n\n\nprint(remove_odd_char(\"Hello\"))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def remove_odd_chars(s):\n    return \"\".join(filter(lambda c: c.isalpha() or c.isspace(), s))\n\nprint(remove_odd_chars(\"abc\"))\nprint(remove_odd_chars(\"a1b2c3\"))\nprint(remove_odd_chars(\"abc321\"))\nprint(remove_odd_chars(\"1abc\"))\nprint(remove_odd_chars(\"ab12c13\"))\nprint(remove_odd_chars(\"123456789\"))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    result = \"\"\n    for i in string:\n        if i.isalpha():\n            result += i\n    return result\n\nprint(remove_odd(\"hello\"))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def remove_odd_char(str):\n    result = \"\"\n    for c in str:\n        if c.isalpha() or c.isdigit():\n            result += c\n    return result\n\n\nif __name__ == '__main__':\n    print(remove_odd_char(\"Python3.0\"))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def remove_odd_characters(input_string):\n    output_string = \"\"\n    for letter in input_string:\n        if letter.isalpha():\n            output_string += letter\n    return output_string\n\n\ndef main():\n    assert remove_odd_characters(\"abcde\") == \"abc\"\n    assert remove_odd_characters(\"abcefg\") == \"abc\"\n    assert remove_odd_characters(\"abc123\") == \"abc\"\n    assert remove_odd_characters(\"123abc\") == \"abc\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char\n    return new_string\n\n\nprint(remove_odd_characters(\"abcd3f6ghi4jklo2mno1pqr5stu6vwx6yz\"))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    \"\"\"\n    :param string: str - string to modify\n    :return: str - string with odd chars removed\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_str += string[i]\n    return new_str"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def remove_odd_char(s: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    return \"\".join(s[i] for i in range(len(s)) if i % 2 == 0)\n\n\nif __name__ == \"__main__\":\n    print(remove_odd_char(\"abcdef\"))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def remove_odd_chars(s):\n    new_s = \"\"\n    for i in range(len(s)):\n        if s[i] % 2 == 0:\n            new_s += s[i]\n    return new_s\n\nprint(remove_odd_chars(\"abcdefgh\"))\nprint(remove_odd_chars(\"abcdefghi\"))\nprint(remove_odd_chars(\"abcdefghj\"))\nprint(remove_odd_chars(\"abcdefghk\"))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    \"\"\"\n    Removes all the odd characters from a string.\n\n    :param string: String to be modified\n    :return: String with all odd characters removed\n    \"\"\"\n    odd_chars = set(string)\n    return ''.join(char for char in string if char not in odd_chars)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "# Time complexity: O(n)\n# Space complexity: O(n)\ndef remove_odd_characters(str):\n    odd_chars = set('1234567890')\n    new_str = ''\n    for i in range(len(str)):\n        if str[i] not in odd_chars:\n            new_str += str[i]\n    return new_str\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef remove_odd_characters_better(str):\n    new_str = ''\n    for i in range(len(str)):\n        if str[i] not in '1234567890':\n            new_str += str[i]\n    return new_str\n\nprint(remove_odd_characters('1234abcd567890'))\nprint(remove_odd_characters_better('1234abcd567890'))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    return ''.join(c for c in string if c.isalpha())\n\n# test\nstring = 'a1b2c3d4'\nprint(f'original string: {string}')\nprint(f'remove odd characters: {remove_odd(string)}')"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def remove_odd(string: str) -> str:\n    \"\"\"\n    >>> remove_odd(\"abcdef\")\n    'bdf'\n    >>> remove_odd(\"abcd\")\n    'bd'\n    >>> remove_odd(\"abcde\")\n    'bcde'\n    >>> remove_odd(\"abcdefg\")\n    'bdfg'\n    >>> remove_odd(\"abcdefghi\")\n    'bdfhi'\n    \"\"\"\n    return \"\".join(filter(lambda x: x.isalnum(), string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def remove_odd(s):\n    return ''.join(c for i, c in enumerate(s) if i % 2 == 0)\n\n\ndef main():\n    print(remove_odd(\"hello world\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def odd_char(string):\n    result = ''\n\n    for char in string:\n        if char.isalpha() and char.islower():\n            result += char\n        elif char.isalpha() and char.isupper():\n            result += char.lower()\n    return result\n\nprint(odd_char('This is2 fun'))\nprint(odd_char('ThiS is2 fun'))\nprint(odd_char('this is2 fun'))\nprint(odd_char('this is 2 fun'))\nprint(odd_char('this is2 fun!'))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    chars = []\n    for char in string:\n        if char.isalpha() and char.islower():\n            chars.append(char)\n    return \"\".join(chars)\n\n\nif __name__ == \"__main__\":\n    string = \"The quick brown fox jumps over the lazy dog\"\n    print(remove_odd_characters(string))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    \"\"\"\n    :param string: str - string to remove characters from\n    :return: str - string with characters removed\n    \"\"\"\n    # for i in range(len(string)):\n    #     if string[i] % 2 != 0:\n    #         string = string[:i] + string[i+1:]\n    # return string\n\n    return ''.join(filter(lambda x: x % 2 == 0, string))\n\nprint(remove_odd_characters('abca'))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    return ''.join(filter(lambda x: x.isalnum(), string))\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    result = remove_odd(string)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    odd_chars = set(string)\n    odd_chars.remove(' ')\n    odd_chars = ''.join(odd_chars)\n    return ''.join(char for char in string if char not in odd_chars)\n\nprint(remove_odd_chars('I love Python'))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    # return ''.join(filter(lambda x: x.isdigit(), string))\n    return ''.join([x for x in string if x.isdigit()])\n\nif __name__ == '__main__':\n    print(remove_odd_chars('aasd454567'))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef remove_odd_chars(s):\n    \"\"\"\n    :param s: str\n    :return: str\n    \"\"\"\n    return \"\".join([c for c in s if c.isalpha() or c.isdigit()])\n\n\nif __name__ == \"__main__\":\n    s = \"12345a67890a\"\n    print(remove_odd_chars(s))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def remove_odd(str_in):\n    \"\"\"\n    :param str_in: string input\n    :return: string with odd characters removed\n    \"\"\"\n    return ''.join([x for x in str_in if x.isalpha()])\n\n\ndef main():\n    \"\"\"\n    :return: string with odd characters removed\n    \"\"\"\n    print(remove_odd(\"abcdefghi\"))\n    print(remove_odd(\"abcd3fgh1i\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def remove_odd_char(string):\n    return ''.join(i for i in string if i.isalpha())\n\n\nprint(remove_odd_char('abc123'))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    return \"\".join([c for c in string if c.isalpha()])\n\n\nassert remove_odd_chars(\"abcdef\") == \"abc\"\nassert remove_odd_chars(\"abc123def\") == \"abcdef\"\nassert remove_odd_chars(\"abc!@#$%^&def\") == \"abcdef\""
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    return \"\".join(char for char in string if char.isalpha())\n\n\nif __name__ == \"__main__\":\n    test_cases = [\"abcdefghi\", \"abcdefgh1i\", \"abcdefgh1i1\", \"abcdefgh1i11\"]\n    results = [\"abcdefgh\", \"abcdefghi\", \"abcdefghi\", \"abcdefghi\"]\n    for test_case, result in zip(test_cases, results):\n        assert remove_odd_chars(test_case) == result"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    new_string = \"\"\n    for c in string:\n        if c.isalpha():\n            new_string += c\n    return new_string\n\ndef test_remove_odd_chars():\n    assert remove_odd_chars(\"Hello world\") == \"Hlo wrd\"\n    assert remove_odd_chars(\"Hello world!\") == \"Hlo wrd\"\n    assert remove_odd_chars(\"Hello!\") == \"Hlo\"\n\ntest_remove_odd_chars()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def remove_odd_char(string):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isalnum():\n            new_string += char\n    return new_string\n\n\ndef main():\n    string = 'This is a string with odd characters!'\n    print(remove_odd_char(string))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    new_string = \"\"\n    for i in string:\n        if i.isalpha():\n            new_string += i\n    return new_string\n\n\nif __name__ == \"__main__\":\n    string = input(\"Enter a string: \")\n    print(\"The string without odd characters:\", remove_odd(string))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def remove_odd(s):\n    return \"\".join(i for i in s if i.isalpha())\n\nprint(remove_odd(\"hello world\"))\nprint(remove_odd(\"hello world123\"))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def remove_odd_char(string):\n    odd_chars = set(string)\n    print(odd_chars)\n    new_string = \"\"\n    for char in string:\n        if char not in odd_chars:\n            new_string += char\n    return new_string\n\n\nprint(remove_odd_char(\"abca\"))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def remove_odd_chars(str):\n    new_str = \"\"\n    for char in str:\n        if char.isdigit():\n            new_str += char\n\n    return new_str\n\n\nassert remove_odd_chars(\"abc123\") == \"123\"\nassert remove_odd_chars(\"abcd1234567\") == \"1234567\""
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def remove_odd_char(text):\n    return \"\".join([c for c in text if c.isalpha()])\n\n\nif __name__ == \"__main__\":\n    print(remove_odd_char(\"abcdefghijklmnopqrstuvwxyz\"))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def remove_odd_chars(string):\n    new_string = ''\n    for char in string:\n        if char.isalpha():\n            new_string += char\n    return new_string\n\n\nif __name__ == '__main__':\n    string = input('Enter a string: ')\n    print(remove_odd_chars(string))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters in a string.\n    :param string:\n    :return:\n    \"\"\"\n    odd_char = []\n    for char in string:\n        if ord(char) % 2 == 1:\n            odd_char.append(char)\n    for char in odd_char:\n        string = string.replace(char, \"\")\n    return string\n\n\nif __name__ == '__main__':\n    print(remove_odd(\"Hello, World!\"))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def odd_chars(string):\n    result = \"\"\n    for c in string:\n        if c.isalpha():\n            result += c\n    return result\n\n\nif __name__ == '__main__':\n    print(odd_chars(\"Aabbbcceffg\"))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def remove_odd_chars(str):\n    result = \"\"\n    for ch in str:\n        if ch.isalpha():\n            result += ch\n    return result\n\n\nassert remove_odd_chars(\"a1b2c3\") == \"abc\"\nassert remove_odd_chars(\"123\") == \"\""
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    return \"\".join(c for c in string if c.isalpha())"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    \"\"\"\n    >>> remove_odd_characters(\"abc\")\n    'ac'\n    \"\"\"\n    return \"\".join(char for char in string if char.isalpha())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    new_string = \"\"\n    for s in string:\n        if s.isalpha() or s.isdigit():\n            new_string += s\n    return new_string\n\n\nif __name__ == '__main__':\n    print(remove_odd_characters(\"aasdfa32432\"))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def remove_odd_chars(s):\n    # Remove all characters with an odd index\n    return \"\".join([s[i] for i in range(len(s)) if i % 2 == 0])\n\n\nif __name__ == '__main__':\n    print(remove_odd_chars('abcdefghi'))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def remove_odd_chars(s):\n    # return s.replace(\"e\", \"\")\n    odd_chars = []\n    for i in range(len(s)):\n        if i % 2 != 0:\n            odd_chars.append(s[i])\n    for i in range(len(odd_chars)):\n        s = s.replace(odd_chars[i], \"\")\n    return s\n\nprint(remove_odd_chars(\"Odd characters are: eeo\"))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def odd_char_remover(string):\n    result = \"\"\n    for char in string:\n        if char.isalnum():\n            result += char\n    return result\n\n\nprint(odd_char_remover(\"This is my string.\"))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def remove_odd(input_str):\n    output = \"\"\n    for i in range(len(input_str)):\n        if input_str[i] % 2 == 0:\n            output += input_str[i]\n    return output\n\n\nprint(remove_odd(\"abcdefgh\"))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def remove_odd_char(str):\n    # TODO: Write your solution here\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n\n\n# Test Cases:\nprint(remove_odd_char(\"abcdefghi\"))\nprint(remove_odd_char(\"abc\"))\nprint(remove_odd_char(\"ab\"))\nprint(remove_odd_char(\"a\"))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def remove_odd_characters(string):\n    \"\"\"\n    :param string: str - String\n    :return: str - String\n    \"\"\"\n    # 1. O(n^2) solution:\n    # for i in range(len(string)):\n    #     if i % 2 == 1:\n    #         string = string.replace(string[i], \"\")\n    # return string\n\n    # 2. O(n) solution:\n    return \"\".join(list(filter(lambda x: x.isalnum(), string)))\n\n\nprint(remove_odd_characters(\"a\"))\nprint(remove_odd_characters(\"a1b2c3d4e\"))\nprint(remove_odd_characters(\"a1b2c3d4e5f6g7h8i9j0k1\"))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def remove_odd_char(s):\n    return ''.join(filter(lambda x: x.isalpha(), s))\n\n\nprint(remove_odd_char(\"A12bc34d\"))\n\n\n\"\"\"\nWrite a function to remove duplicate words in a string.\n\"\"\"\n\ndef remove_duplicate_words(s):\n    return ' '.join(set(s.split()))\n\n\nprint(remove_duplicate_words(\"a a a b b c c d d d\"))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def remove_odd_chars(string: str) -> str:\n    \"\"\"Removes odd characters in a string.\n\n    Args:\n        string (str): string to remove odd characters from\n\n    Returns:\n        str: string with odd characters removed\n    \"\"\"\n    return \"\".join([char for char in string if char.isalpha()])\n\n\nif __name__ == \"__main__\":\n    print(remove_odd_chars(\"a1b2c3d4\"))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def remove_odd_char(string):\n    string_list = list(string)\n    for index in range(len(string_list) - 1, -1, -1):\n        if string_list[index].isdigit() or string_list[index].isalpha():\n            string_list.pop(index)\n    return ''.join(string_list)\n\nprint(remove_odd_char(\"a3124bc\"))\n\n\"\"\"\nWrite a function to remove vowels in a string.\n\"\"\"\n\ndef remove_vowels(string):\n    string_list = list(string)\n    for index in range(len(string_list) - 1, -1, -1):\n        if string_list[index] in ['a', 'e', 'i', 'o', 'u']:\n            string_list.pop(index)\n    return ''.join(string_list)\n\nprint(remove_vowels(\"abcdefghijklmnopqrstuvwxyz\"))\n\n\"\"\"\nWrite a function to remove consonants in a string.\n\"\"\"\n\ndef remove_consonants(string):\n    string_list = list(string)\n    for index in range(len(string_list) - 1, -1, -1):\n        if string_list[index] not in ['a', 'e', 'i', 'o', 'u']:\n            string_list.pop(index)\n    return ''.join(string_list)\n\nprint(remove_consonants(\"abcdefghijklmnopqrstuvwxyz\"))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def remove_odd(s: str) -> str:\n    return \"\".join(filter(lambda c: c.isalpha(), s))\n\n\nif __name__ == \"__main__\":\n    assert remove_odd(\"abc4de\") == \"abcde\"\n    assert remove_odd(\"abc1de2\") == \"abcde\""
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def remove_odd(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char\n    return new_string\n\n\ndef test_remove_odd():\n    assert remove_odd(\"abc123\") == \"abc\"\n    assert remove_odd(\"123abc\") == \"abc\"\n    assert remove_odd(\"abc\") == \"abc\"\n    assert remove_odd(\"123\") == \"\"\n    assert remove_odd(\"\") == \"\"\n    assert remove_odd(\"a1b2c3\") == \"abc\"\n\n\nif __name__ == \"__main__\":\n    test_remove_odd()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def remove_odd_char(s):\n    res = ''\n    for i in range(len(s)):\n        if s[i] % 2 == 0:\n            res += s[i]\n    return res\n\n\ndef test_remove_odd_char():\n    assert remove_odd_char('abc') == 'abc'\n    assert remove_odd_char('abccba') == 'cc'\n    assert remove_odd_char('abcdef') == 'cc'"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def remove_odd_chars(s):\n    odd_chars = set()\n    for char in s:\n        if ord(char) % 2 == 1:\n            odd_chars.add(char)\n\n    return ''.join(char for char in s if char not in odd_chars)\n\n\nimport unittest\n\n\nclass TestFirst(unittest.TestCase):\n    def test_first(self):\n        self.assertEqual(remove_odd_chars('aabbc'), 'abc')\n        self.assertEqual(remove_odd_chars('aabbcc'), 'abc')\n        self.assertEqual(remove_odd_chars('ababab'), 'a')\n        self.assertEqual(remove_odd_chars('abcdef'), 'abcdef')\n        self.assertEqual(remove_odd_chars('aabbccddee'), 'abc')\n        self.assertEqual(remove_odd_chars('aaaabbbcccc'), 'abc')\n        self.assertEqual(remove_odd_chars('aaaabbbccccdddd'), 'abc')\n        self.assertEqual(remove_odd_chars('abcdefg'), 'abcdefg')\n        self.assertEqual(remove_odd_chars('abcdefghijklmnopqrstuvwxyz'), 'abcdefghijklmnopqrstuvwxyz')\n        self.assertEqual(remove_odd_chars('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz'), 'abcdefghijklmnopqrstuvwxyz')"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def remove_odd(string: str) -> str:\n    \"\"\"Removes odd characters from a string.\n\n    Args:\n        string (str): the string to remove odd characters from\n\n    Returns:\n        str: the string with odd characters removed\n    \"\"\"\n    return \"\".join(filter(lambda c: c.isalpha(), string))\n\n\nif __name__ == \"__main__\":\n    print(remove_odd(\"A1bc23d\"))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def remove_odd_characters(string: str) -> str:\n    \"\"\"Removes odd characters in a string.\n\n    Args:\n        string (str): string to remove odd characters from.\n\n    Returns:\n        str: string without odd characters.\n    \"\"\"\n    return \"\".join([char for char in string if char.isalpha()])\n\n\nif __name__ == \"__main__\":\n    print(remove_odd_characters(\"abc123\"))"
    }
  ]
}