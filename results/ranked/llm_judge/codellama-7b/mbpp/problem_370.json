{
  "timestamp": "2025-09-15T01:06:30.743560",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 370,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List], index: int = 0, reverse: bool = False) -> List[List]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists: List of lists to be sorted\n        index: Index of the inner list to be sorted\n        reverse: If true, sorts in descending order. Otherwise, sorts in ascending order.\n\n    Returns:\n        A list of lists sorted by the given index.\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index], reverse=reverse)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def sort_list_by_index(input_list, index):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    :param input_list: List of lists\n    :type input_list: list\n    :param index: Index of the inner list\n    :type index: int\n    :return: Sorted list of lists\n    :rtype: list\n    \"\"\"\n    return sorted(input_list, key=lambda x: x[index])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef sort_list(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst (List[List[int]]): List of lists to sort\n        index (int): Index to sort by\n\n    Returns:\n        List[List[int]]: Sorted list of lists\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n    print(sort_list(lst, 2))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List, Optional, Sequence\n\n\ndef sort_by_index(lst: List[Sequence], index: int) -> List[Sequence]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst: list of lists\n        index: index of the inner list to be used for sorting\n\n    Returns:\n        list of lists\n\n    Examples:\n        >>> assert sort_by_index([[1, 2, 3], [1, 2, 3]], 0) == [[1, 2, 3], [1, 2, 3]]\n        >>> assert sort_by_index([[1, 2, 3], [2, 1, 3]], 0) == [[1, 2, 3], [2, 1, 3]]\n        >>> assert sort_by_index([[1, 2, 3], [2, 1, 3]], 1) == [[2, 1, 3], [1, 2, 3]]\n        >>> assert sort_by_index([[1, 2, 3], [2, 1, 3]], 2) == [[1, 2, 3], [2, 1, 3]]\n        >>> assert sort_by_index([[1, 2, 3], [2, 1, 3]], 3) == [[1, 2, 3], [2, 1, 3]]\n    \"\"\"\n    return sorted(lst, key=lambda inner_list: inner_list[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2, 3], [2, 1, 3]], 1))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def sort_list_of_lists(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\ndef test_list_of_lists_sorting():\n    \"\"\"\n    >>> sort_list_of_lists([[1, 2, 3], [5, 6, 7], [3, 2, 1]], 2)\n    [[3, 2, 1], [1, 2, 3], [5, 6, 7]]\n    >>> sort_list_of_lists([[1, 2], [5, 6], [3, 2]], 1)\n    [[3, 2], [1, 2], [5, 6]]\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def sort_by_index(lst, index):\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst: A list of lists\n        index: The index to sort by\n\n    Returns:\n        A sorted list of lists\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def sort_list_by_index(l, index):\n    \"\"\"\n    Sort the list of lists by a given index\n\n    Args:\n        l: list of lists to be sorted\n        index: index of the inner list to sort by\n\n    Returns:\n        sorted list of lists\n    \"\"\"\n    return sorted(l, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    l = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]\n    print(sort_list_by_index(l, 2))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sort_list(lst, index):\n    lst = lst.sort(key=lambda x: x[index])\n    return lst\n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_list(lst, 2))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sort_list(my_list, index):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        my_list (list): The list to sort\n        index (int): The index to sort by\n\n    Returns:\n        list: The sorted list\n    \"\"\"\n    for i in range(len(my_list) - 1):\n        for j in range(i + 1, len(my_list)):\n            if my_list[i][index] > my_list[j][index]:\n                my_list[i], my_list[j] = my_list[j], my_list[i]\n    return my_list\n\n\ndef test_function():\n    assert sort_list([[1, 2], [3, 4], [5, 6], [7, 8]], 1) == [\n        [7, 8],\n        [5, 6],\n        [3, 4],\n        [1, 2],\n    ]\n    assert sort_list([[1, 2], [3, 4], [5, 6], [7, 8]], 0) == [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n        [7, 8],\n    ]\n    assert sort_list([[1, 2], [3, 4], [5, 6], [7, 8]], 1) == [\n        [7, 8],\n        [5, 6],\n        [3, 4],\n        [1, 2],\n    ]\n\n\nif __name__ == \"__main__\":\n    test_function()"
    },
    {
      "rank": 10,
      "score": 9.996490721568136,
      "candidate": "def sort_by_index(arr, index):\n    \"\"\"\n    >>> sort_by_index([[1, 3], [5, 3], [4, 5], [6, 2]], 1)\n    [[1, 3], [4, 5], [5, 3], [6, 2]]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 9.969931446579057,
      "candidate": "def sort_by_index(lst, index):\n    lst.sort(key=lambda x: x[index])\n    return lst\n\n\ndef test_sort_by_index():\n    assert sort_by_index(\n        [[1, 2], [3, 4], [5, 6], [7, 8]], 0\n    ) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert sort_by_index(\n        [[1, 2], [3, 4], [5, 6], [7, 8]], 1\n    ) == [[7, 8], [1, 2], [3, 4], [5, 6]]\n\n\nif __name__ == \"__main__\":\n    test_sort_by_index()"
    },
    {
      "rank": 12,
      "score": 9.964051281695491,
      "candidate": "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List[int]], index: int = 0) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lists: list of lists to sort\n        index: index of the inner list to sort\n\n    Examples:\n        >>> assert sort_list_of_lists([[3, 2], [4, 1]]) == [[4, 1], [3, 2]]\n        >>> assert sort_list_of_lists([[3, 2], [4, 1]], 1) == [[3, 2], [4, 1]]\n        >>> assert sort_list_of_lists([[2, 3], [1, 4]]) == [[1, 4], [2, 3]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_lists([[3, 2], [4, 1]]))\n    print(sort_list_of_lists([[3, 2], [4, 1]], 1))\n    print(sort_list_of_lists([[2, 3], [1, 4]]))"
    },
    {
      "rank": 13,
      "score": 9.939124391193213,
      "candidate": "from typing import List\n\n\ndef sort_by_index(input_list: List[List], index: int) -> List[List]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        input_list: The list of lists to be sorted.\n        index: The index of the inner list to sort by.\n\n    Returns:\n        The sorted list of lists.\n\n    Examples:\n        >>> sort_by_index([[2, 4], [4, 2], [2, 1]], 0)\n        [[2, 1], [2, 4], [4, 2]]\n        >>> sort_by_index([[2, 4], [4, 2], [2, 1]], 1)\n        [[4, 2], [2, 4], [2, 1]]\n    \"\"\"\n    return sorted(input_list, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[2, 4], [4, 2], [2, 1]], 0))\n    print(sort_by_index([[2, 4], [4, 2], [2, 1]], 1))"
    },
    {
      "rank": 14,
      "score": 9.921713039146784,
      "candidate": "from typing import List\n\n\ndef sort_by_index(data: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        data (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Examples:\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 0)\n        [[1, 2], [3, 4], [5, 6]]\n\n        >>> sort_by_index([[3, 2], [5, 1], [6, 4]], 1)\n        [[3, 2], [5, 1], [6, 4]]\n\n        >>> sort_by_index([[3, 2], [5, 1], [6, 4]], 1)\n        [[5, 1], [3, 2], [6, 4]]\n    \"\"\"\n    return sorted(data, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [3, 4], [5, 6]], 0))\n    print(sort_by_index([[3, 2], [5, 1], [6, 4]], 1))\n    print(sort_by_index([[3, 2], [5, 1], [6, 4]], 1))"
    },
    {
      "rank": 15,
      "score": 9.91480784188458,
      "candidate": "from typing import List\n\n\ndef sort_by_index(array: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        array: the array to be sorted\n        index: the index of the inner list to be sorted by\n\n    Examples:\n        >>> sort_by_index([[1, 2], [3, 4]], 0)\n        [[1, 2], [3, 4]]\n        >>> sort_by_index([[3, 2], [1, 4]], 1)\n        [[1, 4], [3, 2]]\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [3, 4]], 0))\n    print(sort_by_index([[3, 2], [1, 4]], 1))"
    },
    {
      "rank": 16,
      "score": 9.898051880185639,
      "candidate": "from typing import List\n\n\ndef sort_by_index(array: List[list], index: int) -> List[list]:\n    \"\"\"Returns a list of lists sorted by a given index.\n\n    Args:\n        array: List of lists.\n        index: Index of the inner list.\n\n    Examples:\n        >>> assert sort_by_index([[1, 2], [3, 4]], 1) == [[3, 4], [1, 2]]\n    \"\"\"\n    return sorted(array, key=lambda item: item[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [3, 4]], 1))"
    },
    {
      "rank": 17,
      "score": 9.880233919550456,
      "candidate": "from typing import List, Optional\n\n\ndef sort_list_of_lists(\n    lists: List[List[int]], index_to_sort_by: int, reverse: bool = False\n) -> List[List[int]]:\n    \"\"\"Sort list of lists by a given index of the inner list.\n\n    Args:\n        lists: The list of lists to sort.\n        index_to_sort_by: The index of the inner list to sort by.\n        reverse: Sort in descending order instead of ascending.\n\n    Returns:\n        The sorted list of lists.\n    \"\"\"\n\n    def sort_by_index(value: List[int]) -> int:\n        return value[index_to_sort_by]\n\n    return sorted(lists, key=sort_by_index, reverse=reverse)\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [1, 4, 5],\n        [1, 3, 4],\n        [2, 3, 1],\n        [1, 2, 3],\n    ]\n    print(sort_list_of_lists(lists, index_to_sort_by=0))\n    print(sort_list_of_lists(lists, index_to_sort_by=1))\n    print(sort_list_of_lists(lists, index_to_sort_by=2))\n    print(sort_list_of_lists(lists, index_to_sort_by=2, reverse=True))"
    },
    {
      "rank": 18,
      "score": 9.878910264071733,
      "candidate": "from typing import List\n\n\ndef sort_by_index(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lst: list of lists to be sorted\n        index: index of the inner list by which the list should be sorted\n\n    Examples:\n        >>> lst = [[1, 4], [3, 1], [5, 2], [4, 5], [2, 3]]\n        >>> sort_by_index(lst, 0)\n        [[1, 4], [2, 3], [3, 1], [4, 5], [5, 2]]\n        >>> sort_by_index(lst, 1)\n        [[2, 3], [3, 1], [1, 4], [4, 5], [5, 2]]\n        >>> sort_by_index(lst, 5)\n        [[1, 4], [3, 1], [4, 5], [5, 2], [2, 3]]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 4], [3, 1], [5, 2], [4, 5], [2, 3]], 0))\n    print(sort_by_index([[1, 4], [3, 1], [5, 2], [4, 5], [2, 3]], 1))\n    print(sort_by_index([[1, 4], [3, 1], [5, 2], [4, 5], [2, 3]], 5))"
    },
    {
      "rank": 19,
      "score": 9.875414698160224,
      "candidate": "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List], index: int) -> List[List]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List]): list of lists to be sorted\n        index (int): index of the inner list to sort by\n\n    Returns:\n        List[List]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))"
    },
    {
      "rank": 20,
      "score": 9.86954316866802,
      "candidate": "from typing import List\n\n\ndef sort_lists(lists: List[List], index: int) -> List[List]:\n    \"\"\"Sort lists by a given index.\n\n    Args:\n        lists (List[List]): List of lists to sort.\n        index (int): Index to sort by.\n\n    Examples:\n        >>> assert sort_lists([[1, 2], [3, 4]], 1) == [[3, 4], [1, 2]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_lists([[1, 2], [3, 4]], 1))"
    },
    {
      "rank": 21,
      "score": 9.865249743248851,
      "candidate": "def sort_by_index(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\nprint(sort_by_index([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], 1))"
    },
    {
      "rank": 22,
      "score": 9.858460491623452,
      "candidate": "def sort_by_index(array, index):\n    return sorted(array, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"\n    >>> sort_by_index([[1, 2], [4, 3], [9, 0]], 1)\n    [[9, 0], [1, 2], [4, 3]]\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.84383394062111,
      "candidate": "def sort_by_index(list_of_lists, index):\n    \"\"\"\n    Sorts the given list of lists by the given index of the inner list.\n    :param list_of_lists: list of lists\n    :param index: index of the inner list\n    :return: sorted list of lists\n    >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 1)\n    [[3, 4], [5, 6], [1, 2]]\n    >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 0)\n    [[5, 6], [3, 4], [1, 2]]\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.682580651007534,
      "candidate": "from typing import List\n\n\ndef sort_lists(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts lists by a given index of the inner list.\n\n    Args:\n        lists: list of lists\n        index: index of the inner list\n\n    Examples:\n        >>> sort_lists([[1, 3], [5, 4], [4, 2]], 0)\n        [[1, 3], [4, 2], [5, 4]]\n        >>> sort_lists([[1, 3], [5, 4], [4, 2]], 1)\n        [[4, 2], [1, 3], [5, 4]]\n\n    Returns:\n        List[List[int]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_lists([[1, 3], [5, 4], [4, 2]], 0))\n    print(sort_lists([[1, 3], [5, 4], [4, 2]], 1))"
    },
    {
      "rank": 25,
      "score": 9.632801037652824,
      "candidate": "from typing import List, Any\n\n\ndef sort_lists(lists: List[list], index: int) -> List[list]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[list]): list of lists\n        index (int): index of the inner list\n\n    Returns:\n        List[list]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_lists([[1, 2, 3], [3, 2, 1], [1, 3, 2], [2, 1, 3]], 1))\n    print(sort_lists([[1, 2, 3], [3, 2, 1], [1, 3, 2], [2, 1, 3]], 2))\n    print(sort_lists([[1, 2, 3], [3, 2, 1], [1, 3, 2], [2, 1, 3]], 0))"
    },
    {
      "rank": 26,
      "score": 9.483232082203768,
      "candidate": "from typing import List, Tuple\n\n\ndef sort_by_index(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst: List of lists to be sorted.\n        index: Index of the inner list to sort by.\n\n    Returns:\n        Sorted list of lists.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"Test for sort_by_index function.\"\"\"\n    assert sort_by_index(\n        lst=[\n            [1, 2, 3, 4],\n            [1, 4, 2, 3],\n            [3, 1, 4, 2],\n            [4, 2, 3, 1],\n            [2, 3, 4, 1],\n            [4, 3, 2, 1],\n        ],\n        index=1,\n    ) == [\n        [1, 4, 2, 3],\n        [3, 1, 4, 2],\n        [4, 2, 3, 1],\n        [2, 3, 4, 1],\n        [4, 3, 2, 1],\n        [1, 2, 3, 4],\n    ]\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index(\n        lst=[\n            [1, 2, 3, 4],\n            [1, 4, 2, 3],\n            [3, 1, 4, 2],\n            [4, 2, 3, 1],\n            [2, 3, 4, 1],\n            [4, 3, 2, 1],\n        ],\n        index=1,\n    ))"
    },
    {
      "rank": 27,
      "score": 9.20387850009311,
      "candidate": "def sort_lists_by_index(list_of_lists, index=0):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\nprint(sort_lists_by_index([[3, 2], [1, 2], [2, 2], [3, 1]], index=0))\n\n# Another way\n\ndef sort_lists_by_index_v2(list_of_lists, index=0):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\nprint(sort_lists_by_index_v2([[3, 2], [1, 2], [2, 2], [3, 1]], index=1))"
    },
    {
      "rank": 28,
      "score": 9.085948343328187,
      "candidate": "def sort_by_index(array, index):\n    \"\"\"\n    Sorts the list by the given index.\n    \"\"\"\n    return sorted(array, key=lambda item: item[index])"
    },
    {
      "rank": 29,
      "score": 9.068886685571735,
      "candidate": "def sort_by_index(lists, index):\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    print(sort_by_index([[2, 4], [3, 1], [1, 4]], 1))"
    },
    {
      "rank": 30,
      "score": 9.045360439702282,
      "candidate": "from typing import List\n\n\ndef sort_by_index(array: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists to be sorted\n        index (int): index of the inner list to be used as a key\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    array = [[1, 2, 3], [2, 1, 3], [3, 2, 1]]\n    index = 0\n    print(sort_by_index(array, index))"
    },
    {
      "rank": 31,
      "score": 9.000502856158482,
      "candidate": "def sort_by_index(list_of_lists, index):\n    \"\"\"Return a sorted list of lists by a given index of the inner list.\"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"Test for sort_by_index.\"\"\"\n    assert sort_by_index(\n        [[1, 3, 5], [2, 4, 6], [3, 5, 7]], 0) == [[1, 3, 5], [3, 5, 7], [2, 4, 6]]\n    assert sort_by_index(\n        [[1, 3, 5], [2, 4, 6], [3, 5, 7]], 1) == [[2, 4, 6], [1, 3, 5], [3, 5, 7]]\n    assert sort_by_index(\n        [[1, 3, 5], [2, 4, 6], [3, 5, 7]], 2) == [[3, 5, 7], [1, 3, 5], [2, 4, 6]]\n\n\nif __name__ == '__main__':\n    test_sort_by_index()"
    },
    {
      "rank": 32,
      "score": 8.867154248667784,
      "candidate": "def sort_list(l, index):\n    \"\"\"\n    >>> sort_list([[1, 2, 3], [1, 2, 3]], 1)\n    [[1, 2, 3], [1, 2, 3]]\n    >>> sort_list([[3, 2, 1], [1, 2, 3]], 0)\n    [[3, 2, 1], [1, 2, 3]]\n    >>> sort_list([[3, 2, 1], [1, 2, 3]], 1)\n    [[3, 2, 1], [1, 2, 3]]\n    >>> sort_list([[3, 2, 1], [1, 2, 3]], 2)\n    [[1, 2, 3], [3, 2, 1]]\n    \"\"\"\n    l.sort(key=lambda x: x[index])\n    return l\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.819759312702296,
      "candidate": "def sort_by_index(list_to_sort, index):\n    \"\"\"\n    >>> sort_by_index([[1, 2], [2, 1], [1, 1]], 0)\n    [[1, 2], [1, 1], [2, 1]]\n    \"\"\"\n    return sorted(list_to_sort, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.777580031626066,
      "candidate": "def sort_by_index(lst, index, descending=False):\n    \"\"\"\n    >>> lst = [\n    ...     [1, 10, 100],\n    ...     [2, 20, 200],\n    ...     [3, 30, 300],\n    ...     [4, 40, 400],\n    ... ]\n    >>> sort_by_index(lst, 1)\n    [[4, 40, 400], [2, 20, 200], [3, 30, 300], [1, 10, 100]]\n    >>> sort_by_index(lst, 1, descending=True)\n    [[1, 10, 100], [3, 30, 300], [2, 20, 200], [4, 40, 400]]\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i][index] < lst[j][index]:\n                lst[i], lst[j] = lst[j], lst[i]\n            elif lst[i][index] == lst[j][index] and descending:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.747215742242563,
      "candidate": "def sort_by_index(lst, index):\n    \"\"\"\n    >>> lst = [[1, 2], [3, 4], [5, 6]]\n    >>> sort_by_index(lst, 0)\n    [[1, 2], [3, 4], [5, 6]]\n    >>> sort_by_index(lst, 1)\n    [[3, 4], [1, 2], [5, 6]]\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i][index] > lst[j][index]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.6952317228692,
      "candidate": "def sort_by_index(lst, index, reverse=False):\n    \"\"\"\n    >>> lst = [\n    ...     [1, 2, 3, 4],\n    ...     [1, 2, 3, 5],\n    ...     [1, 2, 3, 6],\n    ...     [1, 2, 3, 7]\n    ... ]\n    >>> sort_by_index(lst, 3)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7]]\n    >>> sort_by_index(lst, 3, reverse=True)\n    [[1, 2, 3, 7], [1, 2, 3, 6], [1, 2, 3, 5], [1, 2, 3, 4]]\n    \"\"\"\n    lst = lst[:]\n    lst.sort(key=lambda x: x[index], reverse=reverse)\n    return lst\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.66689406231469,
      "candidate": "def sort_list_of_lists(arr, index):\n    \"\"\"\n    >>> arr = [\n    ...     [1, 2, 3],\n    ...     [2, 3, 4],\n    ...     [3, 4, 5],\n    ...     [4, 5, 6],\n    ...     [5, 6, 7],\n    ...     [6, 7, 8],\n    ...     [7, 8, 9]\n    ... ]\n    >>> sort_list_of_lists(arr, 1)\n    [[7, 8, 9], [6, 7, 8], [5, 6, 7], [4, 5, 6], [3, 4, 5], [2, 3, 4], [1, 2, 3]]\n    >>> sort_list_of_lists(arr, 2)\n    [[3, 4, 5], [2, 3, 4], [1, 2, 3], [7, 8, 9], [6, 7, 8], [5, 6, 7], [4, 5, 6]]\n    >>> sort_list_of_lists(arr, 0)\n    [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]]\n    >>> sort_list_of_lists(arr, 3)\n    [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]]\n    >>> sort_list_of_lists(arr, 4)\n    [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7,"
    },
    {
      "rank": 38,
      "score": 8.65488409202092,
      "candidate": "from functools import cmp_to_key\n\n\ndef sort_lists_by_index(lists, index):\n    \"\"\"Sort lists by index of inner list.\n\n    :param lists: list of lists\n    :type lists: list\n    :param index: index of inner list\n    :type index: int\n    :return: sorted lists\n    :rtype: list\n    \"\"\"\n    return sorted(lists, key=cmp_to_key(lambda a, b: a[index] - b[index]))"
    },
    {
      "rank": 39,
      "score": 8.64809724717905,
      "candidate": "def sort_by_index(list, index):\n    return sorted(list, key=lambda x: x[index])\n\n\nprint(sort_by_index([[3, 5], [1, 2], [4, 1]], 1))\nprint(sort_by_index([[1, 3], [1, 2], [4, 1]], 0))"
    },
    {
      "rank": 40,
      "score": 8.592715214713975,
      "candidate": "def sort_by_index(list_of_lists, index):\n    \"\"\"\n    >>> list_of_lists = [[1, 2, 3], [10, 20, 30], [100, 200, 300]]\n    >>> sort_by_index(list_of_lists, 2)\n    [[1, 2, 3], [10, 20, 30], [100, 200, 300]]\n    >>> sort_by_index(list_of_lists, 1)\n    [[10, 20, 30], [1, 2, 3], [100, 200, 300]]\n    >>> sort_by_index(list_of_lists, 0)\n    [[100, 200, 300], [10, 20, 30], [1, 2, 3]]\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.592616642702895,
      "candidate": "def sort_by_index(array, index):\n    return sorted(array, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"\n    >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 0)\n    [[1, 2], [5, 6], [3, 4]]\n    >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 1)\n    [[3, 4], [1, 2], [5, 6]]\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.59086059876426,
      "candidate": "def sort_by_index(list, index):\n    return sorted(list, key=lambda x: x[index])\n\n\n# Test\nlist = [\n    [1, 2, 3, 4],\n    [2, 3, 4, 5],\n    [3, 4, 5, 6]\n]\nprint(sort_by_index(list, 1))"
    },
    {
      "rank": 43,
      "score": 8.580262451319905,
      "candidate": "def sort_lists_by_index(lists, index):\n    return sorted(lists, key=lambda x: x[index])"
    },
    {
      "rank": 44,
      "score": 8.579232399404916,
      "candidate": "def sort_by_index(list_of_lists, index):\n    \"\"\"Sorts a list of lists by a given index of the inner list.\"\"\"\n    return sorted(list_of_lists, key=lambda list_item: list_item[index])\n\n\ndef main():\n    \"\"\"Returns a sorted list of lists by a given index.\"\"\"\n    print(sort_by_index([[1, 2], [3, 4], [5, 6]], 1))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.57731887189631,
      "candidate": "def sort_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\ndef main():\n    lst = [\n        [\"Mike\", \"Jones\", 18],\n        [\"Jimmy\", \"Brown\", 34],\n        [\"Jim\", \"Johnson\", 42],\n        [\"Robert\", \"Clark\", 23],\n        [\"Richard\", \"Davis\", 41]\n    ]\n\n    print(sort_list(lst, 2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 8.573285850808507,
      "candidate": "def get_element_index_sorter(index):\n    def sorter(list_of_lists):\n        return sorted(list_of_lists, key=lambda l: l[index])\n    return sorter\n\nif __name__ == '__main__':\n    print(get_element_index_sorter(0)([[1, 2, 3], [2, 1, 3], [2, 3, 1]]))\n    print(get_element_index_sorter(1)([[1, 2, 3], [2, 1, 3], [2, 3, 1]]))\n    print(get_element_index_sorter(2)([[1, 2, 3], [2, 1, 3], [2, 3, 1]]))"
    },
    {
      "rank": 47,
      "score": 8.565853758040921,
      "candidate": "def sort_by_index(list_of_lists, index=0):\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    :param list_of_lists: list of lists to be sorted\n    :param index: index of the inner list to sort by\n    :return: sorted list of lists\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"Test for sort_by_index function.\"\"\"\n    assert sort_by_index([[4, 5], [2, 3], [1, 2]]) == [[1, 2], [2, 3], [4, 5]]\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[4, 5], [2, 3], [1, 2]]))"
    },
    {
      "rank": 48,
      "score": 8.551477106038199,
      "candidate": "from typing import List\n\n\ndef sort_by_index(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Examples:\n        >>> sort_by_index([[1, 2], [4, 5], [7, 8], [9, 10]], 0)\n        [[1, 2], [4, 5], [7, 8], [9, 10]]\n        >>> sort_by_index([[1, 2], [4, 5], [7, 8], [9, 10]], 1)\n        [[7, 8], [4, 5], [1, 2], [9, 10]]\n        >>> sort_by_index([[1, 2], [4, 5], [7, 8], [9, 10]], 3)\n        [[1, 2], [4, 5], [7, 8], [9, 10]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\ndef sort_by_index_lambda(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Examples:\n        >>> sort_by_index_lambda([[1, 2], [4, 5], [7, 8], [9, 10]], 0)\n        [[1, 2], [4, 5], [7, 8], [9, 10]]\n        >>> sort_by_index_lambda([[1, 2], [4, 5], [7, 8], [9, 10]], 1)\n        [[7, 8], [4,"
    },
    {
      "rank": 49,
      "score": 8.525157551150786,
      "candidate": "def sort_by_index(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\ndef test_list_of_lists():\n    assert sort_by_index([[1, 3], [3, 1], [4, 5], [5, 4]], 0) == [\n        [1, 3],\n        [3, 1],\n        [4, 5],\n        [5, 4],\n    ]\n    assert sort_by_index([[1, 3], [3, 1], [4, 5], [5, 4]], 1) == [\n        [3, 1],\n        [1, 3],\n        [5, 4],\n        [4, 5],\n    ]\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 3], [3, 1], [4, 5], [5, 4]], 0))"
    },
    {
      "rank": 50,
      "score": 8.484246239677141,
      "candidate": "def sort_by_index(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\ndef main():\n    list_of_lists = [\n        [1, 2, 3],\n        [3, 2, 1],\n        [2, 3, 1],\n        [2, 1, 3],\n        [1, 3, 2],\n        [3, 1, 2],\n    ]\n\n    sorted_lists = sort_by_index(list_of_lists, 0)\n    print(sorted_lists)\n\n    sorted_lists = sort_by_index(list_of_lists, 2)\n    print(sorted_lists)\n\n    sorted_lists = sort_by_index(list_of_lists, 1)\n    print(sorted_lists)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.429755768409365,
      "candidate": "def sort_by_index(list, index):\n    \"\"\"\n    >>> sort_by_index([[2,4],[1,3],[3,1]], 0)\n    [[3, 1], [1, 3], [2, 4]]\n    >>> sort_by_index([[2,4],[1,3],[3,1]], 1)\n    [[2, 4], [3, 1], [1, 3]]\n    \"\"\"\n    return sorted(list, key = lambda inner: inner[index])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.354378970431064,
      "candidate": "def sort_list_by_index(l, index, reverse=False):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    Args:\n        l (list): list of lists to be sorted\n        index (int): index of inner list to sort by\n        reverse (bool, optional): reverse the sort order\n    \"\"\"\n    l.sort(key=lambda x: x[index], reverse=reverse)\n\n\nif __name__ == '__main__':\n    l = [\n        ['a', 2],\n        ['c', 1],\n        ['b', 3]\n    ]\n    sort_list_by_index(l, 0)\n    print(l)\n    sort_list_by_index(l, 0, reverse=True)\n    print(l)\n    sort_list_by_index(l, 1)\n    print(l)\n    sort_list_by_index(l, 1, reverse=True)\n    print(l)"
    },
    {
      "rank": 53,
      "score": 8.351876161244965,
      "candidate": "from typing import List\n\n\ndef sort_by_index(input: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n    >>> sort_by_index([[1, 2, 3], [4, 5, 6]], 1)\n    [[4, 5, 6], [1, 2, 3]]\n    \"\"\"\n    return sorted(input, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.348263719760634,
      "candidate": "def sort_by_index(l, index):\n    return sorted(l, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    data = [\n        [1, 2, 3],\n        [5, 4, 3],\n        [4, 1, 2],\n        [3, 2, 1]\n    ]\n    print(data)\n    print(sort_by_index(data, 1))"
    },
    {
      "rank": 55,
      "score": 8.324850007029202,
      "candidate": "from typing import List\n\n\ndef sort_list_by_index(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts the given list of lists by the given index of the inner list.\n\n    Args:\n        lst: A list of lists.\n        index: The index of the inner list.\n\n    Examples:\n        >>> sort_list_by_index([[1, 2], [3, 4], [5, 6]], 0)\n        [[1, 2], [3, 4], [5, 6]]\n        >>> sort_list_by_index([[1, 2], [3, 4], [5, 6]], 1)\n        [[5, 6], [1, 2], [3, 4]]\n\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_by_index([[1, 2], [3, 4], [5, 6]], 0))\n    print(sort_list_by_index([[1, 2], [3, 4], [5, 6]], 1))"
    },
    {
      "rank": 56,
      "score": 8.321851430753439,
      "candidate": "from random import randint\n\n\ndef sort_by_index(array, index):\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    data = [[randint(0, 100) for _ in range(4)] for _ in range(20)]\n    print(\"Before sort:\")\n    for item in data:\n        print(item)\n    print(\"After sort:\")\n    for item in sort_by_index(data, 0):\n        print(item)"
    },
    {
      "rank": 57,
      "score": 8.317667370345447,
      "candidate": "def sort_by_index(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [5, 6], [3, 4]], 1))"
    },
    {
      "rank": 58,
      "score": 8.286560709473754,
      "candidate": "from typing import List\n\n\ndef sort_by_index(array: List[List], index: int) -> List[List]:\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    assert sort_by_index([[1, 2], [5, 6], [3, 4]], 1) == [[3, 4], [1, 2], [5, 6]]\n    assert sort_by_index([[1, 2], [5, 6], [3, 4]], 0) == [[1, 2], [3, 4], [5, 6]]\n    assert sort_by_index([[1, 2], [5, 6], [3, 4]], -1) == [[5, 6], [1, 2], [3, 4]]\n    assert sort_by_index([[1, 2], [5, 6], [3, 4]], -2) == [[3, 4], [5, 6], [1, 2]]"
    },
    {
      "rank": 59,
      "score": 8.254443190391335,
      "candidate": "def sort_by_index(a_list, index):\n    return sorted(a_list, key=lambda x: x[index])\n\n\nprint(sort_by_index([[1, 2], [5, 6], [3, 4]], 0))"
    },
    {
      "rank": 60,
      "score": 8.227242760899959,
      "candidate": "def sort_list_by_index(list_to_sort, index):\n    return sorted(list_to_sort, key=lambda x: x[index])\n\n\nl = [\n    [1, 2, 3, 4],\n    [4, 3, 2, 1],\n    [3, 2, 1, 4],\n    [2, 1, 4, 3],\n    [1, 4, 3, 2],\n    [4, 2, 1, 3],\n]\n\nprint(sort_list_by_index(l, 0))\nprint(sort_list_by_index(l, 1))\nprint(sort_list_by_index(l, 2))\nprint(sort_list_by_index(l, 3))"
    },
    {
      "rank": 61,
      "score": 8.149308319002614,
      "candidate": "def sort_by_index(lst, idx):\n    \"\"\"\n    >>> lst = [\n    ...     [1, 5, 7, 2],\n    ...     [1, 5, 7, 1],\n    ...     [1, 5, 7, 3],\n    ...     [1, 5, 7, 4],\n    ...     [1, 5, 7, 5],\n    ...     [1, 5, 7, 6],\n    ... ]\n    >>> sort_by_index(lst, 3)\n    [[1, 5, 7, 2], [1, 5, 7, 1], [1, 5, 7, 3], [1, 5, 7, 4], [1, 5, 7, 5], [1, 5, 7, 6]]\n    >>> sort_by_index(lst, 2)\n    [[1, 5, 7, 2], [1, 5, 7, 1], [1, 5, 7, 4], [1, 5, 7, 3], [1, 5, 7, 5], [1, 5, 7, 6]]\n    >>> sort_by_index(lst, 1)\n    [[1, 5, 7, 6], [1, 5, 7, 5], [1, 5, 7, 4], [1, 5, 7, 3], [1, 5, 7, 1], [1, 5, 7, 2]]\n    \"\"\"\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[j][idx] > lst[i][idx]:\n                lst[j], lst[i] = lst[i], lst[j]\n    return lst\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.112962067258238,
      "candidate": "from math import inf\n\n\ndef sort_by_index(lst, index=0, reverse=False):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n    :param lst: List of lists\n    :param index: Index of inner list to sort by\n    :param reverse: Reverse order\n    :return: Sorted list of lists\n    \"\"\"\n\n    def sort_key(item):\n        return item[index]\n\n    return sorted(lst, key=sort_key, reverse=reverse)\n\n\nif __name__ == '__main__':\n    list_of_lists = [\n        ['a', 0, 'b'],\n        ['b', inf, 'a'],\n        ['a', 1, 'c'],\n        ['c', 1, 'a'],\n        ['b', 0, 'a'],\n        ['a', 2, 'c'],\n        ['c', 2, 'a'],\n        ['a', 3, 'b'],\n        ['b', 3, 'a'],\n        ['c', 3, 'a'],\n    ]\n    print(sort_by_index(list_of_lists, 1))\n    print(sort_by_index(list_of_lists, 1, True))\n    print(sort_by_index(list_of_lists, 2))"
    },
    {
      "rank": 63,
      "score": 8.010782963572526,
      "candidate": "def sort_by_index(l, index):\n    return sorted(l, key=lambda x: x[index])\n\n\nprint(sort_by_index([[3, 7], [1, 2], [4, 5]], 1))"
    },
    {
      "rank": 64,
      "score": 7.9725370777013005,
      "candidate": "from typing import List, Optional\n\n\ndef sort_list_of_lists(array: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists\n        index (int): index of the inner list\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\ndef sort_list_of_lists_in_place(array: List[List[int]], index: int) -> None:\n    \"\"\"Sorts a list of lists in place by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists\n        index (int): index of the inner list\n    \"\"\"\n    array.sort(key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(\n        sort_list_of_lists(\n            [[3, 1, 6], [1, 2, 3], [7, 8, 9]],\n            index=2,\n        )\n    )\n    print(\n        sort_list_of_lists(\n            [[3, 1, 6], [1, 2, 3], [7, 8, 9]],\n            index=1,\n        )\n    )\n    print(\n        sort_list_of_lists(\n            [[3, 1, 6], [1, 2, 3], [7, 8, 9]],\n            index=0,\n        )\n    )\n\n    array = [[3, 1, 6], [1, 2, 3], [7, 8, 9]]\n    sort_list_of_lists_in_place(array, index=2)\n    print(array)\n    sort_list_of_lists_in_place(array, index=1)\n    print(array)\n    sort_list_of_lists_in_place(array, index=0)\n    print(array)"
    },
    {
      "rank": 65,
      "score": 7.721597980745724,
      "candidate": "def sort_list_of_lists(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    assert sort_list_of_lists([[2, 1], [3, 3], [1, 2]], 0) == [[1, 2], [2, 1], [3, 3]]\n    assert sort_list_of_lists([[2, 1], [3, 3], [1, 2]], 1) == [[3, 3], [2, 1], [1, 2]]"
    },
    {
      "rank": 66,
      "score": 7.659999544134748,
      "candidate": "def sort_list(list, index):\n    return sorted(list, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    list = [[3, 5, 7], [1, 2, 3], [4, 5, 6]]\n    print(sort_list(list, 0))\n    print(sort_list(list, 1))"
    },
    {
      "rank": 67,
      "score": 7.3703489517676495,
      "candidate": "def sort_list_by_index(list_of_lists, index):\n    \"\"\"\n    Return a sorted list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists: list of lists\n        index: index of the inner list\n\n    Returns:\n        list of lists sorted by a given index of the inner list\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])"
    },
    {
      "rank": 68,
      "score": 3.3311658563043682,
      "candidate": "from typing import List, Optional, TypeVar\n\nT = TypeVar(\"T\")\n\n\ndef get_index_of_min(array: List[T], start: Optional[int] = None) -> int:\n    \"\"\"Returns the index of the smallest element in the list.\n\n    Args:\n        array: The list to search.\n        start: The index to start the search from.\n\n    Examples:\n        >>> get_index_of_min([1, 2, 3])\n        0\n        >>> get_index_of_min([3, 2, 1])\n        2\n        >>> get_index_of_min([1, 2, 3, 2])\n        0\n        >>> get_index_of_min([3, 2, 1, 2])\n        2\n    \"\"\"\n    start = start or 0\n    min_index = start\n    for i in range(start + 1, len(array)):\n        if array[i] < array[min_index]:\n            min_index = i\n    return min_index\n\n\ndef sort_by_index(array: List[List[T]], index: int) -> List[List[T]]:\n    \"\"\"Sorts the list by the given index.\n\n    Args:\n        array: The list to sort.\n        index: The index to sort by.\n\n    Examples:\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 0)\n        [[1, 2], [3, 4], [5, 6]]\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 1)\n        [[3, 4], [1, 2], [5, 6]]\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], -1)\n        [[5, 6], [3, 4], [1, 2]]\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 2)\n        [[1, 2],"
    },
    {
      "rank": 69,
      "score": 3.3219298919503784,
      "candidate": "from typing import List\n\n\ndef sort_by_index(lst: List[List[int]], index: int):\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    lst = [[2, 5], [3, 4], [1, 2]]\n    print(sort_by_index(lst, 0))"
    },
    {
      "rank": 70,
      "score": 3.3196528468758535,
      "candidate": "def sort_by_index(arr, index):\n    return sorted(arr, key=lambda x: x[index])\n\n\ndef test_list_of_lists():\n    # test 1\n    arr = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    expected = [[9, 10, 11], [6, 7, 8], [3, 4, 5]]\n    actual = sort_by_index(arr, 0)\n    assert actual == expected\n\n    # test 2\n    arr = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    expected = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    actual = sort_by_index(arr, 1)\n    assert actual == expected\n\n    # test 3\n    arr = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    expected = [[9, 10, 11], [3, 4, 5], [6, 7, 8]]\n    actual = sort_by_index(arr, 2)\n    assert actual == expected\n\n    # test 4\n    arr = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    expected = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    actual = sort_by_index(arr, 3)\n    assert actual == expected\n\n\ndef test_list_of_lists_2():\n    # test 1\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = [[7, 8, 9], [4, 5, 6], [1, 2, 3]]\n    actual = sort_by_index(arr, 0"
    },
    {
      "rank": 71,
      "score": 3.2714398209940523,
      "candidate": "from typing import List, Optional\n\n\ndef sort_by_index(array: List[List[int]], index: Optional[int] = 0) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists to sort\n        index (Optional[int], optional): index of inner list to sort by. Defaults to 0.\n\n    Returns:\n        List[List[int]]: sorted list\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [5, 6], [3, 4]]))\n    print(sort_by_index([[1, 2], [5, 6], [3, 4]], 1))"
    },
    {
      "rank": 72,
      "score": 3.2712278264438237,
      "candidate": "def sort_by_index(lst, idx):\n    return sorted(lst, key=lambda x: x[idx])\n\n\nprint(sort_by_index([[1, 2], [3, 4], [5, 6], [7, 8]], 0))"
    },
    {
      "rank": 73,
      "score": 3.25325346062046,
      "candidate": "from typing import List, Optional\n\n\ndef sort_by_index(\n    list_of_lists: List[List], index: int, descending: bool = False\n) -> List[List]:\n    \"\"\"Sorts list of lists by a given index of inner list.\n\n    Args:\n        list_of_lists (List[List]): List of lists.\n        index (int): Index of inner list to sort by.\n        descending (bool, optional): Whether to sort in descending order. Defaults to False.\n\n    Returns:\n        List[List]: List of lists sorted by inner list at index.\n\n    Examples:\n        >>> list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        >>> sort_by_index(list_of_lists, 1)\n        [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\n        >>> sort_by_index(list_of_lists, 1, True)\n        [[4, 5, 6], [7, 8, 9], [1, 2, 3]]\n    \"\"\"\n    if not list_of_lists:\n        return []\n\n    if not all(len(lst) > index for lst in list_of_lists):\n        raise IndexError(\"Index out of range.\")\n\n    return sorted(list_of_lists, key=lambda x: x[index], reverse=descending)\n\n\ndef sort_by_index_lambda(\n    list_of_lists: List[List], index: int, descending: bool = False\n) -> List[List]:\n    \"\"\"Sorts list of lists by a given index of inner list.\n\n    Args:\n        list_of_lists (List[List]): List of lists.\n        index (int): Index of inner list to sort by.\n        descending (bool, optional): Whether to sort in descending order. Defaults to False.\n\n    Returns:\n        List[List]: List of lists sorted by inner list at index.\n\n    Examples:\n        >>> list_of_lists = [[1, 2"
    },
    {
      "rank": 74,
      "score": 3.2137372175732284,
      "candidate": "from typing import List\n\n\ndef sort_by_index(lists: List[List], index: int) -> List[List]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List]): list of lists\n        index (int): index of the inner list\n\n    Returns:\n        List[List]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [3, 4], [5, 6]], 1))"
    },
    {
      "rank": 75,
      "score": 3.1239803460540716,
      "candidate": "from typing import List\n\n\ndef sort_list_of_lists(lst: List, index: int, reverse: bool = False) -> List:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst: list of lists to be sorted\n        index: index of inner list to be sorted\n        reverse: whether to sort in reverse order (default: False)\n\n    Returns:\n        sorted list of lists\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index], reverse=reverse)"
    },
    {
      "rank": 76,
      "score": 3.1133940355575924,
      "candidate": "from typing import List\n\n\ndef sort_list(lst: List[list], index: int) -> List[list]:\n    \"\"\"Sorts list by given index of inner list.\n\n    Args:\n        lst: list to sort\n        index: index of inner list\n\n    Returns:\n        Sorted list\n\n    Examples:\n        >>> sort_list([[1, 2], [3, 4], [5, 6]], 0)\n        [[1, 2], [3, 4], [5, 6]]\n        >>> sort_list([[1, 2], [3, 4], [5, 6]], 1)\n        [[5, 6], [1, 2], [3, 4]]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list([[1, 2], [3, 4], [5, 6]], 0))\n    print(sort_list([[1, 2], [3, 4], [5, 6]], 1))"
    },
    {
      "rank": 77,
      "score": 3.05655153279269,
      "candidate": "from typing import List\n\n\ndef sort_by_index(lists: List[list], index: int) -> List[list]:\n    \"\"\"Sorts a list of lists by a given index.\n\n    Args:\n        lists: list of lists to sort.\n        index: index to sort by.\n\n    Returns:\n        Sorted list of lists.\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    lists = [[3, 2, 1], [1, 2, 3], [2, 1, 3]]\n    print(sort_by_index(lists, 0))"
    },
    {
      "rank": 78,
      "score": 3.0366044546042557,
      "candidate": "def sort_list_of_lists(list_of_lists, index_to_sort_by=0):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists: The list of lists to be sorted.\n        index_to_sort_by: The index of the inner list to sort by.\n\n    Returns:\n        list_of_lists: The sorted list of lists.\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index_to_sort_by])\n\n\ndef main():\n    \"\"\"\n    Print the sorted list of lists.\n    \"\"\"\n    list_of_lists = [\n        [\"c\", 3, \"apple\"],\n        [\"a\", 5, \"banana\"],\n        [\"b\", 1, \"orange\"],\n        [\"d\", 2, \"grape\"]\n    ]\n    print(sort_list_of_lists(list_of_lists, 1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 3.0302810562567157,
      "candidate": "from typing import List\n\n\ndef sort_list_by_index(lst: List[list], index: int) -> None:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Examples:\n        >>> lst = [\n        ...     [1, 2, 3],\n        ...     [1, 3, 2],\n        ...     [1, 2, 3],\n        ...     [1, 2, 3],\n        ...     [2, 3, 1],\n        ...     [3, 2, 1],\n        ...     [3, 2, 1],\n        ... ]\n        >>> sort_list_by_index(lst, 0)\n        >>> lst\n        [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 2, 1], [3, 2, 1]]\n        >>> sort_list_by_index(lst, 2)\n        >>> lst\n        [[1, 2, 3], [1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 2, 1], [3, 2, 1], [1, 2, 3]]\n        >>> sort_list_by_index(lst, 1)\n        >>> lst\n        [[1, 2, 3], [1, 3, 2], [2, 3, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1]]\n    \"\"\"\n    lst.sort(key=lambda x: x[index])\n\n\ndef main():\n    lst = [\n        [1, 2, 3],\n        [1, 3, 2],\n        [1, 2, 3],\n        [1, 2, 3],\n        [2, 3, 1],\n        [3, 2, 1],\n        [3, 2,"
    },
    {
      "rank": 80,
      "score": 3.0287255325185964,
      "candidate": "from typing import List\n\n\ndef sort_list(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts list of lists by given index.\n\n    Args:\n        lst (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    lst.sort(key=lambda x: x[index])\n    return lst\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_list(lst, 2))"
    },
    {
      "rank": 81,
      "score": 2.9762366598784897,
      "candidate": "from typing import List, Callable, Any\n\n\ndef sort_list(lst: List[list], index: int, reverse: bool = False) -> List[list]:\n    \"\"\"Sort a list by a given index of the inner list.\n\n    Args:\n        lst: the list of lists\n        index: the index of the inner list to sort by\n        reverse: if True, sort in reverse order\n\n    Examples:\n        >>> lst = [[\"a\", 5], [\"b\", 6], [\"c\", 2], [\"d\", 1], [\"e\", 3], [\"f\", 4]]\n        >>> sort_list(lst, 1, reverse=True)\n        [['f', 4], ['e', 3], ['d', 1], ['c', 2], ['b', 6], ['a', 5]]\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index], reverse=reverse)\n\n\ndef sort_list_by_key(lst: List[dict], key: str, reverse: bool = False) -> List[dict]:\n    \"\"\"Sort a list by a given key of the dict.\n\n    Args:\n        lst: the list of dict\n        key: the key of the dict to sort by\n        reverse: if True, sort in reverse order\n\n    Examples:\n        >>> lst = [{\"a\": 5}, {\"b\": 6}, {\"c\": 2}, {\"d\": 1}, {\"e\": 3}, {\"f\": 4}]\n        >>> sort_list_by_key(lst, \"a\", reverse=True)\n        [{'f': 4}, {'e': 3}, {'d': 1}, {'c': 2}, {'b': 6}, {'a': 5}]\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[key], reverse=reverse)\n\n\ndef sort_list_by_index(lst: List[list], index: int, reverse: bool = False) -> List[list]:\n    \"\"\"Sort a list by a given index of the list.\n\n    Args:\n        lst: the list"
    },
    {
      "rank": 82,
      "score": 2.9387325377009406,
      "candidate": "from functools import cmp_to_key\n\n\ndef sort_by_index(list_of_lists: list, index: int, descending: bool = False) -> list:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists: list of lists to be sorted.\n        index: index of the inner list.\n        descending: if True, sorts in descending order. Defaults to False.\n\n    Returns:\n        list of lists sorted by the inner list's index.\n    \"\"\"\n\n    def sort_key(list_of_lists):\n        return list_of_lists[index]\n\n    return sorted(list_of_lists, key=cmp_to_key(sort_key), reverse=descending)\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [\n        [\"a\", \"b\", \"c\"],\n        [\"b\", \"c\", \"d\"],\n        [\"c\", \"d\", \"e\"],\n        [\"d\", \"e\", \"f\"],\n        [\"e\", \"f\", \"g\"],\n    ]\n    print(sort_by_index(list_of_lists, 0))\n    print(sort_by_index(list_of_lists, 1))\n    print(sort_by_index(list_of_lists, 2, True))"
    },
    {
      "rank": 83,
      "score": 2.9227293863412993,
      "candidate": "def sort_by_index(array, index, reverse=False):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        array: list of lists\n        index: index of the inner list to sort by\n        reverse: flag to reverse the sort\n\n    Returns:\n        Sorted list of lists.\n    \"\"\"\n    # sort by index\n    return sorted(array, key=lambda x: x[index], reverse=reverse)\n\n\ndef test_function(test_case):\n    sorted_array = sort_by_index(test_case[0], test_case[1])\n    if sorted_array == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [[\"Joe\", 10, 20], [\"Tim\", 20, 10], [\"Jeff\", 10, 30]]\nindex_to_sort_by = 1\nresult = [[\"Tim\", 20, 10], [\"Joe\", 10, 20], [\"Jeff\", 10, 30]]\n\ntest_function(test_case_1)\n\ntest_case_2 = [[\"Joe\", 10, 20], [\"Tim\", 20, 10], [\"Jeff\", 10, 30]]\nindex_to_sort_by = 2\nresult = [[\"Joe\", 10, 20], [\"Jeff\", 10, 30], [\"Tim\", 20, 10]]\n\ntest_function(test_case_2)\n\ntest_case_3 = [[\"Joe\", 10, 20], [\"Tim\", 20, 10], [\"Jeff\", 10, 30]]\nindex_to_sort_by = 0\nresult = [[\"Jeff\", 10, 30], [\"Joe\", 10, 20], [\"Tim\", 20, 10]]\n\ntest_function(test_case_3)\n\ntest_case_4 = [[\"Joe\", 10"
    },
    {
      "rank": 84,
      "score": 2.845073452641466,
      "candidate": "def sort_by_index(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\ndef test_function(test_case):\n    lst = test_case[0]\n    index = test_case[1]\n    solution = test_case[2]\n    output = sort_by_index(lst, index)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nlst = [[4, 5, 1, 6], [13, 7, 2, 9], [34, 3, 5, 2], [100, 5, 6, 2]]\nindex = 1\nsolution = [[13, 7, 2, 9], [4, 5, 1, 6], [34, 3, 5, 2], [100, 5, 6, 2]]\ntest_case = [lst, index, solution]\ntest_function(test_case)\n\nlst = [[1, 2], [3, 4], [5, 6], [7, 8]]\nindex = 0\nsolution = [[1, 2], [3, 4], [5, 6], [7, 8]]\ntest_case = [lst, index, solution]\ntest_function(test_case)"
    },
    {
      "rank": 85,
      "score": 2.814445115350479,
      "candidate": "from typing import List\n\n\ndef sort_list_by_index(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts list of lists by index of inner list.\n\n    Args:\n        lst (List[List[int]]): list of lists to be sorted\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[List[int]]: list of lists sorted by index of inner list\n    \"\"\"\n\n    def sort_helper(lst: List[List[int]], index: int) -> List[List[int]]:\n        if len(lst) <= 1:\n            return lst\n\n        mid = len(lst) // 2\n        left = lst[:mid]\n        right = lst[mid:]\n\n        left = sort_helper(left, index)\n        right = sort_helper(right, index)\n\n        return merge(left, right, index)\n\n    def merge(left: List[List[int]], right: List[List[int]], index: int) -> List[List[int]]:\n        i = j = 0\n        result = []\n\n        while i < len(left) and j < len(right):\n            if left[i][index] < right[j][index]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    return sort_helper(lst, index)\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [3, 2, 1], [1, 4, 3], [2, 3, 1]]\n    sorted_lst = sort_list_by_index(lst, 2)\n    print(sorted_lst)"
    },
    {
      "rank": 86,
      "score": 2.8014368179642988,
      "candidate": "from typing import List\n\n\ndef sort_list_by_index(lst: List[list], index: int) -> List[list]:\n    \"\"\"Sort list of lists by index.\n\n    Args:\n        lst: List of lists.\n        index: Index of inner list.\n\n    Returns:\n        List of lists sorted by index.\n    \"\"\"\n    return sorted(lst, key=lambda i: i[index])\n\n\nif __name__ == \"__main__\":\n    lst = [\n        [1, 2, 3],\n        [1, 2, 5],\n        [1, 2, 8],\n        [1, 2, 9],\n        [1, 2, 10],\n        [1, 2, 11],\n        [1, 2, 12],\n        [1, 2, 13],\n        [1, 2, 14],\n        [1, 2, 15],\n    ]\n    print(sort_list_by_index(lst, 2))"
    },
    {
      "rank": 87,
      "score": 2.787110480980309,
      "candidate": "def sort_by_index(arr, index):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n    \"\"\"\n    return sorted(arr, key=lambda x: x[index])\n\ndef test_function(test_case):\n    arr = test_case[0]\n    index = test_case[1]\n    solution = test_case[2]\n    output = sort_by_index(arr, index)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [[2, 5, 3], [1, 2, 3], [3, 1, 2]]\nindex = 1\nsolution = [[3, 1, 2], [2, 5, 3], [1, 2, 3]]\ntest_case = [arr, index, solution]\ntest_function(test_case)\n\narr = [[1, 2, 3], [2, 1, 4], [3, 4, 1], [1, 4, 2]]\nindex = 2\nsolution = [[1, 4, 2], [2, 1, 4], [3, 4, 1], [1, 2, 3]]\ntest_case = [arr, index, solution]\ntest_function(test_case)\n\narr = [[1, 2, 3], [2, 1, 4], [3, 4, 1], [1, 4, 2]]\nindex = 0\nsolution = [[1, 2, 3], [2, 1, 4], [3, 4, 1], [1, 4, 2]]\ntest_case = [arr, index, solution]\ntest_function(test_case)"
    },
    {
      "rank": 88,
      "score": 2.7766157398990337,
      "candidate": "from typing import List\n\n\ndef sort_by_index(arr: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        arr (List[List[int]]): list of lists to sort\n        index (int): index of the inner list to sort by\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(arr, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [5, 6], [7, 8], [3, 4], [9, 10], [11, 12]], 0))\n    print(sort_by_index([[1, 2], [5, 6], [7, 8], [3, 4], [9, 10], [11, 12]], 1))"
    },
    {
      "rank": 89,
      "score": 2.768322479020474,
      "candidate": "from typing import List, Optional, TypeVar\n\nT = TypeVar(\"T\", list, str)\n\n\ndef sort_list(list_to_sort: List[T], index: Optional[int] = 0) -> List[T]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        list_to_sort (List[T]): list of lists\n        index (Optional[int], optional): index of the inner list. Defaults to 0.\n\n    Returns:\n        List[T]: sorted list of lists\n    \"\"\"\n    return sorted(list_to_sort, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    list_to_sort = [\n        [\"a\", 1],\n        [\"b\", 2],\n        [\"c\", 3],\n        [\"d\", 4],\n        [\"e\", 5],\n        [\"f\", 6],\n        [\"g\", 7],\n        [\"h\", 8],\n    ]\n    print(sort_list(list_to_sort, 1))"
    },
    {
      "rank": 90,
      "score": 2.723058217336529,
      "candidate": "def sort_list_of_lists(list_of_lists: list, index: int) -> list:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists (list): list of lists\n        index (int): index of the inner list to sort by\n\n    Returns:\n        list: sorted list of lists\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_lists([[1, 2], [3, 4], [5, 6]], 1))"
    },
    {
      "rank": 91,
      "score": 2.7003520550780005,
      "candidate": "from typing import List\n\n\ndef sort_by_index(array: List[list], index: int) -> List[list]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[list]): Array of lists\n        index (int): Index of inner list to sort by\n\n    Returns:\n        List[list]: Sorted array of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    arr = [\n        [\"b\", 2, \"c\"],\n        [\"a\", 1, \"z\"],\n        [\"d\", 3, \"e\"],\n    ]\n    index = 1\n    print(sort_by_index(arr, index))"
    },
    {
      "rank": 92,
      "score": 2.6657657302896403,
      "candidate": "def sort_by_index(list_of_lists, index=0, reverse=False):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists: List of lists to be sorted.\n        index: Index of the inner list to sort by.\n        reverse: Sort in reverse order.\n\n    Returns:\n        Sorted list of lists.\n\n    Raises:\n        TypeError: If list_of_lists is not a list.\n        TypeError: If index is not an integer.\n        TypeError: If reverse is not a boolean.\n    \"\"\"\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"The argument list_of_lists must be a list.\")\n    if not isinstance(index, int):\n        raise TypeError(\"The argument index must be an integer.\")\n    if not isinstance(reverse, bool):\n        raise TypeError(\"The argument reverse must be a boolean.\")\n\n    return sorted(list_of_lists, key=lambda x: x[index], reverse=reverse)"
    },
    {
      "rank": 93,
      "score": 2.6349094585780106,
      "candidate": "def sort_by_index(a, index):\n    return sorted(a, key=lambda x: x[index])\n\n# test\na = [\n    [4, 5, 1],\n    [13, 2, 5],\n    [7, 1, 12],\n    [3, 6, 7],\n    [1, 1, 5],\n    [4, 7, 7],\n]\nprint(sort_by_index(a, 1))\nprint(sort_by_index(a, 0))\nprint(sort_by_index(a, 2))"
    },
    {
      "rank": 94,
      "score": 2.6052518140533785,
      "candidate": "from typing import List, Tuple\n\n\ndef sort_by_index(array: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists to be sorted\n        index (int): index of the inner list to be used for sorting\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    assert sort_by_index(\n        [[1, 2], [4, 5], [7, 8]], 1\n    ) == [[7, 8], [1, 2], [4, 5]]\n    assert sort_by_index(\n        [[1, 2], [4, 5], [7, 8]], 0\n    ) == [[1, 2], [4, 5], [7, 8]]\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [4, 5], [7, 8]], 1))\n    print(sort_by_index([[1, 2], [4, 5], [7, 8]], 0))"
    },
    {
      "rank": 95,
      "score": 2.561698603863518,
      "candidate": "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort list of lists by index.\n\n    Args:\n        lists (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda item: item[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_lists([[1, 3], [3, 1], [4, 2]], 0))"
    },
    {
      "rank": 96,
      "score": 2.529833098549559,
      "candidate": "from typing import List, Optional, TypeVar\n\nT = TypeVar('T')\n\n\ndef sort_by_index(array: List[T], index: int, reverse: Optional[bool] = False) -> List[T]:\n    \"\"\"Sort a list by an index of an inner list.\n\n    Args:\n        array (List[T]): list of lists to sort\n        index (int): index of inner list to sort by\n        reverse (Optional[bool], optional): reverse the order of the sort. Defaults to False.\n\n    Returns:\n        List[T]: sorted list of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index], reverse=reverse)\n\n\nif __name__ == '__main__':\n    a = [[3, 2], [1, 5], [4, 6]]\n    b = [[3, 2], [1, 5], [4, 6]]\n    print(sort_by_index(a, 1))\n    print(sort_by_index(b, 1, True))"
    },
    {
      "rank": 97,
      "score": 2.517040067116401,
      "candidate": "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts list of lists by a given index.\n\n    Args:\n        lists (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    lists = [[1, 4], [3, 1], [1, 3]]\n    index = 1\n    print(sort_list_of_lists(lists, index))"
    },
    {
      "rank": 98,
      "score": 2.512087743178749,
      "candidate": "from typing import List, TypeVar\n\nT = TypeVar('T', List[int], List[str])\n\n\ndef sort_lists_by_index(lists: List[T], index: int = 0) -> List[T]:\n    \"\"\"Sort lists by a given index.\n\n    Args:\n        lists (List[T]): list of lists to be sorted\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[T]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    lists = [\n        [1, 2, 3],\n        [5, 4, 3],\n        [1, 2, 3],\n        [5, 6, 7],\n    ]\n    print(sort_lists_by_index(lists, 1))"
    },
    {
      "rank": 99,
      "score": 2.430777115270699,
      "candidate": "def sort_lists(lists, index):\n    \"\"\"\n    >>> sort_lists([[3, 1], [1, 2], [2, 3]], 0)\n    [[1, 2], [2, 3], [3, 1]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 2.3533088591196742,
      "candidate": "from typing import List\n\n\ndef sort_list_of_lists_by_index(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List[int]]): List of lists to be sorted.\n        index (int): Index of inner list to sort.\n\n    Returns:\n        List[List[int]]: Sorted list of lists.\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    data = [\n        [1, 2, 3],\n        [5, 4, 3],\n        [4, 5, 6],\n        [9, 0, 3],\n        [1, 1, 1],\n        [5, 5, 5],\n        [1, 2, 4],\n    ]\n    print(sort_list_of_lists_by_index(data, 0))\n    print(sort_list_of_lists_by_index(data, 1))\n    print(sort_list_of_lists_by_index(data, 2))"
    }
  ]
}