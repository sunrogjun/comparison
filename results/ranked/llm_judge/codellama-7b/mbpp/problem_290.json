{
  "timestamp": "2025-09-15T00:29:50.088886",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 290,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import Dict\n\n\ndef depth_dict(d: Dict) -> int:\n    \"\"\"Returns the depth of a dictionary.\n\n    Args:\n        d (Dict): The dictionary.\n\n    Examples:\n        >>> assert depth_dict({1: 2, 3: 4}) == 1\n        >>> assert depth_dict({1: 2, 3: {4: 5}}) == 2\n        >>> assert depth_dict({1: {2: {3: 4}}}) == 3\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max(depth_dict(v) for v in d.values())\n\n\nif __name__ == \"__main__\":\n    print(depth_dict({1: 2, 3: 4}))\n    print(depth_dict({1: 2, 3: {4: 5}}))\n    print(depth_dict({1: {2: {3: 4}}}))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def depth(d, level=0):\n    \"\"\"\n    Find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return max(depth(v, level + 1) for k, v in d.items())\n    return level"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def depth(dictionary, depth=0):\n    \"\"\"\n    >>> depth({})\n    0\n    >>> depth({\"a\": 1})\n    1\n    >>> depth({\"a\": 1, \"b\": {\"c\": 3}})\n    2\n    >>> depth({\"a\": 1, \"b\": {\"c\": 3, \"d\": {\"e\": 5}}})\n    3\n    \"\"\"\n    if not dictionary:\n        return depth\n\n    depth += 1\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            depth = depth(value, depth)\n\n    return depth\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def dict_depth(d):\n    \"\"\"\n    This function takes a dictionary and returns the depth of the dictionary\n    >>> dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"x\": 5, \"y\": 6, \"z\": {\"p\": 7, \"q\": 8}}})\n    3\n    >>> dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"x\": 5, \"y\": 6}})\n    2\n    >>> dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"x\": 5, \"y\": 6, \"z\": {\"p\": 7, \"q\": 8, \"r\": {\"m\": 9}}}})\n    4\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(\n            dict_depth(v) for k, v in d.items()\n        ) if d else 0\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def depth(d):\n    if not isinstance(d, dict):\n        raise TypeError(\"Only accepts dictionaries.\")\n\n    max_depth = 0\n    stack = [(max_depth, d)]\n\n    while stack:\n        current_depth, current_dict = stack.pop()\n\n        if current_depth > max_depth:\n            max_depth = current_depth\n\n        for v in current_dict.values():\n            if isinstance(v, dict):\n                stack.append((current_depth + 1, v))\n\n    return max_depth\n\n\nprint(depth({1: 2, 3: {4: {5: 6}}}))\nprint(depth({1: 2, 3: {4: {5: 6, 7: {8: 9}}})))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def depth_of_dictionary(dictionary: dict) -> int:\n    \"\"\"\n    Find the depth of a dictionary.\n\n    :param dictionary: Dictionary.\n    :return: Depth of the dictionary.\n    \"\"\"\n\n    def _depth(dictionary: dict, level: int) -> int:\n        if not dictionary:\n            return level\n        if not isinstance(dictionary, dict):\n            return level\n        max_depth = level\n        for value in dictionary.values():\n            if isinstance(value, dict):\n                max_depth = max(max_depth, _depth(value, level + 1))\n        return max_depth\n\n    return _depth(dictionary, 0)\n\n\nif __name__ == \"__main__\":\n    print(depth_of_dictionary({}))\n    print(depth_of_dictionary({1: {}}))\n    print(depth_of_dictionary({1: {2: {3: {4: {5: {6: {7: {8: {9: {10: {11: {12: {13: {14: {15: {16: {17: {18: {19: {20: {21: {22: {23: {24: {25: {26: {27: {28: {29: {30: {31: {32: {33: {34: {35: {36: {37: {38: {39: {40: {41: {42: {43: {44: {45: {46: {47: {48: {49: {50: {51: {52: {53: {54: {55: {56: {57: {58: {59: {60: {61: {62: {63: {64: {65: {66: {67: {68: {69: {70: {71: {72: {73: {74: {75: {76: {77: {78: {"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import Any\n\n\ndef dict_depth(d: dict) -> int:\n    \"\"\"Find the depth of a dictionary.\n\n    Args:\n        d (dict): dictionary\n\n    Returns:\n        int: depth of the dictionary\n    \"\"\"\n\n    def _depth(d: dict, depth: int) -> int:\n        \"\"\"Find the depth of a dictionary.\n\n        Args:\n            d (dict): dictionary\n            depth (int): depth of the dictionary\n\n        Returns:\n            int: depth of the dictionary\n        \"\"\"\n        if not d:\n            return depth\n        depth += 1\n        for v in d.values():\n            if isinstance(v, dict):\n                depth = max(_depth(v, depth), depth)\n        return depth\n\n    return _depth(d, 0)\n\n\nif __name__ == \"__main__\":\n    d = {\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4}}}\n    assert dict_depth(d) == 3"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def dict_depth(dict_obj):\n    if not isinstance(dict_obj, dict):\n        raise ValueError(\"Object must be a dictionary.\")\n    depth = 0\n    for key in dict_obj:\n        if isinstance(dict_obj[key], dict):\n            depth = max(depth, dict_depth(dict_obj[key])+1)\n    return depth\n\nprint(dict_depth({1: {2: {3: {4: {5: {}}}}}}))\n\n\n\"\"\"\nWrite a function to find the depth of a dictionary.\n\nSample Output\n0\n1\n2\n2\n\n\"\"\""
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_depth(d):\n    if type(d) is not dict:\n        return 0\n    else:\n        depths = []\n        for v in d.values():\n            depths.append(find_depth(v))\n        if depths:\n            return 1 + max(depths)\n        else:\n            return 1\n\n\nif __name__ == '__main__':\n    d = {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': 'k'}}}}}}}}}}\n    print(find_depth(d))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(d[k]) for k in d)\n\n\ndef test_depth():\n    assert depth({}) == 0\n    assert depth({1: 100}) == 1\n    assert depth({1: 100, 2: 200}) == 1\n    assert depth({1: {100: 1000}, 2: 200}) == 2\n    assert depth({1: {100: 1000}, 2: 200, 3: 300}) == 2\n    assert depth({1: {100: 1000}, 2: {200: 2000, 201: 2001}, 3: 300}) == 2\n\n\nif __name__ == \"__main__\":\n    test_depth()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def dict_depth(d):\n    \"\"\"\n    Find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    if type(d) is not dict:\n        return depth\n    depth += 1\n    for key in d:\n        if type(d[key]) is dict:\n            depth = max(dict_depth(d[key]), depth)\n        elif type(d[key]) is list:\n            for i in d[key]:\n                if type(i) is dict:\n                    depth = max(dict_depth(i), depth)\n    return depth"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for k, v in d.items())\n    else:\n        return 0\n\n\ndef depth(d):\n    return max(depth(v) for k, v in d.items())"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from collections import deque\nfrom typing import TypeVar, Union\n\nT = TypeVar('T')\n\n\ndef depth_first(graph: dict[T, list[T]], start: T) -> int:\n    \"\"\"Return the depth of a graph starting from a given node.\n    \"\"\"\n    depth = 0\n    to_visit = deque([start])\n    visited = set()\n\n    while to_visit:\n        depth += 1\n        for _ in range(len(to_visit)):\n            node = to_visit.pop()\n            visited.add(node)\n            to_visit += graph[node]\n\n    return depth\n\n\ndef depth_first_recursive(graph: dict[T, list[T]], start: T) -> int:\n    \"\"\"Return the depth of a graph starting from a given node.\n    \"\"\"\n    depth = 0\n\n    def dfs(node: T) -> int:\n        nonlocal depth\n        depth += 1\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                dfs(neighbor)\n        return depth\n\n    visited = set()\n    dfs(start)\n\n    return depth\n\n\nif __name__ == '__main__':\n    assert depth_first({1: [2, 3], 2: [4, 5], 3: [6, 7], 4: [], 5: [], 6: [], 7: []}, 1) == 4\n    assert depth_first_recursive({1: [2, 3], 2: [4, 5], 3: [6, 7], 4: [], 5: [], 6: [], 7: []}, 1) == 4"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    else:\n        return 1 + max(map(depth, dictionary.values()))\n\n\nif __name__ == '__main__':\n    d = {1: {2: {3: {4: {}}}}}\n    print(depth(d))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def get_depth(dic):\n    max_depth = 0\n    for value in dic.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, get_depth(value) + 1)\n        else:\n            max_depth = max(max_depth, 1)\n    return max_depth\n\n\nif __name__ == \"__main__\":\n    d = {\n        1: {\n            2: {\n                3: {\n                    4: {\n                        5: {\n                            6: {\n                                7: {\n                                    8: {\n                                        9: {\n                                            10: {\n                                                11: {\n                                                    12: {\n                                                        13: {\n                                                            14: {\n                                                                15: {\n                                                                    16: 17\n                                                                    }}}}}}}}}}}}}}}}}\n\n    print(get_depth(d))"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    else:\n        return 1 + max(depth(value) for value in dictionary.values())"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "def dict_depth(d):\n    \"\"\"\n    >>> dict_depth({1: 2, 3: {4: 5}})\n    2\n    \"\"\"\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def depth(d):\n    if type(d) != dict:\n        return 0\n    else:\n        return 1 + max(depth(d[k]) for k in d)\n\n\ndef main():\n    assert depth({'a': 1, 'b': 2, 'c': 3}) == 0\n    assert depth({'a': 1, 'b': 2, 'c': {'d': 3}}) == 1\n    assert depth({'a': 1, 'b': 2, 'c': {'d': 3, 'e': {'f': 4}}}) == 2\n    assert depth({'a': 1, 'b': 2, 'c': {'d': 3, 'e': {'f': {'g': 4}}}}) == 3\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def depth(dic):\n    if not dic:\n        return 0\n    else:\n        return 1 + max(depth(dic[k]) for k in dic)"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def dict_depth(dictionary):\n    \"\"\"\n    Takes in a dictionary and returns the depth of the dictionary\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input is not a dictionary\")\n    depth = 1\n    if dictionary == {}:\n        return depth\n    for key in dictionary:\n        if isinstance(dictionary[key], dict):\n            depth = max(dict_depth(dictionary[key]) + 1, depth)\n    return depth"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "from typing import Optional\n\n\ndef find_depth(dict_: dict, depth: int = 0) -> int:\n    \"\"\"Return the depth of a dictionary.\n\n    :param dict_: Dictionary to find the depth of.\n    :param depth: Depth of the dictionary.\n    :return: The depth of the dictionary.\n    \"\"\"\n    if dict_:\n        depth += 1\n        for key, value in dict_.items():\n            if isinstance(value, dict):\n                depth = max(find_depth(value, depth), depth)\n    return depth\n\n\ndef main():\n    dict_ = {\n        \"key1\": \"val1\",\n        \"key2\": {\n            \"key3\": {\n                \"key4\": \"val4\",\n                \"key5\": \"val5\"\n            },\n            \"key6\": {\n                \"key7\": \"val7\",\n                \"key8\": \"val8\"\n            }\n        }\n    }\n    depth = find_depth(dict_)\n    print(depth)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for k, v in d.items())\n    else:\n        return 0\n\n\nd = {'a': {'b': {'c': 1}}}\nassert depth(d) == 3"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def depth(d, level=0):\n    if isinstance(d, dict):\n        level += 1\n        return max(depth(v, level) for k, v in d.items())\n    return level\n\n\nif __name__ == \"__main__\":\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": {\"e\": 1, \"f\": 2}}) == 3"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def dict_depth(d):\n    if not d:\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n\n\nif __name__ == '__main__':\n    d = {1: {2: {3: {}}}}\n    print(dict_depth(d))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for v in d.values())\n    return 0\n\n\nif __name__ == '__main__':\n    assert depth({}) == 0\n    assert depth({1: {2: {3: {4: {5: 5}}}}}) == 5"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    else:\n        return 1 + max(depth(value) for value in dictionary.values())\n\nprint(depth({}))\nprint(depth({1:2, 3:4}))\nprint(depth({1:{2:3, 4:5}, 3:4}))\nprint(depth({1:{2:{3:{4:{5:{6:{7:{8:{9:10}}}}}}}})))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if isinstance(dictionary, dict):\n        return 1 + max(depth(val) for val in dictionary.values())\n    else:\n        return 0\n\n\nprint(depth({\"a\": {\"b\": {\"c\": {\"d\": 1}}}}))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    depth = 0\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + depth(value))\n        else:\n            depth = max(depth, 1)\n    return depth\n\n\nif __name__ == '__main__':\n    d = {'a': {'b': {'c': {'d': {}}}}}\n    print(depth(d))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def depth_of_dict(d):\n    \"\"\"\n    >>> depth_of_dict({})\n    0\n    >>> depth_of_dict({'a': 1})\n    1\n    >>> depth_of_dict({'a': {'b': 1}})\n    2\n    >>> depth_of_dict({'a': {'b': {'c': 1}}})\n    3\n    \"\"\"\n    if not d:\n        return 0\n    return 1 + max(depth_of_dict(v) for v in d.values() if isinstance(v, dict))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def depth(dict_):\n    if isinstance(dict_, dict):\n        return 1 + max(depth(val) for val in dict_.values())\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    d1 = {'a': 1, 'b': 2, 'c': 3}\n    d2 = {'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': 3}}\n    d3 = {'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': {'a': 1, 'b': 2, 'c': 3}}}\n    d4 = {'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': {'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': 3}}}}\n    d5 = {'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': 3}}}}\n    print(depth(d1))\n    print(depth(d2))\n    print(depth(d3))\n    print(depth(d4))\n    print(depth(d5))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def find_depth(d):\n    if not d:\n        return 0\n    return max(find_depth(v) for v in d.values()) + 1\n\n\nif __name__ == '__main__':\n    assert find_depth({'a': {'b': {'c': {'d': {}}}}}) == 4, \"Dict\"\n    assert find_depth({'a': {'b': {'c': {'d': {}}}}, 'e': {'f': {}}}) == 4, \"Dict\"\n    assert find_depth({}) == 0, \"Empty dict\"\n    assert find_depth({'a': {'b': {'c': {'d': {}}}}, 'e': {'f': {}}, 'g': {}}) == 1, \"Dict\"\n    assert find_depth({'a': {'b': {'c': {'d': {}}}}, 'e': {'f': {}}, 'g': {'h': {}}}) == 2, \"Dict\""
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if dictionary == {}:\n        return 0\n    else:\n        depths = [depth(dictionary[key]) for key in dictionary]\n        return 1 + max(depths)\n\n\nprint(depth({'a': {'b': {'c': {}}}}))\nprint(depth({'a': {'b': {'c': {'d': {}}}}}))\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {}}}}}}}))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def depth_of_dict(d, current_depth=0):\n    if not isinstance(d, dict):\n        return current_depth\n    current_depth += 1\n    return max(depth_of_dict(v, current_depth) for v in d.values())\n\n\nif __name__ == '__main__':\n    print(depth_of_dict({1: {2: {3: {4: {5: {}}}}}}))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    \"\"\"\n    >>> depth({1:2, 2:3, 3:4})\n    1\n    >>> depth({1:{2:3}, 2:3, 3:4})\n    2\n    >>> depth({1:{2:{3:4}}, 2:3, 3:4})\n    3\n    \"\"\"\n    if not dictionary:\n        return 0\n    return 1 + max(depth(value) for value in dictionary.values())\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def depth(d, depth=0):\n    \"\"\"Find the depth of a dictionary.\"\"\"\n    if type(d) is dict:\n        depth += 1\n        for v in d.values():\n            depth = max(depth, depth(v, depth))\n    return depth\n\n\ndef test_depth():\n    \"\"\"Test for depth.\"\"\"\n    assert depth({}) == 1\n    assert depth({'a': 1}) == 2\n    assert depth({'a': 1, 'b': 2}) == 2\n    assert depth({'a': {'b': 2}, 'c': 3}) == 3\n    assert depth({'a': {'b': 2}, 'c': {'d': 3}}) == 3\n    assert depth({'a': {'b': 2}, 'c': {'d': {'e': 3}}}) == 4"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(depth(v) for k, v in d.items())\n\n\nif __name__ == '__main__':\n    d = {\n        'a': {\n            'b': {\n                'c': {\n                    'd': {\n                        'e': {\n                            'f': {\n                                'g': {\n                                    'h': {\n                                        'i': {\n                                            'j': {\n                                                'k': {\n                                                    'l': {\n                                                        'm': {\n                                                            'n': {\n                                                                'o': {\n                                                                    'p': {\n                                                                        'q': {\n                                                                            'r': {\n                                                                                's': {\n                                                                                    't': {\n                                                                                        'u': {\n                                                                                            'v': {\n                                                                                                'w': {\n                                                                                                    'x': {\n                                                                                                        'y': {\n                                                                                                            'z': {}\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    print(depth(d))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def depth_of_dict(d):\n    \"\"\"\n    Finds the depth of a dictionary\n    :param d: Dictionary\n    :return: Depth\n    \"\"\"\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth_of_dict(v)\n                       for k, v in d.items()\n                       if isinstance(v, dict))\n\n\nif __name__ == '__main__':\n    print(depth_of_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': {'f': 6, 'g': 7, 'h': 8}}))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def find_depth(obj, depth=0):\n    if isinstance(obj, dict):\n        return max(find_depth(value, depth + 1) for value in obj.values())\n    elif isinstance(obj, list):\n        return max(find_depth(value, depth + 1) for value in obj)\n    else:\n        return depth\n\n\nif __name__ == \"__main__\":\n    obj = {\n        \"key1\": {\n            \"key1\": \"value1\",\n            \"key2\": {\n                \"key1\": \"value1\",\n                \"key2\": \"value2\"\n            },\n            \"key3\": \"value3\"\n        },\n        \"key2\": {\n            \"key1\": \"value1\",\n            \"key2\": [\n                {\n                    \"key1\": {\n                        \"key1\": \"value1\",\n                        \"key2\": \"value2\",\n                        \"key3\": \"value3\"\n                    }\n                },\n                {\n                    \"key1\": {\n                        \"key1\": \"value1\",\n                        \"key2\": \"value2\",\n                        \"key3\": \"value3\"\n                    }\n                }\n            ]\n        }\n    }\n    print(find_depth(obj))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def depth(dic):\n    if not isinstance(dic, dict):\n        return 0\n    return 1 + max(depth(val) for val in dic.values())"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from typing import Union\n\n\ndef dict_depth(data: Union[dict, list], depth: int = 0) -> int:\n    \"\"\"Returns the depth of a dictionary.\n\n    Args:\n        data: the data to find the depth of\n        depth: the current depth\n    \"\"\"\n    if isinstance(data, list):\n        return max(dict_depth(item, depth + 1) for item in data)\n    elif isinstance(data, dict):\n        return max(dict_depth(v, depth + 1) for k, v in data.items())\n    return depth\n\n\nif __name__ == \"__main__\":\n    test_data = {\n        \"key\": [\n            {\n                \"key\": [\n                    {\n                        \"key\": [\n                            {\n                                \"key\": [\n                                    {\n                                        \"key\": [\n                                            {\n                                                \"key\": [\n                                                    {\n                                                        \"key\": [\n                                                            {\n                                                                \"key\": [\n                                                                    {\n                                                                        \"key\": [\n                                                                            {\n                                                                                \"key\": [\n                                                                                    {\n                                                                                        \"key\": [\n                                                                                            {\n                                                                                                \"key\": [\n                                                                                                    {\n                                                                                                        \"key\": \"value\"\n                                                                                                    }\n                                                                                                ]\n                                                                                            }\n                                                                                        ]\n                                                                                    }\n                                                                                ]\n                                                                            }\n                                                                        ]\n                                                                    }\n                                                                ]\n                                                            }\n                                                        ]\n                                                    }\n                                                ]\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n\n    print(dict_depth(test_data))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def depth(d):\n    if type(d) is not dict:\n        return 0\n    if not d:\n        return 1\n    return 1 + max(depth(x) for x in d.values())\n\n\nprint(depth({}))\nprint(depth({1: {}}))\nprint(depth({1: {2: {3: {4: {5: {}}}}}}))\nprint(depth({1: {2: {3: {4: {5: {6: {7: {8: {9: {}}}}}}}}}}))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def depth(dictionary, level = 0):\n    \"\"\"\n    Return the depth of a dictionary.\n    \"\"\"\n    if type(dictionary) is dict:\n        return max(depth(value, level + 1) for value in dictionary.values())\n    return level\n\ndef main():\n    \"\"\"\n    Print the depth of a dictionary.\n    \"\"\"\n    print(\"Depth of dictionary:\", depth({\"a\": {\"b\": {\"c\": {}}}}))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def dict_depth(d):\n    depth = 0\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(dict_depth(v), depth)\n        elif isinstance(v, list):\n            for e in v:\n                if isinstance(e, dict):\n                    depth = max(dict_depth(e), depth)\n    return depth + 1\n\n\ndef dict_depth2(d):\n    def _dict_depth(d):\n        if not isinstance(d, dict):\n            return 0\n        return 1 + max(_dict_depth(v) for v in d.values())\n\n    return _dict_depth(d)\n\n\nif __name__ == \"__main__\":\n    print(dict_depth({\"a\": 1, \"b\": 2, \"c\": 3}))\n    print(dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": 4}}))\n    print(dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4, \"g\": 5}}}))\n    print(dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4, \"g\": {\"h\": 5}}}}))\n    print(dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4, \"g\": {\"h\": {\"i\": 5}}}}}))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(depth(v) for k, v in d.items())\n\n\nif __name__ == '__main__':\n    d = {'a': {'b': 3, 'c': {'d': {'e': 4, 'f': 5}}}}\n    print(depth(d))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def depth(d, level=0):\n    if not d:\n        return level\n\n    if not isinstance(d, dict):\n        return level\n\n    level += 1\n    return max(depth(v, level) for k, v in d.items())\n\n\nif __name__ == '__main__':\n    d = {\n        \"a\": {\n            \"b\": {\n                \"c\": {\n                    \"d\": {}\n                }\n            }\n        }\n    }\n    print(depth(d))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def depth(d, level=0):\n    if not isinstance(d, dict):\n        return level\n    else:\n        level += 1\n        for v in d.values():\n            return depth(v, level)\n\n\nif __name__ == '__main__':\n    d = {\n        'a': {\n            'b': {\n                'c': {\n                    'd': {\n                        'e': 5\n                    },\n                    'f': 6\n                },\n                'g': 7\n            },\n            'h': 8\n        },\n        'i': 9\n    }\n    print(depth(d))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef depth_of_dictionary(dictionary):\n    \"\"\"\n    Return the depth of a dictionary\n    \"\"\"\n    copy = deepcopy(dictionary)\n    if not isinstance(dictionary, dict):\n        return 0\n    if not dictionary:\n        return 0\n    if not copy:\n        return 0\n    if dictionary.keys():\n        for key in copy.keys():\n            if isinstance(copy[key], dict):\n                return 1 + depth_of_dictionary(copy[key])\n            return 1\n    return 0"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for k, v in d.items())\n    else:\n        return 0\n\n\ndef test_depth():\n    assert depth({}) == 0\n    assert depth({'a': {}}) == 1\n    assert depth({'a': {'b': {}}}) == 2\n    assert depth({'a': {'b': {'c': {}}}}) == 3\n    assert depth({'a': {'b': {'c': {'d': {}}}}}) == 4\n    assert depth({'a': {'b': {'c': {'d': {'e': {}}}}}}) == 5\n    assert depth({'a': {'b': {'c': {'d': {'e': {'f': {}}}}}}}) == 6\n\n    assert depth([]) == 0\n    assert depth([[[]]]) == 2\n    assert depth([[[[]]]]) == 3\n    assert depth([[[[[]]]]]) == 4\n    assert depth([[[[[[]]]]]]) == 5\n    assert depth([[[[[[[]]]]]]]) == 6\n\n\nif __name__ == '__main__':\n    test_depth()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_depth(dictionary):\n    # Your code here\n    if isinstance(dictionary, dict):\n        if dictionary == {}:\n            return 0\n        else:\n            return 1 + max(find_depth(val) for val in dictionary.values())\n    else:\n        return 0\n\n\ndef find_depth_v2(dictionary):\n    # Your code here\n    if dictionary == {}:\n        return 0\n    else:\n        return 1 + max(find_depth(val) for val in dictionary.values())"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for v in d.values())\n    elif isinstance(d, list):\n        return 1 + max(depth(v) for v in d)\n    else:\n        return 0\n\n\ndef test_depth():\n    assert depth({}) == 0\n    assert depth({\"a\": 1}) == 1\n    assert depth({\"a\": {\"b\": 1}}) == 2\n    assert depth({\"a\": {\"b\": {\"c\": 1}}}) == 3\n    assert depth({\"a\": {\"b\": {\"c\": {\"d\": 1}}}}) == 4\n    assert depth([1, 2, [3, 4]]) == 3"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def dict_depth(dictionary):\n    if not isinstance(dictionary, dict):\n        return 0\n    if not dictionary:\n        return 1\n\n    max_depth = 0\n\n    for key in dictionary:\n        max_depth = max(max_depth, dict_depth(dictionary[key]))\n\n    return max_depth + 1"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def depth_of_dict(d):\n    if isinstance(d, dict):\n        return 1 + max(depth_of_dict(v) for k, v in d.items())\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    d = {'a': {'b': {'c': {'d': 4}}}}\n    print(depth_of_dict(d))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def depth(d, level=0):\n    if isinstance(d, dict):\n        return max(depth(v, level + 1) for k, v in d.items())\n    else:\n        return level\n\n\ndef test_depth():\n    assert depth({}) == 0\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 1\n    assert depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3}}) == 2\n    assert depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4}}}) == 3\n\n\nif __name__ == \"__main__\":\n    test_depth()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def depth(dictionary, level=0):\n    \"\"\"\n    >>> depth({'a': {'b': {'c': 1}}})\n    3\n    >>> depth({'a': {'b': {'c': 1}}}, level=2)\n    2\n    \"\"\"\n    if not dictionary:\n        return level\n    level += 1\n    return max(depth(subdict, level) for subdict in dictionary.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def depth(d):\n    if type(d) != dict:\n        return 0\n    else:\n        return 1 + max([depth(d[key]) for key in d])\n\n\nassert depth({}) == 0\nassert depth({'a': {'b': {'c': {'d': {'e': {'f': {}}}}}}}) == 6"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max([dict_depth(v) for v in d.values()])\n\n\ndef test_dict_depth():\n    assert dict_depth({}) == 0\n    assert dict_depth({'a': 1}) == 1\n    assert dict_depth({'a': {'b': 2}}) == 2\n    assert dict_depth({'a': {'b': {'c': 3}}}) == 3\n    assert dict_depth({'a': {'b': {'c': {'d': 4}}}}) == 4\n    assert dict_depth({'a': {'b': {'c': {'d': {'e': 5}}}}}) == 5\n\n\nif __name__ == '__main__':\n    test_dict_depth()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from collections import deque\n\n\ndef depth(d):\n    depths = []\n    queue = deque()\n    queue.append((d, 1))\n    while queue:\n        d, depth = queue.popleft()\n        if type(d) is dict:\n            depths.append(depth)\n            for v in d.values():\n                queue.append((v, depth + 1))\n        elif type(d) is list:\n            for v in d:\n                queue.append((v, depth + 1))\n    return max(depths)\n\n\nif __name__ == '__main__':\n    d = {'a': {'b': {'c': 1}}}\n    print(depth(d))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def find_depth(d, level=0):\n    \"\"\"Find the depth of a dictionary.\"\"\"\n    depth = level\n    for key, val in d.items():\n        if isinstance(val, dict):\n            depth = max(depth, find_depth(val, level + 1))\n    return depth\n\n\nif __name__ == '__main__':\n    assert find_depth({1: 2, 3: 4}) == 0\n    assert find_depth({1: 2, 3: {4: 5}}) == 1\n    assert find_depth({1: 2, 3: {4: 5, 6: 7}}) == 2\n    assert find_depth({1: 2, 3: {4: 5, 6: {7: 8}}}) == 3\n    assert find_depth({1: 2, 3: {4: 5, 6: {7: {8: 9}}}}) == 4\n    assert find_depth({1: 2, 3: {4: 5, 6: {7: {8: {9: 10}}}}}) == 5\n    assert find_depth({1: 2, 3: {4: 5, 6: {7: {8: {9: {10: 11}}}}}}) == 6"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def depth_dict(dictionary):\n    \"\"\"\n    >>> depth_dict({1:1})\n    1\n    >>> depth_dict({1:2})\n    1\n    >>> depth_dict({1: {2: 2}})\n    2\n    >>> depth_dict({1: {2: {3: 3}}})\n    3\n    >>> depth_dict({1: {2: {3: {4: 4}}}})\n    4\n    \"\"\"\n    if type(dictionary) is not dict:\n        return 0\n    else:\n        return 1 + max(depth_dict(value) for value in dictionary.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def depth(d):\n    if type(d) != dict:\n        return 0\n    else:\n        return 1 + max(depth(d[k]) for k in d)\n\n\ndef test_depth():\n    assert depth({}) == 0\n    assert depth({'a': 1}) == 1\n    assert depth({'a': {'b': 1}}) == 2\n    assert depth({'a': {'b': {'c': 1}}}) == 3\n\n\nif __name__ == '__main__':\n    test_depth()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def find_depth(d, depth=0):\n    if not d:\n        return depth\n    depth += 1\n    if isinstance(d, dict):\n        return max(find_depth(v, depth) for v in d.values())\n\n\nif __name__ == '__main__':\n    assert find_depth({}) == 0\n    assert find_depth({'a': {}}) == 1\n    assert find_depth({'a': {'b': {}}}) == 2\n    assert find_depth({'a': {'b': {'c': {}}}}) == 3\n    assert find_depth({'a': {'b': {'c': {'d': {}}}}}) == 4"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def depth(d):\n    if type(d) is not dict:\n        return 0\n    if not d:\n        return 1\n    else:\n        return max(depth(d[k]) for k in d) + 1\n\n\nprint(depth({}))\nprint(depth({1: 2, 2: 3, 3: {4: 5, 6: 7}}))\nprint(depth({1: {2: {3: {4: {5: {6: {7: {8: 9}}}}}}}}))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def depth(dictionary, depth=0):\n    if dictionary == {}:\n        return depth\n    else:\n        for item in dictionary.values():\n            if type(item) is dict:\n                depth += 1\n                depth = depth + depth(item, depth)\n            else:\n                depth += 1\n    return depth"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def depth(dic):\n    if not isinstance(dic, dict) or dic == {}:\n        return 0\n    else:\n        return 1 + max(depth(v) for k, v in dic.items())\n\n\nprint(depth({}))\nprint(depth({1: 2, 3: {4: 5, 6: {7: 8}}}))\nprint(depth({1: 2, 3: {4: 5, 6: {7: 8, 9: {10: 11}}}}))\nprint(depth({1: 2, 3: {4: 5, 6: {7: 8, 9: {10: 11, 12: {13: 14}}}}}))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n\n    return 1 + max(depth(v) for v in dictionary.values() if type(v) == type(dictionary))\n\n\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)\nprint(depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {}}}}}}}}}}) == 9)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    \"\"\"\n    >>> depth({})\n    0\n    >>> depth({1:2, 3:4})\n    1\n    >>> depth({1:{2:3}, 4:{5:{6:7}}})\n    3\n    \"\"\"\n    if not dictionary:\n        return 0\n    else:\n        return 1 + max(depth(value) for value in dictionary.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def depth_of_dictionary(dict_arg):\n    \"\"\"\n    Find the depth of a dictionary.\n\n    Args:\n        dict_arg (dict): Dictionary.\n\n    Returns:\n        int: Depth of the dictionary.\n    \"\"\"\n\n    if not isinstance(dict_arg, dict):\n        raise TypeError(\"Argument must be a dictionary\")\n\n    def _depth_of_dictionary(dict_arg, depth=0):\n        for item in dict_arg.values():\n            if isinstance(item, dict):\n                depth = max(depth, 1 + _depth_of_dictionary(item))\n        return depth\n\n    return _depth_of_dictionary(dict_arg)\n\n\nif __name__ == '__main__':\n\n    # Test 1\n    print('Test 1')\n    dict_arg = {'a': {'b': {'c': 1}}}\n    expected = 3\n    print(depth_of_dictionary(dict_arg))\n    print(expected == depth_of_dictionary(dict_arg))\n\n    # Test 2\n    print('Test 2')\n    dict_arg = {'a': {'b': {'c': 1, 'd': 2}}}\n    expected = 3\n    print(depth_of_dictionary(dict_arg))\n    print(expected == depth_of_dictionary(dict_arg))\n\n    # Test 3\n    print('Test 3')\n    dict_arg = {'a': {'b': {'c': {'d': 1}}}}\n    expected = 4\n    print(depth_of_dictionary(dict_arg))\n    print(expected == depth_of_dictionary(dict_arg))\n\n    # Test 4\n    print('Test 4')\n    dict_arg = {'a': {'b': {'c': {'d': 1, 'e': 2}}}}\n    expected = 4\n    print(depth_of_dictionary(dict_arg))\n    print(expected == depth_of_dictionary(dict_arg))\n\n    # Test 5\n    print('Test 5')\n    dict_arg = {'a': {'b': {'c': {'d': {'e': 1}}}}}"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    return 1 + max(depth(value) for value in dictionary.values())"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    else:\n        return 1 + max(depth(value) for value in dictionary.values())"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    if isinstance(d, dict):\n        return max(depth(v) for k, v in d.items()) + 1\n    return 0\n\n\nprint(depth({}))\nprint(depth({1: {}}))\nprint(depth({1: {2: {3: {4: {5: {6: {7: {}}}}}}}}))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def find_depth(dictionary):\n    if not dictionary:\n        return 0\n    return 1 + max(find_depth(v) if isinstance(v, dict) else 0 for v in dictionary.values())\n\n\nif __name__ == '__main__':\n    assert find_depth({}) == 0\n    assert find_depth({1: 2}) == 1\n    assert find_depth({1: 2, 3: 4}) == 1\n    assert find_depth({1: 2, 3: {4: 5}}) == 2\n    assert find_depth({1: 2, 3: {4: 5, 6: {7: 8}}}) == 3\n    assert find_depth({1: 2, 3: {4: 5, 6: {7: 8, 9: {10: 11}}}}) == 4\n    assert find_depth({1: 2, 3: {4: 5, 6: {7: 8, 9: {10: 11, 12: 13}}}}) == 4"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for k, v in d.items())\n    else:\n        return 0\n\n\ndef test_depth():\n    assert depth({}) == 0\n    assert depth({'a': 1}) == 1\n    assert depth({'a': {'b': 2}}) == 2\n    assert depth({'a': {'b': {'c': 3}}}) == 3"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def depth(d):\n    if d == {}:\n        return 0\n    else:\n        return 1 + depth(d.values()[0])\n\n\nassert depth({}) == 0\nassert depth({1: {}}) == 2\nassert depth({1: {2: {3: {}}}}) == 4"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def depth_of_dictionary(dictionary):\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Only dictionaries may be passed to depth_of_dictionary\")\n    return _depth_of_dictionary(dictionary, 0)\n\n\ndef _depth_of_dictionary(dictionary, current_depth):\n    if dictionary == {}:\n        return current_depth\n    return max(_depth_of_dictionary(value, current_depth + 1) for value in dictionary.values())\n\n\nif __name__ == '__main__':\n    print(depth_of_dictionary({}))\n    print(depth_of_dictionary({1: {1: {1: 1}}}))\n    print(depth_of_dictionary({1: {1: {1: {1: {1: {1: 1}}}}})))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def depth(d, level=0):\n    \"\"\"\n    >>> depth({'a': 1, 'b': 2, 'c': {'a': 1, 'b': 2}})\n    2\n    >>> depth({'a': 1, 'b': 2, 'c': {'a': 1, 'b': 2, 'c': {'a': 1, 'b': 2}}})\n    3\n    \"\"\"\n    if not d:\n        return level\n    max_depth = level\n    for k in d:\n        if isinstance(d[k], dict):\n            max_depth = max(max_depth, depth(d[k], level + 1))\n    return max_depth\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def depth(d, level=0):\n    if isinstance(d, dict):\n        level += 1\n        for v in d.values():\n            level = max(depth(v, level), level)\n    return level\n\n\nif __name__ == '__main__':\n    assert depth({}) == 0\n    assert depth({1: {2: {3: {}}}}) == 4\n    assert depth({1: {2: {3: {4: {5: {}}}}}}) == 6"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def dict_depth(d, depth=0):\n    if type(d) != dict:\n        return depth\n    else:\n        if len(d) == 0:\n            return depth\n        else:\n            return max(dict_depth(v, depth+1) for v in d.values())\n\n\nif __name__ == '__main__':\n    d = {'a': {'b': {'c': {}}}}\n    print(dict_depth(d))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(v) for v in d.values() if isinstance(v, dict))\n\n\nif __name__ == '__main__':\n    print(depth({'a': {'b': {'c': {'d': {'e': {'f': 'g'}}}}}}))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n\n    return 1 + max(depth(value) for value in dictionary.values())"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def depth(dict):\n    if type(dict) != dict:\n        raise TypeError(\"The input is not a dictionary\")\n    if len(dict) == 0:\n        return 0\n    else:\n        return 1 + max(depth(value) for value in dict.values())"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        if not d:\n            return 1\n        else:\n            return 1 + max(depth(v) for v in d.values())\n\nprint(depth({}))\nprint(depth({1: 2, 3: {4: {5: 6}}}))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def depth_dict(d):\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max(depth_dict(v) for v in d.values())\n\n\ndef test_depth_dict():\n    assert depth_dict({}) == 1\n    assert depth_dict({'a': 1}) == 2\n    assert depth_dict({'a': {'b': 2}}) == 3\n    assert depth_dict({'a': {'b': {'c': 3}}}) == 4\n\n\nif __name__ == '__main__':\n    test_depth_dict()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return max([dict_depth(v) for v in d.values()]) + 1\n\ndef test_dict_depth():\n    assert dict_depth({}) == 1\n    assert dict_depth({1: 1}) == 2\n    assert dict_depth({1: {1: 1}}) == 3\n    assert dict_depth({1: {1: {1: {1: 1}}}}) == 4\n\nif __name__ == '__main__':\n    test_dict_depth()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import Dict, List\n\n\ndef dict_depth(dictionary: Dict) -> int:\n    \"\"\"Returns the depth of the dictionary.\"\"\"\n    def _dict_depth(dictionary: Dict, depth: int) -> int:\n        if not dictionary:\n            return depth\n        return max(\n            [_dict_depth(value, depth + 1) for value in dictionary.values()],\n            default=depth,\n        )\n\n    return _dict_depth(dictionary, 1)\n\n\nif __name__ == \"__main__\":\n    assert dict_depth({}) == 1\n    assert dict_depth({\"a\": 1, \"b\": 2}) == 1\n    assert dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3}}) == 2\n    assert dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4}}}) == 3\n    assert dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4, \"g\": {\"h\": 5}}}}) == 4\n    assert dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4, \"g\": {\"h\": 5, \"i\": {\"j\": 6}}}}}) == 5\n    assert dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4, \"g\": {\"h\": 5, \"i\": {\"j\": 6, \"k\": {\"l\": 7}}}}}}) == 6\n    assert dict_depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": {\"f\": 4, \"g\": {\"h\": 5, \"i\": {\"j\": 6, \"k\": {\"l\": 7, \"m\": {\"n\": 8}}}}}}}) == 7"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import Dict, Any, List\n\n\ndef depth_dict(d: Dict[Any, Any]) -> int:\n    \"\"\"Find depth of a dictionary.\n\n    Args:\n        d (Dict[Any, Any]): dictionary\n\n    Examples:\n        >>> assert depth_dict({\"a\": {\"b\": {\"c\": 1}}}) == 3\n        >>> assert depth_dict({\"a\": {\"b\": {\"c\": {\"d\": 1}}}}) == 4\n        >>> assert depth_dict({\"a\": 1, \"b\": 2}) == 1\n    \"\"\"\n    max_depth: int = 0\n    stack: List[Dict[Any, Any]] = [d]\n    while stack:\n        max_depth += 1\n        current_level: List[Dict[Any, Any]] = stack.pop()\n        for item in current_level:\n            if isinstance(item, dict):\n                stack.append(item)\n    return max_depth\n\n\nif __name__ == \"__main__\":\n    print(depth_dict({\"a\": {\"b\": {\"c\": 1}}}))\n    print(depth_dict({\"a\": {\"b\": {\"c\": {\"d\": 1}}}}))\n    print(depth_dict({\"a\": 1, \"b\": 2}))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import Any, List\n\n\ndef depth_of_dict(data: Any) -> int:\n    \"\"\"Return the depth of a dictionary.\n\n    Args:\n        data (Any): the dictionary\n\n    Returns:\n        int: the depth\n    \"\"\"\n    if not isinstance(data, dict):\n        return 0\n\n    max_depth: int = 0\n    stack: List[Any] = [data]\n\n    while stack:\n        obj = stack.pop()\n\n        if isinstance(obj, dict):\n            stack.extend(obj.values())\n        elif isinstance(obj, list):\n            stack.extend(obj)\n\n        max_depth = max(max_depth, len(stack))\n\n    return max_depth\n\n\nif __name__ == \"__main__\":\n    d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    d2 = {\"a\": 1, \"b\": 2, \"c\": d1}\n    d3 = {\"a\": 1, \"b\": 2, \"c\": d2}\n\n    assert depth_of_dict(d1) == 1\n    assert depth_of_dict(d2) == 2\n    assert depth_of_dict(d3) == 3"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def depth(d):\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(v) for k, v in d.items())\n\n\nif __name__ == '__main__':\n    print(depth({1: {2: {3: {4: {5: {}}}}}}))\n    print(depth({1: {2: {3: {4: {5: {6: {}}}}}}}))\n    print(depth({1: {2: {3: {4: {5: {6: {7: {8: {9: {}}}}}}}}}}))\n    print(depth({1: {2: {3: {4: {5: {6: {7: {8: {9: {10: {11: {}}}}}}}}}}}}))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from typing import Dict, Any\n\n\ndef depth_of_dict(d: Dict[Any, Any]) -> int:\n    \"\"\"Find the depth of a dictionary.\n\n    Args:\n        d (Dict[Any, Any]): The dictionary to find the depth of.\n\n    Examples:\n        >>> assert depth_of_dict(None) == 0\n        >>> assert depth_of_dict({}) == 0\n        >>> assert depth_of_dict(1) == 0\n        >>> assert depth_of_dict([]) == 0\n        >>> assert depth_of_dict([1]) == 1\n        >>> assert depth_of_dict({1: 2}) == 1\n        >>> assert depth_of_dict({1: [2]}) == 2\n        >>> assert depth_of_dict({1: {2: 3}}) == 2\n    \"\"\"\n    if d is None:\n        return 0\n    if isinstance(d, dict):\n        return 1 + max(map(depth_of_dict, d.values()))\n    if isinstance(d, list):\n        return 1 + max(map(depth_of_dict, d))\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def depth(d):\n    max_depth = 0\n    if not isinstance(d, dict):\n        return 0\n    for v in d.values():\n        max_depth = max(max_depth, depth(v))\n    return max_depth + 1\n\n\nprint(depth({\"a\": {\"b\": {\"c\": {\"d\": {}}}}}))\nprint(depth({\"a\": {\"b\": {\"c\": {\"d\": {}}}}}), 1)\nprint(depth({\"a\": {\"b\": {\"c\": {\"d\": {}}}}}), 2)\nprint(depth({\"a\": {\"b\": {\"c\": {\"d\": {}}}}}), 3)\nprint(depth({\"a\": {\"b\": {\"c\": {\"d\": {}}}}}), 4)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef depth_of_dict(dictionary: dict) -> int:\n    \"\"\"Returns the depth of a dictionary.\n\n    Args:\n        dictionary (dict): Dictionary to check the depth.\n\n    Returns:\n        int: Depth of the dictionary.\n    \"\"\"\n    if not dictionary:\n        return 0\n\n    return 1 + max(depth_of_dict(value) for value in dictionary.values())\n\n\nif __name__ == \"__main__\":\n    assert (\n        depth_of_dict({1: {2: {3: {4: {5: {6: {}}}}}}}) == 7\n    ), \"Incorrect depth\"\n    assert (\n        depth_of_dict({1: {2: {3: {4: {5: {6: {}}}}}}, 2: {3: {4: {5: {6: {}}}}}}) == 7\n    ), \"Incorrect depth\"\n    assert (\n        depth_of_dict({1: {2: {3: {4: {5: {6: {}}}}}}, 2: {3: {4: {5: {6: {}}}}}}) == 7\n    ), \"Incorrect depth\"\n    assert depth_of_dict({1: 2, 2: 3}) == 2, \"Incorrect depth\"\n    assert depth_of_dict({1: 2, 2: {3: 4, 4: 5, 5: {6: 7}}}) == 4, \"Incorrect depth\"\n    assert depth_of_dict({1: {2: {3: {4: {5: {6: {7: 8}}}}}}}) == 4, \"Incorrect depth\""
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    else:\n        return max(depth(v) for k, v in d.items()) + 1\n\n\nd = {'a': {'b': {'c': {}}}}\nprint(depth(d))\n\n\ndef depth_2(d):\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(v) for k, v in d.items())\n\n\nprint(depth_2(d))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import Dict\n\n\ndef depth_of_dict(dict_: Dict) -> int:\n    \"\"\"Finds the depth of a dictionary.\n\n    Args:\n        dict_: The dictionary to find the depth of.\n\n    Returns:\n        The depth of the dictionary.\n    \"\"\"\n    if not isinstance(dict_, dict):\n        return 0\n    if not dict_:\n        return 0\n    if not dict_.keys():\n        return 0\n\n    return 1 + max(depth_of_dict(v) for v in dict_.values())\n\n\nif __name__ == \"__main__\":\n    assert depth_of_dict({}) == 0\n    assert depth_of_dict({\"a\": {}}) == 1\n    assert depth_of_dict({\"a\": {\"b\": {}}}) == 2\n    assert depth_of_dict({\"a\": {\"b\": {\"c\": {}}}}) == 3\n    assert depth_of_dict({\"a\": {\"b\": {\"c\": {\"d\": {}}}}}) == 4\n    assert depth_of_dict({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {}}}}}}) == 5\n    assert depth_of_dict({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {\"f\": {}}}}}}}) == 6\n\n    assert depth_of_dict({\"a\": [{\"b\": {\"c\": {\"d\": {\"e\": {\"f\": {}}}}}}]}) == 6\n    assert depth_of_dict({\"a\": [{\"b\": [{\"c\": [{\"d\": [{\"e\": [{\"f\": {}}]}]}]}]}]}) == 6\n    assert depth_of_dict({\"a\": [{\"b\": [{\"c\": [{\"d\": [{\"e\": [{\"f\": {}}]}]}]}]}]}) == 6\n\n    assert depth_of_dict({\"a\": [{\"b\": [{\"c\": [{\"d\": [{\"e\": [{\"f\": {}}]}]}]}]}]}) == 6"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def depth_of_dict(dictionary):\n    if not isinstance(dictionary, dict):\n        return 0\n    if not dictionary:\n        return 1\n    return 1 + max(depth_of_dict(value)\n                   for value in dictionary.values())\n\n\ndef test_depth_of_dict():\n    assert depth_of_dict({}) == 1\n    assert depth_of_dict({'a': {'b': {'c': 1}}}) == 4\n    assert depth_of_dict({'a': {'b': {'c': {'d': {'e': 1}}}}}) == 6\n    assert depth_of_dict({'a': 1}) == 2"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import Any\n\n\ndef depth(d: dict, current_depth: int = 0) -> int:\n    \"\"\"Get the depth of a dictionary.\n\n    Args:\n        d: the dictionary to find the depth of.\n        current_depth: the current depth of the dictionary.\n\n    Returns:\n        The depth of the dictionary.\n    \"\"\"\n    max_depth: int = current_depth\n\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, depth(value, current_depth + 1))\n        elif isinstance(value, list):\n            max_depth = max(max_depth, depth(value, current_depth + 1))\n\n    return max_depth\n\n\nif __name__ == \"__main__\":\n    print(depth({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": 4, \"f\": {\"g\": 5}}}))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from collections import deque\n\n\ndef depth(d):\n    \"\"\"Returns the depth of a dictionary\"\"\"\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 0\n\n    max_depth = 0\n    queue = deque()\n    queue.append(d)\n    while queue:\n        current = queue.popleft()\n        for key in current:\n            if isinstance(current[key], dict):\n                queue.append(current[key])\n        max_depth += 1\n\n    return max_depth\n\n\nif __name__ == '__main__':  # pragma no cover\n    # These \"asserts\" using only for self-checking and not necessary for\n    # auto-testing\n    assert depth({'a': {'b': 'c'}}) == 2, \"Dict\"\n    assert depth({'a': {'b': {'c': 'd'}}}) == 3, \"Dict 2\"\n    assert depth({'a': {'b': {'c': {'d': {'e': 'f'}}}}}) == 5, \"Dict 3\"\n    assert depth({'a': {'b': 'c'}, 'd': {'e': 'f'}}) == 2, \"Dicts\"\n    assert depth({'a': {'b': {'c': 'd'}, 'e': 'f'}}) == 3, \"Dicts 2\"\n    assert depth({'a': {'b': {}, 'c': 'd'}, 'e': {'f': {}}}) == 3, \"Dicts 3\"\n    assert depth({'a': {'b': [], 'c': 'd'}, 'e': {'f': {}}}) == 2, \"Dicts 4\"\n    assert depth({'a': {'b': [], 'c': {'d': {}}}}) == 3, \"Dicts 5\"\n    assert depth({'a': {'b': [], 'c': ()}, 'e': {'f': {}}}) == 2, \"Dicts 6\"\n    assert depth({'a': {'b': [], 'c': 'd'}, 'e': [{'f': {}}]}) == 2, \"List\"\n    assert depth({"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef depth_of_dict(d: dict) -> int:\n    \"\"\"Find the depth of a dictionary.\n\n    Examples:\n        >>> assert depth_of_dict({\"a\": 1}) == 1\n        >>> assert depth_of_dict({\"a\": {\"b\": 2}}) == 2\n        >>> assert depth_of_dict({\"a\": {\"b\": {\"c\": 3}}}) == 3\n    \"\"\"\n    if not d:\n        return 0\n\n    def _depth_of_dict(d: Union[dict, list], depth: int = 0) -> int:\n        if isinstance(d, list):\n            return max(\n                [_depth_of_dict(sub_d, depth + 1) for sub_d in d],\n                default=depth,\n            )\n\n        return max(\n            [_depth_of_dict(sub_d, depth + 1) for sub_d in d.values()],\n            default=depth,\n        )\n\n    return _depth_of_dict(d)\n\n\nif __name__ == \"__main__\":\n    print(depth_of_dict({\"a\": {\"b\": {\"c\": 3}}}))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def find_depth(dictionary):\n    \"\"\"\n    The input dictionary is assumed to have all values as either\n    dictionaries or lists, but never both.\n    \"\"\"\n    if isinstance(dictionary, dict):\n        if not dictionary:\n            return 1\n        else:\n            return 1 + max(find_depth(value) for value in dictionary.values())\n    elif isinstance(dictionary, list):\n        if not dictionary:\n            return 1\n        else:\n            return 1 + max(find_depth(item) for item in dictionary)\n    else:\n        raise ValueError(\"Input is not a dictionary or list\")\n\n\nprint(find_depth({}))\n# 1\n\nprint(find_depth({'a': {'b': {'c': {'d': {}}}}}))\n# 4\n\nprint(find_depth([[], []]))\n# 2\n\nprint(find_depth([[[[[[[[]]]]]]]]))\n# 7\n\nprint(find_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {}}}}}}}}))\n# 7"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_depth(d):\n    if not d:\n        return 0\n    return 1 + max(find_depth(v) for v in d.values() if isinstance(v, dict))\n\n\ndef test_find_depth():\n    assert find_depth({}) == 0\n    assert find_depth({'a': 1}) == 1\n    assert find_depth({'a': {'b': 1}}) == 2\n    assert find_depth({'a': {'b': {'c': 1}}}) == 3\n    assert find_depth({'a': {'b': 1}, 'c': 1}) == 2\n    assert find_depth({'a': {'b': 1}, 'c': {'d': 1}}) == 2\n    assert find_depth({'a': {'b': 1}, 'c': {'d': {'e': 1}}}) == 3"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import Dict\n\n\ndef depth_of_dict(dict_: Dict) -> int:\n    \"\"\"Returns the depth of a dictionary.\n\n    Args:\n        dict_ (Dict): The dictionary to find the depth of.\n\n    Returns:\n        int: The depth of the dictionary.\n    \"\"\"\n    depth = 0\n\n    def depth_finder(dict_, depth):\n        for k in dict_.keys():\n            if isinstance(dict_[k], dict):\n                nonlocal depth\n                depth += 1\n                depth_finder(dict_[k], depth)\n\n    depth_finder(dict_, depth)\n    return depth\n\n\nif __name__ == \"__main__\":\n    assert depth_of_dict({\"a\": 1, \"b\": 2}) == 1\n    assert depth_of_dict({\"a\": 1, \"b\": {\"c\": 3, \"d\": 4}}) == 2\n    assert depth_of_dict({\"a\": 1, \"b\": {\"c\": 3, \"d\": 4}, \"e\": {\"f\": {\"g\": 7}}}) == 3"
    }
  ]
}