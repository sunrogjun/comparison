{
  "timestamp": "2025-09-14T23:14:13.346557",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 124,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Using the formula n(2n - 1)\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(2)\n    6\n    >>> nth_hexagonal_number(5)\n    25\n    >>> nth_hexagonal_number(35)\n    165\n    >>> nth_hexagonal_number(30)\n    196\n    >>> nth_hexagonal_number(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: nth number should be greater than 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"nth number should be greater than 0\")\n\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Return the nth hexagonal number.\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(25)\n    153\n    >>> nth_hexagonal_number(123)\n    47591\n    \"\"\"\n    return (n * (2 * n - 1)) // 3\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def nth_hexagonal(n):\n    \"\"\"\n    >>> nth_hexagonal(1)\n    1\n    >>> nth_hexagonal(6)\n    21\n    >>> nth_hexagonal(20)\n    153\n    \"\"\"\n    if n < 1:\n        return n\n    n -= 1\n    hn = n * (2 * n - 1)\n    return hn\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Return the nth hexagonal number.\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(21)\n    76\n    \"\"\"\n    return (n * (2 * n - 1)) // 3\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    153\n    \"\"\"\n    return int(((2 * n - 1) * n) / 2)\n\n\ndef nth_hexagonal_number_2(n):\n    \"\"\"\n    >>> nth_hexagonal_number_2(1)\n    1\n    >>> nth_hexagonal_number_2(6)\n    21\n    >>> nth_hexagonal_number_2(20)\n    153\n    \"\"\"\n    return int(((1 + math.sqrt(1 + 24 * n)) / 2) ** 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    103\n    \"\"\"\n    n = (2 * n * n - n) // 3\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    This is a solution that uses a formula.\n    \"\"\"\n    return int(((2 * n - 1) * n * (n - 1)) ** 0.5) * (n * (n - 1) + 1) // 3\n\n\ndef nth_hexagonal_number_recursive(n: int) -> int:\n    \"\"\"\n    This is a solution that uses recursion.\n    \"\"\"\n    if n == 1:\n        return 1\n    return n * (2 * n - 1)\n\n\ndef nth_hexagonal_number_brute_force(n: int) -> int:\n    \"\"\"\n    This is a solution that uses brute force.\n    \"\"\"\n    nums = []\n    for i in range(1, 1000000):\n        nums.append(i * (2 * i - 1))\n    return nums[n - 1]\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 101):\n        assert nth_hexagonal_number(i) == nth_hexagonal_number_recursive(i) == nth_hexagonal_number_brute_force(i)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def hexagonal_number(n):\n    return n * (2 * n - 1)\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(25)\n    153\n    \"\"\"\n    if n == 1:\n        return 1\n\n    i = 0\n    while hexagonal_number(i) < n:\n        i += 1\n\n    return hexagonal_number(i)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    The nth hexagonal number is given by\n\n        n * (2n - 1)\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    153\n    >>> nth_hexagonal_number(100)\n    3906\n    \"\"\"\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n):\n    return (n * (2 * n - 1)) // 3\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_hexagonal_number(i))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"Returns the nth hexagonal number.\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(7)\n    21\n    >>> nth_hexagonal_number(20)\n    153\n    >>> nth_hexagonal_number(50)\n    1217\n    \"\"\"\n    if n < 1:\n        return 0\n\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    153\n    >>> nth_hexagonal_number(100)\n    5777\n    \"\"\"\n    # your code here\n    return int(n * (2 * n - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def hexagonal(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (2*n-1)\n\n    def hexagonal_math(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return (3*n**2-n)//2\n\n    def hexagonal_math2(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n * (2*n-1)\n\n\nif __name__ == \"__main__\":\n    assert Solution().hexagonal(2) == 6"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def hexagonal_number(n):\n    return ((2 * n - 1) * (2 * n - 1)) // 6\n\n\ndef test_hexagonal_number():\n    \"\"\"\n    >>> hexagonal_number(1)\n    1\n    >>> hexagonal_number(2)\n    6\n    >>> hexagonal_number(3)\n    15\n    >>> hexagonal_number(4)\n    28\n    >>> hexagonal_number(5)\n    45\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# from math import sqrt\n\n\ndef nth_hexagonal_number(n: int) -> int:\n    \"\"\"Returns the nth hexagonal number.\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    153\n    \"\"\"\n    return int(((2 * n - 1) * n) / 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    Return the nth hexagonal number.\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    153\n    \"\"\"\n    return int(((2 * n * n - n) * math.sqrt(3) / 2) + 0.5)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(15)\n    121\n    >>> nth_hexagonal_number(30)\n    259\n    \"\"\"\n    if n <= 1:\n        return n\n\n    h = 1\n    i = 1\n    while h < n:\n        i += 1\n        h = (i * (2 * i - 1)) // 2\n\n    return h\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_hexagonal(n: int) -> int:\n    \"\"\"\n    :param n: int - an integer representing the position of the desired hexagonal number.\n    :return: int - the nth hexagonal number.\n    >>> nth_hexagonal(1)\n    1\n    >>> nth_hexagonal(7)\n    21\n    >>> nth_hexagonal(21)\n    107\n    \"\"\"\n    return int(((2 * n * n - n) * math.sqrt(3) / 2) + 0.5)\n\n\ndef nth_hexagonal_alt(n: int) -> int:\n    \"\"\"\n    :param n: int - an integer representing the position of the desired hexagonal number.\n    :return: int - the nth hexagonal number.\n    >>> nth_hexagonal_alt(1)\n    1\n    >>> nth_hexagonal_alt(7)\n    21\n    >>> nth_hexagonal_alt(21)\n    107\n    \"\"\"\n    return int(((2 * n - 1) * (2 * n - 1) + (2 * n - 1)) / 4)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def hexagonal(n):\n    \"\"\"\n    Return nth hexagonal number.\n\n    >>> hexagonal(1)\n    1\n    >>> hexagonal(2)\n    6\n    >>> hexagonal(3)\n    15\n    >>> hexagonal(4)\n    28\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef nth_hexagonal(n):\n    \"\"\"\n    Return nth hexagonal number.\n\n    >>> nth_hexagonal(1)\n    1\n    >>> nth_hexagonal(2)\n    6\n    >>> nth_hexagonal(3)\n    15\n    >>> nth_hexagonal(4)\n    28\n    \"\"\"\n    if n == 1:\n        return 1\n\n    i = 1\n    while hexagonal(i) <= n:\n        i += 1\n\n    k = i - 1\n    while hexagonal(k) > n:\n        k -= 1\n\n    diff = n - hexagonal(k)\n    return hexagonal(k + diff)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_hexagonal(n: int) -> int:\n    \"\"\"\n    Returns the nth hexagonal number\n\n    >>> nth_hexagonal(1)\n    1\n    >>> nth_hexagonal(6)\n    21\n    >>> nth_hexagonal(20)\n    306\n    >>> nth_hexagonal(30)\n    462\n    >>> nth_hexagonal(35)\n    712\n    >>> nth_hexagonal(40)\n    882\n    >>> nth_hexagonal(45)\n    1162\n    >>> nth_hexagonal(50)\n    1442\n    \"\"\"\n    return math.floor(((2 * n * n - n) * 0.5) + 0.25)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    Calculates the nth hexagonal number.\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    153\n    >>> nth_hexagonal_number(100)\n    5731\n    >>> nth_hexagonal_number(200)\n    12170\n    \"\"\"\n    return (n * (n * 2 + 1)) // 3\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    This is the sequence of numbers called triangular, because\n    they are the numbers that appear in triangles.\n\n    n = 1, 1, 3, 6, 10, 15, ...\n\n    The first few triangular numbers are: 1, 3, 6, 10, 15, ...\n\n    The nth triangular number is found by: (n + 1) * n / 2\n\n    So the nth hexagonal number is the nth triangular number +\n    the nth pentagonal number.\n\n    The nth pentagonal number is found by: n * (3 * n - 1) / 2\n\n    The sum of an pentagonal number and a triangular number is:\n    (3 * n^2 - n) / 2\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    15337\n    \"\"\"\n    nth_triangular_number = lambda n: (n + 1) * n // 2\n    nth_pentagonal_number = lambda n: n * (3 * n - 1) // 2\n    return nth_triangular_number(n) + nth_pentagonal_number(n)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_hexagonal_number(n):\n    return int(((2 * n - 1) * n) / 3)\n\n\ndef nth_hexagonal_number_v2(n):\n    return int(n * (2 * n - 1))\n\n\ndef nth_hexagonal_number_v3(n):\n    return int((n * (2 * n - 1)) // 3)\n\n\ndef main():\n    n = 10\n    result = nth_hexagonal_number(n)\n    print(\"The {} hexagonal number is {}\".format(n, result))\n\n    result = nth_hexagonal_number_v2(n)\n    print(\"The {} hexagonal number is {}\".format(n, result))\n\n    result = nth_hexagonal_number_v3(n)\n    print(\"The {} hexagonal number is {}\".format(n, result))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    153\n    >>> nth_hexagonal_number(100)\n    5777\n    \"\"\"\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def hexagonal(n):\n    return (n * (2 * n - 1)) // 3\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    :param n: int - nth hexagonal number\n    :return: int - nth hexagonal number\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(7)\n    21\n    >>> nth_hexagonal_number(21)\n    105\n    \"\"\"\n    i = 1\n    while hexagonal(i) <= n:\n        if hexagonal(i) == n:\n            return n\n        i += 1\n    return hexagonal(i - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Return the nth hexagonal number.\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(25)\n    153\n    \"\"\"\n    return (n * (2 * n - 1)) // 3\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to find the nth hexagonal number.\nHints:\nUse Python built-in function, itertools.count() to generate an infinite sequence of natural numbers.\n\n\"\"\"\ndef findNthHexagonalNum_1(N):\n\tfrom itertools import count\n\treturn next(x*((2*N)-1) for x in count(1) if (((2*x*x)-1)<=((2*N)-1) and ((2*x*x)+1)>=((2*N)-1)))\n\t\ndef findNthHexagonalNum_2(N):\n\treturn N*(2*N-1)\n\nprint findNthHexagonalNum_1(5)\nprint findNthHexagonalNum_2(5)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: nth hexagonal number to find\n    :return: nth hexagonal number\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    101\n    \"\"\"\n    return int(((2 * n * n - 1) ** 0.5) + 0.5) * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "import math\n\n\n# def hexagonal_num(n: int) -> int:\n#     return (n * (2 * n - 1))\n\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"Find the nth hexagonal number.\n\n    Args:\n        n (int): The nth hexagonal number to find.\n\n    Returns:\n        int: The nth hexagonal number.\n    \"\"\"\n    return int(n * (2 * n - 1) + (math.sqrt(8 * n ** 2 - 7) - 1) / 2)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(hexagonal_num(i))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    The nth hexagonal number is given by: n * (2n - 1).\n    :param n: the nth hexagonal number we want to find.\n    :return: the nth hexagonal number.\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(21)\n    123\n    >>> nth_hexagonal_number(100)\n    577\n    >>> nth_hexagonal_number(101)\n    587\n    >>> nth_hexagonal_number(102)\n    623\n    \"\"\"\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable, no-name-in-module\nfrom expects import *\n\nfrom lib.hexagonal_number import calculate\n\nwith description('calculate'):\n    with it('calculates the first hexagonal number'):\n        expect(calculate(1)).to(equal(1))\n\n    with it('calculates the second hexagonal number'):\n        expect(calculate(2)).to(equal(7))\n\n    with it('calculates the third hexagonal number'):\n        expect(calculate(3)).to(equal(16))\n\n    with it('calculates the fourth hexagonal number'):\n        expect(calculate(4)).to(equal(25))\n\n    with it('calculates the fifth hexagonal number'):\n        expect(calculate(5)).to(equal(35))\n\n    with it('calculates the sixth hexagonal number'):\n        expect(calculate(6)).to(equal(49))\n\n    with it('calculates the seventh hexagonal number'):\n        expect(calculate(7)).to(equal(64))\n\n    with it('calculates the eighth hexagonal number'):\n        expect(calculate(8)).to(equal(81))\n\n    with it('calculates the ninth hexagonal number'):\n        expect(calculate(9)).to(equal(96))\n\n    with it('calculates the tenth hexagonal number'):\n        expect(calculate(10)).to(equal(113))\n\n    with it('calculates the eleventh hexagonal number'):\n        expect(calculate(11)).to(equal(130))\n\n    with it('calculates the twelfth hexagonal number'):\n        expect(calculate(12)).to(equal(149))\n\n    with it('calculates the thirteenth hexagonal number'):\n        expect(calculate(13)).to(equal(169))\n\n    with it('calculates the fourteenth hexagonal number'):\n        expect(calculate(14)).to(equal(190))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 1:\n        return 0\n\n    nth = n * (2 * n - 1)\n\n    return nth\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal_number(1))\n    print(nth_hexagonal_number(6))\n    print(nth_hexagonal_number(20))"
    },
    {
      "rank": 33,
      "score": 9.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef nth_hexagonal_number(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n should be > 0\")\n\n    if n == 1:\n        return 1\n\n    i = 1\n    j = 2\n    while i < n:\n        i += 1\n        j += 1\n\n    k = (i * (2 * i - 1)) // 2\n    if k == n:\n        return k\n\n    while k < n:\n        k += j\n        i += 1\n        j += 1\n\n    return k\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal_number(1))\n    print(nth_hexagonal_number(6))\n    print(nth_hexagonal_number(28))\n    print(nth_hexagonal_number(100))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    :param n: int -- nth hexagonal number\n    :return: int -- nth hexagonal number\n    \"\"\"\n    # n = n + 1\n    # return (n * (n - 1)) // 2\n    return ((n * (n + 1) * (2 * n - 1)) // 6) - n\n\n\nif __name__ == '__main__':\n    print(nth_hexagonal_number(1))\n    print(nth_hexagonal_number(2))\n    print(nth_hexagonal_number(3))\n    print(nth_hexagonal_number(4))\n    print(nth_hexagonal_number(5))\n    print(nth_hexagonal_number(6))\n    print(nth_hexagonal_number(7))\n    print(nth_hexagonal_number(8))\n    print(nth_hexagonal_number(9))\n    print(nth_hexagonal_number(10))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    return ((2 * n * n - n) * (2 * n * n - n + 1)) // 6\n\n\nif __name__ == \"__main__\":\n    assert nth_hexagonal_number(2) == 6"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def nth_hexagonal(n: int) -> int:\n    \"\"\"\n    The nth hexagonal number is (n * (2 * n - 1)) / 2.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_hexagonal(n))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return (n * (2 * n - 1)) // 3\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal_number(1))\n    print(nth_hexagonal_number(6))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return (((2 * n) - 1) * n) // 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(i, \"->\", nth_hexagonal_number(i))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def hexagonal(n):\n    return (n * (2 * n - 1))\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    print(hexagonal(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def hexagonal_number(n):\n    return (n * (2 * n - 1))\n\n\nprint(hexagonal_number(5))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "# O(sqrt(n))\ndef nth_hexagonal_number(n):\n    return int(((1 + 2 * n) * n) / 2)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    The nth Hexagonal number is (n * (2 * n - 1)) / 2.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_hexagonal_number(n))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import math\n\n\n# nth hexagonal number\ndef hexagonal_number(n: int) -> int:\n    \"\"\"\n    Return the nth hexagonal number.\n    >>> hexagonal_number(1)\n    1\n    >>> hexagonal_number(6)\n    21\n    >>> hexagonal_number(20)\n    177\n    >>> hexagonal_number(39)\n    1676\n    \"\"\"\n    return int(((2 * n - 1) * n) / 2)\n\n\n# sequence of hexagonal numbers\ndef hexagonal_sequence(n: int) -> int:\n    \"\"\"\n    Return the nth hexagonal number.\n    >>> hexagonal_sequence(1)\n    1\n    >>> hexagonal_sequence(6)\n    21\n    >>> hexagonal_sequence(20)\n    177\n    >>> hexagonal_sequence(39)\n    1676\n    \"\"\"\n    return hexagonal_number(n - 1) + hexagonal_number(n)\n\n\n# nth hexagonal number\ndef hexagonal_number_math(n: int) -> int:\n    \"\"\"\n    Return the nth hexagonal number.\n    >>> hexagonal_number_math(1)\n    1\n    >>> hexagonal_number_math(6)\n    21\n    >>> hexagonal_number_math(20)\n    177\n    >>> hexagonal_number_math(39)\n    1676\n    \"\"\"\n    return int(math.sqrt(2 * n * n - n + 0.25) + 0.5)\n\n\n# sequence of hexagonal numbers\ndef hexagonal_sequence_math(n: int) -> int:\n    \"\"\"\n    Return the nth hexagonal number.\n    >>> hexagonal_sequence_math(1)\n    1\n    >>> hexagonal_sequence_math(6)\n    21\n    >>> hexagonal_sequence_math(20)\n    177\n    >>> hexagonal_sequence_math(39)\n    1"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def nth_hexagonal(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 3"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    return int(((2*n*n - n) / 2) + n)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 3\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_hexagonal_number(n))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n * (2 * n - 1)\n    return (n - 1) * ((2 * n - 1) + 1)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_hexagonal_number(i))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_hexagonal_number(n):\n    if n < 1:\n        return 0\n\n    # n = (2n - 1) * (2n - 1)\n    # n = 4n**2 - 4n\n    # n = 4(n**2 - n)\n    # n = 4(n - 1/2)**2 + 4\n    # n = 4(n - 1/2)**2 + 1\n    # n = (2n - 1)**2\n    # n - 1/2 = \u221a(n)\n    # n = (2\u221a(n) - 1)**2\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # ...\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # ...\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # ...\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # ...\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n) = (2\u221a(n) - 1)\n    # \u221a(n"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n\n    def _is_hexagonal(n):\n        return (n * (2 * n - 1)) / 3\n\n    i = 1\n    while _is_hexagonal(i) < n:\n        i += 1\n\n    return _is_hexagonal(i)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "import math\n\n\n# time complexity: O(n)\n# space complexity: O(1)\ndef find_nth_hexagonal_number(n):\n    # find the nth hexagonal number\n    # the formula is 1+2+3+...+n = n(n+1)/2\n    return int((math.sqrt(8*n+1)-1)/2)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def hexagonal(n):\n    return (n * (2 * n - 1))\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(hexagonal(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def hexagonal_num(n):\n    return n * (2*n - 1)\n\ndef hexagonal_num_v2(n):\n    return (3*n**2 - n) // 2\n\n\nif __name__ == '__main__':\n    print(hexagonal_num(10))\n    print(hexagonal_num_v2(10))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    Returns nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError('n must be greater than or equal to 1')\n\n    return int(n * (2 * n - 1) / 3)\n\n\ndef nth_hexagonal_number_alt(n):\n    \"\"\"\n    Returns nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError('n must be greater than or equal to 1')\n\n    return int(((1 + math.sqrt(5)) / 2) ** n + ((1 - math.sqrt(5)) / 2) ** n)\n\n\ndef nth_hexagonal_number_alt2(n):\n    \"\"\"\n    Returns nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError('n must be greater than or equal to 1')\n\n    return int((1 + math.sqrt(1 + 24 * n)) / 6)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\n\ndef hexagonal_num(n):\n    return int((math.sqrt(8*n + 1) - 1)/2)\n\n\nif __name__ == \"__main__\":\n    print(hexagonal_num(5))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    21\n    >>> nth_hexagonal_number(20)\n    153\n    \"\"\"\n    return int(((2 * n - 1) * n) / 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_hexagonal_number(n):\n    return int(((2*n*n - n) * math.sqrt(3)) / 2)\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal_number(1))\n    print(nth_hexagonal_number(2))\n    print(nth_hexagonal_number(3))\n    print(nth_hexagonal_number(4))\n    print(nth_hexagonal_number(5))\n    print(nth_hexagonal_number(6))\n    print(nth_hexagonal_number(7))\n    print(nth_hexagonal_number(8))\n    print(nth_hexagonal_number(9))\n    print(nth_hexagonal_number(10))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\n\ndef hexagonal(n):\n    return int((n * (2 * n - 1)) ** 0.5) * 2 * n\n\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    print(hexagonal(n))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def nth_hexagonal(n: int) -> int:\n    \"\"\"\n    The nth Hexagonal number is given by H(n) = (n * (2 * n - 1)) / 2.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal(1))\n    print(nth_hexagonal(6))\n    print(nth_hexagonal(10))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def nth_hexagonal(n: int) -> int:\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1))\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal(4))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    Finds the nth hexagonal number.\n    \"\"\"\n    n = n - 1\n    if n < 0:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n % 2 == 0:\n        return (3 * n - 1) * n // 2\n    else:\n        return (2 * n - 1) * n // 2 + 1"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    return (n * (2 * n - 1))\n\n\nif __name__ == '__main__':\n    print(nth_hexagonal_number(1))\n    print(nth_hexagonal_number(6))\n    print(nth_hexagonal_number(10))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "# Time Complexity: O(n)\ndef nth_hexagonal(n):\n    if n == 1:\n        return 1\n\n    i = 1\n    while n > 1:\n        i += 1\n        n -= 1\n        n -= i\n\n    return i * (i - 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal(1))\n    print(nth_hexagonal(6))\n    print(nth_hexagonal(20))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    The nth hexagonal number is (n * (2 * n - 1)) / 2.\n    \"\"\"\n    return n * (2 * n - 1) // 2\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_hexagonal_number(n))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "import math\n\n\n# Time complexity: O(sqrt(n))\n# Space complexity: O(1)\ndef find_nth_hexagonal_number(n):\n    \"\"\"\n    :param n: int, the nth hexagonal number\n    :return: the nth hexagonal number\n    \"\"\"\n    # convert n to hexagonal number\n    hexagonal_number = int((1 + math.sqrt(1 + 8 * n)) / 2)\n    return hexagonal_number\n\n\nprint(find_nth_hexagonal_number(10))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1))\n\n\nif __name__ == '__main__':  # pragma: no cover\n    # Run Tests\n    for i in range(1, 11):\n        print(i, nth_hexagonal_number(i))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "# 1, 6, 15, 28, 45, ...\n\n# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return (n * (2 * n - 1)) // 3\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_hexagonal_number(i))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def hexagonal_number(n: int) -> int:\n    \"\"\"\n    In a hexagonal number, the first digit is 1, and each subsequent digit is the sum of the\n    previous two.\n\n    Examples:\n    >>> hexagonal_number(1)\n    1\n    >>> hexagonal_number(6)\n    16\n    >>> hexagonal_number(7)\n    17\n    >>> hexagonal_number(10)\n    28\n    >>> hexagonal_number(100)\n    4166\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    n -= 1\n\n    # n is the number of digits in the hexagonal number\n    nth_digit = 1\n    while nth_digit < n:\n        nth_digit += 1\n\n    # we want the nth digit\n    n -= nth_digit\n\n    # n is now the number of hexagonal numbers that have less than n digits\n\n    # nth_digit is the number of hexagonal numbers with less than n digits\n    # we want the nth hexagonal number with less than n digits\n    nth_digit -= 1\n\n    # n is now the number of hexagonal numbers that have less than n digits\n    # nth_digit is the number of hexagonal numbers with less than n digits\n    # the nth hexagonal number with less than n digits is the sum of nth_digit\n    # and the number of hexagonal numbers with less than n-1 digits\n    return nth_digit + hexagonal_number(n - 1)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def hexagonal(n):\n    return int(((2 * n - 1) * n) / 2)\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    :param n: int - number of the hexagonal sequence for which you need the nth value\n    return: int - nth hexagonal number\n    \"\"\"\n    return hexagonal(n)\n\n\nif __name__ == '__main__':\n    print(nth_hexagonal_number(1))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable\nfrom expects import *\n\nfrom lib.hexagonal_number import HexagonalNumber\n\nwith description('Hexagonal number'):\n    with it('calculates the nth hexagonal number'):\n        expect(HexagonalNumber(1).calculate()).to(equal(1))\n        expect(HexagonalNumber(2).calculate()).to(equal(6))\n        expect(HexagonalNumber(3).calculate()).to(equal(15))\n        expect(HexagonalNumber(4).calculate()).to(equal(28))\n        expect(HexagonalNumber(5).calculate()).to(equal(45))\n        expect(HexagonalNumber(6).calculate()).to(equal(66))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def nth_hexagonal(n: int) -> int:\n    \"\"\"\n    The nth hexagonal number is the sum of n and the first n triangular numbers.\n    \"\"\"\n    triangular_numbers = [1]\n    for i in range(2, n + 1):\n        triangular_numbers.append(i * (i + 1) // 2)\n    return sum(triangular_numbers[:n + 1])\n\n\nif __name__ == \"__main__\":\n    assert nth_hexagonal(5) == 15"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "# 0 is the first number\ndef nth_hexagonal_number(n):\n    # n is the index of the hexagonal number\n    n -= 1\n    # a is the number of hexagonal numbers\n    a = 0\n    # b is the number of hexagonal numbers\n    b = 1\n    # c is the number of hexagonal numbers\n    c = 2\n    # while we do not have the nth hexagonal number, continue\n    while n != a:\n        # add a new hexagonal number to the hexagonal sequence\n        a = b + c\n        # increment the number of hexagonal numbers\n        b = c\n        # increment the number of hexagonal numbers\n        c += 1\n    return a"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    Calculates the nth hexagonal number.\n\n    :param n: nth hexagonal number\n    :return: nth hexagonal number\n    :rtype: int\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef nth_hexagonal_number_formula(n):\n    \"\"\"\n    Calculates the nth hexagonal number using a formula.\n\n    :param n: nth hexagonal number\n    :return: nth hexagonal number\n    :rtype: int\n    \"\"\"\n    return int(((1 + 2 * n) * n) / 2)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def hexagonal(n):\n    return n * (2*n - 1)\n\n\ndef hexagonal_number(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    i = 1\n    while hexagonal(i) < n:\n        i += 1\n\n    return hexagonal(i)\n\n\nif __name__ == \"__main__\":\n    assert hexagonal_number(1) == 1\n    assert hexagonal_number(6) == 15\n    assert hexagonal_number(10) == 45\n    assert hexagonal_number(12) == 60"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "# 1, 6, 15, 28, 45\n# 2, 5, 10, 17, 26\n# 3, 7, 12, 19, 28\n\ndef hexagonal_number(n):\n    return (n * (2 * n - 1))\n\ndef find_hexagonal_number(n):\n    \"\"\"\n    Finds the nth hexagonal number.\n    \"\"\"\n    index = 1\n    while hexagonal_number(index) < n:\n        index += 1\n    return hexagonal_number(index)\n\nif __name__ == '__main__':\n    assert find_hexagonal_number(26) == 28\n    assert find_hexagonal_number(3) == 6"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import math\n\n\ndef hexagonal(n):\n    \"\"\"\n    Return nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    return (n * (2 * n - 1)) // 3\n\n\ndef hexagonal_sequence(n):\n    \"\"\"\n    Return nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n % 2 == 0:\n        return (3 * hexagonal(n // 2) * hexagonal(n // 2)) // 2\n    return (3 * hexagonal((n - 1) // 2) * hexagonal((n - 1) // 2)) // 2 + 1\n\n\ndef nth_hexagonal_number_using_sequence(n):\n    \"\"\"\n    Return nth hexagonal number.\n    \"\"\"\n    return hexagonal_sequence(n)\n\n\ndef nth_hexagonal_number_using_formula(n):\n    \"\"\"\n    Return nth hexagonal number.\n    \"\"\"\n    return hexagonal(n)\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal_number_using_formula(100))\n    print(nth_hexagonal_number_using_sequence(100))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def nth_hexagonal(n):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    n = n - 1\n    if n < 1:\n        return n\n    elif n == 1:\n        return 1\n\n    count = 0\n    num = 1\n    while count < n:\n        count += 1\n        num += 4\n    return num\n\n\nif __name__ == \"__main__\":\n    assert nth_hexagonal(1) == 1\n    assert nth_hexagonal(6) == 15\n    assert nth_hexagonal(20) == 60"
    },
    {
      "rank": 78,
      "score": 7.0,
      "candidate": "# 1, 6, 15, 28, 45\n\n\"\"\"\n\n1, 3, 6, 10, 15\n\n\"\"\"\n\ndef hexagonal(n):\n    return int((n * (2*n - 1))/2)\n\nprint(hexagonal(1))\nprint(hexagonal(2))\nprint(hexagonal(3))\nprint(hexagonal(4))\nprint(hexagonal(5))\n\n\ndef nth_hexagonal(n):\n    return int((n * (2*n - 1))/2)\n\n\nprint(nth_hexagonal(1))\nprint(nth_hexagonal(2))\nprint(nth_hexagonal(3))\nprint(nth_hexagonal(4))\nprint(nth_hexagonal(5))\n\n\ndef nth_hexagonal_v2(n):\n    i = 1\n    while n > 1:\n        i += 1\n        n -= 1\n    return nth_hexagonal(i)\n\n\nprint(nth_hexagonal_v2(1))\nprint(nth_hexagonal_v2(2))\nprint(nth_hexagonal_v2(3))\nprint(nth_hexagonal_v2(4))\nprint(nth_hexagonal_v2(5))"
    },
    {
      "rank": 79,
      "score": 3.0,
      "candidate": "# 1st solution\n# O(n) time | O(1) space\nclass Solution:\n    def findNthNumber(self, n: int) -> int:\n        i = 1\n        while n > 0:\n            n -= 1\n            i += 1\n            i += 4 * ((i-1) // 4)\n        return i - 4\n\n\n# 2nd solution\n# O(n) time | O(1) space\nclass Solution:\n    def findNthNumber(self, n: int) -> int:\n        def hexagonal(n):\n            return (3 * n - 1) // 2\n        def getHexagonalNumber(n):\n            current = 1\n            counter = 0\n            while counter < n:\n                current += 1\n                counter += 4\n            return current\n        nth = hexagonal(n)\n        return getHexagonalNumber(nth)\n\n\n# 3rd solution\n# O(n) time | O(1) space\nclass Solution:\n    def findNthNumber(self, n: int) -> int:\n        def hexagonal(n):\n            return (3 * n - 1) // 2\n        def getHexagonalNumber(n):\n            current = 1\n            counter = 0\n            while counter < n:\n                current += 1\n                counter += 4\n            return current\n        nth = hexagonal(n)\n        return getHexagonalNumber(nth)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    Time complexity: O(1).\n    Space complexity: O(1).\n    \"\"\"\n\n    if n < 1:\n        return None\n\n    # hexagonal number formula: n * (2n - 1)\n    return n * (2 * n - 1)\n\n\ndef nth_hexagonal_number_v2(n):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if n < 1:\n        return None\n\n    nth_hexagonal_nums = []\n\n    for i in range(1, n + 1):\n        nth_hexagonal_nums.append(i * (2 * i - 1))\n\n    return nth_hexagonal_nums[-1]\n\n\ndef nth_hexagonal_number_v3(n):\n    \"\"\"\n    Time complexity: O(1).\n    Space complexity: O(1).\n    \"\"\"\n    if n < 1:\n        return None\n\n    return int(((1 + 2 ** 0.5) ** (n + 1) - (1 - 2 ** 0.5) ** (n + 1)) / (2 ** 0.5))\n\n\nif __name__ == '__main__':\n    # True\n    print(nth_hexagonal_number(5) == nth_hexagonal_number_v2(5) == nth_hexagonal_number_v3(5))\n    print(nth_hexagonal_number(6) == nth_hexagonal_number_v2(6) == nth_hexagonal_number_v3(6))\n    print(nth_hexagonal_number(7) == nth_hexagonal_number_v2(7) == nth_hexagonal_number_v3(7))\n    print(nth_hexagonal_number(8) == nth_hexagonal_number_v2(8) == nth_hexagonal_number_v3(8))\n    print(nth_hex"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def nth_hexagonal(n):\n    \"\"\"\n    :param: - n - the number whose hexagonal number is to be found\n    Should return - nth hexagonal number\n    \"\"\"\n    return (n * (2 * n - 1)) // 3\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = nth_hexagonal(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((1, 1))\ntest_function((2, 6))\ntest_function((3, 15))\ntest_function((4, 28))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import math\n\n\n# @param n: An integer\n# @return: An integer\ndef nthHexagonalNumber(n):\n    # write your code here\n    return (math.sqrt(8 * n + 1) - 1) / 2"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef hex_num(n):\n    return (n * (2 * n - 1))\n\n\nclass TestHexNum(unittest.TestCase):\n    def test_hex_num(self):\n        self.assertEqual(hex_num(1), 1)\n        self.assertEqual(hex_num(2), 6)\n        self.assertEqual(hex_num(3), 15)\n        self.assertEqual(hex_num(4), 28)\n        self.assertEqual(hex_num(5), 45)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return (n * (2 * n - 1)) // 3\n\n\nif __name__ == \"__main__\":\n    assert nth_hexagonal_number(1) == 1\n    assert nth_hexagonal_number(6) == 21\n    assert nth_hexagonal_number(20) == 153\n    assert nth_hexagonal_number(43) == 2673"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return int(((2 * n - 1) * n) / 2)\n\n\nif __name__ == \"__main__\":\n    assert nth_hexagonal_number(1) == 1\n    assert nth_hexagonal_number(2) == 6\n    assert nth_hexagonal_number(3) == 15\n    assert nth_hexagonal_number(4) == 28"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def hex_num(n):\n    return (n * (2 * n - 1)) // 3\n\ndef main():\n    assert hex_num(1) == 1\n    assert hex_num(2) == 6\n    assert hex_num(3) == 15\n    assert hex_num(4) == 28\n    assert hex_num(5) == 45\n    assert hex_num(6) == 66\n    assert hex_num(7) == 91\n    assert hex_num(8) == 120\n    assert hex_num(9) == 155\n    assert hex_num(10) == 196\n    assert hex_num(11) == 241\n    assert hex_num(12) == 296\n    assert hex_num(13) == 362\n    assert hex_num(14) == 432\n    assert hex_num(15) == 514\n    assert hex_num(16) == 608\n    assert hex_num(17) == 722\n    assert hex_num(18) == 852\n    assert hex_num(19) == 1000\n    assert hex_num(20) == 1172\n    assert hex_num(21) == 1366\n    assert hex_num(22) == 1584\n    assert hex_num(23) == 1822\n    assert hex_num(24) == 2102\n    assert hex_num(25) == 2404\n    assert hex_num(26) == 2736\n    assert hex_num(27) == 3092\n    assert hex_num(28) == 3474\n    assert hex_num(29) == 3878\n    assert hex_num(30) == 4316\n    assert hex_num(31) == 4774\n    assert hex_num(32) == 5258\n    assert hex_num"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "import math\n\n\n# @param {integer} n\n# @return {integer}\n# def find_nth_hexagonal_number(n):\n#     return ((n * (2 * n - 1)) // 3)\n\n\ndef find_nth_hexagonal_number(n):\n    return int(n * (2 * n - 1) * (2 * n + 1) ** 0.5) // 4\n\n\ndef test_find_nth_hexagonal_number():\n    assert find_nth_hexagonal_number(1) == 1\n    assert find_nth_hexagonal_number(6) == 15\n    assert find_nth_hexagonal_number(20) == 60\n\n\nif __name__ == '__main__':\n    test_find_nth_hexagonal_number()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def nth_hexagonal(n):\n    \"\"\"\n    Return nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef hexagonal_num_index(num):\n    \"\"\"\n    Return the index of the given number in hexagonal series.\n    \"\"\"\n    for i in range(1, num):\n        if i * (2 * i - 1) == num:\n            return i\n\n    return -1\n\n\ndef nth_hexagonal_num_index(n):\n    \"\"\"\n    Return nth hexagonal number by its index.\n    \"\"\"\n    return nth_hexagonal(hexagonal_num_index(n))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def nthHexagonal(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        r = (n-1)/2\n        return r*(2*r-1)\n\n\nif __name__ == \"__main__\":\n    assert Solution().nthHexagonal(1) == 1"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# find the nth hexagonal number.\ndef nth_hexagonal_number(n):\n    # create a list to store hexagonal numbers\n    hex_nums = []\n    # create a list to store the hexagonal numbers in sequence\n    hex_nums_in_sequence = []\n    # for i in range 1 to n\n    for i in range(1, n + 1):\n        # append the hexagonal number to the list\n        hex_nums.append((i * (2 * i - 1)))\n    # for i in the list of hexagonal numbers\n    for i in hex_nums:\n        # find the number of divisors\n        divisors = 0\n        # for j in the range of 1 to i\n        for j in range(1, i + 1):\n            # if j is divisor of i\n            if i % j == 0:\n                # increment the number of divisors\n                divisors += 1\n        # if the number of divisors is equal to 6\n        if divisors == 6:\n            # append the number to the list\n            hex_nums_in_sequence.append(i)\n    # return the number\n    return hex_nums_in_sequence[n - 1]\n\n\n# test the function\nprint(nth_hexagonal_number(4))\nprint(nth_hexagonal_number(10))\nprint(nth_hexagonal_number(20))\nprint(nth_hexagonal_number(30))\nprint(nth_hexagonal_number(40))\nprint(nth_hexagonal_number(50))\nprint(nth_hexagonal_number(60))\nprint(nth_hexagonal_number(70))\nprint(nth_hexagonal_number(80))\nprint(nth_hexagonal_number(90))\nprint(nth_hexagonal_number(100))\nprint(nth_hexagonal_number(110))\nprint(nth_hexagonal_number(120))\nprint(nth_hexagonal_number(130))\nprint(nth_hexag"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def hexagonal_number(n):\n    \"\"\"\n    The formula for the nth hexagonal number is (n * (2*n - 1)) / 2\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\ndef test_solution():\n    assert hexagonal_number(1) == 1\n    assert hexagonal_number(2) == 6\n    assert hexagonal_number(3) == 15\n    assert hexagonal_number(4) == 28\n    assert hexagonal_number(5) == 45\n    assert hexagonal_number(6) == 66\n    assert hexagonal_number(7) == 91\n    assert hexagonal_number(8) == 120\n    assert hexagonal_number(9) == 155\n\n\nif __name__ == \"__main__\":\n    test_solution()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def nth_hexagonal_number(n):\n    \"\"\"\n    :param n: int -- nth hexagonal number\n    :return: int -- nth hexagonal number\n    \"\"\"\n    # n = 1, 3, 6, 10, 15, ...\n    # 2n - 1 = 1, 3, 5, 7, 9, ...\n    return (n * (2 * n - 1)) // 3\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = nth_hexagonal_number(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([1, 1])\ntest_function([2, 6])\ntest_function([3, 15])\ntest_function([4, 28])\ntest_function([5, 45])\ntest_function([6, 66])\ntest_function([15, 165580])"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def nth_hexagonal_number(n):\n    return n * (2 * n - 1)\n\n\ndef test_nth_hexagonal_number():\n    assert nth_hexagonal_number(1) == 1\n    assert nth_hexagonal_number(2) == 6\n    assert nth_hexagonal_number(3) == 15\n    assert nth_hexagonal_number(4) == 28\n    assert nth_hexagonal_number(5) == 45\n    assert nth_hexagonal_number(6) == 66"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# 01 Solution\ndef nth_hexagonal_number(n):\n    return (n * (2 * n - 1))\n\n\n# 02 Solution\ndef nth_hexagonal_number(n):\n    return int((n * ((2 * n) - 1)) / 2)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# 1st solution\n# O(sqrt(n))\n# time complexity: O(sqrt(n))\n# space complexity: O(1)\ndef nth_hexagonal_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n should be a positive integer.\")\n    if n == 1:\n        return 1\n    n -= 1\n    index, i = 0, 1\n    while index < n:\n        i += 1\n        index += i\n    index -= i\n    return index + (i - 1) * (i - 2) // 2\n\n\n# 2nd solution\n# O(n)\n# time complexity: O(n)\n# space complexity: O(1)\ndef nth_hexagonal_number2(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n should be a positive integer.\")\n    if n == 1:\n        return 1\n    n -= 1\n    index, i = 0, 1\n    while index < n:\n        i += 1\n        index += i\n    index -= i\n    return index + (i - 1) * (i - 2) // 2 + n - index"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "import math\n\n\ndef nth_hexagonal(n: int) -> int:\n    \"\"\"Finds the nth hexagonal number.\n\n    Args:\n        n (int): The position of the hexagonal number.\n\n    Examples:\n        >>> nth_hexagonal(1)\n        1\n        >>> nth_hexagonal(6)\n        21\n        >>> nth_hexagonal(25)\n        153\n    \"\"\"\n    return int(((2 * n - 1) * n) / 3)\n\n\ndef nth_hexagonal_alt(n: int) -> int:\n    \"\"\"Finds the nth hexagonal number.\n\n    Args:\n        n (int): The position of the hexagonal number.\n\n    Examples:\n        >>> nth_hexagonal_alt(1)\n        1\n        >>> nth_hexagonal_alt(6)\n        21\n        >>> nth_hexagonal_alt(25)\n        153\n    \"\"\"\n    return int(n * (2 * n - 1))\n\n\ndef nth_hexagonal_alt2(n: int) -> int:\n    \"\"\"Finds the nth hexagonal number.\n\n    Args:\n        n (int): The position of the hexagonal number.\n\n    Examples:\n        >>> nth_hexagonal_alt2(1)\n        1\n        >>> nth_hexagonal_alt2(6)\n        21\n        >>> nth_hexagonal_alt2(25)\n        153\n    \"\"\"\n    return int(n * (2 * n - 1) // 3)\n\n\ndef nth_hexagonal_alt3(n: int) -> int:\n    \"\"\"Finds the nth hexagonal number.\n\n    Args:\n        n (int): The position of the hexagonal number.\n\n    Examples:\n        >>> nth_hexagonal_alt3(1)\n        1\n        >>> nth_hexagonal_alt3(6)\n        21\n        >>> nth_hexag"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def nth_hexagonal(n):\n    \"\"\"\n    n is 1-based\n    \"\"\"\n    if n <= 0:\n        return None\n    return ((2*n-1)**2 - n**2) // 8\n\n\nimport unittest\nclass TestFirst(unittest.TestCase):\n    def testFirst(self):\n        test = self\n        Test = self\n        test.assert_equals = Test.assertEqual\n        Test.assert_equals = Test.assertEqual\n\n        test.assert_equals(nth_hexagonal(1), 1)\n        test.assert_equals(nth_hexagonal(2), 6)\n        test.assert_equals(nth_hexagonal(3), 15)\n        test.assert_equals(nth_hexagonal(4), 28)"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "\"\"\"Question:\nWrite a function to find the nth hexagonal number.\nHints:\nUse math.ceil() to calculate ceil value.\n\n\"\"\""
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Time complexity: O(N)\n# Space complexity: O(1)\ndef nth_hexagonal_number(n: int) -> int:\n    return (n * (2 * n - 1))\n\n\n# Time complexity: O(N)\n# Space complexity: O(1)\ndef nth_hexagonal_number_alt(n: int) -> int:\n    return n * (2 * n - 1)\n\n\nif __name__ == '__main__':\n    print(nth_hexagonal_number(4))\n    print(nth_hexagonal_number_alt(4))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def nth_hexagonal_number(n):\n    return ((2 * n - 1) * n) // 3\n\n\ndef test_nth_hexagonal_number():\n    assert nth_hexagonal_number(1) == 1\n    assert nth_hexagonal_number(2) == 6\n    assert nth_hexagonal_number(3) == 15\n    assert nth_hexagonal_number(4) == 28\n    assert nth_hexagonal_number(5) == 45\n    assert nth_hexagonal_number(6) == 66\n    assert nth_hexagonal_number(7) == 91\n    assert nth_hexagonal_number(8) == 120\n    assert nth_hexagonal_number(9) == 155\n    assert nth_hexagonal_number(10) == 196\n    assert nth_hexagonal_number(11) == 241\n    assert nth_hexagonal_number(12) == 296"
    }
  ]
}