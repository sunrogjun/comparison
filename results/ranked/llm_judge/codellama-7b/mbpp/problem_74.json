{
  "timestamp": "2025-09-14T22:51:31.283036",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 74,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius):\n    return 4 * pi * radius ** 2"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def surfaceArea(r):\n    return 4 * math.pi * r**2"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius):\n    return 4 * pi * radius ** 2\n\n\ndef test_surface_area():\n    \"\"\"\n    >>> surface_area(1)\n    12.566370614359172\n    >>> surface_area(2)\n    50.26548245743669\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\n\ndef main():\n    print(surface_area(3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius):\n    \"\"\"\n    >>> surface_area(10)\n    523.5987755982989\n    >>> surface_area(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be non-negative\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"radius must be non-negative\")\n    return 4 * pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def surface_area(r):\n    \"\"\"\n    >>> surface_area(10)\n    523.5987755982989\n    >>> surface_area(1)\n    12.566370614359172\n    \"\"\"\n    return 4 * 3.14 * r ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef sphere_area(radius):\n    return 4 * pi * radius * radius\n\n\ndef test_sphere_area():\n    \"\"\"\"Run simple test cases\"\"\"\n    assert sphere_area(5) == 502.654462745\n    assert sphere_area(3.14) == 12.566370614"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# This code doesn't make sense.\n\nfrom math import pi\n\ndef surface_area(radius: float) -> float:\n    return 4 * pi * radius ** 2"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    \"\"\"\n    Calculates the surface area of a sphere.\n    \"\"\"\n\n    return 4 * math.pi * radius ** 2\n\nprint(surface_area(5))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import math\n\n\ndef surface_area(r):\n    \"\"\"\n    >>> surface_area(10)\n    523.5987755982989\n    \"\"\"\n    return 4 * math.pi * r ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef sphere_area(radius: float) -> float:\n    \"\"\"\n    >>> sphere_area(2.0)\n    50.26548245743669\n    \"\"\"\n    return 4 * 3.14 * pow(radius, 2)\n\n\ndef main():\n    radius = float(input(\"Enter the radius of the sphere: \"))\n    print(\"The area of the sphere is:\", sphere_area(radius))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area_of_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\nif __name__ == '__main__':\n    print(surface_area_of_sphere(3))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import math\n\ndef find_surface_area(radius):\n    \"\"\"Find the surface area of a sphere.\"\"\"\n\n    surface_area = 4 * math.pi * radius ** 2\n    return surface_area\n\ndef test_find_surface_area():\n    \"\"\"Test for find_surface_area.\"\"\"\n\n    assert find_surface_area(5) == 314.1592653589793\n    assert find_surface_area(3) == 282.74333882308138\n    assert find_surface_area(1) == 12.566370614359172\n\nif __name__ == '__main__':\n    test_find_surface_area()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def surface_area(radius: float) -> float:\n    \"\"\"Returns the surface area of a sphere.\n\n    >>> surface_area(10)\n    523.5987755982989\n    \"\"\"\n    return 4 * 3.14 * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(r):\n    return 4 * math.pi * r ** 2\n\ndef surface_area_test():\n    radius = 1\n    assert surface_area(radius) == 4"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\nif __name__ == '__main__':\n    print(surface_area(4))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def surface_area(radius: float) -> float:\n    \"\"\"Surface area of a sphere.\n\n    >>> surface_area(10)\n    523.5987755982989\n    \"\"\"\n    import math\n\n    return 4 * math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(f\"{surface_area(10)=}\")"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from typing import Union\n\nimport math\n\n\ndef surface_area_sphere(radius: Union[int, float]) -> float:\n    \"\"\"Calculates the surface area of a sphere.\n\n    Args:\n        radius: radius of a sphere.\n\n    Examples:\n        >>> assert surface_area_sphere(3) == 312.127092542\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\ndef surface_area_sphere_with_help(radius: Union[int, float]) -> float:\n    \"\"\"Calculates the surface area of a sphere.\n\n    Args:\n        radius: radius of a sphere.\n\n    Examples:\n        >>> assert surface_area_sphere_with_help(3) == 312.127092542\n    \"\"\"\n    return 4 * math.pi * math.pow(radius, 2)\n\n\nif __name__ == \"__main__\":\n    print(surface_area_sphere(3))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area_sphere(r):\n    return 4 * pi * r ** 2\n\n\nprint(surface_area_sphere(5))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(radius: float) -> float:\n    \"\"\"Calculate the surface area of a sphere.\n\n    >>> surface_area(3)\n    52.26494895798118\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "from typing import Union\n\nimport math\n\n\ndef surface_area(radius: Union[int, float]) -> float:\n    \"\"\"Returns the surface area of a sphere.\n\n    >>> surface_area(3)\n    52.35987755982981\n    >>> surface_area(-3)\n    Traceback (most recent call last):\n        ...\n    ValueError: surface_area() only accepts non-negative values\n    >>> surface_area('A')\n    Traceback (most recent call last):\n        ...\n    TypeError: surface_area() only accepts int or float values\n    \"\"\"\n    if type(radius) not in [int, float]:\n        raise TypeError(\"surface_area() only accepts int or float values\")\n    if radius < 0:\n        raise ValueError(\"surface_area() only accepts non-negative values\")\n\n    return 4 * math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\n\n\ndef surface_area_sphere(radius: float) -> float:\n    \"\"\"Calculate the surface area of a sphere.\n\n    >>> surface_area_sphere(10)\n    523.5987755982989\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "import math\n\n\ndef surface_area(radius):\n    return 4 * math.pi * radius**2\n\n\ndef test_surface_area():\n    \"\"\"\n    >>> surface_area(10)\n    523.5987755982989\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius):\n    \"\"\"\n    >>> surface_area(10)\n    523.5987755982989\n    >>> surface_area(5)\n    31.41592653589793\n    \"\"\"\n    return 4 * pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius: int) -> float:\n    \"\"\"Calculates the surface area of a sphere.\n\n    >>> surface_area(10)\n    523.5987755982989\n    \"\"\"\n    return 4 * pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def surface_area(radius):\n    \"\"\"\n    >>> surface_area(10)\n    523.5987755982989\n    \"\"\"\n    return 4 * 3.141592653589793 * radius**2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\nassert surface_area(5) == 56.548721216\nassert surface_area(1) == 12.566370614\nassert surface_area(2.3) == 50.265482457"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def surface_area(radius):\n    return 4 * 3.14 * radius ** 2"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "from math import pi\n\ndef surface_area(radius):\n    \"\"\"\n    surface area of a sphere\n    \"\"\"\n    return 4 * pi * radius**2"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def surface_area(radius):\n    return 4 * 3.14 * radius ** 2"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius):\n    return 4 * pi * radius ** 2"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius):\n    \"\"\"Calculate the surface area of a sphere.\"\"\"\n    return 4 * pi * radius ** 2"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import math\n\ndef surfaceArea(radius):\n    return 4 * math.pi * radius ** 2"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def sphere_surface_area(radius: int) -> float:\n    \"\"\"Find the surface area of a sphere.\n\n    :param radius: The radius of the sphere.\n    :return: The surface area of the sphere.\n    \"\"\"\n    return 4 * 3.14 * pow(radius, 2)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "# This is the answer using math.pi\n\nfrom math import pi\n\ndef find_surface_area(radius):\n    return 4 * pi * radius ** 2\n\n# This is the answer using the formula\n\ndef find_surface_area_formula(radius):\n    return 4 * radius ** 2 * pi"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius**2\n\nprint(surface_area(5))\nprint(surface_area(10))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    return 4 * 3.14 * radius ** 2\n\n\nif __name__ == '__main__':\n    print(surface_area(2))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef surface_area(radius):\n    return 4 * pi * radius ** 2\n\nassert surface_area(1) == 4 * pi"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import math\n\ndef find_surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\nprint(find_surface_area(10))\nprint(find_surface_area(5))\nprint(find_surface_area(3))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\nprint(surface_area(10))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_sphere_surface_area(radius):\n    return 4 * math.pi * radius * radius\n\n\nif __name__ == '__main__':\n    print(find_sphere_surface_area(2))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def surface_area(radius: int) -> int:\n    return 4 * 3.14 * radius ** 2\n\nprint(surface_area(1))\nprint(surface_area(2))\nprint(surface_area(3))\nprint(surface_area(4))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(r):\n    return 4 * math.pi * r**2\n\n\nprint(surface_area(5))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius: float) -> float:\n    \"\"\"Calculate surface area of a sphere.\"\"\"\n    return 4 * pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(10))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius: int):\n    return 4 * math.pi * radius**2\n\nprint(surface_area(5))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    # pi = 3.14\n    return 4 * math.pi * radius**2"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    return 4 * 3.14 * radius ** 2\n\n\nprint(surface_area(12))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\nif __name__ == '__main__':\n    print(surface_area(3))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\nprint(surface_area(5))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "# This is the function to find the surface area of a sphere\ndef area_sphere(radius):\n    from math import pi\n    return 4 * pi * radius ** 2\n\n# This is the main program\ndef main():\n    # This is a loop to run the program until the user enters a negative number\n    while True:\n        # Ask the user to enter the radius of a sphere\n        radius = float(input('Enter the radius of the sphere: '))\n        # If the user enters a negative number, the loop stops\n        if radius < 0:\n            break\n        # Otherwise, the program calculates the surface area of the sphere and prints the result\n        print('The surface area of the sphere is', area_sphere(radius))\n\n# When we run the program, this is what happens\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_surface_area(radius):\n    return 4 * 3.14 * radius**2\n\nprint(find_surface_area(3))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef surface_area(radius):\n    return 4 * pi * radius ** 2\n\n\ndef test_surface_area():\n    assert surface_area(1) == 4 * pi\n    assert surface_area(2.1) == 4 * pi * 2.1 ** 2"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    if radius < 0:\n        raise ValueError('Radius must be a positive number.')\n    return 4 * math.pi * radius ** 2"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius):\n    return 4 * pi * radius ** 2\n\n\ndef surface_area2(radius):\n    return 4 * pi * radius ** 2\n\n\nif __name__ == '__main__':\n    print(surface_area(3))\n    print(surface_area2(3))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def surface_area(radius: float) -> float:\n    \"\"\"Calculate the surface area of a sphere.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * 3.14 * radius ** 2"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef get_surface_area(radius: float) -> float:\n    return 4 * pi * radius ** 2"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def surface_area_of_sphere(r):\n    \"\"\"\n    Finds the surface area of a sphere.\n    \"\"\"\n    return 4 * 3.14 * r ** 2\n\ndef surface_area_of_sphere_with_formula(r):\n    \"\"\"\n    Finds the surface area of a sphere.\n    \"\"\"\n    return 4 * 3.14 * r ** 2"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area_sphere(radius):\n    return 4 * math.pi * radius * radius\n\n\nif __name__ == '__main__':\n    radius = float(input('Enter radius: '))\n    print('Surface area:', surface_area_sphere(radius))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def surface_area(radius: int) -> float:\n    \"\"\"Calculates the surface area of a sphere.\n\n    Arguments:\n        radius {int} -- The radius of the sphere.\n\n    Returns:\n        float -- The surface area of the sphere.\n    \"\"\"\n    return 4 * 3.14 * pow(radius, 2)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius: float) -> float:\n    \"\"\"\n    >>> surface_area(2.3)\n    51.83467555217\n    \"\"\"\n    return 4 * math.pi * radius**2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def surface_area_sphere(radius):\n    return 4 * 3.14 * radius ** 2"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def surface_area(radius: float) -> float:\n    \"\"\"Find the surface area of a sphere.\n\n    >>> surface_area(1)\n    53.5\n    \"\"\"\n    return 4 * 3.14 * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef surface_area(r):\n    return 4 * pi * r ** 2"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef find_sphere_surface_area(radius):\n    \"\"\"\n    This function calculates the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\nradius = float(input(\"Enter the radius of the sphere: \"))\n\nprint(f\"The surface area of the sphere is: {find_sphere_surface_area(radius)}\")"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    pi = 3.14\n    return 4 * pi * radius ** 2"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\nprint(surface_area(1))\nprint(surface_area(2))\nprint(surface_area(3))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius: float) -> float:\n    return 4 * pi * radius**2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(1))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def surface_area(radius: float) -> float:\n    \"\"\"Calculate the surface area of a sphere.\"\"\"\n\n    return 4 * 3.14 * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(2))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef surface_area(radius: Union[int, float]) -> float:\n    \"\"\"Calculates the surface area of a sphere.\n\n    Args:\n        radius: The radius of the sphere.\n\n    Returns:\n        The surface area of the sphere.\n    \"\"\"\n    return 4 * 3.14 * radius ** 2"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "# This code doesn't work.\ndef surface_area(r):\n    return 4 * 3.14 * r ** 2\n\n# This code does work.\ndef surface_area2(r):\n    return 4 * 3.14 * r ** 2"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import math\n\n\ndef find_sphere_surface_area(radius):\n    \"\"\"\n    This function calculates the surface area of a sphere.\n\n    :param radius: the radius of the sphere\n    :return: the surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * radius * radius\n\n\nif __name__ == '__main__':\n    radius = 10\n    print(find_sphere_surface_area(radius))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius: float) -> float:\n    \"\"\"Calculate the surface area of a sphere.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(5))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius: int) -> float:\n    \"\"\"Calculates the surface area of a sphere.\n\n    Arguments:\n        radius {int} -- Radius of the sphere.\n\n    Returns:\n        float -- Surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(3))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\n\ndef test_surface_area():\n    \"\"\"Test for surface_area function.\"\"\"\n    assert surface_area(1) == 4 * math.pi\n    assert surface_area(0) == 0"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def surface_area(radius: int) -> float:\n    \"\"\"Calculate surface area of a sphere.\n\n    >>> surface_area(10)\n    523.5987755982989\n    >>> surface_area(0)\n    0.0\n    \"\"\"\n    return 4 * 3.14 * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius: float) -> float:\n    \"\"\"Calculates the surface area of a sphere.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(10))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters\n    ----------\n    radius : int\n        The radius of the sphere.\n\n    Returns\n    -------\n    surface_area : int\n        The surface area of the sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * radius ** 2\n    return surface_area\n\n\ndef main():\n    \"\"\"Print the surface area of a sphere.\"\"\"\n    print(surface_area_sphere(5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def sphereArea(r):\n    return 4 * math.pi * r ** 2\n\n\"\"\"\nWrite a function to find the total surface area of a sphere, where the radius is provided as an input.\n\nThe function should return the total surface area as an output.\n\nUse the formula: 4 * pi * r^2\n\nIn this formula, pi = 3.14\n\"\"\""
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius: int) -> float:\n    \"\"\"Calculates the surface area of a sphere.\n\n    Args:\n        radius (int): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def surfaceArea(radius: float) -> float:\n    \"\"\"\n    >>> surfaceArea(10)\n    523.5987755982989\n    \"\"\"\n    # surface area of a sphere = 4 * pi * r^2\n    return 4 * 3.141592653589793 * radius * radius\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def surfaceArea(radius):\n    \"\"\"\n    :param radius: int - radius in cm\n    :return: float - surface are of the sphere\n    \"\"\"\n    # Write your code here.\n    return 4 * math.pi * radius ** 2"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from math import pi\n\n\ndef find_surface_area(radius: float) -> float:\n    \"\"\"Finds the surface area of a sphere.\n\n    Args:\n        radius: The radius of the sphere.\n\n    Returns:\n        The surface area of the sphere.\n    \"\"\"\n    return 4 * pi * radius ** 2"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def surface_area(radius: int) -> float:\n    \"\"\"Find the surface area of a sphere.\n\n    Args:\n        radius (int): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * 3.14 * radius ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(2))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius):\n    return 4 * pi * radius ** 2\n\n\ndef test_surface_area():\n    \"\"\"\n    >>> surface_area(10)\n    628.3185307179586\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from math import pi\n\ndef surface_area(radius: float) -> float:\n    return 4 * pi * radius ** 2\n\ndef surface_area_naive(radius: float) -> float:\n    return 4 * 3.141592653589793 * radius ** 2\n\n\n# TESTS\nassert surface_area(1) == surface_area_naive(1)\nassert surface_area(2) == surface_area_naive(2)\nassert surface_area(3) == surface_area_naive(3)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius: float) -> float:\n    return 4 * math.pi * radius ** 2\n\n\ndef test_surface_area():\n    \"\"\"Test for surface_area function.\"\"\"\n    assert surface_area(10) == 523.5987755982989"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable, ungrouped-imports\nfrom expects import *\n\nfrom lib.sphere_surface_area import surface_area\n\nwith description('surface_area'):\n    with it('calculates the surface area of a sphere with radius 1'):\n        expect(surface_area(1)).to(equal(4 * 3.14))\n\n    with it('calculates the surface area of a sphere with radius 5'):\n        expect(surface_area(5)).to(equal(50.26548245743669))\n\n    with it('calculates the surface area of a sphere with radius 2.5'):\n        expect(surface_area(2.5)).to(equal(50.26548245743669))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\ndef test_function(test_case):\n    radius = test_case[0]\n    solution = test_case[1]\n    output = surface_area(radius)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function((3, 28.32))\ntest_function((1, 4.128))\ntest_function((5, 60.597))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius: float) -> float:\n    \"\"\"\n    Calculate the surface area of a sphere.\n    >>> surface_area(3)\n    52.35987755982981\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\n\ndef test_surface_area():\n    assert surface_area(1) == 4 * math.pi\n    assert surface_area(5) == 50 * math.pi"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def surface_area(radius):\n    return 4 * 3.14 * radius ** 2\n\nassert surface_area(5) == 56.56854249492381, \"Should be 56.56854249492381\"\nassert surface_area(1) == 12.566370614359172, \"Should be 12.566370614359172\"\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef volume(radius):\n    return 4/3 * 3.14 * radius ** 3\n\nassert volume(5) == 523.5987755982989, \"Should be 523.5987755982989\"\nassert volume(1) == 4.1887902047863905, \"Should be 4.1887902047863905\""
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef surface_area(radius: Union[int, float]) -> float:\n    \"\"\"Finds the surface area of a sphere with given radius.\n\n    >>> surface_area(10)\n    523.5987755982989\n    \"\"\"\n    return 4 * 3.14159265359 * pow(radius, 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def sphere_area(r):\n    \"\"\"\n    Return the surface area of a sphere of radius r.\n\n    Args:\n     r (float): The radius of the sphere.\n    Returns:\n     float: The surface area of a sphere of radius r.\n    \"\"\"\n    return 4 * 3.14 * r**2\n\nprint(sphere_area(2))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def surface_area(radius):\n    # surface area = 4 * pi * r^2\n    return 4 * 3.14159 * radius ** 2\n\n\ndef test_surface_area():\n    assert surface_area(1) == 4.0\n    assert surface_area(2) == 16.0\n    assert surface_area(3) == 28.0"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius):\n    return 4 * pi * radius ** 2\n\n\ndef surface_area_2(radius):\n    return 4 * pi * radius ** 2\n\n\ndef surface_area_3(radius):\n    return 4 * pi * radius ** 2\n\n\ndef surface_area_4(radius):\n    return 4 * pi * radius ** 2\n\n\ndef surface_area_5(radius):\n    return 4 * pi * radius ** 2"
    }
  ]
}