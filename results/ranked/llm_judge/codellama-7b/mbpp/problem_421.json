{
  "timestamp": "2025-09-15T01:29:53.538195",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 421,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def median(a, b, c, d):\n    return (a + b + c + d - max(a, b, c, d) - min(a, b, c, d)) / 2\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    d = int(input(\"Enter fourth side: \"))\n    print(\"Median:\", median(a, b, c, d))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "__authors__ = ['\"Bill Magnuson\" <billmag@mit.edu>']\n\ndef median(a, b, c, d):\n  \"\"\" Return the median of the trapezium defined by the four points.\n\n  Args:\n    a, b, c, d: Four vertices of a trapezium.\n\n  Returns:\n    The median of the trapezium as a float.\n  \"\"\"\n  return (a[0] + b[0] + c[0] + d[0])/4.0"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(1, 2, 3, 4)\n    2.5\n    >>> trapezium_median(1, 1, 1, 1)\n    1.0\n    >>> trapezium_median(1, 1, 1, 1)\n    1.0\n    >>> trapezium_median(1, 1, 1, 1)\n    1.0\n    \"\"\"\n    if a + b <= c + d:\n        return (a + b + c + d) / 2\n    else:\n        return (\n            (a + b) / 2\n            + (c + d) / 2\n            + sqrt(((a - b) ** 2 + (c - d) ** 2) / 4)\n            - ((a - b) * (c - d)) / (2 * sqrt(((a - b) ** 2 + (c - d) ** 2) / 4))\n        )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\na = int(input(\"a = \"))\nb = int(input(\"b = \"))\nc = int(input(\"c = \"))\nd = int(input(\"d = \"))\n\nprint(\"Median of trapezium: {}\".format(trapezium_median(a, b, c, d)))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef median_of_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium(3, 12, 6, 8)\n    7.5\n    >>> median_of_trapezium(3, 12, 6, 9)\n    8.0\n    >>> median_of_trapezium(3, 12, 6, 10)\n    8.5\n    >>> median_of_trapezium(3, 12, 6, 12)\n    9.0\n    \"\"\"\n    if a + b <= c + d:\n        return (a + b + c + d) / 2\n    else:\n        return (a ** 2 + b ** 2 - c ** 2 - d ** 2) / (2 * a * b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nprint(median_trapezium(1, 2, 3, 4))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def median(a, b, c, d):\n    return (((a+c)/2)*(b+d)/(b+d+a+c))\n\n\nif __name__ == \"__main__\":\n    a = 10\n    b = 20\n    c = 30\n    d = 40\n    print(median(a, b, c, d))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_median(a, b, c, d):\n    \"\"\"\n    >>> find_median(1, 2, 3, 4)\n    2.5\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def trapeziumNumberMedian(self, t):\n        \"\"\"\n        O(1)\n        :param t: a list of integer\n        :return: a integer\n        \"\"\"\n        a = t[0]\n        b = t[1]\n        c = t[2]\n        d = t[3]\n        if a < b: a, b = b, a\n        if c < d: c, d = d, c\n        if a + b + c + d == 1:\n            return 0.5\n        if a + b + c + d == 2:\n            return 1\n        if a + b + c + d == 3:\n            return 1.5\n\n        if a + b <= c + d:\n            return 0.5 * (a + b + c + d)\n        else:\n            return 0.5 * (a + b + 2 * c + d)\n\n\nif __name__ == \"__main__\":\n    assert Solution().trapeziumNumberMedian([1, 2, 3, 4]) == 2"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    print(median_trapezium(1, 2, 3, 4))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def median(a, b, c, d):\n    \"\"\"\n    >>> median(1, 2, 3, 4)\n    2.5\n    >>> median(4, 1, 2, 3)\n    2.5\n    >>> median(1, 4, 2, 3)\n    2.5\n    >>> median(1, 3, 4, 2)\n    2.5\n    >>> median(3, 4, 1, 2)\n    2.5\n    >>> median(3, 2, 4, 1)\n    2.5\n    >>> median(4, 3, 1, 2)\n    2.5\n    >>> median(4, 2, 3, 1)\n    2.5\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def median(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    a, b, c, d = map(int, input().split())\n    print(median(a, b, c, d))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef median_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_trapezium(1, 2, 3, 4)\n    2.0\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2\n\nif __name__ == '__main__':\n    a, b, c, d = [int(input()) for _ in range(4)]\n    print(median_trapezium(a, b, c, d))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def trapezoid(self, a, b, c, d):\n        \"\"\"\n        a, b, c, d are integers\n\n        :param a:\n        :param b:\n        :param c:\n        :param d:\n        :return:\n        \"\"\"\n        return (a+b+c+d)/4.0\n\n    def trapezoid_error(self, a, b, c, d):\n        \"\"\"\n        a, b, c, d are integers\n\n        :param a:\n        :param b:\n        :param c:\n        :param d:\n        :return:\n        \"\"\"\n        return (a+b+c+d)/4.0\n\n    def trapezoid_error2(self, a, b, c, d):\n        \"\"\"\n        a, b, c, d are integers\n\n        :param a:\n        :param b:\n        :param c:\n        :param d:\n        :return:\n        \"\"\"\n        return (a+b+c+d)/4.0\n\n    def trapezoid_error3(self, a, b, c, d):\n        \"\"\"\n        a, b, c, d are integers\n\n        :param a:\n        :param b:\n        :param c:\n        :param d:\n        :return:\n        \"\"\"\n        return (a+b+c+d)/4.0\n\n    def trapezoid_error4(self, a, b, c, d):\n        \"\"\"\n        a, b, c, d are integers\n\n        :param a:\n        :param b:\n        :param c:\n        :param d:\n        :return:\n        \"\"\"\n        return (a+b+c+d)/4.0\n\n    def trapezoid_error5(self, a, b, c, d):\n        \"\"\"\n        a, b, c, d are integers\n\n        :param a:\n        :param b:\n        :param c:\n        :param d:\n        :return:\n        \"\"\"\n        return (a+b+c+"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\ndef main():\n    print(trapezium_median(1, 2, 3, 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import unittest\n\n\ndef median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nclass TestMedianTrapezium(unittest.TestCase):\n    def test_median_trapezium(self):\n        self.assertEqual(median_trapezium(2, 3, 4, 5), 3)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "__authors__ = ['\"Bill Magnuson\" <billmag@mit.edu>']\n\nfrom extensions import timing\n\ndef get_median(width1, height1, width2, height2):\n  \"\"\" Return the median of a trapezium.\n\n  Args:\n    width1: The width of the first rectangle.\n    height1: The height of the first rectangle.\n    width2: The width of the second rectangle.\n    height2: The height of the second rectangle.\n\n  Returns:\n    The median of the trapezium formed by the two rectangles.\n  \"\"\"\n  return (width1 * height1 + width2 * height2) / 2\n\n@timing.timing\ndef median_trapezium_test():\n  \"\"\" Test the median trapezium function.\n  \"\"\"\n  assert get_median(1, 2, 3, 4) == 2.5\n  assert get_median(1, 1, 3, 4) == 2\n  assert get_median(1, 1, 2, 4) == 2"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(1, 2, 3, 4)\n    2.5\n    >>> trapezium_median(4, 3, 2, 1)\n    2.5\n    \"\"\"\n    return (\n        (a + b + c + d - max(a, b, c, d)) * min(a, b, c, d)\n    ) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def median(a, b, c, d):\n    return (((a + b + c + d) - max(a, b, c, d) - min(a, b, c, d)) / 2)\n\n\nif __name__ == '__main__':\n    a = int(input('Enter a: '))\n    b = int(input('Enter b: '))\n    c = int(input('Enter c: '))\n    d = int(input('Enter d: '))\n\n    print(median(a, b, c, d))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def trapeziumNumber(self, t):\n        \"\"\"\n        Let the median be M.\n        The median is between two sides with length:\n        L_1 = (t[0] + t[1])/2\n        L_2 = (t[1] + t[2])/2\n\n        M = L_1 + L_2\n        M = (t[0] + t[1] + t[2])/2\n\n        :param t: a list of integer\n        :return: integer\n        \"\"\"\n        return (t[0] + t[1] + t[2]) / 2\n\n\nif __name__ == \"__main__\":\n    assert Solution().trapeziumNumber([1, 3, 5]) == 4"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    \"\"\"\n    Returns the median of the trapezium\n    \"\"\"\n    if a + b <= c + d:\n        return (a + b + c + d) / 2\n    else:\n        return (a + b - c - d) / 2\n\nif __name__ == '__main__':\n    a = 3\n    b = 7\n    c = 8\n    d = 6\n    print(median_trapezium(a, b, c, d))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\n\n\ndef median_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_trapezium(1, 1, 1, 1)\n    1.0\n    >>> median_trapezium(1, 1, 1, 1.5)\n    1.25\n    >>> median_trapezium(1, 1, 1, 2)\n    1.5\n    >>> median_trapezium(1, 1, 1, 3)\n    1.6666666666666667\n    >>> median_trapezium(1, 1, 1, 4)\n    1.75\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\ndef median_trapezium_2(a, b, c, d):\n    \"\"\"\n    >>> median_trapezium_2(1, 1, 1, 1)\n    1.0\n    >>> median_trapezium_2(1, 1, 1, 1.5)\n    1.25\n    >>> median_trapezium_2(1, 1, 1, 2)\n    1.5\n    >>> median_trapezium_2(1, 1, 1, 3)\n    1.6666666666666667\n    >>> median_trapezium_2(1, 1, 1, 4)\n    1.75\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\ndef median_trapezium_3(a, b, c, d):\n    \"\"\"\n    >>> median_trapezium_3(1, 1, 1, 1)\n    1.0\n    >>> median_trapezium_3(1, 1, 1, 1.5)\n    1.25\n    >>> median_trapezium_3(1, 1, 1, 2)\n    1.5\n    >>> median_trapezium_3(1, 1, 1, 3)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (((a + b) / 2) + ((c + d) / 2)) / 2"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def median_of_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    print(median_of_trapezium(1, 2, 3, 4))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def median_of_trapezium(a, b, c, d):\n    return ((a+b+c+d)/4) * (1/2)\n\n\nif __name__ == \"__main__\":\n    a, b, c, d = [int(x) for x in input().split()]\n    print(median_of_trapezium(a, b, c, d))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def trapezium(base1, base2, height):\n    return (base1 + base2) / 2 * height\n\n\ndef main():\n    print(trapezium(6, 8, 10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    a = 2\n    b = 2\n    c = 3\n    d = 4\n    print(trapezium_median(a, b, c, d))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def find_median(base_1: int, base_2: int, height: int) -> float:\n    \"\"\"\n    >>> find_median(2, 3, 4)\n    2.5\n    >>> find_median(1, 1, 1)\n    0.5\n    \"\"\"\n    return (base_1 + base_2 + height) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def trapezium(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\nif __name__ == \"__main__\":\n    a, b, c, d = [int(x) for x in input().split()]\n    print(trapezium(a, b, c, d))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "import math\n\ndef trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(1, 2, 3, 4)\n    1.5\n    >>> trapezium_median(1, 2, 3, 5)\n    1.6666666666666667\n    >>> trapezium_median(1, 2, 5, 5)\n    1.8\n    >>> trapezium_median(1, 1, 2, 2)\n    1.5\n    >>> trapezium_median(1, 1, 2, 3)\n    1.6666666666666667\n    >>> trapezium_median(1, 1, 3, 3)\n    2.0\n    >>> trapezium_median(1, 2, 4, 4)\n    2.0\n    >>> trapezium_median(1, 2, 5, 6)\n    2.2\n    >>> trapezium_median(1, 3, 4, 5)\n    2.25\n    >>> trapezium_median(1, 3, 5, 6)\n    2.3333333333333335\n    >>> trapezium_median(2, 3, 4, 5)\n    2.5\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    d = int(input())\n    print(median_trapezium(a, b, c, d))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (0.5 * a + 0.5 * b + c + d) / 4\n\n\nif __name__ == '__main__':\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    d = int(input(\"Enter d: \"))\n\n    print(median_trapezium(a, b, c, d))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def median(a, b, c, d):\n    \"\"\"\n    >>> median(1, 2, 3, 4)\n    2.5\n    >>> median(1, 2, 3, 5)\n    2.0\n    >>> median(1, 2, 4, 5)\n    2.5\n    >>> median(1, 3, 4, 5)\n    3.0\n    >>> median(1, 2, 3, 6)\n    2.5\n    \"\"\"\n    return (\n        (a + b + c + d)\n        - max(a, b, c, d)\n        - min(a, b, c, d)\n    ) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(3, 4, 6, 2)\n    3.5\n    >>> trapezium_median(2, 3, 3, 4)\n    2.5\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "def median_of_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium(3, 2, 5, 7)\n    4.0\n    >>> median_of_trapezium(3, 2, 5, 7.5)\n    4.0\n    \"\"\"\n    return (\n        (\n            (a + b + c + d) *\n            (a + b + c + d - a) *\n            (a + b + c + d - b) *\n            (a + b + c + d - c)\n        ) ** 0.5\n    ) / (2 * (a + b + c + d))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\nif __name__ == '__main__':\n    a, b, c, d = [int(input()) for _ in range(4)]\n    print(median_trapezium(a, b, c, d))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (a+b+c+d)/4\n\n\ndef main():\n    a = int(input(\"Enter first side of trapezium: \"))\n    b = int(input(\"Enter second side of trapezium: \"))\n    c = int(input(\"Enter third side of trapezium: \"))\n    d = int(input(\"Enter fourth side of trapezium: \"))\n    print(f\"Median of trapezium is {median_trapezium(a, b, c, d)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef trapezium_median(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\ndef main():\n    a = float(input(\"Enter a: \"))\n    b = float(input(\"Enter b: \"))\n    c = float(input(\"Enter c: \"))\n    d = float(input(\"Enter d: \"))\n    print(f\"The median is {trapezium_median(a, b, c, d)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_median(a, b, c, d):\n    # Write your code here\n    return (a+b+c+d)/4"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def find_median(a, b, c, d):\n    return (a+b+c+d)/4\n\n\ndef main():\n    a, b, c, d = [int(x) for x in input().split()]\n    print(find_median(a, b, c, d))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def median_of_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium(1, 2, 3, 4)\n    2.0\n    >>> median_of_trapezium(4, 1, 2, 3)\n    2.5\n    >>> median_of_trapezium(1, 2, 3, 1)\n    2.0\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first side of the trapezium: \"))\n    b = int(input(\"Enter the second side of the trapezium: \"))\n    c = int(input(\"Enter the third side of the trapezium: \"))\n    d = int(input(\"Enter the fourth side of the trapezium: \"))\n    print(\"The median of the trapezium is: \", trapezium_median(a, b, c, d))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    :param: a - float - side of trapezium\n    :param: b - float - side of trapezium\n    :param: c - float - side of trapezium\n    :param: d - float - side of trapezium\n    TODO: complete the docstring\n    :return: float - median of trapezium\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nprint(trapezium_median(2, 3, 4, 5))\nprint(trapezium_median(2, 4, 6, 8))\nprint(trapezium_median(1, 1, 1, 1))\nprint(trapezium_median(5, 6, 7, 5))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import math\nfrom typing import Union\n\n\ndef trapezium_median(base_1: int, base_2: int, height: int) -> Union[float, int]:\n    \"\"\"\n    Calculate median of trapezium.\n    :param base_1: first base.\n    :param base_2: second base.\n    :param height: height of trapezium.\n    :return: median of trapezium.\n    \"\"\"\n    if not isinstance(base_1, int) or not isinstance(base_2, int) or not isinstance(height, int):\n        raise TypeError('Base and height must be a integer.')\n    if base_1 <= 0 or base_2 <= 0 or height <= 0:\n        raise ValueError('Base and height must be greater than zero.')\n    return (base_1 + base_2) / 2 * height / math.sqrt((base_1 + base_2) / 2)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\n\ndef median_of_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium(1, 2, 3, 4)\n    1.75\n    >>> median_of_trapezium(1, 3, 5, 7)\n    2.5\n    \"\"\"\n    return (\n        (a + b + c + d) / 2\n    ) / math.sqrt(\n        (a + b) * (c + d)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef trapezium_median(a: int, b: int, c: int, d: int) -> Tuple[float, str]:\n    \"\"\"\n    >>> trapezium_median(2, 3, 4, 6)\n    (4.0, 'a + b + c + d/2')\n    >>> trapezium_median(2, 3, 6, 4)\n    (4.0, 'a + b + c + d/2')\n    >>> trapezium_median(3, 4, 2, 6)\n    (4.0, 'a + b + c + d/2')\n    >>> trapezium_median(3, 4, 6, 2)\n    (4.0, 'a + b + c + d/2')\n    >>> trapezium_median(4, 3, 2, 6)\n    (4.0, 'a + b + c + d/2')\n    >>> trapezium_median(4, 3, 6, 2)\n    (4.0, 'a + b + c + d/2')\n    >>> trapezium_median(6, 4, 3, 2)\n    (4.0, 'a + b + c + d/2')\n    >>> trapezium_median(6, 4, 2, 3)\n    (4.0, 'a + b + c + d/2')\n    \"\"\"\n    result = (a + b + c + d) / 2\n    return result, \"a + b + c + d/2\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(2, 3, 3, 4)\n    2.5\n    >>> trapezium_median(1, 2, 2, 3)\n    1.5\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(1, 2, 3, 4)\n    2.5\n    \"\"\"\n    return (a + b + c + d) / 4\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def median_of_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium(1, 2, 3, 4)\n    1.5\n    >>> median_of_trapezium(2, 3, 4, 5)\n    2.5\n    >>> median_of_trapezium(3, 4, 5, 6)\n    3.5\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    \"\"\"\n    Finds the median of a trapezium.\n    :param a: float\n    :param b: float\n    :param c: float\n    :param d: float\n    :return: float\n    \"\"\"\n    return (a + b + c + d) / 4\n\n\nif __name__ == '__main__':\n    a, b, c, d = [float(i) for i in input().split()]\n    print(median_trapezium(a, b, c, d))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def find_median(base1, base2, height):\n    \"\"\"\n    >>> find_median(10, 15, 12)\n    12\n    \"\"\"\n    return (base1 + base2) / 2 * height / (base1 + base2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return (a + b + c + d) / 2"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef median_of_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium(1, 2, 3, 4)\n    2.0\n    >>> median_of_trapezium(1, 2, 3, 3)\n    1.5\n    >>> median_of_trapezium(4, 3, 2, 1)\n    2.5\n    >>> median_of_trapezium(1, 2, 2, 2)\n    1.5\n    >>> median_of_trapezium(1, 3, 3, 1)\n    2.0\n    \"\"\"\n    p = 0.25 * (a + b + c + d)\n    if p <= a:\n        return p\n    elif p <= a + b:\n        return 0.5 * (a + b)\n    elif p <= a + b + c:\n        return 0.5 * (a + b + c)\n    elif p <= a + b + c + d:\n        return p\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(2, 3, 3, 4)\n    2.5\n    >>> trapezium_median(5, 6, 6, 7)\n    6.0\n    >>> trapezium_median(1, 2, 3, 4)\n    Traceback (most recent call last):\n        ...\n    ValueError: Not a valid trapezium.\n    >>> trapezium_median(1, 1, 1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Not a valid trapezium.\n    \"\"\"\n    if a + b <= c + d or a + c <= b + d or b + c <= a + d:\n        raise ValueError(\"Not a valid trapezium.\")\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom math import sqrt\nfrom typing import List\n\n\ndef trapezium_median(a: float, b: float, c: float, d: float) -> float:\n    \"\"\"Returns the median of a trapezium.\n\n    >>> trapezium_median(1, 2, 3, 4)\n    2.25\n    >>> trapezium_median(3, 4, 5, 6)\n    4.5\n    >>> trapezium_median(1, 2, 3, 4) != trapezium_median(1, 2, 4, 3)\n    True\n    \"\"\"\n    return (\n        (a + b + c + d)\n        - min((a, b, c, d))\n        - max((a, b, c, d))\n    ) / 2\n\n\ndef trapezium_median_naive(a: float, b: float, c: float, d: float) -> float:\n    \"\"\"Returns the median of a trapezium.\n\n    >>> trapezium_median_naive(1, 2, 3, 4)\n    2.25\n    >>> trapezium_median_naive(3, 4, 5, 6)\n    4.5\n    >>> trapezium_median_naive(1, 2, 3, 4) != trapezium_median_naive(1, 2, 4, 3)\n    True\n    \"\"\"\n    return (\n        (a + b + c + d)\n        - min((a, b, c, d))\n        - max((a, b, c, d))\n    ) / 2\n\n\ndef trapezium_median_naive_2(a: float, b: float, c: float, d: float) -> float:\n    \"\"\"Returns the median of a trapezium.\n\n    >>> trapezium_median_naive_2(1, 2, 3, 4)\n    2.25\n    >>> trapezium_median_naive_2(3, 4"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def find_median(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\ndef main():\n    a, b, c, d = map(int, input(\"Enter 4 sides of trapezium: \").split())\n    print(f\"Median: {find_median(a, b, c, d)}\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def trapezium_median(base1, base2, height):\n    return (base1 + base2) / 2 * height / 2"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from typing import Union\n\n\ndef trapezium_median(a: float, b: float, c: float, d: float) -> Union[float, str]:\n    \"\"\"Find the median of a trapezium.\n\n    :param a: first value\n    :param b: second value\n    :param c: third value\n    :param d: fourth value\n    :return: the median of a trapezium\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0 or d <= 0:\n        return \"Trapezium cannot have non-positive sides.\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    print(trapezium_median(1, 2, 3, 4))\n    print(trapezium_median(1, 2, 3, 0))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_trapezium(2, 3, 4, 5)\n    2.5\n    >>> median_trapezium(4, 5, 6, 7)\n    5.0\n    >>> median_trapezium(1, 2, 3, 4)\n    2.0\n    \"\"\"\n    return (a + b + c + d) / 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def find_median(a, b, c, d):\n    \"\"\"\n    >>> find_median(1, 2, 3, 4)\n    2\n    >>> find_median(2, 3, 4, 5)\n    3\n    \"\"\"\n    return (\n        (a + b + c + d)\n        - max(a, b, c, d)\n        - min(a, b, c, d)\n    ) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return 0.5 * ((a + b + c + d) - max(a, b, c, d) - min(a, b, c, d))\n\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        a, b, c, d = map(int, input().split())\n        print(trapezium_median(a, b, c, d))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef median(a, b, c, d):\n    \"\"\"\n    >>> median(2, 1, 3, 4)\n    2.0\n    >>> median(3, 4, 5, 6)\n    4.5\n    >>> median(1, 2, 3, 4)\n    2.5\n    \"\"\"\n    return (\n        (\n            a\n            + b\n            + c\n            + d\n            - max(a, b, c, d)\n            - min(a, b, c, d)\n        )\n        / 2\n    )\n\n\ndef median_formula(a, b, c, d):\n    \"\"\"\n    >>> median_formula(2, 1, 3, 4)\n    2.0\n    >>> median_formula(3, 4, 5, 6)\n    4.5\n    >>> median_formula(1, 2, 3, 4)\n    2.5\n    \"\"\"\n    p = (a + b + c + d) / 2\n    return (\n        p\n        - min(a, b, c, d)\n        - max(a, b, c, d)\n        + sqrt(\n            (\n                (p - a) ** 2\n                + (p - b) ** 2\n                + (p - c) ** 2\n                + (p - d) ** 2\n            )\n            - (4 * (min(a, b, c, d) * max(a, b, c, d)))\n        )\n        / 2\n    ) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\nif __name__ == '__main__':\n    print(trapezium_median(1, 2, 3, 4))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(1, 2, 2, 1)\n    1.5\n    >>> trapezium_median(1, 2, 3, 4)\n    2.0\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter the length of side a: \"))\n    b = float(input(\"Enter the length of side b: \"))\n    c = float(input(\"Enter the length of side c: \"))\n    d = float(input(\"Enter the length of side d: \"))\n    print(f\"Median of trapezium is {median_trapezium(a, b, c, d):.2f}\")"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_median(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    a, b, c, d = map(int, input().split())\n    print(find_median(a, b, c, d))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(3, 12, 13, 14)\n    12.5\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\nif __name__ == '__main__':\n    print(median_trapezium(1, 2, 3, 4))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef median_of_trapezium(a, b, c, d):\n    \"\"\"\n    :param a: length of side a of trapezium\n    :param b: length of side b of trapezium\n    :param c: length of side c of trapezium\n    :param d: length of side d of trapezium\n    :return: median of trapezium\n\n    >>> median_of_trapezium(3, 4, 5, 6)\n    5.0\n    >>> median_of_trapezium(3, 4, 5, 7)\n    5.0\n    >>> median_of_trapezium(3, 4, 5, 5)\n    5.0\n    >>> median_of_trapezium(3, 4, 5, 2)\n    3.0\n    >>> median_of_trapezium(3, 4, 5, 2)\n    3.0\n    >>> median_of_trapezium(3, 4, 5, 1)\n    2.0\n    >>> median_of_trapezium(3, 4, 5, 0)\n    2.0\n    >>> median_of_trapezium(3, 4, 5, -1)\n    2.0\n    >>> median_of_trapezium(3, 4, 5, -2)\n    2.0\n    >>> median_of_trapezium(3, 4, 5, -3)\n    1.0\n    >>> median_of_trapezium(3, 4, 5, -4)\n    1.0\n    >>> median_of_trapezium(3, 4, 5, -5)\n    0.0\n    \"\"\"\n    p = 0.5 * (a + b + c + d)\n    if p >= a and p >= b and p >= c and p >= d:\n        return p\n\n    # p is a length of a side.\n    # if p is a length of a side, then p*p is the area of a trapezium.\n    # area = 1/2 * p *"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    print(trapezium_median(2, 3, 4, 5))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return ((a + b + c + d) / 2) * ((a + b + c + d) / 2 - a) / ((b - a) + (c - d))\n\n\nif __name__ == \"__main__\":\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    print(trapezium_median(a, b, c, d))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(1, 1, 1, 1)\n    1.0\n    >>> trapezium_median(1, 1, 1, 2)\n    1.5\n    >>> trapezium_median(1, 2, 2, 2)\n    2.0\n    >>> trapezium_median(1, 2, 2, 3)\n    2.5\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(1, 2, 3, 4)\n    2.5\n    >>> trapezium_median(1, 2, 3, 5)\n    2.25\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "import math\n\n\ndef median_of_trapezium(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium(1, 2, 3, 4)\n    2.0\n    >>> median_of_trapezium(4, 4, 4, 4)\n    4.0\n    \"\"\"\n    area = 0.5 * (a + b) * (c - d)\n    return 0.5 * (a + b + c - d) * (area / (a + b + c + d))\n\n\ndef median_of_trapezium_using_geometry(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium_using_geometry(1, 2, 3, 4)\n    2.0\n    >>> median_of_trapezium_using_geometry(4, 4, 4, 4)\n    4.0\n    \"\"\"\n    area = 0.5 * (a + b) * (c - d)\n    return (\n        0.5 * (a + b + c - d) * (area / (a + b + c + d))\n    )\n\n\ndef median_of_trapezium_using_math(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium_using_math(1, 2, 3, 4)\n    2.0\n    >>> median_of_trapezium_using_math(4, 4, 4, 4)\n    4.0\n    \"\"\"\n    area = 0.5 * (a + b) * (c - d)\n    return (\n        0.5 * (a + b + c - d) * (area / (a + b + c + d))\n    )\n\n\ndef median_of_trapezium_using_math_with_fabs(a, b, c, d):\n    \"\"\"\n    >>> median_of_trapezium_using_math_with_fabs(1, 2, 3, 4)\n    2.0\n    >>> median_of_trapezium_using_math_with_f"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(1, 2, 3, 4)\n    2.5\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "from math import sqrt\nfrom functools import reduce\n\n\n# time complexity: O(n), space complexity: O(1)\ndef find_trapezium_median(a, b, c, d):\n    if a + b <= c + d:\n        return (a + b + c + d) / 2\n    elif a + b > c + d:\n        return (a + b - c - d) / 2\n\n\n# test cases:\nprint(find_trapezium_median(2, 3, 3, 4))\nprint(find_trapezium_median(3, 4, 6, 7))\nprint(find_trapezium_median(4, 3, 6, 4))\nprint(find_trapezium_median(3, 4, 4, 3))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_median(a, b, c, d):\n    return (0.5 * (((a + b) * c) + ((a + c) * b)) / (a + b + c + d))\n\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    d = int(input(\"Enter fourth side: \"))\n\n    result = find_median(a, b, c, d)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "import math\n\n\ndef trapezium_median(base_1, base_2, height):\n    \"\"\"\n    >>> trapezium_median(3, 4, 10)\n    7.0\n    >>> trapezium_median(2, 2, 10)\n    4.0\n    \"\"\"\n    return (base_1 + base_2) / 2 * height / 2\n\n\ndef trapezium_median_formula(base_1, base_2, height):\n    \"\"\"\n    >>> trapezium_median_formula(3, 4, 10)\n    7.0\n    >>> trapezium_median_formula(2, 2, 10)\n    4.0\n    \"\"\"\n    return (base_1 + base_2) / 2 * height / 2\n\n\ndef trapezium_median_sqrt(base_1, base_2, height):\n    \"\"\"\n    >>> trapezium_median_sqrt(3, 4, 10)\n    7.0\n    >>> trapezium_median_sqrt(2, 2, 10)\n    4.0\n    \"\"\"\n    return (base_1 + base_2) / 2 * height / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def find_median(a, b, c, d):\n    # calculate median\n    median = (a + b + c + d) / 2\n\n    # find out if it's integer or float\n    if median % 2 == 0:\n        # if its integer\n        median = (median / 2)\n    else:\n        # if its float\n        median = (median / 2) + 0.5\n\n    return median"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def median(a, b, c, d):\n    \"\"\"\n    >>> median(1, 2, 3, 4)\n    2.5\n    >>> median(5, 7, 2, 4)\n    4.5\n    \"\"\"\n    return (\n        (a + b + c + d) / 2\n        - (\n            min(a, b, c, d)\n            + max(a, b, c, d)\n            - min(a, b, c, d)\n            * max(a, b, c, d)\n            / min(a, b, c, d)\n        )\n        / 2\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return (a+b+c+d)/4\n\n\nif __name__ == \"__main__\":\n    assert trapezium_median(1, 2, 3, 4) == 2.5"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    a, b, c, d: integers\n\n    returns: median of a trapezium\n    \"\"\"\n    return (a + b + c + d) / 2\n\nprint trapezium_median(1, 2, 3, 4)"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def find_median(base_1, base_2, height):\n    \"\"\"\n    >>> find_median(3, 4, 10)\n    5.0\n    \"\"\"\n    return (base_1 + base_2) * height / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    d = int(input(\"Enter d: \"))\n\n    print(trapezium_median(a, b, c, d))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def find_median(base1, base2, height):\n    \"\"\"\n    >>> find_median(2, 3, 5)\n    2.5\n    >>> find_median(1, 3, 2)\n    1.75\n    >>> find_median(3, 4, 10)\n    3.5\n    >>> find_median(1, 2, 3)\n    1.5\n    \"\"\"\n    return (base1 + base2) / 2 * height / (base1 + base2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_median(a, b, c, d):\n    \"\"\"\n    Finds the median of a trapezium.\n    >>> find_median(1, 2, 3, 4)\n    2.0\n    >>> find_median(4, 3, 2, 1)\n    2.5\n    >>> find_median(1, 2, 3, 4)\n    2.0\n    >>> find_median(1, 2, 3, 4)\n    2.0\n    >>> find_median(4, 3, 2, 1)\n    2.5\n    >>> find_median(1, 2, 3, 4)\n    2.0\n    \"\"\"\n    median = 0.0\n    median = (\n        (a + b + c + d)\n        - abs(a - b)\n        - abs(b - c)\n        - abs(c - d)\n        - abs(d - a)\n        - min(a, b, c, d)\n        - max(a, b, c, d)\n    ) / 2\n    return median\n\n\ndef median_test():\n    a = int(input(\"Enter the first base: \"))\n    b = int(input(\"Enter the second base: \"))\n    c = int(input(\"Enter the third base: \"))\n    d = int(input(\"Enter the fourth base: \"))\n    if a + b + c + d != 0:\n        print(\n            \"The median of the trapezium is:\",\n            find_median(a, b, c, d),\n            \"and the height of the trapezium is:\",\n            (a + b + c + d) / 2,\n        )\n    else:\n        print(\"The trapezium is not possible.\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    median_test()"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def median(a, b, c, d):\n    \"\"\"\n    >>> median(1, 2, 3, 4)\n    2.5\n    >>> median(4, 2, 3, 1)\n    2.5\n    >>> median(1, 2, 3, 3)\n    2.0\n    \"\"\"\n    return (a + b + c + d) / 4\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def find_median(a, b, c, d):\n    \"\"\"\n    >>> find_median(4, 5, 6, 7)\n    5.25\n    >>> find_median(7, 7, 7, 7)\n    7.0\n    >>> find_median(7, 7, 7, 8)\n    7.5\n    >>> find_median(7, 7, 8, 8)\n    7.75\n    >>> find_median(7, 8, 8, 8)\n    8.0\n    >>> find_median(7, 8, 9, 9)\n    8.5\n    >>> find_median(7, 8, 10, 10)\n    9.0\n    >>> find_median(7, 8, 9, 10)\n    8.5\n    >>> find_median(7, 8, 10, 11)\n    9.5\n    >>> find_median(1, 2, 3, 4)\n    2.25\n    >>> find_median(1, 2, 3, 5)\n    2.5\n    >>> find_median(1, 2, 4, 5)\n    2.5\n    >>> find_median(1, 2, 4, 6)\n    3.0\n    >>> find_median(1, 2, 5, 6)\n    3.0\n    >>> find_median(1, 2, 5, 7)\n    3.5\n    >>> find_median(1, 2, 6, 7)\n    3.5\n    >>> find_median(1, 3, 4, 5)\n    3.0\n    >>> find_median(1, 3, 4, 6)\n    4.0\n    >>> find_median(1, 3, 5, 6)\n    4.0\n    >>> find_median(1, 3, 5, 7)\n    4.5\n    >>> find_"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    >>> trapezium_median(1, 2, 3, 4)\n    2.5\n    >>> trapezium_median(1, 2, 2, 3)\n    2.0\n    >>> trapezium_median(1, 2, 2, 2)\n    2.0\n    >>> trapezium_median(1, 2, 1, 2)\n    2.0\n    \"\"\"\n    return (a + b + c + d) / 4\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 4\n\n\ndef main():\n    print(median_trapezium(1, 2, 3, 4))\n    print(median_trapezium(3, 4, 2, 1))\n    print(median_trapezium(2, 3, 1, 4))\n    print(median_trapezium(3, 1, 4, 2))\n    print(median_trapezium(1, 4, 2, 3))\n    print(median_trapezium(4, 1, 3, 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :param d: int\n    :return: float\n    \"\"\"\n    return (a + b + c + d) / 2\n\n\nif __name__ == '__main__':\n    print(trapezium_median(1, 2, 3, 4))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_median(base1, base2, height):\n    return (base1 + base2) / 2 * height / 2\n\n\nif __name__ == \"__main__\":\n    assert find_median(1, 2, 3) == 2.0\n    assert find_median(3, 5, 7) == 4.5\n    assert find_median(2, 3, 4) == 3.0"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\ndef median(a, b, c):\n    \"\"\"\n    Let a = (x1, y1), b = (x2, y2), c = (x3, y3)\n    f(x) = 0.5 * (y1*x2-y2*x1 + y2*x3-y3*x2 + y3*x1-y1*x3)\n\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    x1, y1 = a\n    x2, y2 = b\n    x3, y3 = c\n    return 0.5 * (y1*x2-y2*x1 + y2*x3-y3*x2 + y3*x1-y1*x3) / (x2-x1)\n\n\nif __name__ == \"__main__\":\n    assert median((1, 2), (2, 4), (4, 5)) == 3.5"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def trapezium_median(a, b, c, d):\n    \"\"\"\n    :param a: float\n    :param b: float\n    :param c: float\n    :param d: float\n    :return: float\n    \"\"\"\n    # Your code goes here\n    return (a + b + c + d) / 2\n\n\nif __name__ == '__main__':\n    print(trapezium_median(2, 3, 4, 5))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def trapeziumNumberMedian(self, m, n, o):\n        \"\"\"\n        Math\n\n        :param m: An integer m\n        :param n: An integer n\n        :param o: An integer o\n        :return: A string denoting the median\n        \"\"\"\n        a = 1\n        b = m\n        c = n\n        d = o\n        while True:\n            if a + b + c + d > 10 ** 9:\n                a = a - 1\n                b = b - 1\n                c = c - 1\n                d = d - 1\n            elif a + b + c + d < 10 ** 9:\n                a = a + 1\n                b = b + 1\n                c = c + 1\n                d = d + 1\n            else:\n                break\n\n        return str((a + b + c + d) / 2)\n\n\nif __name__ == \"__main__\":\n    assert Solution().trapeziumNumberMedian(1, 2, 3) == \"2.00000\""
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def trapeziumMedian(self, a, b, c, d):\n        \"\"\"\n        Algorithm:\n        Let's assume the trapezium is ABCD\n\n        P1 = (a+b+c+d)/2\n        P2 = (a+b+c+d-a)/2\n        P3 = (a+b+c+d-b)/2\n        P4 = (a+b+c+d-c)/2\n\n        P1P2 = (a+b+c+d-a)/2 = (P1-a)/2 = P2\n        P1P3 = (a+b+c+d-b)/2 = (P1-b)/2 = P3\n        P1P4 = (a+b+c+d-c)/2 = (P1-c)/2 = P4\n\n        P1P2P3P4 = (a+b+c+d)/2\n\n        a/2 + b/2 + c/2 + d/2 = P1P2P3P4\n        a/2 + b/2 + c/2 + d/2 = P1P2 + P3P4\n        a/2 + b/2 + c/2 + d/2 = (a+b+c+d-a)/2 + (a+b+c+d-b)/2\n        a/2 + b/2 + c/2 + d/2 = (a+b+c+d-a)/2 + (a+b+c+d-c)/2\n\n        a/2 + b/2 + c/2 + d/2 = (a+b+c+d-a)/2 + (a+b+c+d-b)/2 + (a+b+c+d-c)/2\n        a/2 + b/2 + c/2 + d/2 = (a+b+c+d-b)/2 + (a+b+c+d-c)/2\n        a/2 + b/2 + c/2 + d/2 = (a+b+c+d)/2 - a - b - c"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def find_median(a, b, c, d):\n    return (a + b + c + d) / 2\n\n\nif __name__ == \"__main__\":\n    # 4 8 12 16\n    print(find_median(4, 8, 12, 16))\n\n    # 4 8 12 15\n    print(find_median(4, 8, 12, 15))\n\n    # 10 12 13 15\n    print(find_median(10, 12, 13, 15))\n\n    # 10 12 13 16\n    print(find_median(10, 12, 13, 16))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef trapezium_median(base_1: int, base_2: int, height: int) -> Union[int, float]:\n    \"\"\"\n    >>> trapezium_median(1, 1, 1)\n    1\n    >>> trapezium_median(1, 1, 2)\n    1.5\n    >>> trapezium_median(2, 3, 4)\n    2.25\n    >>> trapezium_median(1, 2, 3)\n    1.6666666666666667\n    \"\"\"\n    return (\n        (base_1 + base_2) * height\n    ) / 2  # type: ignore[operator] # noqa: W503\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def trapeziumNumber(self, num):\n        \"\"\"\n        a trapezium number is a number that is the sum of 4 integers\n\n        :param num: an integer\n        :return: an integer\n        \"\"\"\n        nums = [1, 2, 3, 4]\n        for i in xrange(5, num+1):\n            nums.append(i)\n\n        for i in xrange(len(nums)):\n            for j in xrange(i+1, len(nums)):\n                for k in xrange(j+1, len(nums)):\n                    for l in xrange(k+1, len(nums)):\n                        if nums[i]+nums[j]+nums[k]+nums[l] == num:\n                            return nums[i]\n        return False\n\n    def trapeziumNumber_error(self, num):\n        \"\"\"\n        a trapezium number is a number that is the sum of 4 integers\n\n        :param num: an integer\n        :return: an integer\n        \"\"\"\n        nums = [1, 2, 3, 4]\n        for i in xrange(5, num+1):\n            nums.append(i)\n\n        for i in xrange(len(nums)):\n            for j in xrange(i+1, len(nums)):\n                for k in xrange(j+1, len(nums)):\n                    for l in xrange(k+1, len(nums)):\n                        if nums[i]+nums[j]+nums[k]+nums[l] == num:\n                            return nums[i]\n        return False\n\n\nif __name__ == \"__main__\":\n    assert Solution().trapeziumNumber(15) == 5"
    }
  ]
}