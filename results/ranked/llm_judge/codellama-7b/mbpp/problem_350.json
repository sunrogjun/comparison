{
  "timestamp": "2025-09-15T00:56:54.657565",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 350,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def remove_empty_lists(lst_of_lsts):\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lst_of_lsts (list): A list of lists.\n\n    Returns:\n        list: A list of lists without empty lists.\n    \"\"\"\n    return [lst for lst in lst_of_lsts if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1, 2, 3], [4, 5], [], [], [6, 7]]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): a list of lists\n\n    Returns:\n        List[List[int]]: a list of lists without empty lists\n    \"\"\"\n\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1, 2, 3], [4, 5, 6], [7, 8], [9], []]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty(lst: List[List]) -> List[List]:\n    \"\"\"Removes empty lists from a list of lists.\n\n    Args:\n        lst (List[List]): list of lists\n\n    Returns:\n        List[List]: list of lists with empty lists removed\n    \"\"\"\n    return [lst_item for lst_item in lst if lst_item != []]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty([[1, 2, 3], [], [4, 5, 6]]))\n    print(remove_empty([[1, 2, 3], [], [4, 5, 6], []]))\n    print(remove_empty([[]]))\n    print(remove_empty([[], []]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def remove_empty(lists):\n    return [list for list in lists if len(list) > 0]\n\n\ndef main():\n    print(remove_empty([[], []]))\n    print(remove_empty([[], [1], []]))\n    print(remove_empty([[], [1], [2, 3]]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists\n\n    Examples:\n        >>> assert remove_empty_lists([[1], [], [2], [3, 4]]) == [[1], [2], [3, 4]]\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1], [], [2], [3, 4]]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List]): list of lists\n\n    Returns:\n        List[List]: list of lists without empty lists\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [], [1], [1, 2, 3]]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_empty_lists(lists):\n    \"\"\"\n    Removes empty lists from a given list of lists.\n\n    :param lists: List of lists.\n    :type lists: list\n    :return: The list with empty lists removed.\n    :rtype: list\n    \"\"\"\n    if not isinstance(lists, list):\n        raise TypeError(\"lists must be a list.\")\n\n    output = deepcopy(lists)\n    for list_index, _ in enumerate(lists):\n        for item_index, item in enumerate(lists[list_index]):\n            if isinstance(item, list):\n                output[list_index][item_index] = remove_empty_lists(item)\n            elif not item:\n                output[list_index].pop(item_index)\n\n    return output\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [],\n        [],\n        [11, 12, 13, 14, 15],\n        [],\n        [],\n        [16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25],\n        [],\n        [26, 27, 28, 29, 30],\n        [],\n        [],\n        [31, 32, 33, 34, 35],\n        [36, 37, 38, 39, 40],\n        [],\n        [],\n    ]\n\n    print(remove_empty_lists(lists))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(list_of_lists: List[list]) -> List[list]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        list_of_lists (List[list]): list of lists\n\n    Returns:\n        List[list]: list of lists without empty lists\n    \"\"\"\n    return [list_ for list_ in list_of_lists if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1], [2, 3], []]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# O(n*m) time | O(n*m) space\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    return [list for list in lists if list]\n\n\n# O(n) time | O(n) space\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    return [list for list in lists if list is not None and len(list) > 0]\n\n\n# O(n) time | O(n) space\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    return list(filter(lambda list: list is not None and len(list) > 0, lists))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(list_of_lists: List[List]) -> List[List]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        list_of_lists (List[List]): a list of lists\n\n    Returns:\n        List[List]: a list of lists without empty lists\n    \"\"\"\n\n    return [lst for lst in list_of_lists if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1, 2], [], [3, 4], [], [5], []]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List]): list of lists to remove empty lists from\n\n    Returns:\n        List[List]: list of lists without empty lists\n\n    Examples:\n        >>> assert remove_empty_lists([[1], [2], [3]]) == [[1], [2], [3]]\n        >>> assert remove_empty_lists([[1], [], [2], [], [3]]) == [[1], [2], [3]]\n        >>> assert remove_empty_lists([[1], [], [2], [3], []]) == [[1], [2], [3]]\n        >>> assert remove_empty_lists([[]]) == []\n        >>> assert remove_empty_lists([]) == []\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1], [2], [3]]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lst: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lst (List[List]): the list of lists\n\n    Examples:\n        >>> assert remove_empty_lists([[], [1], [2], [], [3, 3, 3]]) == [[1], [2], [3, 3, 3]]\n    \"\"\"\n    return [lst_ for lst_ in lst if lst_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1], [2], [], [3, 3, 3]]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lst: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lst (List[List]): given list of lists\n\n    Examples:\n        >>> assert remove_empty_lists([[], [1], [], [2], [3, 4], []]) == [[1], [2], [3, 4]]\n    \"\"\"\n    return [lst for lst in lst if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1], [], [2], [3, 4], []]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists without empty lists\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1, 2], [], [3, 4], []]))"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def remove_empty_lists(lists):\n    \"\"\"Remove empty lists from a given list of lists.\"\"\"\n    return [l for l in lists if l]\n\n\ndef main():\n    assert remove_empty_lists([[], [1], [2], [], [3], [], [4]]) == [[1], [2], [3], [4]]\n    assert remove_empty_lists([[]]) == []\n    assert remove_empty_lists([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n    assert remove_empty_lists([[1, 2], [], [3, 4], [5, 6], []]) == [[1, 2], [3, 4], [5, 6]]\n    assert remove_empty_lists([[]]) == []\n    assert remove_empty_lists([]) == []\n    assert remove_empty_lists([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]\n    print(\"Passed.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    # Edge case\n    if not lists:\n        return []\n\n    # Create a new list to store non-empty lists\n    new_lists = []\n\n    # Iterate over the original list\n    for sublist in lists:\n        # If the sublist is not empty, append it to the new list\n        if sublist:\n            new_lists.append(sublist)\n\n    return new_lists\n\n\nif __name__ == \"__main__\":\n    assert remove_empty_lists([[], [1], [3], []]) == [[1], [3]]\n    assert remove_empty_lists([[1, 2, 3], [4, 5, 6], [], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    assert remove_empty_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "def remove_empty_lists(lst):\n    return [lst for lst in lst if lst != []]\n\n\ndef main():\n    print(remove_empty_lists([[], [1], [2], []]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def remove_empty_lists(lists):\n    return [list_ for list_ in lists if list_]\n\ndef main():\n    print(remove_empty_lists([[1], [2], []]))\n    print(remove_empty_lists([[1], [], [], [3], []]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def remove_empty_lists(list_of_lists):\n    return [list_ for list_ in list_of_lists if list_]\n\n\ndef main():\n    print(remove_empty_lists([[1, 2, 3], [4, 5], [], [6, 7, 8]]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_empty_lists(lists: list) -> list:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    >>> remove_empty_lists([[1], [], [2], [], [3], [4], [], [5], []])\n    [[1], [2], [3], [4], [5]]\n    \"\"\"\n    return [sublist for sublist in lists if sublist]\n\n\ndef remove_empty_lists_2(lists: list) -> list:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    >>> remove_empty_lists_2([[1], [], [2], [], [3], [4], [], [5], []])\n    [[1], [2], [3], [4], [5]]\n    \"\"\"\n    return list(filter(None, lists))\n\n\nif __name__ == \"__main__\":\n    print(timeit(lambda: remove_empty_lists([[1], [], [2], [], [3], [4], [], [5], []]), number=10000))\n    print(timeit(lambda: remove_empty_lists_2([[1], [], [2], [], [3], [4], [], [5], []]), number=10000))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Returns a new list with all empty lists removed.\n    \"\"\"\n    return [lst for lst in arr if lst]\n\n\nif __name__ == \"__main__\":\n    assert remove_empty_lists([[1, 2], [3], [], [4, 5]]) == [[1, 2], [3], [4, 5]]"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def remove_empty(lst):\n    \"\"\"Removes empty lists from a given list of lists.\n\n    >>> remove_empty([[1], [2], [], [3, 3, 3], [], [4, 4, 4, 4]])\n    [[1], [2], [3, 3, 3], [4, 4, 4, 4]]\n    \"\"\"\n    return [sublist for sublist in lst if sublist]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "# def remove_empty_lists(l):\n#     return [i for i in l if i]\n\ndef remove_empty_lists(l):\n    return [i for i in l if i is not []]\n\n\nif __name__ == '__main__':\n    print(remove_empty_lists([[], [1], [], [2, 3], [], [4, 5]]))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "# First, we will write a function to check if a list is empty or not.\ndef is_empty(lst):\n    return lst == []\n\n# Then, we will write a function to remove empty lists from a given list of lists.\ndef remove_empty_lists(lst):\n    return [sublist for sublist in lst if not is_empty(sublist)]\n\n# Test\nprint(remove_empty_lists([[], [1], [3], [1, 2, 3], [4, 5]]))\nprint(remove_empty_lists([[1], [3], [1, 2, 3], [4, 5]]))\nprint(remove_empty_lists([[], [1], [3], [1, 2, 3]]))\nprint(remove_empty_lists([[], [1], [3]]))\nprint(remove_empty_lists([[], [1], [], [3]]))\nprint(remove_empty_lists([[], [1], [3], []]))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def remove_empty_lists(list_of_lists):\n    return [sublist for sublist in list_of_lists if sublist != []]\n\n\nif __name__ == '__main__':\n    print(remove_empty_lists([[], [1], [], [2, 3], [], [4, 5]]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_empty(l):\n    return [i for i in l if i != []]\n\n\ndef main():\n    l = [[], [\"a\"], [], [\"b\"], [], [\"c\"]]\n    print(remove_empty(deepcopy(l)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lst_of_lists):\n    \"\"\"\n    >>> remove_empty_lists([[1,2], [3], [4,5,6], [], [7], [8,9,10]])\n    [[1, 2], [3], [4, 5, 6], [7], [8, 9, 10]]\n    \"\"\"\n    return [l for l in lst_of_lists if l]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    return [list for list in lists if len(list) > 0]\n\n\ndef main():\n    print(remove_empty_lists([[], [1], [2], [3], [], [4], [], [5]]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists.\n\n    >>> remove_empty_lists([[1, 2, 3], [], [4, 5]])\n    [[1, 2, 3], [4, 5]]\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def remove_empty_lists(list_of_lists):\n    return [lst for lst in list_of_lists if lst]\n\n\nif __name__ == '__main__':\n    print(remove_empty_lists([[1], [], [2], [], [3], []]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def removeEmpty(lists):\n    \"\"\"\n    >>> removeEmpty([[], [1, 2, 3], [4, 5, 6], [], [7, 8, 9], []])\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \"\"\"\n    return [i for i in lists if i]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == '__main__':\n    print(remove_empty_lists([[], [], [1, 2], []]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def remove_empty(lst):\n    \"\"\"Remove empty lists from a given list of lists.\"\"\"\n    return [x for x in lst if x]"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): given list of lists\n\n    Returns:\n        List[List[int]]: list of lists without empty ones\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    assert remove_empty_lists([[1, 2], [3], [4, 5, 6], [], [7, 8]]) == [[1, 2], [3], [4, 5, 6], [7, 8]]\n    assert remove_empty_lists([[1, 2], [], [], [3, 4]]) == [[1, 2], [3, 4]]\n    assert remove_empty_lists([[1, 2, 3], [4, 5, 6], [7, 8]]) == [[1, 2, 3], [4, 5, 6], [7, 8]]"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lst):\n    \"\"\"\n    >>> remove_empty_lists([[1, 2], [], [3, 4]])\n    [[1, 2], [3, 4]]\n    >>> remove_empty_lists([[1, 2], [], [3, 4], [5, 6], []])\n    [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    return [x for x in lst if x != []]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists without empty lists\n    \"\"\"\n    return [sub_list for sub_list in lists if sub_list]\n\n\nif __name__ == \"__main__\":\n    assert remove_empty_lists([[1, 2, 3], [], [4, 5]]) == [[1, 2, 3], [4, 5]]\n    assert remove_empty_lists([[1, 2, 3], [], [4, 5], []]) == [[1, 2, 3], [4, 5]]"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def remove_empty(lst):\n    return list(filter(None, lst))\n\nprint(remove_empty([[1], [2], [], [3], []]))\n\n\"\"\"\n[1, 2, [], 3, []]\n\"\"\""
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_empty(lists: List[List]) -> List[List]:\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty([[1], [2], [3], [], [4], []]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List]): given list of lists\n\n    Returns:\n        List[List]: list of lists without empty lists\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [\n        [1, 2, 3],\n        [],\n        [4, 5, 6],\n        [],\n        [7, 8, 9],\n        [],\n        [10, 11, 12],\n        [13, 14, 15],\n        [16],\n        [],\n    ]\n    assert remove_empty_lists(list_of_lists) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16]]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def remove_empty(lst):\n    return [sub for sub in lst if sub]\n\nif __name__ == '__main__':\n    print(remove_empty([[], [1], [2, 3], [], [4, 5, 6], []]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def remove_empty(list_of_lists):\n    \"\"\"\n    Remove empty lists from a list of lists\n    :param list_of_lists: list of lists\n    :return: list of lists\n    \"\"\"\n    return [sublist for sublist in list_of_lists if sublist]\n\n\ndef main():\n    list_of_lists = [['a', 'b', 'c'], [], ['d', 'e', 'f'], [], ['g', 'h', 'i'],\n                     ['j'], [], [], [], ['k', 'l', 'm'], ['n', 'o'], []]\n    print(list_of_lists)\n    print(remove_empty(list_of_lists))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from itertools import chain\n\n\ndef remove_empty(lists):\n    return list(chain(*filter(None, lists)))\n\n\ndef main():\n    print(\"Here is the original list:\")\n    print(lists)\n    print(\"Here is the modified list:\")\n    print(remove_empty(lists))\n\n\nlists = [[1, 2, 3], [4, 5, 6], [], [7, 8, 9], [], [], [10, 11, 12]]\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (list): list of lists\n\n    Returns:\n        list: list of lists with empty lists removed\n    \"\"\"\n\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1, 2], [3, 4], []]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# Time Complexity: O(n)\ndef remove_empty_lists(list_of_lists):\n  return [lst for lst in list_of_lists if lst]\n\ndef test_function(test_case):\n  test_input, test_expected = test_case\n  test_actual = remove_empty_lists(test_input)\n  if test_actual == test_expected:\n    print(\"Pass\")\n  else:\n    print(\"Fail\")\n\ntest_function(([[], [1], [3]], [[1], [3], []]))\ntest_function(([[1, 2, 3], [0, 4, 5], [7, 8, 9]], [[1, 2, 3], [0, 4, 5], [7, 8, 9]]))\ntest_function(([[1, 2], [3, 4]], [[1, 2], [3, 4]]))\ntest_function(([[1, 2], [3, 4], []], [[1, 2], [3, 4]]))\ntest_function(([[1, 2], [], [3, 4], [5]], [[1, 2], [3, 4], [5]]))\ntest_function(([[1, 2], [], [3, 4], [5], []], [[1, 2], [3, 4], [5]]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    return [x for x in lists if x]\n\n\ndef main():\n    print(remove_empty_lists([[1], [], [2], [], [3], [4], [], [], [5], [], []]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == '__main__':\n    assert remove_empty_lists([[], [1], [2, 3], [], [4, 5, 6], []]) == [[1], [2, 3], [4, 5, 6]]"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    return [x for x in lists if x]\n\n\ndef main():\n    print(remove_empty_lists([[], [1], [2], [3], []]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    return [l for l in lists if l]\n\n\nprint(remove_empty_lists([[], [1], [[], [2, 2], []], [[3, 3, 3], [], []]]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\ndef remove_empty_lists(l):\n    \"\"\"Returns a copy of l with empty lists removed.\"\"\"\n    return filter(lambda x: x != [], deepcopy(l))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lst):\n    return [sublst for sublst in lst if len(sublst) > 0]\n\n\nprint(remove_empty_lists([[], [1, 2], [3], [], [4, 5, 6], []]))\nprint(remove_empty_lists([[1, 2], [3], [4, 5, 6], []]))\nprint(remove_empty_lists([]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lst):\n    \"\"\"Removes empty lists from a list of lists.\"\"\"\n    return [lst for lst in lst if lst]"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lst):\n    return [sublst for sublst in lst if len(sublst) > 0]\n\n\ndef main():\n    print(remove_empty_lists([[1], [2], [], [3], [], [], [4], [], []]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_empty_lists(list_of_lists):\n    \"\"\"Remove empty lists from a given list of lists.\"\"\"\n    if not list_of_lists:\n        return list_of_lists\n\n    copy = deepcopy(list_of_lists)\n    for i in copy:\n        if i == []:\n            list_of_lists.remove(i)\n    return list_of_lists\n\n\ndef main():\n    print(remove_empty_lists([[], [1, 2], []]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def remove_empty_lists(array):\n    return [x for x in array if x]\n\n\ndef test_remove_empty_lists():\n    assert remove_empty_lists([[], [1], [2], []]) == [[1], [2]]\n\n\nif __name__ == \"__main__\":\n    test_remove_empty_lists()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lst):\n    return [x for x in lst if x]\n\n\nif __name__ == '__main__':\n    print(remove_empty_lists([[], ['1'], ['2'], [], ['4'], ['5', '55']]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    \"\"\"\n    Removes empty lists from a given list of lists.\n\n    Args:\n     lists: a list of lists.\n\n    Returns:\n     A new list with empty lists removed.\n    \"\"\"\n    return [list for list in lists if list]\n\n# Tests\nprint(remove_empty_lists([[], [1], [3], [], [5], [6], []]))\nprint(remove_empty_lists([[], [1], [3], [5], [6], []]))\nprint(remove_empty_lists([[1], [3], [5], [6]]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    \"\"\"\n    >>> remove_empty_lists([[1], [], [2], [], [], [3]])\n    [[1], [2], [3]]\n    \"\"\"\n    return [x for x in lists if x]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def remove_empty(lists):\n    return [x for x in lists if x]\n\n\nlists = [\n    [1, 2, 3],\n    [],\n    [2, 4, 6],\n    [3, 6, 9],\n    [],\n    [5, 10, 15],\n    [],\n    [100, 200, 300],\n    [],\n    [400, 500, 600]\n]\n\nprint(remove_empty(lists))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lst):\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    :param lst: list of lists\n    :return: list with empty lists removed\n    :rtype: list\n    \"\"\"\n    return [lst_item for lst_item in lst if lst_item]"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def remove_empty(lists):\n    return [lst for lst in lists if lst]\n\nprint(remove_empty([[], [1, 2], [3, 4], []]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists: The list of lists from which to remove empty lists.\n\n    Returns:\n        A list containing only the non-empty lists.\n    \"\"\"\n    return [list_ for list_ in lists if list_]"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists with empty lists removed\n\n    Examples:\n        >>> assert remove_empty_lists([[], [1, 2, 3], [], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\ndef main():\n    print(remove_empty_lists([[], [1, 2, 3], [], [4, 5, 6]]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lists):\n    \"\"\"\n    >>> remove_empty_lists([[], [1], [2, 3], [4], [], [5], [6, 7, 8], []])\n    [[1], [2, 3], [4], [5], [6, 7, 8]]\n    \"\"\"\n    return [lst for lst in lists if lst]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[list]) -> List[list]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[list]): list of lists\n\n    Returns:\n        List[list]: list of lists\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    assert remove_empty_lists([[1], [2], []]) == [[1], [2]]\n    assert remove_empty_lists([[1], [], [2], [], [3], [], [4]]) == [[1], [2], [3], [4]]"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def remove_empty_lists(lst):\n    return [l for l in lst if l]\n\n\nprint(remove_empty_lists([[], [1], [2], [], [3], []]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def remove_empty(lst):\n    \"\"\"\n    >>> remove_empty([[], ['a'], ['b'], []])\n    [['a'], ['b']]\n    >>> remove_empty([['a', 'b', []]])\n    [['a', 'b']]\n    >>> remove_empty([['a', 'b', []], [], ['c', 'd']])\n    [['a', 'b'], ['c', 'd']]\n    >>> remove_empty([['a', 'b'], [], ['c', 'd'], ['e'], []])\n    [['a', 'b'], ['c', 'd'], ['e']]\n    >>> remove_empty([[]])\n    []\n    \"\"\"\n    return [lst[i] for i in range(len(lst)) if lst[i]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List]): list of lists\n\n    Returns:\n        List[List]: list of lists without empty lists\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1], [2, 3], [], [4, 5, 6], []]))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists without empty lists\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    lists = [[1, 2, 3], [4, 5, 6], [], [7, 8], [], [], [], [9]]\n    print(remove_empty(lists))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(arr: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        arr (List[List]): given list of lists\n\n    Returns:\n        List[List]: list of lists without empty lists\n    \"\"\"\n    return [item for item in arr if item]\n\n\nif __name__ == \"__main__\":\n    arr = [[], [1, 2], [3, 4, 5], [], [6, 7, 8], []]\n    assert remove_empty_lists(arr) == [[1, 2], [3, 4, 5], [6, 7, 8]]"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists without empty lists\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    assert remove_empty_lists([[1, 2], [3], [4, 5, 6], [], [7, 8], []]) == [\n        [1, 2],\n        [3],\n        [4, 5, 6],\n        [7, 8],\n    ]"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# O(n)\ndef remove_empty_lists(lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a list of lists.\n\n    Args:\n        lists (List[List]): a list of lists\n\n    Returns:\n        List[List]: a list of lists without empty lists\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    assert remove_empty_lists([[1, 2, 3], [4, 5], [], [6], [], []]) == [[1, 2, 3], [4, 5], [6]]\n    assert remove_empty_lists([[1, 2, 3], [4, 5], [6]]) == [[1, 2, 3], [4, 5], [6]]\n    assert remove_empty_lists([[1, 2, 3], [4, 5], []]) == [[1, 2, 3], [4, 5]]"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_empty_lists(list_of_lists):\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        list_of_lists (list): list of lists\n\n    Returns:\n        list: list of lists without empty lists\n    \"\"\"\n\n    return [list_ for list_ in deepcopy(list_of_lists) if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1, 2], [], [3], []]))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty(lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List]): list of lists\n\n    Returns:\n        List[List]: list of lists without empty lists\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty([[1, 2], [], [3], [], [4]]))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(input_list: List[List]) -> List[List]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        input_list (List[List]): list of lists to remove empty lists from.\n\n    Returns:\n        List[List]: list of lists without empty lists.\n    \"\"\"\n    return [sublist for sublist in input_list if sublist]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1, 2, 3], [1, 2, 3], [], [1, 2, 3]]))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): the list of lists\n\n    Returns:\n        List[List[int]]: the list of lists without empty lists\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1], [2], [], [3], [], [4], [], [], [5]]))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists without empty lists\n    \"\"\"\n    return [l for l in lists if l]\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9], []]\n    print(remove_empty_lists(list_of_lists))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# O(n)\ndef remove_empty_lists(lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List]): list of lists\n\n    Examples:\n        >>> assert remove_empty_lists([[], [1], [2], [], [3]]) == [[1], [2], [3]]\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1], [2], [], [3]]))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists without empty ones\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [], [], [], [], [], []]\n    assert remove_empty_lists(lists) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): a given list of lists\n\n    Examples:\n        >>> assert remove_empty_lists([[], [1], [2], [3], []]) == [[1], [2], [3]]\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1], [2], [3], []]))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Using while loop\ndef remove_empty_lists_1(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): the list of lists\n\n    Returns:\n        List[List[int]]: the list of lists without empty lists\n    \"\"\"\n    # Find the first non-empty list\n    start_index = 0\n    while not lists[start_index]:\n        start_index += 1\n\n    # Iterate over the list of lists and remove empty lists\n    i = start_index\n    while i < len(lists):\n        if not lists[i]:\n            del lists[i]\n        else:\n            i += 1\n\n    return lists\n\n\n# Using for loop\ndef remove_empty_lists_2(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): the list of lists\n\n    Returns:\n        List[List[int]]: the list of lists without empty lists\n    \"\"\"\n    # Iterate over the list of lists and remove empty lists\n    for i in range(len(lists)):\n        if not lists[i]:\n            del lists[i]\n\n    return lists\n\n\n# Using list comprehension\ndef remove_empty_lists_3(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): the list of lists\n\n    Returns:\n        List[List[int]]: the list of lists without empty lists\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    lists = [[], [1, 2, 3], [], [4, 5, 6], [], [7, 8, 9]]\n    print(remove_empty_lists_1(lists))\n    print(remove_empty_lists"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List]): list of lists\n\n    Returns:\n        List[List]: list of lists without empty lists\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1], [2, 3], [4, 5, 6], [7], []]))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def removeEmptyLists(listOfLists):\n    # Your code here\n    return [list for list in listOfLists if list != []]\n\nprint(removeEmptyLists([[], [1, 2], [3], [], [4, 5]]))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef remove_empty_lists(lists):\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    data = [[], [1, 2, 3, 4], [5, 6, 7], [], [8, 9, 10], []]\n\n    start = timer()\n    result = remove_empty_lists(data)\n    end = timer()\n\n    print(f\"Result: {result}\")\n    print(f\"Duration: {end - start}\")"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Time complexity: O(n*m).\n    Space complexity: O(n*m).\n    \"\"\"\n    # Create new list to store non-empty lists.\n    result = []\n\n    # Traverse list and append non-empty lists to result.\n    for lst in arr:\n        if lst:\n            result.append(lst)\n\n    return result\n\n\ndef main():\n    # Output: [[1, 2, 3], [4, 5, 6]]\n    arr = [[1, 2, 3], [4, 5, 6], [], []]\n    print(remove_empty_lists(arr))\n\n    # Output: [[1, 2, 3]]\n    arr = [[1, 2, 3], [], []]\n    print(remove_empty_lists(arr))\n\n    # Output: [[1, 2, 3]]\n    arr = [[1, 2, 3]]\n    print(remove_empty_lists(arr))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(list_of_lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        list_of_lists (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists without empty lists\n    \"\"\"\n    return [sublist for sublist in list_of_lists if sublist]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1, 2, 3], [], [4, 5, 6], []]))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lst_lst: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lst_lst (List[List[int]]): list of lists\n\n    Examples:\n        >>> assert remove_empty_lists([[], [1], [2], [], [3, 4], [], [5, 6]]) == [[1], [2], [3, 4], [5, 6]]\n        >>> assert remove_empty_lists([[1], [2], [3, 4], [5, 6]]) == [[1], [2], [3, 4], [5, 6]]\n        >>> assert remove_empty_lists([[], [1], [2], [3, 4], [], [5, 6]]) == [[1], [2], [3, 4], [5, 6]]\n    \"\"\"\n    return [lst for lst in lst_lst if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[], [1], [2], [], [3, 4], [], [5, 6]]))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def remove_empty(lst: list) -> list:\n    \"\"\"\n    >>> remove_empty([[1], [], [2], [], [], [3]])\n    [[1], [2], [3]]\n    >>> remove_empty([[]])\n    []\n    >>> remove_empty([[1], [2], [3]])\n    [[1], [2], [3]]\n    >>> remove_empty([[]] * 2)\n    [[]]\n    >>> remove_empty([[1], [], [3], [4]])\n    [[1], [3], [4]]\n    \"\"\"\n    return [i for i in lst if i]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(arr: List[List]) -> List[List]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    return [x for x in arr if x]\n\n\nif __name__ == \"__main__\":\n    assert remove_empty_lists([[1], [2, 3], [], [4, 5, 6], []]) == [[1], [2, 3], [4, 5, 6]]"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# @param A : list\n# @return a list\ndef remove_empty_lists(A):\n    A.reverse()\n    while A:\n        if A[-1]:\n            A.pop()\n        else:\n            A.pop()\n    A.reverse()\n    return A\n\n\nif __name__ == \"__main__\":\n    data = [\n            [[1, 2, 3], [4, 5, 6], [7, 8, 9], [], [], [], []],\n            [[1, 2, 3], [4, 5, 6], [7, 8, 9], [], [], [], [10], []]\n    ]\n    for i in data:\n        print(i, remove_empty_lists(i))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): a given list of lists\n\n    Examples:\n        >>> assert remove_empty_lists([[1], [], [2], [3, 4]]) == [[1], [2], [3, 4]]\n    \"\"\"\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1], [], [2], [3, 4]]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from timeit import default_timer as timer\n\ndef remove_empty_lists(list_of_lists):\n    return [list_ for list_ in list_of_lists if list_]\n\ndef remove_empty_lists_2(list_of_lists):\n    return filter(None, list_of_lists)\n\ndef main():\n    input_list = [\n        [1,2,3],\n        [4,5,6],\n        [],\n        [7,8,9],\n        [],\n        [10,11,12],\n        [],\n        [],\n        [13,14,15]\n    ]\n\n    start_time = timer()\n    print(\"Empty lists removed using remove_empty_lists:\")\n    print(remove_empty_lists(input_list))\n    print(\"--- %s seconds ---\\n\" % (timer() - start_time))\n\n    start_time = timer()\n    print(\"Empty lists removed using remove_empty_lists_2:\")\n    print(remove_empty_lists_2(input_list))\n    print(\"--- %s seconds ---\\n\" % (timer() - start_time))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Removes empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): a list of lists\n\n    Returns:\n        List[List[int]]: a list of lists without empty lists\n    \"\"\"\n\n    return [list_ for list_ in lists if list_]\n\n\nif __name__ == \"__main__\":\n    assert remove_empty([[1], [], [2], [], [3, 4, 5], [], [], [6], [], []]) == [\n        [1],\n        [2],\n        [3, 4, 5],\n        [6],\n    ]\n    assert remove_empty([[1], [2], [], [3, 4, 5], [6]]) == [[1], [2], [3, 4, 5], [6]]"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists.\n\n    Returns:\n        List[List[int]]: list of lists without empty lists.\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1, 2], [], [3, 4], []]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(list_of_lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        list_of_lists (List[List]): list of lists\n\n    Returns:\n        List[List]: list of lists without empty lists\n    \"\"\"\n    return [lst for lst in list_of_lists if lst]\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3], [], [4, 5, 6], [], [7, 8, 9]]\n    print(remove_empty_lists(list_of_lists))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lst: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lst (List[List[int]]): list of lists to remove empty lists from.\n\n    Returns:\n        List[List[int]]: list of lists without empty lists.\n    \"\"\"\n    return [lst_item for lst_item in lst if lst_item]\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2], [3, 4], [], [5, 6], []]\n    print(remove_empty_lists(lst))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_empty(lists):\n    # your code here\n    new_list = deepcopy(lists)\n    for i in range(len(new_list)):\n        if new_list[i] == []:\n            new_list.remove([])\n        elif new_list[i] != []:\n            continue\n    return new_list\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(list(remove_empty([[0], [1, 2, 3], [], [4, 5, 6], []])))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert list(remove_empty([[0], [1, 2, 3], [], [4, 5, 6], []])) == [[0], [1, 2, 3], [4, 5, 6]]\n    assert list(remove_empty([[1, 2, 3], [], []])) == [[1, 2, 3]]\n    assert list(remove_empty([[1, 2], [3, 4, 5, None]])) == [[1, 2], [3, 4, 5, None]]\n    assert list(remove_empty([[1, 2, 3]])) == [[1, 2, 3]]\n    assert list(remove_empty([])) == []\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lst: List[List[int]]) -> List[List[int]]:\n    \"\"\"Remove empty lists from a given list of lists.\n\n    Args:\n        lst (List[List[int]]): list of lists\n\n    Returns:\n        List[List[int]]: list of lists without empty lists\n    \"\"\"\n    return [lst for lst in lst if lst]\n\n\nif __name__ == \"__main__\":\n    print(remove_empty_lists([[1], [2], [], [3]]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_empty_lists(lists: List[List]) -> List[List]:\n    \"\"\"Remove empty lists.\n\n    >>> remove_empty_lists([[], [1, 2, 3], [4, 5, 6], []])\n    [[1, 2, 3], [4, 5, 6]]\n    >>> remove_empty_lists([[1, 2, 3], [4, 5, 6], []])\n    [[1, 2, 3], [4, 5, 6]]\n    >>> remove_empty_lists([[], [1, 2, 3], [4, 5, 6]])\n    [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    return [lst for lst in lists if lst]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def remove_empty(lst):\n  return [item for item in lst if len(item) != 0]\n\ndef test_function(test_case):\n  test_input, test_expected = test_case\n  test_actual = remove_empty(test_input)\n  if test_actual == test_expected:\n    print(\"Pass\")\n  else:\n    print(\"Fail\")\n\ntest_function(([[], [1, 2, 3]], [[1, 2, 3], []]))\ntest_function(([[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5]]))\ntest_function(([[1, 2, 3], [4, 5], [6, 7], [8, 9]], [[1, 2, 3], [4, 5], [6, 7], [8, 9]]))\ntest_function(([[1, 2, 3], [4, 5], [], [6, 7], [8, 9]], [[1, 2, 3], [4, 5], [6, 7], [8, 9]]))\ntest_function(([[1, 2, 3], [], [4, 5], [], [6, 7], [8, 9]], [[1, 2, 3], [4, 5], [6, 7], [8, 9]]))\ntest_function(([[1, 2, 3], [], [4, 5], [7], [6, 7], [8, 9]], [[1, 2, 3], [4, 5], [7], [6, 7], [8, 9]]))\ntest_function(([[1, 2, 3], [], [4, 5], [7], [6, 7], [8, 9], []], [[1, 2, 3], [4, 5], [7], [6, 7], [8, 9]]))\ntest_function(([[1, 2, 3], [], [4, 5], [7], [6, 7], [8, 9], [], []"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# pylint: disable=wildcard-import\n# pylint: disable=unused-import\n# pylint: disable=ungrouped-imports\n\nimport unittest\n\nfrom hamcrest import assert_that\nfrom hamcrest import is_\n\nfrom common.list_of_lists import remove_empty_lists\n\n\nclass TestRemoveEmptyLists(unittest.TestCase):\n    \"\"\"\n    Tests for the `remove_empty_lists` function.\n    \"\"\"\n\n    def test_removes_empty_lists(self):\n        assert_that(\n            remove_empty_lists([[], ['1'], ['2', '3', '4']]),\n            is_([\"['1', '2', '3', '4']\"]),\n        )"
    }
  ]
}