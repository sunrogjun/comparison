{
  "timestamp": "2025-09-14T23:11:11.762819",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 117,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\"], 3) == [\"foo\", \"bar\", \"baz\"]"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"Returns words longer than n from a given list of words.\n\n    Args:\n        words (List[str]): List of words.\n        n (int): Minimum length of a word to return.\n\n    Returns:\n        List[str]: List of words longer than n.\n    \"\"\"\n\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"a\", \"bc\", \"def\", \"ghij\", \"klmno\", \"pqrstu\"], 3))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# O(n) time | O(n) space\ndef long_words(words: List[str], n: int) -> List[str]:\n    return [word for word in words if len(word) > n]\n\n\n# O(n) time | O(n) space\ndef long_words_better(words: List[str], n: int) -> List[str]:\n    return [word for word in words if len(word) > n]"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from collections import defaultdict\nfrom typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n\n    return result\n\n\ndef shortlist_words_2(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"this\", \"that\", \"is\", \"a\", \"short\", \"story\"], 2) == [\"this\", \"that\", \"is\", \"short\", \"story\"]\n    assert shortlist_words_2([\"this\", \"that\", \"is\", \"a\", \"short\", \"story\"], 2) == [\"this\", \"that\", \"is\", \"short\", \"story\"]"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    :param words: list of words\n    :param n: minimum length\n    :return: list of words of length > n\n    \"\"\"\n\n    # shortlist words of length > n\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"Hello\", \"World\", \"Python\", \"Programming\"], 4))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"Python\", \"Java\", \"C++\", \"C\", \"Javascript\", \"PHP\"], 3) == [\"Python\", \"Java\", \"C++\", \"Javascript\"]"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def shortlist_words(words, n):\n    shortlist = []\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n    return shortlist\n\n\nprint(shortlist_words([\"Hello\", \"Apple\", \"Pie\", \"Earth\", \"Pie\"], 3))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"Return list of words longer than n.\"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"a\", \"bc\", \"def\", \"ghij\"], 2))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"Returns a list of words that are longer than n.\"\"\"\n\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"abc\", \"def\", \"ghijklm\"], 2))\n    print(shortlist_words([\"abc\", \"def\", \"ghijklm\"], 3))"
    },
    {
      "rank": 10,
      "score": 9.0,
      "candidate": "def shortlist_words(words, n):\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"Hello\", \"World\", \"Python\", \"Programming\", \"Tutorials\"], 5))"
    },
    {
      "rank": 11,
      "score": 9.0,
      "candidate": "def shortlist_words(words, n):\n    shortlist = []\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n    return shortlist\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"hello\", \"world\", \"i\", \"am\", \"a\", \"cat\"], 2))"
    },
    {
      "rank": 12,
      "score": 9.0,
      "candidate": "def shortlist_words(words, n):\n    shortlist = []\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n    return shortlist\n\nprint(shortlist_words([\"hello\", \"world\", \"abc\"], 4))"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"abc\", \"def\", \"ghi\", \"jkl\"], 2) == [\"abc\", \"def\", \"ghi\"]"
    },
    {
      "rank": 14,
      "score": 9.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"Returns list of words that are longer than n\"\"\"\n    return [word for word in words if len(word) > n]\n\nif __name__ == '__main__':\n    print(shortlist_words([\"cat\", \"dog\", \"house\", \"car\", \"bird\", \"pig\", \"chicken\"], 3))"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "from functools import reduce\n\n\n# O(n)\ndef shortlist_words_by_length(words, n):\n    return [word for word in words if len(word) > n]\n\n\n# O(n)\ndef shortlist_words_by_length_comprehension(words, n):\n    return [word for word in words if len(word) > n]\n\n\n# O(n)\ndef shortlist_words_by_length_reduce(words, n):\n    return reduce(lambda acc, word: acc + [word] if len(word) > n else acc, words, [])\n\n\nprint(shortlist_words_by_length([\"foo\", \"bar\", \"foobar\", \"barfoo\", \"foobarfoo\", \"foobarfoobar\"], 3))\nprint(shortlist_words_by_length_comprehension([\"foo\", \"bar\", \"foobar\", \"barfoo\", \"foobarfoo\", \"foobarfoobar\"], 3))\nprint(shortlist_words_by_length_reduce([\"foo\", \"bar\", \"foobar\", \"barfoo\", \"foobarfoo\", \"foobarfoobar\"], 3))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "from itertools import islice\n\n\ndef shortlist_words(words, n):\n    \"\"\"Return a list of words longer than n.\"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    words = [\"Python\", \"is\", \"awesome\", \"and\", \"so\", \"are\", \"you\"]\n    n = 4\n    print(shortlist_words(words, n))\n\n    # for word in islice(words, n):\n    #     print(word)"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\nif __name__ == '__main__':\n    words = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']\n    print(shortlist_words(words, 3))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    >>> shortlist_words([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"], 4)\n    ['mno', 'pqr', 'stu', 'vwx']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def long_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(long_words([\"hello\", \"world\", \"longword\", \"cat\", \"dog\", \"elephant\"], 4))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def shortlist_words(words: list, n: int) -> list:\n    \"\"\"Returns a list of words that are longer than n\"\"\"\n    return [word for word in words if len(word) > n]\n\n\ndef test_shortlist_words():\n    \"\"\"\n    >>> test_shortlist_words()\n    \"\"\"\n    assert shortlist_words([\"apple\", \"banana\", \"mango\", \"grapes\"], 4) == [\"banana\", \"mango\", \"grapes\"]\n    assert shortlist_words([\"alpha\", \"beta\", \"gamma\", \"delta\"], 6) == [\"gamma\", \"delta\"]\n    assert shortlist_words([\"zebra\", \"octopus\", \"cuttlefish\"], 6) == []\n\n\nif __name__ == \"__main__\":\n    test_shortlist_words()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def shortlist_words(words: list, n: int) -> list:\n    \"\"\"\n    >>> shortlist_words([\"apple\", \"ball\", \"cat\", \"piano\", \"stairs\", \"tuna\"], 3)\n    ['piano', 'stairs', 'tuna']\n    >>> shortlist_words([\"apple\", \"ball\", \"cat\", \"piano\", \"stairs\", \"tuna\"], 6)\n    []\n    >>> shortlist_words([\"apple\", \"ball\", \"cat\", \"piano\", \"stairs\", \"tuna\"], 1)\n    ['apple', 'ball', 'cat', 'piano', 'stairs', 'tuna']\n    \"\"\"\n    shortlist = []\n\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n\n    return shortlist\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"apple\", \"orange\", \"cat\", \"dog\", \"banana\"], 3))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    >>> shortlist_words([\"Python\", \"Programming\", \"Exercises\"], 2)\n    ['Python', 'Exercises']\n    >>> shortlist_words([\"Python\", \"Programming\", \"Exercises\"], 3)\n    ['Python', 'Programming']\n    >>> shortlist_words([\"Python\", \"Programming\", \"Exercises\"], 1)\n    []\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\n\nprint(shortlist_words([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"], 4))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def shortlist_words(lst, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    shortlist = []\n\n    for word in lst:\n        if len(word) > n:\n            shortlist.append(word)\n\n    return shortlist"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"apple\", \"bear\", \"cat\", \"dog\", \"elephant\"], 3))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    :param words: list of words\n    :param n: length of word to be shortlisted\n    :return: list of words that are longer than n\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    >>> shortlist_words(['Apple', 'Ball', 'Cat', 'Dog'], 3)\n    ['Apple', 'Ball', 'Cat']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    shortlisted_words = []\n\n    for word in words:\n        if len(word) > n:\n            shortlisted_words.append(word)\n\n    return shortlisted_words"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"apple\", \"mango\", \"pear\", \"orange\", \"grape\"], 4))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"Returns a list of words that are longer than n from a given list of words.\"\"\"\n    shortlisted_words = []\n\n    for word in words:\n        if len(word) > n:\n            shortlisted_words.append(word)\n\n    return shortlisted_words\n\n\ndef main():\n    print(shortlist_words([\"one\", \"two\", \"three\"], 2))\n    print(shortlist_words([\"one\", \"two\", \"three\"], 3))\n    print(shortlist_words([\"one\", \"two\", \"three\"], 1))\n    print(shortlist_words([\"one\", \"two\", \"three\"], 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    :param words: list - list of words to shortlist\n    :param n: int - shortlist the words longer than n\n    :return: list - shortlisted words\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\nprint(shortlist_words(['apple', 'bear', 'cat', 'dog', 'elephant'], 3))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    >>> shortlist_words(['Python', 'is', 'awesome', 'and', 'perfect'], 4)\n    ['Python', 'is', 'awesome', 'and']\n    \"\"\"\n    shortlist = []\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n    return shortlist\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def long_words(words, n):\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\nif __name__ == '__main__':\n    print(long_words([\"Python\", \"Programming\", \"Exercises\", \"Coding\"], 5))\n    print(long_words([\"Geeks\", \"for\", \"Geeks\", \"Geeks\", \"Academy\"], 4))\n    print(long_words([\"Python\", \"Programming\", \"Exercises\", \"Coding\"], 6))\n    print(long_words([\"Python\", \"Programming\", \"Exercises\", \"Coding\"], 10))\n    print(long_words([\"Python\", \"Programming\", \"Exercises\", \"Coding\"], 1))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    words = [\"cat\", \"dog\", \"house\", \"computer\"]\n    print(shortlist_words(words, 2))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"Returns words with length greater than n from a list of words.\n\n    Args:\n        words: List of words.\n        n: Shortlist words with length greater than n.\n\n    Returns:\n        A list of words with length greater than n.\n\n    Raises:\n        AssertionError: If words is not a list of strings.\n    \"\"\"\n\n    assert isinstance(words, list) and all(\n        [isinstance(word, str) for word in words]\n    ), \"Input should be a list of strings.\"\n\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"cat\", \"dog\", \"mouse\"], 2))\n    print(shortlist_words([\"cat\", \"dog\", \"mouse\"], 3))\n    print(shortlist_words([\"cat\", \"dog\", \"mouse\"], 1))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"hello\", \"world\", \"abc\", \"xyz\"], 3))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\nif __name__ == '__main__':\n    words = [\"abc\", \"de\", \"abcde\", \"abcde\"]\n    print(shortlist_words(words, 2))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def shortlist_words(words: list[str], n: int) -> list[str]:\n    \"\"\"\n    >>> shortlist_words(['a', 'b', 'c', 'd'], 2)\n    ['b', 'c']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"Returns a list of words longer than n from a given list of words.\n\n    >>> shortlist_words(['Hello', 'World', 'Python', 'C'], 3)\n    ['Hello', 'World', 'Python']\n    >>> shortlist_words(['Hello', 'World', 'Python', 'C'], 4)\n    ['Hello', 'World', 'Python', 'C']\n    >>> shortlist_words(['Hello', 'World', 'Python', 'C'], 5)\n    []\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\ndef shortlist_words_2(words, n):\n    \"\"\"Returns a list of words longer than n from a given list of words.\n\n    >>> shortlist_words_2(['Hello', 'World', 'Python', 'C'], 3)\n    ['Hello', 'World', 'Python']\n    >>> shortlist_words_2(['Hello', 'World', 'Python', 'C'], 4)\n    ['Hello', 'World', 'Python', 'C']\n    >>> shortlist_words_2(['Hello', 'World', 'Python', 'C'], 5)\n    []\n    \"\"\"\n    return [word for word in words if len(word) >= n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    >>> shortlist_words([\"apple\", \"ball\", \"cat\", \"dog\", \"egg\", \"fat\", \"goat\", \"house\"], 3)\n    ['cat', 'dog', 'goat']\n    >>> shortlist_words([\"apple\", \"ball\", \"cat\", \"dog\", \"egg\", \"fat\", \"goat\", \"house\"], 5)\n    ['apple', 'ball', 'cat', 'dog', 'egg']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    shortlist = []\n\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n\n    return shortlist\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"apple\", \"bannana\", \"orange\", \"grape\"], 4))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"Returns words that are longer than n.\"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"a\", \"bc\", \"def\", \"ghij\"], 2))\n    print(shortlist_words([\"a\", \"bc\", \"def\", \"ghij\"], 3))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"foo\", \"bar\", \"baz\", \"qux\", \"quux\"], 3))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef shortlist_words_with_length(words: list, n: int) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\ndef shortlist_words_with_length_optimized(words: list, n: int) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return list(filter(lambda word: len(word) > n, words))\n\n\ndef shortlist_words_with_length_optimized_2(words: list, n: int) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    words = [\"apple\", \"cherry\", \"orange\", \"pear\", \"kiwi\", \"melon\", \"mango\"]\n    n = 4\n    print(shortlist_words_with_length(words, n))\n    print(shortlist_words_with_length_optimized(words, n))\n    print(shortlist_words_with_length_optimized_2(words, n))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def long_word(word_list, n):\n    long_word_list = []\n    for word in word_list:\n        if len(word) > n:\n            long_word_list.append(word)\n    return long_word_list\n\n\nprint(long_word([\"cat\", \"dog\", \"house\", \"tree\"], 3))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    >>> shortlist_words([\"this\", \"is\", \"a\", \"test\"], 2)\n    ['this', 'test']\n    \"\"\"\n    shortlist = []\n\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n\n    return shortlist\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"Return a list of words longer than n.\"\"\"\n    shortlisted = []\n    for word in words:\n        if len(word) > n:\n            shortlisted.append(word)\n    return shortlisted\n\n\nif __name__ == '__main__':\n    print(shortlist_words(['apple', 'bear', 'cat', 'deer'], 4))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef shortlist_words(words, n):\n    \"\"\"Shortlist words that are longer than n from a given list of words.\n\n    Args:\n        words (list): List of words\n        n (int): Length of the words to shortlist\n\n    Returns:\n        list: List of shortlisted words\n    \"\"\"\n    shortlisted_words = []\n\n    for word in words:\n        if len(word) > n:\n            shortlisted_words.append(word)\n\n    return shortlisted_words\n\n\ndef shortlist_words_dict(words, n):\n    \"\"\"Shortlist words that are longer than n from a given list of words.\n\n    Args:\n        words (list): List of words\n        n (int): Length of the words to shortlist\n\n    Returns:\n        list: List of shortlisted words\n    \"\"\"\n    shortlisted_words = []\n\n    word_length_dict = defaultdict(list)\n    for word in words:\n        word_length_dict[len(word)].append(word)\n\n    for word_length, words in word_length_dict.items():\n        if word_length > n:\n            shortlisted_words.extend(words)\n\n    return shortlisted_words\n\n\ndef main():\n    words = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n    print(shortlist_words(words, 4))\n    print(shortlist_words_dict(words, 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def shortlist_words(n, words):\n    \"\"\"\n    >>> shortlist_words(3, ['ant', 'bee', 'cat', 'dog', 'elephant'])\n    ['ant', 'bee', 'cat', 'dog']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\ndef shortlist_words_compact(n, words):\n    \"\"\"\n    >>> shortlist_words_compact(3, ['ant', 'bee', 'cat', 'dog', 'elephant'])\n    ['ant', 'bee', 'cat', 'dog']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\ndef shortlist_words_compact_2(n, words):\n    \"\"\"\n    >>> shortlist_words_compact(3, ['ant', 'bee', 'cat', 'dog', 'elephant'])\n    ['ant', 'bee', 'cat', 'dog']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def shortlist_long_words(words, n):\n    \"\"\"\n    >>> shortlist_long_words(['cat', 'dog', 'mouse', 'elephant', 'lion', 'zebra'], 3)\n    ['elephant', 'lion', 'zebra']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def long_words(words, n):\n    result = []\n\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(long_words([\"apple\", \"pen\", \"fine\", \"cat\", \"dog\", \"bear\", \"mouse\"], 4))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef shortlist_words(words, n):\n    shortlist = []\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n\n    return shortlist\n\n\ndef shortlist_words_optimized(words, n):\n    return [word for word in words if len(word) > n]\n\n\ndef shortlist_words_using_counter(words, n):\n    return [word for word, count in Counter(words).items() if count > n]\n\n\nif __name__ == \"__main__\":\n    words = [\"apple\", \"orange\", \"cat\", \"dog\", \"pineapple\", \"grape\"]\n    print(shortlist_words(words, 3))\n    print(shortlist_words_optimized(words, 3))\n    print(shortlist_words_using_counter(words, 3))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    :param words: list[str] - list of words\n    :param n: int - length of the words to shortlist\n    :return: list[str] - shortlisted words\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = shortlist_words(*test_input)\n    if test_expected == test_actual:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([[\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"], 4], [\"quick\", \"brown\", \"fox\", \"jumped\"]))\ntest_function(([[\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"], 6], [\"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]))\ntest_function(([[\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"], 10], []))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    >>> shortlist_words([\"Python\", \"Programming\", \"is\", \"fun\", \"and\", \"simple\"], 3)\n    ['Python', 'Programming', 'fun', 'and', 'simple']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef shortlist_words(words, n):\n    return list(filter(lambda x: len(x) > n, words))\n\n\ndef shortlist_words_counter(words, n):\n    return [key for key, value in Counter(words).items() if value > n]\n\n\nprint(shortlist_words([\"hello\", \"world\", \"hi\", \"world\", \"hello\", \"hi\"], 1))\nprint(shortlist_words_counter([\"hello\", \"world\", \"hi\", \"world\", \"hello\", \"hi\"], 1))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef shortlist_words(words, n):\n    \"\"\"Returns a list of words longer than n.\"\"\"\n    # Create a dict to store the words.\n    # The key is the length of the word.\n    # The value is the word.\n    word_dict = defaultdict(list)\n    for word in words:\n        word_dict[len(word)].append(word)\n    return word_dict[n+1]\n\n\ndef main():\n    # Sample words.\n    words = [\"ant\", \"blues\", \"green\", \"yellow\", \"zebra\", \"orange\", \"banana\", \"coconut\"]\n    n = 3\n    print(\"Sample words:\")\n    print(words)\n    print(\"Words longer than {}:\".format(n))\n    print(shortlist_words(words, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\ndef main():\n    print(shortlist_words([\"Python\", \"PHP\", \"Java\", \"C++\", \"C\", \"JavaScript\", \"Swift\", \"Ruby\"], 4))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"Apple\", \"Pear\", \"Kiwi\", \"Cherry\", \"Apricot\"], 3))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    words = [\"apple\", \"ball\", \"cat\", \"dog\", \"elephant\"]\n    print(shortlist_words(words, 3))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\ndef main():\n    print(shortlist_words([\"hello\", \"world\", \"hi\", \"india\"], 3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"Returns list of words that are longer than n.\"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef shortlist_long_words(words: List[str], n: int) -> List[str]:\n    \"\"\"Returns list of words that are longer than n.\"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_long_words([\"a\", \"bc\", \"def\", \"ghij\", \"klmno\", \"pqrstu\"], 3))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    >>> shortlist_words(['apple', 'ball', 'cat', 'dog', 'elephant', 'frog'], 3)\n    ['apple', 'ball', 'cat', 'dog', 'elephant', 'frog']\n    >>> shortlist_words(['apple', 'ball', 'cat', 'dog', 'elephant', 'frog'], 4)\n    ['apple', 'ball', 'cat', 'dog', 'elephant']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"Returns a list of words that are longer than n.\"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"ant\", \"bee\", \"cat\", \"lion\", \"tiger\"], 2) == [\"ant\", \"bee\", \"cat\", \"lion\", \"tiger\"]\n    assert shortlist_words([\"ant\", \"bee\", \"cat\", \"lion\", \"tiger\"], 3) == [\"ant\", \"bee\", \"cat\", \"lion\"]\n    assert shortlist_words([\"ant\", \"bee\", \"cat\", \"lion\", \"tiger\"], 5) == [\"ant\", \"bee\", \"cat\"]"
    },
    {
      "rank": 66,
      "score": 4.0,
      "candidate": "from collections import defaultdict\nfrom typing import List\n\n\ndef shortlist_long_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    O(n) time, O(n) space.\n    \"\"\"\n    result = []\n\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n\n    return result\n\n\ndef shortlist_long_words_dict(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    O(n) time, O(n) space.\n    \"\"\"\n    result = []\n\n    freq = defaultdict(int)\n\n    for word in words:\n        freq[word] += 1\n\n    for word, count in freq.items():\n        if count > 1:\n            continue\n\n        if len(word) > n:\n            result.append(word)\n\n    return result\n\n\ndef shortlist_long_words_dict_optimized(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    O(n) time, O(n) space.\n    \"\"\"\n    freq = defaultdict(int)\n\n    for word in words:\n        freq[word] += 1\n\n    result = []\n\n    for word, count in freq.items():\n        if count > 1:\n            continue\n\n        if len(word) > n:\n            result.append(word)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert shortlist_long_words([\"hello\", \"world\", \"yes\", \"no\", \"maybe\"], 2) == [\n        \"hello\",\n        \"world\",\n        \"yes\",\n        \"no\",\n        \"maybe\",\n    ]\n    assert shortlist_long_words_dict(\n        [\"hello\", \"world\", \"yes\", \"no\", \"maybe\"], 2\n    ) == [\"hello\", \"world\", \"yes\", \"no\", \"maybe\"]\n    assert shortlist_long_words_dict_optimized(\n        [\"hello\", \"world\", \"yes\", \"no\", \"maybe\"], 2"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_long_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    words = [\"apple\", \"banana\", \"cherry\", \"grape\"]\n    n = 2\n    print(shortlist_long_words(words, n))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    words = [\"apple\", \"ball\", \"cat\", \"dog\", \"elephant\", \"frog\", \"goat\"]\n    print(shortlist_words(words, 3))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"Shortlist words that are longer than n.\n\n    Args:\n        words (list): List of words.\n        n (int): Number of characters.\n\n    Returns:\n        list: Shortlisted words.\n    \"\"\"\n    shortlisted_words = []\n    for word in words:\n        if len(word) > n:\n            shortlisted_words.append(word)\n    return shortlisted_words\n\n\nif __name__ == \"__main__\":\n    words = [\"apple\", \"ball\", \"cat\", \"dog\", \"elephant\", \"fish\", \"goat\", \"house\"]\n    n = 4\n    print(shortlist_words(words, n))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = shortlist_words(test_input[0], test_input[1])\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function(([['cat', 'dog', 'llama', 'parrot', 'lion', 'elephant', 'mouse'], 3],\n               ['llama', 'parrot', 'lion', 'elephant', 'mouse']))\ntest_function(([['cat', 'dog', 'llama', 'parrot', 'lion', 'elephant', 'mouse'], 5],\n               ['llama', 'parrot', 'lion', 'elephant', 'mouse']))\ntest_function(([['cat', 'dog', 'llama', 'parrot', 'lion', 'elephant', 'mouse'], 10],\n               ['llama', 'parrot', 'lion', 'elephant', 'mouse']))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    :param words: list of words\n    :param n: number of characters\n    :return: list of words with length greater than n\n    >>> shortlist_words([\"ant\", \"blues\", \"green\", \"yellow\", \"zebra\"], 3)\n    ['blues', 'green', 'yellow', 'zebra']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\ndef shortlist_words_optimized(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    :param words: list of words\n    :param n: number of characters\n    :return: list of words with length greater than n\n    >>> shortlist_words_optimized([\"ant\", \"blues\", \"green\", \"yellow\", \"zebra\"], 3)\n    ['blues', 'green', 'yellow', 'zebra']\n    \"\"\"\n    shortlist = []\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n    return shortlist\n\n\ndef shortlist_words_optimized_dict(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    :param words: list of words\n    :param n: number of characters\n    :return: list of words with length greater than n\n    >>> shortlist_words_optimized_dict([\"ant\", \"blues\", \"green\", \"yellow\", \"zebra\"], 3)\n    ['blues', 'green', 'yellow', 'zebra']\n    \"\"\"\n    word_dict = defaultdict(list)\n    for word in words:\n        word_dict[len(word)].append(word)\n    return word_dict[4]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    list_of_words = [\"ant\", \"blues\", \"green\", \"yellow\", \"zebra\"]\n    print(shortlist_words(list_of_words,"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def shortlist_long_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = shortlist_long_words(test_input[0], test_input[1])\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((['apple', 'cat', 'dog', 'llama'], 3), ['cat', 'dog', 'llama']))\ntest_function((['chimpanzees', 'giraffe', 'gorilla'], 6), ['giraffe', 'gorilla']))\ntest_function((['cat', 'dog', 'llama', 'newton', 'neutron'], 2), ['llama', 'newton', 'neutron']))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef shortlist_words(words, n):\n    shortlist = []\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n\n    return shortlist\n\n\nif __name__ == \"__main__\":\n    words = [\"apple\", \"orange\", \"pear\", \"banana\", \"pineapple\", \"cherry\"]\n    n = 4\n    start = timer()\n    shortlist_words(words, n)\n    end = timer()\n\n    print(f\"Elapsed time: {end - start:.6f}\")"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    shortlist = []\n\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n\n    return shortlist\n\n\nif __name__ == \"__main__\":\n    words = [\"foo\", \"bar\", \"foobar\", \"barfoo\", \"foobarfoo\"]\n    assert shortlist_words(words, 3) == [\"foobar\", \"barfoo\", \"foobarfoo\"]"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_long_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n)\n    \"\"\"\n\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_long_words([\"apple\", \"cat\", \"dog\", \"llama\", \"mango\"], 3) == [\"apple\", \"llama\", \"mango\"]"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"a\", \"bc\", \"def\", \"ghi\", \"jklm\"], 2) == [\"bc\", \"def\", \"ghi\", \"jklm\"]"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def shortlist_words(words: list, n: int) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    shortlist = []\n\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n\n    return shortlist\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"apple\", \"banana\", \"orange\", \"grape\", \"pineapple\"], 4))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\ndef test_shortlist_words():\n    words = ['a', 'bc', 'de', 'fgh', 'ijk', 'lmn', 'opqr', 'stu']\n    assert shortlist_words(words, 3) == ['a', 'bc', 'de', 'fgh', 'ijk', 'lmn', 'opqr', 'stu']\n    assert shortlist_words(words, 4) == ['a', 'bc', 'de', 'fgh', 'ijk', 'lmn', 'opqr', 'stu']\n    assert shortlist_words(words, 5) == ['fgh', 'ijk', 'lmn', 'opqr', 'stu']"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"Returns list of words longer than n.\"\"\"\n    return [word for word in words if len(word) > n]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = shortlist_words(*test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((([], 2), []))\ntest_function((([\"cat\", \"dog\", \"house\", \"hamster\"], 3), [\"cat\", \"dog\", \"house\"]))\ntest_function((([\"cat\", \"dog\", \"house\", \"hamster\"], 6), [\"cat\", \"dog\", \"house\", \"hamster\"]))\ntest_function((([\"cat\", \"dog\", \"house\", \"hamster\"], 1), []))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    shortlisted: List[str] = []\n\n    for word in words:\n        if len(word) > n:\n            shortlisted.append(word)\n\n    return shortlisted\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"], 4) == [\n        \"apple\",\n        \"banana\",\n        \"cherry\",\n        \"orange\",\n    ]"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"abc\", \"bcd\", \"cdefg\", \"de\", \"cd\"], 2) == [\"cdefg\", \"de\", \"cd\"]"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"hello\", \"world\", \"abc\"], 2) == [\"hello\", \"world\"]"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def shortlist_words(words: list[str], n: int) -> list[str]:\n    \"\"\"\n    >>> shortlist_words([\"Apple\", \"Banana\", \"Pear\", \"Orange\", \"Grape\", \"Peach\"], 4)\n    ['Apple', 'Banana', 'Pear', 'Orange']\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def shortlist_words(words, n):\n    # your code here\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(shortlist_words(['tiger', 'eagle', 'lion', 'hippopotamus'], 3))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert shortlist_words(['tiger', 'eagle', 'lion', 'hippopotamus'], 3) == ['tiger', 'eagle', 'lion', 'hippopotamus']\n    assert shortlist_words(['tiger', 'eagle', 'lion', 'hippopotamus'], 4) == ['tiger', 'eagle', 'lion', 'hippopotamus']\n    assert shortlist_words(['tiger', 'eagle', 'lion', 'hippopotamus'], 5) == ['tiger', 'eagle', 'lion', 'hippopotamus']\n    assert shortlist_words(['tiger', 'eagle', 'lion', 'hippopotamus'], 6) == ['eagle', 'lion', 'hippopotamus']\n    assert shortlist_words(['tiger', 'eagle', 'lion', 'hippopotamus'], 7) == ['lion', 'hippopotamus']\n    assert shortlist_words(['tiger', 'eagle', 'lion', 'hippopotamus'], 8) == ['hippopotamus']\n    assert shortlist_words(['tiger', 'eagle', 'lion', 'hippopotamus'], 9) == ['hippopotamus']\n    assert shortlist_words(['tiger', 'eagle', 'lion', 'hippopotamus'], 10) == ['hippopotamus']\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    :param words: list[str] - list of words\n    :param n: int - minimum length of shortlisted words\n    :return: list[str] - shortlisted words\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = shortlist_words(*test_input)\n    if test_expected == test_actual:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_input = ([\"word\", \"words\", \"world\"], 4)\ntest_expected = [\"words\", \"world\"]\ntest_function((test_input, test_expected))\n\ntest_input = ([\"cat\", \"caterpillar\", \"caterpiller\"], 4)\ntest_expected = [\"caterpillar\", \"caterpiller\"]\ntest_function((test_input, test_expected))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"apple\", \"orange\", \"banana\", \"kiwi\", \"cherry\"], 4) == [\"apple\", \"orange\", \"banana\"]"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"this\", \"that\", \"those\", \"these\", \"what\", \"where\", \"when\"], 4) == [\n        \"this\",\n        \"that\",\n        \"those\",\n        \"these\",\n    ]\n    assert shortlist_words([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 2) == [\"a\", \"b\", \"c\", \"d\", \"e\"]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"], 4) == [\n        \"apple\",\n        \"banana\",\n        \"orange\",\n        \"melon\",\n    ]"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef shortlist_words(words: list, n: int) -> list:\n    \"\"\"\n    :param words: list of words\n    :param n: min length of word\n    :return: list of words\n    >>> shortlist_words([\"abc\", \"bcd\", \"cdefg\", \"fgh\"], 3)\n    ['bcd', 'cdefg']\n    >>> shortlist_words([\"abc\", \"bcd\", \"cdefg\", \"fgh\"], 5)\n    []\n    >>> shortlist_words([\"abc\", \"bcd\", \"cdefg\", \"fgh\"], 1)\n    ['abc', 'bcd', 'fgh']\n    \"\"\"\n    shortlisted_words = []\n\n    # TODO: Write your solution here\n    return shortlisted_words\n\n\ndef shortlist_words_eff(words: list, n: int) -> list:\n    \"\"\"\n    :param words: list of words\n    :param n: min length of word\n    :return: list of words\n    >>> shortlist_words_eff([\"abc\", \"bcd\", \"cdefg\", \"fgh\"], 3)\n    ['bcd', 'cdefg']\n    >>> shortlist_words_eff([\"abc\", \"bcd\", \"cdefg\", \"fgh\"], 5)\n    []\n    >>> shortlist_words_eff([\"abc\", \"bcd\", \"cdefg\", \"fgh\"], 1)\n    ['abc', 'bcd', 'fgh']\n    \"\"\"\n    shortlisted_words = []\n\n    # TODO: Write your solution here\n    return shortlisted_words\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef shortlist_words(words, n):\n    \"\"\"Shortlist words that are longer than n.\"\"\"\n    if not words or not n:\n        return []\n\n    if n < 1:\n        return []\n\n    return [word for word in words if len(word) > n]\n\n\ndef shortlist_words_with_defaultdict(words, n):\n    \"\"\"Shortlist words that are longer than n using defaultdict.\"\"\"\n    if not words or not n:\n        return []\n\n    if n < 1:\n        return []\n\n    words_dict = defaultdict(list)\n\n    for word in words:\n        words_dict[len(word)].append(word)\n\n    return words_dict.get(n, [])"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    shortlist: List[str] = []\n\n    for word in words:\n        if len(word) > n:\n            shortlist.append(word)\n\n    return shortlist\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"a\", \"bc\", \"def\", \"ghij\"], 1) == [\"bc\", \"def\", \"ghij\"]"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    >>> shortlist_words([\"abc\", \"def\", \"ghi\", \"jkl\"], 2)\n    ['abc', 'def', 'ghi', 'jkl']\n    >>> shortlist_words([\"abc\", \"def\", \"ghi\", \"jkl\"], 3)\n    ['abc', 'def', 'ghi', 'jkl']\n    >>> shortlist_words([\"abc\", \"def\", \"ghi\", \"jkl\"], 4)\n    ['abc', 'def', 'ghi', 'jkl']\n    >>> shortlist_words([\"abc\", \"def\", \"ghi\", \"jkl\"], 5)\n    []\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    word_length_map = defaultdict(list)\n\n    for word in words:\n        word_length_map[len(word)].append(word)\n\n    return word_length_map[n + 1]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"cat\", \"dog\", \"llama\", \"parrot\"], 3) == [\"llama\"]"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"ant\", \"bee\", \"cat\", \"dog\", \"elephant\"], 3) == [\"bee\", \"cat\", \"dog\", \"elephant\"]"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef shortlist_long_words(words, n):\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\n\ndef shortlist_long_words_v2(words, n):\n    return list(filter(lambda x: len(x) > n, words))\n\n\ndef shortlist_long_words_v3(words, n):\n    return [word for word in words if len(word) > n]\n\n\ndef shortlist_long_words_v4(words, n):\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\n\ndef shortlist_long_words_v5(words, n):\n    return list(filter(lambda x: len(x) > n, words))\n\n\ndef shortlist_long_words_v6(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_long_words([\"i\", \"am\", \"a\", \"boy\", \"boy\", \"is\", \"a\", \"good\", \"girl\", \"girl\", \"is\", \"a\", \"good\"], 3))\n    print(shortlist_long_words_v2([\"i\", \"am\", \"a\", \"boy\", \"boy\", \"is\", \"a\", \"good\", \"girl\", \"girl\", \"is\", \"a\", \"good\"], 3))\n    print(shortlist_long_words_v3([\"i\", \"am\", \"a\", \"boy\", \"boy\", \"is\", \"a\", \"good\", \"girl\", \"girl\", \"is\", \"a\", \"good\"], 3))\n    print(shortlist_long_words_v4([\"i\", \"am\", \"a\", \"boy\", \"boy\", \"is\", \"a\", \"good\", \"girl\", \"girl\", \"is\", \"a\", \"good\"], 3))\n    print(shortlist_long_words_v5([\"i\", \"am\","
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from time import perf_counter\n\n\ndef shortlist_words(words, n):\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    words = [\"apple\", \"pear\", \"orange\", \"kiwi\", \"pineapple\", \"grapes\", \"strawberry\", \"plum\"]\n\n    start = perf_counter()\n    shortlisted_words = shortlist_words(words, 4)\n    end = perf_counter()\n    print(f\"Shortlisted words: {shortlisted_words}\")\n    print(f\"Time taken: {end-start:.8f}s\")"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    assert shortlist_words([\"foo\", \"bar\", \"baz\", \"qux\"], 2) == [\"bar\", \"baz\"]"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef shortlist_words(words, n):\n    word_count = Counter(words)\n    return [word for word, count in word_count.items() if count > n]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = shortlist_words(*test_input)\n    if test_expected == test_actual:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra'], 3), ['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra']))\ntest_function((['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra'], 1), ['llama', 'whale'])\ntest_function((['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra'], 2), ['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra'])\ntest_function((['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra'], 4), ['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra'])\ntest_function((['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra'], 5), [])\ntest_function((['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra'], 6), [])\ntest_function((['cat', 'dog', 'llama', 'parrot', 'whale', 'zebra'], 7), [])"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def shortlist_words(words, n):\n    \"\"\"\n    :param words: List[str]\n    :param n: int\n    :return: List[str]\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"Hello\", \"World\", \"Python\", \"Programming\", \"NLP\"], 4))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef shortlist_words(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\nif __name__ == \"__main__\":\n    print(shortlist_words([\"hello\", \"world\", \"python\"], 4))"
    }
  ]
}