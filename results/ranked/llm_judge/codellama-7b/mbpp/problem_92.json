{
  "timestamp": "2025-09-14T22:59:42.888072",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 92,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def eulerian(n, m):\n    if n > m:\n        n, m = m, n\n    return sum(\n        sum(1 for _ in range(i, n + 1, i))\n        for i in range(1, m + 1)\n    )\n\n\nif __name__ == '__main__':\n    test_cases = [\n        (5, 2),\n        (10, 5),\n        (100, 100),\n    ]\n    for n, m in test_cases:\n        print(eulerian(n, m))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def a(n, m):\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return a(n-1, m) + a(n, m-1)\n\n\nn, m = map(int, input().split())\nprint(a(n, m))\n\n\n\"\"\"\nInput:\n2 2\nOutput:\n4\n\"\"\""
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def a(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        if n < m:\n            n, m = m, n\n        if n == 1:\n            return 1\n        if m == 1:\n            return 1\n        if m == 2:\n            return 2\n        if m == 3:\n            return 4\n        if m == 4:\n            return 8\n        if m == 5:\n            return 16\n        if m == 6:\n            return 32\n        if m == 7:\n            return 64\n        if m == 8:\n            return 128\n        if m == 9:\n            return 256\n        if m == 10:\n            return 512\n        if m == 11:\n            return 1024\n        if m == 12:\n            return 2048\n        if m == 13:\n            return 4096\n        if m == 14:\n            return 8192\n        if m == 15:\n            return 16384\n        if m == 16:\n            return 32768\n        if m == 17:\n            return 65536\n        if m == 18:\n            return 131072\n        if m == 19:\n            return 262144\n        if m == 20:\n            return 524288\n        if m == 21:\n            return 1048576\n        if m == 22:\n            return 2097152\n        if m == 23:\n            return 4194304\n        if m == 24:\n            return 8388608\n        if m == 25:\n            return 16777216\n        if m == 26:\n            return 33554"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import math\n\n\ndef eulerian(n, m):\n    # We can calculate a(n, m) by using the formula\n    # a(n, m) = a(n - 1, m) + a(n - 1, m - 1) * n\n    # where a(n, m) is the number of Eulerian number with n nodes and m edges.\n    #\n    # The base case is a(0, m) = 1.\n    #\n    # The runtime complexity of this algorithm is O(m).\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    if m == 1:\n        return n + 1\n    return eulerian(n - 1, m) + eulerian(n - 1, m - 1) * n\n\n\ndef eulerian_fast(n, m):\n    # We can calculate a(n, m) by using the formula\n    # a(n, m) = a(n - 1, m) + a(n - 1, m - 1) * n\n    # where a(n, m) is the number of Eulerian number with n nodes and m edges.\n    #\n    # The runtime complexity of this algorithm is O(m).\n    if m == 0:\n        return 0\n    if m == 1:\n        return n + 1\n\n    table = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        table[i][0] = 1\n\n    for i in range(1, m + 1):\n        table[0][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            table[i][j] = table[i - 1][j] + table[i - 1][j - 1] * i\n\n    return table[n][m]\n\n\ndef eulerian_dp(n, m):\n    # We can calculate a(n, m) by using the formula"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def a(n, m):\n    if n == m == 0:\n        return 0\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n\n    return (a(n - 1, m - 1) + a(n - 1, m)) % (10 ** 9 + 7)\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    print(a(n, m))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def a(n, m):\n    return m"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    >>> eulerian_number(0, 0)\n    0\n    >>> eulerian_number(1, 0)\n    1\n    >>> eulerian_number(2, 1)\n    1\n    >>> eulerian_number(2, 2)\n    2\n    >>> eulerian_number(3, 1)\n    2\n    >>> eulerian_number(3, 2)\n    4\n    >>> eulerian_number(3, 3)\n    1\n    >>> eulerian_number(4, 1)\n    3\n    >>> eulerian_number(4, 2)\n    8\n    >>> eulerian_number(4, 3)\n    12\n    >>> eulerian_number(4, 4)\n    1\n    \"\"\"\n    if n < 0 or m < 0:\n        return 0\n    if n == 0:\n        return 0 if m == 0 else 1\n\n    result = 0\n    for i in range(m + 1):\n        result += eulerian_number(n - 1, i)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def a(n, m):\n    \"\"\"\n    >>> a(2, 1)\n    3\n    >>> a(2, 2)\n    2\n    >>> a(3, 2)\n    3\n    >>> a(3, 3)\n    1\n    >>> a(4, 2)\n    2\n    >>> a(4, 3)\n    1\n    >>> a(4, 4)\n    1\n    >>> a(5, 2)\n    2\n    >>> a(5, 3)\n    3\n    >>> a(5, 4)\n    4\n    >>> a(5, 5)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3 - m\n    if n == 3:\n        return 3 - m\n    if n == 4:\n        return 2 - m\n    if n == 5:\n        return 4 - m\n    if n == 6:\n        return 1\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 1\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n =="
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def eulerian(n, m):\n    if n < 1 or m < 1:\n        return 0\n    a = [0] * (m + 1)\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            a[i + j] += a[i]\n    return a[m]\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    print(eulerian(n, m))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import sys\nsys.setrecursionlimit(1000000)\n\n\ndef main():\n    n, m = map(int, input().strip().split())\n    print(eulerian(n, m))\n\n\ndef eulerian(n, m):\n    \"\"\"\n    >>> eulerian(1, 1)\n    2\n    >>> eulerian(2, 2)\n    2\n    >>> eulerian(3, 2)\n    1\n    >>> eulerian(3, 3)\n    1\n    >>> eulerian(4, 2)\n    2\n    >>> eulerian(4, 3)\n    1\n    >>> eulerian(4, 4)\n    1\n    \"\"\"\n    if n == 1:\n        return 2\n    if m == 1:\n        return 1\n    return 2 * eulerian(n - 1, m - 1) + eulerian(n - 1, m)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def eulerian_number(n, m):\n    result = 0\n    for i in range(n):\n        result += 1 / (1 + i * m)\n    return result\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter n: \"))\n    m = int(input(\"Enter m: \"))\n    print(eulerian_number(n, m))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\n\ndef eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Return eulerian number a(n, m).\n    >>> eulerian_number(1, 1)\n    0\n    >>> eulerian_number(2, 1)\n    1\n    >>> eulerian_number(2, 2)\n    2\n    >>> eulerian_number(2, 3)\n    1\n    >>> eulerian_number(2, 4)\n    0\n    >>> eulerian_number(2, 5)\n    0\n    \"\"\"\n    if n == 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    if n > 2 and m == 1:\n        return 1\n\n    if n > 2 and m == 2:\n        return 2\n\n    if n > 2 and m > 2:\n        return int(\n            (2 ** (n - 1) - 1)\n            * (2 ** (m - 1) - 1)\n            / (math.factorial(n - 1) * math.factorial(m - 1))\n        )\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    The eulerian number is the number of ways to go from 1 to n,\n    using m edges.\n\n    It's the binomial coefficient (n-1, m-1).\n    \"\"\"\n    return binomial_coefficient(n - 1, m - 1)\n\n\ndef binomial_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Compute the binomial coefficient n choose k.\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n\n    if k > n - k:\n        k = n - k\n\n    return binomial_coefficient(n - 1, k) + binomial_coefficient(n - 1, k - 1)\n\n\ndef test_eulerian_number():\n    \"\"\"\n    >>> eulerian_number(2, 1)\n    1\n    >>> eulerian_number(3, 2)\n    1\n    >>> eulerian_number(10, 5)\n    42\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    test_eulerian_number()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def eulerian_number(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        from functools import reduce\n        from math import factorial\n        return reduce(lambda x, y: x * y, [factorial(i) for i in range(n, n - m, -1)]) // factorial(n)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.eulerian_number(3, 1))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Return the Eulerian number of n x m matrix.\n    >>> eulerian_number(3, 2)\n    15\n    >>> eulerian_number(1, 1)\n    1\n    >>> eulerian_number(2, 2)\n    2\n    \"\"\"\n    if n == 1 and m == 1:\n        return 1\n\n    if n == 1 and m > 1:\n        return 0\n\n    return eulerian_number(n - 1, m) + eulerian_number(n, m - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def eulerian_number(n, m):\n    pass\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    m = int(input(\"Enter m: \"))\n    print(\"Eulerian number is: {}\".format(eulerian_number(n, m)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    >>> eulerian_number(3, 2)\n    3\n    >>> eulerian_number(10, 5)\n    66\n    >>> eulerian_number(100, 10)\n    77852\n    >>> eulerian_number(1000, 100)\n    104956278\n    \"\"\"\n    if n < m:\n        return 0\n\n    return 1 + eulerian_number(n - 1, m) + eulerian_number(n - m, m)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def eulerian_number(n, m):\n    if n == 0:\n        return 1\n\n    if m == 0:\n        return 0\n\n    return eulerian_number(n - 1, m) + eulerian_number(n, m - 1)\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    m = int(input(\"Enter m: \"))\n    print(eulerian_number(n, m))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from itertools import permutations\n\n\ndef a(n: int, m: int) -> int:\n    \"\"\"\n    >>> a(1, 1)\n    1\n    >>> a(2, 2)\n    1\n    >>> a(3, 2)\n    3\n    >>> a(4, 2)\n    7\n    >>> a(5, 2)\n    15\n    >>> a(10, 2)\n    462\n    >>> a(10, 3)\n    1511\n    \"\"\"\n    return sum(\n        1\n        for p in permutations(range(1, n + 1), n)\n        if sum(p) % m == 0\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef eulerian_number(n, m):\n    \"\"\"\n    Return the eulerian number a(n, m).\n    \"\"\"\n    if n <= 0 or m <= 0:\n        return 0\n    if m == 1:\n        return factorial(n)\n    if n == m:\n        return factorial(n)**2\n    return eulerian_number(n - 1, m) + eulerian_number(n, m - 1)\n\n\ndef test_eulerian_number():\n    \"\"\"\n    >>> eulerian_number(0, 0)\n    0\n    >>> eulerian_number(1, 0)\n    0\n    >>> eulerian_number(1, 1)\n    1\n    >>> eulerian_number(1, 2)\n    0\n    >>> eulerian_number(2, 1)\n    2\n    >>> eulerian_number(2, 2)\n    6\n    >>> eulerian_number(3, 1)\n    6\n    >>> eulerian_number(3, 2)\n    20\n    >>> eulerian_number(3, 3)\n    36\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    >>> eulerian_number(1, 1)\n    1\n    >>> eulerian_number(2, 1)\n    2\n    >>> eulerian_number(3, 1)\n    4\n    >>> eulerian_number(2, 2)\n    1\n    >>> eulerian_number(3, 2)\n    6\n    >>> eulerian_number(1, 3)\n    1\n    \"\"\"\n    if m < 1:\n        return 0\n    if n < 1:\n        return 0\n    return (\n        m ** n\n        + (m - 1) ** n\n        + (m - 1) * m ** (n - 1)\n        + (m - 1) * (m - 2) ** (n - 1)\n        + (m - 1) * (m - 2) * m ** (n - 2)\n        + (m - 1) * (m - 2) * (m - 3) ** (n - 2)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def eulerian_number(n, m):\n    if n < m:\n        return 0\n\n    if m == 0:\n        return 1\n\n    if n == m:\n        return 1\n\n    return eulerian_number(n - 1, m - 1) + eulerian_number(n - 1, m)\n\n\ndef test_eulerian_number():\n    \"\"\"\n    >>> test_eulerian_number()\n    \"\"\"\n    assert eulerian_number(3, 2) == 3\n    assert eulerian_number(5, 3) == 15\n    assert eulerian_number(10, 5) == 9295\n    assert eulerian_number(100, 50) == 1273371287589974433675775603\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef a(n, m):\n    \"\"\"\n    Eulerian number.\n    \"\"\"\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    if n == 1:\n        return 1\n    return a(n - 1, m) + math.factorial(n - 1) * a(n - 1, m - 1)\n\n\ndef main():\n    n = int(input())\n    m = int(input())\n    print(a(n, m))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef eulerian_number(n, m):\n    \"\"\"\n    Eulerian number of n and m.\n    \"\"\"\n    return factorial(n + m) // (factorial(m) * factorial(n))\n\n\ndef main():\n    \"\"\"\n    >>> eulerian_number(5, 3)\n    36\n    >>> eulerian_number(7, 4)\n    720\n    >>> eulerian_number(10, 1)\n    120\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def a(n, m):\n    \"\"\"\n    a(n, m) = a(n-1, m) + a(n-1, m-1)\n    \"\"\"\n    if m == 0 or n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return a(n-1, m) + a(n-1, m-1)\n\n\nprint(a(4, 3))\nprint(a(4, 2))\nprint(a(4, 1))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    n: number of nodes\n    m: number of edges\n    \"\"\"\n    if m == 0:\n        return 1\n    if m == n-1:\n        return 2**n - 1\n    if m == n-2:\n        return (2**n - 2) * (2**n - 2) // 2\n    return 0\n\n\nif __name__ == '__main__':\n    assert eulerian_number(3, 2) == 24\n    assert eulerian_number(4, 3) == 384\n    assert eulerian_number(5, 4) == 24016\n    assert eulerian_number(6, 5) == 75680\n    assert eulerian_number(7, 6) == 124224\n    assert eulerian_number(8, 7) == 1508728\n    assert eulerian_number(9, 8) == 10744256\n    assert eulerian_number(10, 9) == 1768216256"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    >>> eulerian_number(3, 2)\n    3\n    >>> eulerian_number(3, 3)\n    0\n    >>> eulerian_number(1, 3)\n    0\n    \"\"\"\n    if n < m:\n        return 0\n    elif n == m:\n        return 1\n    else:\n        return eulerian_number(n - 1, m) + eulerian_number(n - 1, m - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def a(n, m):\n    if n == 0:\n        return 1\n    if n > 0 and m > n:\n        return 0\n    if m > n:\n        m = n\n    return (m / n) * a(n - 1, m) + (1 / (m * n)) * a(n - 1, m - 1)\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    m = int(input(\"Enter m: \"))\n    print(\"Answer:\", a(n, m))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def a(n: int, m: int) -> int:\n    \"\"\"\n    a(n, m) = a(n-1, m) + a(n-1, m-1)\n    \"\"\"\n    if n == 1 and m == 1:\n        return 1\n\n    if n == 1:\n        return a(1, m - 1)\n\n    if m == 1:\n        return a(n - 1, 1)\n\n    return a(n - 1, m) + a(n - 1, m - 1)\n\n\nif __name__ == \"__main__\":\n    assert a(3, 2) == 3, \"a(3, 2) != 3\"\n    assert a(3, 3) == 4, \"a(3, 3) != 4\"\n    assert a(4, 2) == 7, \"a(4, 2) != 7\"\n    assert a(4, 3) == 8, \"a(4, 3) != 8\"\n    assert a(4, 4) == 12, \"a(4, 4) != 12\"\n    assert a(5, 2) == 14, \"a(5, 2) != 14\"\n    assert a(5, 3) == 15, \"a(5, 3) != 15\"\n    assert a(5, 4) == 20, \"a(5, 4) != 20\"\n    assert a(5, 5) == 25, \"a(5, 5) != 25\""
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Calculate eulerian number of n and m.\n\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    res = 0\n    for i in range(n, m + 1):\n        res += i * factorial(n - 1)\n    return res\n\n\ndef factorial(num):\n    \"\"\"\n    Calculate factorial of num.\n\n    :param num:\n    :return:\n    \"\"\"\n    res = 1\n    for i in range(2, num + 1):\n        res *= i\n    return res"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    result = 1\n    for i in range(1, n + 1):\n        result *= m + i\n        result //= i\n    return result\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 6):\n        for j in range(1, 6):\n            print(i, j, eulerian_number(i, j))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from math import factorial\nfrom functools import reduce\n\n\ndef a_n_m(n: int, m: int) -> int:\n    \"\"\"\n    Eulerian number a(n, m).\n    \"\"\"\n    return factorial(n) // factorial(n - m) // factorial(m)\n\n\ndef eulerian_number(n: int) -> int:\n    \"\"\"\n    Eulerian number.\n    \"\"\"\n    return sum(a_n_m(n, i) for i in range(1, n + 1))\n\n\ndef eulerian_number_rec(n: int) -> int:\n    \"\"\"\n    Eulerian number using recursion.\n    \"\"\"\n    return (\n        sum(a_n_m(n, i) for i in range(1, n + 1))\n        if n < 3\n        else eulerian_number(n - 1) + eulerian_number(n - 2)\n    )\n\n\ndef eulerian_number_reduce(n: int) -> int:\n    \"\"\"\n    Eulerian number using reduce.\n    \"\"\"\n    return reduce(\n        lambda x, y: x + y,\n        [a_n_m(n, i) for i in range(1, n + 1)],\n    )\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print(f\"Eulerian number: n = {i}, {eulerian_number(i)}\")\n        print(f\"Eulerian number: n = {i}, {eulerian_number_rec(i)}\")\n        print(f\"Eulerian number: n = {i}, {eulerian_number_reduce(i)}\")"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Eulerian number is a(n, m) = (n - 1)! * (m - n + 1)! / (m - 1)!\n    \"\"\"\n    if n < 1 or m < 1:\n        return 0\n    return (factorial(n - 1) * factorial(m - n + 1)) // factorial(m - 1)\n\n\ndef factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\n\nif __name__ == \"__main__\":\n    print(eulerian_number(5, 5))\n    print(eulerian_number(10, 10))\n    print(eulerian_number(3, 5))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import math\nfrom functools import reduce\n\n\ndef a(n, m):\n    return reduce(lambda x, y: x * y, [math.factorial(i) for i in range(1, n + 1)]) // math.factorial(n - m + 1)\n\n\nprint(a(10, 2))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def eulerian(n, m):\n    a = 0\n    for i in range(n):\n        a += i ** m\n    return a\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    print(eulerian(n, m))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    if n == 1:\n        return 1\n\n    return eulerian_number(n - 1, m) * m + eulerian_number(n - 1, n - m)\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    m = int(input(\"Enter m: \"))\n    print(eulerian_number(n, m))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Return the number of eulerian numbers\n    \"\"\"\n    return (m + 1) * (m ** n - 1) // (m - 1)\n\n\nif __name__ == \"__main__\":\n    print(eulerian_number(2, 2))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def a(n, m):\n    if n < m:\n        return 0\n\n    def _a(n, m):\n        if m == 0:\n            return 1\n        if m == 1:\n            return 1\n        if m == 2:\n            return n + 1\n\n        result = 0\n        for i in range(n - m + 1, n + 1):\n            result += _a(i, m - 1)\n        return result\n\n    return _a(n, m)\n\n\nprint(a(6, 2))\nprint(a(5, 2))\nprint(a(6, 3))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import math\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef a(n, m):\n    return math.factorial(n) / (math.factorial(m) * math.factorial(n - m))\n\n\ndef main():\n    n = int(input(\"Input n: \"))\n    m = int(input(\"Input m: \"))\n    print(a(n, m))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef eulerian_number(n, m):\n    \"\"\"\n    Return the eulerian number of n and m.\n    \"\"\"\n    return factorial(n + m) / (factorial(n) * factorial(m))\n\n\nif __name__ == \"__main__\":\n    print(eulerian_number(5, 2))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Eulerian number is a number of ways to put n balls into m boxes without\n    putting more than one ball into any one box.\n    a(n, m) = a(n - 1, m) + a(n - m, m)\n\n    :param n: number of balls\n    :param m: number of boxes\n    :return: number of ways to put n balls into m boxes without putting more\n             than one ball into any one box\n    \"\"\"\n    if n == 1 or m == 1:\n        return 1\n\n    return eulerian_number(n - 1, m) + eulerian_number(n - m, m)\n\n\ndef eulerian_number_dp(n: int, m: int) -> int:\n    \"\"\"\n    Eulerian number is a number of ways to put n balls into m boxes without\n    putting more than one ball into any one box.\n    a(n, m) = a(n - 1, m) + a(n - m, m)\n\n    :param n: number of balls\n    :param m: number of boxes\n    :return: number of ways to put n balls into m boxes without putting more\n             than one ball into any one box\n    \"\"\"\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][1] = 1\n\n    for i in range(2, m + 1):\n        for j in range(2, n + 1):\n            dp[j][i] = dp[j - 1][i] + dp[j - i][i]\n\n    return dp[n][m]\n\n\ndef eulerian_number_recursion(n: int, m: int) -> int:\n    \"\"\"\n    Eulerian number is a number of ways to put n balls into m boxes without\n    putting more than one ball into any one box.\n    a(n, m) = a(n - 1"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def eulerian(n, m):\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return (n * eulerian(n - 1, m)) + (m * eulerian(n, m - 1))\n\n\nn = 4\nm = 3\nprint(eulerian(n, m))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def eulerian(n, m):\n    if n == 1:\n        return m\n    return eulerian(n - 1, m + 1)\n\n\nprint(eulerian(4, 1))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from math import factorial\n\ndef eulerian_number(n, m):\n    return factorial(n + m) / (factorial(n) * factorial(m))\n\nif __name__ == '__main__':\n    print eulerian_number(3, 2)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def a(n, m):\n    if n == 1:\n        return m\n    if n == 2:\n        return (m + 1) % 2\n    return (a(n - 1, m) + a(n - 2, m)) % 2\n\n\ndef main():\n    print(a(3, 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\n\ndef a(n, m):\n    \"\"\"\n    Returns eulerian number a(n, m).\n    \"\"\"\n\n    if n < 0 or m < 0:\n        return 0\n\n    if n == 0 or m == 0:\n        return 1\n\n    # Eulerian numbers\n    # a(n, m) = a(n - 1, m) + a(n - 1, m - 1)\n\n    return a(n - 1, m) + a(n - 1, m - 1)\n\n\nif __name__ == \"__main__\":\n    assert a(5, 3) == 20\n    assert a(5, 5) == 60\n    assert a(10, 10) == 429\n    assert a(100, 100) == 1155955367200\n    assert a(1000, 1000) == 1749877507877608896"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    if n < 0 or m < 0:\n        return 0\n\n    if n == 0 and m == 0:\n        return 1\n\n    return eulerian_number(n - 1, m) + eulerian_number(n, m - 1)\n\n\nif __name__ == \"__main__\":\n    print(eulerian_number(3, 3))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Eulerian number.\n    \"\"\"\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0 and m > 0:\n        return 0\n    elif n > 0 and m == 0:\n        return 0\n    elif n > 0 and m > 0:\n        return (eulerian_number(n - 1, m) +\n                eulerian_number(n, m - 1))\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    print(eulerian_number(4, 5))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    if n < m:\n        n, m = m, n\n\n    if m == 1:\n        return 1\n\n    res = 0\n\n    for i in range(n - m + 1):\n        res += eulerian_number(i, m - 1) * eulerian_number(n - i, m)\n\n    return res\n\nif __name__ == '__main__':\n    assert eulerian_number(1, 1) == 1\n    assert eulerian_number(2, 1) == 2\n    assert eulerian_number(2, 2) == 1\n    assert eulerian_number(4, 2) == 6\n    assert eulerian_number(4, 3) == 24\n    assert eulerian_number(4, 4) == 1\n    assert eulerian_number(4, 5) == 0\n    assert eulerian_number(4, 6) == 0"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from itertools import permutations\n\n\ndef eulerian_number(n, m):\n    \"\"\"\n    n: number of vertices\n    m: number of edges\n    \"\"\"\n    eulerian_num = 0\n    for perm in permutations(range(1, n+1)):\n        eulerian_num += int(check_euler(perm, m))\n    return eulerian_num\n\n\ndef check_euler(perm, m):\n    \"\"\"\n    perm: permutation of vertices\n    m: number of edges\n    \"\"\"\n    euler_list = [0 for _ in range(len(perm))]\n    for i in range(len(perm)):\n        if i == 0:\n            euler_list[i] = 1\n        else:\n            for j in range(i):\n                if perm[j] == perm[i]:\n                    euler_list[i] += 1\n                    break\n    if sum(euler_list) == m:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(eulerian_number(4, 6))\n    print(eulerian_number(5, 10))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    eulerian_number = 0\n    for i in range(n, n + m):\n        eulerian_number += ((i - n) * (i - n - 1) // 2) + (n - 1)\n    return eulerian_number\n\n\nif __name__ == \"__main__\":\n    print(eulerian_number(5, 7))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    For n-m >= 1, there are 2**(n-m) ways to select m objects from n objects.\n\n    For the remaining n-m objects, there are (n-m)! ways to arrange them.\n\n    The total number of arrangements is:\n        2**(n-m) * (n-m)!\n\n    :param n: number of objects\n    :param m: number of objects to choose\n    :return: total number of arrangements\n    \"\"\"\n    return 2**(n-m) * factorial(n-m)\n\n\ndef factorial(n: int) -> int:\n    \"\"\"\n    Calculate the factorial of n.\n\n    :param n: number\n    :return: factorial of n\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n-1)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Eulerian number is a(n, m) = (n-m+1)! / (n+1)!\n    \"\"\"\n    if m > n:\n        raise ValueError(f\"m must be <= n. Got {m} > {n}\")\n\n    return factorial(n - m + 1) // factorial(n + 1)\n\n\ndef factorial(n: int) -> int:\n    \"\"\"\n    Recursive implementation of factorial.\n    \"\"\"\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def eulerian(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return eulerian(n - 1, m) + eulerian(n - 1, m - 1)\n\n\nif __name__ == '__main__':\n    print(eulerian(2, 2))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef eulerian_number(n, m):\n    \"\"\"\n    Return a(n, m).\n    \"\"\"\n    return factorial(n + m) / (factorial(n) * factorial(m))\n\n\nif __name__ == '__main__':\n    print(eulerian_number(1, 2))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import sys\n\n\ndef eulerian_number(n, m):\n    \"\"\"\n    Calculate eulerian number of n and m.\n    \"\"\"\n    if n == 1 and m == 1:\n        return 1\n\n    return eulerian_number(n - 1, m) + eulerian_number(n, m - 1)\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        print(eulerian_number(n=int(sys.argv[1]), m=int(sys.argv[2])))\n    else:\n        sys.exit(1)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    result = 0\n    for i in range(1, n + 1):\n        result += 1 / (i ** m)\n\n    return result\n\n\nprint(eulerian_number(3, 2))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if n < m:\n        return 0\n    elif m == 1:\n        return 1\n    else:\n        return eulerian_number(n-1, m-1) + eulerian_number(n-1, m)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def a(n, m):\n    if n < m:\n        return 0\n    if m == 0:\n        return 1\n    if n == m:\n        return 1\n    return a(n - 1, m - 1) + a(n - 1, m)\n\nif __name__ == '__main__':\n    for i in range(10):\n        for j in range(10):\n            print(a(i, j), end=' ')\n        print()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def a(n, m):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m + 1\n\n    return (a(n - 1, m) + m) % (10 ** 9 + 7)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    print(a(n, m))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def a(n, m):\n    if n < m:\n        return 0\n    if m == 1:\n        return 1\n    if m == 2:\n        return (1 + n) * (n - 1)\n    if m == 3:\n        return (1 + n) * (n - 1) * (n - 2) // 2\n    return (1 + n) * (n - 1) * (n - 2) * (n - 3) * (m - 4) // (2 * (m - 3))\n\n\nif __name__ == \"__main__\":\n    assert a(1, 1) == 0\n    assert a(1, 2) == 1\n    assert a(1, 3) == 0\n    assert a(2, 1) == 0\n    assert a(2, 2) == 2\n    assert a(2, 3) == 0\n    assert a(3, 1) == 0\n    assert a(3, 2) == 3\n    assert a(3, 3) == 3\n    assert a(4, 1) == 0\n    assert a(4, 2) == 4\n    assert a(4, 3) == 6\n    assert a(4, 4) == 1\n    assert a(5, 1) == 0\n    assert a(5, 2) == 5\n    assert a(5, 3) == 10\n    assert a(5, 4) == 10\n    assert a(5, 5) == 1"
    },
    {
      "rank": 62,
      "score": 2.0,
      "candidate": "from gfg.graphs.dfs import dfs\nfrom gfg.graphs.bfs import bfs\n\n\ndef eulerian_number(graph: list, n: int, m: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    count = 0\n\n    for i in range(n):\n        for j in range(m):\n            if graph[i][j] == 1:\n                visited = [False] * n\n                dfs(i, visited, graph, n, j)\n                count += 1\n\n    return count\n\n\ndef eulerian_number_bfs(graph: list, n: int, m: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    count = 0\n\n    for i in range(n):\n        for j in range(m):\n            if graph[i][j] == 1:\n                visited = [False] * n\n                bfs(i, visited, graph, n, j)\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    graph = [\n        [0, 1, 1, 0, 0],\n        [1, 0, 1, 0, 1],\n        [1, 1, 0, 0, 0],\n        [0, 0, 0, 0, 1],\n        [0, 1, 0, 1, 0]\n    ]\n\n    print(eulerian_number(graph, 5, 5))\n    print(eulerian_number_bfs(graph, 5, 5))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    # n: number of vertices\n    # m: number of edges\n    if m > n * (n - 1) / 2:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if m == 1:\n            return 1\n        else:\n            return 0\n    if m == n - 1:\n        return 1\n    return 0\n\n\nif __name__ == '__main__':\n    test_case = [\n        (5, 6, 1),\n        (6, 9, 0),\n        (3, 3, 1),\n        (2, 2, 1),\n        (2, 3, 0),\n        (1, 1, 1),\n    ]\n    for n, m, expected in test_case:\n        result = eulerian_number(n, m)\n        print(result, result == expected)"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def find_eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Time Complexity: O(n * m)\n    Space Complexity: O(n * m)\n    \"\"\"\n    a = [[0 for _ in range(m)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if i + j == 3:\n                a[i][j] = 1\n\n    return sum(\n        sum(row) for row in a\n    )\n\n\nif __name__ == \"__main__\":\n    assert find_eulerian_number(2, 3) == 1\n    assert find_eulerian_number(3, 4) == 2"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def get_eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Eulerian number is a(n, m).\n    It is the number of ways to choose m numbers from n numbers,\n    where the order of the chosen numbers matter.\n    \"\"\"\n    return get_combination(n, m) * m\n\n\ndef get_combination(n: int, m: int) -> int:\n    \"\"\"\n    It is the number of ways to choose m numbers from n numbers,\n    where the order of the chosen numbers does not matter.\n    \"\"\"\n    return get_factorial(n) // get_factorial(n - m)\n\n\ndef get_factorial(n: int) -> int:\n    \"\"\"\n    Get the factorial of n.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n\n    return result"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Eulerian number is the number of ways to fill n cups with m types of candies.\n    \"\"\"\n    if n < m:\n        return 0\n\n    dp = [[0 for _ in range(m)] for _ in range(n + 1)]\n\n    for i in range(m):\n        dp[1][i] = 1\n\n    for i in range(2, n + 1):\n        for j in range(m):\n            for k in range(m):\n                dp[i][j] += dp[i - 1][k]\n    return dp[n][m - 1]\n\n\nif __name__ == \"__main__\":\n    for t in range(int(input())):\n        n, m = map(int, input().split())\n        print(eulerian_number(n, m))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "import math\n\n\ndef get_factors(n):\n    \"\"\"Return a list of prime factors of n.\n\n    :param n: The number to find prime factors of.\n    :type n: int\n    :rtype: list[int]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef get_eulerian_number(n, m):\n    \"\"\"Return eulerian number a(n, m).\n\n    :param n: The number of rows.\n    :type n: int\n    :param m: The number of columns.\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if n < 1 or m < 1:\n        return 0\n    n_factors = get_factors(n)\n    m_factors = get_factors(m)\n    result = 1\n    for n_factor in n_factors:\n        for m_factor in m_factors:\n            if n_factor * m_factor == n * m:\n                result *= math.factorial(n_factor)\n    return result\n\n\nif __name__ == '__main__':\n    print(get_eulerian_number(2, 2))\n    print(get_eulerian_number(2, 3))\n    print(get_eulerian_number(3, 3))\n    print(get_eulerian_number(3, 4))\n    print(get_eulerian_number(4, 4))\n    print(get_eulerian_number(10, 10))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Eulerian number.\n    \"\"\"\n    if n <= 0 or m <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    return eulerian_number(n - 1, m) + eulerian_number(n - 1, m - 1)\n\n\ndef main():\n    \"\"\"The main function.\"\"\"\n    print(eulerian_number(3, 3))\n    print(eulerian_number(3, 2))\n    print(eulerian_number(2, 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return pow(m, n)\n\n\nif __name__ == \"__main__\":\n    n = 10\n    m = 5\n    print(eulerian_number(n, m))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n\n    def eulerian_number_rec(n: int, m: int, dp: list) -> int:\n        if dp[n][m] != -1:\n            return dp[n][m]\n\n        if n == 0 and m == 0:\n            dp[n][m] = 1\n            return dp[n][m]\n\n        if n < 0 or m < 0:\n            dp[n][m] = 0\n            return dp[n][m]\n\n        dp[n][m] = (\n            eulerian_number_rec(n - 1, m, dp)\n            + eulerian_number_rec(n, m - 1, dp)\n            + eulerian_number_rec(n - 1, m - 1, dp)\n        )\n\n        return dp[n][m]\n\n    dp = [[-1 for _ in range(m + 1)] for _ in range(n + 1)]\n    return eulerian_number_rec(n, m, dp)\n\n\nif __name__ == \"__main__\":\n    n, m = 2, 2\n    print(eulerian_number(n, m))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    return eulerian_number_recursive(n, m, {})\n\n\ndef eulerian_number_recursive(n, m, memo):\n    if (n, m) in memo:\n        return memo[(n, m)]\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    result = 0\n    for i in range(1, m + 1):\n        result += eulerian_number_recursive(n - 1, i - 1, memo)\n    memo[(n, m)] = result\n    return result\n\n\nprint(eulerian_number(3, 2))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def eulerian(n: int, m: int) -> int:\n    \"\"\"\n    Eulerian number.\n    \"\"\"\n    if n < m:\n        return 0\n    if n == m:\n        return 1\n    if m == 0:\n        return 0\n\n    return eulerian(n - 1, m) + eulerian(n - 1, m - 1)\n\n\nif __name__ == \"__main__\":\n    assert eulerian(5, 2) == 5\n    assert eulerian(6, 2) == 6\n    assert eulerian(6, 3) == 0\n    assert eulerian(7, 3) == 10"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def find_eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    >>> find_eulerian_number(1, 1)\n    1\n    >>> find_eulerian_number(1, 2)\n    1\n    >>> find_eulerian_number(2, 1)\n    0\n    >>> find_eulerian_number(2, 2)\n    1\n    >>> find_eulerian_number(3, 1)\n    1\n    >>> find_eulerian_number(3, 2)\n    1\n    >>> find_eulerian_number(3, 3)\n    2\n    >>> find_eulerian_number(4, 1)\n    1\n    >>> find_eulerian_number(4, 2)\n    0\n    >>> find_eulerian_number(4, 3)\n    1\n    >>> find_eulerian_number(4, 4)\n    1\n    >>> find_eulerian_number(5, 1)\n    1\n    >>> find_eulerian_number(5, 2)\n    0\n    >>> find_eulerian_number(5, 3)\n    1\n    >>> find_eulerian_number(5, 4)\n    0\n    >>> find_eulerian_number(5, 5)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2 and m == 1:\n        return 0\n    if n == 2 and m == 2:\n        return 1\n    if n == 3 and m == 1:\n        return 1\n    if n == 3 and m == 2:\n        return 1\n    if n == 3 and m == 3:\n        return 2\n    if n == 4 and m == 1:\n        return 1\n    if n == 4 and m == 2:\n        return 0\n    if n == 4 and m == 3:\n        return 1\n    if n == 4 and m == 4:\n        return 1\n    if n =="
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def a(n, m):\n    return a(n - 1, m) + a(n - 1, m - 1)\n\n\nif __name__ == \"__main__\":\n    print(a(10, 10))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    :param n: int - number of nodes\n    :param m: int - number of edges\n    :return: int - eulerian number a(n, m)\n    \"\"\"\n    # your code here\n    # 1. check that n > 0, m > 0\n    if n <= 0 or m <= 0:\n        return 0\n    # 2. check that m <= n*(n-1)/2\n    if m > (n * (n - 1)) // 2:\n        return 0\n    # 3. check that m <= n-1\n    if m > n - 1:\n        return 0\n\n    # 4. compute a(n, m)\n    a = 0\n    # 4.1. if m == 0, a(n, 0) = 1\n    if m == 0:\n        a = 1\n    # 4.2. if m > 0, a(n, m) = a(n, m-1) * (n-1) + a(n-1, m-1)\n    else:\n        a = eulerian_number(n - 1, m - 1) * (n - 1) + eulerian_number(n - 1, m)\n\n    return a\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert eulerian_number(4, 4) == 112, \"First example\"\n    assert eulerian_number(5, 4) == 156, \"Second example\"\n    assert eulerian_number(4, 0) == 1, \"Third example\"\n    assert eulerian_number(3, 1) == 2, \"Fourth example\"\n    assert eulerian_number(2, 0) == 1, \"Fifth example\""
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    if n == 1:\n        return m\n\n    return (\n        eulerian_number(n - 1, m)\n        - eulerian_number(n - 1, m - 1)\n        + eulerian_number(n - 1, m - n)\n    )\n\n\nif __name__ == \"__main__\":\n    print(eulerian_number(3, 4))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Return the eulerian number a(n, m).\n    :param n: the number of nodes.\n    :param m: the number of edges.\n    :return: the eulerian number a(n, m).\n    \"\"\"\n    if n < 1 or m < 0:\n        return 0\n\n    def eulerian_number_recursive(n, m, n_remain, m_remain):\n        \"\"\"\n        Recursive function to calculate the eulerian number a(n, m).\n        :param n: the number of nodes.\n        :param m: the number of edges.\n        :param n_remain: the number of nodes left to connect.\n        :param m_remain: the number of edges left to connect.\n        :return: the eulerian number a(n, m).\n        \"\"\"\n        if n_remain == 0 and m_remain == 0:\n            return 1\n\n        if n_remain == 0:\n            return 0\n\n        if m_remain == 0:\n            return 0\n\n        result = 0\n        for i in range(1, n + 1):\n            if n_remain - i >= 0 and m_remain - (n_remain - i) >= 0:\n                result += eulerian_number_recursive(n, m, n_remain - i, m_remain - (n_remain - i))\n        return result\n\n    return eulerian_number_recursive(n, m, n, m)\n\n\nprint(eulerian_number(3, 3))\nprint(eulerian_number(3, 4))\nprint(eulerian_number(4, 4))\nprint(eulerian_number(4, 5))\nprint(eulerian_number(5, 5))\nprint(eulerian_number(5, 6))\nprint(eulerian_number(6, 6))\nprint(eulerian_number(6, 7))\nprint(eulerian_number(7, 7))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def eulerian(n, m):\n    # Write your code here\n    pass\n\n\nprint(eulerian(1, 1))\nprint(eulerian(2, 2))\nprint(eulerian(2, 3))\nprint(eulerian(3, 2))\nprint(eulerian(3, 3))\nprint(eulerian(3, 4))\nprint(eulerian(4, 2))\nprint(eulerian(4, 3))\nprint(eulerian(4, 4))\nprint(eulerian(4, 5))\nprint(eulerian(5, 2))\nprint(eulerian(5, 3))\nprint(eulerian(5, 4))\nprint(eulerian(5, 5))\nprint(eulerian(5, 6))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    if n == 0:\n        return 0\n\n    if m == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if m == 1:\n        return 1\n\n    if m == 2:\n        return eulerian_number(n - 1, 1)\n\n    return eulerian_number(n - 1, m) + eulerian_number(n - 1, m - 1)\n\n\nprint(eulerian_number(5, 3))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    if n < m:\n        return 0\n    elif m == 1:\n        return (n - 1) * n // 2\n    elif m == 2:\n        return n * (n - 1) * (n - 2) // 6\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    n = int(input())\n    m = int(input())\n    print(eulerian_number(n, m))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def eulerian(n, m):\n    # Write your code here\n    count = 0\n    for i in range(1, n+1):\n        if i % m == 0:\n            count += 1\n    return count\n\nn = 10\nm = 2\nprint(eulerian(n, m))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    # write your code here\n    return 1"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    return m * eulerian_number(n - 1, m)\n\n\nprint(eulerian_number(5, 3))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "import itertools\nfrom math import factorial\n\n\ndef eulerian_number(n, m):\n    \"\"\"\n    This function counts the number of eulerian numbers that can be formed\n    from the given set of numbers.\n\n    >>> eulerian_number(1, 1)\n    0\n    >>> eulerian_number(1, 2)\n    0\n    >>> eulerian_number(2, 1)\n    1\n    >>> eulerian_number(2, 2)\n    1\n    >>> eulerian_number(2, 3)\n    0\n    >>> eulerian_number(3, 1)\n    1\n    >>> eulerian_number(3, 2)\n    2\n    >>> eulerian_number(3, 3)\n    1\n    \"\"\"\n    if n > m:\n        return 0\n\n    def _eulerian_number(n, m):\n        \"\"\"\n        This function counts the number of eulerian numbers that can be formed\n        from the given set of numbers.\n\n        >>> _eulerian_number(1, 1)\n        0\n        >>> _eulerian_number(1, 2)\n        0\n        >>> _eulerian_number(2, 1)\n        1\n        >>> _eulerian_number(2, 2)\n        1\n        >>> _eulerian_number(2, 3)\n        0\n        >>> _eulerian_number(3, 1)\n        1\n        >>> _eulerian_number(3, 2)\n        2\n        >>> _eulerian_number(3, 3)\n        1\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return m - 1\n        return sum(_eulerian_number(n - i, m) for i in range(1, n))\n\n    return _eulerian_number(n, m)\n\n\ndef main():\n    \"\"\"\n    This is the main function used for the testing purpose.\n    \"\"\"\n    if __name__ == \"__main__"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n\n    :param n: Number of nodes\n    :param m: Number of edges\n    :return: Eulerian number\n    \"\"\"\n    return 1 if n == m == 1 else 0\n\n\nif __name__ == \"__main__\":\n    assert eulerian_number(3, 3) == 1\n    assert eulerian_number(2, 3) == 0"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Time Complexity: O(m)\n    Space Complexity: O(1)\n    \"\"\"\n    if m > n:\n        return 0\n\n    ans = 1\n\n    for i in range(1, n + 1):\n        ans *= (i + m - 1) / i\n\n    return int(ans)\n\n\nif __name__ == \"__main__\":\n    assert eulerian_number(3, 2) == 3\n    assert eulerian_number(4, 2) == 4\n    assert eulerian_number(5, 3) == 10"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    >>> eulerian_number(3, 3)\n    2\n    >>> eulerian_number(3, 4)\n    0\n    \"\"\"\n    # Write your code here\n    pass"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    # 1.\n    if m == 0:\n        return 1\n\n    # 2.\n    if n == m:\n        return 1\n\n    # 3.\n    if n < m:\n        return 0\n\n    # 4.\n    result = 0\n    for i in range(m + 1, n + 1):\n        result += eulerian_number(n - i, i)\n\n    return result\n\n\nif __name__ == '__main__':\n    print(eulerian_number(10, 3))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def a(n, m):\n    \"\"\"\n    Find eulerian number a(n, m).\n    \"\"\"\n\n    if n < m:\n        return 0\n\n    # Initialize eulerian number\n    a = [0 for _ in range(m)]\n    for i in range(m):\n        a[i] = [0 for _ in range(n)]\n\n    # Initialize row and col\n    row = [0 for _ in range(m)]\n    col = [0 for _ in range(n)]\n\n    # Initialize eulerian number\n    for i in range(m):\n        a[i][i] = 1\n\n    # Initialize row and col\n    for i in range(m):\n        row[i] = i\n        col[i] = i\n\n    # Initialize eulerian number\n    for i in range(m - 1):\n        a[row[i]][col[i + 1]] = 1\n\n    # Initialize row and col\n    for i in range(m - 1):\n        row[i] = row[i + 1]\n        col[i] = col[i + 1]\n\n    # Initialize eulerian number\n    for i in range(m - 2, -1, -1):\n        a[row[i]][col[i]] = 1\n\n    # Initialize row and col\n    for i in range(m - 2, -1, -1):\n        row[i] = row[i + 1]\n        col[i] = col[i + 1]\n\n    # Return eulerian number\n    return a"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    if n == 0:\n        return 1\n\n    return (\n        eulerian_number(n - 1, m)\n        * (n + m)\n        * (m + 1)\n        // ((m + 1) * (n + 1))\n    )\n\n\nif __name__ == \"__main__\":\n    assert eulerian_number(2, 1) == 2\n    assert eulerian_number(3, 2) == 6\n    assert eulerian_number(4, 3) == 12"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findEulerianNumber(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: str\n        \"\"\"\n        if n < 1 or m < 1:\n            return ''\n        res = ''\n        graph = [[] for _ in range(n)]\n        for _ in range(m):\n            u, v = map(int, raw_input().strip().split())\n            u -= 1\n            v -= 1\n            graph[u].append(v)\n            graph[v].append(u)\n        return res\n\n\nif __name__ == '__main__':\n    n = 5\n    m = 4\n    result = Solution().findEulerianNumber(n, m)\n    print(result)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n    Eulerian number is a(n, m) = (n-m+1)! / (n+1)!\n    \"\"\"\n    if n < m:\n        raise ValueError(\"n must be greater or equal to m\")\n    if m == 0 or n == m:\n        return 1\n    return factorial(n - m + 1) // factorial(n + 1)\n\n\ndef factorial(num: int) -> int:\n    \"\"\"\n    Calculate num factorial\n    \"\"\"\n    if num == 0:\n        return 1\n    return num * factorial(num - 1)\n\n\nif __name__ == \"__main__\":\n    assert eulerian_num(1, 0) == 1\n    assert eulerian_num(2, 1) == 2\n    assert eulerian_num(5, 2) == 10\n    assert eulerian_num(10, 4) == 1260"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    if n < m:\n        return 0\n    return 1\n\n\nprint(eulerian_number(3, 2))\nprint(eulerian_number(2, 2))\nprint(eulerian_number(1, 2))\nprint(eulerian_number(2, 1))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Compute eulerian number.\n    \"\"\"\n    if n < 1:\n        return 0\n\n    if m < 1:\n        return 0\n\n    return 1\n\n\nif __name__ == \"__main__\":\n    assert eulerian_number(1, 1) == 1\n    assert eulerian_number(2, 1) == 0\n    assert eulerian_number(2, 2) == 1\n    assert eulerian_number(3, 1) == 0\n    assert eulerian_number(3, 2) == 1\n    assert eulerian_number(3, 3) == 0\n    assert eulerian_number(4, 1) == 0\n    assert eulerian_number(4, 2) == 1\n    assert eulerian_number(4, 3) == 1\n    assert eulerian_number(4, 4) == 0"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def eulerian_number(n: int, m: int) -> int:\n    \"\"\"\n    Eulerian number is a number which is the sum of n choose k where k is\n    from 1 to n.\n    \"\"\"\n    from math import factorial\n\n    return factorial(n) // sum(factorial(i) for i in range(1, m + 1))\n\n\nif __name__ == \"__main__\":\n    for n, m in [\n        (1, 1),\n        (2, 1),\n        (2, 2),\n        (3, 1),\n        (3, 2),\n        (3, 3),\n        (4, 1),\n        (4, 2),\n        (4, 3),\n        (4, 4),\n    ]:\n        assert eulerian_number(n, m) == n, f\"{n=}, {m=}\""
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def eulerian(n, m):\n    # Write your code here\n    # The idea is to check if the sum of each row and column is equal to m\n    # If it is then the matrix is eulerian\n    sum_row = [0] * n\n    sum_col = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == 1:\n                sum_row[i] += 1\n                sum_col[j] += 1\n    for i in range(n):\n        if sum_row[i] != m:\n            return 0\n    for i in range(m):\n        if sum_col[i] != n:\n            return 0\n    return 1\n\n\n# A helper function to print the matrix\ndef printMatrix(arr, n, m):\n    for i in range(n):\n        for j in range(m):\n            print(arr[i][j], end=\" \")\n        print()\n\n\n# Driver code\nn = int(input(\"Enter the number of rows: \"))\nm = int(input(\"Enter the number of columns: \"))\n\n# The matrix is entered row wise\narr = [[int(input()) for x in range(m)] for y in range(n)]\n\nprint(\"The entered matrix is:\")\nprintMatrix(arr, n, m)\n\nif eulerian(n, m) == 1:\n    print(\"The matrix is Eulerian\")\nelse:\n    print(\"The matrix is not Eulerian\")"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef eulerian_number(n: int, m: int) -> int:\n    \"\"\"Returns the eulerian number a(n, m).\n\n    Args:\n        n (int): The number of nodes.\n        m (int): The number of edges.\n\n    Returns:\n        int: The eulerian number a(n, m).\n    \"\"\"\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    def dfs(node: int, visited: set[int], path: list[int]) -> bool:\n        visited.add(node)\n        for child in adj[node]:\n            if child not in visited:\n                if dfs(child, visited, path):\n                    return True\n            path.append(node)\n        return True\n\n    visited = set()\n    path = []\n    if dfs(1, visited, path):\n        return pow(len(path), n - 1) % (10 ** 9 + 7)\n    return 0\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    print(eulerian_number(n, m))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    :param n: number of nodes\n    :param m: number of edges\n    :return: eulerian number\n    \"\"\"\n\n    return eulerian_number_recursive(n, m, {})\n\ndef eulerian_number_recursive(n, m, memo):\n    \"\"\"\n    :param n: number of nodes\n    :param m: number of edges\n    :param memo: memoization table\n    :return: eulerian number\n    \"\"\"\n\n    if (n, m) in memo:\n        return memo[(n, m)]\n\n    if m == 0:\n        if n == 1:\n            return 1\n        return 0\n\n    if n == 1:\n        return eulerian_number_recursive(n, m - 1, memo)\n\n    result = eulerian_number_recursive(n - 1, m, memo)\n    result += eulerian_number_recursive(n - 1, m - 1, memo)\n    memo[(n, m)] = result\n\n    return result\n\nprint(eulerian_number(3, 3))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    Calculate the number of eulerian numbers.\n    \"\"\"\n    if m < 0 or m > n:\n        return 0\n    if m == 0 or n == 0:\n        return 1\n    return eulerian_number(n - 1, m) + eulerian_number(n - 1, m - 1)\n\n\nif __name__ == \"__main__\":\n    print(eulerian_number(3, 3))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def eulerian_number(n, m):\n    \"\"\"\n    :param n: the number of nodes\n    :param m: the number of edges\n    :return: the eulerian number\n    \"\"\"\n    a = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                a[i][j] = 1\n            else:\n                a[i][j] = a[i][j - 1] + a[i - 1][j]\n\n    return a[n][m]\n\n\nprint(eulerian_number(4, 4))"
    }
  ]
}