{
  "timestamp": "2025-09-14T22:37:47.312477",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 44,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def g_series(t, r):\n    \"\"\"\n    >>> g_series(1, 4)\n    4\n    >>> g_series(2, 4)\n    16\n    >>> g_series(3, 4)\n    64\n    >>> g_series(4, 4)\n    256\n    \"\"\"\n    return pow(r, t)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def get_geometric_series(n, p, t):\n    \"\"\"\n    :param n: number of terms\n    :param p: common ratio\n    :param t: first term\n    :return: t-nth term of geometric series\n    \"\"\"\n    return (t*(1-p)**(n-1))/p\n\n\nif __name__ == \"__main__\":\n    print(get_geometric_series(5, 0.5, 2))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def geometric_series(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return 2**(n-1)\n\n\nprint(geometric_series(1))\nprint(geometric_series(2))\nprint(geometric_series(3))\nprint(geometric_series(4))\nprint(geometric_series(5))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_t_nth_term(a, r, n):\n    return a * (r ** (n - 1))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def geometric_series(t: int, r: int) -> int:\n    \"\"\"\n    Return the t-nth term of geometric series.\n    >>> geometric_series(1, 1)\n    1\n    >>> geometric_series(3, 2)\n    8\n    >>> geometric_series(4, 3)\n    81\n    >>> geometric_series(0, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: T must be a positive integer\n    >>> geometric_series(-1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: T must be a positive integer\n    >>> geometric_series(1, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: R must be a positive integer\n    >>> geometric_series(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: R must be a positive integer\n    \"\"\"\n    if not (isinstance(t, int) and isinstance(r, int)):\n        raise TypeError(\"Both T and R must be integers\")\n\n    if t < 1:\n        raise ValueError(\"T must be a positive integer\")\n\n    if r < 1:\n        raise ValueError(\"R must be a positive integer\")\n\n    if t == 1:\n        return 1\n    return r ** (t - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to find t-nth term of geometric series.\nExample:\nInput: 2, 4, 10\nOutput: 16\n\"\"\"\n\nclass Solution(object):\n    def getTerm(self, A, B, T):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type T: int\n        :rtype: int\n        \"\"\"\n        return (B-A)*((T-1)//2)*((T-1)//2+1)//2+A\n\n        \"\"\"\n        a = A\n        b = B\n        n = T-1\n        return int((b-a)*(n*(n+1)/2)) + a\n        \"\"\""
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def geometric_series(a, r, n):\n    if n == 1:\n        return a\n    return a * (r ** (n - 1))\n\n\ndef main():\n    a, r, n = map(int, input().strip().split())\n    print(geometric_series(a, r, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def geometric_series(t, r):\n    return (t - 1) * r\n\n\ndef main():\n    print(geometric_series(7, 1.2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def geometric_series(a: int, r: int, n: int) -> int:\n    \"\"\"\n    a: first term\n    r: common ratio\n    n: nth term\n    \"\"\"\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    assert geometric_series(2, 3, 3) == 8"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_geometric_sum(t_nth: int, first_term: int, common_ratio: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return first_term * (1 - common_ratio ** t_nth) / (1 - common_ratio)\n\n\nif __name__ == \"__main__\":\n    print(find_geometric_sum(3, 10, 2))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def geometric_series(n, r):\n    return (1 - r) * (1 - r**n) / (1 - r**(n + 1))\n\n\nif __name__ == \"__main__\":\n    n = 5\n    r = 0.5\n    print(geometric_series(n, r))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def t_nth(a, r, t):\n    return a * (r ** (t - 1))\n\n\nif __name__ == \"__main__\":\n    print(t_nth(1, 2, 3))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_t_nth_term(a, r, n):\n    return a*(r**(n-1))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (r ** (n - 1))\n\nif __name__ == \"__main__\":\n    print(geometric_series(1, 2, 4))"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def geometric_series(t):\n    return (1-(1/2)**t)*(2**t-1)\n\nprint(geometric_series(1))\nprint(geometric_series(2))\nprint(geometric_series(3))\nprint(geometric_series(4))\nprint(geometric_series(5))"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def geometric_series(t, r):\n    \"\"\"\n    >>> geometric_series(4, 0.5)\n    3.0\n    \"\"\"\n    return (1 - pow(1 / r, t)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def t_nth_geometric_series(t, a, r):\n    return (a * (1 - r ** t)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    assert t_nth_geometric_series(3, 10, 0.5) == 20\n    assert t_nth_geometric_series(6, 10, 0.5) == 320"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def t_nth_term(a, r, n):\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    print(t_nth_term(2, 3, 3))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (r ** (n - 1))\n\n\"\"\"\na = first term\nr = common ratio\nn = nth term\n\"\"\""
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def get_nth_term(a, r, n):\n    return a*(1-r**n)/(1-r)\n\n\nif __name__ == \"__main__\":\n    a, r, n = list(map(int, input().split()))\n    print(get_nth_term(a, r, n))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return (a*(1-r**n))/(1-r)\n\n\nprint(geometric_series(1, 2, 2))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, t):\n    return a * (r**(t - 1))\n\nif __name__ == '__main__':\n    a = 2\n    r = 3\n    t = 4\n    print(geometric_series(a, r, t))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def t_nth_term(t, a, r):\n    return a * (r ** (t - 1))\n\n\ndef main():\n    t = int(input(\"Enter value of t: \"))\n    a = float(input(\"Enter value of a: \"))\n    r = float(input(\"Enter value of r: \"))\n    print(t_nth_term(t, a, r))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def get_nth_term_of_geometric_series(a: float, r: float, n: int) -> float:\n    \"\"\"\n    This function finds the nth term of a geometric series.\n    It uses the formula a * (r ** (n - 1))\n    :param a: first term of geometric series\n    :param r: common ratio of geometric series\n    :param n: nth term of geometric series\n    :return: nth term of geometric series\n    \"\"\"\n    return a * (r ** (n - 1))\n\n\ndef main():\n    a = float(input(\"Enter the first term of geometric series: \"))\n    r = float(input(\"Enter the common ratio of geometric series: \"))\n    n = int(input(\"Enter the nth term of geometric series: \"))\n    print(\n        f\"The {n}th term of geometric series is {get_nth_term_of_geometric_series(a, r, n)}\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def find_t_n_term(a, r, t):\n    return a * r ** (t - 1)"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a*(1-r**n)/(1-r)\n\n\ndef main():\n    a, r, n = map(int, input(\"Enter a, r and n: \").split())\n    print(f\"{n}th term is {geometric_series(a, r, n)}\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def g_series(a, r, t):\n    return a*(r**(t-1))\n\n\nif __name__ == \"__main__\":\n    a = 5\n    r = 1.5\n    t = 5\n    print(g_series(a, r, t))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a*(1-r**n)\n\nif __name__ == '__main__':\n    a, r, n = [int(x) for x in input().split()]\n    print(geometric_series(a, r, n))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    if n == 0:\n        return a\n    return a * (r**(n-1))\n\n\ndef main():\n    a = int(input(\"Enter the first term: \"))\n    r = int(input(\"Enter the common ratio: \"))\n    n = int(input(\"Enter the nth term: \"))\n    result = geometric_series(a, r, n)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter first term: \"))\n    r = float(input(\"Enter common ratio: \"))\n    n = int(input(\"Enter nth term: \"))\n    print(geometric_series(a, r, n))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def t_nth_geometric_series(t, r):\n    return (r ** t) - 1\n\n\nif __name__ == \"__main__\":\n    t = int(input(\"Enter the value of t: \"))\n    r = int(input(\"Enter the value of r: \"))\n    print(t_nth_geometric_series(t, r))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def geometric_series(n, r):\n    return n * (1 - r) ** (n - 1)\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(4, 0.5))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, t):\n    return a * (r ** (t - 1))\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter value of first term: \"))\n    r = int(input(\"Enter value of common ratio: \"))\n    t = int(input(\"Enter value of t-nth term: \"))\n    print(geometric_series(a, r, t))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def geometric_series(t, a, r):\n    return a * (1 - r ** t) / (1 - r)\n\n\ndef test_geometric_series():\n    \"\"\"\n    >>> geometric_series(2, 10, 0.5)\n    25.0\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (1 - r ** n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter a: \"))\n    r = float(input(\"Enter r: \"))\n    n = float(input(\"Enter n: \"))\n    print(geometric_series(a, r, n))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def t_nth_term(t, r):\n    return int((r**t-1)/(r-1))\n\n\nif __name__ == \"__main__\":\n    r = 2\n    t = 3\n    print(t_nth_term(t, r))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (r ** (n - 1))\n\n\ndef main():\n    a, r, n = list(map(int, input(\"Enter a, r, n: \").split()))\n    print(geometric_series(a, r, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (1 - r ** n) / (1 - r)\n\n\nprint(geometric_series(1, 2, 10))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def get_t_n_term(t, n):\n    \"\"\"\n    :param t: first term\n    :param n: nth term\n    :return: tn term\n    \"\"\"\n    return t*(1.0/n)\n\n\nif __name__ == \"__main__\":\n    print(get_t_n_term(1, 3))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def geometric_series(t, r):\n    return (r ** t - 1) / (r - 1)\n\nt = int(input())\nr = int(input())\nprint(geometric_series(t, r))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def t_nth_term_of_geometric_series(a, r, n):\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    a = 2\n    r = 3\n    n = 10\n    print(t_nth_term_of_geometric_series(a, r, n))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    if n == 1:\n        return a\n    return a * (r ** (n - 1))\n\nprint(geometric_series(2, 3, 3))\nprint(geometric_series(5, 5, 3))\nprint(geometric_series(1, 2, 5))\nprint(geometric_series(1, 2, 0))\nprint(geometric_series(1, 2, -1))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def geometric_series_nth(t, r):\n    return t * (1 - r ** t) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    assert geometric_series_nth(5, 0.5) == 12.5"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def geometric_series(t):\n    return 1/(1-t)\n\n\nif __name__ == '__main__':\n    t = 1/2\n    print(geometric_series(t))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def geometric_series(t, r):\n    return r * (1 - r**t) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    t = int(input(\"Enter the value of t: \"))\n    r = float(input(\"Enter the value of r: \"))\n    print(geometric_series(t, r))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    if n == 1:\n        return a\n    return a * pow(r, n - 1)\n\n\ndef main():\n    a = float(input(\"Enter the first term: \"))\n    r = float(input(\"Enter the common ratio: \"))\n    n = int(input(\"Enter the nth term: \"))\n    print(geometric_series(a, r, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    if n == 1:\n        return a\n    else:\n        return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(2, 4, 2))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def find_nth_term_of_geometric_series(n, first, r):\n    return first * r**(n-1)\n\n\nif __name__ == \"__main__\":\n    first_term = int(input(\"Enter first term of geometric series: \"))\n    ratio = float(input(\"Enter the ratio of series: \"))\n    n = int(input(\"Enter nth term: \"))\n    print(find_nth_term_of_geometric_series(n, first_term, ratio))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def nth_term_geometric_series(a, r, n):\n    \"\"\"\n    a: first term of series\n    r: common ratio of series\n    n: nth term of series to find\n    \"\"\"\n    return a * (r ** (n - 1))\n\nprint(nth_term_geometric_series(2, 3, 5))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a*(1-r**n)/(1-r)\n\n\nprint(geometric_series(2, 3, 3))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from typing import Union\n\n\ndef geometric_series(\n    first_term: Union[int, float],\n    ratio: Union[int, float],\n    t_nth: int,\n) -> Union[int, float]:\n    \"\"\"\n    Find the t-nth term of a geometric series.\n\n    :param first_term: First term of the geometric series\n    :param ratio: Ratio of the geometric series\n    :param t_nth: t-nth term of the geometric series\n    :return: t-nth term of the geometric series\n    \"\"\"\n\n    return first_term * (ratio ** (t_nth - 1))\n\n\nif __name__ == \"__main__\":\n    first_term = int(input(\"Enter the first term of the geometric series: \"))\n    ratio = int(input(\"Enter the common ratio of the geometric series: \"))\n    t_nth = int(input(\"Enter the t-nth term of the geometric series: \"))\n    print(geometric_series(first_term, ratio, t_nth))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def geometric_series(n):\n    return 2**(n-1)\n\n\ndef main():\n    t_n = int(input(\"Enter the nth term: \"))\n    print(f\"{t_n}th term is {geometric_series(t_n)}.\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def t_nth(a, r, n):\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter a: \"))\n    r = float(input(\"Enter r: \"))\n    n = int(input(\"Enter n: \"))\n    print(t_nth(a, r, n))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def geometric_series_nth_term(a: float, r: float, n: int) -> float:\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    a, r, n = map(float, input().split())\n    print(geometric_series_nth_term(a, r, n))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def geometric_series(t):\n    return 1/(1-t)\n\n\nif __name__ == \"__main__\":\n    t = float(input())\n    print(geometric_series(t))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a*(1-r**n)/(1-r)\n\n\"\"\"\na: first term\nr: common ratio\nn: nth term\n\"\"\""
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    if n == 1:\n        return a\n    else:\n        return a * (1 + r) ** (n - 1)\n\n\ndef main():\n    a = int(input(\"Enter first term: \"))\n    r = float(input(\"Enter common ratio: \"))\n    n = int(input(\"Enter nth term: \"))\n    print(geometric_series(a, r, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def nth_term(a, r, n):\n    return a * (r ** (n-1))\n\nif __name__ == \"__main__\":\n    a = 10\n    r = 0.5\n    n = 5\n    print(nth_term(a, r, n))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return (a * (1 - r**n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(1, 2, 3))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def geometric_series(t, r):\n    return t * (1 - r) ** -1\n\n\nif __name__ == \"__main__\":\n    assert geometric_series(1, 0.5) == 1.5"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def geometric_series(t):\n    if t==1:\n        return 1\n    elif t==2:\n        return 1\n    else:\n        return 1/(1-1/t)\n\nif __name__ == '__main__':\n    print(geometric_series(1))\n    print(geometric_series(2))\n    print(geometric_series(3))\n    print(geometric_series(4))\n    print(geometric_series(5))\n    print(geometric_series(6))\n    print(geometric_series(7))\n    print(geometric_series(8))\n    print(geometric_series(9))\n    print(geometric_series(10))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def find_term(a, r, n):\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter the first term of the geometric series: \"))\n    r = float(input(\"Enter the common ratio of the geometric series: \"))\n    n = int(input(\"Enter the nth term of the geometric series: \"))\n    print(find_term(a, r, n))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (1-r**n) / (1-r)\n\nif __name__ == '__main__':\n    print(geometric_series(1, 2, 3))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, t):\n    return a * (r ** (t - 1))\n\n\nif __name__ == \"__main__\":\n    a, r, t = map(int, input().split())\n    print(geometric_series(a, r, t))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    if n == 0:\n        return a\n    else:\n        return geometric_series(a, r, n - 1) + r * a\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(1, 2, 3))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return (a * (1 - r ** n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(1, 2, 2))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return (a*(1-r**n))/(1-r)\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(10, 0.25, 2))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def find_geometric_series_term(t, r):\n    return r * (1 - r ** t) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(find_geometric_series_term(i, 0.5))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def find_t_nth_term(a, r, n):\n    return a * (r ** (n - 1))\n\n\nprint(find_t_nth_term(1, 2, 3))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(2, 3, 4))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def geometric_series(t, a, r):\n    \"\"\"\n    t: t-nth term of the series\n    a: first term of the series\n    r: common ratio of the series\n    \"\"\"\n    return a * (1 - r**t) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    assert geometric_series(t=5, a=1, r=2) == 24.0"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def get_geometric_series_term(a, r, n):\n    \"\"\"\n    a: first term of geometric series\n    r: common ratio of geometric series\n    n: t-nth term of geometric series\n    \"\"\"\n    return a * (r**(n-1))\n\n\nprint(get_geometric_series_term(3, 2, 6))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def geometric_series(t, r):\n    return (r ** t - 1) / (r - 1)\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(3, 2))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return (a * (1 - r**n)) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(2, 3, 4))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (1 - r ** n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    r = float(input(\"Enter r: \"))\n    n = int(input(\"Enter n: \"))\n    print(geometric_series(a, r, n))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, t):\n    return a * (r**(t-1))\n\n\nif __name__ == \"__main__\":\n    a, r, t = map(int, input().split())\n    print(geometric_series(a, r, t))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def t_nth_term(t, r):\n    return (t-1) * r\n\n\nif __name__ == \"__main__\":\n    print(t_nth_term(3, 2))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def find_nth_term(a, r, n):\n    return a * (r ** (n - 1))\n\n\ndef main():\n    a = int(input(\"Enter first term: \"))\n    r = float(input(\"Enter common ratio: \"))\n    n = int(input(\"Enter nth term: \"))\n    print(find_nth_term(a, r, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def geometric_series(t, r):\n    return (r**t - 1) / (r - 1)\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(10, 2))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def geometric_series_nth(a, r, n):\n    return a*(1 - r**n) / (1 - r)\n\n\nif __name__ == \"__main__\":\n    a, r, n = map(int, input().split())\n    print(geometric_series_nth(a, r, n))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def find_term(a, r, n):\n    \"\"\"\n    Find t-nth term of geometric series.\n    \"\"\"\n    return a * (r ** (n - 1))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a*(1-r**n)/(1-r)\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter first term: \"))\n    r = float(input(\"Enter common ratio: \"))\n    n = int(input(\"Enter nth term: \"))\n    print(geometric_series(a, r, n))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def get_nth_term(t, a, r):\n    if t == 1:\n        return a\n    else:\n        return a * (r ** (t-2))\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    a = int(input())\n    r = float(input())\n    print(get_nth_term(t, a, r))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (r ** (n - 1))\n\n\ndef main():\n    print(geometric_series(2, 4, 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def find_geometric_series_term(a, r, n):\n    \"\"\"\n    a: first term of series\n    r: common ratio of series\n    n: nth term of series to find\n    \"\"\"\n\n    return a * (r ** (n-1))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def find_term(a, r, n):\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first term of series: \"))\n    r = int(input(\"Enter common ratio of series: \"))\n    n = int(input(\"Enter nth term of series: \"))\n    print(f\"T-{n}th term of geometric series is: {find_term(a, r, n)}\")"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "\"\"\"Question:\nWrite a function to find t-nth term of geometric series.\nSeries is: a, a+r, a+2r, a+3r, ...\n\nExample:\nInput: a=2, r=3, t=5\nOutput: 256.000\n\"\"\"\n\nfrom decimal import Decimal\nfrom decimal import getcontext\n\ndef geometricSeries(a, r, t):\n    # getcontext().prec = 100\n    # return float(Decimal((a*(1-r**(t-1)))/(1-r)))\n    return a*(1-r**(t-1))/(1-r)\n\n# a=2, r=3, t=5\nprint(geometricSeries(2, 3, 5))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "\"\"\"Question:\nWrite a function to find t-nth term of geometric series.\nExample:\nInput: 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\nOutput: 12\nSolution:\n1. Recursion\nThe idea is to maintain the current term and previous term.\nThe current term is the one that is calculated in the previous recursion call.\nThe previous term is the one that is used to calculate the current term.\nThe first term is the first argument passed to the function.\nThe second term is the second argument passed to the function.\nThe index is the third argument passed to the function.\nThe base case is when the index is 1.\nIn this case, the first term is returned.\nThe recursive case is when the index is greater than 1.\nIn this case, the formula is applied to calculate the current term.\nThen, the function is called again with the current term and the previous term as arguments and the index - 1.\n\n2. Iterative solution\n\"\"\"\n\n\ndef get_nth_term(arr, n):\n    curr, prev = arr[0], arr[1]\n    for i in range(2, len(arr)):\n        curr, prev = arr[i], curr + prev\n    return curr\n\n\nassert get_nth_term([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 2) == 12\nassert get_nth_term([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 3) == 17\nassert get_nth_term([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 4) == 22\nassert get_nth_term(["
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_term(n: int, a: int, r: float) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n\n    :param n: n-th term of series\n    :param a: first term of series\n    :param r: common ratio\n    :return: t-nth term\n    \"\"\"\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    assert find_term(5, 2, 3) == 125"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def geometric_series(t, r):\n    \"\"\"\n    Find t-nth term of geometric series.\n    Args:\n        t: t-nth term of series\n        r: common ratio of series\n    Returns:\n        t-nth term of geometric series.\n    \"\"\"\n    return t * (r ** (t - 1))\n\n\nif __name__ == \"__main__\":\n    assert geometric_series(1, 2) == 1\n    assert geometric_series(2, 2) == 4\n    assert geometric_series(3, 2) == 8\n    assert geometric_series(4, 2) == 16\n    assert geometric_series(5, 2) == 32\n    assert geometric_series(6, 2) == 64\n    assert geometric_series(7, 2) == 128\n    assert geometric_series(8, 2) == 256\n    assert geometric_series(9, 2) == 512\n    assert geometric_series(10, 2) == 1024\n    assert geometric_series(11, 2) == 2048\n    assert geometric_series(12, 2) == 4096\n    assert geometric_series(13, 2) == 8192\n    assert geometric_series(14, 2) == 16384\n    assert geometric_series(15, 2) == 32768\n    assert geometric_series(16, 2) == 65536\n    assert geometric_series(17, 2) == 131072\n    assert geometric_series(18, 2) == 262144\n    assert geometric_series(19, 2) == 524288\n    assert geometric_series(20, 2) == 1048576\n    assert geometric_series(21, 2) == 2097152\n    assert geometric_series(22, 2) == 4194304\n    assert geometric_series(23, 2"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def find_t_n_geometric_series(a, r, n):\n    \"\"\"\n    This function finds the t-nth term of a geometric series.\n    :param a: first term of the series.\n    :param r: common ratio.\n    :param n: nth term of the series.\n    :return: t-nth term.\n    \"\"\"\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    print(find_t_n_geometric_series(1, 2, 3))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def geometric_series(t: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    if t == 1:\n        return 1\n    return 1 << (t - 1)\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(1))\n    print(geometric_series(2))\n    print(geometric_series(3))\n    print(geometric_series(4))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def geometric_series(a, r, n):\n    \"\"\"\n    Return t-nth term of geometric series.\n\n    >>> geometric_series(1, 2, 4)\n    16\n    >>> geometric_series(1, 2, 0)\n    1\n    >>> geometric_series(1, 2, 1)\n    2\n    \"\"\"\n    return a * (r ** (n - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def geometric_series(a: int, r: float, n: int) -> int:\n    \"\"\"\n    >>> geometric_series(1, 2, 10)\n    1024\n    >>> geometric_series(1, 2, 20)\n    1048576\n    >>> geometric_series(1, 2, 30)\n    1073741824\n    \"\"\"\n    return round(a * (r ** (n - 1)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "\"\"\"Question:\nWrite a function to find t-nth term of geometric series.\nExample:\nInput: 2.5\nOutput: 1.625\nHints:\nUse exponentiation to solve it\n\n\"\"\"\ndef get_term_geometric_series(series, n):\n    return series ** (n-1)\n    \nprint get_term_geometric_series(2.5, 4)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a function to find t-nth term of geometric series.\nThe series will be obtained with the following formula:\na1 + (a1 - a2) + (a1 - a2 + a3) + ... + (a1 - an) = a1 * (1 + 1 + 1 + ... + 1) = a1 * (2n - 1) / 2\nwhere ni is the ni-th term of the series.\nn - number of terms in the series\na1 - first term of the series\nExample:\nfor n = 5 and a1 = 2, the series will be 2, 4, 6, 8, 10.\nSo, t-nth term of this series will be 10.\nHints:\nIn order to find the n-th term of geometric series, we can use the following formula:\na1 + (a1 - a2) + (a1 - a2 + a3) + ... + (a1 - an) = a1 * (1 + 1 + 1 + ... + 1) = a1 * (2n - 1) / 2\nSo, we can do the following:\na1 * (2n - 1) / 2 = t\n2n - 1 = 2n / 2\n2n - 1 - 2n = -1\n-1 = -2n\n-1 / -2 = n\n\n\n\"\"\"\ndef t_series(a1, n):\n    return a1 * (2 * n - 1) / 2\n\nt_series(2, 5)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\n\ndef geometric_series(\n    first_term: float,\n    ratio: float,\n    t_n_term: int,\n) -> float:\n    \"\"\"\n    Return nth term of geometric series.\n\n    :param first_term: first term of the series\n    :param ratio: ratio between two consecutive terms of the series\n    :param t_n_term: nth term of the series\n    :return: t-nth term of geometric series\n    \"\"\"\n    return first_term * ratio ** (t_n_term - 1)\n\n\nif __name__ == \"__main__\":\n    print(geometric_series(1, 2, 2))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def geometric_series(a, r, n):\n    return a * (r ** (n - 1))\n\n\"\"\"\nWrite a function to find t-nth term of arithmetic series.\n\"\"\"\n\ndef arithmetic_series(a, d, n):\n    return a + (n - 1) * d\n\n\"\"\"\nWrite a function to find t-nth term of harmonic series.\n\"\"\"\n\ndef harmonic_series(n):\n    return 1 / n\n\n\"\"\"\nWrite a function to find t-nth term of fibonacci series.\n\"\"\"\n\ndef fibonacci_series(n):\n    return (((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n) / 5 ** 0.5\n\n\"\"\"\nWrite a function to find t-nth term of pell series.\n\"\"\"\n\ndef pell_series(n):\n    return (n + 1) * (n - 1) * (n - 2) * (n - 3)\n\n\"\"\"\nWrite a function to find t-nth term of lucas series.\n\"\"\"\n\ndef lucas_series(n):\n    return 1 + 4 * (n - 2) * (n - 1) * (n - 3)\n\n\"\"\"\nWrite a function to find t-nth term of sum of series.\n\"\"\"\n\ndef sum_series(n):\n    return (n * (n + 1)) / 2"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_t_nth_term(a, r, t):\n    if t == 0:\n        return a\n\n    for i in range(1, t):\n        a = a * r\n\n    return a\n\n\nif __name__ == \"__main__\":\n    a, r, t = map(int, input().split())\n    print(find_t_nth_term(a, r, t))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef geometric_series_term(a: float, r: float, n: int) -> float:\n    \"\"\"\n    Return n-th term of geometric series.\n    >>> geometric_series_term(1, 2, 10)\n    1024.0\n    >>> geometric_series_term(1, 2, 11)\n    2048.0\n    >>> geometric_series_term(1, 1, 10)\n    10.0\n    >>> geometric_series_term(1, 1, 11)\n    10.0\n    >>> geometric_series_term(1, 1, 12)\n    10.0\n    >>> geometric_series_term(1, 1, 13)\n    10.0\n    \"\"\"\n    return (a * r ** (n - 1)) / (r - 1)\n\n\ndef geometric_series_sum(a: float, r: float, n: int) -> float:\n    \"\"\"\n    Return sum of first n terms of geometric series.\n    >>> geometric_series_sum(1, 2, 10)\n    1039.0\n    >>> geometric_series_sum(1, 2, 11)\n    1078.0\n    >>> geometric_series_sum(1, 1, 10)\n    55.0\n    >>> geometric_series_sum(1, 1, 11)\n    55.0\n    >>> geometric_series_sum(1, 1, 12)\n    55.0\n    >>> geometric_series_sum(1, 1, 13)\n    55.0\n    \"\"\"\n    return (a * (1 - r ** n)) / (1 - r)\n\n\ndef geometric_series_remainder(a: float, r: float, n: int) -> float:\n    \"\"\"\n    Return remainder of first n terms of geometric series.\n    >>> geometric_series_remainder(1, 2, 10)\n    0.0\n    >>> geometric_series_remainder(1, 2, 11)"
    }
  ]
}