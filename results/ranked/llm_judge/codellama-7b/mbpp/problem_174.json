{
  "timestamp": "2025-09-14T23:36:56.839277",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 174,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def focus(a, b, c):\n    \"\"\"\n    Finds the focus of a parabola.\n\n    >>> focus(1, 2, 3)\n    -1.0\n    >>> focus(2, 3, 4)\n    -2.0\n    >>> focus(3, 4, 5)\n    -2.0\n    >>> focus(4, 5, 6)\n    -2.0\n    \"\"\"\n    return (b ** 2 - 4 * a * c) / (2 * a)\n\n\ndef test_function():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    test_function()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Union\n\n\ndef focus_of_parabola(\n    a: Union[int, float], b: Union[int, float], c: Union[int, float]\n) -> tuple[Union[int, float], Union[int, float]]:\n    \"\"\"\n    Returns the focus of a parabola.\n    >>> focus_of_parabola(1, 2, 1)\n    (-1, -1)\n    >>> focus_of_parabola(1, 2, 3)\n    (2, 1)\n    >>> focus_of_parabola(1, 1, 1)\n    (-1, -1)\n    >>> focus_of_parabola(1, 1, 2)\n    (2, 1)\n    >>> focus_of_parabola(1, 2, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Coefficient 'a' and 'c' cannot be equal.\n    >>> focus_of_parabola(0, 2, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Coefficient 'a' cannot be zero.\n    >>> focus_of_parabola(1, 0, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Coefficient 'b' cannot be zero.\n    >>> focus_of_parabola(1, 2, 1)\n    (-1, -1)\n    >>> focus_of_parabola(1, 2, 3)\n    (2, 1)\n    \"\"\"\n    if a == c:\n        raise ValueError(\"Coefficient 'a' and 'c' cannot be equal.\")\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero.\")\n    if b == 0:\n        raise ValueError(\"Coefficient 'b' cannot be zero.\")\n\n    focus_x = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    focus_y = c - a * focus_x"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef focus_of_parabola(\n    a: Optional[int | float] = None,\n    b: Optional[int | float] = None,\n    c: Optional[int | float] = None,\n) -> tuple[float, float]:\n    \"\"\"\n    Calculate the focus of a parabola\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide exactly two values.\n    >>> focus_of_parabola(1, 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide all three values.\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide all three values.\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide all three values.\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide all three values.\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide all three values.\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide all three values.\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide all three values.\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide all three values.\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Please provide all three values.\n    >>> focus_"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def focus(p1, p2, p3):\n    \"\"\"\n    >>> focus((0, 0), (4, 0), (4, 4))\n    (2, 2)\n    \"\"\"\n    # p1, p2 and p3 are tuples of the form (x, y)\n    # p1 is the vertex, p2 is the directrix, p3 is the focus\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    \"\"\"\n    Calculates the focus of a parabola.\n\n    >>> focus(2, 3, 1)\n    (0.0, -1.5)\n\n    >>> focus(2, 3, 0)\n    (0.0, -3.0)\n\n    >>> focus(2, 3, 4)\n    (-2.0, -1.5)\n\n    >>> focus(2, 3, 5)\n    (-2.0, -1.5)\n\n    >>> focus(2, 3, 6)\n    (-4.0, -3.0)\n\n    >>> focus(2, 3, 7)\n    (-4.0, -3.0)\n\n    >>> focus(2, 3, 8)\n    (-6.0, -4.0)\n    \"\"\"\n    # Check if the parabola is valid\n    if a == 0:\n        return None\n\n    # Calculate the focus\n    x = -b / (2 * a)\n    y = -math.pow(x, 2) / (4 * a)\n\n    return (x, y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_focus(p1, p2):\n    \"\"\"\n    >>> find_focus((0, 0), (0, 10))\n    5.0\n    >>> find_focus((0, 0), (0, -10))\n    -5.0\n    >>> find_focus((1, 1), (2, 3))\n    3.0\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x = (x1 ** 2 - x2 ** 2 + y1 ** 2 - y2 ** 2) / (2 * (y1 - y2))\n    y = (x1 ** 2 - x ** 2 + y1 ** 2 - y ** 2) / (2 * (x1 - x))\n    return (x + y) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Any\n\n\ndef focus_of_parabola(a: int, b: int, c: int) -> tuple[float, float]:\n    \"\"\"Finds the focus of a parabola.\n\n    Args:\n        a (int): The coefficient of x^2 in the parabola.\n        b (int): The coefficient of x in the parabola.\n        c (int): The constant term in the parabola.\n\n    Returns:\n        tuple[float, float]: The x and y coordinates of the focus.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The coefficient of x^2 in the parabola cannot be zero\")\n    # Find the y coordinate of the focus\n    y = -b / (2 * a)\n    # Find the x coordinate of the focus\n    x = math.sqrt(c / a + y ** 2)\n\n    return (x, y)\n\n\nif __name__ == \"__main__\":\n    a, b, c = [int(i) for i in input(\"Enter a, b, c: \").split()]\n    print(focus_of_parabola(a, b, c))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import math\n\ndef focus(a, b, c):\n    \"\"\"\n    >>> focus(1, 2, 1)\n    (0.0, 0.0)\n    \"\"\"\n    D = b**2 - 4 * a * c\n    if D < 0:\n        raise ValueError(\"Parabola is not focusable\")\n    x = (-b + math.sqrt(D)) / (2 * a)\n    y = (-b - math.sqrt(D)) / (2 * a)\n    return x, y\n\ndef test_focus():\n    assert focus(1, 2, 1) == (0, 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    \"\"\"\n    >>> focus(1, 1, 1)\n    2\n    >>> focus(1, 1, 2)\n    3\n    >>> focus(1, 1, 3)\n    2\n    >>> focus(1, 1, 4)\n    1\n    >>> focus(1, 1, 5)\n    1\n    >>> focus(1, 1, 6)\n    1\n    >>> focus(1, 1, 7)\n    1\n    >>> focus(1, 1, 8)\n    1\n    >>> focus(1, 1, 9)\n    1\n    \"\"\"\n    d = b ** 2 - 4 * a * c\n    if d < 0:\n        return 1\n    elif d == 0:\n        return -b / (2 * a)\n    else:\n        x1 = (-b + math.sqrt(d)) / (2 * a)\n        x2 = (-b - math.sqrt(d)) / (2 * a)\n        return min(x1, x2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef focus_of_parabola(a: float, b: float, c: float) -> Tuple[float, float]:\n    \"\"\"\n    Calculates the focus of a parabola given the equation:\n    a * x^2 + b * x + c = 0\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a can not be zero\")\n\n    delta = b * b - 4 * a * c\n\n    if delta < 0:\n        raise ValueError(\"parabola has no real roots\")\n\n    x = (-b + math.sqrt(delta)) / (2 * a)\n    y = (-b - math.sqrt(delta)) / (2 * a)\n\n    return (x, y)\n\n\nif __name__ == \"__main__\":\n    print(focus_of_parabola(1, 2, 1))\n    print(focus_of_parabola(1, 3, 1))\n    print(focus_of_parabola(1, 4, 1))\n    print(focus_of_parabola(1, 5, 1))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nfrom math import sqrt\n\n\ndef focus(a: float, b: float, c: float) -> tuple[float, float]:\n    \"\"\"\n    Calculates the focus of a parabola.\n    >>> focus(1, 0, -1)\n    (1, 0)\n    >>> focus(1, 2, -3)\n    (2, -3)\n    >>> focus(2, 3, 4)\n    (2, 3)\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be zero\")\n    x = (b ** 2) / (4 * a)\n    y = (-c + sqrt(c ** 2 - b ** 2 + 4 * a)) / (2 * a)\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef focus_of_parabola(a, b, c):\n    \"\"\"\n    >>> focus_of_parabola(1, 3, 1)\n    (1, 0)\n    >>> focus_of_parabola(1, 2, 3)\n    (0, 3)\n    >>> focus_of_parabola(1, 1, 1)\n    (0, 1)\n    \"\"\"\n    d = (b ** 2) - (4 * a * c)\n    if a == 0 or d < 0:\n        return None\n    else:\n        focus_x = ((-b + sqrt(d)) / (2 * a))\n        focus_y = ((-b - sqrt(d)) / (2 * a))\n        return (focus_x, focus_y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from math import sqrt\nfrom unittest import TestCase\n\n\ndef focus(p1, p2, p3):\n    \"\"\"Find the focus of a parabola given three points.\n\n    Args:\n        p1, p2, p3 (list): coordinates of points on a parabola.\n\n    Returns:\n        A tuple containing the coordinates of the focus.\n\n    Raises:\n        ValueError: if the points are not on the same parabola.\n    \"\"\"\n    if not is_on_the_same_parabola(p1, p2, p3):\n        raise ValueError('The points are not on the same parabola.')\n\n    # Use the vertex to find the focus.\n    # https://en.wikipedia.org/wiki/Parabola#Focus_and_directrix\n    a = find_coefficient(p1, p2, p3)\n    vertex = find_vertex(p1, p2, p3, a)\n    focus = (vertex[0], -vertex[1])\n    return focus\n\n\ndef is_on_the_same_parabola(p1, p2, p3):\n    \"\"\"Return True if the points are on the same parabola, False otherwise.\n\n    Args:\n        p1, p2, p3 (list): coordinates of points on a parabola.\n\n    Returns:\n        A boolean value.\n    \"\"\"\n    a = find_coefficient(p1, p2, p3)\n    vertex = find_vertex(p1, p2, p3, a)\n    return is_on_the_parabola(p1, p2, p3, vertex)\n\n\ndef find_coefficient(p1, p2, p3):\n    \"\"\"Find the coefficient a of the parabola.\n\n    Args:\n        p1, p2, p3 (list): coordinates of points on a parabola.\n\n    Returns:\n        The coefficient a of the parabola.\n    \"\"\"\n    return (p1[1] - p2[1]) / (p1[0] - p2[0])\n\n\ndef find_vertex"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def focus(a, b, c):\n    \"\"\"\n    >>> focus(3, 2, 1)\n    (1.0, -1.0)\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The coefficient of x**2 is zero.\")\n    focus_x = -b / (2 * a)\n    focus_y = (b ** 2 - 4 * a * c) / (4 * a)\n    return focus_x, focus_y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import math\n\n\ndef focus_parabola(a, b, c):\n    \"\"\"\n    >>> focus_parabola(1, 2, 1)\n    (1.0, 4.0)\n    \"\"\"\n    if a == 0:\n        return None\n    focus_x = -(b / (2 * a))\n    focus_y = (4 * a * c - b * b) / (4 * a)\n    return (focus_x, focus_y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\n\ndef find_focus(a, b, c):\n    \"\"\"\n    This function finds the focus of a parabola given its equation.\n    The focus is where the tangent is parallel to the x axis.\n    \"\"\"\n    # Get the vertex of the parabola\n    vertex = find_vertex(a, b, c)\n\n    # Calculate the focus\n    focus = (2 * vertex[1], -vertex[0])\n\n    return focus\n\n\ndef find_vertex(a, b, c):\n    \"\"\"\n    This function finds the vertex of a parabola given its equation.\n    \"\"\"\n    # Calculate the vertex\n    vertex = (-b / (2 * a), -c / (2 * a))\n\n    return vertex\n\n\ndef find_focus_newton(a, b, c):\n    \"\"\"\n    This function finds the focus of a parabola given its equation.\n    The focus is where the tangent is parallel to the x axis.\n    \"\"\"\n    # Get the vertex of the parabola\n    vertex = find_vertex_newton(a, b, c)\n\n    # Calculate the focus\n    focus = (2 * vertex[1], -vertex[0])\n\n    return focus\n\n\ndef find_vertex_newton(a, b, c):\n    \"\"\"\n    This function finds the vertex of a parabola given its equation.\n    \"\"\"\n    # Calculate the vertex\n    vertex = (-b / (2 * a), -c / (2 * a))\n\n    return vertex\n\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    a, b, c = 1, 2, -1\n\n    print(find_focus(a, b, c))\n\n    print(find_focus_newton(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef focus_of_parabola(\n    a: float,\n    b: float,\n    c: float,\n) -> tuple[float, float] | None:\n    \"\"\"\n    a = coefficient of x^2\n    b = coefficient of x\n    c = constant\n\n    Focus is given by:\n    x = -b / 2a\n    y = -c / 2a\n\n    >>> focus_of_parabola(1, 0, 1)\n    (-0.5, -1.0)\n    >>> focus_of_parabola(-2, 0, 1)\n    (0.5, -1.0)\n    >>> focus_of_parabola(-2, -1, 1)\n    (0.5, 0.0)\n    >>> focus_of_parabola(1, 1, 1)\n    (0.0, 0.0)\n    >>> focus_of_parabola(1, 0, 0)\n\n    >>> focus_of_parabola(1, 0, -1)\n    (0.0, -1.0)\n    >>> focus_of_parabola(1, 0, -2)\n    (0.0, -2.0)\n    >>> focus_of_parabola(1, 1, -2)\n    (0.0, 2.0)\n    \"\"\"\n    if a == 0:\n        return None\n\n    x = -b / (2 * a)\n    y = -c / (2 * a)\n\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import math\nimport unittest\n\n\ndef focus(a, b, c):\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n    if b == 0:\n        raise ValueError(\"b cannot be 0\")\n    if c == 0:\n        raise ValueError(\"c cannot be 0\")\n\n    if a < 0:\n        raise ValueError(\"a cannot be negative\")\n    if b < 0:\n        raise ValueError(\"b cannot be negative\")\n    if c < 0:\n        raise ValueError(\"c cannot be negative\")\n\n    discriminant = b ** 2 - 4 * a * c\n\n    if discriminant < 0:\n        raise ValueError(\"discriminant cannot be negative\")\n\n    if discriminant == 0:\n        return (-b / (2 * a), -b / (2 * a))\n\n    x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n    x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n\n    return (x1, x2)\n\n\nclass ParabolaFocusTest(unittest.TestCase):\n    def test_focus_positive_coefficients(self):\n        self.assertEqual((-1, -1), focus(1, 0, -1))\n        self.assertEqual((0, 0), focus(1, 1, 1))\n        self.assertEqual((-1, 1), focus(1, 2, 1))\n        self.assertEqual((1, -1), focus(1, 2, 0))\n        self.assertEqual((0, 0), focus(1, 2, 2))\n        self.assertEqual((1, 1), focus(1, 3, 1))\n        self.assertEqual((0, 0), focus(1, 3, 3))\n        self.assertEqual((1, 0), focus(1, 4, 1))\n        self.assertEqual((0, 0), focus(1, 4, 2))\n        self.assertEqual((1, 1),"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef focus(a: float, b: float, c: float) -> Tuple[float, float]:\n    \"\"\"Return the focus of a parabola.\n\n    >>> focus(1, 0, 1)\n    (1, -1)\n    \"\"\"\n    if a != 1:\n        raise ValueError(\"a must be 1\")\n    return (-b / (2 * a), (4 * a * c - b * b) / (4 * a))\n\n\ndef test_focus() -> None:\n    \"\"\"\n    >>> focus(1, 0, 1)\n    (1, -1)\n    >>> focus(1, 0, 2)\n    (2, -4)\n    >>> focus(1, 0, 3)\n    (3, -9)\n    \"\"\"\n    pass\n\n\ndef _test() -> None:\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    if sys.argv[1:] == [\"-t\"]:\n        _test()\n    else:\n        print(f\"{solution() = }\")"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def focus(a, b, c):\n    \"\"\"\n    Find the focus of a parabola\n    \"\"\"\n    return (b**2 - 4*a*c) / (4*a)\n\n\ndef main():\n    print(focus(1, -3, -2))\n    print(focus(-1, -3, 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import math\nfrom typing import List\n\n\ndef parabola_focus(coordinates: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> parabola_focus([[1, 2], [3, 4], [5, 6]])\n    [4, 0]\n    \"\"\"\n    x_coordinates, y_coordinates = zip(*coordinates)\n    a, b, c = linear_equation(x_coordinates, y_coordinates)\n\n    return [\n        int(-b / (2 * a)),\n        int(\n            (b ** 2 - 4 * a * c) / (4 * a ** 2)\n        ),\n    ]\n\n\ndef linear_equation(x: List[int], y: List[int]) -> List[int]:\n    \"\"\"\n    >>> linear_equation([1, 2, 3], [2, 4, 6])\n    [1, 2, 5]\n    \"\"\"\n    n = len(x)\n    x_sum = sum(x)\n    x_squared_sum = sum([x_i ** 2 for x_i in x])\n    y_sum = sum(y)\n    a = (n * y_sum - x_sum * y_sum) / (n * x_squared_sum - x_sum ** 2)\n    b = (x_squared_sum * y_sum - x_sum * x_sum) / (n * x_squared_sum - x_sum ** 2)\n    return [a, b, y_sum]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef focus_of_parabola(\n    a: Optional[float] = None,\n    b: Optional[float] = None,\n    c: Optional[float] = None,\n) -> tuple[float, float]:\n    \"\"\"\n    Calculates the focus of a parabola.\n    \"\"\"\n    if a is None:\n        a = 0\n    if b is None:\n        b = 0\n    if c is None:\n        c = 0\n\n    # y = ax^2 + bx + c\n    # f = -b / 2a\n    # f = -b / (2 * a)\n    # (2af) ^ 2 = b^2 + 4ac\n    # 4af^2 = b^2 + 4ac\n    # af^2 = (b^2 + 4ac) / 4\n    # f^2 = (b^2 + 4ac) / (4a)\n    # f = sqrt((b^2 + 4ac) / (4a))\n    focus_x = math.sqrt((b * b + 4 * a * c) / (4 * a))\n    focus_y = -b / (2 * a)\n\n    return focus_x, focus_y"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef focus_of_parabola(\n    vertex: Tuple[float, float],\n    directrix: float,\n) -> Tuple[float, float]:\n    \"\"\"\n    Focus of a parabola is the point at which the directrix of a parabola intersects the axis of the parabola.\n\n    >>> focus_of_parabola((0, 0), 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Directrix must be greater than zero.\n    >>> focus_of_parabola((0, 0), 1)\n    (0.0, 0.0)\n    >>> focus_of_parabola((0, 0), -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Directrix must be greater than zero.\n    >>> focus_of_parabola((-1, 0), 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Vertex must be greater than the directrix.\n    >>> focus_of_parabola((1, 0), 1)\n    (0.0, 0.0)\n    >>> focus_of_parabola((0, 0), 2)\n    (-1.0, 0.0)\n    >>> focus_of_parabola((0, 0), 4)\n    (1.0, 0.0)\n    \"\"\"\n    if directrix <= 0:\n        raise ValueError(\"Directrix must be greater than zero.\")\n    if vertex[1] >= directrix:\n        raise ValueError(\"Vertex must be greater than the directrix.\")\n\n    return (\n        vertex[0] - 2 * (vertex[1] - directrix) * (vertex[1] - directrix) / directrix,\n        0,\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    focus = ((b ** 2) - (4 * a * c)) ** 0.5\n    if focus < 0:\n        print(\"There is no real solution to this equation\")\n    else:\n        return focus\n\n\ndef main():\n    print(focus(1, 4, 4))\n    print(focus(1, 4, 1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# This is the Parabola class of section 2.4.1 that we use as a reference\nclass Parabola:\n    def __init__(self, focus):\n        self.focus = focus\n\n    def __repr__(self):\n        return f\"Parabola({self.focus})\"\n\n    def __eq__(self, other):\n        return self.focus == other.focus\n\n\ndef find_focus(parabola_1, parabola_2):\n    \"\"\"\n    Find the focus of the parabola that results from combining two parabolas.\n\n    >>> find_focus(Parabola((1, 1)), Parabola((1, 1)))\n    (1, 1)\n    >>> find_focus(Parabola((1, 1)), Parabola((-2, -2)))\n    (-2, -2)\n    >>> find_focus(Parabola((2, 2)), Parabola((-2, -2)))\n    (0, 0)\n    >>> find_focus(Parabola((0, 0)), Parabola((-2, -2)))\n    (-2, -2)\n    >>> find_focus(Parabola((-2, -2)), Parabola((2, 2)))\n    (0, 0)\n    >>> find_focus(Parabola((2, 2)), Parabola((1, 1)))\n    (3, 3)\n    >>> find_focus(Parabola((1, 1)), Parabola((0, 0)))\n    (1, 1)\n    \"\"\"\n    return (\n        parabola_1.focus[0] + parabola_2.focus[0],\n        parabola_1.focus[1] + parabola_2.focus[1],\n    )\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    return (b**2) / (4 * a), -(b**2) / (4 * a)\n\n\ndef main():\n    a = float(input(\"a: \"))\n    b = float(input(\"b: \"))\n    c = float(input(\"c: \"))\n\n    x, y = focus(a, b, c)\n\n    print(f\"x: {x}, y: {y}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nimport math\n\n\ndef focus_of_parabola(a: float, b: float, c: float) -> tuple[float, float]:\n    \"\"\"Find the focus of a parabola.\n\n    >>> focus_of_parabola(1, 2, 3)\n    (-2.0, -1.0)\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be zero\")\n    focus_x = -b / (2 * a)\n    focus_y = c - (a * focus_x ** 2) / 2\n    return focus_x, focus_y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def focus_finder(vertex, directrix):\n    \"\"\"\n    >>> focus_finder((0, 0), 1)\n    (0, -1)\n    >>> focus_finder((0, 0), -1)\n    (0, 1)\n    >>> focus_finder((0, 0), 0)\n    (0, 0)\n    \"\"\"\n    if directrix == 0:\n        return (0, 0)\n    else:\n        return (vertex[0], directrix * -1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    # Calculate the value of discriminant\n    discriminant = (b ** 2) - (4 * a * c)\n    # Check if the value of discriminant is greater than 0\n    if discriminant > 0:\n        # Calculate the value of focus\n        focus = math.sqrt(discriminant) / (2 * a)\n        return focus\n    else:\n        return None\n\n\ndef main():\n    # Check the focus of parabola y^2=4ax\n    print(focus(1, 0, 1))\n    print(focus(1, 0, 0))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Union\n\n\ndef focus_of_parabola(\n    a: float,\n    b: float,\n    c: float,\n) -> tuple[float, float]:\n    \"\"\"\n    Calculate focus of a parabola given a, b, c.\n    a is the coefficient of x^2\n    b is the coefficient of x\n    c is the coefficient of the constant\n    \"\"\"\n    # D = b^2 - 4ac\n    discriminant = b ** 2 - 4 * a * c\n\n    # If D is positive, two distinct real solutions\n    if discriminant > 0:\n        # x_1 = (-b + sqrt(D)) / 2a\n        # x_2 = (-b - sqrt(D)) / 2a\n        x_1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        x_2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        return x_1, x_2\n    # If D is 0, one real solution\n    elif discriminant == 0:\n        # x_1 = -b / 2a\n        x_1 = -b / (2 * a)\n        return x_1\n    # If D is negative, no real solution\n    else:\n        return ()\n\n\nif __name__ == \"__main__\":\n    a: float = float(input(\"a = \"))\n    b: float = float(input(\"b = \"))\n    c: float = float(input(\"c = \"))\n\n    x_1: Union[float, tuple[float, float]] = focus_of_parabola(a, b, c)\n\n    if isinstance(x_1, float):\n        print(f\"The focus is {x_1}\")\n    else:\n        print(\"The parabola has no focus\")"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef focus_of_parabola(\n    a: float,\n    b: float,\n    c: float,\n) -> tuple[float, float]:\n    \"\"\"\n    Calculates the focus of a parabola.\n    >>> focus_of_parabola(1, -3, 4)\n    (2.0, 0.0)\n    >>> focus_of_parabola(3, 12, 21)\n    (-1.0, 0.0)\n    >>> focus_of_parabola(1, 2, 1)\n    Traceback (most recent call last):\n    ...\n    ValueError: Parabola is vertical.\n    >>> focus_of_parabola(1, 2, 3)\n    Traceback (most recent call last):\n    ...\n    ValueError: Parabola is vertical.\n    >>> focus_of_parabola(1, 1, 2)\n    Traceback (most recent call last):\n    ...\n    ValueError: Parabola is vertical.\n    >>> focus_of_parabola(1, 2, 1)\n    Traceback (most recent call last):\n    ...\n    ValueError: Parabola is vertical.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Parabola is vertical.\")\n\n    focus_x = (b ** 2) / (4 * a)\n    focus_y = -b / (2 * a)\n\n    return focus_x, focus_y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    import python_ta\n\n    python_ta.check_all(config={\"extra-imports\": [\"math\"], \"max-line-length\": 100})"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef focus(a, b, c):\n    \"\"\"\n    Return focus of a parabola given a, b, c.\n    \"\"\"\n    if a == 0:\n        return None\n    return (-b / (2 * a), -b**2 / (4 * a**2) - c / a)\n\n\ndef test():\n    \"\"\"\n    >>> focus(0, 0, 0)\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def focus(a, b, c):\n    \"\"\"\n    a, b, c are the coefficients of the equation y = ax^2 + bx + c\n    \"\"\"\n    return (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a), (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n\n\ndef test_focus():\n    assert focus(1, 2, 3) == (1, -1)\n\n\nif __name__ == '__main__':\n    test_focus()"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "def parabola_focus(vertex, directrix):\n    \"\"\"\n    vertex: tuple (x, y)\n    directrix: float\n    \"\"\"\n    return (vertex[0] - directrix, vertex[1])"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "def focus(a, b, c):\n    \"\"\"\n    >>> focus(2, 3, 1)\n    3\n    \"\"\"\n    return (-b / a) ** 2 - c / a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "def parabola_focus(a, b, c):\n    \"\"\"\n    >>> parabola_focus(1, 2, 1)\n    (1.0, -1.0)\n    \"\"\"\n    return (b / (2 * a), -c / a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.0,
      "candidate": "def focus(a, b, c):\n    \"\"\"\n    Calculate the focus of a parabola.\n\n    :param a: Coefficient of x^2\n    :type a: int\n    :param b: Coefficient of x\n    :type b: int\n    :param c: Constant\n    :type c: int\n    :return: Coordinates of the focus\n    :rtype: tuple\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n    return (-b / (2 * a), c / a)"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    \"\"\"\n    Finds the focus of a parabola\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be zero\")\n\n    focus_x = (-b + math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n    focus_y = -1 * (b**2 / (4 * a))\n\n    return (focus_x, focus_y)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef parabola_focus(\n    vertex: Tuple[float, float], directrix: float\n) -> Tuple[float, float]:\n    \"\"\"Finds the focus of a parabola.\n\n    :param vertex: The coordinates of the parabola's vertex.\n    :param directrix: The value of the directrix.\n    :return: The coordinates of the parabola's focus.\n    \"\"\"\n    x_v, y_v = vertex\n    x_f = (directrix - y_v) / (2 * (x_v - directrix))\n    y_f = directrix - (x_f - x_v)\n    return x_f, y_f\n\n\ndef main():\n    vertex = eval(input('Enter the coordinates of the parabola\\'s vertex: '))\n    directrix = eval(input('Enter the value of the directrix: '))\n    focus = parabola_focus(vertex, directrix)\n    print(f'The parabola\\'s focus is at {focus}.')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_focus(p1, p2):\n    \"\"\"\n    :param p1: (x1, y1)\n    :param p2: (x2, y2)\n    :return: (x, y)\n    \"\"\"\n    x_1, y_1 = p1\n    x_2, y_2 = p2\n    x_focus = (y_1 - y_2) / (x_2 - x_1)\n    y_focus = x_focus * (x_1 - x_2) + y_2\n    return x_focus, y_focus\n\n\nif __name__ == '__main__':\n    print(find_focus((1, 4), (4, 1)))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    \"\"\"\n    Calculates the focus of a parabola.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n    focus_x = -b / (2 * a)\n    focus_y = -math.pow(focus_x, 2) / (2 * a)\n    return focus_x, focus_y"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from sympy import *\n\ninit_printing()\n\n\ndef parabola_focus(p1, p2):\n    \"\"\"\n    Find the focus of a parabola given two points on it.\n\n    :param p1: First point on the parabola\n    :param p2: Second point on the parabola\n    :return: Focus of the parabola\n    \"\"\"\n\n    # Convert the points to sympy symbols\n    x1, y1 = symbols(\"x1 y1\")\n    x2, y2 = symbols(\"x2 y2\")\n\n    # Convert the points into equations\n    eq1 = Eq(x1, p1[0])\n    eq2 = Eq(y1, p1[1])\n    eq3 = Eq(x2, p2[0])\n    eq4 = Eq(y2, p2[1])\n\n    # Substitute the points into the equations\n    eq1 = eq1.subs(x1, p1[0]).subs(y1, p1[1])\n    eq2 = eq2.subs(x1, p1[0]).subs(y1, p1[1])\n    eq3 = eq3.subs(x2, p2[0]).subs(y2, p2[1])\n    eq4 = eq4.subs(x2, p2[0]).subs(y2, p2[1])\n\n    # Create the equations for the parabola\n    eq5 = Eq((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    eq6 = Eq(x1 ** 2 + y1 ** 2)\n\n    # Solve the equations\n    sol = solve([eq1, eq2, eq3, eq4, eq5, eq6], [x1, y1, x2, y2])\n\n    # Return the focus\n    return (sol[x1], sol[y1])\n\n\nif __name__ == \"__main__\":\n    print(parabola_focus((1, 1), (2, 2)))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def focus_of_parabola(a, b, c):\n    \"\"\"\n    >>> focus_of_parabola(2, 3, -4)\n    (-3.0, 1.0)\n    \"\"\"\n    focus_x = (b ** 2) / (4 * a)\n    focus_y = c / (a * 2)\n    return (focus_x, focus_y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus_parabola(a, b, c):\n    \"\"\"\n    a is the coefficient of the x term\n    b is the coefficient of the y term\n    c is the constant term\n    \"\"\"\n    if a == 0:\n        return None\n    else:\n        return ((b / a) / 2, -4 * a * c / b / a)\n\n\nif __name__ == '__main__':\n    print(focus_parabola(2, 3, -4))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def focus(a, b, c):\n    \"\"\"Find the focus of a parabola.\n\n    :param a: The coefficient of x^2\n    :type a: int or float\n    :param b: The coefficient of x\n    :type b: int or float\n    :param c: The coefficient of 1\n    :type c: int or float\n    :return: The x and y coordinate of the focus\n    :rtype: list\n    \"\"\"\n    # Check that the parabola has a focus\n    if a == 0:\n        return \"No focus, the parabola is vertical\"\n\n    # Calculate the focus's x and y coordinate\n    focus_x = -b / (2 * a)\n    focus_y = -b ** 2 / (4 * a * c) + c\n\n    # Return the x and y coordinate of the focus\n    return [focus_x, focus_y]"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def parabola_focus(vertex: tuple, directrix: int) -> tuple:\n    \"\"\"Find the focus of a parabola.\n\n    :param vertex: vertex of parabola\n    :param directrix: value of directrix\n    :return: focus of parabola\n    \"\"\"\n    focus_x = vertex[0] - (directrix - vertex[1])\n    focus_y = vertex[1] - (directrix + vertex[1])\n    return focus_x, focus_y\n\n\nif __name__ == \"__main__\":\n    print(parabola_focus((0, 0), 0))\n    print(parabola_focus((5, -2), 1))\n    print(parabola_focus((-2, 2), -2))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import math\n\ndef focus(p1, p2):\n    a = p2[1] - p1[1]\n    b = p1[0] - p2[0]\n    c = p2[0]*p1[1] - p1[0]*p2[1]\n\n    x0 = (b*(b*a[0] - c) - a[1]*c)/(a[1]**2 + b**2)\n    y0 = (-b*c - a[0]*b**2)/(a[1]**2 + b**2)\n\n    return (x0, y0)\n\nprint(focus((0, 0), (3, 4)))\nprint(focus((-1, 0), (1, 2)))\nprint(focus((3, 4), (-1, 0)))\nprint(focus((1, 2), (-1, 0)))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def focus_parabola(a, b, c):\n    if a == 0:\n        return \"Vertical parabola\"\n    elif b == 0:\n        return \"Horizontal parabola\"\n    else:\n        return (b * b - 4 * a * c) / (4 * a * a)\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter a value for a: \"))\n    b = float(input(\"Enter a value for b: \"))\n    c = float(input(\"Enter a value for c: \"))\n    print(focus_parabola(a, b, c))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def focus(a, b, c):\n    \"\"\"\n    >>> focus(1, 2, 1)\n    (0, 0)\n    >>> focus(1, 2, 3)\n    (0.0, -1.0)\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be zero\")\n    x = -b / (2 * a)\n    y = (-b ** 2 + 4 * a * c) / (4 * a)\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def focus(vertex, directrix):\n    \"\"\"\n    :param vertex: tuple of two float values\n    :param directrix: float value\n    :return: tuple of two float values\n    \"\"\"\n    a, b = vertex\n    x1, y1 = a, b\n    x2, y2 = -a, b\n    y3 = (directrix ** 2) - (a ** 2)\n    x3 = a + (directrix * (y3 - b)) / (directrix - b)\n    return x3, y3"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def parabolaFocus(a, b, c):\n    \"\"\"\n    >>> parabolaFocus(3, 2, -1)\n    (3.0, -1.0)\n    \"\"\"\n    d = (b**2 - 4*a*c)**(1/2)\n    x = (-b + d)/(2*a)\n    y = (-b - d)/(2*a)\n    return (x, y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef focus(p1, p2, p3):\n    \"\"\"\n    Calculate the focus of a parabola.\n    :param p1: coordinates of the first point\n    :param p2: coordinates of the second point\n    :param p3: coordinates of the third point\n    :return: coordinates of the focus\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    a = (y1 - y2) * (y1 - y3) * (y2 - y3)\n    b = (x1 - x2) * (x1 - x3) * (x2 - x3)\n    c = (y1 - y2) * (y2 - y3) * x1 + (x2 - x1) * (x3 - x1) * y1 + x2 * y3 - x3 * y2\n\n    return (b * c) / a, (a * c) / b\n\n\nif __name__ == '__main__':\n    print(focus((0, 0), (1, 1), (2, 2)))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from sympy import solve, sympify\nfrom sympy.abc import x\n\n\ndef focus(p1, p2):\n    return solve(sympify(p1) - sympify(p2))\n\n\ndef test_focus():\n    assert focus('x**2 - 4', 'x + 2') == [2]"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def focus_of_parabola(p1, p2, p3):\n    # Find the focus of a parabola\n    # p1, p2, p3 are the points on the parabola\n    #\n    # p1, p2, p3 are tuples of x, y\n    #\n    # return: focus as a tuple (x, y)\n    #\n    # if there is no focus, return None\n    #\n    # if there are multiple focuses, return the first one\n\n    # y = (x-h)^2/4*a\n    # a = (y-k)^2/4h^2\n    # h^2 = 4a\n    # a = (y-k)^2/(4(x1-h))\n\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    if y1 == y2 == y3:\n        return None\n\n    h = (y1 - y2) / 2\n    a = (y1 - y2) ** 2 / (4 * (x1 - h))\n\n    k = (y1 + y2 + y3) / 3\n\n    return (h, k + h ** 2 / (4 * a))\n\n\ndef test_focus_of_parabola():\n    assert focus_of_parabola((-2, 0), (0, 0), (2, 0)) == (0, 0)\n    assert focus_of_parabola((-2, 0), (0, 2), (2, 0)) is None\n    assert focus_of_parabola((-2, 0), (0, 0), (2, 2)) == (0, 1)\n    assert focus_of_parabola((-2, 0), (0, 2), (2, 2)) == (0, 3)\n\n\nif __name__ == '__main__':\n    test_focus_of_parabola()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus_of_parabola(a, b, c):\n    focus = (b**2 - 4*a*c)**0.5\n    return focus\n\n\na = 1\nb = 2\nc = 1\n\nprint(focus_of_parabola(a, b, c))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import math\n\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    >>> parabola_focus(2, 1, 3)\n    1.0\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Parabola is vertical\")\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus_parabola(a, b, c):\n    \"\"\"\n    Calculate the focus of a parabola.\n\n    :param a: The coefficient of x.\n    :param b: The coefficient of y.\n    :param c: The constant term.\n    :return: The focus of a parabola.\n    \"\"\"\n    if a == 0:\n        return None\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return None\n    x1 = (-b + math.sqrt(delta)) / (2 * a)\n    x2 = (-b - math.sqrt(delta)) / (2 * a)\n    return (x1 + x2) / 2, 0\n\n\nif __name__ == \"__main__\":\n    assert focus_parabola(1, 1, 1) == (0, 0)\n    assert focus_parabola(1, 2, 1) == (0, -1)\n    assert focus_parabola(1, -2, 1) == (0, 1)\n    assert focus_parabola(2, 2, 1) == (0, 0)\n    assert focus_parabola(2, 4, 2) == (0, -1)\n    assert focus_parabola(2, -4, 2) == (0, 1)\n    assert focus_parabola(1, 0, 1) is None\n    assert focus_parabola(0, 1, 1) is None"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def find_focus(p1, p2, p3):\n    \"\"\"\n    Finds the focus of a parabola given three points.\n\n    :param p1: Point 1\n    :type p1: list\n    :param p2: Point 2\n    :type p2: list\n    :param p3: Point 3\n    :type p3: list\n    :return: The focus of the parabola\n    :rtype: list\n    \"\"\"\n    return [p1[0], (p1[1] + p2[1] + p3[1]) / 3]\n\n\nif __name__ == \"__main__\":\n    print(find_focus([3, 0], [1, 4], [5, 12]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus_point(x0, y0, x1, y1, x2, y2):\n    \"\"\"\n    Focus of a parabola is the point where the tangent is orthogonal to the chord connecting the two focuses.\n\n    :param x0: x-coordinate of point 0\n    :type x0: int\n    :param y0: y-coordinate of point 0\n    :type y0: int\n    :param x1: x-coordinate of point 1\n    :type x1: int\n    :param y1: y-coordinate of point 1\n    :type y1: int\n    :param x2: x-coordinate of point 2\n    :type x2: int\n    :param y2: y-coordinate of point 2\n    :type y2: int\n    :return: x and y coordinate of focus\n    :rtype: tuple\n    \"\"\"\n    if not isinstance(x0, int):\n        raise TypeError(\"x0 must be an integer\")\n    elif not isinstance(y0, int):\n        raise TypeError(\"y0 must be an integer\")\n    elif not isinstance(x1, int):\n        raise TypeError(\"x1 must be an integer\")\n    elif not isinstance(y1, int):\n        raise TypeError(\"y1 must be an integer\")\n    elif not isinstance(x2, int):\n        raise TypeError(\"x2 must be an integer\")\n    elif not isinstance(y2, int):\n        raise TypeError(\"y2 must be an integer\")\n    elif (\n        not (isinstance(x0, float) or isinstance(x0, int))\n        or not (isinstance(y0, float) or isinstance(y0, int))\n        or not (isinstance(x1, float) or isinstance(x1, int))\n        or not (isinstance(y1, float) or isinstance(y1, int))\n        or not (isinstance(x2, float) or isinstance(x2, int))\n        or not (isinstance(y2, float) or isinstance(y2, int))\n    ):\n        raise TypeError(\"x0, y0, x1, y1"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "# This is the function we're trying to optimize.\ndef f(x):\n    return 4 * x ** 2 - 24 * x + 14\n\n\ndef find_focus():\n    \"\"\"Find the focus of a parabola.\n\n    >>> find_focus()\n    (2.0, 3.0)\n    \"\"\"\n    # Our initial guess.\n    x = 1\n\n    # How close we want to get.\n    target = 0.0000000001\n\n    # How many steps we can take.\n    max_steps = 1000\n\n    # How many steps we've taken.\n    step = 0\n\n    # Keep going until we've taken too many steps or we're close enough.\n    while abs(f(x)) > target and step < max_steps:\n        step += 1\n\n        # Take a step.\n        if f(x) > 0:\n            x = x - 0.001\n        else:\n            x = x + 0.001\n\n    return x, f(x)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef parabola_focus(\n    vertex_x: float, vertex_y: float, directrix_x: float, directrix_y: float\n) -> Tuple[float, float]:\n    \"\"\"Find the focus of a parabola.\n\n    :param vertex_x: x coordinate of parabola's vertex\n    :param vertex_y: y coordinate of parabola's vertex\n    :param directrix_x: x coordinate of parabola's directrix\n    :param directrix_y: y coordinate of parabola's directrix\n    :return: x and y coordinates of parabola's focus\n    \"\"\"\n    focus_x = (\n        vertex_x\n        + directrix_x\n        - (\n            vertex_y\n            + directrix_y\n            - 2 * vertex_x * vertex_y / (directrix_x - vertex_x)\n        )\n        / (directrix_y - vertex_y)\n    )\n    focus_y = (\n        vertex_y\n        + directrix_y\n        - 2 * vertex_y * vertex_x / (directrix_x - vertex_x)\n    ) / (directrix_y - vertex_y)\n    return focus_x, focus_y\n\n\ndef main():\n    vertex_x = float(input(\"Please enter the x coordinate of the vertex: \"))\n    vertex_y = float(input(\"Please enter the y coordinate of the vertex: \"))\n    directrix_x = float(input(\"Please enter the x coordinate of the directrix: \"))\n    directrix_y = float(input(\"Please enter the y coordinate of the directrix: \"))\n\n    focus_x, focus_y = parabola_focus(\n        vertex_x, vertex_y, directrix_x, directrix_y\n    )\n    print(\n        f\"The focus of the parabola is at ({focus_x}, {focus_y})\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    \"\"\"\n    >>> focus(-1, 2, 3)\n    (3.0, -4.0)\n    >>> focus(1, 2, 3)\n    (-1.0, -1.0)\n    >>> focus(2, 3, 4)\n    (4.0, -4.0)\n    \"\"\"\n    D = b ** 2 - 4 * a * c\n    if D < 0:\n        return None\n    x0 = (-b + math.sqrt(D)) / (2 * a)\n    x1 = (-b - math.sqrt(D)) / (2 * a)\n    return (x0, x1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef focus(a, b, c):\n    \"\"\"\n    >>> focus(1, 2, 1)\n    (0.0, 0.0)\n    \"\"\"\n    # y = a*x**2 + b*x + c\n    # (a*x + b)**2 - 4*a*c = 0\n    # a*x**2 + 2*b*x + 4*a*c = 0\n    # D = b**2 - 4*a*c\n    # x1 = (-b + sqrt(D))/(2*a)\n    # x2 = (-b - sqrt(D))/(2*a)\n    # return x1, x2\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -b / (2 * a)\n        return (x, x)\n    else:\n        x1 = (-b + sqrt(discriminant)) / (2 * a)\n        x2 = (-b - sqrt(discriminant)) / (2 * a)\n        return (x1, x2)\n\n\ndef focus_v2(a, b, c):\n    \"\"\"\n    >>> focus_v2(1, 2, 1)\n    (0.0, 0.0)\n    \"\"\"\n    # y = a*x**2 + b*x + c\n    # (a*x + b)**2 - 4*a*c = 0\n    # a*x**2 + 2*b*x + 4*a*c = 0\n    # D = b**2 - 4*a*c\n    # x1 = (-b + sqrt(D))/(2*a)\n    # x2 = (-b - sqrt(D))/(2*a)\n    # return x1, x2\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "import math\n\n\ndef parabola(a, b, c):\n    \"\"\"\n    Return the focus of a parabola.\n\n    :param a: The coefficient of x^2 in the parabola.\n    :param b: The coefficient of x in the parabola.\n    :param c: The constant in the parabola.\n    :return: The focus of the parabola.\n    \"\"\"\n    return (-b / (2 * a))\n\n\nif __name__ == '__main__':\n    a = float(input('Enter a: '))\n    b = float(input('Enter b: '))\n    c = float(input('Enter c: '))\n    print(f'The focus of the parabola is {parabola(a, b, c)}')"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import math\n\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    >>> parabola_focus(1, 1, 1)\n    (1.0, 0.0)\n    >>> parabola_focus(1, -1, 1)\n    (-1.0, 0.0)\n    \"\"\"\n    # y = a * x ** 2 + b * x + c\n    # (a * x + b) ** 2 - 4 * a * c = 0\n    # (a * x + b) ** 2 = 4 * a * c\n    # a * x ** 2 + 2 * b * x + (b ** 2 - 4 * a * c) = 0\n    # D = b ** 2 - 4 * a * c\n    # x1 = (-b + sqrt(b ** 2 - 4 * a * c)) / 2 * a\n    # x2 = (-b - sqrt(b ** 2 - 4 * a * c)) / 2 * a\n    # y1 = a * x1 ** 2 + b * x1 + c\n    # y2 = a * x2 ** 2 + b * x2 + c\n\n    # x = (-b + sqrt(b ** 2 - 4 * a * c)) / 2 * a\n    # y = a * x ** 2 + b * x + c\n\n    # x = (-b - sqrt(b ** 2 - 4 * a * c)) / 2 * a\n    # y = a * x ** 2 + b * x + c\n\n    # x = (-b + sqrt(b ** 2 - 4 * a * c)) / 2 * a\n    # y = a * x ** 2 + b * x + c\n\n    # x = (-b - sqrt(b ** 2 - 4 * a * c)) / 2 * a\n    # y = a * x ** 2 + b * x + c\n\n    # x = (-b + sqrt(b ** 2 - 4 * a * c)) / 2 * a\n    # y = a * x **"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import math\n\ndef find_focus(a, b, c):\n    x = (b**2) - (4*a*c)\n    y = math.sqrt(x)\n    focus = (b/2*a, -c/a)\n    focus_1 = (b/2*a, y/2*a)\n    focus_2 = (b/2*a, -y/2*a)\n    return focus, focus_1, focus_2\n\nprint(find_focus(1, 2, 1))\nprint(find_focus(1, 2, 0))\nprint(find_focus(1, 2, -1))\nprint(find_focus(1, 3, 1))\nprint(find_focus(1, 3, 0))\nprint(find_focus(1, 3, -1))\nprint(find_focus(1, 4, 1))\nprint(find_focus(1, 4, 0))\nprint(find_focus(1, 4, -1))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "import math\nfrom typing import Union\n\n\ndef focus_of_parabola(a: int, b: int, c: int) -> Union[float, list]:\n    \"\"\"\n    Calculates the focus of a parabola given the coeffecients.\n    :param a: coefficient a of the parabola.\n    :param b: coefficient b of the parabola.\n    :param c: coefficient c of the parabola.\n    :return: the focus of the parabola.\n    >>> focus_of_parabola(1, 2, 3)\n    [1.0, 3.0]\n    >>> focus_of_parabola(1, -2, 3)\n    [1.0, -3.0]\n    >>> focus_of_parabola(1, 2, -3)\n    [-1.0, 3.0]\n    >>> focus_of_parabola(1, -2, -3)\n    [-1.0, -3.0]\n    >>> focus_of_parabola(1, -2, 0)\n    [0.0, 0.0]\n    >>> focus_of_parabola(1, -2, -1)\n    [1.0, 1.0]\n    >>> focus_of_parabola(1, -2, 1)\n    [-1.0, 1.0]\n    \"\"\"\n    focus = []\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n    if b == 0:\n        raise ValueError(\"b cannot be 0\")\n    if a == 1:\n        return focus.append(c)\n    else:\n        discriminant = b**2 - 4 * a * c\n        if discriminant < 0:\n            raise ValueError(\"Discriminant must be greater than or equal to 0\")\n        else:\n            x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n            x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n            focus.append(x1)\n            focus.append"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def parabola_focus(p1, p2, p3):\n    \"\"\"\n    Return the focus of a parabola, given three points on the parabola.\n    \"\"\"\n    p1x, p1y = p1\n    p2x, p2y = p2\n    p3x, p3y = p3\n\n    # Equation of the parabola: y = a(x-h)^2 + k\n    # Equation of the line: y = mx + b\n    # Substitute the equation of the parabola into the equation of the line:\n    # a(x-h)^2 + k = mx + b\n    # a(x-h)^2 - mx + k - b = 0\n    # (a-m)x + (a(h-k)-b) = 0\n\n    # Solve for x:\n    # x = -(a(h-k)-b)/(a-m)\n\n    # Substitute x into the equation of the parabola to find k:\n    # a(x-h)^2 + k = 0\n    # a(x-h)^2 - k = 0\n    # 2a(x-h)k = -k\n    # 2ak = -k\n    # k = -1/2a\n\n    # Substitute x and k into the equation of the line to find the focus:\n    # y = mx + b\n    # y = mx - 1/2amx + 1/2amh - 1/2amk + b\n    # y = mx - 1/2amx + 1/2amh + 1/2amk - b\n    # y = mx + 1/2amh + 1/2amk - 1/2amb\n\n    # Substitute the x and y values into the equation of the parabola to check that they are on the parabola\n    # a(x-h)^2 + k = y\n    # a(x-h)^2 + 1/2amh + 1/2amk - 1/2amb = y\n    # a(x-h"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    \"\"\"\n    Find the focus of a parabola.\n\n    :param a: a coefficient of the parabola equation\n    :param b: b coefficient of the parabola equation\n    :param c: c coefficient of the parabola equation\n    :return: the focus of the parabola\n    \"\"\"\n    return (b ** 2) / (4 * a), (b * c) / (2 * a)\n\n\ndef main():\n    a = float(input('Enter a: '))\n    b = float(input('Enter b: '))\n    c = float(input('Enter c: '))\n    print(f'The focus of the parabola is {focus(a, b, c)}')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from __future__ import annotations\n\nimport math\n\n\ndef focus_of_parabola(a: float, b: float, c: float) -> tuple[float, float]:\n    \"\"\"Find the focus of a parabola.\n\n    :param a: The coefficient of x^2 in the parabola equation.\n    :param b: The coefficient of x in the parabola equation.\n    :param c: The constant term in the parabola equation.\n    :return: The x and y coordinates of the focus of the parabola.\n    \"\"\"\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        raise ValueError(\"No real roots\")\n    elif discriminant == 0:\n        focus_x = -b / (2 * a)\n        focus_y = 0\n        return focus_x, focus_y\n\n    focus_x = (-b + math.sqrt(discriminant)) / (2 * a)\n    focus_y = 0\n    return focus_x, focus_y\n\n\nif __name__ == \"__main__\":\n    print(focus_of_parabola(1, 2, 1))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def focus(p1, p2, p3):\n    \"\"\"\n    Find the focus of a parabola.\n\n    :param p1: Point 1\n    :type p1: tuple\n    :param p2: Point 2\n    :type p2: tuple\n    :param p3: Point 3\n    :type p3: tuple\n    :return: The focus\n    :rtype: tuple\n    \"\"\"\n    # find the equation of the parabola\n    a, b, c = find_coefficients(p1, p2, p3)\n\n    # find the focus\n    f = (-b / (2 * a))\n\n    return (f, f)\n\n\ndef find_coefficients(p1, p2, p3):\n    \"\"\"\n    Find the coefficients of the equation of the parabola.\n\n    :param p1: Point 1\n    :type p1: tuple\n    :param p2: Point 2\n    :type p2: tuple\n    :param p3: Point 3\n    :type p3: tuple\n    :return: Coefficients of the equation of the parabola\n    :rtype: tuple\n    \"\"\"\n    # find the equation of the parabola\n    a = (p1[1] - p2[1]) ** 2 - (p1[0] - p2[0]) ** 2\n    b = 2 * ((p1[1] - p2[1]) * (p1[1] - p3[1]) - (p1[0] - p2[0]) * (p1[0] - p3[0]))\n    c = (p1[1] - p2[1]) ** 2 - (p1[0] - p2[0]) ** 2\n\n    return (a, b, c)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def parabolaFocus(parabola):\n    a, b, c = parabola\n    return (-b / 2a, -c / a)\n\nprint(parabolaFocus([1, 2, 1]))\nprint(parabolaFocus([2, -3, 1]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def find_focus(p1, p2):\n    \"\"\"\n    >>> find_focus((0, 0), (1, 1))\n    (0.0, -0.0)\n    >>> find_focus((-3, 0), (-1, 1))\n    (-6.0, -0.0)\n    \"\"\"\n    a = p1[1] - 2*p2[1]\n    b = p2[0] - 2*p2[1]\n    c = p1[0] - 2*p2[0] + p2[1]\n    return (b**2-4*a*c)/(4*a), (-b-b**2/(4*a))/(2*a)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "from __future__ import annotations\n\nimport math\n\n\ndef focus_of_parabola(vertex: tuple[float, float], directrix: float) -> tuple[float, float]:\n    \"\"\"\n    >>> focus_of_parabola((1, 2), 1)\n    (0.0, -1.0)\n    >>> focus_of_parabola((0, 0), -1)\n    (-1.0, 1.0)\n    >>> focus_of_parabola((-1, -1), -2)\n    (-1.0, -1.0)\n    >>> focus_of_parabola((-1, 2), 1)\n    (0.0, -2.0)\n    >>> focus_of_parabola((2, 1), -2)\n    (-2.0, -1.0)\n    >>> focus_of_parabola((2, 2), 2)\n    (2.0, 0.0)\n    \"\"\"\n    x, y = vertex\n    focus = (x - (y ** 2 / directrix), -y)\n    return focus\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "from math import sqrt\nfrom unittest import TestCase\n\n\ndef focus(a, b, c):\n    if a == 0:\n        raise ValueError('a cannot be 0')\n    return (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a), (-b - sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n\nclass FocusTest(TestCase):\n\n    def test_focus(self):\n        self.assertEqual(focus(1, -1, 0), (0, 0))\n        self.assertEqual(focus(1, 0, 0), (0, 0))\n        self.assertEqual(focus(1, 1, 0), (0, 0))\n        self.assertEqual(focus(1, 0, 1), (-1, 1))\n        self.assertEqual(focus(1, 1, 1), (-1, 1))\n        self.assertEqual(focus(1, 0, 2), (-2, 2))\n        self.assertEqual(focus(1, 1, 2), (-2, 2))\n        self.assertEqual(focus(1, 0, 3), (-3, 3))\n        self.assertEqual(focus(1, 1, 3), (-3, 3))\n        self.assertEqual(focus(1, 0, 4), (-4, 4))\n        self.assertEqual(focus(1, 1, 4), (-4, 4))\n        self.assertEqual(focus(1, 0, 5), (-5, 5))\n        self.assertEqual(focus(1, 1, 5), (-5, 5))\n        self.assertEqual(focus(1, 0, 6), (-6, 6))\n        self.assertEqual(focus(1, 1, 6), (-6, 6))\n        self.assertEqual(focus(1, 0, 7), (-7, 7))\n        self.assertEqual(focus(1, 1, 7), (-7, 7))\n        self.assert"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import math\nimport unittest\n\n\ndef focus(a, b, c):\n    \"\"\"Find focus of parabola with the equation\n\n    a*x^2 + b*x + c = 0.\n\n    Parameters\n    ----------\n    a : float\n    b : float\n    c : float\n\n    Returns\n    -------\n    float\n        The focus.\n    \"\"\"\n    return -b/(2*a)\n\n\nclass TestFocus(unittest.TestCase):\n    def test_focus(self):\n        self.assertAlmostEqual(focus(1, 0, 0), 0)\n        self.assertAlmostEqual(focus(1, 1, 1), 1)\n        self.assertAlmostEqual(focus(1, 1, -1), -1)\n        self.assertAlmostEqual(focus(2, -1, 2), -2)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "import math\nimport unittest\n\n\ndef focus_of_parabola(a, b, c):\n    focus_x = (b * b - 4 * a * c) / (4 * a * a)\n    focus_y = 4 * a * a * focus_x + b * b / (4 * a)\n    return focus_x, focus_y\n\n\nclass FocusParabolaTest(unittest.TestCase):\n\n    def test_focus_of_parabola(self):\n        self.assertEqual(focus_of_parabola(1, 2, 1), (1.0, 4.0))\n        self.assertEqual(focus_of_parabola(1, 1, 1), (1.0, 1.0))\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "from sympy import Symbol, solve\n\n\ndef focus(p1, p2, p3):\n    \"\"\"Find the focus of the parabola defined by three points.\n\n    Args:\n        p1, p2, p3 (tuple): coordinates of three points\n\n    Returns:\n        tuple: coordinates of the focus of the parabola\n    \"\"\"\n    x, y = Symbol('x'), Symbol('y')\n    a = solve(\n        (x - p1[0])**2 + (y - p1[1])**2 - (p2[0] - p1[0])**2 / (p3[0] - p1[0])**2,\n        (x - p1[0])**2 + (y - p1[1])**2 - (p3[0] - p1[0])**2 / (p2[0] - p1[0])**2,\n        (x - p1[0])**2 + (y - p1[1])**2 - (p3[1] - p1[1])**2 / (p2[1] - p1[1])**2,\n        (x - p1[0])**2 + (y - p1[1])**2 - (p2[1] - p1[1])**2 / (p3[1] - p1[1])**2,\n        (x - p1[0])**2 + (y - p1[1])**2 - (p2[1] - p1[1])**2 / (p3[0] - p1[0])**2,\n        (x - p1[0])**2 + (y - p1[1])**2 - (p3[0] - p1[0])**2 / (p2[1] - p1[1])**2,\n        dict=True\n    )\n    return tuple(round(float(k), 2) for k in a[0][x])\n\n\nif __name__ == \"__main__\":\n    print(focus((0, 0), (1, 1), (1, 2)))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "import math\n\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n    if a == 0:\n        return \"a can't be equal to zero\"\n    else:\n        focus_x = (-b + math.sqrt((b**2) - (4*a*c))) / (2*a)\n        focus_y = (-b - math.sqrt((b**2) - (4*a*c))) / (2*a)\n        return focus_x, focus_y"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def focus_parabola(a, b, c):\n    \"\"\"\n    >>> focus_parabola(1, 2, 1)\n    (1, -1)\n    \"\"\"\n    x = (b ** 2 - 4 * a * c) / (4 * a ** 2)\n    y = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef focus_of_parabola(p1: Tuple[float, float], p2: Tuple[float, float], p3: Tuple[float, float]) -> Tuple[float, float]:\n    \"\"\"Find the focus of a parabola given three points on the parabola.\n\n    Args:\n        p1 (Tuple[float, float]): First point on the parabola\n        p2 (Tuple[float, float]): Second point on the parabola\n        p3 (Tuple[float, float]): Third point on the parabola\n\n    Returns:\n        Tuple[float, float]: The focus of the parabola\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    # Find the focus of the parabola\n    # Formula:\n    # (x, y) = (-b + sqrt(b**2 - 4ac) / 2a, 0)\n    #\n    # Where:\n    # a = (x2 - x1)**2 + (y2 - y1)**2\n    # b = 2(x1(y2 - y1) + x2(y1 - y2))\n    # c = x1**2 + y1**2 - x2**2 - y2**2\n\n    a = (x2 - x1)**2 + (y2 - y1)**2\n    b = 2 * (x1 * (y2 - y1) + x2 * (y1 - y2))\n    c = x1**2 + y1**2 - x2**2 - y2**2\n\n    # Find the focus\n    focus_x = -b + math.sqrt(b**2 - 4 * a * c) / (2 * a)\n    focus_y = 0\n\n    return focus_x, focus_y\n\n\nif __name__ == \"__main__\":\n\n    # Input the three points\n    p1 = float(input(\"x1: \")), float(input(\"y1: \"))\n    p2 = float("
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef focus_of_parabola(a, b, c):\n    \"\"\"\n    This function takes three coefficients of a quadratic equation\n    and returns the focus of the parabola.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The coefficient a cannot be 0\")\n\n    d = b ** 2 - 4 * a * c\n\n    if d < 0:\n        raise ValueError(\"The parabola does not exist\")\n\n    x = (b - sqrt(d)) / 2 * a\n    y = c - (b ** 2) / (4 * a)\n    focus = (x, y)\n\n    return focus"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def find_focus(p1, p2, p3):\n    \"\"\"\n    p1 and p2 are the points where the parabola opens up, and p3 is a point\n    on the parabola.\n    \"\"\"\n    # Use the formula x = (y1 - y2) / (y2 - y3)\n    x = (p1[1] - p2[1]) / (p2[1] - p3[1])\n    return x, -x * p1[0] + p1[1]\n\n\nif __name__ == '__main__':\n    print(find_focus((2, -2), (0, 0), (4, 0)))\n    print(find_focus((2, -2), (0, 0), (4, 2)))\n    print(find_focus((2, -2), (0, 0), (4, 4)))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def focus(a, b, c):\n    \"\"\"\n    >>> focus(-4, 2, 4)\n    (2, -1)\n    \"\"\"\n    x = (b**2 - 4*a*c) / (4*a**2)\n    y = -b / (2*a)\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "import math\n\ndef parabolaFocus(a,b,c):\n    focus = math.sqrt(b**2 - (4*a*c))/(2*a)\n    return focus\n\na, b, c = [int(x) for x in input(\"Enter the value of a, b, c: \").split()]\nprint(\"Focus of the parabola is: \", parabolaFocus(a,b,c))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    \"\"\"\n    >>> focus(1, 2, 1)\n    (0, 0)\n    >>> focus(1, 2, -1)\n    (0, -2)\n    >>> focus(1, -2, 1)\n    (0, 2)\n    \"\"\"\n    if a == 0:\n        return (0, 0)\n    focus_x = -(b / (2 * a))\n    focus_y = (4 * a * c - b * b) / (4 * a)\n    return focus_x, focus_y\n\n\ndef focus_alt(a, b, c):\n    \"\"\"\n    >>> focus_alt(1, 2, 1)\n    (0, 0)\n    >>> focus_alt(1, 2, -1)\n    (0, -2)\n    >>> focus_alt(1, -2, 1)\n    (0, 2)\n    \"\"\"\n    focus_x = -(b / (2 * a))\n    focus_y = (c - b * b / (4 * a))\n    return focus_x, focus_y\n\n\ndef focus_alt_2(a, b, c):\n    \"\"\"\n    >>> focus_alt_2(1, 2, 1)\n    (0, 0)\n    >>> focus_alt_2(1, 2, -1)\n    (0, -2)\n    >>> focus_alt_2(1, -2, 1)\n    (0, 2)\n    \"\"\"\n    focus_x = -(b / (2 * a))\n    focus_y = -(4 * a * c - b * b) / (4 * a)\n    return focus_x, focus_y\n\n\ndef focus_alt_3(a, b, c):\n    \"\"\"\n    >>> focus_alt_3(1, 2, 1)\n    (0, 0)\n    >>> focus_alt_3(1, 2, -1)\n    (0, -2)\n    >>> focus_alt_3(1, -2, 1)\n    (0"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef focus(a, b, c):\n    return (b**2 - 4*a*c) / (2*a**2)\n\n\ndef test_parabola_focus():\n    assert focus(2, 1, 1) == 0\n    assert focus(1, 2, 1) == -1\n    assert focus(1, 2, 3) == 1\n    assert focus(1, -2, 3) == -1\n    assert focus(-1, -2, 3) == 1\n    assert focus(2, 1, -1) == 0\n    assert focus(1, 2, -3) == 1\n    assert focus(1, -2, -3) == -1\n    assert focus(-1, -2, -3) == 1"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def focus(a,b,c):\n    \"\"\"\n    Return the coordinates of the focus of the parabola.\n    \"\"\"\n    if a == 0:\n        return False\n    else:\n        return ((-b / 2*a), (c - b**2/(4*a)))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "import math\n\n\n# Time Complexity: O(1)\n# Space Complexity: O(1)\ndef focus(a, b, c):\n    x = (-b - math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n    y = focus_y(a, b, c, x)\n    return x, y\n\n\ndef focus_y(a, b, c, x):\n    return (a * x**2) + (b * x) + c\n\n\ndef main():\n    a = float(input(\"Enter the a: \"))\n    b = float(input(\"Enter the b: \"))\n    c = float(input(\"Enter the c: \"))\n    x, y = focus(a, b, c)\n    print(f\"Focus: {x}, {y}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus(vertex, directrix):\n    focus_x = (directrix + vertex[1]) / 2\n    focus_y = directrix * math.sqrt(1 - (focus_x / vertex[0]) ** 2)\n    return focus_x, focus_y\n\n\ndef test():\n    assert focus((0, 0), 1) == (0, 0)\n    assert focus((5, 0), 1) == (5, 0)\n    assert focus((10, 0), 1) == (5, 0)\n    assert focus((10, 1), 1) == (5, 1)\n    assert focus((10, -1), 1) == (5, -1)\n    assert focus((10, -1), 2) == (5, -2)\n    assert focus((10, -1), 3) == (5, -3)\n    assert focus((10, -1), 4) == (5, -4)\n    assert focus((10, -1), 5) == (5, -5)\n    assert focus((10, -1), 6) == (5, -6)\n    assert focus((10, -1), 7) == (5, -7)\n    assert focus((10, -1), 8) == (5, -8)\n    assert focus((10, -1), 9) == (5, -9)\n    assert focus((10, -1), 10) == (5, -10)\n    assert focus((10, -1), 11) == (5, -11)\n    assert focus((10, -1), 12) == (5, -12)\n    assert focus((10, -1), 13) == (5, -13)\n    assert focus((10, -1), 14) == (5, -14)\n    assert focus((10, -1), 15) == (5, -15)\n    assert focus((10, -1), 16) == (5, -16)\n    assert focus"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def focus_of_parabola(a, b, c):\n    \"\"\"\n    Calculates the focus of a parabola.\n\n    Args:\n        a (float): coefficient of x^2\n        b (float): coefficient of x\n        c (float): coefficient of constant term\n\n    Returns:\n        (float, float): x and y coordinates of the focus\n    \"\"\"\n    y_focus = -b / (2 * a)\n    x_focus = -c / (2 * a)\n    return x_focus, y_focus"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "import math\n\n\ndef focus(a, b, c):\n    \"\"\"Find the focus of a parabola.\n\n    Focus is the point where the tangent lines to the parabola at its\n    vertex intersect.\n\n    Args:\n        a (float): Parabola coefficient\n        b (float): Parabola coefficient\n        c (float): Parabola coefficient\n\n    Returns:\n        float: Focus of the parabola\n    \"\"\"\n    return (b * b - 4 * a * c) / (4 * a)\n\n\ndef parabola(a, b, c, x):\n    \"\"\"Evaluate parabola at point x.\n\n    Args:\n        a (float): Parabola coefficient\n        b (float): Parabola coefficient\n        c (float): Parabola coefficient\n        x (float): Point to evaluate\n\n    Returns:\n        float: Value of the parabola at point x\n    \"\"\"\n    return a * x * x + b * x + c\n\n\ndef parabola_derivative(a, b, c, x):\n    \"\"\"Evaluate the derivative of the parabola at point x.\n\n    Args:\n        a (float): Parabola coefficient\n        b (float): Parabola coefficient\n        c (float): Parabola coefficient\n        x (float): Point to evaluate\n\n    Returns:\n        float: Value of the derivative of the parabola at point x\n    \"\"\"\n    return 2 * a * x + b\n\n\ndef parabola_tangent(a, b, c, x):\n    \"\"\"Evaluate the tangent to the parabola at point x.\n\n    Args:\n        a (float): Parabola coefficient\n        b (float): Parabola coefficient\n        c (float): Parabola coefficient\n        x (float): Point to evaluate\n\n    Returns:\n        float: Value of the tangent to the parabola at point x\n    \"\"\"\n    return a * x * x + b * x + c - x\n\n\ndef parabola_vertex(a, b, c):\n    \"\"\"Find the vertex of a parabola.\n\n    Args"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def focus_of_parabola(a, b, c):\n    \"\"\"\n    a: int or float\n    b: int or float\n    c: int or float\n    \"\"\"\n    return (b * b) - (4 * a * c)\n\nprint(focus_of_parabola(2, 1, 1)) # 1\nprint(focus_of_parabola(2, 1, 2)) # -1\nprint(focus_of_parabola(2, 2, 1)) # -2\nprint(focus_of_parabola(2, 2, 2)) # 0"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "import math\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef focus_of_parabola(a, b, c):\n    return (b ** 2) - (4 * a * c), 2 * a\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef focus_of_parabola_with_math(a, b, c):\n    return (b ** 2) - (4 * a * c), 2 * a\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef focus_of_parabola_with_sympy(a, b, c):\n    import sympy\n    x, y = sympy.symbols('x y')\n    return sympy.solve([x ** 2 + y ** 2 - (b ** 2) / (4 * a),\n                        -2 * a * x - b - 2 * y], (x, y))\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef focus_of_parabola_with_sympy_solve(a, b, c):\n    import sympy\n    return sympy.solve([x ** 2 + y ** 2 - (b ** 2) / (4 * a),\n                        -2 * a * x - b - 2 * y], (x, y))\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef focus_of_parabola_with_sympy_solve_lambdify(a, b, c):\n    import sympy\n    x, y = sympy.symbols('x y')\n    return sympy.lambdify((x, y),\n                          sympy.solve([x ** 2 + y ** 2 - (b ** 2) / (4 * a),\n                                       -2 * a * x - b - 2 * y], (x, y)))(0, 0)\n\n\nif __name__ == '__main__':\n    a, b, c = 1, 1, 1\n    assert"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from math import inf\n\n\ndef parabola_focus(vertex, directrix):\n    \"\"\"\n    vertex: tuple\n    directrix: float\n    \"\"\"\n\n    a, b, c = vertex\n    return (directrix - b) / (2 * a)\n\n\ndef test_parabola_focus():\n    \"\"\"\n    vertex: (3, 0, 4)\n    directrix: 2\n    focus: (2, 2)\n    \"\"\"\n\n    assert parabola_focus((3, 0, 4), 2) == (2, 2)\n\n\ndef test_parabola_focus_with_negative_directrix():\n    \"\"\"\n    vertex: (3, 0, 4)\n    directrix: -2\n    focus: (0, -2)\n    \"\"\"\n\n    assert parabola_focus((3, 0, 4), -2) == (0, -2)\n\n\ndef test_parabola_focus_with_zero_vertex():\n    \"\"\"\n    vertex: (0, 0, 0)\n    directrix: 1\n    focus: (1, 0)\n    \"\"\"\n\n    assert parabola_focus((0, 0, 0), 1) == (1, 0)\n\n\ndef test_parabola_focus_with_zero_directrix():\n    \"\"\"\n    vertex: (1, 0, 1)\n    directrix: 0\n    focus: (inf, inf)\n    \"\"\"\n\n    assert parabola_focus((1, 0, 1), 0) == (inf, inf)\n\n\ndef test_parabola_focus_with_zero_vertex_and_directrix():\n    \"\"\"\n    vertex: (0, 0, 0)\n    directrix: 0\n    focus: (inf, inf)\n    \"\"\"\n\n    assert parabola_focus((0, 0, 0), 0) == (inf, inf)\n\n\ndef test_parabola_focus_with_directrix_equal_to_vertex_y():\n    \"\"\"\n    vertex: (3, 4,"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef focus_of_parabola(\n    a: float,\n    b: float,\n    c: float,\n) -> tuple[float, float] | None:\n    \"\"\"Find the focus of a parabola.\n\n    :param a: The coefficient of x.\n    :param b: The coefficient of y.\n    :param c: The coefficient of z.\n    :return: The focus of the parabola.\n    \"\"\"\n    if a == 0:\n        return None\n\n    x_focus = -b / (2 * a)\n    y_focus = 0\n\n    return x_focus, y_focus\n\n\ndef main() -> None:\n    a, b, c = (int(x) for x in input(\"Enter a, b, c: \").split())\n    result = focus_of_parabola(a, b, c)\n    if result is None:\n        print(\"Not possible\")\n    else:\n        print(f\"The focus is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef focus_of_parabola(a: float, b: float, c: float) -> tuple[float, float]:\n    \"\"\"\n    Focus of a parabola is the point from where the tangent is perpendicular\n    to the directrix.\n\n    Formula:\n    Focus = ( (2*A*C) +- sqrt(4*A^2*C^2 - 4*A^2*B^2) ) / 2*A^2\n\n    >>> focus_of_parabola(1, 1, 1)\n    (-1.0, 1.0)\n    >>> focus_of_parabola(1, 1, 2)\n    (-3.0, 1.0)\n    >>> focus_of_parabola(1, 2, 1)\n    (-1.0, 2.0)\n    >>> focus_of_parabola(2, 1, 1)\n    (-2.0, 1.0)\n    >>> focus_of_parabola(1, 1, -1)\n    (1.0, -1.0)\n    >>> focus_of_parabola(1, -1, 1)\n    (1.0, -1.0)\n    >>> focus_of_parabola(-1, 1, 1)\n    (1.0, 1.0)\n    >>> focus_of_parabola(1, 1, 0)\n\n    >>> focus_of_parabola(1, 0, 1)\n\n    >>> focus_of_parabola(1, 0, 0)\n\n    >>> focus_of_parabola(0, 1, 1)\n\n    >>> focus_of_parabola(0, 1, 0)\n\n    >>> focus_of_parabola(0, 0, 1)\n    \"\"\"\n    if a == 0:\n        return ()\n    if b == 0:\n        return ()\n    if c == 0:\n        return ()\n\n    if a <"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import math\n\n\ndef parabola_focus(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3 are the coordinates of the three points on the parabola.\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    x_mid = (x1 + x2 + x3) / 3\n    y_mid = (y1 + y2 + y3) / 3\n\n    # Calculate the focal distance\n    distance = math.sqrt(math.pow(x_mid, 2) + math.pow(y_mid, 2))\n\n    # Calculate the focus\n    x_focus = x_mid - distance\n    y_focus = y_mid + distance\n\n    return (x_focus, y_focus)\n\n\n# p1 = (1, 1)\n# p2 = (2, 4)\n# p3 = (5, 4)\n# print(parabola_focus(p1, p2, p3))\n\n\n# Test your function with the following points:\n#\n# p1 = (1, 2)\n# p2 = (3, 10)\n# p3 = (6, 14)\n#\n# p1 = (1, 2)\n# p2 = (3, 4)\n# p3 = (4, 5)\n\n# p1 = (3, 4)\n# p2 = (1, 2)\n# p3 = (4, 5)\n\np1 = (1, 2)\np2 = (3, 4)\np3 = (4, 5)\n\nprint(parabola_focus(p1, p2, p3))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def focus(a,b,c):\n    # Your code here\n    # a = 1\n    # b = 0\n    # c = 1\n    # print(a,b,c)\n    # focus = (((b ** 2) - (4 * a * c)) / (2 * a))\n    # print(focus)\n    # focus = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    # print(focus)\n    # focus = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    # print(focus)\n    focus = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return focus\n\n\nprint(focus(1,0,1))\nprint(focus(1,1,1))\nprint(focus(1,0,0))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef focus_of_parabola(\n    vertex: tuple[float, float],\n    directrix: float | None = None,\n    focus: tuple[float, float] | None = None,\n) -> tuple[float, float]:\n    \"\"\"Finds the focus of a parabola.\n\n    Parameters:\n    vertex: The coordinates of the vertex of the parabola.\n    directrix: The value of the y-coordinate of the directrix of the parabola.\n    focus: The coordinates of the focus of the parabola.\n\n    Returns:\n    The coordinates of the focus of the parabola.\n\n    Raises:\n    ValueError: if neither focus nor directrix is given.\n    \"\"\"\n    if focus is not None:\n        return focus\n    if directrix is not None:\n        return (vertex[0], directrix)\n    raise ValueError(\"Either focus or directrix must be given.\")\n\n\ndef main():\n    vertex = (0, 0)\n    focus = focus_of_parabola(vertex)\n    print(focus)\n\n    focus = focus_of_parabola(vertex, directrix=5)\n    print(focus)\n\n    focus = focus_of_parabola(vertex, focus=(1, 1))\n    print(focus)\n\n    focus = focus_of_parabola(vertex, focus=(1, 1), directrix=5)\n    print(focus)\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}