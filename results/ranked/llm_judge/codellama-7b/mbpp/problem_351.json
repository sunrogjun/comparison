{
  "timestamp": "2025-09-15T00:57:20.135639",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 351,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(l):\n    \"\"\"\n    Returns the item with maximum occurrences in a given list.\n    >>> max_occurrence([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    5\n    \"\"\"\n    return Counter(l).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(a):\n    \"\"\"\n    This function takes a list as a parameter and returns the item with maximum occurrences in the list.\n    >>> max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def max_occurrence(list_of_items):\n    \"\"\"\n    >>> max_occurrence([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10])\n    1\n    \"\"\"\n    return max(set(list_of_items), key=list_of_items.count)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(arr):\n    return Counter(arr).most_common(1)[0][0]\n\n\ndef main():\n    print(\"Max occurrence of items in the list\")\n    print(max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def max_occurence(list1):\n    max_item = 0\n    max_count = 0\n    for i in list1:\n        if list1.count(i) > max_count:\n            max_count = list1.count(i)\n            max_item = i\n    return max_item\n\nlist1 = [1,1,2,3,4,5,6,6,7,8,8,9]\nprint(max_occurence(list1))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def max_occur(l):\n    max_count = 0\n    max_item = None\n    count = 0\n    for i in range(0, len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] == l[j]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_item = l[i]\n        count = 0\n    return max_item\n\n\nprint(max_occur([1, 2, 3, 4, 5, 6, 2, 4, 2, 4, 5, 7, 8, 9, 10, 11, 3, 2, 4, 12, 13, 4, 3, 2, 1, 5, 6, 7, 8, 3, 1, 3, 5, 7, 9, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def max_occurrences(lst):\n    \"\"\"\n    Returns the item with maximum occurrences in a given list.\n\n    >>> max_occurrences([1, 2, 3, 1, 4, 5, 2, 1, 3, 2, 1])\n    [1]\n    >>> max_occurrences([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])\n    [5, 4, 3, 2, 1]\n    >>> max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    []\n    \"\"\"\n    # we can use a dictionary to store the items and their count\n    # after that we can loop through the dictionary and find the item with maximum occurrence\n    d = {}\n    for item in lst:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    max_item = max(d, key=d.get)\n    max_occurrence = d[max_item]\n    max_occurrences_list = []\n    for key, value in d.items():\n        if value == max_occurrence:\n            max_occurrences_list.append(key)\n    return max_occurrences_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(nums):\n    \"\"\"\n    >>> max_occurrences([1, 2, 3, 4, 1, 2, 3, 5, 6, 7, 8, 9, 1, 2, 3, 5, 6, 7, 8, 9, 1, 2, 3, 5, 6, 7, 8, 9])\n    3\n    \"\"\"\n    return Counter(nums).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def max_occur(l):\n    \"\"\"\n    >>> max_occur([1,2,3,2,1,2,3,4,5,6])\n    2\n    >>> max_occur([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n    20\n    >>> max_occur([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def max_occur(list):\n    count = 0\n    max_num = list[0]\n\n    for i in range(0, len(list)):\n        if list[i] == max_num:\n            count += 1\n        elif list[i] > max_num:\n            count = 1\n            max_num = list[i]\n        else:\n            count += 1\n\n    return max_num, count\n\nprint(max_occur([1,2,3,4,5,6,6,6,6,6,6,6,6,6,7,8,9,10,11]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def max_occurrence(arr):\n    max_item = arr[0]\n    max_count = 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_item = arr[i]\n        count = 0\n    return max_item\n\n\narr = [1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 2, 2, 2, 2]\nprint(max_occurrence(arr))"
    },
    {
      "rank": 12,
      "score": 9.370583536698913,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(lst):\n    return Counter(lst).most_common(1)[0][0]\n\n\nprint(max_occurrences([1, 2, 1, 2, 1, 3, 2, 1]))\nprint(max_occurrences([1, 2, 1, 2, 1, 3, 2, 1, 2, 1]))"
    },
    {
      "rank": 13,
      "score": 9.234050852198141,
      "candidate": "def max_occurrences(list_1):\n    max_occurrence = 0\n    for item in list_1:\n        if list_1.count(item) > max_occurrence:\n            max_occurrence = list_1.count(item)\n            max_item = item\n    return max_item\n\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 1, 1, 1, 1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 14,
      "score": 9.226766272351448,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(arr):\n    d = dict(Counter(arr))\n    max_val = 0\n    max_val_key = None\n\n    for key, value in d.items():\n        if value > max_val:\n            max_val = value\n            max_val_key = key\n\n    return max_val_key, max_val\n\n\ndef main():\n    arr = [1, 2, 2, 3, 3, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9]\n    print(max_occurrence(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 9.21346272767743,
      "candidate": "def max_occurrence(lst):\n    \"\"\"\n    This function returns the item with maximum occurrence in a given list\n    >>> max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    '1'\n    >>> max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    '1'\n    \"\"\"\n    return max(lst, key=lst.count)\n\n\ndef main():\n    \"\"\"\n    This is the main function which we use to read input from users\n    \"\"\"\n    print(\"--------------------This is the max_occurrence function--------------------\")\n    lst = [\n        int(i) for i in input(\"Enter a list of numbers (separated by ,): \").split(\",\")\n    ]\n    print(f\"The number with maximum occurrence is {max_occurrence(lst)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 9.205959372648458,
      "candidate": "def max_occurrence(lst):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n\n    >>> max_occurrence([1, 2, 1, 2, 2, 2, 1, 2, 2, 2])\n    2\n    >>> max_occurrence([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])\n    4\n    >>> max_occurrence([1, 1, 1, 1, 1])\n    1\n    \"\"\"\n    return max(set(lst), key=lst.count)\n\n\ndef main():\n    \"\"\"\n    Test max_occurrence function\n    >>> max_occurrence([1, 2, 1, 2, 2, 2, 1, 2, 2, 2])\n    2\n    >>> max_occurrence([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])\n    4\n    >>> max_occurrence([1, 1, 1, 1, 1])\n    1\n    \"\"\"\n    print(max_occurrence([1, 2, 1, 2, 2, 2, 1, 2, 2, 2]))\n    print(max_occurrence([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]))\n    print(max_occurrence([1, 1, 1, 1, 1]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 17,
      "score": 9.177268828905222,
      "candidate": "from collections import Counter\n\n\ndef max_occur(l):\n    c = Counter(l)\n    return max(c, key=c.get)\n\n\ndef main():\n    l = [1, 3, 2, 1, 1, 4, 5, 2, 1, 2, 3, 1]\n    print(f\"Maximum occurring item in the list {l} is {max_occur(l)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 9.122564458729856,
      "candidate": "from collections import Counter\n\ndef find_max_occurrence(a):\n    a = Counter(a)\n    return a.most_common(1)[0][0]\n\na = [1,2,2,3,3,3,3,4]\nprint(find_max_occurrence(a))"
    },
    {
      "rank": 19,
      "score": 8.973005557553902,
      "candidate": "from collections import Counter\n\n\ndef max_occurence(input_list):\n    # Counting each item in the list\n    count_dict = Counter(input_list)\n    # Getting the item with max occurrences\n    max_item = max(count_dict, key=count_dict.get)\n    return max_item\n\n\nprint(max_occurence([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]))"
    },
    {
      "rank": 20,
      "score": 8.95994420569242,
      "candidate": "def max_occurence(ls):\n    max_item = ls[0]\n    max_count = 1\n    for i in range(1, len(ls)):\n        if ls[i] == max_item:\n            max_count += 1\n        elif ls[i] != max_item and max_count < 2:\n            max_item = ls[i]\n            max_count = 1\n        elif ls[i] != max_item and max_count >= 2:\n            continue\n    return max_item, max_count\n\n\nls = [1, 2, 3, 3, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4]\nprint(max_occurence(ls))"
    },
    {
      "rank": 21,
      "score": 8.946210893390457,
      "candidate": "from collections import Counter\n\n\ndef find_max_occurence(input_list):\n    counter = Counter(input_list)\n    return counter.most_common(1)[0][0]\n\n\ndef main():\n    list_1 = [1, 1, 2, 3, 4, 5, 2, 1]\n    print(find_max_occurence(list_1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 8.932217008005624,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(a):\n    return Counter(a).most_common()[0][0]\n\n\ndef main():\n    a = [1, 2, 3, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n    print(max_occurrences(a))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 8.910084504002544,
      "candidate": "from collections import Counter\n\n\ndef find_max_occurrences(input_list):\n    return Counter(input_list).most_common(1)[0][0]\n\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list_2 = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"Input list:\", list_1)\n    print(\"Item with maximum occurrences:\", find_max_occurrences(list_1))\n    print(\"Input list:\", list_2)\n    print(\"Item with maximum occurrences:\", find_max_occurrences(list_2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 8.85571690049604,
      "candidate": "def max_occur(input_list):\n    \"\"\"\n    Finds the item with maximum occurrences in a given list.\n    \"\"\"\n    if not input_list:\n        return None\n\n    max_item = None\n    max_count = 0\n\n    for item in input_list:\n        if input_list.count(item) > max_count:\n            max_count = input_list.count(item)\n            max_item = item\n\n    return max_item\n\n\nprint(max_occur([1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]))"
    },
    {
      "rank": 25,
      "score": 8.855395696632057,
      "candidate": "from collections import Counter\n\n\ndef max_occur(input_list):\n    return Counter(input_list).most_common(1)[0][0]\n\n\ndef main():\n    list1 = [1, 3, 4, 5, 7, 8, 3, 4, 5, 6, 8, 9, 1]\n    print(f\"The list is: {list1}\")\n    print(f\"The item with the max occurrence is: {max_occur(list1)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 8.850707355641543,
      "candidate": "def find_max_occurrence(input_list):\n    max_occurence = 0\n    max_occurence_item = None\n    for item in input_list:\n        if input_list.count(item) > max_occurence:\n            max_occurence = input_list.count(item)\n            max_occurence_item = item\n    return max_occurence_item\n\n\ndef main():\n    list1 = [1, 2, 4, 5, 6, 2, 4, 5, 6, 7, 8, 9]\n    list2 = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    list3 = [1, 2, 2, 3, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8]\n    print(find_max_occurrence(list1))\n    print(find_max_occurrence(list2))\n    print(find_max_occurrence(list3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 8.8281618090209,
      "candidate": "from collections import Counter\n\n\ndef max_occur(arr):\n    counter = Counter(arr)\n    max_count = 0\n    max_elem = 0\n    for elem in counter:\n        if counter[elem] > max_count:\n            max_count = counter[elem]\n            max_elem = elem\n    return max_elem\n\n\nprint(max_occur([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]))"
    },
    {
      "rank": 28,
      "score": 8.81367773444215,
      "candidate": "from collections import Counter\n\n\ndef max_occur(lst):\n    max_occurence = 0\n    max_item = 0\n    count = Counter(lst)\n    for item in count:\n        if count[item] > max_occurence:\n            max_occurence = count[item]\n            max_item = item\n    return max_item\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 1, 2, 2, 2, 2, 2, 2, 3]\n    print(\"List: \", list1)\n    print(\"Maximum occurence of an element: \", max_occur(list1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 8.76828871349479,
      "candidate": "def max_occurrence(arr):\n    max_count = 0\n    max_val = None\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n            if d[i] > max_count:\n                max_count = d[i]\n                max_val = i\n        else:\n            d[i] = 1\n    return max_val\n\n\nprint(max_occurrence([1, 2, 1, 3, 3, 2, 1]))"
    },
    {
      "rank": 30,
      "score": 8.750282588864879,
      "candidate": "from collections import Counter\n\n\ndef find_max_occurrence(a):\n    c = Counter(a)\n    max_count = 0\n    max_item = None\n\n    for item, count in c.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item\n\n\ndef main():\n    list_a = [1, 3, 4, 5, 2, 7, 3, 2, 8, 3]\n    print(\"Maximum occuring item:\", find_max_occurrence(list_a))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 8.715724466237427,
      "candidate": "def max_occurence(items: list) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    item_max_occurence = items[0]\n    item_max_occurence_count = 1\n\n    for item in items[1:]:\n        if item_max_occurence_count == 0:\n            item_max_occurence = item\n            item_max_occurence_count = 1\n        else:\n            if item_max_occurence == item:\n                item_max_occurence_count += 1\n            else:\n                item_max_occurence_count -= 1\n\n    return item_max_occurence\n\n\nprint(max_occurence([1, 2, 3, 1, 3, 4, 3, 3, 1]))\nprint(max_occurence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_occurence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))"
    },
    {
      "rank": 32,
      "score": 8.692801520950061,
      "candidate": "from collections import Counter\n\n\ndef max_occur(arr):\n    return Counter(arr).most_common(1)[0][0]\n\n\ndef main():\n    arr = [1, 2, 1, 2, 1, 2, 3]\n    assert max_occur(arr) == 2\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.632293453617281,
      "candidate": "def max_occurence(lst):\n    return max(set(lst), key=lst.count)\n\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 1, 4, 5, 1, 2, 3, 5, 6, 7, 8, 8, 8, 8, 2, 3, 1, 1, 1, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9]\n    print(max_occurence(lst))"
    },
    {
      "rank": 34,
      "score": 8.625262456968262,
      "candidate": "def max_occur(lst):\n    return max(lst, key=lst.count)\n\nprint(max_occur([1, 2, 1, 4, 5, 1, 4, 2, 3, 2, 1]))"
    },
    {
      "rank": 35,
      "score": 8.625142247198651,
      "candidate": "def max_occur(lst):\n    count = 0\n    val = lst[0]\n    for i in lst:\n        c = lst.count(i)\n        if c > count:\n            count = c\n            val = i\n    return val\n\nlst = [1, 1, 1, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 16, 17, 17, 18, 18, 19, 20]\n\nprint(max_occur(lst))"
    },
    {
      "rank": 36,
      "score": 8.623000730200317,
      "candidate": "from collections import Counter\n\ndef max_occurence(items):\n    \"\"\"\n    Return the item with maximum occurrences in a given list\n    \"\"\"\n    count = Counter(items)\n    return count.most_common(1)[0][0]"
    },
    {
      "rank": 37,
      "score": 8.616253589228675,
      "candidate": "from collections import Counter\n\n\ndef max_occurence(list):\n    count = Counter(list)\n    return max(count, key=count.get)\n\n\nprint(max_occurence([1, 2, 3, 2, 3, 4, 1, 2, 4, 2, 3]))"
    },
    {
      "rank": 38,
      "score": 8.610076160146226,
      "candidate": "def max_occurrence(lst):\n    from collections import Counter\n    c = Counter(lst)\n    return max(c.values())\n\nprint(max_occurrence([1, 2, 3, 3, 3, 2, 1]))"
    },
    {
      "rank": 39,
      "score": 8.606486429141842,
      "candidate": "def find_max_occurence(list):\n    \"\"\"\n    Return the item with maximum occurrences in a list.\n    \"\"\"\n    # create a dictionary to store the count of items in the list\n    count = {}\n\n    # traverse through the list and count the occurences\n    for item in list:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n\n    # find the item with the maximum occurence\n    max_occur = 0\n    max_item = None\n    for key, value in count.items():\n        if value > max_occur:\n            max_occur = value\n            max_item = key\n\n    return max_item\n\n\ndef main():\n    print(\"Maximum occurring item:\", find_max_occurence([1, 2, 3, 4, 2, 3, 1, 3, 5, 3]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.60156811074208,
      "candidate": "def max_occurence(list_of_nums):\n    occurences = {}\n    for num in list_of_nums:\n        if num not in occurences:\n            occurences[num] = 1\n        else:\n            occurences[num] += 1\n\n    max_num = None\n    max_occur = 0\n    for num, occur in occurences.items():\n        if occur > max_occur:\n            max_occur = occur\n            max_num = num\n    return max_num\n\n\nprint(max_occurence([1, 1, 1, 2, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1, 2, 2]))"
    },
    {
      "rank": 41,
      "score": 8.565425580227462,
      "candidate": "from collections import Counter\n\ndef max_occurrence(list_items):\n    \"\"\"\n    This function finds the item with maximum occurrences in a given list.\n    \"\"\"\n    counter_items = Counter(list_items)\n    return max(counter_items, key=counter_items.get)"
    },
    {
      "rank": 42,
      "score": 8.548876241946822,
      "candidate": "def max_occurrence(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    freq: dict = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    return max(freq, key=freq.get)\n\n\nif __name__ == \"__main__\":\n    print(max_occurrence([1, 2, 1, 2, 1, 3, 2, 1, 4, 2, 1, 3, 2, 1, 5]))"
    },
    {
      "rank": 43,
      "score": 8.542875062379007,
      "candidate": "def max_occurrence(l):\n    count_dict = {}\n    for i in l:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    print(count_dict)\n    max_value = max(count_dict.values())\n    max_key = [key for key, value in count_dict.items() if value == max_value]\n    print(max_key[0])\n    return max_key[0]\n\n\nif __name__ == \"__main__\":\n    max_occurrence([1,1,2,2,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,6])"
    },
    {
      "rank": 44,
      "score": 8.53012858503943,
      "candidate": "from collections import Counter\n\n\ndef max_occurence(items):\n    c = Counter(items)\n    return max(c, key=c.get)\n\n\ndef main():\n    print(max_occurence([1, 2, 3, 3, 4, 4, 4, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.499905739299377,
      "candidate": "from collections import Counter\n\ndef max_occurrences(list_of_nums):\n    \"\"\"\n    Return the item with the maximum occurrences in a given list.\n    \"\"\"\n    if list_of_nums is None:\n        raise TypeError('list_of_nums cannot be None')\n    if not isinstance(list_of_nums, list):\n        raise TypeError('list_of_nums must be of type list')\n    if len(list_of_nums) == 0:\n        raise ValueError('list_of_nums cannot be empty')\n    if not all(isinstance(item, (int, float)) for item in list_of_nums):\n        raise TypeError('list_of_nums must contain only numbers')\n    counter = Counter(list_of_nums)\n    return counter.most_common(1)[0][0]"
    },
    {
      "rank": 46,
      "score": 8.490324832712195,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(nums):\n    \"\"\"\n    :param nums: list - list of integers\n    :return: int/str - maximum occurring element\n    \"\"\"\n    return Counter(nums).most_common(1)[0][0]\n\n\nprint(max_occurrences([1, 3, 3, 2, 3, 1, 3, 4]))"
    },
    {
      "rank": 47,
      "score": 8.48796797856353,
      "candidate": "from collections import Counter\n\n\ndef item_with_max_occurrence(arr):\n    counter = Counter(arr)\n    return counter.most_common(1)[0][0]\n\n\nprint(item_with_max_occurrence([1, 2, 3, 2, 3, 2, 3, 4, 1, 5]))"
    },
    {
      "rank": 48,
      "score": 8.478208546788407,
      "candidate": "def max_occurrence(data):\n    max_count = 0\n    max_item = None\n\n    for item in data:\n        count = data.count(item)\n\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item\n\n\ndef main():\n    data = [1, 2, 3, 4, 2, 3, 1, 2, 3, 4, 2, 3, 1, 2, 3, 4]\n\n    print(\"Data: %s\" % str(data))\n    print(\"Max occurrence: %s\" % str(max_occurrence(data)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.437695832075478,
      "candidate": "def max_occur(arr):\n    if len(arr) == 0:\n        return None\n\n    max_count = 1\n    max_item = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            max_count += 1\n        else:\n            max_count = 1\n        if max_count > max_count:\n            max_item = arr[i]\n\n    return max_item\n\n\nprint(max_occur([1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 8]))"
    },
    {
      "rank": 50,
      "score": 8.426531424889468,
      "candidate": "from collections import Counter\n\n\ndef find_max_occurrence(input_list):\n    return Counter(input_list).most_common(1)[0][0]\n\n\ndef main():\n    list1 = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 10]\n    print(\"Input list is:\", list1)\n    print(\"Item with maximum occurrences is:\", find_max_occurrence(list1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.408439383654278,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(arr):\n    c = Counter(arr)\n    return max(c.items(), key=lambda x: x[1])[0]\n\n\nprint(max_occurrence([1, 2, 2, 3, 3, 3, 4]))"
    },
    {
      "rank": 52,
      "score": 8.386620303250325,
      "candidate": "def find_max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n\n    :param lst: list to find maximum occurrences\n    :return: item with maximum occurrences\n\n    >>> find_max_occurrences([1, 2, 2, 3, 3, 3, 4, 5, 5])\n    3\n    >>> find_max_occurrences([1, 2, 3, 4, 5])\n    1\n    \"\"\"\n    return max(set(lst), key=lst.count)\n\n\ndef main():\n    \"\"\"\n    Test find_max_occurrences function.\n    \"\"\"\n    assert find_max_occurrences([1, 2, 2, 3, 3, 3, 4, 5, 5]) == 3\n    assert find_max_occurrences([1, 2, 3, 4, 5]) == 1\n    print(\"Passed.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.375312293858853,
      "candidate": "def find_max_occurences(lst):\n    max_occur = 0\n    for i in lst:\n        if lst.count(i) > max_occur:\n            max_occur = lst.count(i)\n            max_occur_item = i\n    return max_occur_item\n\n\nprint(find_max_occurences([1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 54,
      "score": 8.351614956112536,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(arr):\n    c = Counter(arr)\n    max_occur = c.most_common(1)\n    return max_occur[0][0]\n\n\nprint(max_occurrence([2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5]))"
    },
    {
      "rank": 55,
      "score": 8.334608500525688,
      "candidate": "from collections import Counter\n\n\ndef find_max_occurrence(input_list):\n    if not input_list:\n        return None\n    count_dict = Counter(input_list)\n    max_count = max(count_dict.values())\n    if max_count == 1:\n        return None\n    result = [k for k, v in count_dict.items() if v == max_count]\n    return result\n\n\ndef main():\n    print(find_max_occurrence([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]))\n    print(find_max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.331556294201176,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(arr):\n    return Counter(arr).most_common(1)[0][0]\n\n\nprint(max_occurrence([1, 1, 2, 3, 2]))"
    },
    {
      "rank": 57,
      "score": 8.327375965969855,
      "candidate": "from collections import Counter\n\n\ndef find_max_occur(input_list):\n    counter = Counter(input_list)\n    return counter.most_common(1)[0][0]\n\n\nprint(find_max_occur([1, 1, 2, 2, 3, 3, 3, 4]))"
    },
    {
      "rank": 58,
      "score": 8.327367757082776,
      "candidate": "def max_occur(list):\n    d = {}\n    for i in list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    print(d)\n    return max(d, key = d.get)\n\nprint(max_occur([1, 2, 3, 4, 1, 5, 1, 2, 1, 1, 1, 2, 1]))"
    },
    {
      "rank": 59,
      "score": 8.298597569547805,
      "candidate": "def max_occurrence(list_num):\n    return max(set(list_num), key=list_num.count)"
    },
    {
      "rank": 60,
      "score": 8.294940769211511,
      "candidate": "def max_occurence(list):\n    max_item = list[0]\n    max_count = 0\n\n    for item in list:\n        if list.count(item) > max_count:\n            max_count = list.count(item)\n            max_item = item\n\n    return max_item\n\ndef main():\n    list = [1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    print(max_occurence(list))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.2938925966498,
      "candidate": "from collections import Counter\n\n\ndef max_occurence(lst: list):\n    return Counter(lst).most_common(1)[0][0]\n\n\nprint(max_occurence([1, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4]))"
    },
    {
      "rank": 62,
      "score": 8.289838256518838,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(arr):\n    return Counter(arr).most_common(1)[0][0]\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8]\n    print(\"Original array:\", arr)\n    print(\"Item with maximum occurrence in the array:\", max_occurrence(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 63,
      "score": 8.251903304236286,
      "candidate": "def max_occur(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)\n\n\nprint(max_occur([1, 2, 3, 2, 4, 2, 3, 5, 4, 6, 4, 7, 2, 3]))"
    },
    {
      "rank": 64,
      "score": 8.214125058964552,
      "candidate": "def max_occurrence(input_list):\n    \"\"\"\n    Return the item with maximum occurrences in a given list.\n\n    >>> max_occurrence([1, 2, 3, 1, 2, 3, 1, 2, 3, 1])\n    1\n    >>> max_occurrence(['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a'])\n    'a'\n    >>> max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    Traceback (most recent call last):\n    ...\n    ValueError: No item found in list\n    \"\"\"\n    if not input_list:\n        raise ValueError(\"No item found in list\")\n    item_count_dict = dict()\n    for item in input_list:\n        if item in item_count_dict:\n            item_count_dict[item] += 1\n        else:\n            item_count_dict[item] = 1\n    return max(item_count_dict, key=item_count_dict.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.212735598038213,
      "candidate": "from collections import Counter\n\n\ndef get_max_occurring_item(list_of_items):\n    return Counter(list_of_items).most_common(1)[0][0]\n\n\nprint(get_max_occurring_item([1, 2, 2, 2, 3, 3, 4, 5]))"
    },
    {
      "rank": 66,
      "score": 8.211579567659316,
      "candidate": "def max_occurrences(li):\n    max_li = [0] * len(li)\n    max_li[0] = li[0]\n\n    for i in range(1, len(li)):\n        if li[i] == li[i - 1]:\n            max_li[i] = max_li[i - 1] + 1\n        else:\n            max_li[i] = 1\n\n    return max_li\n\n\ndef main():\n    li = [1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6]\n    print(f\"Max occurrences of items in {li} is {max_occurrences(li)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 8.209707251476969,
      "candidate": "def max_occurrence(array):\n    if len(array) == 0:\n        return None\n\n    max_occurance = 0\n    max_item = None\n    for item in array:\n        if array.count(item) > max_occurance:\n            max_occurance = array.count(item)\n            max_item = item\n    return max_item\n\n\ndef main():\n    a = [1, 1, 2, 1, 3, 4, 5, 2, 3, 2, 1, 3, 4, 5, 6]\n    print(max_occurrence(a))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.2048573255218,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(input_list):\n    \"\"\"\n    Finds the item with maximum occurrences in a given list.\n\n    >>> max_occurrence([1, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 10])\n    6\n    >>> max_occurrence([1, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 10, 10])\n    10\n    >>> max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    1\n    >>> max_occurrence([1])\n    1\n    >>> max_occurrence([])\n    Traceback (most recent call last):\n        ...\n    ValueError: List is empty\n    \"\"\"\n    if not input_list:\n        raise ValueError(\"List is empty\")\n    counter = Counter(input_list)\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.172253082181854,
      "candidate": "def item_max_occurrences(arr):\n    return max(arr, key=arr.count)\n\n\nprint(item_max_occurrences([1, 1, 2, 3, 4, 5, 6, 7, 8, 8]))"
    },
    {
      "rank": 70,
      "score": 8.163300679823958,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(input_list):\n    counter = Counter(input_list)\n    return max(counter, key=counter.get)\n\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 71,
      "score": 8.144125099485041,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    counter = Counter(arr)\n    return counter.most_common(1)[0][0]\n\n\nprint(max_occurrences([1, 2, 3, 1, 4, 5, 1, 1, 1, 2, 3, 1, 2, 3, 4]))"
    },
    {
      "rank": 72,
      "score": 8.143591138329747,
      "candidate": "def max_occurrences(l):\n    if len(l) == 0:\n        return None\n\n    max_item = l[0]\n    max_count = 0\n    for item in l:\n        if l.count(item) > max_count:\n            max_count = l.count(item)\n            max_item = item\n\n    return max_item\n\n\nprint(max_occurrences([1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
      "rank": 73,
      "score": 8.121884567141883,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(input_list):\n    if not input_list:\n        return None\n    count_dict = Counter(input_list)\n    max_key = max(count_dict, key=count_dict.get)\n    return max_key, count_dict[max_key]\n\n\nprint(max_occurrences([1, 2, 3, 3, 3, 3, 4, 4, 5, 5]))"
    },
    {
      "rank": 74,
      "score": 8.105983444291466,
      "candidate": "from collections import Counter\n\n\ndef max_occur(lst):\n    count = Counter(lst)\n    return max(count, key=count.get)\n\n\nif __name__ == \"__main__\":\n    lst = [1, 3, 5, 1, 6, 7, 8, 3, 5, 5, 5, 5, 5, 2, 3, 6, 7, 8, 9, 10]\n    print(max_occur(lst))"
    },
    {
      "rank": 75,
      "score": 8.08452234024709,
      "candidate": "from collections import Counter\n\n\ndef find_max_occurrence(input_list):\n    count_dict = Counter(input_list)\n    max_occur = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_occur:\n            max_occur = count\n            max_item = item\n    return max_item\n\n\nprint(find_max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]))"
    },
    {
      "rank": 76,
      "score": 8.024835682833125,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(l):\n    c = Counter(l)\n    max_count = max(c.values())\n    return [i for i, j in c.items() if j == max_count][0]\n\n\ndef main():\n    print(max_occurrence([1, 2, 3, 2, 3, 1, 4, 5, 4, 5, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 7.990432406683839,
      "candidate": "def max_occurence(lst):\n    \"\"\"\n    Return the item with maximum occurrences in a given list.\n    \"\"\"\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    max_item = lst[0]\n    max_occur = 1\n    for item in lst:\n        if item == max_item:\n            max_occur += 1\n        else:\n            if max_occur < 1:\n                max_item = item\n                max_occur = 1\n            elif max_occur == 1:\n                continue\n            else:\n                max_occur -= 1\n    return max_item\n\n\ndef test_function():\n    assert max_occurence([1, 2, 2, 3, 3, 3, 4, 5]) == 3\n    assert max_occurence([1, 2, 3, 4, 5]) == 1\n    assert max_occurence([1, 1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert max_occurence([1, 1, 2, 3, 4, 4, 4, 5, 6]) == 4\n    assert max_occurence([1, 2, 3, 4, 5]) == 1\n    assert max_occurence([]) is None\n    assert max_occurence([1]) == 1\n    assert max_occurence([1, 1, 1, 1, 1]) == 1\n    assert max_occurence([3, 3, 3, 2, 2, 1]) == 3\n    assert max_occurence([3, 3, 3, 3, 3, 3]) == 3\n    assert max_occurence([-1, 1, -2, -2, 2, 2, 2, 3, 3, 3, 3]) == 2\n\n\nif __name__ == \"__main__\":\n    test"
    },
    {
      "rank": 78,
      "score": 7.938028884277233,
      "candidate": "from collections import Counter\n\ndef max_occur(input_list):\n    \"\"\"\n    Function to find item with maximum occurrences in a given list\n    \"\"\"\n    counter_obj = Counter(input_list)\n    max_occur_item = counter_obj.most_common(1)[0]\n    return max_occur_item\n\ndef main():\n    \"\"\"\n    Driver function\n    \"\"\"\n    input_list = [1, 2, 1, 3, 2, 1, 4, 1, 2]\n    print(f\"Input list: {input_list}\")\n    print(f\"Item with maximum occurrences: {max_occur(input_list)}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 7.915588979966494,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(my_list):\n    return max(Counter(my_list).items(), key=lambda x: x[1])[0]\n\n\nprint(max_occurrences([1, 2, 3, 1, 2, 2, 4, 5, 1, 2, 3, 1, 2, 2]))"
    },
    {
      "rank": 80,
      "score": 7.8912769574414305,
      "candidate": "def max_occurrence(lst):\n    max_item, max_count = None, 0\n    for item in lst:\n        if lst.count(item) > max_count:\n            max_item, max_count = item, lst.count(item)\n    return max_item\n\nif __name__ == \"__main__\":\n    lst = [1, 1, 2, 3, 4, 4, 5, 5, 5, 5]\n    print(max_occurrence(lst))"
    },
    {
      "rank": 81,
      "score": 7.868947655733293,
      "candidate": "from collections import Counter\n\ndef max_occur(list):\n    return Counter(list).most_common(1)\n\n\nif __name__ == '__main__':\n    print(\"List: \", list)\n    print(\"Max Occur: \", max_occur(list))"
    },
    {
      "rank": 82,
      "score": 7.84634113240411,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(list_of_items):\n    \"\"\"\n    >>> max_occurrence([1, 3, 2, 1, 4, 5, 4, 3])\n    4\n    \"\"\"\n    counter = Counter(list_of_items)\n    return max(counter, key=counter.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 7.834022619458933,
      "candidate": "def max_occur(list):\n    max_list = []\n    for i in list:\n        if list.count(i) > 1:\n            max_list.append(i)\n    return max_list\n\n\nif __name__ == '__main__':\n    l = [1, 2, 2, 3, 4, 5, 6, 7, 7, 8, 8, 9, 10]\n    print(max_occur(l))"
    },
    {
      "rank": 84,
      "score": 7.780351419995229,
      "candidate": "def max_occurrence(arr):\n    max_count = 0\n    max_item = None\n    count_map = {}\n    for item in arr:\n        if item not in count_map:\n            count_map[item] = 0\n        count_map[item] += 1\n        if count_map[item] > max_count:\n            max_count = count_map[item]\n            max_item = item\n    return max_item\n\n\ndef main():\n    arr = [1, 1, 2, 1, 3, 3, 2, 1, 4, 5, 6, 1, 2]\n    print(f\"Maximum occurrence is {max_occurrence(arr)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 85,
      "score": 7.738292593776799,
      "candidate": "def max_occurrence(l):\n    max_item = None\n    max_count = 0\n    for item in l:\n        if l.count(item) > max_count:\n            max_count = l.count(item)\n            max_item = item\n    return max_item\n\ndef max_occurrence2(l):\n    max_item = None\n    max_count = 0\n    for item in set(l):\n        if l.count(item) > max_count:\n            max_count = l.count(item)\n            max_item = item\n    return max_item\n\ndef main():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 9, 10]\n    print(max_occurrence(l))\n    print(max_occurrence2(l))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 7.7320703513377165,
      "candidate": "def find_max_occurence(lst: list) -> int:\n    \"\"\"\n    This function takes a list of integers as input and returns the item with maximum occurrences in the list.\n    >>> find_max_occurence([1, 2, 3, 2, 3, 2, 3])\n    3\n    >>> find_max_occurence([1, 2, 3, 4, 5])\n    1\n    >>> find_max_occurence([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n    5\n    >>> find_max_occurence([])\n    0\n    >>> find_max_occurence([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6])\n    6\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n\n    if len(lst) == 1:\n        return lst[0]\n\n    # initialize the maximum count\n    max_count = 0\n\n    # initialize the item with maximum count\n    item_with_max_count = 0\n\n    # initialize the count of the current item\n    count = 1\n\n    # Traverse the list and find the item with maximum count\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                item_with_max_count = lst[i - 1]\n            count = 1\n\n    if count > max_count:\n        max_count = count\n        item_with_max_count = lst[len(lst) - 1]\n\n    return item_with_max_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 7.705183449260731,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(my_list):\n    my_dict = Counter(my_list)\n    return max(my_dict, key=my_dict.get)\n\n\nif __name__ == \"__main__\":\n    assert max_occurrences([1, 2, 3, 2, 3, 1, 4, 5, 4, 5, 6]) == 3\n    assert max_occurrences([\"a\", \"b\", \"c\", \"b\", \"a\", \"d\", \"e\", \"e\", \"d\"]) == \"a\""
    },
    {
      "rank": 88,
      "score": 7.5819855281879285,
      "candidate": "from collections import Counter\n\ndef max_occur(lst):\n    c = Counter(lst)\n    return c.most_common(1)[0][0]\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 2, 3, 4, 2, 3, 4, 5, 6, 7, 8]\n    print(\"Max occurrence in given list is:\", max_occur(lst))"
    },
    {
      "rank": 89,
      "score": 7.562924366763077,
      "candidate": "def find_max_occurrences(a):\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_key = max(d, key=d.get)\n    print(max_key)\n\n\nif __name__ == \"__main__\":\n    find_max_occurrences([1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4])"
    },
    {
      "rank": 90,
      "score": 7.4878043221155455,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(data):\n    \"\"\"\n    Return the item with maximum occurrences in a given list.\n    >>> max_occurrences([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6])\n    '6'\n    >>> max_occurrences([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n    '5'\n    >>> max_occurrences([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5])\n    '6'\n    >>> max_occurrences([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5])\n    '6'\n    >>>"
    },
    {
      "rank": 91,
      "score": 7.464609382504557,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(nums):\n    return Counter(nums).most_common(1)[0][0]\n\n\ndef test_max_occurrence():\n    assert max_occurrence([1, 2, 3, 2, 5, 1, 1, 2, 3]) == 2"
    },
    {
      "rank": 92,
      "score": 7.4506599871439985,
      "candidate": "def find_max_occurence(li):\n    li_count = {}\n    for i in li:\n        if i in li_count:\n            li_count[i] += 1\n        else:\n            li_count[i] = 1\n    max_count = max(li_count.values())\n    return list(set([i for i in li_count if li_count[i] == max_count]))\n\n\nprint(find_max_occurence([1, 1, 2, 3, 2, 4, 2, 2]))"
    },
    {
      "rank": 93,
      "score": 7.134571892399572,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(data):\n    return Counter(data).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    data = [1, 2, 2, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n    assert max_occurrence(data) == 5\n    print(\"All test cases passed!\")"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def max_occurrence(l):\n    d = {}\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    return max(d.keys(), key=lambda k: d[k])\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = max_occurrence(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([1, 2, 3, 2, 5, 4, 2], 2))\ntest_function(([1, 2, 3, 4, 5, 6, 7], 7))\ntest_function(([1, 2, 3, 4, 5, 6, 7, 8], 8))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef find_max_occurence(input_list):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n\n    Args:\n       input_list(list): List containing numbers as elements\n    Returns:\n       (int): Number having maximum occurrences in a list\n    \"\"\"\n    counter = Counter(input_list)\n    max_value = max(counter.values())\n    return max(key for key, value in counter.items() if value == max_value)\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = find_max_occurence(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([1, 2, 3, 4, 2, 3, 1, 5, 6, 7, 8, 6, 8, 6, 8, 9, 9, 9, 9], 9))\ntest_function(([2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3], 2))\ntest_function(([1, 2, 3, 4, 2, 3, 1, 5, 6, 7, 8, 6, 8, 6, 8, 9, 9, 9, 9], 9))\ntest_function(([1, 2, 3, 4, 2, 3, 1, 5, 6, 7, 8, 6, 8, 6, 8, 9, 9, 9, 9], 1))\ntest_function(([1, 2, 3, 4, 2, 3, 1, 5, 6, 7, 8, 6, 8, 6, 8, 9,"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef max_occurrences(items):\n    if not items:\n        return None\n    count = Counter(items)\n    return max(count.keys(), key=lambda x: count[x])\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = max_occurrences(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([1, 2, 3, 2, 5, 4, 2], 2))\ntest_function(([5, 5, 5, 5], 5))\ntest_function(([5, 5, 5, 5, 1, 2, 3, 2, 5, 4, 2], 5))\ntest_function(([1, 2, 3, 2, 5, 4, 2, 5, 5, 5, 5], 5))\ntest_function(([1, 2, 3, 2, 5, 4, 2, 5, 5, 5, 5, 1, 2, 3, 2, 5, 4, 2], 5))\ntest_function(([1, 2, 3, 2, 5, 4, 2, 5, 5, 5, 5, 1, 2, 3, 2, 5, 4, 2, 5, 5, 5, 5], 5))\ntest_function(([1, 2, 3, 2, 5, 4, 2, 5, 5, 5, 5, 1, 2, 3, 2, 5, 4, 2, 5, 5, 5, 5, 1, 2, 3, 2, 5, 4, 2], 5))\ntest_function(([], None))\ntest_function(([1], 1))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def max_occurrence(items: list) -> int:\n    \"\"\"Returns the item with maximum occurrences in a given list.\n\n    Args:\n        items (list): list of items\n\n    Returns:\n        int: item with maximum occurrences\n    \"\"\"\n    counter = {}\n    max_item = None\n    max_count = 0\n\n    for item in items:\n        if item in counter:\n            counter[item] += 1\n        else:\n            counter[item] = 1\n\n        if counter[item] > max_count:\n            max_count = counter[item]\n            max_item = item\n\n    return max_item\n\n\nif __name__ == \"__main__\":\n    assert max_occurrence([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) == 1\n    assert max_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef max_occurence(items):\n    counter = Counter(items)\n    return counter.most_common(1)[0][0]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = max_occurence(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([3, 3, 4, 3, 4, 2, 4, 4], 4))\ntest_function(([3, 2, 3, 3, 2, 1, 3, 2, 2, 2], 2))\ntest_function(([1, 2, 3, 4, 5, 6], 1))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef max_occurrence(arr):\n    return Counter(arr).most_common(1)[0][0]\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = max_occurrence(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 3, 1, 3, 2, 1, 3, 4]\nsolution = 1\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 5, 2, 1, 5, 2, 1, 5, 2, 1, 5, 2]\nsolution = 5\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def max_occurrences(a_list):\n    result = {}\n    for item in a_list:\n        if item not in result:\n            result[item] = 1\n        else:\n            result[item] += 1\n    return result\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = max_occurrences(test_input)\n    if test_expected == test_actual:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([1, 2, 3, 1, 3, 2, 3, 1, 3, 2], 3))\ntest_function(([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], 4))\ntest_function(([1, 2, 3, 1, 2, 3, 1, 2, 3], 1))\ntest_function(([1, 2, 3, 1, 2, 3], 1))\ntest_function(([1, 1, 1, 1], 1))\ntest_function(([1, 2, 3, 4, 5, 1, 2, 3, 4, 5], 5))\ntest_function(([1, 2, 3, 4, 5, 6], 6))\ntest_function(([], None))"
    }
  ]
}