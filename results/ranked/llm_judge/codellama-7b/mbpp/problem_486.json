{
  "timestamp": "2025-09-15T01:59:24.611519",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 486,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    return math.pi * radius * (radius + height)\n\n\ndef surface_area_test():\n    \"\"\"\n    >>> surface_area(2, 3)\n    25.13274122871834\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius, height):\n    \"\"\"\n    >>> surface_area(10, 30)\n    160.40471203465498\n    >>> surface_area(0, 10)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius cannot be zero\n    >>> surface_area(-10, 30)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius cannot be negative\n    >>> surface_area(10, -30)\n    Traceback (most recent call last):\n        ...\n    ValueError: height cannot be negative\n    \"\"\"\n    if radius == 0:\n        raise ValueError(\"radius cannot be zero\")\n    elif radius < 0:\n        raise ValueError(\"radius cannot be negative\")\n    elif height < 0:\n        raise ValueError(\"height cannot be negative\")\n    return pi * radius ** 2 + pi * radius * height\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef surface_area(radius: float, height: float) -> float:\n    \"\"\"Calculates the surface area of a cone.\n\n    Args:\n        radius: The radius of the base of the cone.\n        height: The height of the cone.\n\n    Examples:\n        >>> assert surface_area(2, 10) == 126.52\n    \"\"\"\n    return 2 * (radius ** 2) * (height / 3)\n\n\ndef surface_area_tuple(radius: float, height: float) -> Tuple[float, float]:\n    \"\"\"Calculates the surface area of a cone.\n\n    Args:\n        radius: The radius of the base of the cone.\n        height: The height of the cone.\n\n    Examples:\n        >>> assert surface_area_tuple(2, 10) == (126.52, 24)\n    \"\"\"\n    return (surface_area(radius, height), 2 * radius)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    return math.pi * radius * (radius + math.sqrt(height * height + radius * radius))\n\nprint(surface_area(5, 10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def cone_surface_area(radius, height):\n    return (radius * radius) * (22/7) + (2 * radius * height) * (22/7)\n\nprint(cone_surface_area(2, 3))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    \"\"\"\n    Calculates the surface area of a cone\n\n    >>> surface_area(1, 2)\n    12.566370614359172\n    >>> surface_area(2, 1)\n    12.566370614359172\n    >>> surface_area(1, 1)\n    6.283185307179586\n    >>> surface_area(1, 0)\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: float division by zero\n    \"\"\"\n    return math.pi * radius * (radius + math.sqrt(height ** 2 + radius ** 2))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius + 3.14 * radius * radius + 3.14 * radius * height"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    \"\"\"\n    >>> surface_area(1, 2)\n    12.566370614359172\n    \"\"\"\n    return (2 * math.pi * radius * height) + (math.pi * radius ** 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def surface_area(radius, height):\n    \"\"\"\n    >>> surface_area(5, 10)\n    60.28\n    \"\"\"\n    return math.pi * radius * (radius + height)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    \"\"\"\n    >>> surface_area(5, 10)\n    106.30291585431504\n    >>> surface_area(10, 20)\n    452.1324618805517\n    \"\"\"\n    return math.pi * radius ** 2 + 2 * math.pi * radius * height\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius: float, height: float) -> float:\n    \"\"\"\n    Calculate the surface area of a cone.\n    :param radius: the radius of the cone.\n    :param height: the height of the cone.\n    :return: the surface area of the cone.\n    >>> surface_area(1, 1)\n    12.566370614359172\n    >>> surface_area(2, 4)\n    50.26548245743669\n    >>> surface_area(0, 4)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be greater than zero.\n    >>> surface_area(2, -4)\n    Traceback (most recent call last):\n        ...\n    ValueError: height must be greater than zero.\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"radius must be greater than zero.\")\n    if height <= 0:\n        raise ValueError(\"height must be greater than zero.\")\n    return pi * radius ** 2 + pi * radius * height\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def surface_area(radius, height):\n    \"\"\"\n    >>> surface_area(1, 1)\n    12.56\n    >>> surface_area(1, 2)\n    25.12\n    >>> surface_area(2, 1)\n    50.24\n    \"\"\"\n    return 3.14 * radius * (radius + height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def surface_area(radius, height):\n    return (radius ** 2 * 3.14159) + (radius * height * 2)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius * height + 3.14 * radius * radius\n\n\nif __name__ == '__main__':\n    r = float(input('Radius: '))\n    h = float(input('Height: '))\n    print(surface_area(r, h))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area_cone(radius, height):\n    \"\"\"\n    >>> surface_area_cone(1, 1)\n    12.566370614359172\n    >>> surface_area_cone(1, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid radius and height\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Invalid radius and height\")\n\n    return 2 * pi * radius * (radius + height) / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def surface_area(radius: float, height: float) -> float:\n    \"\"\"\n    >>> surface_area(2, 3)\n    28.274333882308138\n    \"\"\"\n    return 2 * 3.14 * radius * (radius + height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def area(r, h):\n    \"\"\"\n    >>> area(2, 3)\n    28.274333882308138\n    >>> area(1, 1)\n    5.196152422706632\n    >>> area(1, 0)\n    0\n    \"\"\"\n    return 2 * 3.14 * r * (r + h)\n\ndef test_areas():\n    assert area(2, 3) == 28.274333882308138\n    assert area(1, 1) == 5.196152422706632\n    assert area(1, 0) == 0\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def surface_area(radius: float, height: float) -> float:\n    \"\"\"Surface area of a cone.\n\n    >>> surface_area(2, 10)\n    105.1811165681754\n    \"\"\"\n    return 2 * 3.14 * radius * (radius + height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def surface_area(radius, height):\n    # formula for surface area of a cone is (pi * radius * (radius + height))\n    return round(3.14 * radius * (radius + height), 2)\n\n\nprint(surface_area(2, 4))\nprint(surface_area(3, 5))\nprint(surface_area(4, 6))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def surface_area(radius, height):\n    \"\"\"\n    >>> surface_area(1, 1)\n    12.56637\n    >>> surface_area(2, 2)\n    50.26548\n    \"\"\"\n    return 2 * 3.1415926 * radius * height + 3.1415926 * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def surface_area(radius: int, height: int) -> float:\n    \"\"\"\n    >>> surface_area(1, 1)\n    5.344562728414594\n    >>> surface_area(1, 2)\n    11.90363363782156\n    >>> surface_area(2, 1)\n    21.90363363782156\n    >>> surface_area(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: height must be positive\n    >>> surface_area(-1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be positive\n    >>> surface_area(-1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: height must be positive\n    \"\"\"\n    if height < 0:\n        raise ValueError(\"height must be positive\")\n\n    if radius < 0:\n        raise ValueError(\"radius must be positive\")\n\n    return 2 * 3.14 * radius * (radius + (height ** 2) ** 0.5) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area(r, h):\n    \"\"\"\n    >>> surface_area(2, 3)\n    25.13274122871834\n    \"\"\"\n    return (pi * r ** 2) + (2 * pi * r * h)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def surface_area(r, h):\n    return (2 * r * h) + (pi * r ** 2)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def surface_area(r: int, h: int) -> float:\n    \"\"\"\n    >>> surface_area(2, 3)\n    28.274333882308138\n    \"\"\"\n    return 2 * 3.14 * r * (r + h)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef surface_area(r: int, h: int) -> float:\n    \"\"\"Returns the surface area of a cone.\n\n    >>> surface_area(1, 1)\n    12.566370614359172\n    >>> surface_area(1, 2)\n    19.634954084936208\n    >>> surface_area(2, 2)\n    35.398\n    \"\"\"\n    return 2 * pi * r * h + pi * r ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "from math import pi\n\ndef surface_area(radius, height):\n    return (2 * pi * radius * height) + (pi * radius ** 2)\n\nradius = int(input('Enter the radius: '))\nheight = int(input('Enter the height: '))\n\nprint(f'The surface area is {surface_area(radius, height)}')"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(r, h):\n    return 2 * math.pi * r * h + math.pi * (r**2)\n\n\nprint(surface_area(5, 7))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(r, h):\n    return math.pi * r * (r + h)\n\n\ndef surface_area2(r, h):\n    return math.pi * r * (r + h)"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    return math.pi * radius * math.sqrt((radius ** 2) + (height ** 2))\n\ndef main():\n    radius = float(input(\"Enter the radius of the cone: \"))\n    height = float(input(\"Enter the height of the cone: \"))\n\n    print(f\"The area of the surface of the cone is {surface_area(radius, height)}\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def surface_area(r, h):\n    return 2 * (r * r) + 2 * r * h * (3.1415 / 2)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    \"\"\"\n    >>> surface_area(1, 2)\n    12.566370614359172\n    >>> surface_area(2, 1)\n    12.566370614359172\n    >>> surface_area(0, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be greater than zero\n    >>> surface_area(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Height must be greater than zero\n    \"\"\"\n    if radius <= 0:\n        raise ValueError(\"Radius must be greater than zero\")\n    if height <= 0:\n        raise ValueError(\"Height must be greater than zero\")\n    return 2 * 3.14159 * radius * height + 3.14159 * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def surface_area(r: float, h: float) -> float:\n    \"\"\"\n    >>> surface_area(5, 10)\n    60.0\n    >>> surface_area(5, 10) == surface_area(5, 10)\n    True\n    >>> surface_area(1, 2) == surface_area(1, 1) + surface_area(1, 2)\n    True\n    \"\"\"\n\n    return 2 * 3.14 * r * h + 3.14 * r ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    area = math.pi * radius * radius + math.pi * radius * math.sqrt(height * height + radius * radius)\n    return area\n\n\nprint(surface_area(3, 5))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef area_cone(radius, height):\n    return (pi * radius * radius) + (pi * radius * height)\n\n\nprint(area_cone(3, 7))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    return 2 * math.pi * radius * math.sqrt(radius * radius + height * height)\n\nprint(surface_area(10, 20)) # 1764.71998635"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    return round(2 * math.pi * radius + math.pi * radius ** 2, 2)\n\n\ndef main():\n    radius = float(input(\"Radius: \"))\n    height = float(input(\"Height: \"))\n    print(surface_area(radius, height))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius + 3.14 * radius * radius\n\n\nprint(surface_area(1, 2))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area_cone(r, h):\n    return 2 * math.pi * r + math.pi * r ** 2 + math.pi * r * h\n\nassert surface_area_cone(3, 12) == 102.508\nassert surface_area_cone(5, 10) == 175.669\nassert surface_area_cone(3, 2) == 28.274"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(r, h):\n    return 2 * math.pi * r * (r + h)\n\nassert surface_area(3, 5) == 26.899440000000002"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area_cone(radius, height):\n    \"\"\"\n    >>> surface_area_cone(2, 2)\n    21.1041650948358\n    >>> surface_area_cone(1, 1)\n    12.5663706143592\n    >>> surface_area_cone(2, 3)\n    31.4159265358979\n    >>> surface_area_cone(1, 3)\n    18.8495559215388\n    >>> surface_area_cone(0, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be greater than 0\n    \"\"\"\n    if radius <= 0:\n        raise ValueError('Radius must be greater than 0')\n    return math.pi * radius * (radius + math.sqrt(height**2 + radius**2))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def find_surface_area_cone(radius, height):\n    \"\"\"\n    Find the surface area of a cone.\n\n    Args:\n     radius (int or float): The radius of the cone.\n     height (int or float): The height of the cone.\n\n    Returns:\n     float: The surface area of the cone.\n    \"\"\"\n    # Return the surface area of the cone.\n    return (radius ** 2 * 3.14159) + (radius * height * 2)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(r, h):\n    return math.pi * r * (r + h)\n\nprint(surface_area(2, 1))\n\n# print(math.pi)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    return math.pi * radius * (radius + math.sqrt(height * height + radius * radius))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(r, h):\n    return round(math.pi * r * math.sqrt(r**2 + h**2), 2)\n\nif __name__ == '__main__':\n    assert surface_area(3, 5) == 26.47\n    print(\"The area is\", surface_area(3, 5))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius, height):\n    return pi * radius * (radius + height)\n\n\ndef surface_area_2(radius, height):\n    return pi * radius ** 2 + pi * height * radius\n\n\nprint(surface_area(5, 6))\nprint(surface_area_2(5, 6))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius + 2 * 3.14 * radius * height"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius + 2 * 3.14 * radius * height / 3"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef surface_area(r, h):\n    return (pi * r**2 + pi * r * h)\n\nprint(surface_area(1, 2))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(r, h):\n    \"\"\"\n    Calculate the surface area of a cone.\n\n    :param r: The radius of the cone.\n    :type r: float\n    :param h: The height of the cone.\n    :type h: float\n    :return: The surface area of the cone.\n    :rtype: float\n    \"\"\"\n    return round(math.pi * r ** 2 + math.pi * r * h, 2)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef surface_area(radius, height):\n    return pi * radius ** 2 + pi * radius * height\n\n\nif __name__ == '__main__':\n    radius, height = [int(i) for i in input().split()]\n    area = surface_area(radius, height)\n    print(area)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius * (radius + height)\n\nprint(surface_area(3, 7))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    \"\"\"\n    Calculates the surface area of a cone.\n\n    >>> surface_area(2, 3)\n    21.010638295082066\n    \"\"\"\n    return round(math.pi * radius * math.sqrt(radius ** 2 + height ** 2), 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def surface_area(r, h):\n    return 2 * r * pi + pi * r**2\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\n\ndef volume(r, h):\n    return 1/3 * pi * r**2 * h"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    # Calculate the surface area of a cone.\n\n    # Get the volume of a sphere with given radius.\n    area = 2 * 3.14 * radius * height + 3.14 * radius ** 2\n\n    return area"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return (2 * 3.14 * radius * height) + (3.14 * (radius ** 2))\n\n\nprint(surface_area(10, 20))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area_cone(r, h):\n    return round(math.pi * r * (r + h), 3)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius, height):\n    return pi * radius * (radius + height)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    return 2 * math.pi * radius + math.pi * radius * radius + math.pi * radius * height"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area_cone(r, h):\n    # r = radius\n    # h = height\n    return (math.pi * r * r + math.pi * r * math.sqrt(r * r + h * h))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    return round(2 * math.pi * radius + math.pi * radius * radius)\n\n\ndef surface_area_2(radius, height):\n    return round(2 * math.pi * radius * (radius + height))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14159265359 * radius * height + 3.14159265359 * radius**2\n\ndef main():\n    print(surface_area(1, 1))\n    print(surface_area(2, 2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius * height + 3.14 * radius * radius\n\ndef surface_area_alt(radius, height):\n    return 2 * 3.14 * radius * height + 3.14 * radius * radius\n\nprint(surface_area(5, 6))\nprint(surface_area_alt(5, 6))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    return math.pi * radius * (radius + height)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    # write your answer as a single line of code!\n    return 2 * math.pi * radius * height + math.pi * radius ** 2\n\n\n\nprint surface_area(2, 3)\nprint surface_area(1, 4)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    return round((math.pi * radius * (radius + height)), 2)\n\n\nif __name__ == '__main__':\n    r = float(input('Radius: '))\n    h = float(input('Height: '))\n    print(surface_area(r, h))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(r, h):\n    return math.pi * r * (r + h)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius + 2 * 3.14 * radius * height / 3\n\n\nprint(surface_area(5, 20))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius * height + 2 * 3.14 * radius * radius\n\n\ndef surface_area_alt(radius, height):\n    return 2 * 3.14 * (radius * height + radius * radius)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius * (radius + height)\n\nprint(surface_area(3, 7)) # 70.09\nprint(surface_area(1, 3)) # 25.13\nprint(surface_area(3, 1)) # 18.84"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    \"\"\"Finds the surface area of a cone.\"\"\"\n    return math.pi * radius ** 2 + math.pi * radius * height"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def surface_area(r: int, h: int) -> float:\n    \"\"\"\n    >>> surface_area(2, 5)\n    21.6875\n    >>> surface_area(2, -5)\n    Traceback (most recent call last):\n        ...\n    ValueError: height must be positive\n    \"\"\"\n    if h < 0:\n        raise ValueError(\"height must be positive\")\n    return (2 * 3.14 * r * h) + (2 * 3.14 * r ** 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius, height):\n    return 2 * math.pi * radius + math.pi * radius ** 2"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    area = math.pi * radius * (radius + height)\n    return area\n\n\ndef main():\n    print(surface_area(5, 10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def surfaceAreaCone(r, h):\n    return 3.14 * r * (r + h)\n\nprint(surfaceAreaCone(5, 7))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area_cone(radius, height):\n    \"\"\"\n    radius: the radius of the base of the cone.\n    height: the height of the cone.\n    Returns: surface area of the cone.\n    \"\"\"\n    return (math.pi * radius * radius + math.pi * radius * height) * 2\n\nprint surface_area_cone(3, 5)"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef surface_area(radius, height):\n    return pi * radius * (radius + height)\n\nprint(surface_area(5, 12))\n\ndef surface_area_2(radius, height):\n    return 2 * pi * radius * height + 2 * pi * radius ** 2\n\nprint(surface_area_2(5, 12))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "import math\n\ndef cone_surface_area(r, h):\n    return math.pi * r * (r + h)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef surface_area(r: float, h: float) -> float:\n    \"\"\"\n    >>> surface_area(1, 1)\n    12.566371\n    >>> surface_area(0, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius cannot be zero\n    >>> surface_area(-1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius cannot be negative\n    >>> surface_area(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: height cannot be negative\n    \"\"\"\n    if r <= 0:\n        raise ValueError(\"radius cannot be zero\")\n    if r < 0:\n        raise ValueError(\"radius cannot be negative\")\n    if h < 0:\n        raise ValueError(\"height cannot be negative\")\n    return (pi * r ** 2) + (2 * pi * r * h)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area_cone(r, h):\n    return (2 * math.pi * r * h) + (math.pi * r ** 2)\n\nprint(surface_area_cone(2, 2))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return round(2 * 3.14 * radius * (radius + height), 2)\n\n\nprint(surface_area(5, 9))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area_cone(radius, height):\n    return math.pi * radius * (radius + math.sqrt(height * height + radius * radius))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * math.pi * radius + math.pi * radius ** 2"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(r, h):\n    \"\"\"\n    r is radius\n    h is height\n    \"\"\"\n    return 2 * math.pi * r * (r + h)\n\n\nif __name__ == '__main__':\n    print(surface_area(2, 2))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius, height):\n    return 2 * pi * radius * (radius + height)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * 3.14 * radius + 2 * 3.14 * radius * height\n\n\nprint(surface_area(1, 3))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    return 2 * math.pi * radius + math.pi * radius * radius + math.pi * radius * height\n\n\ndef test_surface_area():\n    assert surface_area(3, 7) == 26.87392868748605\n\n\nif __name__ == \"__main__\":\n    print(surface_area(3, 7))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef surface_area_cone(\n    radius: float,\n    height: float,\n    pi: Optional[float] = math.pi,\n) -> float:\n    \"\"\"Calculates the surface area of a cone.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the cone.\n\n    height : float\n        The height of the cone.\n\n    pi : float, optional\n        The value of pi to use in the calculation.\n        By default, uses the value from the math module.\n\n    Returns\n    -------\n    float\n        The surface area of the cone.\n\n    Raises\n    ------\n    ValueError\n        If either radius or height is less than or equal to 0.\n    \"\"\"\n    if radius <= 0 or height <= 0:\n        raise ValueError(\n            \"Both radius and height must be greater than 0.\",\n        )\n\n    return pi * radius ** 2 + pi * radius * height"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    return math.pi * radius * math.sqrt((radius ** 2) + (height ** 2))\n\n\ndef test_surface_area():\n    assert surface_area(1, 2) == 11.2653"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def surface_area(radius: float, height: float) -> float:\n    \"\"\"Calculates the surface area of a cone.\n\n    Args:\n        radius (float): The radius of the cone.\n        height (float): The height of the cone.\n\n    Returns:\n        float: The surface area of the cone.\n    \"\"\"\n    return (3.14 * radius * radius) + (3.14 * radius * height)\n\n\nif __name__ == \"__main__\":\n    print(surface_area(3, 6))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\nimport math\nfrom typing import Union\n\n\ndef surface_area(radius: float, height: float) -> float:\n    \"\"\"Calculates the surface area of a cone.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the cone.\n\n    height : float\n        The height of the cone.\n\n    Returns\n    -------\n    float\n        The surface area of the cone.\n\n    Raises\n    ------\n    ValueError\n        If radius or height is negative.\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height cannot be negative\")\n\n    return 2 * math.pi * radius * (radius + math.sqrt(height ** 2 + radius ** 2))\n\n\nif __name__ == \"__main__\":\n    print(surface_area(1, 2))\n    print(surface_area(5, 10))\n    print(surface_area(2, 4))\n    print(surface_area(1, 3))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import math\n\n\ndef area_cone(radius, height):\n    \"\"\"\n    Calculate the surface area of a cone.\n    \"\"\"\n    return math.pi * radius * (radius + height)\n\n\ndef test_area_cone():\n    \"\"\"\n    Tests for area_cone.\n    \"\"\"\n    assert area_cone(2, 4) == 28.274333882308138"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def surface_area(radius: float, height: float) -> float:\n    \"\"\"Calculate the surface area of a cone.\n\n    Args:\n        radius: radius of a cone.\n        height: height of a cone.\n\n    Returns:\n        Surface area of a cone.\n    \"\"\"\n    return 2 * 3.14 * radius * (radius + height)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def surface_area(r: int, h: int) -> float:\n    \"\"\"\n    >>> surface_area(3, 4)\n    60.0\n    >>> surface_area(4, 6)\n    96.0\n    \"\"\"\n    # top area\n    area_top = 2 * 3.14 * r * h\n    # side area\n    area_side = 2 * 3.14 * r ** 2\n    return area_top + area_side\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def surface_area(r, h):\n    return round(2 * 3.14 * r * (r + h), 2)\n\n\ndef test_function():\n    assert surface_area(1, 2) == 25.13, \"Wrong surface area\"\n    assert surface_area(2, 1) == 18.84, \"Wrong surface area\""
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    \"\"\"\n    Calculates the surface area of a cone.\n    :param radius: int or float - the radius of the base of the cone.\n    :param height: int or float - the height of the cone.\n    :return: int or float - the surface area of the cone.\n    \"\"\"\n    return (math.pi * radius * height) + (math.pi * radius * radius)\n\n\ndef surface_area_of_a_cone(radius, height):\n    \"\"\"\n    Calculates the surface area of a cone.\n    :param radius: int or float - the radius of the base of the cone.\n    :param height: int or float - the height of the cone.\n    :return: int or float - the surface area of the cone.\n    \"\"\"\n    return (math.pi * radius * height) + (math.pi * radius * radius)\n\n\ndef test_function(test_case):\n    test_case = test_case[0]\n    solution = test_case[1]\n    if surface_area_of_a_cone(test_case[0], test_case[1]) == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[2, 1], 10])\ntest_function([[1, 2], 12.18])\ntest_function([[5, 1], 15.70])"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from math import pi\n\n\ndef surface_area(radius, height):\n    return 2 * pi * radius + pi * radius * height\n\n\ndef surface_area_test():\n    radius = 3\n    height = 10\n    expected_result = 71.43\n    return surface_area(radius, height) == expected_result"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(r: float, h: float) -> float:\n    \"\"\"Calculate surface area of a cone.\n\n    Args:\n        r (float): radius of the cone.\n        h (float): height of the cone.\n\n    Returns:\n        float: surface area of the cone.\n    \"\"\"\n    return 2 * math.pi * r * h + math.pi * r ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(3, 5))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(radius: float, height: float) -> float:\n    \"\"\"Surface area of a cone.\n\n    >>> surface_area(1, 2)\n    22.790856404229843\n    \"\"\"\n    return math.pi * radius * (radius + height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def surface_area(radius, height):\n    return 2 * (3.14 * radius * height + 3.14 * radius * radius)\n\nassert surface_area(2, 3) == 30.27\nassert surface_area(1, 4) == 33.97\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef volume(radius):\n    return 3.14 * radius * radius * radius\n\nassert volume(2) == 28.27\nassert volume(1) == 4.19\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\nassert circumference(2) == 12.56\nassert circumference(1) == 6.28\n\n\"\"\"\nWrite a function to find the average of two numbers.\n\"\"\"\n\ndef average(a, b):\n    return (a + b) / 2\n\nassert average(1, 2) == 1.5\nassert average(2, 2) == 2\nassert average(2, 1) == 1.5\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\n\ndef area_of_triangle(a, b, c):\n    return 0.5 * (a + b + c)\n\nassert area_of_triangle(1, 2, 2) == 3\nassert area_of_triangle(2, 2, 2) == 6\nassert area_of_triangle(2, 1, 2) == 4\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\n\ndef perimeter_of_triangle(a, b, c):\n    return a + b + c\n\nassert perimeter_of_triangle(1, 2, 2) == 5\nassert perimeter_of_triangle(2, 2, 2) == 8\nassert perimeter_of_triangle(2, 1, 2) == 6\n\n\"\"\"\nWrite a function to find the area"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def surface_area(radius: int, height: int) -> float:\n    \"\"\"Calculates the surface area of a cone.\n\n    Args:\n        radius (int): The radius of the base of the cone.\n        height (int): The height of the cone.\n\n    Returns:\n        float: The surface area of the cone.\n    \"\"\"\n    return 2 * 3.14 * radius * (radius + (height ** 2) / (2 * radius))"
    }
  ]
}