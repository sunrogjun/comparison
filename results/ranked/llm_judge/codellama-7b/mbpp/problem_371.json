{
  "timestamp": "2025-09-15T01:06:59.447144",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 371,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def circular_rotation_number(arr):\n    if len(arr) == 0:\n        return 0\n\n    if arr[0] <= arr[-1]:\n        return 0\n\n    if arr[0] > arr[-1]:\n        return len(arr)\n\n\nif __name__ == \"__main__\":\n    print(circular_rotation_number([10, 15, 1, 3, 8]))\n    print(circular_rotation_number([1, 3, 8, 10, 15]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def rotations(arr):\n    if arr is None or len(arr) == 0:\n        return 0\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] < arr[start]:\n            end = mid\n        elif arr[mid] > arr[start]:\n            start = mid\n        else:\n            break\n    return len(arr) - 1 - end\n\n\nif __name__ == \"__main__\":\n    print(rotations([2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef circular_array_rotation(arr: List[int], k: int) -> int:\n    n = len(arr)\n\n    # find the index of the smallest value\n    # since the array is sorted, the smallest value will be in the first index\n    smallest_idx = 0\n    for i in range(1, n):\n        if arr[i] < arr[smallest_idx]:\n            smallest_idx = i\n\n    # since the array is circularly sorted, the smallest value will be at the beginning\n    # and the value at index n - 1 will be the value of the next element\n    # if the smallest value is at index 0, then the next value will be at index n - 1\n    if smallest_idx == 0:\n        return n - k\n\n    # if the smallest value is at index 1, then the next value will be at index 0\n    # and the value at index n - 1 will be the value of the previous element\n    # if the smallest value is at index 1, then the next value will be at index 0\n    return (n - 1 - smallest_idx + k) % n\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef circular_array_rotation_2(arr: List[int], k: int) -> int:\n    n = len(arr)\n\n    # find the index of the smallest value\n    # since the array is sorted, the smallest value will be in the first index\n    smallest_idx = 0\n    for i in range(1, n):\n        if arr[i] < arr[smallest_idx]:\n            smallest_idx = i\n\n    # since the array is circularly sorted, the smallest value will be at the beginning\n    # and the value at index n - 1 will be the value of the next element\n    # if the smallest value is at index 0, then the next value will be at index n - 1\n    if smallest_idx == 0:\n        return n - k\n\n    # if the smallest value is at index 1, then the next value will"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def circular_sorted_array(arr):\n    if len(arr) < 2:\n        return 0\n    low = 0\n    high = len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return len(arr) - 1 - low\n\n\nif __name__ == \"__main__\":\n    arr = [15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14]\n    print(circular_sorted_array(arr))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def number_rotations(arr):\n    if len(arr) < 2:\n        return len(arr)\n    low = 0\n    high = len(arr) - 1\n    if arr[low] <= arr[high]:\n        return 0\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return len(arr) - (high - low)\n\n\nprint(number_rotations([10, 15, 1, 3, 8]))\nprint(number_rotations([1, 3, 8, 10, 15]))\nprint(number_rotations([4, 5, 7, 9, 10, 11, 0, 1, 2]))\nprint(number_rotations([0, 1, 2, 4, 5, 7, 9, 10, 11]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def number_rotations(array):\n    \"\"\"\n    Return the number of rotations of a circularly sorted array.\n\n    >>> number_rotations([1, 2, 3])\n    0\n    >>> number_rotations([2, 3, 1])\n    1\n    >>> number_rotations([1, 4, 2, 3, 5])\n    3\n    >>> number_rotations([1, 3, 4, 2, 5])\n    1\n    >>> number_rotations([3, 5, 1, 4, 2])\n    2\n    >>> number_rotations([5, 2, 3, 4, 1])\n    4\n    >>> number_rotations([3, 4, 5, 1, 2])\n    2\n    >>> number_rotations([5, 4, 3, 2, 1])\n    4\n    >>> number_rotations([5, 3, 4, 2, 1])\n    3\n    >>> number_rotations([5, 3, 4, 2, 1, 0])\n    5\n    \"\"\"\n    if len(array) <= 1:\n        return 0\n\n    if array[0] <= array[-1]:\n        return 0\n\n    return len(array) - 1 - array[::-1].index(array[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def circular_rotation(arr):\n    start = 0\n    end = len(arr) - 1\n    mid = 0\n\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        elif arr[mid] < arr[end]:\n            end = mid - 1\n        else:\n            return len(arr) - (end - start + 1)\n\n    return len(arr) - (end - start + 1)\n\n\nif __name__ == '__main__':\n    print(circular_rotation([1, 2, 3, 4, 5]))\n    print(circular_rotation([1, 2, 3, 4, 5, 6]))\n    print(circular_rotation([1, 2, 3, 4, 5, 6, 7]))\n    print(circular_rotation([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(circular_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef circular_sorted(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) <= 1:\n        return len(arr)\n\n    low, high = 0, len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if arr[low] <= arr[mid]:\n            low = mid + 1\n        else:\n            high = mid\n\n    pivot = low\n\n    low, high = 0, len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if arr[mid] >= arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    if high - pivot < pivot - low:\n        return pivot - low\n\n    return len(arr) - high + pivot\n\n\nif __name__ == \"__main__\":\n    assert circular_sorted([]) == 0\n    assert circular_sorted([1]) == 1\n    assert circular_sorted([1, 2]) == 2\n    assert circular_sorted([1, 2, 3]) == 3\n    assert circular_sorted([2, 3, 1]) == 3\n    assert circular_sorted([3, 1, 2]) == 3\n    assert circular_sorted([2, 1, 3]) == 3\n    assert circular_sorted([1, 3, 2]) == 3\n    assert circular_sorted([3, 2, 1]) == 3\n    assert circular_sorted([1, 2, 3, 4]) == 4\n    assert circular_sorted([4, 1, 2, 3]) == 4\n    assert circular_sorted([3, 4, 1, 2]) == 4\n    assert circular_sorted([2, 3, 4, 1]) == 4\n    assert circular_sorted([1, 4, 2, 3]) == 4\n    assert circular_sorted([2,"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def circular_array_rotation(arr, k):\n    n = len(arr)\n    if k == 0 or n == 1:\n        return 0\n\n    if arr[0] >= arr[n - 1]:\n        return n - arr.index(max(arr)) - 1\n\n    return k % n\n\n\nif __name__ == \"__main__\":\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 3))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 0))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 1))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 2))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 3))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 4))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 5))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 6))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 7))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 8))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 9))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 10))\n    print(circular_array_rotation([1, 3, 4, 5, 6, 7], 11))\n    print"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def number_of_rotations(arr):\n    \"\"\"\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n\n        if arr[mid] < arr[start]:\n            end = mid\n        else:\n            start = mid + 1\n\n    return end\n\n\ndef test_number_of_rotations():\n    assert number_of_rotations([16, 2, 3, 4, 5, 7, 15]) == 4\n    assert number_of_rotations([]) == 0\n    assert number_of_rotations([1]) == 0\n    assert number_of_rotations([1, 2]) == 0\n    assert number_of_rotations([1, 2, 3]) == 0\n    assert number_of_rotations([3, 4, 5, 6, 1, 2]) == 1\n    assert number_of_rotations([1, 5, 6, 7, 8, 9, 10, 3, 4]) == 5\n    assert number_of_rotations([4, 5, 6, 7, 1, 2, 3]) == 3\n    assert number_of_rotations([4, 5, 6, 7, 1, 2, 3, 0]) == 3\n    assert number_of_rotations([4, 5, 6, 7, 1, 2, 3, 8]) == 4\n    assert number_of_rotations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9\n    assert number_of_rotations([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\n    assert number_of_rotations([10,"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef circular_rotation(arr: List[int], n: int, target: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if target == arr[0]:\n        return 0\n\n    if target == arr[-1]:\n        return n - 1\n\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        if arr[mid] < arr[high]:\n            if target >= arr[mid] and target <= arr[high]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        elif arr[mid] > arr[high]:\n            if target >= arr[low] and target <= arr[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            high -= 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert circular_rotation([6, 7, 8, 9, 10, 1, 2, 3, 4], 9, 1) == 8\n    assert circular_rotation([6, 7, 8, 9, 10, 1, 2, 3, 4], 9, 6) == 0\n    assert circular_rotation([6, 7, 8, 9, 10, 1, 2, 3, 4], 9, 10) == 1\n    assert circular_rotation([6, 7, 8, 9, 10, 1, 2, 3, 4], 9, 7) == 1\n    assert circular_rotation([6, 7, 8, 9, 10, 1, 2, 3, 4], 9, 8) == 2\n    assert circular_rotation([6, 7, 8, 9, 10, 1, 2"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def number_of_rotations(nums):\n    if not nums:\n        return 0\n\n    start, end = 0, len(nums) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < end and nums[mid] > nums[mid + 1]:\n            return mid + 1\n        elif mid > start and nums[mid] < nums[mid - 1]:\n            return mid\n        elif nums[start] < nums[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    arr = [6, 7, 8, 9, 10, 1, 2, 3, 4]\n    print(number_of_rotations(arr))"
    },
    {
      "rank": 13,
      "score": 9.259446845628377,
      "candidate": "def rotations(arr):\n    \"\"\"\n    :type: arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) <= 1:\n        return len(arr)\n\n    # Find the first element in the array\n    start = 0\n    while start < len(arr) - 1 and arr[start] < arr[start + 1]:\n        start += 1\n\n    if start == len(arr) - 1:\n        return 0\n\n    # Find the last element in the array\n    end = len(arr) - 1\n    while end > 0 and arr[end] > arr[end - 1]:\n        end -= 1\n\n    # Find the number of elements in the array\n    if start == 0:\n        return end\n\n    return len(arr) - (end - start + 1)"
    },
    {
      "rank": 14,
      "score": 9.132887653002607,
      "candidate": "def count_rotations(arr):\n    if not arr:\n        return 0\n\n    start, end = 0, len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid < end and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        if mid > start and arr[mid] < arr[mid - 1]:\n            return mid\n        if arr[start] <= arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return 0\n\nprint(count_rotations([2, 3, 4, 5, 6, 7]))\nprint(count_rotations([5, 6, 7, 8, 9, 10, 1, 2, 3, 4]))\nprint(count_rotations([4, 5, 6, 7, 8, 1, 2, 3]))\nprint(count_rotations([1, 2, 3, 4, 5, 6, 7]))\nprint(count_rotations([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 15,
      "score": 8.873684300378283,
      "candidate": "from typing import List\n\n\ndef number_of_rotations(array: List[int]) -> int:\n    \"\"\"\n    O(log n) solution.\n    \"\"\"\n    if not array:\n        return 0\n\n    if len(array) == 1:\n        return 0\n\n    start, end = 0, len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] < array[end]:\n            end = mid\n        elif array[mid] > array[start]:\n            start = mid\n        else:\n            break\n\n    if start == mid:\n        return mid\n    return len(array) - mid - 1\n\n\nif __name__ == \"__main__\":\n    assert number_of_rotations([3, 4, 5, 6, 7, 1, 2]) == 5\n    assert number_of_rotations([1, 2, 3, 4, 5]) == 0\n    assert number_of_rotations([1, 2, 3, 4, 5, 6]) == 0\n    assert number_of_rotations([5, 6, 1, 2, 3, 4]) == 1\n    assert number_of_rotations([1, 2, 3, 4, 5, 6, 7]) == 0\n    assert number_of_rotations([6, 7, 1, 2, 3, 4, 5]) == 1\n    assert number_of_rotations([3, 4, 5, 6, 1, 2]) == 2"
    },
    {
      "rank": 16,
      "score": 8.847221376233357,
      "candidate": "def number_of_rotations(arr):\n    if not arr:\n        return 0\n\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] > arr[mid + 1]:\n            return mid + 1\n        elif arr[mid] < arr[end]:\n            end = mid - 1\n        elif arr[mid] > arr[start]:\n            start = mid + 1\n        else:\n            start += 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(number_of_rotations([1, 2, 3, 4, 5, 6, 7]))\n    print(number_of_rotations([4, 5, 6, 7, 1, 2, 3]))\n    print(number_of_rotations([6, 7, 1, 2, 3, 4, 5]))\n    print(number_of_rotations([3, 4, 5, 6, 7, 1, 2]))\n    print(number_of_rotations([7, 1, 2, 3, 4, 5, 6]))\n    print(number_of_rotations([3, 7, 4, 5, 6, 1, 2]))"
    },
    {
      "rank": 17,
      "score": 8.806364205769848,
      "candidate": "from typing import List\n\n\ndef count_rotations(arr: List[int]) -> int:\n    \"\"\"\n    Time complexity: O(log n)\n    Space complexity: O(1)\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if mid < end and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        elif mid > 0 and arr[mid] < arr[mid - 1]:\n            return mid\n\n        if arr[start] < arr[mid]:\n            start = mid + 1\n        elif arr[mid] < arr[end]:\n            end = mid - 1\n        else:\n            return 0\n\n\nif __name__ == \"__main__\":\n    assert count_rotations([]) == 0\n    assert count_rotations([1]) == 0\n    assert count_rotations([1, 2]) == 0\n    assert count_rotations([1, 2, 3]) == 0\n    assert count_rotations([2, 3, 4, 5, 6, 7, 1]) == 1\n    assert count_rotations([3, 4, 5, 6, 7, 1, 2]) == 2\n    assert count_rotations([4, 5, 6, 7, 1, 2, 3]) == 3\n    assert count_rotations([5, 6, 7, 1, 2, 3, 4]) == 4\n    assert count_rotations([6, 7, 1, 2, 3, 4, 5]) == 5\n    assert count_rotations([7, 1, 2, 3, 4, 5, 6]) == 6"
    },
    {
      "rank": 18,
      "score": 8.769369739642425,
      "candidate": "from typing import List\n\n\ndef rotations_in_circularly_sorted_array(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if not array:\n        raise ValueError(\"array must not be empty\")\n\n    left = 0\n    right = len(array) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if array[mid] > array[right]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return len(array) - left\n\n\nif __name__ == \"__main__\":\n    assert rotations_in_circularly_sorted_array([4, 5, 6, 7, 0, 1, 2]) == 2\n    assert rotations_in_circularly_sorted_array([4, 5, 6, 7, 0, 1, 2, 3]) == 0\n    assert rotations_in_circularly_sorted_array([1, 2, 3, 4, 5, 6, 7]) == 0\n    assert rotations_in_circularly_sorted_array([1, 3, 5, 7, 2, 4, 6]) == 3\n    assert rotations_in_circularly_sorted_array([5, 6, 7, 1, 2, 3, 4]) == 3\n    assert rotations_in_circularly_sorted_array([7, 1, 2, 3, 4, 5, 6]) == 6\n    assert rotations_in_circularly_sorted_array([6, 5, 4, 3, 2, 1, 7]) == 6\n    assert rotations_in_circularly_sorted_array([1, 7, 2, 3, 4, 5, 6]) == 0"
    },
    {
      "rank": 19,
      "score": 8.72942740120875,
      "candidate": "from typing import List\n\n\ndef number_of_rotations(array: List[int]) -> int:\n    \"\"\"\n    Return the number of rotations in the array.\n    \"\"\"\n    if not array:\n        return 0\n\n    start, end = 0, len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid < end and array[mid] > array[mid + 1]:\n            return mid + 1\n        if mid > start and array[mid] < array[mid - 1]:\n            return mid\n\n        if array[start] < array[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    assert number_of_rotations([3, 4, 5, 6, 1, 2]) == 3\n    assert number_of_rotations([3, 4, 5, 6, 1, 2, 0]) == 6\n    assert number_of_rotations([1, 2, 3, 4, 5, 6, 0]) == 0\n    assert number_of_rotations([1, 2, 3, 4, 5, 6]) == 0"
    },
    {
      "rank": 20,
      "score": 8.713582011534427,
      "candidate": "def rotations(arr):\n    \"\"\"\n    :param arr: list of numbers\n    :return: number of rotations\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return high\n\n\nprint(rotations([4, 5, 6, 7, 8, 9, 10, 1, 2, 3]))"
    },
    {
      "rank": 21,
      "score": 8.68317086362227,
      "candidate": "def circular_rotation_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(circular_rotation_search(arr, 6))\n    print(circular_rotation_search(arr, 1))\n    print(circular_rotation_search(arr, 2))\n    print(circular_rotation_search(arr, 3))\n    print(circular_rotation_search(arr, 4))\n    print(circular_rotation_search(arr, 5))\n    print(circular_rotation_search(arr, 7))\n    print(circular_rotation_search(arr, 8))\n    print(circular_rotation_search(arr, 9))"
    },
    {
      "rank": 22,
      "score": 8.60975157251654,
      "candidate": "def find_rotations(arr):\n    if len(arr) < 2:\n        return len(arr)\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        elif arr[mid] < arr[end]:\n            end = mid\n        else:\n            return end\n\n    return start\n\n\n\nif __name__ == \"__main__\":\n    print(find_rotations([1, 2, 3, 4, 5, 6, 7]))\n    print(find_rotations([4, 5, 6, 7, 1, 2, 3]))\n    print(find_rotations([3, 4, 5, 6, 7, 1, 2]))\n    print(find_rotations([3, 4, 5, 6, 7, 1]))"
    },
    {
      "rank": 23,
      "score": 8.603564295465404,
      "candidate": "def circular_sorted_array(array):\n    if len(array) <= 1:\n        return 0\n\n    start = 0\n    end = len(array) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n\n        if array[mid] > array[end]:\n            start = mid + 1\n        else:\n            end = mid\n\n    if start == 0 and array[0] > array[len(array) - 1]:\n        return len(array) - 1\n    return len(array) - start - 1\n\n\nif __name__ == \"__main__\":\n    print(circular_sorted_array([1, 2, 3, 4, 5, 6, 7]))\n    print(circular_sorted_array([4, 5, 6, 7, 1, 2, 3]))\n    print(circular_sorted_array([1, 3, 5, 7]))\n    print(circular_sorted_array([2, 3, 6, 9, 11, 15, 19, 22]))"
    },
    {
      "rank": 24,
      "score": 8.601573975909613,
      "candidate": "def count_rotations(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) < 1:\n        return 0\n\n    low = 0\n    high = len(nums) - 1\n    mid = 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] > nums[mid + 1]:\n            return mid + 1\n        elif nums[mid] < nums[mid - 1]:\n            return mid\n        elif nums[mid] > nums[high]:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n\n# test\nnums = [3, 4, 5, 6, 7, 0, 1, 2]\nprint(count_rotations(nums))"
    },
    {
      "rank": 25,
      "score": 8.589094932694707,
      "candidate": "from typing import List\n\n\ndef number_of_rotations(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(array) <= 1:\n        return 0\n\n    left, right = 0, len(array) - 1\n    while left < right:\n        if array[left] < array[right]:\n            return left\n        elif array[left] > array[right]:\n            return 0\n        left += 1\n        right -= 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert number_of_rotations([15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14]) == 3\n    assert number_of_rotations([4, 5, 7, 10, 1, 3, 4, 5, 7, 10, 14, 15, 16, 19, 20, 25]) == 0\n    assert number_of_rotations([5, 1, 3]) == -1"
    },
    {
      "rank": 26,
      "score": 8.536344426246536,
      "candidate": "def circular_rotation_search(input_list, number):\n    \"\"\"\n    :param input_list: list of integers with sorted elements\n    :param number: integer to be found in the list\n    :return: integer, index at which number is present, -1 otherwise\n    \"\"\"\n    if not input_list:\n        return -1\n\n    low = 0\n    high = len(input_list) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if input_list[mid] == number:\n            return mid\n\n        # if left half is sorted\n        if input_list[low] <= input_list[mid]:\n            # if number is in left half\n            if input_list[low] <= number <= input_list[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        # if right half is sorted\n        else:\n            # if number is in right half\n            if input_list[mid] <= number <= input_list[high]:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n    return -1\n\n\nprint(circular_rotation_search([1, 2, 3, 4, 5, 6, 7], 4))\nprint(circular_rotation_search([1, 2, 3, 4, 5, 6, 7], 1))\nprint(circular_rotation_search([1, 2, 3, 4, 5, 6, 7], 7))\nprint(circular_rotation_search([4, 5, 6, 7, 1, 2, 3], 1))\nprint(circular_rotation_search([4, 5, 6, 7, 1, 2, 3], 3))\nprint(circular_rotation_search([4, 5, 6, 7, 1, 2, 3], 2))\nprint(circular_rotation_search([4, 5, 6, 7, 1, 2, 3], 7))"
    },
    {
      "rank": 27,
      "score": 8.519846488168032,
      "candidate": "def number_rotations(arr):\n    if arr[0] > arr[-1]:\n        return len(arr)\n    else:\n        return find_min(arr)\n\n\ndef find_min(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        if mid < end and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        elif mid > start and arr[mid] < arr[mid - 1]:\n            return mid\n        elif arr[start] < arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return 0\n\n\nif __name__ == '__main__':\n    assert number_rotations([1, 2, 3, 4, 5]) == 0\n    assert number_rotations([2, 3, 4, 5, 6, 7, 1]) == 3\n    assert number_rotations([5, 6, 7, 1, 2, 3, 4]) == 3\n    assert number_rotations([4, 5, 6, 7, 1, 2, 3]) == 0\n    assert number_rotations([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert number_rotations([4, 5, 6, 7, 8, 1, 2, 3]) == 5\n    assert number_rotations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n    assert number_rotations([5, 6, 7, 8, 9, 10, 1, 2, 3, 4]) == 1\n    assert number_rotations([2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 0\n    assert number_rotations"
    },
    {
      "rank": 28,
      "score": 8.493250383916786,
      "candidate": "def circular_sorted_array(arr):\n    if len(arr) == 0:\n        return 0\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            high = mid\n        else:\n            low = mid + 1\n    if low == 0 and arr[low] > arr[high]:\n        return len(arr)\n    if low == len(arr) - 1 and arr[low] < arr[high]:\n        return 0\n    return len(arr) - 1 - low\n\nprint(circular_sorted_array([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 29,
      "score": 8.48274515446924,
      "candidate": "def circular_sorted_array(arr):\n    if not arr:\n        return 0\n\n    left, right = 0, len(arr)-1\n    while left <= right:\n        if arr[left] <= arr[right]:\n            return right-left\n        mid = (left + right) // 2\n        next_left = mid + 1\n        next_right = mid - 1\n        if arr[mid] <= arr[next_left] and arr[mid] <= arr[next_right]:\n            return mid\n        elif arr[mid] <= arr[right]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n\nprint(circular_sorted_array([13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(circular_sorted_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(circular_sorted_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(circular_sorted_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(circular_sorted_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))"
    },
    {
      "rank": 30,
      "score": 8.47415685450713,
      "candidate": "from typing import List\n\n\ndef number_of_rotations(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n\n    if not array:\n        return 0\n\n    if len(array) == 1:\n        return 0\n\n    # find the index of the smallest element\n    pivot_index = 0\n\n    for i in range(1, len(array)):\n        if array[i] < array[pivot_index]:\n            pivot_index = i\n\n    # find the number of rotations\n    rotations = 0\n    for i in range(len(array)):\n        if array[(i + pivot_index) % len(array)] > array[pivot_index]:\n            break\n        rotations += 1\n\n    return rotations\n\n\nif __name__ == \"__main__\":\n    assert number_of_rotations([1, 2, 3, 4, 5, 6, 7]) == 0\n    assert number_of_rotations([4, 5, 6, 7, 1, 2, 3]) == 3\n    assert number_of_rotations([7, 1, 2, 3, 4, 5, 6]) == 6"
    },
    {
      "rank": 31,
      "score": 8.438505665559754,
      "candidate": "from timeit import timeit\n\n\ndef circular_rotation_index(array, target):\n    if not array:\n        return -1\n    low, high = 0, len(array) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] >= array[low]:\n            if target >= array[low] and target < array[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            if target <= array[high] and target > array[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return -1\n\n\ndef circular_rotation_index_2(array, target):\n    if not array:\n        return -1\n    low, high = 0, len(array) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] >= array[low]:\n            if target >= array[low] and target < array[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            if target <= array[high] and target > array[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(timeit(lambda: circular_rotation_index([1, 2, 3, 4, 5, 6, 7], 6), number=10000))  # 0.0005472160005547236\n    print(timeit(lambda: circular_rotation_index_2([1, 2, 3, 4, 5, 6, 7], 6), number=10000))  # 0.0005869790003059015"
    },
    {
      "rank": 32,
      "score": 8.412759990949098,
      "candidate": "def number_of_rotations(arr):\n    if not arr or len(arr) == 1:\n        return 0\n    if arr[0] < arr[-1]:\n        return 0\n    elif arr[0] > arr[-1]:\n        return len(arr) - 1\n    else:\n        return number_of_rotations(arr[:-1]) + 1\n\n\nif __name__ == \"__main__\":\n    print(number_of_rotations([4, 5, 6, 7, 0, 1, 2]))"
    },
    {
      "rank": 33,
      "score": 8.39355920019362,
      "candidate": "def circular_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    left = 0\n    right = n - 1\n    while left < right:\n        if arr[left] < arr[right]:\n            return right - left\n        elif arr[left] > arr[right]:\n            return 0\n        left += 1\n        right -= 1\n    return 0\n\n\nassert circular_rotation([1, 2, 3, 4, 5, 6, 7]) == 0\nassert circular_rotation([7, 1, 2, 3, 4, 5, 6]) == 3\nassert circular_rotation([4, 5, 6, 7, 1, 2, 3]) == 4\nassert circular_rotation([6, 7, 1, 2, 3, 4, 5]) == 1\nassert circular_rotation([3, 4, 5, 6, 7, 1, 2]) == 2"
    },
    {
      "rank": 34,
      "score": 8.362754494712366,
      "candidate": "def rotated_array(arr, x):\n    start = 0\n    end = len(arr) - 1\n    mid = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            end = mid - 1\n        elif arr[mid] < x:\n            start = mid + 1\n    return -1\n\nif __name__ == \"__main__\":\n    print(rotated_array([11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))"
    },
    {
      "rank": 35,
      "score": 8.345102872230369,
      "candidate": "from typing import List\n\n\ndef number_of_rotations(array: List[int]) -> int:\n    \"\"\"\n    Find the number of rotations in a circularly sorted array.\n    The array is sorted in ascending order and the last element is\n    larger than the first.\n    \"\"\"\n    if len(array) <= 1:\n        return 0\n\n    pivot = array[0]\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if pivot <= array[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return len(array) - left - 1\n\n\nif __name__ == \"__main__\":\n    assert number_of_rotations([15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14]) == 5"
    },
    {
      "rank": 36,
      "score": 8.341416959566176,
      "candidate": "def count_rotations(arr):\n    if len(arr) == 0:\n        return 0\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        mid_left = (mid - 1) % len(arr)\n        mid_right = (mid + 1) % len(arr)\n\n        if (arr[mid_left] <= arr[mid] <= arr[mid_right]) or (arr[mid_left] >= arr[mid] >= arr[mid_right]):\n            return mid + 1\n        elif arr[mid_left] <= arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(count_rotations([4, 5, 6, 7, 0, 1, 2]))"
    },
    {
      "rank": 37,
      "score": 8.316099194535402,
      "candidate": "from typing import List\n\n\ndef find_number_rotations(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    low, high = 0, len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n\n\nif __name__ == \"__main__\":\n    assert find_number_rotations([16, 28, 60, 64, 66, 70, 93]) == 5\n    assert find_number_rotations([5, 6, 7, 8, 9]) == 0\n    assert find_number_rotations([6, 7, 8, 9, 10]) == 4\n    assert find_number_rotations([10, 11, 12, 13, 14]) == 0\n    assert find_number_rotations([4, 5, 6, 7, 8]) == 0"
    },
    {
      "rank": 38,
      "score": 8.312881210239462,
      "candidate": "def rotations(array):\n    \"\"\"\n    :param: array - array of integers\n    return: number of rotations\n    \"\"\"\n    # Find the middle of the array\n    # mid = len(array) // 2\n    # # Check if the middle element is the minimum element in the array\n    # if array[mid] <= array[-1]:\n    #     return 0\n    #\n    # # Find the minimum element in the second half of the array\n    # min_elem_2 = array[mid + 1]\n    # for i in range(mid + 1, len(array)):\n    #     if array[i] < min_elem_2:\n    #         min_elem_2 = array[i]\n    #\n    # # Find the first occurrence of the min_elem_2 in the second half of the array\n    # for i in range(mid + 1, len(array)):\n    #     if array[i] == min_elem_2:\n    #         return i - mid - 1\n    #\n    # return 0\n\n    def find_min(array, start):\n        \"\"\"\n        :param: array - array of integers\n        :param: start - starting index of the array\n        return: minimum element of the array\n        \"\"\"\n        if start == len(array) - 1:\n            return array[start]\n\n        # Check if the middle element is the minimum element in the array\n        mid = len(array) // 2\n        if array[mid] <= array[-1]:\n            return array[mid]\n\n        # Find the minimum element in the second half of the array\n        min_elem_2 = array[mid + 1]\n        for i in range(mid + 1, len(array)):\n            if array[i] < min_elem_2:\n                min_elem_2 = array[i]\n\n        # Find the first occurrence of the min_elem_2 in the second half of the array\n        for i in range(mid + 1, len(array)):\n            if array[i] == min_elem_2:\n                return min_elem_2\n\n        return find_min(array, mid + 1)"
    },
    {
      "rank": 39,
      "score": 8.311958818385158,
      "candidate": "def number_of_rotation(arr):\n    if len(arr) < 2:\n        return 0\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < end and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        if mid > start and arr[mid] < arr[mid - 1]:\n            return mid\n        elif arr[start] < arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(number_of_rotation([6, 7, 8, 9, 10, 1, 2, 3, 4]))\n    print(number_of_rotation([4, 5, 6, 7, 8, 1, 2, 3]))\n    print(number_of_rotation([3, 4, 5, 6, 7, 1, 2]))\n    print(number_of_rotation([3, 4, 5, 6, 7, 1]))\n    print(number_of_rotation([3, 4, 5, 6, 7]))\n    print(number_of_rotation([3, 4, 5, 6, 7]))\n    print(number_of_rotation([3, 4, 5, 6, 7]))\n    print(number_of_rotation([3, 4, 5, 6, 7]))\n    print(number_of_rotation([3, 4, 5, 6, 7]))\n    print(number_of_rotation([3, 4, 5, 6, 7]))\n    print(number_of_rotation([3, 4, 5, 6, 7]))"
    },
    {
      "rank": 40,
      "score": 8.21640554840404,
      "candidate": "def number_of_rotations(array):\n    \"\"\"\n    :param array: list[int]\n    :return: int\n    \"\"\"\n    if not array:\n        return 0\n\n    if len(array) == 1:\n        return 0\n\n    pivot = 0\n    while pivot < len(array) - 1 and array[pivot] < array[pivot + 1]:\n        pivot += 1\n\n    if pivot == len(array) - 1:\n        return 0\n\n    return len(array) - pivot - 1\n\n\nif __name__ == '__main__':\n    print(number_of_rotations([5, 6, 7, 1, 2, 3, 4]))"
    },
    {
      "rank": 41,
      "score": 8.204916045653365,
      "candidate": "def circular_sorted(arr):\n    low = 0\n    high = len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    if low == 0:\n        return len(arr) - 1\n    else:\n        return len(arr) - low\n\n\nprint(circular_sorted([16, 2, 3, 4, 5, 7, 10, 11, 12]))"
    },
    {
      "rank": 42,
      "score": 8.197037931578416,
      "candidate": "def count_rotations(arr):\n    if len(arr) == 1:\n        return 0\n\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = start + (end - start) // 2\n        mid_next = (mid + 1) % len(arr)\n        mid_prev = (mid - 1 + len(arr)) % len(arr)\n\n        if arr[mid] <= arr[mid_next]:\n            end = mid\n        elif arr[mid_prev] <= arr[mid]:\n            start = mid\n        else:\n            return len(arr) - mid - 1\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    arr = [5, 6, 7, 1, 2, 3, 4]\n    print(count_rotations(arr))\n\n    arr = [1, 2, 3, 4, 5]\n    print(count_rotations(arr))\n\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(count_rotations(arr))\n\n    arr = [4, 5, 6, 7, 1, 2, 3]\n    print(count_rotations(arr))"
    },
    {
      "rank": 43,
      "score": 8.17969353506351,
      "candidate": "def number_of_rotation(array):\n    if len(array) < 2:\n        return 0\n\n    start = 0\n    end = len(array) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n\n        if array[mid] < array[start]:\n            end = mid\n        elif array[mid] > array[start]:\n            start = mid\n        else:\n            start += 1\n\n    return len(array) - start\n\ndef main():\n    print(\"Number of rotation: \" + str(number_of_rotation([4,5,6,7,8,9,1])))\n    print(\"Number of rotation: \" + str(number_of_rotation([4,5,6,7,8,9,0])))\n    print(\"Number of rotation: \" + str(number_of_rotation([0,1,2,3,4,5,6])))\n    print(\"Number of rotation: \" + str(number_of_rotation([1,2,3,4,5,6,7])))\n\n\nmain()\n\n\"\"\"\nTime complexity is O(logn) because we are reducing the search space in every iteration\n\nSpace complexity is O(1)\n\"\"\""
    },
    {
      "rank": 44,
      "score": 8.16059175241819,
      "candidate": "def number_of_rotations(arr):\n    \"\"\"\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n\n    if not arr:\n        return 0\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid < right and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        if mid > left and arr[mid] < arr[mid - 1]:\n            return mid\n\n        if arr[left] < arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return 0\n\n\n# Test cases\nprint(number_of_rotations([1, 2, 3, 4, 5, 6, 7]))\nprint(number_of_rotations([2, 3, 4, 5, 6, 7, 8]))\nprint(number_of_rotations([4, 5, 6, 7, 8, 1, 2]))\nprint(number_of_rotations([5, 6, 7, 8, 1, 2, 3]))\nprint(number_of_rotations([4, 5, 6, 7, 8, 9, 1]))\nprint(number_of_rotations([5, 6, 7, 8, 9, 1, 2]))\nprint(number_of_rotations([5, 6, 7, 8, 9, 1, 2, 3]))\nprint(number_of_rotations([4, 5, 6, 7, 8, 9, 1, 2]))\nprint(number_of_rotations([4, 5, 6, 7, 8, 9, 1, 2, 3]))"
    },
    {
      "rank": 45,
      "score": 8.146598764309823,
      "candidate": "def find_rotations(arr):\n    left = 0\n    right = len(arr) - 1\n\n    if left == right:\n        return 0\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return right\n\n\nprint(find_rotations([1, 2, 3, 4, 5, 6, 7]))\nprint(find_rotations([4, 5, 6, 7, 1, 2, 3]))\nprint(find_rotations([7, 1, 2, 3, 4, 5, 6]))\nprint(find_rotations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint(find_rotations([18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))"
    },
    {
      "rank": 46,
      "score": 8.088707259171443,
      "candidate": "def circular_sorted_array(arr):\n    if len(arr) == 1:\n        return 0\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[right]:\n            right = mid\n        else:\n            left = mid + 1\n\n    return len(arr) - left - 1\n\n\nif __name__ == '__main__':\n    print(circular_sorted_array([10, 15, 3, 4, 5, 1, 2]))\n    print(circular_sorted_array([1, 3, 4, 5, 6, 7, 9, 12]))"
    },
    {
      "rank": 47,
      "score": 7.998798751497298,
      "candidate": "def circular_sorted_array_count_rotations(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[mid+1]:\n            return mid + 1\n        elif arr[mid] < arr[mid-1]:\n            return mid\n        elif arr[mid] > arr[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\nif __name__ == \"__main__\":\n    print(circular_sorted_array_count_rotations([5,6,7,9,10,1]))"
    },
    {
      "rank": 48,
      "score": 7.979051635703849,
      "candidate": "from typing import List\n\n\ndef circular_rotation(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(array) == 1:\n        return 0\n\n    if len(array) == 2:\n        return 1\n\n    start = 0\n    end = len(array) - 1\n\n    while start < end:\n        if array[start] < array[end]:\n            return start\n        elif array[start] > array[end]:\n            return 0\n        start += 1\n        end -= 1\n\n    return 1\n\n\nif __name__ == \"__main__\":\n    print(circular_rotation([1, 2, 3, 4, 5, 6, 7]))\n    print(circular_rotation([1, 2, 3, 4, 5, 6]))\n    print(circular_rotation([1, 2, 3, 4, 5]))\n    print(circular_rotation([1, 2, 3, 4]))\n    print(circular_rotation([2, 3, 4, 1]))\n    print(circular_rotation([3, 4, 1, 2]))\n    print(circular_rotation([4, 1, 2, 3]))"
    },
    {
      "rank": 49,
      "score": 7.957657055881792,
      "candidate": "def number_of_rotations(nums):\n    if len(nums) <= 1:\n        return 0\n    start = 0\n    end = len(nums) - 1\n    if nums[start] > nums[end]:\n        return 0\n    while start <= end:\n        if start == end:\n            return start\n        mid = (start + end) // 2\n        if nums[mid] > nums[mid + 1]:\n            return mid + 1\n        elif nums[mid] < nums[mid - 1]:\n            return mid\n        elif nums[mid] > nums[start]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(number_of_rotations([10, 15, 1, 3, 8]))"
    },
    {
      "rank": 50,
      "score": 7.91811352984895,
      "candidate": "def circular_array(arr):\n    start = 0\n    end = len(arr) - 1\n    mid = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] < arr[mid + 1]:\n            return mid + 1\n        elif arr[mid] > arr[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return len(arr)\n\n\nif __name__ == \"__main__\":\n    print(circular_array([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 51,
      "score": 7.907273238457195,
      "candidate": "def circular_array_rotation(arr, k):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr.index(max(arr)) + 1"
    },
    {
      "rank": 52,
      "score": 7.817555242510524,
      "candidate": "def circular_sorted_array(arr):\n    \"\"\"\n    :param arr: list - a list of integers\n    :return: int - an integer representing the number of rotations\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # find the middle element\n    middle = len(arr) // 2\n    if len(arr) % 2 == 0:\n        middle_left = arr[middle - 1]\n        middle_right = arr[middle]\n    else:\n        middle_left = arr[middle - 1]\n        middle_right = arr[middle]\n\n    # find the middle element in the array\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == middle_left:\n            return mid\n        if arr[mid] >= middle_left and arr[mid] <= middle_right:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\nprint(circular_sorted_array([3, 4, 5, 6, 7, 1, 2]))\nprint(circular_sorted_array([1, 2, 3, 4, 5, 6, 7]))\nprint(circular_sorted_array([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(circular_sorted_array([2, 3, 4, 5, 6, 7, 8, 1]))\nprint(circular_sorted_array([2, 3, 4, 5, 6, 7, 8, 1, 9]))"
    },
    {
      "rank": 53,
      "score": 7.793894768682777,
      "candidate": "from typing import List\n\n\ndef count_rotations(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    def binary_search(arr: List[int], left: int, right: int, value: int) -> int:\n        if left > right:\n            return -1\n\n        mid = (left + right) // 2\n\n        if arr[mid] == value:\n            return mid\n\n        if arr[mid] < value:\n            return binary_search(arr, mid + 1, right, value)\n        return binary_search(arr, left, mid - 1, value)\n\n    if not arr:\n        return 0\n\n    pivot = binary_search(arr, 0, len(arr) - 1, arr[-1])\n\n    if pivot == -1:\n        return 0\n\n    if pivot == len(arr) - 1:\n        return len(arr)\n\n    if arr[pivot] < arr[pivot + 1]:\n        return len(arr) - pivot - 1\n    return pivot\n\n\nif __name__ == \"__main__\":\n    assert count_rotations([3, 4, 5, 6, 1, 2]) == 4\n    assert count_rotations([4, 5, 6, 1, 2, 3]) == 1\n    assert count_rotations([1, 2, 3, 4, 5, 6]) == 0"
    },
    {
      "rank": 54,
      "score": 7.68548059813871,
      "candidate": "def circular_rotations(arr):\n    if len(arr) <= 1:\n        return len(arr)\n\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] <= arr[end]:\n            end = mid\n        else:\n            start = mid + 1\n\n    return len(arr) - end - 1\n\n\nif __name__ == \"__main__\":\n    print(circular_rotations([1, 2, 3, 4, 5, 6]))\n    print(circular_rotations([2, 3, 4, 5, 6, 1]))\n    print(circular_rotations([1, 3, 4, 6, 7, 9, 11, 12]))"
    },
    {
      "rank": 55,
      "score": 7.582189589937343,
      "candidate": "def circular_rotation_number(arr):\n    if not arr:\n        return 0\n\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        if arr[start] < arr[end]:\n            return end - start\n\n        start += 1\n        end -= 1\n\n    return len(arr) - 1\n\n\nif __name__ == '__main__':\n    print(circular_rotation_number([1, 2, 3, 4, 5, 6, 7]))\n    print(circular_rotation_number([4, 5, 6, 7, 1, 2, 3]))\n    print(circular_rotation_number([6, 7, 1, 2, 3, 4, 5]))"
    },
    {
      "rank": 56,
      "score": 7.569914122020052,
      "candidate": "def circular_array_rotation(array, k):\n    \"\"\"\n    :param array: list of numbers\n    :param k: number of rotations\n    :return: number of rotations\n    \"\"\"\n\n    if k == 0:\n        return 0\n\n    if k >= len(array):\n        k = k % len(array)\n\n    return k\n\n\nif __name__ == \"__main__\":\n    print(circular_array_rotation([1, 2, 3, 4, 5, 6], 7))\n    print(circular_array_rotation([1, 2, 3, 4, 5, 6], 1))\n    print(circular_array_rotation([1, 2, 3, 4, 5, 6], 0))\n    print(circular_array_rotation([1, 2, 3, 4, 5, 6], 2))\n    print(circular_array_rotation([1, 2, 3, 4, 5, 6], 3))\n    print(circular_array_rotation([1, 2, 3, 4, 5, 6], 4))\n    print(circular_array_rotation([1, 2, 3, 4, 5, 6], 5))\n    print(circular_array_rotation([1, 2, 3, 4, 5, 6], 6))"
    },
    {
      "rank": 57,
      "score": 3.6948536388232522,
      "candidate": "from typing import List\n\n\ndef rotated_array_search(input_list: List[int], number: int) -> int:\n    \"\"\"\n    Find the number of rotations in a circularly sorted array.\n\n    :param input_list: List - the array to search.\n    :param number: int - the number to search for.\n    :return: int - the index of the number if found, or -1 if not.\n\n    >>> assert rotated_array_search([6, 7, 8, 9, 10, 1, 2, 3, 4], 6) == 0\n    >>> assert rotated_array_search([6, 7, 8, 9, 10, 1, 2, 3, 4], 1) == 5\n    >>> assert rotated_array_search([6, 7, 8, 1, 2, 3, 4], 8) == 2\n    >>> assert rotated_array_search([6, 7, 8, 1, 2, 3, 4], 7) == 1\n    >>> assert rotated_array_search([6, 7, 8, 1, 2, 3, 4], 1) == 3\n    >>> assert rotated_array_search([6, 7, 8, 1, 2, 3, 4], 10) == -1\n    >>> assert rotated_array_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == 7\n    \"\"\"\n    if not input_list:\n        return -1\n\n    if len(input_list) == 1:\n        return 0 if input_list[0] == number else -1\n\n    if len(input_list) == 2:\n        return 0 if input_list[0] == number or input_list[1] == number else -1\n\n    if input_list[0] < input_list[-1]:\n        return binary_search(input_list, number)\n\n    return binary_search(input_list, number,"
    },
    {
      "rank": 58,
      "score": 3.6767360892450265,
      "candidate": "def circular_rotation_count(arr):\n    if len(arr) <= 1:\n        return len(arr)\n\n    if arr[0] <= arr[-1]:\n        return 0\n\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        if arr[mid] < arr[mid - 1]:\n            end = mid\n        elif arr[mid] > arr[mid + 1]:\n            start = mid + 1\n        else:\n            return 2 * (len(arr) - mid - 1)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    assert circular_rotation_count([1, 2, 3, 4, 5, 6, 7]) == 0\n    assert circular_rotation_count([4, 5, 6, 7, 1, 2, 3]) == 5\n    assert circular_rotation_count([6, 7, 1, 2, 3, 4, 5]) == 10"
    },
    {
      "rank": 59,
      "score": 3.670133136819531,
      "candidate": "from timeit import timeit\n\n\ndef circular_rotation(arr: list, n: int) -> int:\n    \"\"\"\n    Finds the number of rotations in a circularly sorted array.\n    :param arr: The array to be sorted.\n    :param n: The length of the array.\n    :return: The number of rotations in the array.\n    >>> circular_rotation([4, 5, 6, 7, 8, 9], 6)\n    0\n    >>> circular_rotation([8, 9, 1, 2, 3, 4], 6)\n    1\n    >>> circular_rotation([6, 7, 8, 9, 1, 2], 6)\n    2\n    >>> circular_rotation([2, 3, 4, 5, 6, 7], 6)\n    3\n    >>> circular_rotation([2, 3, 4, 5, 6, 7], 0)\n    3\n    >>> circular_rotation([6, 7, 8, 9, 1, 2], 0)\n    2\n    >>> circular_rotation([8, 9, 1, 2, 3, 4], 0)\n    1\n    >>> circular_rotation([4, 5, 6, 7, 8, 9], 0)\n    0\n    \"\"\"\n    if n <= 1:\n        return n\n\n    left = 0\n    right = n - 1\n\n    # if the array is already sorted\n    if arr[left] < arr[right]:\n        return 0\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] > arr[mid + 1]:\n            return mid + 1\n        elif arr[mid] < arr[left]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n\nif __name__ == \"__main__\":\n    print(timeit(lambda: circular_rotation([6, 7, 8, 9, 1, 2], 6), number"
    },
    {
      "rank": 60,
      "score": 3.650273379686267,
      "candidate": "def circular_sorted_array_rotations(array):\n    if len(array) == 0:\n        return 0\n    if len(array) == 1:\n        return 0\n    if array[0] > array[-1]:\n        return 0\n    if array[0] < array[-1]:\n        return 1\n\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            return i\n\n\nif __name__ == \"__main__\":\n    assert circular_sorted_array_rotations([1, 2, 3, 4, 5]) == 1\n    assert circular_sorted_array_rotations([1, 2, 3, 4, 5, 6]) == 1\n    assert circular_sorted_array_rotations([5, 1, 2, 3, 4]) == 4\n    assert circular_sorted_array_rotations([1, 2, 3, 4, 5, 6, 7]) == 2\n    assert circular_sorted_array_rotations([4, 5, 6, 7, 1, 2, 3]) == 5\n    assert circular_sorted_array_rotations([1, 2, 3, 4, 5, 6, 7, 8]) == 0\n    assert circular_sorted_array_rotations([8, 7, 6, 5, 4, 3, 2, 1]) == 0\n    assert circular_sorted_array_rotations([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\n    assert circular_sorted_array_rotations([3, 4, 5, 6, 7, 8, 9, 1, 2]) == 0"
    },
    {
      "rank": 61,
      "score": 3.6448854583254837,
      "candidate": "def find_rotation_point(arr):\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] < arr[start]:\n            end = mid\n        else:\n            start = mid + 1\n\n    return start\n\n\ndef number_of_rotations(arr):\n    \"\"\"\n    Find the number of rotations in the array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    rotation_index = find_rotation_point(arr)\n    return len(arr) - rotation_index\n\n\ndef test_rotation_point():\n    assert find_rotation_point([1, 2, 3, 4, 5]) == 0\n    assert find_rotation_point([4, 5, 6, 1, 2]) == 3\n    assert find_rotation_point([6, 1, 2, 3, 4, 5]) == 1\n    assert find_rotation_point([5, 6, 1, 2, 3, 4]) == 2\n\n\ndef test_number_of_rotations():\n    assert number_of_rotations([1, 2, 3, 4, 5]) == 0\n    assert number_of_rotations([4, 5, 6, 1, 2]) == 2\n    assert number_of_rotations([6, 1, 2, 3, 4, 5]) == 1\n    assert number_of_rotations([5, 6, 1, 2, 3, 4]) == 2\n\n\nif __name__ == \"__main__\":\n    test_rotation_point()\n    test_number_of_rotations()"
    },
    {
      "rank": 62,
      "score": 3.596745612571162,
      "candidate": "def circular_rotation_count(array):\n    \"\"\"\n    :param: array - list of integers which have been sorted in a circular\n    fashion\n    :returns: integer representing the number of rotations\n    :rtype: int\n    \"\"\"\n    if len(array) < 1:\n        return 0\n\n    # Find the index of the minimum element\n    index = 0\n    for i in range(1, len(array)):\n        if array[i] < array[index]:\n            index = i\n\n    # Find the index of the maximum element\n    max_index = index\n    for i in range(index + 1, len(array)):\n        if array[i] > array[max_index]:\n            max_index = i\n\n    # Find the index of the minimum element\n    min_index = index\n    for i in range(index - 1, -1, -1):\n        if array[i] < array[min_index]:\n            min_index = i\n\n    # If the minimum element is greater than the maximum element,\n    # then the array is in a single rotation.\n    if min_index > max_index:\n        return 1\n\n    # If the minimum element is less than the maximum element,\n    # then the array is in multiple rotations\n    return max_index - min_index + 1\n\n\ndef test_rotation_count(array, expected):\n    \"\"\"\n    :param: array - list of integers which have been sorted in a circular\n    fashion\n    :returns: integer representing the number of rotations\n    :rtype: int\n    \"\"\"\n    assert circular_rotation_count(array) == expected\n\n\ntest_rotation_count([4, 5, 7, 9, 10, 11, 12, 1, 2, 3, 6], 5)\ntest_rotation_count([4, 5, 7, 9, 10, 1, 2, 3, 6], 4)\ntest_rotation_count([1, 2, 3, 4, 5, 6, 7], 0)\ntest_rotation_count"
    },
    {
      "rank": 63,
      "score": 3.465133779536323,
      "candidate": "from typing import List\n\n\ndef rotations(array: List[int]) -> int:\n    \"\"\"\n    In a circularly sorted array, the number of rotations is equal to the\n    difference between the index of the first element and the index of the\n    last element.\n    \"\"\"\n    if len(array) < 2:\n        return 0\n\n    return len(array) - 1 - (array.index(min(array)) - array.index(max(array)))\n\n\nif __name__ == \"__main__\":\n    assert rotations([5, 6, 7, 1, 2, 3]) == 3\n    assert rotations([1, 2, 3, 4, 5, 6, 7]) == 0\n    assert rotations([7, 1, 2, 3, 4, 5, 6]) == 6"
    },
    {
      "rank": 64,
      "score": 3.4536397898982183,
      "candidate": "from typing import List\n\n\ndef circular_rotation(arr: List[int]) -> int:\n    \"\"\"\n    Return the number of rotations in a circularly sorted array.\n    \"\"\"\n\n    def helper(arr, left, right, target):\n        if left > right:\n            return -1\n\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        if arr[left] <= arr[mid]:\n            if arr[left] <= target <= arr[mid]:\n                return helper(arr, left, mid - 1, target)\n            else:\n                return helper(arr, mid + 1, right, target)\n\n        if arr[mid] <= target <= arr[right]:\n            return helper(arr, mid + 1, right, target)\n        else:\n            return helper(arr, left, mid - 1, target)\n\n    return helper(arr, 0, len(arr) - 1, arr[0])\n\n\nif __name__ == \"__main__\":\n    assert circular_rotation([10, 15, 3, 5, 13]) == 2\n    assert circular_rotation([10, 15, 3, 5, 14]) == 3"
    },
    {
      "rank": 65,
      "score": 3.4415544750724907,
      "candidate": "def rotated_array_search(input_list, number):\n    \"\"\"\n    Find the number of rotations in a circularly sorted array.\n\n    Args:\n       input_list(array), number(int): Input array to search and the target\n    Returns:\n       int: Number of rotations in a circularly sorted array\n    \"\"\"\n    if not input_list:\n        return -1\n\n    if len(input_list) == 1:\n        return 0\n\n    middle = len(input_list) // 2\n\n    if input_list[middle] > input_list[-1]:\n        rotations = len(input_list) - 1 - input_list[middle:].index(number)\n    else:\n        if input_list[middle] == number:\n            return 0\n        elif input_list[middle] > number:\n            rotations = input_list[:middle].index(number)\n        else:\n            rotations = len(input_list) - 1 - input_list[middle:].index(number)\n\n    return rotations\n\n\ndef linear_search(input_list, number):\n    for index, element in enumerate(input_list):\n        if element == number:\n            return index\n    return -1\n\n\ndef verify_rotated_array_search(input_list, number):\n    rotations = rotated_array_search(input_list, number)\n    result = linear_search(input_list, number)\n    if rotations == result:\n        print(\"Rotation: {}\".format(rotations))\n        return True\n    return False\n\n\ndef test_function(test_case):\n    input_list = test_case[0]\n    number = test_case[1]\n    if verify_rotated_array_search(input_list, number) is True:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[6, 7, 8, 9, 10, 1, 2, 3, 4], 6])\ntest_function([[6, 7, 8, 9, 10, 1, 2"
    },
    {
      "rank": 66,
      "score": 3.4097632524111274,
      "candidate": "from typing import List\n\n\ndef circular_rotations(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not array:\n        return 0\n\n    index = 0\n    while True:\n        if array[index] < array[index - 1]:\n            break\n        index += 1\n\n    return index\n\n\nif __name__ == \"__main__\":\n    assert circular_rotations([2, 3, 4, 5, 1]) == 3\n    assert circular_rotations([2, 3, 4, 5, 6, 1]) == 0\n    assert circular_rotations([1, 2, 3, 4, 5]) == 0\n    assert circular_rotations([5, 1, 2, 3, 4]) == 4"
    },
    {
      "rank": 67,
      "score": 3.3616371019250986,
      "candidate": "def circular_rotation(arr):\n    if not arr:\n        return 0\n\n    start, end = 0, len(arr) - 1\n    while start < end:\n        if arr[start] < arr[end]:\n            return end - start\n        mid = start + (end - start) // 2\n        if arr[mid] < arr[start]:\n            end = mid\n        elif arr[mid] > arr[start]:\n            start = mid + 1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert circular_rotation(arr) == 0\n\n    arr = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert circular_rotation(arr) == 1\n\n    arr = [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n    assert circular_rotation(arr) == 5\n\n    arr = [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    assert circular_rotation(arr) == 2\n\n    arr = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\n    assert circular_rotation(arr) == 3\n\n    arr = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert circular_rotation(arr) == 4\n\n    arr = [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n    assert circular_rotation(arr) == 0\n\n    arr = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert circular_rotation"
    },
    {
      "rank": 68,
      "score": 3.3575113618534473,
      "candidate": "from typing import List\n\n\ndef circular_rotation_count(arr: List[int]) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        if arr[left] < arr[right]:\n            return right - left + 1\n\n        mid = (left + right) // 2\n\n        if mid < right and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        elif mid > left and arr[mid - 1] > arr[mid]:\n            return mid\n        elif arr[left] < arr[mid]:\n            left = mid + 1\n        elif arr[mid] < arr[right]:\n            right = mid - 1\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    assert circular_rotation_count([1, 2, 3, 4, 5]) == 0\n    assert circular_rotation_count([4, 5, 6, 7, 8, 1, 2]) == 5\n    assert circular_rotation_count([6, 7, 8, 1, 2, 3, 4]) == 2"
    },
    {
      "rank": 69,
      "score": 3.33767128082728,
      "candidate": "def rotations(arr):\n    \"\"\"\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    start, end = 0, len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] < arr[start]:\n            end = mid\n        else:\n            start = mid + 1\n\n    return len(arr) - start\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_rotations(self):\n        self.assertEqual(rotations([1, 2, 3, 4, 5]), 0)\n        self.assertEqual(rotations([4, 5, 6, 7, 8, 1, 2]), 3)\n        self.assertEqual(rotations([4, 5, 6, 7, 8, 1, 2, 3]), 4)\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 70,
      "score": 3.2185542273249426,
      "candidate": "def count_rotations(arr):\n    if not arr:\n        return 0\n\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] <= arr[end]:\n            end = mid - 1\n        elif arr[mid] >= arr[start]:\n            start = mid + 1\n        else:\n            return mid\n    return 0\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([], 0),\n        ([1], 0),\n        ([1, 2], 0),\n        ([2, 1], 1),\n        ([1, 2, 3], 0),\n        ([3, 1, 2], 1),\n        ([2, 3, 1], 2),\n        ([3, 2, 1], 0),\n        ([1, 3, 2], 1),\n        ([1, 2, 3, 4, 5, 6, 7], 0),\n        ([4, 5, 6, 7, 1, 2, 3], 3),\n        ([7, 1, 2, 3, 4, 5, 6], 6),\n        ([6, 7, 1, 2, 3, 4, 5], 0),\n    ]\n    for test_case, exp in test_cases:\n        assert count_rotations(test_case) == exp"
    },
    {
      "rank": 71,
      "score": 3.159014066423702,
      "candidate": "def rotated_array_search(input_list, number):\n    \"\"\"\n    Find the number of rotations in a circularly sorted array.\n\n    Args:\n       input_list(array), number(int): Input array to search and the target\n    Returns:\n       int: Number of rotations\n    \"\"\"\n    if not input_list:\n        return 0\n\n    start_index = 0\n    end_index = len(input_list) - 1\n\n    while start_index < end_index:\n        mid_index = (start_index + end_index) // 2\n        if number > input_list[mid_index]:\n            start_index = mid_index + 1\n        else:\n            end_index = mid_index\n\n    start_index = start_index if start_index < end_index else end_index\n\n    if input_list[start_index] == number:\n        return start_index\n\n    if start_index == 0:\n        return -1\n\n    return start_index + (len(input_list) - 1 - start_index)\n\n\ndef linear_search(input_list, number):\n    \"\"\"\n    Find the number of rotations in a circularly sorted array.\n\n    Args:\n       input_list(array), number(int): Input array to search and the target\n    Returns:\n       int: Number of rotations\n    \"\"\"\n    for index, item in enumerate(input_list):\n        if item == number:\n            return index\n\n    return -1\n\n\ndef test_function(test_case):\n    input_list = test_case[0]\n    number = test_case[1]\n    if linear_search(input_list, number) == rotated_array_search(input_list, number):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[6, 7, 8, 9, 10, 1, 2, 3, 4], 6])\ntest_function([[6, 7, 8, 9, 10, 1, 2, 3, 4],"
    },
    {
      "rank": 72,
      "score": 3.151192047410123,
      "candidate": "from typing import List\n\n\ndef circular_array_rotation(arr: List[int], k: int, queries: List[int]) -> List[int]:\n    \"\"\"\n    >>> circular_array_rotation([1, 2, 3, 4, 5, 6, 7], 3, [2, 5, 6])\n    [2, 5, 6]\n    \"\"\"\n    k %= len(arr)\n    if k > 0:\n        arr = arr[k:] + arr[:k]\n\n    return [arr.index(i) for i in queries]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 3.1457559098175683,
      "candidate": "def circular_rotation(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    slow = fast = arr[0]\n\n    while fast != arr[-1]:\n        slow = arr[slow]\n        fast = arr[fast]\n\n    count = 0\n\n    if slow == fast:\n        fast = arr[0]\n        while fast != slow:\n            fast = arr[fast]\n            count += 1\n\n    return count\n\n\ndef test_circular_rotation():\n    assert circular_rotation([]) == 0\n    assert circular_rotation([1]) == 0\n    assert circular_rotation([1, 2]) == 0\n    assert circular_rotation([2, 1]) == 1\n    assert circular_rotation([2, 3, 1]) == 1\n    assert circular_rotation([3, 2, 1]) == 2\n    assert circular_rotation([1, 3, 2]) == 1\n    assert circular_rotation([3, 1, 2]) == 2\n    assert circular_rotation([1, 2, 3, 4, 5]) == 0\n    assert circular_rotation([5, 1, 2, 3, 4]) == 1\n    assert circular_rotation([4, 5, 1, 2, 3]) == 2\n    assert circular_rotation([3, 4, 5, 1, 2]) == 3\n    assert circular_rotation([2, 3, 4, 5, 1]) == 4"
    },
    {
      "rank": 74,
      "score": 3.14259694653371,
      "candidate": "def rotations(arr):\n    start, end = 0, len(arr) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n\n    return start\n\n\ndef test_rotations():\n    assert rotations([16, 28, 60, 64, 66, 70, 93, 128, 155, 163, 175, 188, 192]) == 5\n\n\nif __name__ == \"__main__\":\n    test_rotations()"
    },
    {
      "rank": 75,
      "score": 3.1382688263419203,
      "candidate": "def rotated_array_search(input_list, number):\n    \"\"\"\n    Find the number of rotations in a circularly sorted array.\n\n    Args:\n       input_list(array), number(int): Input array to search and the target\n    Returns:\n       int: Number of rotations in the input array\n    \"\"\"\n    if not input_list:\n        return 0\n\n    start, end = 0, len(input_list) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if input_list[mid] == number:\n            return mid + 1\n\n        if input_list[start] <= input_list[mid]:\n            if input_list[start] <= number < input_list[mid]:\n                end = mid - 1\n            else:\n                start = mid + 1\n        else:\n            if input_list[mid] <= number < input_list[end]:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return 0\n\n\ndef test_function(test_case):\n    input_list = test_case[0]\n    number = test_case[1]\n    solution = test_case[2]\n    output = rotated_array_search(input_list, number)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[6, 7, 8, 9, 10, 1, 2, 3, 4], 6, 0])\ntest_function([[6, 7, 8, 9, 10, 1, 2, 3, 4], 1, 5])\ntest_function([[6, 7, 8, 1, 2, 3, 4], 8, 0])\ntest_function([[6, 7, 8, 1, 2, 3, 4], 1, 3])\ntest_function([[6, 7, 8, 1, 2, 3, 4], 10, -1])\ntest"
    },
    {
      "rank": 76,
      "score": 3.106463399489055,
      "candidate": "def find_rotation_count(arr):\n    if len(arr) == 0:\n        return 0\n\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = start + (end - start) // 2\n\n        if mid < end and arr[mid] > arr[mid + 1]:\n            return mid + 1\n\n        if mid > start and arr[mid] < arr[mid - 1]:\n            return mid\n\n        if arr[start] < arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(find_rotation_count(arr))\n\n    arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]\n    print(find_rotation_count(arr))\n\n    arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61]\n    print(find_rotation_count(arr))\n\n    arr = [1, 3, 5, 7, 9, 11, 13, 15,"
    },
    {
      "rank": 77,
      "score": 3.0866189437824145,
      "candidate": "def number_of_rotations(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: int\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    start, end = 0, len(arr) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] < arr[start]:\n            end = mid\n        elif arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            return 0\n\n    return len(arr) - (end - start) - 1\n\n\ndef test_number_of_rotations():\n    assert number_of_rotations([1, 2, 3, 4, 5, 6]) == 0\n    assert number_of_rotations([3, 4, 5, 6, 1, 2]) == 3\n    assert number_of_rotations([5, 1, 2, 3, 4]) == 1\n\n\nif __name__ == '__main__':\n    test_number_of_rotations()"
    },
    {
      "rank": 78,
      "score": 3.040374741675621,
      "candidate": "def count_rotations(arr):\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] <= arr[end]:\n            end = mid\n        else:\n            start = mid + 1\n\n    return end\n\n\nassert count_rotations([1, 2, 3, 4, 5]) == 0\nassert count_rotations([2, 3, 4, 5, 6]) == 1\nassert count_rotations([4, 5, 6, 7, 8]) == 2\nassert count_rotations([5, 6, 7, 8, 9]) == 3\nassert count_rotations([6, 7, 8, 9, 10]) == 4\nassert count_rotations([7, 8, 9, 10, 11]) == 5\nassert count_rotations([8, 9, 10, 11, 12]) == 6\nassert count_rotations([9, 10, 11, 12, 13]) == 7\nassert count_rotations([10, 11, 12, 13, 14]) == 8\nassert count_rotations([11, 12, 13, 14, 15]) == 9\nassert count_rotations([12, 13, 14, 15, 16]) == 10"
    },
    {
      "rank": 79,
      "score": 2.9842365427916215,
      "candidate": "from typing import List\n\n\ndef circular_rotation_count(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def find_min(arr: List[int]) -> int:\n        min_val = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] < min_val:\n                min_val = arr[i]\n        return min_val\n\n    if not arr:\n        return 0\n\n    min_val = find_min(arr)\n\n    if min_val == arr[0]:\n        return 0\n\n    min_index = 0\n    for i in range(len(arr)):\n        if arr[i] == min_val:\n            min_index = i\n            break\n\n    return len(arr) - min_index\n\n\nif __name__ == \"__main__\":\n    assert circular_rotation_count([5, 6, 7, 1, 2]) == 3\n    assert circular_rotation_count([1, 2, 3, 4, 5]) == 0\n    assert circular_rotation_count([4, 5, 6, 7, 8, 1, 2]) == 5"
    },
    {
      "rank": 80,
      "score": 2.9391637074846786,
      "candidate": "def circular_sorted_array(arr, n, key):\n    start = 0\n    end = n-1\n\n    while start <= end:\n        mid = start + (end-start)//2\n\n        if arr[mid] == key:\n            return True\n        elif arr[start] < arr[mid]:\n            if arr[start] <= key < arr[mid]:\n                end = mid - 1\n            else:\n                start = mid + 1\n        elif arr[start] > arr[mid]:\n            if arr[mid] < key <= arr[end]:\n                start = mid + 1\n            else:\n                end = mid - 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([5, 6, 7, 8, 9, 10, 1, 2, 3, 4], 9, True),\n        ([4, 5, 6, 7, 8, 9, 10, 1, 2, 3], 3, True),\n        ([3, 4, 5, 6, 7, 8, 9, 10, 1, 2], 3, False)\n    ]\n\n    for arr, key, result in test_cases:\n        assert circular_sorted_array(arr, len(arr), key) == result"
    },
    {
      "rank": 81,
      "score": 2.903344369351495,
      "candidate": "def circular_rotation(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        return 0 if arr[0] <= arr[1] else 1\n    else:\n        return len(arr) - find_first_greater(arr, arr[0])\n\ndef find_first_greater(arr, target):\n    for i in range(len(arr)):\n        if arr[i] > target:\n            return i\n\narr = [2, 3, 4, 5, 1, 6, 7]\nprint(circular_rotation(arr))"
    },
    {
      "rank": 82,
      "score": 2.8969797389423606,
      "candidate": "from typing import List\n\n\ndef number_of_rotations(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    def binary_search(arr, low, high, target):\n        if low > high:\n            return -1\n\n        mid = low + (high - low) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        if arr[low] <= arr[mid]:\n            if arr[low] <= target <= arr[mid]:\n                return binary_search(arr, low, mid - 1, target)\n            else:\n                return binary_search(arr, mid + 1, high, target)\n        else:\n            if arr[mid] <= target <= arr[high]:\n                return binary_search(arr, mid + 1, high, target)\n            else:\n                return binary_search(arr, low, mid - 1, target)\n\n    return len(arr) - binary_search(arr, 0, len(arr) - 1, arr[-1]) - 1\n\n\nif __name__ == \"__main__\":\n    arr1 = [10, 15, 1, 3, 8]\n    arr2 = [4, 5, 7, 9, 10, -1, -3]\n    arr3 = [6, 7, 9, 11, 12, 0, 1]\n    arr4 = [6, 7, 9, 11, 12, 0, 1, 2]\n    arr5 = [1, 3, 5, 7, 9, 11, 13, 15]\n\n    assert number_of_rotations(arr1) == 1\n    assert number_of_rotations(arr2) == 4\n    assert number_of_rotations(arr3) == 1\n    assert number_of_rotations(arr4) == 2\n    assert number_of_rotations(arr5) == 0"
    },
    {
      "rank": 83,
      "score": 2.8639465546254654,
      "candidate": "from typing import List\n\n\ndef find_number_of_rotations(arr: List[int]) -> int:\n    \"\"\"\n    Find number of rotations in a circularly sorted array.\n    :param arr: List[int]\n    :return: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return len(arr) - left\n\n\nif __name__ == \"__main__\":\n    assert find_number_of_rotations([1, 2, 3, 4, 5]) == 0\n    assert find_number_of_rotations([4, 5, 6, 7, 1, 2]) == 4\n    assert find_number_of_rotations([4, 5, 6, 7, 8, 1, 2, 3]) == 2\n    assert find_number_of_rotations([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\n    assert find_number_of_rotations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1"
    },
    {
      "rank": 84,
      "score": 2.8305637966168207,
      "candidate": "def number_of_rotation(arr):\n    if len(arr) == 0:\n        return 0\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid < end and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        elif mid > start and arr[mid] < arr[mid - 1]:\n            return mid\n\n        if arr[start] < arr[end]:\n            return 0\n        elif arr[start] > arr[end]:\n            start = start + 1\n        else:\n            end = end - 1\n\n    return 0\n\n\ndef test_number_of_rotation():\n    assert number_of_rotation([]) == 0\n    assert number_of_rotation([1]) == 0\n    assert number_of_rotation([1, 2]) == 0\n    assert number_of_rotation([1, 3, 4, 5]) == 0\n    assert number_of_rotation([5, 1, 2]) == 1\n    assert number_of_rotation([3, 4, 5, 1, 2]) == 3\n    assert number_of_rotation([3, 5, 4, 2, 1]) == 2\n    assert number_of_rotation([5, 3, 4, 2, 1]) == 1\n    assert number_of_rotation([4, 5, 3, 1, 2]) == 2\n    assert number_of_rotation([4, 3, 5, 1, 2]) == 1\n    assert number_of_rotation([5, 4, 3, 2, 1]) == 0\n\n\nif __name__ == '__main__':\n    test_number_of_rotation()"
    },
    {
      "rank": 85,
      "score": 2.7973189407776937,
      "candidate": "def number_of_rotations(arr):\n    if len(arr) < 2:\n        return 0\n\n    if arr[0] <= arr[-1]:\n        return 0\n\n    left, right = 0, len(arr) - 1\n    mid = (left + right) // 2\n\n    while arr[mid] > arr[left]:\n        left += 1\n\n    while arr[mid] < arr[right]:\n        right -= 1\n\n    return right - left\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([3, 4, 5, 1, 2], 3),\n        ([1, 2, 3, 4, 5], 0),\n        ([5, 6, 7, 8, 1, 2, 3, 4], 4),\n        ([4, 5, 6, 7, 1, 2, 3], 3),\n        ([3, 7, 8, 1, 2, 4, 5, 6], 5),\n    ]\n\n    for test_case, result in test_cases:\n        assert number_of_rotations(test_case) == result"
    },
    {
      "rank": 86,
      "score": 2.7960962151625166,
      "candidate": "def circular_rotation(arr):\n    \"\"\"\n    Time complexity: O(logN)\n    Space complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    low, high = 0, len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if arr[mid] < arr[high]:\n            high = mid\n        else:\n            low = mid + 1\n\n    if high == len(arr) - 1:\n        return 0\n    else:\n        return len(arr) - high - 1\n\n\ndef test_circular_rotation():\n    assert circular_rotation([]) == 0\n    assert circular_rotation([1]) == 0\n    assert circular_rotation([1, 2]) == 0\n    assert circular_rotation([2, 1]) == 1\n    assert circular_rotation([3, 4, 5, 1, 2]) == 3\n    assert circular_rotation([3, 4, 5, 2, 1]) == 2\n    assert circular_rotation([2, 3, 4, 5, 6, 7, 1]) == 6\n    assert circular_rotation([7, 6, 5, 4, 3, 2, 1]) == 0\n\n\nif __name__ == '__main__':\n    test_circular_rotation()"
    },
    {
      "rank": 87,
      "score": 2.795078908429087,
      "candidate": "def number_of_rotations(arr):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 1:\n        return 0\n    if arr[0] <= arr[-1]:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[0]:\n            left = mid + 1\n        else:\n            right = mid\n    return right\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([1, 2, 3, 4, 5, 6, 7], 0),\n        ([4, 5, 6, 7, 1, 2, 3], 3),\n        ([3, 7, 6, 4, 5, 2, 1], 3),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 0),\n        ([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 12),\n        ([4, 5, 6, 7, 8, 9, 10, 1, 2, 3], 7),\n        ([4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3], 12),\n        ([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2, 3], 12),\n    ]\n\n    for test_case, exp in test_cases:\n        assert number_of_rotations(test_case) == exp"
    },
    {
      "rank": 88,
      "score": 2.7934312701886213,
      "candidate": "from typing import List\n\n\ndef circular_array_rotation(array: List[int], k: int, queries: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    k = k % len(array)\n\n    return [array.index(queries[i]) - k for i in range(len(queries))]\n\n\nif __name__ == \"__main__\":\n    assert circular_array_rotation([8, 9, 7, 8], 3, [7, 8, 8, 9]) == [-1, 0, 1, 2]"
    },
    {
      "rank": 89,
      "score": 2.7891633353480723,
      "candidate": "def circular_sorted_array_rotation(array, target):\n    if not array:\n        return None\n\n    left = 0\n    right = len(array) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if array[mid] < array[right]:\n            right = mid\n        else:\n            left = mid + 1\n\n    start = left\n\n    left = 0\n    right = len(array) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if array[mid] < array[left]:\n            right = mid\n        else:\n            left = mid + 1\n\n    end = left\n\n    if start == end:\n        return array.index(target)\n\n    if start < end:\n        if array[start] <= target <= array[end]:\n            return end - array.index(target)\n\n    if end < start:\n        if array[end] <= target <= array[start]:\n            return len(array) - array.index(target) + end\n\n    return None\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([], 1, None),\n        ([1], 1, 0),\n        ([1, 2], 2, 1),\n        ([2, 1], 2, 0),\n        ([1, 2, 3], 3, 2),\n        ([3, 1, 2], 3, 0),\n        ([3, 2, 1], 3, 1),\n        ([1, 3, 2], 2, 1),\n        ([2, 3, 1], 2, 2),\n        ([1, 2, 3, 4, 5], 5, 4),\n        ([4, 5, 6, 7, 0, 1, 2], 0, 5),\n        ([4, 5, 6, 7, 0, 1, 2], 3, None),\n        ([6, 7, 0, 1,"
    },
    {
      "rank": 90,
      "score": 2.779226900822804,
      "candidate": "def number_of_rotations(array: list) -> int:\n    \"\"\"\n    Idea is to find the first and last elements in the array.\n    If they are the same, then the array is not rotated.\n    Else, we can find the number of rotations.\n    \"\"\"\n    if not array:\n        return 0\n\n    first = array[0]\n    last = array[-1]\n\n    if first == last:\n        return 0\n\n    if first < last:\n        return 1\n\n    # array is rotated\n    for i in range(1, len(array)):\n        if array[-i] < first:\n            return len(array) - i\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    assert number_of_rotations([4, 5, 7, 9, 10, 11, 0, 1, 2]) == 5"
    },
    {
      "rank": 91,
      "score": 2.735718976435726,
      "candidate": "from typing import List\n\n\ndef number_rotations(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(array) <= 1:\n        return len(array)\n\n    low, high = 0, len(array) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if array[mid] > array[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return len(array) - low\n\n\nif __name__ == \"__main__\":\n    # Test 1\n    print(number_rotations([10, 15, 1, 3, 8]))\n\n    # Test 2\n    print(number_rotations([10, 15, 1, 3, 8, 17, 12]))\n\n    # Test 3\n    print(number_rotations([4, 5, 7, 9, 10, -1, -3]))"
    },
    {
      "rank": 92,
      "score": 2.6832685483063283,
      "candidate": "def circular_rotation(arr, target):\n    if arr[0] <= target <= arr[-1]:\n        return arr.index(target)\n    else:\n        return len(arr) - arr[::-1].index(target) - 1\n\nprint(circular_rotation([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 93,
      "score": 2.6307442897820392,
      "candidate": "from typing import List\n\n\ndef circular_array_rotation(arr: List[int], k: int, n: int) -> int:\n    \"\"\"\n    Find the number of rotations in a circularly sorted array\n    :param arr: the array\n    :param k: the rotation count\n    :param n: the length of the array\n    :return: the number of rotations\n    >>> circular_array_rotation([1, 2, 3, 4, 5], 2, 5)\n    3\n    \"\"\"\n    k = k % n\n    if k == 0:\n        return 0\n    return k\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 2.6004694067706673,
      "candidate": "def circular_array_rotation(arr, k):\n    \"\"\"\n    :param: arr - array of numbers which are to be sorted\n    :param: k - number of times the array is to be rotated.\n    TODO: Write the batch of code which implements the solution\n    return the number of rotations that took place.\n    \"\"\"\n    if k == 0:\n        return 0\n\n    if arr[len(arr) - 1] < arr[0]:\n        return len(arr) - arr.index(max(arr)) - 1\n\n    return k % len(arr)\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = circular_array_rotation(arr, k)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[16, 2, 3, 4, 5, 7, 10, 19], 2, 2])\ntest_function([[4, 5, 7, 10, 19, 16, 2, 3], 2, 5])\ntest_function([[4, 5, 7, 10, 19, 16, 2, 3], 4, 3])\ntest_function([[16, 2, 3, 4, 5, 7, 10, 19], 3, 0])\ntest_function([[16, 2, 3, 4, 5, 7, 10, 19], 8, 2])\ntest_function([[16, 2, 3, 4, 5, 7, 10, 19], 9, 1])"
    },
    {
      "rank": 95,
      "score": 2.4935628259341867,
      "candidate": "from typing import List\n\n\ndef circular_rotation_count(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) <= 1:\n        return len(arr)\n\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n\n    return end + 1\n\n\nif __name__ == \"__main__\":\n    assert circular_rotation_count([4, 5, 6, 7, 8, 1, 2, 3]) == 5\n    assert circular_rotation_count([4, 5, 6, 7, 8, 9, 1, 2, 3]) == 9"
    },
    {
      "rank": 96,
      "score": 2.4155981384846905,
      "candidate": "from typing import Optional\n\n\ndef number_of_rotation_in_circularly_sorted_array(array: list[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n\n    def search(array: list[int], left: int, right: int, value: int) -> Optional[int]:\n        if left > right:\n            return None\n\n        mid = left + (right - left) // 2\n\n        if array[mid] == value:\n            return mid\n\n        if array[mid] < array[right]:\n            if array[mid] < value and value < array[right]:\n                return search(array, mid + 1, right, value)\n            else:\n                return search(array, left, mid - 1, value)\n        elif array[mid] > array[right]:\n            if array[left] < value and value < array[mid]:\n                return search(array, left, mid - 1, value)\n            else:\n                return search(array, mid + 1, right, value)\n        else:\n            return search(array, left, mid - 1, value)\n\n    if len(array) == 1:\n        return 0\n\n    if array[0] < array[-1]:\n        return 0\n\n    result = search(array, 0, len(array) - 1, array[-1])\n\n    if result is None:\n        return 0\n\n    return len(array) - result - 1\n\n\nif __name__ == \"__main__\":\n    assert number_of_rotation_in_circularly_sorted_array([4, 5, 6, 7, 8, 9, 10, 1, 2, 3]) == 5\n    assert number_of_rotation_in_circularly_sorted_array([2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 0"
    },
    {
      "rank": 97,
      "score": 2.3785863714124718,
      "candidate": "from typing import List\n\n\ndef find_rotation_point(nums: List[int]) -> int:\n    \"\"\"\n    We can find the rotation point in a circularly sorted array by\n    finding the first element that is greater than or equal to the last element.\n    \"\"\"\n    first = 0\n    last = len(nums) - 1\n\n    while first <= last:\n        mid = (first + last) // 2\n\n        if nums[mid] <= nums[last]:\n            first = mid + 1\n        else:\n            last = mid\n\n    return first\n\n\nif __name__ == \"__main__\":\n    assert find_rotation_point([10, 15, 1, 3, 8]) == 2\n    assert find_rotation_point([1, 3, 8, 10, 15]) == 0\n    assert find_rotation_point([4, 5, 7, 9, 10, 11, 12]) == 3\n    assert find_rotation_point([7, 8, 9, 10, 11, 12]) == 0"
    },
    {
      "rank": 98,
      "score": 2.2242623316403973,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef number_of_rotations(array: List[int]) -> int:\n    \"\"\"\n    :param array: circularly sorted array\n    :return: number of rotations\n\n    Examples:\n    >>> number_of_rotations([3, 4, 5, 1, 2])\n    1\n    >>> number_of_rotations([1, 2, 3, 4, 5])\n    0\n    >>> number_of_rotations([5, 1, 2, 3, 4])\n    4\n    >>> number_of_rotations([4, 5, 1, 2, 3])\n    2\n    \"\"\"\n    if len(array) == 1:\n        return 0\n\n    low = 0\n    high = len(array) - 1\n\n    # find the first and last element\n    while array[low] > array[high]:\n        low += 1\n        high -= 1\n\n    # check if the first and last element are the same\n    if array[low] == array[high]:\n        return 0\n\n    # find the first element greater than the last element\n    while low < high:\n        mid = (low + high) // 2\n        if array[mid] > array[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 2.158156692350569,
      "candidate": "from typing import List\n\n\ndef number_of_rotations(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 1:\n        return len(arr)\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[right]:\n            right = mid\n        else:\n            left = mid + 1\n\n    return len(arr) - left\n\n\nif __name__ == \"__main__\":\n    assert number_of_rotations([1, 2, 3, 4, 5, 6]) == 1\n    assert number_of_rotations([5, 6, 1, 2, 3, 4]) == 3\n    assert number_of_rotations([4, 5, 6, 7, 1, 2, 3]) == 3"
    },
    {
      "rank": 100,
      "score": 1.8473121542005124,
      "candidate": "from typing import List\n\n\ndef circular_array_rotation(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k < 0:\n        k = len(nums) + k\n\n    return nums[k:] + nums[:k]\n\n\nif __name__ == \"__main__\":\n    assert circular_array_rotation([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\n    assert circular_array_rotation([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n    assert circular_array_rotation([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n    assert circular_array_rotation([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\n    assert circular_array_rotation([1, 2, 3, 4, 5], 4) == [4, 5, 1, 2, 3]\n    assert circular_array_rotation([1, 2, 3, 4, 5], 5) == [5, 1, 2, 3, 4]\n    assert circular_array_rotation([1, 2, 3, 4, 5], -1) == [5, 1, 2, 3, 4]\n    assert circular_array_rotation([1, 2, 3, 4, 5], -2) == [4, 5, 1, 2, 3]\n    assert circular_array_rotation([1, 2, 3, 4, 5], -3) == [3, 4, 5, 1, 2]\n    assert circular_array_rotation([1, 2, 3, 4"
    }
  ]
}