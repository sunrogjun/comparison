{
  "timestamp": "2025-09-14T23:01:04.969768",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 95,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def add_lists(tuples, list_):\n    return list(map(lambda x: x + list_, tuples))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef add_list_to_tuples(tuples: tuple, list: List) -> tuple:\n    \"\"\"Returns a new tuple which combines the given tuple and list.\n\n    Args:\n        tuples (tuple): Tuple to be combined.\n        list (List): List to be combined.\n\n    Examples:\n        >>> add_list_to_tuples((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n        >>> add_list_to_tuples((\"x\", \"y\", \"z\"), [4, 5, 6])\n        ('x', 'y', 'z', 4, 5, 6)\n    \"\"\"\n    return tuples + tuple(list)\n\n\ndef add_list_to_tuples_opt(tuples: tuple, list: List) -> tuple:\n    \"\"\"Returns a new tuple which combines the given tuple and list.\n\n    Args:\n        tuples (tuple): Tuple to be combined.\n        list (List): List to be combined.\n\n    Examples:\n        >>> add_list_to_tuples_opt((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n        >>> add_list_to_tuples_opt((\"x\", \"y\", \"z\"), [4, 5, 6])\n        ('x', 'y', 'z', 4, 5, 6)\n    \"\"\"\n    return tuple(list) + tuples\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((\"a\", \"b\", \"c\"), [1, 2, 3]))\n    print(add_list_to_tuples_opt((\"a\", \"b\", \"c\"), [1, 2, 3]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list: List[int]) -> List[Tuple[int, ...]]:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): tuples to add to\n        list (List[int]): list to add\n\n    Returns:\n        List[Tuple[int, ...]]: new tuples\n\n    Examples:\n        >>> assert add_list_to_tuples((1, 2), [3, 4]) == [(1, 2, 3, 4)]\n    \"\"\"\n    return [\n        tuple(list[i : i + len(tuples)])\n        for i in range(0, len(list), len(tuples))\n        if len(list[i : i + len(tuples)]) == len(tuples)\n    ]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2), [3, 4]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef add_list_to_tuples(tuples: List[tuple], list: List[int]) -> List[tuple]:\n    \"\"\"Returns a list of tuples with the given list appended to each tuple.\n\n    Args:\n        tuples (List[tuple]): List of tuples\n        list (List[int]): List of integers\n\n    Returns:\n        List[tuple]: List of tuples with the given list appended to each tuple\n    \"\"\"\n    return [tuple(list) + tuple for tuple in tuples]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def add(list, *tuples):\n    result = []\n    for i in range(len(tuples[0])):\n        temp = list[i]\n        for j in range(len(tuples)):\n            temp += tuples[j][i]\n        result.append(temp)\n    return tuple(result)\n\nprint(add([1, 2, 3], (4, 5, 6), (7, 8, 9), (10, 11, 12)))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def add_tuples(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef main():\n    print(\"Sum of two tuples:\")\n    print(add_tuples((20, 30, 40, 50), (10, 20, 30, 40)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_tuples(tup: Tuple[int], lst: List[int]) -> List[List[int]]:\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        tup (Tuple[int]): given tuple\n        lst (List[int]): given list\n\n    Examples:\n        >>> assert add_tuples((1, 2, 3), [1, 2]) == [[2, 4, 3], [2, 3, 4]]\n\n    Returns:\n        List[List[int]]: list of added tuples\n    \"\"\"\n    return [\n        [sum(tup_el, lst_el) for tup_el, lst_el in zip(tup, lst)]\n        for lst_el in lst\n    ]\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), [1, 2]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def tuple_add(tup, lst):\n    return tup + (tuple(lst),)\n\ntup = (1, 2, 3)\nlst = [4, 5, 6]\nprint(tuple_add(tup, lst))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tup: Tuple[int], lis: List[int]) -> List[Tuple[int]]:\n    \"\"\"Returns a list of tuples with elements from tuple and list.\n\n    Args:\n        tup (Tuple[int]): tuple of integers\n        lis (List[int]): list of integers\n\n    Examples:\n        >>> assert add_list_to_tuple((1, 2, 3, 4, 5), [6, 7, 8, 9, 10]) == [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10)]\n    \"\"\"\n    return list(zip(tup, lis))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((1, 2, 3, 4, 5), [6, 7, 8, 9, 10]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def add(a, b):\n    return a+b\n\n\nif __name__ == '__main__':\n    print(add((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 11,
      "score": 9.0,
      "candidate": "def add_tuples(tuples, list):\n    return [i + j for i, j in zip(tuples, list)]"
    },
    {
      "rank": 12,
      "score": 9.0,
      "candidate": "def add_list_to_tuple(tuple_1, list_1):\n    return tuple_1 + (list_1,)\n\n\nif __name__ == '__main__':\n    print(add_list_to_tuple((1, 2, 3, 4), [5, 6, 7, 8]))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def add_list(tuples, list):\n    for i in range(len(tuples)):\n        tuples[i] += (list[i],)\n    return tuples\n\ntuples = [(1,2,3), (4,5,6), (7,8,9)]\nlist = [10, 11, 12]\nprint(add_list(tuples, list))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def add_list_to_tuple(tup, lst):\n    return tup + (lst,)\n\n\ndef main():\n    print(add_list_to_tuple((\"a\", \"b\", \"c\"), [1, 2, 3]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, list):\n    # + operator is overloaded for tuples and lists\n    return tuples + (list,)\n\nprint(add_tuples((1, 2, 3), [4, 5, 6]))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def add_tuples(tup1, tup2):\n    return tuple(sum(tup) for tup in zip(tup1, tup2))\n\n\n# Test\nassert add_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def add_list_to_tuples(tuples, list):\n    return [tuple(i) + tuple(j) for i in tuples for j in list]"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(list_of_tuples: List[Tuple[int, int]],\n                       list_of_numbers: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Adds list of numbers to every tuple in list of tuples.\n\n    Args:\n        list_of_tuples (List[Tuple[int, int]]): list of tuples\n        list_of_numbers (List[int]): list of numbers\n\n    Returns:\n        List[Tuple[int, int]]: list of tuples with added numbers\n    \"\"\"\n    return [tuple(map(sum, zip(list_of_numbers, tpl))) for tpl in list_of_tuples]\n\n\nif __name__ == '__main__':\n    list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n    list_of_numbers = [1, 2, 3]\n    print(add_list_to_tuples(list_of_tuples, list_of_numbers))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, list):\n    return list(map(lambda x: x + tuple(list), tuples))\n\n\nprint(add_tuples([(1, 2, 3), (4, 5, 6)], [7, 8]))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef add_tuples(tup_a: Tuple, tup_b: Tuple) -> Tuple:\n    \"\"\"Add two tuples.\n\n    Args:\n        tup_a (Tuple): first tuple\n        tup_b (Tuple): second tuple\n\n    Returns:\n        Tuple: the result of the addition\n    \"\"\"\n    return tup_a + tup_b\n\n\ndef main():\n    print(add_tuples((1, 2, 3), (4, 5, 6)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def list_to_tuples(tuples, list):\n    \"\"\"\n    >>> list_to_tuples((), [1, 2, 3])\n    ((1, 2, 3),)\n    >>> list_to_tuples(((1, 2),), [3, 4, 5])\n    ((1, 2, 3, 4, 5),)\n    \"\"\"\n    if len(tuples) == 0:\n        return tuple(list)\n    return tuple(tuples[0] + list) + list_to_tuples(tuples[1:], list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def add_list_to_tuple(a, b):\n    \"\"\"\n    >>> add_list_to_tuple([1, 2, 3], (4, 5, 6))\n    [1, 2, 3, 4, 5, 6]\n    >>> add_list_to_tuple([1, 2], (4, 5, 6, 7))\n    [1, 2, 4, 5, 6, 7]\n    \"\"\"\n    return list(a) + list(b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef add_tuples(list_1: List, tuple_1: tuple) -> List:\n    \"\"\"Returns a list of tuples.\n\n    Args:\n        list_1 (List): list of values to add to tuples\n        tuple_1 (tuple): tuple of values\n\n    Returns:\n        List: list of tuples\n    \"\"\"\n    list_1 = list_1 + list(tuple_1)\n    return list_1\n\n\ndef main():\n    print(add_tuples([1, 2, 3], (4, 5, 6)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def list_to_tuples(list1, tuples):\n    \"\"\"\n    >>> list_to_tuples([1, 2, 3], ((1, 2), (3, 4)))\n    ((1, 2, 3), (3, 4))\n    \"\"\"\n    result = []\n    for t in tuples:\n        result.append(tuple(list(t) + list1))\n    return tuple(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(\n    lst: List[int], tuples: Tuple[int, ...]\n) -> Tuple[int, ...]:\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        lst (List[int]): list of integers to add to the tuples.\n        tuples (Tuple[int, ...]): tuple of integers to add to the list.\n\n    Examples:\n        >>> assert add_list_to_tuples([1, 2, 3], (1, 2)) == (1, 2, 1, 2, 3)\n    \"\"\"\n    return tuples + tuple(lst)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([1, 2, 3], (1, 2)))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def add_tuples(tup: tuple, list_: list):\n    return tup + (tuple(list_),)\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), [4, 5, 6]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def add_list_to_tuples(tup1, tup2):\n    \"\"\"\n    >>> add_list_to_tuples((1, 2, 3), (4, 5, 6))\n    [(1, 2, 3, 4, 5, 6)]\n    \"\"\"\n    # list(tup1) + list(tup2)\n    # tup1 + tup2\n    return [tup1 + tup2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def add_list_to_tuple(list_in, tuple_in):\n    return tuple_in + tuple(list_in)\n\n\nprint(add_list_to_tuple([1, 2, 3, 4, 5], (10, 20, 30)))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tuples: Tuple, list: List) -> Tuple:\n    \"\"\"Add list to tuple.\n\n    Args:\n        tuples (Tuple): given tuple\n        list (List): given list\n\n    Returns:\n        Tuple: tuple with list\n    \"\"\"\n    return tuple(list) + tuples\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((1, 2, 3), [4, 5, 6]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_lists(tup: Tuple, lst: List) -> List:\n    return [i + j for i, j in zip(tup, lst)]\n\n\nif __name__ == \"__main__\":\n    print(add_lists(tup=(1, 2, 3), lst=[4, 5, 6]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def add_lists(tup: tuple, lst: list) -> tuple:\n    \"\"\"Return a new tuple with the given list added to the given tuple.\n\n    >>> add_lists((1, 2, 3), [4, 5, 6])\n    (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    return tuple(tup) + tuple(lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, list):\n    \"\"\"\n    >>> add_tuples((1,2,3), [4,5,6])\n    (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    return tuple(list) + tuples\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def add_list_to_tuples(tuples, list):\n    new_tuples = []\n    for i in range(len(tuples)):\n        new_tuples.append(tuples[i] + (list[i],))\n    return new_tuples\n\nif __name__ == '__main__':\n    tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    list = [10, 11, 12]\n    print(add_list_to_tuples(tuples, list))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, list_vals):\n    return tuple(x + y for x, y in zip(tuples, list_vals))\n\nprint(add_tuples((1, 2, 3), [4, 5, 6]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def addTuple(tup, list):\n    return tuple(tup) + tuple(list)\n\nprint(addTuple((\"a\", \"b\"), [1, 2]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, list_):\n    return [tuple(x + y for x, y in zip(list_, t)) for t in tuples]\n\n\ndef main():\n    print(add_tuples([(1, 2), (3, 4)], [10, 20]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, list):\n    return tuple(sum(x) for x in zip(tuples, list))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def add(tup, list):\n    return tup + (list,)\n\nprint(add((1, 2, 3), [4, 5, 6]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int], list: List[int]) -> List[Tuple[int]]:\n    \"\"\"\n    Add a given list to the given tuples.\n    >>> add_tuples((1, 2, 3), [1, 2])\n    [(2, 2, 3), (1, 3, 3)]\n    >>> add_tuples((1, 2, 3), [1, 2, 3])\n    [(2, 3, 3), (1, 4, 3)]\n    >>> add_tuples((1, 2, 3), [1, 2, 3, 4])\n    [(2, 3, 3), (1, 4, 3), (1, 5, 4)]\n    \"\"\"\n    new_tuples = []\n    for tuple in tuples:\n        for i in range(len(list)):\n            new_tuples.append(tuple[0:i] + (tuple[i] + list[i],) + tuple[i + 1 :])\n    return new_tuples\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def add_list_to_tuples(a_list, a_tuple):\n    return a_tuple + (a_list,)\n\n\ndef test_add_list_to_tuples():\n    \"\"\"Test for add_list_to_tuples function.\"\"\"\n    assert add_list_to_tuples([1, 2], (3, 4)) == (3, 4, [1, 2])\n    assert add_list_to_tuples([1, 2], (3,)) == (3, [1, 2])\n    assert add_list_to_tuples([1, 2], (3, 4, 5)) == (3, 4, 5, [1, 2])"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(list: List, tuple: Tuple) -> List[Tuple]:\n    \"\"\"Adds list to tuple.\"\"\"\n    return [(item, *list) for item in tuple]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([1, 2, 3], (4, 5, 6)))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, lst):\n    return tuple(sum(pair) for pair in zip(tuples, lst))\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3, 4), (1, 2, 3, 4)))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, list):\n    # tuples.append(list)\n    return tuple(list + i for i in tuples)\n\ntuples = [(1, 2), (3, 4)]\nlist = [5, 6]\nprint(add_tuples(tuples, list))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def add_list_to_tuples(tup: tuple, list: list) -> tuple:\n    \"\"\"\n    >>> add_list_to_tuples((1, 2, 3), [4, 5, 6])\n    (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    return tuple(list) + tup\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tup: Tuple[int, ...], lst: List[int]) -> List[int]:\n    \"\"\"Returns a list with the given tuple and list added together.\n\n    Args:\n        tup (Tuple[int, ...]): tuple to add to list\n        lst (List[int]): list to add to tuple\n\n    Examples:\n        >>> add_list_to_tuple((1, 2, 3), [4, 5, 6])\n        [1, 2, 3, 4, 5, 6]\n        >>> add_list_to_tuple((1, 2, 3), [4, 5, 6, 7, 8, 9])\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    return list(tup) + lst\n\n\ndef add_list_to_tuple_compact(tup: Tuple[int, ...], lst: List[int]) -> List[int]:\n    \"\"\"Returns a list with the given tuple and list added together.\n\n    Args:\n        tup (Tuple[int, ...]): tuple to add to list\n        lst (List[int]): list to add to tuple\n\n    Examples:\n        >>> add_list_to_tuple_compact((1, 2, 3), [4, 5, 6])\n        [1, 2, 3, 4, 5, 6]\n        >>> add_list_to_tuple_compact((1, 2, 3), [4, 5, 6, 7, 8, 9])\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    return list(tup) + lst\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((1, 2, 3), [4, 5, 6]))\n    print(add_list_to_tuple_compact"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int, ...], list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Return a list of tuples with first element from tuples and second from list.\n\n    Examples:\n        >>> assert add_tuples((1, 2, 3), [4, 5, 6]) == [(1, 4), (2, 5), (3, 6)]\n    \"\"\"\n    return list(zip(tuples, list))\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), [4, 5, 6]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tuples: Tuple[int], lst: List[int]) -> List[Tuple[int]]:\n    \"\"\"Return a list of tuples with list elements added to tuples.\n\n    :param tuples: tuple of integers\n    :type tuples: tuple\n    :param lst: list of integers\n    :type lst: list\n    :return: list of tuples\n    :rtype: list\n    \"\"\"\n    return [(a, b, c, d, e) for a, b, c, d, e in zip(tuples, lst)]\n\n\ndef main():\n    print(add_list_to_tuple((1, 2, 3, 4, 5), [10, 20, 30, 40, 50]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def add_tuples(tup, lst):\n    return tuple(map(sum, zip(tup, lst)))\n\n\ndef test_add_tuples():\n    assert add_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from typing import Tuple, List\n\n\ndef add_list_to_tuple(tup: Tuple[int, ...], lst: List[int]) -> Tuple[int, ...]:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple[int, ...]): given tuple\n        lst (List[int]): given list\n\n    Returns:\n        Tuple[int, ...]: a new tuple with given list added to the given tuple\n    \"\"\"\n    return tuple(x + y for x, y in zip(tup, lst))\n\n\ndef main():\n    print(add_list_to_tuple((1, 2, 3), [1, 2, 3]))\n    print(add_list_to_tuple((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def add_tuples(tup, lst):\n    \"\"\"\n    tup: tuple of ints\n    lst: list of ints\n    \"\"\"\n    new_tuple = ()\n    for i in range(len(tup)):\n        new_tuple += (tup[i] + lst[i],)\n    return new_tuple\n\n\nprint(add_tuples((1, 2, 3, 4), [1, 2, 3, 4]))\nprint(add_tuples((1, 2, 3), [4, 5, 6]))\nprint(add_tuples((1, 2), [3, 4, 5, 6]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def add_list_to_tuples(tuples, list):\n    \"\"\"Add list to tuples.\"\"\"\n    return tuples + (tuple(list), )"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, list):\n    \"\"\"\n    >>> add_tuples(((1, 2), (3, 4)), [5, 6])\n    ((1, 2, 5, 6), (3, 4, 5, 6))\n    \"\"\"\n    return tuple(tuple(x + y for x, y in zip(list, tuple)) for tuple in tuples)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def list_to_tuple(list_of_tuples, list_of_values):\n    \"\"\"\n    >>> list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n    >>> list_of_values = [7, 8, 9]\n    >>> list_to_tuple(list_of_tuples, list_of_values)\n    [(1, 2, 7), (3, 4, 8), (5, 6, 9)]\n    >>> list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n    >>> list_of_values = [7]\n    >>> list_to_tuple(list_of_tuples, list_of_values)\n    [(1, 2, 7), (3, 4, 7), (5, 6, 7)]\n    \"\"\"\n    new_list = []\n    for i in range(len(list_of_tuples)):\n        new_list.append(list_of_tuples[i] + (list_of_values[i],))\n    return new_list\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(list_: List, tuples_: Tuple) -> Tuple:\n    \"\"\"Add given list to given tuples.\n\n    Args:\n        list_ (List): list of integers\n        tuples_ (Tuple): tuple of integers\n\n    Returns:\n        Tuple: list + tuple\n\n    Examples:\n        >>> add_list_to_tuples([1, 2, 3], (4, 5, 6))\n        (1, 2, 3, 4, 5, 6)\n        >>> add_list_to_tuples([1, 2], (4, 5, 6))\n        (1, 2, 4, 5, 6)\n        >>> add_list_to_tuples([4, 5], (1, 2, 3))\n        (1, 2, 3, 4, 5)\n    \"\"\"\n    return (*list_, *tuples_)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([1, 2, 3], (4, 5, 6)))\n    print(add_list_to_tuples([1, 2], (4, 5, 6)))\n    print(add_list_to_tuples([4, 5], (1, 2, 3)))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def add_tuples(tup, lis):\n    return tuple(map(sum, zip(tup, lis)))\n\ntup = (1, 2, 3)\nlis = [4, 5, 6]\nprint(add_tuples(tup, lis))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(list1: List[int], tuple1: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"\n    >>> add_list_to_tuple([1, 2, 3], (1, 2))\n    (1, 2, 3, 1, 2)\n    \"\"\"\n    return tuple(list(tuple1) + list1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def add_list_to_tuples(tuples, list):\n    return list + tuples\n\n\ndef main():\n    tuples = (1, 2, 3)\n    list = [4, 5, 6]\n    print(add_list_to_tuples(tuples, list))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int], numbers: List[int]) -> List[Tuple[int]]:\n    \"\"\"Return a new list of tuples by adding given list to given tuples.\n\n    :param tuples: given tuples.\n    :type tuples: Tuple[int]\n    :param numbers: given list.\n    :type numbers: List[int]\n    :return: new list of tuples by adding given list to given tuples.\n    :rtype: List[Tuple[int]]\n    \"\"\"\n    return [x + y for x, y in zip(tuples, numbers)]\n\n\ndef main():\n    print(add_tuples((1, 2, 3), [4, 5, 6]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def add_tuples(tup1, tup2):\n    return tuple(a+b for a,b in zip(tup1, tup2))\n\ndef add_tuples_2(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\nprint(add_tuples((1,2,3), (4,5,6)))\nprint(add_tuples_2((1,2,3), (4,5,6)))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def add_list(a, b):\n    c = []\n    for i in range(len(b)):\n        c.append(a[i] + b[i])\n    return tuple(c)\n\n\nif __name__ == '__main__':\n    print(add_list([1, 2, 3], (1, 2, 3)))\n    print(add_list([1, 2, 3, 4], (1, 2, 3)))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, lst):\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tuples: A list of tuples.\n        lst: A list.\n\n    Returns:\n        A list of tuples.\n    \"\"\"\n    return [t + (l,) for t, l in zip(tuples, lst)]"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple, list_: List) -> Tuple:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple): given tuples.\n        list_ (List): given list.\n\n    Examples:\n        >>> add_list_to_tuples(((1, 2), (3, 4)), [5, 6])\n        ((1, 2, 5, 6), (3, 4, 5, 6))\n    \"\"\"\n    return tuple(tuple(list(i) + list_) for i in tuples)\n\n\ndef add_list_to_tuples_opt(tuples: Tuple, list_: List) -> Tuple:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple): given tuples.\n        list_ (List): given list.\n\n    Examples:\n        >>> add_list_to_tuples_opt(((1, 2), (3, 4)), [5, 6])\n        ((1, 2, 5, 6), (3, 4, 5, 6))\n    \"\"\"\n    return tuple(i + tuple(list_) for i in tuples)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples(((1, 2), (3, 4)), [5, 6]))\n    print(add_list_to_tuples_opt(((1, 2), (3, 4)), [5, 6]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def add_list_to_tuples(tuples, list):\n    \"\"\"\n    >>> add_list_to_tuples(((1, 2), (3, 4)), [5, 6])\n    ((1, 2, 5, 6), (3, 4, 5, 6))\n    \"\"\"\n    return tuple(tuple(i + list for i in t) for t in tuples)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def add_tuples(tuples, list):\n    return [x + (y,) for x in tuples for y in list]\n\n\nprint(add_tuples([(1, 2), (3, 4)], [1, 2]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def add_list_to_tuples(list_a, tuple_a):\n    \"\"\"\n    >>> add_list_to_tuples([1, 2, 3], (1, 2))\n    (1, 2, 3, 1, 2)\n    >>> add_list_to_tuples([1, 2], (1, 2, 3))\n    (1, 2, 1, 2, 3)\n    \"\"\"\n    return tuple(list_a) + tuple(tuple_a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef add_list_to_tuples(tuples: List[tuple], list: List[int]) -> List[tuple]:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n        list (List[int]): list of integers\n\n    Returns:\n        List[tuple]: list of tuples\n    \"\"\"\n    result = []\n\n    for tup in tuples:\n        result.append(tuple(x + y for x, y in zip(tup, list)))\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [10, 20, 30]))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_tuples(tup: Tuple, lst: List) -> Tuple:\n    return tuple(map(sum, zip(tup, lst)))\n\n\nif __name__ == \"__main__\":\n    tup = (1, 2, 3, 4)\n    lst = [1, 2, 3, 4]\n    print(add_tuples(tup, lst))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): tuples to add list to\n        list (List[int]): list to add to tuples\n\n    Returns:\n        List[Tuple[int, int]]: list of tuples\n    \"\"\"\n    return [(x, y) for x, y in zip(tuples, list)]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2, 3), [4, 5, 6]))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def add_tuples(a, b):\n    return a + b\n\n\na = [1, 2, 3]\nb = (4, 5, 6)\nprint(add_tuples(a, b))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(a_list: List, a_tuple: Tuple) -> List:\n    \"\"\"Return a list containing the sum of the two given lists.\"\"\"\n    return list(map(sum, zip(a_list, a_tuple)))\n\n\ndef test_add_list_to_tuple():\n    \"\"\"Test for add_list_to_tuple.\"\"\"\n    assert add_list_to_tuple([1, 2, 3], (3, 4, 5)) == [4, 6, 8]"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef add_list_to_tuple(tup: tuple, lst: List):\n    \"\"\"Adds the given list to the given tuple.\n\n    Args:\n        tup (tuple): given tuple\n        lst (List): given list\n\n    Returns:\n        tuple: new tuple\n    \"\"\"\n    return tuple(map(sum, zip(tup, lst)))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((1, 2, 3), [3, 4, 5]))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef add_list_to_tuple(tuples: List[tuple], list: List[int]) -> tuple:\n    \"\"\"Add a list to a tuple.\n\n    Args:\n        tuples (List[tuple]): A list of tuples.\n        list (List[int]): A list of integers.\n\n    Returns:\n        tuple: A tuple of lists.\n    \"\"\"\n    return tuple(list(tuple_) + tuple(list) for tuple_ in tuples)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([(1, 2), (3, 4)], [1, 2]))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_lists(tuples: Tuple[int, ...], list: List[int]) -> List[int]:\n    \"\"\"Adds a list to a tuple.\n\n    Args:\n        tuples (Tuple[int, ...]): the tuple\n        list (List[int]): the list\n\n    Returns:\n        List[int]: the list\n    \"\"\"\n    return list + list(tuples)\n\n\nif __name__ == \"__main__\":\n    print(add_lists((1, 2, 3, 4), [5, 6, 7]))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple, lst: List) -> Tuple:\n    \"\"\"Add a list to a tuple.\n\n    Args:\n        tuples (Tuple): tuple to add the list to\n        lst (List): list to add to the tuple\n\n    Returns:\n        Tuple: tuple with the list added\n    \"\"\"\n    return tuples + (tuple(lst),)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((\"a\", \"b\"), [1, 2, 3]))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(\n    my_list: List[int], my_tuple: Tuple[int, int, int]\n) -> List[int]:\n    \"\"\"Returns a list with the sum of list and tuple.\n\n    Args:\n        my_list (List[int]): list of integers\n        my_tuple (Tuple[int, int, int]): tuple of integers\n\n    Returns:\n        List[int]: list of integers\n    \"\"\"\n    return [i + j for i, j in zip(my_list, my_tuple)]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([1, 2, 3], (4, 5, 6)))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef add_list_to_tuples(tup: tuple, list_: List) -> tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (tuple): given tuple\n        list_ (List): given list\n\n    Returns:\n        tuple: return the result\n    \"\"\"\n    return tuple(tup + (list_,))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((\"a\", \"b\", \"c\"), [1, 2, 3]))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[Tuple[int, ...]], list_: Tuple[int, ...]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\"Add a list to a tuple of tuples.\n\n    Args:\n        tuples (Tuple[Tuple[int, ...]]): a tuple of tuples to add the list to\n        list_ (Tuple[int, ...]): a tuple of integers to add to the tuples\n\n    Returns:\n        Tuple[Tuple[int, ...], ...]: a tuple of tuples with the list added to them\n    \"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup, list_)) for tup in tuples)\n\n\nif __name__ == '__main__':\n    print(add_list_to_tuples(((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)), (100, 200, 300, 400, 500)))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): list of tuples\n        list (List[int]): list of integers\n\n    Returns:\n        List[Tuple[int, int]]: list of tuples\n    \"\"\"\n    return [(x, y) for x, y in zip(tuples, list)]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2, 3), [4, 5, 6]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int, ...], lst: List[int]) -> List[Tuple[int, ...]]:\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): list of tuples\n        lst (List[int]): list of integers\n\n    Returns:\n        List[Tuple[int, ...]]: list of tuples with the list added\n    \"\"\"\n    return [tuple(x + y for x, y in zip(t, lst)) for t in tuples]\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), [10, 20, 30]))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef add_list_to_tuples(tuples: List[tuple], list_to_add: List[int]) -> List[tuple]:\n    \"\"\"Adds list to tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n        list_to_add (List[int]): list of integers\n\n    Returns:\n        List[tuple]: list of tuples\n    \"\"\"\n    return [*map(lambda x: (x[0] + list_to_add[x[1]], x[1]), enumerate(tuples))]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2]))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list_: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): the given tuples.\n        list_ (List[int]): the given list.\n\n    Returns:\n        List[Tuple[int, int]]: the resulting tuples.\n    \"\"\"\n    result = []\n\n    for i in range(len(list_)):\n        result.append((tuples[i], list_[i]))\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2, 3, 4), [5, 6, 7, 8]))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def add_tuples(a, b):\n    return a + b\n\n\nprint(add_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int, ...], list1: List[int]) -> Tuple[int, ...]:\n    \"\"\"Return the addition of the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): given tuple\n        list1 (List[int]): given list\n\n    Examples:\n        >>> add_tuples((1, 2, 3), [1, 2, 3])\n        (2, 4, 6)\n    \"\"\"\n    return tuple(map(sum, zip(tuples, list1)))\n\n\ndef add_tuples2(tuples: Tuple[int, ...], list1: List[int]) -> Tuple[int, ...]:\n    \"\"\"Return the addition of the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): given tuple\n        list1 (List[int]): given list\n\n    Examples:\n        >>> add_tuples2((1, 2, 3), [1, 2, 3])\n        (2, 4, 6)\n    \"\"\"\n    return tuples + tuple(list1)\n\n\ndef add_tuples3(tuples: Tuple[int, ...], list1: List[int]) -> Tuple[int, ...]:\n    \"\"\"Return the addition of the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): given tuple\n        list1 (List[int]): given list\n\n    Examples:\n        >>> add_tuples3((1, 2, 3), [1, 2, 3])\n        (2, 4, 6)\n    \"\"\"\n    return tuple(map(sum, zip(tuples, list1)))\n\n\ndef add_tuples4(tuples: Tuple[int, ...], list1: List[int]) -> Tuple[int, ...]:\n    \"\"\"Return the addition of the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): given tuple"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tup: Tuple, list_: List) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple): given tuple\n        list_ (List): given list\n\n    Examples:\n        >>> add_list_to_tuple((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n    \"\"\"\n    return tup + tuple(list_)\n\n\ndef add_list_to_tuple_opt_1(tup: Tuple, list_: List) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple): given tuple\n        list_ (List): given list\n\n    Examples:\n        >>> add_list_to_tuple_opt_1((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n    \"\"\"\n    return tuple(list(tup) + list_)\n\n\ndef add_list_to_tuple_opt_2(tup: Tuple, list_: List) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple): given tuple\n        list_ (List): given list\n\n    Examples:\n        >>> add_list_to_tuple_opt_2((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n    \"\"\"\n    return tup + tuple(list_)\n\n\ndef add_list_to_tuple_opt_3(tup: Tuple, list_: List) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple): given tuple\n        list_ (List): given list\n\n    Examples:\n        >>> add_list_to_tuple_opt"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_lists(tuples: Tuple[int, ...], list: List[int]) -> Tuple[int, ...]:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): the tuples\n        list (List[int]): the list\n\n    Returns:\n        Tuple[int, ...]: the resulting tuples\n    \"\"\"\n    return tuples + tuple(list)\n\n\nif __name__ == \"__main__\":\n    print(add_lists(tuples=(1, 2, 3), list=[4, 5, 6]))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(lst: List, tpl: Tuple) -> List:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        lst (List): list to add\n        tpl (Tuple): tuple to add to\n\n    Returns:\n        List: resulting list\n    \"\"\"\n    return list(map(sum, zip(tpl, lst)))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([1, 2, 3], (1, 2, 3)))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import Tuple, List\n\n\ndef add_list_to_tuples(list: List, tuples: Tuple) -> Tuple:\n    \"\"\"Add list to tuples.\n\n    Args:\n        list (List): list to add\n        tuples (Tuple): tuple to add to\n\n    Returns:\n        Tuple: new tuple with list added\n    \"\"\"\n    return tuple(list) + tuples\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([1, 2, 3], (4, 5, 6)))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef add_list_to_tuples(tuples: List[tuple], list: List) -> List[tuple]:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tuples (List[tuple]): given tuples\n        list (List): given list\n\n    Examples:\n        >>> assert add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2, 3]) == [(1, 2, 3, 1, 2, 3), (4, 5, 6, 1, 2, 3)]\n        >>> assert add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2, 3, 4]) == [(1, 2, 3, 1, 2, 3, 4), (4, 5, 6, 1, 2, 3, 4)]\n    \"\"\"\n    return [tuple(list) + t for t in tuples]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2, 3]))\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2, 3, 4]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def add_list_to_tuple(list, tuple):\n    \"\"\"Add the given list to the given tuple.\"\"\"\n    return tuple + tuple(list)\n\n\ndef test_add_list_to_tuple():\n    \"\"\"Test add_list_to_tuple.\"\"\"\n    assert add_list_to_tuple([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list: List[int]) -> Tuple[int, ...]:\n    \"\"\"Add a list to a tuple.\n\n    Args:\n        tuples (Tuple[int, ...]): list of tuples\n        list (List[int]): list of integers\n\n    Returns:\n        Tuple[int, ...]: new tuple with list added\n    \"\"\"\n    return tuple(map(sum, zip(tuples, list)))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2, 3), [4, 5, 6]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import Tuple, List\n\n\ndef add_tuples(tuples: Tuple[int, ...], list: List[int]) -> Tuple[int, ...]:\n    \"\"\"\n    Add the given list to the given tuples.\n    \"\"\"\n    return tuples + tuple(list)\n\n\ndef main():\n    print(add_tuples((1, 2, 3), [4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tuples: Tuple, lst: List) -> Tuple:\n    \"\"\"\n    >>> add_list_to_tuple((), [1, 2, 3])\n    (1, 2, 3)\n    >>> add_list_to_tuple((1, 2, 3), [4, 5, 6])\n    (1, 2, 3, 4, 5, 6)\n    >>> add_list_to_tuple((1, 2, 3), [4, 5, 6, 7])\n    Traceback (most recent call last):\n        ...\n    ValueError: list length and tuple length must be equal\n    \"\"\"\n    if len(lst) != len(tuples):\n        raise ValueError(\"list length and tuple length must be equal\")\n\n    return tuples + tuple(lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def list_to_tuples(list, tuples):\n    return tuples + tuple(list)\n\n\nprint(list_to_tuples([1, 2, 3], (1, 2)))\nprint(list_to_tuples([1, 2, 3], (1, 2)))\nprint(list_to_tuples([1, 2, 3], (1, 2)))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef list_to_tuples(list_to_add: List[int], tuple_to_add: tuple) -> tuple:\n    \"\"\"Returns a tuple with the given list added to the given tuple.\n\n    Args:\n        list_to_add (List[int]): list to add to the tuple\n        tuple_to_add (tuple): tuple to add to\n\n    Examples:\n        >>> assert list_to_tuples([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3)\n    \"\"\"\n    return tuple(list_to_add) + tuple(tuple_to_add)\n\n\nif __name__ == \"__main__\":\n    print(list_to_tuples([1, 2, 3], (4, 5, 6)))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(a_tuple: Tuple, a_list: List) -> Tuple:\n    \"\"\"Add a list to a tuple.\n\n    Args:\n        a_tuple (Tuple): a tuple to add list to\n        a_list (List): list to add to tuple\n\n    Returns:\n        Tuple: a tuple with list added to it\n    \"\"\"\n    return a_tuple + a_list\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((\"a\", \"b\", \"c\"), [\"d\", \"e\", \"f\"]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef add_list_to_tuple(tuple_of_lists: Tuple[list, ...], list_to_add: list) -> Tuple[list, ...]:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tuple_of_lists (Tuple[list, ...]): tuple of lists to add list_to_add to\n        list_to_add (list): list to add to tuple_of_lists\n\n    Returns:\n        Tuple[list, ...]: tuple of lists with list_to_add added\n    \"\"\"\n    return tuple(map(lambda x: x + list_to_add, tuple_of_lists))\n\n\ndef main():\n    print(add_list_to_tuple(([1, 2], [3, 4]), [5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(list1: List, tuple1: Tuple) -> Tuple:\n    \"\"\"Returns the sum of a list and a tuple.\n\n    Args:\n        list1 (List): The list to add.\n        tuple1 (Tuple): The tuple to add.\n\n    Examples:\n        >>> add_list_to_tuple([1, 2, 3], (4, 5, 6))\n        (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    return tuple(list1 + list(tuple1))\n\n\ndef main():\n    print(add_list_to_tuple([1, 2, 3], (4, 5, 6)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef add_tuples(tuples: List[tuple], list_to_add: List[int]):\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n        list_to_add (List[int]): list of integers\n\n    Returns:\n        List[tuple]: list of tuples\n    \"\"\"\n    return [tuple(x + y for x, y in zip(list(tup), list_to_add)) for tup in tuples]\n\n\nif __name__ == \"__main__\":\n    print(add_tuples([(1, 2, 3, 4), (5, 6, 7, 8)], [1, 2, 3, 4]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(list: List, tuple: Tuple) -> Tuple:\n    \"\"\"Add the given list to the given tuple.\n\n    Args:\n        list (List): The list to add.\n        tuple (Tuple): The tuple to add to.\n\n    Returns:\n        Tuple: The tuple with the list added.\n    \"\"\"\n    return tuple + (list,)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([\"a\", \"b\", \"c\"], (\"d\", \"e\")))\n    print(add_list_to_tuple([\"a\", \"b\", \"c\"], (\"d\",)))\n    print(add_list_to_tuple([\"a\", \"b\", \"c\"], ()))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef add_list_to_tuple(my_list: List, my_tuple: Tuple) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        my_list (List): list to be added to the tuple\n        my_tuple (Tuple): tuple to which the list will be added\n\n    Returns:\n        Tuple: tuple with the added list\n    \"\"\"\n    return my_tuple + tuple(my_list)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([1, 2, 3], (4, 5, 6)))\n    print(add_list_to_tuple([\"a\", \"b\", \"c\"], (\"d\", \"e\", \"f\")))"
    }
  ]
}