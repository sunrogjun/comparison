{
  "timestamp": "2025-09-15T01:18:24.110977",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 396,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def next_bigger(num):\n    num_arr = [int(i) for i in str(num)]\n    i = len(num_arr) - 1\n    while i > 0:\n        if num_arr[i - 1] < num_arr[i]:\n            j = i\n            while num_arr[j] > num_arr[i - 1]:\n                j -= 1\n            num_arr[i - 1], num_arr[j] = num_arr[j], num_arr[i - 1]\n            num_arr[i:] = num_arr[i:][::-1]\n            return int(\"\".join([str(i) for i in num_arr]))\n        i -= 1\n    return -1\n\n\nprint(next_bigger(12))\nprint(next_bigger(513))\nprint(next_bigger(2017))\nprint(next_bigger(41732211))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef next_bigger(n: int) -> int:\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(417331)\n    431713\n    \"\"\"\n    a: List[int] = list(str(n))\n    i: int = 0\n\n    while i < len(a) - 1 and a[i] <= a[i + 1]:\n        i += 1\n\n    if i == len(a) - 1:\n        return -1\n\n    j: int = len(a) - 1\n\n    while a[j] <= a[i]:\n        j -= 1\n\n    a[i], a[j] = a[j], a[i]\n    a[i + 1 :] = reversed(a[i + 1 :])\n\n    return int(\"\".join(str(x) for x in a))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def next_bigger(num: int) -> int:\n    \"\"\"\n    Next bigger number by rearranging the digits of a given number.\n\n    Args:\n        num (int): number to find next bigger number.\n\n    Examples:\n        >>> assert next_bigger(12) == 21\n        >>> assert next_bigger(513) == 531\n        >>> assert next_bigger(2017) == 2071\n        >>> assert next_bigger(414) == 441\n    \"\"\"\n    digits = list(map(int, str(num)))\n    digits.reverse()\n    for i in range(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            min_num = digits[i + 1]\n            min_index = i + 1\n            for j in range(i + 1, len(digits)):\n                if digits[j] < min_num:\n                    min_num = digits[j]\n                    min_index = j\n            digits[i], digits[min_index] = digits[min_index], digits[i]\n            digits[i + 1 :] = digits[i + 1 :][::-1]\n            return int(\"\".join(map(str, digits)))\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))\n    print(next_bigger(414))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def next_bigger_number(num):\n    \"\"\"\n    >>> next_bigger_number(12)\n    21\n    >>> next_bigger_number(513)\n    531\n    >>> next_bigger_number(2017)\n    7201\n    >>> next_bigger_number(701)\n    710\n    >>> next_bigger_number(7)\n    Traceback (most recent call last):\n        ...\n    ValueError: number has no bigger number\n    \"\"\"\n    num_list = list(map(int, str(num)))\n    if len(num_list) < 2:\n        raise ValueError(\"number has no bigger number\")\n\n    i = len(num_list) - 1\n    while i > 0:\n        if num_list[i - 1] < num_list[i]:\n            break\n        i -= 1\n    else:\n        raise ValueError(\"number has no bigger number\")\n\n    j = len(num_list) - 1\n    while num_list[j] <= num_list[i - 1]:\n        j -= 1\n    num_list[i - 1], num_list[j] = num_list[j], num_list[i - 1]\n    num_list[i:] = num_list[len(num_list) - 1 : i - 1 : -1]\n    return int(\"\".join(map(str, num_list)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def next_bigger(num):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    num_str = str(num)\n    digits = list(map(int, num_str))\n    for i in range(len(digits) - 2, -1, -1):\n        for j in range(len(digits) - 1, i, -1):\n            if digits[i] < digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n                digits[i + 1 :] = sorted(digits[i + 1 :])\n                return int(\"\".join(map(str, digits)))\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))\n    print(next_bigger(4173305))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def next_bigger(number: int) -> int:\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(4173221)\n    4213721\n    >>> next_bigger(1432264)\n    1442263\n    >>> next_bigger(111)\n    >>> next_bigger(9)\n    \"\"\"\n    if number < 0 or number >= 10:\n        raise ValueError(\"Input number should be between 0 and 9\")\n\n    digits = [int(digit) for digit in str(number)]\n    digits.sort(reverse=True)\n\n    for index in range(len(digits) - 1):\n        if digits[index] < digits[index + 1]:\n            break\n    else:\n        return\n\n    if index == len(digits) - 2:\n        return\n\n    next_bigger = digits[:index] + [digits[index + 1], digits[index]] + digits[index + 2:]\n    return int(\"\".join(str(digit) for digit in next_bigger))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def bigger_number(num):\n    \"\"\"\n    >>> bigger_number(12345)\n    54321\n    >>> bigger_number(59821)\n    98251\n    >>> bigger_number(5982)\n    9825\n    >>> bigger_number(10000)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must contain more than 1 digit\n    \"\"\"\n    if len(str(num)) < 2:\n        raise ValueError(\"Input must contain more than 1 digit\")\n\n    num_list = [int(i) for i in str(num)]\n    num_list.sort(reverse=True)\n    result = \"\"\n\n    for i in num_list:\n        result += str(i)\n\n    return int(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def get_next_bigger_number(number: int) -> int:\n    \"\"\"Return the next bigger number by rearranging the digits of a given number.\n\n    Args:\n        number (int): the number to rearrange.\n\n    Examples:\n        >>> assert get_next_bigger_number(12) == 21\n        >>> assert get_next_bigger_number(513) == 531\n        >>> assert get_next_bigger_number(2017) == 2071\n        >>> assert get_next_bigger_number(20137) == 20731\n    \"\"\"\n    number_list = list(str(number))\n    index_of_min_num = len(number_list) - 1\n    for i in range(len(number_list) - 1, 0, -1):\n        if number_list[i] > number_list[i - 1]:\n            index_of_min_num = i - 1\n            break\n    if index_of_min_num == len(number_list) - 1:\n        return -1\n    number_list[index_of_min_num], number_list[index_of_min_num + 1 :] = (\n        number_list[index_of_min_num + 1 :][0],\n        number_list[index_of_min_num : index_of_min_num + 1],\n    )\n    return int(\"\".join(number_list))\n\n\nif __name__ == \"__main__\":\n    print(get_next_bigger_number(12))\n    print(get_next_bigger_number(513))\n    print(get_next_bigger_number(2017))\n    print(get_next_bigger_number(20137))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def next_bigger(num: int) -> int:\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(41732211)\n    42131721\n    \"\"\"\n    num_str: str = str(num)\n    len_num: int = len(num_str)\n\n    if len_num <= 1:\n        return num\n\n    # find the first digit that is smaller than the digit following it\n    i: int = 0\n    while i < len_num - 1:\n        if num_str[i] > num_str[i + 1]:\n            break\n        i += 1\n\n    # no such digit found\n    if i == len_num - 1:\n        return -1\n\n    # reverse the digits after the first digit\n    j: int = len_num - 1\n    while i < j:\n        num_str[i], num_str[j] = num_str[j], num_str[i]\n        i += 1\n        j -= 1\n\n    # convert the number back to integer\n    return int(\"\".join(num_str))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def next_bigger_number(number):\n    \"\"\"\n    >>> next_bigger_number(12)\n    21\n    >>> next_bigger_number(513)\n    531\n    >>> next_bigger_number(2017)\n    2071\n    >>> next_bigger_number(41732211)\n    12213741\n    \"\"\"\n    digits = [int(x) for x in str(number)]\n    digits_set = set(digits)\n\n    for i in range(len(digits) - 1, 0, -1):\n        for j in range(i - 1, -1, -1):\n            if digits[j] < digits[i]:\n                digits[i], digits[j] = digits[j], digits[i]\n                digits[j + 1 :] = digits[j + 1 :][::-1]\n                return int(\"\".join(map(str, digits)))\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def next_bigger(number):\n    \"\"\"\n    This function takes a number and creates the next bigger number by rearranging the digits.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if number < 10:\n        return -1\n\n    num_str = str(number)\n    num_list = list(map(int, num_str))\n\n    i = len(num_list) - 2\n    while i >= 0:\n        if num_list[i] < num_list[i + 1]:\n            break\n        i -= 1\n\n    if i < 0:\n        return -1\n\n    j = len(num_list) - 1\n    while j > i:\n        if num_list[j] > num_list[i]:\n            break\n        j -= 1\n\n    num_list[i], num_list[j] = num_list[j], num_list[i]\n\n    num_list = num_list[:i + 1] + sorted(num_list[i + 1:])\n\n    return int(\"\".join(map(str, num_list)))\n\n\nprint(next_bigger(12))"
    },
    {
      "rank": 12,
      "score": 9.0,
      "candidate": "def get_next_bigger(num: int) -> int:\n    num = str(num)\n    n = len(num)\n    if n < 2:\n        return -1\n\n    for i in range(n - 2, -1, -1):\n        if num[i] < num[i + 1]:\n            # Find the rightmost digits to swap\n            j = n - 1\n            while num[j] <= num[i]:\n                j -= 1\n            num = num[:i] + num[j] + num[i + 1:j] + num[i] + num[j + 1:]\n            num = int(num)\n            return num\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(get_next_bigger(218))\n    print(get_next_bigger(1234))\n    print(get_next_bigger(513))\n    print(get_next_bigger(231))\n    print(get_next_bigger(1248))\n    print(get_next_bigger(111))\n    print(get_next_bigger(1452))\n    print(get_next_bigger(1452))"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "def next_bigger(num: int) -> int:\n    \"\"\"\n    Create the next bigger number by rearranging the digits of a given number.\n\n    Args:\n        num (int): input number\n\n    Examples:\n        >>> assert next_bigger(12) == 21\n        >>> assert next_bigger(513) == 531\n        >>> assert next_bigger(2017) == 2071\n        >>> assert next_bigger(4153226) == 4213562\n        >>> assert next_bigger(102) == 210\n        >>> assert next_bigger(2) == -1\n    \"\"\"\n    digits = [int(digit) for digit in str(num)]\n\n    for index in range(len(digits) - 1, 0, -1):\n        if digits[index - 1] < digits[index]:\n            for inner_index in range(index, len(digits)):\n                if digits[inner_index] > digits[index - 1]:\n                    digits[index - 1], digits[inner_index] = (\n                        digits[inner_index],\n                        digits[index - 1],\n                    )\n                    break\n            digits[index:] = digits[:index:-1]\n            return int(\"\".join(map(str, digits)))\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))\n    print(next_bigger(4153226))\n    print(next_bigger(102))\n    print(next_bigger(2))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    n = str(n)\n    l = len(n)\n    for i in range(l-1):\n        if n[i] < n[i+1]:\n            for j in range(i+1, l):\n                if n[j] > n[i]:\n                    break\n            n = n[:i+1] + n[j] + n[i+1:j] + n[i] + n[j+1:]\n            return int(n)\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def next_bigger(number):\n    \"\"\"\n    >>> next_bigger(1234)\n    2134\n    >>> next_bigger(5134)\n    5314\n    >>> next_bigger(2143)\n    2314\n    >>> next_bigger(2134)\n    2143\n    \"\"\"\n    number = str(number)\n    numbers = list(map(int, number))\n    for i in range(len(numbers) - 1):\n        if numbers[i] < numbers[i + 1]:\n            for j in range(i + 1, len(numbers)):\n                if numbers[j] > numbers[i]:\n                    numbers[i], numbers[j] = numbers[j], numbers[i]\n                    numbers[i + 1 :] = sorted(numbers[i + 1 :])\n                    return int(\"\".join(map(str, numbers)))\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def next_bigger(num: int) -> int:\n    \"\"\"\n    Reverse the number and check if it's greater than the original.\n    If it is, return it, otherwise, search for the next bigger number.\n\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    :param num: number to find the next bigger number\n    :return: next bigger number\n    \"\"\"\n    num = str(num)[::-1]\n    for i in range(len(num) - 1):\n        if num[i] < num[i + 1]:\n            for j in range(i + 1, len(num) - 1):\n                if num[j] > num[i]:\n                    num = num[:i] + num[j] + num[i + 1 : j] + num[i] + num[j + 1 :]\n                    return int(num[::-1])\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))\n    print(next_bigger(41732211))\n    print(next_bigger(111))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def get_next_bigger(n: int) -> int:\n    \"\"\"\n    Get the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Number should be positive\")\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i - 1] < digits[i]:\n            j = i\n            while j < len(digits):\n                if digits[j] > digits[i - 1]:\n                    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n                    break\n                j += 1\n            digits[i:j] = sorted(digits[i:j])\n            return int(\"\".join([str(x) for x in digits]))\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(get_next_bigger(12))\n    print(get_next_bigger(513))\n    print(get_next_bigger(2017))\n    print(get_next_bigger(41732211))\n    print(get_next_bigger(41332211))\n    print(get_next_bigger(11332211))\n    print(get_next_bigger(113322111))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def next_bigger(number):\n    # convert to a list\n    num_list = [int(x) for x in str(number)]\n    # find the index of the largest number in the list\n    largest_index = len(num_list) - 1\n    # find the index of the largest number in the list\n    smallest_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] > num_list[largest_index]:\n            largest_index = i\n        if num_list[i] < num_list[smallest_index]:\n            smallest_index = i\n    # if the largest number is already the smallest number, return None\n    if largest_index == smallest_index:\n        return None\n    # if the largest number is not the smallest number, swap them\n    num_list[largest_index], num_list[smallest_index] = num_list[smallest_index], num_list[largest_index]\n    # reverse the list after the smallest number\n    num_list = num_list[smallest_index+1:] + num_list[:smallest_index+1][::-1]\n    # convert back to a number\n    return int(''.join(str(x) for x in num_list))\n\n\nprint(next_bigger(231))\nprint(next_bigger(99))\nprint(next_bigger(121))\nprint(next_bigger(111))\nprint(next_bigger(101))\nprint(next_bigger(110))\nprint(next_bigger(120))\nprint(next_bigger(212))\nprint(next_bigger(221))\nprint(next_bigger(123))\nprint(next_bigger(132))\nprint(next_bigger(213))\nprint(next_bigger(231))\nprint(next_bigger(211))\nprint(next_bigger(1221))\nprint(next_bigger(2121))\nprint(next_bigger(2211))\nprint"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    \"\"\"\n    This function takes a number as input and returns the next bigger number with the same digits.\n    It does so by rearranging the digits of the input number.\n    \"\"\"\n    n = list(str(n))\n    n = [int(i) for i in n]\n    i = len(n) - 1\n    while i > 0:\n        if n[i] > n[i - 1]:\n            break\n        i -= 1\n    if i == 0:\n        return None\n    j = len(n) - 1\n    while n[j] <= n[i - 1]:\n        j -= 1\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = reversed(n[i:])\n    return int(\"\".join(str(i) for i in n))\n\nif __name__ == '__main__':\n    #print(next_bigger(12))\n    print(next_bigger(513))\n    #print(next_bigger(2017))\n    #print(next_bigger(452))\n    #print(next_bigger(1452))\n    #print(next_bigger(534976))\n    #print(next_bigger(999999))\n    #print(next_bigger(99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    7201\n    >>> next_bigger(41732211)\n    11223714\n    \"\"\"\n    n = str(n)\n    n = list(n)\n    i = len(n) - 2\n    while i >= 0:\n        if n[i] < n[i + 1]:\n            j = len(n) - 1\n            while n[i] >= n[j]:\n                j -= 1\n            n[i], n[j] = n[j], n[i]\n            n[i + 1 :] = reversed(n[i + 1 :])\n            return int(\"\".join(n))\n        i -= 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def next_bigger(number: int) -> int:\n    \"\"\"\n    >>> next_bigger(123)\n    213\n    >>> next_bigger(9)\n    9\n    >>> next_bigger(54321)\n    54213\n    >>> next_bigger(1024)\n    2104\n    >>> next_bigger(1023)\n    2130\n    >>> next_bigger(2564123)\n    2354162\n    \"\"\"\n    number = str(number)[::-1]\n    i = 0\n    while i < len(number) - 1:\n        if number[i] <= number[i + 1]:\n            i += 1\n        else:\n            break\n    if i == len(number) - 1:\n        return -1\n    j = len(number) - 1\n    while number[j] <= number[i]:\n        j -= 1\n    number = number[:i] + number[j] + number[i + 1 : j] + number[i] + number[j + 1 :]\n    return int(number[::-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def next_bigger(num):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = str(num)\n    digits = [int(i) for i in digits]\n    # print(digits)\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            # print(i)\n            # print(digits)\n            for j in range(i+1, len(digits)):\n                if digits[j] > digits[i]:\n                    # print(digits)\n                    # print(digits[i:j+1])\n                    # print(digits[j+1:])\n                    digits[i+1:j+1] = sorted(digits[i+1:j+1])[::-1]\n                    # print(digits)\n                    return int(''.join([str(i) for i in digits]))\n    return -1\n\n\ndef next_bigger_stack(num):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = str(num)\n    digits = [int(i) for i in digits]\n    stack = []\n    for i in range(len(digits)-1, -1, -1):\n        if len(stack) == 0:\n            stack.append(digits[i])\n        else:\n            if digits[i] > stack[-1]:\n                stack.append(digits[i])\n            else:\n                while len(stack) > 0 and digits[i] <= stack[-1]:\n                    stack.pop()\n                stack.append(digits[i])\n    if len(stack) == 0:\n        return -1\n    else:\n        digits = stack + digits[len(stack):]\n        return int(''.join([str(i) for i in digits]))\n\n\nif __name__ == '__main__':\n    print(next_bigger(35241))\n    print(next_bigger(2431))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def next_bigger_number(num):\n    num_str = str(num)\n    num_str_list = list(num_str)\n    num_str_list.sort()\n\n    index = len(num_str_list) - 1\n\n    while index > 0:\n        if num_str_list[index] > num_str_list[index - 1]:\n            break\n        index -= 1\n\n    if index == 0:\n        return -1\n\n    left_half = num_str_list[:index]\n    right_half = num_str_list[index:]\n    right_half.reverse()\n\n    for i in range(len(right_half)):\n        if right_half[i] > num_str_list[index - 1]:\n            right_half[i] = num_str_list[index - 1]\n            break\n\n    right_half.reverse()\n    right_half = ''.join(right_half)\n    left_half = ''.join(left_half)\n\n    return int(left_half + right_half)\n\nprint(next_bigger_number(12))\nprint(next_bigger_number(513))\nprint(next_bigger_number(2017))\nprint(next_bigger_number(452))\nprint(next_bigger_number(1452))\nprint(next_bigger_number(1435))\nprint(next_bigger_number(1453))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def next_bigger_number(number: int) -> int:\n    \"\"\"\n    The algorithm is to find the next bigger number by rearranging the digits of a given number.\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    number = list(str(number))\n    index = len(number) - 1\n\n    # find the first digit that is smaller than the digit following it\n    while index > 0:\n        if number[index - 1] < number[index]:\n            break\n        index -= 1\n\n    if index == 0:\n        return -1\n\n    # find the smallest digit on the right side of the first digit that is bigger than number[index - 1]\n    right_index = index + 1\n    smallest = right_index\n    while right_index < len(number):\n        if number[right_index] > number[index - 1] and number[right_index] < number[smallest]:\n            smallest = right_index\n        right_index += 1\n\n    # swap the digit in index - 1 with the smallest digit\n    number[index - 1], number[smallest] = number[smallest], number[index - 1]\n\n    # reverse the number from index to the end\n    number[index:] = number[index:][::-1]\n\n    return int(\"\".join(number))\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(12) == 21\n    assert next_bigger_number(513) == 531\n    assert next_bigger_number(2017) == 7201\n    assert next_bigger_number(414) == 441\n    assert next_bigger_number(1442) == 2414\n    assert next_bigger_number(1) == -1\n    assert next_bigger_number(531) == 513\n    assert next_bigger_number(2014) == 4201"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def next_bigger(n: int) -> int:\n    \"\"\"\n    Solution with stack.\n    O(n)t | O(n)s\n    \"\"\"\n    stack = []\n    num_str = str(n)\n    for i in range(len(num_str) - 1, -1, -1):\n        while stack and stack[-1] > num_str[i]:\n            stack.pop()\n        if not stack or stack[-1] < num_str[i]:\n            stack.append(num_str[i])\n\n    if len(stack) == len(num_str):\n        return -1\n\n    return int(\"\".join(stack + num_str[len(stack):]))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(231))\n    print(next_bigger(45231))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def swap(num, i, j):\n    temp = num[i]\n    num[i] = num[j]\n    num[j] = temp\n\ndef next_bigger(num):\n    num = list(num)\n    i = len(num) - 1\n    while i > 0 and num[i] <= num[i-1]:\n        i -= 1\n\n    if i <= 0:\n        return False\n\n    j = len(num) - 1\n    while j > i - 1 and num[j] <= num[i-1]:\n        j -= 1\n    swap(num, i-1, j)\n\n    num[i:] = num[len(num)-1:i-1:-1]\n    return int(''.join(num))\n\n\nif __name__ == '__main__':\n    assert next_bigger(12) == 21\n    assert next_bigger(513) == 531\n    assert next_bigger(2017) == 2071\n    assert next_bigger(414) == 441\n    assert next_bigger(1442) == 4241\n    assert next_bigger(1432) == False"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def next_bigger(num):\n    \"\"\"\n    Create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num = list(str(num))\n    i = len(num) - 1\n    while i > 0:\n        if num[i - 1] < num[i]:\n            break\n        i -= 1\n    if i == 0:\n        return -1\n    while num[i] > num[i - 1]:\n        i += 1\n    num[i - 1], num[i] = num[i], num[i - 1]\n    return int(''.join(num[:i] + sorted(num[i:])))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def next_bigger_number(n):\n    \"\"\"\n    Return the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    if n == 0:\n        return None\n\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n\n    for i in range(1, len(digits)):\n        if digits[i - 1] < digits[i]:\n            return int(\"\".join([str(digit) for digit in digits[:i - 1] + digits[i:][::-1]]))\n\n    return None\n\ndef main():\n    \"\"\"\n    Entry point\n    \"\"\"\n    assert next_bigger_number(12) == 21\n    assert next_bigger_number(513) == 531\n    assert next_bigger_number(2017) == 7210\n    assert next_bigger_number(414) == 441\n    assert next_bigger_number(1442) == 2441\n    assert next_bigger_number(73289) == 83279\n    assert next_bigger_number(89) == None\n    assert next_bigger_number(89989) == None\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "class Queue:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return not self.items\n\n    def enqueue(self, item):\n        self.items.insert(0, item)\n\n    def dequeue(self):\n        return self.items.pop()\n\n    def size(self):\n        return len(self.items)\n\n\ndef next_bigger(number):\n    number = str(number)\n    stack = Queue()\n    for i in range(len(number) - 1, -1, -1):\n        while not stack.is_empty() and stack.items[-1] >= number[i]:\n            stack.dequeue()\n        stack.enqueue(number[i])\n\n    if stack.size() == len(number):\n        return -1\n\n    ans = \"\"\n    while not stack.is_empty():\n        ans += stack.dequeue()\n\n    return int(ans + number[len(number) - stack.size() :])\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(231))\n    print(next_bigger(452))\n    print(next_bigger(1452))\n    print(next_bigger(54321))\n    print(next_bigger(124352))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def next_bigger(number):\n    number = list(str(number))\n    for i in range(len(number) - 2, -1, -1):\n        if number[i] < number[i + 1]:\n            break\n\n    for j in range(len(number) - 1, i, -1):\n        if number[j] > number[i] and number[j] < number[i + 1]:\n            break\n\n    number[i], number[j] = number[j], number[i]\n    number[i + 1:] = number[i + 1 :][::-1]\n    return int(\"\".join(number))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))\n    print(next_bigger(41732211))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def next_bigger(num):\n    if num < 0:\n        raise ValueError(\"Negative numbers cannot be used.\")\n\n    num_str = str(num)\n    num_arr = [int(x) for x in num_str]\n    num_arr.sort(reverse=True)\n\n    for i in range(len(num_arr) - 1):\n        if num_arr[i] < num_arr[i+1]:\n            # Find the smallest number greater than num_arr[i] in num_arr[i+1:]\n            small_num = num_arr[i]\n            small_num_index = i\n            for j in range(i+1, len(num_arr)):\n                if num_arr[j] > small_num and num_arr[j] < num_arr[small_num_index]:\n                    small_num = num_arr[j]\n                    small_num_index = j\n\n            # Swap the numbers\n            num_arr[i], num_arr[small_num_index] = num_arr[small_num_index], num_arr[i]\n            # Reverse the numbers after the number at num_arr[i]\n            num_arr[i+1:] = num_arr[i+1:][::-1]\n\n            return int(\"\".join([str(x) for x in num_arr]))\n\n    return -1\n\nprint(next_bigger(12))\nprint(next_bigger(513))\nprint(next_bigger(2017))\nprint(next_bigger(41732211))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def next_bigger(number):\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    \"\"\"\n    number_str = str(number)\n    if number_str == number_str[::-1]:\n        return -1\n\n    number_list = [int(x) for x in number_str]\n    index = 0\n    while number_list[index] >= number_list[index + 1]:\n        index += 1\n\n    index += 1\n    while number_list[index] <= number_list[index - 1]:\n        index += 1\n\n    number_list[index - 1], number_list[index] = (\n        number_list[index],\n        number_list[index - 1],\n    )\n    number_list[index + 1 :] = number_list[index + 1 :][::-1]\n    return int(\"\".join(str(x) for x in number_list))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def swap_digits(n, i, j):\n    n = list(str(n))\n    n[i], n[j] = n[j], n[i]\n    return int(\"\".join(n))\n\ndef swap_next_bigger(n):\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i] <= n[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(n) - 1\n    while n[j] >= n[i - 1]:\n        j -= 1\n    n[i - 1], n[j] = n[j], n[i - 1]\n    return int(\"\".join(n[:i] + n[i:][::-1]))\n\ndef next_bigger(n):\n    n = list(str(n))\n    n.reverse()\n    i = 0\n    while i < len(n) - 1 and n[i] <= n[i + 1]:\n        i += 1\n    if i == len(n) - 1:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i]:\n        j -= 1\n    n[i], n[j] = n[j], n[i]\n    n[i + 1:] = n[i + 1:][::-1]\n    return int(\"\".join(n))\n\n\nif __name__ == \"__main__\":\n    assert swap_digits(1234, 0, 1) == 2134\n    assert swap_digits(1234, 1, 2) == 1324\n    assert swap_digits(1234, 2, 3) == 1243\n    assert swap_digits(1234, 3, 0) == 4123\n    assert swap_digits(1234, 0, 3) == 4321\n\n    assert swap_next_bigger"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def next_bigger(n: int) -> int:\n    \"\"\"\n    We have to find the next biggest number by rearranging the digits of a given number.\n    We can swap digits to create a bigger number.\n    For example: 312 can be rearranged to 123, 132, 213, 231.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    :param n: number to find next bigger number\n    :return: next bigger number\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a positive number.\")\n\n    if n < 10:\n        return n\n\n    n_str = str(n)\n    n_str_list = list(n_str)\n    n_str_list.sort()\n    n_str_list_reversed = n_str_list[::-1]\n\n    for i in range(len(n_str_list)):\n        if n_str_list_reversed[i] != n_str_list[i]:\n            break\n\n    if i == len(n_str_list) - 1:\n        return -1\n\n    swap_index = i + 1\n\n    for j in range(swap_index, len(n_str_list)):\n        if n_str_list[j] >= n_str_list[swap_index]:\n            continue\n\n        if n_str_list[j] <= n_str_list[swap_index]:\n            swap_index = j\n            break\n\n    n_str_list[swap_index], n_str_list[i] = n_str_list[i], n_str_list[swap_index]\n    n_str_list_reversed = n_str_list[swap_index + 1 :]\n    n_str_list_reversed.sort()\n\n    return int(\"\".join(n_str_list[: swap_index + 1] + n_str_list_reversed))\n\n\nif __name__ == \"__main__\":\n    print(next_b"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def get_next_bigger(num):\n    \"\"\"\n    Get next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num_str = str(num)\n    num_str_list = list(num_str)\n    for i in range(len(num_str_list) - 1, 0, -1):\n        for j in range(i - 1, -1, -1):\n            if num_str_list[i] < num_str_list[j]:\n                num_str_list[i], num_str_list[j] = num_str_list[j], num_str_list[i]\n                num_str_list[j + 1:] = sorted(num_str_list[j + 1:])\n                return int(\"\".join(num_str_list))\n    return -1\n\n\ndef main():\n    \"\"\"\n    Driver function.\n    \"\"\"\n    num = int(input(\"Enter a number: \"))\n    print(get_next_bigger(num))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def next_bigger(number: int) -> int:\n    \"\"\"\n    Iterate through digits, find the first digit that is smaller than the next digit.\n    Find the smallest digit on the right side of it, that is greater than the first digit.\n    Swap these two digits.\n    Reverse digits after the first digit.\n\n    O(n) time and space\n    \"\"\"\n    digits = [int(digit) for digit in str(number)]\n    for i in range(len(digits) - 1):\n        for j in range(i + 1, len(digits)):\n            if digits[i] < digits[j]:\n                for k in range(len(digits) - 1, i, -1):\n                    if digits[k] > digits[i]:\n                        digits[i], digits[k] = digits[k], digits[i]\n                        digits[j : len(digits)] = digits[j : len(digits)][::-1]\n                        return int(\"\".join(map(str, digits)))\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert next_bigger(12) == 21\n    assert next_bigger(513) == 531\n    assert next_bigger(2017) == 2071\n    assert next_bigger(414) == 441\n    assert next_bigger(1442) == 4124\n    assert next_bigger(111) == -1"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def next_bigger(num):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Only non-negative integers allowed\")\n\n    num = str(num)\n    digits = list(map(int, num))\n\n    # Find the first digit from the right that is smaller than the digit next to it\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        raise ValueError(\"No larger number possible\")\n\n    # Find the first digit from the right that is bigger than the digit next to it\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    # Swap the digits\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Reverse the digits from the right of the first digit that was swapped\n    digits = digits[: i + 1] + digits[i + 1 :][::-1]\n\n    return int(\"\".join(map(str, digits)))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(231))\n    print(next_bigger(412))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def next_bigger_number(num):\n    num_str = str(num)\n    # Get the digits of the number\n    digits = list(map(int, num_str))\n    digits.sort()\n    # Find the index of the first digit that is smaller than the next digit\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    # If no such index found, return -1\n    if i == 0:\n        return -1\n    # Find the index of the first digit that is greater than the digit at index i\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    # Swap the digits at index i and index j\n    digits[i], digits[j] = digits[j], digits[i]\n    # Reverse the digits after index i\n    digits[i + 1 :] = digits[i + 1 :][::-1]\n    return int(\"\".join(map(str, digits)))\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(next_bigger_number(num))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    n = str(n)\n    if n == n[::-1]:\n        return -1\n    for i in range(len(n)-2, -1, -1):\n        if n[i] < n[i+1]:\n            break\n    for j in range(len(n)-1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    return int(\"\".join(n[:i+1] + n[i+1:][::-1]))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))\n    print(next_bigger(4173309))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    n = str(n)\n    i = len(n) - 1\n    while i > 0:\n        if n[i - 1] < n[i]:\n            for j in range(len(n) - 1, i - 1, -1):\n                if n[j] > n[i - 1]:\n                    n = n[:i - 1] + n[i] + n[i - 1 + 1:j + 1] + n[i] + n[j + 1:]\n                    return int(n)\n        i -= 1\n    return -1\n\n\nprint(next_bigger(4321))\nprint(next_bigger(12345))\nprint(next_bigger(12354))\nprint(next_bigger(13542))\nprint(next_bigger(51342))\nprint(next_bigger(15342))\nprint(next_bigger(246802))\nprint(next_bigger(2480680))\nprint(next_bigger(8888888))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def bigger_number(number):\n    \"\"\"\n    >>> bigger_number(12345)\n    54321\n    >>> bigger_number(598)\n    985\n    >>> bigger_number(548)\n    854\n    >>> bigger_number(1000000000)\n    1000000000\n    >>> bigger_number(10000)\n    10000\n    >>> bigger_number(123456789)\n    987654321\n    \"\"\"\n    number = str(number)\n    if len(number) == 1:\n        return number\n\n    number = sorted(number, reverse=True)\n    result = ''\n\n    for i in range(len(number)):\n        result += number[i]\n\n    return int(result)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def next_bigger_number(num):\n    num = str(num)\n    i = len(num) - 2\n    while i >= 0:\n        if num[i] < num[i + 1]:\n            break\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(num) - 1\n    while num[j] <= num[i]:\n        j -= 1\n    num = num[:i] + num[j] + num[i + 1:j] + num[i] + num[j + 1:]\n    return int(num)\n\n\nprint(next_bigger_number(12))\nprint(next_bigger_number(513))\nprint(next_bigger_number(2017))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def next_bigger_number(number):\n    number = list(str(number))\n    for i in range(len(number) - 2, -1, -1):\n        if number[i] < number[i + 1]:\n            for j in range(len(number) - 1, i, -1):\n                if number[j] > number[i]:\n                    number[i], number[j] = number[j], number[i]\n                    break\n            number = number[:i + 1] + sorted(number[i + 1:])\n            return int(''.join(number))\n    return -1\n\nprint(next_bigger_number(12))\nprint(next_bigger_number(513))\nprint(next_bigger_number(2017))\nprint(next_bigger_number(414))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    n = str(n)\n    if n == n[::-1]:\n        return -1\n    n = sorted(n)\n    for i in range(len(n) - 1):\n        if n[i] < n[i + 1]:\n            for j in range(i + 1, len(n)):\n                if n[j] > n[i]:\n                    return int(\"\".join(n[:i] + [n[j]] + n[i + 1:j] + [n[i]] + n[j + 1:]))\n\n\nprint(next_bigger(12))\nprint(next_bigger(513))\nprint(next_bigger(2017))\nprint(next_bigger(9))\nprint(next_bigger(514))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def swap_digits(num, i, j):\n    num = list(str(num))\n    num[i], num[j] = num[j], num[i]\n    return int(''.join(num))\n\n\ndef swap_digits_to_the_end(num, i, j):\n    num = list(str(num))\n    num.insert(i, num.pop(j))\n    return int(''.join(num))\n\n\ndef next_bigger(num):\n    for i in range(len(num) - 1, 0, -1):\n        for j in range(i - 1, -1, -1):\n            if num[i] < num[j]:\n                swapped = swap_digits(num, i, j)\n                num_after_swap = num[:j] + sorted(num[j:])\n                return int(''.join(str(x) for x in num_after_swap))\n\n    return None\n\n\ndef next_bigger_2(num):\n    num = list(str(num))\n    swap_index = None\n    for i in range(len(num) - 1, 0, -1):\n        if num[i - 1] < num[i]:\n            swap_index = i - 1\n            break\n\n    if swap_index is None:\n        return None\n\n    for j in range(len(num) - 1, swap_index - 1, -1):\n        if num[j] > num[swap_index]:\n            swap_digits_to_the_end(num, swap_index, j)\n            break\n\n    return int(''.join(str(x) for x in sorted(num[swap_index + 1:] + num[:swap_index + 1])))\n\n\ndef main():\n    assert next_bigger(12) == 21\n    assert next_bigger(513) == 531\n    assert next_bigger(231) == 321\n    assert next_bigger(4123) == 4213\n    assert next_bigger(432"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    \"\"\"\n    returns the next bigger number with the same digits as n\n\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(414)\n    441\n    \"\"\"\n    #convert n to a string\n    n = str(n)\n    #find the index of the last increasing digit\n    for i in range(len(n)-1, 0, -1):\n        if n[i-1] < n[i]:\n            break\n    #if no increasing digit is found return -1\n    if i == 0:\n        return -1\n    #reverse the digits from i to the end\n    n = n[:i] + n[i:][::-1]\n    #find the first digit that is bigger than the digit before\n    for j in range(i, len(n)):\n        if n[j] > n[i-1]:\n            break\n    #if no such digit is found return -1\n    if j == len(n):\n        return -1\n    #swap the digits\n    n = n[:i-1] + n[j] + n[i-1] + n[i:j] + n[j+1:]\n    return int(n)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def next_bigger(num):\n    num_list = list(str(num))\n    i = len(num_list) - 2\n    while i >= 0:\n        if num_list[i] < num_list[i + 1]:\n            j = len(num_list) - 1\n            while j > i:\n                if num_list[j] > num_list[i]:\n                    num_list[i], num_list[j] = num_list[j], num_list[i]\n                    num_list[i + 1:] = sorted(num_list[i + 1:])\n                    return int(\"\".join(num_list))\n                j -= 1\n        i -= 1\n    return -1\n\n\nprint(next_bigger(12))\nprint(next_bigger(513))\nprint(next_bigger(2017))\nprint(next_bigger(41732211))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def next_bigger(n: int) -> int:\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(417331)\n    431713\n    \"\"\"\n    n_str = str(n)\n    n_list = list(n_str)\n    for i in range(len(n_list) - 2, -1, -1):\n        if int(n_list[i]) < int(n_list[i + 1]):\n            for j in range(len(n_list) - 1, i, -1):\n                if int(n_list[j]) > int(n_list[i]):\n                    n_list[i], n_list[j] = n_list[j], n_list[i]\n                    n_list[i + 1 :] = sorted(n_list[i + 1 :])\n                    return int(\"\".join(n_list))\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def next_bigger_number(n):\n    if n <= 10:\n        return -1\n\n    digits = list(str(n))\n\n    digits.sort(reverse=True)\n\n    for i in range(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            break\n\n    if i == len(digits) - 1:\n        return -1\n\n    for j in range(i + 1, len(digits)):\n        if digits[j] > digits[i]:\n            break\n\n    digits[i], digits[j] = digits[j], digits[i]\n\n    digits[i + 1 :] = digits[:i:-1]\n\n    return int(\"\".join(digits))\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(12) == 21\n    assert next_bigger_number(513) == 531\n    assert next_bigger_number(231) == 312\n    assert next_bigger_number(4123) == 4213\n    assert next_bigger_number(1423) == -1"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    n = str(n)\n    s = list(n)\n    i = len(s) - 1\n    while i > 0:\n        if s[i - 1] < s[i]:\n            break\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(s) - 1\n    while j > i - 1:\n        if s[j] > s[i - 1]:\n            break\n        j -= 1\n    s[i - 1], s[j] = s[j], s[i - 1]\n    s[i:] = s[len(s) - 1 : i - 1 : -1]\n    return int(\"\".join(s))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(231))\n    print(next_bigger(4321))\n    print(next_bigger(111))\n    print(next_bigger(531))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    n_list = [int(i) for i in str(n)]\n    length = len(n_list)\n    i = length - 2\n    while i >= 0:\n        if n_list[i] < n_list[i + 1]:\n            break\n        i -= 1\n    if i < 0:\n        return -1\n    j = length - 1\n    while n_list[j] >= n_list[i]:\n        j -= 1\n    n_list[i], n_list[j] = n_list[j], n_list[i]\n    n_list[i + 1:] = reversed(n_list[i + 1:])\n    return int(\"\".join(str(i) for i in n_list))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    \"\"\"\n    O(n) time | O(n) space\n    \"\"\"\n    if n < 10:\n        return -1\n\n    n_arr = list(str(n))\n    n_arr.sort(reverse=True)\n\n    i = 0\n    while i < len(n_arr) - 1:\n        if n_arr[i] < n_arr[i + 1]:\n            break\n        i += 1\n\n    if i == len(n_arr) - 1:\n        return -1\n\n    for j in range(i + 1, len(n_arr)):\n        if n_arr[j] > n_arr[i]:\n            n_arr[i], n_arr[j] = n_arr[j], n_arr[i]\n            break\n\n    n_arr[i + 1:] = n_arr[i + 1:][::-1]\n    return int(\"\".join(n_arr))\n\nif __name__ == \"__main__\":\n    # print(next_bigger(12))\n    # print(next_bigger(513))\n    # print(next_bigger(2017))\n    # print(next_bigger(2173))\n    # print(next_bigger(112))\n    # print(next_bigger(135))\n    # print(next_bigger(1000000000))\n    # print(next_bigger(1224455566))\n    print(next_bigger(1254455566))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def next_bigger(num):\n    num_list = list(str(num))\n    num_list.sort()\n\n    for i in range(len(num_list) - 2, -1, -1):\n        if num_list[i] < num_list[i + 1]:\n            for j in range(len(num_list) - 1, i, -1):\n                if num_list[j] > num_list[i]:\n                    num_list[i], num_list[j] = num_list[j], num_list[i]\n                    num_list_right = num_list[:i + 1] + num_list[i + 1 :]\n                    num_list_right.sort()\n                    return int(\"\".join(num_list[:i + 1] + num_list_right))\n\n\nprint(next_bigger(555))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    n_str = str(n)\n    n_list = list(n_str)\n    n_list_reversed = n_list[::-1]\n    for i in range(len(n_list_reversed) - 1):\n        if int(n_list_reversed[i]) < int(n_list_reversed[i + 1]):\n            for j in range(i + 1, len(n_list_reversed)):\n                if int(n_list_reversed[j]) > int(n_list_reversed[i]):\n                    n_list_reversed[i], n_list_reversed[j] = n_list_reversed[j], n_list_reversed[i]\n                    n_list_reversed = n_list_reversed[:i + 1] + sorted(n_list_reversed[i + 1:])\n                    return int(\"\".join(n_list_reversed[::-1]))\n    return -1\n\n\nprint(next_bigger(256))\nprint(next_bigger(123))\nprint(next_bigger(48))\nprint(next_bigger(10200))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    digits = list(str(n))\n    digits.reverse()\n    for i, d in enumerate(digits):\n        if int(d) < digits[i + 1]:\n            break\n\n    if i == len(digits) - 1:\n        return -1\n\n    for j in range(i + 1, len(digits)):\n        if int(digits[j]) > int(digits[i]):\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n\n    digits[i + 1 :] = reversed(digits[i + 1 :])\n    return int(\"\".join(digits))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    n = str(n)\n    if n == n[::-1]:\n        return -1\n\n    i = 0\n    while n[i] <= n[i + 1]:\n        i += 1\n\n    n = n[:i] + n[i + 1:]\n    n = n[:i][::-1] + n[i:][::-1]\n\n    return int(n)\n\n\nassert next_bigger(12) == 21\nassert next_bigger(513) == 531\nassert next_bigger(2017) == 2071\nassert next_bigger(415) == 541\nassert next_bigger(1452) == 2451\nassert next_bigger(221) == 212\nassert next_bigger(531) == 513"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def get_next_bigger_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param n: int - an integer given\n    :return: int - the next bigger number\n    \"\"\"\n    n_list = list(str(n))\n    for i in range(len(n_list) - 2, -1, -1):\n        if n_list[i] < n_list[i + 1]:\n            for j in range(len(n_list) - 1, i, -1):\n                if int(n_list[j]) > int(n_list[i]):\n                    n_list[i], n_list[j] = n_list[j], n_list[i]\n                    n_list[i + 1:] = sorted(n_list[i + 1:])\n                    return int(\"\".join(n_list))\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert get_next_bigger_number(218765) == 251678\n    assert get_next_bigger_number(5218765) == 5251678\n    assert get_next_bigger_number(123456789) == 123457689\n    assert get_next_bigger_number(1234567891) == 1234567891\n    assert get_next_bigger_number(1234567890) == -1\n    assert get_next_bigger_number(987654321) == -1"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def next_bigger(num):\n    \"\"\"\n    Find the next bigger number.\n    \"\"\"\n    nums = str(num)\n    # Get a list of the digits in the number\n    nums_list = [int(i) for i in nums]\n    # Get the digits in reverse order\n    nums_list_reverse = nums_list[::-1]\n    # Get the length of the list\n    length = len(nums_list)\n    # Get the index of the first digit that is less than the digit in the next position\n    for i in range(length - 1):\n        if nums_list_reverse[i] < nums_list_reverse[i + 1]:\n            break\n    # Get the index of the first digit that is greater than the digit in the next position\n    for j in range(length - 1, i, -1):\n        if nums_list_reverse[j] > nums_list_reverse[i]:\n            break\n    # Swap the two digits\n    nums_list_reverse[i], nums_list_reverse[j] = nums_list_reverse[j], nums_list_reverse[i]\n    # Reverse the digits\n    nums_list_reverse = nums_list_reverse[i + 1 :]\n    nums_list_reverse.reverse()\n    # Add the digits to the first part of the number\n    return int(\"\".join([str(i) for i in nums_list[: i + 1] + nums_list_reverse]))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))\n    print(next_bigger(41732211))\n    print(next_bigger(14421))\n    print(next_bigger(112))\n    print(next_bigger(121))\n    print(next_bigger(4321))\n    print(next_bigger(12345))\n    print(next_b"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def next_bigger_number(n):\n    n_str = str(n)\n    n_list = list(n_str)\n    for i in range(len(n_list) - 1, 0, -1):\n        if n_list[i - 1] < n_list[i]:\n            break\n    else:\n        return -1\n    for j in range(len(n_list) - 1, i - 1, -1):\n        if n_list[j] > n_list[i - 1]:\n            break\n    n_list[i - 1], n_list[j] = n_list[j], n_list[i - 1]\n    n_list[i:] = reversed(n_list[i:])\n    return int(''.join(n_list))\n\nprint(next_bigger_number(12))\nprint(next_bigger_number(513))\nprint(next_bigger_number(2017))\nprint(next_bigger_number(452))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef next_bigger(n: int) -> int:\n    \"\"\"\n    If the number is not a palindrome, we can swap the first and the last digit\n    and reverse the remaining digits.\n    If the number is a palindrome, we need to find the largest number that\n    is smaller than the input number.\n    \"\"\"\n    num: List[int] = []\n    for digit in str(n):\n        num.append(int(digit))\n\n    if is_palindrome(num):\n        return -1\n\n    swap_index = len(num) - 1\n    for i in range(len(num) - 2, -1, -1):\n        if num[i] < num[swap_index]:\n            swap_index = i\n\n    num[swap_index], num[-1] = num[-1], num[swap_index]\n    num = num[:-1]\n\n    num.reverse()\n\n    return int(\"\".join([str(n) for n in num]))\n\n\ndef is_palindrome(num: List[int]) -> bool:\n    \"\"\"\n    Check if the number is a palindrome.\n    \"\"\"\n    i, j = 0, len(num) - 1\n\n    while i < j:\n        if num[i] != num[j]:\n            return False\n        i += 1\n        j -= 1\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert next_bigger(12) == 21\n    assert next_bigger(523) == 532\n    assert next_bigger(222) == -1\n    assert next_bigger(121) == 112\n    assert next_bigger(532) == 532\n    assert next_bigger(4523) == 5234\n    assert next_bigger(12345) == 12435\n    assert next_bigger(12354) == 12435\n    assert next_bigger(14532) == 1523"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def next_bigger_number(number):\n    number = list(map(int, str(number)))\n    for i in range(len(number) - 2, -1, -1):\n        if number[i] < number[i + 1]:\n            for j in range(len(number) - 1, i, -1):\n                if number[j] > number[i]:\n                    number[i], number[j] = number[j], number[i]\n                    number[i + 1:] = number[i + 1:][::-1]\n                    return int(\"\".join(map(str, number)))\n    return -1\n\n\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    print(next_bigger_number(number))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def next_bigger(n: int) -> int:\n    \"\"\"\n    :param n: number\n    :return: next bigger number\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(414)\n    441\n    >>> next_bigger(1442)\n    2414\n    \"\"\"\n    a = [int(i) for i in str(n)]\n    i = len(a) - 1\n    while i > 0:\n        if a[i - 1] < a[i]:\n            break\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(a) - 1\n    while j > i - 1:\n        if a[j] > a[i - 1]:\n            break\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i:] = a[len(a) - 1 : i - 1 : -1]\n    return int(\"\".join(map(str, a)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    nums = list(str(n))\n    if len(nums) == 1:\n        return None\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]:\n            for j in range(i+1, len(nums)):\n                if nums[j] > nums[i]:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    break\n            break\n    else:\n        return None\n    for k in range(i+1, (i+len(nums))//2):\n        nums[k], nums[-(k-i-1)] = nums[-(k-i-1)], nums[k]\n    return int(''.join(nums))\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter number: \"))\n    print(\"Next bigger number:\", next_bigger(num))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def bigger_number(number):\n    number_str = str(number)\n    number_list = list(number_str)\n    number_list.sort()\n    number_str = \"\".join(number_list)\n    return int(number_str[::-1])\n\n\nprint(bigger_number(12345))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def bigger_number(number):\n    number_list = [int(digit) for digit in str(number)]\n    number_list.sort(reverse=True)\n    return int(\"\".join([str(digit) for digit in number_list]))\n\n\nprint(bigger_number(12))\nprint(bigger_number(21))\nprint(bigger_number(531))\nprint(bigger_number(2017))\nprint(bigger_number(9))\nprint(bigger_number(2))\nprint(bigger_number(111))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    \"\"\"\n    >>> next_bigger(123)\n    321\n    >>> next_bigger(111)\n    >>> next_bigger(9)\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        for j in range(i-1, -1, -1):\n            if digits[i] > digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n                return int(\"\".join(map(str, digits[:i+1] + sorted(digits[i+1:]))))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(417331)\n    431713\n    >>> next_bigger(1203)\n    2031\n    >>> next_bigger(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: No next bigger number exists\n    \"\"\"\n    n = str(n)\n    if n == ''.join(sorted(n)):\n        raise ValueError(\"No next bigger number exists\")\n    arr = list(n)\n    i = len(arr) - 2\n    while i >= 0:\n        if arr[i] < arr[i + 1]:\n            break\n        i -= 1\n    j = len(arr) - 1\n    while j > i:\n        if arr[j] > arr[i]:\n            break\n        j -= 1\n    arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1:] = arr[i + 1:][::-1]\n    return int(''.join(arr))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def next_bigger(num):\n    \"\"\"\n    Convert a number to string, find the first decreasing digit and swap it with the smallest digit after it.\n    \"\"\"\n    nums = list(str(num))\n    i = len(nums) - 1\n    while i > 0:\n        if nums[i - 1] < nums[i]:\n            j = i\n            while j < len(nums):\n                if nums[j] > nums[i - 1]:\n                    nums[i - 1], nums[j] = nums[j], nums[i - 1]\n                    break\n                j += 1\n            nums = nums[:i] + sorted(nums[i:])\n            return int(''.join(nums))\n        i -= 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert next_bigger(12) == 21\n    assert next_bigger(513) == 531\n    assert next_bigger(2017) == 2071\n    assert next_bigger(414) == 441\n    assert next_bigger(144) == -1"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def bigger_number(number):\n    digits = [int(digit) for digit in str(number)]\n    digits.sort(reverse=True)\n\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(bigger_number(12345))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from functools import cmp_to_key\n\n\ndef bigger_number(num):\n    num = list(str(num))\n    num.sort(key=cmp_to_key(lambda x, y: 1 if x < y else -1))\n    return int(''.join(num))\n\n\nif __name__ == '__main__':\n    print(bigger_number(35))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def bigger_number(number):\n    number = str(number)\n    digits = sorted(list(number))\n    for i in range(len(digits) - 1):\n        if digits[i] == digits[i + 1]:\n            continue\n        else:\n            first_index = digits.index(digits[i])\n            second_index = digits.index(digits[i + 1])\n            digits[first_index], digits[second_index] = digits[second_index], digits[first_index]\n            return int(\"\".join(digits))\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(bigger_number(12))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def swap(nums, i, j):\n    temp = nums[i]\n    nums[i] = nums[j]\n    nums[j] = temp\n\n\ndef swap_2(nums, i, j):\n    nums[i], nums[j] = nums[j], nums[i]\n\n\ndef swap_3(nums, i, j):\n    nums[i], nums[j] = nums[j], nums[i]\n\n\ndef next_bigger(num):\n    nums = list(str(num))\n    i = len(nums) - 2\n    j = len(nums) - 1\n\n    while i >= 0:\n        if nums[i] < nums[j]:\n            swap(nums, i, j)\n            break\n        i -= 1\n        j -= 1\n\n    nums_sorted = sorted(nums[i + 1:])\n    for k in range(len(nums_sorted)):\n        nums[i + k + 1] = nums_sorted[k]\n\n    return int(\"\".join(nums))\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def next_bigger(num):\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(414)\n    441\n    \"\"\"\n    num = str(num)\n    if num == num[::-1]:\n        return -1\n    else:\n        num_list = [int(i) for i in num]\n        index = 0\n        while num_list[index] >= num_list[index + 1]:\n            index += 1\n        index2 = index + 1\n        while num_list[index2] <= num_list[index]:\n            index2 += 1\n        num_list[index], num_list[index2 - 1] = num_list[index2 - 1], num_list[index]\n        return int(\"\".join([str(i) for i in num_list[:index + 1] + sorted(num_list[index + 1:])]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    n = list(str(n))\n    for i in range(len(n) - 2, -1, -1):\n        if n[i] < n[i + 1]:\n            min_idx = i + 1\n            for j in range(len(n) - 1, i - 1, -1):\n                if n[j] > n[i]:\n                    min_idx = j\n                    break\n            n[i], n[min_idx] = n[min_idx], n[i]\n            n = n[:i + 1] + sorted(n[i + 1:])\n            return int(\"\".join(n))\n    return -1\n\n\nprint(next_bigger(12))\nprint(next_bigger(513))\nprint(next_bigger(2017))\nprint(next_bigger(41732211))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def next_bigger(n):\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    7201\n    >>> next_bigger(4321)\n    1234\n    \"\"\"\n    n = str(n)\n    digits = [int(x) for x in n]\n    digits.sort()\n    digits.reverse()\n    for i in range(len(digits)):\n        if digits[i] > digits[i - 1]:\n            break\n    if i == len(digits) - 1:\n        return -1\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i - 1]:\n            break\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    return int(\"\".join([str(x) for x in digits]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def get_next_bigger(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param n: int - number to be rearranged\n    :return: next bigger number\n    \"\"\"\n    n_str = str(n)\n    n_list = list(n_str)\n    i = len(n_list) - 1\n    while i > 0:\n        if n_list[i] > n_list[i - 1]:\n            break\n        i -= 1\n\n    if i == 0:\n        return -1\n\n    j = i - 1\n    while n_list[j] <= n_list[i]:\n        j -= 1\n\n    n_list[i - 1], n_list[j] = n_list[j], n_list[i - 1]\n    n_list[i:] = n_list[i + 1 :] + n_list[i : i + 1]\n    return int(\"\".join(n_list))\n\n\nif __name__ == \"__main__\":\n    print(get_next_bigger(12))\n    print(get_next_bigger(513))\n    print(get_next_bigger(231))\n    print(get_next_bigger(4321))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef next_bigger_number(num: int) -> int:\n    \"\"\"\n    This function takes an integer number and returns the next bigger number by rearranging the digits.\n    >>> next_bigger_number(12)\n    21\n    >>> next_bigger_number(513)\n    531\n    >>> next_bigger_number(2017)\n    2071\n    >>> next_bigger_number(2071)\n    2710\n    >>> next_bigger_number(73)\n    73\n    >>> next_bigger_number(555)\n    555\n    >>> next_bigger_number(5555)\n    5555\n    >>> next_bigger_number(9)\n    9\n    >>> next_bigger_number(123456789)\n    123456789\n    >>> next_bigger_number(987654321)\n    987654321\n    >>> next_bigger_number(100)\n    100\n    >>> next_bigger_number(1000)\n    1000\n    >>> next_bigger_number(-1)\n    -1\n    >>> next_bigger_number(-100)\n    -100\n    >>> next_bigger_number(-1000)\n    -1000\n    >>> next_bigger_number(-10000000)\n    -10000000\n    \"\"\"\n    number_list: List[int] = [int(i) for i in str(num)]\n    number_list.sort(reverse=True)\n\n    for i in range(len(number_list) - 1):\n        if number_list[i] < number_list[i + 1]:\n            break\n\n    if i == len(number_list) - 1:\n        return -1\n\n    for j in range(len(number_list) - 1, i, -1):\n        if number"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from functools import cmp_to_key\n\n\ndef next_bigger(n: int) -> int:\n    \"\"\"Return next bigger number by rearranging digits of a number.\"\"\"\n    digits = [int(d) for d in str(n)]\n    if len(digits) < 2:\n        return -1\n    digits.sort(reverse=True)\n    for i, d in enumerate(digits[:-1]):\n        if d < digits[i + 1]:\n            i += 1\n            break\n    else:\n        return -1\n    return int(\"\".join([str(d) for d in digits[:i] + sorted(digits[i:])]))\n\n\ndef next_bigger_cmp(n: int) -> int:\n    \"\"\"Return next bigger number by rearranging digits of a number.\"\"\"\n    digits = [int(d) for d in str(n)]\n    if len(digits) < 2:\n        return -1\n    digits.sort(reverse=True)\n    for i, d in enumerate(digits[:-1]):\n        if d < digits[i + 1]:\n            i += 1\n            break\n    else:\n        return -1\n    return int(\"\".join([str(d) for d in digits[:i] + sorted(digits[i:])]))\n\n\ndef next_bigger_sort(n: int) -> int:\n    \"\"\"Return next bigger number by rearranging digits of a number.\"\"\"\n    digits = [int(d) for d in str(n)]\n    if len(digits) < 2:\n        return -1\n    digits.sort(reverse=True)\n    for i, d in enumerate(digits[:-1]):\n        if d < digits[i + 1]:\n            i += 1\n            break\n    else:\n        return -1\n    return int(\"\".join([str(d) for d in sorted(digits[:i] + digits[i:])]))\n\n\ndef next_bigger_sort_key(n: int) -> int:\n    \"\"\"Return next bigger number by rearranging digits of a number.\"\"\"\n    digits = [int("
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef get_next_bigger(number: int) -> int:\n    \"\"\"\n    Get the next bigger number by rearranging the digits of a given number.\n    :param number:\n    :return:\n    >>> get_next_bigger(12345)\n    12534\n    >>> get_next_bigger(12344)\n    12434\n    >>> get_next_bigger(12343)\n    >>> get_next_bigger(14234)\n    14234\n    >>> get_next_bigger(14324)\n    13424\n    >>> get_next_bigger(14342)\n    13424\n    >>> get_next_bigger(12324)\n    12432\n    >>> get_next_bigger(12432)\n    12432\n    \"\"\"\n    digits: List[int] = [int(digit) for digit in str(number)]\n    for index in range(len(digits) - 1, 0, -1):\n        if digits[index - 1] < digits[index]:\n            break\n    else:\n        return\n    swap_index = None\n    for index in range(len(digits) - 1, index - 1, -1):\n        if digits[index] > digits[index - 1]:\n            swap_index = index\n            break\n    digits[index - 1], digits[swap_index] = digits[swap_index], digits[index - 1]\n    digits[index:] = reversed(digits[index:])\n    return int(\"\".join([str(digit) for digit in digits]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def next_bigger_number(number: int) -> int:\n    \"\"\"Returns next bigger number by rearranging the digits of a given number.\n\n    Args:\n        number (int): Given number.\n\n    Returns:\n        int: Next bigger number.\n    \"\"\"\n    # We need to convert number to a string, otherwise we will get an error, because we will try to sort a number\n    # as a string.\n    number = str(number)\n    # We will reverse the string, so we can work with it as a stack.\n    reversed_number = number[::-1]\n    # We will use this variable to keep track of the last index of the reversed number, where we have a digit, that is\n    # lower than the digit, that is after it.\n    last_lower_digit_index = -1\n    # We will use this variable to keep track of the first index of the reversed number, where we have a digit, that is\n    # higher than the digit, that is after it.\n    first_higher_digit_index = -1\n    # We will use this variable to keep track of the first index of the reversed number, where we have a digit, that is\n    # lower than the digit, that is after it.\n    first_lower_digit_index = -1\n    # We will use this variable to keep track of the first index of the reversed number, where we have a digit, that is\n    # higher than the digit, that is after it.\n    first_higher_digit_index = -1\n    # We will use this variable to keep track of the first index of the reversed number, where we have a digit, that is\n    # lower than the digit, that is after it.\n    last_lower_digit_index = -1\n    # We will use this variable to keep track of the index of the reversed number, where the digit is the highest.\n    highest_digit_index = -1\n\n    # We will iterate through all digits of the reversed number.\n    for i in range(len(reversed_number)):\n        # We will get the current digit.\n        current_digit = reversed_number[i]\n        # If the digit is a"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def bigger_number(number):\n    \"\"\"\n    >>> bigger_number(1234)\n    2134\n    >>> bigger_number(5134)\n    5214\n    >>> bigger_number(2214)\n    2241\n    >>> bigger_number(5214)\n    5241\n    \"\"\"\n    number = str(number)\n    digits = []\n    for digit in number:\n        digits.append(int(digit))\n    digits.sort(reverse=True)\n    return int(\"\".join(str(digit) for digit in digits))\n\n\ndef bigger_number_eff(number):\n    \"\"\"\n    >>> bigger_number_eff(1234)\n    2134\n    >>> bigger_number_eff(5134)\n    5214\n    >>> bigger_number_eff(2214)\n    2241\n    >>> bigger_number_eff(5214)\n    5241\n    \"\"\"\n    number = str(number)\n    digits = [int(digit) for digit in number]\n    digits.sort(reverse=True)\n    return int(\"\".join(str(digit) for digit in digits))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def next_bigger_number(num: int) -> int:\n    \"\"\"\n    >>> next_bigger_number(12)\n    21\n    >>> next_bigger_number(513)\n    531\n    >>> next_bigger_number(2017)\n    2071\n    >>> next_bigger_number(41732211)\n    42131721\n    \"\"\"\n    num_str = str(num)\n    size = len(num_str)\n    if size == 1:\n        return -1\n    elif size == 2:\n        return int(min(num_str[1], num_str[0]) + max(num_str[1], num_str[0]))\n\n    arr = [int(i) for i in num_str]\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            break\n\n    if i == 0:\n        return -1\n\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    arr[i:] = arr[len(arr) - 1 : i - 1 : -1]\n\n    return int(\"\".join([str(i) for i in arr]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def next_bigger(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    arr = [int(i) for i in str(n)]\n    arr = sorted(arr, reverse=True)\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            break\n        i += 1\n    if i == len(arr) - 1:\n        return -1\n    temp = arr[i + 1]\n    arr[i + 1] = arr[i]\n    arr[i] = temp\n    arr = sorted(arr, reverse=True)\n    return int(\"\".join(map(str, arr)))\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (12, 21),\n        (513, 531),\n        (2017, 7201),\n        (102, -1),\n        (1752, 2715),\n        (21, -1),\n    ]\n    for (n, expected) in test_cases:\n        assert next_bigger(n) == expected"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution:\n    def get_next_bigger(self, num: int) -> int:\n        num_list = list(str(num))\n        for i in range(len(num_list) - 1, 0, -1):\n            if num_list[i - 1] < num_list[i]:\n                j = i\n                while j < len(num_list):\n                    if num_list[j] > num_list[i - 1]:\n                        break\n                    j += 1\n                num_list[i - 1], num_list[j - 1] = num_list[j - 1], num_list[i - 1]\n                num_list[i:] = num_list[i:][::-1]\n                return int(\"\".join(num_list))\n        return -1\n\n\nif __name__ == \"__main__\":\n    inp = 12\n    out = 21\n    res = Solution().get_next_bigger(inp)\n    assert res == out, (res, out)\n\n    inp = 21\n    out = -1\n    res = Solution().get_next_bigger(inp)\n    assert res == out, (res, out)\n\n    inp = 4512\n    out = 5142\n    res = Solution().get_next_bigger(inp)\n    assert res == out, (res, out)\n\n    inp = 123\n    out = 213\n    res = Solution().get_next_bigger(inp)\n    assert res == out, (res, out)\n\n    inp = 1245\n    out = 2145\n    res = Solution().get_next_bigger(inp)\n    assert res == out, (res, out)\n\n    inp = 23145\n    out = 23154\n    res = Solution().get_next_bigger(inp)\n    assert res == out, (res, out)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\ndef next_bigger(num):\n    num = str(num)\n    if len(num) < 2:\n        return -1\n    if num == \"\".join(sorted(num)):\n        return -1\n\n    arr = [int(x) for x in num]\n\n    idx1 = -1\n    idx2 = -1\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                idx1 = i\n                idx2 = j\n\n    arr[idx1], arr[idx2] = arr[idx2], arr[idx1]\n    res = \"\".join([str(x) for x in arr])\n    return int(res)\n\n\ndef main():\n    print(next_bigger(12))\n    print(next_bigger(513))\n    print(next_bigger(2017))\n    print(next_bigger(452))\n\n\nmain()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def next_bigger(n: int) -> int:\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    7120\n    >>> next_bigger(41732211)\n    11213274\n    >>> next_bigger(102)\n    Traceback (most recent call last):\n    ...\n    ValueError: input must be a positive integer.\n    >>> next_bigger(100)\n    Traceback (most recent call last):\n    ...\n    ValueError: input must be a positive integer.\n    >>> next_bigger(123)\n    Traceback (most recent call last):\n    ...\n    ValueError: input must be a positive integer.\n    >>> next_bigger(120)\n    Traceback (most recent call last):\n    ...\n    ValueError: input must be a positive integer.\n    >>> next_bigger(123456789)\n    Traceback (most recent call last):\n    ...\n    ValueError: input must be a positive integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"input must be a positive integer.\")\n    if n < 10:\n        return n\n    digits = list(str(n))\n    digits.reverse()\n    for i in range(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            for j in range(i + 1, len(digits)):\n                if digits[j] > digits[i]:\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n            else:\n                continue\n            digits[i + 1 :] = reversed(digits[i + 1 :])\n            return int(\"\".join(digits))\n    raise ValueError(\"no bigger number found.\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef next_bigger(n: int) -> int:\n    \"\"\"Return the next bigger number by rearranging the digits of a given number.\n\n    Args:\n        n (int): input number\n\n    Examples:\n        >>> next_bigger(12)\n        21\n        >>> next_bigger(513)\n        531\n        >>> next_bigger(2017)\n        2071\n        >>> next_bigger(414)\n        441\n    \"\"\"\n    digits = get_digits(n)\n    idx = len(digits) - 1\n    while idx > 0:\n        if digits[idx - 1] < digits[idx]:\n            break\n        idx -= 1\n    if idx == 0:\n        return -1\n    for j in range(idx, len(digits)):\n        if digits[j] > digits[idx - 1]:\n            digits[idx - 1], digits[j] = digits[j], digits[idx - 1]\n            break\n    return int(\"\".join(map(str, digits[:idx] + sorted(digits[idx:]))))\n\n\ndef get_digits(n: int) -> List[int]:\n    \"\"\"Return the list of digits of a given number.\n\n    Args:\n        n (int): input number\n\n    Examples:\n        >>> get_digits(12)\n        [1, 2]\n        >>> get_digits(513)\n        [5, 1, 3]\n        >>> get_digits(2017)\n        [2, 0, 1, 7]\n    \"\"\"\n    return [int(digit) for digit in str(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def rearrange_digits(number: int) -> int:\n    \"\"\"\n    Solution with O(n * log n) time complexity and O(n) space complexity, where n is the number of digits.\n    \"\"\"\n    if number < 10:\n        return number\n\n    digits = [int(digit) for digit in str(number)]\n    digits.sort(reverse=True)\n\n    next_bigger = 0\n    for i, digit in enumerate(digits):\n        next_bigger += digit * 10**i\n\n    return next_bigger\n\n\nif __name__ == \"__main__\":\n    assert rearrange_digits(12345) == 12534\n    assert rearrange_digits(59876) == 67895\n    assert rearrange_digits(12) == 21\n    assert rearrange_digits(123456789) == 123485769"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def next_bigger(num: int) -> int:\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(4153)\n    4315\n    \"\"\"\n    num = str(num)\n    num_list = list(num)\n    num_list.sort(reverse=True)\n    i = 0\n\n    while i < len(num_list):\n        if num_list[i] < num_list[i + 1]:\n            break\n        i += 1\n    else:\n        return -1\n\n    j = i + 1\n\n    while j < len(num_list):\n        if num_list[j] > num_list[i]:\n            break\n        j += 1\n\n    num_list[i], num_list[j - 1] = num_list[j - 1], num_list[i]\n    num_list = num_list[:i + 1] + num_list[i + 1 :]\n    return int(\"\".join(num_list))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def next_bigger(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    num_list = [int(i) for i in str(n)]\n    num_list = sorted(num_list, reverse=True)\n    for i, _ in enumerate(num_list):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i - 1], num_list[i] = num_list[i], num_list[i - 1]\n            return int(\"\".join(map(str, num_list)))\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert next_bigger(12) == 21\n    assert next_bigger(513) == 531\n    assert next_bigger(2017) == 2071\n    assert next_bigger(4173319) == 4317193\n    assert next_bigger(14463798) == 14863479"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def next_bigger(num: int) -> int:\n    \"\"\"\n    >>> next_bigger(12)\n    21\n    >>> next_bigger(513)\n    531\n    >>> next_bigger(2017)\n    2071\n    >>> next_bigger(417329)\n    421379\n    >>> next_bigger(1442)\n    1424\n    >>> next_bigger(1)\n    1\n    \"\"\"\n    num_list = list(str(num))\n    num_list.sort(reverse=True)\n    for i in range(len(num_list) - 1):\n        if num_list[i] < num_list[i + 1]:\n            start_idx = i\n            break\n    else:\n        return num\n    end_idx = start_idx + 1\n    while end_idx < len(num_list) and num_list[end_idx] <= num_list[start_idx]:\n        end_idx += 1\n    end_idx -= 1\n    num_list[start_idx], num_list[end_idx] = num_list[end_idx], num_list[start_idx]\n    num_list[start_idx + 1 :] = reversed(num_list[start_idx + 1 :])\n    return int(\"\".join(num_list))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def next_bigger(n):\n    \"\"\"\n    Next bigger number\n    \"\"\"\n    n_str = str(n)\n    i = len(n_str) - 2\n    while i >= 0:\n        if n_str[i] < n_str[i+1]:\n            j = len(n_str) - 1\n            while n_str[j] <= n_str[i]:\n                j -= 1\n            n_str = n_str[:i] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]\n            return int(n_str)\n        i -= 1\n    return -1\n\ndef test_next_bigger():\n    \"\"\"run test cases\"\"\"\n    assert next_bigger(12) == 21\n    assert next_bigger(513) == 531\n    assert next_bigger(2017) == 2071\n    assert next_bigger(414) == -1\n\nif __name__ == '__main__':\n    test_next_bigger()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import Optional\n\n\ndef next_bigger(n: int) -> Optional[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Only non-negative integers are supported\")\n\n    digits = [int(digit) for digit in str(n)]\n    index = len(digits) - 1\n\n    while index > 0:\n        if digits[index - 1] < digits[index]:\n            break\n        index -= 1\n\n    if index == 0:\n        return None\n\n    min_index = index\n    min_value = digits[index]\n\n    for i in range(index + 1, len(digits)):\n        if digits[i] < min_value:\n            min_index = i\n            min_value = digits[i]\n\n    digits[index], digits[min_index] = digits[min_index], digits[index]\n    digits[index + 1:] = digits[index + 1:][::-1]\n\n    return int(\"\".join([str(digit) for digit in digits]))\n\n\nif __name__ == \"__main__\":\n    assert next_bigger(12) == 21\n    assert next_bigger(513) == 531\n    assert next_bigger(231) == 123\n    assert next_bigger(415) == 541\n    assert next_bigger(1452) == 2451\n    assert next_bigger(2653) == 3256\n    assert next_bigger(4526) == 2645\n    assert next_bigger(6253) == 3256\n    assert next_bigger(6523) == 2356\n    assert next_bigger(1253) == 3251\n    assert next_bigger(5231) == 3251\n    assert next_bigger(21) is None\n    assert next_bigger(-152"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def next_bigger(num):\n    num = list(str(num))\n    for i in range(len(num) - 2, -1, -1):\n        for j in range(i + 1, len(num)):\n            if num[i] < num[j]:\n                num[i], num[j] = num[j], num[i]\n                num[i + 1 :] = num[i + 1 :][::-1]\n                return int(\"\".join(num))\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(next_bigger(12))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from itertools import permutations\n\ndef next_bigger(n):\n    n = str(n)\n    if n == n[::-1]:\n        return -1\n    else:\n        for i in permutations(n):\n            if i > n:\n                return int(\"\".join(i))\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert next_bigger(12) == 21, \"12 -> 21\"\n    assert next_bigger(513) == 531, \"513 -> 531\"\n    assert next_bigger(2017) == 2071, \"2017 -> 2071\"\n    assert next_bigger(414) == 441, \"414 -> 441\"\n    assert next_bigger(1442) == 1244, \"1442 -> 1244\""
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def next_bigger(n):\n    n_str = str(n)\n    n_list = list(n_str)\n\n    for i in range(len(n_list)-2, -1, -1):\n        min_idx = i\n        for j in range(i+1, len(n_list)):\n            if n_list[j] > n_list[min_idx] and n_list[j] < n_list[i]:\n                min_idx = j\n\n        if min_idx != i:\n            n_list[i], n_list[min_idx] = n_list[min_idx], n_list[i]\n            break\n\n    return int(\"\".join(n_list[::-1]))\n\n\nif __name__ == \"__main__\":\n    test_cases = [12, 531, 2017]\n    results = [2112, 513, 7210]\n    for i in range(len(test_cases)):\n        assert next_bigger(test_cases[i]) == results[i]"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef next_bigger_number(num: int) -> int:\n    \"\"\"\n    >>> next_bigger_number(12)\n    21\n    >>> next_bigger_number(513)\n    531\n    >>> next_bigger_number(2017)\n    2071\n    >>> next_bigger_number(41732211)\n    42131721\n    \"\"\"\n    digits: List[int] = []\n\n    while num:\n        digits.append(num % 10)\n        num //= 10\n\n    next_bigger: int = -1\n\n    for i in range(len(digits) - 1):\n        for j in range(i + 1, len(digits)):\n            if digits[i] < digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n\n                next_bigger = 0\n\n                for k in range(len(digits)):\n                    next_bigger = next_bigger * 10 + digits[k]\n\n                return next_bigger\n\n    return next_bigger\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def rearrange_digits(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if number < 10:\n        return number\n\n    digits = [int(digit) for digit in str(number)]\n    digits.sort(reverse=True)\n\n    return int(\"\".join(map(str, digits)))\n\n\nif __name__ == \"__main__\":\n    assert rearrange_digits(12345) == 54321\n    assert rearrange_digits(598) == 985"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def get_next_bigger(num: int) -> int:\n    \"\"\"\n    get next bigger number by rearranging the digits of a given number\n    :param num: integer number\n    :return: next bigger number\n\n    >>> get_next_bigger(12)\n    21\n    >>> get_next_bigger(513)\n    531\n    >>> get_next_bigger(2017)\n    2071\n    >>> get_next_bigger(41732211)\n    41132217\n    >>> get_next_bigger(19)\n    Traceback (most recent call last):\n        ...\n    ValueError: input number must contain more than 1 digit\n    >>> get_next_bigger(121)\n    Traceback (most recent call last):\n        ...\n    ValueError: input number must contain more than 1 digit\n    \"\"\"\n    if num < 10:\n        raise ValueError(\"input number must contain more than 1 digit\")\n    num_list = [int(i) for i in str(num)]\n    index = len(num_list) - 1\n    while index > 0:\n        if num_list[index - 1] < num_list[index]:\n            break\n        index -= 1\n    if index == 0:\n        return -1\n    swap_index = index\n    while swap_index < len(num_list):\n        if num_list[swap_index] > num_list[index - 1]:\n            break\n        swap_index += 1\n    num_list[swap_index], num_list[index - 1] = num_list[index - 1], num_list[swap_index]\n    num_list[index:-1] = num_list[index - 1 : -1]\n    return int(\"\".join([str(i) for i in num_list]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def next_bigger(number):\n    if number < 10:\n        return -1\n\n    num_str = str(number)\n    num_list = list(map(int, num_str))\n    max_index = num_list.index(max(num_list))\n    for i in range(max_index, len(num_list)):\n        if num_list[i] < num_list[max_index]:\n            break\n\n    num_list[i], num_list[max_index] = num_list[max_index], num_list[i]\n    num_list[max_index + 1:] = sorted(num_list[max_index + 1:])\n    return int(\"\".join(map(str, num_list)))\n\n\ndef test_next_bigger():\n    assert next_bigger(983456) == 985634\n    assert next_bigger(123456) == 123546\n    assert next_bigger(567890) == -1\n    assert next_bigger(102345) == 102354\n    assert next_bigger(111111) == -1\n    assert next_bigger(13579) == 13597\n    assert next_bigger(101112) == 110112\n    assert next_bigger(13579) == 13597\n    assert next_bigger(101112) == 110112\n    assert next_bigger(13579) == 13597\n    assert next_bigger(101112) == 110112\n\n\nif __name__ == \"__main__\":\n    test_next_bigger()"
    }
  ]
}